!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=356)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(s(e,t))return!1;return!0}function l(e){return void 0===e}function d(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function f(e,t){var n,r=[],a=e.length;for(n=0;n<a;++n)r.push(t(e[n],n));return r}function m(e,t){for(var n in t)s(t,n)&&(e[n]=t[n]);return s(t,"toString")&&(e.toString=t.toString),s(t,"valueOf")&&(e.valueOf=t.valueOf),e}function _(e,t,n,r){return Yt(e,t,n,r,!0).utc()}function p(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function h(e){var t=null,n=!1,a=e._d&&!isNaN(e._d.getTime());return a&&(t=p(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n),e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)),null!=Object.isFrozen&&Object.isFrozen(e)?a:(e._isValid=a,e._isValid)}function y(e){var t=_(NaN);return null!=e?m(p(t),e):p(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var g=a.momentProperties=[],M=!1;function v(e,t){var n,r,a,i=g.length;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=p(t)),l(t._locale)||(e._locale=t._locale),i>0)for(n=0;n<i;n++)l(a=t[r=g[n]])||(e[r]=a);return e}function b(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,a.updateOffset(this),M=!1)}function L(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function k(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function w(e,t){var n=!0;return m((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,i,o,u=[],l=arguments.length;for(i=0;i<l;i++){if(r="","object"==typeof arguments[i]){for(o in r+="\n["+i+"] ",arguments[0])s(arguments[0],o)&&(r+=o+": "+arguments[0][o]+", ");r=r.slice(0,-2)}else r=arguments[i];u.push(r)}k(e+"\nArguments: "+Array.prototype.slice.call(u).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var Y,T={};function D(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),T[e]||(k(t),T[e]=!0)}function S(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,r=m({},e);for(n in t)s(t,n)&&(o(e[n])&&o(t[n])?(r[n]={},m(r[n],e[n]),m(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)s(e,n)&&!s(t,n)&&o(e[n])&&(r[n]=m({},r[n]));return r}function j(e){null!=e&&this.set(e)}function O(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,Y=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)s(e,t)&&n.push(t);return n};var E=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,H=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,P={},A={};function C(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(A[e]=a),t&&(A[t[0]]=function(){return O(a.apply(this,arguments),t[1],t[2])}),n&&(A[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function N(e,t){return e.isValid()?(t=F(t,e.localeData()),P[t]=P[t]||function(e){var t,n,r,a=e.match(E);for(t=0,n=a.length;t<n;t++)A[a[t]]?a[t]=A[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=S(a[r])?a[r].call(t,e):a[r];return i}}(t),P[t](e)):e.localeData().invalidDate()}function F(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(H.lastIndex=0;n>=0&&H.test(e);)e=e.replace(H,r),H.lastIndex=0,n-=1;return e}var W={D:"date",dates:"date",date:"date",d:"day",days:"day",day:"day",e:"weekday",weekdays:"weekday",weekday:"weekday",E:"isoWeekday",isoweekdays:"isoWeekday",isoweekday:"isoWeekday",DDD:"dayOfYear",dayofyears:"dayOfYear",dayofyear:"dayOfYear",h:"hour",hours:"hour",hour:"hour",ms:"millisecond",milliseconds:"millisecond",millisecond:"millisecond",m:"minute",minutes:"minute",minute:"minute",M:"month",months:"month",month:"month",Q:"quarter",quarters:"quarter",quarter:"quarter",s:"second",seconds:"second",second:"second",gg:"weekYear",weekyears:"weekYear",weekyear:"weekYear",GG:"isoWeekYear",isoweekyears:"isoWeekYear",isoweekyear:"isoWeekYear",w:"week",weeks:"week",week:"week",W:"isoWeek",isoweeks:"isoWeek",isoweek:"isoWeek",y:"year",years:"year",year:"year"};function z(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function I(e){var t,n,r={};for(n in e)s(e,n)&&(t=z(n))&&(r[t]=e[n]);return r}var R,U={date:9,day:11,weekday:11,isoWeekday:11,dayOfYear:4,hour:13,millisecond:16,minute:14,month:8,quarter:7,second:15,weekYear:1,isoWeekYear:1,week:5,isoWeek:5,year:1},B=/\d/,J=/\d\d/,$=/\d{3}/,V=/\d{4}/,q=/[+-]?\d{6}/,G=/\d\d?/,K=/\d\d\d\d?/,Q=/\d\d\d\d\d\d?/,Z=/\d{1,3}/,X=/\d{1,4}/,ee=/[+-]?\d{1,6}/,te=/\d+/,ne=/[+-]?\d+/,re=/Z|[+-]\d\d:?\d\d/gi,ae=/Z|[+-]\d\d(?::?\d\d)?/gi,ie=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,oe=/^[1-9]\d?/,se=/^([1-9]\d|\d)/;function ue(e,t,n){R[e]=S(t)?t:function(e,r){return e&&n?n:t}}function le(e,t){return s(R,e)?R[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ce(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function fe(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=ce(t)),n}R={};var me={};function _e(e,t){var n,r,a=t;for("string"==typeof e&&(e=[e]),d(t)&&(a=function(e,n){n[t]=fe(e)}),r=e.length,n=0;n<r;n++)me[e[n]]=a}function pe(e,t){_e(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function he(e,t,n){null!=t&&s(me,e)&&me[e](t,n._a,n,e)}function ye(e){return e%4==0&&e%100!=0||e%400==0}function ge(e){return ye(e)?366:365}C("Y",0,0,(function(){var e=this.year();return e<=9999?O(e,4):"+"+e})),C(0,["YY",2],0,(function(){return this.year()%100})),C(0,["YYYY",4],0,"year"),C(0,["YYYYY",5],0,"year"),C(0,["YYYYYY",6,!0],0,"year"),ue("Y",ne),ue("YY",G,J),ue("YYYY",X,V),ue("YYYYY",ee,q),ue("YYYYYY",ee,q),_e(["YYYYY","YYYYYY"],0),_e("YYYY",(function(e,t){t[0]=2===e.length?a.parseTwoDigitYear(e):fe(e)})),_e("YY",(function(e,t){t[0]=a.parseTwoDigitYear(e)})),_e("Y",(function(e,t){t[0]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return fe(e)+(fe(e)>68?1900:2e3)};var Me,ve=be("FullYear",!0);function be(e,t){return function(n){return null!=n?(ke(this,e,n),a.updateOffset(this,t),this):Le(this,e)}}function Le(e,t){if(!e.isValid())return NaN;var n=e._d,r=e._isUTC;switch(t){case"Milliseconds":return r?n.getUTCMilliseconds():n.getMilliseconds();case"Seconds":return r?n.getUTCSeconds():n.getSeconds();case"Minutes":return r?n.getUTCMinutes():n.getMinutes();case"Hours":return r?n.getUTCHours():n.getHours();case"Date":return r?n.getUTCDate():n.getDate();case"Day":return r?n.getUTCDay():n.getDay();case"Month":return r?n.getUTCMonth():n.getMonth();case"FullYear":return r?n.getUTCFullYear():n.getFullYear();default:return NaN}}function ke(e,t,n){var r,a,i,o,s;if(e.isValid()&&!isNaN(n)){switch(r=e._d,a=e._isUTC,t){case"Milliseconds":return void(a?r.setUTCMilliseconds(n):r.setMilliseconds(n));case"Seconds":return void(a?r.setUTCSeconds(n):r.setSeconds(n));case"Minutes":return void(a?r.setUTCMinutes(n):r.setMinutes(n));case"Hours":return void(a?r.setUTCHours(n):r.setHours(n));case"Date":return void(a?r.setUTCDate(n):r.setDate(n));case"FullYear":break;default:return}i=n,o=e.month(),s=29!==(s=e.date())||1!==o||ye(i)?s:28,a?r.setUTCFullYear(i,o,s):r.setFullYear(i,o,s)}}function we(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?ye(e)?29:28:31-r%7%2}Me=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},C("M",["MM",2],"Mo",(function(){return this.month()+1})),C("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),C("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),ue("M",G,oe),ue("MM",G,J),ue("MMM",(function(e,t){return t.monthsShortRegex(e)})),ue("MMMM",(function(e,t){return t.monthsRegex(e)})),_e(["M","MM"],(function(e,t){t[1]=fe(e)-1})),_e(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:p(n).invalidMonth=e}));var Ye="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Te="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),De=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Se=ie,xe=ie;function je(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=_([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Me.call(this._shortMonthsParse,o))?a:null:-1!==(a=Me.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Me.call(this._shortMonthsParse,o))||-1!==(a=Me.call(this._longMonthsParse,o))?a:null:-1!==(a=Me.call(this._longMonthsParse,o))||-1!==(a=Me.call(this._shortMonthsParse,o))?a:null}function Oe(e,t){if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=fe(t);else if(!d(t=e.localeData().monthsParse(t)))return e;var n=t,r=e.date();return r=r<29?r:Math.min(r,we(e.year(),n)),e._isUTC?e._d.setUTCMonth(n,r):e._d.setMonth(n,r),e}function Ee(e){return null!=e?(Oe(this,e),a.updateOffset(this,!0),this):Le(this,"Month")}function He(){function e(e,t){return t.length-e.length}var t,n,r,a,i=[],o=[],s=[];for(t=0;t<12;t++)n=_([2e3,t]),r=de(this.monthsShort(n,"")),a=de(this.months(n,"")),i.push(r),o.push(a),s.push(a),s.push(r);i.sort(e),o.sort(e),s.sort(e),this._monthsRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function Pe(e,t,n,r,a,i,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,i,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,i,o),s}function Ae(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Ce(e,t,n){var r=7+t-n;return-(7+Ae(e,0,r).getUTCDay()-t)%7+r-1}function Ne(e,t,n,r,a){var i,o,s=1+7*(t-1)+(7+n-r)%7+Ce(e,r,a);return s<=0?o=ge(i=e-1)+s:s>ge(e)?(i=e+1,o=s-ge(e)):(i=e,o=s),{year:i,dayOfYear:o}}function Fe(e,t,n){var r,a,i=Ce(e.year(),t,n),o=Math.floor((e.dayOfYear()-i-1)/7)+1;return o<1?r=o+We(a=e.year()-1,t,n):o>We(e.year(),t,n)?(r=o-We(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function We(e,t,n){var r=Ce(e,t,n),a=Ce(e+1,t,n);return(ge(e)-r+a)/7}function ze(e,t){return e.slice(t,7).concat(e.slice(0,t))}C("w",["ww",2],"wo","week"),C("W",["WW",2],"Wo","isoWeek"),ue("w",G,oe),ue("ww",G,J),ue("W",G,oe),ue("WW",G,J),pe(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=fe(e)})),C("d",0,"do","day"),C("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),C("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),C("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),C("e",0,0,"weekday"),C("E",0,0,"isoWeekday"),ue("d",G),ue("e",G),ue("E",G),ue("dd",(function(e,t){return t.weekdaysMinRegex(e)})),ue("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),ue("dddd",(function(e,t){return t.weekdaysRegex(e)})),pe(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:p(n).invalidWeekday=e})),pe(["d","e","E"],(function(e,t,n,r){t[r]=fe(e)}));var Ie="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Re="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ue="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Be=ie,Je=ie,$e=ie;function Ve(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=_([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Me.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Me.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._shortWeekdaysParse,o))||-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Me.call(this._shortWeekdaysParse,o))||-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Me.call(this._minWeekdaysParse,o))||-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._shortWeekdaysParse,o))?a:null}function qe(){function e(e,t){return t.length-e.length}var t,n,r,a,i,o=[],s=[],u=[],l=[];for(t=0;t<7;t++)n=_([2e3,1]).day(t),r=de(this.weekdaysMin(n,"")),a=de(this.weekdaysShort(n,"")),i=de(this.weekdays(n,"")),o.push(r),s.push(a),u.push(i),l.push(r),l.push(a),l.push(i);o.sort(e),s.sort(e),u.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function Ge(){return this.hours()%12||12}function Ke(e,t){C(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}C("H",["HH",2],0,"hour"),C("h",["hh",2],0,Ge),C("k",["kk",2],0,(function(){return this.hours()||24})),C("hmm",0,0,(function(){return""+Ge.apply(this)+O(this.minutes(),2)})),C("hmmss",0,0,(function(){return""+Ge.apply(this)+O(this.minutes(),2)+O(this.seconds(),2)})),C("Hmm",0,0,(function(){return""+this.hours()+O(this.minutes(),2)})),C("Hmmss",0,0,(function(){return""+this.hours()+O(this.minutes(),2)+O(this.seconds(),2)})),Ke("a",!0),Ke("A",!1),ue("a",Qe),ue("A",Qe),ue("H",G,se),ue("h",G,oe),ue("k",G,oe),ue("HH",G,J),ue("hh",G,J),ue("kk",G,J),ue("hmm",K),ue("hmmss",Q),ue("Hmm",K),ue("Hmmss",Q),_e(["H","HH"],3),_e(["k","kk"],(function(e,t,n){var r=fe(e);t[3]=24===r?0:r})),_e(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),_e(["h","hh"],(function(e,t,n){t[3]=fe(e),p(n).bigHour=!0})),_e("hmm",(function(e,t,n){var r=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r)),p(n).bigHour=!0})),_e("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r,2)),t[5]=fe(e.substr(a)),p(n).bigHour=!0})),_e("Hmm",(function(e,t,n){var r=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r))})),_e("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r,2)),t[5]=fe(e.substr(a))}));var Ze,Xe=be("Hours",!0),et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ye,monthsShort:Te,week:{dow:0,doy:6},weekdays:Ie,weekdaysMin:Ue,weekdaysShort:Re,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function rt(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function at(e){return e?e.toLowerCase().replace("_","-"):e}function it(t){var r=null;if(void 0===tt[t]&&void 0!==e&&e&&e.exports&&function(e){return!(!e||!e.match("^[^/\\\\]*$"))}(t))try{r=Ze._abbr,n(266)("./"+t),ot(r)}catch(e){tt[t]=null}return tt[t]}function ot(e,t){var n;return e&&((n=l(t)?ut(e):st(e,t))?Ze=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ze._abbr}function st(e,t){if(null!==t){var n,r=et;if(t.abbr=e,null!=tt[e])D("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])r=tt[t.parentLocale]._config;else{if(null==(n=it(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return tt[e]=new j(x(r,t)),nt[e]&&nt[e].forEach((function(e){st(e.name,e.config)})),ot(e),tt[e]}return delete tt[e],null}function ut(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ze;if(!i(e)){if(t=it(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=at(e[i]).split("-")).length,n=(n=at(e[i+1]))?n.split("-"):null;t>0;){if(r=it(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&rt(a,n)>=t-1)break;t--}i++}return Ze}(e)}function lt(e){var t,n=e._a;return n&&-2===p(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>we(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,p(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),p(e)._overflowWeeks&&-1===t&&(t=7),p(e)._overflowWeekday&&-1===t&&(t=8),p(e).overflow=t),e}var dt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ft=/Z|[+-]\d\d(?::?\d\d)?/,mt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],_t=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((-?\d+)/i,ht=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,yt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function gt(e){var t,n,r,a,i,o,s=e._i,u=dt.exec(s)||ct.exec(s),l=mt.length,d=_t.length;if(u){for(p(e).iso=!0,t=0,n=l;t<n;t++)if(mt[t][1].exec(u[1])){a=mt[t][0],r=!1!==mt[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=d;t<n;t++)if(_t[t][1].exec(u[3])){i=(u[2]||" ")+_t[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(u[4]){if(!ft.exec(u[4]))return void(e._isValid=!1);o="Z"}e._f=a+(i||"")+(o||""),kt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function vt(e){var t,n,r,a,i,o,s,u,l=ht.exec(e._i.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],r=l[3],a=l[2],i=l[5],o=l[6],s=l[7],u=[Mt(n),Te.indexOf(r),parseInt(a,10),parseInt(i,10),parseInt(o,10)],s&&u.push(parseInt(s,10)),t=u,!function(e,t,n){return!e||Re.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(p(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return yt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(l[8],l[9],l[10]),e._d=Ae.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),p(e).rfc2822=!0}else e._isValid=!1}function bt(e,t,n){return null!=e?e:null!=t?t:n}function Lt(e){var t,n,r,i,o,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,i,o,s,u,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,o=4,n=bt(t.GG,e._a[0],Fe(Tt(),1,4).year),r=bt(t.W,1),((a=bt(t.E,1))<1||a>7)&&(u=!0)):(i=e._locale._week.dow,o=e._locale._week.doy,l=Fe(Tt(),i,o),n=bt(t.gg,e._a[0],l.year),r=bt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(u=!0)):a=i),r<1||r>We(n,i,o)?p(e)._overflowWeeks=!0:null!=u?p(e)._overflowWeekday=!0:(s=Ne(n,r,a,i,o),e._a[0]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=bt(e._a[0],r[0]),(e._dayOfYear>ge(o)||0===e._dayOfYear)&&(p(e)._overflowDayOfYear=!0),n=Ae(o,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ae:Pe).apply(null,s),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(p(e).weekdayMismatch=!0)}}function kt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],p(e).empty=!0;var t,n,r,i,o,s,u,l=""+e._i,d=l.length,c=0;for(u=(r=F(e._f,e._locale).match(E)||[]).length,t=0;t<u;t++)i=r[t],(n=(l.match(le(i,e))||[])[0])&&((o=l.substr(0,l.indexOf(n))).length>0&&p(e).unusedInput.push(o),l=l.slice(l.indexOf(n)+n.length),c+=n.length),A[i]?(n?p(e).empty=!1:p(e).unusedTokens.push(i),he(i,n,e)):e._strict&&!n&&p(e).unusedTokens.push(i);p(e).charsLeftOver=d-c,l.length>0&&p(e).unusedInput.push(l),e._a[3]<=12&&!0===p(e).bigHour&&e._a[3]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(s=p(e).era)&&(e._a[0]=e._locale.erasConvertYear(s,e._a[0])),Lt(e),lt(e)}else vt(e);else gt(e)}function wt(e){var t=e._i,n=e._f;return e._locale=e._locale||ut(e._l),null===t||void 0===n&&""===t?y({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),L(t)?new b(lt(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,r,a,i,o,s=!1,u=e._f.length;if(0===u)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<u;a++)i=0,o=!1,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],kt(t),h(t)&&(o=!0),i+=p(t).charsLeftOver,i+=10*p(t).unusedTokens.length,p(t).score=i,s?i<r&&(r=i,n=t):(null==r||i<r||o)&&(r=i,n=t,o&&(s=!0));m(e,n||t)}(e):n?kt(e):function(e){var t=e._i;l(t)?e._d=new Date(a.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=pt.exec(e._i);null===t?(gt(e),!1===e._isValid&&(delete e._isValid,vt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=f(t.slice(0),(function(e){return parseInt(e,10)})),Lt(e)):o(t)?function(e){if(!e._d){var t=I(e._i),n=void 0===t.day?t.date:t.day;e._a=f([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),Lt(e)}}(e):d(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),h(e)||(e._d=null),e))}function Yt(e,t,n,r,a){var s,l={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(o(e)&&u(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=n,l._i=e,l._f=t,l._strict=r,(s=new b(lt(wt(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Tt(e,t,n,r){return Yt(e,t,n,r,!1)}a.createFromInputFallback=w("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Dt=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:y()})),St=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:y()}));function xt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Tt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var jt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ot(e){var t=I(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,o=t.day||0,u=t.hour||0,l=t.minute||0,d=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,r=!1,a=jt.length;for(t in e)if(s(e,t)&&(-1===Me.call(jt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<a;++n)if(e[jt[n]]){if(r)return!1;parseFloat(e[jt[n]])!==fe(e[jt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*d+6e4*l+1e3*u*60*60,this._days=+o+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=ut(),this._bubble()}function Et(e){return e instanceof Ot}function Ht(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Pt(e,t){C(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+O(~~(e/60),2)+t+O(~~e%60,2)}))}Pt("Z",":"),Pt("ZZ",""),ue("Z",ae),ue("ZZ",ae),_e(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Ct(ae,e)}));var At=/([\+\-]|\d\d)/gi;function Ct(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(At)||["-",0,0])[1]+fe(n[2]))?0:"+"===n[0]?r:-r}function Nt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(L(e)||c(e)?e.valueOf():Tt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Tt(e).local()}function Ft(e){return-Math.round(e._d.getTimezoneOffset())}function Wt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var zt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,It=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Rt(e,t){var n,r,a,i,o,u,l=e,c=null;return Et(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:d(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=zt.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:fe(c[2])*n,h:fe(c[3])*n,m:fe(c[4])*n,s:fe(c[5])*n,ms:fe(Ht(1e3*c[6]))*n}):(c=It.exec(e))?(n="-"===c[1]?-1:1,l={y:Ut(c[2],n),M:Ut(c[3],n),w:Ut(c[4],n),d:Ut(c[5],n),h:Ut(c[6],n),m:Ut(c[7],n),s:Ut(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(i=Tt(l.from),o=Tt(l.to),a=i.isValid()&&o.isValid()?(o=Nt(o,i),i.isBefore(o)?u=Bt(i,o):((u=Bt(o,i)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new Ot(l),Et(e)&&s(e,"_locale")&&(r._locale=e._locale),Et(e)&&s(e,"_isValid")&&(r._isValid=e._isValid),r}function Ut(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Bt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Jt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(D(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),$t(this,Rt(n,r),e),this}}function $t(e,t,n,r){var i=t._milliseconds,o=Ht(t._days),s=Ht(t._months);e.isValid()&&(r=null==r||r,s&&Oe(e,Le(e,"Month")+s*n),o&&ke(e,"Date",Le(e,"Date")+o*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,o||s))}Rt.fn=Ot.prototype,Rt.invalid=function(){return Rt(NaN)};var Vt=Jt(1,"add"),qt=Jt(-1,"subtract");function Gt(e){return"string"==typeof e||e instanceof String}function Kt(e){return L(e)||c(e)||Gt(e)||d(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!d(t)&&Gt(e)})).length),t&&n}(e)||function(e){var t,n,r=o(e)&&!u(e),a=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],l=i.length;for(t=0;t<l;t+=1)n=i[t],a=a||s(e,n);return r&&a}(e)||null==e}function Qt(e){var t,n=o(e)&&!u(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||s(e,a[t]);return n&&r}function Zt(e,t){if(e.date()<t.date())return-Zt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ut(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}function nn(e,t){return(e%t+t)%t}function rn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-126227808e5:new Date(e,t,n).valueOf()}function an(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-126227808e5:Date.UTC(e,t,n)}function on(e,t){return t.erasAbbrRegex(e)}function sn(){var e,t,n,r,a,i=[],o=[],s=[],u=[],l=this.eras();for(e=0,t=l.length;e<t;++e)n=de(l[e].name),r=de(l[e].abbr),a=de(l[e].narrow),o.push(n),i.push(r),s.push(a),u.push(n),u.push(r),u.push(a);this._erasRegex=new RegExp("^("+u.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+o.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+s.join("|")+")","i")}function un(e,t){C(0,[e,e.length],0,t)}function ln(e,t,n,r,a){var i;return null==e?Fe(this,r,a).year:(t>(i=We(e,r,a))&&(t=i),dn.call(this,e,t,n,r,a))}function dn(e,t,n,r,a){var i=Ne(e,t,n,r,a),o=Ae(i.year,0,i.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}C("N",0,0,"eraAbbr"),C("NN",0,0,"eraAbbr"),C("NNN",0,0,"eraAbbr"),C("NNNN",0,0,"eraName"),C("NNNNN",0,0,"eraNarrow"),C("y",["y",1],"yo","eraYear"),C("y",["yy",2],0,"eraYear"),C("y",["yyy",3],0,"eraYear"),C("y",["yyyy",4],0,"eraYear"),ue("N",on),ue("NN",on),ue("NNN",on),ue("NNNN",(function(e,t){return t.erasNameRegex(e)})),ue("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),_e(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?p(n).era=a:p(n).invalidEra=e})),ue("y",te),ue("yy",te),ue("yyy",te),ue("yyyy",te),ue("yo",(function(e,t){return t._eraYearOrdinalRegex||te})),_e(["y","yy","yyy","yyyy"],0),_e(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,a):t[0]=parseInt(e,10)})),C(0,["gg",2],0,(function(){return this.weekYear()%100})),C(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),un("gggg","weekYear"),un("ggggg","weekYear"),un("GGGG","isoWeekYear"),un("GGGGG","isoWeekYear"),ue("G",ne),ue("g",ne),ue("GG",G,J),ue("gg",G,J),ue("GGGG",X,V),ue("gggg",X,V),ue("GGGGG",ee,q),ue("ggggg",ee,q),pe(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=fe(e)})),pe(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),C("Q",0,"Qo","quarter"),ue("Q",B),_e("Q",(function(e,t){t[1]=3*(fe(e)-1)})),C("D",["DD",2],"Do","date"),ue("D",G,oe),ue("DD",G,J),ue("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),_e(["D","DD"],2),_e("Do",(function(e,t){t[2]=fe(e.match(G)[0])}));var cn=be("Date",!0);C("DDD",["DDDD",3],"DDDo","dayOfYear"),ue("DDD",Z),ue("DDDD",$),_e(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=fe(e)})),C("m",["mm",2],0,"minute"),ue("m",G,se),ue("mm",G,J),_e(["m","mm"],4);var fn=be("Minutes",!1);C("s",["ss",2],0,"second"),ue("s",G,se),ue("ss",G,J),_e(["s","ss"],5);var mn,_n,pn=be("Seconds",!1);for(C("S",0,0,(function(){return~~(this.millisecond()/100)})),C(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),C(0,["SSS",3],0,"millisecond"),C(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),C(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),C(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),C(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),C(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),C(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),ue("S",Z,B),ue("SS",Z,J),ue("SSS",Z,$),mn="SSSS";mn.length<=9;mn+="S")ue(mn,te);function hn(e,t){t[6]=fe(1e3*("0."+e))}for(mn="S";mn.length<=9;mn+="S")_e(mn,hn);_n=be("Milliseconds",!1),C("z",0,0,"zoneAbbr"),C("zz",0,0,"zoneName");var yn=b.prototype;function gn(e){return e}yn.add=Vt,yn.calendar=function(e,t){1===arguments.length&&(arguments[0]?Kt(arguments[0])?(e=arguments[0],t=void 0):Qt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Tt(),r=Nt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",o=t&&(S(t[i])?t[i].call(this,n):t[i]);return this.format(o||this.localeData().calendar(i,this,Tt(n)))},yn.clone=function(){return new b(this)},yn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=Nt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=z(t)){case"year":i=Zt(this,r)/12;break;case"month":i=Zt(this,r);break;case"quarter":i=Zt(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:ce(i)},yn.endOf=function(e){var t,n;if(void 0===(e=z(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?an:rn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-nn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-nn(t,1e3)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},yn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=N(this,e);return this.localeData().postformat(t)},yn.from=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||Tt(e).isValid())?Rt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yn.fromNow=function(e){return this.from(Tt(),e)},yn.to=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||Tt(e).isValid())?Rt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yn.toNow=function(e){return this.to(Tt(),e)},yn.get=function(e){return S(this[e=z(e)])?this[e]():this},yn.invalidAt=function(){return p(this).overflow},yn.isAfter=function(e,t){var n=L(e)?e:Tt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=z(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},yn.isBefore=function(e,t){var n=L(e)?e:Tt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=z(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},yn.isBetween=function(e,t,n,r){var a=L(e)?e:Tt(e),i=L(t)?t:Tt(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&(("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n)))},yn.isSame=function(e,t){var n,r=L(e)?e:Tt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=z(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},yn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},yn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},yn.isValid=function(){return h(this)},yn.lang=en,yn.locale=Xt,yn.localeData=tn,yn.max=St,yn.min=Dt,yn.parsingFlags=function(){return m({},p(this))},yn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)s(e,t)&&n.push({unit:t,priority:U[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=I(e)),a=r.length;for(n=0;n<a;n++)this[r[n].unit](e[r[n].unit])}else if(S(this[e=z(e)]))return this[e](t);return this},yn.startOf=function(e){var t,n;if(void 0===(e=z(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?an:rn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=nn(t,6e4);break;case"second":t=this._d.valueOf(),t-=nn(t,1e3)}return this._d.setTime(t),a.updateOffset(this,!0),this},yn.subtract=qt,yn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},yn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},yn.toDate=function(){return new Date(this.valueOf())},yn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?N(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):S(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",N(n,"Z")):N(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},yn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(yn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),yn.toJSON=function(){return this.isValid()?this.toISOString():null},yn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},yn.unix=function(){return Math.floor(this.valueOf()/1e3)},yn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},yn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},yn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},yn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},yn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},yn.eraYear=function(){var e,t,n,r,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,r=this.clone().startOf("day").valueOf(),i[e].since<=r&&r<=i[e].until||i[e].until<=r&&r<=i[e].since)return(this.year()-a(i[e].since).year())*n+i[e].offset;return this.year()},yn.year=ve,yn.isLeapYear=function(){return ye(this.year())},yn.weekYear=function(e){return ln.call(this,e,this.week(),this.weekday()+this.localeData()._week.dow,this.localeData()._week.dow,this.localeData()._week.doy)},yn.isoWeekYear=function(e){return ln.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},yn.quarter=yn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},yn.month=Ee,yn.daysInMonth=function(){return we(this.year(),this.month())},yn.week=yn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},yn.isoWeek=yn.isoWeeks=function(e){var t=Fe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},yn.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},yn.weeksInWeekYear=function(){var e=this.localeData()._week;return We(this.weekYear(),e.dow,e.doy)},yn.isoWeeksInYear=function(){return We(this.year(),1,4)},yn.isoWeeksInISOWeekYear=function(){return We(this.isoWeekYear(),1,4)},yn.date=cn,yn.day=yn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=Le(this,"Day");return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},yn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},yn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},yn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},yn.hour=yn.hours=Xe,yn.minute=yn.minutes=fn,yn.second=yn.seconds=pn,yn.millisecond=yn.milliseconds=_n,yn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ct(ae,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Ft(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?$t(this,Rt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Ft(this)},yn.utc=function(e){return this.utcOffset(0,e)},yn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ft(this),"m")),this},yn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ct(re,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},yn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Tt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},yn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},yn.isLocal=function(){return!!this.isValid()&&!this._isUTC},yn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},yn.isUtc=Wt,yn.isUTC=Wt,yn.zoneAbbr=function(){return this._isUTC?"UTC":""},yn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},yn.dates=w("dates accessor is deprecated. Use date instead.",cn),yn.months=w("months accessor is deprecated. Use month instead",Ee),yn.years=w("years accessor is deprecated. Use year instead",ve),yn.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),yn.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return v(t,this),(t=wt(t))._a?(e=t._isUTC?_(t._a):Tt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&fe(e[r])!==fe(t[r]))&&o++;return o+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var Mn=j.prototype;function vn(e,t,n,r){var a=ut(),i=_().set(r,t);return a[n](i,e)}function bn(e,t,n){if(d(e)&&(t=e,e=void 0),e=e||"",null!=t)return vn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=vn(e,r,n,"month");return a}function Ln(e,t,n,r){"boolean"==typeof e?(d(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,d(t)&&(n=t,t=void 0),t=t||"");var a,i=ut(),o=e?i._week.dow:0,s=[];if(null!=n)return vn(t,(n+o)%7,r,"day");for(a=0;a<7;a++)s[a]=vn(t,(a+o)%7,r,"day");return s}Mn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return S(r)?r.call(t,n):r},Mn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(E).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},Mn.invalidDate=function(){return this._invalidDate},Mn.ordinal=function(e){return this._ordinal.replace("%d",e)},Mn.preparse=gn,Mn.postformat=gn,Mn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return S(a)?a(e,t,n,r):a.replace(/%d/i,e)},Mn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)},Mn.set=function(e){var t,n;for(n in e)s(e,n)&&(S(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Mn.eras=function(e,t){var n,r,i,o=this._eras||ut("en")._eras;for(n=0,r=o.length;n<r;++n){switch(typeof o[n].since){case"string":i=a(o[n].since).startOf("day"),o[n].since=i.valueOf()}switch(typeof o[n].until){case"undefined":o[n].until=1/0;break;case"string":i=a(o[n].until).startOf("day").valueOf(),o[n].until=i.valueOf()}}return o},Mn.erasParse=function(e,t,n){var r,a,i,o,s,u=this.eras();for(e=e.toUpperCase(),r=0,a=u.length;r<a;++r)if(i=u[r].name.toUpperCase(),o=u[r].abbr.toUpperCase(),s=u[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(o===e)return u[r];break;case"NNNN":if(i===e)return u[r];break;case"NNNNN":if(s===e)return u[r]}else if([i,o,s].indexOf(e)>=0)return u[r]},Mn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},Mn.erasAbbrRegex=function(e){return s(this,"_erasAbbrRegex")||sn.call(this),e?this._erasAbbrRegex:this._erasRegex},Mn.erasNameRegex=function(e){return s(this,"_erasNameRegex")||sn.call(this),e?this._erasNameRegex:this._erasRegex},Mn.erasNarrowRegex=function(e){return s(this,"_erasNarrowRegex")||sn.call(this),e?this._erasNarrowRegex:this._erasRegex},Mn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||De).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},Mn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[De.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Mn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return je.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=_([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},Mn.monthsRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||He.call(this),e?this._monthsStrictRegex:this._monthsRegex):(s(this,"_monthsRegex")||(this._monthsRegex=xe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Mn.monthsShortRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||He.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(s(this,"_monthsShortRegex")||(this._monthsShortRegex=Se),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Mn.week=function(e){return Fe(e,this._week.dow,this._week.doy).week},Mn.firstDayOfYear=function(){return this._week.doy},Mn.firstDayOfWeek=function(){return this._week.dow},Mn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?ze(n,this._week.dow):e?n[e.day()]:n},Mn.weekdaysMin=function(e){return!0===e?ze(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Mn.weekdaysShort=function(e){return!0===e?ze(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Mn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return Ve.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=_([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},Mn.weekdaysRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(s(this,"_weekdaysRegex")||(this._weekdaysRegex=Be),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Mn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(s(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Mn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(s(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=$e),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Mn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Mn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ot("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===fe(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=w("moment.lang is deprecated. Use moment.locale instead.",ot),a.langData=w("moment.langData is deprecated. Use moment.localeData instead.",ut);var kn=Math.abs;function wn(e,t,n,r){var a=Rt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Yn(e){return e<0?Math.floor(e):Math.ceil(e)}function Tn(e){return 4800*e/146097}function Dn(e){return 146097*e/4800}function Sn(e){return function(){return this.as(e)}}var xn=Sn("ms"),jn=Sn("s"),On=Sn("m"),En=Sn("h"),Hn=Sn("d"),Pn=Sn("w"),An=Sn("M"),Cn=Sn("Q"),Nn=Sn("y"),Fn=xn;function Wn(e){return function(){return this.isValid()?this._data[e]:NaN}}var zn=Wn("milliseconds"),In=Wn("seconds"),Rn=Wn("minutes"),Un=Wn("hours"),Bn=Wn("days"),Jn=Wn("months"),$n=Wn("years"),Vn=Math.round,qn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Gn(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Kn=Math.abs;function Qn(e){return(e>0)-(e<0)||+e}function Zn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,i,o,s,u=Kn(this._milliseconds)/1e3,l=Kn(this._days),d=Kn(this._months),c=this.asSeconds();return c?(e=ce(u/60),t=ce(e/60),u%=60,e%=60,n=ce(d/12),d%=12,r=u?u.toFixed(3).replace(/\.?0+$/,""):"",a=c<0?"-":"",i=Qn(this._months)!==Qn(c)?"-":"",o=Qn(this._days)!==Qn(c)?"-":"",s=Qn(this._milliseconds)!==Qn(c)?"-":"",a+"P"+(n?i+n+"Y":"")+(d?i+d+"M":"")+(l?o+l+"D":"")+(t||e||u?"T":"")+(t?s+t+"H":"")+(e?s+e+"M":"")+(u?s+r+"S":"")):"P0D"}var Xn=Ot.prototype;return Xn.isValid=function(){return this._isValid},Xn.abs=function(){var e=this._data;return this._milliseconds=kn(this._milliseconds),this._days=kn(this._days),this._months=kn(this._months),e.milliseconds=kn(e.milliseconds),e.seconds=kn(e.seconds),e.minutes=kn(e.minutes),e.hours=kn(e.hours),e.months=kn(e.months),e.years=kn(e.years),this},Xn.add=function(e,t){return wn(this,e,t,1)},Xn.subtract=function(e,t){return wn(this,e,t,-1)},Xn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=z(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Tn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Dn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Xn.asMilliseconds=xn,Xn.asSeconds=jn,Xn.asMinutes=On,Xn.asHours=En,Xn.asDays=Hn,Xn.asWeeks=Pn,Xn.asMonths=An,Xn.asQuarters=Cn,Xn.asYears=Nn,Xn.valueOf=Fn,Xn._bubble=function(){var e,t,n,r,a,i=this._milliseconds,o=this._days,s=this._months,u=this._data;return i>=0&&o>=0&&s>=0||i<=0&&o<=0&&s<=0||(i+=864e5*Yn(Dn(s)+o),o=0,s=0),u.milliseconds=i%1e3,e=ce(i/1e3),u.seconds=e%60,t=ce(e/60),u.minutes=t%60,n=ce(t/60),u.hours=n%24,o+=ce(n/24),a=ce(Tn(o)),s+=a,o-=Yn(Dn(a)),r=ce(s/12),s%=12,u.days=o,u.months=s,u.years=r,this},Xn.clone=function(){return Rt(this)},Xn.get=function(e){return e=z(e),this.isValid()?this[e+"s"]():NaN},Xn.milliseconds=zn,Xn.seconds=In,Xn.minutes=Rn,Xn.hours=Un,Xn.days=Bn,Xn.weeks=function(){return ce(this.days()/7)},Xn.months=Jn,Xn.years=$n,Xn.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,i=qn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(i=Object.assign({},qn,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),n=this.localeData(),r=function(e,t,n,r){var a=Rt(e).abs(),i=Vn(a.as("s")),o=Vn(a.as("m")),s=Vn(a.as("h")),u=Vn(a.as("d")),l=Vn(a.as("M")),d=Vn(a.as("w")),c=Vn(a.as("y")),f=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||o<=1&&["m"]||o<n.m&&["mm",o]||s<=1&&["h"]||s<n.h&&["hh",s]||u<=1&&["d"]||u<n.d&&["dd",u];return null!=n.w&&(f=f||d<=1&&["w"]||d<n.w&&["ww",d]),(f=f||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,f[3]=+e>0,f[4]=r,Gn.apply(null,f)}(this,!a,i,n),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},Xn.toISOString=Zn,Xn.toString=Zn,Xn.toJSON=Zn,Xn.locale=Xt,Xn.localeData=tn,Xn.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Zn),Xn.lang=en,C("X",0,0,"unix"),C("x",0,0,"valueOf"),ue("x",ne),ue("X",/[+-]?\d+(\.\d{1,3})?/),_e("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),_e("x",(function(e,t,n){n._d=new Date(fe(e))})),
//! moment.js
a.version="2.30.1",t=Tt,a.fn=yn,a.min=function(){var e=[].slice.call(arguments,0);return xt("isBefore",e)},a.max=function(){var e=[].slice.call(arguments,0);return xt("isAfter",e)},a.now=function(){return Date.now?Date.now():+new Date},a.utc=_,a.unix=function(e){return Tt(1e3*e)},a.months=function(e,t){return bn(e,t,"months")},a.isDate=c,a.locale=ot,a.invalid=y,a.duration=Rt,a.isMoment=L,a.weekdays=function(e,t,n){return Ln(e,t,n,"weekdays")},a.parseZone=function(){return Tt.apply(null,arguments).parseZone()},a.localeData=ut,a.isDuration=Et,a.monthsShort=function(e,t){return bn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return Ln(e,t,n,"weekdaysMin")},a.defineLocale=st,a.updateLocale=function(e,t){if(null!=t){var n,r,a=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(x(tt[e]._config,t)):(null!=(r=it(e))&&(a=r._config),t=x(a,t),null==r&&(t.abbr=e),(n=new j(t)).parentLocale=tt[e],tt[e]=n),ot(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===ot()&&ot(e)):null!=tt[e]&&delete tt[e]);return tt[e]},a.locales=function(){return Y(tt)},a.weekdaysShort=function(e,t,n){return Ln(e,t,n,"weekdaysShort")},a.normalizeUnits=z,a.relativeTimeRounding=function(e){return void 0===e?Vn:"function"==typeof e&&(Vn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==qn[e]&&(void 0===t?qn[e]:(qn[e]=t,"s"===e&&(qn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=yn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(265)(e))},function(e,t,n){"use strict";e.exports=n(213)},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return j})),n.d(t,"b",(function(){return O})),n.d(t,"c",(function(){return H})),n.d(t,"d",(function(){return A})),n.d(t,"e",(function(){return C}));var r=n(3),a=n.n(r),i=n(207),o=n.n(i),s=n(33),u=n.n(s),l=n(206),d=n.n(l);n(14);function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(){_=function(e,t){return new n(e,void 0,t)};var e=RegExp.prototype,t=new WeakMap;function n(e,r,a){var i=new RegExp(e,r);return t.set(i,a||t.get(e)),y(i,n.prototype)}function r(e,n){var r=t.get(n);return Object.keys(r).reduce((function(t,n){return t[n]=e[r[n]],t}),Object.create(null))}return h(n,RegExp),n.prototype.exec=function(t){var n=e.exec.call(this,t);return n&&(n.groups=r(n,this)),n},n.prototype[Symbol.replace]=function(n,a){if("string"==typeof a){var i=t.get(this);return e[Symbol.replace].call(this,n,a.replace(/\$<([^>]+)>/g,(function(e,t){return"$"+i[t]})))}if("function"==typeof a){var o=this;return e[Symbol.replace].call(this,n,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(r(e,o)),a.apply(this,e)}))}return e[Symbol.replace].call(this,n,a)},_.apply(this,arguments)}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&y(e,t)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,a,i=[],o=!0,s=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(s)throw a}}return i}(e,t)||M(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function b(){return void 0!==e&&!e.browser}function L(){return e.versions&&e.versions.node?"v".concat(e.versions.node):e.version}function k(){}var w=_(/([0-9]+)(%)/,{value:1});function Y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:7,n=t;if(w.test(e)){var r,a=null===(r=e.match(w))||void 0===r?void 0:r.groups;if(a&&a.value){var i=parseInt(a.value)/100;n=Math.round(t*i)}}return Math.min(30,Math.max(1,n))}function T(e,t){return t("info","Throttle request to ".concat(e,"/s")),d()({limit:e,interval:1e3,strict:!1})}var D=function(e){return new Promise((function(t){setTimeout(t,e)}))},S=function(e){return Math.pow(Math.SQRT2,e)};var x=/^(?!\w+:\/\/)([^\s:]+\.?[^\s:]+)(?::(\d+))?(?!:)$/;function j(e,t){var n=f(f({},{insecure:!1,retryOnError:!0,logHandler:function(e,t){if("error"===e&&t){var n=[t.name,t.message].filter((function(e){return e})).join(" - ");return console.error("[error] ".concat(n)),void console.error(t)}console.log("[".concat(e,"] ").concat(t))},headers:{},httpAgent:!1,httpsAgent:!1,timeout:3e4,throttle:0,proxy:!1,basePath:"",adapter:void 0,maxContentLength:1073741824,maxBodyLength:1073741824}),t);if(!n.accessToken){var r=new TypeError("Expected parameter accessToken");throw n.logHandler("error",r),r}var i=n.insecure?"http":"https",s=n.space?"".concat(n.space,"/"):"",l=n.defaultHostname,d=n.insecure?80:443;if(n.host&&x.test(n.host)){var c=n.host.split(":");if(2===c.length){var m=g(c,2);l=m[0],d=m[1]}else l=c[0]}n.basePath&&(n.basePath="/".concat(n.basePath.split("/").filter(Boolean).join("/")));var _=t.baseURL||"".concat(i,"://").concat(l,":").concat(d).concat(n.basePath,"/spaces/").concat(s);n.headers.Authorization||"function"==typeof n.accessToken||(n.headers.Authorization="Bearer "+n.accessToken),b()&&(n.headers["user-agent"]="node.js/"+L(),n.headers["Accept-Encoding"]="gzip");var p={baseURL:_,headers:n.headers,httpAgent:n.httpAgent,httpsAgent:n.httpsAgent,paramsSerializer:o.a.stringify,proxy:n.proxy,timeout:n.timeout,adapter:n.adapter,maxContentLength:n.maxContentLength,maxBodyLength:n.maxBodyLength,logHandler:n.logHandler,responseLogger:n.responseLogger,requestLogger:n.requestLogger,retryOnError:n.retryOnError},h=e.create(p);return h.httpClientParams=t,h.cloneWithNewParams=function(n){return j(e,f(f({},a()(t)),n))},n.onBeforeRequest&&h.interceptors.request.use(n.onBeforeRequest),"function"==typeof n.accessToken&&function(e,t){e.interceptors.request.use((function(e){return t().then((function(t){return e.headers=f(f({},e.headers),{},{Authorization:"Bearer ".concat(t)}),e}))}))}(h,n.accessToken),n.throttle&&function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"auto",n=e.defaults.logHandler,r=void 0===n?k:n,a=u()(t)?Y(t):Y("auto",t),i=T(a,r),o=!1,s=e.interceptors.request.use((function(e){return i((function(){return e}))()}),(function(e){return Promise.reject(e)})),l=e.interceptors.response.use((function(n){if(!o&&u()(t)&&("auto"===t||w.test(t))&&n.headers&&n.headers["x-contentful-ratelimit-second-limit"]){var l=parseInt(n.headers["x-contentful-ratelimit-second-limit"]),d=Y(t,l);d!==a&&(s&&e.interceptors.request.eject(s),a=d,i=T(d,r),s=e.interceptors.request.use((function(e){return i((function(){return e}))()}),(function(e){return Promise.reject(e)}))),o=!0}return n}),(function(e){return Promise.reject(e)}))}(h,n.throttle),function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,n=e.defaults,r=n.responseLogger,a=void 0===r?k:r,i=n.requestLogger,o=void 0===i?k:i;e.interceptors.request.use((function(e){return o(e),e}),(function(e){return o(e),Promise.reject(e)})),e.interceptors.response.use((function(e){return a(e),e}),(function(n){var r=n.response,i=n.config;if(a(n),!i||!e.defaults.retryOnError)return Promise.reject(n);var o=i.attempts||1;if(o>t)return n.attempts=i.attempts,Promise.reject(n);var s=null,u=S(o);return r?r.status>=500&&r.status<600?s="Server ".concat(r.status):429===r.status&&(s="Rate limit",r.headers&&n.response.headers["x-contentful-ratelimit-reset"]&&(u=r.headers["x-contentful-ratelimit-reset"])):s="Connection",s?(u=Math.floor(1e3*u+200*Math.random()+500),e.defaults.logHandler("warning","".concat(s," error occurred. Waiting for ").concat(u," ms before retrying...")),i.attempts=o+1,delete i.httpAgent,delete i.httpsAgent,D(u).then((function(){return e(i)}))):Promise.reject(n)}))}(h,n.retryLimit),n.onError&&h.interceptors.response.use((function(e){return e}),n.onError),h}function O(e){var t=e.query,n={};return delete t.resolveLinks,n.params=a()(t),n}function E(e){var t,n=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=M(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw i}}}}(Object.getOwnPropertyNames(e));try{for(n.s();!(t=n.n()).done;){var r=e[t.value];r&&"object"===m(r)&&E(r)}}catch(e){n.e(e)}finally{n.f()}return Object.freeze(e)}function H(e){return E(e.sys||{}),e}function P(){var e=window;if(!e)return null;var t=e.navigator.userAgent,n=e.navigator.platform;return-1!==["Macintosh","MacIntel","MacPPC","Mac68K"].indexOf(n)?"macOS":-1!==["iPhone","iPad","iPod"].indexOf(n)?"iOS":-1!==["Win32","Win64","Windows","WinCE"].indexOf(n)?"Windows":/Android/.test(t)?"Android":/Linux/.test(n)?"Linux":null}function A(t,n,r,a){var i=[];n&&i.push("app ".concat(n)),r&&i.push("integration ".concat(r)),a&&i.push("feature "+a),i.push("sdk ".concat(t));var o=null;try{"undefined"!=typeof window&&"navigator"in window&&"product"in window.navigator&&"ReactNative"===window.navigator.product?(o=P(),i.push("platform ReactNative")):b()?(o=function(){var t=e.platform||"linux",n=e.version||"0.0.0",r={android:"Android",aix:"Linux",darwin:"macOS",freebsd:"Linux",linux:"Linux",openbsd:"Linux",sunos:"Linux",win32:"Windows"};return t in r?"".concat(r[t]||"Linux","/").concat(n):null}(),i.push("platform node.js/".concat(L()))):(o=P(),i.push("platform browser"))}catch(e){o=null}return o&&i.push("os ".concat(o)),"".concat(i.filter((function(e){return""!==e})).join("; "),";")}function C(e){return Object.defineProperty(e,"toPlainObject",{enumerable:!1,configurable:!1,writable:!1,value:function(){return a()(this)}})}}).call(this,n(13))},function(e,t,n){(function(t){var n;n=function(){"use strict";var e=Function.prototype.toString,n=Object.create,r=Object.defineProperty,a=Object.getOwnPropertyDescriptor,i=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,s=Object.getPrototypeOf,u=Object.prototype,l=u.hasOwnProperty,d=u.propertyIsEnumerable,c="function"==typeof o,f="function"==typeof WeakMap,m=function(){if(f)return function(){return new WeakMap};var e=function(){function e(){this._keys=[],this._values=[]}return e.prototype.has=function(e){return!!~this._keys.indexOf(e)},e.prototype.get=function(e){return this._values[this._keys.indexOf(e)]},e.prototype.set=function(e,t){this._keys.push(e),this._values.push(t)},e}();return function(){return new e}}(),_=function(t,r){var a=t.__proto__||s(t);if(!a)return n(null);var i=a.constructor;if(i===r.Object)return a===r.Object.prototype?{}:n(a);if(~e.call(i).indexOf("[native code]"))try{return new i}catch(e){}return n(a)},p=function(e,t,n,r){var a=_(e,t);for(var i in r.set(e,a),e)l.call(e,i)&&(a[i]=n(e[i],r));if(c)for(var s=o(e),u=0,f=s.length,m=void 0;u<f;++u)m=s[u],d.call(e,m)&&(a[m]=n(e[m],r));return a},h=function(e,t,n,s){var u=_(e,t);s.set(e,u);for(var l=c?i(e).concat(o(e)):i(e),d=0,f=l.length,m=void 0,p=void 0;d<f;++d)if("callee"!==(m=l[d])&&"caller"!==m)if(p=a(e,m)){p.get||p.set||(p.value=n(e[m],s));try{r(u,m,p)}catch(e){u[m]=p.value}}else u[m]=n(e[m],s);return u},y=Array.isArray,g=Object.getPrototypeOf,M=function(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:(console&&console.error&&console.error('Unable to locate global object, returning "this".'),this)}();function v(e,t){var n=!(!t||!t.isStrict),r=t&&t.realm||M,a=n?h:p,i=function(e,t){if(!e||"object"!=typeof e)return e;if(t.has(e))return t.get(e);var o,s,u,l=e.__proto__||g(e),d=l&&l.constructor;if(!d||d===r.Object)return a(e,r,i,t);if(y(e)){if(n)return h(e,r,i,t);o=new d,t.set(e,o);for(var c=0,f=e.length;c<f;++c)o[c]=i(e[c],t);return o}if(e instanceof r.Date)return new d(e.getTime());if(e instanceof r.RegExp)return(o=new d(e.source,e.flags||(u="",(s=e).global&&(u+="g"),s.ignoreCase&&(u+="i"),s.multiline&&(u+="m"),s.unicode&&(u+="u"),s.sticky&&(u+="y"),u))).lastIndex=e.lastIndex,o;if(r.Map&&e instanceof r.Map)return o=new d,t.set(e,o),e.forEach((function(e,n){o.set(n,i(e,t))})),o;if(r.Set&&e instanceof r.Set)return o=new d,t.set(e,o),e.forEach((function(e){o.add(i(e,t))})),o;if(r.Blob&&e instanceof r.Blob)return e.slice(0,e.size,e.type);if(r.Buffer&&r.Buffer.isBuffer(e))return o=r.Buffer.allocUnsafe?r.Buffer.allocUnsafe(e.length):new d(e.length),t.set(e,o),e.copy(o),o;if(r.ArrayBuffer){if(r.ArrayBuffer.isView(e))return o=new d(e.buffer.slice(0)),t.set(e,o),o;if(e instanceof r.ArrayBuffer)return o=e.slice(0),t.set(e,o),o}return"function"==typeof e.then||e instanceof Error||r.WeakMap&&e instanceof r.WeakMap||r.WeakSet&&e instanceof r.WeakSet?e:a(e,r,i,t)};return i(e,m())}return v.default=v,v.strict=function(e,t){return v(e,{isStrict:!0,realm:t?t.realm:void 0})},v},e.exports=n()}).call(this,n(44))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return et}));var r=n(31),a=n.n(r),i=n(203),o=n.n(i),s=n(1),u=n.n(s),l=n(204),d=n(20),c=n(32),f=n(211),m=n(212),_=function(e,t){for(var n=[e[0]],r=0,a=t.length;r<a;r+=1)n.push(t[r],e[r+1]);return n},p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},v=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},b=function(e){return"object"===(void 0===e?"undefined":p(e))&&e.constructor===Object},L=Object.freeze([]),k=Object.freeze({});function w(e){return"function"==typeof e}function Y(e){return e.displayName||e.name||"Component"}function T(e){return e&&"string"==typeof e.styledComponentId}var D=void 0!==e&&(e.env.REACT_APP_SC_ATTR||e.env.SC_ATTR)||"data-styled",S="undefined"!=typeof window&&"HTMLElement"in window,x="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||void 0!==e&&(e.env.REACT_APP_SC_DISABLE_SPEEDY||e.env.SC_DISABLE_SPEEDY)||!1,j={};var O=function(e){function t(n){h(this,t);for(var r=arguments.length,a=Array(r>1?r-1:0),i=1;i<r;i++)a[i-1]=arguments[i];var o=v(this,e.call(this,"An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#"+n+" for more information."+(a.length>0?" Additional arguments: "+a.join(", "):"")));return v(o)}return M(t,e),t}(Error),E=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,H=function(e){var t=""+(e||""),n=[];return t.replace(E,(function(e,t,r){return n.push({componentId:t,matchIndex:r}),e})),n.map((function(e,r){var a=e.componentId,i=e.matchIndex,o=n[r+1];return{componentId:a,cssFromDOM:o?t.slice(i,o.matchIndex):t.slice(i)}}))},P=/^\s*\/\/.*$/gm,A=new a.a({global:!1,cascade:!0,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),C=new a.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),N=[],F=function(e){if(-2===e){var t=N;return N=[],t}},W=o()((function(e){N.push(e)})),z=void 0,I=void 0,R=void 0,U=function(e,t,n){return t>0&&-1!==n.slice(0,t).indexOf(I)&&n.slice(t-I.length,t)!==I?"."+z:e};C.use([function(e,t,n){2===e&&n.length&&n[0].lastIndexOf(I)>0&&(n[0]=n[0].replace(R,U))},W,F]),A.use([W,F]);var B=function(e){return A("",e)};function J(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"&",a=e.join("").replace(P,""),i=t&&n?n+" "+t+" { "+a+" }":a;return z=r,I=t,R=new RegExp("\\"+I+"\\b","g"),C(n||!t?"":t,i)}var $=function(){return n.nc},V=function(e,t,n){n&&((e[t]||(e[t]=Object.create(null)))[n]=!0)},q=function(e,t){e[t]=Object.create(null)},G=function(e){return function(t,n){return void 0!==e[t]&&e[t][n]}},K=function(e){var t="";for(var n in e)t+=Object.keys(e[n]).join(" ")+" ";return t.trim()},Q=function(e){if(e.sheet)return e.sheet;for(var t=e.ownerDocument.styleSheets.length,n=0;n<t;n+=1){var r=e.ownerDocument.styleSheets[n];if(r.ownerNode===e)return r}throw new O(10)},Z=function(e,t,n){if(!t)return!1;var r=e.cssRules.length;try{e.insertRule(t,n<=r?n:r)}catch(e){return!1}return!0},X=function(e){return"\n/* sc-component-id: "+e+" */\n"},ee=function(e,t){for(var n=0,r=0;r<=t;r+=1)n+=e[r];return n},te=function(e,t){return function(n){var r=$();return"<style "+[r&&'nonce="'+r+'"',D+'="'+K(t)+'"','data-styled-version="4.4.1"',n].filter(Boolean).join(" ")+">"+e()+"</style>"}},ne=function(e,t){return function(){var n,r=((n={})[D]=K(t),n["data-styled-version"]="4.4.1",n),a=$();return a&&(r.nonce=a),u.a.createElement("style",g({},r,{dangerouslySetInnerHTML:{__html:e()}}))}},re=function(e){return function(){return Object.keys(e)}},ae=function(e,t){return e.createTextNode(X(t))},ie=function e(t,n){var r=void 0===t?Object.create(null):t,a=void 0===n?Object.create(null):n,i=function(e){var t=a[e];return void 0!==t?t:a[e]=[""]},o=function(){var e="";for(var t in a){var n=a[t][0];n&&(e+=X(t)+n)}return e};return{clone:function(){var t=function(e){var t=Object.create(null);for(var n in e)t[n]=g({},e[n]);return t}(r),n=Object.create(null);for(var i in a)n[i]=[a[i][0]];return e(t,n)},css:o,getIds:re(a),hasNameForId:G(r),insertMarker:i,insertRules:function(e,t,n){i(e)[0]+=t.join(" "),V(r,e,n)},removeRules:function(e){var t=a[e];void 0!==t&&(t[0]="",q(r,e))},sealed:!1,styleTag:null,toElement:ne(o,r),toHTML:te(o,r)}},oe=function(e,t,n,r,a){if(S&&!n){var i=function(e,t,n){var r=document;e?r=e.ownerDocument:t&&(r=t.ownerDocument);var a=r.createElement("style");a.setAttribute(D,""),a.setAttribute("data-styled-version","4.4.1");var i=$();if(i&&a.setAttribute("nonce",i),a.appendChild(r.createTextNode("")),e&&!t)e.appendChild(a);else{if(!t||!e||!t.parentNode)throw new O(6);t.parentNode.insertBefore(a,n?t:t.nextSibling)}return a}(e,t,r);return x?function(e,t){var n=Object.create(null),r=Object.create(null),a=void 0!==t,i=!1,o=function(t){var a=r[t];return void 0!==a?a:(r[t]=ae(e.ownerDocument,t),e.appendChild(r[t]),n[t]=Object.create(null),r[t])},s=function(){var e="";for(var t in r)e+=r[t].data;return e};return{clone:function(){throw new O(5)},css:s,getIds:re(r),hasNameForId:G(n),insertMarker:o,insertRules:function(e,r,s){for(var u=o(e),l=[],d=r.length,c=0;c<d;c+=1){var f=r[c],m=a;if(m&&-1!==f.indexOf("@import"))l.push(f);else{m=!1;var _=c===d-1?"":" ";u.appendData(""+f+_)}}V(n,e,s),a&&l.length>0&&(i=!0,t().insertRules(e+"-import",l))},removeRules:function(o){var s=r[o];if(void 0!==s){var u=ae(e.ownerDocument,o);e.replaceChild(u,s),r[o]=u,q(n,o),a&&i&&t().removeRules(o+"-import")}},sealed:!1,styleTag:e,toElement:ne(s,n),toHTML:te(s,n)}}(i,a):function(e,t){var n=Object.create(null),r=Object.create(null),a=[],i=void 0!==t,o=!1,s=function(e){var t=r[e];return void 0!==t?t:(r[e]=a.length,a.push(0),q(n,e),r[e])},u=function(){var t=Q(e).cssRules,n="";for(var i in r){n+=X(i);for(var o=r[i],s=ee(a,o),u=s-a[o];u<s;u+=1){var l=t[u];void 0!==l&&(n+=l.cssText)}}return n};return{clone:function(){throw new O(5)},css:u,getIds:re(r),hasNameForId:G(n),insertMarker:s,insertRules:function(r,u,l){for(var d=s(r),c=Q(e),f=ee(a,d),m=0,_=[],p=u.length,h=0;h<p;h+=1){var y=u[h],g=i;g&&-1!==y.indexOf("@import")?_.push(y):Z(c,y,f+m)&&(g=!1,m+=1)}i&&_.length>0&&(o=!0,t().insertRules(r+"-import",_)),a[d]+=m,V(n,r,l)},removeRules:function(s){var u=r[s];if(void 0!==u&&!1!==e.isConnected){var l=a[u];!function(e,t,n){for(var r=t-n,a=t;a>r;a-=1)e.deleteRule(a)}(Q(e),ee(a,u)-1,l),a[u]=0,q(n,s),i&&o&&t().removeRules(s+"-import")}},sealed:!1,styleTag:e,toElement:ne(u,n),toHTML:te(u,n)}}(i,a)}return ie()},se=/\s+/,ue=void 0;ue=S?x?40:1e3:-1;var le=0,de=void 0,ce=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:S?document.head:null,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];h(this,e),this.getImportRuleTag=function(){var e=t.importRuleTag;if(void 0!==e)return e;var n=t.tags[0];return t.importRuleTag=oe(t.target,n?n.styleTag:null,t.forceServer,!0)},le+=1,this.id=le,this.forceServer=r,this.target=r?null:n,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!S||this.forceServer)return this;var e=[],t=[],n=!1,r=document.querySelectorAll("style["+D+'][data-styled-version="4.4.1"]'),a=r.length;if(!a)return this;for(var i=0;i<a;i+=1){var o=r[i];n||(n=!!o.getAttribute("data-styled-streamed"));for(var s,u=(o.getAttribute(D)||"").trim().split(se),l=u.length,d=0;d<l;d+=1)s=u[d],this.rehydratedNames[s]=!0;t.push.apply(t,H(o.textContent)),e.push(o)}var c=t.length;if(!c)return this;var f=this.makeTag(null);!function(e,t,n){for(var r=0,a=n.length;r<a;r+=1){var i=n[r],o=i.componentId,s=i.cssFromDOM,u=B(s);e.insertRules(o,u)}for(var l=0,d=t.length;l<d;l+=1){var c=t[l];c.parentNode&&c.parentNode.removeChild(c)}}(f,e,t),this.capacity=Math.max(1,ue-c),this.tags.push(f);for(var m=0;m<c;m+=1)this.tagMap[t[m].componentId]=f;return this},e.reset=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];de=new e(void 0,t).rehydrate()},e.prototype.clone=function(){var t=new e(this.target,this.forceServer);return this.clones.push(t),t.tags=this.tags.map((function(e){for(var n=e.getIds(),r=e.clone(),a=0;a<n.length;a+=1)t.tagMap[n[a]]=r;return r})),t.rehydratedNames=g({},this.rehydratedNames),t.deferred=g({},this.deferred),t},e.prototype.sealAllTags=function(){this.capacity=1,this.tags.forEach((function(e){e.sealed=!0}))},e.prototype.makeTag=function(e){var t=e?e.styleTag:null;return oe(this.target,t,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var t=this.tagMap[e];if(void 0!==t&&!t.sealed)return t;var n=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=ue,n=this.makeTag(n),this.tags.push(n)),this.tagMap[e]=n},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,t){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[t])return!0;var n=this.tagMap[e];return void 0!==n&&n.hasNameForId(e,t)},e.prototype.deferredInject=function(e,t){if(void 0===this.tagMap[e]){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].deferredInject(e,t);this.getTagForId(e).insertMarker(e),this.deferred[e]=t}},e.prototype.inject=function(e,t,n){for(var r=this.clones,a=0;a<r.length;a+=1)r[a].inject(e,t,n);var i=this.getTagForId(e);if(void 0!==this.deferred[e]){var o=this.deferred[e].concat(t);i.insertRules(e,o,n),this.deferred[e]=void 0}else i.insertRules(e,t,n)},e.prototype.remove=function(e){var t=this.tagMap[e];if(void 0!==t){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].remove(e);t.removeRules(e),this.ignoreRehydratedNames[e]=!0,this.deferred[e]=void 0}},e.prototype.toHTML=function(){return this.tags.map((function(e){return e.toHTML()})).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map((function(t,n){var r="sc-"+e+"-"+n;return Object(s.cloneElement)(t.toElement(),{key:r})}))},y(e,null,[{key:"master",get:function(){return de||(de=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),fe=function(){function e(t,n){var r=this;h(this,e),this.inject=function(e){e.hasNameForId(r.id,r.name)||e.inject(r.id,r.rules,r.name)},this.toString=function(){throw new O(12,String(r.name))},this.name=t,this.rules=n,this.id="sc-keyframes-"+t}return e.prototype.getName=function(){return this.name},e}(),me=/([A-Z])/g,_e=/^ms-/;function pe(e){return e.replace(me,"-$1").toLowerCase().replace(_e,"-ms-")}var he=function(e){return null==e||!1===e||""===e},ye=function e(t,n){var r=[];return Object.keys(t).forEach((function(n){if(!he(t[n])){if(b(t[n]))return r.push.apply(r,e(t[n],n)),r;if(w(t[n]))return r.push(pe(n)+":",t[n],";"),r;r.push(pe(n)+": "+(a=n,(null==(i=t[n])||"boolean"==typeof i||""===i?"":"number"!=typeof i||0===i||a in l.a?String(i).trim():i+"px")+";"))}var a,i;return r})),n?[n+" {"].concat(r,["}"]):r};function ge(e,t,n){if(Array.isArray(e)){for(var r,a=[],i=0,o=e.length;i<o;i+=1)null!==(r=ge(e[i],t,n))&&(Array.isArray(r)?a.push.apply(a,r):a.push(r));return a}return he(e)?null:T(e)?"."+e.styledComponentId:w(e)?"function"!=typeof(s=e)||s.prototype&&s.prototype.isReactComponent||!t?e:ge(e(t),t,n):e instanceof fe?n?(e.inject(n),e.getName()):e:b(e)?ye(e):e.toString();var s}function Me(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return w(e)||b(e)?ge(_(L,[e].concat(n))):ge(_(e,n))}function ve(e){for(var t,n=0|e.length,r=0|n,a=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(a)|(255&e.charCodeAt(++a))<<8|(255&e.charCodeAt(++a))<<16|(255&e.charCodeAt(++a))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++a;switch(n){case 3:r^=(255&e.charCodeAt(a+2))<<16;case 2:r^=(255&e.charCodeAt(a+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(a)))+((1540483477*(r>>>16)&65535)<<16)}return((r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16))^r>>>15)>>>0}var be=function(e){return String.fromCharCode(e+(e>25?39:97))};function Le(e){var t="",n=void 0;for(n=e;n>52;n=Math.floor(n/52))t=be(n%52)+t;return be(n%52)+t}function ke(e,t){for(var n=0;n<e.length;n+=1){var r=e[n];if(Array.isArray(r)&&!ke(r,t))return!1;if(w(r)&&!T(r))return!1}return!t.some((function(e){return w(e)||function(e){for(var t in e)if(w(e[t]))return!0;return!1}(e)}))}var we,Ye=function(e){return Le(ve(e))},Te=function(){function e(t,n,r){h(this,e),this.rules=t,this.isStatic=ke(t,n),this.componentId=r,ce.master.hasId(r)||ce.master.deferredInject(r,[])}return e.prototype.generateAndInjectStyles=function(e,t){var n=this.isStatic,r=this.componentId,a=this.lastClassName;if(S&&n&&"string"==typeof a&&t.hasNameForId(r,a))return a;var i=ge(this.rules,e,t),o=Ye(this.componentId+i.join(""));return t.hasNameForId(r,o)||t.inject(this.componentId,J(i,"."+o,void 0,r),o),this.lastClassName=o,o},e.generateName=function(e){return Ye(e)},e}(),De=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k,r=!!n&&e.theme===n.theme,a=e.theme&&!r?e.theme:t||n.theme;return a},Se=/[[\].#*$><+~=|^:(),"'`-]+/g,xe=/(^-|-$)/g;function je(e){return e.replace(Se,"-").replace(xe,"")}function Oe(e){return"string"==typeof e&&!0}var Ee={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDerivedStateFromProps:!0,propTypes:!0,type:!0},He={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Pe=((we={})[d.ForwardRef]={$$typeof:!0,render:!0},we),Ae=Object.defineProperty,Ce=Object.getOwnPropertyNames,Ne=Object.getOwnPropertySymbols,Fe=void 0===Ne?function(){return[]}:Ne,We=Object.getOwnPropertyDescriptor,ze=Object.getPrototypeOf,Ie=Object.prototype,Re=Array.prototype;function Ue(e,t,n){if("string"!=typeof t){var r=ze(t);r&&r!==Ie&&Ue(e,r,n);for(var a=Re.concat(Ce(t),Fe(t)),i=Pe[e.$$typeof]||Ee,o=Pe[t.$$typeof]||Ee,s=a.length,u=void 0,l=void 0;s--;)if(l=a[s],!(He[l]||n&&n[l]||o&&o[l]||i&&i[l])&&(u=We(t,l)))try{Ae(e,l,u)}catch(e){}return e}return e}var Be=Object(s.createContext)(),Je=Be.Consumer,$e=(function(e){function t(n){h(this,t);var r=v(this,e.call(this,n));return r.getContext=Object(c.a)(r.getContext.bind(r)),r.renderInner=r.renderInner.bind(r),r}M(t,e),t.prototype.render=function(){return this.props.children?u.a.createElement(Be.Consumer,null,this.renderInner):null},t.prototype.renderInner=function(e){var t=this.getContext(this.props.theme,e);return u.a.createElement(Be.Provider,{value:t},this.props.children)},t.prototype.getTheme=function(e,t){if(w(e))return e(t);if(null===e||Array.isArray(e)||"object"!==(void 0===e?"undefined":p(e)))throw new O(8);return g({},t,e)},t.prototype.getContext=function(e,t){return this.getTheme(e,t)}}(s.Component),function(){function e(){h(this,e),this.masterSheet=ce.master,this.instance=this.masterSheet.clone(),this.sealed=!1}e.prototype.seal=function(){if(!this.sealed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.sealed=!0}},e.prototype.collectStyles=function(e){if(this.sealed)throw new O(2);return u.a.createElement(qe,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.seal(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.seal(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new O(3)}}(),Object(s.createContext)()),Ve=$e.Consumer,qe=function(e){function t(n){h(this,t);var r=v(this,e.call(this,n));return r.getContext=Object(c.a)(r.getContext),r}return M(t,e),t.prototype.getContext=function(e,t){if(e)return e;if(t)return new ce(t);throw new O(4)},t.prototype.render=function(){var e=this.props,t=e.children,n=e.sheet,r=e.target;return u.a.createElement($e.Provider,{value:this.getContext(n,r)},t)},t}(s.Component),Ge={};var Ke=function(e){function t(){h(this,t);var n=v(this,e.call(this));return n.attrs={},n.renderOuter=n.renderOuter.bind(n),n.renderInner=n.renderInner.bind(n),n}return M(t,e),t.prototype.render=function(){return u.a.createElement(Ve,null,this.renderOuter)},t.prototype.renderOuter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ce.master;return this.styleSheet=e,this.props.forwardedComponent.componentStyle.isStatic?this.renderInner():u.a.createElement(Je,null,this.renderInner)},t.prototype.renderInner=function(e){var t=this.props.forwardedComponent,n=t.componentStyle,r=t.defaultProps,a=(t.displayName,t.foldedComponentIds),i=t.styledComponentId,o=t.target,u=void 0;u=n.isStatic?this.generateAndInjectStyles(k,this.props):this.generateAndInjectStyles(De(this.props,e,r)||k,this.props);var l=this.props.as||this.attrs.as||o,d=Oe(l),c={},m=g({},this.props,this.attrs),_=void 0;for(_ in m)"forwardedComponent"!==_&&"as"!==_&&("forwardedRef"===_?c.ref=m[_]:"forwardedAs"===_?c.as=m[_]:d&&!Object(f.a)(_)||(c[_]=m[_]));return this.props.style&&this.attrs.style&&(c.style=g({},this.attrs.style,this.props.style)),c.className=Array.prototype.concat(a,i,u!==i?u:null,this.props.className,this.attrs.className).filter(Boolean).join(" "),Object(s.createElement)(l,c)},t.prototype.buildExecutionContext=function(e,t,n){var r=this,a=g({},t,{theme:e});return n.length?(this.attrs={},n.forEach((function(e){var t,n=e,i=!1,o=void 0,s=void 0;for(s in w(n)&&(n=n(a),i=!0),n)o=n[s],i||!w(o)||(t=o)&&t.prototype&&t.prototype.isReactComponent||T(o)||(o=o(a)),r.attrs[s]=o,a[s]=o})),a):a},t.prototype.generateAndInjectStyles=function(e,t){var n=t.forwardedComponent,r=n.attrs,a=n.componentStyle;n.warnTooManyClasses;return a.isStatic&&!r.length?a.generateAndInjectStyles(k,this.styleSheet):a.generateAndInjectStyles(this.buildExecutionContext(e,t,r),this.styleSheet)},t}(s.Component);function Qe(e,t,n){var r=T(e),a=!Oe(e),i=t.displayName,o=void 0===i?function(e){return Oe(e)?"styled."+e:"Styled("+Y(e)+")"}(e):i,s=t.componentId,l=void 0===s?function(e,t,n){var r="string"!=typeof t?"sc":je(t),a=(Ge[r]||0)+1;Ge[r]=a;var i=r+"-"+e.generateName(r+a);return n?n+"-"+i:i}(Te,t.displayName,t.parentComponentId):s,d=t.ParentComponent,c=void 0===d?Ke:d,f=t.attrs,_=void 0===f?L:f,p=t.displayName&&t.componentId?je(t.displayName)+"-"+t.componentId:t.componentId||l,h=r&&e.attrs?Array.prototype.concat(e.attrs,_).filter(Boolean):_,y=new Te(r?e.componentStyle.rules.concat(n):n,h,p),M=void 0,v=function(e,t){return u.a.createElement(c,g({},e,{forwardedComponent:M,forwardedRef:t}))};return v.displayName=o,(M=u.a.forwardRef(v)).displayName=o,M.attrs=h,M.componentStyle=y,M.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):L,M.styledComponentId=p,M.target=r?e.target:e,M.withComponent=function(e){var r=t.componentId,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["componentId"]),i=r&&r+"-"+(Oe(e)?e:je(Y(e)));return Qe(e,g({},a,{attrs:h,componentId:i,ParentComponent:c}),n)},Object.defineProperty(M,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?Object(m.a)(e.defaultProps,t):t}}),M.toString=function(){return"."+M.styledComponentId},a&&Ue(M,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,styledComponentId:!0,target:!0,withComponent:!0}),M}var Ze=function(e){return function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k;if(!Object(d.isValidElementType)(n))throw new O(1,String(n));var a=function(){return t(n,r,Me.apply(void 0,arguments))};return a.withConfig=function(a){return e(t,n,g({},r,a))},a.attrs=function(a){return e(t,n,g({},r,{attrs:Array.prototype.concat(r.attrs,a).filter(Boolean)}))},a}(Qe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Ze[e]=Ze(e)}));var Xe=function(){function e(t,n){h(this,e),this.rules=t,this.componentId=n,this.isStatic=ke(t,L),ce.master.hasId(n)||ce.master.deferredInject(n,[])}return e.prototype.createStyles=function(e,t){var n=J(ge(this.rules,e,t),"");t.inject(this.componentId,n)},e.prototype.removeStyles=function(e){var t=this.componentId;e.hasId(t)&&e.remove(t)},e.prototype.renderStyles=function(e,t){this.removeStyles(t),this.createStyles(e,t)},e}();function et(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var a=Me.apply(void 0,[e].concat(n)),i="sc-global-"+ve(JSON.stringify(a)),o=new Xe(a,i),s=function(e){function t(n){h(this,t);var r=v(this,e.call(this,n)),a=r.constructor,i=a.globalStyle,o=a.styledComponentId;return S&&(window.scCGSHMRCache[o]=(window.scCGSHMRCache[o]||0)+1),r.state={globalStyle:i,styledComponentId:o},r}return M(t,e),t.prototype.componentWillUnmount=function(){window.scCGSHMRCache[this.state.styledComponentId]&&(window.scCGSHMRCache[this.state.styledComponentId]-=1),0===window.scCGSHMRCache[this.state.styledComponentId]&&this.state.globalStyle.removeStyles(this.styleSheet)},t.prototype.render=function(){var e=this;return u.a.createElement(Ve,null,(function(t){e.styleSheet=t||ce.master;var n=e.state.globalStyle;return n.isStatic?(n.renderStyles(j,e.styleSheet),null):u.a.createElement(Je,null,(function(t){var r=e.constructor.defaultProps,a=g({},e.props);return void 0!==t&&(a.theme=De(e.props,t,r)),n.renderStyles(a,e.styleSheet),null}))}))},t}(u.a.Component);return s.globalStyle=o,s.styledComponentId=i,s}S&&(window.scCGSHMRCache={});t.b=Ze}).call(this,n(13))},function(e,t,n){"use strict";var r=n(36),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function o(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==a.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function l(e){return"[object Function]"===a.call(e)}function d(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!o(e)&&null!==e.constructor&&!o(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:u,isUndefined:o,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:l,isStream:function(e){return s(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:d,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,a=arguments.length;r<a;r++)d(arguments[r],n);return t},extend:function(e,t,n){return d(t,(function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";e.exports=function(e){return a.test("number"==typeof e?r(e):e.charAt(0))};var r=String.fromCharCode,a=/\s/},function(e,t){e.exports=function(){for(var e={},t=0;t<arguments.length;t++){var r=arguments[t];for(var a in r)n.call(r,a)&&(e[a]=r[a])}return e};var n=Object.prototype.hasOwnProperty},function(e,t,n){var r=n(218)();e.exports=r;try{regeneratorRuntime=r}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(e,t,n){"use strict";e.exports=TypeError},function(e,t){(t=e.exports=function(e){return e.replace(/^\s*|\s*$/g,"")}).left=function(e){return e.replace(/^\s*/,"")},t.right=function(e){return e.replace(/\s*$/,"")}},function(e,t,n){var r=n(35);e.exports=function(e,t,n){return(t=r(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(e,t,n,r,a,i,o){try{var s=e[i](o),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,a)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(a,i){var o=e.apply(t,r);function s(e){n(o,a,i,s,u,"next",e)}function u(e){n(o,a,i,s,u,"throw",e)}s(void 0)}))}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){var n,r,a=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var u,l=[],d=!1,c=-1;function f(){d&&u&&(d=!1,u.length?l=u.concat(l):c=-1,l.length&&m())}function m(){if(!d){var e=s(f);d=!0;for(var t=l.length;t;){for(u=l,l=[];++c<t;)u&&u[c].run();c=-1,t=l.length}u=null,d=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function _(e,t){this.fun=e,this.array=t}function p(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new _(e,t)),1!==l.length||d||s(m)},_.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=p,a.addListener=p,a.once=p,a.off=p,a.removeListener=p,a.removeAllListeners=p,a.emit=p,a.prependListener=p,a.prependOnceListener=p,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t){var n,r,a=Function.prototype,i=Object.prototype,o=a.toString,s=i.hasOwnProperty,u=o.call(Object),l=i.toString,d=(n=Object.getPrototypeOf,r=Object,function(e){return n(r(e))});e.exports=function(e){if(!function(e){return!!e&&"object"==typeof e}(e)||"[object Object]"!=l.call(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e))return!1;var t=d(e);if(null===t)return!0;var n=s.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&o.call(n)==u}},function(e,t){function n(t){return e.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){(function(t){var r="function"==typeof Map&&Map.prototype,a=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=r&&a&&"function"==typeof a.get?a.get:null,o=r&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,u=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,l=s&&u&&"function"==typeof u.get?u.get:null,d=s&&Set.prototype.forEach,c="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,f="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,m="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,_=Boolean.prototype.valueOf,p=Object.prototype.toString,h=Function.prototype.toString,y=String.prototype.match,g=String.prototype.slice,M=String.prototype.replace,v=String.prototype.toUpperCase,b=String.prototype.toLowerCase,L=RegExp.prototype.test,k=Array.prototype.concat,w=Array.prototype.join,Y=Array.prototype.slice,T=Math.floor,D="function"==typeof BigInt?BigInt.prototype.valueOf:null,S=Object.getOwnPropertySymbols,x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,j="function"==typeof Symbol&&"object"==typeof Symbol.iterator,O="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===j||"symbol")?Symbol.toStringTag:null,E=Object.prototype.propertyIsEnumerable,H=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function P(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||L.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-T(-e):T(e);if(r!==e){var a=String(r),i=g.call(t,a.length+1);return M.call(a,n,"$&_")+"."+M.call(M.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return M.call(t,n,"$&_")}var A=n(237),C=A.custom,N=J(C)?C:null,F={__proto__:null,double:'"',single:"'"},W={__proto__:null,double:/(["\\])/g,single:/(['\\])/g};function z(e,t,n){var r=n.quoteStyle||t,a=F[r];return a+e+a}function I(e){return M.call(String(e),/"/g,"&quot;")}function R(e){return!O||!("object"==typeof e&&(O in e||void 0!==e[O]))}function U(e){return"[object Array]"===q(e)&&R(e)}function B(e){return"[object RegExp]"===q(e)&&R(e)}function J(e){if(j)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!x)return!1;try{return x.call(e),!0}catch(e){}return!1}e.exports=function e(n,r,a,s){var u=r||{};if(V(u,"quoteStyle")&&!V(F,u.quoteStyle))throw new TypeError('option "quoteStyle" must be "single" or "double"');if(V(u,"maxStringLength")&&("number"==typeof u.maxStringLength?u.maxStringLength<0&&u.maxStringLength!==1/0:null!==u.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var p=!V(u,"customInspect")||u.customInspect;if("boolean"!=typeof p&&"symbol"!==p)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(V(u,"indent")&&null!==u.indent&&"\t"!==u.indent&&!(parseInt(u.indent,10)===u.indent&&u.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(V(u,"numericSeparator")&&"boolean"!=typeof u.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var v=u.numericSeparator;if(void 0===n)return"undefined";if(null===n)return"null";if("boolean"==typeof n)return n?"true":"false";if("string"==typeof n)return function e(t,n){if(t.length>n.maxStringLength){var r=t.length-n.maxStringLength,a="... "+r+" more character"+(r>1?"s":"");return e(g.call(t,0,n.maxStringLength),n)+a}var i=W[n.quoteStyle||"single"];return i.lastIndex=0,z(M.call(M.call(t,i,"\\$1"),/[\x00-\x1f]/g,K),"single",n)}(n,u);if("number"==typeof n){if(0===n)return 1/0/n>0?"0":"-0";var L=String(n);return v?P(n,L):L}if("bigint"==typeof n){var T=String(n)+"n";return v?P(n,T):T}var S=void 0===u.depth?5:u.depth;if(void 0===a&&(a=0),a>=S&&S>0&&"object"==typeof n)return U(n)?"[Array]":"[Object]";var C=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=w.call(Array(e.indent+1)," ")}return{base:n,prev:w.call(Array(t+1),n)}}(u,a);if(void 0===s)s=[];else if(G(s,n)>=0)return"[Circular]";function $(t,n,r){if(n&&(s=Y.call(s)).push(n),r){var i={depth:u.depth};return V(u,"quoteStyle")&&(i.quoteStyle=u.quoteStyle),e(t,i,a+1,s)}return e(t,u,a+1,s)}if("function"==typeof n&&!B(n)){var ne=function(e){if(e.name)return e.name;var t=y.call(h.call(e),/^function\s*([\w$]+)/);if(t)return t[1];return null}(n),re=te(n,$);return"[Function"+(ne?": "+ne:" (anonymous)")+"]"+(re.length>0?" { "+w.call(re,", ")+" }":"")}if(J(n)){var ae=j?M.call(String(n),/^(Symbol\(.*\))_[^)]*$/,"$1"):x.call(n);return"object"!=typeof n||j?ae:Q(ae)}if(function(e){if(!e||"object"!=typeof e)return!1;if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement)return!0;return"string"==typeof e.nodeName&&"function"==typeof e.getAttribute}(n)){for(var ie="<"+b.call(String(n.nodeName)),oe=n.attributes||[],se=0;se<oe.length;se++)ie+=" "+oe[se].name+"="+z(I(oe[se].value),"double",u);return ie+=">",n.childNodes&&n.childNodes.length&&(ie+="..."),ie+="</"+b.call(String(n.nodeName))+">"}if(U(n)){if(0===n.length)return"[]";var ue=te(n,$);return C&&!function(e){for(var t=0;t<e.length;t++)if(G(e[t],"\n")>=0)return!1;return!0}(ue)?"["+ee(ue,C)+"]":"[ "+w.call(ue,", ")+" ]"}if(function(e){return"[object Error]"===q(e)&&R(e)}(n)){var le=te(n,$);return"cause"in Error.prototype||!("cause"in n)||E.call(n,"cause")?0===le.length?"["+String(n)+"]":"{ ["+String(n)+"] "+w.call(le,", ")+" }":"{ ["+String(n)+"] "+w.call(k.call("[cause]: "+$(n.cause),le),", ")+" }"}if("object"==typeof n&&p){if(N&&"function"==typeof n[N]&&A)return A(n,{depth:S-a});if("symbol"!==p&&"function"==typeof n.inspect)return n.inspect()}if(function(e){if(!i||!e||"object"!=typeof e)return!1;try{i.call(e);try{l.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(n)){var de=[];return o&&o.call(n,(function(e,t){de.push($(t,n,!0)+" => "+$(e,n))})),X("Map",i.call(n),de,C)}if(function(e){if(!l||!e||"object"!=typeof e)return!1;try{l.call(e);try{i.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(n)){var ce=[];return d&&d.call(n,(function(e){ce.push($(e,n))})),X("Set",l.call(n),ce,C)}if(function(e){if(!c||!e||"object"!=typeof e)return!1;try{c.call(e,c);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(n))return Z("WeakMap");if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{c.call(e,c)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(n))return Z("WeakSet");if(function(e){if(!m||!e||"object"!=typeof e)return!1;try{return m.call(e),!0}catch(e){}return!1}(n))return Z("WeakRef");if(function(e){return"[object Number]"===q(e)&&R(e)}(n))return Q($(Number(n)));if(function(e){if(!e||"object"!=typeof e||!D)return!1;try{return D.call(e),!0}catch(e){}return!1}(n))return Q($(D.call(n)));if(function(e){return"[object Boolean]"===q(e)&&R(e)}(n))return Q(_.call(n));if(function(e){return"[object String]"===q(e)&&R(e)}(n))return Q($(String(n)));if("undefined"!=typeof window&&n===window)return"{ [object Window] }";if("undefined"!=typeof globalThis&&n===globalThis||void 0!==t&&n===t)return"{ [object globalThis] }";if(!function(e){return"[object Date]"===q(e)&&R(e)}(n)&&!B(n)){var fe=te(n,$),me=H?H(n)===Object.prototype:n instanceof Object||n.constructor===Object,_e=n instanceof Object?"":"null prototype",pe=!me&&O&&Object(n)===n&&O in n?g.call(q(n),8,-1):_e?"Object":"",he=(me||"function"!=typeof n.constructor?"":n.constructor.name?n.constructor.name+" ":"")+(pe||_e?"["+w.call(k.call([],pe||[],_e||[]),": ")+"] ":"");return 0===fe.length?he+"{}":C?he+"{"+ee(fe,C)+"}":he+"{ "+w.call(fe,", ")+" }"}return String(n)};var $=Object.prototype.hasOwnProperty||function(e){return e in this};function V(e,t){return $.call(e,t)}function q(e){return p.call(e)}function G(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function K(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+v.call(t.toString(16))}function Q(e){return"Object("+e+")"}function Z(e){return e+" { ? }"}function X(e,t,n,r){return e+" ("+t+") {"+(r?ee(n,r):w.call(n,", "))+"}"}function ee(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+w.call(e,","+n)+"\n"+t.prev}function te(e,t){var n=U(e),r=[];if(n){r.length=e.length;for(var a=0;a<e.length;a++)r[a]=V(e,a)?t(e[a],e):""}var i,o="function"==typeof S?S(e):[];if(j){i={};for(var s=0;s<o.length;s++)i["$"+o[s]]=o[s]}for(var u in e)V(e,u)&&(n&&String(Number(u))===u&&u<e.length||j&&i["$"+u]instanceof Symbol||(L.call(/[^\w$]/,u)?r.push(t(u,e)+": "+t(e[u],e)):r.push(u+": "+t(e[u],e))));if("function"==typeof S)for(var l=0;l<o.length;l++)E.call(e,o[l])&&r.push("["+t(o[l])+"]: "+t(e[o[l]],e));return r}}).call(this,n(44))},function(e,t,n){"use strict";var r=n(259);e.exports=Function.prototype.bind||r},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=48&&t<=57}},function(e,t,n){"use strict";e.exports=s;var r=n(304),a=r.CONTINUE,i=r.SKIP,o=r.EXIT;function s(e,t,n,a){"function"==typeof t&&"function"!=typeof n&&(a=n,n=t,t=null),r(e,t,(function(e,t){var r=t[t.length-1],a=r?r.children.indexOf(e):null;return n(e,a,r)}),a)}s.CONTINUE=a,s.SKIP=i,s.EXIT=o},function(e,t,n){"use strict";e.exports=n(217)},function(e,t,n){var r=n(267),a=n(268),i=n(269),o=n(271);e.exports=function(e,t){return r(e)||a(e,t)||i(e,t)||o()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(46),a=n(239),i=n(240),o=n(241),s=n(242),u=n(243),l=n(9),d=n(244),c=n(245),f=n(246),m=n(247),_=n(248),p=n(249),h=n(250),y=n(251),g=Function,M=function(e){try{return g('"use strict"; return ('+e+").constructor;")()}catch(e){}},v=n(47),b=n(254),L=function(){throw new l},k=v?function(){try{return L}catch(e){try{return v(arguments,"callee").get}catch(e){return L}}}():L,w=n(255)(),Y=n(257),T=n(49),D=n(48),S=n(51),x=n(23),j={},O="undefined"!=typeof Uint8Array&&Y?Y(Uint8Array):void 0,E={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":w&&Y?Y([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":j,"%AsyncGenerator%":j,"%AsyncGeneratorFunction%":j,"%AsyncIteratorPrototype%":j,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?void 0:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":a,"%eval%":eval,"%EvalError%":i,"%Float16Array%":"undefined"==typeof Float16Array?void 0:Float16Array,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":g,"%GeneratorFunction%":j,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":w&&Y?Y(Y([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&w&&Y?Y((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":r,"%Object.getOwnPropertyDescriptor%":v,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":o,"%ReferenceError%":s,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&w&&Y?Y((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":w&&Y?Y(""[Symbol.iterator]()):void 0,"%Symbol%":w?Symbol:void 0,"%SyntaxError%":u,"%ThrowTypeError%":k,"%TypedArray%":O,"%TypeError%":l,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":d,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%Function.prototype.call%":x,"%Function.prototype.apply%":S,"%Object.defineProperty%":b,"%Object.getPrototypeOf%":T,"%Math.abs%":c,"%Math.floor%":f,"%Math.max%":m,"%Math.min%":_,"%Math.pow%":p,"%Math.round%":h,"%Math.sign%":y,"%Reflect.getPrototypeOf%":D};if(Y)try{null.error}catch(e){var H=Y(Y(e));E["%Error.prototype%"]=H}var P={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},A=n(17),C=n(262),N=A.call(x,Array.prototype.concat),F=A.call(S,Array.prototype.splice),W=A.call(x,String.prototype.replace),z=A.call(x,String.prototype.slice),I=A.call(x,RegExp.prototype.exec),R=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,U=/\\(\\)?/g,B=function(e){var t=z(e,0,1),n=z(e,-1);if("%"===t&&"%"!==n)throw new u("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new u("invalid intrinsic syntax, expected opening `%`");var r=[];return W(e,R,(function(e,t,n,a){r[r.length]=n?W(a,U,"$1"):t||e})),r},J=function(e,t){var n,r=e;if(C(P,r)&&(r="%"+(n=P[r])[0]+"%"),C(E,r)){var a=E[r];if(a===j&&(a=function e(t){var n;if("%AsyncFunction%"===t)n=M("async function () {}");else if("%GeneratorFunction%"===t)n=M("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=M("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var a=e("%AsyncGenerator%");a&&Y&&(n=Y(a.prototype))}return E[t]=n,n}(r)),void 0===a&&!t)throw new l("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:a}}throw new u("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new l("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new l('"allowMissing" argument must be a boolean');if(null===I(/^%?[^%]*%?$/,e))throw new u("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=B(e),r=n.length>0?n[0]:"",a=J("%"+r+"%",t),i=a.name,o=a.value,s=!1,d=a.alias;d&&(r=d[0],F(n,N([0,1],d)));for(var c=1,f=!0;c<n.length;c+=1){var m=n[c],_=z(m,0,1),p=z(m,-1);if(('"'===_||"'"===_||"`"===_||'"'===p||"'"===p||"`"===p)&&_!==p)throw new u("property names with quotes must have matching quotes");if("constructor"!==m&&f||(s=!0),C(E,i="%"+(r+="."+m)+"%"))o=E[i];else if(null!=o){if(!(m in o)){if(!t)throw new l("base intrinsic for "+e+" exists, but the property is not available.");return}if(v&&c+1>=n.length){var h=v(o,m);o=(f=!!h)&&"get"in h&&!("originalValue"in h.get)?h.get:o[m]}else f=C(o,m),o=o[m];f&&!s&&(E[i]=o)}}return o}},function(e,t,n){"use strict";e.exports=Function.prototype.call},function(e,t,n){"use strict";var r=String.prototype.replace,a=/%20/g,i="RFC1738",o="RFC3986";e.exports={default:o,formatters:{RFC1738:function(e){return r.call(e,a,"+")},RFC3986:function(e){return String(e)}},RFC1738:i,RFC3986:o}},function(e,t,n){"use strict";var r=n(293),a=n(294),i=n(18),o=n(295),s=n(296),u=n(297);e.exports=function(e,t){var n,i,o={};t||(t={});for(i in f)n=t[i],o[i]=null==n?f[i]:n;(o.position.indent||o.position.start)&&(o.indent=o.position.indent||[],o.position=o.position.start);return function(e,t){var n,i,o,f,M,v,b,L,k,w,Y,T,D,S,x,j,O,E,H,P=t.additional,A=t.nonTerminated,C=t.text,N=t.reference,F=t.warning,W=t.textContext,z=t.referenceContext,I=t.warningContext,R=t.position,U=t.indent||[],B=e.length,J=0,$=-1,V=R.column||1,q=R.line||1,G="",K=[];"string"==typeof P&&(P=P.charCodeAt(0));j=Z(),L=F?function(e,t){var n=Z();n.column+=t,n.offset+=t,F.call(I,y[e],n,e)}:c,J--,B++;for(;++J<B;)if(10===M&&(V=U[$]||1),38===(M=e.charCodeAt(J))){if(9===(b=e.charCodeAt(J+1))||10===b||12===b||32===b||38===b||60===b||b!=b||P&&b===P){G+=d(M),V++;continue}for(T=D=J+1,H=D,35===b?(H=++T,88===(b=e.charCodeAt(H))||120===b?(S=_,H=++T):S="decimal"):S=m,n="",Y="",f="",x=h[S],H--;++H<B&&(b=e.charCodeAt(H),x(b));)f+=d(b),S===m&&l.call(r,f)&&(n=f,Y=r[f]);(o=59===e.charCodeAt(H))&&(H++,(i=S===m&&u(f))&&(n=f,Y=i)),E=1+H-D,(o||A)&&(f?S===m?(o&&!Y?L(5,1):(n!==f&&(H=T+n.length,E=1+H-T,o=!1),o||(k=n?1:3,t.attribute?61===(b=e.charCodeAt(H))?(L(k,E),Y=null):s(b)?Y=null:L(k,E):L(k,E))),v=Y):(o||L(2,E),v=parseInt(f,p[S]),(Q=v)>=55296&&Q<=57343||Q>1114111?(L(7,E),v=d(65533)):v in a?(L(6,E),v=a[v]):(w="",g(v)&&L(6,E),v>65535&&(w+=d((v-=65536)>>>10|55296),v=56320|1023&v),v=w+d(v))):S!==m&&L(4,E)),v?(X(),j=Z(),J=H-1,V+=H-D+1,K.push(v),(O=Z()).offset++,N&&N.call(z,v,{start:j,end:O},e.slice(D-1,H)),j=O):(f=e.slice(D-1,H),G+=f,V+=f.length,J=H-1)}else 10===M&&(q++,$++,V=0),M==M?(G+=d(M),V++):X();var Q;return K.join("");function Z(){return{line:q,column:V,offset:J+(R.offset||0)}}function X(){G&&(K.push(G),C&&C.call(W,G,{start:j,end:Z()}),G="")}}(e,o)};var l={}.hasOwnProperty,d=String.fromCharCode,c=Function.prototype,f={warning:null,reference:null,text:null,warningContext:null,referenceContext:null,textContext:null,position:{},additional:null,attribute:!1,nonTerminated:!0},m="named",_="hexadecimal",p={hexadecimal:16,decimal:10},h={};h[m]=s,h.decimal=i,h[_]=o;var y={};function g(e){return e>=1&&e<=8||11===e||e>=13&&e<=31||e>=127&&e<=159||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)}y[1]="Named character references must be terminated by a semicolon",y[2]="Numeric character references must be terminated by a semicolon",y[3]="Named character references cannot be empty",y[4]="Numeric character references cannot be empty",y[5]="Named character references must be known",y[6]="Numeric character references cannot be disallowed",y[7]="Numeric character references cannot be outside the permissible Unicode range"},function(e,t,n){"use strict";
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var r,a="";e.exports=function(e,t){if("string"!=typeof e)throw new TypeError("expected a string");if(1===t)return e;if(2===t)return e+e;var n=e.length*t;if(r!==e||void 0===r)r=e,a="";else if(a.length>=n)return a.substr(0,n);for(;n>a.length&&t>1;)1&t&&(a+=e),t>>=1,e+=e;return a=(a+=e).substr(0,n)}},function(e,t,n){"use strict";e.exports=function(e){return String(e).replace(/\n+$/,"")}},function(e,t,n){"use strict";e.exports=function(e,t,n,r){var a,i,o,s,u,l,d=["pedantic","commonmark"],c=d.length,f=e.length,m=-1;for(;++m<f;){for(a=e[m],i=a[1]||{},o=a[0],s=-1,l=!1;++s<c;)if(void 0!==i[u=d[s]]&&i[u]!==n.options[u]){l=!0;break}if(!l&&t[o].apply(n,r))return!0}return!1}},function(e,t,n){"use strict";var r=n(317);e.exports=function(e){return r(e).toLowerCase()}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){e.exports=function e(t){"use strict";var n=/^\0+/g,r=/[\0\r\f]/g,a=/: */g,i=/zoo|gra/,o=/([,: ])(transform)/g,s=/,+\s*(?![^(]*[)])/g,u=/ +\s*(?![^(]*[)])/g,l=/ *[\0] */g,d=/,\r+?/g,c=/([\t\r\n ])*\f?&/g,f=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,m=/\W+/g,_=/@(k\w+)\s*(\S*)\s*/,p=/::(place)/g,h=/:(read-only)/g,y=/\s+(?=[{\];=:>])/g,g=/([[}=:>])\s+/g,M=/(\{[^{]+?);(?=\})/g,v=/\s{2,}/g,b=/([^\(])(:+) */g,L=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,Y=/-self|flex-/g,T=/[^]*?(:[rp][el]a[\w-]+)[^]*/,D=/stretch|:\s*\w+\-(?:conte|avail)/,S=/([^-])(image-set\()/,x="-webkit-",j="-moz-",O="-ms-",E=59,H=125,P=123,A=40,C=41,N=10,F=13,W=32,z=45,I=42,R=44,U=58,B=47,J=1,$=1,V=0,q=1,G=1,K=1,Q=0,Z=0,X=0,ee=[],te=[],ne=0,re=null,ae=0,ie=1,oe="",se="",ue="";function le(e,t,a,i,o){for(var s,u,d=0,c=0,f=0,m=0,y=0,g=0,M=0,v=0,L=0,w=0,Y=0,T=0,D=0,S=0,j=0,O=0,Q=0,te=0,re=0,ce=a.length,ye=ce-1,ge="",Me="",ve="",be="",Le="",ke="";j<ce;){if(M=a.charCodeAt(j),j===ye&&c+m+f+d!==0&&(0!==c&&(M=c===B?N:B),m=f=d=0,ce++,ye++),c+m+f+d===0){if(j===ye&&(O>0&&(Me=Me.replace(r,"")),Me.trim().length>0)){switch(M){case W:case 9:case E:case F:case N:break;default:Me+=a.charAt(j)}M=E}if(1===Q)switch(M){case P:case H:case E:case 34:case 39:case A:case C:case R:Q=0;case 9:case F:case N:case W:break;default:for(Q=0,re=j,y=M,j--,M=E;re<ce;)switch(a.charCodeAt(re++)){case N:case F:case E:++j,M=y,re=ce;break;case U:O>0&&(++j,M=y);case P:re=ce}}switch(M){case P:for(y=(Me=Me.trim()).charCodeAt(0),Y=1,re=++j;j<ce;){switch(M=a.charCodeAt(j)){case P:Y++;break;case H:Y--;break;case B:switch(g=a.charCodeAt(j+1)){case I:case B:j=he(g,j,ye,a)}break;case 91:M++;case A:M++;case 34:case 39:for(;j++<ye&&a.charCodeAt(j)!==M;);}if(0===Y)break;j++}switch(ve=a.substring(re,j),0===y&&(y=(Me=Me.replace(n,"").trim()).charCodeAt(0)),y){case 64:switch(O>0&&(Me=Me.replace(r,"")),g=Me.charCodeAt(1)){case 100:case 109:case 115:case z:s=t;break;default:s=ee}if(re=(ve=le(t,s,ve,g,o+1)).length,X>0&&0===re&&(re=Me.length),ne>0&&(u=pe(3,ve,s=de(ee,Me,te),t,$,J,re,g,o,i),Me=s.join(""),void 0!==u&&0===(re=(ve=u.trim()).length)&&(g=0,ve="")),re>0)switch(g){case 115:Me=Me.replace(k,_e);case 100:case 109:case z:ve=Me+"{"+ve+"}";break;case 107:ve=(Me=Me.replace(_,"$1 $2"+(ie>0?oe:"")))+"{"+ve+"}",ve=1===G||2===G&&me("@"+ve,3)?"@"+x+ve+"@"+ve:"@"+ve;break;default:ve=Me+ve,112===i&&(be+=ve,ve="")}else ve="";break;default:ve=le(t,de(t,Me,te),ve,i,o+1)}Le+=ve,T=0,Q=0,S=0,O=0,te=0,D=0,Me="",ve="",M=a.charCodeAt(++j);break;case H:case E:if((re=(Me=(O>0?Me.replace(r,""):Me).trim()).length)>1)switch(0===S&&((y=Me.charCodeAt(0))===z||y>96&&y<123)&&(re=(Me=Me.replace(" ",":")).length),ne>0&&void 0!==(u=pe(1,Me,t,e,$,J,be.length,i,o,i))&&0===(re=(Me=u.trim()).length)&&(Me="\0\0"),y=Me.charCodeAt(0),g=Me.charCodeAt(1),y){case 0:break;case 64:if(105===g||99===g){ke+=Me+a.charAt(j);break}default:if(Me.charCodeAt(re-1)===U)break;be+=fe(Me,y,g,Me.charCodeAt(2))}T=0,Q=0,S=0,O=0,te=0,Me="",M=a.charCodeAt(++j)}}switch(M){case F:case N:if(c+m+f+d+Z===0)switch(w){case C:case 39:case 34:case 64:case 126:case 62:case I:case 43:case B:case z:case U:case R:case E:case P:case H:break;default:S>0&&(Q=1)}c===B?c=0:q+T===0&&107!==i&&Me.length>0&&(O=1,Me+="\0"),ne*ae>0&&pe(0,Me,t,e,$,J,be.length,i,o,i),J=1,$++;break;case E:case H:if(c+m+f+d===0){J++;break}default:switch(J++,ge=a.charAt(j),M){case 9:case W:if(m+d+c===0)switch(v){case R:case U:case 9:case W:ge="";break;default:M!==W&&(ge=" ")}break;case 0:ge="\\0";break;case 12:ge="\\f";break;case 11:ge="\\v";break;case 38:m+c+d===0&&q>0&&(te=1,O=1,ge="\f"+ge);break;case 108:if(m+c+d+V===0&&S>0)switch(j-S){case 2:112===v&&a.charCodeAt(j-3)===U&&(V=v);case 8:111===L&&(V=L)}break;case U:m+c+d===0&&(S=j);break;case R:c+f+m+d===0&&(O=1,ge+="\r");break;case 34:case 39:0===c&&(m=m===M?0:0===m?M:m);break;case 91:m+c+f===0&&d++;break;case 93:m+c+f===0&&d--;break;case C:m+c+d===0&&f--;break;case A:if(m+c+d===0){if(0===T)switch(2*v+3*L){case 533:break;default:Y=0,T=1}f++}break;case 64:c+f+m+d+S+D===0&&(D=1);break;case I:case B:if(m+d+f>0)break;switch(c){case 0:switch(2*M+3*a.charCodeAt(j+1)){case 235:c=B;break;case 220:re=j,c=I}break;case I:M===B&&v===I&&re+2!==j&&(33===a.charCodeAt(re+2)&&(be+=a.substring(re,j+1)),ge="",c=0)}}if(0===c){if(q+m+d+D===0&&107!==i&&M!==E)switch(M){case R:case 126:case 62:case 43:case C:case A:if(0===T){switch(v){case 9:case W:case N:case F:ge+="\0";break;default:ge="\0"+ge+(M===R?"":"\0")}O=1}else switch(M){case A:S+7===j&&108===v&&(S=0),T=++Y;break;case C:0==(T=--Y)&&(O=1,ge+="\0")}break;case 9:case W:switch(v){case 0:case P:case H:case E:case R:case 12:case 9:case W:case N:case F:break;default:0===T&&(O=1,ge+="\0")}}Me+=ge,M!==W&&9!==M&&(w=M)}}L=v,v=M,j++}if(re=be.length,X>0&&0===re&&0===Le.length&&0===t[0].length==0&&(109!==i||1===t.length&&(q>0?se:ue)===t[0])&&(re=t.join(",").length+2),re>0){if(s=0===q&&107!==i?function(e){for(var t,n,a=0,i=e.length,o=Array(i);a<i;++a){for(var s=e[a].split(l),u="",d=0,c=0,f=0,m=0,_=s.length;d<_;++d)if(!(0===(c=(n=s[d]).length)&&_>1)){if(f=u.charCodeAt(u.length-1),m=n.charCodeAt(0),t="",0!==d)switch(f){case I:case 126:case 62:case 43:case W:case A:break;default:t=" "}switch(m){case 38:n=t+se;case 126:case 62:case 43:case W:case C:case A:break;case 91:n=t+n+se;break;case U:switch(2*n.charCodeAt(1)+3*n.charCodeAt(2)){case 530:if(K>0){n=t+n.substring(8,c-1);break}default:(d<1||s[d-1].length<1)&&(n=t+se+n)}break;case R:t="";default:n=c>1&&n.indexOf(":")>0?t+n.replace(b,"$1"+se+"$2"):t+n+se}u+=n}o[a]=u.replace(r,"").trim()}return o}(t):t,ne>0&&void 0!==(u=pe(2,be,s,e,$,J,re,i,o,i))&&0===(be=u).length)return ke+be+Le;if(be=s.join(",")+"{"+be+"}",G*V!=0){switch(2!==G||me(be,2)||(V=0),V){case 111:be=be.replace(h,":-moz-$1")+be;break;case 112:be=be.replace(p,"::"+x+"input-$1")+be.replace(p,"::-moz-$1")+be.replace(p,":-ms-input-$1")+be}V=0}}return ke+be+Le}function de(e,t,n){var r=t.trim().split(d),a=r,i=r.length,o=e.length;switch(o){case 0:case 1:for(var s=0,u=0===o?"":e[0]+" ";s<i;++s)a[s]=ce(u,a[s],n,o).trim();break;default:s=0;var l=0;for(a=[];s<i;++s)for(var c=0;c<o;++c)a[l++]=ce(e[c]+" ",r[s],n,o).trim()}return a}function ce(e,t,n,r){var a=t,i=a.charCodeAt(0);switch(i<33&&(i=(a=a.trim()).charCodeAt(0)),i){case 38:switch(q+r){case 0:case 1:if(0===e.trim().length)break;default:return a.replace(c,"$1"+e.trim())}break;case U:switch(a.charCodeAt(1)){case 103:if(K>0&&q>0)return a.replace(f,"$1").replace(c,"$1"+ue);break;default:return e.trim()+a.replace(c,"$1"+e.trim())}default:if(n*q>0&&a.indexOf("\f")>0)return a.replace(c,(e.charCodeAt(0)===U?"":"$1")+e.trim())}return e+a}function fe(e,t,n,r){var l,d=0,c=e+";",f=2*t+3*n+4*r;if(944===f)return function(e){var t=e.length,n=e.indexOf(":",9)+1,r=e.substring(0,n).trim(),a=e.substring(n,t-1).trim();switch(e.charCodeAt(9)*ie){case 0:break;case z:if(110!==e.charCodeAt(10))break;default:var i=a.split((a="",s)),o=0;for(n=0,t=i.length;o<t;n=0,++o){for(var l=i[o],d=l.split(u);l=d[n];){var c=l.charCodeAt(0);if(1===ie&&(c>64&&c<90||c>96&&c<123||95===c||c===z&&l.charCodeAt(1)!==z))switch(isNaN(parseFloat(l))+(-1!==l.indexOf("("))){case 1:switch(l){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:l+=oe}}d[n++]=l}a+=(0===o?"":",")+d.join(" ")}}return a=r+a+";",1===G||2===G&&me(a,1)?x+a+a:a}(c);if(0===G||2===G&&!me(c,1))return c;switch(f){case 1015:return 97===c.charCodeAt(10)?x+c+c:c;case 951:return 116===c.charCodeAt(3)?x+c+c:c;case 963:return 110===c.charCodeAt(5)?x+c+c:c;case 1009:if(100!==c.charCodeAt(4))break;case 969:case 942:return x+c+c;case 978:return x+c+j+c+c;case 1019:case 983:return x+c+j+c+O+c+c;case 883:return c.charCodeAt(8)===z?x+c+c:c.indexOf("image-set(",11)>0?c.replace(S,"$1"+x+"$2")+c:c;case 932:if(c.charCodeAt(4)===z)switch(c.charCodeAt(5)){case 103:return x+"box-"+c.replace("-grow","")+x+c+O+c.replace("grow","positive")+c;case 115:return x+c+O+c.replace("shrink","negative")+c;case 98:return x+c+O+c.replace("basis","preferred-size")+c}return x+c+O+c+c;case 964:return x+c+O+"flex-"+c+c;case 1023:if(99!==c.charCodeAt(8))break;return l=c.substring(c.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),x+"box-pack"+l+x+c+O+"flex-pack"+l+c;case 1005:return i.test(c)?c.replace(a,":"+x)+c.replace(a,":"+j)+c:c;case 1e3:switch(d=(l=c.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(d)){case 226:l=c.replace(L,"tb");break;case 232:l=c.replace(L,"tb-rl");break;case 220:l=c.replace(L,"lr");break;default:return c}return x+c+O+l+c;case 1017:if(-1===c.indexOf("sticky",9))return c;case 975:switch(d=(c=e).length-10,f=(l=(33===c.charCodeAt(d)?c.substring(0,d):c).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(l.charCodeAt(8)<111)break;case 115:c=c.replace(l,x+l)+";"+c;break;case 207:case 102:c=c.replace(l,x+(f>102?"inline-":"")+"box")+";"+c.replace(l,x+l)+";"+c.replace(l,O+l+"box")+";"+c}return c+";";case 938:if(c.charCodeAt(5)===z)switch(c.charCodeAt(6)){case 105:return l=c.replace("-items",""),x+c+x+"box-"+l+O+"flex-"+l+c;case 115:return x+c+O+"flex-item-"+c.replace(Y,"")+c;default:return x+c+O+"flex-line-pack"+c.replace("align-content","").replace(Y,"")+c}break;case 973:case 989:if(c.charCodeAt(3)!==z||122===c.charCodeAt(4))break;case 931:case 953:if(!0===D.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?fe(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):c.replace(l,x+l)+c.replace(l,j+l.replace("fill-",""))+c;break;case 962:if(c=x+c+(102===c.charCodeAt(5)?O+c:"")+c,n+r===211&&105===c.charCodeAt(13)&&c.indexOf("transform",10)>0)return c.substring(0,c.indexOf(";",27)+1).replace(o,"$1"+x+"$2")+c}return c}function me(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10),a=e.substring(n+1,e.length-1);return re(2!==t?r:r.replace(T,"$1"),a,t)}function _e(e,t){var n=fe(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(w," or ($1)").substring(4):"("+t+")"}function pe(e,t,n,r,a,i,o,s,u,l){for(var d,c=0,f=t;c<ne;++c)switch(d=te[c].call(ge,e,f,n,r,a,i,o,s,u,l)){case void 0:case!1:case!0:case null:break;default:f=d}if(f!==t)return f}function he(e,t,n,r){for(var a=t+1;a<n;++a)switch(r.charCodeAt(a)){case B:if(e===I&&r.charCodeAt(a-1)===I&&t+2!==a)return a+1;break;case N:if(e===B)return a+1}return a}function ye(e){for(var t in e){var n=e[t];switch(t){case"keyframe":ie=0|n;break;case"global":K=0|n;break;case"cascade":q=0|n;break;case"compress":Q=0|n;break;case"semicolon":Z=0|n;break;case"preserve":X=0|n;break;case"prefix":re=null,n?"function"!=typeof n?G=1:(G=2,re=n):G=0}}return ye}function ge(t,n){if(void 0!==this&&this.constructor===ge)return e(t);var a=t,i=a.charCodeAt(0);i<33&&(i=(a=a.trim()).charCodeAt(0)),ie>0&&(oe=a.replace(m,91===i?"":"-")),i=1,1===q?ue=a:se=a;var o,s=[ue];ne>0&&void 0!==(o=pe(-1,n,s,s,$,J,0,0,0,0))&&"string"==typeof o&&(n=o);var u=le(ee,s,n,0,0);return ne>0&&void 0!==(o=pe(-2,u,s,s,$,J,u.length,0,0,0))&&"string"!=typeof(u=o)&&(i=0),oe="",ue="",se="",V=0,$=1,J=1,Q*i==0?u:u.replace(r,"").replace(y,"").replace(g,"$1").replace(M,"$1").replace(v," ")}return ge.use=function e(t){switch(t){case void 0:case null:ne=te.length=0;break;default:if("function"==typeof t)te[ne++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else ae=0|!!t}return e},ge.set=ye,void 0!==t&&ye(t),ge}(null)},function(e,t,n){"use strict";var r=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function a(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(a=e[n],i=t[n],!(a===i||r(a)&&r(i)))return!1;var a,i;return!0}t.a=function(e,t){var n;void 0===t&&(t=a);var r,i=[],o=!1;return function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];return o&&n===this&&t(a,i)||(r=e.apply(this,a),o=!0,n=this,i=a),r}}},function(e,t){var n=Object.prototype.toString,r=Array.isArray;e.exports=function(e){return"string"==typeof e||!r(e)&&function(e){return!!e&&"object"==typeof e}(e)&&"[object String]"==n.call(e)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=o(e),l=1;l<arguments.length;l++){for(var d in n=Object(arguments[l]))a.call(n,d)&&(u[d]=n[d]);if(r){s=r(n);for(var c=0;c<s.length;c++)i.call(n,s[c])&&(u[s[c]]=n[s[c]])}}return u}},function(e,t,n){var r=n(15).default,a=n(214);e.exports=function(e){var t=a(e,"string");return"symbol"==r(t)?t:t+""},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(5);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var o=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),o.push(a(t)+"="+a(e))})))})),i=o.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(5),a=n(224),i={"Content-Type":"application/x-www-form-urlencoded"};function o(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=n(40)),s),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(o(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(o(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(i)})),e.exports=u}).call(this,n(13))},function(e,t,n){"use strict";var r=n(5),a=n(225),i=n(227),o=n(37),s=n(228),u=n(231),l=n(232),d=n(41);e.exports=function(e){return new Promise((function(t,n){var c=e.data,f=e.headers;r.isFormData(c)&&delete f["Content-Type"],(r.isBlob(c)||r.isFile(c))&&c.type&&delete f["Content-Type"];var m=new XMLHttpRequest;if(e.auth){var _=e.auth.username||"",p=unescape(encodeURIComponent(e.auth.password))||"";f.Authorization="Basic "+btoa(_+":"+p)}var h=s(e.baseURL,e.url);if(m.open(e.method.toUpperCase(),o(h,e.params,e.paramsSerializer),!0),m.timeout=e.timeout,m.onreadystatechange=function(){if(m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in m?u(m.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:r,config:e,request:m};a(t,n,i),m=null}},m.onabort=function(){m&&(n(d("Request aborted",e,"ECONNABORTED",m)),m=null)},m.onerror=function(){n(d("Network Error",e,null,m)),m=null},m.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(d(t,e,"ECONNABORTED",m)),m=null},r.isStandardBrowserEnv()){var y=(e.withCredentials||l(h))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;y&&(f[e.xsrfHeaderName]=y)}if("setRequestHeader"in m&&r.forEach(f,(function(e,t){void 0===c&&"content-type"===t.toLowerCase()?delete f[t]:m.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(m.withCredentials=!!e.withCredentials),e.responseType)try{m.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&m.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){m&&(m.abort(),n(e),m=null)})),c||(c=null),m.send(c)}))}},function(e,t,n){"use strict";var r=n(226);e.exports=function(e,t,n,a,i){var o=new Error(e);return r(o,t,n,a,i)}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){t=t||{};var n={},a=["url","method","data"],i=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function l(a){r.isUndefined(t[a])?r.isUndefined(e[a])||(n[a]=u(void 0,e[a])):n[a]=u(e[a],t[a])}r.forEach(a,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(i,l),r.forEach(o,(function(a){r.isUndefined(t[a])?r.isUndefined(e[a])||(n[a]=u(void 0,e[a])):n[a]=u(void 0,t[a])})),r.forEach(s,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var d=a.concat(i).concat(o).concat(s),c=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===d.indexOf(e)}));return r.forEach(c,l),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(22),a=n(52),i=n(16),o=n(9),s=r("%Map%",!0),u=a("Map.prototype.get",!0),l=a("Map.prototype.set",!0),d=a("Map.prototype.has",!0),c=a("Map.prototype.delete",!0),f=a("Map.prototype.size",!0);e.exports=!!s&&function(){var e,t={assert:function(e){if(!t.has(e))throw new o("Side channel does not contain "+i(e))},delete:function(t){if(e){var n=c(e,t);return 0===f(e)&&(e=void 0),n}return!1},get:function(t){if(e)return u(e,t)},has:function(t){return!!e&&d(e,t)},set:function(t,n){e||(e=new s),l(e,t,n)}};return t}},function(e,t,n){"use strict";e.exports=Object},function(e,t,n){"use strict";var r=n(253);if(r)try{r([],"length")}catch(e){r=null}e.exports=r},function(e,t,n){"use strict";e.exports="undefined"!=typeof Reflect&&Reflect.getPrototypeOf||null},function(e,t,n){"use strict";var r=n(46);e.exports=r.getPrototypeOf||null},function(e,t,n){"use strict";var r=n(17),a=n(9),i=n(23),o=n(260);e.exports=function(e){if(e.length<1||"function"!=typeof e[0])throw new a("a function is required");return o(r,i,e)}},function(e,t,n){"use strict";e.exports=Function.prototype.apply},function(e,t,n){"use strict";var r=n(22),a=n(50),i=a([r("%String.prototype.indexOf%")]);e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?a([n]):n}},function(e,t,n){"use strict";var r=n(24),a=Object.prototype.hasOwnProperty,i=Array.isArray,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),s=function(e,t){for(var n=t&&t.plainObjects?{__proto__:null}:{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:s,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var a=t[r],o=a.obj[a.prop],s=Object.keys(o),u=0;u<s.length;++u){var l=s[u],d=o[l];"object"==typeof d&&null!==d&&-1===n.indexOf(d)&&(t.push({obj:o,prop:l}),n.push(d))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],a=0;a<n.length;++a)void 0!==n[a]&&r.push(n[a]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,a,i){if(0===e.length)return e;var s=e;if("symbol"==typeof e?s=Symbol.prototype.toString.call(e):"string"!=typeof e&&(s=String(e)),"iso-8859-1"===n)return escape(s).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var u="",l=0;l<s.length;l+=1024){for(var d=s.length>=1024?s.slice(l,l+1024):s,c=[],f=0;f<d.length;++f){var m=d.charCodeAt(f);45===m||46===m||95===m||126===m||m>=48&&m<=57||m>=65&&m<=90||m>=97&&m<=122||i===r.RFC1738&&(40===m||41===m)?c[c.length]=d.charAt(f):m<128?c[c.length]=o[m]:m<2048?c[c.length]=o[192|m>>6]+o[128|63&m]:m<55296||m>=57344?c[c.length]=o[224|m>>12]+o[128|m>>6&63]+o[128|63&m]:(f+=1,m=65536+((1023&m)<<10|1023&d.charCodeAt(f)),c[c.length]=o[240|m>>18]+o[128|m>>12&63]+o[128|m>>6&63]+o[128|63&m])}u+=c.join("")}return u},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(i(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n&&"function"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!a.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var o=t;return i(t)&&!i(n)&&(o=s(t,r)),i(t)&&i(n)?(n.forEach((function(n,i){if(a.call(t,i)){var o=t[i];o&&"object"==typeof o&&n&&"object"==typeof n?t[i]=e(o,n,r):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var o=n[i];return a.call(t,i)?t[i]=e(t[i],o,r):t[i]=o,t}),o)}}},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,o){var s=r(t),u=a[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,i,o){var s=t(r),u=n[e][t(r)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,o){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-ps",{months:"كانون الثاني_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_تشري الأوّل_تشرين الثاني_كانون الأوّل".split("_"),monthsShort:"ك٢_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_ت١_ت٢_ك١".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).split("").reverse().join("").replace(/[١٢](?![\u062a\u0643])/g,(function(e){return n[e]})).split("").reverse().join("").replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}var n=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],r=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,a=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:a,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:a,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return"jedan sat";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:function(e,t,n,r){switch(n){case"m":return t?"jedna minuta":r?"jednu minutu":"jedne minute"}},mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={standalone:"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),format:"ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince".split("_"),isFormat:/DD?[o.]?(\[[^\[\]]*\]|\s)+MMMM/},n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function o(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:o,ss:o,m:o,mm:o,h:o,hh:o,d:o,dd:o,M:o,MM:o,y:o,yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var o="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":o=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":o=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":o=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":o=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":o=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":o=i?"vuoden":"vuotta"}return o=function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+o}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["çend sanîye","çend sanîyeyan"],ss:[e+" sanîye",e+" sanîyeyan"],m:["deqîqeyek","deqîqeyekê"],mm:[e+" deqîqe",e+" deqîqeyan"],h:["saetek","saetekê"],hh:[e+" saet",e+" saetan"],d:["rojek","rojekê"],dd:[e+" roj",e+" rojan"],w:["hefteyek","hefteyekê"],ww:[e+" hefte",e+" hefteyan"],M:["mehek","mehekê"],MM:[e+" meh",e+" mehan"],y:["salek","salekê"],yy:[e+" sal",e+" salan"]};return t?a[n][0]:a[n][1]}e.defineLocale("ku-kmr",{months:"Rêbendan_Sibat_Adar_Nîsan_Gulan_Hezîran_Tîrmeh_Tebax_Îlon_Cotmeh_Mijdar_Berfanbar".split("_"),monthsShort:"Rêb_Sib_Ada_Nîs_Gul_Hez_Tîr_Teb_Îlo_Cot_Mij_Ber".split("_"),monthsParseExact:!0,weekdays:"Yekşem_Duşem_Sêşem_Çarşem_Pêncşem_În_Şemî".split("_"),weekdaysShort:"Yek_Du_Sê_Çar_Pên_În_Şem".split("_"),weekdaysMin:"Ye_Du_Sê_Ça_Pê_În_Şe".split("_"),meridiem:function(e,t,n){return e<12?n?"bn":"BN":n?"pn":"PN"},meridiemParse:/bn|BN|pn|PN/,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM[a] YYYY[an]",LLL:"Do MMMM[a] YYYY[an] HH:mm",LLLL:"dddd, Do MMMM[a] YYYY[an] HH:mm",ll:"Do MMM[.] YYYY[an]",lll:"Do MMM[.] YYYY[an] HH:mm",llll:"ddd[.], Do MMM[.] YYYY[an] HH:mm"},calendar:{sameDay:"[Îro di saet] LT [de]",nextDay:"[Sibê di saet] LT [de]",nextWeek:"dddd [di saet] LT [de]",lastDay:"[Duh di saet] LT [de]",lastWeek:"dddd[a borî di saet] LT [de]",sameElse:"L"},relativeTime:{future:"di %s de",past:"berî %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,w:t,ww:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(?:yê|ê|\.)/,ordinal:function(e,t){var n=t.toLowerCase();return n.includes("w")||n.includes("m")?e+".":e+function(e){var t=(e=""+e).substring(e.length-1),n=e.length>1?e.substring(e.length-2):"";return 12==n||13==n||"2"!=t&&"3"!=t&&"50"!=n&&"70"!=t&&"80"!=t?"ê":"yê"}(e)},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,o){var s=e+" ";return 1===e?s+n(0,t,i[0],o):t?s+(r(e)?a(i)[1]:a(i)[0]):o?s+a(i)[1]:s+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"én time",hh:"%d timer",d:"én dag",dd:"%d dager",w:"én uke",ww:"%d uker",M:"én måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^(maart|mrt\.?)$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^(maart|mrt\.?)$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],d:["jedan dan","jednog dana"],dd:["dan","dana","dana"],M:["jedan mesec","jednog meseca"],MM:["mesec","meseca","meseci"],y:["jednu godinu","jedne godine"],yy:["godinu","godine","godina"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,o=t.words[r];return 1===r.length?"y"===r&&n?"jedna godina":a||n?o[0]:o[1]:(i=t.correctGrammaticalCase(e,o),"yy"===r&&n&&"godinu"===i?e+" godina":e+" "+i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једног минута"],mm:["минут","минута","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],d:["један дан","једног дана"],dd:["дан","дана","дана"],M:["један месец","једног месеца"],MM:["месец","месеца","месеци"],y:["једну годину","једне године"],yy:["годину","године","година"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,o=t.words[r];return 1===r.length?"y"===r&&n?"једна година":a||n?o[0]:o[1]:(i=t.correctGrammaticalCase(e,o),"yy"===r&&n&&"годину"===i?e+" година":e+" "+i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pzt_Sal_Çar_Per_Cum_Cmt".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){(function(e){function n(e,t){for(var n=0,r=e.length-1;r>=0;r--){var a=e[r];"."===a?e.splice(r,1):".."===a?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}t.resolve=function(){for(var t="",a=!1,i=arguments.length-1;i>=-1&&!a;i--){var o=i>=0?arguments[i]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(t=o+"/"+t,a="/"===o.charAt(0))}return(a?"/":"")+(t=n(r(t.split("/"),(function(e){return!!e})),!a).join("/"))||"."},t.normalize=function(e){var i=t.isAbsolute(e),o="/"===a(e,-1);return(e=n(r(e.split("/"),(function(e){return!!e})),!i).join("/"))||i||(e="."),e&&o&&(e+="/"),(i?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(r(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},t.relative=function(e,n){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var a=r(e.split("/")),i=r(n.split("/")),o=Math.min(a.length,i.length),s=o,u=0;u<o;u++)if(a[u]!==i[u]){s=u;break}var l=[];for(u=s;u<a.length;u++)l.push("..");return(l=l.concat(i.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,r=-1,a=!0,i=e.length-1;i>=1;--i)if(47===(t=e.charCodeAt(i))){if(!a){r=i;break}}else a=!1;return-1===r?n?"/":".":n&&1===r?"/":e.slice(0,r)},t.basename=function(e,t){var n=function(e){"string"!=typeof e&&(e+="");var t,n=0,r=-1,a=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!a){n=t+1;break}}else-1===r&&(a=!1,r=t+1);return-1===r?"":e.slice(n,r)}(e);return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,n=0,r=-1,a=!0,i=0,o=e.length-1;o>=0;--o){var s=e.charCodeAt(o);if(47!==s)-1===r&&(a=!1,r=o+1),46===s?-1===t?t=o:1!==i&&(i=1):-1!==t&&(i=-1);else if(!a){n=o+1;break}}return-1===t||-1===r||0===i||1===i&&t===r-1&&t===n+1?"":e.slice(t,r)};var a="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(13))},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=97&&t<=122||t>=65&&t<=90}},function(e,t,n){"use strict";e.exports={position:!0,gfm:!0,commonmark:!1,footnotes:!1,pedantic:!1,blocks:n(301)}},function(e,t,n){"use strict";e.exports=function(e){var t,n=0,a=0,i=e.charAt(n),o={};for(;i in r;)a+=t=r[i],t>1&&(a=Math.floor(a/t)*t),o[a]=n,i=e.charAt(++n);return{indent:a,stops:o}};var r={" ":1,"\t":4}},function(e,t,n){"use strict";var r="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\u0000-\\u0020]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",a="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";t.openCloseTag=new RegExp("^(?:"+r+"|"+a+")"),t.tag=new RegExp("^(?:"+r+"|"+a+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Za-z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)")},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("<",t)}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("[",t),r=e.indexOf("![",t);if(-1===r)return n;return n<r?n:r}},function(e,t,n){e.exports=n(341)()},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(35);function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,r(a.key),a)}}e.exports=function(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(15).default,a=n(215);e.exports=function(e,t){if(t&&("object"==r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return a(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(216);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&r(e,t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,a,i,o,s,u,l,d,c){switch(n){case 1:if(0===d&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===l)return r+"/*|*/";break;case 3:switch(l){case 102:case 112:return e(a[0]+r),"";default:return r+(0===c?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";t.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},function(e,t,n){e.exports=n(219)},function(e,t,n){"use strict";class r extends Error{constructor(){super("Throttled function aborted"),this.name="AbortError"}}e.exports=({limit:e,interval:t,strict:n})=>{if(!Number.isFinite(e))throw new TypeError("Expected `limit` to be a finite number");if(!Number.isFinite(t))throw new TypeError("Expected `interval` to be a finite number");const a=new Map;let i=0,o=0;const s=[];const u=n?function(){const n=Date.now();if(s.length<e)return s.push(n),0;const r=s.shift()+t;return n>=r?(s.push(n),0):(s.push(r),r-n)}:function(){const n=Date.now();return n-i>t?(o=1,i=n,0):(o<e?o++:(i+=t,o=1),i-n)};return e=>{const t=function(...n){if(!t.isEnabled)return(async()=>e.apply(this,n))();let r;return new Promise((t,i)=>{r=setTimeout(()=>{t(e.apply(this,n)),a.delete(r)},u()),a.set(r,i)})};return t.abort=()=>{for(const e of a.keys())clearTimeout(e),a.get(e)(new r);a.clear(),s.splice(0,s.length)},t.isEnabled=!0,t}},e.exports.AbortError=r},function(e,t,n){"use strict";var r=n(235),a=n(264),i=n(24);e.exports={formats:i,parse:a,stringify:r}},function(e,t){function n(e,t){var n=[],r=[];return null==t&&(t=function(e,t){return n[0]===t?"[Circular ~]":"[Circular ~."+r.slice(0,n.indexOf(t)).join(".")+"]"}),function(a,i){if(n.length>0){var o=n.indexOf(this);~o?n.splice(o+1):n.push(this),~o?r.splice(o,1/0,a):r.push(a),~n.indexOf(i)&&(i=t.call(this,a,i))}else n.push(i);return null==e?i:e.call(this,a,i)}}(e.exports=function(e,t,r,a){return JSON.stringify(e,n(t,a),r)}).getSerialize=n},function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var a=n(7),i=n(272),o=n(285),s=n(198),u=n(343),l=n(345),d=n(346),c=n(347),f=n(348),m=n(349),_=n(350),p=n(351),h=n(352),y=Object.keys(p),g=function(e){var t=e.source||e.children||"",n=e.parserOptions;if(e.allowedTypes&&e.disallowedTypes)throw new Error("Only one of `allowedTypes` and `disallowedTypes` should be defined");var r=a(p,e.renderers),s=[[o,n]].concat(e.plugins||[]).reduce(M,i()),_=s.parse(t),g=a(e,{renderers:r,definitions:m(_)}),v=function(e){var t=[f,u()],n=e.disallowedTypes;e.allowedTypes&&(n=y.filter((function(t){return"root"!==t&&-1===e.allowedTypes.indexOf(t)})));var r=e.unwrapDisallowed?"unwrap":"remove";n&&n.length>0&&t.push(d.ofType(n,r));e.allowNode&&t.push(d.ifNotMatch(e.allowNode,r));var a=!e.escapeHtml&&!e.skipHtml,i=(e.astPlugins||[]).some((function(e){return(Array.isArray(e)?e[0]:e).identity===h.HtmlParser}));a&&!i&&t.push(l);return e.astPlugins?t.concat(e.astPlugins):t}(e),b=s.runSync(_),L=v.reduce((function(e,t){return t(e,g)}),b);return c(L,g)};function M(e,t){return Array.isArray(t)?e.use.apply(e,r(t)):e.use(t)}g.defaultProps={renderers:{},escapeHtml:!0,skipHtml:!1,sourcePos:!1,rawSourcePos:!1,transformLinkUri:_,astPlugins:[],plugins:[],parserOptions:{}},g.propTypes={className:s.string,source:s.string,children:s.string,sourcePos:s.bool,rawSourcePos:s.bool,escapeHtml:s.bool,skipHtml:s.bool,allowNode:s.func,allowedTypes:s.arrayOf(s.oneOf(y)),disallowedTypes:s.arrayOf(s.oneOf(y)),transformLinkUri:s.oneOfType([s.func,s.bool]),linkTarget:s.oneOfType([s.func,s.string]),transformImageUri:s.func,astPlugins:s.arrayOf(s.func),unwrapDisallowed:s.bool,renderers:s.object,plugins:s.array,parserOptions:s.object},g.types=y,g.renderers=p,g.uriTransformer=_,e.exports=g},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(353)},function(e,t,n){"use strict";var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,a=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));t.a=a},function(e,t,n){"use strict";function r(e){return Object.prototype.toString.call(e).slice(8,-1)}function a(e){return"Undefined"===r(e)}function i(e){return"Null"===r(e)}function o(e){return"Object"===r(e)&&(e.constructor===Object&&Object.getPrototypeOf(e)===Object.prototype)}function s(e){return"Array"===r(e)}function u(e){return"Symbol"===r(e)}var l,d,c,f,m;l=i,d=a;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function _(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var i=arguments[t],o=0,s=i.length;o<s;o++,a++)r[a]=i[o];return r}function p(e,t,n,r){var a=r.propertyIsEnumerable(t)?"enumerable":"nonenumerable";"enumerable"===a&&(e[t]=n),"nonenumerable"===a&&Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0,configurable:!0})}function h(e,t,n){if(!o(t))return n&&s(n)&&n.forEach((function(n){t=n(e,t)})),t;var r={};o(e)&&(r=_(Object.getOwnPropertyNames(e),Object.getOwnPropertySymbols(e)).reduce((function(n,r){var a=e[r];return(!u(r)&&!Object.getOwnPropertyNames(t).includes(r)||u(r)&&!Object.getOwnPropertySymbols(t).includes(r))&&p(n,r,a,e),n}),{}));return _(Object.getOwnPropertyNames(t),Object.getOwnPropertySymbols(t)).reduce((function(r,a){var i=t[a],u=o(e)?e[a]:void 0;return n&&s(n)&&n.forEach((function(e){i=e(u,i)})),void 0!==u&&o(i)&&(i=h(u,i,n)),p(r,a,i,t),r}),r)}t.a=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=null,a=e;return o(e)&&e.extensions&&1===Object.keys(e).length&&(a={},r=e.extensions),t.reduce((function(e,t){return h(e,t,r)}),a)}},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(34),a="function"==typeof Symbol&&Symbol.for,i=a?Symbol.for("react.element"):60103,o=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,l=a?Symbol.for("react.profiler"):60114,d=a?Symbol.for("react.provider"):60109,c=a?Symbol.for("react.context"):60110,f=a?Symbol.for("react.forward_ref"):60112,m=a?Symbol.for("react.suspense"):60113,_=a?Symbol.for("react.memo"):60115,p=a?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},M={};function v(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||g}function b(){}function L(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||g}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var k=L.prototype=new b;k.constructor=L,r(k,v.prototype),k.isPureReactComponent=!0;var w={current:null},Y=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function D(e,t,n){var r,a={},o=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)Y.call(t,r)&&!T.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var l=Array(u),d=0;d<u;d++)l[d]=arguments[d+2];a.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:i,type:e,key:o,ref:s,props:a,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var x=/\/+/g,j=[];function O(e,t,n,r){if(j.length){var a=j.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function E(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function H(e,t,n){return null==e?0:function e(t,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case o:u=!0}}if(u)return r(a,t,""===n?"."+P(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var d=n+P(s=t[l],l);u+=e(s,d,r,a)}else if(null===t||"object"!=typeof t?d=null:d="function"==typeof(d=h&&t[h]||t["@@iterator"])?d:null,"function"==typeof d)for(t=d.call(t),l=0;!(s=t.next()).done;)u+=e(s=s.value,d=n+P(s,l++),r,a);else if("object"===s)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function C(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,(function(e){return e})):null!=e&&(S(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(x,"$&/")+"/")+n)),r.push(e))}function N(e,t,n,r,a){var i="";null!=n&&(i=(""+n).replace(x,"$&/")+"/"),H(e,C,t=O(t,i,r,a)),E(t)}var F={current:null};function W(){var e=F.current;if(null===e)throw Error(y(321));return e}var z={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;H(e,A,t=O(null,null,t,n)),E(t)},count:function(e){return H(e,(function(){return null}),null)},toArray:function(e){var t=[];return N(e,t,null,(function(e){return e})),t},only:function(e){if(!S(e))throw Error(y(143));return e}},t.Component=v,t.Fragment=s,t.Profiler=l,t.PureComponent=L,t.StrictMode=u,t.Suspense=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var a=r({},e.props),o=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=w.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(d in t)Y.call(t,d)&&!T.hasOwnProperty(d)&&(a[d]=void 0===t[d]&&void 0!==l?l[d]:t[d])}var d=arguments.length-2;if(1===d)a.children=n;else if(1<d){l=Array(d);for(var c=0;c<d;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:i,type:e.type,key:o,ref:s,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},t.createElement=D,t.createFactory=function(e){var t=D.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:_,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return W().useCallback(e,t)},t.useContext=function(e,t){return W().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return W().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return W().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return W().useLayoutEffect(e,t)},t.useMemo=function(e,t){return W().useMemo(e,t)},t.useReducer=function(e,t,n){return W().useReducer(e,t,n)},t.useRef=function(e){return W().useRef(e)},t.useState=function(e){return W().useState(e)},t.version="16.14.0"},function(e,t,n){var r=n(15).default;e.exports=function(e,t){if("object"!=r(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,t||"default");if("object"!=r(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t,r)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,d=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,m=r?Symbol.for("react.forward_ref"):60112,_=r?Symbol.for("react.suspense"):60113,p=r?Symbol.for("react.suspense_list"):60120,h=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,M=r?Symbol.for("react.fundamental"):60117,v=r?Symbol.for("react.responder"):60118,b=r?Symbol.for("react.scope"):60119;function L(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case c:case f:case o:case u:case s:case _:return e;default:switch(e=e&&e.$$typeof){case d:case m:case y:case h:case l:return e;default:return t}}case i:return t}}}function k(e){return L(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=d,t.ContextProvider=l,t.Element=a,t.ForwardRef=m,t.Fragment=o,t.Lazy=y,t.Memo=h,t.Portal=i,t.Profiler=u,t.StrictMode=s,t.Suspense=_,t.isAsyncMode=function(e){return k(e)||L(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return L(e)===d},t.isContextProvider=function(e){return L(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return L(e)===m},t.isFragment=function(e){return L(e)===o},t.isLazy=function(e){return L(e)===y},t.isMemo=function(e){return L(e)===h},t.isPortal=function(e){return L(e)===i},t.isProfiler=function(e){return L(e)===u},t.isStrictMode=function(e){return L(e)===s},t.isSuspense=function(e){return L(e)===_},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===u||e===s||e===_||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===h||e.$$typeof===l||e.$$typeof===d||e.$$typeof===m||e.$$typeof===M||e.$$typeof===v||e.$$typeof===b||e.$$typeof===g)},t.typeOf=L},function(e,t,n){var r=n(15).default;function a(){"use strict";/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */e.exports=a=function(){return n},e.exports.__esModule=!0,e.exports.default=e.exports;var t,n={},i=Object.prototype,o=i.hasOwnProperty,s=Object.defineProperty||function(e,t,n){e[t]=n.value},u="function"==typeof Symbol?Symbol:{},l=u.iterator||"@@iterator",d=u.asyncIterator||"@@asyncIterator",c=u.toStringTag||"@@toStringTag";function f(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{f({},"")}catch(t){f=function(e,t,n){return e[t]=n}}function m(e,t,n,r){var a=t&&t.prototype instanceof M?t:M,i=Object.create(a.prototype),o=new E(r||[]);return s(i,"_invoke",{value:S(e,n,o)}),i}function _(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}n.wrap=m;var p="suspendedStart",h="executing",y="completed",g={};function M(){}function v(){}function b(){}var L={};f(L,l,(function(){return this}));var k=Object.getPrototypeOf,w=k&&k(k(H([])));w&&w!==i&&o.call(w,l)&&(L=w);var Y=b.prototype=M.prototype=Object.create(L);function T(e){["next","throw","return"].forEach((function(t){f(e,t,(function(e){return this._invoke(t,e)}))}))}function D(e,t){function n(a,i,s,u){var l=_(e[a],e,i);if("throw"!==l.type){var d=l.arg,c=d.value;return c&&"object"==r(c)&&o.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,s,u)}),(function(e){n("throw",e,s,u)})):t.resolve(c).then((function(e){d.value=e,s(d)}),(function(e){return n("throw",e,s,u)}))}u(l.arg)}var a;s(this,"_invoke",{value:function(e,r){function i(){return new t((function(t,a){n(e,r,t,a)}))}return a=a?a.then(i,i):i()}})}function S(e,n,r){var a=p;return function(i,o){if(a===h)throw Error("Generator is already running");if(a===y){if("throw"===i)throw o;return{value:t,done:!0}}for(r.method=i,r.arg=o;;){var s=r.delegate;if(s){var u=x(s,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===p)throw a=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=h;var l=_(e,n,r);if("normal"===l.type){if(a=r.done?y:"suspendedYield",l.arg===g)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(a=y,r.method="throw",r.arg=l.arg)}}}function x(e,n){var r=n.method,a=e.iterator[r];if(a===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,x(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var i=_(a,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,g;var o=i.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function j(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(j,this),this.reset(!0)}function H(e){if(e||""===e){var n=e[l];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function n(){for(;++a<e.length;)if(o.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(r(e)+" is not iterable")}return v.prototype=b,s(Y,"constructor",{value:b,configurable:!0}),s(b,"constructor",{value:v,configurable:!0}),v.displayName=f(b,c,"GeneratorFunction"),n.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,f(e,c,"GeneratorFunction")),e.prototype=Object.create(Y),e},n.awrap=function(e){return{__await:e}},T(D.prototype),f(D.prototype,d,(function(){return this})),n.AsyncIterator=D,n.async=function(e,t,r,a,i){void 0===i&&(i=Promise);var o=new D(m(e,t,r,a),i);return n.isGeneratorFunction(t)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},T(Y),f(Y,c,"Generator"),f(Y,l,(function(){return this})),f(Y,"toString",(function(){return"[object Generator]"})),n.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},n.values=H,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(r,a){return s.type="throw",s.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var u=o.call(i,"catchLoc"),l=o.call(i,"finallyLoc");if(u&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;O(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:H(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},n}e.exports=a,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(5),a=n(36),i=n(220),o=n(42);function s(e){var t=new i(e),n=a(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=s(n(39));u.Axios=i,u.create=function(e){return s(o(u.defaults,e))},u.Cancel=n(43),u.CancelToken=n(233),u.isCancel=n(38),u.all=function(e){return Promise.all(e)},u.spread=n(234),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(5),a=n(37),i=n(221),o=n(222),s=n(42);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[o,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=s(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(5);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},function(e,t,n){"use strict";var r=n(5),a=n(223),i=n(38),o=n(39);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||o.adapter)(e).then((function(t){return s(e),t.data=a(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(41);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,i,o){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(a)&&s.push("path="+a),r.isString(i)&&s.push("domain="+i),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(229),a=n(230);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(5),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,o={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(o[t]&&a.indexOf(t)>=0)return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([n]):o[t]?o[t]+", "+n:n}})),o):o}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(43);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(236),a=n(53),i=n(24),o=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},u=Array.isArray,l=Array.prototype.push,d=function(e,t){l.apply(e,u(t)?t:[t])},c=Date.prototype.toISOString,f=i.default,m={addQueryPrefix:!1,allowDots:!1,allowEmptyArrays:!1,arrayFormat:"indices",charset:"utf-8",charsetSentinel:!1,commaRoundTrip:!1,delimiter:"&",encode:!0,encodeDotInKeys:!1,encoder:a.encode,encodeValuesOnly:!1,filter:void 0,format:f,formatter:i.formatters[f],indices:!1,serializeDate:function(e){return c.call(e)},skipNulls:!1,strictNullHandling:!1},_={},p=function e(t,n,i,o,s,l,c,f,p,h,y,g,M,v,b,L,k,w){for(var Y,T=t,D=w,S=0,x=!1;void 0!==(D=D.get(_))&&!x;){var j=D.get(t);if(S+=1,void 0!==j){if(j===S)throw new RangeError("Cyclic object value");x=!0}void 0===D.get(_)&&(S=0)}if("function"==typeof h?T=h(n,T):T instanceof Date?T=M(T):"comma"===i&&u(T)&&(T=a.maybeMap(T,(function(e){return e instanceof Date?M(e):e}))),null===T){if(l)return p&&!L?p(n,m.encoder,k,"key",v):n;T=""}if("string"==typeof(Y=T)||"number"==typeof Y||"boolean"==typeof Y||"symbol"==typeof Y||"bigint"==typeof Y||a.isBuffer(T))return p?[b(L?n:p(n,m.encoder,k,"key",v))+"="+b(p(T,m.encoder,k,"value",v))]:[b(n)+"="+b(String(T))];var O,E=[];if(void 0===T)return E;if("comma"===i&&u(T))L&&p&&(T=a.maybeMap(T,p)),O=[{value:T.length>0?T.join(",")||null:void 0}];else if(u(h))O=h;else{var H=Object.keys(T);O=y?H.sort(y):H}var P=f?String(n).replace(/\./g,"%2E"):String(n),A=o&&u(T)&&1===T.length?P+"[]":P;if(s&&u(T)&&0===T.length)return A+"[]";for(var C=0;C<O.length;++C){var N=O[C],F="object"==typeof N&&N&&void 0!==N.value?N.value:T[N];if(!c||null!==F){var W=g&&f?String(N).replace(/\./g,"%2E"):String(N),z=u(T)?"function"==typeof i?i(A,W):A:A+(g?"."+W:"["+W+"]");w.set(t,S);var I=r();I.set(_,w),d(E,e(F,z,i,o,s,l,c,f,"comma"===i&&L&&u(T)?null:p,h,y,g,M,v,b,L,k,I))}}return E};e.exports=function(e,t){var n,a=e,l=function(e){if(!e)return m;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.encodeDotInKeys&&"boolean"!=typeof e.encodeDotInKeys)throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||m.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!o.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r,a=i.formatters[n],l=m.filter;if(("function"==typeof e.filter||u(e.filter))&&(l=e.filter),r=e.arrayFormat in s?e.arrayFormat:"indices"in e?e.indices?"indices":"repeat":m.arrayFormat,"commaRoundTrip"in e&&"boolean"!=typeof e.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var d=void 0===e.allowDots?!0===e.encodeDotInKeys||m.allowDots:!!e.allowDots;return{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:m.addQueryPrefix,allowDots:d,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:m.allowEmptyArrays,arrayFormat:r,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:m.charsetSentinel,commaRoundTrip:!!e.commaRoundTrip,delimiter:void 0===e.delimiter?m.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:m.encode,encodeDotInKeys:"boolean"==typeof e.encodeDotInKeys?e.encodeDotInKeys:m.encodeDotInKeys,encoder:"function"==typeof e.encoder?e.encoder:m.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:m.encodeValuesOnly,filter:l,format:n,formatter:a,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:m.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:m.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:m.strictNullHandling}}(t);"function"==typeof l.filter?a=(0,l.filter)("",a):u(l.filter)&&(n=l.filter);var c=[];if("object"!=typeof a||null===a)return"";var f=s[l.arrayFormat],_="comma"===f&&l.commaRoundTrip;n||(n=Object.keys(a)),l.sort&&n.sort(l.sort);for(var h=r(),y=0;y<n.length;++y){var g=n[y],M=a[g];l.skipNulls&&null===M||d(c,p(M,g,f,_,l.allowEmptyArrays,l.strictNullHandling,l.skipNulls,l.encodeDotInKeys,l.encode?l.encoder:null,l.filter,l.sort,l.allowDots,l.serializeDate,l.format,l.formatter,l.encodeValuesOnly,l.charset,h))}var v=c.join(l.delimiter),b=!0===l.addQueryPrefix?"?":"";return l.charsetSentinel&&("iso-8859-1"===l.charset?b+="utf8=%26%2310003%3B&":b+="utf8=%E2%9C%93&"),v.length>0?b+v:""}},function(e,t,n){"use strict";var r=n(9),a=n(16),i=n(238),o=n(45),s=n(263)||o||i;e.exports=function(){var e,t={assert:function(e){if(!t.has(e))throw new r("Side channel does not contain "+a(e))},delete:function(t){return!!e&&e.delete(t)},get:function(t){return e&&e.get(t)},has:function(t){return!!e&&e.has(t)},set:function(t,n){e||(e=s()),e.set(t,n)}};return t}},function(e,t){},function(e,t,n){"use strict";var r=n(16),a=n(9),i=function(e,t,n){for(var r,a=e;null!=(r=a.next);a=r)if(r.key===t)return a.next=r.next,n||(r.next=e.next,e.next=r),r};e.exports=function(){var e,t={assert:function(e){if(!t.has(e))throw new a("Side channel does not contain "+r(e))},delete:function(t){var n=e&&e.next,r=function(e,t){if(e)return i(e,t,!0)}(e,t);return r&&n&&n===r&&(e=void 0),!!r},get:function(t){return function(e,t){if(e){var n=i(e,t);return n&&n.value}}(e,t)},has:function(t){return function(e,t){return!!e&&!!i(e,t)}(e,t)},set:function(t,n){e||(e={next:void 0}),function(e,t,n){var r=i(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(e,t,n)}};return t}},function(e,t,n){"use strict";e.exports=Error},function(e,t,n){"use strict";e.exports=EvalError},function(e,t,n){"use strict";e.exports=RangeError},function(e,t,n){"use strict";e.exports=ReferenceError},function(e,t,n){"use strict";e.exports=SyntaxError},function(e,t,n){"use strict";e.exports=URIError},function(e,t,n){"use strict";e.exports=Math.abs},function(e,t,n){"use strict";e.exports=Math.floor},function(e,t,n){"use strict";e.exports=Math.max},function(e,t,n){"use strict";e.exports=Math.min},function(e,t,n){"use strict";e.exports=Math.pow},function(e,t,n){"use strict";e.exports=Math.round},function(e,t,n){"use strict";var r=n(252);e.exports=function(e){return r(e)||0===e?e:e<0?-1:1}},function(e,t,n){"use strict";e.exports=Number.isNaN||function(e){return e!=e}},function(e,t,n){"use strict";e.exports=Object.getOwnPropertyDescriptor},function(e,t,n){"use strict";var r=Object.defineProperty||!1;if(r)try{r({},"a",{value:1})}catch(e){r=!1}e.exports=r},function(e,t,n){"use strict";var r="undefined"!=typeof Symbol&&Symbol,a=n(256);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&a())))}},function(e,t,n){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(var r in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var a=Object.getOwnPropertySymbols(e);if(1!==a.length||a[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,t);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},function(e,t,n){"use strict";var r=n(48),a=n(49),i=n(258);e.exports=r?function(e){return r(e)}:a?function(e){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("getProto: not an object");return a(e)}:i?function(e){return i(e)}:null},function(e,t,n){"use strict";var r,a=n(50),i=n(47);try{r=[].__proto__===Array.prototype}catch(e){if(!e||"object"!=typeof e||!("code"in e)||"ERR_PROTO_ACCESS"!==e.code)throw e}var o=!!r&&i&&i(Object.prototype,"__proto__"),s=Object,u=s.getPrototypeOf;e.exports=o&&"function"==typeof o.get?a([o.get]):"function"==typeof u&&function(e){return u(null==e?e:s(e))}},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",a=Object.prototype.toString,i=Math.max,o=function(e,t){for(var n=[],r=0;r<e.length;r+=1)n[r]=e[r];for(var a=0;a<t.length;a+=1)n[a+e.length]=t[a];return n},s=function(e,t){for(var n=[],r=t||0,a=0;r<e.length;r+=1,a+=1)n[a]=e[r];return n},u=function(e,t){for(var n="",r=0;r<e.length;r+=1)n+=e[r],r+1<e.length&&(n+=t);return n};e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==a.apply(t))throw new TypeError(r+t);for(var n,l=s(arguments,1),d=function(){if(this instanceof n){var r=t.apply(this,o(l,arguments));return Object(r)===r?r:this}return t.apply(e,o(l,arguments))},c=i(0,t.length-l.length),f=[],m=0;m<c;m++)f[m]="$"+m;if(n=Function("binder","return function ("+u(f,",")+"){ return binder.apply(this,arguments); }")(d),t.prototype){var _=function(){};_.prototype=t.prototype,n.prototype=new _,_.prototype=null}return n}},function(e,t,n){"use strict";var r=n(17),a=n(51),i=n(23),o=n(261);e.exports=o||r.call(i,a)},function(e,t,n){"use strict";e.exports="undefined"!=typeof Reflect&&Reflect&&Reflect.apply},function(e,t,n){"use strict";var r=Function.prototype.call,a=Object.prototype.hasOwnProperty,i=n(17);e.exports=i.call(r,a)},function(e,t,n){"use strict";var r=n(22),a=n(52),i=n(16),o=n(45),s=n(9),u=r("%WeakMap%",!0),l=a("WeakMap.prototype.get",!0),d=a("WeakMap.prototype.set",!0),c=a("WeakMap.prototype.has",!0),f=a("WeakMap.prototype.delete",!0);e.exports=u?function(){var e,t,n={assert:function(e){if(!n.has(e))throw new s("Side channel does not contain "+i(e))},delete:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(e)return f(e,n)}else if(o&&t)return t.delete(n);return!1},get:function(n){return u&&n&&("object"==typeof n||"function"==typeof n)&&e?l(e,n):t&&t.get(n)},has:function(n){return u&&n&&("object"==typeof n||"function"==typeof n)&&e?c(e,n):!!t&&t.has(n)},set:function(n,r){u&&n&&("object"==typeof n||"function"==typeof n)?(e||(e=new u),d(e,n,r)):o&&(t||(t=o()),t.set(n,r))}};return n}:o},function(e,t,n){"use strict";var r=n(53),a=Object.prototype.hasOwnProperty,i=Array.isArray,o={allowDots:!1,allowEmptyArrays:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decodeDotInKeys:!1,decoder:r.decode,delimiter:"&",depth:5,duplicates:"combine",ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictDepth:!1,strictNullHandling:!1,throwOnLimitExceeded:!1},s=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},u=function(e,t,n){if(e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1)return e.split(",");if(t.throwOnLimitExceeded&&n>=t.arrayLimit)throw new RangeError("Array limit exceeded. Only "+t.arrayLimit+" element"+(1===t.arrayLimit?"":"s")+" allowed in an array.");return e},l=function(e,t,n,i){if(e){var o=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,l=n.depth>0&&/(\[[^[\]]*])/.exec(o),d=l?o.slice(0,l.index):o,c=[];if(d){if(!n.plainObjects&&a.call(Object.prototype,d)&&!n.allowPrototypes)return;c.push(d)}for(var f=0;n.depth>0&&null!==(l=s.exec(o))&&f<n.depth;){if(f+=1,!n.plainObjects&&a.call(Object.prototype,l[1].slice(1,-1))&&!n.allowPrototypes)return;c.push(l[1])}if(l){if(!0===n.strictDepth)throw new RangeError("Input depth exceeded depth option of "+n.depth+" and strictDepth is true");c.push("["+o.slice(l.index)+"]")}return function(e,t,n,a){var i=0;if(e.length>0&&"[]"===e[e.length-1]){var o=e.slice(0,-1).join("");i=Array.isArray(t)&&t[o]?t[o].length:0}for(var s=a?t:u(t,n,i),l=e.length-1;l>=0;--l){var d,c=e[l];if("[]"===c&&n.parseArrays)d=n.allowEmptyArrays&&(""===s||n.strictNullHandling&&null===s)?[]:r.combine([],s);else{d=n.plainObjects?{__proto__:null}:{};var f="["===c.charAt(0)&&"]"===c.charAt(c.length-1)?c.slice(1,-1):c,m=n.decodeDotInKeys?f.replace(/%2E/g,"."):f,_=parseInt(m,10);n.parseArrays||""!==m?!isNaN(_)&&c!==m&&String(_)===m&&_>=0&&n.parseArrays&&_<=n.arrayLimit?(d=[])[_]=s:"__proto__"!==m&&(d[m]=s):d={0:s}}s=d}return s}(c,t,n,i)}};e.exports=function(e,t){var n=function(e){if(!e)return o;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.decodeDotInKeys&&"boolean"!=typeof e.decodeDotInKeys)throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0!==e.throwOnLimitExceeded&&"boolean"!=typeof e.throwOnLimitExceeded)throw new TypeError("`throwOnLimitExceeded` option must be a boolean");var t=void 0===e.charset?o.charset:e.charset,n=void 0===e.duplicates?o.duplicates:e.duplicates;if("combine"!==n&&"first"!==n&&"last"!==n)throw new TypeError("The duplicates option must be either combine, first, or last");return{allowDots:void 0===e.allowDots?!0===e.decodeDotInKeys||o.allowDots:!!e.allowDots,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:o.allowEmptyArrays,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:o.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:o.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:o.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:o.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:o.comma,decodeDotInKeys:"boolean"==typeof e.decodeDotInKeys?e.decodeDotInKeys:o.decodeDotInKeys,decoder:"function"==typeof e.decoder?e.decoder:o.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:o.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:o.depth,duplicates:n,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:o.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:o.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:o.plainObjects,strictDepth:"boolean"==typeof e.strictDepth?!!e.strictDepth:o.strictDepth,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:o.strictNullHandling,throwOnLimitExceeded:"boolean"==typeof e.throwOnLimitExceeded&&e.throwOnLimitExceeded}}(t);if(""===e||null==e)return n.plainObjects?{__proto__:null}:{};for(var d="string"==typeof e?function(e,t){var n={__proto__:null},l=t.ignoreQueryPrefix?e.replace(/^\?/,""):e;l=l.replace(/%5B/gi,"[").replace(/%5D/gi,"]");var d=t.parameterLimit===1/0?void 0:t.parameterLimit,c=l.split(t.delimiter,t.throwOnLimitExceeded?d+1:d);if(t.throwOnLimitExceeded&&c.length>d)throw new RangeError("Parameter limit exceeded. Only "+d+" parameter"+(1===d?"":"s")+" allowed.");var f,m=-1,_=t.charset;if(t.charsetSentinel)for(f=0;f<c.length;++f)0===c[f].indexOf("utf8=")&&("utf8=%E2%9C%93"===c[f]?_="utf-8":"utf8=%26%2310003%3B"===c[f]&&(_="iso-8859-1"),m=f,f=c.length);for(f=0;f<c.length;++f)if(f!==m){var p,h,y=c[f],g=y.indexOf("]="),M=-1===g?y.indexOf("="):g+1;-1===M?(p=t.decoder(y,o.decoder,_,"key"),h=t.strictNullHandling?null:""):(p=t.decoder(y.slice(0,M),o.decoder,_,"key"),h=r.maybeMap(u(y.slice(M+1),t,i(n[p])?n[p].length:0),(function(e){return t.decoder(e,o.decoder,_,"value")}))),h&&t.interpretNumericEntities&&"iso-8859-1"===_&&(h=s(String(h))),y.indexOf("[]=")>-1&&(h=i(h)?[h]:h);var v=a.call(n,p);v&&"combine"===t.duplicates?n[p]=r.combine(n[p],h):v&&"last"!==t.duplicates||(n[p]=h)}return n}(e,n):e,c=n.plainObjects?{__proto__:null}:{},f=Object.keys(d),m=0;m<f.length;++m){var _=f[m],p=l(_,d[_],n,"string"==typeof e);c=r.merge(c,p,n)}return!0===n.allowSparse?c:r.compact(c)}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./af":54,"./af.js":54,"./ar":55,"./ar-dz":56,"./ar-dz.js":56,"./ar-kw":57,"./ar-kw.js":57,"./ar-ly":58,"./ar-ly.js":58,"./ar-ma":59,"./ar-ma.js":59,"./ar-ps":60,"./ar-ps.js":60,"./ar-sa":61,"./ar-sa.js":61,"./ar-tn":62,"./ar-tn.js":62,"./ar.js":55,"./az":63,"./az.js":63,"./be":64,"./be.js":64,"./bg":65,"./bg.js":65,"./bm":66,"./bm.js":66,"./bn":67,"./bn-bd":68,"./bn-bd.js":68,"./bn.js":67,"./bo":69,"./bo.js":69,"./br":70,"./br.js":70,"./bs":71,"./bs.js":71,"./ca":72,"./ca.js":72,"./cs":73,"./cs.js":73,"./cv":74,"./cv.js":74,"./cy":75,"./cy.js":75,"./da":76,"./da.js":76,"./de":77,"./de-at":78,"./de-at.js":78,"./de-ch":79,"./de-ch.js":79,"./de.js":77,"./dv":80,"./dv.js":80,"./el":81,"./el.js":81,"./en-au":82,"./en-au.js":82,"./en-ca":83,"./en-ca.js":83,"./en-gb":84,"./en-gb.js":84,"./en-ie":85,"./en-ie.js":85,"./en-il":86,"./en-il.js":86,"./en-in":87,"./en-in.js":87,"./en-nz":88,"./en-nz.js":88,"./en-sg":89,"./en-sg.js":89,"./eo":90,"./eo.js":90,"./es":91,"./es-do":92,"./es-do.js":92,"./es-mx":93,"./es-mx.js":93,"./es-us":94,"./es-us.js":94,"./es.js":91,"./et":95,"./et.js":95,"./eu":96,"./eu.js":96,"./fa":97,"./fa.js":97,"./fi":98,"./fi.js":98,"./fil":99,"./fil.js":99,"./fo":100,"./fo.js":100,"./fr":101,"./fr-ca":102,"./fr-ca.js":102,"./fr-ch":103,"./fr-ch.js":103,"./fr.js":101,"./fy":104,"./fy.js":104,"./ga":105,"./ga.js":105,"./gd":106,"./gd.js":106,"./gl":107,"./gl.js":107,"./gom-deva":108,"./gom-deva.js":108,"./gom-latn":109,"./gom-latn.js":109,"./gu":110,"./gu.js":110,"./he":111,"./he.js":111,"./hi":112,"./hi.js":112,"./hr":113,"./hr.js":113,"./hu":114,"./hu.js":114,"./hy-am":115,"./hy-am.js":115,"./id":116,"./id.js":116,"./is":117,"./is.js":117,"./it":118,"./it-ch":119,"./it-ch.js":119,"./it.js":118,"./ja":120,"./ja.js":120,"./jv":121,"./jv.js":121,"./ka":122,"./ka.js":122,"./kk":123,"./kk.js":123,"./km":124,"./km.js":124,"./kn":125,"./kn.js":125,"./ko":126,"./ko.js":126,"./ku":127,"./ku-kmr":128,"./ku-kmr.js":128,"./ku.js":127,"./ky":129,"./ky.js":129,"./lb":130,"./lb.js":130,"./lo":131,"./lo.js":131,"./lt":132,"./lt.js":132,"./lv":133,"./lv.js":133,"./me":134,"./me.js":134,"./mi":135,"./mi.js":135,"./mk":136,"./mk.js":136,"./ml":137,"./ml.js":137,"./mn":138,"./mn.js":138,"./mr":139,"./mr.js":139,"./ms":140,"./ms-my":141,"./ms-my.js":141,"./ms.js":140,"./mt":142,"./mt.js":142,"./my":143,"./my.js":143,"./nb":144,"./nb.js":144,"./ne":145,"./ne.js":145,"./nl":146,"./nl-be":147,"./nl-be.js":147,"./nl.js":146,"./nn":148,"./nn.js":148,"./oc-lnc":149,"./oc-lnc.js":149,"./pa-in":150,"./pa-in.js":150,"./pl":151,"./pl.js":151,"./pt":152,"./pt-br":153,"./pt-br.js":153,"./pt.js":152,"./ro":154,"./ro.js":154,"./ru":155,"./ru.js":155,"./sd":156,"./sd.js":156,"./se":157,"./se.js":157,"./si":158,"./si.js":158,"./sk":159,"./sk.js":159,"./sl":160,"./sl.js":160,"./sq":161,"./sq.js":161,"./sr":162,"./sr-cyrl":163,"./sr-cyrl.js":163,"./sr.js":162,"./ss":164,"./ss.js":164,"./sv":165,"./sv.js":165,"./sw":166,"./sw.js":166,"./ta":167,"./ta.js":167,"./te":168,"./te.js":168,"./tet":169,"./tet.js":169,"./tg":170,"./tg.js":170,"./th":171,"./th.js":171,"./tk":172,"./tk.js":172,"./tl-ph":173,"./tl-ph.js":173,"./tlh":174,"./tlh.js":174,"./tr":175,"./tr.js":175,"./tzl":176,"./tzl.js":176,"./tzm":177,"./tzm-latn":178,"./tzm-latn.js":178,"./tzm.js":177,"./ug-cn":179,"./ug-cn.js":179,"./uk":180,"./uk.js":180,"./ur":181,"./ur.js":181,"./uz":182,"./uz-latn":183,"./uz-latn.js":183,"./uz.js":182,"./vi":184,"./vi.js":184,"./x-pseudo":185,"./x-pseudo.js":185,"./yo":186,"./yo.js":186,"./zh-cn":187,"./zh-cn.js":187,"./zh-hk":188,"./zh-hk.js":188,"./zh-mo":189,"./zh-mo.js":189,"./zh-tw":190,"./zh-tw.js":190};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=266},function(e,t){e.exports=function(e){if(Array.isArray(e))return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,i,o,s=[],u=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(e){l=!0,a=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(l)throw a}}return s}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(270);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(273),a=n(274),i=n(275),o=n(281),s=n(283),u=n(284);e.exports=function e(){var t=[],n=o(),g={},M=!1,v=-1;return b.data=function(e,t){if(s(e))return 2===arguments.length?(p("data",M),g[e]=t,b):d.call(g,e)&&g[e]||null;if(e)return p("data",M),g=e,b;return g},b.freeze=L,b.attachers=t,b.use=function(e){var n;if(p("use",M),null==e);else if("function"==typeof e)s.apply(null,arguments);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?o(e):a(e)}n&&(g.settings=r(g.settings||{},n));return b;function a(e){o(e.plugins),e.settings&&(n=r(n||{},e.settings))}function i(e){if("function"==typeof e)s(e);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?s.apply(null,e):a(e)}}function o(e){var t,n;if(null==e);else{if("object"!=typeof e||!("length"in e))throw new Error("Expected a list of plugins, not `"+e+"`");for(t=e.length,n=-1;++n<t;)i(e[n])}}function s(e,n){var a=k(e);a?(u(a[1])&&u(n)&&(n=r(a[1],n)),a[1]=n):t.push(l.call(arguments))}},b.parse=function(e){var t,n=i(e);if(L(),m("parse",t=b.Parser),f(t))return new t(String(n),n).parse();return t(String(n),n)},b.stringify=function(e,t){var n,r=i(t);if(L(),_("stringify",n=b.Compiler),h(e),f(n))return new n(e,r).compile();return n(e,r)},b.run=w,b.runSync=function(e,t){var n,r=!1;return w(e,t,(function(e,t){r=!0,a(e),n=t})),y("runSync","run",r),n},b.process=Y,b.processSync=function(e){var t,n=!1;return L(),m("processSync",b.Parser),_("processSync",b.Compiler),Y(t=i(e),(function(e){n=!0,a(e)})),y("processSync","process",n),t},b;function b(){for(var n=e(),a=t.length,i=-1;++i<a;)n.use.apply(null,t[i]);return n.data(r(!0,{},g)),n}function L(){var e,r,a,i;if(M)return b;for(;++v<t.length;)r=(e=t[v])[0],null,!1!==(a=e[1])&&(!0===a&&(e[1]=void 0),"function"==typeof(i=r.apply(b,e.slice(1)))&&n.use(i));return M=!0,v=1/0,b}function k(e){for(var n,r=t.length,a=-1;++a<r;)if((n=t[a])[0]===e)return n}function w(e,t,r){if(h(e),L(),r||"function"!=typeof t||(r=t,t=null),!r)return new Promise(a);function a(a,o){n.run(e,i(t),(function(t,n,i){n=n||e,t?o(t):a?a(n):r(null,n,i)}))}a(null,r)}function Y(e,t){if(L(),m("process",b.Parser),_("process",b.Compiler),!t)return new Promise(n);function n(n,r){var a=i(e);c.run(b,{file:a},(function(e){e?r(e):n?n(a):t(null,a)}))}n(null,t)}}().freeze();var l=[].slice,d={}.hasOwnProperty,c=o().use((function(e,t){t.tree=e.parse(t.file)})).use((function(e,t,n){e.run(t.tree,t.file,(function(e,r,a){e?n(e):(t.tree=r,t.file=a,n())}))})).use((function(e,t){t.file.contents=e.stringify(t.tree,t.file)}));function f(e){return"function"==typeof e&&function(e){var t;for(t in e)return!0;return!1}(e.prototype)}function m(e,t){if("function"!=typeof t)throw new Error("Cannot `"+e+"` without `Parser`")}function _(e,t){if("function"!=typeof t)throw new Error("Cannot `"+e+"` without `Compiler`")}function p(e,t){if(t)throw new Error(["Cannot invoke `"+e+"` on a frozen processor.\nCreate a new ","processor first, by invoking it: use `processor()` instead of ","`processor`."].join(""))}function h(e){if(!e||!s(e.type))throw new Error("Expected node, got `"+e+"`")}function y(e,t,n){if(!n)throw new Error("`"+e+"` finished async. Use `"+t+"` instead")}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=Object.defineProperty,o=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===a.call(e)},u=function(e){if(!e||"[object Object]"!==a.call(e))return!1;var t,n=r.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&r.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!n&&!i)return!1;for(t in e);return void 0===t||r.call(e,t)},l=function(e,t){i&&"__proto__"===t.name?i(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},d=function(e,t){if("__proto__"===t){if(!r.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var t,n,r,a,i,o,c=arguments[0],f=1,m=arguments.length,_=!1;for("boolean"==typeof c&&(_=c,c=arguments[1]||{},f=2),(null==c||"object"!=typeof c&&"function"!=typeof c)&&(c={});f<m;++f)if(null!=(t=arguments[f]))for(n in t)r=d(c,n),c!==(a=d(t,n))&&(_&&a&&(u(a)||(i=s(a)))?(i?(i=!1,o=r&&s(r)?r:[]):o=r&&u(r)?r:{},l(c,{name:n,newValue:e(_,o,a)})):void 0!==a&&l(c,{name:n,newValue:a}));return c}},function(e,t,n){"use strict";e.exports=function(e){if(e)throw e}},function(e,t,n){"use strict";var r=n(276),a=n(278);e.exports=a;var i=a.prototype;function o(e,t,n){var a=this.path,i=new r(e,t,n);return a&&(i.name=a+":"+i.name,i.file=a),i.fatal=!1,this.messages.push(i),i}i.message=o,i.info=function(){var e=this.message.apply(this,arguments);return e.fatal=null,e},i.fail=function(){var e=this.message.apply(this,arguments);throw e.fatal=!0,e},i.warn=o},function(e,t,n){"use strict";var r=n(277);function a(){}e.exports=o,a.prototype=Error.prototype,o.prototype=new a;var i=o.prototype;function o(e,t,n){var a,i,o;"string"==typeof t&&(n=t,t=null),a=function(e){var t,n=[null,null];"string"==typeof e&&(-1===(t=e.indexOf(":"))?n[1]=e:(n[0]=e.slice(0,t),n[1]=e.slice(t+1)));return n}(n),i=r(t)||"1:1",o={start:{line:null,column:null},end:{line:null,column:null}},t&&t.position&&(t=t.position),t&&(t.start?(o=t,t=t.start):o.start=t),e.stack&&(this.stack=e.stack,e=e.message),this.message=e,this.name=i,this.reason=e,this.line=t?t.line:null,this.column=t?t.column:null,this.location=o,this.source=a[0],this.ruleId=a[1]}i.file="",i.name="",i.reason="",i.message="",i.stack="",i.fatal=null,i.column=null,i.line=null},function(e,t,n){"use strict";var r={}.hasOwnProperty;function a(e){return e&&"object"==typeof e||(e={}),o(e.line)+":"+o(e.column)}function i(e){return e&&"object"==typeof e||(e={}),a(e.start)+"-"+a(e.end)}function o(e){return e&&"number"==typeof e?e:1}e.exports=function(e){if(!e||"object"!=typeof e)return null;if(r.call(e,"position")||r.call(e,"type"))return i(e.position);if(r.call(e,"start")||r.call(e,"end"))return i(e);if(r.call(e,"line")||r.call(e,"column"))return a(e);return null}},function(e,t,n){"use strict";(function(t){var r=n(191),a=n(279),i=n(280);e.exports=l;var o={}.hasOwnProperty,s=l.prototype;s.toString=function(e){var t=this.contents||"";return i(t)?t.toString(e):String(t)};var u=["history","path","basename","stem","extname","dirname"];function l(e){var n,r,a;if(e){if("string"==typeof e||i(e))e={contents:e};else if("message"in e&&"messages"in e)return e}else e={};if(!(this instanceof l))return new l(e);for(this.data={},this.messages=[],this.history=[],this.cwd=t.cwd(),r=-1,a=u.length;++r<a;)n=u[r],o.call(e,n)&&(this[n]=e[n]);for(n in e)-1===u.indexOf(n)&&(this[n]=e[n])}function d(e,t){if(-1!==e.indexOf(r.sep))throw new Error("`"+t+"` cannot be a path: did not expect `"+r.sep+"`")}function c(e,t){if(!e)throw new Error("`"+t+"` cannot be empty")}function f(e,t){if(!e)throw new Error("Setting `"+t+"` requires `path` to be set too")}Object.defineProperty(s,"path",{get:function(){return this.history[this.history.length-1]},set:function(e){c(e,"path"),e!==this.path&&this.history.push(e)}}),Object.defineProperty(s,"dirname",{get:function(){return"string"==typeof this.path?r.dirname(this.path):void 0},set:function(e){f(this.path,"dirname"),this.path=r.join(e||"",this.basename)}}),Object.defineProperty(s,"basename",{get:function(){return"string"==typeof this.path?r.basename(this.path):void 0},set:function(e){c(e,"basename"),d(e,"basename"),this.path=r.join(this.dirname||"",e)}}),Object.defineProperty(s,"extname",{get:function(){return"string"==typeof this.path?r.extname(this.path):void 0},set:function(e){var t=e||"";if(d(t,"extname"),f(this.path,"extname"),t){if("."!==t.charAt(0))throw new Error("`extname` must start with `.`");if(-1!==t.indexOf(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=a(this.path,t)}}),Object.defineProperty(s,"stem",{get:function(){return"string"==typeof this.path?r.basename(this.path,this.extname):void 0},set:function(e){c(e,"stem"),d(e,"stem"),this.path=r.join(this.dirname||"",e+(this.extname||""))}})}).call(this,n(13))},function(e,t,n){"use strict";var r=n(191);e.exports=function(e,t){if("string"!=typeof e)return e;if(0===e.length)return e;var n=r.basename(e,r.extname(e))+t;return r.join(r.dirname(e),n)}},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(282);e.exports=i,i.wrap=r;var a=[].slice;function i(){var e=[],t={run:function(){var t=-1,n=a.call(arguments,0,-1),i=arguments[arguments.length-1];if("function"!=typeof i)throw new Error("Expected function as last argument, not "+i);function o(s){var u=e[++t],l=a.call(arguments,0),d=l.slice(1),c=n.length,f=-1;if(s)i(s);else{for(;++f<c;)null!==d[f]&&void 0!==d[f]||(d[f]=n[f]);n=d,u?r(u,o).apply(null,n):i.apply(null,[null].concat(n))}}o.apply(null,[null].concat(n))},use:function(n){if("function"!=typeof n)throw new Error("Expected `fn` to be a function, not "+n);return e.push(n),t}};return t}},function(e,t,n){"use strict";var r=[].slice;e.exports=function(e,t){var n;return function(){var t,o=r.call(arguments,0),s=e.length>o.length;s&&o.push(a);try{t=e.apply(null,o)}catch(e){if(s&&n)throw e;return a(e)}s||(t&&"function"==typeof t.then?t.then(i,a):t instanceof Error?a(t):i(t))};function a(){n||(n=!0,t.apply(null,arguments))}function i(e){a(null,e)}}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return"[object String]"===n.call(e)}},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){var t;return"[object Object]"===r.call(e)&&(null===(t=Object.getPrototypeOf(e))||t===Object.getPrototypeOf({}))}},function(e,t,n){"use strict";var r=n(286),a=n(7),i=n(288);function o(e){var t=r(i);t.prototype.options=a(t.prototype.options,this.data("settings"),e),this.Parser=t}e.exports=o,o.Parser=i},function(e,t,n){"use strict";var r=n(7),a=n(287);e.exports=function(e){var t,n,i;for(n in a(s,e),a(o,s),t=s.prototype)(i=t[n])&&"object"==typeof i&&(t[n]="concat"in i?i.concat():r(i));return s;function o(t){return e.apply(this,t)}function s(){return this instanceof s?e.apply(this,arguments):new o(arguments)}}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},function(e,t,n){"use strict";var r=n(7),a=n(289),i=n(290),o=n(291),s=n(292),u=n(298);function l(e,t){this.file=t,this.offset={},this.options=r(this.options),this.setOptions({}),this.inList=!1,this.inBlock=!1,this.inLink=!1,this.atStart=!0,this.toOffset=i(t).toOffset,this.unescape=o(this,"escape"),this.decode=s(this)}e.exports=l;var d=l.prototype;function c(e){var t,n=[];for(t in e)n.push(t);return n}d.setOptions=n(299),d.parse=n(302),d.options=n(193),d.exitStart=a("atStart",!0),d.enterList=a("inList",!1),d.enterLink=a("inLink",!1),d.enterBlock=a("inBlock",!1),d.interruptParagraph=[["thematicBreak"],["atxHeading"],["fencedCode"],["blockquote"],["html"],["setextHeading",{commonmark:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.interruptList=[["atxHeading",{pedantic:!1}],["fencedCode",{pedantic:!1}],["thematicBreak",{pedantic:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.interruptBlockquote=[["indentedCode",{commonmark:!0}],["fencedCode",{commonmark:!0}],["atxHeading",{commonmark:!0}],["setextHeading",{commonmark:!0}],["thematicBreak",{commonmark:!0}],["html",{commonmark:!0}],["list",{commonmark:!0}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.blockTokenizers={newline:n(306),indentedCode:n(307),fencedCode:n(308),blockquote:n(309),atxHeading:n(310),thematicBreak:n(311),list:n(312),setextHeading:n(314),html:n(315),footnote:n(316),definition:n(318),table:n(319),paragraph:n(320)},d.inlineTokenizers={escape:n(321),autoLink:n(323),url:n(324),html:n(326),link:n(327),reference:n(328),strong:n(329),emphasis:n(331),deletion:n(334),code:n(336),break:n(338),text:n(340)},d.blockMethods=c(d.blockTokenizers),d.inlineMethods=c(d.inlineTokenizers),d.tokenizeBlock=u("block"),d.tokenizeInline=u("inline"),d.tokenizeFactory=u},function(e,t,n){"use strict";e.exports=function(e,t,n){return function(){var r=n||this,a=r[e];return r[e]=!t,function(){r[e]=a}}}},function(e,t,n){"use strict";function r(e){return function(t){var n=-1,r=e.length;if(t<0)return{};for(;++n<r;)if(e[n]>t)return{line:n+1,column:t-(e[n-1]||0)+1,offset:t};return{}}}function a(e){return function(t){var n=t&&t.line,r=t&&t.column;if(!isNaN(n)&&!isNaN(r)&&n-1 in e)return(e[n-2]||0)+r-1||0;return-1}}e.exports=function(e){var t=function(e){var t=[],n=e.indexOf("\n");for(;-1!==n;)t.push(n+1),n=e.indexOf("\n",n+1);return t.push(e.length+1),t}(String(e));return{toPosition:r(t),toOffset:a(t)}}},function(e,t,n){"use strict";e.exports=function(e,t){return function(n){var r,a=0,i=n.indexOf("\\"),o=e[t],s=[];for(;-1!==i;)s.push(n.slice(a,i)),a=i+1,(r=n.charAt(a))&&-1!==o.indexOf(r)||s.push("\\"),i=n.indexOf("\\",a);return s.push(n.slice(a)),s.join("")}}},function(e,t,n){"use strict";var r=n(7),a=n(25);e.exports=function(e){return i.raw=function(e,i,o){return a(e,r(o,{position:t(i),warning:n}))},i;function t(t){for(var n=e.offset,r=t.line,a=[];++r&&r in n;)a.push((n[r]||0)+1);return{start:t,indent:a}}function n(t,n,r){3!==r&&e.file.message(t,n)}function i(r,i,o){a(r,{position:t(i),warning:n,text:o,reference:o,textContext:e,referenceContext:e})}}},function(e){e.exports=JSON.parse('{"AElig":"Æ","AMP":"&","Aacute":"Á","Acirc":"Â","Agrave":"À","Aring":"Å","Atilde":"Ã","Auml":"Ä","COPY":"©","Ccedil":"Ç","ETH":"Ð","Eacute":"É","Ecirc":"Ê","Egrave":"È","Euml":"Ë","GT":">","Iacute":"Í","Icirc":"Î","Igrave":"Ì","Iuml":"Ï","LT":"<","Ntilde":"Ñ","Oacute":"Ó","Ocirc":"Ô","Ograve":"Ò","Oslash":"Ø","Otilde":"Õ","Ouml":"Ö","QUOT":"\\"","REG":"®","THORN":"Þ","Uacute":"Ú","Ucirc":"Û","Ugrave":"Ù","Uuml":"Ü","Yacute":"Ý","aacute":"á","acirc":"â","acute":"´","aelig":"æ","agrave":"à","amp":"&","aring":"å","atilde":"ã","auml":"ä","brvbar":"¦","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","curren":"¤","deg":"°","divide":"÷","eacute":"é","ecirc":"ê","egrave":"è","eth":"ð","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","iacute":"í","icirc":"î","iexcl":"¡","igrave":"ì","iquest":"¿","iuml":"ï","laquo":"«","lt":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","ntilde":"ñ","oacute":"ó","ocirc":"ô","ograve":"ò","ordf":"ª","ordm":"º","oslash":"ø","otilde":"õ","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","raquo":"»","reg":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","thorn":"þ","times":"×","uacute":"ú","ucirc":"û","ugrave":"ù","uml":"¨","uuml":"ü","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e){e.exports=JSON.parse('{"0":"�","128":"€","130":"‚","131":"ƒ","132":"„","133":"…","134":"†","135":"‡","136":"ˆ","137":"‰","138":"Š","139":"‹","140":"Œ","142":"Ž","145":"‘","146":"’","147":"“","148":"”","149":"•","150":"–","151":"—","152":"˜","153":"™","154":"š","155":"›","156":"œ","158":"ž","159":"Ÿ"}')},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=97&&t<=102||t>=65&&t<=70||t>=48&&t<=57}},function(e,t,n){"use strict";var r=n(192),a=n(18);e.exports=function(e){return r(e)||a(e)}},function(e,t,n){"use strict";var r;e.exports=function(e){var t,n="&"+e+";";if((r=r||document.createElement("i")).innerHTML=n,59===(t=r.textContent).charCodeAt(t.length-1)&&"semi"!==e)return!1;return t!==n&&t}},function(e,t,n){"use strict";e.exports=function(e){return function(t,n){var i,o,s,u,l,d,c=this,f=c.offset,m=[],_=c[e+"Methods"],p=c[e+"Tokenizers"],h=n.line,y=n.column;if(!t)return m;b.now=M,b.file=c.file,g("");for(;t;){for(i=-1,o=_.length,l=!1;++i<o&&(u=_[i],!(s=p[u])||s.onlyAtStart&&!c.atStart||s.notInList&&c.inList||s.notInBlock&&c.inBlock||s.notInLink&&c.inLink||(d=t.length,s.apply(c,[b,t]),!(l=d!==t.length))););l||c.file.fail(new Error("Infinite loop"),b.now())}return c.eof=M(),m;function g(e){for(var t=-1,n=e.indexOf("\n");-1!==n;)h++,t=n,n=e.indexOf("\n",n+1);-1===t?y+=e.length:y=e.length-t,h in f&&(-1!==t?y+=f[h]:y<=f[h]&&(y=f[h]+1))}function M(){var e={line:h,column:y};return e.offset=c.toOffset(e),e}function v(e){this.start=e,this.end=M()}function b(e){var n,i=function(){var e=[],t=h+1;return function(){for(var n=h+1;t<n;)e.push((f[t]||0)+1),t++;return e}}(),o=(n=M(),function(e,t){var r=e.position,a=r?r.start:n,i=[],o=r&&r.end.line,s=n.line;if(e.position=new v(a),r&&t&&r.indent){if(i=r.indent,o<s){for(;++o<s;)i.push((f[o]||0)+1);i.push(n.column)}t=i.concat(t)}return e.position.indent=t||[],e}),s=M();return function(e){t.substring(0,e.length)!==e&&c.file.fail(new Error("Incorrectly eaten value: please report this warning on http://git.io/vg5Ft"),M())}(e),u.reset=l,l.test=d,u.test=d,t=t.substring(e.length),g(e),i=i(),u;function u(e,t){return o(function(e,t){var n=t?t.children:m,i=n[n.length-1];return i&&e.type===i.type&&e.type in r&&a(i)&&a(e)&&(e=r[e.type].call(c,i,e)),e!==i&&n.push(e),c.atStart&&0!==m.length&&c.exitStart(),e}(o(e),t),i)}function l(){var n=u.apply(null,arguments);return h=s.line,y=s.column,t=e+t,n}function d(){var n=o({});return h=s.line,y=s.column,t=e+t,n.position}}}};var r={text:function(e,t){return e.value+=t.value,e},blockquote:function(e,t){if(this.options.commonmark)return t;return e.children=e.children.concat(t.children),e}};function a(e){var t,n;return"text"!==e.type||!e.position||(t=e.position.start,n=e.position.end,t.line!==n.line||n.column-t.column===e.value.length)}},function(e,t,n){"use strict";var r=n(7),a=n(300),i=n(193);e.exports=function(e){var t,n,o=this.options;if(null==e)e={};else{if("object"!=typeof e)throw new Error("Invalid value `"+e+"` for setting `options`");e=r(e)}for(t in i){if(null==(n=e[t])&&(n=o[t]),"blocks"!==t&&"boolean"!=typeof n||"blocks"===t&&"object"!=typeof n)throw new Error("Invalid value `"+n+"` for setting `options."+t+"`");e[t]=n}return this.options=e,this.escape=a(e),this}},function(e,t,n){"use strict";e.exports=o;var r=["\\","`","*","{","}","[","]","(",")","#","+","-",".","!","_",">"],a=r.concat(["~","|"]),i=a.concat(["\n",'"',"$","%","&","'",",","/",":",";","<","=","?","@","^"]);function o(e){var t=e||{};return t.commonmark?i:t.gfm?a:r}o.default=r,o.gfm=a,o.commonmark=i},function(e){e.exports=JSON.parse('["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","pre","section","source","title","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]')},function(e,t,n){"use strict";var r=n(7),a=n(303);e.exports=function(){var e,t=String(this.file),n={line:1,column:1,offset:0},o=r(n);65279===(t=t.replace(i,"\n")).charCodeAt(0)&&(t=t.slice(1),o.column++,o.offset++);e={type:"root",children:this.tokenizeBlock(t,o),position:{start:n,end:this.eof||r(n)}},this.options.position||a(e,!0);return e};var i=/\r\n|\r/g},function(e,t,n){"use strict";var r=n(19);function a(e){delete e.position}function i(e){e.position=void 0}e.exports=function(e,t){return r(e,t?a:i),e}},function(e,t,n){"use strict";e.exports=a;var r=n(305);function a(e,t,n,a){var o;function s(e,r,u){var l,d=[];return(t&&!o(e,r,u[u.length-1]||null)||!1!==(d=i(n(e,u)))[0])&&e.children&&"skip"!==d[0]&&!1===(l=i(function(e,t){var n,r=a?-1:1,i=(a?e.length:-1)+r;for(;i>-1&&i<e.length;){if(!1===(n=s(e[i],i,t))[0])return n;i="number"==typeof n[1]?n[1]:i+r}}(e.children,u.concat(e))))[0]?l:d}"function"==typeof t&&"function"!=typeof n&&(a=n,n=t,t=null),o=r(t),s(e,null,[])}function i(e){return null!==e&&"object"==typeof e&&"length"in e?e:"number"==typeof e?[!0,e]:[e]}a.CONTINUE=!0,a.SKIP="skip",a.EXIT=!1},function(e,t,n){"use strict";function r(e){if("string"==typeof e)return function(e){return function(t){return Boolean(t&&t.type===e)}}(e);if(null==e)return o;if("object"==typeof e)return("length"in e?i:a)(e);if("function"==typeof e)return e;throw new Error("Expected function, string, or object as test")}function a(e){return function(t){var n;for(n in e)if(t[n]!==e[n])return!1;return!0}}function i(e){var t=function(e){for(var t=[],n=e.length,a=-1;++a<n;)t[a]=r(e[a]);return t}(e),n=t.length;return function(){var e=-1;for(;++e<n;)if(t[e].apply(this,arguments))return!0;return!1}}function o(){return!0}e.exports=r},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var a,i,o,s,u=t.charAt(0);if("\n"!==u)return;if(n)return!0;s=1,a=t.length,i=u,o="";for(;s<a&&(u=t.charAt(s),r(u));)o+=u,"\n"===u&&(i+=o,o=""),s++;e(i)}},function(e,t,n){"use strict";var r=n(26),a=n(27);e.exports=function(e,t,n){var r,o,s,u=-1,l=t.length,d="",c="",f="",m="";for(;++u<l;)if(r=t.charAt(u),s)if(s=!1,d+=f,c+=m,f="",m="","\n"===r)f=r,m=r;else for(d+=r,c+=r;++u<l;){if(!(r=t.charAt(u))||"\n"===r){m=r,f=r;break}d+=r,c+=r}else if(" "===r&&t.charAt(u+1)===r&&t.charAt(u+2)===r&&t.charAt(u+3)===r)f+=i,u+=3,s=!0;else if("\t"===r)f+=r,s=!0;else{for(o="";"\t"===r||" "===r;)o+=r,r=t.charAt(++u);if("\n"!==r)break;f+=o+r,m+=r}if(c)return!!n||e(d)({type:"code",lang:null,value:a(c)})};var i=r(" ",4)},function(e,t,n){"use strict";var r=n(27);e.exports=function(e,t,n){var a,i,o,s,u,l,d,c,f,m,_,p=this.options,h=t.length+1,y=0,g="";if(!p.gfm)return;for(;y<h&&(" "===(o=t.charAt(y))||"\t"===o);)g+=o,y++;if(m=y,"~"!==(o=t.charAt(y))&&"`"!==o)return;y++,i=o,a=1,g+=o;for(;y<h&&(o=t.charAt(y))===i;)g+=o,a++,y++;if(a<3)return;for(;y<h&&(" "===(o=t.charAt(y))||"\t"===o);)g+=o,y++;s="",u="";for(;y<h&&"\n"!==(o=t.charAt(y))&&"~"!==o&&"`"!==o;)" "===o||"\t"===o?u+=o:(s+=u+o,u=""),y++;if((o=t.charAt(y))&&"\n"!==o)return;if(n)return!0;(_=e.now()).column+=g.length,_.offset+=g.length,g+=s,s=this.decode.raw(this.unescape(s),_),u&&(g+=u);u="",c="",f="",l="",d="";for(;y<h;)if(o=t.charAt(y),l+=c,d+=f,c="",f="","\n"===o){for(l?(c+=o,f+=o):g+=o,u="",y++;y<h&&" "===(o=t.charAt(y));)u+=o,y++;if(c+=u,f+=u.slice(m),!(u.length>=4)){for(u="";y<h&&(o=t.charAt(y))===i;)u+=o,y++;if(c+=u,f+=u,!(u.length<a)){for(u="";y<h&&(" "===(o=t.charAt(y))||"\t"===o);)c+=o,f+=o,y++;if(!o||"\n"===o)break}}}else l+=o,f+=o,y++;return e(g+=l+c)({type:"code",lang:s||null,value:r(d)})}},function(e,t,n){"use strict";var r=n(10),a=n(28);e.exports=function(e,t,n){var i,o,s,u,l,d,c,f,m,_=this.offset,p=this.blockTokenizers,h=this.interruptBlockquote,y=e.now(),g=y.line,M=t.length,v=[],b=[],L=[],k=0;for(;k<M&&(" "===(o=t.charAt(k))||"\t"===o);)k++;if(">"!==t.charAt(k))return;if(n)return!0;k=0;for(;k<M;){for(u=t.indexOf("\n",k),c=k,f=!1,-1===u&&(u=M);k<M&&(" "===(o=t.charAt(k))||"\t"===o);)k++;if(">"===t.charAt(k)?(k++,f=!0," "===t.charAt(k)&&k++):k=c,l=t.slice(k,u),!f&&!r(l)){k=c;break}if(!f&&(s=t.slice(k),a(h,p,this,[e,s,!0])))break;d=c===k?l:t.slice(c,u),L.push(k-c),v.push(d),b.push(l),k=u+1}k=-1,M=L.length,i=e(v.join("\n"));for(;++k<M;)_[g]=(_[g]||0)+L[k],g++;return m=this.enterBlock(),b=this.tokenizeBlock(b.join("\n"),y),m(),i({type:"blockquote",children:b})}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o=this.options,s=t.length+1,u=-1,l=e.now(),d="",c="";for(;++u<s;){if(" "!==(r=t.charAt(u))&&"\t"!==r){u--;break}d+=r}i=0;for(;++u<=s;){if("#"!==(r=t.charAt(u))){u--;break}d+=r,i++}if(i>6)return;if(!i||!o.pedantic&&"#"===t.charAt(u+1))return;s=t.length+1,a="";for(;++u<s;){if(" "!==(r=t.charAt(u))&&"\t"!==r){u--;break}a+=r}if(!o.pedantic&&0===a.length&&r&&"\n"!==r)return;if(n)return!0;d+=a,a="",c="";for(;++u<s&&(r=t.charAt(u))&&"\n"!==r;)if(" "===r||"\t"===r||"#"===r){for(;" "===r||"\t"===r;)a+=r,r=t.charAt(++u);for(;"#"===r;)a+=r,r=t.charAt(++u);for(;" "===r||"\t"===r;)a+=r,r=t.charAt(++u);u--}else c+=a+r,a="";return l.column+=d.length,l.offset+=d.length,e(d+=c+a)({type:"heading",depth:i,children:this.tokenizeInline(c,l)})}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o,s=-1,u=t.length+1,l="";for(;++s<u&&("\t"===(r=t.charAt(s))||" "===r);)l+=r;if("*"!==r&&"-"!==r&&"_"!==r)return;a=r,l+=r,i=1,o="";for(;++s<u;)if((r=t.charAt(s))===a)i++,l+=o+a,o="";else{if(" "!==r)return i>=3&&(!r||"\n"===r)?(l+=o,!!n||e(l)({type:"thematicBreak"})):void 0;o+=r}}},function(e,t,n){"use strict";var r=n(10),a=n(26),i=n(18),o=n(194),s=n(313),u=n(28);e.exports=function(e,t,n){var a,o,s,l,d,c,f,m,g,M,v,b,L,k,w,Y,T,D,S,x,j,O,E,H,P=this.options.commonmark,A=this.options.pedantic,C=this.blockTokenizers,N=this.interruptList,F=0,W=t.length,z=null,I=0;for(;F<W;){if("\t"===(l=t.charAt(F)))I+=4-I%4;else{if(" "!==l)break;I++}F++}if(I>=4)return;if(l=t.charAt(F),a=P?h:p,!0===_[l])d=l,s=!1;else{for(s=!0,o="";F<W&&(l=t.charAt(F),i(l));)o+=l,F++;if(l=t.charAt(F),!o||!0!==a[l])return;z=parseInt(o,10),d=l}if(" "!==(l=t.charAt(++F))&&"\t"!==l)return;if(n)return!0;F=0,k=[],w=[],Y=[];for(;F<W;){for(c=t.indexOf("\n",F),f=F,m=!1,H=!1,-1===c&&(c=W),E=F+4,I=0;F<W;){if("\t"===(l=t.charAt(F)))I+=4-I%4;else{if(" "!==l)break;I++}F++}if(I>=4&&(H=!0),T&&I>=T.indent&&(H=!0),l=t.charAt(F),g=null,!H){if(!0===_[l])g=l,F++,I++;else{for(o="";F<W&&(l=t.charAt(F),i(l));)o+=l,F++;l=t.charAt(F),F++,o&&!0===a[l]&&(g=l,I+=o.length+1)}if(g)if("\t"===(l=t.charAt(F)))I+=4-I%4,F++;else if(" "===l){for(E=F+4;F<E&&" "===t.charAt(F);)F++,I++;F===E&&" "===t.charAt(F)&&(F-=3,I-=3)}else"\n"!==l&&""!==l&&(g=null)}if(g){if(!A&&d!==g)break;m=!0}else P||H||" "!==t.charAt(f)?P&&T&&(H=I>=T.indent||I>4):H=!0,m=!1,F=f;if(v=t.slice(f,c),M=f===F?v:t.slice(F,c),("*"===g||"_"===g||"-"===g)&&C.thematicBreak.call(this,e,v,!0))break;if(b=L,L=!r(M).length,H&&T)T.value=T.value.concat(Y,v),w=w.concat(Y,v),Y=[];else if(m)0!==Y.length&&(T.value.push(""),T.trail=Y.concat()),T={value:[v],indent:I,trail:[]},k.push(T),w=w.concat(Y,v),Y=[];else if(L){if(b)break;Y.push(v)}else{if(b)break;if(u(N,C,this,[e,v,!0]))break;T.value=T.value.concat(Y,v),w=w.concat(Y,v),Y=[]}F=c+1}j=e(w.join("\n")).reset({type:"list",ordered:s,start:z,loose:null,children:[]}),D=this.enterList(),S=this.enterBlock(),x=!1,F=-1,W=k.length;for(;++F<W;)T=k[F].value.join("\n"),O=e.now(),(T=e(T)(y(this,T,O),j)).loose&&(x=!0),T=k[F].trail.join("\n"),F!==W-1&&(T+="\n"),e(T);return D(),S(),j.loose=x,j};var l=/\n\n(?!\s*$)/,d=/^\[([ \t]|x|X)][ \t]/,c=/^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/,f=/^([ \t]*)([*+-]|\d+[.)])([ \t]+)/,m=/^( {1,4}|\t)?/gm,_={"*":!0,"+":!0,"-":!0},p={".":!0},h={};function y(e,t,n){var r,a,i=e.offset,o=e.options.pedantic?g:M,s=null;return t=o.apply(null,arguments),e.options.gfm&&(r=t.match(d))&&(a=r[0].length,s="x"===r[1].toLowerCase(),i[n.line]+=a,t=t.slice(a)),{type:"listItem",loose:l.test(t)||"\n"===t.charAt(t.length-1),checked:s,children:e.tokenizeBlock(t,n)}}function g(e,t,n){var r=e.offset,a=n.line;return t=t.replace(f,i),a=n.line,t.replace(m,i);function i(e){return r[a]=(r[a]||0)+e.length,a++,""}}function M(e,t,n){var r,i,u,l,d,f,m,_=e.offset,p=n.line;for(l=(t=t.replace(c,(function(e,t,n,o,s){i=t+n+o,u=s,Number(n)<10&&i.length%2==1&&(n=" "+n);return(r=t+a(" ",n.length)+o)+u}))).split("\n"),(d=s(t,o(r).indent).split("\n"))[0]=u,_[p]=(_[p]||0)+i.length,p++,f=0,m=l.length;++f<m;)_[p]=(_[p]||0)+l[f].length-d[f].length,p++;return d.join("\n")}h["."]=!0,h[")"]=!0},function(e,t,n){"use strict";var r=n(10),a=n(26),i=n(194);e.exports=function(e,t){var n,o,s,u,l=e.split("\n"),d=l.length+1,c=1/0,f=[];l.unshift(a(" ",t)+"!");for(;d--;)if(o=i(l[d]),f[d]=o.stops,0!==r(l[d]).length){if(!o.indent){c=1/0;break}o.indent>0&&o.indent<c&&(c=o.indent)}if(c!==1/0)for(d=l.length;d--;){for(s=f[d],n=c;n&&!(n in s);)n--;u=0!==r(l[d]).length&&c&&n!==c?"\t":"",l[d]=u+l[d].slice(n in s?s[n]+1:0)}return l.shift(),l.join("\n")}},function(e,t,n){"use strict";e.exports=function(e,t,n){var a,i,o,s,u,l=e.now(),d=t.length,c=-1,f="";for(;++c<d;){if(" "!==(o=t.charAt(c))||c>=3){c--;break}f+=o}a="",i="";for(;++c<d;){if("\n"===(o=t.charAt(c))){c--;break}" "===o||"\t"===o?i+=o:(a+=i+o,i="")}if(l.column+=f.length,l.offset+=f.length,f+=a+i,o=t.charAt(++c),s=t.charAt(++c),"\n"!==o||!r[s])return;f+=o,i=s,u=r[s];for(;++c<d;){if((o=t.charAt(c))!==s){if("\n"!==o)return;c--;break}i+=o}if(n)return!0;return e(f+i)({type:"heading",depth:u,children:this.tokenizeInline(a,l)})};var r={};r["="]=1,r["-"]=2},function(e,t,n){"use strict";var r=n(195).openCloseTag;e.exports=function(e,t,n){var a,i,o,s,u,l,d,c=this.options.blocks,f=t.length,m=0,_=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Za-z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+c.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(r.source+"\\s*$"),/^$/,!1]];for(;m<f&&("\t"===(s=t.charAt(m))||" "===s);)m++;if("<"!==t.charAt(m))return;a=-1===(a=t.indexOf("\n",m+1))?f:a,i=t.slice(m,a),o=-1,u=_.length;for(;++o<u;)if(_[o][0].test(i)){l=_[o];break}if(!l)return;if(n)return l[2];if(m=a,!l[1].test(i))for(;m<f;){if(a=-1===(a=t.indexOf("\n",m+1))?f:a,i=t.slice(m+1,a),l[1].test(i)){i&&(m=a);break}m=a}return d=t.slice(0,m),e(d)({type:"html",value:d})}},function(e,t,n){"use strict";var r=n(6),a=n(29);e.exports=o,o.notInList=!0,o.notInBlock=!0;var i=/^( {4}|\t)?/gm;function o(e,t,n){var o,s,u,l,d,c,f,m,_,p,h,y,g=this.offset;if(this.options.footnotes){for(o=0,s=t.length,u="",l=e.now(),d=l.line;o<s&&(_=t.charAt(o),r(_));)u+=_,o++;if("["===t.charAt(o)&&"^"===t.charAt(o+1)){for(o=(u+="[^").length,f="";o<s&&"]"!==(_=t.charAt(o));)"\\"===_&&(f+=_,o++,_=t.charAt(o)),f+=_,o++;if(f&&"]"===t.charAt(o)&&":"===t.charAt(o+1)){if(n)return!0;for(p=a(f),o=(u+=f+"]:").length;o<s&&("\t"===(_=t.charAt(o))||" "===_);)u+=_,o++;for(l.column+=u.length,l.offset+=u.length,f="",c="",m="";o<s;){if("\n"===(_=t.charAt(o))){for(m=_,o++;o<s&&"\n"===(_=t.charAt(o));)m+=_,o++;for(f+=m,m="";o<s&&" "===(_=t.charAt(o));)m+=_,o++;if(0===m.length)break;f+=m}f&&(c+=f,f=""),c+=_,o++}return u+=c,c=c.replace(i,(function(e){return g[d]=(g[d]||0)+e.length,d++,""})),h=e(u),y=this.enterBlock(),c=this.tokenizeBlock(c,l),y(),h({type:"footnoteDefinition",identifier:p,children:c})}}}}},function(e,t,n){"use strict";e.exports=function(e){return String(e).replace(/\s+/g," ")}},function(e,t,n){"use strict";var r=n(6),a=n(29);e.exports=i,i.notInList=!0,i.notInBlock=!0;function i(e,t,n){for(var r,i,u,l,d,c,f,m,_=this.options.commonmark,p=0,h=t.length,y="";p<h&&(" "===(l=t.charAt(p))||"\t"===l);)y+=l,p++;if("["===(l=t.charAt(p))){for(p++,y+=l,u="";p<h&&"]"!==(l=t.charAt(p));)"\\"===l&&(u+=l,p++,l=t.charAt(p)),u+=l,p++;if(u&&"]"===t.charAt(p)&&":"===t.charAt(p+1)){for(c=u,p=(y+=u+"]:").length,u="";p<h&&("\t"===(l=t.charAt(p))||" "===l||"\n"===l);)y+=l,p++;if(u="",r=y,"<"===(l=t.charAt(p))){for(p++;p<h&&o(l=t.charAt(p));)u+=l,p++;if((l=t.charAt(p))===o.delimiter)y+="<"+u+l,p++;else{if(_)return;p-=u.length+1,u=""}}if(!u){for(;p<h&&s(l=t.charAt(p));)u+=l,p++;y+=u}if(u){for(f=u,u="";p<h&&("\t"===(l=t.charAt(p))||" "===l||"\n"===l);)u+=l,p++;if(d=null,'"'===(l=t.charAt(p))?d='"':"'"===l?d="'":"("===l&&(d=")"),d){if(!u)return;for(p=(y+=u+l).length,u="";p<h&&(l=t.charAt(p))!==d;){if("\n"===l){if(p++,"\n"===(l=t.charAt(p))||l===d)return;u+="\n"}u+=l,p++}if((l=t.charAt(p))!==d)return;i=y,y+=u+l,p++,m=u,u=""}else u="",p=y.length;for(;p<h&&("\t"===(l=t.charAt(p))||" "===l);)y+=l,p++;return(l=t.charAt(p))&&"\n"!==l?void 0:!!n||(r=e(r).test().end,f=this.decode.raw(this.unescape(f),r,{nonTerminated:!1}),m&&(i=e(i).test().end,m=this.decode.raw(this.unescape(m),i)),e(y)({type:"definition",identifier:a(c),title:m||null,url:f}))}}}}function o(e){return">"!==e&&"["!==e&&"]"!==e}function s(e){return"["!==e&&"]"!==e&&!r(e)}o.delimiter=">"},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var a,i,o,s,u,l,d,c,f,m,_,p,h,y,g,M,v,b,L,k,w,Y,T,D;if(!this.options.gfm)return;a=0,b=0,l=t.length+1,d=[];for(;a<l;){if(Y=t.indexOf("\n",a),T=t.indexOf("|",a+1),-1===Y&&(Y=t.length),-1===T||T>Y){if(b<2)return;break}d.push(t.slice(a,Y)),b++,a=Y+1}s=d.join("\n"),i=d.splice(1,1)[0]||[],a=0,l=i.length,b--,o=!1,_=[];for(;a<l;){if("|"===(f=i.charAt(a))){if(m=null,!1===o){if(!1===D)return}else _.push(o),o=!1;D=!1}else if("-"===f)m=!0,o=o||null;else if(":"===f)o="left"===o?"center":m&&null===o?"right":"left";else if(!r(f))return;a++}!1!==o&&_.push(o);if(_.length<1)return;if(n)return!0;v=-1,k=[],w=e(s).reset({type:"table",align:_,children:k});for(;++v<b;){for(L=d[v],u={type:"tableRow",children:[]},v&&e("\n"),e(L).reset(u,w),l=L.length+1,a=0,c="",p="",h=!0,y=null,g=null;a<l;)if("\t"!==(f=L.charAt(a))&&" "!==f){if(""===f||"|"===f)if(h)e(f);else{if(f&&g){c+=f,a++;continue}!p&&!f||h||(s=p,c.length>1&&(f?(s+=c.slice(0,c.length-1),c=c.charAt(c.length-1)):(s+=c,c="")),M=e.now(),e(s)({type:"tableCell",children:this.tokenizeInline(p,M)},u)),e(c+f),c="",p=""}else if(c&&(p+=c,c=""),p+=f,"\\"===f&&a!==l-2&&(p+=L.charAt(a+1),a++),"`"===f){for(y=1;L.charAt(a+1)===f;)p+=f,a++,y++;g?y>=g&&(g=0):g=y}h=!1,a++}else p?c+=f:e(f),a++;v||e("\n"+i)}return w}},function(e,t,n){"use strict";var r=n(10),a=n(18),i=n(27),o=n(28);e.exports=function(e,t,n){var s,u,l,d,c,f=this.options,m=f.commonmark,_=f.gfm,p=this.blockTokenizers,h=this.interruptParagraph,y=t.indexOf("\n"),g=t.length;for(;y<g;){if(-1===y){y=g;break}if("\n"===t.charAt(y+1))break;if(m){for(d=0,s=y+1;s<g;){if("\t"===(l=t.charAt(s))){d=4;break}if(" "!==l)break;d++,s++}if(d>=4){y=t.indexOf("\n",y+1);continue}}if(u=t.slice(y+1),o(h,p,this,[e,u,!0]))break;if(p.list.call(this,e,u,!0)&&(this.inList||m||_&&!a(r.left(u).charAt(0))))break;if(s=y,-1!==(y=t.indexOf("\n",y+1))&&""===r(t.slice(s,y))){y=s;break}}if(u=t.slice(0,y),""===r(u))return e(u),null;if(n)return!0;return c=e.now(),u=i(u),e(u)({type:"paragraph",children:this.tokenizeInline(u,c)})}},function(e,t,n){"use strict";var r=n(322);function a(e,t,n){var r,a;if("\\"===t.charAt(0)&&(r=t.charAt(1),-1!==this.escape.indexOf(r)))return!!n||(a="\n"===r?{type:"break"}:{type:"text",value:r},e("\\"+r)(a))}e.exports=a,a.locator=r},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("\\",t)}},function(e,t,n){"use strict";var r=n(6),a=n(25),i=n(196);e.exports=s,s.locator=i,s.notInLink=!0;var o="mailto:".length;function s(e,t,n){var i,s,u,l,d,c,f,m,_,p,h;if("<"===t.charAt(0)){for(this,i="",s=t.length,u=0,l="",c=!1,f="",u++,i="<";u<s&&(d=t.charAt(u),!(r(d)||">"===d||"@"===d||":"===d&&"/"===t.charAt(u+1)));)l+=d,u++;if(l){if(f+=l,l="",f+=d=t.charAt(u),u++,"@"===d)c=!0;else{if(":"!==d||"/"!==t.charAt(u+1))return;f+="/",u++}for(;u<s&&(d=t.charAt(u),!r(d)&&">"!==d);)l+=d,u++;if(d=t.charAt(u),l&&">"===d)return!!n||(_=f+=l,i+=f+d,(m=e.now()).column++,m.offset++,c&&("mailto:"===f.slice(0,o).toLowerCase()?(_=_.substr(o),m.column+=o,m.offset+=o):f="mailto:"+f),p=this.inlineTokenizers,this.inlineTokenizers={text:p.text},h=this.enterLink(),_=this.tokenizeInline(_,m),this.inlineTokenizers=p,h(),e(i)({type:"link",title:null,url:a(f,{nonTerminated:!1}),children:_}))}}}},function(e,t,n){"use strict";var r=n(25),a=n(6),i=n(325);e.exports=u,u.locator=i,u.notInLink=!0;var o=["http://","https://","mailto:"],s=o.length;function u(e,t,n){var i,u,l,d,c,f,m,_,p,h,y,g;if(this.options.gfm){for(i="",d=-1,_=s;++d<_;)if(f=o[d],(m=t.slice(0,f.length)).toLowerCase()===f){i=m;break}if(i){for(d=i.length,_=t.length,p="",h=0;d<_&&(l=t.charAt(d),!a(l)&&"<"!==l)&&("."!==l&&","!==l&&":"!==l&&";"!==l&&'"'!==l&&"'"!==l&&")"!==l&&"]"!==l||(y=t.charAt(d+1))&&!a(y))&&("("!==l&&"["!==l||h++,")"!==l&&"]"!==l||!(--h<0));)p+=l,d++;if(p){if(u=i+=p,"mailto:"===f){if(-1===(c=p.indexOf("@"))||c===_-1)return;u=u.substr("mailto:".length)}return!!n||(g=this.enterLink(),u=this.tokenizeInline(u,e.now()),g(),e(i)({type:"link",title:null,url:r(i,{nonTerminated:!1}),children:u}))}}}}},function(e,t,n){"use strict";e.exports=function(e,t){var n,a=r.length,i=-1,o=-1;if(!this.options.gfm)return-1;for(;++i<a;)-1!==(n=e.indexOf(r[i],t))&&(n<o||-1===o)&&(o=n);return o};var r=["https://","http://","mailto:"]},function(e,t,n){"use strict";var r=n(192),a=n(196),i=n(195).tag;e.exports=u,u.locator=a;var o=/^<a /i,s=/^<\/a>/i;function u(e,t,n){var a,u,l=t.length;if(!("<"!==t.charAt(0)||l<3)&&(a=t.charAt(1),(r(a)||"?"===a||"!"===a||"/"===a)&&(u=t.match(i))))return!!n||(u=u[0],!this.inLink&&o.test(u)?this.inLink=!0:this.inLink&&s.test(u)&&(this.inLink=!1),e(u)({type:"html",value:u}))}},function(e,t,n){"use strict";var r=n(6),a=n(197);e.exports=u,u.locator=a;var i={}.hasOwnProperty,o={'"':'"',"'":"'"},s={};function u(e,t,n){var a,u,l,d,c,f,m,_,p,h,y,g,M,v,b,L,k,w,Y,T="",D=0,S=t.charAt(0),x=this.options.pedantic,j=this.options.commonmark,O=this.options.gfm;if("!"===S&&(p=!0,T=S,S=t.charAt(++D)),"["===S&&(p||!this.inLink)){for(T+=S,b="",D++,g=t.length,v=0,(k=e.now()).column+=D,k.offset+=D;D<g;){if(f=S=t.charAt(D),"`"===S){for(u=1;"`"===t.charAt(D+1);)f+=S,D++,u++;l?u>=l&&(l=0):l=u}else if("\\"===S)D++,f+=t.charAt(D);else if(l&&!O||"["!==S){if((!l||O)&&"]"===S){if(!v){if(!x)for(;D<g&&(S=t.charAt(D+1),r(S));)f+=S,D++;if("("!==t.charAt(D+1))return;f+="(",a=!0,D++;break}v--}}else v++;b+=f,f="",D++}if(a){for(h=b,T+=b+f,D++;D<g&&(S=t.charAt(D),r(S));)T+=S,D++;if(S=t.charAt(D),_=j?s:o,b="",d=T,"<"===S){for(D++,d+="<";D<g&&">"!==(S=t.charAt(D));){if(j&&"\n"===S)return;b+=S,D++}if(">"!==t.charAt(D))return;T+="<"+b+">",L=b,D++}else{for(S=null,f="";D<g&&(S=t.charAt(D),!f||!i.call(_,S));){if(r(S)){if(!x)break;f+=S}else{if("("===S)v++;else if(")"===S){if(0===v)break;v--}b+=f,f="","\\"===S&&(b+="\\",S=t.charAt(++D)),b+=S}D++}L=b,D=(T+=b).length}for(b="";D<g&&(S=t.charAt(D),r(S));)b+=S,D++;if(S=t.charAt(D),T+=b,b&&i.call(_,S))if(D++,T+=S,b="",y=_[S],c=T,j){for(;D<g&&(S=t.charAt(D))!==y;)"\\"===S&&(b+="\\",S=t.charAt(++D)),D++,b+=S;if((S=t.charAt(D))!==y)return;for(M=b,T+=b+S,D++;D<g&&(S=t.charAt(D),r(S));)T+=S,D++}else for(f="";D<g;){if((S=t.charAt(D))===y)m&&(b+=y+f,f=""),m=!0;else if(m){if(")"===S){T+=b+y+f,M=b;break}r(S)?f+=S:(b+=y+f+S,f="",m=!1)}else b+=S;D++}if(")"===t.charAt(D))return!!n||(T+=")",L=this.decode.raw(this.unescape(L),e(d).test().end,{nonTerminated:!1}),M&&(c=e(c).test().end,M=this.decode.raw(this.unescape(M),c)),Y={type:p?"image":"link",title:M||null,url:L},p?Y.alt=this.decode.raw(this.unescape(h),k)||null:(w=this.enterLink(),Y.children=this.tokenizeInline(h,k),w()),e(T)(Y))}}}s['"']='"',s["'"]="'",s["("]=")"},function(e,t,n){"use strict";var r=n(6),a=n(197),i=n(29);e.exports=o,o.locator=a;function o(e,t,n){var a,o,s,u,l,d,c,f,m=t.charAt(0),_=0,p=t.length,h="",y="",g="link",M="shortcut";if("!"===m&&(g="image",y=m,m=t.charAt(++_)),"["===m){if(_++,y+=m,d="",this.options.footnotes&&"^"===t.charAt(_)){if("image"===g)return;y+="^",_++,g="footnote"}for(f=0;_<p;){if("["===(m=t.charAt(_)))c=!0,f++;else if("]"===m){if(!f)break;f--}"\\"===m&&(d+="\\",m=t.charAt(++_)),d+=m,_++}if(h=d,a=d,"]"===(m=t.charAt(_))){for(_++,h+=m,d="";_<p&&(m=t.charAt(_),r(m));)d+=m,_++;if(m=t.charAt(_),"footnote"!==g&&"["===m){for(o="",d+=m,_++;_<p&&"["!==(m=t.charAt(_))&&"]"!==m;)"\\"===m&&(o+="\\",m=t.charAt(++_)),o+=m,_++;"]"===(m=t.charAt(_))?(M=o?"full":"collapsed",d+=o+m,_++):o="",h+=d,d=""}else{if(!a)return;o=a}if("full"===M||!c)return h=y+h,"link"===g&&this.inLink?null:!!n||("footnote"===g&&-1!==a.indexOf(" ")?e(h)({type:"footnote",children:this.tokenizeInline(a,e.now())}):((s=e.now()).column+=y.length,s.offset+=y.length,u={type:g+"Reference",identifier:i(o="full"===M?o:a)},"link"!==g&&"image"!==g||(u.referenceType=M),"link"===g?(l=this.enterLink(),u.children=this.tokenizeInline(a,s),l()):"image"===g&&(u.alt=this.decode.raw(this.unescape(a),s)||null),e(h)(u)))}}}},function(e,t,n){"use strict";var r=n(10),a=n(6),i=n(330);e.exports=o,o.locator=i;function o(e,t,n){var i,o,s,u,l,d,c,f=0,m=t.charAt(f);if(!("*"!==m&&"_"!==m||t.charAt(++f)!==m||(o=this.options.pedantic,l=(s=m)+s,d=t.length,f++,u="",m="",o&&a(t.charAt(f)))))for(;f<d;){if(c=m,!((m=t.charAt(f))!==s||t.charAt(f+1)!==s||o&&a(c))&&(m=t.charAt(f+2))!==s){if(!r(u))return;return!!n||((i=e.now()).column+=2,i.offset+=2,e(l+u+l)({type:"strong",children:this.tokenizeInline(u,i)}))}o||"\\"!==m||(u+=m,m=t.charAt(++f)),u+=m,f++}}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("**",t),r=e.indexOf("__",t);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},function(e,t,n){"use strict";var r=n(10),a=n(332),i=n(6),o=n(333);e.exports=s,s.locator=o;function s(e,t,n){var o,s,u,l,d,c,f,m=0,_=t.charAt(m);if(!("*"!==_&&"_"!==_||(s=this.options.pedantic,d=_,u=_,c=t.length,m++,l="",_="",s&&i(t.charAt(m)))))for(;m<c;){if(f=_,!((_=t.charAt(m))!==u||s&&i(f))){if((_=t.charAt(++m))!==u){if(!r(l)||f===u)return;if(!s&&"_"===u&&a(_)){l+=u;continue}return!!n||((o=e.now()).column++,o.offset++,e(d+l+u)({type:"emphasis",children:this.tokenizeInline(l,o)}))}l+=u}s||"\\"!==_||(l+=_,_=t.charAt(++m)),l+=_,m++}}},function(e,t,n){"use strict";e.exports=function(e){return a.test("number"==typeof e?r(e):e.charAt(0))};var r=String.fromCharCode,a=/\w/},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("*",t),r=e.indexOf("_",t);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},function(e,t,n){"use strict";var r=n(6),a=n(335);e.exports=i,i.locator=a;function i(e,t,n){var a,i,o,s="",u="",l="",d="";if(this.options.gfm&&"~"===t.charAt(0)&&"~"===t.charAt(1)&&!r(t.charAt(2)))for(a=1,i=t.length,(o=e.now()).column+=2,o.offset+=2;++a<i;){if(!("~"!==(s=t.charAt(a))||"~"!==u||l&&r(l)))return!!n||e("~~"+d+"~~")({type:"delete",children:this.tokenizeInline(d,o)});d+=u,l=u,u=s}}},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("~~",t)}},function(e,t,n){"use strict";var r=n(6),a=n(337);e.exports=i,i.locator=a;function i(e,t,n){for(var a,i,o,s,u,l,d,c,f=t.length,m=0,_="",p="";m<f&&"`"===t.charAt(m);)_+="`",m++;if(_){for(u=_,s=m,_="",c=t.charAt(m),o=0;m<f;){if(l=c,c=t.charAt(m+1),"`"===l?(o++,p+=l):(o=0,_+=l),o&&"`"!==c){if(o===s){u+=_+p,d=!0;break}_+=p,p=""}m++}if(!d){if(s%2!=0)return;_=""}if(n)return!0;for(a="",i="",f=_.length,m=-1;++m<f;)l=_.charAt(m),r(l)?i+=l:(i&&(a&&(a+=i),i=""),a+=l);return e(u)({type:"inlineCode",value:a})}}},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("`",t)}},function(e,t,n){"use strict";var r=n(339);e.exports=a,a.locator=r;function a(e,t,n){for(var r,a=t.length,i=-1,o="";++i<a;){if("\n"===(r=t.charAt(i))){if(i<2)return;return!!n||e(o+=r)({type:"break"})}if(" "!==r)return;o+=r}}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("\n",t);for(;n>t&&" "===e.charAt(n-1);)n--;return n}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o,s,u,l,d,c,f;if(n)return!0;r=this.inlineMethods,o=r.length,a=this.inlineTokenizers,i=-1,c=t.length;for(;++i<o;)"text"!==(d=r[i])&&a[d]&&((l=a[d].locator)||e.file.fail("Missing locator: `"+d+"`"),-1!==(u=l.call(this,t,1))&&u<c&&(c=u));s=t.slice(0,c),f=e.now(),this.decode(s,f,(function(t,n,r){e(r||t)({type:"text",value:t})}))}},function(e,t,n){"use strict";var r=n(342);function a(){}function i(){}i.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,i,o){if(o!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(344);e.exports=function(){return function(e){return r(e,"list",(function(e,t){var n,r,a=0;for(n=0,r=t.length;n<r;n++)"list"===t[n].type&&(a+=1);for(n=0,r=e.children.length;n<r;n++){var i=e.children[n];i.index=n,i.ordered=e.ordered}e.depth=a})),e}}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r=[];"function"==typeof t&&(n=t,t=null);function a(e){var i;return t&&e.type!==t||(i=n(e,r.concat())),e.children&&!1!==i?function(e,t){var n,i=e.length,o=-1;r.push(t);for(;++o<i;)if((n=e[o])&&!1===a(n))return!1;return r.pop(),!0}(e.children,e):i}a(e)}},function(e,t,n){"use strict";var r=n(19),a=/^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i,i=/^<(\/?)([a-z]+)\s*>$/;e.exports=function(e){var t,n;return r(e,"html",(function(e,r,o){n!==o&&(t=[],n=o);var s=function(e){var t=e.value.match(a);return!!t&&t[1]}(e);if(s)return o.children.splice(r,1,{type:"virtualHtml",tag:s,position:e.position}),!0;var u=function(e,t){var n=e.value.match(i);return!!n&&{tag:n[2],opening:!n[1],node:e}}(e);if(!u)return!0;var l=function(e,t){var n=e.length;for(;n--;)if(e[n].tag===t)return e.splice(n,1)[0];return!1}(t,u.tag);return l?o.children.splice(r,0,function(e,t,n){var r=n.children.indexOf(e.node),a=n.children.indexOf(t.node),i=n.children.splice(r,a-r+1).slice(1,-1);return{type:"virtualHtml",children:i,tag:e.tag,position:{start:e.node.position.start,end:t.node.position.end,indent:[]}}}(u,l,o)):u.opening||t.push(u),!0}),!0),e}},function(e,t,n){"use strict";var r=n(19);function a(e,t,n,r){if("remove"===r)n.children.splice(t,1);else if("unwrap"===r){var a=[t,1];e.children&&(a=a.concat(e.children)),Array.prototype.splice.apply(n.children,a)}}t.ofType=function(e,t){return function(t){return e.forEach((function(e){return r(t,e,n,!0)})),t};function n(e,n,r){r&&a(e,n,r,t)}},t.ifNotMatch=function(e,t){return function(e){return r(e,n,!0),e};function n(n,r,i){i&&!e(n,r,i)&&a(n,r,i,t)}}},function(e,t,n){"use strict";var r=n(1),a=n(7),i=n(20),o={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function s(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,l=t.renderers[e.type];void 0===e.position&&(e.position=n.node&&n.node.position||o);var d=e.position.start,c=[e.type,d.line,d.column,a].join("-");if(!i.isValidElementType(l))throw new Error("Renderer for type `".concat(e.type,"` not defined or is not renderable"));var f=u(e,c,t,l,n,a);return r.createElement(l,f,f.children||m()||void 0);function m(){return e.children&&e.children.map((function(n,r){return s(n,t,{node:e,props:f},r)}))}}function u(e,t,n,i,o,u){var d,c={key:t},f="string"==typeof i;n.sourcePos&&e.position&&(c["data-sourcepos"]=[(d=e.position).start.line,":",d.start.column,"-",d.end.line,":",d.end.column].map(String).join("")),n.rawSourcePos&&!f&&(c.sourcePosition=e.position),n.includeNodeIndex&&o.node&&o.node.children&&!f&&(c.index=o.node.children.indexOf(e),c.parentChildCount=o.node.children.length);var m=null!==e.identifier&&void 0!==e.identifier?n.definitions[e.identifier]||{}:null;switch(e.type){case"root":l(c,{className:n.className});break;case"text":c.nodeKey=t,c.children=e.value;break;case"heading":c.level=e.depth;break;case"list":c.start=e.start,c.ordered=e.ordered,c.tight=!e.loose,c.depth=e.depth;break;case"listItem":c.checked=e.checked,c.tight=!e.loose,c.ordered=e.ordered,c.index=e.index,c.children=function(e,t){if(e.loose)return e.children;if(t.node&&e.index>0&&t.node.children[e.index-1].loose)return e.children;return function(e){return e.children.reduce((function(e,t){return e.concat("paragraph"===t.type?t.children||[]:[t])}),[])}(e)}(e,o).map((function(t,r){return s(t,n,{node:e,props:c},r)}));break;case"definition":l(c,{identifier:e.identifier,title:e.title,url:e.url});break;case"code":l(c,{language:e.lang&&e.lang.split(/\s/,1)[0]});break;case"inlineCode":c.children=e.value,c.inline=!0;break;case"link":l(c,{title:e.title||void 0,target:"function"==typeof n.linkTarget?n.linkTarget(e.url,e.children,e.title):n.linkTarget,href:n.transformLinkUri?n.transformLinkUri(e.url,e.children,e.title):e.url});break;case"image":l(c,{alt:e.alt||void 0,title:e.title||void 0,src:n.transformImageUri?n.transformImageUri(e.url,e.children,e.title,e.alt):e.url});break;case"linkReference":l(c,a(m,{href:n.transformLinkUri?n.transformLinkUri(m.href):m.href}));break;case"imageReference":l(c,{src:n.transformImageUri&&m.href?n.transformImageUri(m.href,e.children,m.title,e.alt):m.href,title:m.title||void 0,alt:e.alt||void 0});break;case"table":case"tableHead":case"tableBody":c.columnAlignment=e.align;break;case"tableRow":c.isHeader="tableHead"===o.node.type,c.columnAlignment=o.props.columnAlignment;break;case"tableCell":l(c,{isHeader:o.props.isHeader,align:o.props.columnAlignment[u]});break;case"virtualHtml":c.tag=e.tag;break;case"html":c.isBlock=e.position.start.line!==e.position.end.line,c.escapeHtml=n.escapeHtml,c.skipHtml=n.skipHtml;break;case"parsedHtml":var _;e.children&&(_=e.children.map((function(t,r){return s(t,n,{node:e,props:c},r)}))),c.escapeHtml=n.escapeHtml,c.skipHtml=n.skipHtml,c.element=function(e,t){var n=e.element;if(Array.isArray(n)){var a=r.Fragment||"div";return r.createElement(a,null,n)}if(n.props.children||t){var i=r.Children.toArray(n.props.children).concat(t);return r.cloneElement(n,null,i)}return r.cloneElement(n,null)}(e,_);break;default:l(c,a(e,{type:void 0,position:void 0,children:void 0}))}return!f&&e.value&&(c.value=e.value),c}function l(e,t){for(var n in t)void 0!==t[n]&&(e[n]=t[n])}e.exports=s},function(e,t,n){"use strict";var r=n(19);function a(e){var t=e.children;e.children=[{type:"tableHead",align:e.align,children:[t[0]],position:t[0].position}],t.length>1&&e.children.push({type:"tableBody",align:e.align,children:t.slice(1),position:{start:t[1].position.start,end:t[t.length-1].position.end}})}e.exports=function(e){return r(e,"table",a),e}},function(e,t,n){"use strict";e.exports=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t.children||[]).reduce((function(t,n){return"definition"===n.type&&(t[n.identifier]={href:n.url,title:n.title}),e(n,t)}),n)}},function(e,t,n){"use strict";var r=["http","https","mailto","tel"];e.exports=function(e){var t=(e||"").trim(),n=t.charAt(0);if("#"===n||"/"===n)return t;var a=t.indexOf(":");if(-1===a)return t;for(var i=r.length,o=-1;++o<i;){var s=r[o];if(a===s.length&&t.slice(0,s.length).toLowerCase()===s)return t}return-1!==(o=t.indexOf("?"))&&a>o||-1!==(o=t.indexOf("#"))&&a>o?t:"javascript:void(0)"}},function(e,t,n){"use strict";var r=n(7),a=n(1),i=parseInt((a.version||"16").slice(0,2),10)>=16,o=a.createElement;function s(e,t){return o(e,u(t),t.children)}function u(e){return e["data-sourcepos"]?{"data-sourcepos":e["data-sourcepos"]}:{}}e.exports={break:"br",paragraph:"p",emphasis:"em",strong:"strong",thematicBreak:"hr",blockquote:"blockquote",delete:"del",link:"a",image:"img",linkReference:"a",imageReference:"img",table:s.bind(null,"table"),tableHead:s.bind(null,"thead"),tableBody:s.bind(null,"tbody"),tableRow:s.bind(null,"tr"),tableCell:function(e){var t=e.align?{textAlign:e.align}:void 0,n=u(e);return o(e.isHeader?"th":"td",t?r({style:t},n):n,e.children)},root:function(e){var t=!e.className,n=t&&a.Fragment||"div";return o(n,t?null:e,e.children)},text:function(e){return i?e.children:o("span",null,e.children)},list:function(e){var t=u(e);null!==e.start&&1!==e.start&&void 0!==e.start&&(t.start=e.start.toString());return o(e.ordered?"ol":"ul",t,e.children)},listItem:function(e){var t=null;if(null!==e.checked&&void 0!==e.checked){var n=e.checked;t=o("input",{type:"checkbox",checked:n,readOnly:!0})}return o("li",u(e),t,e.children)},definition:function(){return null},heading:function(e){return o("h".concat(e.level),u(e),e.children)},inlineCode:function(e){return o("code",u(e),e.children)},code:function(e){var t=e.language&&"language-".concat(e.language),n=o("code",t?{className:t}:null,e.value);return o("pre",u(e),n)},html:function(e){if(e.skipHtml)return null;var t=e.isBlock?"div":"span";if(e.escapeHtml){var n=a.Fragment||t;return o(n,null,e.value)}var r={dangerouslySetInnerHTML:{__html:e.value}};return o(t,r)},virtualHtml:function(e){return o(e.tag,u(e),e.children)},parsedHtml:function(e){return e["data-sourcepos"]?a.cloneElement(e.element,{"data-sourcepos":e["data-sourcepos"]}):e.element}}},function(e,t,n){"use strict";t.HtmlParser="undefined"==typeof Symbol?"__RMD_HTML_PARSER__":Symbol("__RMD_HTML_PARSER__")},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),a=n(34),i=n(354);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));function s(e,t,n,r,a,i,o,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var u=!1,l=null,d=!1,c=null,f={onError:function(e){u=!0,l=e}};function m(e,t,n,r,a,i,o,d,c){u=!1,l=null,s.apply(f,arguments)}var _=null,p=null,h=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=h(n),function(e,t,n,r,a,i,s,f,_){if(m.apply(this,arguments),u){if(!u)throw Error(o(198));var p=l;u=!1,l=null,d||(d=!0,c=p)}}(r,t,void 0,e),e.currentTarget=null}var g=null,M={};function v(){if(g)for(var e in M){var t=M[e],n=g.indexOf(e);if(!(-1<n))throw Error(o(96,e));if(!L[n]){if(!t.extractEvents)throw Error(o(97,e));for(var r in L[n]=t,n=t.eventTypes){var a=void 0,i=n[r],s=t,u=r;if(k.hasOwnProperty(u))throw Error(o(99,u));k[u]=i;var l=i.phasedRegistrationNames;if(l){for(a in l)l.hasOwnProperty(a)&&b(l[a],s,u);a=!0}else i.registrationName?(b(i.registrationName,s,u),a=!0):a=!1;if(!a)throw Error(o(98,r,e))}}}}function b(e,t,n){if(w[e])throw Error(o(100,e));w[e]=t,Y[e]=t.eventTypes[n].dependencies}var L=[],k={},w={},Y={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!M.hasOwnProperty(t)||M[t]!==r){if(M[t])throw Error(o(102,t));M[t]=r,n=!0}}n&&v()}var D=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),S=null,x=null,j=null;function O(e){if(e=p(e)){if("function"!=typeof S)throw Error(o(280));var t=e.stateNode;t&&(t=_(t),S(e.stateNode,e.type,t))}}function E(e){x?j?j.push(e):j=[e]:x=e}function H(){if(x){var e=x,t=j;if(j=x=null,O(e),t)for(e=0;e<t.length;e++)O(t[e])}}function P(e,t){return e(t)}function A(e,t,n,r,a){return e(t,n,r,a)}function C(){}var N=P,F=!1,W=!1;function z(){null===x&&null===j||(C(),H())}function I(e,t,n){if(W)return e(t,n);W=!0;try{return N(e,t,n)}finally{W=!1,z()}}var R=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,U=Object.prototype.hasOwnProperty,B={},J={};function $(e,t,n,r,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var V={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){V[e]=new $(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];V[t]=new $(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){V[e]=new $(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){V[e]=new $(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){V[e]=new $(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){V[e]=new $(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){V[e]=new $(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){V[e]=new $(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){V[e]=new $(e,5,!1,e.toLowerCase(),null,!1)}));var q=/[\-:]([a-z])/g;function G(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){V[e]=new $(e,1,!1,e.toLowerCase(),null,!1)})),V.xlinkHref=new $("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){V[e]=new $(e,1,!1,e.toLowerCase(),null,!0)}));var K=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Q(e,t,n,r){var a=V.hasOwnProperty(t)?V[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!U.call(J,e)||!U.call(B,e)&&(R.test(e)?J[e]=!0:(B[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}K.hasOwnProperty("ReactCurrentDispatcher")||(K.ReactCurrentDispatcher={current:null}),K.hasOwnProperty("ReactCurrentBatchConfig")||(K.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,X="function"==typeof Symbol&&Symbol.for,ee=X?Symbol.for("react.element"):60103,te=X?Symbol.for("react.portal"):60106,ne=X?Symbol.for("react.fragment"):60107,re=X?Symbol.for("react.strict_mode"):60108,ae=X?Symbol.for("react.profiler"):60114,ie=X?Symbol.for("react.provider"):60109,oe=X?Symbol.for("react.context"):60110,se=X?Symbol.for("react.concurrent_mode"):60111,ue=X?Symbol.for("react.forward_ref"):60112,le=X?Symbol.for("react.suspense"):60113,de=X?Symbol.for("react.suspense_list"):60120,ce=X?Symbol.for("react.memo"):60115,fe=X?Symbol.for("react.lazy"):60116,me=X?Symbol.for("react.block"):60121,_e="function"==typeof Symbol&&Symbol.iterator;function pe(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=_e&&e[_e]||e["@@iterator"])?e:null}function he(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ae:return"Profiler";case re:return"StrictMode";case le:return"Suspense";case de:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case oe:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case ce:return he(e.type);case me:return he(e.render);case fe:if(e=1===e._status?e._result:null)return he(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,i=he(e.type);n=null,r&&(n=he(r.type)),r=i,i="",a?i=" (at "+a.fileName.replace(Z,"")+":"+a.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Me(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ve(e){e._valueTracker||(e._valueTracker=function(e){var t=Me(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Me(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Le(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function we(e,t){null!=(t=t.checked)&&Q(e,"checked",t,!1)}function Ye(e,t){we(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?De(e,t.type,n):t.hasOwnProperty("defaultValue")&&De(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function De(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Se(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function xe(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Ee(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function He(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Pe="http://www.w3.org/1999/xhtml",Ae="http://www.w3.org/2000/svg";function Ce(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ne(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ce(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Fe,We=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ae||"innerHTML"in e)e.innerHTML=t;else{for((Fe=Fe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Fe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function ze(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ie(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Re={animationend:Ie("Animation","AnimationEnd"),animationiteration:Ie("Animation","AnimationIteration"),animationstart:Ie("Animation","AnimationStart"),transitionend:Ie("Transition","TransitionEnd")},Ue={},Be={};function Je(e){if(Ue[e])return Ue[e];if(!Re[e])return e;var t,n=Re[e];for(t in n)if(n.hasOwnProperty(t)&&t in Be)return Ue[e]=n[t];return e}D&&(Be=document.createElement("div").style,"AnimationEvent"in window||(delete Re.animationend.animation,delete Re.animationiteration.animation,delete Re.animationstart.animation),"TransitionEvent"in window||delete Re.transitionend.transition);var $e=Je("animationend"),Ve=Je("animationiteration"),qe=Je("animationstart"),Ge=Je("transitionend"),Ke="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Qe.get(e);return void 0===t&&(t=new Map,Qe.set(e,t)),t}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Xe(e)!==e)throw Error(o(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return tt(a),e;if(i===r)return tt(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var s=!1,u=a.child;u;){if(u===n){s=!0,n=a,r=i;break}if(u===r){s=!0,r=a,n=i;break}u=u.sibling}if(!s){for(u=i.child;u;){if(u===n){s=!0,n=i,r=a;break}if(u===r){s=!0,r=i,n=a;break}u=u.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(o(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function at(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function ot(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function st(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(at(e,ot),it)throw Error(o(95));if(d)throw e=c,d=!1,c=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!D)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var dt=[];function ct(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>dt.length&&dt.push(e)}function ft(e,t,n,r){if(dt.length){var a=dt.pop();return a.topLevelType=e,a.eventSystemFlags=r,a.nativeEvent=t,a.targetInst=n,a}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function mt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Dn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,o=e.eventSystemFlags;0===n&&(o|=64);for(var s=null,u=0;u<L.length;u++){var l=L[u];l&&(l=l.extractEvents(r,t,i,a,o))&&(s=rt(s,l))}st(s)}}function _t(e,t,n){if(!n.has(e)){switch(e){case"scroll":qt(t,"scroll",!0);break;case"focus":case"blur":qt(t,"focus",!0),qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ke.indexOf(e)&&Vt(e,t)}n.set(e,null)}}var pt,ht,yt,gt=!1,Mt=[],vt=null,bt=null,Lt=null,kt=new Map,wt=new Map,Yt=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Dt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function St(e,t,n,r,a){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:a,container:r}}function xt(e,t){switch(e){case"focus":case"blur":vt=null;break;case"dragenter":case"dragleave":bt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":wt.delete(t.pointerId)}}function jt(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e=St(t,n,r,a,i),null!==t&&(null!==(t=Sn(t))&&ht(t)),e):(e.eventSystemFlags|=r,e)}function Ot(e){var t=Dn(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Et(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Sn(t);return null!==n&&ht(n),e.blockedOn=t,!1}return!0}function Ht(e,t,n){Et(e)&&n.delete(t)}function Pt(){for(gt=!1;0<Mt.length;){var e=Mt[0];if(null!==e.blockedOn){null!==(e=Sn(e.blockedOn))&&pt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:Mt.shift()}null!==vt&&Et(vt)&&(vt=null),null!==bt&&Et(bt)&&(bt=null),null!==Lt&&Et(Lt)&&(Lt=null),kt.forEach(Ht),wt.forEach(Ht)}function At(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Pt)))}function Ct(e){function t(t){return At(t,e)}if(0<Mt.length){At(Mt[0],e);for(var n=1;n<Mt.length;n++){var r=Mt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==vt&&At(vt,e),null!==bt&&At(bt,e),null!==Lt&&At(Lt,e),kt.forEach(t),wt.forEach(t),n=0;n<Yt.length;n++)(r=Yt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Yt.length&&null===(n=Yt[0]).blockedOn;)Ot(n),null===n.blockedOn&&Yt.shift()}var Nt={},Ft=new Map,Wt=new Map,zt=["abort","abort",$e,"animationEnd",Ve,"animationIteration",qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ge,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1],i="on"+(a[0].toUpperCase()+a.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Wt.set(r,t),Ft.set(r,i),Nt[a]=i}}It("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(zt,2);for(var Rt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ut=0;Ut<Rt.length;Ut++)Wt.set(Rt[Ut],0);var Bt=i.unstable_UserBlockingPriority,Jt=i.unstable_runWithPriority,$t=!0;function Vt(e,t){qt(t,e,!1)}function qt(e,t,n){var r=Wt.get(t);switch(void 0===r?2:r){case 0:r=Gt.bind(null,t,1,e);break;case 1:r=Kt.bind(null,t,1,e);break;default:r=Qt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Gt(e,t,n,r){F||C();var a=Qt,i=F;F=!0;try{A(a,e,t,n,r)}finally{(F=i)||z()}}function Kt(e,t,n,r){Jt(Bt,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){if($t)if(0<Mt.length&&-1<Tt.indexOf(e))e=St(null,e,t,n,r),Mt.push(e);else{var a=Zt(e,t,n,r);if(null===a)xt(e,r);else if(-1<Tt.indexOf(e))e=St(a,e,t,n,r),Mt.push(e);else if(!function(e,t,n,r,a){switch(t){case"focus":return vt=jt(vt,e,t,n,r,a),!0;case"dragenter":return bt=jt(bt,e,t,n,r,a),!0;case"mouseover":return Lt=jt(Lt,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return kt.set(i,jt(kt.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,wt.set(i,jt(wt.get(i)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r)){xt(e,r),e=ft(e,r,null,t);try{I(mt,e)}finally{ct(e)}}}}function Zt(e,t,n,r){if(null!==(n=Dn(n=ut(r)))){var a=Xe(n);if(null===a)n=null;else{var i=a.tag;if(13===i){if(null!==(n=et(a)))return n;n=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;n=null}else a!==n&&(n=null)}}e=ft(e,r,n,t);try{I(mt,e)}finally{ct(e)}return null}var Xt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Xt.hasOwnProperty(e)&&Xt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(Xt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Xt[t]=Xt[e]}))}));var rn=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function an(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var sn=Pe;function un(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=Y[t];for(var r=0;r<t.length;r++)_t(t[r],e,n)}function ln(){}function dn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function cn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=cn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cn(r)}}function mn(){for(var e=window,t=dn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dn((e=t.contentWindow).document)}return t}function _n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pn=null,hn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Mn="function"==typeof setTimeout?setTimeout:void 0,vn="function"==typeof clearTimeout?clearTimeout:void 0;function bn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Ln(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),wn="__reactInternalInstance$"+kn,Yn="__reactEventHandlers$"+kn,Tn="__reactContainere$"+kn;function Dn(e){var t=e[wn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[wn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Ln(e);null!==e;){if(n=e[wn])return n;e=Ln(e)}return t}n=(e=n).parentNode}return null}function Sn(e){return!(e=e[wn]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function jn(e){return e[Yn]||null}function On(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function En(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}function Hn(e,t,n){(t=En(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Pn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=On(t);for(t=n.length;0<t--;)Hn(n[t],"captured",e);for(t=0;t<n.length;t++)Hn(n[t],"bubbled",e)}}function An(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=En(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Cn(e){e&&e.dispatchConfig.registrationName&&An(e._targetInst,null,e)}function Nn(e){at(e,Pn)}var Fn=null,Wn=null,zn=null;function In(){if(zn)return zn;var e,t,n=Wn,r=n.length,a="value"in Fn?Fn.value:Fn.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return zn=a.slice(e,1<t?1-t:void 0)}function Rn(){return!0}function Un(){return!1}function Bn(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Rn:Un,this.isPropagationStopped=Un,this}function Jn(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function $n(e){if(!(e instanceof this))throw Error(o(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Vn(e){e.eventPool=[],e.getPooled=Jn,e.release=$n}a(Bn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Rn)},persist:function(){this.isPersistent=Rn},isPersistent:Un,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Un,this._dispatchInstances=this._dispatchListeners=null}}),Bn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Bn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return a(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,Vn(n),n},Vn(Bn);var qn=Bn.extend({data:null}),Gn=Bn.extend({data:null}),Kn=[9,13,27,32],Qn=D&&"CompositionEvent"in window,Zn=null;D&&"documentMode"in document&&(Zn=document.documentMode);var Xn=D&&"TextEvent"in window&&!Zn,er=D&&(!Qn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ar(e,t){switch(e){case"keyup":return-1!==Kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var or=!1;var sr={eventTypes:nr,extractEvents:function(e,t,n,r){var a;if(Qn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else or?ar(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(or||i!==nr.compositionStart?i===nr.compositionEnd&&or&&(a=In()):(Wn="value"in(Fn=r)?Fn.value:Fn.textContent,or=!0)),i=qn.getPooled(i,t,n,r),a?i.data=a:null!==(a=ir(n))&&(i.data=a),Nn(i),a=i):a=null,(e=Xn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(or)return"compositionend"===e||!Qn&&ar(e,t)?(e=In(),zn=Wn=Fn=null,or=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Gn.getPooled(nr.beforeInput,t,n,r)).data=e,Nn(t)):t=null,null===a?t:null===t?a:[a,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function lr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var dr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function cr(e,t,n){return(e=Bn.getPooled(dr.change,e,t,n)).type="change",E(n),Nn(e),e}var fr=null,mr=null;function _r(e){st(e)}function pr(e){if(be(xn(e)))return e}function hr(e,t){if("change"===e)return t}var yr=!1;function gr(){fr&&(fr.detachEvent("onpropertychange",Mr),mr=fr=null)}function Mr(e){if("value"===e.propertyName&&pr(mr))if(e=cr(mr,e,ut(e)),F)st(e);else{F=!0;try{P(_r,e)}finally{F=!1,z()}}}function vr(e,t,n){"focus"===e?(gr(),mr=n,(fr=t).attachEvent("onpropertychange",Mr)):"blur"===e&&gr()}function br(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return pr(mr)}function Lr(e,t){if("click"===e)return pr(t)}function kr(e,t){if("input"===e||"change"===e)return pr(t)}D&&(yr=lt("input")&&(!document.documentMode||9<document.documentMode));var wr={eventTypes:dr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var a=t?xn(t):window,i=a.nodeName&&a.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===a.type)var o=hr;else if(lr(a))if(yr)o=kr;else{o=br;var s=vr}else(i=a.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(o=Lr);if(o&&(o=o(e,t)))return cr(o,n,r);s&&s(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&De(a,"number",a.value)}},Yr=Bn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Dr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Sr(){return Dr}var xr=0,jr=0,Or=!1,Er=!1,Hr=Yr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Sr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=xr;return xr=e.screenX,Or?"mousemove"===e.type?e.screenX-t:0:(Or=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=jr;return jr=e.screenY,Er?"mousemove"===e.type?e.screenY-t:0:(Er=!0,0)}}),Pr=Hr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ar={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Cr={eventTypes:Ar,extractEvents:function(e,t,n,r,a){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&0==(32&a)&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o)?(o=t,null!==(t=(t=n.relatedTarget||n.toElement)?Dn(t):null)&&(t!==Xe(t)||5!==t.tag&&6!==t.tag)&&(t=null)):o=null;if(o===t)return null;if("mouseout"===e||"mouseover"===e)var s=Hr,u=Ar.mouseLeave,l=Ar.mouseEnter,d="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=Pr,u=Ar.pointerLeave,l=Ar.pointerEnter,d="pointer");if(e=null==o?i:xn(o),i=null==t?i:xn(t),(u=s.getPooled(u,o,n,r)).type=d+"leave",u.target=e,u.relatedTarget=i,(n=s.getPooled(l,t,n,r)).type=d+"enter",n.target=i,n.relatedTarget=e,d=t,(r=o)&&d)e:{for(l=d,o=0,e=s=r;e;e=On(e))o++;for(e=0,t=l;t;t=On(t))e++;for(;0<o-e;)s=On(s),o--;for(;0<e-o;)l=On(l),e--;for(;o--;){if(s===l||s===l.alternate)break e;s=On(s),l=On(l)}s=null}else s=null;for(l=s,s=[];r&&r!==l&&(null===(o=r.alternate)||o!==l);)s.push(r),r=On(r);for(r=[];d&&d!==l&&(null===(o=d.alternate)||o!==l);)r.push(d),d=On(d);for(d=0;d<s.length;d++)An(s[d],"bubbled",u);for(d=r.length;0<d--;)An(r[d],"captured",n);return 0==(64&a)?[u]:[u,n]}};var Nr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Fr=Object.prototype.hasOwnProperty;function Wr(e,t){if(Nr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Fr.call(t,n[r])||!Nr(e[n[r]],t[n[r]]))return!1;return!0}var zr=D&&"documentMode"in document&&11>=document.documentMode,Ir={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Rr=null,Ur=null,Br=null,Jr=!1;function $r(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Jr||null==Rr||Rr!==dn(n)?null:("selectionStart"in(n=Rr)&&_n(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Br&&Wr(Br,n)?null:(Br=n,(e=Bn.getPooled(Ir.select,Ur,e,t)).type="select",e.target=Rr,Nn(e),e))}var Vr={eventTypes:Ir,extractEvents:function(e,t,n,r,a,i){if(!(i=!(a=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{a=Ze(a),i=Y.onSelect;for(var o=0;o<i.length;o++)if(!a.has(i[o])){a=!1;break e}a=!0}i=!a}if(i)return null;switch(a=t?xn(t):window,e){case"focus":(lr(a)||"true"===a.contentEditable)&&(Rr=a,Ur=t,Br=null);break;case"blur":Br=Ur=Rr=null;break;case"mousedown":Jr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Jr=!1,$r(n,r);case"selectionchange":if(zr)break;case"keydown":case"keyup":return $r(n,r)}return null}},qr=Bn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Gr=Bn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Kr=Yr.extend({relatedTarget:null});function Qr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ea=Yr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Qr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Xr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Sr,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ta=Hr.extend({dataTransfer:null}),na=Yr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Sr}),ra=Bn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),aa=Hr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ia={eventTypes:Nt,extractEvents:function(e,t,n,r){var a=Ft.get(e);if(!a)return null;switch(e){case"keypress":if(0===Qr(n))return null;case"keydown":case"keyup":e=ea;break;case"blur":case"focus":e=Kr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Hr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ta;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=na;break;case $e:case Ve:case qe:e=qr;break;case Ge:e=ra;break;case"scroll":e=Yr;break;case"wheel":e=aa;break;case"copy":case"cut":case"paste":e=Gr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Pr;break;default:e=Bn}return Nn(t=e.getPooled(a,t,n,r)),t}};if(g)throw Error(o(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),v(),_=jn,p=Sn,h=xn,T({SimpleEventPlugin:ia,EnterLeaveEventPlugin:Cr,ChangeEventPlugin:wr,SelectEventPlugin:Vr,BeforeInputEventPlugin:sr});var oa=[],sa=-1;function ua(e){0>sa||(e.current=oa[sa],oa[sa]=null,sa--)}function la(e,t){sa++,oa[sa]=e.current,e.current=t}var da={},ca={current:da},fa={current:!1},ma=da;function _a(e,t){var n=e.type.contextTypes;if(!n)return da;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function pa(e){return null!=(e=e.childContextTypes)}function ha(){ua(fa),ua(ca)}function ya(e,t,n){if(ca.current!==da)throw Error(o(168));la(ca,t),la(fa,n)}function ga(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(o(108,he(t)||"Unknown",i));return a({},n,{},r)}function Ma(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||da,ma=ca.current,la(ca,e),la(fa,fa.current),!0}function va(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=ga(e,t,ma),r.__reactInternalMemoizedMergedChildContext=e,ua(fa),ua(ca),la(ca,e)):ua(fa),la(fa,n)}var ba=i.unstable_runWithPriority,La=i.unstable_scheduleCallback,ka=i.unstable_cancelCallback,wa=i.unstable_requestPaint,Ya=i.unstable_now,Ta=i.unstable_getCurrentPriorityLevel,Da=i.unstable_ImmediatePriority,Sa=i.unstable_UserBlockingPriority,xa=i.unstable_NormalPriority,ja=i.unstable_LowPriority,Oa=i.unstable_IdlePriority,Ea={},Ha=i.unstable_shouldYield,Pa=void 0!==wa?wa:function(){},Aa=null,Ca=null,Na=!1,Fa=Ya(),Wa=1e4>Fa?Ya:function(){return Ya()-Fa};function za(){switch(Ta()){case Da:return 99;case Sa:return 98;case xa:return 97;case ja:return 96;case Oa:return 95;default:throw Error(o(332))}}function Ia(e){switch(e){case 99:return Da;case 98:return Sa;case 97:return xa;case 96:return ja;case 95:return Oa;default:throw Error(o(332))}}function Ra(e,t){return e=Ia(e),ba(e,t)}function Ua(e,t,n){return e=Ia(e),La(e,t,n)}function Ba(e){return null===Aa?(Aa=[e],Ca=La(Da,$a)):Aa.push(e),Ea}function Ja(){if(null!==Ca){var e=Ca;Ca=null,ka(e)}$a()}function $a(){if(!Na&&null!==Aa){Na=!0;var e=0;try{var t=Aa;Ra(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Aa=null}catch(t){throw null!==Aa&&(Aa=Aa.slice(e+1)),La(Da,Ja),t}finally{Na=!1}}}function Va(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function qa(e,t){if(e&&e.defaultProps)for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ga={current:null},Ka=null,Qa=null,Za=null;function Xa(){Za=Qa=Ka=null}function ei(e){var t=Ga.current;ua(Ga),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ni(e,t){Ka=e,Za=Qa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(jo=!0),e.firstContext=null)}function ri(e,t){if(Za!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Qa){if(null===Ka)throw Error(o(308));Qa=t,Ka.dependencies={expirationTime:0,firstContext:t,responders:null}}else Qa=Qa.next=t;return e._currentValue}var ai=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function oi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function si(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function li(e,t){var n=e.alternate;null!==n&&oi(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function di(e,t,n,r){var i=e.updateQueue;ai=!1;var o=i.baseQueue,s=i.shared.pending;if(null!==s){if(null!==o){var u=o.next;o.next=s.next,s.next=u}o=s,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=s))}if(null!==o){u=o.next;var l=i.baseState,d=0,c=null,f=null,m=null;if(null!==u)for(var _=u;;){if((s=_.expirationTime)<r){var p={expirationTime:_.expirationTime,suspenseConfig:_.suspenseConfig,tag:_.tag,payload:_.payload,callback:_.callback,next:null};null===m?(f=m=p,c=l):m=m.next=p,s>d&&(d=s)}else{null!==m&&(m=m.next={expirationTime:1073741823,suspenseConfig:_.suspenseConfig,tag:_.tag,payload:_.payload,callback:_.callback,next:null}),iu(s,_.suspenseConfig);e:{var h=e,y=_;switch(s=t,p=n,y.tag){case 1:if("function"==typeof(h=y.payload)){l=h.call(p,l,s);break e}l=h;break e;case 3:h.effectTag=-4097&h.effectTag|64;case 0:if(null==(s="function"==typeof(h=y.payload)?h.call(p,l,s):h))break e;l=a({},l,s);break e;case 2:ai=!0}}null!==_.callback&&(e.effectTag|=32,null===(s=i.effects)?i.effects=[_]:s.push(_))}if(null===(_=_.next)||_===u){if(null===(s=i.shared.pending))break;_=o.next=s.next,s.next=u,i.baseQueue=o=s,i.shared.pending=null}}null===m?c=l:m.next=f,i.baseState=c,i.baseQueue=m,ou(d),e.expirationTime=d,e.memoizedState=l}}function ci(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=a,a=n,"function"!=typeof r)throw Error(o(191,r));r.call(a)}}}var fi=K.ReactCurrentBatchConfig,mi=(new r.Component).refs;function _i(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var pi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=$s(),a=fi.suspense;(a=si(r=Vs(r,e,a),a)).payload=t,null!=n&&(a.callback=n),ui(e,a),qs(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=$s(),a=fi.suspense;(a=si(r=Vs(r,e,a),a)).tag=1,a.payload=t,null!=n&&(a.callback=n),ui(e,a),qs(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=$s(),r=fi.suspense;(r=si(n=Vs(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ui(e,r),qs(e,n)}};function hi(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!t.prototype||!t.prototype.isPureReactComponent||(!Wr(n,r)||!Wr(a,i))}function yi(e,t,n){var r=!1,a=da,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(a=pa(t)?ma:ca.current,i=(r=null!=(r=t.contextTypes))?_a(e,a):da),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function Mi(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=mi,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=ri(i):(i=pa(t)?ma:ca.current,a.context=_a(e,i)),di(e,n,a,r),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(_i(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&pi.enqueueReplaceState(a,a.state,null),di(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}var vi=Array.isArray;function bi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Li(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ki(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=xu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=bi(e,t,n),r.return=e,r):((r=Du(n.type,n.key,n.props,null,e.mode,r)).ref=bi(e,t,n),r.return=e,r)}function d(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ju(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function c(e,t,n,r,i){return null===t||7!==t.tag?((t=Su(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=xu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Du(t.type,t.key,t.props,null,e.mode,n)).ref=bi(e,null,t),n.return=e,n;case te:return(t=ju(t,e.mode,n)).return=e,t}if(vi(t)||pe(t))return(t=Su(t,e.mode,n,null)).return=e,t;Li(e,t)}return null}function m(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===a?n.type===ne?c(e,t,n.props.children,r,a):l(e,t,n,r):null;case te:return n.key===a?d(e,t,n,r):null}if(vi(n)||pe(n))return null!==a?null:c(e,t,n,r,null);Li(e,n)}return null}function _(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?c(t,e,r.props.children,a,r.key):l(t,e,r,a);case te:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(vi(r)||pe(r))return c(t,e=e.get(n)||null,r,a,null);Li(t,r)}return null}function p(a,o,s,u){for(var l=null,d=null,c=o,p=o=0,h=null;null!==c&&p<s.length;p++){c.index>p?(h=c,c=null):h=c.sibling;var y=m(a,c,s[p],u);if(null===y){null===c&&(c=h);break}e&&c&&null===y.alternate&&t(a,c),o=i(y,o,p),null===d?l=y:d.sibling=y,d=y,c=h}if(p===s.length)return n(a,c),l;if(null===c){for(;p<s.length;p++)null!==(c=f(a,s[p],u))&&(o=i(c,o,p),null===d?l=c:d.sibling=c,d=c);return l}for(c=r(a,c);p<s.length;p++)null!==(h=_(c,a,p,s[p],u))&&(e&&null!==h.alternate&&c.delete(null===h.key?p:h.key),o=i(h,o,p),null===d?l=h:d.sibling=h,d=h);return e&&c.forEach((function(e){return t(a,e)})),l}function h(a,s,u,l){var d=pe(u);if("function"!=typeof d)throw Error(o(150));if(null==(u=d.call(u)))throw Error(o(151));for(var c=d=null,p=s,h=s=0,y=null,g=u.next();null!==p&&!g.done;h++,g=u.next()){p.index>h?(y=p,p=null):y=p.sibling;var M=m(a,p,g.value,l);if(null===M){null===p&&(p=y);break}e&&p&&null===M.alternate&&t(a,p),s=i(M,s,h),null===c?d=M:c.sibling=M,c=M,p=y}if(g.done)return n(a,p),d;if(null===p){for(;!g.done;h++,g=u.next())null!==(g=f(a,g.value,l))&&(s=i(g,s,h),null===c?d=g:c.sibling=g,c=g);return d}for(p=r(a,p);!g.done;h++,g=u.next())null!==(g=_(p,a,h,g.value,l))&&(e&&null!==g.alternate&&p.delete(null===g.key?h:g.key),s=i(g,s,h),null===c?d=g:c.sibling=g,c=g);return e&&p.forEach((function(e){return t(a,e)})),d}return function(e,r,i,u){var l="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;l&&(i=i.props.children);var d="object"==typeof i&&null!==i;if(d)switch(i.$$typeof){case ee:e:{for(d=i.key,l=r;null!==l;){if(l.key===d){switch(l.tag){case 7:if(i.type===ne){n(e,l.sibling),(r=a(l,i.props.children)).return=e,e=r;break e}break;default:if(l.elementType===i.type){n(e,l.sibling),(r=a(l,i.props)).ref=bi(e,l,i),r.return=e,e=r;break e}}n(e,l);break}t(e,l),l=l.sibling}i.type===ne?((r=Su(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Du(i.type,i.key,i.props,null,e.mode,u)).ref=bi(e,r,i),u.return=e,e=u)}return s(e);case te:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ju(i,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i)).return=e,e=r):(n(e,r),(r=xu(i,e.mode,u)).return=e,e=r),s(e);if(vi(i))return p(e,r,i,u);if(pe(i))return h(e,r,i,u);if(d&&Li(e,i),void 0===i&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(o(152,e.displayName||e.name||"Component"))}return n(e,r)}}var wi=ki(!0),Yi=ki(!1),Ti={},Di={current:Ti},Si={current:Ti},xi={current:Ti};function ji(e){if(e===Ti)throw Error(o(174));return e}function Oi(e,t){switch(la(xi,t),la(Si,e),la(Di,Ti),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ne(null,"");break;default:t=Ne(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ua(Di),la(Di,t)}function Ei(){ua(Di),ua(Si),ua(xi)}function Hi(e){ji(xi.current);var t=ji(Di.current),n=Ne(t,e.type);t!==n&&(la(Si,e),la(Di,n))}function Pi(e){Si.current===e&&(ua(Di),ua(Si))}var Ai={current:0};function Ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ni(e,t){return{responder:e,props:t}}var Fi=K.ReactCurrentDispatcher,Wi=K.ReactCurrentBatchConfig,zi=0,Ii=null,Ri=null,Ui=null,Bi=!1;function Ji(){throw Error(o(321))}function $i(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Nr(e[n],t[n]))return!1;return!0}function Vi(e,t,n,r,a,i){if(zi=i,Ii=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?yo:go,e=n(r,a),t.expirationTime===zi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(o(301));i+=1,Ui=Ri=null,t.updateQueue=null,Fi.current=Mo,e=n(r,a)}while(t.expirationTime===zi)}if(Fi.current=ho,t=null!==Ri&&null!==Ri.next,zi=0,Ui=Ri=Ii=null,Bi=!1,t)throw Error(o(300));return e}function qi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ui?Ii.memoizedState=Ui=e:Ui=Ui.next=e,Ui}function Gi(){if(null===Ri){var e=Ii.alternate;e=null!==e?e.memoizedState:null}else e=Ri.next;var t=null===Ui?Ii.memoizedState:Ui.next;if(null!==t)Ui=t,Ri=e;else{if(null===e)throw Error(o(310));e={memoizedState:(Ri=e).memoizedState,baseState:Ri.baseState,baseQueue:Ri.baseQueue,queue:Ri.queue,next:null},null===Ui?Ii.memoizedState=Ui=e:Ui=Ui.next=e}return Ui}function Ki(e,t){return"function"==typeof t?t(e):t}function Qi(e){var t=Gi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=Ri,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var s=a.next;a.next=i.next,i.next=s}r.baseQueue=a=i,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=s=i=null,l=a;do{var d=l.expirationTime;if(d<zi){var c={expirationTime:l.expirationTime,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(s=u=c,i=r):u=u.next=c,d>Ii.expirationTime&&(Ii.expirationTime=d,ou(d))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),iu(d,l.suspenseConfig),r=l.eagerReducer===e?l.eagerState:e(r,l.action);l=l.next}while(null!==l&&l!==a);null===u?i=r:u.next=s,Nr(r,t.memoizedState)||(jo=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zi(e){var t=Gi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var s=a=a.next;do{i=e(i,s.action),s=s.next}while(s!==a);Nr(i,t.memoizedState)||(jo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Xi(e){var t=qi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ki,lastRenderedState:e}).dispatch=po.bind(null,Ii,e),[t.memoizedState,e]}function eo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ii.updateQueue)?(t={lastEffect:null},Ii.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function to(){return Gi().memoizedState}function no(e,t,n,r){var a=qi();Ii.effectTag|=e,a.memoizedState=eo(1|t,n,void 0,void 0===r?null:r)}function ro(e,t,n,r){var a=Gi();r=void 0===r?null:r;var i=void 0;if(null!==Ri){var o=Ri.memoizedState;if(i=o.destroy,null!==r&&$i(r,o.deps))return void eo(t,n,i,r)}Ii.effectTag|=e,a.memoizedState=eo(1|t,n,i,r)}function ao(e,t){return no(516,4,e,t)}function io(e,t){return ro(516,4,e,t)}function oo(e,t){return ro(4,2,e,t)}function so(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function uo(e,t,n){return n=null!=n?n.concat([e]):null,ro(4,2,so.bind(null,t,e),n)}function lo(){}function co(e,t){return qi().memoizedState=[e,void 0===t?null:t],e}function fo(e,t){var n=Gi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function mo(e,t){var n=Gi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function _o(e,t,n){var r=za();Ra(98>r?98:r,(function(){e(!0)})),Ra(97<r?97:r,(function(){var r=Wi.suspense;Wi.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wi.suspense=r}}))}function po(e,t,n){var r=$s(),a=fi.suspense;a={expirationTime:r=Vs(r,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ii||null!==i&&i===Ii)Bi=!0,a.expirationTime=zi,Ii.expirationTime=zi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var o=t.lastRenderedState,s=i(o,n);if(a.eagerReducer=i,a.eagerState=s,Nr(s,o))return}catch(e){}qs(e,r)}}var ho={readContext:ri,useCallback:Ji,useContext:Ji,useEffect:Ji,useImperativeHandle:Ji,useLayoutEffect:Ji,useMemo:Ji,useReducer:Ji,useRef:Ji,useState:Ji,useDebugValue:Ji,useResponder:Ji,useDeferredValue:Ji,useTransition:Ji},yo={readContext:ri,useCallback:co,useContext:ri,useEffect:ao,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,no(4,2,so.bind(null,t,e),n)},useLayoutEffect:function(e,t){return no(4,2,e,t)},useMemo:function(e,t){var n=qi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=qi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=po.bind(null,Ii,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},qi().memoizedState=e},useState:Xi,useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Xi(e),r=n[0],a=n[1];return ao((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xi(!1),n=t[0];return t=t[1],[co(_o.bind(null,t,e),[t,e]),n]}},go={readContext:ri,useCallback:fo,useContext:ri,useEffect:io,useImperativeHandle:uo,useLayoutEffect:oo,useMemo:mo,useReducer:Qi,useRef:to,useState:function(){return Qi(Ki)},useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Qi(Ki),r=n[0],a=n[1];return io((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Qi(Ki),n=t[0];return t=t[1],[fo(_o.bind(null,t,e),[t,e]),n]}},Mo={readContext:ri,useCallback:fo,useContext:ri,useEffect:io,useImperativeHandle:uo,useLayoutEffect:oo,useMemo:mo,useReducer:Zi,useRef:to,useState:function(){return Zi(Ki)},useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Zi(Ki),r=n[0],a=n[1];return io((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Ki),n=t[0];return t=t[1],[fo(_o.bind(null,t,e),[t,e]),n]}},vo=null,bo=null,Lo=!1;function ko(e,t){var n=wu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function wo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Yo(e){if(Lo){var t=bo;if(t){var n=t;if(!wo(e,t)){if(!(t=bn(n.nextSibling))||!wo(e,t))return e.effectTag=-1025&e.effectTag|2,Lo=!1,void(vo=e);ko(vo,n)}vo=e,bo=bn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Lo=!1,vo=e}}function To(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;vo=e}function Do(e){if(e!==vo)return!1;if(!Lo)return To(e),Lo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=bo;t;)ko(e,t),t=bn(t.nextSibling);if(To(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){bo=bn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}bo=null}}else bo=vo?bn(e.stateNode.nextSibling):null;return!0}function So(){bo=vo=null,Lo=!1}var xo=K.ReactCurrentOwner,jo=!1;function Oo(e,t,n,r){t.child=null===e?Yi(t,null,n,r):wi(t,e.child,n,r)}function Eo(e,t,n,r,a){n=n.render;var i=t.ref;return ni(t,a),r=Vi(e,t,n,r,i,a),null===e||jo?(t.effectTag|=1,Oo(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),qo(e,t,a))}function Ho(e,t,n,r,a,i){if(null===e){var o=n.type;return"function"!=typeof o||Yu(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Du(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Po(e,t,o,r,a,i))}return o=e.child,a<i&&(a=o.memoizedProps,(n=null!==(n=n.compare)?n:Wr)(a,r)&&e.ref===t.ref)?qo(e,t,i):(t.effectTag|=1,(e=Tu(o,r)).ref=t.ref,e.return=t,t.child=e)}function Po(e,t,n,r,a,i){return null!==e&&Wr(e.memoizedProps,r)&&e.ref===t.ref&&(jo=!1,a<i)?(t.expirationTime=e.expirationTime,qo(e,t,i)):Co(e,t,n,r,i)}function Ao(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Co(e,t,n,r,a){var i=pa(n)?ma:ca.current;return i=_a(t,i),ni(t,a),n=Vi(e,t,n,r,i,a),null===e||jo?(t.effectTag|=1,Oo(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),qo(e,t,a))}function No(e,t,n,r,a){if(pa(n)){var i=!0;Ma(t)}else i=!1;if(ni(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yi(t,n,r),Mi(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var u=o.context,l=n.contextType;"object"==typeof l&&null!==l?l=ri(l):l=_a(t,l=pa(n)?ma:ca.current);var d=n.getDerivedStateFromProps,c="function"==typeof d||"function"==typeof o.getSnapshotBeforeUpdate;c||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||u!==l)&&gi(t,o,r,l),ai=!1;var f=t.memoizedState;o.state=f,di(t,r,o,a),u=t.memoizedState,s!==r||f!==u||fa.current||ai?("function"==typeof d&&(_i(t,n,d,r),u=t.memoizedState),(s=ai||hi(t,n,s,r,f,u,l))?(c||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=l,r=s):("function"==typeof o.componentDidMount&&(t.effectTag|=4),r=!1)}else o=t.stateNode,oi(e,t),s=t.memoizedProps,o.props=t.type===t.elementType?s:qa(t.type,s),u=o.context,"object"==typeof(l=n.contextType)&&null!==l?l=ri(l):l=_a(t,l=pa(n)?ma:ca.current),(c="function"==typeof(d=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||u!==l)&&gi(t,o,r,l),ai=!1,u=t.memoizedState,o.state=u,di(t,r,o,a),f=t.memoizedState,s!==r||u!==f||fa.current||ai?("function"==typeof d&&(_i(t,n,d,r),f=t.memoizedState),(d=ai||hi(t,n,s,r,u,f,l))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,f,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,f,l)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),o.props=r,o.state=f,o.context=l,r=d):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Fo(e,t,n,r,i,a)}function Fo(e,t,n,r,a,i){Ao(e,t);var o=0!=(64&t.effectTag);if(!r&&!o)return a&&va(t,n,!1),qo(e,t,i);r=t.stateNode,xo.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&o?(t.child=wi(t,e.child,null,i),t.child=wi(t,null,s,i)):Oo(e,t,s,i),t.memoizedState=r.state,a&&va(t,n,!0),t.child}function Wo(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),Oi(e,t.containerInfo)}var zo,Io,Ro,Uo={dehydrated:null,retryTime:0};function Bo(e,t,n){var r,a=t.mode,i=t.pendingProps,o=Ai.current,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&o)&&(null===e||null!==e.memoizedState)),r?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),la(Ai,1&o),null===e){if(void 0!==i.fallback&&Yo(t),s){if(s=i.fallback,(i=Su(null,a,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Su(s,a,n,null)).return=t,i.sibling=n,t.memoizedState=Uo,t.child=i,n}return a=i.children,t.memoizedState=null,t.child=Yi(t,null,a,n)}if(null!==e.memoizedState){if(a=(e=e.child).sibling,s){if(i=i.fallback,(n=Tu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(a=Tu(a,i)).return=t,n.sibling=a,n.childExpirationTime=0,t.memoizedState=Uo,t.child=n,a}return n=wi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=i.fallback,(i=Su(null,a,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Su(s,a,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Uo,t.child=i,n}return t.memoizedState=null,t.child=wi(t,e,i.children,n)}function Jo(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ti(e.return,t)}function $o(e,t,n,r,a,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:a,lastEffect:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=a,o.lastEffect=i)}function Vo(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Oo(e,t,r.children,n),0!=(2&(r=Ai.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Jo(e,n);else if(19===e.tag)Jo(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(la(Ai,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ci(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),$o(t,!1,a,n,i,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ci(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}$o(t,!0,n,null,i,t.lastEffect);break;case"together":$o(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function qo(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ou(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Go(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ko(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return pa(t.type)&&ha(),null;case 3:return Ei(),ua(fa),ua(ca),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Do(t)||(t.effectTag|=4),null;case 5:Pi(t),n=ji(xi.current);var i=t.type;if(null!==e&&null!=t.stateNode)Io(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=ji(Di.current),Do(t)){r=t.stateNode,i=t.type;var s=t.memoizedProps;switch(r[wn]=t,r[Yn]=s,i){case"iframe":case"object":case"embed":Vt("load",r);break;case"video":case"audio":for(e=0;e<Ke.length;e++)Vt(Ke[e],r);break;case"source":Vt("error",r);break;case"img":case"image":case"link":Vt("error",r),Vt("load",r);break;case"form":Vt("reset",r),Vt("submit",r);break;case"details":Vt("toggle",r);break;case"input":ke(r,s),Vt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Vt("invalid",r),un(n,"onChange");break;case"textarea":Oe(r,s),Vt("invalid",r),un(n,"onChange")}for(var u in an(i,s),e=null,s)if(s.hasOwnProperty(u)){var l=s[u];"children"===u?"string"==typeof l?r.textContent!==l&&(e=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(e=["children",""+l]):w.hasOwnProperty(u)&&null!=l&&un(n,u)}switch(i){case"input":ve(r),Te(r,s,!0);break;case"textarea":ve(r),He(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===sn&&(e=Ce(i)),e===sn?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[wn]=t,e[Yn]=r,zo(e,t),t.stateNode=e,u=on(i,r),i){case"iframe":case"object":case"embed":Vt("load",e),l=r;break;case"video":case"audio":for(l=0;l<Ke.length;l++)Vt(Ke[l],e);l=r;break;case"source":Vt("error",e),l=r;break;case"img":case"image":case"link":Vt("error",e),Vt("load",e),l=r;break;case"form":Vt("reset",e),Vt("submit",e),l=r;break;case"details":Vt("toggle",e),l=r;break;case"input":ke(e,r),l=Le(e,r),Vt("invalid",e),un(n,"onChange");break;case"option":l=Se(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=a({},r,{value:void 0}),Vt("invalid",e),un(n,"onChange");break;case"textarea":Oe(e,r),l=je(e,r),Vt("invalid",e),un(n,"onChange");break;default:l=r}an(i,l);var d=l;for(s in d)if(d.hasOwnProperty(s)){var c=d[s];"style"===s?nn(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&We(e,c):"children"===s?"string"==typeof c?("textarea"!==i||""!==c)&&ze(e,c):"number"==typeof c&&ze(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(w.hasOwnProperty(s)?null!=c&&un(n,s):null!=c&&Q(e,s,c,u))}switch(i){case"input":ve(e),Te(e,r,!1);break;case"textarea":ve(e),He(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?xe(e,!!r.multiple,n,!1):null!=r.defaultValue&&xe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=ln)}yn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ro(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=ji(xi.current),ji(Di.current),Do(t)?(n=t.stateNode,r=t.memoizedProps,n[wn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[wn]=t,t.stateNode=n)}return null;case 13:return ua(Ai),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Do(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ai.current)?Ds===vs&&(Ds=bs):(Ds!==vs&&Ds!==bs||(Ds=Ls),0!==Es&&null!==ws&&(Hu(ws,Ts),Pu(ws,Es)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ei(),null;case 10:return ei(t),null;case 17:return pa(t.type)&&ha(),null;case 19:if(ua(Ai),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(s=r.rendering)){if(i)Go(r,!1);else if(Ds!==vs||null!==e&&0!=(64&e.effectTag))for(s=t.child;null!==s;){if(null!==(e=Ci(s))){for(t.effectTag|=64,Go(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)s=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=s,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,s=e.dependencies,i.dependencies=null===s?null:{expirationTime:s.expirationTime,firstContext:s.firstContext,responders:s.responders}),r=r.sibling;return la(Ai,1&Ai.current|2),t.child}s=s.sibling}}else{if(!i)if(null!==(e=Ci(s))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Go(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wa()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Go(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Wa()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wa(),n.sibling=null,t=Ai.current,la(Ai,i?1&t|2:1&t),n):null}throw Error(o(156,t.tag))}function Qo(e){switch(e.tag){case 1:pa(e.type)&&ha();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ei(),ua(fa),ua(ca),0!=(64&(t=e.effectTag)))throw Error(o(285));return e.effectTag=-4097&t|64,e;case 5:return Pi(e),null;case 13:return ua(Ai),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ua(Ai),null;case 4:return Ei(),null;case 10:return ei(e),null;default:return null}}function Zo(e,t){return{value:e,source:t,stack:ye(t)}}zo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Io=function(e,t,n,r,i){var o=e.memoizedProps;if(o!==r){var s,u,l=t.stateNode;switch(ji(Di.current),e=null,n){case"input":o=Le(l,o),r=Le(l,r),e=[];break;case"option":o=Se(l,o),r=Se(l,r),e=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),e=[];break;case"textarea":o=je(l,o),r=je(l,r),e=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(l.onclick=ln)}for(s in an(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s)for(u in l=o[s])l.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(w.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in r){var d=r[s];if(l=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&d!==l&&(null!=d||null!=l))if("style"===s)if(l){for(u in l)!l.hasOwnProperty(u)||d&&d.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in d)d.hasOwnProperty(u)&&l[u]!==d[u]&&(n||(n={}),n[u]=d[u])}else n||(e||(e=[]),e.push(s,n)),n=d;else"dangerouslySetInnerHTML"===s?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(e=e||[]).push(s,d)):"children"===s?l===d||"string"!=typeof d&&"number"!=typeof d||(e=e||[]).push(s,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(w.hasOwnProperty(s)?(null!=d&&un(i,s),e||l===d||(e=[])):(e=e||[]).push(s,d))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Ro=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Xo="function"==typeof WeakSet?WeakSet:Set;function es(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&he(n.type),t=t.value,null!==e&&1===e.tag&&he(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ts(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gu(e,t)}else t.current=null}function ns(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qa(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(o(163))}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function as(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function is(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void as(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:qa(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&ci(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ci(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ct(n)))));case 19:case 17:case 20:case 21:return}throw Error(o(163))}function os(e,t,n){switch("function"==typeof Lu&&Lu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ra(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var a=t;try{n()}catch(e){gu(a,e)}}e=e.next}while(e!==r)}))}break;case 1:ts(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gu(e,t)}}(t,n);break;case 5:ts(t);break;case 4:ds(e,t,n)}}function ss(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ss(t)}function us(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:{for(var t=e.return;null!==t;){if(us(t)){var n=t;break e}t=t.return}throw Error(o(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.effectTag&&(ze(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||us(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var a=t.tag,i=5===a||6===a;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=ln));else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var a=t.tag,i=5===a||6===a;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function ds(e,t,n){for(var r,a,i=t,s=!1;;){if(!s){s=i.return;e:for(;;){if(null===s)throw Error(o(160));switch(r=s.stateNode,s.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}s=s.return}s=!0}if(5===i.tag||6===i.tag){e:for(var u=e,l=i,d=n,c=l;;)if(os(u,c,d),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}a?(u=r,l=i.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,a=!0,i.child.return=i,i=i.child;continue}}else if(os(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(s=!1)}i.sibling.return=i.return,i=i.sibling}}function cs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rs(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Yn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&we(n,r),on(e,a),t=on(e,r),a=0;a<i.length;a+=2){var s=i[a],u=i[a+1];"style"===s?nn(n,u):"dangerouslySetInnerHTML"===s?We(n,u):"children"===s?ze(n,u):Q(n,s,u,t)}switch(e){case"input":Ye(n,r);break;case"textarea":Ee(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?xe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?xe(n,!!r.multiple,r.defaultValue,!0):xe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Ct(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Ps=Wa()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,a=null!=(a=e.memoizedProps.style)&&a.hasOwnProperty("display")?a.display:null,i.style.display=tn("display",a));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fs(t);case 19:return void fs(t);case 17:return}throw Error(o(163))}function fs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xo),t.forEach((function(t){var r=vu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var ms="function"==typeof WeakMap?WeakMap:Map;function _s(e,t,n){(n=si(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Cs||(Cs=!0,Ns=r),es(e,t)},n}function ps(e,t,n){(n=si(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return es(e,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Fs?Fs=new Set([this]):Fs.add(this),es(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var hs,ys=Math.ceil,gs=K.ReactCurrentDispatcher,Ms=K.ReactCurrentOwner,vs=0,bs=3,Ls=4,ks=0,ws=null,Ys=null,Ts=0,Ds=vs,Ss=null,xs=1073741823,js=1073741823,Os=null,Es=0,Hs=!1,Ps=0,As=null,Cs=!1,Ns=null,Fs=null,Ws=!1,zs=null,Is=90,Rs=null,Us=0,Bs=null,Js=0;function $s(){return 0!=(48&ks)?1073741821-(Wa()/10|0):0!==Js?Js:Js=1073741821-(Wa()/10|0)}function Vs(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=za();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&ks))return Ts;if(null!==n)e=Va(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Va(e,150,100);break;case 97:case 96:e=Va(e,5e3,250);break;case 95:e=2;break;default:throw Error(o(326))}return null!==ws&&e===Ts&&--e,e}function qs(e,t){if(50<Us)throw Us=0,Bs=null,Error(o(185));if(null!==(e=Gs(e,t))){var n=za();1073741823===t?0!=(8&ks)&&0==(48&ks)?Xs(e):(Qs(e),0===ks&&Ja()):Qs(e),0==(4&ks)||98!==n&&99!==n||(null===Rs?Rs=new Map([[e,t]]):(void 0===(n=Rs.get(e))||n>t)&&Rs.set(e,t))}}function Gs(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return null!==a&&(ws===a&&(ou(t),Ds===Ls&&Hu(a,Ts)),Pu(a,t)),a}function Ks(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Eu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Qs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ba(Xs.bind(null,e));else{var t=Ks(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=$s();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var a=e.callbackPriority;if(e.callbackExpirationTime===t&&a>=r)return;n!==Ea&&ka(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ba(Xs.bind(null,e)):Ua(r,Zs.bind(null,e),{timeout:10*(1073741821-t)-Wa()}),e.callbackNode=t}}}function Zs(e,t){if(Js=0,t)return Au(e,t=$s()),Qs(e),null;var n=Ks(e);if(0!==n){if(t=e.callbackNode,0!=(48&ks))throw Error(o(327));if(pu(),e===ws&&n===Ts||nu(e,n),null!==Ys){var r=ks;ks|=16;for(var a=au();;)try{uu();break}catch(t){ru(e,t)}if(Xa(),ks=r,gs.current=a,1===Ds)throw t=Ss,nu(e,n),Hu(e,n),Qs(e),t;if(null===Ys)switch(a=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ds,ws=null,r){case vs:case 1:throw Error(o(345));case 2:Au(e,2<n?2:n);break;case bs:if(Hu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(a)),1073741823===xs&&10<(a=Ps+500-Wa())){if(Hs){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Ks(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=Mn(fu.bind(null,e),a);break}fu(e);break;case Ls:if(Hu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(a)),Hs&&(0===(a=e.lastPingedTime)||a>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(a=Ks(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==js?r=10*(1073741821-js)-Wa():1073741823===xs?r=0:(r=10*(1073741821-xs)-5e3,0>(r=(a=Wa())-r)&&(r=0),(n=10*(1073741821-n)-a)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ys(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=Mn(fu.bind(null,e),r);break}fu(e);break;case 5:if(1073741823!==xs&&null!==Os){i=xs;var s=Os;if(0>=(r=0|s.busyMinDurationMs)?r=0:(a=0|s.busyDelayMs,r=(i=Wa()-(10*(1073741821-i)-(0|s.timeoutMs||5e3)))<=a?0:a+r-i),10<r){Hu(e,n),e.timeoutHandle=Mn(fu.bind(null,e),r);break}}fu(e);break;default:throw Error(o(329))}if(Qs(e),e.callbackNode===t)return Zs.bind(null,e)}}return null}function Xs(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&ks))throw Error(o(327));if(pu(),e===ws&&t===Ts||nu(e,t),null!==Ys){var n=ks;ks|=16;for(var r=au();;)try{su();break}catch(t){ru(e,t)}if(Xa(),ks=n,gs.current=r,1===Ds)throw n=Ss,nu(e,t),Hu(e,t),Qs(e),n;if(null!==Ys)throw Error(o(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,ws=null,fu(e),Qs(e)}return null}function eu(e,t){var n=ks;ks|=1;try{return e(t)}finally{0===(ks=n)&&Ja()}}function tu(e,t){var n=ks;ks&=-2,ks|=8;try{return e(t)}finally{0===(ks=n)&&Ja()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,vn(n)),null!==Ys)for(n=Ys.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ha();break;case 3:Ei(),ua(fa),ua(ca);break;case 5:Pi(r);break;case 4:Ei();break;case 13:case 19:ua(Ai);break;case 10:ei(r)}n=n.return}ws=e,Ys=Tu(e.current,null),Ts=t,Ds=vs,Ss=null,js=xs=1073741823,Os=null,Es=0,Hs=!1}function ru(e,t){for(;;){try{if(Xa(),Fi.current=ho,Bi)for(var n=Ii.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(zi=0,Ui=Ri=Ii=null,Bi=!1,null===Ys||null===Ys.return)return Ds=1,Ss=t,Ys=null;e:{var a=e,i=Ys.return,o=Ys,s=t;if(t=Ts,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&o.mode)){var l=o.alternate;l?(o.updateQueue=l.updateQueue,o.memoizedState=l.memoizedState,o.expirationTime=l.expirationTime):(o.updateQueue=null,o.memoizedState=null)}var d=0!=(1&Ai.current),c=i;do{var f;if(f=13===c.tag){var m=c.memoizedState;if(null!==m)f=null!==m.dehydrated;else{var _=c.memoizedProps;f=void 0!==_.fallback&&(!0!==_.unstable_avoidThisFallback||!d)}}if(f){var p=c.updateQueue;if(null===p){var h=new Set;h.add(u),c.updateQueue=h}else p.add(u);if(0==(2&c.mode)){if(c.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var y=si(1073741823,null);y.tag=2,ui(o,y)}o.expirationTime=1073741823;break e}s=void 0,o=t;var g=a.pingCache;if(null===g?(g=a.pingCache=new ms,s=new Set,g.set(u,s)):void 0===(s=g.get(u))&&(s=new Set,g.set(u,s)),!s.has(o)){s.add(o);var M=Mu.bind(null,a,u,o);u.then(M,M)}c.effectTag|=4096,c.expirationTime=t;break e}c=c.return}while(null!==c);s=Error((he(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(o))}5!==Ds&&(Ds=2),s=Zo(s,o),c=i;do{switch(c.tag){case 3:u=s,c.effectTag|=4096,c.expirationTime=t,li(c,_s(c,u,t));break e;case 1:u=s;var v=c.type,b=c.stateNode;if(0==(64&c.effectTag)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Fs||!Fs.has(b)))){c.effectTag|=4096,c.expirationTime=t,li(c,ps(c,u,t));break e}}c=c.return}while(null!==c)}Ys=du(Ys)}catch(e){t=e;continue}break}}function au(){var e=gs.current;return gs.current=ho,null===e?ho:e}function iu(e,t){e<xs&&2<e&&(xs=e),null!==t&&e<js&&2<e&&(js=e,Os=t)}function ou(e){e>Es&&(Es=e)}function su(){for(;null!==Ys;)Ys=lu(Ys)}function uu(){for(;null!==Ys&&!Ha();)Ys=lu(Ys)}function lu(e){var t=hs(e.alternate,e,Ts);return e.memoizedProps=e.pendingProps,null===t&&(t=du(e)),Ms.current=null,t}function du(e){Ys=e;do{var t=Ys.alternate;if(e=Ys.return,0==(2048&Ys.effectTag)){if(t=Ko(t,Ys,Ts),1===Ts||1!==Ys.childExpirationTime){for(var n=0,r=Ys.child;null!==r;){var a=r.expirationTime,i=r.childExpirationTime;a>n&&(n=a),i>n&&(n=i),r=r.sibling}Ys.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ys.firstEffect),null!==Ys.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ys.firstEffect),e.lastEffect=Ys.lastEffect),1<Ys.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ys:e.firstEffect=Ys,e.lastEffect=Ys))}else{if(null!==(t=Qo(Ys)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ys.sibling))return t;Ys=e}while(null!==Ys);return Ds===vs&&(Ds=5),null}function cu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fu(e){var t=za();return Ra(99,mu.bind(null,e,t)),null}function mu(e,t){do{pu()}while(null!==zs);if(0!=(48&ks))throw Error(o(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var a=cu(n);if(e.firstPendingTime=a,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===ws&&(Ys=ws=null,Ts=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){var i=ks;ks|=32,Ms.current=null,pn=$t;var s=mn();if(_n(s)){if("selectionStart"in s)var u={start:s.selectionStart,end:s.selectionEnd};else e:{var l=(u=(u=s.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(l&&0!==l.rangeCount){u=l.anchorNode;var d=l.anchorOffset,c=l.focusNode;l=l.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,m=-1,_=-1,p=0,h=0,y=s,g=null;t:for(;;){for(var M;y!==u||0!==d&&3!==y.nodeType||(m=f+d),y!==c||0!==l&&3!==y.nodeType||(_=f+l),3===y.nodeType&&(f+=y.nodeValue.length),null!==(M=y.firstChild);)g=y,y=M;for(;;){if(y===s)break t;if(g===u&&++p===d&&(m=f),g===c&&++h===l&&(_=f),null!==(M=y.nextSibling))break;g=(y=g).parentNode}y=M}u=-1===m||-1===_?null:{start:m,end:_}}else u=null}u=u||{start:0,end:0}}else u=null;hn={activeElementDetached:null,focusedElem:s,selectionRange:u},$t=!1,As=a;do{try{_u()}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);As=a;do{try{for(s=e,u=t;null!==As;){var v=As.effectTag;if(16&v&&ze(As.stateNode,""),128&v){var b=As.alternate;if(null!==b){var L=b.ref;null!==L&&("function"==typeof L?L(null):L.current=null)}}switch(1038&v){case 2:ls(As),As.effectTag&=-3;break;case 6:ls(As),As.effectTag&=-3,cs(As.alternate,As);break;case 1024:As.effectTag&=-1025;break;case 1028:As.effectTag&=-1025,cs(As.alternate,As);break;case 4:cs(As.alternate,As);break;case 8:ds(s,d=As,u),ss(d)}As=As.nextEffect}}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);if(L=hn,b=mn(),v=L.focusedElem,u=L.selectionRange,b!==v&&v&&v.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(v.ownerDocument.documentElement,v)){null!==u&&_n(v)&&(b=u.start,void 0===(L=u.end)&&(L=b),"selectionStart"in v?(v.selectionStart=b,v.selectionEnd=Math.min(L,v.value.length)):(L=(b=v.ownerDocument||document)&&b.defaultView||window).getSelection&&(L=L.getSelection(),d=v.textContent.length,s=Math.min(u.start,d),u=void 0===u.end?s:Math.min(u.end,d),!L.extend&&s>u&&(d=u,u=s,s=d),d=fn(v,s),c=fn(v,u),d&&c&&(1!==L.rangeCount||L.anchorNode!==d.node||L.anchorOffset!==d.offset||L.focusNode!==c.node||L.focusOffset!==c.offset)&&((b=b.createRange()).setStart(d.node,d.offset),L.removeAllRanges(),s>u?(L.addRange(b),L.extend(c.node,c.offset)):(b.setEnd(c.node,c.offset),L.addRange(b))))),b=[];for(L=v;L=L.parentNode;)1===L.nodeType&&b.push({element:L,left:L.scrollLeft,top:L.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<b.length;v++)(L=b[v]).element.scrollLeft=L.left,L.element.scrollTop=L.top}$t=!!pn,hn=pn=null,e.current=n,As=a;do{try{for(v=e;null!==As;){var k=As.effectTag;if(36&k&&is(v,As.alternate,As),128&k){b=void 0;var w=As.ref;if(null!==w){var Y=As.stateNode;switch(As.tag){case 5:b=Y;break;default:b=Y}"function"==typeof w?w(b):w.current=b}}As=As.nextEffect}}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);As=null,Pa(),ks=i}else e.current=n;if(Ws)Ws=!1,zs=e,Is=t;else for(As=a;null!==As;)t=As.nextEffect,As.nextEffect=null,As=t;if(0===(t=e.firstPendingTime)&&(Fs=null),1073741823===t?e===Bs?Us++:(Us=0,Bs=e):Us=0,"function"==typeof bu&&bu(n.stateNode,r),Qs(e),Cs)throw Cs=!1,e=Ns,Ns=null,e;return 0!=(8&ks)||Ja(),null}function _u(){for(;null!==As;){var e=As.effectTag;0!=(256&e)&&ns(As.alternate,As),0==(512&e)||Ws||(Ws=!0,Ua(97,(function(){return pu(),null}))),As=As.nextEffect}}function pu(){if(90!==Is){var e=97<Is?97:Is;return Is=90,Ra(e,hu)}}function hu(){if(null===zs)return!1;var e=zs;if(zs=null,0!=(48&ks))throw Error(o(331));var t=ks;for(ks|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rs(5,n),as(5,n)}}catch(t){if(null===e)throw Error(o(330));gu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return ks=t,Ja(),!0}function yu(e,t,n){ui(e,t=_s(e,t=Zo(n,t),1073741823)),null!==(e=Gs(e,1073741823))&&Qs(e)}function gu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Fs||!Fs.has(r))){ui(n,e=ps(n,e=Zo(t,e),1073741823)),null!==(n=Gs(n,1073741823))&&Qs(n);break}}n=n.return}}function Mu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ws===e&&Ts===n?Ds===Ls||Ds===bs&&1073741823===xs&&Wa()-Ps<500?nu(e,Ts):Hs=!0:Eu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Qs(e)))}function vu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Vs(t=$s(),e,null)),null!==(e=Gs(e,t))&&Qs(e)}hs=function(e,t,n){var r=t.expirationTime;if(null!==e){var a=t.pendingProps;if(e.memoizedProps!==a||fa.current)jo=!0;else{if(r<n){switch(jo=!1,t.tag){case 3:Wo(t),So();break;case 5:if(Hi(t),4&t.mode&&1!==n&&a.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:pa(t.type)&&Ma(t);break;case 4:Oi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,a=t.type._context,la(Ga,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Bo(e,t,n):(la(Ai,1&Ai.current),null!==(t=qo(e,t,n))?t.sibling:null);la(Ai,1&Ai.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Vo(e,t,n);t.effectTag|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null),la(Ai,Ai.current),!r)return null}return qo(e,t,n)}jo=!1}}else jo=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,a=_a(t,ca.current),ni(t,n),a=Vi(null,t,r,e,a,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,pa(r)){var i=!0;Ma(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ii(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&_i(t,r,s,e),a.updater=pi,t.stateNode=a,a._reactInternalFiber=t,Mi(t,r,e,n),t=Fo(null,t,r,!0,i,n)}else t.tag=0,Oo(null,t,a,n),t=t.child;return t;case 16:e:{if(a=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(a),1!==a._status)throw a._result;switch(a=a._result,t.type=a,i=t.tag=function(e){if("function"==typeof e)return Yu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===ce)return 14}return 2}(a),e=qa(a,e),i){case 0:t=Co(null,t,a,e,n);break e;case 1:t=No(null,t,a,e,n);break e;case 11:t=Eo(null,t,a,e,n);break e;case 14:t=Ho(null,t,a,qa(a.type,e),r,n);break e}throw Error(o(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Co(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 1:return r=t.type,a=t.pendingProps,No(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 3:if(Wo(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,oi(e,t),di(t,r,null,n),(r=t.memoizedState.element)===a)So(),t=qo(e,t,n);else{if((a=t.stateNode.hydrate)&&(bo=bn(t.stateNode.containerInfo.firstChild),vo=t,a=Lo=!0),a)for(n=Yi(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Oo(e,t,r,n),So();t=t.child}return t;case 5:return Hi(t),null===e&&Yo(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,s=a.children,gn(r,a)?s=null:null!==i&&gn(r,i)&&(t.effectTag|=16),Ao(e,t),4&t.mode&&1!==n&&a.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Oo(e,t,s,n),t=t.child),t;case 6:return null===e&&Yo(t),null;case 13:return Bo(e,t,n);case 4:return Oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wi(t,null,r,n):Oo(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Eo(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 7:return Oo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Oo(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,s=t.memoizedProps,i=a.value;var u=t.type._context;if(la(Ga,u._currentValue),u._currentValue=i,null!==s)if(u=s.value,0===(i=Nr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(s.children===a.children&&!fa.current){t=qo(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var d=l.firstContext;null!==d;){if(d.context===r&&0!=(d.observedBits&i)){1===u.tag&&((d=si(n,null)).tag=2,ui(u,d)),u.expirationTime<n&&(u.expirationTime=n),null!==(d=u.alternate)&&d.expirationTime<n&&(d.expirationTime=n),ti(u.return,n),l.expirationTime<n&&(l.expirationTime=n);break}d=d.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Oo(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(a=ri(a,i.unstable_observedBits)),t.effectTag|=1,Oo(e,t,r,n),t.child;case 14:return i=qa(a=t.type,t.pendingProps),Ho(e,t,a,i=qa(a.type,i),r,n);case 15:return Po(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:qa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,pa(r)?(e=!0,Ma(t)):e=!1,ni(t,n),yi(t,r,a),Mi(t,r,a,n),Fo(null,t,r,!0,e,n);case 19:return Vo(e,t,n)}throw Error(o(156,t.tag))};var bu=null,Lu=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function wu(e,t,n,r){return new ku(e,t,n,r)}function Yu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=wu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Du(e,t,n,r,a,i){var s=2;if(r=e,"function"==typeof e)Yu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case ne:return Su(n.children,a,i,t);case se:s=8,a|=7;break;case re:s=8,a|=1;break;case ae:return(e=wu(12,n,t,8|a)).elementType=ae,e.type=ae,e.expirationTime=i,e;case le:return(e=wu(13,n,t,a)).type=le,e.elementType=le,e.expirationTime=i,e;case de:return(e=wu(19,n,t,a)).elementType=de,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:s=10;break e;case oe:s=9;break e;case ue:s=11;break e;case ce:s=14;break e;case fe:s=16,r=null;break e;case me:s=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=wu(s,n,t,a)).elementType=e,t.type=r,t.expirationTime=i,t}function Su(e,t,n,r){return(e=wu(7,e,r,t)).expirationTime=n,e}function xu(e,t,n){return(e=wu(6,e,null,t)).expirationTime=n,e}function ju(e,t,n){return(t=wu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ou(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Eu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Hu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Pu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Au(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Cu(e,t,n,r){var a=t.current,i=$s(),s=fi.suspense;i=Vs(i,a,s);e:if(n){t:{if(Xe(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(o(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(pa(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(o(171))}if(1===n.tag){var l=n.type;if(pa(l)){n=ga(n,l,u);break e}}n=u}else n=da;return null===t.context?t.context=n:t.pendingContext=n,(t=si(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(a,t),qs(a,i),i}function Nu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Wu(e,t){Fu(e,t),(e=e.alternate)&&Fu(e,t)}function zu(e,t,n){var r=new Ou(e,t,n=null!=n&&!0===n.hydrate),a=wu(3,null,null,2===t?7:1===t?3:0);r.current=a,a.stateNode=r,ii(a),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Tt.forEach((function(e){_t(e,t,n)})),Dt.forEach((function(e){_t(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Iu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ru(e,t,n,r,a){var i=n._reactRootContainer;if(i){var o=i._internalRoot;if("function"==typeof a){var s=a;a=function(){var e=Nu(o);s.call(e)}}Cu(t,o,e,a)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new zu(e,0,t?{hydrate:!0}:void 0)}(n,r),o=i._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Nu(o);u.call(e)}}tu((function(){Cu(t,o,e,a)}))}return Nu(o)}function Uu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Iu(t))throw Error(o(200));return Uu(e,t,null,n)}zu.prototype.render=function(e){Cu(e,this._internalRoot,null,null)},zu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Cu(null,e,null,(function(){t[Tn]=null}))},pt=function(e){if(13===e.tag){var t=Va($s(),150,100);qs(e,t),Wu(e,t)}},ht=function(e){13===e.tag&&(qs(e,3),Wu(e,3))},yt=function(e){if(13===e.tag){var t=$s();qs(e,t=Vs(t,e,null)),Wu(e,t)}},S=function(e,t,n){switch(t){case"input":if(Ye(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=jn(r);if(!a)throw Error(o(90));be(r),Ye(r,a)}}}break;case"textarea":Ee(e,n);break;case"select":null!=(t=n.value)&&xe(e,!!n.multiple,t,!1)}},P=eu,A=function(e,t,n,r,a){var i=ks;ks|=4;try{return Ra(98,e.bind(null,t,n,r,a))}finally{0===(ks=i)&&Ja()}},C=function(){0==(49&ks)&&(function(){if(null!==Rs){var e=Rs;Rs=null,e.forEach((function(e,t){Au(t,e),Qs(t)})),Ja()}}(),pu())},N=function(e,t){var n=ks;ks|=2;try{return e(t)}finally{0===(ks=n)&&Ja()}};var Ju,$u,Vu={Events:[Sn,xn,jn,T,k,Nn,function(e){at(e,Cn)},E,H,Qt,st,pu,{current:!1}]};$u=(Ju={findFiberByHostInstance:Dn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);bu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Lu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(a({},Ju,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:K.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return $u?$u(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Vu,t.createPortal=Bu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&ks))throw Error(o(187));var n=ks;ks|=1;try{return Ra(99,e.bind(null,t))}finally{ks=n,Ja()}},t.hydrate=function(e,t,n){if(!Iu(t))throw Error(o(200));return Ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!Iu(t))throw Error(o(200));return Ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Iu(e))throw Error(o(40));return!!e._reactRootContainer&&(tu((function(){Ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Bu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Iu(n))throw Error(o(200));if(null==e||void 0===e._reactInternalFiber)throw Error(o(38));return Ru(e,t,n,!1,r)},t.version="16.14.0"},function(e,t,n){"use strict";e.exports=n(355)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,a,i,o,s;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}},c=Date.now();t.unstable_now=function(){return Date.now()-c},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(d,0))},a=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},o=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,m=window.Date,_=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var y=m.now();t.unstable_now=function(){return m.now()-y}}var g=!1,M=null,v=-1,b=5,L=0;o=function(){return t.unstable_now()>=L},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,w=k.port2;k.port1.onmessage=function(){if(null!==M){var e=t.unstable_now();L=e+b;try{M(!0,e)?w.postMessage(null):(g=!1,M=null)}catch(e){throw w.postMessage(null),e}}else g=!1},r=function(e){M=e,g||(g=!0,w.postMessage(null))},a=function(e,n){v=_((function(){e(t.unstable_now())}),n)},i=function(){p(v),v=-1}}function Y(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<S(a,t)))break e;e[r]=t,e[n]=a,n=r}}function T(e){return void 0===(e=e[0])?null:e}function D(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var i=2*(r+1)-1,o=e[i],s=i+1,u=e[s];if(void 0!==o&&0>S(o,n))void 0!==u&&0>S(u,o)?(e[r]=u,e[s]=n,r=s):(e[r]=o,e[i]=n,r=i);else{if(!(void 0!==u&&0>S(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var x=[],j=[],O=1,E=null,H=3,P=!1,A=!1,C=!1;function N(e){for(var t=T(j);null!==t;){if(null===t.callback)D(j);else{if(!(t.startTime<=e))break;D(j),t.sortIndex=t.expirationTime,Y(x,t)}t=T(j)}}function F(e){if(C=!1,N(e),!A)if(null!==T(x))A=!0,r(W);else{var t=T(j);null!==t&&a(F,t.startTime-e)}}function W(e,n){A=!1,C&&(C=!1,i()),P=!0;var r=H;try{for(N(n),E=T(x);null!==E&&(!(E.expirationTime>n)||e&&!o());){var s=E.callback;if(null!==s){E.callback=null,H=E.priorityLevel;var u=s(E.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?E.callback=u:E===T(x)&&D(x),N(n)}else D(x);E=T(x)}if(null!==E)var l=!0;else{var d=T(j);null!==d&&a(F,d.startTime-n),l=!1}return l}finally{E=null,H=r,P=!1}}function z(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var I=s;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||P||(A=!0,r(W))},t.unstable_getCurrentPriorityLevel=function(){return H},t.unstable_getFirstCallbackNode=function(){return T(x)},t.unstable_next=function(e){switch(H){case 1:case 2:case 3:var t=3;break;default:t=H}var n=H;H=t;try{return e()}finally{H=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=I,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=H;H=e;try{return t()}finally{H=n}},t.unstable_scheduleCallback=function(e,n,o){var s=t.unstable_now();if("object"==typeof o&&null!==o){var u=o.delay;u="number"==typeof u&&0<u?s+u:s,o="number"==typeof o.timeout?o.timeout:z(e)}else o=z(e),u=s;return e={id:O++,callback:n,priorityLevel:e,startTime:u,expirationTime:o=u+o,sortIndex:-1},u>s?(e.sortIndex=u,Y(j,e),null===T(x)&&e===T(j)&&(C?i():C=!0,a(F,u-s))):(e.sortIndex=o,Y(x,e),A||P||(A=!0,r(W))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();N(e);var n=T(x);return n!==E&&null!==E&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<E.expirationTime||o()},t.unstable_wrapCallback=function(e){var t=H;return function(){var n=H;H=t;try{return e.apply(this,arguments)}finally{H=n}}}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"wrapSpace",(function(){return z}));var a={};n.r(a),n.d(a,"wrapEntry",(function(){return ee})),n.d(a,"wrapEntryCollection",(function(){return te}));var i={};n.r(i),n.d(i,"wrapAsset",(function(){return ne})),n.d(i,"wrapAssetCollection",(function(){return re}));var o={};n.r(o),n.d(o,"wrapContentType",(function(){return ae})),n.d(o,"wrapContentTypeCollection",(function(){return ie}));var s={};n.r(s),n.d(s,"wrapLocale",(function(){return oe})),n.d(s,"wrapLocaleCollection",(function(){return se}));var u=n(1),l=n.n(u),d=n(199),c=n.n(d),f=n(200),m=n.n(f),_=n(201),p=n.n(_),h=n(30),y=n.n(h),g=n(202),M=n.n(g),v=function(){return l.a.createElement("div",null,"Ayyy! I'm workin hea!")},b="#022b3a",L="#ffffff",k="#e1e5f2",w="#bfdbf7",Y="#bfdbf7",T="#dddddd",D=n(4),S=D.b.div.withConfig({displayName:"nav__Nav",componentId:"sc-19hgxg7-0"})(["@import url('https://fonts.googleapis.com/css?family=Teko&display=swap');@import url('https://fonts.googleapis.com/css?family=Azeret+Mono&display=swap');font-family:'Teko',sans-serif;font-size:35px;color:",";#nav-container{a,strong{margin-right:20px;}a{text-decoration:none;}.selected{color:",";border-bottom:2px solid ","}margin-bottom:50px;#main-nav{width:720px;margin:auto;}#left-nav{#phil-avery{margin-bottom:10px;}#below-phil{font-size:12px;line-height:20px;}font-family:'Azeret Mono';font-size:17px;line-height:25px;float:left;border-right:1px solid ",";margin:17px 15px 0 10px;}}"],w,w,w,T),x=function(e){return l.a.createElement(S,null,l.a.createElement("div",{id:"nav-container"},l.a.createElement("div",{id:"left-nav"},l.a.createElement("div",{id:"phil-avery"},"Phil Avery"),l.a.createElement("div",{id:"below-phil"},l.a.createElement("a",{href:"https://www.linkedin.com/in/phillipavery/"},"LinkedIn"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://github.com/pill"},"Github"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://www.instagram.com/classique_phil/"},"@classique_phil"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://www.instagram.com/pill_moto/"},"@pill_moto"))),l.a.createElement("div",{id:"main-nav"},l.a.createElement("a",{class:[""].includes(e.section)?"selected":"",href:"/"},"home"),l.a.createElement("a",{class:["blog","tags","post"].includes(e.section)?"selected":"",href:"/blog"},"blog"))))},j=n(11),O=n.n(j),E=n(12),H=n.n(E),P=n(8),A=n.n(P),C=function(e){var t=e.totalPages,n=e.p,r=e.rpp,a=n-5>0?n-5:1,i=n+5<=t?n+5:t;return console.log(t,a,i),l.a.createElement("div",{id:"paginator"},function(e,t,n){if(void 0===t&&(t=e,e=0),void 0===n&&(n=1),n>0&&e>=t||n<0&&e<=t)return[];for(var r=[],a=e;n>0?a<t:a>t;a+=n)r.push(a);return r}(a,i+1,1).map((function(e){return l.a.createElement("a",{href:"/blog?p=".concat(e,"&rpp=").concat(r),key:e},e)})))},N=n(205),F=n.n(N),W=n(2);function z(e){return Object(W.c)(Object(W.e)(e))}var I=n(3),R=n.n(I),U=n(208),B=n.n(U);function J(e){return Object.defineProperty(e,"stringifySafe",{enumerable:!1,configurable:!1,writable:!1,value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return B()(this,e,t,(function(e,t){return{sys:{type:"Link",linkType:"Entry",id:t.sys.id,circular:!0}}}))}})}var $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},V=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{!r&&s.return&&s.return()}finally{if(a)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function q(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var G={},K=function(e,t){var n=t.entryId,r=t.linkType,a=t.spaceId,i=t.environmentId;return a&&i?e.get(a+"!"+i+"!"+r+"!"+n):e.get(r+"!"+n)},Q=function(e,t){var n=t.sys,r=n.type,a=n.linkType;if("ResourceLink"===r){if(!a.startsWith("Contentful:"))return t;var i=function(e){var t=/.*:spaces\/([^/]+)(?:\/environments\/([^/]+))?\/entries\/([^/]+)$/;if(t.test(e)){var n=e.match(t),r=V(n,4),a=(r[0],r[1]),i=r[2];return{spaceId:a,environmentId:void 0===i?"master":i,entryId:r[3]}}}(t.sys.urn),o=i.spaceId,s=i.environmentId,u=i.entryId,l=a.split(":")[1];return K(e,{linkType:l,entryId:u,spaceId:o,environmentId:s})||G}var d=t.sys.id;return K(e,{linkType:a,entryId:d})||G},Z=function e(t,n,r,a){if(n(t))return r(t);if(t&&"object"===(void 0===t?"undefined":$(t))){for(var i in t)t.hasOwnProperty(i)&&(t[i]=e(t[i],n,r,a));a&&(t=function(e){if(Array.isArray(e))return e.filter((function(e){return e!==G}));for(var t in e)e[t]===G&&delete e[t];return e}(t))}return t},X=function(e,t){if(t=t||{},!e.items)return[];var n=R()(e),r=Object.keys(n.includes||{}).reduce((function(t,n){return[].concat(q(t),q(e.includes[n]))}),[]),a=[].concat(q(n.items),q(r)).filter((function(e){return Boolean(e.sys)})),i=new Map(a.reduce((function(e,t){var n,r=(n=t.sys,n.space&&n.environment?[n.type+"!"+n.id,n.space.sys.id+"!"+n.environment.sys.id+"!"+n.type+"!"+n.id]:[n.type+"!"+n.id]).map((function(e){return[e,t]}));return e.push.apply(e,q(r)),e}),[]));return a.forEach((function(e){var n=function(e,t){return Array.isArray(t)?Object.keys(e).filter((function(e){return-1!==t.indexOf(e)})).reduce((function(t,n){return t[n]=e[n],t}),{}):e}(e,t.itemEntryPoints);Object.assign(e,Z(n,(function(e){return(t=e)&&t.sys&&"Link"===t.sys.type||function(e){return e&&e.sys&&"ResourceLink"===e.sys.type}(e);var t}),(function(e){return function(e,t,n){var r=Q(e,t);return r===G?n?r:t:r}(i,e,t.removeUnresolved)}),t.removeUnresolved))})),n.items};function ee(e){return Object(W.c)(Object(W.e)(R()(e)))}function te(e,t){var n=t.resolveLinks,r=t.removeUnresolved,a=J(Object(W.e)(R()(e)));return n&&(a.items=X(a,{removeUnresolved:r,itemEntryPoints:["fields"]})),Object(W.c)(a)}function ne(e){return Object(W.c)(Object(W.e)(R()(e)))}function re(e){return Object(W.c)(Object(W.e)(R()(e)))}function ae(e){return Object(W.c)(Object(W.e)(R()(e)))}function ie(e){return Object(W.c)(Object(W.e)(R()(e)))}function oe(e){return Object(W.c)(Object(W.e)(R()(e)))}function se(e){return Object(W.c)(Object(W.e)(R()(e)))}var ue={space:r,entry:a,asset:i,contentType:o,locale:s};function le(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function de(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?le(Object(n),!0).forEach((function(t){ce(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):le(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ce(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fe(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!t||!t.initial&&!t.nextSyncToken&&!t.nextPageToken)throw new Error("Please provide one of `initial`, `nextSyncToken` or `nextPageToken` parameters for syncing");if(t&&t.content_type&&!t.type)t.type="Entry";else if(t&&t.content_type&&t.type&&"Entry"!==t.type)throw new Error("When using the `content_type` filter your `type` parameter cannot be different from `Entry`.");var r={resolveLinks:!0,removeUnresolved:!1,paginate:!0},a=de(de({},r),n),i=a.resolveLinks,o=a.removeUnresolved,s=a.paginate,u={paginate:s};return _e(e,[],t,u).then((function(e){i&&(e.items=X(e,{removeUnresolved:o,itemEntryPoints:["fields"]}));var t=me(e.items);return e.nextSyncToken&&(t.nextSyncToken=e.nextSyncToken),e.nextPageToken&&(t.nextPageToken=e.nextPageToken),Object(W.c)(J(Object(W.e)(t)))}),(function(e){throw e}))}function me(e){var t=function(e){return function(t,n){return n.sys.type===e&&t.push(Object(W.e)(n)),t}};return{entries:e.reduce(t("Entry"),[]),assets:e.reduce(t("Asset"),[]),deletedEntries:e.reduce(t("DeletedEntry"),[]),deletedAssets:e.reduce(t("DeletedAsset"),[])}}function _e(e,t,n,r){var a=r.paginate;return n.nextSyncToken&&(n.sync_token=n.nextSyncToken,delete n.nextSyncToken),n.nextPageToken&&(n.sync_token=n.nextPageToken,delete n.nextPageToken),n.sync_token&&(delete n.initial,delete n.type,delete n.content_type,delete n.limit),e.get("sync",Object(W.b)({query:n})).then((function(r){var i=r.data||{};return t=t.concat(i.items||[]),i.nextPageUrl?a?(delete n.initial,n.sync_token=pe(i.nextPageUrl),_e(e,t,n,{paginate:a})):{items:t,nextPageToken:pe(i.nextPageUrl)}:i.nextSyncUrl?{items:t,nextSyncToken:pe(i.nextSyncUrl)}:{items:[]}}))}function pe(e){var t=e.split("?");return t.length>0?t[1].replace("sync_token=",""):""}function he(e){return function(e){if(Array.isArray(e))return ye(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return ye(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ye(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ye(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ge(e){if(e.select){var t=e.select.split(","),n=new Set(t);n.has("sys")||(n.add("sys.id"),n.add("sys.type"),e.select=he(n).join(","))}}function Me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ve(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Me(Object(n),!0).forEach((function(t){be(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Me(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Le(e){var t=e.http,n=e.getGlobalOptions,r=ue.space.wrapSpace,a=ue.contentType,i=a.wrapContentType,o=a.wrapContentTypeCollection,s=ue.entry,u=s.wrapEntry,l=s.wrapEntryCollection,d=ue.asset,c=d.wrapAsset,f=d.wrapAssetCollection,m=ue.locale.wrapLocaleCollection,_=function(e){var t=new Error("The resource could not be found.");return t.sys={type:"Error",id:"NotFound"},t.details={type:"Entry",id:e,environment:n().environment,space:n().space},t};function p(e){if(e.data)throw e.data;if(e.response&&e.response.data)throw e.response.data;throw e}function h(e){e.defaults.baseURL=n().environmentBaseUrl}return{getSpace:function(){return function(e){e.defaults.baseURL=n().spaceBaseUrl}(t),t.get("").then((function(e){return r(e.data)}),p)},getContentType:function(e){return h(t),t.get("content_types/"+e).then((function(e){return i(e.data)}),p)},getContentTypes:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),t.get("content_types",Object(W.b)({query:e})).then((function(e){return o(e.data)}),p)},getEntry:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e?this.getEntries(ve({"sys.id":e},t)).then((function(t){if(t.items.length>0)return u(t.items[0]);throw _(e)}),p):Promise.reject(_(e))},getEntries:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h(t);var r=n(e),a=r.resolveLinks,i=r.removeUnresolved;return ge(e),t.get("entries",Object(W.b)({query:e})).then((function(e){return l(e.data,{resolveLinks:a,removeUnresolved:i})}),p)},getAsset:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return h(t),ge(n),t.get("assets/"+e,Object(W.b)({query:n})).then((function(e){return c(e.data)}),p)},getAssets:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),ge(e),t.get("assets",Object(W.b)({query:e})).then((function(e){return f(e.data)}),p)},getLocales:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),t.get("locales",Object(W.b)({query:e})).then((function(e){return m(e.data)}),p)},parseEntries:function(e){var t=n({}),r=t.resolveLinks,a=t.removeUnresolved;return l(e,{resolveLinks:r,removeUnresolved:a})},sync:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{paginate:!0},a=n(e),i=a.resolveLinks,o=a.removeUnresolved;return h(t),fe(t,e,ve({resolveLinks:i,removeUnresolved:o},r))}}}function ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(n),!0).forEach((function(t){Ye(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ye(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Te=function(e){if(!e.accessToken)throw new TypeError("Expected parameter accessToken");if(!e.space)throw new TypeError("Expected parameter space");var t=we(we({},{resolveLinks:!0,removeUnresolved:!1,defaultHostname:"cdn.contentful.com",environment:"master"}),e),n=Object(W.d)("contentful.js/".concat("0.0.0-determined-by-semantic-release"),t.application,t.integration);t.headers=we(we({},t.headers),{},{"Content-Type":"application/vnd.contentful.delivery.v1+json","X-Contentful-User-Agent":n});var r,a=Object(W.a)(F.a,t),i=(r={resolveLinks:t.resolveLinks,environment:t.environment,removeUnresolved:t.removeUnresolved,spaceBaseUrl:a.defaults.baseURL,environmentBaseUrl:"".concat(a.defaults.baseURL,"environments/").concat(t.environment)},function(e){return Object.assign({},r,e)});return a.defaults.baseURL=i().environmentBaseUrl,function(e){e.interceptors.response.use((function(e){return e}),(function(e){if(e.response&&e.response.config.headers.Authorization){var t=e.response.config.headers.Authorization;e.response.config.headers.Authorization=e.response.config.headers.Authorization.replace(t,"Bearer...".concat(t.substr(-5))),e.response.request._headers&&e.response.request._headers.authorization&&(e.response.request._headers.authorization=e.response.request._headers.authorization.replace(t,"Bearer...".concat(t.substr(-5)))),e.response.request._header&&(e.response.request._header=e.response.request._header.replace(t,"Bearer...".concat(t.substr(-5))))}return Promise.reject(e)}))}(a),Le({http:a,getGlobalOptions:i})}({space:"9itkoq01s77j",accessToken:"eTLRYpsJLr3mN3W5pRgIuHCvPvRi4hDtgRoOZcb0ndQ"}),De=n(0),Se=n.n(De),xe=n(21),je=n.n(xe),Oe=l.a.createContext([{},function(){}]),Ee=function(e){var t=Object(u.useState)({entry:null,entryList:[],page:1,totalPages:1}),n=je()(t,2),r=n[0],a=n[1];return l.a.createElement(Oe.Provider,{value:[r,a]},e.children)};function He(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?He(Object(n),!0).forEach((function(t){O()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):He(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ae=function(){var e=Object(u.useContext)(Oe),t=je()(e,2),n=t[0],r=t[1];return{setPage:function(e){if(e<1)throw"Invalid page number";r((function(t){return Pe(Pe({},t),{},{page:e})}))},totalPages:n.totalPages,entry:n.entry,setEntry:function(e){r((function(t){return Pe(Pe({},t),{},{entry:e})}))},entryList:n.entryList,state:n,setState:r}};function Ce(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ne(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ce(Object(n),!0).forEach((function(t){O()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ce(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Fe(e){var t=e.searchParams,n=D.b.div.withConfig({displayName:"blog__EntryList",componentId:"sc-fntq75-0"})(["#entry-container{li{div{display:inline-block;h1{margin-bottom:5px;}img{float:left;border:2px solid ",";margin:5px 0 15px 0;}.date{font-family:arial font-size:15px;font-weight:bold;color:",";line-height:30px;margin-bottom:10px;}}}}"],T,Y),r=Ae(),a=r.setState,i=r.entryList,o=r.totalPages,s=t.get("p")||1,d=t.get("rpp")||10;return Object(u.useEffect)((function(){(function(){var e=H()(A.a.mark((function e(){var t,n;return A.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t={content_type:"post",skip:(s-1)*d,limit:d},e.next=3,Te.getEntries(t);case 3:n=e.sent,console.log("entries res",n),a((function(e){return Ne(Ne({},e),{},{entryList:n.items,totalPages:Math.ceil(n.total/d)})}));case 6:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[]),l.a.createElement(n,null,i.length?l.a.createElement("div",{id:"entry-container"},l.a.createElement("ul",null,i.map((function(e){return l.a.createElement("li",{key:e.fields.slug},l.a.createElement("div",null,l.a.createElement("a",{href:"/post/"+e.sys.id},l.a.createElement("h1",null,e.fields.title),l.a.createElement("div",{class:"date"},Se()(e.sys.createdAt).format("MMMM Do YYYY, h:mm a")),e.fields.thumb?l.a.createElement("img",{src:e.fields.thumb.fields.file.url,width:"560px"}):"")))}))),l.a.createElement(C,{totalPages:o,p:s,rpp:d})):l.a.createElement("em",null,"Loading..."))}var We=n(209),ze=n.n(We);function Ie(e){var t=D.b.div.withConfig({displayName:"post__BlogPost",componentId:"sc-9jh1rj-0"})(["#post-container{margin:20px 0 20px 0;h1{margin-bottom:5px;}#date{font-family:arial font-size:15px;font-weight:bold;color:",";line-height:30px;margin-bottom:20px;}#post-body{font-family:georgia;line-height:25px;margin-bottom:25px;ul{list-style-type:circle;}}#tag-label{font-weight:bold;margin-bottom:20px;color:",";}.tag{font-size:13px;background:",";border:1px solid ",";border-radius:5px;text-decoration:none;padding:8px;margin:3px;text-transform:uppercase;}.tag:hover{color:",";background:",";}}"],Y,Y,b,T,b,Y),n=Ae(),r=n.entry,a=n.setEntry;return Object(u.useEffect)((function(){(function(){var t=H()(A.a.mark((function t(){var n;return A.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Te.getEntry(e.id);case 2:n=t.sent,console.log("res",n),a(n);case 5:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}})()()}),[]),l.a.createElement(t,null,l.a.createElement("div",{id:"post-container"},r?l.a.createElement("div",null,l.a.createElement("h1",null,r.fields.title),l.a.createElement("div",{id:"date"},Se()(r.sys.createdAt).format("MMMM Do YYYY, h:mm a")),l.a.createElement("div",{id:"post-body"},l.a.createElement(ze.a,{escapeHtml:!1,children:r.fields.body})),l.a.createElement("div",null,l.a.createElement("div",{id:"tag-label"},r.metadata.tags?"Tags:":""),r.metadata.tags&&r.metadata.tags.map((function(e){return l.a.createElement("a",{href:"/tags/".concat(e.sys.id),class:"tag",key:e.sys.id},e.sys.id)})))):l.a.createElement("div",{class:"loading"},l.a.createElement("em",null,"Loading..."))))}function Re(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ue(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Re(Object(n),!0).forEach((function(t){O()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Re(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Be(e){var t=e.id,n=e.searchParams,r=D.b.div.withConfig({displayName:"tag__EntryList",componentId:"sc-19j6k2a-0"})(["#entry-container{li{div{display:inline-block;img{float:left;border:2px solid ",";margin:5px 0 10px 0;}}}}"],T),a=D.b.div.withConfig({displayName:"tag__SelectedTag",componentId:"sc-19j6k2a-1"})(["@import url('https://fonts.googleapis.com/css?family=Bebas+Neue&display=swap');font-size:20px;#selected-tag-container{color:",";width:560px;margin-top:50px;padding-bottom:15px;border-bottom:1px dotted ",';.tag{font-family:"Bebas Neue";font-size:64px;color:',";background:",";text-transform:uppercase;margin-right:10px;}}"],k,T,Y,b),i=Ae(),o=i.setState,s=i.entryList,d=i.totalPages,c=n.get("p")||1,f=n.get("rpp")||10;return Object(u.useEffect)((function(){(function(){var e=H()(A.a.mark((function e(){var n,r;return A.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={"metadata.tags.sys.id[in]":t,content_type:"post",skip:(c-1)*f,limit:f},e.next=3,Te.getEntries(n);case 3:r=e.sent,console.log("entries res",r),o((function(e){return Ue(Ue({},e),{},{entryList:r.items,totalPages:Math.ceil(r.total/f)})}));case 6:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[]),l.a.createElement("div",null,l.a.createElement(a,null,l.a.createElement("div",{id:"selected-tag-container"},l.a.createElement("span",{class:"tag"},t)," posts")),l.a.createElement(r,null,l.a.createElement("div",null,s.length?l.a.createElement("div",{id:"entry-container"},l.a.createElement("ul",null,s.map((function(e){return l.a.createElement("li",{key:e.fields.slug},l.a.createElement("div",null,l.a.createElement("a",{href:"/post/"+e.sys.id},l.a.createElement("h1",null,e.fields.title),e.fields.thumb?l.a.createElement("img",{src:e.fields.thumb.fields.file.url,width:"560px"}):"")))}))),l.a.createElement(C,{totalPages:d,p:c,rpp:f})):l.a.createElement("em",null,"Loading..."))))}function Je(){var e=D.b.div.withConfig({displayName:"home__HomePage",componentId:"sc-sb9dzz-0"})(["#home-container{margin-top:50px;width:560px;color:",";text-align:center;img{border:2px solid ",";width:560px;margin-bottom:15px;}}"],k,T);return l.a.createElement(e,null,l.a.createElement("div",{id:"home-container"},l.a.createElement("img",{src:"https://images.ctfassets.net/9itkoq01s77j/2METWxNUggmn6bfqiHhpKu/2215a0bd75ad13cd4eba994008eb8d68/Phil_Avery_on_Instagram_____Yet_another_ramen_place_in_nyc__not_complaining_though___ramen__nyc___.png"}),l.a.createElement("div",null,"Just a picture of some yummy ramen I ate once.")))}function $e(e,t,n){return t=y()(t),p()(e,function(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return function(){return!!e}()}()?Reflect.construct(t,n||[],y()(e).constructor):t.apply(e,n))}var Ve=Object(D.a)(["body{background-color:",";}.main-site{width:560px;margin:auto;}"],b),qe=D.b.div.withConfig({displayName:"main__Main",componentId:"sc-msizxx-0"})(["@import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');font-family:sans-serif;color:",";h1{font-family:'Roboto',sans-serif;color:",";}ul{list-style:none;padding:0;}a{text-decoration:none;&:link,&:visited{color:",";}&:hover{color:",";}}.loading{margin-top:50px;}"],k,L,k,k),Ge=function(e){function t(){return c()(this,t),$e(this,t,arguments)}return M()(t,e),m()(t,[{key:"render",value:function(){var e,t=[],n=(e=new URL(window.location.href),console.log("url",e),{parts:e.pathname.split("/").filter((function(e){return e.length>0})),searchParams:e.searchParams}),r=n.parts,a=n.searchParams,i=r.length>0?r[0]:"",o=r[1],s=null;switch(i){case"work":s=l.a.createElement(v,{key:"work"});break;case"post":s=l.a.createElement(Ie,{key:"post",id:o});break;case"blog":s=l.a.createElement(Fe,{key:"blog",searchParams:a});break;case"tags":s=l.a.createElement(Be,{key:"tag",id:o,searchParams:a});break;default:s=l.a.createElement(Je,{key:"home"})}return t.push(s),l.a.createElement(Ee,null,l.a.createElement(Ve,null),l.a.createElement(qe,null,l.a.createElement(x,{key:"nav",section:i}),l.a.createElement("div",{class:"main-site"},t)))}}])}(u.Component),Ke=n(210),Qe=n.n(Ke),Ze=document.getElementById("main-site");Ze&&Qe.a.render(l.a.createElement(Ge,null),Ze)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsLXNkay1jb3JlL2Rpc3QvaW5kZXguZXMtbW9kdWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmFzdC1jb3B5L2Rpc3QvZmFzdC1jb3B5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVuZC9pbW11dGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHJpbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc3BsYWlub2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWluc3BlY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC1hcHBseS1oZWxwZXJzL2Z1bmN0aW9uQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWVudGl0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXBlYXQtc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmltLXRyYWlsaW5nLWxpbmVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvbm9ybWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3R5bGlzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc3N0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC1tYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLW9iamVjdC1hdG9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29wZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LXByb3RvL1JlZmxlY3QuZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dldC1wcm90by9PYmplY3QuZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC1hcHBseS1oZWxwZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQtYXBwbHktaGVscGVycy9mdW5jdGlvbkFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYWxsLWJvdW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItZHouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIta3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItc2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm4tYmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZHYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tYXUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tZ2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tbnouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tc2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtZG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtbXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2Z5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dvbS1kZXZhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dvbS1sYXRuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2d1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h5LWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2l0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2l0LWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2phLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2p2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2thLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2trLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ttLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t1LWttci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9reS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9taS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy1teS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9teS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC1iZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9vYy1sbmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGEtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQtYnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3ItY3lybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGwtcGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLWxhdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWctY24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS92aS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS94LXBzZXVkby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS95by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1oay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1tby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC10dy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1hbHBoYWJldGljYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdXRpbC9nZXQtaW5kZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdXRpbC9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2xvY2F0ZS90YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wLXRocm90dGxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzb24tc3RyaW5naWZ5LXNhZmUvc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcmVhY3QtbWFya2Rvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy13aGF0L2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZXJnZS1hbnl0aGluZy9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlZ2VuZXJhdG9yUnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaWRlLWNoYW5uZWwtbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvZXZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvcmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvc3ludGF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdXJpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRoLWludHJpbnNpY3MvYWJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRoLWludHJpbnNpY3MvZmxvb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9tYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9wb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aC1pbnRyaW5zaWNzL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9pc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29wZC9nT1BELmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1kZWZpbmUtcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LXByb3RvL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kdW5kZXItcHJvdG8vZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQtYXBwbHktaGVscGVycy9hY3R1YWxBcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvcmVmbGVjdEFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNvd24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC13ZWFrbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIF5cXC5cXC8uKiQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaWZpZWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmZpbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlLW1lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZmlsZS9jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXBsYWNlLWV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cm91Z2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Ryb3VnaC93cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94LWlzLXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdGF0ZS10b2dnbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlLWxvY2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3VuZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaGV4YWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWFscGhhbnVtZXJpY2FsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1lbnRpdGllcy9kZWNvZGUtZW50aXR5LmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3NldC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1lc2NhcGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXJlbW92ZS1wb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLWlzL2NvbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbmV3bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9jb2RlLWluZGVudGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtZmVuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Jsb2NrcXVvdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvaGVhZGluZy1hdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWJsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Zvb3Rub3RlLWRlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbGxhcHNlLXdoaXRlLXNwYWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvcGFyYWdyYXBoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2F1dG8tbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3VybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL3JlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3N0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9lbXBoYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtd29yZC1jaGFyYWN0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2VtcGhhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtaW5saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2xvY2F0ZS9jb2RlLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9icmVhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZGFzdC1hZGQtbGlzdC1tZXRhZGF0YS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcGx1Z2lucy9uYWl2ZS1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcGx1Z2lucy9kaXNhbGxvdy1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvYXN0LXRvLXJlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvd3JhcC10YWJsZS1yb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvZ2V0LWRlZmluaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvdXJpLXRyYW5zZm9ybWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcmVuZGVyZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29yay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wYWxldHRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL25hdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3BhZ2luYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL3NwYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9taXhpbnMvc3RyaW5naWZ5LXNhZmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwtcmVzb2x2ZS1yZXNwb25zZS9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvZW50aXRpZXMvZW50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL2Fzc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9lbnRpdGllcy9jb250ZW50LXR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvZW50aXRpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL3BhZ2VkLXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL3V0aWxzL25vcm1hbGl6ZS1zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2NyZWF0ZS1jb250ZW50ZnVsLWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvY29udGVudGZ1bC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9jcmVhdGUtZ2xvYmFsLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9ibG9nQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3VzZUJsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3Bvc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy90YWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImhvb2tDYWxsYmFjayIsInNvbWUiLCJob29rcyIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNBcnJheSIsImlucHV0IiwiQXJyYXkiLCJ0b1N0cmluZyIsImlzT2JqZWN0IiwiaGFzT3duUHJvcCIsImEiLCJiIiwiaXNPYmplY3RFbXB0eSIsIm9iaiIsImdldE93blByb3BlcnR5TmFtZXMiLCJsZW5ndGgiLCJrIiwiaXNVbmRlZmluZWQiLCJpc051bWJlciIsImlzRGF0ZSIsIkRhdGUiLCJtYXAiLCJhcnIiLCJmbiIsInJlcyIsImFyckxlbiIsInB1c2giLCJleHRlbmQiLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwiZm9ybWF0IiwibG9jYWxlIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImdldFBhcnNpbmdGbGFncyIsIl9wZiIsImVtcHR5IiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJvdmVyZmxvdyIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkRXJhIiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsImVyYSIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImlzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsIl9kIiwiaXNOYU4iLCJnZXRUaW1lIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwidW5kZWZpbmVkIiwiYmlnSG91ciIsImlzRnJvemVuIiwiX2lzVmFsaWQiLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwiZnVuIiwidGhpcyIsImxlbiIsIm1vbWVudFByb3BlcnRpZXMiLCJ1cGRhdGVJblByb2dyZXNzIiwiY29weUNvbmZpZyIsInRvIiwiZnJvbSIsInByb3AiLCJ2YWwiLCJtb21lbnRQcm9wZXJ0aWVzTGVuIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsIk1vbWVudCIsImNvbmZpZyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50Iiwid2FybiIsIm1zZyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImNvbnNvbGUiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJhcmciLCJhcmdzIiwiYXJnTGVuIiwic2xpY2UiLCJqb2luIiwiRXJyb3IiLCJzdGFjayIsImtleXMiLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJpc0Z1bmN0aW9uIiwiRnVuY3Rpb24iLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsInNldCIsInplcm9GaWxsIiwibnVtYmVyIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiTWF0aCIsImFicyIsInplcm9zVG9GaWxsIiwicG93IiwibWF4Iiwic3Vic3RyIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJjYWxsYmFjayIsImZ1bmMiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwiYXJyYXkiLCJtYXRjaCIsInJlcGxhY2UiLCJtb20iLCJvdXRwdXQiLCJtYWtlRm9ybWF0RnVuY3Rpb24iLCJpbnZhbGlkRGF0ZSIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvbmdEYXRlRm9ybWF0IiwibGFzdEluZGV4IiwidGVzdCIsImFsaWFzZXMiLCJEIiwiZGF0ZXMiLCJkYXRlIiwiZGF5cyIsImRheSIsImUiLCJ3ZWVrZGF5cyIsIndlZWtkYXkiLCJFIiwiaXNvd2Vla2RheXMiLCJpc293ZWVrZGF5IiwiREREIiwiZGF5b2Z5ZWFycyIsImRheW9meWVhciIsImgiLCJob3VycyIsImhvdXIiLCJtcyIsIm1pbGxpc2Vjb25kcyIsIm1pbGxpc2Vjb25kIiwibWludXRlcyIsIm1pbnV0ZSIsIk0iLCJtb250aHMiLCJtb250aCIsIlEiLCJxdWFydGVycyIsInF1YXJ0ZXIiLCJzZWNvbmRzIiwic2Vjb25kIiwiZ2ciLCJ3ZWVreWVhcnMiLCJ3ZWVreWVhciIsIkdHIiwiaXNvd2Vla3llYXJzIiwiaXNvd2Vla3llYXIiLCJ3Iiwid2Vla3MiLCJ3ZWVrIiwiVyIsImlzb3dlZWtzIiwiaXNvd2VlayIsInkiLCJ5ZWFycyIsInllYXIiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJyZWdleGVzIiwicHJpb3JpdGllcyIsImlzb1dlZWtkYXkiLCJkYXlPZlllYXIiLCJ3ZWVrWWVhciIsImlzb1dlZWtZZWFyIiwiaXNvV2VlayIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsIm1hdGNoMXRvMk5vTGVhZGluZ1plcm8iLCJtYXRjaDF0bzJIYXNaZXJvIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsIlJlZ0V4cCIsInJlZ2V4RXNjYXBlIiwibWF0Y2hlZCIsInAxIiwicDIiLCJwMyIsInA0IiwiYWJzRmxvb3IiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwiaXNGaW5pdGUiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwidG9rZW5MZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsImlzTGVhcFllYXIiLCJkYXlzSW5ZZWFyIiwicGFyc2VUd29EaWdpdFllYXIiLCJwYXJzZUludCIsImluZGV4T2YiLCJnZXRTZXRZZWFyIiwibWFrZUdldFNldCIsInVuaXQiLCJrZWVwVGltZSIsInNldCQxIiwiaXNVVEMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJnZXRNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJnZXRIb3VycyIsImdldFVUQ0RhdGUiLCJnZXREYXRlIiwiZ2V0VVRDRGF5IiwiZ2V0RGF5IiwiZ2V0VVRDTW9udGgiLCJnZXRNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJzZXRVVENNaWxsaXNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJzZXRVVENTZWNvbmRzIiwic2V0U2Vjb25kcyIsInNldFVUQ01pbnV0ZXMiLCJzZXRNaW51dGVzIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsInNldFVUQ0RhdGUiLCJzZXREYXRlIiwic2V0VVRDRnVsbFllYXIiLCJzZXRGdWxsWWVhciIsImRheXNJbk1vbnRoIiwieCIsIm1vZE1vbnRoIiwibW9udGhzU2hvcnQiLCJtb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJtb250aHNQYXJzZSIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJzcGxpdCIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsIk1PTlRIU19JTl9GT1JNQVQiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsInNldE1vbnRoIiwibWluIiwic2V0VVRDTW9udGgiLCJnZXRTZXRNb250aCIsImNvbXB1dGVNb250aHNQYXJzZSIsImNtcExlblJldiIsInNob3J0UCIsImxvbmdQIiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJzb3J0IiwiX21vbnRoc1JlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRTdHJpY3RSZWdleCIsImNyZWF0ZURhdGUiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla09mZnNldCIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJzaGlmdFdlZWtkYXlzIiwid3MiLCJjb25jYXQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c01pblJlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNSZWdleCIsIndlZWtkYXlzUGFyc2UiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsIm1pblBpZWNlcyIsIl93ZWVrZGF5c1JlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblJlZ2V4IiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJoRm9ybWF0IiwibG93ZXJjYXNlIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaGgiLCJkZCIsInd3IiwiTU0iLCJ5eSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJjb21tb25QcmVmaXgiLCJhcnIxIiwiYXJyMiIsIm1pbmwiLCJub3JtYWxpemVMb2NhbGUiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiaXNMb2NhbGVOYW1lU2FuZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwidmFsdWVzIiwiZGF0YSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJfY29uZmlnIiwicGFyZW50TG9jYWxlIiwiZm9yRWFjaCIsIm5hbWVzIiwiaiIsIm5leHQiLCJjaG9vc2VMb2NhbGUiLCJjaGVja092ZXJmbG93IiwiX292ZXJmbG93RGF5T2ZZZWFyIiwiX292ZXJmbG93V2Vla3MiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsIm9ic09mZnNldHMiLCJVVCIsIkdNVCIsIkVEVCIsIkVTVCIsIkNEVCIsIkNTVCIsIk1EVCIsIk1TVCIsIlBEVCIsIlBTVCIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0Iiwic3RyaW5nIiwiZXhlYyIsImlzb0RhdGVzTGVuIiwiaXNvVGltZXNMZW4iLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwidW50cnVuY2F0ZVllYXIiLCJ5ZWFyU3RyIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsInJlc3VsdCIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsImNoZWNrV2Vla2RheSIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjYWxjdWxhdGVPZmZzZXQiLCJkZWZhdWx0cyIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwiZXhwZWN0ZWRXZWVrZGF5IiwieWVhclRvVXNlIiwibm93VmFsdWUiLCJub3ciLCJfdXNlVVRDIiwiY3VycmVudERhdGVBcnJheSIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJjdXJXZWVrIiwiY3JlYXRlTG9jYWwiLCJfd2VlayIsIl9kYXlPZlllYXIiLCJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCJfbmV4dERheSIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJtZXJpZGllbUZpeFdyYXAiLCJlcmFzQ29udmVydFllYXIiLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJ0ZW1wQ29uZmlnIiwiYmVzdE1vbWVudCIsInNjb3JlVG9CZWF0IiwiY3VycmVudFNjb3JlIiwidmFsaWRGb3JtYXRGb3VuZCIsImJlc3RGb3JtYXRJc1ZhbGlkIiwiY29uZmlnZkxlbiIsInNjb3JlIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJjb25maWdGcm9tU3RyaW5nIiwiZGF5T3JEYXRlIiwiY29uZmlnRnJvbU9iamVjdCIsImNvbmZpZ0Zyb21JbnB1dCIsImFkZCIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsInVuaXRIYXNEZWNpbWFsIiwib3JkZXJMZW4iLCJwYXJzZUZsb2F0IiwiaXNEdXJhdGlvblZhbGlkIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX21vbnRocyIsIl9kYXRhIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInJvdW5kIiwib2Zmc2V0Iiwic2VwYXJhdG9yIiwidXRjT2Zmc2V0Iiwic2lnbiIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJwYXJ0cyIsIm1hdGNoZXMiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsImRpZmYiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwicmV0IiwiZGlmZlJlcyIsImJhc2UiLCJwYXJzZUlzbyIsImlzQmVmb3JlIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImlucCIsImlzQWZ0ZXIiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsInRtcCIsImFkZFN1YnRyYWN0IiwiaXNBZGRpbmciLCJpbnZhbGlkIiwic3VidHJhY3QiLCJpc1N0cmluZyIsIlN0cmluZyIsImlzTW9tZW50SW5wdXQiLCJhcnJheVRlc3QiLCJkYXRhVHlwZVRlc3QiLCJmaWx0ZXIiLCJpdGVtIiwiaXNOdW1iZXJPclN0cmluZ0FycmF5Iiwib2JqZWN0VGVzdCIsInByb3BlcnR5VGVzdCIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eUxlbiIsImlzTW9tZW50SW5wdXRPYmplY3QiLCJpc0NhbGVuZGFyU3BlYyIsIm1vbnRoRGlmZiIsIndob2xlTW9udGhEaWZmIiwiYW5jaG9yIiwibmV3TG9jYWxlRGF0YSIsImRlZmF1bHRGb3JtYXQiLCJkZWZhdWx0Rm9ybWF0VXRjIiwibGFuZyIsIm1vZCQxIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibG9jYWxTdGFydE9mRGF0ZSIsInV0Y1N0YXJ0T2ZEYXRlIiwibWF0Y2hFcmFBYmJyIiwiZXJhc0FiYnJSZWdleCIsImNvbXB1dGVFcmFzUGFyc2UiLCJlcmFzTmFtZSIsImVyYXNBYmJyIiwiZXJhc05hcnJvdyIsImFiYnJQaWVjZXMiLCJuYW1lUGllY2VzIiwibmFycm93UGllY2VzIiwiZXJhcyIsIm5hcnJvdyIsIl9lcmFzUmVnZXgiLCJfZXJhc05hbWVSZWdleCIsIl9lcmFzQWJiclJlZ2V4IiwiX2VyYXNOYXJyb3dSZWdleCIsImFkZFdlZWtZZWFyRm9ybWF0VG9rZW4iLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJlcmFzTmFtZVJlZ2V4IiwiZXJhc05hcnJvd1JlZ2V4IiwiZXJhc1BhcnNlIiwiX2VyYVllYXJPcmRpbmFsUmVnZXgiLCJlcmFZZWFyT3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldE1pbnV0ZSIsImdldFNldE1pbGxpc2Vjb25kIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsInByb3RvIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwidGltZSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJhc0Zsb2F0IiwidGhhdCIsInpvbmVEZWx0YSIsImVuZE9mIiwic3RhcnRPZkRhdGUiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwicHJpb3JpdHkiLCJnZXRQcmlvcml0aXplZFVuaXRzIiwicHJpb3JpdGl6ZWRMZW4iLCJ0b0FycmF5IiwidG9PYmplY3QiLCJ0b0RhdGUiLCJ0b0lTT1N0cmluZyIsImtlZXBPZmZzZXQiLCJpbnNwZWN0IiwicHJlZml4Iiwic3VmZml4Iiwiem9uZSIsImlzTG9jYWwiLCJmb3IiLCJ0b0pTT04iLCJ1bml4IiwiY3JlYXRpb25EYXRhIiwiZXJhTmFtZSIsInNpbmNlIiwidW50aWwiLCJlcmFOYXJyb3ciLCJlcmFBYmJyIiwiZXJhWWVhciIsImRpciIsImlzb1dlZWtzIiwid2Vla0luZm8iLCJ3ZWVrc0luV2Vla1llYXIiLCJpc29XZWVrc0luWWVhciIsImlzb1dlZWtzSW5JU09XZWVrWWVhciIsInBhcnNlV2Vla2RheSIsInBhcnNlSXNvV2Vla2RheSIsImtlZXBMb2NhbFRpbWUiLCJrZWVwTWludXRlcyIsImxvY2FsQWRqdXN0IiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJwYXJzZVpvbmUiLCJ0Wm9uZSIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEU1QiLCJpc1V0Y09mZnNldCIsInpvbmVBYmJyIiwiem9uZU5hbWUiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJjb21wYXJlQXJyYXlzIiwicHJvdG8kMSIsImdldCQxIiwiaW5kZXgiLCJmaWVsZCIsInNldHRlciIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsInNoaWZ0IiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJ0b1VwcGVyQ2FzZSIsInRvayIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsInNvdXJjZSIsIl9lcmFzIiwiaXNGb3JtYXQiLCJfbW9udGhzU2hvcnQiLCJfbW9udGhzUGFyc2VFeGFjdCIsImZpcnN0RGF5T2ZZZWFyIiwiZmlyc3REYXlPZldlZWsiLCJfd2Vla2RheXMiLCJfd2Vla2RheXNNaW4iLCJfd2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJjaGFyQXQiLCJpc0xvd2VyIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFic0NlaWwiLCJkYXlzVG9Nb250aHMiLCJtb250aHNUb0RheXMiLCJtYWtlQXMiLCJhbGlhcyIsImFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNRdWFydGVycyIsImFzWWVhcnMiLCJ2YWx1ZU9mJDEiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsInN1YnN0aXR1dGVUaW1lQWdvIiwiYWJzJDEiLCJ0b0lTT1N0cmluZyQxIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwidG90YWwiLCJ0b0ZpeGVkIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwiYXJnV2l0aFN1ZmZpeCIsImFyZ1RocmVzaG9sZHMiLCJ3aXRoU3VmZml4IiwidGgiLCJhc3NpZ24iLCJwb3NOZWdEdXJhdGlvbiIsInJlbGF0aXZlVGltZSQxIiwidG9Jc29TdHJpbmciLCJ2ZXJzaW9uIiwidXBkYXRlTG9jYWxlIiwidG1wTG9jYWxlIiwicmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJteU1vbWVudCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiREFURSIsIlRJTUUiLCJUSU1FX1NFQ09ORFMiLCJUSU1FX01TIiwiV0VFSyIsIk1PTlRIIiwiZmFjdG9yeSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfd3JhcFJlZ0V4cCIsInJlIiwiZ3JvdXBzIiwiQmFiZWxSZWdFeHAiLCJfc3VwZXIiLCJfZ3JvdXBzIiwiV2Vha01hcCIsIl90aGlzIiwiX3NldFByb3RvdHlwZU9mIiwiYnVpbGRHcm91cHMiLCJnIiwicmVkdWNlIiwiX2luaGVyaXRzIiwic3RyIiwic3Vic3RpdHV0aW9uIiwiXyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiVHlwZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJkb25lIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiaXNOb2RlIiwicHJvY2VzcyIsImJyb3dzZXIiLCJnZXROb2RlVmVyc2lvbiIsInZlcnNpb25zIiwibm9kZSIsIm5vb3AiLCJQRVJDRU5UQUdFX1JFR0VYIiwiY2FsY3VsYXRlTGltaXQiLCJ0eXBlIiwiX3R5cGUkbWF0Y2giLCJwZXJjZW50YWdlIiwiY3JlYXRlVGhyb3R0bGUiLCJsb2dnZXIiLCJpbnRlcnZhbCIsImRlbGF5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZGVmYXVsdFdhaXQiLCJhdHRlbXB0cyIsIlNRUlQyIiwiSE9TVF9SRUdFWCIsImNyZWF0ZUh0dHBDbGllbnQiLCJheGlvcyIsIm9wdGlvbnMiLCJpbnNlY3VyZSIsInJldHJ5T25FcnJvciIsImxvZ0hhbmRsZXIiLCJsZXZlbCIsInRpdGxlIiwibWVzc2FnZSIsImVycm9yIiwibG9nIiwiaGVhZGVycyIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJ0aW1lb3V0IiwidGhyb3R0bGUiLCJwcm94eSIsImJhc2VQYXRoIiwiYWRhcHRlciIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwiYWNjZXNzVG9rZW4iLCJtaXNzaW5nQWNjZXNzVG9rZW5FcnJvciIsInByb3RvY29sIiwic3BhY2UiLCJob3N0bmFtZSIsImRlZmF1bHRIb3N0bmFtZSIsInBvcnQiLCJob3N0IiwicGFyc2VkIiwiX3BhcnNlZCIsIkJvb2xlYW4iLCJiYXNlVVJMIiwiQXV0aG9yaXphdGlvbiIsImF4aW9zT3B0aW9ucyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzdHJpbmdpZnkiLCJyZXNwb25zZUxvZ2dlciIsInJlcXVlc3RMb2dnZXIiLCJpbnN0YW5jZSIsImh0dHBDbGllbnRQYXJhbXMiLCJjbG9uZVdpdGhOZXdQYXJhbXMiLCJuZXdQYXJhbXMiLCJvbkJlZm9yZVJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0IiwidXNlIiwiZ2V0VG9rZW4iLCJ0aGVuIiwiYXN5bmNUb2tlbiIsImF4aW9zSW5zdGFuY2UiLCJfYXhpb3NJbnN0YW5jZSRkZWZhdWwiLCJpc0NhbGN1bGF0ZWQiLCJyZXF1ZXN0SW50ZXJjZXB0b3JJZCIsInJlamVjdCIsInJlc3BvbnNlSW50ZXJjZXB0b3JJZCIsInJlc3BvbnNlIiwicmF3TGltaXQiLCJuZXh0TGltaXQiLCJlamVjdCIsInJhdGVMaW1pdFRocm90dGxlIiwibWF4UmV0cnkiLCJfaW5zdGFuY2UkZGVmYXVsdHMiLCJfaW5zdGFuY2UkZGVmYXVsdHMkcmUiLCJfaW5zdGFuY2UkZGVmYXVsdHMkcmUyIiwiZG9uZUF0dGVtcHRzIiwicmV0cnlFcnJvclR5cGUiLCJ3YWl0Iiwic3RhdHVzIiwicmFuZG9tIiwicmF0ZUxpbWl0IiwicmV0cnlMaW1pdCIsIm9uRXJyb3IiLCJjcmVhdGVSZXF1ZXN0Q29uZmlnIiwiX3JlZiIsInF1ZXJ5IiwicmVzb2x2ZUxpbmtzIiwicGFyYW1zIiwiZGVlcEZyZWV6ZSIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIkYiLCJmIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsInN0ZXAiLCJyZXR1cm4iLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImZyZWV6ZSIsImZyZWV6ZVN5cyIsInN5cyIsImdldEJyb3dzZXJPUyIsIndpbiIsIndpbmRvdyIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwiZ2V0VXNlckFnZW50SGVhZGVyIiwic2RrIiwiYXBwbGljYXRpb24iLCJpbnRlZ3JhdGlvbiIsImZlYXR1cmUiLCJoZWFkZXJQYXJ0cyIsInByb2R1Y3QiLCJwbGF0Zm9ybU1hcCIsImFuZHJvaWQiLCJhaXgiLCJkYXJ3aW4iLCJmcmVlYnNkIiwibGludXgiLCJvcGVuYnNkIiwic3Vub3MiLCJ3aW4zMiIsImdldE5vZGVPUyIsInRvUGxhaW5PYmplY3QiLCJ0b1N0cmluZ0Z1bmN0aW9uIiwiZ2V0UHJvdG90eXBlT2YkMSIsImdldFByb3RvdHlwZU9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJTWU1CT0xfUFJPUEVSVElFUyIsIldFQUtfTUFQIiwiY3JlYXRlQ2FjaGUiLCJDYWNoZSIsIl9rZXlzIiwiX3ZhbHVlcyIsImhhcyIsImdldENsZWFuQ2xvbmUiLCJyZWFsbSIsIkNvbnN0cnVjdG9yIiwiZ2V0T2JqZWN0Q2xvbmVMb29zZSIsImhhbmRsZUNvcHkiLCJjYWNoZSIsImxlbmd0aF8xIiwic3ltYm9sIiwiZ2V0T2JqZWN0Q2xvbmVTdHJpY3QiLCJsZW5ndGhfMiIsImRlc2NyaXB0b3IiLCJHTE9CQUxfVEhJUyIsImdsb2JhbFRoaXMiLCJzZWxmIiwiZ2xvYmFsIiwiY29weSIsImdldE9iamVjdENsb25lIiwicmVnRXhwIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJNYXAiLCJTZXQiLCJCbG9iIiwic2l6ZSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsIldlYWtTZXQiLCJkZWZhdWx0IiwiaW50ZXJsZWF2ZSIsInN0cmluZ3MiLCJpbnRlcnBvbGF0aW9ucyIsImNsYXNzQ2FsbENoZWNrIiwiY3JlYXRlQ2xhc3MiLCJwcm9wcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiaW5oZXJpdHMiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJpc1BsYWluT2JqZWN0IiwiRU1QVFlfQVJSQVkiLCJFTVBUWV9PQkpFQ1QiLCJnZXRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJpc1N0eWxlZENvbXBvbmVudCIsInN0eWxlZENvbXBvbmVudElkIiwiU0NfQVRUUiIsImVudiIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiSVNfQlJPV1NFUiIsIkRJU0FCTEVfU1BFRURZIiwiU0NfRElTQUJMRV9TUEVFRFkiLCJSRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkiLCJTVEFUSUNfRVhFQ1VUSU9OX0NPTlRFWFQiLCJTdHlsZWRDb21wb25lbnRzRXJyb3IiLCJfRXJyb3IiLCJjb2RlIiwiX2xlbiIsIl9rZXkiLCJTQ19DT01QT05FTlRfSUQiLCJleHRyYWN0Q29tcHMiLCJtYXliZUNTUyIsImNzcyIsImV4aXN0aW5nQ29tcG9uZW50cyIsImNvbXBvbmVudElkIiwibWF0Y2hJbmRleCIsIm5leHRDb21wIiwiY3NzRnJvbURPTSIsIkNPTU1FTlRfUkVHRVgiLCJzdHlsaXNTcGxpdHRlciIsImNhc2NhZGUiLCJrZXlmcmFtZSIsImNvbXByZXNzIiwic2VtaWNvbG9uIiwic3R5bGlzIiwicGFyc2luZ1J1bGVzIiwicmV0dXJuUnVsZXNQbHVnaW4iLCJjb250ZXh0IiwicGFyc2VkUnVsZXMiLCJwYXJzZVJ1bGVzUGx1Z2luIiwicnVsZSIsIl9jb21wb25lbnRJZCIsIl9zZWxlY3RvciIsIl9zZWxlY3RvclJlZ2V4cCIsInNlbGZSZWZlcmVuY2VSZXBsYWNlciIsInNlbGVjdG9ycyIsImxhc3RJbmRleE9mIiwic3BsaXRCeVJ1bGVzIiwic3RyaW5naWZ5UnVsZXMiLCJydWxlcyIsInNlbGVjdG9yIiwiZmxhdENTUyIsImNzc1N0ciIsImdldE5vbmNlIiwiYWRkTmFtZUZvcklkIiwiaWQiLCJyZXNldElkTmFtZXMiLCJoYXNOYW1lRm9ySWQiLCJzdHJpbmdpZnlOYW1lcyIsInRyaW0iLCJzaGVldEZvclRhZyIsInRhZyIsInNoZWV0Iiwib3duZXJEb2N1bWVudCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2FmZUluc2VydFJ1bGUiLCJjc3NSdWxlIiwibWF4SW5kZXgiLCJjc3NSdWxlcyIsImluc2VydFJ1bGUiLCJtYWtlVGV4dE1hcmtlciIsImFkZFVwVW50aWxJbmRleCIsInNpemVzIiwidG90YWxVcFRvSW5kZXgiLCJ3cmFwQXNIdG1sVGFnIiwiYWRkaXRpb25hbEF0dHJzIiwibm9uY2UiLCJTQ19WRVJTSU9OX0FUVFIiLCJ3cmFwQXNFbGVtZW50IiwiX3Byb3BzIiwiY3JlYXRlRWxlbWVudCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5IiwibWFya2VycyIsIm1ha2VUZXh0Tm9kZSIsInRhcmdldERvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJtYWtlU2VydmVyVGFnIiwibmFtZXNBcmciLCJtYXJrZXJzQXJnIiwiaW5zZXJ0TWFya2VyIiwicHJldiIsImNzc0ZvcklkIiwibmFtZXNDbG9uZSIsImNsb25lTmFtZXMiLCJtYXJrZXJzQ2xvbmUiLCJnZXRJZHMiLCJpbnNlcnRSdWxlcyIsInJlbW92ZVJ1bGVzIiwibWFya2VyIiwic2VhbGVkIiwic3R5bGVUYWciLCJ0b0VsZW1lbnQiLCJ0b0hUTUwiLCJtYWtlVGFnIiwidGFnRWwiLCJmb3JjZVNlcnZlciIsImluc2VydEJlZm9yZSIsImdldEltcG9ydFJ1bGVUYWciLCJlbCIsImRvY3VtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwibmV4dFNpYmxpbmciLCJtYWtlU3R5bGVUYWciLCJleHRyYWN0SW1wb3J0IiwidXNlZEltcG9ydFJ1bGVUYWciLCJpbXBvcnRSdWxlcyIsImNzc1J1bGVzU2l6ZSIsIm1heUhhdmVJbXBvcnQiLCJhcHBlbmREYXRhIiwibmV3TWFya2VyIiwicmVwbGFjZUNoaWxkIiwibWFrZUJyb3dzZXJUYWciLCJlbmQiLCJjc3NUZXh0IiwiaW5zZXJ0SW5kZXgiLCJpbmplY3RlZFJ1bGVzIiwiaXNDb25uZWN0ZWQiLCJyZW1vdmFsSW5kZXgiLCJsb3dlckJvdW5kIiwiZGVsZXRlUnVsZSIsImRlbGV0ZVJ1bGVzIiwibWFrZVNwZWVkeVRhZyIsIlNQTElUX1JFR0VYIiwiTUFYX1NJWkUiLCJzaGVldFJ1bm5pbmdJZCIsIm1hc3RlciIsIlN0eWxlU2hlZXQiLCJoZWFkIiwiaW1wb3J0UnVsZVRhZyIsImZpcnN0VGFnIiwidGFncyIsInRhZ01hcCIsImRlZmVycmVkIiwicmVoeWRyYXRlZE5hbWVzIiwiaWdub3JlUmVoeWRyYXRlZE5hbWVzIiwiY2FwYWNpdHkiLCJjbG9uZXMiLCJyZWh5ZHJhdGUiLCJlbHMiLCJleHRyYWN0ZWQiLCJpc1N0cmVhbWVkIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibm9kZXNTaXplIiwiZ2V0QXR0cmlidXRlIiwiZWxOYW1lcyIsImVsTmFtZXNTaXplIiwidGV4dENvbnRlbnQiLCJleHRyYWN0ZWRTaXplIiwiX2V4dHJhY3RlZCRpIiwicmVtb3ZlQ2hpbGQiLCJfaiIsInJlc2V0IiwiaWRzIiwibmV3VGFnIiwic2VhbEFsbFRhZ3MiLCJsYXN0RWwiLCJnZXRUYWdGb3JJZCIsImhhc0lkIiwiZGVmZXJyZWRJbmplY3QiLCJpbmplY3QiLCJyZW1vdmUiLCJ0b1JlYWN0RWxlbWVudHMiLCJLZXlmcmFtZXMiLCJzdHlsZVNoZWV0IiwiZ2V0TmFtZSIsInVwcGVyY2FzZVBhdHRlcm4iLCJtc1BhdHRlcm4iLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJpc0ZhbHNpc2giLCJjaHVuayIsIm9ialRvQ3NzQXJyYXkiLCJwcmV2S2V5IiwiZmxhdHRlbiIsImV4ZWN1dGlvbkNvbnRleHQiLCJydWxlU2V0IiwiaXNSZWFjdENvbXBvbmVudCIsInN0eWxlcyIsIm11cm11cmhhc2giLCJjaGFyQ29kZUF0IiwiZ2V0QWxwaGFiZXRpY0NoYXIiLCJmcm9tQ2hhckNvZGUiLCJnZW5lcmF0ZUFscGhhYmV0aWNOYW1lIiwiaXNTdGF0aWNSdWxlcyIsImF0dHJzIiwiaGFzRnVuY3Rpb25PYmplY3RLZXkiLCJfVFlQRV9TVEFUSUNTIiwiaGFzaGVyIiwiQ29tcG9uZW50U3R5bGUiLCJpc1N0YXRpYyIsImdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzIiwibGFzdENsYXNzTmFtZSIsImdlbmVyYXRlTmFtZSIsImRldGVybWluZVRoZW1lIiwiZmFsbGJhY2tUaGVtZSIsImRlZmF1bHRQcm9wcyIsImlzRGVmYXVsdFRoZW1lIiwidGhlbWUiLCJlc2NhcGVSZWdleCIsImRhc2hlc0F0RW5kcyIsImVzY2FwZSIsImlzVGFnIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGVzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiVFlQRV9TVEFUSUNTIiwiJCR0eXBlb2YiLCJyZW5kZXIiLCJkZWZpbmVQcm9wZXJ0eSQxIiwiX09iamVjdCRnZXRPd25Qcm9wZXJ0Iiwib2JqZWN0UHJvdG90eXBlIiwiYXJyYXlQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiVGhlbWVDb250ZXh0IiwiVGhlbWVDb25zdW1lciIsIkNvbnN1bWVyIiwiU3R5bGVTaGVldENvbnRleHQiLCJfQ29tcG9uZW50IiwiVGhlbWVQcm92aWRlciIsImdldENvbnRleHQiLCJyZW5kZXJJbm5lciIsImNoaWxkcmVuIiwib3V0ZXJUaGVtZSIsIlByb3ZpZGVyIiwiZ2V0VGhlbWUiLCJTZXJ2ZXJTdHlsZVNoZWV0IiwibWFzdGVyU2hlZXQiLCJzZWFsIiwic3BsaWNlIiwiY29sbGVjdFN0eWxlcyIsIlN0eWxlU2hlZXRNYW5hZ2VyIiwiZ2V0U3R5bGVUYWdzIiwiZ2V0U3R5bGVFbGVtZW50IiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwicmVhZGFibGVTdHJlYW0iLCJTdHlsZVNoZWV0Q29uc3VtZXIiLCJpZGVudGlmaWVycyIsIlN0eWxlZENvbXBvbmVudCIsInJlbmRlck91dGVyIiwiZm9yd2FyZGVkQ29tcG9uZW50IiwiY29tcG9uZW50U3R5bGUiLCJfcHJvcHMkZm9yd2FyZGVkQ29tcG8iLCJmb2xkZWRDb21wb25lbnRJZHMiLCJnZW5lcmF0ZWRDbGFzc05hbWUiLCJlbGVtZW50VG9CZUNyZWF0ZWQiLCJpc1RhcmdldFRhZyIsInByb3BzRm9yRWxlbWVudCIsImNvbXB1dGVkUHJvcHMiLCJyZWYiLCJzdHlsZSIsImNsYXNzTmFtZSIsImJ1aWxkRXhlY3V0aW9uQ29udGV4dCIsIl90aGlzMiIsImF0dHJEZWYiLCJyZXNvbHZlZEF0dHJEZWYiLCJhdHRyRGVmV2FzRm4iLCJhdHRyIiwiX3Byb3BzJGZvcndhcmRlZENvbXBvMiIsIndhcm5Ub29NYW55Q2xhc3NlcyIsImNyZWF0ZVN0eWxlZENvbXBvbmVudCIsImlzVGFyZ2V0U3R5bGVkQ29tcCIsImlzQ2xhc3MiLCJfb3B0aW9ucyRkaXNwbGF5TmFtZSIsImdlbmVyYXRlRGlzcGxheU5hbWUiLCJfb3B0aW9ucyRjb21wb25lbnRJZCIsIl9Db21wb25lbnRTdHlsZSIsIl9kaXNwbGF5TmFtZSIsInBhcmVudENvbXBvbmVudElkIiwibnIiLCJnZW5lcmF0ZUlkIiwiX29wdGlvbnMkUGFyZW50Q29tcG9uIiwiUGFyZW50Q29tcG9uZW50IiwiX29wdGlvbnMkYXR0cnMiLCJmaW5hbEF0dHJzIiwiV3JhcHBlZFN0eWxlZENvbXBvbmVudCIsImZvcndhcmRSZWYiLCJmb3J3YXJkZWRSZWYiLCJ3aXRoQ29tcG9uZW50IiwicHJldmlvdXNDb21wb25lbnRJZCIsIm9wdGlvbnNUb0NvcHkiLCJvYmplY3RXaXRob3V0UHJvcGVydGllcyIsIm5ld0NvbXBvbmVudElkIiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsInN0eWxlZCIsImNvbnN0cnVjdFdpdGhPcHRpb25zIiwiY29tcG9uZW50Q29uc3RydWN0b3IiLCJ0ZW1wbGF0ZUZ1bmN0aW9uIiwid2l0aENvbmZpZyIsImRvbUVsZW1lbnQiLCJHbG9iYWxTdHlsZSIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsImNyZWF0ZUdsb2JhbFN0eWxlIiwiSlNPTiIsIkdsb2JhbFN0eWxlQ29tcG9uZW50IiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzJGNvbnN0cnVjdG9yIiwiZ2xvYmFsU3R5bGUiLCJzY0NHU0hNUkNhY2hlIiwic3RhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkNvbXBvbmVudCIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwidGhpc0FyZyIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJhY3RlciIsImZyb21Db2RlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwibGVmdCIsInJpZ2h0IiwidG9Qcm9wZXJ0eUtleSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9uZXh0IiwiX3Rocm93IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImFyZ3YiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsInRyYW5zZm9ybSIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwiZ2V0UHJvdG90eXBlIiwiaXNPYmplY3RMaWtlIiwiaXNIb3N0T2JqZWN0IiwiQ3RvciIsIm1hcFNpemVEZXNjcmlwdG9yIiwiaGFzTWFwIiwibWFwU2l6ZSIsIm1hcEZvckVhY2giLCJoYXNTZXQiLCJzZXRTaXplRGVzY3JpcHRvciIsInNldFNpemUiLCJzZXRGb3JFYWNoIiwid2Vha01hcEhhcyIsIndlYWtTZXRIYXMiLCJ3ZWFrUmVmRGVyZWYiLCJXZWFrUmVmIiwiZGVyZWYiLCJib29sZWFuVmFsdWVPZiIsImZ1bmN0aW9uVG9TdHJpbmciLCIkbWF0Y2giLCIkc2xpY2UiLCIkcmVwbGFjZSIsIiR0b1VwcGVyQ2FzZSIsIiR0b0xvd2VyQ2FzZSIsIiR0ZXN0IiwiJGNvbmNhdCIsIiRqb2luIiwiJGFyclNsaWNlIiwiJGZsb29yIiwiYmlnSW50VmFsdWVPZiIsIkJpZ0ludCIsImdPUFMiLCJzeW1Ub1N0cmluZyIsImhhc1NoYW1tZWRTeW1ib2xzIiwiaXNFbnVtZXJhYmxlIiwiZ1BPIiwiUmVmbGVjdCIsIk8iLCJhZGROdW1lcmljU2VwYXJhdG9yIiwibnVtIiwiSW5maW5pdHkiLCJzZXBSZWdleCIsImludCIsImludFN0ciIsImRlYyIsInV0aWxJbnNwZWN0IiwiaW5zcGVjdEN1c3RvbSIsImN1c3RvbSIsImluc3BlY3RTeW1ib2wiLCJpc1N5bWJvbCIsInF1b3RlcyIsInNpbmdsZSIsInF1b3RlUkVzIiwid3JhcFF1b3RlcyIsImRlZmF1bHRTdHlsZSIsIm9wdHMiLCJxdW90ZVN0eWxlIiwicXVvdGVDaGFyIiwicXVvdGUiLCJjYW5UcnVzdFRvU3RyaW5nIiwidG9TdHIiLCJpc1JlZ0V4cCIsImluc3BlY3RfIiwiZGVwdGgiLCJzZWVuIiwibWF4U3RyaW5nTGVuZ3RoIiwiY3VzdG9tSW5zcGVjdCIsImluZGVudCIsIm51bWVyaWNTZXBhcmF0b3IiLCJpbnNwZWN0U3RyaW5nIiwicmVtYWluaW5nIiwidHJhaWxlciIsInF1b3RlUkUiLCJsb3dieXRlIiwiYmlnSW50U3RyIiwibWF4RGVwdGgiLCJiYXNlSW5kZW50IiwiZ2V0SW5kZW50Iiwibm9JbmRlbnQiLCJuZXdPcHRzIiwibmFtZU9mIiwiYXJyT2JqS2V5cyIsInN5bVN0cmluZyIsIm1hcmtCb3hlZCIsIkhUTUxFbGVtZW50Iiwibm9kZU5hbWUiLCJpc0VsZW1lbnQiLCJhdHRyaWJ1dGVzIiwiY2hpbGROb2RlcyIsInhzIiwic2luZ2xlTGluZVZhbHVlcyIsImluZGVudGVkSm9pbiIsImlzRXJyb3IiLCJjYXVzZSIsImlzTWFwIiwibWFwUGFydHMiLCJjb2xsZWN0aW9uT2YiLCJpc1NldCIsInNldFBhcnRzIiwiaXNXZWFrTWFwIiwid2Vha0NvbGxlY3Rpb25PZiIsImlzV2Vha1NldCIsImlzV2Vha1JlZiIsIk51bWJlciIsImlzQmlnSW50IiwiaXNCb29sZWFuIiwieXMiLCJwcm90b1RhZyIsInN0cmluZ1RhZyIsImhhc093biIsIjgiLCI5IiwiMTAiLCIxMiIsIjEzIiwiZW50cmllcyIsImxpbmVKb2luZXIiLCJpc0FyciIsInN5bU1hcCIsInN5bXMiLCJpbXBsZW1lbnRhdGlvbiIsInZpc2l0IiwidmlzaXRQYXJlbnRzIiwiQ09OVElOVUUiLCJTS0lQIiwiRVhJVCIsInRyZWUiLCJ2aXNpdG9yIiwicmV2ZXJzZSIsInBhcmVudHMiLCJwYXJlbnQiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0IiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCIkT2JqZWN0IiwiJEVycm9yIiwiJEV2YWxFcnJvciIsIiRSYW5nZUVycm9yIiwiJFJlZmVyZW5jZUVycm9yIiwiJFN5bnRheEVycm9yIiwiJFR5cGVFcnJvciIsIiRVUklFcnJvciIsIiRGdW5jdGlvbiIsImdldEV2YWxsZWRDb25zdHJ1Y3RvciIsImV4cHJlc3Npb25TeW50YXgiLCIkZ09QRCIsIiRkZWZpbmVQcm9wZXJ0eSIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWVUaHJvd3MiLCJnT1BEdGhyb3dzIiwiaGFzU3ltYm9scyIsImdldFByb3RvIiwiJE9iamVjdEdQTyIsIiRSZWZsZWN0R1BPIiwiJGFwcGx5IiwiJGNhbGwiLCJuZWVkc0V2YWwiLCJUeXBlZEFycmF5IiwiVWludDhBcnJheSIsIklOVFJJTlNJQ1MiLCJBZ2dyZWdhdGVFcnJvciIsIkF0b21pY3MiLCJCaWdJbnQ2NEFycmF5IiwiQmlnVWludDY0QXJyYXkiLCJEYXRhVmlldyIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsImV2YWwiLCJGbG9hdDE2QXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJGaW5hbGl6YXRpb25SZWdpc3RyeSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiUHJveHkiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsImVycm9yUHJvdG8iLCJMRUdBQ1lfQUxJQVNFUyIsIiRzcGxpY2VBcHBseSIsIiRzdHJTbGljZSIsIiRleGVjIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsImZpcnN0IiwibGFzdCIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJhbGxvd01pc3NpbmciLCJpbnRyaW5zaWNOYW1lIiwiZG9FdmFsIiwiZ2VuIiwiaW50cmluc2ljQmFzZU5hbWUiLCJpbnRyaW5zaWMiLCJpbnRyaW5zaWNSZWFsTmFtZSIsInNraXBGdXJ0aGVyQ2FjaGluZyIsImlzT3duIiwicGFydCIsImRlc2MiLCJwZXJjZW50VHdlbnRpZXMiLCJGb3JtYXQiLCJmb3JtYXR0ZXJzIiwiUkZDMTczOCIsIlJGQzM5ODYiLCJsZWdhY3kiLCJkZWNpbWFsIiwiaGV4YWRlY2ltYWwiLCJhbHBoYW51bWVyaWNhbCIsImRlY29kZUVudGl0eSIsIm9wdGlvbiIsInNldHRpbmdzIiwicG9zaXRpb24iLCJzdGFydCIsImVudGl0eUNoYXJhY3RlcnMiLCJuYW1lZEVudGl0eSIsInRlcm1pbmF0ZWQiLCJjaGFyYWN0ZXJzIiwicmVmZXJlbmNlIiwiZm9sbG93aW5nIiwid2FybmluZyIsInJlYXNvbiIsImVudGl0eSIsImJlZ2luIiwiYWRkaXRpb25hbCIsIm5vblRlcm1pbmF0ZWQiLCJoYW5kbGVUZXh0IiwidGV4dCIsImhhbmRsZVJlZmVyZW5jZSIsImhhbmRsZVdhcm5pbmciLCJ0ZXh0Q29udGV4dCIsInJlZmVyZW5jZUNvbnRleHQiLCJ3YXJuaW5nQ29udGV4dCIsImxpbmVzIiwiY29sdW1uIiwibGluZSIsIm1lc3NhZ2VzIiwiaGV4YSIsInRlc3RzIiwib3duIiwiYXR0cmlidXRlIiwiYmFzZXMiLCJkaXNhbGxvd2VkIiwiZmx1c2giLCJwYXJzZSIsImludGVycnVwdG9ycyIsInRva2VuaXplcnMiLCJjdHgiLCJpbnRlcnJ1cHRvciIsImJvb2wiLCJpZ25vcmUiLCJib29scyIsImNvdW50IiwiY29sbGFwc2VXaGl0ZVNwYWNlIiwiX2dldFByb3RvdHlwZU9mIiwiQSIsIkMiLCJ2IiwiJCIsInoiLCJOIiwiUyIsInEiLCJCIiwiSSIsIkoiLCJUIiwiVSIsIlYiLCJaIiwiYmUiLCJwZSIsImtlIiwiZ2UiLCJBZSIsIkNlIiwid2UiLCJ2ZSIsIm1lIiwieGUiLCIkZSIsInllIiwiT2UiLCJxZSIsIkJlIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJSIiwiamUiLCJ6ZSIsIkplIiwiUmUiLCJUZSIsIlVlIiwiVmUiLCJYZSIsIlllIiwiUWUiLCJzdWJzdHJpbmciLCJQZSIsIkllIiwiTWUiLCJMZSIsIktlIiwic2FmZUlzTmFOIiwiYXJlSW5wdXRzRXF1YWwiLCJuZXdJbnB1dHMiLCJsYXN0SW5wdXRzIiwicmVzdWx0Rm4iLCJpc0VxdWFsIiwibGFzdFRoaXMiLCJsYXN0UmVzdWx0IiwibGFzdEFyZ3MiLCJjYWxsZWRPbmNlIiwibmV3QXJncyIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0b1ByaW1pdGl2ZSIsInV0aWxzIiwiZW5jb2RlIiwidXJsIiwic2VyaWFsaXplZFBhcmFtcyIsImhhc2htYXJrSW5kZXgiLCJfX0NBTkNFTF9fIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsImJ0b2EiLCJmdWxsUGF0aCIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwicmVhZCIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwiYXhpb3NLZXlzIiwib3RoZXJLZXlzIiwiQ2FuY2VsIiwiR2V0SW50cmluc2ljIiwiY2FsbEJvdW5kIiwiJE1hcCIsIiRtYXBHZXQiLCIkbWFwU2V0IiwiJG1hcEhhcyIsIiRtYXBEZWxldGUiLCIkbWFwU2l6ZSIsIiRtIiwiY2hhbm5lbCIsImFzc2VydCIsIiRhY3R1YWxBcHBseSIsImNhbGxCaW5kQmFzaWMiLCIkaW5kZXhPZiIsImhleFRhYmxlIiwiYXJyYXlUb09iamVjdCIsInBsYWluT2JqZWN0cyIsImFjYyIsImNvbWJpbmUiLCJjb21wYWN0IiwicmVmcyIsInBvcCIsImNvbXBhY3RlZCIsImNvbXBhY3RRdWV1ZSIsImRlY29kZSIsImRlZmF1bHREZWNvZGVyIiwiY2hhcnNldCIsInN0cldpdGhvdXRQbHVzIiwiZGVmYXVsdEVuY29kZXIiLCJraW5kIiwiJDAiLCJzZWdtZW50IiwibWF5YmVNYXAiLCJtYXBwZWQiLCJhbGxvd1Byb3RvdHlwZXMiLCJtZXJnZVRhcmdldCIsInRhcmdldEl0ZW0iLCJtb21lbnQiLCJzeW1ib2xNYXAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiMCIsIm51bWJlck1hcCIsInBsdXJhbEZvcm0iLCJwbHVyYWxzIiwicGx1cmFsaXplIiwid2Vla2RheXNQYXJzZUV4YWN0Iiwic3VmZml4ZXMiLCI3MCIsIjgwIiwiMjAiLCI1MCIsIjEwMCIsIjMwIiwiNjAiLCI5MCIsInJlbGF0aXZlVGltZVdpdGhQbHVyYWwiLCJmb3JtcyIsInN0YW5kYWxvbmUiLCJsYXN0RGlnaXQiLCJsYXN0MkRpZ2l0cyIsIm1vbnRoc1BhcnNlRXhhY3QiLCJyZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24iLCJtdXRhdGlvblRhYmxlIiwic29mdE11dGF0aW9uIiwibXV0YXRpb24iLCJtaW5XZWVrZGF5c1BhcnNlIiwiZnVsbFdlZWtkYXlzUGFyc2UiLCJzaG9ydFdlZWtkYXlzUGFyc2UiLCJtb250aHNTdHJpY3RSZWdleCIsIm1vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJsb25nTW9udGhzUGFyc2UiLCJzaG9ydE1vbnRoc1BhcnNlIiwibGFzdE51bWJlciIsInRyYW5zbGF0ZSIsImxsIiwibGxsIiwibGxsbCIsInBsdXJhbCIsInByb2Nlc3NSZWxhdGl2ZVRpbWUiLCJtb250aHNOb21pbmF0aXZlRWwiLCJtb250aHNHZW5pdGl2ZUVsIiwibW9tZW50VG9Gb3JtYXQiLCJfbW9udGhzR2VuaXRpdmVFbCIsIl9tb250aHNOb21pbmF0aXZlRWwiLCJjYWxlbmRhckVsIiwiX2NhbGVuZGFyRWwiLCJtb250aHNTaG9ydERvdCIsIm51bWJlcnNQYXN0IiwibnVtYmVyc0Z1dHVyZSIsInZlcmJhbE51bWJlciIsIm1vbnRoc1Nob3J0V2l0aERvdHMiLCJtb250aHNTaG9ydFdpdGhvdXREb3RzIiwid2Vla0VuZGluZ3MiLCJlcmFZZWFyT3JkaW5hbFJlZ2V4IiwiJDEiLCIkMiIsIjQwIiwiaXNVcHBlciIsImluY2x1ZGVzIiwiZXphZmVOdW1TdWZmaXgiLCJlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIiLCJ0cmFuc2xhdGVTaW5ndWxhciIsInNwZWNpYWwiLCJyZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIiLCJ0cmFuc2xhdG9yIiwid29yZHMiLCJjb3JyZWN0R3JhbW1hdGljYWxDYXNlIiwid29yZEtleSIsInJlbGF0aXZlVGltZU1yIiwibW9udGhzTm9taW5hdGl2ZSIsIm1vbnRoc1N1YmplY3RpdmUiLCJ3b3JkIiwibnVtYmVyc05vdW5zIiwibnVtYmVyTm91biIsImh1bmRyZWQiLCJ0ZW4iLCJvbmUiLCJudW1iZXJBc05vdW4iLCJwcm9jZXNzSG91cnNGdW5jdGlvbiIsIm5vbWluYXRpdmUiLCJhY2N1c2F0aXZlIiwiZ2VuaXRpdmUiLCJub3JtYWxpemVBcnJheSIsImFsbG93QWJvdmVSb290IiwidXAiLCJ1bnNoaWZ0IiwicmVzb2x2ZWRQYXRoIiwicmVzb2x2ZWRBYnNvbHV0ZSIsInBhdGgiLCJub3JtYWxpemUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsInBhdGhzIiwicmVsYXRpdmUiLCJmcm9tUGFydHMiLCJ0b1BhcnRzIiwic2FtZVBhcnRzTGVuZ3RoIiwib3V0cHV0UGFydHMiLCJzZXAiLCJkZWxpbWl0ZXIiLCJkaXJuYW1lIiwiaGFzUm9vdCIsIm1hdGNoZWRTbGFzaCIsImJhc2VuYW1lIiwiZXh0IiwiZXh0bmFtZSIsInN0YXJ0RG90Iiwic3RhcnRQYXJ0IiwicHJlRG90U3RhdGUiLCJnZm0iLCJjb21tb25tYXJrIiwiZm9vdG5vdGVzIiwicGVkYW50aWMiLCJibG9ja3MiLCJzdG9wcyIsIm9wZW5UYWciLCJjbG9zZVRhZyIsIm9wZW5DbG9zZVRhZyIsImZyb21JbmRleCIsImxpbmsiLCJpbWFnZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwidG9TaGVldCIsImJsb2NrIiwiYXQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIkFib3J0RXJyb3IiLCJzdXBlciIsImN1cnJlbnRUaWNrIiwiYWN0aXZlQ291bnQiLCJzdHJpY3RUaWNrcyIsImdldERlbGF5IiwiZWFybGllc3RUaW1lIiwiZnVuY3Rpb25fIiwidGhyb3R0bGVkIiwiaXNFbmFibGVkIiwiZGVsZXRlIiwiY2xlYXIiLCJzZXJpYWxpemVyIiwicmVwbGFjZXIiLCJjeWNsZVJlcGxhY2VyIiwidGhpc1BvcyIsInNwYWNlcyIsImdldFNlcmlhbGl6ZSIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwieHRlbmQiLCJ1bmlmaWVkIiwiUHJvcFR5cGVzIiwiYWRkTGlzdE1ldGFkYXRhIiwibmFpdmVIdG1sIiwiZGlzYWxsb3dOb2RlIiwiYXN0VG9SZWFjdCIsIndyYXBUYWJsZVJvd3MiLCJnZXREZWZpbml0aW9ucyIsInVyaVRyYW5zZm9ybWVyIiwiZGVmYXVsdFJlbmRlcmVycyIsImFsbFR5cGVzIiwiUmVhY3RNYXJrZG93biIsInNyYyIsInBhcnNlck9wdGlvbnMiLCJhbGxvd2VkVHlwZXMiLCJkaXNhbGxvd2VkVHlwZXMiLCJyZW5kZXJlcnMiLCJwYXJzZXIiLCJwbHVnaW5zIiwiYXBwbHlQYXJzZXJQbHVnaW4iLCJyYXdBc3QiLCJyZW5kZXJQcm9wcyIsImRlZmluaXRpb25zIiwiYXN0UGx1Z2lucyIsInJlbW92YWxNZXRob2QiLCJ1bndyYXBEaXNhbGxvd2VkIiwib2ZUeXBlIiwiYWxsb3dOb2RlIiwiaWZOb3RNYXRjaCIsInJlbmRlckh0bWwiLCJlc2NhcGVIdG1sIiwic2tpcEh0bWwiLCJoYXNIdG1sUGFyc2VyIiwiaWRlbnRpdHkiLCJIdG1sUGFyc2VyIiwiZGV0ZXJtaW5lQXN0UGx1Z2lucyIsInRyYW5zZm9ybWVkQXN0IiwicnVuU3luYyIsImFzdCIsInBsdWdpbiIsInNvdXJjZVBvcyIsInJhd1NvdXJjZVBvcyIsInRyYW5zZm9ybUxpbmtVcmkiLCJhcnJheU9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJsaW5rVGFyZ2V0IiwidHJhbnNmb3JtSW1hZ2VVcmkiLCJ0eXBlcyIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwicmVhY3RQcm9wc1JlZ2V4IiwiZ2V0VHlwZSIsInBheWxvYWQiLCJpc051bGwiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiamwiLCJhc3NpZ25Qcm9wIiwiY2FycnkiLCJuZXdWYWwiLCJvcmlnaW5hbE9iamVjdCIsInByb3BUeXBlIiwibWVyZ2VSZWN1cnNpdmVseSIsIm9yaWdpbiIsIm5ld0NvbWVyIiwiZXh0ZW5zaW9ucyIsIm5ld09iamVjdCIsInRhcmdldFZhbCIsIm5ld0NvbWVycyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJ1cGRhdGVyIiwiRyIsIkgiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJjdXJyZW50IiwiSyIsIl9fc2VsZiIsIl9fc291cmNlIiwiX293bmVyIiwiUCIsImtleVByZWZpeCIsImFhIiwiWCIsIlkiLCJiYSIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwib25seSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJjb21wYXJlIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRm9yd2FyZFJlZiIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImFzeW5jSXRlcmF0b3IiLCJkZWZpbmUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl9fYXdhaXQiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJkZWxlZ2F0ZVlpZWxkIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwiaGFuZGxlcnMiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRocm93SWZSZXF1ZXN0ZWQiLCJmbnMiLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsImRlc2NyaXB0aW9uIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZWFyY2giLCJoYXNoIiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwiZ2V0U2lkZUNoYW5uZWwiLCJhcnJheVByZWZpeEdlbmVyYXRvcnMiLCJicmFja2V0cyIsImNvbW1hIiwiaW5kaWNlcyIsInJlcGVhdCIsInB1c2hUb0FycmF5IiwidmFsdWVPckFycmF5IiwidG9JU08iLCJhZGRRdWVyeVByZWZpeCIsImFsbG93RG90cyIsImFsbG93RW1wdHlBcnJheXMiLCJhcnJheUZvcm1hdCIsImNoYXJzZXRTZW50aW5lbCIsImNvbW1hUm91bmRUcmlwIiwiZW5jb2RlRG90SW5LZXlzIiwiZW5jb2RlciIsImVuY29kZVZhbHVlc09ubHkiLCJmb3JtYXR0ZXIiLCJzZXJpYWxpemVEYXRlIiwic2tpcE51bGxzIiwic3RyaWN0TnVsbEhhbmRsaW5nIiwic2VudGluZWwiLCJnZW5lcmF0ZUFycmF5UHJlZml4Iiwic2lkZUNoYW5uZWwiLCJ0bXBTYyIsImZpbmRGbGFnIiwiUmFuZ2VFcnJvciIsIm9iaktleXMiLCJlbmNvZGVkUHJlZml4IiwiYWRqdXN0ZWRQcmVmaXgiLCJlbmNvZGVkS2V5IiwidmFsdWVTaWRlQ2hhbm5lbCIsIm5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMiLCJqb2luZWQiLCJnZXRTaWRlQ2hhbm5lbExpc3QiLCJnZXRTaWRlQ2hhbm5lbE1hcCIsIm1ha2VDaGFubmVsIiwiJGNoYW5uZWxEYXRhIiwibGlzdEdldE5vZGUiLCJsaXN0IiwiaXNEZWxldGUiLCJjdXJyIiwiJG8iLCJyb290IiwiZGVsZXRlZE5vZGUiLCJvYmplY3RzIiwibGlzdERlbGV0ZSIsImxpc3RHZXQiLCJsaXN0SGFzIiwibGlzdFNldCIsIkV2YWxFcnJvciIsIlN5bnRheEVycm9yIiwiVVJJRXJyb3IiLCIkaXNOYU4iLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsInN5bU9iaiIsInJlZmxlY3RHZXRQcm90byIsIm9yaWdpbmFsR2V0UHJvdG8iLCJnZXREdW5kZXJQcm90byIsImhhc1Byb3RvQWNjZXNzb3IiLCJjYWxsQmluZCIsImdPUEQiLCIkZ2V0UHJvdG90eXBlT2YiLCJFUlJPUl9NRVNTQUdFIiwiY29uY2F0dHkiLCJzbGljeSIsImFyckxpa2UiLCJqb2lueSIsImpvaW5lciIsImJvdW5kIiwiYmluZGVyIiwiYm91bmRMZW5ndGgiLCJib3VuZEFyZ3MiLCJFbXB0eSIsIiRyZWZsZWN0QXBwbHkiLCIkaGFzT3duIiwiJFdlYWtNYXAiLCIkd2Vha01hcEdldCIsIiR3ZWFrTWFwU2V0IiwiJHdlYWtNYXBIYXMiLCIkd2Vha01hcERlbGV0ZSIsIiR3bSIsImFsbG93U3BhcnNlIiwiYXJyYXlMaW1pdCIsImRlY29kZURvdEluS2V5cyIsImRlY29kZXIiLCJkdXBsaWNhdGVzIiwiaWdub3JlUXVlcnlQcmVmaXgiLCJpbnRlcnByZXROdW1lcmljRW50aXRpZXMiLCJwYXJhbWV0ZXJMaW1pdCIsInBhcnNlQXJyYXlzIiwic3RyaWN0RGVwdGgiLCJ0aHJvd09uTGltaXRFeGNlZWRlZCIsIm51bWJlclN0ciIsInBhcnNlQXJyYXlWYWx1ZSIsImN1cnJlbnRBcnJheUxlbmd0aCIsInBhcnNlS2V5cyIsImdpdmVuS2V5IiwidmFsdWVzUGFyc2VkIiwiY2hpbGQiLCJwYXJlbnRLZXkiLCJsZWFmIiwiY2xlYW5Sb290IiwiZGVjb2RlZFJvb3QiLCJwYXJzZU9iamVjdCIsIm5vcm1hbGl6ZVBhcnNlT3B0aW9ucyIsInRlbXBPYmoiLCJjbGVhblN0ciIsInNraXBJbmRleCIsImJyYWNrZXRFcXVhbHNQb3MiLCJlbmNvZGVkVmFsIiwiZXhpc3RpbmciLCJwYXJzZVZhbHVlcyIsIm5ld09iaiIsIndlYnBhY2tQb2x5ZmlsbCIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiYXJyYXlMaWtlVG9BcnJheSIsImJhaWwiLCJ2ZmlsZSIsInRyb3VnaCIsInBsYWluIiwiYXR0YWNoZXJzIiwidHJhbnNmb3JtZXJzIiwibmFtZXNwYWNlIiwiZnJvemVuIiwiZnJlZXplSW5kZXgiLCJwcm9jZXNzb3IiLCJhc3NlcnRVbmZyb3plbiIsImFkZFBsdWdpbiIsImFkZExpc3QiLCJhZGRQcmVzZXQiLCJlbnRyeSIsImZpbmQiLCJkb2MiLCJQYXJzZXIiLCJmaWxlIiwiYXNzZXJ0UGFyc2VyIiwibmV3YWJsZSIsIkNvbXBpbGVyIiwiYXNzZXJ0Q29tcGlsZXIiLCJhc3NlcnROb2RlIiwiY29tcGlsZSIsImFzc2VydERvbmUiLCJwcm9jZXNzU3luYyIsImRlc3RpbmF0aW9uIiwidHJhbnNmb3JtZXIiLCJjYiIsInBpcGVsaW5lIiwiY29udGVudHMiLCJhc3luY05hbWUiLCJoYXNPd25Db25zdHJ1Y3RvciIsImhhc0lzUHJvdG90eXBlT2YiLCJzZXRQcm9wZXJ0eSIsIm5ld1ZhbHVlIiwiZ2V0UHJvcGVydHkiLCJjb3B5SXNBcnJheSIsImRlZXAiLCJWTWVzc2FnZSIsIlZGaWxlIiwiZmlsZVBhdGgiLCJmYXRhbCIsImluZm8iLCJmYWlsIiwiVk1lc3NhZ2VQcm90b3R5cGUiLCJyYW5nZSIsInBhcnNlT3JpZ2luIiwicnVsZUlkIiwicG9pbnQiLCJlbmNvZGluZyIsImhpc3RvcnkiLCJhc3NlcnRQYXJ0IiwiYXNzZXJ0Tm9uRW1wdHkiLCJhc3NlcnRQYXRoIiwic3RlbSIsIm5wYXRoIiwibkZpbGVOYW1lIiwicmVhZEZsb2F0TEUiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCJtaWRkbGV3YXJlIiwiaW52b2tlZCIsInVuaGVyaXQiLCJMb2NhbCIsIlN1cGVyIiwiT2YiLCJGcm9tIiwicGFyYW1ldGVycyIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsInRvZ2dsZSIsInZmaWxlTG9jYXRpb24iLCJ0b2tlbml6ZXIiLCJzZXRPcHRpb25zIiwiaW5MaXN0IiwiaW5CbG9jayIsImluTGluayIsImF0U3RhcnQiLCJ0b09mZnNldCIsImV4aXRTdGFydCIsImVudGVyTGlzdCIsImVudGVyTGluayIsImVudGVyQmxvY2siLCJpbnRlcnJ1cHRQYXJhZ3JhcGgiLCJpbnRlcnJ1cHRMaXN0IiwiaW50ZXJydXB0QmxvY2txdW90ZSIsImJsb2NrVG9rZW5pemVycyIsIm5ld2xpbmUiLCJpbmRlbnRlZENvZGUiLCJmZW5jZWRDb2RlIiwiYmxvY2txdW90ZSIsImF0eEhlYWRpbmciLCJ0aGVtYXRpY0JyZWFrIiwic2V0ZXh0SGVhZGluZyIsImh0bWwiLCJmb290bm90ZSIsImRlZmluaXRpb24iLCJ0YWJsZSIsInBhcmFncmFwaCIsImlubGluZVRva2VuaXplcnMiLCJhdXRvTGluayIsInN0cm9uZyIsImVtcGhhc2lzIiwiZGVsZXRpb24iLCJicmVhayIsImJsb2NrTWV0aG9kcyIsImlubGluZU1ldGhvZHMiLCJ0b2tlbml6ZUJsb2NrIiwidG9rZW5pemVJbmxpbmUiLCJ0b2tlbml6ZUZhY3RvcnkiLCJvZmZzZXRUb1Bvc2l0aW9uRmFjdG9yeSIsInBvc2l0aW9uVG9PZmZzZXRGYWN0b3J5IiwidG9Qb3NpdGlvbiIsImVudGl0aWVzIiwicmF3Iiwib2Zmc2V0cyIsImhhbmRsZXIiLCJhbHBoYWJldGljYWwiLCJjaGFyIiwiaW5uZXJIVE1MIiwidmFsdWVMZW5ndGgiLCJtZXRob2RzIiwiZWF0IiwidXBkYXRlUG9zaXRpb24iLCJvbmx5QXRTdGFydCIsIm5vdEluTGlzdCIsIm5vdEluQmxvY2siLCJub3RJbkxpbmsiLCJlb2YiLCJzdWJ2YWx1ZSIsIlBvc2l0aW9uIiwiYmVmb3JlIiwiaW5kZW50YXRpb24iLCJnZXRPZmZzZXQiLCJjb21iaW5lZCIsInZhbGlkYXRlRWF0IiwiTUVSR0VBQkxFX05PREVTIiwibWVyZ2VhYmxlIiwiZXNjYXBlcyIsInJlbW92ZVBvc2l0aW9uIiwiRVhQUkVTU0lPTl9MSU5FX0JSRUFLUyIsImhhcmQiLCJzb2Z0IiwiZm9yY2UiLCJjb252ZXJ0IiwiaXMiLCJzdWJyZXN1bHQiLCJ0b1Jlc3VsdCIsInR5cGVGYWN0b3J5Iiwib2siLCJhbnlGYWN0b3J5IiwibWF0Y2hlc0ZhY3RvcnkiLCJjaGVja3MiLCJyZXN1bHRzIiwiY29udmVydEFsbCIsIndoaXRlc3BhY2UiLCJzaWxlbnQiLCJibGFua1F1ZXVlIiwic3VidmFsdWVRdWV1ZSIsImNvbnRlbnRRdWV1ZSIsIkNPREVfSU5ERU5UIiwiZmVuY2VDb3VudCIsImZsYWciLCJleGRlbnRlZENvbnRlbnQiLCJjbG9zaW5nIiwiZXhkZW50ZWRDbG9zaW5nIiwiaW50ZXJydXB0IiwicmVzdCIsIm5leHRJbmRleCIsInN0YXJ0SW5kZXgiLCJwcmVmaXhlZCIsImV4aXQiLCJjdXJyZW50TGluZSIsImluZGVudHMiLCJtYXJrZXJDb3VudCIsInJlbW92ZUluZGVudCIsIm9yZGVyZWQiLCJjdXJyZW50TWFya2VyIiwicHJldkVtcHR5IiwiaXRlbXMiLCJhbGxMaW5lcyIsImVtcHR5TGluZXMiLCJlbnRlclRvcCIsImV4aXRCbG9ja3F1b3RlIiwiaXNMb29zZSIsImluZGVudGVkIiwiaW50ZXJ1cHRvcnMiLCJMSVNUX09SREVSRURfQ09NTU9OTUFSS19NQVJLRVJTIiwiTElTVF9PUkRFUkVEX01BUktFUlMiLCJMSVNUX1VOT1JERVJFRF9NQVJLRVJTIiwiVEFCX1NJWkUiLCJ0cmFpbCIsImxvb3NlIiwibGlzdEl0ZW0iLCJFWFBSRVNTSU9OX0xPT1NFX0xJU1RfSVRFTSIsIkVYUFJFU1NJT05fVEFTS19JVEVNIiwiRVhQUkVTU0lPTl9CVUxMRVQiLCJFWFBSRVNTSU9OX1BFREFOVElDX0JVTExFVCIsIkVYUFJFU1NJT05fSU5JVElBTF9JTkRFTlQiLCJ0YXNrIiwicGVkYW50aWNMaXN0SXRlbSIsIm5vcm1hbExpc3RJdGVtIiwiY2hlY2tlZCIsImJ1bGxldCIsInRyaW1tZWRMaW5lcyIsIiQzIiwiJDQiLCJtYXhpbXVtIiwicGFkZGluZyIsIm1pbkluZGVudCIsIm1hdHJpeCIsIlNFVEVYVF9NQVJLRVJTIiwic2VxdWVuY2UiLCJzZXF1ZW5jZXMiLCJmb290bm90ZURlZmluaXRpb24iLCJFWFBSRVNTSU9OX0lOSVRJQUxfVEFCIiwic3VicXVldWUiLCJpZGVudGlmaWVyIiwiQ19CUkFDS0VUX09QRU4iLCJiZWZvcmVVUkwiLCJiZWZvcmVUaXRsZSIsImlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIiLCJpc1VuY2xvc2VkVVJMQ2hhcmFjdGVyIiwiYWxpZ25tZW50cyIsImFsaWdubWVudCIsInJvdyIsImhhc0Rhc2giLCJhbGlnbiIsImNlbGwiLCJwcmVhbWJsZSIsIm9wZW5pbmciLCJsaW5lQ291bnQiLCJyb3dzIiwibGluZUluZGV4IiwicGlwZUluZGV4IiwidHJpbVRyYWlsaW5nTGluZXMiLCJsb2NhdGUiLCJsb2NhdG9yIiwiTUFJTFRPX0xFTkdUSCIsImhhc0F0Q2hhcmFjdGVyIiwiUFJPVE9DT0xTIiwiUFJPVE9DT0xTX0xFTkdUSCIsInBhcmVuQ291bnQiLCJuZXh0Q2hhcmFjdGVyIiwiaW5saW5lSFRNTCIsIkVYUFJFU1NJT05fSFRNTF9MSU5LX09QRU4iLCJFWFBSRVNTSU9OX0hUTUxfTElOS19DTE9TRSIsIkxJTktfTUFSS0VSUyIsIkNPTU1PTk1BUktfTElOS19NQVJLRVJTIiwiY2xvc2VkIiwiaGFzTWFya2VyIiwiaXNJbWFnZSIsImFsdCIsImJyYWNrZXRlZCIsImludHJvIiwicmVmZXJlbmNlVHlwZSIsImFzdGVyaXNrIiwidW5kZXJzY29yZSIsInN0cmlrZXRocm91Z2giLCJwcmV2aW91cyIsInByZWNlZGluZyIsImlubGluZUNvZGUiLCJvcGVuaW5nQ291bnQiLCJmb3VuZCIsInRpY2tRdWV1ZSIsImhhcmRCcmVhayIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYmlnaW50IiwiYW55IiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwidmlzaXRXaXRoUGFyZW50cyIsImxpc3ROb2RlIiwic2VsZkNsb3NpbmdSZSIsInNpbXBsZVRhZ1JlIiwiY3VycmVudFBhcmVudCIsInNlbGZDbG9zaW5nIiwiZ2V0U2VsZkNsb3NpbmciLCJnZXRTaW1wbGVUYWciLCJtYXRjaGluZyIsIm1hdGNoaW5nVGFnIiwiZmluZEFuZFB1bGwiLCJmcm9tTm9kZSIsInRvTm9kZSIsInRvSW5kZXgiLCJ2aXJ0dWFsIiwidW50YW5nbGUiLCJkaXNhbGxvdyIsIlJlYWN0IiwiUmVhY3RJcyIsImRlZmF1bHROb2RlUG9zaXRpb24iLCJyZW5kZXJlciIsIm5vZGVQcm9wcyIsImdldE5vZGVQcm9wcyIsInJlc29sdmVDaGlsZHJlbiIsImNoaWxkTm9kZSIsImlzVGFnUmVuZGVyZXIiLCJzb3VyY2VQb3NpdGlvbiIsImluY2x1ZGVOb2RlSW5kZXgiLCJwYXJlbnRDaGlsZENvdW50IiwiYXNzaWduRGVmaW5lZCIsIm5vZGVLZXkiLCJ0aWdodCIsInVud3JhcFBhcmFncmFwaHMiLCJnZXRMaXN0SXRlbUNoaWxkcmVuIiwibGFuZ3VhZ2UiLCJpbmxpbmUiLCJjb2x1bW5BbGlnbm1lbnQiLCJpc0hlYWRlciIsImlzQmxvY2siLCJwYXJzZWRDaGlsZHJlbiIsIm1lcmdlTm9kZUNoaWxkcmVuIiwiZGVmcyIsInByb3RvY29scyIsInVyaSIsImNvbG9uIiwic3VwcG9ydHNTdHJpbmdSZW5kZXIiLCJTaW1wbGVSZW5kZXJlciIsImdldENvcmVQcm9wcyIsImxpbmtSZWZlcmVuY2UiLCJpbWFnZVJlZmVyZW5jZSIsInRhYmxlSGVhZCIsInRhYmxlQm9keSIsInRhYmxlUm93IiwidGFibGVDZWxsIiwidGV4dEFsaWduIiwiY29yZVByb3BzIiwidXNlRnJhZ21lbnQiLCJjaGVja2JveCIsInJlYWRPbmx5IiwiaGVhZGluZyIsImNvbXAiLCJ2aXJ0dWFsSHRtbCIsInBhcnNlZEh0bWwiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsImRlcGVuZGVuY2llcyIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsInN0YXRlTm9kZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJVYSIsIlZhIiwieGxpbmtIcmVmIiwiV2EiLCJYYSIsIlNhIiwiVGEiLCJSYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJwYiIsInFiIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJyYiIsInNiIiwieGIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRiIiwieWIiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJhY3RpdmVFbGVtZW50IiwiR2IiLCJGYiIsIkhiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJmaXJzdENoaWxkIiwiUmIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsIlNiIiwiVGIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYiIsIlZiIiwiV2IiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImVjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJmYyIsImhjIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwicmMiLCJldmVudFN5c3RlbUZsYWdzIiwic2MiLCJjb250YWluZXJJbmZvIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJLYyIsImJsb2NrZWRPbiIsImNvbnRhaW5lciIsIkxjIiwicG9pbnRlcklkIiwiTWMiLCJOYyIsIlBjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiaHlkcmF0ZSIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJPYyIsImpkIiwiZ3JpZEFyZWEiLCJsaW5lQ2xhbXAiLCJrZCIsImxkIiwibWQiLCJuZCIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwib2QiLCJwZCIsInFkIiwicmQiLCJzZCIsInRkIiwiYm9keSIsInVkIiwidmQiLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJIZCIsIklkIiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiY2UiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJlZSIsImV2ZW50UG9vbCIsImZlIiwiZGVzdHJ1Y3RvciIsImRlIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiaGUiLCJpZSIsImRvY3VtZW50TW9kZSIsImxlIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJrZXlDb2RlIiwiZGV0YWlsIiwic2UiLCJ3aGljaCIsInRlIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJ1ZSIsImNvbG9yIiwiZGF0ZXRpbWUiLCJlbWFpbCIsInRlbCIsImNoYW5nZSIsIkZlIiwiZGV0YWNoRXZlbnQiLCJhdHRhY2hFdmVudCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlNlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsIm9mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInJmIiwic2YiLCJkYXRhVHJhbnNmZXIiLCJ0ZiIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJxZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwicmciLCJzZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ0ZyIsInVnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJiYXNlUXVldWUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInZnIiwid2ciLCJzdXNwZW5zZUNvbmZpZyIsInhnIiwieWciLCJ6ZyIsImNhIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiSmciLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiR2ciLCJIZyIsIklnIiwiS2ciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJMZyIsImNvbnRleHRUeXBlIiwiTWciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJOZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiT2ciLCJQZyIsIl9zdHJpbmdSZWYiLCJRZyIsIlJnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImVoIiwiZmgiLCJnaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ1aCIsInZoIiwid2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJ4aCIsInloIiwiemgiLCJBaCIsImRlc3Ryb3kiLCJkZXBzIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJyZWFkQ29udGV4dCIsInVzZVJlc3BvbmRlciIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwicGVuZGluZ1Byb3BzIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImhpIiwicGVuZGluZ0NvbnRleHQiLCJuaSIsInBpIiwicWkiLCJyZXRyeVRpbWUiLCJqaSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJraSIsImxpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIm1pIiwicmkiLCJzaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJmb2N1cyIsIktpIiwiTGkiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiUmkiLCJTaSIsIlRpIiwiZGlzcGxheSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJhaiIsImNvbXBvbmVudFN0YWNrIiwiUmoiLCJiaiIsImNqIiwiZGoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJ0aW1lb3V0TXMiLCJ4aiIsInlqIiwiemoiLCJsYXN0RXhwaXJlZFRpbWUiLCJBaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZEV4cGlyYXRpb25UaW1lIiwibGFzdFN1c3BlbmRlZFRpbWUiLCJJaiIsInRpbWVvdXRIYW5kbGUiLCJKaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJLaiIsIk1qIiwiTmoiLCJwaW5nQ2FjaGUiLCJPaiIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJ3ZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwidmIiLCJVaiIsIlZqIiwiV2oiLCJoaWRkZW4iLCJvYiIsIlhqIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiWmoiLCJwZW5kaW5nQ2hpbGRyZW4iLCJhayIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJKYyIsIl9pbnRlcm5hbFJvb3QiLCJnayIsImlrIiwiaGFzQXR0cmlidXRlIiwiaGsiLCJqayIsImtrIiwidW5tb3VudCIsImZvcm0iLCJMaiIsImxrIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIllqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInBlcmZvcm1hbmNlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIk5hdiIsImRpdiIsInBhbGV0dGUiLCJjbGFzcyIsInNlY3Rpb24iLCJ0b3RhbFBhZ2VzIiwicnBwIiwibWl4aW5TdHJpbmdpZnlTYWZlIiwibGlua1R5cGUiLCJjaXJjdWxhciIsInNsaWNlSXRlcmF0b3IiLCJVTlJFU09MVkVEX0xJTksiLCJsb29rdXBJbkVudGl0eU1hcCIsImVudGl0eU1hcCIsImxpbmtEYXRhIiwiZW50cnlJZCIsInNwYWNlSWQiLCJlbnZpcm9ubWVudElkIiwiZ2V0UmVzb2x2ZWRMaW5rIiwiX2xpbmskc3lzIiwic3RhcnRzV2l0aCIsIl9nZXRJZHNGcm9tVXJuIiwidXJuIiwiX3VybiRtYXRjaCIsIl91cm4kbWF0Y2gyIiwiX3VybiRtYXRjaDIkIiwiZ2V0SWRzRnJvbVVybiIsIl9lbnRyeUlkIiwiZXh0cmFjdGVkTGlua1R5cGUiLCJ3YWxrTXV0YXRlIiwicHJlZGljYXRlIiwibXV0YXRvciIsInJlbW92ZVVucmVzb2x2ZWQiLCJjbGVhblVwTGlua3MiLCJyZXNwb25zZUNsb25lIiwiYWxsSW5jbHVkZXMiLCJhbGxFbnRyaWVzIiwiZW52aXJvbm1lbnQiLCJlbnRyeU9iamVjdCIsIml0ZW1FbnRyeVBvaW50cyIsIm93bktleSIsImVudHJ5T2JqIiwiZW50cnlQb2ludCIsIm1ha2VFbnRyeU9iamVjdCIsImlzUmVzb3VyY2VMaW5rIiwicmVzb2x2ZWRMaW5rIiwibm9ybWFsaXplTGluayIsIndyYXBwZWREYXRhIiwid3JhcExvY2FsZSIsImFzc2V0IiwiY29udGVudFR5cGUiLCJfb2JqZWN0U3ByZWFkIiwicGFnZWRTeW5jIiwiaHR0cCIsImluaXRpYWwiLCJuZXh0U3luY1Rva2VuIiwibmV4dFBhZ2VUb2tlbiIsImNvbnRlbnRfdHlwZSIsImRlZmF1bHRPcHRpb25zIiwicGFnaW5hdGUiLCJfZGVmYXVsdE9wdGlvbnMkb3B0aW8iLCJzeW5jT3B0aW9ucyIsImdldFN5bmNQYWdlIiwibWFwcGVkUmVzcG9uc2VJdGVtcyIsIm1hcFJlc3BvbnNlSXRlbXMiLCJyZWR1Y2VyIiwiYWNjdW11bGF0ZWQiLCJhc3NldHMiLCJkZWxldGVkRW50cmllcyIsImRlbGV0ZWRBc3NldHMiLCJzeW5jX3Rva2VuIiwibmV4dFBhZ2VVcmwiLCJuZXh0U3luY1VybCIsInVybFBhcnRzIiwibm9ybWFsaXplU2VsZWN0IiwiYWxsU2VsZWN0cyIsInNlbGVjdGVkU2V0IiwiY3JlYXRlQ29udGVudGZ1bEFwaSIsImdldEdsb2JhbE9wdGlvbnMiLCJ3cmFwU3BhY2UiLCJfZW50aXRpZXMkY29udGVudFR5cGUiLCJ3cmFwQ29udGVudFR5cGUiLCJ3cmFwQ29udGVudFR5cGVDb2xsZWN0aW9uIiwiX2VudGl0aWVzJGVudHJ5Iiwid3JhcEVudHJ5Iiwid3JhcEVudHJ5Q29sbGVjdGlvbiIsIl9lbnRpdGllcyRhc3NldCIsIndyYXBBc3NldCIsIndyYXBBc3NldENvbGxlY3Rpb24iLCJ3cmFwTG9jYWxlQ29sbGVjdGlvbiIsIm5vdEZvdW5kRXJyb3IiLCJkZXRhaWxzIiwiZXJyb3JIYW5kbGVyIiwic3dpdGNoVG9FbnZpcm9ubWVudCIsImVudmlyb25tZW50QmFzZVVybCIsImdldFNwYWNlIiwic3BhY2VCYXNlVXJsIiwic3dpdGNoVG9TcGFjZSIsImdldENvbnRlbnRUeXBlIiwiZ2V0Q29udGVudFR5cGVzIiwiZ2V0RW50cnkiLCJnZXRFbnRyaWVzIiwiX2dldEdsb2JhbE9wdGlvbnMiLCJnZXRBc3NldCIsImdldEFzc2V0cyIsImdldExvY2FsZXMiLCJwYXJzZUVudHJpZXMiLCJfZ2V0R2xvYmFsT3B0aW9uczMiLCJzeW5jIiwiX2dldEdsb2JhbE9wdGlvbnMyIiwiY2xpZW50IiwidXNlckFnZW50SGVhZGVyIiwiZ2xvYmFsU2V0dGluZ3MiLCJfaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJfaGVhZGVyIiwib2JzY3VyZUF1dGhUb2tlbkluUmVzcG9uc2UiLCJjcmVhdGVDbGllbnQiLCJCbG9nQ29udGV4dCIsIkJsb2dQcm92aWRlciIsIl91c2VTdGF0ZSIsImVudHJ5TGlzdCIsInBhZ2UiLCJfdXNlU3RhdGUyIiwidXNlQmxvZyIsIl91c2VDb250ZXh0IiwiX3VzZUNvbnRleHQyIiwic2V0UGFnZSIsInNldEVudHJ5IiwiQmxvZyIsInNlYXJjaFBhcmFtcyIsIkVudHJ5TGlzdCIsIl91c2VCbG9nIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9jYWxsZWUiLCJza2lwIiwiZmV0Y2hEYXRhIiwiZmllbGRzIiwic2x1ZyIsImNyZWF0ZWRBdCIsInRodW1iIiwiUGFnaW5hdG9yIiwiUG9zdCIsIkJsb2dQb3N0IiwibWV0YWRhdGEiLCJUYWciLCJTZWxlY3RlZFRhZyIsIkhvbWUiLCJIb21lUGFnZSIsIk1haW4iLCJNYWluQ29udGFpbmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NhbGxTdXBlciIsIl9jcmVhdGVDbGFzcyIsInBhcnNlZFVybCIsIl9wYXJzZVVybCIsIlVSTCIsInRhZ09yUG9zdElkIiwibWlkZGxlIiwiV29yayIsIk5hdmlnYXRpb24iLCJ3cmFwcGVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJSZWFjdERPTSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxJQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksSyxtQkNsRnJELFlBT21FaEMsRUFBT0QsUUFHbEUsV0FBZSxhQUVuQixJQUFJa0MsRUE2SEFDLEVBM0hKLFNBQVNDLElBQ0wsT0FBT0YsRUFBYUcsTUFBTSxLQUFNQyxXQVNwQyxTQUFTQyxFQUFRQyxHQUNiLE9BQ0lBLGFBQWlCQyxPQUN5QixtQkFBMUM3QixPQUFPa0IsVUFBVVksU0FBU3JDLEtBQUttQyxHQUl2QyxTQUFTRyxFQUFTSCxHQUdkLE9BQ2EsTUFBVEEsR0FDMEMsb0JBQTFDNUIsT0FBT2tCLFVBQVVZLFNBQVNyQyxLQUFLbUMsR0FJdkMsU0FBU0ksRUFBV0MsRUFBR0MsR0FDbkIsT0FBT2xDLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3dDLEVBQUdDLEdBR25ELFNBQVNDLEVBQWNDLEdBQ25CLEdBQUlwQyxPQUFPcUMsb0JBQ1AsT0FBa0QsSUFBM0NyQyxPQUFPcUMsb0JBQW9CRCxHQUFLRSxPQUV2QyxJQUFJQyxFQUNKLElBQUtBLEtBQUtILEVBQ04sR0FBSUosRUFBV0ksRUFBS0csR0FDaEIsT0FBTyxFQUdmLE9BQU8sRUFJZixTQUFTQyxFQUFZWixHQUNqQixZQUFpQixJQUFWQSxFQUdYLFNBQVNhLEVBQVNiLEdBQ2QsTUFDcUIsaUJBQVZBLEdBQ21DLG9CQUExQzVCLE9BQU9rQixVQUFVWSxTQUFTckMsS0FBS21DLEdBSXZDLFNBQVNjLEVBQU9kLEdBQ1osT0FDSUEsYUFBaUJlLE1BQ3lCLGtCQUExQzNDLE9BQU9rQixVQUFVWSxTQUFTckMsS0FBS21DLEdBSXZDLFNBQVNnQixFQUFJQyxFQUFLQyxHQUNkLElBQ0l4RCxFQURBeUQsRUFBTSxHQUVOQyxFQUFTSCxFQUFJUCxPQUNqQixJQUFLaEQsRUFBSSxFQUFHQSxFQUFJMEQsSUFBVTFELEVBQ3RCeUQsRUFBSUUsS0FBS0gsRUFBR0QsRUFBSXZELEdBQUlBLElBRXhCLE9BQU95RCxFQUdYLFNBQVNHLEVBQU9qQixFQUFHQyxHQUNmLElBQUssSUFBSTVDLEtBQUs0QyxFQUNORixFQUFXRSxFQUFHNUMsS0FDZDJDLEVBQUUzQyxHQUFLNEMsRUFBRTVDLElBWWpCLE9BUkkwQyxFQUFXRSxFQUFHLGNBQ2RELEVBQUVILFNBQVdJLEVBQUVKLFVBR2ZFLEVBQVdFLEVBQUcsYUFDZEQsRUFBRWtCLFFBQVVqQixFQUFFaUIsU0FHWGxCLEVBR1gsU0FBU21CLEVBQVV4QixFQUFPeUIsRUFBUUMsRUFBUUMsR0FDdEMsT0FBT0MsR0FBaUI1QixFQUFPeUIsRUFBUUMsRUFBUUMsR0FBUSxHQUFNRSxNQXlCakUsU0FBU0MsRUFBZ0JoRSxHQUlyQixPQUhhLE1BQVRBLEVBQUVpRSxNQUNGakUsRUFBRWlFLElBdEJDLENBQ0hDLE9BQU8sRUFDUEMsYUFBYyxHQUNkQyxZQUFhLEdBQ2JDLFVBQVcsRUFDWEMsY0FBZSxFQUNmQyxXQUFXLEVBQ1hDLFdBQVksS0FDWkMsYUFBYyxLQUNkQyxlQUFlLEVBQ2ZDLGlCQUFpQixFQUNqQkMsS0FBSyxFQUNMQyxnQkFBaUIsR0FDakJDLElBQUssS0FDTEMsU0FBVSxLQUNWQyxTQUFTLEVBQ1RDLGlCQUFpQixJQVFkakYsRUFBRWlFLElBc0JiLFNBQVNpQixFQUFRbEYsR0FDYixJQUFJbUYsRUFBUSxLQUNSQyxHQUFjLEVBQ2RDLEVBQWFyRixFQUFFc0YsS0FBT0MsTUFBTXZGLEVBQUVzRixHQUFHRSxXQXlCckMsT0F4QklILElBQ0FGLEVBQVFuQixFQUFnQmhFLEdBQ3hCb0YsRUFBY3ZELEVBQUs5QixLQUFLb0YsRUFBTU4saUJBQWlCLFNBQVVqRixHQUNyRCxPQUFZLE1BQUxBLEtBRVh5RixFQUNJRixFQUFNZCxTQUFXLElBQ2hCYyxFQUFNakIsUUFDTmlCLEVBQU1YLGFBQ05XLEVBQU1WLGVBQ05VLEVBQU1NLGlCQUNOTixFQUFNRixrQkFDTkUsRUFBTVosWUFDTlksRUFBTVQsZ0JBQ05TLEVBQU1SLG1CQUNMUSxFQUFNSixVQUFhSSxFQUFNSixVQUFZSyxHQUN2Q3BGLEVBQUUwRixVQUNGTCxFQUNJQSxHQUN3QixJQUF4QkYsRUFBTWIsZUFDd0IsSUFBOUJhLEVBQU1oQixhQUFhdkIsYUFDRCtDLElBQWxCUixFQUFNUyxVQUdLLE1BQW5CdEYsT0FBT3VGLFVBQXFCdkYsT0FBT3VGLFNBQVM3RixHQUdyQ3FGLEdBRlByRixFQUFFOEYsU0FBV1QsRUFJVnJGLEVBQUU4RixVQUdiLFNBQVNDLEVBQWNaLEdBQ25CLElBQUluRixFQUFJMEQsRUFBVXNDLEtBT2xCLE9BTmEsTUFBVGIsRUFDQTNCLEVBQU9RLEVBQWdCaEUsR0FBSW1GLEdBRTNCbkIsRUFBZ0JoRSxHQUFHMkUsaUJBQWtCLEVBR2xDM0UsRUE3RFA2QixFQURBTSxNQUFNWCxVQUFVSyxLQUNUTSxNQUFNWCxVQUFVSyxLQUVoQixTQUFVb0UsR0FDYixJQUVJckcsRUFGQWtCLEVBQUlSLE9BQU80RixNQUNYQyxFQUFNckYsRUFBRThCLFNBQVcsRUFHdkIsSUFBS2hELEVBQUksRUFBR0EsRUFBSXVHLEVBQUt2RyxJQUNqQixHQUFJQSxLQUFLa0IsR0FBS21GLEVBQUlsRyxLQUFLbUcsS0FBTXBGLEVBQUVsQixHQUFJQSxFQUFHa0IsR0FDbEMsT0FBTyxFQUlmLE9BQU8sR0FxRGYsSUFBSXNGLEVBQW9CdEUsRUFBTXNFLGlCQUFtQixHQUM3Q0MsR0FBbUIsRUFFdkIsU0FBU0MsRUFBV0MsRUFBSUMsR0FDcEIsSUFBSTVHLEVBQ0E2RyxFQUNBQyxFQUNBQyxFQUFzQlAsRUFBaUJ4RCxPQWlDM0MsR0EvQktFLEVBQVkwRCxFQUFLSSxvQkFDbEJMLEVBQUdLLGlCQUFtQkosRUFBS0ksa0JBRTFCOUQsRUFBWTBELEVBQUtLLE1BQ2xCTixFQUFHTSxHQUFLTCxFQUFLSyxJQUVaL0QsRUFBWTBELEVBQUtNLE1BQ2xCUCxFQUFHTyxHQUFLTixFQUFLTSxJQUVaaEUsRUFBWTBELEVBQUtPLE1BQ2xCUixFQUFHUSxHQUFLUCxFQUFLTyxJQUVaakUsRUFBWTBELEVBQUtkLFdBQ2xCYSxFQUFHYixRQUFVYyxFQUFLZCxTQUVqQjVDLEVBQVkwRCxFQUFLUSxRQUNsQlQsRUFBR1MsS0FBT1IsRUFBS1EsTUFFZGxFLEVBQVkwRCxFQUFLUyxVQUNsQlYsRUFBR1UsT0FBU1QsRUFBS1MsUUFFaEJuRSxFQUFZMEQsRUFBS1UsV0FDbEJYLEVBQUdXLFFBQVVWLEVBQUtVLFNBRWpCcEUsRUFBWTBELEVBQUt2QyxPQUNsQnNDLEVBQUd0QyxJQUFNRCxFQUFnQndDLElBRXhCMUQsRUFBWTBELEVBQUtXLFdBQ2xCWixFQUFHWSxRQUFVWCxFQUFLVyxTQUdsQlIsRUFBc0IsRUFDdEIsSUFBSy9HLEVBQUksRUFBR0EsRUFBSStHLEVBQXFCL0csSUFHNUJrRCxFQURMNEQsRUFBTUYsRUFETkMsRUFBT0wsRUFBaUJ4RyxPQUdwQjJHLEVBQUdFLEdBQVFDLEdBS3ZCLE9BQU9ILEVBSVgsU0FBU2EsRUFBT0MsR0FDWmYsRUFBV0osS0FBTW1CLEdBQ2pCbkIsS0FBS1osR0FBSyxJQUFJckMsS0FBa0IsTUFBYm9FLEVBQU8vQixHQUFhK0IsRUFBTy9CLEdBQUdFLFVBQVlRLEtBQ3hERSxLQUFLaEIsWUFDTmdCLEtBQUtaLEdBQUssSUFBSXJDLEtBQUsrQyxPQUlFLElBQXJCSyxJQUNBQSxHQUFtQixFQUNuQnZFLEVBQU13RixhQUFhcEIsTUFDbkJHLEdBQW1CLEdBSTNCLFNBQVNrQixFQUFTN0UsR0FDZCxPQUNJQSxhQUFlMEUsR0FBa0IsTUFBUDFFLEdBQXVDLE1BQXhCQSxFQUFJa0UsaUJBSXJELFNBQVNZLEVBQUtDLElBRWdDLElBQXRDM0YsRUFBTTRGLDZCQUNhLG9CQUFaQyxTQUNQQSxRQUFRSCxNQUVSRyxRQUFRSCxLQUFLLHdCQUEwQkMsR0FJL0MsU0FBU0csRUFBVUgsRUFBS3JFLEdBQ3BCLElBQUl5RSxHQUFZLEVBRWhCLE9BQU9yRSxHQUFPLFdBSVYsR0FIZ0MsTUFBNUIxQixFQUFNZ0csb0JBQ05oRyxFQUFNZ0csbUJBQW1CLEtBQU1MLEdBRS9CSSxFQUFXLENBQ1gsSUFDSUUsRUFDQW5JLEVBQ0F1QixFQUhBNkcsRUFBTyxHQUlQQyxFQUFTakcsVUFBVVksT0FDdkIsSUFBS2hELEVBQUksRUFBR0EsRUFBSXFJLEVBQVFySSxJQUFLLENBRXpCLEdBREFtSSxFQUFNLEdBQ3NCLGlCQUFqQi9GLFVBQVVwQyxHQUFpQixDQUVsQyxJQUFLdUIsS0FETDRHLEdBQU8sTUFBUW5JLEVBQUksS0FDUG9DLFVBQVUsR0FDZE0sRUFBV04sVUFBVSxHQUFJYixLQUN6QjRHLEdBQU81RyxFQUFNLEtBQU9hLFVBQVUsR0FBR2IsR0FBTyxNQUdoRDRHLEVBQU1BLEVBQUlHLE1BQU0sR0FBSSxRQUVwQkgsRUFBTS9GLFVBQVVwQyxHQUVwQm9JLEVBQUt6RSxLQUFLd0UsR0FFZFAsRUFDSUMsRUFDSSxnQkFDQXRGLE1BQU1YLFVBQVUwRyxNQUFNbkksS0FBS2lJLEdBQU1HLEtBQUssSUFDdEMsTUFDQSxJQUFJQyxPQUFRQyxPQUVwQlIsR0FBWSxFQUVoQixPQUFPekUsRUFBR3JCLE1BQU1tRSxLQUFNbEUsYUFDdkJvQixHQUdQLElBZ0ZJa0YsRUFoRkFDLEVBQWUsR0FFbkIsU0FBU0MsRUFBZ0JySSxFQUFNc0gsR0FDSyxNQUE1QjNGLEVBQU1nRyxvQkFDTmhHLEVBQU1nRyxtQkFBbUIzSCxFQUFNc0gsR0FFOUJjLEVBQWFwSSxLQUNkcUgsRUFBS0MsR0FDTGMsRUFBYXBJLElBQVEsR0FPN0IsU0FBU3NJLEVBQVd2RyxHQUNoQixNQUN5QixvQkFBYndHLFVBQTRCeEcsYUFBaUJ3RyxVQUNYLHNCQUExQ3BJLE9BQU9rQixVQUFVWSxTQUFTckMsS0FBS21DLEdBMkJ2QyxTQUFTeUcsRUFBYUMsRUFBY0MsR0FDaEMsSUFDSXBDLEVBREFwRCxFQUFNRyxFQUFPLEdBQUlvRixHQUVyQixJQUFLbkMsS0FBUW9DLEVBQ0x2RyxFQUFXdUcsRUFBYXBDLEtBQ3BCcEUsRUFBU3VHLEVBQWFuQyxLQUFVcEUsRUFBU3dHLEVBQVlwQyxLQUNyRHBELEVBQUlvRCxHQUFRLEdBQ1pqRCxFQUFPSCxFQUFJb0QsR0FBT21DLEVBQWFuQyxJQUMvQmpELEVBQU9ILEVBQUlvRCxHQUFPb0MsRUFBWXBDLEtBQ0YsTUFBckJvQyxFQUFZcEMsR0FDbkJwRCxFQUFJb0QsR0FBUW9DLEVBQVlwQyxVQUVqQnBELEVBQUlvRCxJQUl2QixJQUFLQSxLQUFRbUMsRUFFTHRHLEVBQVdzRyxFQUFjbkMsS0FDeEJuRSxFQUFXdUcsRUFBYXBDLElBQ3pCcEUsRUFBU3VHLEVBQWFuQyxNQUd0QnBELEVBQUlvRCxHQUFRakQsRUFBTyxHQUFJSCxFQUFJb0QsS0FHbkMsT0FBT3BELEVBR1gsU0FBU3lGLEVBQU96QixHQUNFLE1BQVZBLEdBQ0FuQixLQUFLNkMsSUFBSTFCLEdBbUNqQixTQUFTMkIsRUFBU0MsRUFBUUMsRUFBY0MsR0FDcEMsSUFBSUMsRUFBWSxHQUFLQyxLQUFLQyxJQUFJTCxHQUMxQk0sRUFBY0wsRUFBZUUsRUFBVXhHLE9BRTNDLE9BRFdxRyxHQUFVLEVBRVJFLEVBQVksSUFBTSxHQUFNLEtBQ2pDRSxLQUFLRyxJQUFJLEdBQUlILEtBQUtJLElBQUksRUFBR0YsSUFBY25ILFdBQVdzSCxPQUFPLEdBQ3pETixFQTFHUnRILEVBQU00Riw2QkFBOEIsRUFDcEM1RixFQUFNZ0csbUJBQXFCLEtBc0V2QlEsRUFEQWhJLE9BQU9nSSxLQUNBaEksT0FBT2dJLEtBRVAsU0FBVTVGLEdBQ2IsSUFBSTlDLEVBQ0F5RCxFQUFNLEdBQ1YsSUFBS3pELEtBQUs4QyxFQUNGSixFQUFXSSxFQUFLOUMsSUFDaEJ5RCxFQUFJRSxLQUFLM0QsR0FHakIsT0FBT3lELEdBNkJmLElBQUlzRyxFQUNJLHlNQUNKQyxFQUF3Qiw2Q0FDeEJDLEVBQWtCLEdBQ2xCQyxFQUF1QixHQU0zQixTQUFTQyxFQUFlQyxFQUFPQyxFQUFRQyxFQUFTQyxHQUM1QyxJQUFJQyxFQUFPRCxFQUNhLGlCQUFiQSxJQUNQQyxFQUFPLFdBQ0gsT0FBT2xFLEtBQUtpRSxPQUdoQkgsSUFDQUYsRUFBcUJFLEdBQVNJLEdBRTlCSCxJQUNBSCxFQUFxQkcsRUFBTyxJQUFNLFdBQzlCLE9BQU9qQixFQUFTb0IsRUFBS3JJLE1BQU1tRSxLQUFNbEUsV0FBWWlJLEVBQU8sR0FBSUEsRUFBTyxNQUduRUMsSUFDQUosRUFBcUJJLEdBQVcsV0FDNUIsT0FBT2hFLEtBQUttRSxhQUFhSCxRQUNyQkUsRUFBS3JJLE1BQU1tRSxLQUFNbEUsV0FDakJnSSxLQXVDaEIsU0FBU00sRUFBYXRLLEVBQUcyRCxHQUNyQixPQUFLM0QsRUFBRWtGLFdBSVB2QixFQUFTNEcsRUFBYTVHLEVBQVEzRCxFQUFFcUssY0FDaENSLEVBQWdCbEcsR0FDWmtHLEVBQWdCbEcsSUFqQ3hCLFNBQTRCQSxHQUN4QixJQUNJL0QsRUFDQWdELEVBVndCVixFQVF4QnNJLEVBQVE3RyxFQUFPOEcsTUFBTWQsR0FJekIsSUFBSy9KLEVBQUksRUFBR2dELEVBQVM0SCxFQUFNNUgsT0FBUWhELEVBQUlnRCxFQUFRaEQsSUFDdkNrSyxFQUFxQlUsRUFBTTVLLElBQzNCNEssRUFBTTVLLEdBQUtrSyxFQUFxQlUsRUFBTTVLLElBRXRDNEssRUFBTTVLLElBaEJjc0MsRUFnQmNzSSxFQUFNNUssSUFmdEM2SyxNQUFNLFlBQ0x2SSxFQUFNd0ksUUFBUSxXQUFZLElBRTlCeEksRUFBTXdJLFFBQVEsTUFBTyxJQWdCNUIsT0FBTyxTQUFVQyxHQUNiLElBQ0kvSyxFQURBZ0wsRUFBUyxHQUViLElBQUtoTCxFQUFJLEVBQUdBLEVBQUlnRCxFQUFRaEQsSUFDcEJnTCxHQUFVbkMsRUFBVytCLEVBQU01SyxJQUNyQjRLLEVBQU01SyxHQUFHRyxLQUFLNEssRUFBS2hILEdBQ25CNkcsRUFBTTVLLEdBRWhCLE9BQU9nTCxHQVlvQkMsQ0FBbUJsSCxHQUUzQ2tHLEVBQWdCbEcsR0FBUTNELElBUHBCQSxFQUFFcUssYUFBYVMsY0FVOUIsU0FBU1AsRUFBYTVHLEVBQVFDLEdBQzFCLElBQUloRSxFQUFJLEVBRVIsU0FBU21MLEVBQTRCN0ksR0FDakMsT0FBTzBCLEVBQU9vSCxlQUFlOUksSUFBVUEsRUFJM0MsSUFEQTBILEVBQXNCcUIsVUFBWSxFQUMzQnJMLEdBQUssR0FBS2dLLEVBQXNCc0IsS0FBS3ZILElBQ3hDQSxFQUFTQSxFQUFPK0csUUFDWmQsRUFDQW1CLEdBRUpuQixFQUFzQnFCLFVBQVksRUFDbENyTCxHQUFLLEVBR1QsT0FBTytELEVBa0ZYLElBQUl3SCxFQUFVLENBQ1ZDLEVBQUcsT0FDSEMsTUFBTyxPQUNQQyxLQUFNLE9BQ05wTCxFQUFHLE1BQ0hxTCxLQUFNLE1BQ05DLElBQUssTUFDTEMsRUFBRyxVQUNIQyxTQUFVLFVBQ1ZDLFFBQVMsVUFDVEMsRUFBRyxhQUNIQyxZQUFhLGFBQ2JDLFdBQVksYUFDWkMsSUFBSyxZQUNMQyxXQUFZLFlBQ1pDLFVBQVcsWUFDWEMsRUFBRyxPQUNIQyxNQUFPLE9BQ1BDLEtBQU0sT0FDTkMsR0FBSSxjQUNKQyxhQUFjLGNBQ2RDLFlBQWEsY0FDYnZNLEVBQUcsU0FDSHdNLFFBQVMsU0FDVEMsT0FBUSxTQUNSQyxFQUFHLFFBQ0hDLE9BQVEsUUFDUkMsTUFBTyxRQUNQQyxFQUFHLFVBQ0hDLFNBQVUsVUFDVkMsUUFBUyxVQUNUcEwsRUFBRyxTQUNIcUwsUUFBUyxTQUNUQyxPQUFRLFNBQ1JDLEdBQUksV0FDSkMsVUFBVyxXQUNYQyxTQUFVLFdBQ1ZDLEdBQUksY0FDSkMsYUFBYyxjQUNkQyxZQUFhLGNBQ2JDLEVBQUcsT0FDSEMsTUFBTyxPQUNQQyxLQUFNLE9BQ05DLEVBQUcsVUFDSEMsU0FBVSxVQUNWQyxRQUFTLFVBQ1RDLEVBQUcsT0FDSEMsTUFBTyxPQUNQQyxLQUFNLFFBR1YsU0FBU0MsRUFBZUMsR0FDcEIsTUFBd0IsaUJBQVZBLEVBQ1IvQyxFQUFRK0MsSUFBVS9DLEVBQVErQyxFQUFNQyxvQkFDaEN4SSxFQUdWLFNBQVN5SSxFQUFxQkMsR0FDMUIsSUFDSUMsRUFDQTdILEVBRkE4SCxFQUFrQixHQUl0QixJQUFLOUgsS0FBUTRILEVBQ0wvTCxFQUFXK0wsRUFBYTVILEtBQ3hCNkgsRUFBaUJMLEVBQWV4SCxNQUU1QjhILEVBQWdCRCxHQUFrQkQsRUFBWTVILElBSzFELE9BQU84SCxFQUdYLElBdURJQyxFQXZEQUMsRUFBYSxDQUNibkQsS0FBTSxFQUNORSxJQUFLLEdBQ0xHLFFBQVMsR0FDVCtDLFdBQVksR0FDWkMsVUFBVyxFQUNYdkMsS0FBTSxHQUNORyxZQUFhLEdBQ2JFLE9BQVEsR0FDUkcsTUFBTyxFQUNQRyxRQUFTLEVBQ1RFLE9BQVEsR0FDUjJCLFNBQVUsRUFDVkMsWUFBYSxFQUNibkIsS0FBTSxFQUNOb0IsUUFBUyxFQUNUZCxLQUFNLEdBaUJOZSxFQUFTLEtBQ1RDLEVBQVMsT0FDVEMsRUFBUyxRQUNUQyxFQUFTLFFBQ1RDLEVBQVMsYUFDVEMsRUFBWSxRQUNaQyxFQUFZLFlBQ1pDLEVBQVksZ0JBQ1pDLEVBQVksVUFDWkMsRUFBWSxVQUNaQyxHQUFZLGVBQ1pDLEdBQWdCLE1BQ2hCQyxHQUFjLFdBQ2RDLEdBQWMscUJBQ2RDLEdBQW1CLDBCQUluQkMsR0FDSSx3SkFDSkMsR0FBeUIsWUFDekJDLEdBQW1CLGdCQUt2QixTQUFTQyxHQUFjakcsRUFBT2tHLEVBQU9DLEdBQ2pDM0IsRUFBUXhFLEdBQVN2QixFQUFXeUgsR0FDdEJBLEVBQ0EsU0FBVUUsRUFBVS9GLEdBQ2hCLE9BQU8rRixHQUFZRCxFQUFjQSxFQUFjRCxHQUk3RCxTQUFTRyxHQUFzQnJHLEVBQU8zQyxHQUNsQyxPQUFLL0UsRUFBV2tNLEVBQVN4RSxHQUlsQndFLEVBQVF4RSxHQUFPM0MsRUFBTzNCLFFBQVMyQixFQUFPRixTQUhsQyxJQUFJbUosT0FRUkMsR0FSOEJ2RyxFQVU1QlUsUUFBUSxLQUFNLElBQ2RBLFFBQ0csdUNBQ0EsU0FBVThGLEVBQVNDLEVBQUlDLEVBQUlDLEVBQUlDLEdBQzNCLE9BQU9ILEdBQU1DLEdBQU1DLEdBQU1DLE9BTTdDLFNBQVNMLEdBQVk1TyxHQUNqQixPQUFPQSxFQUFFK0ksUUFBUSx5QkFBMEIsUUFHL0MsU0FBU21HLEdBQVM1SCxHQUNkLE9BQUlBLEVBQVMsRUFFRkksS0FBS3lILEtBQUs3SCxJQUFXLEVBRXJCSSxLQUFLMEgsTUFBTTlILEdBSTFCLFNBQVMrSCxHQUFNQyxHQUNYLElBQUlDLEdBQWlCRCxFQUNqQnBRLEVBQVEsRUFNWixPQUpzQixJQUFsQnFRLEdBQXVCQyxTQUFTRCxLQUNoQ3JRLEVBQVFnUSxHQUFTSyxJQUdkclEsRUFyRFgyTixFQUFVLEdBd0RWLElBQUk0QyxHQUFTLEdBRWIsU0FBU0MsR0FBY3JILEVBQU9HLEdBQzFCLElBQUl2SyxFQUVBMFIsRUFEQWxILEVBQU9ELEVBV1gsSUFUcUIsaUJBQVZILElBQ1BBLEVBQVEsQ0FBQ0EsSUFFVGpILEVBQVNvSCxLQUNUQyxFQUFPLFNBQVVsSSxFQUFPc0ksR0FDcEJBLEVBQU1MLEdBQVk2RyxHQUFNOU8sS0FHaENvUCxFQUFXdEgsRUFBTXBILE9BQ1poRCxFQUFJLEVBQUdBLEVBQUkwUixFQUFVMVIsSUFDdEJ3UixHQUFPcEgsRUFBTXBLLElBQU13SyxFQUkzQixTQUFTbUgsR0FBa0J2SCxFQUFPRyxHQUM5QmtILEdBQWNySCxHQUFPLFNBQVU5SCxFQUFPc0ksRUFBT25ELEVBQVEyQyxHQUNqRDNDLEVBQU9tSyxHQUFLbkssRUFBT21LLElBQU0sR0FDekJySCxFQUFTakksRUFBT21GLEVBQU9tSyxHQUFJbkssRUFBUTJDLE1BSTNDLFNBQVN5SCxHQUF3QnpILEVBQU85SCxFQUFPbUYsR0FDOUIsTUFBVG5GLEdBQWlCSSxFQUFXOE8sR0FBUXBILElBQ3BDb0gsR0FBT3BILEdBQU85SCxFQUFPbUYsRUFBT3FLLEdBQUlySyxFQUFRMkMsR0FJaEQsU0FBUzJILEdBQVczRCxHQUNoQixPQUFRQSxFQUFPLEdBQU0sR0FBS0EsRUFBTyxLQUFRLEdBQU1BLEVBQU8sS0FBUSxFQWtEbEUsU0FBUzRELEdBQVc1RCxHQUNoQixPQUFPMkQsR0FBVzNELEdBQVEsSUFBTSxJQXBDcENqRSxFQUFlLElBQUssRUFBRyxHQUFHLFdBQ3RCLElBQUkrRCxFQUFJNUgsS0FBSzhILE9BQ2IsT0FBT0YsR0FBSyxLQUFPOUUsRUFBUzhFLEVBQUcsR0FBSyxJQUFNQSxLQUc5Qy9ELEVBQWUsRUFBRyxDQUFDLEtBQU0sR0FBSSxHQUFHLFdBQzVCLE9BQU83RCxLQUFLOEgsT0FBUyxPQUd6QmpFLEVBQWUsRUFBRyxDQUFDLE9BQVEsR0FBSSxFQUFHLFFBQ2xDQSxFQUFlLEVBQUcsQ0FBQyxRQUFTLEdBQUksRUFBRyxRQUNuQ0EsRUFBZSxFQUFHLENBQUMsU0FBVSxHQUFHLEdBQU8sRUFBRyxRQUkxQ2tHLEdBQWMsSUFBS04sSUFDbkJNLEdBQWMsS0FBTWIsRUFBV0osR0FDL0JpQixHQUFjLE9BQVFULEVBQVdOLEdBQ2pDZSxHQUFjLFFBQVNSLEdBQVdOLEdBQ2xDYyxHQUFjLFNBQVVSLEdBQVdOLEdBRW5Da0MsR0FBYyxDQUFDLFFBQVMsVUFqQ2IsR0FrQ1hBLEdBQWMsUUFBUSxTQUFVblAsRUFBT3NJLEdBQ25DQSxFQW5DTyxHQW9DYyxJQUFqQnRJLEVBQU1VLE9BQWVkLEVBQU0rUCxrQkFBa0IzUCxHQUFTOE8sR0FBTTlPLE1BRXBFbVAsR0FBYyxNQUFNLFNBQVVuUCxFQUFPc0ksR0FDakNBLEVBdkNPLEdBdUNPMUksRUFBTStQLGtCQUFrQjNQLE1BRTFDbVAsR0FBYyxLQUFLLFNBQVVuUCxFQUFPc0ksR0FDaENBLEVBMUNPLEdBMENPc0gsU0FBUzVQLEVBQU8sT0FXbENKLEVBQU0rUCxrQkFBb0IsU0FBVTNQLEdBQ2hDLE9BQU84TyxHQUFNOU8sSUFBVThPLEdBQU05TyxHQUFTLEdBQUssS0FBTyxNQUt0RCxJQTBISTZQLEdBMUhBQyxHQUFhQyxHQUFXLFlBQVksR0FNeEMsU0FBU0EsR0FBV0MsRUFBTUMsR0FDdEIsT0FBTyxTQUFVdFIsR0FDYixPQUFhLE1BQVRBLEdBQ0F1UixHQUFNbE0sS0FBTWdNLEVBQU1yUixHQUNsQmlCLEVBQU13RixhQUFhcEIsS0FBTWlNLEdBQ2xCak0sTUFFQXpGLEdBQUl5RixLQUFNZ00sSUFLN0IsU0FBU3pSLEdBQUlrSyxFQUFLdUgsR0FDZCxJQUFLdkgsRUFBSXpGLFVBQ0wsT0FBT2MsSUFHWCxJQUFJOUYsRUFBSXlLLEVBQUlyRixHQUNSK00sRUFBUTFILEVBQUkxRCxPQUVoQixPQUFRaUwsR0FDSixJQUFLLGVBQ0QsT0FBT0csRUFBUW5TLEVBQUVvUyxxQkFBdUJwUyxFQUFFcVMsa0JBQzlDLElBQUssVUFDRCxPQUFPRixFQUFRblMsRUFBRXNTLGdCQUFrQnRTLEVBQUV1UyxhQUN6QyxJQUFLLFVBQ0QsT0FBT0osRUFBUW5TLEVBQUV3UyxnQkFBa0J4UyxFQUFFeVMsYUFDekMsSUFBSyxRQUNELE9BQU9OLEVBQVFuUyxFQUFFMFMsY0FBZ0IxUyxFQUFFMlMsV0FDdkMsSUFBSyxPQUNELE9BQU9SLEVBQVFuUyxFQUFFNFMsYUFBZTVTLEVBQUU2UyxVQUN0QyxJQUFLLE1BQ0QsT0FBT1YsRUFBUW5TLEVBQUU4UyxZQUFjOVMsRUFBRStTLFNBQ3JDLElBQUssUUFDRCxPQUFPWixFQUFRblMsRUFBRWdULGNBQWdCaFQsRUFBRWlULFdBQ3ZDLElBQUssV0FDRCxPQUFPZCxFQUFRblMsRUFBRWtULGlCQUFtQmxULEVBQUVtVCxjQUMxQyxRQUNJLE9BQU9yTixLQUluQixTQUFTb00sR0FBTXpILEVBQUt1SCxFQUFNclIsR0FDdEIsSUFBSVgsRUFBR21TLEVBQU9yRSxFQUFNcEIsRUFBT3RCLEVBRTNCLEdBQUtYLEVBQUl6RixZQUFhSyxNQUFNMUUsR0FBNUIsQ0FPQSxPQUhBWCxFQUFJeUssRUFBSXJGLEdBQ1IrTSxFQUFRMUgsRUFBSTFELE9BRUppTCxHQUNKLElBQUssZUFDRCxZQUFhRyxFQUNQblMsRUFBRW9ULG1CQUFtQnpTLEdBQ3JCWCxFQUFFcVQsZ0JBQWdCMVMsSUFDNUIsSUFBSyxVQUNELFlBQWF3UixFQUFRblMsRUFBRXNULGNBQWMzUyxHQUFTWCxFQUFFdVQsV0FBVzVTLElBQy9ELElBQUssVUFDRCxZQUFhd1IsRUFBUW5TLEVBQUV3VCxjQUFjN1MsR0FBU1gsRUFBRXlULFdBQVc5UyxJQUMvRCxJQUFLLFFBQ0QsWUFBYXdSLEVBQVFuUyxFQUFFMFQsWUFBWS9TLEdBQVNYLEVBQUUyVCxTQUFTaFQsSUFDM0QsSUFBSyxPQUNELFlBQWF3UixFQUFRblMsRUFBRTRULFdBQVdqVCxHQUFTWCxFQUFFNlQsUUFBUWxULElBS3pELElBQUssV0FDRCxNQUNKLFFBQ0ksT0FHUm1OLEVBQU9uTixFQUNQK0wsRUFBUWpDLEVBQUlpQyxRQUVadEIsRUFBZ0IsTUFEaEJBLEVBQU9YLEVBQUlXLFNBQ3FCLElBQVZzQixHQUFnQitFLEdBQVczRCxHQUFhMUMsRUFBTCxHQUNuRCtHLEVBQ0FuUyxFQUFFOFQsZUFBZWhHLEVBQU1wQixFQUFPdEIsR0FDOUJwTCxFQUFFK1QsWUFBWWpHLEVBQU1wQixFQUFPdEIsSUFvRHJDLFNBQVM0SSxHQUFZbEcsRUFBTXBCLEdBQ3ZCLEdBQUlySCxNQUFNeUksSUFBU3pJLE1BQU1xSCxHQUNyQixPQUFPNUcsSUFFWCxJQXpCWW1PLEVBeUJSQyxHQUFleEgsR0F6QlB1SCxFQXlCYyxJQXhCUkEsR0FBS0EsRUEwQnZCLE9BREFuRyxJQUFTcEIsRUFBUXdILEdBQVksR0FDVCxJQUFiQSxFQUNEekMsR0FBVzNELEdBQ1AsR0FDQSxHQUNKLEdBQU9vRyxFQUFXLEVBQUssRUF4QjdCckMsR0FEQTVQLE1BQU1YLFVBQVV1USxRQUNONVAsTUFBTVgsVUFBVXVRLFFBRWhCLFNBQVUxUixHQUVoQixJQUFJVCxFQUNKLElBQUtBLEVBQUksRUFBR0EsRUFBSXNHLEtBQUt0RCxTQUFVaEQsRUFDM0IsR0FBSXNHLEtBQUt0RyxLQUFPUyxFQUNaLE9BQU9ULEVBR2YsT0FBUSxHQW1CaEJtSyxFQUFlLElBQUssQ0FBQyxLQUFNLEdBQUksTUFBTSxXQUNqQyxPQUFPN0QsS0FBSzBHLFFBQVUsS0FHMUI3QyxFQUFlLE1BQU8sRUFBRyxHQUFHLFNBQVVwRyxHQUNsQyxPQUFPdUMsS0FBS21FLGFBQWFnSyxZQUFZbk8sS0FBTXZDLE1BRy9Db0csRUFBZSxPQUFRLEVBQUcsR0FBRyxTQUFVcEcsR0FDbkMsT0FBT3VDLEtBQUttRSxhQUFhc0MsT0FBT3pHLEtBQU12QyxNQUsxQ3NNLEdBQWMsSUFBS2IsRUFBV1csSUFDOUJFLEdBQWMsS0FBTWIsRUFBV0osR0FDL0JpQixHQUFjLE9BQU8sU0FBVUcsRUFBVXhNLEdBQ3JDLE9BQU9BLEVBQU8wUSxpQkFBaUJsRSxNQUVuQ0gsR0FBYyxRQUFRLFNBQVVHLEVBQVV4TSxHQUN0QyxPQUFPQSxFQUFPMlEsWUFBWW5FLE1BRzlCaUIsR0FBYyxDQUFDLElBQUssT0FBTyxTQUFVblAsRUFBT3NJLEdBQ3hDQSxFQTVPUSxHQTRPT3dHLEdBQU05TyxHQUFTLEtBR2xDbVAsR0FBYyxDQUFDLE1BQU8sU0FBUyxTQUFVblAsRUFBT3NJLEVBQU9uRCxFQUFRMkMsR0FDM0QsSUFBSTRDLEVBQVF2RixFQUFPRixRQUFRcU4sWUFBWXRTLEVBQU84SCxFQUFPM0MsRUFBTzNCLFNBRS9DLE1BQVRrSCxFQUNBcEMsRUFuUEksR0FtUFdvQyxFQUVmNUksRUFBZ0JxRCxHQUFRNUMsYUFBZXZDLEtBTS9DLElBQUl1UyxHQUNJLHdGQUF3RkMsTUFDcEYsS0FFUkMsR0FDSSxrREFBa0RELE1BQU0sS0FDNURFLEdBQW1CLGdDQUNuQkMsR0FBMEIvRSxHQUMxQmdGLEdBQXFCaEYsR0E4QnpCLFNBQVNpRixHQUFrQkMsRUFBV3JSLEVBQVFFLEdBQzFDLElBQUlqRSxFQUNBcVYsRUFDQXRLLEVBQ0F1SyxFQUFNRixFQUFVRyxvQkFDcEIsSUFBS2pQLEtBQUtrUCxhQUtOLElBSEFsUCxLQUFLa1AsYUFBZSxHQUNwQmxQLEtBQUttUCxpQkFBbUIsR0FDeEJuUCxLQUFLb1Asa0JBQW9CLEdBQ3BCMVYsRUFBSSxFQUFHQSxFQUFJLEtBQU1BLEVBQ2xCK0ssRUFBTWpILEVBQVUsQ0FBQyxJQUFNOUQsSUFDdkJzRyxLQUFLb1Asa0JBQWtCMVYsR0FBS3NHLEtBQUttTyxZQUM3QjFKLEVBQ0EsSUFDRndLLG9CQUNGalAsS0FBS21QLGlCQUFpQnpWLEdBQUtzRyxLQUFLeUcsT0FBT2hDLEVBQUssSUFBSXdLLG9CQUl4RCxPQUFJdFIsRUFDZSxRQUFYRixHQUVlLEtBRGZzUixFQUFLbEQsR0FBUWhTLEtBQUttRyxLQUFLb1Asa0JBQW1CSixJQUN2QkQsRUFBSyxNQUdULEtBRGZBLEVBQUtsRCxHQUFRaFMsS0FBS21HLEtBQUttUCxpQkFBa0JILElBQ3RCRCxFQUFLLEtBR2IsUUFBWHRSLEdBRVksS0FEWnNSLEVBQUtsRCxHQUFRaFMsS0FBS21HLEtBQUtvUCxrQkFBbUJKLE1BSzNCLEtBRGZELEVBQUtsRCxHQUFRaFMsS0FBS21HLEtBQUttUCxpQkFBa0JILElBRjlCRCxFQUdhLE1BR1osS0FEWkEsRUFBS2xELEdBQVFoUyxLQUFLbUcsS0FBS21QLGlCQUFrQkgsTUFLMUIsS0FEZkQsRUFBS2xELEdBQVFoUyxLQUFLbUcsS0FBS29QLGtCQUFtQkosSUFGL0JELEVBR2EsS0E0RHBDLFNBQVNNLEdBQVM1SyxFQUFLOUosR0FDbkIsSUFBSzhKLEVBQUl6RixVQUVMLE9BQU95RixFQUdYLEdBQXFCLGlCQUFWOUosRUFDUCxHQUFJLFFBQVFxSyxLQUFLckssR0FDYkEsRUFBUW1RLEdBQU1uUSxRQUlkLElBQUtrQyxFQUZMbEMsRUFBUThKLEVBQUlOLGFBQWFtSyxZQUFZM1QsSUFHakMsT0FBTzhKLEVBS25CLElBQUlpQyxFQUFRL0wsRUFDUnlLLEVBQU9YLEVBQUlXLE9BTWYsT0FKQUEsRUFBT0EsRUFBTyxHQUFLQSxFQUFPakMsS0FBS21NLElBQUlsSyxFQUFNNEksR0FBWXZKLEVBQUlxRCxPQUFRcEIsSUFDM0RqQyxFQUFJMUQsT0FDSjBELEVBQUlyRixHQUFHbVEsWUFBWTdJLEVBQU90QixHQUMxQlgsRUFBSXJGLEdBQUdpUSxTQUFTM0ksRUFBT3RCLEdBQ3RCWCxFQUdYLFNBQVMrSyxHQUFZN1UsR0FDakIsT0FBYSxNQUFUQSxHQUNBMFUsR0FBU3JQLEtBQU1yRixHQUNmaUIsRUFBTXdGLGFBQWFwQixNQUFNLEdBQ2xCQSxNQUVBekYsR0FBSXlGLEtBQU0sU0FnRHpCLFNBQVN5UCxLQUNMLFNBQVNDLEVBQVVyVCxFQUFHQyxHQUNsQixPQUFPQSxFQUFFSSxPQUFTTCxFQUFFSyxPQUd4QixJQUdJaEQsRUFDQStLLEVBQ0FrTCxFQUNBQyxFQU5BQyxFQUFjLEdBQ2RDLEVBQWEsR0FDYkMsRUFBYyxHQUtsQixJQUFLclcsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBRWhCK0ssRUFBTWpILEVBQVUsQ0FBQyxJQUFNOUQsSUFDdkJpVyxFQUFTdEYsR0FBWXJLLEtBQUttTyxZQUFZMUosRUFBSyxLQUMzQ21MLEVBQVF2RixHQUFZckssS0FBS3lHLE9BQU9oQyxFQUFLLEtBQ3JDb0wsRUFBWXhTLEtBQUtzUyxHQUNqQkcsRUFBV3pTLEtBQUt1UyxHQUNoQkcsRUFBWTFTLEtBQUt1UyxHQUNqQkcsRUFBWTFTLEtBQUtzUyxHQUlyQkUsRUFBWUcsS0FBS04sR0FDakJJLEVBQVdFLEtBQUtOLEdBQ2hCSyxFQUFZQyxLQUFLTixHQUVqQjFQLEtBQUtpUSxhQUFlLElBQUk3RixPQUFPLEtBQU8yRixFQUFZOU4sS0FBSyxLQUFPLElBQUssS0FDbkVqQyxLQUFLa1Esa0JBQW9CbFEsS0FBS2lRLGFBQzlCalEsS0FBS21RLG1CQUFxQixJQUFJL0YsT0FDMUIsS0FBTzBGLEVBQVc3TixLQUFLLEtBQU8sSUFDOUIsS0FFSmpDLEtBQUtvUSx3QkFBMEIsSUFBSWhHLE9BQy9CLEtBQU95RixFQUFZNU4sS0FBSyxLQUFPLElBQy9CLEtBSVIsU0FBU29PLEdBQVd6SSxFQUFHOU4sRUFBR0UsRUFBR2dNLEVBQUdRLEVBQUcvSyxFQUFHMEssR0FHbEMsSUFBSWYsRUFZSixPQVZJd0MsRUFBSSxLQUFPQSxHQUFLLEdBRWhCeEMsRUFBTyxJQUFJckksS0FBSzZLLEVBQUksSUFBSzlOLEVBQUdFLEVBQUdnTSxFQUFHUSxFQUFHL0ssRUFBRzBLLEdBQ3BDOEUsU0FBUzdGLEVBQUsrSCxnQkFDZC9ILEVBQUsySSxZQUFZbkcsSUFHckJ4QyxFQUFPLElBQUlySSxLQUFLNkssRUFBRzlOLEVBQUdFLEVBQUdnTSxFQUFHUSxFQUFHL0ssRUFBRzBLLEdBRy9CZixFQUdYLFNBQVNrTCxHQUFjMUksR0FDbkIsSUFBSXhDLEVBQU10RCxFQWNWLE9BWkk4RixFQUFJLEtBQU9BLEdBQUssSUFDaEI5RixFQUFPN0YsTUFBTVgsVUFBVTBHLE1BQU1uSSxLQUFLaUMsWUFFN0IsR0FBSzhMLEVBQUksSUFDZHhDLEVBQU8sSUFBSXJJLEtBQUtBLEtBQUt3VCxJQUFJMVUsTUFBTSxLQUFNaUcsSUFDakNtSixTQUFTN0YsRUFBSzhILG1CQUNkOUgsRUFBSzBJLGVBQWVsRyxJQUd4QnhDLEVBQU8sSUFBSXJJLEtBQUtBLEtBQUt3VCxJQUFJMVUsTUFBTSxLQUFNQyxZQUdsQ3NKLEVBSVgsU0FBU29MLEdBQWdCMUksRUFBTTJJLEVBQUtDLEdBQ2hDLElBQ0lDLEVBQU0sRUFBSUYsRUFBTUMsRUFJcEIsUUFGYSxFQUFJSixHQUFjeEksRUFBTSxFQUFHNkksR0FBSzdELFlBQWMyRCxHQUFPLEVBRWxERSxFQUFNLEVBSTFCLFNBQVNDLEdBQW1COUksRUFBTU4sRUFBTS9CLEVBQVNnTCxFQUFLQyxHQUNsRCxJQUdJRyxFQUNBQyxFQUZBckksRUFBWSxFQUFJLEdBQUtqQixFQUFPLElBRlosRUFBSS9CLEVBQVVnTCxHQUFPLEVBQ3hCRCxHQUFnQjFJLEVBQU0ySSxFQUFLQyxHQWdCNUMsT0FYSWpJLEdBQWEsRUFFYnFJLEVBQWVwRixHQURmbUYsRUFBVS9JLEVBQU8sR0FDb0JXLEVBQzlCQSxFQUFZaUQsR0FBVzVELElBQzlCK0ksRUFBVS9JLEVBQU8sRUFDakJnSixFQUFlckksRUFBWWlELEdBQVc1RCxLQUV0QytJLEVBQVUvSSxFQUNWZ0osRUFBZXJJLEdBR1osQ0FDSFgsS0FBTStJLEVBQ05wSSxVQUFXcUksR0FJbkIsU0FBU0MsR0FBV3RNLEVBQUtnTSxFQUFLQyxHQUMxQixJQUVJTSxFQUNBSCxFQUhBSSxFQUFhVCxHQUFnQi9MLEVBQUlxRCxPQUFRMkksRUFBS0MsR0FDOUNsSixFQUFPckUsS0FBSzBILE9BQU9wRyxFQUFJZ0UsWUFBY3dJLEVBQWEsR0FBSyxHQUFLLEVBZWhFLE9BWEl6SixFQUFPLEVBRVB3SixFQUFVeEosRUFBTzBKLEdBRGpCTCxFQUFVcE0sRUFBSXFELE9BQVMsRUFDZTJJLEVBQUtDLEdBQ3BDbEosRUFBTzBKLEdBQVl6TSxFQUFJcUQsT0FBUTJJLEVBQUtDLElBQzNDTSxFQUFVeEosRUFBTzBKLEdBQVl6TSxFQUFJcUQsT0FBUTJJLEVBQUtDLEdBQzlDRyxFQUFVcE0sRUFBSXFELE9BQVMsSUFFdkIrSSxFQUFVcE0sRUFBSXFELE9BQ2RrSixFQUFVeEosR0FHUCxDQUNIQSxLQUFNd0osRUFDTmxKLEtBQU0rSSxHQUlkLFNBQVNLLEdBQVlwSixFQUFNMkksRUFBS0MsR0FDNUIsSUFBSU8sRUFBYVQsR0FBZ0IxSSxFQUFNMkksRUFBS0MsR0FDeENTLEVBQWlCWCxHQUFnQjFJLEVBQU8sRUFBRzJJLEVBQUtDLEdBQ3BELE9BQVFoRixHQUFXNUQsR0FBUW1KLEVBQWFFLEdBQWtCLEVBa0k5RCxTQUFTQyxHQUFjQyxFQUFJbFcsR0FDdkIsT0FBT2tXLEVBQUdyUCxNQUFNN0csRUFBRyxHQUFHbVcsT0FBT0QsRUFBR3JQLE1BQU0sRUFBRzdHLElBOUg3QzBJLEVBQWUsSUFBSyxDQUFDLEtBQU0sR0FBSSxLQUFNLFFBQ3JDQSxFQUFlLElBQUssQ0FBQyxLQUFNLEdBQUksS0FBTSxXQUlyQ2tHLEdBQWMsSUFBS2IsRUFBV1csSUFDOUJFLEdBQWMsS0FBTWIsRUFBV0osR0FDL0JpQixHQUFjLElBQUtiLEVBQVdXLElBQzlCRSxHQUFjLEtBQU1iLEVBQVdKLEdBRS9CdUMsR0FDSSxDQUFDLElBQUssS0FBTSxJQUFLLE9BQ2pCLFNBQVVyUCxFQUFPd0wsRUFBTXJHLEVBQVEyQyxHQUMzQjBELEVBQUsxRCxFQUFNTixPQUFPLEVBQUcsSUFBTXNILEdBQU05TyxNQXVDekM2SCxFQUFlLElBQUssRUFBRyxLQUFNLE9BRTdCQSxFQUFlLEtBQU0sRUFBRyxHQUFHLFNBQVVwRyxHQUNqQyxPQUFPdUMsS0FBS21FLGFBQWFvTixZQUFZdlIsS0FBTXZDLE1BRy9Db0csRUFBZSxNQUFPLEVBQUcsR0FBRyxTQUFVcEcsR0FDbEMsT0FBT3VDLEtBQUttRSxhQUFhcU4sY0FBY3hSLEtBQU12QyxNQUdqRG9HLEVBQWUsT0FBUSxFQUFHLEdBQUcsU0FBVXBHLEdBQ25DLE9BQU91QyxLQUFLbUUsYUFBYXFCLFNBQVN4RixLQUFNdkMsTUFHNUNvRyxFQUFlLElBQUssRUFBRyxFQUFHLFdBQzFCQSxFQUFlLElBQUssRUFBRyxFQUFHLGNBSTFCa0csR0FBYyxJQUFLYixHQUNuQmEsR0FBYyxJQUFLYixHQUNuQmEsR0FBYyxJQUFLYixHQUNuQmEsR0FBYyxNQUFNLFNBQVVHLEVBQVV4TSxHQUNwQyxPQUFPQSxFQUFPK1QsaUJBQWlCdkgsTUFFbkNILEdBQWMsT0FBTyxTQUFVRyxFQUFVeE0sR0FDckMsT0FBT0EsRUFBT2dVLG1CQUFtQnhILE1BRXJDSCxHQUFjLFFBQVEsU0FBVUcsRUFBVXhNLEdBQ3RDLE9BQU9BLEVBQU9pVSxjQUFjekgsTUFHaENtQixHQUFrQixDQUFDLEtBQU0sTUFBTyxTQUFTLFNBQVVyUCxFQUFPd0wsRUFBTXJHLEVBQVEyQyxHQUNwRSxJQUFJMkIsRUFBVXRFLEVBQU9GLFFBQVEyUSxjQUFjNVYsRUFBTzhILEVBQU8zQyxFQUFPM0IsU0FFakQsTUFBWGlHLEVBQ0ErQixFQUFLeE4sRUFBSXlMLEVBRVQzSCxFQUFnQnFELEdBQVE1QixlQUFpQnZELEtBSWpEcVAsR0FBa0IsQ0FBQyxJQUFLLElBQUssTUFBTSxTQUFVclAsRUFBT3dMLEVBQU1yRyxFQUFRMkMsR0FDOUQwRCxFQUFLMUQsR0FBU2dILEdBQU05TyxNQWtDeEIsSUFBSTZWLEdBQ0ksMkRBQTJEckQsTUFBTSxLQUNyRXNELEdBQTZCLDhCQUE4QnRELE1BQU0sS0FDakV1RCxHQUEyQix1QkFBdUJ2RCxNQUFNLEtBQ3hEd0QsR0FBdUJwSSxHQUN2QnFJLEdBQTRCckksR0FDNUJzSSxHQUEwQnRJLEdBaUM5QixTQUFTdUksR0FBb0JDLEVBQWEzVSxFQUFRRSxHQUM5QyxJQUFJakUsRUFDQXFWLEVBQ0F0SyxFQUNBdUssRUFBTW9ELEVBQVluRCxvQkFDdEIsSUFBS2pQLEtBQUtxUyxlQUtOLElBSkFyUyxLQUFLcVMsZUFBaUIsR0FDdEJyUyxLQUFLc1Msb0JBQXNCLEdBQzNCdFMsS0FBS3VTLGtCQUFvQixHQUVwQjdZLEVBQUksRUFBR0EsRUFBSSxJQUFLQSxFQUNqQitLLEVBQU1qSCxFQUFVLENBQUMsSUFBTSxJQUFJOEgsSUFBSTVMLEdBQy9Cc0csS0FBS3VTLGtCQUFrQjdZLEdBQUtzRyxLQUFLdVIsWUFDN0I5TSxFQUNBLElBQ0Z3SyxvQkFDRmpQLEtBQUtzUyxvQkFBb0I1WSxHQUFLc0csS0FBS3dSLGNBQy9CL00sRUFDQSxJQUNGd0ssb0JBQ0ZqUCxLQUFLcVMsZUFBZTNZLEdBQUtzRyxLQUFLd0YsU0FBU2YsRUFBSyxJQUFJd0ssb0JBSXhELE9BQUl0UixFQUNlLFNBQVhGLEdBRWUsS0FEZnNSLEVBQUtsRCxHQUFRaFMsS0FBS21HLEtBQUtxUyxlQUFnQnJELElBQ3BCRCxFQUFLLEtBQ04sUUFBWHRSLEdBRVEsS0FEZnNSLEVBQUtsRCxHQUFRaFMsS0FBS21HLEtBQUtzUyxvQkFBcUJ0RCxJQUN6QkQsRUFBSyxNQUdULEtBRGZBLEVBQUtsRCxHQUFRaFMsS0FBS21HLEtBQUt1UyxrQkFBbUJ2RCxJQUN2QkQsRUFBSyxLQUdiLFNBQVh0UixHQUVZLEtBRFpzUixFQUFLbEQsR0FBUWhTLEtBQUttRyxLQUFLcVMsZUFBZ0JyRCxNQUszQixLQURaRCxFQUFLbEQsR0FBUWhTLEtBQUttRyxLQUFLc1Msb0JBQXFCdEQsTUFLN0IsS0FEZkQsRUFBS2xELEdBQVFoUyxLQUFLbUcsS0FBS3VTLGtCQUFtQnZELElBTi9CRCxFQU9hLEtBQ04sUUFBWHRSLEdBRUssS0FEWnNSLEVBQUtsRCxHQUFRaFMsS0FBS21HLEtBQUtzUyxvQkFBcUJ0RCxNQUtoQyxLQURaRCxFQUFLbEQsR0FBUWhTLEtBQUttRyxLQUFLcVMsZUFBZ0JyRCxNQUt4QixLQURmRCxFQUFLbEQsR0FBUWhTLEtBQUttRyxLQUFLdVMsa0JBQW1CdkQsSUFOL0JELEVBT2EsTUFHWixLQURaQSxFQUFLbEQsR0FBUWhTLEtBQUttRyxLQUFLdVMsa0JBQW1CdkQsTUFLOUIsS0FEWkQsRUFBS2xELEdBQVFoUyxLQUFLbUcsS0FBS3FTLGVBQWdCckQsTUFLeEIsS0FEZkQsRUFBS2xELEdBQVFoUyxLQUFLbUcsS0FBS3NTLG9CQUFxQnRELElBTmpDRCxFQU9hLEtBNktwQyxTQUFTeUQsS0FDTCxTQUFTOUMsRUFBVXJULEVBQUdDLEdBQ2xCLE9BQU9BLEVBQUVJLE9BQVNMLEVBQUVLLE9BR3hCLElBSUloRCxFQUNBK0ssRUFDQWdPLEVBQ0FDLEVBQ0FDLEVBUkFDLEVBQVksR0FDWi9DLEVBQWMsR0FDZEMsRUFBYSxHQUNiQyxFQUFjLEdBTWxCLElBQUtyVyxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFFZitLLEVBQU1qSCxFQUFVLENBQUMsSUFBTSxJQUFJOEgsSUFBSTVMLEdBQy9CK1ksRUFBT3BJLEdBQVlySyxLQUFLdVIsWUFBWTlNLEVBQUssS0FDekNpTyxFQUFTckksR0FBWXJLLEtBQUt3UixjQUFjL00sRUFBSyxLQUM3Q2tPLEVBQVF0SSxHQUFZckssS0FBS3dGLFNBQVNmLEVBQUssS0FDdkNtTyxFQUFVdlYsS0FBS29WLEdBQ2Y1QyxFQUFZeFMsS0FBS3FWLEdBQ2pCNUMsRUFBV3pTLEtBQUtzVixHQUNoQjVDLEVBQVkxUyxLQUFLb1YsR0FDakIxQyxFQUFZMVMsS0FBS3FWLEdBQ2pCM0MsRUFBWTFTLEtBQUtzVixHQUlyQkMsRUFBVTVDLEtBQUtOLEdBQ2ZHLEVBQVlHLEtBQUtOLEdBQ2pCSSxFQUFXRSxLQUFLTixHQUNoQkssRUFBWUMsS0FBS04sR0FFakIxUCxLQUFLNlMsZUFBaUIsSUFBSXpJLE9BQU8sS0FBTzJGLEVBQVk5TixLQUFLLEtBQU8sSUFBSyxLQUNyRWpDLEtBQUs4UyxvQkFBc0I5UyxLQUFLNlMsZUFDaEM3UyxLQUFLK1Msa0JBQW9CL1MsS0FBSzZTLGVBRTlCN1MsS0FBS2dULHFCQUF1QixJQUFJNUksT0FDNUIsS0FBTzBGLEVBQVc3TixLQUFLLEtBQU8sSUFDOUIsS0FFSmpDLEtBQUtpVCwwQkFBNEIsSUFBSTdJLE9BQ2pDLEtBQU95RixFQUFZNU4sS0FBSyxLQUFPLElBQy9CLEtBRUpqQyxLQUFLa1Qsd0JBQTBCLElBQUk5SSxPQUMvQixLQUFPd0ksRUFBVTNRLEtBQUssS0FBTyxJQUM3QixLQU1SLFNBQVNrUixLQUNMLE9BQU9uVCxLQUFLaUcsUUFBVSxJQUFNLEdBcUNoQyxTQUFTcEgsR0FBU2lGLEVBQU9zUCxHQUNyQnZQLEVBQWVDLEVBQU8sRUFBRyxHQUFHLFdBQ3hCLE9BQU85RCxLQUFLbUUsYUFBYXRGLFNBQ3JCbUIsS0FBS2lHLFFBQ0xqRyxLQUFLc0csVUFDTDhNLE1BVVosU0FBU0MsR0FBY25KLEVBQVV4TSxHQUM3QixPQUFPQSxFQUFPNFYsZUE5Q2xCelAsRUFBZSxJQUFLLENBQUMsS0FBTSxHQUFJLEVBQUcsUUFDbENBLEVBQWUsSUFBSyxDQUFDLEtBQU0sR0FBSSxFQUFHc1AsSUFDbEN0UCxFQUFlLElBQUssQ0FBQyxLQUFNLEdBQUksR0FOL0IsV0FDSSxPQUFPN0QsS0FBS2lHLFNBQVcsTUFPM0JwQyxFQUFlLE1BQU8sRUFBRyxHQUFHLFdBQ3hCLE1BQU8sR0FBS3NQLEdBQVF0WCxNQUFNbUUsTUFBUThDLEVBQVM5QyxLQUFLc0csVUFBVyxNQUcvRHpDLEVBQWUsUUFBUyxFQUFHLEdBQUcsV0FDMUIsTUFDSSxHQUNBc1AsR0FBUXRYLE1BQU1tRSxNQUNkOEMsRUFBUzlDLEtBQUtzRyxVQUFXLEdBQ3pCeEQsRUFBUzlDLEtBQUs4RyxVQUFXLE1BSWpDakQsRUFBZSxNQUFPLEVBQUcsR0FBRyxXQUN4QixNQUFPLEdBQUs3RCxLQUFLaUcsUUFBVW5ELEVBQVM5QyxLQUFLc0csVUFBVyxNQUd4RHpDLEVBQWUsUUFBUyxFQUFHLEdBQUcsV0FDMUIsTUFDSSxHQUNBN0QsS0FBS2lHLFFBQ0xuRCxFQUFTOUMsS0FBS3NHLFVBQVcsR0FDekJ4RCxFQUFTOUMsS0FBSzhHLFVBQVcsTUFjakNqSSxHQUFTLEtBQUssR0FDZEEsR0FBUyxLQUFLLEdBUWRrTCxHQUFjLElBQUtzSixJQUNuQnRKLEdBQWMsSUFBS3NKLElBQ25CdEosR0FBYyxJQUFLYixFQUFXWSxJQUM5QkMsR0FBYyxJQUFLYixFQUFXVyxJQUM5QkUsR0FBYyxJQUFLYixFQUFXVyxJQUM5QkUsR0FBYyxLQUFNYixFQUFXSixHQUMvQmlCLEdBQWMsS0FBTWIsRUFBV0osR0FDL0JpQixHQUFjLEtBQU1iLEVBQVdKLEdBRS9CaUIsR0FBYyxNQUFPWixHQUNyQlksR0FBYyxRQUFTWCxHQUN2QlcsR0FBYyxNQUFPWixHQUNyQlksR0FBYyxRQUFTWCxHQUV2QitCLEdBQWMsQ0FBQyxJQUFLLE1BM25DVCxHQTRuQ1hBLEdBQWMsQ0FBQyxJQUFLLE9BQU8sU0FBVW5QLEVBQU9zSSxFQUFPbkQsR0FDL0MsSUFBSW9TLEVBQVN6SSxHQUFNOU8sR0FDbkJzSSxFQTluQ08sR0E4bkNrQixLQUFYaVAsRUFBZ0IsRUFBSUEsS0FFdENwSSxHQUFjLENBQUMsSUFBSyxNQUFNLFNBQVVuUCxFQUFPc0ksRUFBT25ELEdBQzlDQSxFQUFPcVMsTUFBUXJTLEVBQU9GLFFBQVF3UyxLQUFLelgsR0FDbkNtRixFQUFPdVMsVUFBWTFYLEtBRXZCbVAsR0FBYyxDQUFDLElBQUssT0FBTyxTQUFVblAsRUFBT3NJLEVBQU9uRCxHQUMvQ21ELEVBcm9DTyxHQXFvQ093RyxHQUFNOU8sR0FDcEI4QixFQUFnQnFELEdBQVF6QixTQUFVLEtBRXRDeUwsR0FBYyxPQUFPLFNBQVVuUCxFQUFPc0ksRUFBT25ELEdBQ3pDLElBQUl3UyxFQUFNM1gsRUFBTVUsT0FBUyxFQUN6QjRILEVBMW9DTyxHQTBvQ093RyxHQUFNOU8sRUFBTXdILE9BQU8sRUFBR21RLElBQ3BDclAsRUExb0NTLEdBMG9DT3dHLEdBQU05TyxFQUFNd0gsT0FBT21RLElBQ25DN1YsRUFBZ0JxRCxHQUFRekIsU0FBVSxLQUV0Q3lMLEdBQWMsU0FBUyxTQUFVblAsRUFBT3NJLEVBQU9uRCxHQUMzQyxJQUFJeVMsRUFBTzVYLEVBQU1VLE9BQVMsRUFDdEJtWCxFQUFPN1gsRUFBTVUsT0FBUyxFQUMxQjRILEVBanBDTyxHQWlwQ093RyxHQUFNOU8sRUFBTXdILE9BQU8sRUFBR29RLElBQ3BDdFAsRUFqcENTLEdBaXBDT3dHLEdBQU05TyxFQUFNd0gsT0FBT29RLEVBQU0sSUFDekN0UCxFQWpwQ1MsR0FpcENPd0csR0FBTTlPLEVBQU13SCxPQUFPcVEsSUFDbkMvVixFQUFnQnFELEdBQVF6QixTQUFVLEtBRXRDeUwsR0FBYyxPQUFPLFNBQVVuUCxFQUFPc0ksRUFBT25ELEdBQ3pDLElBQUl3UyxFQUFNM1gsRUFBTVUsT0FBUyxFQUN6QjRILEVBeHBDTyxHQXdwQ093RyxHQUFNOU8sRUFBTXdILE9BQU8sRUFBR21RLElBQ3BDclAsRUF4cENTLEdBd3BDT3dHLEdBQU05TyxFQUFNd0gsT0FBT21RLE9BRXZDeEksR0FBYyxTQUFTLFNBQVVuUCxFQUFPc0ksRUFBT25ELEdBQzNDLElBQUl5UyxFQUFPNVgsRUFBTVUsT0FBUyxFQUN0Qm1YLEVBQU83WCxFQUFNVSxPQUFTLEVBQzFCNEgsRUE5cENPLEdBOHBDT3dHLEdBQU05TyxFQUFNd0gsT0FBTyxFQUFHb1EsSUFDcEN0UCxFQTlwQ1MsR0E4cENPd0csR0FBTTlPLEVBQU13SCxPQUFPb1EsRUFBTSxJQUN6Q3RQLEVBOXBDUyxHQThwQ093RyxHQUFNOU8sRUFBTXdILE9BQU9xUSxPQVd2QyxJQXNDSUMsR0FqQ0FDLEdBQWFoSSxHQUFXLFNBQVMsR0FVakNpSSxHQUFhLENBQ2JDLFNBMW1Ea0IsQ0FDbEJDLFFBQVMsZ0JBQ1RDLFFBQVMsbUJBQ1RDLFNBQVUsZUFDVkMsUUFBUyxvQkFDVEMsU0FBVSxzQkFDVkMsU0FBVSxLQXFtRFZ6UCxlQTkrQ3dCLENBQ3hCMFAsSUFBSyxZQUNMQyxHQUFJLFNBQ0pDLEVBQUcsYUFDSEMsR0FBSSxlQUNKQyxJQUFLLHNCQUNMQyxLQUFNLDZCQXkrQ05qUSxZQTU4Q3FCLGVBNjhDckJaLFFBdjhDaUIsS0F3OENqQjhRLHVCQXY4Q2dDLFVBdzhDaENDLGFBbDhDc0IsQ0FDdEJDLE9BQVEsUUFDUkMsS0FBTSxTQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksYUFDSnBiLEVBQUcsV0FDSHFiLEdBQUksYUFDSm5QLEVBQUcsVUFDSG9QLEdBQUksV0FDSnBiLEVBQUcsUUFDSHFiLEdBQUksVUFDSi9OLEVBQUcsU0FDSGdPLEdBQUksV0FDSjlPLEVBQUcsVUFDSCtPLEdBQUksWUFDSjNOLEVBQUcsU0FDSDROLEdBQUksWUFvN0NKL08sT0FBUThILEdBQ1JKLFlBQWFNLEdBRWJqSCxLQXZrQm9CLENBQ3BCaUosSUFBSyxFQUNMQyxJQUFLLEdBdWtCTGxMLFNBQVVxTSxHQUNWTixZQUFhUSxHQUNiUCxjQUFlTSxHQUVmMkQsY0FoQzZCLGlCQW9DN0JDLEdBQVUsR0FDVkMsR0FBaUIsR0FHckIsU0FBU0MsR0FBYUMsRUFBTUMsR0FDeEIsSUFBSXBjLEVBQ0FxYyxFQUFPNVMsS0FBS21NLElBQUl1RyxFQUFLblosT0FBUW9aLEVBQUtwWixRQUN0QyxJQUFLaEQsRUFBSSxFQUFHQSxFQUFJcWMsRUFBTXJjLEdBQUssRUFDdkIsR0FBSW1jLEVBQUtuYyxLQUFPb2MsRUFBS3BjLEdBQ2pCLE9BQU9BLEVBR2YsT0FBT3FjLEVBR1gsU0FBU0MsR0FBZ0IvYSxHQUNyQixPQUFPQSxFQUFNQSxFQUFJZ04sY0FBY3pELFFBQVEsSUFBSyxLQUFPdkosRUE0Q3ZELFNBQVNnYixHQUFXaGMsR0FDaEIsSUFBSWljLEVBQVksS0FHaEIsUUFDc0J6VyxJQUFsQmlXLEdBQVF6YixTQUNVLElBQVhSLEdBQ1BBLEdBQ0FBLEVBQU9ELFNBZGYsU0FBMEJTLEdBR3RCLFNBQVVBLElBQVFBLEVBQUtzSyxNQUFNLGdCQVl6QjRSLENBQWlCbGMsR0FFakIsSUFDSWljLEVBQVlwQyxHQUFhc0MsTUFFekIsT0FBZSxLQUFjbmMsR0FDN0JvYyxHQUFtQkgsR0FDckIsTUFBTzNRLEdBR0xtUSxHQUFRemIsR0FBUSxLQUd4QixPQUFPeWIsR0FBUXpiLEdBTW5CLFNBQVNvYyxHQUFtQnBiLEVBQUtxYixHQUM3QixJQUFJQyxFQXFCSixPQXBCSXRiLEtBRUlzYixFQURBM1osRUFBWTBaLEdBQ0xFLEdBQVV2YixHQUVWd2IsR0FBYXhiLEVBQUtxYixJQUt6QnhDLEdBQWV5QyxFQUVRLG9CQUFaOVUsU0FBMkJBLFFBQVFILE1BRTFDRyxRQUFRSCxLQUNKLFVBQVlyRyxFQUFNLDJDQU0zQjZZLEdBQWFzQyxNQUd4QixTQUFTSyxHQUFheGMsRUFBTWtILEdBQ3hCLEdBQWUsT0FBWEEsRUFBaUIsQ0FDakIsSUFBSXpELEVBQ0FnRixFQUFlc1IsR0FFbkIsR0FEQTdTLEVBQU91VixLQUFPemMsRUFDTyxNQUFqQnliLEdBQVF6YixHQUNScUksRUFDSSx1QkFDQSwyT0FLSkksRUFBZWdULEdBQVF6YixHQUFNMGMsYUFDMUIsR0FBMkIsTUFBdkJ4VixFQUFPeVYsYUFDZCxHQUFvQyxNQUFoQ2xCLEdBQVF2VSxFQUFPeVYsY0FDZmxVLEVBQWVnVCxHQUFRdlUsRUFBT3lWLGNBQWNELFlBQ3pDLENBRUgsR0FBYyxPQURkalosRUFBU3VZLEdBQVc5VSxFQUFPeVYsZUFXdkIsT0FQS2pCLEdBQWV4VSxFQUFPeVYsZ0JBQ3ZCakIsR0FBZXhVLEVBQU95VixjQUFnQixJQUUxQ2pCLEdBQWV4VSxFQUFPeVYsY0FBY3ZaLEtBQUssQ0FDckNwRCxLQUFNQSxFQUNOa0gsT0FBUUEsSUFFTCxLQVRQdUIsRUFBZWhGLEVBQU9pWixRQTBCbEMsT0FiQWpCLEdBQVF6YixHQUFRLElBQUkySSxFQUFPSCxFQUFhQyxFQUFjdkIsSUFFbER3VSxHQUFlMWIsSUFDZjBiLEdBQWUxYixHQUFNNGMsU0FBUSxTQUFVNUksR0FDbkN3SSxHQUFheEksRUFBRWhVLEtBQU1nVSxFQUFFOU0sV0FPL0JrVixHQUFtQnBjLEdBRVp5YixHQUFRemIsR0FJZixjQURPeWIsR0FBUXpiLEdBQ1IsS0FrRGYsU0FBU3VjLEdBQVV2YixHQUNmLElBQUl5QyxFQU1KLEdBSkl6QyxHQUFPQSxFQUFJZ0csU0FBV2hHLEVBQUlnRyxRQUFRbVYsUUFDbENuYixFQUFNQSxFQUFJZ0csUUFBUW1WLFFBR2pCbmIsRUFDRCxPQUFPNlksR0FHWCxJQUFLL1gsRUFBUWQsR0FBTSxDQUdmLEdBREF5QyxFQUFTdVksR0FBV2hiLEdBRWhCLE9BQU95QyxFQUVYekMsRUFBTSxDQUFDQSxHQUdYLE9Bbk5KLFNBQXNCNmIsR0FPbEIsSUFOQSxJQUNJQyxFQUNBQyxFQUNBdFosRUFDQThRLEVBSkE5VSxFQUFJLEVBTURBLEVBQUlvZCxFQUFNcGEsUUFBUSxDQUtyQixJQUhBcWEsR0FEQXZJLEVBQVF3SCxHQUFnQmMsRUFBTXBkLElBQUk4VSxNQUFNLE1BQzlCOVIsT0FFVnNhLEdBREFBLEVBQU9oQixHQUFnQmMsRUFBTXBkLEVBQUksS0FDbkJzZCxFQUFLeEksTUFBTSxLQUFPLEtBQ3pCdUksRUFBSSxHQUFHLENBRVYsR0FEQXJaLEVBQVN1WSxHQUFXekgsRUFBTXhNLE1BQU0sRUFBRytVLEdBQUc5VSxLQUFLLE1BRXZDLE9BQU92RSxFQUVYLEdBQ0lzWixHQUNBQSxFQUFLdGEsUUFBVXFhLEdBQ2ZuQixHQUFhcEgsRUFBT3dJLElBQVNELEVBQUksRUFHakMsTUFFSkEsSUFFSnJkLElBRUosT0FBT29hLEdBc0xBbUQsQ0FBYWhjLEdBT3hCLFNBQVNpYyxHQUFjcGQsR0FDbkIsSUFBSXFFLEVBQ0E5QixFQUFJdkMsRUFBRTBSLEdBdUNWLE9BckNJblAsSUFBc0MsSUFBakN5QixFQUFnQmhFLEdBQUdxRSxXQUN4QkEsRUFDSTlCLEVBdjhDQSxHQXU4Q1csR0FBS0EsRUF2OENoQixHQXU4QzJCLEdBdjhDM0IsRUF5OENNQSxFQXg4Q1AsR0F3OENpQixHQUFLQSxFQXg4Q3RCLEdBdzhDZ0MyUixHQUFZM1IsRUExOEM1QyxHQTA4Q3FEQSxFQXo4Q3BELElBQ0QsRUEwOENTQSxFQXo4Q1QsR0F5OENtQixHQUNSQSxFQTE4Q1gsR0EwOENxQixJQUNHLEtBQVpBLEVBMzhDWixLQTQ4QzhCLElBQWRBLEVBMzhDZCxJQTQ4QytCLElBQWRBLEVBMzhDakIsSUE0OENvQyxJQUFuQkEsRUEzOENaLElBSFAsRUFnOUNXQSxFQS84Q1QsR0ErOENxQixHQUFLQSxFQS84QzFCLEdBKzhDc0MsR0EvOEN0QyxFQWk5Q1dBLEVBaDlDWCxHQWc5Q3VCLEdBQUtBLEVBaDlDNUIsR0FnOUN3QyxHQWg5Q3hDLEVBazlDYUEsRUFqOUNSLEdBaTlDeUIsR0FBS0EsRUFqOUM5QixHQWk5QytDLElBajlDL0MsR0FtOUNXLEVBR2pCeUIsRUFBZ0JoRSxHQUFHcWQscUJBQ2xCaFosRUE3OUNGLEdBNjlDcUJBLEVBMzlDckIsS0E2OUNDQSxFQTc5Q0QsR0ErOUNDTCxFQUFnQmhFLEdBQUdzZCxpQkFBZ0MsSUFBZGpaLElBQ3JDQSxFQTM5Q0QsR0E2OUNDTCxFQUFnQmhFLEdBQUd1ZCxtQkFBa0MsSUFBZGxaLElBQ3ZDQSxFQTc5Q0UsR0FnK0NOTCxFQUFnQmhFLEdBQUdxRSxTQUFXQSxHQUczQnJFLEVBS1gsSUFBSXdkLEdBQ0ksaUpBQ0pDLEdBQ0ksNklBQ0pDLEdBQVUsd0JBQ1ZDLEdBQVcsQ0FDUCxDQUFDLGVBQWdCLHVCQUNqQixDQUFDLGFBQWMsbUJBQ2YsQ0FBQyxlQUFnQixrQkFDakIsQ0FBQyxhQUFjLGVBQWUsR0FDOUIsQ0FBQyxXQUFZLGVBQ2IsQ0FBQyxVQUFXLGNBQWMsR0FDMUIsQ0FBQyxhQUFjLGNBQ2YsQ0FBQyxXQUFZLFNBQ2IsQ0FBQyxhQUFjLGVBQ2YsQ0FBQyxZQUFhLGVBQWUsR0FDN0IsQ0FBQyxVQUFXLFNBQ1osQ0FBQyxTQUFVLFNBQVMsR0FDcEIsQ0FBQyxPQUFRLFNBQVMsSUFHdEJDLEdBQVcsQ0FDUCxDQUFDLGdCQUFpQix1QkFDbEIsQ0FBQyxnQkFBaUIsc0JBQ2xCLENBQUMsV0FBWSxrQkFDYixDQUFDLFFBQVMsYUFDVixDQUFDLGNBQWUscUJBQ2hCLENBQUMsY0FBZSxvQkFDaEIsQ0FBQyxTQUFVLGdCQUNYLENBQUMsT0FBUSxZQUNULENBQUMsS0FBTSxTQUVYQyxHQUFrQixxQkFFbEI3WSxHQUNJLDBMQUNKOFksR0FBYSxDQUNUQyxHQUFJLEVBQ0pDLElBQUssRUFDTEMsS0FBSyxJQUNMQyxLQUFLLElBQ0xDLEtBQUssSUFDTEMsS0FBSyxJQUNMQyxLQUFLLElBQ0xDLEtBQUssSUFDTEMsS0FBSyxJQUNMQyxLQUFLLEtBSWIsU0FBU0MsR0FBY3BYLEdBQ25CLElBQUl6SCxFQUNBQyxFQUdBNmUsRUFDQUMsRUFDQUMsRUFDQUMsRUFMQUMsRUFBU3pYLEVBQU9SLEdBQ2hCNEQsRUFBUStTLEdBQWlCdUIsS0FBS0QsSUFBV3JCLEdBQWNzQixLQUFLRCxHQUs1REUsRUFBY3JCLEdBQVMvYSxPQUN2QnFjLEVBQWNyQixHQUFTaGIsT0FFM0IsR0FBSTZILEVBQU8sQ0FFUCxJQURBekcsRUFBZ0JxRCxHQUFRekMsS0FBTSxFQUN6QmhGLEVBQUksRUFBR0MsRUFBSW1mLEVBQWFwZixFQUFJQyxFQUFHRCxJQUNoQyxHQUFJK2QsR0FBUy9kLEdBQUcsR0FBR21mLEtBQUt0VSxFQUFNLElBQUssQ0FDL0JrVSxFQUFhaEIsR0FBUy9kLEdBQUcsR0FDekI4ZSxHQUErQixJQUFuQmYsR0FBUy9kLEdBQUcsR0FDeEIsTUFHUixHQUFrQixNQUFkK2UsRUFFQSxZQURBdFgsRUFBT3ZCLFVBQVcsR0FHdEIsR0FBSTJFLEVBQU0sR0FBSSxDQUNWLElBQUs3SyxFQUFJLEVBQUdDLEVBQUlvZixFQUFhcmYsRUFBSUMsRUFBR0QsSUFDaEMsR0FBSWdlLEdBQVNoZSxHQUFHLEdBQUdtZixLQUFLdFUsRUFBTSxJQUFLLENBRS9CbVUsR0FBY25VLEVBQU0sSUFBTSxLQUFPbVQsR0FBU2hlLEdBQUcsR0FDN0MsTUFHUixHQUFrQixNQUFkZ2YsRUFFQSxZQURBdlgsRUFBT3ZCLFVBQVcsR0FJMUIsSUFBSzRZLEdBQTJCLE1BQWRFLEVBRWQsWUFEQXZYLEVBQU92QixVQUFXLEdBR3RCLEdBQUkyRSxFQUFNLEdBQUksQ0FDVixJQUFJaVQsR0FBUXFCLEtBQUt0VSxFQUFNLElBSW5CLFlBREFwRCxFQUFPdkIsVUFBVyxHQUZsQitZLEVBQVcsSUFNbkJ4WCxFQUFPUCxHQUFLNlgsR0FBY0MsR0FBYyxLQUFPQyxHQUFZLElBQzNESyxHQUEwQjdYLFFBRTFCQSxFQUFPdkIsVUFBVyxFQTJCMUIsU0FBU3FaLEdBQWVDLEdBQ3BCLElBQUlwUixFQUFPOEQsU0FBU3NOLEVBQVMsSUFDN0IsT0FBSXBSLEdBQVEsR0FDRCxJQUFPQSxFQUNQQSxHQUFRLElBQ1IsS0FBT0EsRUFFWEEsRUE2Q1gsU0FBU3FSLEdBQWtCaFksR0FDdkIsSUFDSWlZLEVBNUVKRixFQUNBRyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUVJQyxFQW9FQW5WLEVBQVF6RixHQUFRK1osS0FBdUIxWCxFQUFPUixHQXhDN0M2RCxRQUFRLHFCQUFzQixLQUM5QkEsUUFBUSxXQUFZLEtBQ3BCQSxRQUFRLFNBQVUsSUFDbEJBLFFBQVEsU0FBVSxLQXVDdkIsR0FBSUQsRUFBTyxDQVNQLEdBdEZKMlUsRUErRVEzVSxFQUFNLEdBOUVkOFUsRUErRVE5VSxFQUFNLEdBOUVkK1UsRUErRVEvVSxFQUFNLEdBOUVkZ1YsRUErRVFoVixFQUFNLEdBOUVkaVYsRUErRVFqVixFQUFNLEdBOUVka1YsRUErRVFsVixFQUFNLEdBN0VWbVYsRUFBUyxDQUNUVCxHQUFlQyxHQUNmekssR0FBeUI1QyxRQUFRd04sR0FDakN6TixTQUFTME4sRUFBUSxJQUNqQjFOLFNBQVMyTixFQUFTLElBQ2xCM04sU0FBUzROLEVBQVcsS0FHcEJDLEdBQ0FDLEVBQU9yYyxLQUFLdU8sU0FBUzZOLEVBQVcsS0E4RGhDTCxFQTNER00sR0FzQlgsU0FBc0JDLEVBQVlDLEVBQWF6WSxHQUMzQyxPQUFJd1ksR0FFc0I3SCxHQUEyQmpHLFFBQVE4TixLQUNyQyxJQUFJNWMsS0FDaEI2YyxFQUFZLEdBQ1pBLEVBQVksR0FDWkEsRUFBWSxJQUNkN00sV0FFRmpQLEVBQWdCcUQsR0FBUXBDLGlCQUFrQixFQUMxQ29DLEVBQU92QixVQUFXLEdBQ1gsR0FpQ05pYSxDQUFhdFYsRUFBTSxHQUFJNlUsRUFBYWpZLEdBQ3JDLE9BR0pBLEVBQU9xSyxHQUFLNE4sRUFDWmpZLEVBQU9MLEtBaENmLFNBQXlCZ1osRUFBV0MsRUFBZ0JDLEdBQ2hELEdBQUlGLEVBQ0EsT0FBT2xDLEdBQVdrQyxHQUNmLEdBQUlDLEVBRVAsT0FBTyxFQUVQLElBQUlFLEVBQUtyTyxTQUFTb08sRUFBVyxJQUN6QmxnQixFQUFJbWdCLEVBQUssSUFFYixPQURTQSxFQUFLbmdCLEdBQUssSUFDUixHQUFLQSxFQXNCRm9nQixDQUFnQjNWLEVBQU0sR0FBSUEsRUFBTSxHQUFJQSxFQUFNLEtBRXhEcEQsRUFBTy9CLEdBQUtrUixHQUFjelUsTUFBTSxLQUFNc0YsRUFBT3FLLElBQzdDckssRUFBTy9CLEdBQUdvTyxjQUFjck0sRUFBTy9CLEdBQUdvTixnQkFBa0JyTCxFQUFPTCxNQUUzRGhELEVBQWdCcUQsR0FBUXJDLFNBQVUsT0FFbENxQyxFQUFPdkIsVUFBVyxFQTRDMUIsU0FBU3VhLEdBQVM5ZCxFQUFHQyxFQUFHdkMsR0FDcEIsT0FBUyxNQUFMc0MsRUFDT0EsRUFFRixNQUFMQyxFQUNPQSxFQUVKdkMsRUFvQlgsU0FBU3FnQixHQUFnQmpaLEdBQ3JCLElBQUl6SCxFQUNBMEwsRUFFQWlWLEVBQ0FDLEVBQ0FDLEVBSEF2ZSxFQUFRLEdBS1osSUFBSW1GLEVBQU8vQixHQUFYLENBZ0NBLElBNUJBaWIsRUE3QkosU0FBMEJsWixHQUV0QixJQUFJcVosRUFBVyxJQUFJemQsS0FBS25CLEVBQU02ZSxPQUM5QixPQUFJdFosRUFBT3VaLFFBQ0EsQ0FDSEYsRUFBU3ROLGlCQUNUc04sRUFBU3hOLGNBQ1R3TixFQUFTNU4sY0FHVixDQUFDNE4sRUFBU3JOLGNBQWVxTixFQUFTdk4sV0FBWXVOLEVBQVMzTixXQW1CaEQ4TixDQUFpQnhaLEdBRzNCQSxFQUFPbUssSUFBeUIsTUFBbkJuSyxFQUFPcUssR0FseERqQixJQWt4RHlELE1BQXBCckssRUFBT3FLLEdBbnhEM0MsSUE2MURaLFNBQStCckssR0FDM0IsSUFBSW1HLEVBQUdvQixFQUFVbEIsRUFBTS9CLEVBQVNnTCxFQUFLQyxFQUFLa0ssRUFBTUMsRUFBaUJDLEVBR3JELE9BRFp4VCxFQUFJbkcsRUFBT21LLElBQ0xuRSxJQUFxQixNQUFQRyxFQUFFRyxHQUFvQixNQUFQSCxFQUFFNUIsR0FDakMrSyxFQUFNLEVBQ05DLEVBQU0sRUFNTmhJLEVBQVd5UixHQUNQN1MsRUFBRUgsR0FDRmhHLEVBQU9xSyxHQTUyRFIsR0E2MkRDdUYsR0FBV2dLLEtBQWUsRUFBRyxHQUFHalQsTUFFcENOLEVBQU8yUyxHQUFTN1MsRUFBRUcsRUFBRyxLQUNyQmhDLEVBQVUwVSxHQUFTN1MsRUFBRTVCLEVBQUcsSUFDVixHQUFLRCxFQUFVLEtBQ3pCb1YsR0FBa0IsS0FHdEJwSyxFQUFNdFAsRUFBT0YsUUFBUStaLE1BQU12SyxJQUMzQkMsRUFBTXZQLEVBQU9GLFFBQVErWixNQUFNdEssSUFFM0JvSyxFQUFVL0osR0FBV2dLLEtBQWV0SyxFQUFLQyxHQUV6Q2hJLEVBQVd5UixHQUFTN1MsRUFBRU4sR0FBSTdGLEVBQU9xSyxHQTEzRDlCLEdBMDNEd0NzUCxFQUFRaFQsTUFHbkROLEVBQU8yUyxHQUFTN1MsRUFBRUEsRUFBR3dULEVBQVF0VCxNQUVsQixNQUFQRixFQUFFdE4sSUFFRnlMLEVBQVU2QixFQUFFdE4sR0FDRSxHQUFLeUwsRUFBVSxLQUN6Qm9WLEdBQWtCLEdBRVIsTUFBUHZULEVBQUUvQixHQUVURSxFQUFVNkIsRUFBRS9CLEVBQUlrTCxHQUNabkosRUFBRS9CLEVBQUksR0FBSytCLEVBQUUvQixFQUFJLEtBQ2pCc1YsR0FBa0IsSUFJdEJwVixFQUFVZ0wsR0FHZGpKLEVBQU8sR0FBS0EsRUFBTzBKLEdBQVl4SSxFQUFVK0gsRUFBS0MsR0FDOUM1UyxFQUFnQnFELEdBQVFpVyxnQkFBaUIsRUFDZixNQUFuQnlELEVBQ1AvYyxFQUFnQnFELEdBQVFrVyxrQkFBbUIsR0FFM0N1RCxFQUFPaEssR0FBbUJsSSxFQUFVbEIsRUFBTS9CLEVBQVNnTCxFQUFLQyxHQUN4RHZQLEVBQU9xSyxHQXQ1REosR0FzNURlb1AsRUFBSzlTLEtBQ3ZCM0csRUFBTzhaLFdBQWFMLEVBQUtuUyxXQWxJekJ5UyxDQUFzQi9aLEdBSUQsTUFBckJBLEVBQU84WixhQUNQVixFQUFZSixHQUFTaFosRUFBT3FLLEdBMXhEekIsR0EweERtQzZPLEVBMXhEbkMsS0E2eERDbFosRUFBTzhaLFdBQWF2UCxHQUFXNk8sSUFDVCxJQUF0QnBaLEVBQU84WixjQUVQbmQsRUFBZ0JxRCxHQUFRZ1csb0JBQXFCLEdBR2pEL1IsRUFBT2tMLEdBQWNpSyxFQUFXLEVBQUdwWixFQUFPOFosWUFDMUM5WixFQUFPcUssR0FueURILEdBbXlEZXBHLEVBQUs0SCxjQUN4QjdMLEVBQU9xSyxHQW55REosR0FteURlcEcsRUFBS3dILGNBUXRCbFQsRUFBSSxFQUFHQSxFQUFJLEdBQXFCLE1BQWhCeUgsRUFBT3FLLEdBQUc5UixLQUFjQSxFQUN6Q3lILEVBQU9xSyxHQUFHOVIsR0FBS3NDLEVBQU10QyxHQUFLMmdCLEVBQVkzZ0IsR0FJMUMsS0FBT0EsRUFBSSxFQUFHQSxJQUNWeUgsRUFBT3FLLEdBQUc5UixHQUFLc0MsRUFBTXRDLEdBQ0QsTUFBaEJ5SCxFQUFPcUssR0FBRzlSLEdBQW9CLElBQU5BLEVBQVUsRUFBSSxFQUFLeUgsRUFBT3FLLEdBQUc5UixHQUtyQyxLQUFwQnlILEVBQU9xSyxHQXR6REosSUF1ekRtQixJQUF0QnJLLEVBQU9xSyxHQXR6REYsSUF1ekRpQixJQUF0QnJLLEVBQU9xSyxHQXR6REYsSUF1ekRzQixJQUEzQnJLLEVBQU9xSyxHQXR6REcsS0F3ekRWckssRUFBT2dhLFVBQVcsRUFDbEJoYSxFQUFPcUssR0E1ekRKLEdBNHpEZSxHQUd0QnJLLEVBQU8vQixJQUFNK0IsRUFBT3VaLFFBQVVwSyxHQUFnQkQsSUFBWXhVLE1BQ3RELEtBQ0FHLEdBRUpzZSxFQUFrQm5aLEVBQU91WixRQUNuQnZaLEVBQU8vQixHQUFHME4sWUFDVjNMLEVBQU8vQixHQUFHMk4sU0FJRyxNQUFmNUwsRUFBT0wsTUFDUEssRUFBTy9CLEdBQUdvTyxjQUFjck0sRUFBTy9CLEdBQUdvTixnQkFBa0JyTCxFQUFPTCxNQUczREssRUFBT2dhLFdBQ1BoYSxFQUFPcUssR0E5MERKLEdBODBEZSxJQUtsQnJLLEVBQU9tSyxTQUNnQixJQUFoQm5LLEVBQU9tSyxHQUFHdFIsR0FDakJtSCxFQUFPbUssR0FBR3RSLElBQU1zZ0IsSUFFaEJ4YyxFQUFnQnFELEdBQVFwQyxpQkFBa0IsSUF3RWxELFNBQVNpYSxHQUEwQjdYLEdBRS9CLEdBQUlBLEVBQU9QLEtBQU9oRixFQUFNd2YsU0FJeEIsR0FBSWphLEVBQU9QLEtBQU9oRixFQUFNeWYsU0FBeEIsQ0FJQWxhLEVBQU9xSyxHQUFLLEdBQ1oxTixFQUFnQnFELEdBQVFuRCxPQUFRLEVBR2hDLElBQ0l0RSxFQUNBa2dCLEVBQ0ExTyxFQUNBcEgsRUFDQXdYLEVBR0ExYyxFQUNBd00sRUFUQXdOLEVBQVMsR0FBS3pYLEVBQU9SLEdBTXJCNGEsRUFBZTNDLEVBQU9sYyxPQUN0QjhlLEVBQXlCLEVBTzdCLElBREFwUSxHQUZBRixFQUNJN0csRUFBYWxELEVBQU9QLEdBQUlPLEVBQU9GLFNBQVNzRCxNQUFNZCxJQUFxQixJQUNyRC9HLE9BQ2JoRCxFQUFJLEVBQUdBLEVBQUkwUixFQUFVMVIsSUFDdEJvSyxFQUFRb0gsRUFBT3hSLElBQ2ZrZ0IsR0FBZWhCLEVBQU9yVSxNQUFNNEYsR0FBc0JyRyxFQUFPM0MsS0FDckQsSUFBSSxPQUVKbWEsRUFBVTFDLEVBQU9wVixPQUFPLEVBQUdvVixFQUFPL00sUUFBUStOLEtBQzlCbGQsT0FBUyxHQUNqQm9CLEVBQWdCcUQsR0FBUWpELFlBQVliLEtBQUtpZSxHQUU3QzFDLEVBQVNBLEVBQU81VyxNQUNaNFcsRUFBTy9NLFFBQVErTixHQUFlQSxFQUFZbGQsUUFFOUM4ZSxHQUEwQjVCLEVBQVlsZCxRQUd0Q2tILEVBQXFCRSxJQUNqQjhWLEVBQ0E5YixFQUFnQnFELEdBQVFuRCxPQUFRLEVBRWhDRixFQUFnQnFELEdBQVFsRCxhQUFhWixLQUFLeUcsR0FFOUN5SCxHQUF3QnpILEVBQU84VixFQUFhelksSUFDckNBLEVBQU8zQixVQUFZb2EsR0FDMUI5YixFQUFnQnFELEdBQVFsRCxhQUFhWixLQUFLeUcsR0FLbERoRyxFQUFnQnFELEdBQVEvQyxjQUNwQm1kLEVBQWVDLEVBQ2Y1QyxFQUFPbGMsT0FBUyxHQUNoQm9CLEVBQWdCcUQsR0FBUWpELFlBQVliLEtBQUt1YixHQUt6Q3pYLEVBQU9xSyxHQS85REosSUErOURnQixLQUNpQixJQUFwQzFOLEVBQWdCcUQsR0FBUXpCLFNBQ3hCeUIsRUFBT3FLLEdBaitESixHQWkrRGUsSUFFbEIxTixFQUFnQnFELEdBQVF6QixhQUFVRCxHQUd0QzNCLEVBQWdCcUQsR0FBUXhDLGdCQUFrQndDLEVBQU9xSyxHQUFHeEosTUFBTSxHQUMxRGxFLEVBQWdCcUQsR0FBUXRDLFNBQVdzQyxFQUFPdVMsVUFFMUN2UyxFQUFPcUssR0F6K0RBLEdBeS9EWCxTQUF5QjlOLEVBQVF3SSxFQUFNckgsR0FDbkMsSUFBSTRjLEVBRUosT0FBZ0IsTUFBWjVjLEVBRU9xSCxFQUVnQixNQUF2QnhJLEVBQU9nZSxhQUNBaGUsRUFBT2dlLGFBQWF4VixFQUFNckgsR0FDWCxNQUFmbkIsRUFBTytWLE9BRWRnSSxFQUFPL2QsRUFBTytWLEtBQUs1VSxLQUNQcUgsRUFBTyxLQUNmQSxHQUFRLElBRVB1VixHQUFpQixLQUFUdlYsSUFDVEEsRUFBTyxHQUVKQSxHQUdBQSxFQXJDT3lWLENBQ2R4YSxFQUFPRixRQUNQRSxFQUFPcUssR0EzK0RKLEdBNCtESHJLLEVBQU91UyxXQUtDLFFBRFo5VSxFQUFNZCxFQUFnQnFELEdBQVF2QyxPQUUxQnVDLEVBQU9xSyxHQXIvREosR0FxL0RlckssRUFBT0YsUUFBUTJhLGdCQUFnQmhkLEVBQUt1QyxFQUFPcUssR0FyL0QxRCxLQXcvRFA0TyxHQUFnQmpaLEdBQ2hCK1YsR0FBYy9WLFFBaEZWZ1ksR0FBa0JoWSxRQUpsQm9YLEdBQWNwWCxHQTBNdEIsU0FBUzBhLEdBQWMxYSxHQUNuQixJQUFJbkYsRUFBUW1GLEVBQU9SLEdBQ2ZsRCxFQUFTMEQsRUFBT1AsR0FJcEIsT0FGQU8sRUFBT0YsUUFBVUUsRUFBT0YsU0FBV3VWLEdBQVVyVixFQUFPTixJQUV0QyxPQUFWN0UsUUFBOEJ5RCxJQUFYaEMsR0FBa0MsS0FBVnpCLEVBQ3BDNkQsRUFBYyxDQUFFeEIsV0FBVyxLQUdqQixpQkFBVnJDLElBQ1BtRixFQUFPUixHQUFLM0UsRUFBUW1GLEVBQU9GLFFBQVE2YSxTQUFTOWYsSUFHNUNxRixFQUFTckYsR0FDRixJQUFJa0YsRUFBT2dXLEdBQWNsYixLQUN6QmMsRUFBT2QsR0FDZG1GLEVBQU8vQixHQUFLcEQsRUFDTEQsRUFBUTBCLEdBM0d2QixTQUFrQzBELEdBQzlCLElBQUk0YSxFQUNBQyxFQUNBQyxFQUNBdmlCLEVBQ0F3aUIsRUFDQUMsRUFDQUMsR0FBb0IsRUFDcEJDLEVBQWFsYixFQUFPUCxHQUFHbEUsT0FFM0IsR0FBbUIsSUFBZjJmLEVBR0EsT0FGQXZlLEVBQWdCcUQsR0FBUTNDLGVBQWdCLE9BQ3hDMkMsRUFBTy9CLEdBQUssSUFBSXJDLEtBQUsrQyxNQUl6QixJQUFLcEcsRUFBSSxFQUFHQSxFQUFJMmlCLEVBQVkzaUIsSUFDeEJ3aUIsRUFBZSxFQUNmQyxHQUFtQixFQUNuQkosRUFBYTNiLEVBQVcsR0FBSWUsR0FDTixNQUFsQkEsRUFBT3VaLFVBQ1BxQixFQUFXckIsUUFBVXZaLEVBQU91WixTQUVoQ3FCLEVBQVduYixHQUFLTyxFQUFPUCxHQUFHbEgsR0FDMUJzZixHQUEwQitDLEdBRXRCL2MsRUFBUStjLEtBQ1JJLEdBQW1CLEdBSXZCRCxHQUFnQnBlLEVBQWdCaWUsR0FBWTNkLGNBRzVDOGQsR0FBa0UsR0FBbERwZSxFQUFnQmllLEdBQVk5ZCxhQUFhdkIsT0FFekRvQixFQUFnQmllLEdBQVlPLE1BQVFKLEVBRS9CRSxFQWFHRixFQUFlRCxJQUNmQSxFQUFjQyxFQUNkRixFQUFhRCxJQWJFLE1BQWZFLEdBQ0FDLEVBQWVELEdBQ2ZFLEtBRUFGLEVBQWNDLEVBQ2RGLEVBQWFELEVBQ1RJLElBQ0FDLEdBQW9CLElBV3BDOWUsRUFBTzZELEVBQVE2YSxHQUFjRCxHQWtEekJRLENBQXlCcGIsR0FDbEIxRCxFQUNQdWIsR0FBMEI3WCxHQVlsQyxTQUF5QkEsR0FDckIsSUFBSW5GLEVBQVFtRixFQUFPUixHQUNmL0QsRUFBWVosR0FDWm1GLEVBQU8vQixHQUFLLElBQUlyQyxLQUFLbkIsRUFBTTZlLE9BQ3BCM2QsRUFBT2QsR0FDZG1GLEVBQU8vQixHQUFLLElBQUlyQyxLQUFLZixFQUFNdUIsV0FDSCxpQkFBVnZCLEVBbmR0QixTQUEwQm1GLEdBQ3RCLElBQUltSixFQUFVcU4sR0FBZ0JrQixLQUFLMVgsRUFBT1IsSUFDMUIsT0FBWjJKLEdBS0ppTyxHQUFjcFgsSUFDVSxJQUFwQkEsRUFBT3ZCLGtCQUNBdUIsRUFBT3ZCLFNBS2xCdVosR0FBa0JoWSxJQUNNLElBQXBCQSxFQUFPdkIsa0JBQ0F1QixFQUFPdkIsU0FLZHVCLEVBQU8zQixRQUNQMkIsRUFBT3ZCLFVBQVcsRUFHbEJoRSxFQUFNNGdCLHdCQUF3QnJiLE1BdEI5QkEsRUFBTy9CLEdBQUssSUFBSXJDLE1BQU11TixFQUFRLElBaWQ5Qm1TLENBQWlCdGIsR0FDVnBGLEVBQVFDLElBQ2ZtRixFQUFPcUssR0FBS3hPLEVBQUloQixFQUFNZ0csTUFBTSxJQUFJLFNBQVV4RixHQUN0QyxPQUFPb1AsU0FBU3BQLEVBQUssT0FFekI0ZCxHQUFnQmpaLElBQ1RoRixFQUFTSCxHQTFFeEIsU0FBMEJtRixHQUN0QixJQUFJQSxFQUFPL0IsR0FBWCxDQUlBLElBQUkxRixFQUFJd08sRUFBcUIvRyxFQUFPUixJQUNoQytiLE9BQXNCamQsSUFBVi9GLEVBQUU0TCxJQUFvQjVMLEVBQUUwTCxLQUFPMUwsRUFBRTRMLElBQ2pEbkUsRUFBT3FLLEdBQUt4TyxFQUNSLENBQUN0RCxFQUFFb08sS0FBTXBPLEVBQUVnTixNQUFPZ1csRUFBV2hqQixFQUFFd00sS0FBTXhNLEVBQUU2TSxPQUFRN00sRUFBRXFOLE9BQVFyTixFQUFFMk0sY0FDM0QsU0FBVTdKLEdBQ04sT0FBT0EsR0FBT29QLFNBQVNwUCxFQUFLLE9BSXBDNGQsR0FBZ0JqWixJQTZEWndiLENBQWlCeGIsR0FDVnRFLEVBQVNiLEdBRWhCbUYsRUFBTy9CLEdBQUssSUFBSXJDLEtBQUtmLEdBRXJCSixFQUFNNGdCLHdCQUF3QnJiLEdBN0I5QnliLENBQWdCemIsR0FHZm5DLEVBQVFtQyxLQUNUQSxFQUFPL0IsR0FBSyxNQUdUK0IsSUEwQlgsU0FBU3ZELEdBQWlCNUIsRUFBT3lCLEVBQVFDLEVBQVFDLEVBQVF3TyxHQUNyRCxJQW5FSWhQLEVBbUVBcEQsRUFBSSxHQTJCUixPQXpCZSxJQUFYMEQsSUFBOEIsSUFBWEEsSUFDbkJFLEVBQVNGLEVBQ1RBLE9BQVNnQyxJQUdFLElBQVgvQixJQUE4QixJQUFYQSxJQUNuQkMsRUFBU0QsRUFDVEEsT0FBUytCLElBSVJ0RCxFQUFTSCxJQUFVTyxFQUFjUCxJQUNqQ0QsRUFBUUMsSUFBMkIsSUFBakJBLEVBQU1VLFVBRXpCVixPQUFReUQsR0FJWjFGLEVBQUUyRyxrQkFBbUIsRUFDckIzRyxFQUFFMmdCLFFBQVUzZ0IsRUFBRWdILE9BQVNvTCxFQUN2QnBTLEVBQUU4RyxHQUFLbkQsRUFDUDNELEVBQUU0RyxHQUFLM0UsRUFDUGpDLEVBQUU2RyxHQUFLbkQsRUFDUDFELEVBQUV5RixRQUFVN0IsR0E1RlJSLEVBQU0sSUFBSStELEVBQU9nVyxHQUFjMkUsR0E4Rlg5aEIsTUE3RmhCb2hCLFdBRUpoZSxFQUFJMGYsSUFBSSxFQUFHLEtBQ1gxZixFQUFJZ2UsY0FBVzFiLEdBR1p0QyxFQTBGWCxTQUFTNGQsR0FBWS9lLEVBQU95QixFQUFRQyxFQUFRQyxHQUN4QyxPQUFPQyxHQUFpQjVCLEVBQU95QixFQUFRQyxFQUFRQyxHQUFRLEdBdmUzRC9CLEVBQU00Z0Isd0JBQTBCOWEsRUFDNUIsaVNBR0EsU0FBVVAsR0FDTkEsRUFBTy9CLEdBQUssSUFBSXJDLEtBQUtvRSxFQUFPUixJQUFNUSxFQUFPdVosUUFBVSxPQUFTLFFBdUxwRTllLEVBQU13ZixTQUFXLGFBR2pCeGYsRUFBTXlmLFNBQVcsYUEyU2pCLElBQUl5QixHQUFlcGIsRUFDWCxzR0FDQSxXQUNJLElBQUlxYixFQUFRaEMsR0FBWWxmLE1BQU0sS0FBTUMsV0FDcEMsT0FBSWtFLEtBQUtoQixXQUFhK2QsRUFBTS9kLFVBQ2pCK2QsRUFBUS9jLEtBQU9BLEtBQU8rYyxFQUV0QmxkLE9BSW5CbWQsR0FBZXRiLEVBQ1gsc0dBQ0EsV0FDSSxJQUFJcWIsRUFBUWhDLEdBQVlsZixNQUFNLEtBQU1DLFdBQ3BDLE9BQUlrRSxLQUFLaEIsV0FBYStkLEVBQU0vZCxVQUNqQitkLEVBQVEvYyxLQUFPQSxLQUFPK2MsRUFFdEJsZCxPQVV2QixTQUFTb2QsR0FBTy9mLEVBQUlnZ0IsR0FDaEIsSUFBSS9mLEVBQUt6RCxFQUlULEdBSHVCLElBQW5Cd2pCLEVBQVF4Z0IsUUFBZ0JYLEVBQVFtaEIsRUFBUSxNQUN4Q0EsRUFBVUEsRUFBUSxLQUVqQkEsRUFBUXhnQixPQUNULE9BQU9xZSxLQUdYLElBREE1ZCxFQUFNK2YsRUFBUSxHQUNUeGpCLEVBQUksRUFBR0EsRUFBSXdqQixFQUFReGdCLFNBQVVoRCxFQUN6QndqQixFQUFReGpCLEdBQUdzRixZQUFha2UsRUFBUXhqQixHQUFHd0QsR0FBSUMsS0FDeENBLEVBQU0rZixFQUFReGpCLElBR3RCLE9BQU95RCxFQWdCWCxJQUlJZ2dCLEdBQVcsQ0FDWCxPQUNBLFVBQ0EsUUFDQSxPQUNBLE1BQ0EsT0FDQSxTQUNBLFNBQ0EsZUEwQ0osU0FBU0MsR0FBU0MsR0FDZCxJQUFJaFYsRUFBa0JILEVBQXFCbVYsR0FDdkN4VixFQUFRUSxFQUFnQlAsTUFBUSxFQUNoQ2xCLEVBQVd5QixFQUFnQnhCLFNBQVcsRUFDdENKLEVBQVM0QixFQUFnQjNCLE9BQVMsRUFDbENhLEVBQVFjLEVBQWdCYixNQUFRYSxFQUFnQk8sU0FBVyxFQUMzRHZELEVBQU9nRCxFQUFnQi9DLEtBQU8sRUFDOUJXLEVBQVFvQyxFQUFnQm5DLE1BQVEsRUFDaENJLEVBQVUrQixFQUFnQjlCLFFBQVUsRUFDcENPLEVBQVV1QixFQUFnQnRCLFFBQVUsRUFDcENYLEVBQWVpQyxFQUFnQmhDLGFBQWUsRUFFbERyRyxLQUFLSixTQW5EVCxTQUF5QjlGLEdBQ3JCLElBQUltQixFQUVBdkIsRUFEQTRqQixHQUFpQixFQUVqQkMsRUFBV0osR0FBU3pnQixPQUN4QixJQUFLekIsS0FBT25CLEVBQ1IsR0FDSXNDLEVBQVd0QyxFQUFHbUIsTUFFdUIsSUFBakM0USxHQUFRaFMsS0FBS3NqQixHQUFVbGlCLElBQ1osTUFBVm5CLEVBQUVtQixJQUFpQm9FLE1BQU12RixFQUFFbUIsS0FHaEMsT0FBTyxFQUlmLElBQUt2QixFQUFJLEVBQUdBLEVBQUk2akIsSUFBWTdqQixFQUN4QixHQUFJSSxFQUFFcWpCLEdBQVN6akIsSUFBSyxDQUNoQixHQUFJNGpCLEVBQ0EsT0FBTyxFQUVQRSxXQUFXMWpCLEVBQUVxakIsR0FBU3pqQixPQUFTb1IsR0FBTWhSLEVBQUVxakIsR0FBU3pqQixPQUNoRDRqQixHQUFpQixHQUs3QixPQUFPLEVBdUJTRyxDQUFnQnBWLEdBR2hDckksS0FBSzBkLGVBQ0F0WCxFQUNTLElBQVZVLEVBQ1UsSUFBVlIsRUFDUSxJQUFSTCxFQUFlLEdBQUssR0FHeEJqRyxLQUFLMmQsT0FBU3RZLEVBQWUsRUFBUmtDLEVBSXJCdkgsS0FBSzRkLFNBQVduWCxFQUFvQixFQUFYRyxFQUF1QixHQUFSaUIsRUFFeEM3SCxLQUFLNmQsTUFBUSxHQUViN2QsS0FBS2lCLFFBQVV1VixLQUVmeFcsS0FBSzhkLFVBR1QsU0FBU0MsR0FBV3ZoQixHQUNoQixPQUFPQSxhQUFlNGdCLEdBRzFCLFNBQVNZLEdBQVNqYixHQUNkLE9BQUlBLEVBQVMsR0FDeUIsRUFBM0JJLEtBQUs4YSxPQUFPLEVBQUlsYixHQUVoQkksS0FBSzhhLE1BQU1sYixHQXVCMUIsU0FBU21iLEdBQU9wYSxFQUFPcWEsR0FDbkJ0YSxFQUFlQyxFQUFPLEVBQUcsR0FBRyxXQUN4QixJQUFJb2EsRUFBU2xlLEtBQUtvZSxZQUNkQyxFQUFPLElBS1gsT0FKSUgsRUFBUyxJQUNUQSxHQUFVQSxFQUNWRyxFQUFPLEtBR1BBLEVBQ0F2YixLQUFZb2IsRUFBUyxJQUFLLEdBQzFCQyxFQUNBcmIsSUFBV29iLEVBQVMsR0FBSSxNQUtwQ0EsR0FBTyxJQUFLLEtBQ1pBLEdBQU8sS0FBTSxJQUliblUsR0FBYyxJQUFLSixJQUNuQkksR0FBYyxLQUFNSixJQUNwQndCLEdBQWMsQ0FBQyxJQUFLLE9BQU8sU0FBVW5QLEVBQU9zSSxFQUFPbkQsR0FDL0NBLEVBQU91WixTQUFVLEVBQ2pCdlosRUFBT0wsS0FBT3dkLEdBQWlCM1UsR0FBa0IzTixNQVFyRCxJQUFJdWlCLEdBQWMsa0JBRWxCLFNBQVNELEdBQWlCRSxFQUFTNUYsR0FDL0IsSUFFSTZGLEVBQ0FuWSxFQUhBb1ksR0FBVzlGLEdBQVUsSUFBSXJVLE1BQU1pYSxHQUtuQyxPQUFnQixPQUFaRSxFQUNPLEtBT1EsS0FGbkJwWSxFQUF1QixJQUR2Qm1ZLElBRFFDLEVBQVFBLEVBQVFoaUIsT0FBUyxJQUFNLElBQ3RCLElBQUk2SCxNQUFNZ2EsS0FBZ0IsQ0FBQyxJQUFLLEVBQUcsSUFDbEMsR0FBV3pULEdBQU0yVCxFQUFNLEtBRWxCLEVBQWlCLE1BQWJBLEVBQU0sR0FBYW5ZLEdBQVdBLEVBSTdELFNBQVNxWSxHQUFnQjNpQixFQUFPNGlCLEdBQzVCLElBQUl6aEIsRUFBSzBoQixFQUNULE9BQUlELEVBQU03ZCxRQUNONUQsRUFBTXloQixFQUFNRSxRQUNaRCxHQUNLeGQsRUFBU3JGLElBQVVjLEVBQU9kLEdBQ3JCQSxFQUFNdUIsVUFDTndkLEdBQVkvZSxHQUFPdUIsV0FBYUosRUFBSUksVUFFOUNKLEVBQUlpQyxHQUFHMmYsUUFBUTVoQixFQUFJaUMsR0FBRzdCLFVBQVlzaEIsR0FDbENqakIsRUFBTXdGLGFBQWFqRSxHQUFLLEdBQ2pCQSxHQUVBNGQsR0FBWS9lLEdBQU9nakIsUUFJbEMsU0FBU0MsR0FBY25sQixHQUduQixPQUFRcUosS0FBSzhhLE1BQU1ua0IsRUFBRXNGLEdBQUc4ZixxQkEwSjVCLFNBQVNDLEtBQ0wsUUFBT25mLEtBQUtoQixXQUFZZ0IsS0FBS2UsUUFBMkIsSUFBakJmLEtBQUtnQixRQXBKaERwRixFQUFNd0YsYUFBZSxhQXdKckIsSUFBSWdlLEdBQWMsd0RBSWRDLEdBQ0ksc0tBRVIsU0FBU0MsR0FBZXRqQixFQUFPZixHQUMzQixJQUdJb2pCLEVBQ0FrQixFQUNBQyxFQTRGbUJDLEVBQU0xQyxFQUN6QjVmLEVBbEdBa2dCLEVBQVdyaEIsRUFFWHVJLEVBQVEsS0FrRVosT0E3REl3WixHQUFXL2hCLEdBQ1hxaEIsRUFBVyxDQUNQbFgsR0FBSW5LLEVBQU0waEIsY0FDVjFqQixFQUFHZ0MsRUFBTTJoQixNQUNUblgsRUFBR3hLLEVBQU00aEIsU0FFTi9nQixFQUFTYixLQUFXcUQsT0FBT3JELElBQ2xDcWhCLEVBQVcsR0FDUHBpQixFQUNBb2lCLEVBQVNwaUIsSUFBUWUsRUFFakJxaEIsRUFBU2pYLGNBQWdCcEssSUFFckJ1SSxFQUFRNmEsR0FBWXZHLEtBQUs3YyxLQUNqQ3FpQixFQUFvQixNQUFiOVosRUFBTSxJQUFjLEVBQUksRUFDL0I4WSxFQUFXLENBQ1B6VixFQUFHLEVBQ0g1TixFQUFHOFEsR0FBTXZHLEVBcG9GVixJQW9vRnlCOFosRUFDeEJyWSxFQUFHOEUsR0FBTXZHLEVBcG9GVixJQW9vRnlCOFosRUFDeEJ2a0IsRUFBR2dSLEdBQU12RyxFQXBvRlIsSUFvb0Z5QjhaLEVBQzFCNWlCLEVBQUdxUCxHQUFNdkcsRUFwb0ZSLElBb29GeUI4WixFQUMxQmxZLEdBQUkyRSxHQUFNa1QsR0FBOEIsSUFBckJ6WixFQXBvRmIsS0Fvb0YyQzhaLEtBRTdDOVosRUFBUThhLEdBQVN4RyxLQUFLN2MsS0FDOUJxaUIsRUFBb0IsTUFBYjlaLEVBQU0sSUFBYyxFQUFJLEVBQy9COFksRUFBVyxDQUNQelYsRUFBRzhYLEdBQVNuYixFQUFNLEdBQUk4WixHQUN0QjdYLEVBQUdrWixHQUFTbmIsRUFBTSxHQUFJOFosR0FDdEIvVyxFQUFHb1ksR0FBU25iLEVBQU0sR0FBSThaLEdBQ3RCcmtCLEVBQUcwbEIsR0FBU25iLEVBQU0sR0FBSThaLEdBQ3RCclksRUFBRzBaLEdBQVNuYixFQUFNLEdBQUk4WixHQUN0QnZrQixFQUFHNGxCLEdBQVNuYixFQUFNLEdBQUk4WixHQUN0QjVpQixFQUFHaWtCLEdBQVNuYixFQUFNLEdBQUk4WixLQUVQLE1BQVpoQixFQUVQQSxFQUFXLEdBRVMsaUJBQWJBLElBQ04sU0FBVUEsR0FBWSxPQUFRQSxLQW1EWm9DLEVBaERmMUUsR0FBWXNDLEVBQVMvYyxNQWdEQXljLEVBL0NyQmhDLEdBQVlzQyxFQUFTaGQsSUFGekJtZixFQW1ERUMsRUFBS3pnQixXQUFhK2QsRUFBTS9kLFdBSTlCK2QsRUFBUTRCLEdBQWdCNUIsRUFBTzBDLEdBQzNCQSxFQUFLRSxTQUFTNUMsR0FDZDVmLEVBQU15aUIsR0FBMEJILEVBQU0xQyxLQUV0QzVmLEVBQU15aUIsR0FBMEI3QyxFQUFPMEMsSUFDbkNyWixjQUFnQmpKLEVBQUlpSixhQUN4QmpKLEVBQUlzSixRQUFVdEosRUFBSXNKLFFBR2Z0SixHQVpJLENBQUVpSixhQUFjLEVBQUdLLE9BQVEsSUEvQ2xDNFcsRUFBVyxJQUNGbFgsR0FBS3FaLEVBQVFwWixhQUN0QmlYLEVBQVM3VyxFQUFJZ1osRUFBUS9ZLFFBR3pCOFksRUFBTSxJQUFJbkMsR0FBU0MsR0FFZlUsR0FBVy9oQixJQUFVSSxFQUFXSixFQUFPLGFBQ3ZDdWpCLEVBQUl0ZSxRQUFVakYsRUFBTWlGLFNBR3BCOGMsR0FBVy9oQixJQUFVSSxFQUFXSixFQUFPLGNBQ3ZDdWpCLEVBQUkzZixTQUFXNUQsRUFBTTRELFVBR2xCMmYsRUFNWCxTQUFTRyxHQUFTRyxFQUFLeEIsR0FJbkIsSUFBSWxoQixFQUFNMGlCLEdBQU9yQyxXQUFXcUMsRUFBSXJiLFFBQVEsSUFBSyxNQUU3QyxPQUFRbkYsTUFBTWxDLEdBQU8sRUFBSUEsR0FBT2toQixFQUdwQyxTQUFTdUIsR0FBMEJILEVBQU0xQyxHQUNyQyxJQUFJNWYsRUFBTSxHQVVWLE9BUkFBLEVBQUlzSixPQUNBc1csRUFBTXJXLFFBQVUrWSxFQUFLL1ksUUFBeUMsSUFBOUJxVyxFQUFNalYsT0FBUzJYLEVBQUszWCxRQUNwRDJYLEVBQUtYLFFBQVFqQyxJQUFJMWYsRUFBSXNKLE9BQVEsS0FBS3FaLFFBQVEvQyxNQUN4QzVmLEVBQUlzSixPQUdWdEosRUFBSWlKLGNBQWdCMlcsR0FBUzBDLEVBQUtYLFFBQVFqQyxJQUFJMWYsRUFBSXNKLE9BQVEsS0FFbkR0SixFQXNCWCxTQUFTNGlCLEdBQVlDLEVBQVcvbEIsR0FDNUIsT0FBTyxTQUFVdUcsRUFBS3lmLEdBQ2xCLElBQVNDLEVBbUJULE9BakJlLE9BQVhELEdBQW9CNWdCLE9BQU80Z0IsS0FDM0IzZCxFQUNJckksRUFDQSxZQUNJQSxFQUNBLHVEQUNBQSxFQUhKLGtHQU9KaW1CLEVBQU0xZixFQUNOQSxFQUFNeWYsRUFDTkEsRUFBU0MsR0FJYkMsR0FBWW5nQixLQUROc2YsR0FBZTllLEVBQUt5ZixHQUNIRCxHQUNoQmhnQixNQUlmLFNBQVNtZ0IsR0FBWTFiLEVBQUs0WSxFQUFVK0MsRUFBVWhmLEdBQzFDLElBQUlnRixFQUFlaVgsRUFBU0ssY0FDeEJyWSxFQUFPMlksR0FBU1gsRUFBU00sT0FDekJsWCxFQUFTdVgsR0FBU1gsRUFBU08sU0FFMUJuWixFQUFJekYsWUFLVG9DLEVBQStCLE1BQWhCQSxHQUE4QkEsRUFFekNxRixHQUNBNEksR0FBUzVLLEVBQUtsSyxHQUFJa0ssRUFBSyxTQUFXZ0MsRUFBUzJaLEdBRTNDL2EsR0FDQTZHLEdBQU16SCxFQUFLLE9BQVFsSyxHQUFJa0ssRUFBSyxRQUFVWSxFQUFPK2EsR0FFN0NoYSxHQUNBM0IsRUFBSXJGLEdBQUcyZixRQUFRdGEsRUFBSXJGLEdBQUc3QixVQUFZNkksRUFBZWdhLEdBRWpEaGYsR0FDQXhGLEVBQU13RixhQUFhcUQsRUFBS1ksR0FBUW9CLElBNUZ4QzZZLEdBQWVwaUIsR0FBS2tnQixHQUFTOWhCLFVBQzdCZ2tCLEdBQWVlLFFBL1hmLFdBQ0ksT0FBT2YsR0FBZXhmLE1BNmQxQixJQUFJK2MsR0FBTWtELEdBQVksRUFBRyxPQUNyQk8sR0FBV1AsSUFBYSxFQUFHLFlBRS9CLFNBQVNRLEdBQVN2a0IsR0FDZCxNQUF3QixpQkFBVkEsR0FBc0JBLGFBQWlCd2tCLE9BSXpELFNBQVNDLEdBQWN6a0IsR0FDbkIsT0FDSXFGLEVBQVNyRixJQUNUYyxFQUFPZCxJQUNQdWtCLEdBQVN2a0IsSUFDVGEsRUFBU2IsSUFpRGpCLFNBQStCQSxHQUMzQixJQUFJMGtCLEVBQVkza0IsRUFBUUMsR0FDcEIya0IsR0FBZSxFQU9uQixPQU5JRCxJQUNBQyxFQUdrQixJQUZkM2tCLEVBQU00a0IsUUFBTyxTQUFVQyxHQUNuQixPQUFRaGtCLEVBQVNna0IsSUFBU04sR0FBU3ZrQixNQUNwQ1UsUUFFSmdrQixHQUFhQyxFQXpEaEJHLENBQXNCOWtCLElBTzlCLFNBQTZCQSxHQUN6QixJQTRCSXRDLEVBQ0EyQixFQTdCQTBsQixFQUFhNWtCLEVBQVNILEtBQVdPLEVBQWNQLEdBQy9DZ2xCLEdBQWUsRUFDZkMsRUFBYSxDQUNULFFBQ0EsT0FDQSxJQUNBLFNBQ0EsUUFDQSxJQUNBLE9BQ0EsTUFDQSxJQUNBLFFBQ0EsT0FDQSxJQUNBLFFBQ0EsT0FDQSxJQUNBLFVBQ0EsU0FDQSxJQUNBLFVBQ0EsU0FDQSxJQUNBLGVBQ0EsY0FDQSxNQUlKQyxFQUFjRCxFQUFXdmtCLE9BRTdCLElBQUtoRCxFQUFJLEVBQUdBLEVBQUl3bkIsRUFBYXhuQixHQUFLLEVBQzlCMkIsRUFBVzRsQixFQUFXdm5CLEdBQ3RCc25CLEVBQWVBLEdBQWdCNWtCLEVBQVdKLEVBQU9YLEdBR3JELE9BQU8wbEIsR0FBY0MsRUE1Q2pCRyxDQUFvQm5sQixJQU5qQixNQU9IQSxFQTBEUixTQUFTb2xCLEdBQWVwbEIsR0FDcEIsSUFVSXRDLEVBVkFxbkIsRUFBYTVrQixFQUFTSCxLQUFXTyxFQUFjUCxHQUMvQ2dsQixHQUFlLEVBQ2ZDLEVBQWEsQ0FDVCxVQUNBLFVBQ0EsVUFDQSxXQUNBLFdBQ0EsWUFLUixJQUFLdm5CLEVBQUksRUFBR0EsRUFBSXVuQixFQUFXdmtCLE9BQVFoRCxHQUFLLEVBRXBDc25CLEVBQWVBLEdBQWdCNWtCLEVBQVdKLEVBRC9CaWxCLEVBQVd2bkIsSUFJMUIsT0FBT3FuQixHQUFjQyxFQTRLekIsU0FBU0ssR0FBVWhsQixFQUFHQyxHQUNsQixHQUFJRCxFQUFFK0ksT0FBUzlJLEVBQUU4SSxPQUdiLE9BQVFpYyxHQUFVL2tCLEVBQUdELEdBR3pCLElBQUlpbEIsRUFBeUMsSUFBdkJobEIsRUFBRXdMLE9BQVN6TCxFQUFFeUwsU0FBZ0J4TCxFQUFFb0ssUUFBVXJLLEVBQUVxSyxTQUU3RDZhLEVBQVNsbEIsRUFBRXlpQixRQUFRakMsSUFBSXlFLEVBQWdCLFVBZTNDLFFBQVNBLEdBWExobEIsRUFBSWlsQixFQUFTLEdBR0hqbEIsRUFBSWlsQixJQUFXQSxFQUZmbGxCLEVBQUV5aUIsUUFBUWpDLElBQUl5RSxFQUFpQixFQUFHLFlBTWxDaGxCLEVBQUlpbEIsSUFGSmxsQixFQUFFeWlCLFFBQVFqQyxJQUFJeUUsRUFBaUIsRUFBRyxVQUVUQyxNQUlGLEVBbUh6QyxTQUFTN2pCLEdBQU96QyxHQUNaLElBQUl1bUIsRUFFSixZQUFZL2hCLElBQVJ4RSxFQUNPK0UsS0FBS2lCLFFBQVFtVixPQUdDLE9BRHJCb0wsRUFBZ0JoTCxHQUFVdmIsTUFFdEIrRSxLQUFLaUIsUUFBVXVnQixHQUVaeGhCLE1BMUhmcEUsRUFBTTZsQixjQUFnQix1QkFDdEI3bEIsRUFBTThsQixpQkFBbUIseUJBNkh6QixJQUFJQyxHQUFPamdCLEVBQ1AsbUpBQ0EsU0FBVXpHLEdBQ04sWUFBWXdFLElBQVJ4RSxFQUNPK0UsS0FBS21FLGFBRUxuRSxLQUFLdEMsT0FBT3pDLE1BSy9CLFNBQVNrSixLQUNMLE9BQU9uRSxLQUFLaUIsUUFTaEIsU0FBUzJnQixHQUFNQyxFQUFVQyxHQUNyQixPQUFTRCxFQUFXQyxFQUFXQSxHQUFXQSxFQUc5QyxTQUFTQyxHQUFpQm5hLEVBQUc5TixFQUFHRSxHQUU1QixPQUFJNE4sRUFBSSxLQUFPQSxHQUFLLEVBRVQsSUFBSTdLLEtBQUs2SyxFQUFJLElBQUs5TixFQUFHRSxHQVhiLFlBYVIsSUFBSStDLEtBQUs2SyxFQUFHOU4sRUFBR0UsR0FBR3VELFVBSWpDLFNBQVN5a0IsR0FBZXBhLEVBQUc5TixFQUFHRSxHQUUxQixPQUFJNE4sRUFBSSxLQUFPQSxHQUFLLEVBRVQ3SyxLQUFLd1QsSUFBSTNJLEVBQUksSUFBSzlOLEVBQUdFLEdBckJiLFlBdUJSK0MsS0FBS3dULElBQUkzSSxFQUFHOU4sRUFBR0UsR0FvYjlCLFNBQVNpb0IsR0FBYS9YLEVBQVV4TSxHQUM1QixPQUFPQSxFQUFPd2tCLGNBQWNoWSxHQWVoQyxTQUFTaVksS0FDTCxJQUlJem9CLEVBQ0FDLEVBQ0F5b0IsRUFDQUMsRUFDQUMsRUFSQUMsRUFBYSxHQUNiQyxFQUFhLEdBQ2JDLEVBQWUsR0FDZjFTLEVBQWMsR0FNZDJTLEVBQU8xaUIsS0FBSzBpQixPQUVoQixJQUFLaHBCLEVBQUksRUFBR0MsRUFBSStvQixFQUFLaG1CLE9BQVFoRCxFQUFJQyxJQUFLRCxFQUNsQzBvQixFQUFXL1gsR0FBWXFZLEVBQUtocEIsR0FBR08sTUFDL0Jvb0IsRUFBV2hZLEdBQVlxWSxFQUFLaHBCLEdBQUdnZCxNQUMvQjRMLEVBQWFqWSxHQUFZcVksRUFBS2hwQixHQUFHaXBCLFFBRWpDSCxFQUFXbmxCLEtBQUsra0IsR0FDaEJHLEVBQVdsbEIsS0FBS2dsQixHQUNoQkksRUFBYXBsQixLQUFLaWxCLEdBQ2xCdlMsRUFBWTFTLEtBQUsra0IsR0FDakJyUyxFQUFZMVMsS0FBS2dsQixHQUNqQnRTLEVBQVkxUyxLQUFLaWxCLEdBR3JCdGlCLEtBQUs0aUIsV0FBYSxJQUFJeFksT0FBTyxLQUFPMkYsRUFBWTlOLEtBQUssS0FBTyxJQUFLLEtBQ2pFakMsS0FBSzZpQixlQUFpQixJQUFJelksT0FBTyxLQUFPb1ksRUFBV3ZnQixLQUFLLEtBQU8sSUFBSyxLQUNwRWpDLEtBQUs4aUIsZUFBaUIsSUFBSTFZLE9BQU8sS0FBT21ZLEVBQVd0Z0IsS0FBSyxLQUFPLElBQUssS0FDcEVqQyxLQUFLK2lCLGlCQUFtQixJQUFJM1ksT0FDeEIsS0FBT3FZLEVBQWF4Z0IsS0FBSyxLQUFPLElBQ2hDLEtBY1IsU0FBUytnQixHQUF1QmxmLEVBQU81SixHQUNuQzJKLEVBQWUsRUFBRyxDQUFDQyxFQUFPQSxFQUFNcEgsUUFBUyxFQUFHeEMsR0EwRWhELFNBQVMrb0IsR0FBcUJqbkIsRUFBT3dMLEVBQU0vQixFQUFTZ0wsRUFBS0MsR0FDckQsSUFBSXdTLEVBQ0osT0FBYSxNQUFUbG5CLEVBQ08rVSxHQUFXL1EsS0FBTXlRLEVBQUtDLEdBQUs1SSxNQUc5Qk4sR0FESjBiLEVBQWNoUyxHQUFZbFYsRUFBT3lVLEVBQUtDLE1BRWxDbEosRUFBTzBiLEdBRUpDLEdBQVd0cEIsS0FBS21HLEtBQU1oRSxFQUFPd0wsRUFBTS9CLEVBQVNnTCxFQUFLQyxJQUloRSxTQUFTeVMsR0FBV3phLEVBQVVsQixFQUFNL0IsRUFBU2dMLEVBQUtDLEdBQzlDLElBQUkwUyxFQUFnQnhTLEdBQW1CbEksRUFBVWxCLEVBQU0vQixFQUFTZ0wsRUFBS0MsR0FDakV0TCxFQUFPa0wsR0FBYzhTLEVBQWN0YixLQUFNLEVBQUdzYixFQUFjM2EsV0FLOUQsT0FIQXpJLEtBQUs4SCxLQUFLMUMsRUFBSzhILGtCQUNmbE4sS0FBSzBHLE1BQU10QixFQUFLNEgsZUFDaEJoTixLQUFLb0YsS0FBS0EsRUFBS3dILGNBQ1I1TSxLQXRZWDZELEVBQWUsSUFBSyxFQUFHLEVBQUcsV0FDMUJBLEVBQWUsS0FBTSxFQUFHLEVBQUcsV0FDM0JBLEVBQWUsTUFBTyxFQUFHLEVBQUcsV0FDNUJBLEVBQWUsT0FBUSxFQUFHLEVBQUcsV0FDN0JBLEVBQWUsUUFBUyxFQUFHLEVBQUcsYUFFOUJBLEVBQWUsSUFBSyxDQUFDLElBQUssR0FBSSxLQUFNLFdBQ3BDQSxFQUFlLElBQUssQ0FBQyxLQUFNLEdBQUksRUFBRyxXQUNsQ0EsRUFBZSxJQUFLLENBQUMsTUFBTyxHQUFJLEVBQUcsV0FDbkNBLEVBQWUsSUFBSyxDQUFDLE9BQVEsR0FBSSxFQUFHLFdBRXBDa0csR0FBYyxJQUFLa1ksSUFDbkJsWSxHQUFjLEtBQU1rWSxJQUNwQmxZLEdBQWMsTUFBT2tZLElBQ3JCbFksR0FBYyxRQWlPZCxTQUFzQkcsRUFBVXhNLEdBQzVCLE9BQU9BLEVBQU8ybEIsY0FBY25aLE1Bak9oQ0gsR0FBYyxTQW9PZCxTQUF3QkcsRUFBVXhNLEdBQzlCLE9BQU9BLEVBQU80bEIsZ0JBQWdCcFosTUFuT2xDaUIsR0FDSSxDQUFDLElBQUssS0FBTSxNQUFPLE9BQVEsVUFDM0IsU0FBVW5QLEVBQU9zSSxFQUFPbkQsRUFBUTJDLEdBQzVCLElBQUlsRixFQUFNdUMsRUFBT0YsUUFBUXNpQixVQUFVdm5CLEVBQU84SCxFQUFPM0MsRUFBTzNCLFNBQ3BEWixFQUNBZCxFQUFnQnFELEdBQVF2QyxJQUFNQSxFQUU5QmQsRUFBZ0JxRCxHQUFRN0MsV0FBYXRDLEtBS2pEK04sR0FBYyxJQUFLUCxJQUNuQk8sR0FBYyxLQUFNUCxJQUNwQk8sR0FBYyxNQUFPUCxJQUNyQk8sR0FBYyxPQUFRUCxJQUN0Qk8sR0FBYyxNQXNOZCxTQUE2QkcsRUFBVXhNLEdBQ25DLE9BQU9BLEVBQU84bEIsc0JBQXdCaGEsTUFyTjFDMkIsR0FBYyxDQUFDLElBQUssS0FBTSxNQUFPLFFBNThHdEIsR0E2OEdYQSxHQUFjLENBQUMsT0FBTyxTQUFVblAsRUFBT3NJLEVBQU9uRCxFQUFRMkMsR0FDbEQsSUFBSVMsRUFDQXBELEVBQU9GLFFBQVF1aUIsdUJBQ2ZqZixFQUFRdkksRUFBTXVJLE1BQU1wRCxFQUFPRixRQUFRdWlCLHVCQUduQ3JpQixFQUFPRixRQUFRd2lCLG9CQUNmbmYsRUFwOUdHLEdBbzlHV25ELEVBQU9GLFFBQVF3aUIsb0JBQW9Cem5CLEVBQU91SSxHQUV4REQsRUF0OUdHLEdBczlHV3NILFNBQVM1UCxFQUFPLE9Ba1B0QzZILEVBQWUsRUFBRyxDQUFDLEtBQU0sR0FBSSxHQUFHLFdBQzVCLE9BQU83RCxLQUFLMEksV0FBYSxPQUc3QjdFLEVBQWUsRUFBRyxDQUFDLEtBQU0sR0FBSSxHQUFHLFdBQzVCLE9BQU83RCxLQUFLMkksY0FBZ0IsT0FPaENxYSxHQUF1QixPQUFRLFlBQy9CQSxHQUF1QixRQUFTLFlBQ2hDQSxHQUF1QixPQUFRLGVBQy9CQSxHQUF1QixRQUFTLGVBTWhDalosR0FBYyxJQUFLTixJQUNuQk0sR0FBYyxJQUFLTixJQUNuQk0sR0FBYyxLQUFNYixFQUFXSixHQUMvQmlCLEdBQWMsS0FBTWIsRUFBV0osR0FDL0JpQixHQUFjLE9BQVFULEVBQVdOLEdBQ2pDZSxHQUFjLE9BQVFULEVBQVdOLEdBQ2pDZSxHQUFjLFFBQVNSLEdBQVdOLEdBQ2xDYyxHQUFjLFFBQVNSLEdBQVdOLEdBRWxDb0MsR0FDSSxDQUFDLE9BQVEsUUFBUyxPQUFRLFVBQzFCLFNBQVVyUCxFQUFPd0wsRUFBTXJHLEVBQVEyQyxHQUMzQjBELEVBQUsxRCxFQUFNTixPQUFPLEVBQUcsSUFBTXNILEdBQU05TyxNQUl6Q3FQLEdBQWtCLENBQUMsS0FBTSxPQUFPLFNBQVVyUCxFQUFPd0wsRUFBTXJHLEVBQVEyQyxHQUMzRDBELEVBQUsxRCxHQUFTbEksRUFBTStQLGtCQUFrQjNQLE1Bc0UxQzZILEVBQWUsSUFBSyxFQUFHLEtBQU0sV0FJN0JrRyxHQUFjLElBQUtsQixHQUNuQnNDLEdBQWMsS0FBSyxTQUFVblAsRUFBT3NJLEdBQ2hDQSxFQXp6SFEsR0F5ekg0QixHQUFwQndHLEdBQU05TyxHQUFTLE1BYW5DNkgsRUFBZSxJQUFLLENBQUMsS0FBTSxHQUFJLEtBQU0sUUFJckNrRyxHQUFjLElBQUtiLEVBQVdXLElBQzlCRSxHQUFjLEtBQU1iLEVBQVdKLEdBQy9CaUIsR0FBYyxNQUFNLFNBQVVHLEVBQVV4TSxHQUVwQyxPQUFPd00sRUFDRHhNLEVBQU9nbUIseUJBQTJCaG1CLEVBQU9pbUIsY0FDekNqbUIsRUFBT2ttQixrQ0FHakJ6WSxHQUFjLENBQUMsSUFBSyxNQWwxSFQsR0FtMUhYQSxHQUFjLE1BQU0sU0FBVW5QLEVBQU9zSSxHQUNqQ0EsRUFwMUhPLEdBbzFIT3dHLEdBQU05TyxFQUFNdUksTUFBTTJFLEdBQVcsT0FLL0MsSUFBSTJhLEdBQW1COVgsR0FBVyxRQUFRLEdBSTFDbEksRUFBZSxNQUFPLENBQUMsT0FBUSxHQUFJLE9BQVEsYUFJM0NrRyxHQUFjLE1BQU9WLEdBQ3JCVSxHQUFjLE9BQVFoQixHQUN0Qm9DLEdBQWMsQ0FBQyxNQUFPLFNBQVMsU0FBVW5QLEVBQU9zSSxFQUFPbkQsR0FDbkRBLEVBQU84WixXQUFhblEsR0FBTTlPLE1BaUI5QjZILEVBQWUsSUFBSyxDQUFDLEtBQU0sR0FBSSxFQUFHLFVBSWxDa0csR0FBYyxJQUFLYixFQUFXWSxJQUM5QkMsR0FBYyxLQUFNYixFQUFXSixHQUMvQnFDLEdBQWMsQ0FBQyxJQUFLLE1BejNIUCxHQTYzSGIsSUFBSTJZLEdBQWUvWCxHQUFXLFdBQVcsR0FJekNsSSxFQUFlLElBQUssQ0FBQyxLQUFNLEdBQUksRUFBRyxVQUlsQ2tHLEdBQWMsSUFBS2IsRUFBV1ksSUFDOUJDLEdBQWMsS0FBTWIsRUFBV0osR0FDL0JxQyxHQUFjLENBQUMsSUFBSyxNQXQ0SFAsR0EwNEhiLElBc0NJckgsR0FBT2lnQixHQXRDUEMsR0FBZWpZLEdBQVcsV0FBVyxHQXVDekMsSUFuQ0FsSSxFQUFlLElBQUssRUFBRyxHQUFHLFdBQ3RCLFNBQVU3RCxLQUFLcUcsY0FBZ0IsUUFHbkN4QyxFQUFlLEVBQUcsQ0FBQyxLQUFNLEdBQUksR0FBRyxXQUM1QixTQUFVN0QsS0FBS3FHLGNBQWdCLE9BR25DeEMsRUFBZSxFQUFHLENBQUMsTUFBTyxHQUFJLEVBQUcsZUFDakNBLEVBQWUsRUFBRyxDQUFDLE9BQVEsR0FBSSxHQUFHLFdBQzlCLE9BQTRCLEdBQXJCN0QsS0FBS3FHLGlCQUVoQnhDLEVBQWUsRUFBRyxDQUFDLFFBQVMsR0FBSSxHQUFHLFdBQy9CLE9BQTRCLElBQXJCN0QsS0FBS3FHLGlCQUVoQnhDLEVBQWUsRUFBRyxDQUFDLFNBQVUsR0FBSSxHQUFHLFdBQ2hDLE9BQTRCLElBQXJCN0QsS0FBS3FHLGlCQUVoQnhDLEVBQWUsRUFBRyxDQUFDLFVBQVcsR0FBSSxHQUFHLFdBQ2pDLE9BQTRCLElBQXJCN0QsS0FBS3FHLGlCQUVoQnhDLEVBQWUsRUFBRyxDQUFDLFdBQVksR0FBSSxHQUFHLFdBQ2xDLE9BQTRCLElBQXJCN0QsS0FBS3FHLGlCQUVoQnhDLEVBQWUsRUFBRyxDQUFDLFlBQWEsR0FBSSxHQUFHLFdBQ25DLE9BQTRCLElBQXJCN0QsS0FBS3FHLGlCQUtoQjBELEdBQWMsSUFBS1YsRUFBV1IsR0FDOUJrQixHQUFjLEtBQU1WLEVBQVdQLEdBQy9CaUIsR0FBYyxNQUFPVixFQUFXTixHQUczQmpGLEdBQVEsT0FBUUEsR0FBTXBILFFBQVUsRUFBR29ILElBQVMsSUFDN0NpRyxHQUFjakcsR0FBTzBGLElBR3pCLFNBQVN5YSxHQUFRam9CLEVBQU9zSSxHQUNwQkEsRUFyN0hjLEdBcTdIT3dHLEdBQXVCLEtBQWhCLEtBQU85TyxJQUd2QyxJQUFLOEgsR0FBUSxJQUFLQSxHQUFNcEgsUUFBVSxFQUFHb0gsSUFBUyxJQUMxQ3FILEdBQWNySCxHQUFPbWdCLElBR3pCRixHQUFvQmhZLEdBQVcsZ0JBQWdCLEdBSS9DbEksRUFBZSxJQUFLLEVBQUcsRUFBRyxZQUMxQkEsRUFBZSxLQUFNLEVBQUcsRUFBRyxZQVkzQixJQUFJcWdCLEdBQVFoakIsRUFBTzVGLFVBZ0huQixTQUFTNm9CLEdBQW1CdkwsR0FDeEIsT0FBT0EsRUEvR1hzTCxHQUFNckgsSUFBTUEsR0FDWnFILEdBQU1qUSxTQWhsQ04sU0FBb0JtUSxFQUFNQyxHQUVHLElBQXJCdm9CLFVBQVVZLFNBQ0xaLFVBQVUsR0FHSjJrQixHQUFjM2tCLFVBQVUsS0FDL0Jzb0IsRUFBT3RvQixVQUFVLEdBQ2pCdW9CLE9BQVU1a0IsR0FDSDJoQixHQUFldGxCLFVBQVUsTUFDaEN1b0IsRUFBVXZvQixVQUFVLEdBQ3BCc29CLE9BQU8za0IsSUFQUDJrQixPQUFPM2tCLEVBQ1A0a0IsT0FBVTVrQixJQVdsQixJQUFJZ2IsRUFBTTJKLEdBQVFySixLQUNkdUosRUFBTTNGLEdBQWdCbEUsRUFBS3phLE1BQU11a0IsUUFBUSxPQUN6QzltQixFQUFTN0IsRUFBTTRvQixlQUFleGtCLEtBQU1za0IsSUFBUSxXQUM1QzVmLEVBQ0kyZixJQUNDOWhCLEVBQVc4aEIsRUFBUTVtQixJQUNkNG1CLEVBQVE1bUIsR0FBUTVELEtBQUttRyxLQUFNeWEsR0FDM0I0SixFQUFRNW1CLElBRXRCLE9BQU91QyxLQUFLdkMsT0FDUmlILEdBQVUxRSxLQUFLbUUsYUFBYThQLFNBQVN4VyxFQUFRdUMsS0FBTSthLEdBQVlOLE1BdWpDdkV5SixHQUFNcEYsTUFuakNOLFdBQ0ksT0FBTyxJQUFJNWQsRUFBT2xCLE9BbWpDdEJra0IsR0FBTXJGLEtBMytCTixTQUFjN2lCLEVBQU9nTSxFQUFPeWMsR0FDeEIsSUFBSUMsRUFBTUMsRUFBV2pnQixFQUVyQixJQUFLMUUsS0FBS2hCLFVBQ04sT0FBT2MsSUFLWCxLQUZBNGtCLEVBQU8vRixHQUFnQjNpQixFQUFPZ0UsT0FFcEJoQixVQUNOLE9BQU9jLElBT1gsT0FKQTZrQixFQUFvRCxLQUF2Q0QsRUFBS3RHLFlBQWNwZSxLQUFLb2UsYUFFckNwVyxFQUFRRCxFQUFlQyxJQUduQixJQUFLLE9BQ0R0RCxFQUFTMmMsR0FBVXJoQixLQUFNMGtCLEdBQVEsR0FDakMsTUFDSixJQUFLLFFBQ0RoZ0IsRUFBUzJjLEdBQVVyaEIsS0FBTTBrQixHQUN6QixNQUNKLElBQUssVUFDRGhnQixFQUFTMmMsR0FBVXJoQixLQUFNMGtCLEdBQVEsRUFDakMsTUFDSixJQUFLLFNBQ0RoZ0IsR0FBVTFFLEtBQU8wa0IsR0FBUSxJQUN6QixNQUNKLElBQUssU0FDRGhnQixHQUFVMUUsS0FBTzBrQixHQUFRLElBQ3pCLE1BQ0osSUFBSyxPQUNEaGdCLEdBQVUxRSxLQUFPMGtCLEdBQVEsS0FDekIsTUFDSixJQUFLLE1BQ0RoZ0IsR0FBVTFFLEtBQU8wa0IsRUFBT0MsR0FBYSxNQUNyQyxNQUNKLElBQUssT0FDRGpnQixHQUFVMUUsS0FBTzBrQixFQUFPQyxHQUFhLE9BQ3JDLE1BQ0osUUFDSWpnQixFQUFTMUUsS0FBTzBrQixFQUd4QixPQUFPRCxFQUFVL2YsRUFBU2lHLEdBQVNqRyxJQTg3QnZDd2YsR0FBTVUsTUF0ckJOLFNBQWU1YyxHQUNYLElBQUlvYyxFQUFNUyxFQUVWLFFBQWNwbEIsS0FEZHVJLEVBQVFELEVBQWVDLEtBQ2MsZ0JBQVZBLElBQTRCaEksS0FBS2hCLFVBQ3hELE9BQU9nQixLQUtYLE9BRkE2a0IsRUFBYzdrQixLQUFLZSxPQUFTaWhCLEdBQWlCRCxHQUVyQy9aLEdBQ0osSUFBSyxPQUNEb2MsRUFBT1MsRUFBWTdrQixLQUFLOEgsT0FBUyxFQUFHLEVBQUcsR0FBSyxFQUM1QyxNQUNKLElBQUssVUFDRHNjLEVBQ0lTLEVBQ0k3a0IsS0FBSzhILE9BQ0w5SCxLQUFLMEcsUUFBVzFHLEtBQUswRyxRQUFVLEVBQUssRUFDcEMsR0FDQSxFQUNSLE1BQ0osSUFBSyxRQUNEMGQsRUFBT1MsRUFBWTdrQixLQUFLOEgsT0FBUTlILEtBQUswRyxRQUFVLEVBQUcsR0FBSyxFQUN2RCxNQUNKLElBQUssT0FDRDBkLEVBQ0lTLEVBQ0k3a0IsS0FBSzhILE9BQ0w5SCxLQUFLMEcsUUFDTDFHLEtBQUtvRixPQUFTcEYsS0FBS3lGLFVBQVksR0FDL0IsRUFDUixNQUNKLElBQUssVUFDRDJlLEVBQ0lTLEVBQ0k3a0IsS0FBSzhILE9BQ0w5SCxLQUFLMEcsUUFDTDFHLEtBQUtvRixRQUFVcEYsS0FBS3dJLGFBQWUsR0FBSyxHQUN4QyxFQUNSLE1BQ0osSUFBSyxNQUNMLElBQUssT0FDRDRiLEVBQU9TLEVBQVk3a0IsS0FBSzhILE9BQVE5SCxLQUFLMEcsUUFBUzFHLEtBQUtvRixPQUFTLEdBQUssRUFDakUsTUFDSixJQUFLLE9BQ0RnZixFQUFPcGtCLEtBQUtaLEdBQUc3QixVQUNmNm1CLEdBeklNLEtBMklGeEMsR0FDSXdDLEdBQVFwa0IsS0FBS2UsT0FBUyxFQTdJdEIsSUE2STBCZixLQUFLb2UsYUE1SWpDLE1BK0lGLEVBQ0osTUFDSixJQUFLLFNBQ0RnRyxFQUFPcGtCLEtBQUtaLEdBQUc3QixVQUNmNm1CLEdBcEpRLElBb0pnQnhDLEdBQU13QyxFQXBKdEIsS0FvSjZDLEVBQ3JELE1BQ0osSUFBSyxTQUNEQSxFQUFPcGtCLEtBQUtaLEdBQUc3QixVQUNmNm1CLEdBekpRLElBeUpnQnhDLEdBQU13QyxFQXpKdEIsS0F5SjZDLEVBTTdELE9BRkFwa0IsS0FBS1osR0FBRzJmLFFBQVFxRixHQUNoQnhvQixFQUFNd0YsYUFBYXBCLE1BQU0sR0FDbEJBLE1BcW5CWGtrQixHQUFNem1CLE9BaDJCTixTQUFnQnFuQixHQUNQQSxJQUNEQSxFQUFjOWtCLEtBQUttZixRQUNidmpCLEVBQU04bEIsaUJBQ045bEIsRUFBTTZsQixlQUVoQixJQUFJL2MsRUFBU04sRUFBYXBFLEtBQU04a0IsR0FDaEMsT0FBTzlrQixLQUFLbUUsYUFBYTRnQixXQUFXcmdCLElBMDFCeEN3ZixHQUFNNWpCLEtBdjFCTixTQUFjOGpCLEVBQU1ZLEdBQ2hCLE9BQ0lobEIsS0FBS2hCLFlBQ0hxQyxFQUFTK2lCLElBQVNBLEVBQUtwbEIsV0FBYytiLEdBQVlxSixHQUFNcGxCLFdBRWxEc2dCLEdBQWUsQ0FBRWpmLEdBQUlMLEtBQU1NLEtBQU04akIsSUFDbkMxbUIsT0FBT3NDLEtBQUt0QyxVQUNadW5CLFVBQVVELEdBRVJobEIsS0FBS21FLGFBQWFTLGVBKzBCakNzZixHQUFNZ0IsUUEzMEJOLFNBQWlCRixHQUNiLE9BQU9obEIsS0FBS00sS0FBS3lhLEtBQWVpSyxJQTIwQnBDZCxHQUFNN2pCLEdBeDBCTixTQUFZK2pCLEVBQU1ZLEdBQ2QsT0FDSWhsQixLQUFLaEIsWUFDSHFDLEVBQVMraUIsSUFBU0EsRUFBS3BsQixXQUFjK2IsR0FBWXFKLEdBQU1wbEIsV0FFbERzZ0IsR0FBZSxDQUFFaGYsS0FBTU4sS0FBTUssR0FBSStqQixJQUNuQzFtQixPQUFPc0MsS0FBS3RDLFVBQ1p1bkIsVUFBVUQsR0FFUmhsQixLQUFLbUUsYUFBYVMsZUFnMEJqQ3NmLEdBQU1pQixNQTV6Qk4sU0FBZUgsR0FDWCxPQUFPaGxCLEtBQUtLLEdBQUcwYSxLQUFlaUssSUE0ekJsQ2QsR0FBTTNwQixJQXgwSE4sU0FBbUJ5TixHQUVmLE9BQUl6RixFQUFXdkMsS0FEZmdJLEVBQVFELEVBQWVDLEtBRVpoSSxLQUFLZ0ksS0FFVGhJLE1BbzBIWGtrQixHQUFNa0IsVUFya0JOLFdBQ0ksT0FBT3RuQixFQUFnQmtDLE1BQU03QixVQXFrQmpDK2xCLEdBQU1wRSxRQXpqQ04sU0FBaUI5akIsRUFBT2dNLEdBQ3BCLElBQUlxZCxFQUFhaGtCLEVBQVNyRixHQUFTQSxFQUFRK2UsR0FBWS9lLEdBQ3ZELFNBQU1nRSxLQUFLaEIsWUFBYXFtQixFQUFXcm1CLGFBSXJCLGlCQURkZ0osRUFBUUQsRUFBZUMsSUFBVSxlQUV0QmhJLEtBQUt6QyxVQUFZOG5CLEVBQVc5bkIsVUFFNUI4bkIsRUFBVzluQixVQUFZeUMsS0FBSzhlLFFBQVF5RixRQUFRdmMsR0FBT3pLLFlBaWpDbEUybUIsR0FBTXZFLFNBN2lDTixTQUFrQjNqQixFQUFPZ00sR0FDckIsSUFBSXFkLEVBQWFoa0IsRUFBU3JGLEdBQVNBLEVBQVErZSxHQUFZL2UsR0FDdkQsU0FBTWdFLEtBQUtoQixZQUFhcW1CLEVBQVdybUIsYUFJckIsaUJBRGRnSixFQUFRRCxFQUFlQyxJQUFVLGVBRXRCaEksS0FBS3pDLFVBQVk4bkIsRUFBVzluQixVQUU1QnlDLEtBQUs4ZSxRQUFROEYsTUFBTTVjLEdBQU96SyxVQUFZOG5CLEVBQVc5bkIsWUFxaUNoRTJtQixHQUFNb0IsVUFqaUNOLFNBQW1CaGxCLEVBQU1ELEVBQUkySCxFQUFPdWQsR0FDaEMsSUFBSUMsRUFBWW5rQixFQUFTZixHQUFRQSxFQUFPeWEsR0FBWXphLEdBQ2hEbWxCLEVBQVVwa0IsRUFBU2hCLEdBQU1BLEVBQUswYSxHQUFZMWEsR0FDOUMsU0FBTUwsS0FBS2hCLFdBQWF3bUIsRUFBVXhtQixXQUFheW1CLEVBQVF6bUIsY0FLL0IsT0FGeEJ1bUIsRUFBY0EsR0FBZSxNQUVaLEdBQ1B2bEIsS0FBSzhmLFFBQVEwRixFQUFXeGQsSUFDdkJoSSxLQUFLMmYsU0FBUzZGLEVBQVd4ZCxNQUNaLE1BQW5CdWQsRUFBWSxHQUNQdmxCLEtBQUsyZixTQUFTOEYsRUFBU3pkLElBQ3RCaEksS0FBSzhmLFFBQVEyRixFQUFTemQsTUFxaENyQ2tjLEdBQU13QixPQWpoQ04sU0FBZ0IxcEIsRUFBT2dNLEdBQ25CLElBQ0kyZCxFQURBTixFQUFhaGtCLEVBQVNyRixHQUFTQSxFQUFRK2UsR0FBWS9lLEdBRXZELFNBQU1nRSxLQUFLaEIsWUFBYXFtQixFQUFXcm1CLGFBSXJCLGlCQURkZ0osRUFBUUQsRUFBZUMsSUFBVSxlQUV0QmhJLEtBQUt6QyxZQUFjOG5CLEVBQVc5bkIsV0FFckNvb0IsRUFBVU4sRUFBVzluQixVQUVqQnlDLEtBQUs4ZSxRQUFReUYsUUFBUXZjLEdBQU96SyxXQUFhb29CLEdBQ3pDQSxHQUFXM2xCLEtBQUs4ZSxRQUFROEYsTUFBTTVjLEdBQU96SyxhQXFnQ2pEMm1CLEdBQU0wQixjQWhnQ04sU0FBdUI1cEIsRUFBT2dNLEdBQzFCLE9BQU9oSSxLQUFLMGxCLE9BQU8xcEIsRUFBT2dNLElBQVVoSSxLQUFLOGYsUUFBUTlqQixFQUFPZ00sSUFnZ0M1RGtjLEdBQU0yQixlQTcvQk4sU0FBd0I3cEIsRUFBT2dNLEdBQzNCLE9BQU9oSSxLQUFLMGxCLE9BQU8xcEIsRUFBT2dNLElBQVVoSSxLQUFLMmYsU0FBUzNqQixFQUFPZ00sSUE2L0I3RGtjLEdBQU1sbEIsUUFwbEJOLFdBQ0ksT0FBT0EsRUFBUWdCLE9Bb2xCbkJra0IsR0FBTXZDLEtBQU9BLEdBQ2J1QyxHQUFNeG1CLE9BQVNBLEdBQ2Z3bUIsR0FBTS9mLFdBQWFBLEdBQ25CK2YsR0FBTTNnQixJQUFNeVosR0FDWmtILEdBQU01VSxJQUFNd04sR0FDWm9ILEdBQU00QixhQXRsQk4sV0FDSSxPQUFPeG9CLEVBQU8sR0FBSVEsRUFBZ0JrQyxRQXNsQnRDa2tCLEdBQU1yaEIsSUEvMEhOLFNBQW1CbUYsRUFBT3JOLEdBQ3RCLEdBQXFCLGlCQUFWcU4sRUFBb0IsQ0FFM0IsSUFDSXRPLEVBREFxc0IsRUFyU1osU0FBNkJDLEdBQ3pCLElBQ0lDLEVBREFqZSxFQUFRLEdBRVosSUFBS2llLEtBQUtELEVBQ0Y1cEIsRUFBVzRwQixFQUFVQyxJQUNyQmplLEVBQU0zSyxLQUFLLENBQUUyTyxLQUFNaWEsRUFBR0MsU0FBVTNkLEVBQVcwZCxLQU1uRCxPQUhBamUsRUFBTWdJLE1BQUssU0FBVTNULEVBQUdDLEdBQ3BCLE9BQU9ELEVBQUU2cEIsU0FBVzVwQixFQUFFNHBCLFlBRW5CbGUsRUEwUmVtZSxDQURsQm5lLEVBQVFFLEVBQXFCRixJQUd6Qm9lLEVBQWlCTCxFQUFZcnBCLE9BQ2pDLElBQUtoRCxFQUFJLEVBQUdBLEVBQUkwc0IsRUFBZ0Ixc0IsSUFDNUJzRyxLQUFLK2xCLEVBQVlyc0IsR0FBR3NTLE1BQU1oRSxFQUFNK2QsRUFBWXJzQixHQUFHc1MsWUFJbkQsR0FBSXpKLEVBQVd2QyxLQURmZ0ksRUFBUUQsRUFBZUMsS0FFbkIsT0FBT2hJLEtBQUtnSSxHQUFPck4sR0FHM0IsT0FBT3FGLE1BaTBIWGtrQixHQUFNSyxRQTN3Qk4sU0FBaUJ2YyxHQUNiLElBQUlvYyxFQUFNUyxFQUVWLFFBQWNwbEIsS0FEZHVJLEVBQVFELEVBQWVDLEtBQ2MsZ0JBQVZBLElBQTRCaEksS0FBS2hCLFVBQ3hELE9BQU9nQixLQUtYLE9BRkE2a0IsRUFBYzdrQixLQUFLZSxPQUFTaWhCLEdBQWlCRCxHQUVyQy9aLEdBQ0osSUFBSyxPQUNEb2MsRUFBT1MsRUFBWTdrQixLQUFLOEgsT0FBUSxFQUFHLEdBQ25DLE1BQ0osSUFBSyxVQUNEc2MsRUFBT1MsRUFDSDdrQixLQUFLOEgsT0FDTDlILEtBQUswRyxRQUFXMUcsS0FBSzBHLFFBQVUsRUFDL0IsR0FFSixNQUNKLElBQUssUUFDRDBkLEVBQU9TLEVBQVk3a0IsS0FBSzhILE9BQVE5SCxLQUFLMEcsUUFBUyxHQUM5QyxNQUNKLElBQUssT0FDRDBkLEVBQU9TLEVBQ0g3a0IsS0FBSzhILE9BQ0w5SCxLQUFLMEcsUUFDTDFHLEtBQUtvRixPQUFTcEYsS0FBS3lGLFdBRXZCLE1BQ0osSUFBSyxVQUNEMmUsRUFBT1MsRUFDSDdrQixLQUFLOEgsT0FDTDlILEtBQUswRyxRQUNMMUcsS0FBS29GLFFBQVVwRixLQUFLd0ksYUFBZSxJQUV2QyxNQUNKLElBQUssTUFDTCxJQUFLLE9BQ0Q0YixFQUFPUyxFQUFZN2tCLEtBQUs4SCxPQUFROUgsS0FBSzBHLFFBQVMxRyxLQUFLb0YsUUFDbkQsTUFDSixJQUFLLE9BQ0RnZixFQUFPcGtCLEtBQUtaLEdBQUc3QixVQUNmNm1CLEdBQVF4QyxHQUNKd0MsR0FBUXBrQixLQUFLZSxPQUFTLEVBekVsQixJQXlFc0JmLEtBQUtvZSxhQXhFN0IsTUEyRU4sTUFDSixJQUFLLFNBQ0RnRyxFQUFPcGtCLEtBQUtaLEdBQUc3QixVQUNmNm1CLEdBQVF4QyxHQUFNd0MsRUEvRU4sS0FnRlIsTUFDSixJQUFLLFNBQ0RBLEVBQU9wa0IsS0FBS1osR0FBRzdCLFVBQ2Y2bUIsR0FBUXhDLEdBQU13QyxFQXBGTixLQTBGaEIsT0FGQXBrQixLQUFLWixHQUFHMmYsUUFBUXFGLEdBQ2hCeG9CLEVBQU13RixhQUFhcEIsTUFBTSxHQUNsQkEsTUFndEJYa2tCLEdBQU01RCxTQUFXQSxHQUNqQjRELEdBQU1tQyxRQTduQk4sV0FDSSxJQUFJdnNCLEVBQUlrRyxLQUNSLE1BQU8sQ0FDSGxHLEVBQUVnTyxPQUNGaE8sRUFBRTRNLFFBQ0Y1TSxFQUFFc0wsT0FDRnRMLEVBQUVvTSxPQUNGcE0sRUFBRXlNLFNBQ0Z6TSxFQUFFaU4sU0FDRmpOLEVBQUV1TSxnQkFxbkJWNmQsR0FBTW9DLFNBam5CTixXQUNJLElBQUl4c0IsRUFBSWtHLEtBQ1IsTUFBTyxDQUNINkgsTUFBTy9OLEVBQUVnTyxPQUNUckIsT0FBUTNNLEVBQUU0TSxRQUNWdEIsS0FBTXRMLEVBQUVzTCxPQUNSYSxNQUFPbk0sRUFBRW1NLFFBQ1RLLFFBQVN4TSxFQUFFd00sVUFDWFEsUUFBU2hOLEVBQUVnTixVQUNYVixhQUFjdE0sRUFBRXNNLGlCQXltQnhCOGQsR0FBTXFDLE9Bbm9CTixXQUNJLE9BQU8sSUFBSXhwQixLQUFLaUQsS0FBS3pDLFlBbW9CekIybUIsR0FBTXNDLFlBcDdCTixTQUFxQkMsR0FDakIsSUFBS3ptQixLQUFLaEIsVUFDTixPQUFPLEtBRVgsSUFBSW5CLEdBQXFCLElBQWY0b0IsRUFDTjNzQixFQUFJK0QsRUFBTW1DLEtBQUs4ZSxRQUFRamhCLE1BQVFtQyxLQUNuQyxPQUFJbEcsRUFBRWdPLE9BQVMsR0FBS2hPLEVBQUVnTyxPQUFTLEtBQ3BCMUQsRUFDSHRLLEVBQ0ErRCxFQUNNLGlDQUNBLGdDQUdWMEUsRUFBV3hGLEtBQUt6QixVQUFVa3JCLGFBRXRCM29CLEVBQ09tQyxLQUFLdW1CLFNBQVNDLGNBRWQsSUFBSXpwQixLQUFLaUQsS0FBS3pDLFVBQStCLEdBQW5CeUMsS0FBS29lLFlBQW1CLEtBQ3BEb0ksY0FDQWhpQixRQUFRLElBQUtKLEVBQWF0SyxFQUFHLE1BR25Dc0ssRUFDSHRLLEVBQ0ErRCxFQUFNLCtCQUFpQywrQkEyNUIvQ3FtQixHQUFNd0MsUUFqNUJOLFdBQ0ksSUFBSzFtQixLQUFLaEIsVUFDTixNQUFPLHFCQUF1QmdCLEtBQUtXLEdBQUssT0FFNUMsSUFFSWdtQixFQUNBN2UsRUFFQThlLEVBTEExaUIsRUFBTyxTQUNQMmlCLEVBQU8sR0FjWCxPQVRLN21CLEtBQUs4bUIsWUFDTjVpQixFQUE0QixJQUFyQmxFLEtBQUtvZSxZQUFvQixhQUFlLG1CQUMvQ3lJLEVBQU8sS0FFWEYsRUFBUyxJQUFNemlCLEVBQU8sTUFDdEI0RCxFQUFPLEdBQUs5SCxLQUFLOEgsUUFBVTlILEtBQUs4SCxRQUFVLEtBQU8sT0FBUyxTQUUxRDhlLEVBQVNDLEVBQU8sT0FFVDdtQixLQUFLdkMsT0FBT2twQixFQUFTN2UsRUFIakIsd0JBR21DOGUsSUErM0I1QixvQkFBWG5zQixRQUF3QyxNQUFkQSxPQUFPc3NCLE1BQ3hDN0MsR0FBTXpwQixPQUFPc3NCLElBQUksK0JBQWlDLFdBQzlDLE1BQU8sVUFBWS9tQixLQUFLdkMsU0FBVyxNQUczQ3ltQixHQUFNOEMsT0E3bUJOLFdBRUksT0FBT2huQixLQUFLaEIsVUFBWWdCLEtBQUt3bUIsY0FBZ0IsTUE0bUJqRHRDLEdBQU1ob0IsU0FoOEJOLFdBQ0ksT0FBTzhELEtBQUs4ZSxRQUFRcGhCLE9BQU8sTUFBTUQsT0FBTyxxQ0FnOEI1Q3ltQixHQUFNK0MsS0FqcEJOLFdBQ0ksT0FBTzlqQixLQUFLMEgsTUFBTTdLLEtBQUt6QyxVQUFZLE1BaXBCdkMybUIsR0FBTTNtQixRQXRwQk4sV0FDSSxPQUFPeUMsS0FBS1osR0FBRzdCLFVBQWtDLEtBQXJCeUMsS0FBS2dCLFNBQVcsSUFzcEJoRGtqQixHQUFNZ0QsYUFobUJOLFdBQ0ksTUFBTyxDQUNIbHJCLE1BQU9nRSxLQUFLVyxHQUNabEQsT0FBUXVDLEtBQUtZLEdBQ2JsRCxPQUFRc0MsS0FBS2lCLFFBQ2JrTCxNQUFPbk0sS0FBS2UsT0FDWnBELE9BQVFxQyxLQUFLUixVQTJsQnJCMGtCLEdBQU1pRCxRQXZkTixXQUNJLElBQUl6dEIsRUFDQUMsRUFDQTZHLEVBQ0FraUIsRUFBTzFpQixLQUFLbUUsYUFBYXVlLE9BQzdCLElBQUtocEIsRUFBSSxFQUFHQyxFQUFJK29CLEVBQUtobUIsT0FBUWhELEVBQUlDLElBQUtELEVBQUcsQ0FJckMsR0FGQThHLEVBQU1SLEtBQUs4ZSxRQUFReUYsUUFBUSxPQUFPaG5CLFVBRTlCbWxCLEVBQUtocEIsR0FBRzB0QixPQUFTNW1CLEdBQU9BLEdBQU9raUIsRUFBS2hwQixHQUFHMnRCLE1BQ3ZDLE9BQU8zRSxFQUFLaHBCLEdBQUdPLEtBRW5CLEdBQUl5b0IsRUFBS2hwQixHQUFHMnRCLE9BQVM3bUIsR0FBT0EsR0FBT2tpQixFQUFLaHBCLEdBQUcwdEIsTUFDdkMsT0FBTzFFLEVBQUtocEIsR0FBR08sS0FJdkIsTUFBTyxJQXVjWGlxQixHQUFNb0QsVUFwY04sV0FDSSxJQUFJNXRCLEVBQ0FDLEVBQ0E2RyxFQUNBa2lCLEVBQU8xaUIsS0FBS21FLGFBQWF1ZSxPQUM3QixJQUFLaHBCLEVBQUksRUFBR0MsRUFBSStvQixFQUFLaG1CLE9BQVFoRCxFQUFJQyxJQUFLRCxFQUFHLENBSXJDLEdBRkE4RyxFQUFNUixLQUFLOGUsUUFBUXlGLFFBQVEsT0FBT2huQixVQUU5Qm1sQixFQUFLaHBCLEdBQUcwdEIsT0FBUzVtQixHQUFPQSxHQUFPa2lCLEVBQUtocEIsR0FBRzJ0QixNQUN2QyxPQUFPM0UsRUFBS2hwQixHQUFHaXBCLE9BRW5CLEdBQUlELEVBQUtocEIsR0FBRzJ0QixPQUFTN21CLEdBQU9BLEdBQU9raUIsRUFBS2hwQixHQUFHMHRCLE1BQ3ZDLE9BQU8xRSxFQUFLaHBCLEdBQUdpcEIsT0FJdkIsTUFBTyxJQW9iWHVCLEdBQU1xRCxRQWpiTixXQUNJLElBQUk3dEIsRUFDQUMsRUFDQTZHLEVBQ0FraUIsRUFBTzFpQixLQUFLbUUsYUFBYXVlLE9BQzdCLElBQUtocEIsRUFBSSxFQUFHQyxFQUFJK29CLEVBQUtobUIsT0FBUWhELEVBQUlDLElBQUtELEVBQUcsQ0FJckMsR0FGQThHLEVBQU1SLEtBQUs4ZSxRQUFReUYsUUFBUSxPQUFPaG5CLFVBRTlCbWxCLEVBQUtocEIsR0FBRzB0QixPQUFTNW1CLEdBQU9BLEdBQU9raUIsRUFBS2hwQixHQUFHMnRCLE1BQ3ZDLE9BQU8zRSxFQUFLaHBCLEdBQUdnZCxLQUVuQixHQUFJZ00sRUFBS2hwQixHQUFHMnRCLE9BQVM3bUIsR0FBT0EsR0FBT2tpQixFQUFLaHBCLEdBQUcwdEIsTUFDdkMsT0FBTzFFLEVBQUtocEIsR0FBR2dkLEtBSXZCLE1BQU8sSUFpYVh3TixHQUFNc0QsUUE5Wk4sV0FDSSxJQUFJOXRCLEVBQ0FDLEVBQ0E4dEIsRUFDQWpuQixFQUNBa2lCLEVBQU8xaUIsS0FBS21FLGFBQWF1ZSxPQUM3QixJQUFLaHBCLEVBQUksRUFBR0MsRUFBSStvQixFQUFLaG1CLE9BQVFoRCxFQUFJQyxJQUFLRCxFQU1sQyxHQUxBK3RCLEVBQU0vRSxFQUFLaHBCLEdBQUcwdEIsT0FBUzFFLEVBQUtocEIsR0FBRzJ0QixNQUFRLEdBQU0sRUFHN0M3bUIsRUFBTVIsS0FBSzhlLFFBQVF5RixRQUFRLE9BQU9obkIsVUFHN0JtbEIsRUFBS2hwQixHQUFHMHRCLE9BQVM1bUIsR0FBT0EsR0FBT2tpQixFQUFLaHBCLEdBQUcydEIsT0FDdkMzRSxFQUFLaHBCLEdBQUcydEIsT0FBUzdtQixHQUFPQSxHQUFPa2lCLEVBQUtocEIsR0FBRzB0QixNQUV4QyxPQUNLcG5CLEtBQUs4SCxPQUFTbE0sRUFBTThtQixFQUFLaHBCLEdBQUcwdEIsT0FBT3RmLFFBQVUyZixFQUM5Qy9FLEVBQUtocEIsR0FBR3drQixPQUtwQixPQUFPbGUsS0FBSzhILFFBd1loQm9jLEdBQU1wYyxLQUFPZ0UsR0FDYm9ZLEdBQU16WSxXQXg4SE4sV0FDSSxPQUFPQSxHQUFXekwsS0FBSzhILFNBdzhIM0JvYyxHQUFNeGIsU0FuUk4sU0FBd0IxTSxHQUNwQixPQUFPaW5CLEdBQXFCcHBCLEtBQ3hCbUcsS0FDQWhFLEVBQ0FnRSxLQUFLd0gsT0FDTHhILEtBQUt5RixVQUFZekYsS0FBS21FLGFBQWE2VyxNQUFNdkssSUFDekN6USxLQUFLbUUsYUFBYTZXLE1BQU12SyxJQUN4QnpRLEtBQUttRSxhQUFhNlcsTUFBTXRLLE1BNlFoQ3dULEdBQU12YixZQXpRTixTQUEyQjNNLEdBQ3ZCLE9BQU9pbkIsR0FBcUJwcEIsS0FDeEJtRyxLQUNBaEUsRUFDQWdFLEtBQUs0SSxVQUNMNUksS0FBS3dJLGFBQ0wsRUFDQSxJQW1RUjBiLEdBQU1yZCxRQUFVcWQsR0FBTXRkLFNBek10QixTQUF1QjVLLEdBQ25CLE9BQWdCLE1BQVRBLEVBQ0RtSCxLQUFLeUgsTUFBTTVLLEtBQUswRyxRQUFVLEdBQUssR0FDL0IxRyxLQUFLMEcsTUFBb0IsR0FBYjFLLEVBQVEsR0FBVWdFLEtBQUswRyxRQUFVLElBdU12RHdkLEdBQU14ZCxNQUFROEksR0FDZDBVLEdBQU1sVyxZQTVsSE4sV0FDSSxPQUFPQSxHQUFZaE8sS0FBSzhILE9BQVE5SCxLQUFLMEcsVUE0bEh6Q3dkLEdBQU0xYyxLQUFPMGMsR0FBTTNjLE1BMzNHbkIsU0FBb0J2TCxHQUNoQixJQUFJd0wsRUFBT3hILEtBQUttRSxhQUFhcUQsS0FBS3hILE1BQ2xDLE9BQWdCLE1BQVRoRSxFQUFnQndMLEVBQU94SCxLQUFLNmMsSUFBcUIsR0FBaEI3Z0IsRUFBUXdMLEdBQVcsTUEwM0cvRDBjLEdBQU10YixRQUFVc2IsR0FBTXdELFNBdjNHdEIsU0FBdUIxckIsR0FDbkIsSUFBSXdMLEVBQU91SixHQUFXL1EsS0FBTSxFQUFHLEdBQUd3SCxLQUNsQyxPQUFnQixNQUFUeEwsRUFBZ0J3TCxFQUFPeEgsS0FBSzZjLElBQXFCLEdBQWhCN2dCLEVBQVF3TCxHQUFXLE1BczNHL0QwYyxHQUFNaFQsWUE1UE4sV0FDSSxJQUFJeVcsRUFBVzNuQixLQUFLbUUsYUFBYTZXLE1BQ2pDLE9BQU85SixHQUFZbFIsS0FBSzhILE9BQVE2ZixFQUFTbFgsSUFBS2tYLEVBQVNqWCxNQTJQM0R3VCxHQUFNMEQsZ0JBeFBOLFdBQ0ksSUFBSUQsRUFBVzNuQixLQUFLbUUsYUFBYTZXLE1BQ2pDLE9BQU85SixHQUFZbFIsS0FBSzBJLFdBQVlpZixFQUFTbFgsSUFBS2tYLEVBQVNqWCxNQXVQL0R3VCxHQUFNMkQsZUF0UU4sV0FDSSxPQUFPM1csR0FBWWxSLEtBQUs4SCxPQUFRLEVBQUcsSUFzUXZDb2MsR0FBTTRELHNCQW5RTixXQUNJLE9BQU81VyxHQUFZbFIsS0FBSzJJLGNBQWUsRUFBRyxJQW1ROUN1YixHQUFNOWUsS0FBT3llLEdBQ2JLLEdBQU01ZSxJQUFNNGUsR0FBTTdlLEtBcG5HbEIsU0FBeUJySixHQUNyQixJQUFLZ0UsS0FBS2hCLFVBQ04sT0FBZ0IsTUFBVGhELEVBQWdCZ0UsS0FBT0YsSUFHbEMsSUFBSXdGLEVBQU0vSyxHQUFJeUYsS0FBTSxPQUNwQixPQUFhLE1BQVRoRSxHQUNBQSxFQXpOUixTQUFzQkEsRUFBTzBCLEdBQ3pCLE1BQXFCLGlCQUFWMUIsRUFDQUEsRUFHTnFELE1BQU1yRCxHQUtVLGlCQURyQkEsRUFBUTBCLEVBQU9rVSxjQUFjNVYsSUFFbEJBLEVBR0osS0FSSTRQLFNBQVM1UCxFQUFPLElBbU5mK3JCLENBQWEvckIsRUFBT2dFLEtBQUttRSxjQUMxQm5FLEtBQUs2YyxJQUFJN2dCLEVBQVFzSixFQUFLLE1BRXRCQSxHQTJtR2Y0ZSxHQUFNemUsUUF2bUdOLFNBQStCekosR0FDM0IsSUFBS2dFLEtBQUtoQixVQUNOLE9BQWdCLE1BQVRoRCxFQUFnQmdFLEtBQU9GLElBRWxDLElBQUkyRixHQUFXekYsS0FBS3NGLE1BQVEsRUFBSXRGLEtBQUttRSxhQUFhNlcsTUFBTXZLLEtBQU8sRUFDL0QsT0FBZ0IsTUFBVHpVLEVBQWdCeUosRUFBVXpGLEtBQUs2YyxJQUFJN2dCLEVBQVF5SixFQUFTLE1BbW1HL0R5ZSxHQUFNMWIsV0FobUdOLFNBQTRCeE0sR0FDeEIsSUFBS2dFLEtBQUtoQixVQUNOLE9BQWdCLE1BQVRoRCxFQUFnQmdFLEtBQU9GLElBT2xDLEdBQWEsTUFBVDlELEVBQWUsQ0FDZixJQUFJeUosRUFqT1osU0FBeUJ6SixFQUFPMEIsR0FDNUIsTUFBcUIsaUJBQVYxQixFQUNBMEIsRUFBT2tVLGNBQWM1VixHQUFTLEdBQUssRUFFdkNxRCxNQUFNckQsR0FBUyxLQUFPQSxFQTZOWGdzQixDQUFnQmhzQixFQUFPZ0UsS0FBS21FLGNBQzFDLE9BQU9uRSxLQUFLc0YsSUFBSXRGLEtBQUtzRixNQUFRLEVBQUlHLEVBQVVBLEVBQVUsR0FFckQsT0FBT3pGLEtBQUtzRixPQUFTLEdBb2xHN0I0ZSxHQUFNemIsVUF4S04sU0FBeUJ6TSxHQUNyQixJQUFJeU0sRUFDQXRGLEtBQUs4YSxPQUNBamUsS0FBSzhlLFFBQVF5RixRQUFRLE9BQVN2a0IsS0FBSzhlLFFBQVF5RixRQUFRLFNBQVcsT0FDL0QsRUFDUixPQUFnQixNQUFUdm9CLEVBQWdCeU0sRUFBWXpJLEtBQUs2YyxJQUFJN2dCLEVBQVF5TSxFQUFXLE1Bb0tuRXliLEdBQU1oZSxLQUFPZ2UsR0FBTWplLE1BQVE4TixHQUMzQm1RLEdBQU0zZCxPQUFTMmQsR0FBTTVkLFFBQVV3ZCxHQUMvQkksR0FBTW5kLE9BQVNtZCxHQUFNcGQsUUFBVWtkLEdBQy9CRSxHQUFNN2QsWUFBYzZkLEdBQU05ZCxhQUFlMmQsR0FDekNHLEdBQU05RixVQTlqRE4sU0FBc0JwaUIsRUFBT2lzQixFQUFlQyxHQUN4QyxJQUNJQyxFQURBakssRUFBU2xlLEtBQUtnQixTQUFXLEVBRTdCLElBQUtoQixLQUFLaEIsVUFDTixPQUFnQixNQUFUaEQsRUFBZ0JnRSxLQUFPRixJQUVsQyxHQUFhLE1BQVQ5RCxFQUFlLENBQ2YsR0FBcUIsaUJBQVZBLEdBRVAsR0FBYyxRQURkQSxFQUFRc2lCLEdBQWlCM1UsR0FBa0IzTixJQUV2QyxPQUFPZ0UsVUFFSm1ELEtBQUtDLElBQUlwSCxHQUFTLEtBQU9rc0IsSUFDaENsc0IsR0FBZ0IsSUF3QnBCLE9BdEJLZ0UsS0FBS2UsUUFBVWtuQixJQUNoQkUsRUFBY2xKLEdBQWNqZixPQUVoQ0EsS0FBS2dCLFFBQVVoRixFQUNmZ0UsS0FBS2UsUUFBUyxFQUNLLE1BQWZvbkIsR0FDQW5vQixLQUFLNmMsSUFBSXNMLEVBQWEsS0FFdEJqSyxJQUFXbGlCLEtBQ05pc0IsR0FBaUJqb0IsS0FBS29vQixrQkFDdkJqSSxHQUNJbmdCLEtBQ0FzZixHQUFldGpCLEVBQVFraUIsRUFBUSxLQUMvQixHQUNBLEdBRUlsZSxLQUFLb29CLG9CQUNicG9CLEtBQUtvb0IsbUJBQW9CLEVBQ3pCeHNCLEVBQU13RixhQUFhcEIsTUFBTSxHQUN6QkEsS0FBS29vQixrQkFBb0IsT0FHMUJwb0IsS0FFUCxPQUFPQSxLQUFLZSxPQUFTbWQsRUFBU2UsR0FBY2pmLE9Bd2hEcERra0IsR0FBTXJtQixJQXRnRE4sU0FBd0JvcUIsR0FDcEIsT0FBT2pvQixLQUFLb2UsVUFBVSxFQUFHNkosSUFzZ0Q3Qi9ELEdBQU1sRixNQW5nRE4sU0FBMEJpSixHQVN0QixPQVJJam9CLEtBQUtlLFNBQ0xmLEtBQUtvZSxVQUFVLEVBQUc2SixHQUNsQmpvQixLQUFLZSxRQUFTLEVBRVZrbkIsR0FDQWpvQixLQUFLc2dCLFNBQVNyQixHQUFjamYsTUFBTyxNQUdwQ0EsTUEyL0NYa2tCLEdBQU1tRSxVQXgvQ04sV0FDSSxHQUFpQixNQUFicm9CLEtBQUtjLEtBQ0xkLEtBQUtvZSxVQUFVcGUsS0FBS2MsTUFBTSxHQUFPLFFBQzlCLEdBQXVCLGlCQUFaZCxLQUFLVyxHQUFpQixDQUNwQyxJQUFJMm5CLEVBQVFoSyxHQUFpQjVVLEdBQWExSixLQUFLVyxJQUNsQyxNQUFUMm5CLEVBQ0F0b0IsS0FBS29lLFVBQVVrSyxHQUVmdG9CLEtBQUtvZSxVQUFVLEdBQUcsR0FHMUIsT0FBT3BlLE1BOCtDWGtrQixHQUFNcUUscUJBMytDTixTQUE4QnZzQixHQUMxQixRQUFLZ0UsS0FBS2hCLFlBR1ZoRCxFQUFRQSxFQUFRK2UsR0FBWS9lLEdBQU9vaUIsWUFBYyxHQUV6Q3BlLEtBQUtvZSxZQUFjcGlCLEdBQVMsSUFBTyxJQXMrQy9Da29CLEdBQU1zRSxNQW4rQ04sV0FDSSxPQUNJeG9CLEtBQUtvZSxZQUFjcGUsS0FBSzhlLFFBQVFwWSxNQUFNLEdBQUcwWCxhQUN6Q3BlLEtBQUtvZSxZQUFjcGUsS0FBSzhlLFFBQVFwWSxNQUFNLEdBQUcwWCxhQWkrQ2pEOEYsR0FBTTRDLFFBdjhDTixXQUNJLFFBQU85bUIsS0FBS2hCLFlBQWFnQixLQUFLZSxRQXU4Q2xDbWpCLEdBQU11RSxZQXA4Q04sV0FDSSxRQUFPem9CLEtBQUtoQixXQUFZZ0IsS0FBS2UsUUFvOENqQ21qQixHQUFNL0UsTUFBUUEsR0FDZCtFLEdBQU0vWCxNQUFRZ1QsR0FDZCtFLEdBQU13RSxTQXpGTixXQUNJLE9BQU8xb0IsS0FBS2UsT0FBUyxNQUFRLElBeUZqQ21qQixHQUFNeUUsU0F0Rk4sV0FDSSxPQUFPM29CLEtBQUtlLE9BQVMsNkJBQStCLElBc0Z4RG1qQixHQUFNL2UsTUFBUXpELEVBQ1Ysa0RBQ0FtaUIsSUFFSkssR0FBTXpkLE9BQVMvRSxFQUNYLG1EQUNBOE4sSUFFSjBVLEdBQU1yYyxNQUFRbkcsRUFDVixpREFDQW9LLElBRUpvWSxHQUFNMkMsS0FBT25sQixFQUNULDRHQTVpREosU0FBb0IxRixFQUFPaXNCLEdBQ3ZCLE9BQWEsTUFBVGpzQixHQUNxQixpQkFBVkEsSUFDUEEsR0FBU0EsR0FHYmdFLEtBQUtvZSxVQUFVcGlCLEVBQU9pc0IsR0FFZmpvQixPQUVDQSxLQUFLb2UsZUFxaURyQjhGLEdBQU0wRSxhQUFlbG5CLEVBQ2pCLDJHQXAvQ0osV0FDSSxJQUFLOUUsRUFBWW9ELEtBQUs2b0IsZUFDbEIsT0FBTzdvQixLQUFLNm9CLGNBR2hCLElBQ0k5TCxFQURBaGpCLEVBQUksR0FjUixPQVhBcUcsRUFBV3JHLEVBQUdpRyxPQUNkakcsRUFBSThoQixHQUFjOWhCLElBRVp5UixJQUNGdVIsRUFBUWhqQixFQUFFZ0gsT0FBU3ZELEVBQVV6RCxFQUFFeVIsSUFBTXVQLEdBQVloaEIsRUFBRXlSLElBQ25EeEwsS0FBSzZvQixjQUNEN29CLEtBQUtoQixXQXRPakIsU0FBdUI4cEIsRUFBUUMsRUFBUUMsR0FDbkMsSUFHSXR2QixFQUhBdUcsRUFBTWtELEtBQUttTSxJQUFJd1osRUFBT3BzQixPQUFRcXNCLEVBQU9yc0IsUUFDckN1c0IsRUFBYTlsQixLQUFLQyxJQUFJMGxCLEVBQU9wc0IsT0FBU3FzQixFQUFPcnNCLFFBQzdDd3NCLEVBQVEsRUFFWixJQUFLeHZCLEVBQUksRUFBR0EsRUFBSXVHLEVBQUt2RyxLQUVac3ZCLEdBQWVGLEVBQU9wdkIsS0FBT3F2QixFQUFPcnZCLEtBQ25Dc3ZCLEdBQWVsZSxHQUFNZ2UsRUFBT3B2QixNQUFRb1IsR0FBTWllLEVBQU9ydkIsTUFFbkR3dkIsSUFHUixPQUFPQSxFQUFRRCxFQXlOV0UsQ0FBY3B2QixFQUFFeVIsR0FBSXVSLEVBQU1zSixXQUFhLEdBRTdEcm1CLEtBQUs2b0IsZUFBZ0IsRUFHbEI3b0IsS0FBSzZvQixpQkFpL0NoQixJQUFJTyxHQUFVeG1CLEVBQU90SCxVQXVDckIsU0FBUyt0QixHQUFNNXJCLEVBQVE2ckIsRUFBT0MsRUFBT0MsR0FDakMsSUFBSTlyQixFQUFTOFksS0FDVDNZLEVBQU1MLElBQVlxRixJQUFJMm1CLEVBQVFGLEdBQ2xDLE9BQU81ckIsRUFBTzZyQixHQUFPMXJCLEVBQUtKLEdBRzlCLFNBQVNnc0IsR0FBZWhzQixFQUFRNnJCLEVBQU9DLEdBUW5DLEdBUEkxc0IsRUFBU1ksS0FDVDZyQixFQUFRN3JCLEVBQ1JBLE9BQVNnQyxHQUdiaEMsRUFBU0EsR0FBVSxHQUVOLE1BQVQ2ckIsRUFDQSxPQUFPRCxHQUFNNXJCLEVBQVE2ckIsRUFBT0MsRUFBTyxTQUd2QyxJQUFJN3ZCLEVBQ0Fnd0IsRUFBTSxHQUNWLElBQUtod0IsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ2hCZ3dCLEVBQUlod0IsR0FBSzJ2QixHQUFNNXJCLEVBQVEvRCxFQUFHNnZCLEVBQU8sU0FFckMsT0FBT0csRUFXWCxTQUFTQyxHQUFpQkMsRUFBY25zQixFQUFRNnJCLEVBQU9DLEdBQ3ZCLGtCQUFqQkssR0FDSC9zQixFQUFTWSxLQUNUNnJCLEVBQVE3ckIsRUFDUkEsT0FBU2dDLEdBR2JoQyxFQUFTQSxHQUFVLEtBR25CNnJCLEVBREE3ckIsRUFBU21zQixFQUVUQSxHQUFlLEVBRVgvc0IsRUFBU1ksS0FDVDZyQixFQUFRN3JCLEVBQ1JBLE9BQVNnQyxHQUdiaEMsRUFBU0EsR0FBVSxJQUd2QixJQUVJL0QsRUFGQWdFLEVBQVM4WSxLQUNUcVQsRUFBUUQsRUFBZWxzQixFQUFPc2QsTUFBTXZLLElBQU0sRUFFMUNpWixFQUFNLEdBRVYsR0FBYSxNQUFUSixFQUNBLE9BQU9ELEdBQU01ckIsR0FBUzZyQixFQUFRTyxHQUFTLEVBQUdOLEVBQU8sT0FHckQsSUFBSzd2QixFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFDZmd3QixFQUFJaHdCLEdBQUsydkIsR0FBTTVyQixHQUFTL0QsRUFBSW13QixHQUFTLEVBQUdOLEVBQU8sT0FFbkQsT0FBT0csRUF4R1hOLEdBQVFuVixTQTUrSVIsU0FBa0JoWixFQUFLd0osRUFBS2dXLEdBQ3hCLElBQUkvVixFQUFTMUUsS0FBSzhwQixVQUFVN3VCLElBQVErRSxLQUFLOHBCLFVBQW9CLFNBQzdELE9BQU92bkIsRUFBV21DLEdBQVVBLEVBQU83SyxLQUFLNEssRUFBS2dXLEdBQU8vVixHQTIrSXhEMGtCLEdBQVF0a0IsZUFoM0lSLFNBQXdCN0osR0FDcEIsSUFBSXdDLEVBQVN1QyxLQUFLK3BCLGdCQUFnQjl1QixHQUM5Qit1QixFQUFjaHFCLEtBQUsrcEIsZ0JBQWdCOXVCLEVBQUlndkIsZUFFM0MsT0FBSXhzQixJQUFXdXNCLEVBQ0p2c0IsR0FHWHVDLEtBQUsrcEIsZ0JBQWdCOXVCLEdBQU8rdUIsRUFDdkJ6bEIsTUFBTWQsR0FDTnpHLEtBQUksU0FBVWt0QixHQUNYLE1BQ1ksU0FBUkEsR0FDUSxPQUFSQSxHQUNRLE9BQVJBLEdBQ1EsU0FBUkEsRUFFT0EsRUFBSWxvQixNQUFNLEdBRWRrb0IsS0FFVmpvQixLQUFLLElBRUhqQyxLQUFLK3BCLGdCQUFnQjl1QixLQTAxSWhDbXVCLEdBQVF4a0IsWUFyMUlSLFdBQ0ksT0FBTzVFLEtBQUttcUIsY0FxMUloQmYsR0FBUXBsQixRQS8wSVIsU0FBaUJqQixHQUNiLE9BQU8vQyxLQUFLb3FCLFNBQVM1bEIsUUFBUSxLQUFNekIsSUErMEl2Q3FtQixHQUFRdE4sU0FBV3FJLEdBQ25CaUYsR0FBUXJFLFdBQWFaLEdBQ3JCaUYsR0FBUXJVLGFBM3pJUixTQUFzQmhTLEVBQVFpaUIsRUFBZXBNLEVBQVF5UixHQUNqRCxJQUFJM2xCLEVBQVMxRSxLQUFLc3FCLGNBQWMxUixHQUNoQyxPQUFPclcsRUFBV21DLEdBQ1pBLEVBQU8zQixFQUFRaWlCLEVBQWVwTSxFQUFReVIsR0FDdEMzbEIsRUFBT0YsUUFBUSxNQUFPekIsSUF3ekloQ3FtQixHQUFRbUIsV0FyeklSLFNBQW9CMUwsRUFBTW5hLEdBQ3RCLElBQUlqSCxFQUFTdUMsS0FBS3NxQixjQUFjekwsRUFBTyxFQUFJLFNBQVcsUUFDdEQsT0FBT3RjLEVBQVc5RSxHQUFVQSxFQUFPaUgsR0FBVWpILEVBQU8rRyxRQUFRLE1BQU9FLElBb3pJdkUwa0IsR0FBUXZtQixJQXhrSlIsU0FBYTFCLEdBQ1QsSUFBSVosRUFBTTdHLEVBQ1YsSUFBS0EsS0FBS3lILEVBQ0YvRSxFQUFXK0UsRUFBUXpILEtBRWY2SSxFQURKaEMsRUFBT1ksRUFBT3pILElBRVZzRyxLQUFLdEcsR0FBSzZHLEVBRVZQLEtBQUssSUFBTXRHLEdBQUs2RyxHQUk1QlAsS0FBSzJXLFFBQVV4VixFQUlmbkIsS0FBSzRqQiwrQkFBaUMsSUFBSXhaLFFBQ3JDcEssS0FBSzBqQix3QkFBd0I4RyxRQUFVeHFCLEtBQUsyakIsY0FBYzZHLFFBQ3ZELElBQ0EsVUFBVUEsU0Fzakp0QnBCLEdBQVExRyxLQXhuQlIsU0FBb0I1b0IsRUFBRzJELEdBQ25CLElBQUkvRCxFQUNBQyxFQUNBeUwsRUFDQXNkLEVBQU8xaUIsS0FBS3lxQixPQUFTalUsR0FBVSxNQUFNaVUsTUFDekMsSUFBSy93QixFQUFJLEVBQUdDLEVBQUkrb0IsRUFBS2htQixPQUFRaEQsRUFBSUMsSUFBS0QsRUFBRyxDQUNyQyxjQUFlZ3BCLEVBQUtocEIsR0FBRzB0QixPQUNuQixJQUFLLFNBRURoaUIsRUFBT3hKLEVBQU04bUIsRUFBS2hwQixHQUFHMHRCLE9BQU83QyxRQUFRLE9BQ3BDN0IsRUFBS2hwQixHQUFHMHRCLE1BQVFoaUIsRUFBSzdILFVBSTdCLGNBQWVtbEIsRUFBS2hwQixHQUFHMnRCLE9BQ25CLElBQUssWUFDRDNFLEVBQUtocEIsR0FBRzJ0QixNQUFRLElBQ2hCLE1BQ0osSUFBSyxTQUVEamlCLEVBQU94SixFQUFNOG1CLEVBQUtocEIsR0FBRzJ0QixPQUFPOUMsUUFBUSxPQUFPaG5CLFVBQzNDbWxCLEVBQUtocEIsR0FBRzJ0QixNQUFRamlCLEVBQUs3SCxXQUlqQyxPQUFPbWxCLEdBZ21CWDBHLEdBQVE3RixVQTdsQlIsU0FBeUI0RCxFQUFTMXBCLEVBQVFFLEdBQ3RDLElBQUlqRSxFQUNBQyxFQUVBTSxFQUNBeWMsRUFDQWlNLEVBSEFELEVBQU8xaUIsS0FBSzBpQixPQU1oQixJQUZBeUUsRUFBVUEsRUFBUThDLGNBRWJ2d0IsRUFBSSxFQUFHQyxFQUFJK29CLEVBQUtobUIsT0FBUWhELEVBQUlDLElBQUtELEVBS2xDLEdBSkFPLEVBQU95b0IsRUFBS2hwQixHQUFHTyxLQUFLZ3dCLGNBQ3BCdlQsRUFBT2dNLEVBQUtocEIsR0FBR2dkLEtBQUt1VCxjQUNwQnRILEVBQVNELEVBQUtocEIsR0FBR2lwQixPQUFPc0gsY0FFcEJ0c0IsRUFDQSxPQUFRRixHQUNKLElBQUssSUFDTCxJQUFLLEtBQ0wsSUFBSyxNQUNELEdBQUlpWixJQUFTeVEsRUFDVCxPQUFPekUsRUFBS2hwQixHQUVoQixNQUVKLElBQUssT0FDRCxHQUFJTyxJQUFTa3RCLEVBQ1QsT0FBT3pFLEVBQUtocEIsR0FFaEIsTUFFSixJQUFLLFFBQ0QsR0FBSWlwQixJQUFXd0UsRUFDWCxPQUFPekUsRUFBS2hwQixRQUlyQixHQUFJLENBQUNPLEVBQU15YyxFQUFNaU0sR0FBUTlXLFFBQVFzYixJQUFZLEVBQ2hELE9BQU96RSxFQUFLaHBCLElBeWpCeEIwdkIsR0FBUXhOLGdCQXBqQlIsU0FBK0JoZCxFQUFLa0osR0FDaEMsSUFBSTJmLEVBQU03b0IsRUFBSXdvQixPQUFTeG9CLEVBQUl5b0IsTUFBUSxHQUFNLEVBQ3pDLFlBQWE1bkIsSUFBVHFJLEVBQ09sTSxFQUFNZ0QsRUFBSXdvQixPQUFPdGYsT0FFakJsTSxFQUFNZ0QsRUFBSXdvQixPQUFPdGYsUUFBVUEsRUFBT2xKLEVBQUlzZixRQUFVdUosR0FnakIvRDJCLEdBQVFsSCxjQS9jUixTQUF1QmhZLEdBSW5CLE9BSEs5TixFQUFXNEQsS0FBTSxtQkFDbEJtaUIsR0FBaUJ0b0IsS0FBS21HLE1BRW5Ca0ssRUFBV2xLLEtBQUs4aUIsZUFBaUI5aUIsS0FBSzRpQixZQTRjakR3RyxHQUFRL0YsY0F2ZFIsU0FBdUJuWixHQUluQixPQUhLOU4sRUFBVzRELEtBQU0sbUJBQ2xCbWlCLEdBQWlCdG9CLEtBQUttRyxNQUVuQmtLLEVBQVdsSyxLQUFLNmlCLGVBQWlCN2lCLEtBQUs0aUIsWUFvZGpEd0csR0FBUTlGLGdCQTFjUixTQUF5QnBaLEdBSXJCLE9BSEs5TixFQUFXNEQsS0FBTSxxQkFDbEJtaUIsR0FBaUJ0b0IsS0FBS21HLE1BRW5Ca0ssRUFBV2xLLEtBQUsraUIsaUJBQW1CL2lCLEtBQUs0aUIsWUF3Y25Ed0csR0FBUTNpQixPQW4xSFIsU0FBc0IzTSxFQUFHMkQsR0FDckIsT0FBSzNELEVBS0VpQyxFQUFRaUUsS0FBSzRkLFNBQ2Q1ZCxLQUFLNGQsUUFBUTlqQixFQUFFNE0sU0FDZjFHLEtBQUs0ZCxTQUNBNWQsS0FBSzRkLFFBQVE4TSxVQUFZaGMsSUFBa0IxSixLQUFLdkgsR0FDM0MsU0FDQSxjQUNSM0QsRUFBRTRNLFNBVkMzSyxFQUFRaUUsS0FBSzRkLFNBQ2Q1ZCxLQUFLNGQsUUFDTDVkLEtBQUs0ZCxRQUFvQixZQWcxSHZDd0wsR0FBUWpiLFlBcjBIUixTQUEyQnJVLEVBQUcyRCxHQUMxQixPQUFLM0QsRUFLRWlDLEVBQVFpRSxLQUFLMnFCLGNBQ2QzcUIsS0FBSzJxQixhQUFhN3dCLEVBQUU0TSxTQUNwQjFHLEtBQUsycUIsYUFDRGpjLEdBQWlCMUosS0FBS3ZILEdBQVUsU0FBVyxjQUM3QzNELEVBQUU0TSxTQVJDM0ssRUFBUWlFLEtBQUsycUIsY0FDZDNxQixLQUFLMnFCLGFBQ0wzcUIsS0FBSzJxQixhQUF5QixZQWswSDVDdkIsR0FBUTlhLFlBMXdIUixTQUEyQlEsRUFBV3JSLEVBQVFFLEdBQzFDLElBQUlqRSxFQUFHK0ssRUFBS3VGLEVBRVosR0FBSWhLLEtBQUs0cUIsa0JBQ0wsT0FBTy9iLEdBQWtCaFYsS0FBS21HLEtBQU04TyxFQUFXclIsRUFBUUUsR0FZM0QsSUFUS3FDLEtBQUtrUCxlQUNObFAsS0FBS2tQLGFBQWUsR0FDcEJsUCxLQUFLbVAsaUJBQW1CLEdBQ3hCblAsS0FBS29QLGtCQUFvQixJQU14QjFWLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUFLLENBbUJyQixHQWpCQStLLEVBQU1qSCxFQUFVLENBQUMsSUFBTTlELElBQ25CaUUsSUFBV3FDLEtBQUttUCxpQkFBaUJ6VixLQUNqQ3NHLEtBQUttUCxpQkFBaUJ6VixHQUFLLElBQUkwUSxPQUMzQixJQUFNcEssS0FBS3lHLE9BQU9oQyxFQUFLLElBQUlELFFBQVEsSUFBSyxJQUFNLElBQzlDLEtBRUp4RSxLQUFLb1Asa0JBQWtCMVYsR0FBSyxJQUFJMFEsT0FDNUIsSUFBTXBLLEtBQUttTyxZQUFZMUosRUFBSyxJQUFJRCxRQUFRLElBQUssSUFBTSxJQUNuRCxNQUdIN0csR0FBV3FDLEtBQUtrUCxhQUFheFYsS0FDOUJzUSxFQUNJLElBQU1oSyxLQUFLeUcsT0FBT2hDLEVBQUssSUFBTSxLQUFPekUsS0FBS21PLFlBQVkxSixFQUFLLElBQzlEekUsS0FBS2tQLGFBQWF4VixHQUFLLElBQUkwUSxPQUFPSixFQUFNeEYsUUFBUSxJQUFLLElBQUssTUFJMUQ3RyxHQUNXLFNBQVhGLEdBQ0F1QyxLQUFLbVAsaUJBQWlCelYsR0FBR3NMLEtBQUs4SixHQUU5QixPQUFPcFYsRUFDSixHQUNIaUUsR0FDVyxRQUFYRixHQUNBdUMsS0FBS29QLGtCQUFrQjFWLEdBQUdzTCxLQUFLOEosR0FFL0IsT0FBT3BWLEVBQ0osSUFBS2lFLEdBQVVxQyxLQUFLa1AsYUFBYXhWLEdBQUdzTCxLQUFLOEosR0FDNUMsT0FBT3BWLElBMnRIbkIwdkIsR0FBUS9hLFlBdHBIUixTQUFxQm5FLEdBQ2pCLE9BQUlsSyxLQUFLNHFCLG1CQUNBeHVCLEVBQVc0RCxLQUFNLGlCQUNsQnlQLEdBQW1CNVYsS0FBS21HLE1BRXhCa0ssRUFDT2xLLEtBQUttUSxtQkFFTG5RLEtBQUtpUSxlQUdYN1QsRUFBVzRELEtBQU0sa0JBQ2xCQSxLQUFLaVEsYUFBZXJCLElBRWpCNU8sS0FBS21RLG9CQUFzQmpHLEVBQzVCbEssS0FBS21RLG1CQUNMblEsS0FBS2lRLGVBdW9IbkJtWixHQUFRaGIsaUJBM3FIUixTQUEwQmxFLEdBQ3RCLE9BQUlsSyxLQUFLNHFCLG1CQUNBeHVCLEVBQVc0RCxLQUFNLGlCQUNsQnlQLEdBQW1CNVYsS0FBS21HLE1BRXhCa0ssRUFDT2xLLEtBQUtvUSx3QkFFTHBRLEtBQUtrUSxvQkFHWDlULEVBQVc0RCxLQUFNLHVCQUNsQkEsS0FBS2tRLGtCQUFvQnZCLElBRXRCM08sS0FBS29RLHlCQUEyQmxHLEVBQ2pDbEssS0FBS29RLHdCQUNMcFEsS0FBS2tRLG9CQTRwSG5Ca1osR0FBUTVoQixLQWorR1IsU0FBb0IvQyxHQUNoQixPQUFPc00sR0FBV3RNLEVBQUt6RSxLQUFLZ2IsTUFBTXZLLElBQUt6USxLQUFLZ2IsTUFBTXRLLEtBQUtsSixNQWkrRzNENGhCLEdBQVF5QixlQXI5R1IsV0FDSSxPQUFPN3FCLEtBQUtnYixNQUFNdEssS0FxOUd0QjBZLEdBQVEwQixlQTE5R1IsV0FDSSxPQUFPOXFCLEtBQUtnYixNQUFNdkssS0EyOUd0QjJZLEdBQVE1akIsU0FqM0dSLFNBQXdCMUwsRUFBRzJELEdBQ3ZCLElBQUkrSCxFQUFXekosRUFBUWlFLEtBQUsrcUIsV0FDdEIvcUIsS0FBSytxQixVQUNML3FCLEtBQUsrcUIsVUFDRGp4QixJQUFXLElBQU5BLEdBQWNrRyxLQUFLK3FCLFVBQVVMLFNBQVMxbEIsS0FBS3ZILEdBQzFDLFNBQ0EsY0FFaEIsT0FBYSxJQUFOM0QsRUFDRHNYLEdBQWM1TCxFQUFVeEYsS0FBS2diLE1BQU12SyxLQUNuQzNXLEVBQ0UwTCxFQUFTMUwsRUFBRXdMLE9BQ1hFLEdBczJHWjRqQixHQUFRN1gsWUEzMUdSLFNBQTJCelgsR0FDdkIsT0FBYSxJQUFOQSxFQUNEc1gsR0FBY3BSLEtBQUtnckIsYUFBY2hyQixLQUFLZ2IsTUFBTXZLLEtBQzVDM1csRUFDRWtHLEtBQUtnckIsYUFBYWx4QixFQUFFd0wsT0FDcEJ0RixLQUFLZ3JCLGNBdTFHakI1QixHQUFRNVgsY0FwMkdSLFNBQTZCMVgsR0FDekIsT0FBYSxJQUFOQSxFQUNEc1gsR0FBY3BSLEtBQUtpckIsZUFBZ0JqckIsS0FBS2diLE1BQU12SyxLQUM5QzNXLEVBQ0VrRyxLQUFLaXJCLGVBQWVueEIsRUFBRXdMLE9BQ3RCdEYsS0FBS2lyQixnQkFnMkdqQjdCLEdBQVF4WCxjQTV3R1IsU0FBNkJRLEVBQWEzVSxFQUFRRSxHQUM5QyxJQUFJakUsRUFBRytLLEVBQUt1RixFQUVaLEdBQUloSyxLQUFLa3JCLG9CQUNMLE9BQU8vWSxHQUFvQnRZLEtBQUttRyxLQUFNb1MsRUFBYTNVLEVBQVFFLEdBVS9ELElBUEtxQyxLQUFLcVMsaUJBQ05yUyxLQUFLcVMsZUFBaUIsR0FDdEJyUyxLQUFLdVMsa0JBQW9CLEdBQ3pCdlMsS0FBS3NTLG9CQUFzQixHQUMzQnRTLEtBQUttckIsbUJBQXFCLElBR3pCenhCLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUFLLENBNkJwQixHQTFCQStLLEVBQU1qSCxFQUFVLENBQUMsSUFBTSxJQUFJOEgsSUFBSTVMLEdBQzNCaUUsSUFBV3FDLEtBQUttckIsbUJBQW1CenhCLEtBQ25Dc0csS0FBS21yQixtQkFBbUJ6eEIsR0FBSyxJQUFJMFEsT0FDN0IsSUFBTXBLLEtBQUt3RixTQUFTZixFQUFLLElBQUlELFFBQVEsSUFBSyxRQUFVLElBQ3BELEtBRUp4RSxLQUFLc1Msb0JBQW9CNVksR0FBSyxJQUFJMFEsT0FDOUIsSUFBTXBLLEtBQUt3UixjQUFjL00sRUFBSyxJQUFJRCxRQUFRLElBQUssUUFBVSxJQUN6RCxLQUVKeEUsS0FBS3VTLGtCQUFrQjdZLEdBQUssSUFBSTBRLE9BQzVCLElBQU1wSyxLQUFLdVIsWUFBWTlNLEVBQUssSUFBSUQsUUFBUSxJQUFLLFFBQVUsSUFDdkQsTUFHSHhFLEtBQUtxUyxlQUFlM1ksS0FDckJzUSxFQUNJLElBQ0FoSyxLQUFLd0YsU0FBU2YsRUFBSyxJQUNuQixLQUNBekUsS0FBS3dSLGNBQWMvTSxFQUFLLElBQ3hCLEtBQ0F6RSxLQUFLdVIsWUFBWTlNLEVBQUssSUFDMUJ6RSxLQUFLcVMsZUFBZTNZLEdBQUssSUFBSTBRLE9BQU9KLEVBQU14RixRQUFRLElBQUssSUFBSyxNQUk1RDdHLEdBQ1csU0FBWEYsR0FDQXVDLEtBQUttckIsbUJBQW1CenhCLEdBQUdzTCxLQUFLb04sR0FFaEMsT0FBTzFZLEVBQ0osR0FDSGlFLEdBQ1csUUFBWEYsR0FDQXVDLEtBQUtzUyxvQkFBb0I1WSxHQUFHc0wsS0FBS29OLEdBRWpDLE9BQU8xWSxFQUNKLEdBQ0hpRSxHQUNXLE9BQVhGLEdBQ0F1QyxLQUFLdVMsa0JBQWtCN1ksR0FBR3NMLEtBQUtvTixHQUUvQixPQUFPMVksRUFDSixJQUFLaUUsR0FBVXFDLEtBQUtxUyxlQUFlM1ksR0FBR3NMLEtBQUtvTixHQUM5QyxPQUFPMVksSUFndEduQjB2QixHQUFRelgsY0FscUdSLFNBQXVCekgsR0FDbkIsT0FBSWxLLEtBQUtrckIscUJBQ0E5dUIsRUFBVzRELEtBQU0sbUJBQ2xCd1MsR0FBcUIzWSxLQUFLbUcsTUFFMUJrSyxFQUNPbEssS0FBS2dULHFCQUVMaFQsS0FBSzZTLGlCQUdYelcsRUFBVzRELEtBQU0sb0JBQ2xCQSxLQUFLNlMsZUFBaUJiLElBRW5CaFMsS0FBS2dULHNCQUF3QjlJLEVBQzlCbEssS0FBS2dULHFCQUNMaFQsS0FBSzZTLGlCQW1wR25CdVcsR0FBUTFYLG1CQS9vR1IsU0FBNEJ4SCxHQUN4QixPQUFJbEssS0FBS2tyQixxQkFDQTl1QixFQUFXNEQsS0FBTSxtQkFDbEJ3UyxHQUFxQjNZLEtBQUttRyxNQUUxQmtLLEVBQ09sSyxLQUFLaVQsMEJBRUxqVCxLQUFLOFMsc0JBR1gxVyxFQUFXNEQsS0FBTSx5QkFDbEJBLEtBQUs4UyxvQkFBc0JiLElBRXhCalMsS0FBS2lULDJCQUE2Qi9JLEVBQ25DbEssS0FBS2lULDBCQUNMalQsS0FBSzhTLHNCQWdvR25Cc1csR0FBUTNYLGlCQTVuR1IsU0FBMEJ2SCxHQUN0QixPQUFJbEssS0FBS2tyQixxQkFDQTl1QixFQUFXNEQsS0FBTSxtQkFDbEJ3UyxHQUFxQjNZLEtBQUttRyxNQUUxQmtLLEVBQ09sSyxLQUFLa1Qsd0JBRUxsVCxLQUFLK1Msb0JBR1gzVyxFQUFXNEQsS0FBTSx1QkFDbEJBLEtBQUsrUyxrQkFBb0JiLElBRXRCbFMsS0FBS2tULHlCQUEyQmhKLEVBQ2pDbEssS0FBS2tULHdCQUNMbFQsS0FBSytTLG9CQThtR25CcVcsR0FBUTNWLEtBbjhGUixTQUFvQnpYLEdBR2hCLE1BQWdELE9BQXhDQSxFQUFRLElBQUlpTSxjQUFjbWpCLE9BQU8sSUFpOEY3Q2hDLEdBQVF2cUIsU0F2N0ZSLFNBQXdCb0gsRUFBT0ssRUFBUytrQixHQUNwQyxPQUFJcGxCLEVBQVEsR0FDRG9sQixFQUFVLEtBQU8sS0FFakJBLEVBQVUsS0FBTyxNQStnR2hDaFYsR0FBbUIsS0FBTSxDQUNyQnFNLEtBQU0sQ0FDRixDQUNJMEUsTUFBTyxhQUNQQyxNQUFPLElBQ1BuSixPQUFRLEVBQ1Jqa0IsS0FBTSxjQUNOMG9CLE9BQVEsS0FDUmpNLEtBQU0sTUFFVixDQUNJMFEsTUFBTyxhQUNQQyxPQUFPLElBQ1BuSixPQUFRLEVBQ1Jqa0IsS0FBTSxnQkFDTjBvQixPQUFRLEtBQ1JqTSxLQUFNLE9BR2Q1Qix1QkFBd0IsdUJBQ3hCOVEsUUFBUyxTQUFVakIsR0FDZixJQUFJekcsRUFBSXlHLEVBQVMsR0FXakIsT0FBT0EsR0FUZ0MsSUFBL0IrSCxHQUFPL0gsRUFBUyxJQUFPLElBQ2pCLEtBQ00sSUFBTnpHLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ00sSUFBTkEsRUFDRSxLQUNBLFNBTzVCVixFQUFNK2xCLEtBQU9qZ0IsRUFDVCx3REFDQTJVLElBRUp6YSxFQUFNMHZCLFNBQVc1cEIsRUFDYixnRUFDQThVLElBR0osSUFBSStVLEdBQVVwb0IsS0FBS0MsSUFtQm5CLFNBQVNvb0IsR0FBY25PLEVBQVVyaEIsRUFBT3JCLEVBQU9xbEIsR0FDM0MsSUFBSWpELEVBQVF1QyxHQUFldGpCLEVBQU9yQixHQU1sQyxPQUpBMGlCLEVBQVNLLGVBQWlCc0MsRUFBWWpELEVBQU1XLGNBQzVDTCxFQUFTTSxPQUFTcUMsRUFBWWpELEVBQU1ZLE1BQ3BDTixFQUFTTyxTQUFXb0MsRUFBWWpELEVBQU1hLFFBRS9CUCxFQUFTUyxVQWFwQixTQUFTMk4sR0FBUTFvQixHQUNiLE9BQUlBLEVBQVMsRUFDRkksS0FBSzBILE1BQU05SCxHQUVYSSxLQUFLeUgsS0FBSzdILEdBMkR6QixTQUFTMm9CLEdBQWFybUIsR0FHbEIsT0FBZSxLQUFQQSxFQUFlLE9BRzNCLFNBQVNzbUIsR0FBYWxsQixHQUVsQixPQUFpQixPQUFUQSxFQUFtQixLQStDL0IsU0FBU21sQixHQUFPQyxHQUNaLE9BQU8sV0FDSCxPQUFPN3JCLEtBQUs4ckIsR0FBR0QsSUFJdkIsSUFBSUUsR0FBaUJILEdBQU8sTUFDeEJJLEdBQVlKLEdBQU8sS0FDbkJLLEdBQVlMLEdBQU8sS0FDbkJNLEdBQVVOLEdBQU8sS0FDakJPLEdBQVNQLEdBQU8sS0FDaEJRLEdBQVVSLEdBQU8sS0FDakJTLEdBQVdULEdBQU8sS0FDbEJVLEdBQWFWLEdBQU8sS0FDcEJXLEdBQVVYLEdBQU8sS0FDakJZLEdBQVlULEdBV2hCLFNBQVNVLEdBQVd4eUIsR0FDaEIsT0FBTyxXQUNILE9BQU8rRixLQUFLaEIsVUFBWWdCLEtBQUs2ZCxNQUFNNWpCLEdBQVE2RixLQUluRCxJQUFJc0csR0FBZXFtQixHQUFXLGdCQUMxQjNsQixHQUFVMmxCLEdBQVcsV0FDckJubUIsR0FBVW1tQixHQUFXLFdBQ3JCeG1CLEdBQVF3bUIsR0FBVyxTQUNuQnBuQixHQUFPb25CLEdBQVcsUUFDbEJobUIsR0FBU2dtQixHQUFXLFVBQ3BCNWtCLEdBQVE0a0IsR0FBVyxTQU1uQnhPLEdBQVE5YSxLQUFLOGEsTUFDYnlPLEdBQWEsQ0FDVHhYLEdBQUksR0FDSnpaLEVBQUcsR0FDSDNCLEVBQUcsR0FDSGtNLEVBQUcsR0FDSGhNLEVBQUcsR0FDSHNOLEVBQUcsS0FDSGQsRUFBRyxJQUlYLFNBQVNtbUIsR0FBa0IvVCxFQUFRN1YsRUFBUWlpQixFQUFlcUYsRUFBVTNzQixHQUNoRSxPQUFPQSxFQUFPcVgsYUFBYWhTLEdBQVUsSUFBS2lpQixFQUFlcE0sRUFBUXlSLEdBb0dyRSxJQUFJdUMsR0FBUXpwQixLQUFLQyxJQUVqQixTQUFTaWIsR0FBS3BRLEdBQ1YsT0FBUUEsRUFBSSxJQUFNQSxFQUFJLEtBQU9BLEVBR2pDLFNBQVM0ZSxLQVFMLElBQUs3c0IsS0FBS2hCLFVBQ04sT0FBT2dCLEtBQUttRSxhQUFhUyxjQUc3QixJQUdJMEIsRUFDQUwsRUFDQTRCLEVBQ0FwTSxFQUVBcXhCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBWEFubUIsRUFBVThsQixHQUFNNXNCLEtBQUswZCxlQUFpQixJQUN0Q3JZLEVBQU91bkIsR0FBTTVzQixLQUFLMmQsT0FDbEJsWCxFQUFTbW1CLEdBQU01c0IsS0FBSzRkLFNBS3BCc1AsRUFBUWx0QixLQUFLZ3NCLFlBTWpCLE9BQUtrQixHQU9MNW1CLEVBQVVxRSxHQUFTN0QsRUFBVSxJQUM3QmIsRUFBUTBFLEdBQVNyRSxFQUFVLElBQzNCUSxHQUFXLEdBQ1hSLEdBQVcsR0FHWHVCLEVBQVE4QyxHQUFTbEUsRUFBUyxJQUMxQkEsR0FBVSxHQUdWaEwsRUFBSXFMLEVBQVVBLEVBQVFxbUIsUUFBUSxHQUFHM29CLFFBQVEsU0FBVSxJQUFNLEdBRXpEc29CLEVBQVlJLEVBQVEsRUFBSSxJQUFNLEdBQzlCSCxFQUFTMU8sR0FBS3JlLEtBQUs0ZCxXQUFhUyxHQUFLNk8sR0FBUyxJQUFNLEdBQ3BERixFQUFXM08sR0FBS3JlLEtBQUsyZCxTQUFXVSxHQUFLNk8sR0FBUyxJQUFNLEdBQ3BERCxFQUFVNU8sR0FBS3JlLEtBQUswZCxpQkFBbUJXLEdBQUs2TyxHQUFTLElBQU0sR0FHdkRKLEVBQ0EsS0FDQ2psQixFQUFRa2xCLEVBQVNsbEIsRUFBUSxJQUFNLEtBQy9CcEIsRUFBU3NtQixFQUFTdG1CLEVBQVMsSUFBTSxLQUNqQ3BCLEVBQU8ybkIsRUFBVzNuQixFQUFPLElBQU0sS0FDL0JZLEdBQVNLLEdBQVdRLEVBQVUsSUFBTSxLQUNwQ2IsRUFBUWduQixFQUFVaG5CLEVBQVEsSUFBTSxLQUNoQ0ssRUFBVTJtQixFQUFVM21CLEVBQVUsSUFBTSxLQUNwQ1EsRUFBVW1tQixFQUFVeHhCLEVBQUksSUFBTSxLQTlCeEIsTUFrQ2YsSUFBSTJ4QixHQUFVaFEsR0FBUzloQixVQXdHdkIsT0F0R0E4eEIsR0FBUXB1QixRQXAwRVIsV0FDSSxPQUFPZ0IsS0FBS0osVUFvMEVoQnd0QixHQUFRaHFCLElBL1hSLFdBQ0ksSUFBSW1ULEVBQU92VyxLQUFLNmQsTUFhaEIsT0FYQTdkLEtBQUswZCxjQUFnQjZOLEdBQVF2ckIsS0FBSzBkLGVBQ2xDMWQsS0FBSzJkLE1BQVE0TixHQUFRdnJCLEtBQUsyZCxPQUMxQjNkLEtBQUs0ZCxRQUFVMk4sR0FBUXZyQixLQUFLNGQsU0FFNUJySCxFQUFLblEsYUFBZW1sQixHQUFRaFYsRUFBS25RLGNBQ2pDbVEsRUFBS3pQLFFBQVV5a0IsR0FBUWhWLEVBQUt6UCxTQUM1QnlQLEVBQUtqUSxRQUFVaWxCLEdBQVFoVixFQUFLalEsU0FDNUJpUSxFQUFLdFEsTUFBUXNsQixHQUFRaFYsRUFBS3RRLE9BQzFCc1EsRUFBSzlQLE9BQVM4a0IsR0FBUWhWLEVBQUs5UCxRQUMzQjhQLEVBQUsxTyxNQUFRMGpCLEdBQVFoVixFQUFLMU8sT0FFbkI3SCxNQWtYWG90QixHQUFRdlEsSUFwV1IsU0FBZTdnQixFQUFPckIsR0FDbEIsT0FBTzZ3QixHQUFjeHJCLEtBQU1oRSxFQUFPckIsRUFBTyxJQW9XN0N5eUIsR0FBUTlNLFNBaFdSLFNBQW9CdGtCLEVBQU9yQixHQUN2QixPQUFPNndCLEdBQWN4ckIsS0FBTWhFLEVBQU9yQixHQUFRLElBZ1c5Q3l5QixHQUFRdEIsR0FuUlIsU0FBWTlqQixHQUNSLElBQUtoSSxLQUFLaEIsVUFDTixPQUFPYyxJQUVYLElBQUl1RixFQUNBb0IsRUFDQUwsRUFBZXBHLEtBQUswZCxjQUl4QixHQUFjLFdBRmQxVixFQUFRRCxFQUFlQyxLQUVZLFlBQVZBLEdBQWlDLFNBQVZBLEVBRzVDLE9BRkEzQyxFQUFPckYsS0FBSzJkLE1BQVF2WCxFQUFlLE1BQ25DSyxFQUFTekcsS0FBSzRkLFFBQVU4TixHQUFhcm1CLEdBQzdCMkMsR0FDSixJQUFLLFFBQ0QsT0FBT3ZCLEVBQ1gsSUFBSyxVQUNELE9BQU9BLEVBQVMsRUFDcEIsSUFBSyxPQUNELE9BQU9BLEVBQVMsUUFLeEIsT0FEQXBCLEVBQU9yRixLQUFLMmQsTUFBUXhhLEtBQUs4YSxNQUFNME4sR0FBYTNyQixLQUFLNGQsVUFDekM1VixHQUNKLElBQUssT0FDRCxPQUFPM0MsRUFBTyxFQUFJZSxFQUFlLE9BQ3JDLElBQUssTUFDRCxPQUFPZixFQUFPZSxFQUFlLE1BQ2pDLElBQUssT0FDRCxPQUFjLEdBQVBmLEVBQVllLEVBQWUsS0FDdEMsSUFBSyxTQUNELE9BQWMsS0FBUGYsRUFBY2UsRUFBZSxJQUN4QyxJQUFLLFNBQ0QsT0FBYyxNQUFQZixFQUFlZSxFQUFlLElBRXpDLElBQUssY0FDRCxPQUFPakQsS0FBSzBILE1BQWEsTUFBUHhGLEdBQWdCZSxFQUN0QyxRQUNJLE1BQU0sSUFBSWxFLE1BQU0sZ0JBQWtCOEYsS0E2T2xEb2xCLEdBQVFyQixlQUFpQkEsR0FDekJxQixHQUFRcEIsVUFBWUEsR0FDcEJvQixHQUFRbkIsVUFBWUEsR0FDcEJtQixHQUFRbEIsUUFBVUEsR0FDbEJrQixHQUFRakIsT0FBU0EsR0FDakJpQixHQUFRaEIsUUFBVUEsR0FDbEJnQixHQUFRZixTQUFXQSxHQUNuQmUsR0FBUWQsV0FBYUEsR0FDckJjLEdBQVFiLFFBQVVBLEdBQ2xCYSxHQUFRN3ZCLFFBQVVpdkIsR0FDbEJZLEdBQVF0UCxRQWhXUixXQUNJLElBSUloWCxFQUNBUixFQUNBTCxFQUNBNEIsRUFDQXdsQixFQVJBam5CLEVBQWVwRyxLQUFLMGQsY0FDcEJyWSxFQUFPckYsS0FBSzJkLE1BQ1psWCxFQUFTekcsS0FBSzRkLFFBQ2RySCxFQUFPdlcsS0FBSzZkLE1BZ0RoQixPQXJDU3pYLEdBQWdCLEdBQUtmLEdBQVEsR0FBS29CLEdBQVUsR0FDNUNMLEdBQWdCLEdBQUtmLEdBQVEsR0FBS29CLEdBQVUsSUFHakRMLEdBQXVELE1BQXZDcWxCLEdBQVFFLEdBQWFsbEIsR0FBVXBCLEdBQy9DQSxFQUFPLEVBQ1BvQixFQUFTLEdBS2I4UCxFQUFLblEsYUFBZUEsRUFBZSxJQUVuQ1UsRUFBVTZELEdBQVN2RSxFQUFlLEtBQ2xDbVEsRUFBS3pQLFFBQVVBLEVBQVUsR0FFekJSLEVBQVVxRSxHQUFTN0QsRUFBVSxJQUM3QnlQLEVBQUtqUSxRQUFVQSxFQUFVLEdBRXpCTCxFQUFRMEUsR0FBU3JFLEVBQVUsSUFDM0JpUSxFQUFLdFEsTUFBUUEsRUFBUSxHQUVyQlosR0FBUXNGLEdBQVMxRSxFQUFRLElBR3pCb25CLEVBQWlCMWlCLEdBQVMrZ0IsR0FBYXJtQixJQUN2Q29CLEdBQVU0bUIsRUFDVmhvQixHQUFRb21CLEdBQVFFLEdBQWEwQixJQUc3QnhsQixFQUFROEMsR0FBU2xFLEVBQVMsSUFDMUJBLEdBQVUsR0FFVjhQLEVBQUtsUixLQUFPQSxFQUNaa1IsRUFBSzlQLE9BQVNBLEVBQ2Q4UCxFQUFLMU8sTUFBUUEsRUFFTjdILE1BNlNYb3RCLEdBQVF0TyxNQWxPUixXQUNJLE9BQU9RLEdBQWV0ZixPQWtPMUJvdEIsR0FBUTd5QixJQS9OUixTQUFleU4sR0FFWCxPQURBQSxFQUFRRCxFQUFlQyxHQUNoQmhJLEtBQUtoQixVQUFZZ0IsS0FBS2dJLEVBQVEsT0FBU2xJLEtBOE5sRHN0QixHQUFRaG5CLGFBQWVBLEdBQ3ZCZ25CLEdBQVF0bUIsUUFBVUEsR0FDbEJzbUIsR0FBUTltQixRQUFVQSxHQUNsQjhtQixHQUFRbm5CLE1BQVFBLEdBQ2hCbW5CLEdBQVEvbkIsS0FBT0EsR0FDZituQixHQUFRN2xCLE1BbE5SLFdBQ0ksT0FBT29ELEdBQVMzSyxLQUFLcUYsT0FBUyxJQWtObEMrbkIsR0FBUTNtQixPQUFTQSxHQUNqQjJtQixHQUFRdmxCLE1BQVFBLEdBQ2hCdWxCLEdBQVFuSSxTQWxJUixTQUFrQnFJLEVBQWVDLEdBQzdCLElBQUt2dEIsS0FBS2hCLFVBQ04sT0FBT2dCLEtBQUttRSxhQUFhUyxjQUc3QixJQUVJbEgsRUFDQWdILEVBSEE4b0IsR0FBYSxFQUNiQyxFQUFLZixHQXlCVCxNQXJCNkIsaUJBQWxCWSxJQUNQQyxFQUFnQkQsRUFDaEJBLEdBQWdCLEdBRVMsa0JBQWxCQSxJQUNQRSxFQUFhRixHQUVZLGlCQUFsQkMsSUFDUEUsRUFBS3J6QixPQUFPc3pCLE9BQU8sR0FBSWhCLEdBQVlhLEdBQ1osTUFBbkJBLEVBQWM5eEIsR0FBaUMsTUFBcEI4eEIsRUFBY3JZLEtBQ3pDdVksRUFBR3ZZLEdBQUtxWSxFQUFjOXhCLEVBQUksSUFJbENpQyxFQUFTc0MsS0FBS21FLGFBQ2RPLEVBeEZKLFNBQXdCaXBCLEVBQWdCM0ksRUFBZTBILEVBQVlodkIsR0FDL0QsSUFBSTJmLEVBQVdpQyxHQUFlcU8sR0FBZ0J2cUIsTUFDMUMwRCxFQUFVbVgsR0FBTVosRUFBU3lPLEdBQUcsTUFDNUJ4bEIsRUFBVTJYLEdBQU1aLEVBQVN5TyxHQUFHLE1BQzVCN2xCLEVBQVFnWSxHQUFNWixFQUFTeU8sR0FBRyxNQUMxQnptQixFQUFPNFksR0FBTVosRUFBU3lPLEdBQUcsTUFDekJybEIsRUFBU3dYLEdBQU1aLEVBQVN5TyxHQUFHLE1BQzNCdmtCLEVBQVEwVyxHQUFNWixFQUFTeU8sR0FBRyxNQUMxQmprQixFQUFRb1csR0FBTVosRUFBU3lPLEdBQUcsTUFDMUJ6dkIsRUFDS3lLLEdBQVc0bEIsRUFBV3hYLElBQU0sQ0FBQyxJQUFLcE8sSUFDbENBLEVBQVU0bEIsRUFBV2p4QixHQUFLLENBQUMsS0FBTXFMLElBQ2pDUixHQUFXLEdBQUssQ0FBQyxNQUNqQkEsRUFBVW9tQixFQUFXNXlCLEdBQUssQ0FBQyxLQUFNd00sSUFDakNMLEdBQVMsR0FBSyxDQUFDLE1BQ2ZBLEVBQVF5bUIsRUFBVzFtQixHQUFLLENBQUMsS0FBTUMsSUFDL0JaLEdBQVEsR0FBSyxDQUFDLE1BQ2RBLEVBQU9xbkIsRUFBVzF5QixHQUFLLENBQUMsS0FBTXFMLEdBZ0J2QyxPQWRvQixNQUFoQnFuQixFQUFXcGxCLElBQ1hqTCxFQUNJQSxHQUNDa0wsR0FBUyxHQUFLLENBQUMsTUFDZkEsRUFBUW1sQixFQUFXcGxCLEdBQUssQ0FBQyxLQUFNQyxLQUV4Q2xMLEVBQUlBLEdBQ0NvSyxHQUFVLEdBQUssQ0FBQyxNQUNoQkEsRUFBU2ltQixFQUFXbG1CLEdBQUssQ0FBQyxLQUFNQyxJQUNoQ29CLEdBQVMsR0FBSyxDQUFDLE1BQVMsQ0FBQyxLQUFNQSxJQUVsQyxHQUFLbWQsRUFDUDNvQixFQUFFLElBQU1zeEIsRUFBaUIsRUFDekJ0eEIsRUFBRSxHQUFLcUIsRUFDQWl2QixHQUFrQjl3QixNQUFNLEtBQU1RLEdBdUQ1QnV4QixDQUFlNXRCLE1BQU93dEIsRUFBWUMsRUFBSS92QixHQUUzQzh2QixJQUNBOW9CLEVBQVNoSCxFQUFPNnNCLFlBQVl2cUIsS0FBTTBFLElBRy9CaEgsRUFBT3FuQixXQUFXcmdCLElBb0c3QjBvQixHQUFRNUcsWUFBY3FHLEdBQ3RCTyxHQUFRbHhCLFNBQVcyd0IsR0FDbkJPLEdBQVFwRyxPQUFTNkYsR0FDakJPLEdBQVExdkIsT0FBU0EsR0FDakIwdkIsR0FBUWpwQixXQUFhQSxHQUVyQmlwQixHQUFRUyxZQUFjbnNCLEVBQ2xCLHNGQUNBbXJCLElBRUpPLEdBQVF6TCxLQUFPQSxHQUlmOWQsRUFBZSxJQUFLLEVBQUcsRUFBRyxRQUMxQkEsRUFBZSxJQUFLLEVBQUcsRUFBRyxXQUkxQmtHLEdBQWMsSUFBS04sSUFDbkJNLEdBQWMsSUE1d0pPLHdCQTZ3SnJCb0IsR0FBYyxLQUFLLFNBQVVuUCxFQUFPc0ksRUFBT25ELEdBQ3ZDQSxFQUFPL0IsR0FBSyxJQUFJckMsS0FBeUIsSUFBcEJ5Z0IsV0FBV3hoQixPQUVwQ21QLEdBQWMsS0FBSyxTQUFVblAsRUFBT3NJLEVBQU9uRCxHQUN2Q0EsRUFBTy9CLEdBQUssSUFBSXJDLEtBQUsrTixHQUFNOU87O0FBSy9CSixFQUFNa3lCLFFBQVUsU0FuL0tacHlCLEVBcS9LWXFmLEdBRWhCbmYsRUFBTXNCLEdBQUtnbkIsR0FDWHRvQixFQUFNMFQsSUE3N0VOLFdBQ0ksSUFBSXhOLEVBQU8sR0FBR0UsTUFBTW5JLEtBQUtpQyxVQUFXLEdBRXBDLE9BQU9taEIsR0FBTyxXQUFZbmIsSUEyN0U5QmxHLEVBQU0ySCxJQXg3RU4sV0FDSSxJQUFJekIsRUFBTyxHQUFHRSxNQUFNbkksS0FBS2lDLFVBQVcsR0FFcEMsT0FBT21oQixHQUFPLFVBQVduYixJQXM3RTdCbEcsRUFBTTZlLElBbjdFSSxXQUNOLE9BQU8xZCxLQUFLMGQsSUFBTTFkLEtBQUswZCxPQUFTLElBQUkxZCxNQW03RXhDbkIsRUFBTWlDLElBQU1MLEVBQ1o1QixFQUFNcXJCLEtBOW5CTixTQUFvQmpyQixHQUNoQixPQUFPK2UsR0FBb0IsSUFBUi9lLElBOG5CdkJKLEVBQU02SyxPQXRnQk4sU0FBb0JoSixFQUFRNnJCLEdBQ3hCLE9BQU9HLEdBQWVoc0IsRUFBUTZyQixFQUFPLFdBc2dCekMxdEIsRUFBTWtCLE9BQVNBLEVBQ2ZsQixFQUFNOEIsT0FBUzJZLEdBQ2Z6YSxFQUFNeWtCLFFBQVV4Z0IsRUFDaEJqRSxFQUFNeWhCLFNBQVdpQyxHQUNqQjFqQixFQUFNeUYsU0FBV0EsRUFDakJ6RixFQUFNNEosU0FwZ0JOLFNBQXNCb2tCLEVBQWNuc0IsRUFBUTZyQixHQUN4QyxPQUFPSyxHQUFpQkMsRUFBY25zQixFQUFRNnJCLEVBQU8sYUFvZ0J6RDF0QixFQUFNeXNCLFVBbG9CTixXQUNJLE9BQU90TixHQUFZbGYsTUFBTSxLQUFNQyxXQUFXdXNCLGFBa29COUN6c0IsRUFBTXVJLFdBQWFxUyxHQUNuQjVhLEVBQU1taUIsV0FBYUEsR0FDbkJuaUIsRUFBTXVTLFlBNWdCTixTQUF5QjFRLEVBQVE2ckIsR0FDN0IsT0FBT0csR0FBZWhzQixFQUFRNnJCLEVBQU8sZ0JBNGdCekMxdEIsRUFBTTJWLFlBamdCTixTQUF5QnFZLEVBQWNuc0IsRUFBUTZyQixHQUMzQyxPQUFPSyxHQUFpQkMsRUFBY25zQixFQUFRNnJCLEVBQU8sZ0JBaWdCekQxdEIsRUFBTTZhLGFBQWVBLEdBQ3JCN2EsRUFBTW15QixhQTkwR04sU0FBc0I5ekIsRUFBTWtILEdBQ3hCLEdBQWMsTUFBVkEsRUFBZ0IsQ0FDaEIsSUFBSXpELEVBQ0Fzd0IsRUFDQXRyQixFQUFlc1IsR0FFRSxNQUFqQjBCLEdBQVF6YixJQUErQyxNQUE5QnliLEdBQVF6YixHQUFNMmMsYUFFdkNsQixHQUFRemIsR0FBTTRJLElBQUlKLEVBQWFpVCxHQUFRemIsR0FBTTBjLFFBQVN4VixLQUlyQyxPQURqQjZzQixFQUFZL1gsR0FBV2hjLE1BRW5CeUksRUFBZXNyQixFQUFVclgsU0FFN0J4VixFQUFTc0IsRUFBYUMsRUFBY3ZCLEdBQ25CLE1BQWI2c0IsSUFJQTdzQixFQUFPdVYsS0FBT3pjLElBRWxCeUQsRUFBUyxJQUFJa0YsRUFBT3pCLElBQ2J5VixhQUFlbEIsR0FBUXpiLEdBQzlCeWIsR0FBUXpiLEdBQVF5RCxHQUlwQjJZLEdBQW1CcGMsUUFHRSxNQUFqQnliLEdBQVF6YixLQUMwQixNQUE5QnliLEdBQVF6YixHQUFNMmMsY0FDZGxCLEdBQVF6YixHQUFReWIsR0FBUXpiLEdBQU0yYyxhQUMxQjNjLElBQVNvYyxNQUNUQSxHQUFtQnBjLElBRUMsTUFBakJ5YixHQUFRemIsV0FDUnliLEdBQVF6YixJQUkzQixPQUFPeWIsR0FBUXpiLElBcXlHbkIyQixFQUFNOFosUUExd0dOLFdBQ0ksT0FBT3RULEVBQUtzVCxLQTB3R2hCOVosRUFBTTRWLGNBemdCTixTQUEyQm9ZLEVBQWNuc0IsRUFBUTZyQixHQUM3QyxPQUFPSyxHQUFpQkMsRUFBY25zQixFQUFRNnJCLEVBQU8sa0JBeWdCekQxdEIsRUFBTW1NLGVBQWlCQSxFQUN2Qm5NLEVBQU1xeUIscUJBdE5OLFNBQW9DQyxHQUNoQyxZQUF5Qnp1QixJQUFyQnl1QixFQUNPalEsR0FFcUIsbUJBQXJCaVEsSUFDUGpRLEdBQVFpUSxHQUNELElBaU5mdHlCLEVBQU11eUIsc0JBM01OLFNBQXFDQyxFQUFXQyxHQUM1QyxZQUE4QjV1QixJQUExQml0QixHQUFXMEIsVUFHRDN1QixJQUFWNHVCLEVBQ08zQixHQUFXMEIsSUFFdEIxQixHQUFXMEIsR0FBYUMsRUFDTixNQUFkRCxJQUNBMUIsR0FBV3hYLEdBQUttWixFQUFRLElBRXJCLEtBaU1YenlCLEVBQU00b0IsZUF4MUROLFNBQTJCOEosRUFBVTdULEdBQ2pDLElBQUlvRSxFQUFPeVAsRUFBU3pQLEtBQUtwRSxFQUFLLFFBQVEsR0FDdEMsT0FBT29FLEdBQVEsRUFDVCxXQUNBQSxHQUFRLEVBQ04sV0FDQUEsRUFBTyxFQUNMLFVBQ0FBLEVBQU8sRUFDTCxVQUNBQSxFQUFPLEVBQ0wsVUFDQUEsRUFBTyxFQUNMLFdBQ0EsWUEyMERwQmpqQixFQUFNTixVQUFZNG9CLEdBR2xCdG9CLEVBQU0yeUIsVUFBWSxDQUNkQyxlQUFnQixtQkFDaEJDLHVCQUF3QixzQkFDeEJDLGtCQUFtQiwwQkFDbkJDLEtBQU0sYUFDTkMsS0FBTSxRQUNOQyxhQUFjLFdBQ2RDLFFBQVMsZUFDVEMsS0FBTSxhQUNOQyxNQUFPLFdBR0pwekIsRUE5aUx5RXF6QixLLG1EQ0psRngxQixFQUFPRCxRQUFVLEVBQVEsTSw4QkNIM0IscVFBTUEsU0FBUzAxQixFQUFROXpCLEVBQVErekIsR0FDdkIsSUFBSS9zQixFQUFPaEksT0FBT2dJLEtBQUtoSCxHQUV2QixHQUFJaEIsT0FBT2cxQixzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVWoxQixPQUFPZzFCLHNCQUFzQmgwQixHQUMzQyt6QixJQUFtQkUsRUFBVUEsRUFBUXpPLFFBQU8sU0FBVTBPLEdBQ3BELE9BQU9sMUIsT0FBT20xQix5QkFBeUJuMEIsRUFBUWswQixHQUFLaDFCLGVBQ2pEOEgsRUFBSy9FLEtBQUt4QixNQUFNdUcsRUFBTWl0QixHQUc3QixPQUFPanRCLEVBR1QsU0FBU290QixFQUFlQyxHQUN0QixJQUFLLElBQUkvMUIsRUFBSSxFQUFHQSxFQUFJb0MsVUFBVVksT0FBUWhELElBQUssQ0FDekMsSUFBSTh3QixFQUFTLE1BQVExdUIsVUFBVXBDLEdBQUtvQyxVQUFVcEMsR0FBSyxHQUNuREEsRUFBSSxFQUFJdzFCLEVBQVE5MEIsT0FBT293QixJQUFTLEdBQUkzVCxTQUFRLFNBQVU1YixHQUNwRHkwQixFQUFnQkQsRUFBUXgwQixFQUFLdXZCLEVBQU92dkIsT0FDakNiLE9BQU91MUIsMEJBQTRCdjFCLE9BQU93MUIsaUJBQWlCSCxFQUFRcjFCLE9BQU91MUIsMEJBQTBCbkYsSUFBVzBFLEVBQVE5MEIsT0FBT293QixJQUFTM1QsU0FBUSxTQUFVNWIsR0FDNUpiLE9BQU9DLGVBQWVvMUIsRUFBUXgwQixFQUFLYixPQUFPbTFCLHlCQUF5Qi9FLEVBQVF2dkIsT0FJL0UsT0FBT3cwQixFQUdULFNBQVNJLEVBQVFyekIsR0FHZixPQUFPcXpCLEVBQVUsbUJBQXFCcDFCLFFBQVUsaUJBQW1CQSxPQUFPcTFCLFNBQVcsU0FBVXR6QixHQUM3RixjQUFjQSxHQUNaLFNBQVVBLEdBQ1osT0FBT0EsR0FBTyxtQkFBcUIvQixRQUFVK0IsRUFBSXV6QixjQUFnQnQxQixRQUFVK0IsSUFBUS9CLE9BQU9hLFVBQVksZ0JBQWtCa0IsSUFDL0dBLEdBR2IsU0FBU3d6QixJQUNQQSxFQUFjLFNBQVVDLEVBQUlDLEdBQzFCLE9BQU8sSUFBSUMsRUFBWUYsT0FBSSxFQUFRQyxJQUdyQyxJQUFJRSxFQUFTaG1CLE9BQU85TyxVQUNoQiswQixFQUFVLElBQUlDLFFBRWxCLFNBQVNILEVBQVlGLEVBQUloeEIsRUFBT2l4QixHQUM5QixJQUFJSyxFQUFRLElBQUlubUIsT0FBTzZsQixFQUFJaHhCLEdBRTNCLE9BQU9veEIsRUFBUXh0QixJQUFJMHRCLEVBQU9MLEdBQVVHLEVBQVE5MUIsSUFBSTAxQixJQUFNTyxFQUFnQkQsRUFBT0osRUFBWTcwQixXQUczRixTQUFTbTFCLEVBQVkvVyxFQUFRdVcsR0FDM0IsSUFBSVMsRUFBSUwsRUFBUTkxQixJQUFJMDFCLEdBRXBCLE9BQU83MUIsT0FBT2dJLEtBQUtzdUIsR0FBR0MsUUFBTyxTQUFVVCxFQUFRajJCLEdBQzdDLE9BQU9pMkIsRUFBT2oyQixHQUFReWYsRUFBT2dYLEVBQUV6MkIsSUFBUWkyQixJQUN0QzkxQixPQUFPWSxPQUFPLE9BR25CLE9BQU80MUIsRUFBVVQsRUFBYS9sQixRQUFTK2xCLEVBQVk3MEIsVUFBVXVkLEtBQU8sU0FBVWdZLEdBQzVFLElBQUluWCxFQUFTMFcsRUFBT3ZYLEtBQUtoZixLQUFLbUcsS0FBTTZ3QixHQUVwQyxPQUFPblgsSUFBV0EsRUFBT3dXLE9BQVNPLEVBQVkvVyxFQUFRMVosT0FBUTBaLEdBQzdEeVcsRUFBWTcwQixVQUFVYixPQUFPK0osU0FBVyxTQUFVcXNCLEVBQUtDLEdBQ3hELEdBQUksaUJBQW1CQSxFQUFjLENBQ25DLElBQUlaLEVBQVNHLEVBQVE5MUIsSUFBSXlGLE1BRXpCLE9BQU9vd0IsRUFBTzMxQixPQUFPK0osU0FBUzNLLEtBQUttRyxLQUFNNndCLEVBQUtDLEVBQWF0c0IsUUFBUSxnQkFBZ0IsU0FBVXVzQixFQUFHOTJCLEdBQzlGLE1BQU8sSUFBTWkyQixFQUFPajJCLE9BSXhCLEdBQUksbUJBQXFCNjJCLEVBQWMsQ0FDckMsSUFBSVAsRUFBUXZ3QixLQUVaLE9BQU9vd0IsRUFBTzMxQixPQUFPK0osU0FBUzNLLEtBQUttRyxLQUFNNndCLEdBQUssV0FDNUMsSUFBSS91QixFQUFPaEcsVUFDWCxNQUFPLGlCQUFtQmdHLEVBQUtBLEVBQUtwRixPQUFTLEtBQU9vRixFQUFPLEdBQUdFLE1BQU1uSSxLQUFLaUksSUFBT3pFLEtBQUtvekIsRUFBWTN1QixFQUFNeXVCLElBQVNPLEVBQWFqMUIsTUFBTW1FLEtBQU04QixNQUk3SSxPQUFPc3VCLEVBQU8zMUIsT0FBTytKLFNBQVMzSyxLQUFLbUcsS0FBTTZ3QixFQUFLQyxJQUM3Q2QsRUFBWW4wQixNQUFNbUUsS0FBTWxFLFdBRzdCLFNBQVM0ekIsRUFBZ0JsekIsRUFBS3ZCLEVBQUtOLEdBWWpDLE9BWElNLEtBQU91QixFQUNUcEMsT0FBT0MsZUFBZW1DLEVBQUt2QixFQUFLLENBQzlCTixNQUFPQSxFQUNQTCxZQUFZLEVBQ1owMkIsY0FBYyxFQUNkQyxVQUFVLElBR1p6MEIsRUFBSXZCLEdBQU9OLEVBR042QixFQUdULFNBQVNvMEIsRUFBVU0sRUFBVUMsR0FDM0IsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQ3RDLE1BQU0sSUFBSUMsVUFBVSxzREFHdEJGLEVBQVM1MUIsVUFBWWxCLE9BQU9ZLE9BQU9tMkIsR0FBY0EsRUFBVzcxQixVQUFXLENBQ3JFeTBCLFlBQWEsQ0FDWHAxQixNQUFPdTJCLEVBQ1BELFVBQVUsRUFDVkQsY0FBYyxLQUdsQjUyQixPQUFPQyxlQUFlNjJCLEVBQVUsWUFBYSxDQUMzQ0QsVUFBVSxJQUVSRSxHQUFZWCxFQUFnQlUsRUFBVUMsR0FHNUMsU0FBU1gsRUFBZ0JyMkIsRUFBR3FCLEdBTTFCLE9BTEFnMUIsRUFBa0JwMkIsT0FBT2kzQixnQkFBa0IsU0FBeUJsM0IsRUFBR3FCLEdBRXJFLE9BREFyQixFQUFFbTNCLFVBQVk5MUIsRUFDUHJCLElBR2NBLEVBQUdxQixHQUc1QixTQUFTKzFCLEVBQWV0MEIsRUFBS3ZELEdBQzNCLE9BR0YsU0FBeUJ1RCxHQUN2QixHQUFJaEIsTUFBTUYsUUFBUWtCLEdBQU0sT0FBT0EsRUFKeEJ1MEIsQ0FBZ0J2MEIsSUFPekIsU0FBK0JBLEVBQUt2RCxHQUNsQyxJQUFJaUgsRUFBWSxNQUFQMUQsRUFBYyxLQUF5QixvQkFBWHhDLFFBQTBCd0MsRUFBSXhDLE9BQU9xMUIsV0FBYTd5QixFQUFJLGNBRTNGLEdBQVUsTUFBTjBELEVBQVksT0FDaEIsSUFJSTh3QixFQUFJQyxFQUpKQyxFQUFPLEdBQ1BDLEdBQUssRUFDTHh5QixHQUFLLEVBSVQsSUFDRSxJQUFLdUIsRUFBS0EsRUFBRzlHLEtBQUtvRCxLQUFRMjBCLEdBQU1ILEVBQUs5d0IsRUFBR3FXLFFBQVE2YSxRQUM5Q0YsRUFBS3QwQixLQUFLbzBCLEVBQUc5MkIsUUFFVGpCLEdBQUtpNEIsRUFBS2oxQixTQUFXaEQsR0FINEJrNEIsR0FBSyxJQUs1RCxNQUFPRSxHQUNQMXlCLEdBQUssRUFDTHN5QixFQUFLSSxFQUNMLFFBQ0EsSUFDT0YsR0FBc0IsTUFBaEJqeEIsRUFBVyxRQUFXQSxFQUFXLFNBQzVDLFFBQ0EsR0FBSXZCLEVBQUksTUFBTXN5QixHQUlsQixPQUFPQyxFQWxDd0JJLENBQXNCOTBCLEVBQUt2RCxJQUFNczRCLEVBQTRCLzBCLEVBQUt2RCxJQXNEbkcsV0FDRSxNQUFNLElBQUkwM0IsVUFBVSw2SUF2RG1GYSxHQXFDekcsU0FBU0QsRUFBNEI3M0IsRUFBRyszQixHQUN0QyxHQUFLLzNCLEVBQUwsQ0FDQSxHQUFpQixpQkFBTkEsRUFBZ0IsT0FBT2c0QixFQUFrQmg0QixFQUFHKzNCLEdBQ3ZELElBQUkvMkIsRUFBSWYsT0FBT2tCLFVBQVVZLFNBQVNyQyxLQUFLTSxHQUFHNkgsTUFBTSxHQUFJLEdBRXBELE1BRFUsV0FBTjdHLEdBQWtCaEIsRUFBRTQxQixjQUFhNTBCLEVBQUloQixFQUFFNDFCLFlBQVk5MUIsTUFDN0MsUUFBTmtCLEdBQXFCLFFBQU5BLEVBQW9CYyxNQUFNcUUsS0FBS25HLEdBQ3hDLGNBQU5nQixHQUFxQiwyQ0FBMkM2SixLQUFLN0osR0FBV2czQixFQUFrQmg0QixFQUFHKzNCLFFBQXpHLEdBR0YsU0FBU0MsRUFBa0JsMUIsRUFBS2dELElBQ25CLE1BQVBBLEdBQWVBLEVBQU1oRCxFQUFJUCxVQUFRdUQsRUFBTWhELEVBQUlQLFFBRS9DLElBQUssSUFBSWhELEVBQUksRUFBR29jLEVBQU8sSUFBSTdaLE1BQU1nRSxHQUFNdkcsRUFBSXVHLEVBQUt2RyxJQUFLb2MsRUFBS3BjLEdBQUt1RCxFQUFJdkQsR0FFbkUsT0FBT29jLEVBZ0VULFNBQVNzYyxJQVFQLFlBQTBCLElBQVpDLElBQTRCQSxFQUFRQyxRQUtwRCxTQUFTQyxJQUNQLE9BQU9GLEVBQVFHLFVBQVlILEVBQVFHLFNBQVNDLEtBQU8sSUFBSW5oQixPQUFPK2dCLEVBQVFHLFNBQVNDLE1BQVFKLEVBQVF2RSxRQUtqRyxTQUFTNEUsS0FJVCxJQUFJQyxFQUFnQzNDLEVBQVksY0FBZSxDQUM3RHIxQixNQUFPLElBR1QsU0FBU2k0QixFQUFlQyxHQUN0QixJQUFJdHZCLEVBQU16SCxVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDMUV1eUIsRUFBUTlxQixFQUVaLEdBQUlvdkIsRUFBaUIzdEIsS0FBSzZ0QixHQUFPLENBQy9CLElBQUlDLEVBRUE1QyxFQUEwRCxRQUFoRDRDLEVBQWNELEVBQUt0dUIsTUFBTW91QixVQUErQyxJQUFoQkcsT0FBeUIsRUFBU0EsRUFBWTVDLE9BRXBILEdBQUlBLEdBQVVBLEVBQU92MUIsTUFBTyxDQUMxQixJQUFJbzRCLEVBQWFubkIsU0FBU3NrQixFQUFPdjFCLE9BQVMsSUFDMUMwekIsRUFBUWxyQixLQUFLOGEsTUFBTTFhLEVBQU13dkIsSUFJN0IsT0FBTzV2QixLQUFLbU0sSUFBSSxHQUFJbk0sS0FBS0ksSUFBSSxFQUFHOHFCLElBR2xDLFNBQVMyRSxFQUFlM0UsRUFBTzRFLEdBRTdCLE9BREFBLEVBQU8sT0FBUSx1QkFBdUIzaEIsT0FBTytjLEVBQU8sT0FDN0MsSUFBVSxDQUNmQSxNQUFPQSxFQUNQNkUsU0FBVSxJQUNWdjFCLFFBQVEsSUFJWixJQWdESXcxQixFQUFRLFNBQWVodEIsR0FDekIsT0FBTyxJQUFJaXRCLFNBQVEsU0FBVUMsR0FDM0JDLFdBQVdELEVBQVNsdEIsT0FJcEJvdEIsRUFBYyxTQUFxQkMsR0FDckMsT0FBT3J3QixLQUFLRyxJQUFJSCxLQUFLc3dCLE1BQU9ELElBeUY5QixJQUFJRSxFQUFhLG9EQVNqQixTQUFTQyxFQUFpQkMsRUFBT0MsR0FDL0IsSUErQkkxeUIsRUFBU3F1QixFQUFlQSxFQUFlLEdBL0J2QixDQUNsQnNFLFVBQVUsRUFDVkMsY0FBYyxFQUVkQyxXQUFZLFNBQW9CQyxFQUFPMWQsR0FDckMsR0FBYyxVQUFWMGQsR0FBcUIxZCxFQUFNLENBQzdCLElBQUkyZCxFQUFRLENBQUMzZCxFQUFLdGMsS0FBTXNjLEVBQUs0ZCxTQUFTdlQsUUFBTyxTQUFVdmtCLEdBQ3JELE9BQU9BLEtBQ040RixLQUFLLE9BR1IsT0FGQVIsUUFBUTJ5QixNQUFNLFdBQVc5aUIsT0FBTzRpQixTQUNoQ3p5QixRQUFRMnlCLE1BQU03ZCxHQUloQjlVLFFBQVE0eUIsSUFBSSxJQUFJL2lCLE9BQU8yaUIsRUFBTyxNQUFNM2lCLE9BQU9pRixLQUc3QytkLFFBQVMsR0FDVEMsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLFFBQVMsSUFDVEMsU0FBVSxFQUNWQyxPQUFPLEVBQ1BDLFNBQVUsR0FDVkMsYUFBU3AxQixFQUNUcTFCLGlCQUFrQixXQUVsQkMsY0FBZSxhQUk4Q2xCLEdBRS9ELElBQUsxeUIsRUFBTzZ6QixZQUFhLENBQ3ZCLElBQUlDLEVBQTBCLElBQUk3RCxVQUFVLGtDQUU1QyxNQURBandCLEVBQU82eUIsV0FBVyxRQUFTaUIsR0FDckJBLEVBSVIsSUFBSUMsRUFBVy96QixFQUFPMnlCLFNBQVcsT0FBUyxRQUN0Q3FCLEVBQVFoMEIsRUFBT2cwQixNQUFRLEdBQUc3akIsT0FBT25RLEVBQU9nMEIsTUFBTyxLQUFPLEdBQ3REQyxFQUFXajBCLEVBQU9rMEIsZ0JBQ2xCQyxFQUFPbjBCLEVBQU8yeUIsU0FBVyxHQUFLLElBRWxDLEdBQUkzeUIsRUFBT28wQixNQUFRN0IsRUFBVzF1QixLQUFLN0QsRUFBT28wQixNQUFPLENBQy9DLElBQUlDLEVBQVNyMEIsRUFBT28wQixLQUFLL21CLE1BQU0sS0FFL0IsR0FBc0IsSUFBbEJnbkIsRUFBTzk0QixPQUFjLENBRXZCLElBQUkrNEIsRUFBVWxFLEVBQWVpRSxFQUFRLEdBRXJDSixFQUFXSyxFQUFRLEdBQ25CSCxFQUFPRyxFQUFRLFFBRWZMLEVBQVdJLEVBQU8sR0FLbEJyMEIsRUFBT3l6QixXQUNUenpCLEVBQU95ekIsU0FBVyxJQUFJdGpCLE9BQU9uUSxFQUFPeXpCLFNBQVNwbUIsTUFBTSxLQUFLb1MsT0FBTzhVLFNBQVN6ekIsS0FBSyxPQUcvRSxJQUFJMHpCLEVBQVU5QixFQUFROEIsU0FBVyxHQUFHcmtCLE9BQU80akIsRUFBVSxPQUFPNWpCLE9BQU84akIsRUFBVSxLQUFLOWpCLE9BQU9na0IsR0FBTWhrQixPQUFPblEsRUFBT3l6QixTQUFVLFlBQVl0akIsT0FBTzZqQixHQUVySWgwQixFQUFPbXpCLFFBQVFzQixlQUErQyxtQkFBdkJ6MEIsRUFBTzZ6QixjQUNqRDd6QixFQUFPbXpCLFFBQVFzQixjQUFnQixVQUFZejBCLEVBQU82ekIsYUFNaEQ1QyxNQUNGanhCLEVBQU9tekIsUUFBUSxjQUFnQixXQUFhL0IsSUFDNUNweEIsRUFBT216QixRQUFRLG1CQUFxQixRQUd0QyxJQUFJdUIsRUFBZSxDQUVqQkYsUUFBU0EsRUFDVHJCLFFBQVNuekIsRUFBT216QixRQUNoQkMsVUFBV3B6QixFQUFPb3pCLFVBQ2xCQyxXQUFZcnpCLEVBQU9xekIsV0FDbkJzQixpQkFBa0IsSUFBR0MsVUFDckJwQixNQUFPeHpCLEVBQU93ekIsTUFDZEYsUUFBU3R6QixFQUFPc3pCLFFBQ2hCSSxRQUFTMXpCLEVBQU8wekIsUUFDaEJDLGlCQUFrQjN6QixFQUFPMnpCLGlCQUN6QkMsY0FBZTV6QixFQUFPNHpCLGNBRXRCZixXQUFZN3lCLEVBQU82eUIsV0FDbkJnQyxlQUFnQjcwQixFQUFPNjBCLGVBQ3ZCQyxjQUFlOTBCLEVBQU84MEIsY0FDdEJsQyxhQUFjNXlCLEVBQU80eUIsY0FFbkJtQyxFQUFXdEMsRUFBTTU0QixPQUFPNjZCLEdBMEM1QixPQXpDQUssRUFBU0MsaUJBQW1CdEMsRUFZNUJxQyxFQUFTRSxtQkFBcUIsU0FBVUMsR0FDdEMsT0FBTzFDLEVBQWlCQyxFQUFPcEUsRUFBZUEsRUFBZSxHQUFJLElBQUtxRSxJQUFXd0MsS0FRL0VsMUIsRUFBT20xQixpQkFDVEosRUFBU0ssYUFBYUMsUUFBUUMsSUFBSXQxQixFQUFPbTFCLGlCQUdULG1CQUF2Qm4xQixFQUFPNnpCLGFBakpwQixTQUFvQmtCLEVBQVVRLEdBQzVCUixFQUFTSyxhQUFhQyxRQUFRQyxLQUFJLFNBQVV0MUIsR0FDMUMsT0FBT3UxQixJQUFXQyxNQUFLLFNBQVUzQixHQUkvQixPQUhBN3pCLEVBQU9tekIsUUFBVTlFLEVBQWVBLEVBQWUsR0FBSXJ1QixFQUFPbXpCLFNBQVUsR0FBSSxDQUN0RXNCLGNBQWUsVUFBVXRrQixPQUFPMGpCLEtBRTNCN3pCLFFBNElUeTFCLENBQVdWLEVBQVUvMEIsRUFBTzZ6QixhQUcxQjd6QixFQUFPdXpCLFVBeFJXLFNBQVdtQyxHQUNqQyxJQUFJaEUsRUFBTy8yQixVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssT0FDM0VnN0IsRUFBd0JELEVBQWMxYyxTQUFTNlosV0FDL0NBLE9BQXVDLElBQTFCOEMsRUFBbUNwRSxFQUFPb0UsRUFDdkR6SSxFQUFRLElBQVN3RSxHQUFRRCxFQUFlQyxHQUFRRCxFQUFlLE9BQVFDLEdBQ3ZFNkIsRUFBVzFCLEVBQWUzRSxFQUFPMkYsR0FDakMrQyxHQUFlLEVBQ2ZDLEVBQXVCSCxFQUFjTixhQUFhQyxRQUFRQyxLQUFJLFNBQVV0MUIsR0FDMUUsT0FBT3V6QixHQUFTLFdBQ2QsT0FBT3Z6QixJQURGdXpCLE1BR04sU0FBVU4sR0FDWCxPQUFPaEIsUUFBUTZELE9BQU83QyxNQUVwQjhDLEVBQXdCTCxFQUFjTixhQUFhWSxTQUFTVixLQUFJLFNBQVVVLEdBQzVFLElBQUtKLEdBQWdCLElBQVNsRSxLQUFtQixTQUFUQSxHQUFtQkYsRUFBaUIzdEIsS0FBSzZ0QixLQUFVc0UsRUFBUzdDLFNBQVc2QyxFQUFTN0MsUUFBUSx1Q0FBd0MsQ0FDdEssSUFBSThDLEVBQVd4ckIsU0FBU3VyQixFQUFTN0MsUUFBUSx3Q0FDckMrQyxFQUFZekUsRUFBZUMsRUFBTXVFLEdBRWpDQyxJQUFjaEosSUFDWjJJLEdBQ0ZILEVBQWNOLGFBQWFDLFFBQVFjLE1BQU1OLEdBRzNDM0ksRUFBUWdKLEVBQ1IzQyxFQUFXMUIsRUFBZXFFLEVBQVdyRCxHQUNyQ2dELEVBQXVCSCxFQUFjTixhQUFhQyxRQUFRQyxLQUFJLFNBQVV0MUIsR0FDdEUsT0FBT3V6QixHQUFTLFdBQ2QsT0FBT3Z6QixJQURGdXpCLE1BR04sU0FBVU4sR0FDWCxPQUFPaEIsUUFBUTZELE9BQU83QyxPQUkxQjJDLEdBQWUsRUFHakIsT0FBT0ksS0FDTixTQUFVL0MsR0FDWCxPQUFPaEIsUUFBUTZELE9BQU83QyxNQWlQdEJtRCxDQUFrQnJCLEVBQVUvMEIsRUFBT3V6QixVQS9OdkMsU0FBbUJ3QixHQUNqQixJQUFJc0IsRUFBVzE3QixVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDL0UyN0IsRUFBcUJ2QixFQUFTL2IsU0FDOUJ1ZCxFQUF3QkQsRUFBbUJ6QixlQUMzQ0EsT0FBMkMsSUFBMUIwQixFQUFtQ2hGLEVBQU9nRixFQUMzREMsRUFBeUJGLEVBQW1CeEIsY0FDNUNBLE9BQTJDLElBQTNCMEIsRUFBb0NqRixFQUFPaUYsRUFDL0R6QixFQUFTSyxhQUFhQyxRQUFRQyxLQUFJLFNBQVV0MUIsR0FFMUMsT0FEQTgwQixFQUFjOTBCLEdBQ1BBLEtBQ04sU0FBVWl6QixHQUVYLE9BREE2QixFQUFjN0IsR0FDUGhCLFFBQVE2RCxPQUFPN0MsTUFFeEI4QixFQUFTSyxhQUFhWSxTQUFTVixLQUFJLFNBQVVVLEdBRzNDLE9BREFuQixFQUFlbUIsR0FDUkEsS0FDTixTQUFVL0MsR0FDWCxJQUFJK0MsRUFBVy9DLEVBQU0rQyxTQUNqQmgyQixFQUFTaXpCLEVBQU1qekIsT0FHbkIsR0FGQTYwQixFQUFlNUIsSUFFVmp6QixJQUFXKzBCLEVBQVMvYixTQUFTNFosYUFDaEMsT0FBT1gsUUFBUTZELE9BQU83QyxHQUl4QixJQUFJd0QsRUFBZXoyQixFQUFPcXlCLFVBQVksRUFFdEMsR0FBSW9FLEVBQWVKLEVBRWpCLE9BREFwRCxFQUFNWixTQUFXcnlCLEVBQU9xeUIsU0FDakJKLFFBQVE2RCxPQUFPN0MsR0FHeEIsSUFBSXlELEVBQWlCLEtBQ2pCQyxFQUFPdkUsRUFBWXFFLEdBZ0J2QixPQWRLVCxFQUVNQSxFQUFTWSxRQUFVLEtBQU9aLEVBQVNZLE9BQVMsSUFFckRGLEVBQWlCLFVBQVV2bUIsT0FBTzZsQixFQUFTWSxRQUNkLE1BQXBCWixFQUFTWSxTQUVsQkYsRUFBaUIsYUFFYlYsRUFBUzdDLFNBQVdGLEVBQU0rQyxTQUFTN0MsUUFBUSxrQ0FDN0N3RCxFQUFPWCxFQUFTN0MsUUFBUSxrQ0FUMUJ1RCxFQUFpQixhQWFmQSxHQUVGQyxFQUFPMzBCLEtBQUswSCxNQUFhLElBQVBpdEIsRUFBOEIsSUFBaEIzMEIsS0FBSzYwQixTQUFpQixLQUN0RDlCLEVBQVMvYixTQUFTNlosV0FBVyxVQUFXLEdBQUcxaUIsT0FBT3VtQixFQUFnQixpQ0FBaUN2bUIsT0FBT3dtQixFQUFNLDJCQUVoSDMyQixFQUFPcXlCLFNBQVdvRSxFQUFlLFNBSzFCejJCLEVBQU9vekIsaUJBQ1BwekIsRUFBT3F6QixXQUNQckIsRUFBTTJFLEdBQU1uQixNQUFLLFdBQ3RCLE9BQU9ULEVBQVMvMEIsT0FJYml5QixRQUFRNkQsT0FBTzdDLE1BNkp4QjZELENBQVUvQixFQUFVLzBCLEVBQU8rMkIsWUFFdkIvMkIsRUFBT2czQixTQUNUakMsRUFBU0ssYUFBYVksU0FBU1YsS0FBSSxTQUFVVSxHQUMzQyxPQUFPQSxJQUNOaDJCLEVBQU9nM0IsU0FHTGpDLEVBV1QsU0FBU2tDLEVBQW9CQyxHQUMzQixJQUFJQyxFQUFRRCxFQUFLQyxNQUNibjNCLEVBQVMsR0FHYixjQUZPbTNCLEVBQU1DLGFBQ2JwM0IsRUFBT3EzQixPQUFTLElBQUtGLEdBQ2RuM0IsRUFnQlQsU0FBU3MzQixFQUFXcjlCLEdBQ2xCLElBR0lzOUIsRUFEQUMsRUF0Yk4sU0FBb0N4K0IsRUFBR3krQixHQUNyQyxJQUFJQyxFQUF1QixvQkFBWHArQixRQUEwQk4sRUFBRU0sT0FBT3ExQixXQUFhMzFCLEVBQUUsY0FFbEUsSUFBSzArQixFQUFJLENBQ1AsR0FBSTU4QixNQUFNRixRQUFRNUIsS0FBTzArQixFQUFLN0csRUFBNEI3M0IsS0FBT3krQixHQUFrQnorQixHQUF5QixpQkFBYkEsRUFBRXVDLE9BQXFCLENBQ2hIbThCLElBQUkxK0IsRUFBSTArQixHQUNaLElBQUluL0IsRUFBSSxFQUVKby9CLEVBQUksYUFFUixNQUFPLENBQ0xyOUIsRUFBR3E5QixFQUNIMzlCLEVBQUcsV0FDRCxPQUFJekIsR0FBS1MsRUFBRXVDLE9BQWUsQ0FDeEJtMUIsTUFBTSxHQUVELENBQ0xBLE1BQU0sRUFDTmwzQixNQUFPUixFQUFFVCxPQUdiNkwsRUFBRyxTQUFVQSxHQUNYLE1BQU1BLEdBRVJ3ekIsRUFBR0QsR0FJUCxNQUFNLElBQUkxSCxVQUFVLHlJQUd0QixJQUVJVSxFQUZBa0gsR0FBbUIsRUFDbkJDLEdBQVMsRUFFYixNQUFPLENBQ0x4OUIsRUFBRyxXQUNEbzlCLEVBQUtBLEVBQUdoL0IsS0FBS00sSUFFZmdCLEVBQUcsV0FDRCxJQUFJKzlCLEVBQU9MLEVBQUc3aEIsT0FFZCxPQURBZ2lCLEVBQW1CRSxFQUFLckgsS0FDakJxSCxHQUVUM3pCLEVBQUcsU0FBVUEsR0FDWDB6QixHQUFTLEVBQ1RuSCxFQUFNdnNCLEdBRVJ3ekIsRUFBRyxXQUNELElBQ09DLEdBQWlDLE1BQWJILEVBQUdNLFFBQWdCTixFQUFHTSxTQUMvQyxRQUNBLEdBQUlGLEVBQVEsTUFBTW5ILEtBbVlSc0gsQ0FGQWgvQixPQUFPcUMsb0JBQW9CckIsSUFLM0MsSUFDRSxJQUFLdTlCLEVBQVVsOUIsTUFBT2k5QixFQUFRQyxFQUFVeDlCLEtBQUswMkIsTUFBTyxDQUNsRCxJQUNJbDNCLEVBQVFTLEVBRERzOUIsRUFBTS85QixPQUdiQSxHQUE0QixXQUFuQmsxQixFQUFRbDFCLElBQ25CODlCLEVBQVc5OUIsSUFHZixNQUFPbTNCLEdBQ1A2RyxFQUFVcHpCLEVBQUV1c0IsR0FDWixRQUNBNkcsRUFBVUksSUFHWixPQUFPMytCLE9BQU9pL0IsT0FBT2orQixHQUd2QixTQUFTaytCLEVBQVU5OEIsR0FFakIsT0FEQWk4QixFQUFXajhCLEVBQUkrOEIsS0FBTyxJQUNmLzhCLEVBR1QsU0FBU2c5QixJQUNQLElBQUlDLEVBdllHQyxPQXlZUCxJQUFLRCxFQUNILE9BQU8sS0FHVCxJQUFJRSxFQUFZRixFQUFJRyxVQUFVRCxVQUUxQkUsRUFBV0osRUFBSUcsVUFBVUMsU0FLN0IsT0FBMEMsSUFKckIsQ0FBQyxZQUFhLFdBQVksU0FBVSxVQUl0Q2h1QixRQUFRZ3VCLEdBQ2xCLFNBQ3NDLElBSjVCLENBQUMsU0FBVSxPQUFRLFFBSWRodUIsUUFBUWd1QixHQUN2QixPQUMwQyxJQVA1QixDQUFDLFFBQVMsUUFBUyxVQUFXLFNBT3pCaHVCLFFBQVFndUIsR0FDM0IsVUFDRSxVQUFVNzBCLEtBQUsyMEIsR0FDakIsVUFDRSxRQUFRMzBCLEtBQUs2MEIsR0FDZixRQUdGLEtBd0JULFNBQVNDLEVBQW1CQyxFQUFLQyxFQUFhQyxFQUFhQyxHQUN6RCxJQUFJQyxFQUFjLEdBRWRILEdBQ0ZHLEVBQVk5OEIsS0FBSyxPQUFPaVUsT0FBTzBvQixJQUc3QkMsR0FDRkUsRUFBWTk4QixLQUFLLGVBQWVpVSxPQUFPMm9CLElBR3JDQyxHQUNGQyxFQUFZOThCLEtBQUssV0FBYTY4QixHQUdoQ0MsRUFBWTk4QixLQUFLLE9BQU9pVSxPQUFPeW9CLElBQy9CLElBQUlGLEVBQVcsS0FFZixJQWhkeUIsb0JBQVhILFFBQTBCLGNBQWVBLFFBQVUsWUFBYUEsT0FBT0UsV0FBMEMsZ0JBQTdCRixPQUFPRSxVQUFVUSxTQWtkL0dQLEVBQVdMLElBQ1hXLEVBQVk5OEIsS0FBSyx5QkFDUiswQixLQUNUeUgsRUE1Q04sV0FDRSxJQUFJQSxFQUFXeEgsRUFBUXdILFVBQVksUUFDL0IvTCxFQUFVdUUsRUFBUXZFLFNBQVcsUUFDN0J1TSxFQUFjLENBQ2hCQyxRQUFTLFVBQ1RDLElBQUssUUFDTEMsT0FBUSxRQUNSQyxRQUFTLFFBQ1RDLE1BQU8sUUFDUEMsUUFBUyxRQUNUQyxNQUFPLFFBQ1BDLE1BQU8sV0FHVCxPQUFJaEIsS0FBWVEsRUFDUCxHQUFHL29CLE9BQU8rb0IsRUFBWVIsSUFBYSxRQUFTLEtBQUt2b0IsT0FBT3djLEdBRzFELEtBMEJRZ04sR0FDWFgsRUFBWTk4QixLQUFLLG9CQUFvQmlVLE9BQU9paEIsUUFFNUNzSCxFQUFXTCxJQUNYVyxFQUFZOThCLEtBQUsscUJBRW5CLE1BQU9rSSxHQUNQczBCLEVBQVcsS0FPYixPQUpJQSxHQUNGTSxFQUFZOThCLEtBQUssTUFBTWlVLE9BQU91b0IsSUFHekIsR0FBR3ZvQixPQUFPNm9CLEVBQVl2WixRQUFPLFNBQVVDLEdBQzVDLE1BQWdCLEtBQVRBLEtBQ041ZSxLQUFLLE1BQU8sS0FVakIsU0FBUzg0QixFQUFjeGtCLEdBQ3JCLE9BQU9uYyxPQUFPQyxlQUFla2MsRUFBTSxnQkFBaUIsQ0FDbERqYyxZQUFZLEVBQ1owMkIsY0FBYyxFQUNkQyxVQUFVLEVBQ1Z0MkIsTUFBTyxXQUNMLE9BQU8sSUFBS3FGLFksbUNDeHZCbEIsb0JBSVMsV0FBZSxhQUVwQixJQUFJZzdCLEVBQW1CeDRCLFNBQVNsSCxVQUFVWSxTQUN0Q2xCLEVBQVNaLE9BQU9ZLE9BQVFYLEVBQWlCRCxPQUFPQyxlQUFnQmsxQixFQUEyQm4xQixPQUFPbTFCLHlCQUEwQjl5QixFQUFzQnJDLE9BQU9xQyxvQkFBcUIyeUIsRUFBd0JoMUIsT0FBT2cxQixzQkFBdUI2TCxFQUFtQjdnQyxPQUFPOGdDLGVBQzlQMXZCLEVBQUtwUixPQUFPa0IsVUFBV0MsRUFBaUJpUSxFQUFHalEsZUFBZ0I0L0IsRUFBdUIzdkIsRUFBRzJ2QixxQkFDckZDLEVBQXFELG1CQUExQmhNLEVBQzNCaU0sRUFBOEIsbUJBQVovSyxRQVNsQmdMLEVBQWMsV0FDZCxHQUFJRCxFQUNBLE9BQU8sV0FBYyxPQUFPLElBQUkvSyxTQUVwQyxJQUFJaUwsRUFBdUIsV0FDdkIsU0FBU0EsSUFDTHY3QixLQUFLdzdCLE1BQVEsR0FDYng3QixLQUFLeTdCLFFBQVUsR0FZbkIsT0FWQUYsRUFBTWpnQyxVQUFVb2dDLElBQU0sU0FBVXpnQyxHQUM1QixTQUFVK0UsS0FBS3c3QixNQUFNM3ZCLFFBQVE1USxJQUVqQ3NnQyxFQUFNamdDLFVBQVVmLElBQU0sU0FBVVUsR0FDNUIsT0FBTytFLEtBQUt5N0IsUUFBUXo3QixLQUFLdzdCLE1BQU0zdkIsUUFBUTVRLEtBRTNDc2dDLEVBQU1qZ0MsVUFBVXVILElBQU0sU0FBVTVILEVBQUtOLEdBQ2pDcUYsS0FBS3c3QixNQUFNbitCLEtBQUtwQyxHQUNoQitFLEtBQUt5N0IsUUFBUXArQixLQUFLMUMsSUFFZjRnQyxFQWZlLEdBaUIxQixPQUFPLFdBQWMsT0FBTyxJQUFJQSxHQXJCbEIsR0FpQ2RJLEVBQWdCLFNBQVV2Z0MsRUFBUXdnQyxHQUNsQyxJQUFJdGdDLEVBQVlGLEVBQU9rMkIsV0FBYTJKLEVBQWlCNy9CLEdBQ3JELElBQUtFLEVBQ0QsT0FBT04sRUFBTyxNQUVsQixJQUFJNmdDLEVBQWN2Z0MsRUFBVXkwQixZQUM1QixHQUFJOEwsSUFBZ0JELEVBQU14aEMsT0FDdEIsT0FBT2tCLElBQWNzZ0MsRUFBTXhoQyxPQUFPa0IsVUFBWSxHQUFLTixFQUFPTSxHQUU5RCxJQUFLMC9CLEVBQWlCbmhDLEtBQUtnaUMsR0FBYWh3QixRQUFRLGlCQUM1QyxJQUNJLE9BQU8sSUFBSWd3QixFQUVmLE1BQU9yd0IsSUFFWCxPQUFPeFEsRUFBT00sSUFjZHdnQyxFQUFzQixTQUFVMWdDLEVBQVF3Z0MsRUFBT0csRUFBWUMsR0FDM0QsSUFBSWxkLEVBQVE2YyxFQUFjdmdDLEVBQVF3Z0MsR0FHbEMsSUFBSyxJQUFJM2dDLEtBRFQrZ0MsRUFBTW41QixJQUFJekgsRUFBUTBqQixHQUNGMWpCLEVBQ1JHLEVBQWUxQixLQUFLdUIsRUFBUUgsS0FDNUI2akIsRUFBTTdqQixHQUFPOGdDLEVBQVczZ0MsRUFBT0gsR0FBTStnQyxJQUc3QyxHQUFJWixFQUVBLElBREEsSUFBSS9MLEVBQVVELEVBQXNCaDBCLEdBQzNCa3VCLEVBQVEsRUFBRzJTLEVBQVc1TSxFQUFRM3lCLE9BQVF3L0IsT0FBUyxFQUFRNVMsRUFBUTJTLElBQVkzUyxFQUNoRjRTLEVBQVM3TSxFQUFRL0YsR0FDYjZSLEVBQXFCdGhDLEtBQUt1QixFQUFROGdDLEtBQ2xDcGQsRUFBTW9kLEdBQVVILEVBQVczZ0MsRUFBTzhnQyxHQUFTRixJQUl2RCxPQUFPbGQsR0FjUHFkLEVBQXVCLFNBQVUvZ0MsRUFBUXdnQyxFQUFPRyxFQUFZQyxHQUM1RCxJQUFJbGQsRUFBUTZjLEVBQWN2Z0MsRUFBUXdnQyxHQUVsQ0ksRUFBTW41QixJQUFJekgsRUFBUTBqQixHQUlsQixJQUhBLElBQUltQyxFQUFhbWEsRUFDWDMrQixFQUFvQnJCLEdBQVFrVyxPQUFPOGQsRUFBc0JoMEIsSUFDekRxQixFQUFvQnJCLEdBQ2pCa3VCLEVBQVEsRUFBRzhTLEVBQVduYixFQUFXdmtCLE9BQVFyQixPQUFXLEVBQVFnaEMsT0FBYSxFQUFRL1MsRUFBUThTLElBQVk5UyxFQUUxRyxHQUFpQixZQURqQmp1QixFQUFXNGxCLEVBQVdxSSxLQUNvQixXQUFianVCLEVBRXpCLEdBREFnaEMsRUFBYTlNLEVBQXlCbjBCLEVBQVFDLEdBQzlCLENBRVBnaEMsRUFBVzloQyxLQUFROGhDLEVBQVd4NUIsTUFDL0J3NUIsRUFBVzFoQyxNQUFRb2hDLEVBQVczZ0MsRUFBT0MsR0FBVzJnQyxJQUVwRCxJQUNJM2hDLEVBQWV5a0IsRUFBT3pqQixFQUFVZ2hDLEdBRXBDLE1BQU9qSSxHQUVIdFYsRUFBTXpqQixHQUFZZ2hDLEVBQVcxaEMsWUFNakNta0IsRUFBTXpqQixHQUFZMGdDLEVBQVczZ0MsRUFBT0MsR0FBVzJnQyxHQUkzRCxPQUFPbGQsR0FnQ1AvaUIsRUFBVUUsTUFBTUYsUUFDaEJtL0IsRUFBaUI5Z0MsT0FBTzhnQyxlQUN4Qm9CLEVBQWMsV0FDZCxNQUEwQixvQkFBZkMsV0FDQUEsV0FFUyxvQkFBVEMsS0FDQUEsS0FFVyxvQkFBWDlDLE9BQ0FBLFlBRVcsSUFBWCtDLEVBQ0FBLEdBRVBoN0IsU0FBV0EsUUFBUTJ5QixPQUNuQjN5QixRQUFRMnlCLE1BQU0scURBRVhwMEIsTUFoQk8sR0FxQ2xCLFNBQVMwOEIsRUFBSy9oQyxFQUFPazVCLEdBRWpCLElBQUkzcEIsS0FBYzJwQixJQUFXQSxFQUFRM3BCLFVBQ2pDMHhCLEVBQVMvSCxHQUFXQSxFQUFRK0gsT0FBVVUsRUFDdENLLEVBQWlCenlCLEVBQVdpeUIsRUFBdUJMLEVBVW5EQyxFQUFhLFNBQVVwaEMsRUFBT3FoQyxHQUM5QixJQUFLcmhDLEdBQTBCLGlCQUFWQSxFQUNqQixPQUFPQSxFQUVYLEdBQUlxaEMsRUFBTU4sSUFBSS9nQyxHQUNWLE9BQU9xaEMsRUFBTXpoQyxJQUFJSSxHQUVyQixJQU1JbWtCLEVBdkZtQjhkLEVBQ3ZCMzlCLEVBZ0ZJM0QsRUFBWVgsRUFBTTIyQixXQUFhNEosRUFBZXZnQyxHQUM5Q2toQyxFQUFjdmdDLEdBQWFBLEVBQVV5MEIsWUFFekMsSUFBSzhMLEdBQWVBLElBQWdCRCxFQUFNeGhDLE9BQ3RDLE9BQU91aUMsRUFBZWhpQyxFQUFPaWhDLEVBQU9HLEVBQVlDLEdBSXBELEdBQUlqZ0MsRUFBUXBCLEdBQVEsQ0FFaEIsR0FBSXVQLEVBQ0EsT0FBT2l5QixFQUFxQnhoQyxFQUFPaWhDLEVBQU9HLEVBQVlDLEdBRTFEbGQsRUFBUSxJQUFJK2MsRUFDWkcsRUFBTW41QixJQUFJbEksRUFBT21rQixHQUNqQixJQUFLLElBQUl3SyxFQUFRLEVBQUcyUyxFQUFXdGhDLEVBQU0rQixPQUFRNHNCLEVBQVEyUyxJQUFZM1MsRUFDN0R4SyxFQUFNd0ssR0FBU3lTLEVBQVdwaEMsRUFBTTJ1QixHQUFRMFMsR0FFNUMsT0FBT2xkLEVBR1gsR0FBSW5rQixhQUFpQmloQyxFQUFNNytCLEtBQ3ZCLE9BQU8sSUFBSTgrQixFQUFZbGhDLEVBQU0yRSxXQUdqQyxHQUFJM0UsYUFBaUJpaEMsRUFBTXh4QixPQUd2QixPQUZBMFUsRUFBUSxJQUFJK2MsRUFBWWxoQyxFQUFNNnZCLE9BQVE3dkIsRUFBTXNFLFFBMUdoREEsRUFBUSxJQURlMjlCLEVBMkdpRGppQyxHQXpHakU4aEMsU0FDUHg5QixHQUFTLEtBRVQyOUIsRUFBT0MsYUFDUDU5QixHQUFTLEtBRVQyOUIsRUFBT0UsWUFDUDc5QixHQUFTLEtBRVQyOUIsRUFBT0csVUFDUDk5QixHQUFTLEtBRVQyOUIsRUFBT0ksU0FDUC85QixHQUFTLEtBRU5BLEtBMkZPOEYsVUFBWXBLLEVBQU1vSyxVQUNqQitaLEVBR1gsR0FBSThjLEVBQU1xQixLQUFPdGlDLGFBQWlCaWhDLEVBQU1xQixJQU1wQyxPQUxBbmUsRUFBUSxJQUFJK2MsRUFDWkcsRUFBTW41QixJQUFJbEksRUFBT21rQixHQUNqQm5rQixFQUFNa2MsU0FBUSxTQUFVbGMsRUFBT00sR0FDM0I2akIsRUFBTWpjLElBQUk1SCxFQUFLOGdDLEVBQVdwaEMsRUFBT3FoQyxPQUU5QmxkLEVBR1gsR0FBSThjLEVBQU1zQixLQUFPdmlDLGFBQWlCaWhDLEVBQU1zQixJQU1wQyxPQUxBcGUsRUFBUSxJQUFJK2MsRUFDWkcsRUFBTW41QixJQUFJbEksRUFBT21rQixHQUNqQm5rQixFQUFNa2MsU0FBUSxTQUFVbGMsR0FDcEJta0IsRUFBTWpDLElBQUlrZixFQUFXcGhDLEVBQU9xaEMsT0FFekJsZCxFQUdYLEdBQUk4YyxFQUFNdUIsTUFBUXhpQyxhQUFpQmloQyxFQUFNdUIsS0FDckMsT0FBT3hpQyxFQUFNcUgsTUFBTSxFQUFHckgsRUFBTXlpQyxLQUFNemlDLEVBQU1rNEIsTUFHNUMsR0FBSStJLEVBQU15QixRQUFVekIsRUFBTXlCLE9BQU9DLFNBQVMzaUMsR0FNdEMsT0FMQW1rQixFQUFROGMsRUFBTXlCLE9BQU9FLFlBQ2YzQixFQUFNeUIsT0FBT0UsWUFBWTVpQyxFQUFNK0IsUUFDL0IsSUFBSW0vQixFQUFZbGhDLEVBQU0rQixRQUM1QnMvQixFQUFNbjVCLElBQUlsSSxFQUFPbWtCLEdBQ2pCbmtCLEVBQU0raEMsS0FBSzVkLEdBQ0pBLEVBR1gsR0FBSThjLEVBQU00QixZQUFhLENBRW5CLEdBQUk1QixFQUFNNEIsWUFBWUMsT0FBTzlpQyxHQUd6QixPQUZBbWtCLEVBQVEsSUFBSStjLEVBQVlsaEMsRUFBTStpQyxPQUFPMTdCLE1BQU0sSUFDM0NnNkIsRUFBTW41QixJQUFJbEksRUFBT21rQixHQUNWQSxFQUdYLEdBQUlua0IsYUFBaUJpaEMsRUFBTTRCLFlBR3ZCLE9BRkExZSxFQUFRbmtCLEVBQU1xSCxNQUFNLEdBQ3BCZzZCLEVBQU1uNUIsSUFBSWxJLEVBQU9ta0IsR0FDVkEsRUFJZixNQUVzQixtQkFBZm5rQixFQUFNZzhCLE1BRVRoOEIsYUFBaUJ1SCxPQUVoQjA1QixFQUFNdEwsU0FBVzMxQixhQUFpQmloQyxFQUFNdEwsU0FFeENzTCxFQUFNK0IsU0FBV2hqQyxhQUFpQmloQyxFQUFNK0IsUUFDbENoakMsRUFHSmdpQyxFQUFlaGlDLEVBQU9paEMsRUFBT0csRUFBWUMsSUFFcEQsT0FBT0QsRUFBV3BoQyxFQUFPMmdDLEtBd0I3QixPQW5CQW9CLEVBQUtrQixRQUFVbEIsRUFZZkEsRUFBSy8rQixPQUFTLFNBQW9CaEQsRUFBT2s1QixHQUNyQyxPQUFPNkksRUFBSy9oQyxFQUFPLENBQ2Z1UCxVQUFVLEVBQ1YweEIsTUFBTy9ILEVBQVVBLEVBQVErSCxXQUFRLEtBSWxDYyxHQTlWd0RqakMsRUFBT0QsUUFBVXkxQixNLGdEQ0RwRixpSkFZSTRPLEVBQWEsU0FBV0MsRUFBU0MsR0FHbkMsSUFGQSxJQUFJcmtCLEVBQVMsQ0FBQ29rQixFQUFRLElBRWJwa0MsRUFBSSxFQUFHdUcsRUFBTTg5QixFQUFlcmhDLE9BQVFoRCxFQUFJdUcsRUFBS3ZHLEdBQUssRUFDekRnZ0IsRUFBT3JjLEtBQUswZ0MsRUFBZXJrQyxHQUFJb2tDLEVBQVFwa0MsRUFBSSxJQUc3QyxPQUFPZ2dCLEdBR0xtVyxFQUE0QixtQkFBWHAxQixRQUFvRCxpQkFBcEJBLE9BQU9xMUIsU0FBd0IsU0FBVXR6QixHQUM1RixjQUFjQSxHQUNaLFNBQVVBLEdBQ1osT0FBT0EsR0FBeUIsbUJBQVgvQixRQUF5QitCLEVBQUl1ekIsY0FBZ0J0MUIsUUFBVStCLElBQVEvQixPQUFPYSxVQUFZLGdCQUFrQmtCLEdBR3ZId2hDLEVBQWlCLFNBQVU5SCxFQUFVMkYsR0FDdkMsS0FBTTNGLGFBQW9CMkYsR0FDeEIsTUFBTSxJQUFJekssVUFBVSxzQ0FJcEI2TSxFQUFjLFdBQ2hCLFNBQVNyTyxFQUFpQkgsRUFBUXlPLEdBQ2hDLElBQUssSUFBSXhrQyxFQUFJLEVBQUdBLEVBQUl3a0MsRUFBTXhoQyxPQUFRaEQsSUFBSyxDQUNyQyxJQUFJMmlDLEVBQWE2QixFQUFNeGtDLEdBQ3ZCMmlDLEVBQVcvaEMsV0FBYStoQyxFQUFXL2hDLGFBQWMsRUFDakQraEMsRUFBV3JMLGNBQWUsRUFDdEIsVUFBV3FMLElBQVlBLEVBQVdwTCxVQUFXLEdBQ2pENzJCLE9BQU9DLGVBQWVvMUIsRUFBUTRNLEVBQVdwaEMsSUFBS29oQyxJQUlsRCxPQUFPLFNBQVVSLEVBQWFzQyxFQUFZQyxHQUd4QyxPQUZJRCxHQUFZdk8sRUFBaUJpTSxFQUFZdmdDLFVBQVc2aUMsR0FDcERDLEdBQWF4TyxFQUFpQmlNLEVBQWF1QyxHQUN4Q3ZDLEdBZE8sR0FrQmR3QyxFQUFXamtDLE9BQU9zekIsUUFBVSxTQUFVK0IsR0FDeEMsSUFBSyxJQUFJLzFCLEVBQUksRUFBR0EsRUFBSW9DLFVBQVVZLE9BQVFoRCxJQUFLLENBQ3pDLElBQUk4d0IsRUFBUzF1QixVQUFVcEMsR0FFdkIsSUFBSyxJQUFJdUIsS0FBT3V2QixFQUNWcHdCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBSzJ3QixFQUFRdnZCLEtBQy9DdzBCLEVBQU94MEIsR0FBT3V2QixFQUFPdnZCLElBSzNCLE9BQU93MEIsR0FHTDZPLEVBQVcsU0FBVXBOLEVBQVVDLEdBQ2pDLEdBQTBCLG1CQUFmQSxHQUE0QyxPQUFmQSxFQUN0QyxNQUFNLElBQUlDLFVBQVUsa0VBQW9FRCxHQUcxRkQsRUFBUzUxQixVQUFZbEIsT0FBT1ksT0FBT20yQixHQUFjQSxFQUFXNzFCLFVBQVcsQ0FDckV5MEIsWUFBYSxDQUNYcDFCLE1BQU91MkIsRUFDUDUyQixZQUFZLEVBQ1oyMkIsVUFBVSxFQUNWRCxjQUFjLEtBR2RHLElBQVkvMkIsT0FBT2kzQixlQUFpQmozQixPQUFPaTNCLGVBQWVILEVBQVVDLEdBQWNELEVBQVNJLFVBQVlILElBZXpHb04sRUFBNEIsU0FBVS9CLEVBQU0zaUMsR0FDOUMsSUFBSzJpQyxFQUNILE1BQU0sSUFBSWdDLGVBQWUsNkRBRzNCLE9BQU8za0MsR0FBeUIsaUJBQVRBLEdBQXFDLG1CQUFUQSxFQUE4QjJpQyxFQUFQM2lDLEdBSXhFNGtDLEVBQWdCLFNBQVd4d0IsR0FDN0IsTUFBaUUsaUJBQTVDLElBQU5BLEVBQW9CLFlBQWM0aEIsRUFBUTVoQixLQUFvQkEsRUFBRThoQixjQUFnQjMxQixRQUk3RnNrQyxFQUFjdGtDLE9BQU9pL0IsT0FBTyxJQUM1QnNGLEVBQWV2a0MsT0FBT2kvQixPQUFPLElBR2pDLFNBQVM5MkIsRUFBV3lDLEdBQ2xCLE1BQXVCLG1CQUFUQSxFQUtoQixTQUFTNDVCLEVBQWlCblAsR0FDeEIsT0FBaUdBLEVBQU9vUCxhQUFlcFAsRUFBT3gxQixNQUFRLFlBU3hJLFNBQVM2a0MsRUFBa0JyUCxHQUN6QixPQUFPQSxHQUE4QyxpQkFBN0JBLEVBQU9zUCxrQkFLakMsSUFBSUMsT0FBNkIsSUFBWjNNLElBQTRCQSxFQUFRNE0sSUFBSUMsbUJBQXFCN00sRUFBUTRNLElBQUlELFVBQVksY0FNdEdHLEVBQStCLG9CQUFYekYsUUFBMEIsZ0JBQWlCQSxPQUUvRDBGLEVBQThDLGtCQUF0QkMsbUJBQW1DQSx3QkFBd0MsSUFBWmhOLElBQTRCQSxFQUFRNE0sSUFBSUssNkJBQStCak4sRUFBUTRNLElBQUlJLHFCQUFzQixFQUdoTUUsRUFBMkIsR0ErQy9CLElBQUlDLEVBQXdCLFNBQVVDLEdBR3BDLFNBQVNELEVBQXNCRSxHQUM3QjFCLEVBQWVoK0IsS0FBTXcvQixHQUVyQixJQUFLLElBQUlHLEVBQU83akMsVUFBVVksT0FBUXFoQyxFQUFpQjloQyxNQUFNMGpDLEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlDLEVBQU8sRUFBR0EsRUFBT0QsRUFBTUMsSUFDeEc3QixFQUFlNkIsRUFBTyxHQUFLOWpDLFVBQVU4akMsR0FJckMsSUFBSXJQLEVBQVFnTyxFQUEwQnYrQixLQUFNeS9CLEVBQU81bEMsS0FBS21HLEtBQU0sNElBQThJMC9CLEVBQU8sMEJBQTRCM0IsRUFBZXJoQyxPQUFTLEVBQUksMEJBQTRCcWhDLEVBQWU5N0IsS0FBSyxNQUFRLE1BSXJVLE9BQU9zOEIsRUFBMEJoTyxHQUduQyxPQWpCQStOLEVBQVNrQixFQUF1QkMsR0FpQnpCRCxFQWxCbUIsQ0FtQjFCdDlCLE9BR0UyOUIsRUFBa0IsbURBRWxCQyxFQUFlLFNBQVdDLEdBQzVCLElBQUlDLEVBQU0sSUFBTUQsR0FBWSxJQUN4QkUsRUFBcUIsR0FLekIsT0FKQUQsRUFBSXg3QixRQUFRcTdCLEdBQWlCLFNBQVV0N0IsRUFBTzI3QixFQUFhQyxHQUV6RCxPQURBRixFQUFtQjVpQyxLQUFLLENBQUU2aUMsWUFBYUEsRUFBYUMsV0FBWUEsSUFDekQ1N0IsS0FFRjA3QixFQUFtQmpqQyxLQUFJLFNBQVVxN0IsRUFBTTMrQixHQUM1QyxJQUFJd21DLEVBQWM3SCxFQUFLNkgsWUFDbkJDLEVBQWE5SCxFQUFLOEgsV0FFbEJDLEVBQVdILEVBQW1Cdm1DLEVBQUksR0FFdEMsTUFBTyxDQUFFd21DLFlBQWFBLEVBQWFHLFdBRGxCRCxFQUFXSixFQUFJaCtCLE1BQU1tK0IsRUFBWUMsRUFBU0QsWUFBY0gsRUFBSWgrQixNQUFNbStCLFFBT25GRyxFQUFnQixnQkFHaEJDLEVBQWlCLElBQUksSUFBTyxDQUM5QjlELFFBQVEsRUFDUitELFNBQVMsRUFDVEMsVUFBVSxFQUNWOVosUUFBUSxFQUNSK1osVUFBVSxFQUNWQyxXQUFXLElBR1RDLEVBQVMsSUFBSSxJQUFPLENBQ3RCbkUsUUFBUSxFQUNSK0QsU0FBUyxFQUNUQyxVQUFVLEVBQ1Y5WixRQUFRLEVBQ1IrWixVQUFVLEVBQ1ZDLFdBQVcsSUFPVEUsRUFBZSxHQUdmQyxFQUFvQixTQUEyQkMsR0FDakQsSUFBaUIsSUFBYkEsRUFBZ0IsQ0FDbEIsSUFBSUMsRUFBY0gsRUFFbEIsT0FEQUEsRUFBZSxHQUNSRyxJQUlQQyxFQUFtQixLQUFrQixTQUFVQyxHQUNqREwsRUFBYXhqQyxLQUFLNmpDLE1BR2hCQyxPQUFlLEVBQ2ZDLE9BQVksRUFDWkMsT0FBa0IsRUFFbEJDLEVBQXdCLFNBQStCLzhCLEVBQU8yWixFQUFRdEYsR0FDeEUsT0FFQXNGLEVBQVMsSUFFdUMsSUFBaER0RixFQUFPNVcsTUFBTSxFQUFHa2MsR0FBUXJTLFFBQVF1MUIsSUFFaEN4b0IsRUFBTzVXLE1BQU1rYyxFQUFTa2pCLEVBQVUxa0MsT0FBUXdoQixLQUFZa2pCLEVBQzNDLElBQU1ELEVBR1I1OEIsR0FvQlRxOEIsRUFBT25LLElBQUksQ0FQMEIsU0FBd0NzSyxFQUFTaFEsRUFBR3dRLEdBQ3ZFLElBQVpSLEdBQWlCUSxFQUFVN2tDLFFBQVU2a0MsRUFBVSxHQUFHQyxZQUFZSixHQUFhLElBRTdFRyxFQUFVLEdBQUtBLEVBQVUsR0FBRy84QixRQUFRNjhCLEVBQWlCQyxLQUliTCxFQUFrQkgsSUFDOURQLEVBQWU5SixJQUFJLENBQUN3SyxFQUFrQkgsSUFFdEMsSUFBSVcsRUFBZSxTQUFzQnpCLEdBQ3ZDLE9BQU9PLEVBQWUsR0FBSVAsSUFHNUIsU0FBUzBCLEVBQWVDLEVBQU9DLEVBQVVqYixHQUN2QyxJQUFJdVosRUFBY3BrQyxVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssSUFFbEYrbEMsRUFBVUYsRUFBTTEvQixLQUFLLElBQUl1QyxRQUFRODdCLEVBQWUsSUFFaER3QixFQUFTRixHQUFZamIsRUFBU0EsRUFBUyxJQUFNaWIsRUFBVyxNQUFRQyxFQUFVLEtBQU9BLEVBU3JGLE9BSkFWLEVBQWVqQixFQUNma0IsRUFBWVEsRUFDWlAsRUFBa0IsSUFBSWozQixPQUFPLEtBQU9nM0IsRUFBWSxNQUFPLEtBRWhEUixFQUFPamEsSUFBV2liLEVBQVcsR0FBS0EsRUFBVUUsR0FNckQsSUFBSUMsRUFBVyxXQUNiLE9BQWtELE1BV2hEQyxFQUFlLFNBQXNCbHJCLEVBQU9tckIsRUFBSWhvQyxHQUM5Q0EsS0FFZTZjLEVBQU1tckIsS0FBUW5yQixFQUFNbXJCLEdBQU03bkMsT0FBT1ksT0FBTyxRQUM5Q2YsSUFBUSxJQUtuQmlvQyxFQUFlLFNBQXNCcHJCLEVBQU9tckIsR0FFOUNuckIsRUFBTW1yQixHQUFNN25DLE9BQU9ZLE9BQU8sT0FJeEJtbkMsRUFBZSxTQUFzQnJyQixHQUN2QyxPQUFPLFNBQVVtckIsRUFBSWhvQyxHQUNuQixZQUFxQndGLElBQWRxWCxFQUFNbXJCLElBQXFCbnJCLEVBQU1tckIsR0FBSWhvQyxLQUs1Q21vQyxFQUFpQixTQUF3QnRyQixHQUMzQyxJQUFJK1osRUFBTSxHQUVWLElBQUssSUFBSW9SLEtBQU1uckIsRUFDYitaLEdBQU96MkIsT0FBT2dJLEtBQUswVSxFQUFNbXJCLElBQUtoZ0MsS0FBSyxLQUFPLElBRTVDLE9BQU80dUIsRUFBSXdSLFFBb0JUQyxFQUFjLFNBQXFCQyxHQUVyQyxHQUFJQSxFQUFJQyxNQUFPLE9BQU9ELEVBQUlDLE1BSTFCLElBREEsSUFBSXBGLEVBQU9tRixFQUFJRSxjQUFjQyxZQUFZaG1DLE9BQ2hDaEQsRUFBSSxFQUFHQSxFQUFJMGpDLEVBQU0xakMsR0FBSyxFQUFHLENBQ2hDLElBQUk4b0MsRUFBUUQsRUFBSUUsY0FBY0MsWUFBWWhwQyxHQUUxQyxHQUFJOG9DLEVBQU1HLFlBQWNKLEVBQUssT0FBT0MsRUFJdEMsTUFBTSxJQUFJaEQsRUFBc0IsS0FJOUJvRCxFQUFpQixTQUF3QkosRUFBT0ssRUFBU3ZaLEdBRTNELElBQUt1WixFQUFTLE9BQU8sRUFFckIsSUFBSUMsRUFBV04sRUFBTU8sU0FBU3JtQyxPQUU5QixJQUVFOGxDLEVBQU1RLFdBQVdILEVBQVN2WixHQUFTd1osRUFBV3haLEVBQVF3WixHQUN0RCxNQUFPaFIsR0FFUCxPQUFPLEVBR1QsT0FBTyxHQWNMbVIsRUFBaUIsU0FBd0JoQixHQUMzQyxNQUFPLHlCQUEyQkEsRUFBSyxTQUlyQ2lCLEdBQWtCLFNBQXlCQyxFQUFPN1osR0FFcEQsSUFEQSxJQUFJOFosRUFBaUIsRUFDWjFwQyxFQUFJLEVBQUdBLEdBQUs0dkIsRUFBTzV2QixHQUFLLEVBQy9CMHBDLEdBQWtCRCxFQUFNenBDLEdBRzFCLE9BQU8wcEMsR0FvQ0xDLEdBQWdCLFNBQXVCckQsRUFBS2xwQixHQUM5QyxPQUFPLFNBQVV3c0IsR0FDZixJQUFJQyxFQUFReEIsSUFJWixNQUFPLFVBSEssQ0FBQ3dCLEdBQVMsVUFBWUEsRUFBUSxJQUFLdkUsRUFBVSxLQUFPb0QsRUFBZXRyQixHQUFTLElBQUswc0IsOEJBQXdDRixHQUVoSDFpQixPQUFPOFUsU0FBU3p6QixLQUFLLEtBQ1osSUFBTSs5QixJQUFRLGFBSzVDeUQsR0FBZ0IsU0FBdUJ6RCxFQUFLbHBCLEdBQzlDLE9BQU8sV0FDTCxJQUFJNHNCLEVBRUF4RixJQUFTd0YsRUFBUyxJQUFXMUUsR0FBV29ELEVBQWV0ckIsR0FBUTRzQixFQWhYakQsdUJBZ1gyRSxRQUFTQSxHQUVsR0gsRUFBUXhCLElBT1osT0FOSXdCLElBRUZyRixFQUFNcUYsTUFBUUEsR0FJVCxJQUFNSSxjQUFjLFFBQVN0RixFQUFTLEdBQUlILEVBQU8sQ0FBRTBGLHdCQUF5QixDQUFFQyxPQUFRN0QsVUFJN0Y4RCxHQUEyQixTQUFrQ0MsR0FDL0QsT0FBTyxXQUNMLE9BQU8zcEMsT0FBT2dJLEtBQUsyaEMsS0FxSG5CQyxHQUFlLFNBQXNCQyxFQUFnQmhDLEdBQ3ZELE9BQU9nQyxFQUFlQyxlQUFlakIsRUFBZWhCLEtBZ0dsRGtDLEdBQWdCLFNBQVNBLEVBQWNDLEVBQVVDLEdBQ25ELElBQUl2dEIsT0FBcUJyWCxJQUFiMmtDLEVBQXlCaHFDLE9BQU9ZLE9BQU8sTUFBUW9wQyxFQUN2REwsT0FBeUJ0a0MsSUFBZjRrQyxFQUEyQmpxQyxPQUFPWSxPQUFPLE1BQVFxcEMsRUFFM0RDLEVBQWUsU0FBc0JyQyxHQUN2QyxJQUFJc0MsRUFBT1IsRUFBUTlCLEdBQ25CLFlBQWF4aUMsSUFBVDhrQyxFQUNLQSxFQUdGUixFQUFROUIsR0FBTSxDQUFDLEtBZ0JwQmpDLEVBQU0sV0FDUixJQUFJblAsRUFBTSxHQUVWLElBQUssSUFBSW9SLEtBQU04QixFQUFTLENBQ3RCLElBQUlTLEVBQVdULEVBQVE5QixHQUFJLEdBQ3ZCdUMsSUFDRjNULEdBQU9vUyxFQUFlaEIsR0FBTXVDLEdBR2hDLE9BQU8zVCxHQTZCVCxNQWRVLENBQ1IvUixNQWJVLFdBQ1YsSUFBSTJsQixFQXZZUyxTQUFvQjN0QixHQUNuQyxJQUFJZ0ksRUFBUTFrQixPQUFPWSxPQUFPLE1BRTFCLElBQUssSUFBSWluQyxLQUFNbnJCLEVBQ2JnSSxFQUFNbWpCLEdBQU01RCxFQUFTLEdBQUl2bkIsRUFBTW1yQixJQUVqQyxPQUFPbmpCLEVBaVlZNGxCLENBQVc1dEIsR0FDeEI2dEIsRUFBZXZxQyxPQUFPWSxPQUFPLE1BR2pDLElBQUssSUFBSWluQyxLQUFNOEIsRUFDYlksRUFBYTFDLEdBQU0sQ0FBQzhCLEVBQVE5QixHQUFJLElBR2xDLE9BQU9rQyxFQUFjTSxFQUFZRSxJQUtqQzNFLElBQUtBLEVBQ0w0RSxPQUFRZCxHQUF5QkMsR0FDakM1QixhQUFjQSxFQUFhcnJCLEdBQzNCd3RCLGFBQWNBLEVBQ2RPLFlBM0NnQixTQUFxQjVDLEVBQUljLEVBQVU5b0MsR0FDdENxcUMsRUFBYXJDLEdBQ25CLElBQU1jLEVBQVM5Z0MsS0FBSyxLQUMzQisvQixFQUFhbHJCLEVBQU9tckIsRUFBSWhvQyxJQXlDeEI2cUMsWUF0Q2dCLFNBQXFCN0MsR0FDckMsSUFBSThDLEVBQVNoQixFQUFROUIsUUFDTnhpQyxJQUFYc2xDLElBQ0pBLEVBQU8sR0FBSyxHQUNaN0MsRUFBYXByQixFQUFPbXJCLEtBbUNwQitDLFFBQVEsRUFDUkMsU0FBVSxLQUNWQyxVQUFXekIsR0FBY3pELEVBQUtscEIsR0FDOUJxdUIsT0FBUTlCLEdBQWNyRCxFQUFLbHBCLEtBTTNCc3VCLEdBQVUsU0FBaUIzVixFQUFRNFYsRUFBT0MsRUFBYUMsRUFBY0MsR0FDdkUsR0FBSXJHLElBQWVtRyxFQUFhLENBQzlCLElBQUlHLEVBelZXLFNBQXNCaFcsRUFBUTRWLEVBQU9FLEdBQ3RELElBQUl0QixFQUFpQnlCLFNBQ2pCalcsRUFBUXdVLEVBQWlCeFUsRUFBT2dULGNBQXVCNEMsSUFBT3BCLEVBQWlCb0IsRUFBTTVDLGVBRXpGLElBQUlnRCxFQUFLeEIsRUFBZU4sY0FBYyxTQUN0QzhCLEVBQUdFLGFBQWEzRyxFQUFTLElBQ3pCeUcsRUFBR0UsYUF2VWlCLHNCQXVVYSxTQUVqQyxJQUFJcEMsRUFBUXhCLElBUVosR0FQSXdCLEdBQ0ZrQyxFQUFHRSxhQUFhLFFBQVNwQyxHQUkzQmtDLEVBQUdHLFlBQVkzQixFQUFlQyxlQUFlLEtBRXpDelUsSUFBVzRWLEVBRWI1VixFQUFPbVcsWUFBWUgsT0FDZCxDQUNMLElBQUtKLElBQVU1VixJQUFXNFYsRUFBTVEsV0FDOUIsTUFBTSxJQUFJckcsRUFBc0IsR0FJbEM2RixFQUFNUSxXQUFXTixhQUFhRSxFQUFJRixFQUFlRixFQUFRQSxFQUFNUyxhQUdqRSxPQUFPTCxFQTZUSU0sQ0FBYXRXLEVBQVE0VixFQUFPRSxHQUVyQyxPQUFJbkcsRUFwS2EsU0FBd0JxRyxFQUFJRCxHQUMvQyxJQUFJMXVCLEVBQVExYyxPQUFPWSxPQUFPLE1BQ3RCK29DLEVBQVUzcEMsT0FBT1ksT0FBTyxNQUV4QmdyQyxPQUFxQ3ZtQyxJQUFyQitsQyxFQUdoQlMsR0FBb0IsRUFFcEIzQixFQUFlLFNBQXNCckMsR0FDdkMsSUFBSXNDLEVBQU9SLEVBQVE5QixHQUNuQixZQUFheGlDLElBQVQ4a0MsRUFDS0EsR0FHVFIsRUFBUTlCLEdBQU0rQixHQUFheUIsRUFBR2hELGNBQWVSLEdBQzdDd0QsRUFBR0csWUFBWTdCLEVBQVE5QixJQUN2Qm5yQixFQUFNbXJCLEdBQU03bkMsT0FBT1ksT0FBTyxNQUVuQitvQyxFQUFROUIsS0E2Q2JqQyxFQUFNLFdBQ1IsSUFBSW5QLEVBQU0sR0FHVixJQUFLLElBQUlvUixLQUFNOEIsRUFDYmxULEdBQU9rVCxFQUFROUIsR0FBSTFyQixLQUdyQixPQUFPc2EsR0FHVCxNQUFPLENBQ0wvUixNQUFPLFdBQ0wsTUFBTSxJQUFJMGdCLEVBQXNCLElBR2xDUSxJQUFLQSxFQUNMNEUsT0FBUWQsR0FBeUJDLEdBQ2pDNUIsYUFBY0EsRUFBYXJyQixHQUMzQnd0QixhQUFjQSxFQUNkTyxZQTlEZ0IsU0FBcUI1QyxFQUFJYyxFQUFVOW9DLEdBS25ELElBSkEsSUFBSThxQyxFQUFTVCxFQUFhckMsR0FDdEJpRSxFQUFjLEdBQ2RDLEVBQWVwRCxFQUFTcm1DLE9BRW5CaEQsRUFBSSxFQUFHQSxFQUFJeXNDLEVBQWN6c0MsR0FBSyxFQUFHLENBQ3hDLElBQUl3bkMsRUFBTzZCLEVBQVNycEMsR0FDaEIwc0MsRUFBZ0JKLEVBQ3BCLEdBQUlJLElBQThDLElBQTdCbEYsRUFBS3IxQixRQUFRLFdBQ2hDcTZCLEVBQVk3b0MsS0FBSzZqQyxPQUNaLENBQ0xrRixHQUFnQixFQUNoQixJQUFJam9CLEVBQVl6a0IsSUFBTXlzQyxFQUFlLEVBQUksR0FBSyxJQUM5Q3BCLEVBQU9zQixXQUFXLEdBQUtuRixFQUFPL2lCLElBSWxDNmpCLEVBQWFsckIsRUFBT21yQixFQUFJaG9DLEdBRXBCK3JDLEdBQWlCRSxFQUFZeHBDLE9BQVMsSUFDeEN1cEMsR0FBb0IsRUFFcEJULElBQW1CWCxZQUFZNUMsRUFBSyxVQUFXaUUsS0F5Q2pEcEIsWUFyQ2dCLFNBQXFCN0MsR0FDckMsSUFBSThDLEVBQVNoQixFQUFROUIsR0FDckIsUUFBZXhpQyxJQUFYc2xDLEVBQUosQ0FHQSxJQUFJdUIsRUFBWXRDLEdBQWF5QixFQUFHaEQsY0FBZVIsR0FDL0N3RCxFQUFHYyxhQUFhRCxFQUFXdkIsR0FDM0JoQixFQUFROUIsR0FBTXFFLEVBQ2RwRSxFQUFhcHJCLEVBQU9tckIsR0FFaEIrRCxHQUFpQkMsR0FFbkJULElBQW1CVixZQUFZN0MsRUFBSyxhQTBCdEMrQyxRQUFRLEVBQ1JDLFNBQVVRLEVBQ1ZQLFVBQVd6QixHQUFjekQsRUFBS2xwQixHQUM5QnF1QixPQUFROUIsR0FBY3JELEVBQUtscEIsSUE0RWxCMHZCLENBQWVmLEVBQUlELEdBelJaLFNBQXVCQyxFQUFJRCxHQUM3QyxJQUFJMXVCLEVBQVExYyxPQUFPWSxPQUFPLE1BQ3RCK29DLEVBQVUzcEMsT0FBT1ksT0FBTyxNQUN4Qm1vQyxFQUFRLEdBRVI2QyxPQUFxQ3ZtQyxJQUFyQitsQyxFQUVoQlMsR0FBb0IsRUFFcEIzQixFQUFlLFNBQXNCckMsR0FDdkMsSUFBSXNDLEVBQU9SLEVBQVE5QixHQUNuQixZQUFheGlDLElBQVQ4a0MsRUFDS0EsR0FHVFIsRUFBUTlCLEdBQU1rQixFQUFNem1DLE9BQ3BCeW1DLEVBQU05bEMsS0FBSyxHQUNYNmtDLEVBQWFwckIsRUFBT21yQixHQUViOEIsRUFBUTlCLEtBb0RiakMsRUFBTSxXQUNSLElBQ0krQyxFQURlVCxFQUFZbUQsR0FDSDFDLFNBRXhCbFMsRUFBTSxHQUdWLElBQUssSUFBSW9SLEtBQU04QixFQUFTLENBQ3RCbFQsR0FBT29TLEVBQWVoQixHQUl0QixJQUhBLElBQUk4QyxFQUFTaEIsRUFBUTlCLEdBQ2pCd0UsRUFBTXZELEdBQWdCQyxFQUFPNEIsR0FFeEJyckMsRUFBSStzQyxFQURGdEQsRUFBTTRCLEdBQ1FyckMsRUFBSStzQyxFQUFLL3NDLEdBQUssRUFBRyxDQUN4QyxJQUFJd25DLEVBQU82QixFQUFTcnBDLFFBQ1ArRixJQUFUeWhDLElBQ0ZyUSxHQUFPcVEsRUFBS3dGLFVBS2xCLE9BQU83VixHQUdULE1BQU8sQ0FDTC9SLE1BQU8sV0FDTCxNQUFNLElBQUkwZ0IsRUFBc0IsSUFHbENRLElBQUtBLEVBQ0w0RSxPQUFRZCxHQUF5QkMsR0FDakM1QixhQUFjQSxFQUFhcnJCLEdBQzNCd3RCLGFBQWNBLEVBQ2RPLFlBakZnQixTQUFxQjVDLEVBQUljLEVBQVU5b0MsR0FTbkQsSUFSQSxJQUFJOHFDLEVBQVNULEVBQWFyQyxHQUN0Qk8sRUFBUUYsRUFBWW1ELEdBQ3BCa0IsRUFBY3pELEdBQWdCQyxFQUFPNEIsR0FFckM2QixFQUFnQixFQUNoQlYsRUFBYyxHQUNkQyxFQUFlcEQsRUFBU3JtQyxPQUVuQmhELEVBQUksRUFBR0EsRUFBSXlzQyxFQUFjenNDLEdBQUssRUFBRyxDQUN4QyxJQUFJbXBDLEVBQVVFLEVBQVNycEMsR0FDbkIwc0MsRUFBZ0JKLEVBQ2hCSSxJQUFpRCxJQUFoQ3ZELEVBQVFoM0IsUUFBUSxXQUNuQ3E2QixFQUFZN29DLEtBQUt3bEMsR0FDUkQsRUFBZUosRUFBT0ssRUFBUzhELEVBQWNDLEtBQ3REUixHQUFnQixFQUNoQlEsR0FBaUIsR0FJakJaLEdBQWlCRSxFQUFZeHBDLE9BQVMsSUFDeEN1cEMsR0FBb0IsRUFFcEJULElBQW1CWCxZQUFZNUMsRUFBSyxVQUFXaUUsSUFHakQvQyxFQUFNNEIsSUFBVzZCLEVBQ2pCNUUsRUFBYWxyQixFQUFPbXJCLEVBQUlob0MsSUF1RHhCNnFDLFlBcERnQixTQUFxQjdDLEdBQ3JDLElBQUk4QyxFQUFTaEIsRUFBUTlCLEdBQ3JCLFFBQWV4aUMsSUFBWHNsQyxJQUVtQixJQUFuQlUsRUFBR29CLFlBQVAsQ0FFQSxJQUFJekosRUFBTytGLEVBQU00QixJQXRKSCxTQUFxQnZDLEVBQU9zRSxFQUFjMUosR0FFMUQsSUFEQSxJQUFJMkosRUFBYUQsRUFBZTFKLEVBQ3ZCMWpDLEVBQUlvdEMsRUFBY3B0QyxFQUFJcXRDLEVBQVlydEMsR0FBSyxFQUM5QzhvQyxFQUFNd0UsV0FBV3R0QyxHQXNKakJ1dEMsQ0FGWTNFLEVBQVltRCxHQUNMdkMsR0FBZ0JDLEVBQU80QixHQUFVLEVBQ25CM0gsR0FDakMrRixFQUFNNEIsR0FBVSxFQUNoQjdDLEVBQWFwckIsRUFBT21yQixHQUVoQitELEdBQWlCQyxHQUVuQlQsSUFBbUJWLFlBQVk3QyxFQUFLLGFBc0N0QytDLFFBQVEsRUFDUkMsU0FBVVEsRUFDVlAsVUFBV3pCLEdBQWN6RCxFQUFLbHBCLEdBQzlCcXVCLE9BQVE5QixHQUFjckQsRUFBS2xwQixJQStLbEJvd0IsQ0FBY3pCLEVBQUlELEdBSTdCLE9BQU9yQixNQXlCTGdELEdBQWMsTUFHZEMsUUFBVyxFQUdiQSxHQUZFakksRUFFU0MsRUFBaUIsR0FBSyxLQUdyQixFQUdkLElBQUlpSSxHQUFpQixFQUNqQkMsUUFBUyxFQUVUQyxHQUFhLFdBa0JmLFNBQVNBLElBQ1AsSUFBSWhYLEVBQVF2d0IsS0FFUnl2QixFQUFTM3pCLFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsR0FBbUJBLFVBQVUsR0FBS3FqQyxFQUFhdUcsU0FBUzhCLEtBQU8sS0FDMUdsQyxFQUFjeHBDLFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsSUFBbUJBLFVBQVUsR0FDakZraUMsRUFBZWgrQixLQUFNdW5DLEdBRXJCdm5DLEtBQUt3bEMsaUJBQW1CLFdBQ3RCLElBQUlpQyxFQUFnQmxYLEVBQU1rWCxjQUUxQixRQUFzQmhvQyxJQUFsQmdvQyxFQUNGLE9BQU9BLEVBR1QsSUFBSUMsRUFBV25YLEVBQU1vWCxLQUFLLEdBRzFCLE9BQU9wWCxFQUFNa1gsY0FBZ0JyQyxHQUFRN1UsRUFBTWQsT0FBUWlZLEVBQVdBLEVBQVN6QyxTQUFXLEtBQU0xVSxFQUFNK1UsYUFGM0UsSUFLckIrQixJQUFrQixFQUNsQnJuQyxLQUFLaWlDLEdBQUtvRixHQUNWcm5DLEtBQUtzbEMsWUFBY0EsRUFDbkJ0bEMsS0FBS3l2QixPQUFTNlYsRUFBYyxLQUFPN1YsRUFDbkN6dkIsS0FBSzRuQyxPQUFTLEdBQ2Q1bkMsS0FBSzZuQyxTQUFXLEdBQ2hCN25DLEtBQUs4bkMsZ0JBQWtCLEdBQ3ZCOW5DLEtBQUsrbkMsc0JBQXdCLEdBQzdCL25DLEtBQUsybkMsS0FBTyxHQUNaM25DLEtBQUtnb0MsU0FBVyxFQUNoQmhvQyxLQUFLaW9DLE9BQVMsR0F3UWhCLE9BbFFBVixFQUFXanNDLFVBQVU0c0MsVUFBWSxXQUMvQixJQUFLL0ksR0FBY24vQixLQUFLc2xDLFlBQWEsT0FBT3RsQyxLQUU1QyxJQUFJbW9DLEVBQU0sR0FDTkMsRUFBWSxHQUNaQyxHQUFhLEVBR2JDLEVBQVE1QyxTQUFTNkMsaUJBQWlCLFNBQVd2SixFQUFYLGtDQUVsQ3dKLEVBQVlGLEVBQU01ckMsT0FHdEIsSUFBSzhyQyxFQUFXLE9BQU94b0MsS0FFdkIsSUFBSyxJQUFJdEcsRUFBSSxFQUFHQSxFQUFJOHVDLEVBQVc5dUMsR0FBSyxFQUFHLENBQ3JDLElBQUkrckMsRUFBSzZDLEVBQU01dUMsR0FHVjJ1QyxJQUFZQSxJQUFlNUMsRUFBR2dELGFBbHhCcEIseUJBdXhCZixJQUZBLElBRWdCeHVDLEVBRlp5dUMsR0FBV2pELEVBQUdnRCxhQUFhekosSUFBWSxJQUFJcUQsT0FBTzd6QixNQUFNMjRCLElBQ3hEd0IsRUFBY0QsRUFBUWhzQyxPQUNqQnFhLEVBQUksRUFBU0EsRUFBSTR4QixFQUFhNXhCLEdBQUssRUFDMUM5YyxFQUFPeXVDLEVBQVEzeEIsR0FFZi9XLEtBQUs4bkMsZ0JBQWdCN3RDLElBQVEsRUFJL0JtdUMsRUFBVS9xQyxLQUFLeEIsTUFBTXVzQyxFQUFXdEksRUFBYTJGLEVBQUdtRCxjQUdoRFQsRUFBSTlxQyxLQUFLb29DLEdBSVgsSUFBSW9ELEVBQWdCVCxFQUFVMXJDLE9BQzlCLElBQUttc0MsRUFBZSxPQUFPN29DLEtBRzNCLElBQUl1aUMsRUFBTXZpQyxLQUFLb2xDLFFBQVEsT0FySVgsU0FBbUI3QyxFQUFLNEYsRUFBS0MsR0FFM0MsSUFBSyxJQUFJMXVDLEVBQUksRUFBR3VHLEVBQU1tb0MsRUFBVTFyQyxPQUFRaEQsRUFBSXVHLEVBQUt2RyxHQUFLLEVBQUcsQ0FDdkQsSUFBSW92QyxFQUFlVixFQUFVMXVDLEdBQ3pCd21DLEVBQWM0SSxFQUFhNUksWUFDM0JHLEVBQWF5SSxFQUFhekksV0FFMUIwQyxFQUFXdEIsRUFBYXBCLEdBQzVCa0MsRUFBSXNDLFlBQVkzRSxFQUFhNkMsR0FJL0IsSUFBSyxJQUFJcGlDLEVBQUssRUFBR2cvQixFQUFPd0ksRUFBSXpyQyxPQUFRaUUsRUFBS2cvQixFQUFNaC9CLEdBQU0sRUFBRyxDQUN0RCxJQUFJOGtDLEVBQUswQyxFQUFJeG5DLEdBQ1Q4a0MsRUFBR0ksWUFDTEosRUFBR0ksV0FBV2tELFlBQVl0RCxJQXdINUJ5QyxDQUFVM0YsRUFBSzRGLEVBQUtDLEdBR3BCcG9DLEtBQUtnb0MsU0FBVzdrQyxLQUFLSSxJQUFJLEVBQUc2akMsR0FBV3lCLEdBQ3ZDN29DLEtBQUsybkMsS0FBS3RxQyxLQUFLa2xDLEdBR2YsSUFBSyxJQUFJeUcsRUFBSyxFQUFHQSxFQUFLSCxFQUFlRyxHQUFNLEVBQ3pDaHBDLEtBQUs0bkMsT0FBT1EsRUFBVVksR0FBSTlJLGFBQWVxQyxFQUczQyxPQUFPdmlDLE1BU1R1bkMsRUFBVzBCLE1BQVEsV0FDakIsSUFBSTNELEVBQWN4cEMsVUFBVVksT0FBUyxRQUFzQitDLElBQWpCM0QsVUFBVSxJQUFtQkEsVUFBVSxHQUVqRndyQyxHQUFTLElBQUlDLE9BQVc5bkMsRUFBVzZsQyxHQUFhNEMsYUFPbERYLEVBQVdqc0MsVUFBVXdqQixNQUFRLFdBQzNCLElBQUkwakIsRUFBUSxJQUFJK0UsRUFBV3ZuQyxLQUFLeXZCLE9BQVF6dkIsS0FBS3NsQyxhQXNCN0MsT0FuQkF0bEMsS0FBS2lvQyxPQUFPNXFDLEtBQUttbEMsR0FHakJBLEVBQU1tRixLQUFPM25DLEtBQUsybkMsS0FBSzNxQyxLQUFJLFNBQVV1bEMsR0FLbkMsSUFKQSxJQUFJMkcsRUFBTTNHLEVBQUlxQyxTQUNWdUUsRUFBUzVHLEVBQUl6akIsUUFHUnBsQixFQUFJLEVBQUdBLEVBQUl3dkMsRUFBSXhzQyxPQUFRaEQsR0FBSyxFQUNuQzhvQyxFQUFNb0YsT0FBT3NCLEVBQUl4dkMsSUFBTXl2QyxFQUd6QixPQUFPQSxLQUlUM0csRUFBTXNGLGdCQUFrQnpKLEVBQVMsR0FBSXIrQixLQUFLOG5DLGlCQUMxQ3RGLEVBQU1xRixTQUFXeEosRUFBUyxHQUFJcitCLEtBQUs2bkMsVUFFNUJyRixHQU1UK0UsRUFBV2pzQyxVQUFVOHRDLFlBQWMsV0FDakNwcEMsS0FBS2dvQyxTQUFXLEVBRWhCaG9DLEtBQUsybkMsS0FBSzl3QixTQUFRLFNBQVUwckIsR0FFMUJBLEVBQUl5QyxRQUFTLE1BSWpCdUMsRUFBV2pzQyxVQUFVOHBDLFFBQVUsU0FBb0I3QyxHQUNqRCxJQUFJOEcsRUFBUzlHLEVBQU1BLEVBQUkwQyxTQUFXLEtBR2xDLE9BQU9HLEdBQVFwbEMsS0FBS3l2QixPQUFRNFosRUFBUXJwQyxLQUFLc2xDLGFBRnRCLEVBRWlEdGxDLEtBQUt3bEMsbUJBSTNFK0IsRUFBV2pzQyxVQUFVZ3VDLFlBQWMsU0FBcUJySCxHQUV0RCxJQUFJc0MsRUFBT3ZrQyxLQUFLNG5DLE9BQU8zRixHQUN2QixRQUFheGlDLElBQVQ4a0MsSUFBdUJBLEVBQUtTLE9BQzlCLE9BQU9ULEVBR1QsSUFBSWhDLEVBQU12aUMsS0FBSzJuQyxLQUFLM25DLEtBQUsybkMsS0FBS2pyQyxPQUFTLEdBV3ZDLE9BUkFzRCxLQUFLZ29DLFVBQVksRUFFSyxJQUFsQmhvQyxLQUFLZ29DLFdBQ1Bob0MsS0FBS2dvQyxTQUFXWixHQUNoQjdFLEVBQU12aUMsS0FBS29sQyxRQUFRN0MsR0FDbkJ2aUMsS0FBSzJuQyxLQUFLdHFDLEtBQUtrbEMsSUFHVnZpQyxLQUFLNG5DLE9BQU8zRixHQUFNTSxHQU0zQmdGLEVBQVdqc0MsVUFBVWl1QyxNQUFRLFNBQWV0SCxHQUMxQyxZQUEyQnhpQyxJQUFwQk8sS0FBSzRuQyxPQUFPM0YsSUFNckJzRixFQUFXanNDLFVBQVU2bUMsYUFBZSxTQUFzQkYsRUFBSWhvQyxHQUU1RCxRQUF1Q3dGLElBQW5DTyxLQUFLK25DLHNCQUFzQjlGLElBQXFCamlDLEtBQUs4bkMsZ0JBQWdCN3RDLEdBQ3ZFLE9BQU8sRUFHVCxJQUFJc29DLEVBQU12aUMsS0FBSzRuQyxPQUFPM0YsR0FDdEIsWUFBZXhpQyxJQUFSOGlDLEdBQXFCQSxFQUFJSixhQUFhRixFQUFJaG9DLElBTW5Ec3RDLEVBQVdqc0MsVUFBVWt1QyxlQUFpQixTQUF3QnZILEVBQUljLEdBRWhFLFFBQXdCdGpDLElBQXBCTyxLQUFLNG5DLE9BQU8zRixHQUFoQixDQUlBLElBRkEsSUFBSWdHLEVBQVNqb0MsS0FBS2lvQyxPQUVUdnVDLEVBQUksRUFBR0EsRUFBSXV1QyxFQUFPdnJDLE9BQVFoRCxHQUFLLEVBQ3RDdXVDLEVBQU92dUMsR0FBRzh2QyxlQUFldkgsRUFBSWMsR0FHL0IvaUMsS0FBS3NwQyxZQUFZckgsR0FBSXFDLGFBQWFyQyxHQUNsQ2ppQyxLQUFLNm5DLFNBQVM1RixHQUFNYyxJQU10QndFLEVBQVdqc0MsVUFBVW11QyxPQUFTLFNBQWdCeEgsRUFBSWMsRUFBVTlvQyxHQUkxRCxJQUhBLElBQUlndUMsRUFBU2pvQyxLQUFLaW9DLE9BR1R2dUMsRUFBSSxFQUFHQSxFQUFJdXVDLEVBQU92ckMsT0FBUWhELEdBQUssRUFDdEN1dUMsRUFBT3Z1QyxHQUFHK3ZDLE9BQU94SCxFQUFJYyxFQUFVOW9DLEdBR2pDLElBQUlzb0MsRUFBTXZpQyxLQUFLc3BDLFlBQVlySCxHQUczQixRQUEwQnhpQyxJQUF0Qk8sS0FBSzZuQyxTQUFTNUYsR0FBbUIsQ0FJbkMsSUFBSU4sRUFBUTNoQyxLQUFLNm5DLFNBQVM1RixHQUFJM3dCLE9BQU95eEIsR0FDckNSLEVBQUlzQyxZQUFZNUMsRUFBSU4sRUFBTzFuQyxHQUUzQitGLEtBQUs2bkMsU0FBUzVGLFFBQU14aUMsT0FFcEI4aUMsRUFBSXNDLFlBQVk1QyxFQUFJYyxFQUFVOW9DLElBT2xDc3RDLEVBQVdqc0MsVUFBVW91QyxPQUFTLFNBQWdCekgsR0FDNUMsSUFBSU0sRUFBTXZpQyxLQUFLNG5DLE9BQU8zRixHQUN0QixRQUFZeGlDLElBQVI4aUMsRUFBSixDQUlBLElBRkEsSUFBSTBGLEVBQVNqb0MsS0FBS2lvQyxPQUVUdnVDLEVBQUksRUFBR0EsRUFBSXV1QyxFQUFPdnJDLE9BQVFoRCxHQUFLLEVBQ3RDdXVDLEVBQU92dUMsR0FBR2d3QyxPQUFPekgsR0FJbkJNLEVBQUl1QyxZQUFZN0MsR0FHaEJqaUMsS0FBSytuQyxzQkFBc0I5RixJQUFNLEVBR2pDamlDLEtBQUs2bkMsU0FBUzVGLFFBQU14aUMsSUFHdEI4bkMsRUFBV2pzQyxVQUFVNnBDLE9BQVMsV0FDNUIsT0FBT25sQyxLQUFLMm5DLEtBQUszcUMsS0FBSSxTQUFVdWxDLEdBQzdCLE9BQU9BLEVBQUk0QyxZQUNWbGpDLEtBQUssS0FHVnNsQyxFQUFXanNDLFVBQVVxdUMsZ0JBQWtCLFdBQ3JDLElBQUkxSCxFQUFLamlDLEtBQUtpaUMsR0FHZCxPQUFPamlDLEtBQUsybkMsS0FBSzNxQyxLQUFJLFNBQVV1bEMsRUFBSzdvQyxHQUNsQyxJQUFJdUIsRUFBTSxNQUFRZ25DLEVBQUssSUFBTXZvQyxFQUM3QixPQUFPLHVCQUFhNm9DLEVBQUkyQyxZQUFhLENBQUVqcUMsSUFBS0EsUUFJaERnakMsRUFBWXNKLEVBQVksS0FBTSxDQUFDLENBQzdCdHNDLElBQUssU0FDTFYsSUFBSyxXQUNILE9BQU8rc0MsS0FBV0EsSUFBUyxJQUFJQyxHQUFhVyxlQUs3QyxDQUNEanRDLElBQUssV0FDTFYsSUFBSyxXQUNILE9BQU9ndEMsRUFBV0QsV0FHZkMsRUF4VFEsR0E2VGJxQyxHQUFZLFdBQ2QsU0FBU0EsRUFBVTN2QyxFQUFNMG5DLEdBQ3ZCLElBQUlwUixFQUFRdndCLEtBRVpnK0IsRUFBZWgrQixLQUFNNHBDLEdBRXJCNXBDLEtBQUt5cEMsT0FBUyxTQUFVSSxHQUNqQkEsRUFBVzFILGFBQWE1UixFQUFNMFIsR0FBSTFSLEVBQU10MkIsT0FDM0M0dkMsRUFBV0osT0FBT2xaLEVBQU0wUixHQUFJMVIsRUFBTW9SLE1BQU9wUixFQUFNdDJCLE9BSW5EK0YsS0FBSzlELFNBQVcsV0FDZCxNQUFNLElBQUlzakMsRUFBc0IsR0FBSWhmLE9BQU8rUCxFQUFNdDJCLFFBR25EK0YsS0FBSy9GLEtBQU9BLEVBQ1orRixLQUFLMmhDLE1BQVFBLEVBRWIzaEMsS0FBS2lpQyxHQUFLLGdCQUFrQmhvQyxFQU85QixPQUpBMnZDLEVBQVV0dUMsVUFBVXd1QyxRQUFVLFdBQzVCLE9BQU85cEMsS0FBSy9GLE1BR1AydkMsRUExQk8sR0FvQ1pHLEdBQW1CLFdBQ25CQyxHQUFZLE9Ba0JoQixTQUFTQyxHQUFtQnJ4QixHQUMxQixPQUFPQSxFQUFPcFUsUUFBUXVsQyxHQUFrQixPQUFPOWhDLGNBQWN6RCxRQUFRd2xDLEdBQVcsUUF5QmxGLElBQUlFLEdBQVksU0FBbUJDLEdBQ2pDLE9BQU9BLFVBQW1ELElBQVZBLEdBQTZCLEtBQVZBLEdBR2pFQyxHQUFnQixTQUFTQSxFQUFjNXRDLEVBQUs2dEMsR0FDOUMsSUFBSTFJLEVBQVEsR0FtQlosT0FsQld2bkMsT0FBT2dJLEtBQUs1RixHQUVsQnFhLFNBQVEsU0FBVTViLEdBQ3JCLElBQUtpdkMsR0FBVTF0QyxFQUFJdkIsSUFBTyxDQUN4QixHQUFJd2pDLEVBQWNqaUMsRUFBSXZCLElBR3BCLE9BRkEwbUMsRUFBTXRrQyxLQUFLeEIsTUFBTThsQyxFQUFPeUksRUFBYzV0QyxFQUFJdkIsR0FBTUEsSUFFekMwbUMsRUFDRixHQUFJcC9CLEVBQVcvRixFQUFJdkIsSUFHeEIsT0FGQTBtQyxFQUFNdGtDLEtBQUs0c0MsR0FBbUJodkMsR0FBTyxJQUFLdUIsRUFBSXZCLEdBQU0sS0FFN0MwbUMsRUFFVEEsRUFBTXRrQyxLQUFLNHNDLEdBQW1CaHZDLEdBQU8sTUF0Q2xCaEIsRUFzQ3lDZ0IsR0FuQ25ELE9BSGdCTixFQXNDd0M2QixFQUFJdkIsS0FuQ25DLGtCQUFWTixHQUFpQyxLQUFWQSxFQUMxQyxHQUdZLGlCQUFWQSxHQUFnQyxJQUFWQSxHQUFpQlYsS0FBUSxJQUluRHVtQixPQUFPN2xCLEdBQU8wbkMsT0FIWjFuQyxFQUFRLE1BOEJnRSxNQXRDbkYsSUFBeUJWLEVBQU1VLEVBd0MzQixPQUFPZ25DLEtBR0YwSSxFQUFVLENBQUNBLEVBQVUsTUFBTS80QixPQUFPcXdCLEVBQU8sQ0FBQyxNQUFRQSxHQUczRCxTQUFTMkksR0FBUUgsRUFBT0ksRUFBa0JWLEdBQ3hDLEdBQUk1dEMsTUFBTUYsUUFBUW91QyxHQUFRLENBR3hCLElBRkEsSUFFb0N6d0IsRUFGaEM4d0IsRUFBVSxHQUVMOXdDLEVBQUksRUFBR3VHLEVBQU1rcUMsRUFBTXp0QyxPQUFnQmhELEVBQUl1RyxFQUFLdkcsR0FBSyxFQUd6QyxRQUZmZ2dCLEVBQVM0d0IsR0FBUUgsRUFBTXp3QyxHQUFJNndDLEVBQWtCVixNQUVONXRDLE1BQU1GLFFBQVEyZCxHQUFTOHdCLEVBQVFudEMsS0FBS3hCLE1BQU0ydUMsRUFBUzl3QixHQUFhOHdCLEVBQVFudEMsS0FBS3FjLElBR3RILE9BQU84d0IsRUFHVCxPQUFJTixHQUFVQyxHQUNMLEtBSUxyTCxFQUFrQnFMLEdBQ2IsSUFBTUEsRUFBTXBMLGtCQUlqQng4QixFQUFXNG5DLEdBdnBDUSxtQkFESW5sQyxFQXlwQ0RtbEMsSUF4cENhbmxDLEVBQUsxSixXQUFhMEosRUFBSzFKLFVBQVVtdkMsbUJBd3BDcENGLEVBU3BCSixFQURMRyxHQVBPSCxFQUFNSSxHQU9JQSxFQUFrQlYsR0FJMUNNLGFBQWlCUCxHQUNmQyxHQUNGTSxFQUFNVixPQUFPSSxHQUNOTSxFQUFNTCxXQUNESyxFQUlUMUwsRUFBYzBMLEdBQVNDLEdBQWNELEdBQVNBLEVBQU1qdUMsV0FuQnZELElBMXBDdUI4SSxFQWtyQzdCLFNBQVNnN0IsR0FBSTBLLEdBQ1gsSUFBSyxJQUFJL0ssRUFBTzdqQyxVQUFVWSxPQUFRcWhDLEVBQWlCOWhDLE1BQU0wakMsRUFBTyxFQUFJQSxFQUFPLEVBQUksR0FBSUMsRUFBTyxFQUFHQSxFQUFPRCxFQUFNQyxJQUN4RzdCLEVBQWU2QixFQUFPLEdBQUs5akMsVUFBVThqQyxHQUd2QyxPQUFJcjlCLEVBQVdtb0MsSUFBV2pNLEVBQWNpTSxHQUUvQkosR0FBUXpNLEVBQVdhLEVBQWEsQ0FBQ2dNLEdBQVFwNUIsT0FBT3lzQixLQUlsRHVNLEdBQVF6TSxFQUFXNk0sRUFBUTNNLElBbUNwQyxTQUFTNE0sR0FBVzV3QyxHQUNsQixJQUFLLElBQXdDdUMsRUFBcENpSixFQUFlLEVBQVh4TCxFQUFFMkMsT0FBWUwsRUFBUSxFQUFKa0osRUFBT3ZMLEVBQUksRUFBTXVMLEdBQUssR0FDNkVqSixFQUFJLFlBQWtCLE9BQXRKQSxFQUFzQixJQUFsQnZDLEVBQUU2d0MsV0FBVzV3QyxJQUFnQyxJQUFwQkQsRUFBRTZ3QyxhQUFhNXdDLEtBQWEsR0FBeUIsSUFBcEJELEVBQUU2d0MsYUFBYTV3QyxLQUFhLElBQTBCLElBQXBCRCxFQUFFNndDLGFBQWE1d0MsS0FBYSxPQUFxQyxZQUFjc0MsSUFBTSxJQUFNLFFBQVUsSUFBOEZELEVBQUksWUFBa0IsTUFBSkEsS0FBZSxZQUFjQSxJQUFNLElBQU0sUUFBVSxLQUEvSUMsRUFBSSxZQUFrQixPQUFyQ0EsR0FBS0EsSUFBTSxPQUFxQyxZQUFjQSxJQUFNLElBQU0sUUFBVSxLQUFtRmlKLEdBQUssSUFBS3ZMLEVBRTdYLE9BQVF1TCxHQUNOLEtBQUssRUFDSGxKLElBQTRCLElBQXRCdEMsRUFBRTZ3QyxXQUFXNXdDLEVBQUksS0FBYSxHQUN0QyxLQUFLLEVBQ0hxQyxJQUE0QixJQUF0QnRDLEVBQUU2d0MsV0FBVzV3QyxFQUFJLEtBQWEsRUFDdEMsS0FBSyxFQUN5QnFDLEVBQUksWUFBa0IsT0FBbERBLEdBQXVCLElBQWxCdEMsRUFBRTZ3QyxXQUFXNXdDLE9BQTJDLFlBQWNxQyxJQUFNLElBQU0sUUFBVSxJQUlyRyxRQURBQSxFQUFJLFlBQWtCLE9BRHRCQSxHQUFLQSxJQUFNLE9BQ3NCLFlBQWNBLElBQU0sSUFBTSxRQUFVLEtBQ3pEQSxJQUFNLE1BQVEsRUFRNUIsSUFHSXd1QyxHQUFvQixTQUEyQm5MLEdBQ2pELE9BQU9sZixPQUFPc3FCLGFBQWFwTCxHQUFRQSxFQUFPLEdBQUssR0FBSyxNQUl0RCxTQUFTcUwsR0FBdUJyTCxHQUM5QixJQUFJemxDLEVBQU8sR0FDUGdVLE9BQUksRUFHUixJQUFLQSxFQUFJeXhCLEVBQU16eEIsRUFiQyxHQWFnQkEsRUFBSTlLLEtBQUswSCxNQUFNb0QsRUFiL0IsSUFjZGhVLEVBQU80d0MsR0FBa0I1OEIsRUFkWCxJQWM4QmhVLEVBRzlDLE9BQU80d0MsR0FBa0I1OEIsRUFqQlQsSUFpQjRCaFUsRUFnQjlDLFNBQVMrd0MsR0FBY3JKLEVBQU9zSixHQUM1QixJQUFLLElBQUl2eEMsRUFBSSxFQUFHQSxFQUFJaW9DLEVBQU1qbEMsT0FBUWhELEdBQUssRUFBRyxDQUN4QyxJQUFJd25DLEVBQU9TLEVBQU1qb0MsR0FHakIsR0FBSXVDLE1BQU1GLFFBQVFtbEMsS0FBVThKLEdBQWM5SixFQUFNK0osR0FDOUMsT0FBTyxFQUNGLEdBQUkxb0MsRUFBVzIrQixLQUFVcEMsRUFBa0JvQyxHQUdoRCxPQUFPLEVBSVgsT0FBSStKLEVBQU10dkMsTUFBSyxTQUFVc1MsR0FDdkIsT0FBTzFMLEVBQVcwTCxJQTFCdEIsU0FBOEJ6UixHQUU1QixJQUFLLElBQUl2QixLQUFPdUIsRUFDZCxHQUFJK0YsRUFBVy9GLEVBQUl2QixJQUNqQixPQUFPLEVBSVgsT0FBTyxFQWtCbUJpd0MsQ0FBcUJqOUIsTUFTakQsSUEySElrOUIsR0EzSEFDLEdBQVMsU0FBZ0J2YSxHQUMzQixPQUFPa2EsR0FBdUJKLEdBQVc5WixLQVF2Q3dhLEdBQWlCLFdBQ25CLFNBQVNBLEVBQWUxSixFQUFPc0osRUFBTy9LLEdBQ3BDbEMsRUFBZWgrQixLQUFNcXJDLEdBRXJCcnJDLEtBQUsyaEMsTUFBUUEsRUFDYjNoQyxLQUFLc3JDLFNBQW9ETixHQUFjckosRUFBT3NKLEdBQzlFanJDLEtBQUtrZ0MsWUFBY0EsRUFFZHFILEdBQVdELE9BQU9pQyxNQUFNckosSUFDM0JxSCxHQUFXRCxPQUFPa0MsZUFBZXRKLEVBQWEsSUFrQ2xELE9BdkJBbUwsRUFBZS92QyxVQUFVaXdDLHdCQUEwQixTQUFpQ2hCLEVBQWtCVixHQUNwRyxJQUFJeUIsRUFBV3RyQyxLQUFLc3JDLFNBQ2hCcEwsRUFBY2xnQyxLQUFLa2dDLFlBQ25Cc0wsRUFBZ0J4ckMsS0FBS3dyQyxjQUV6QixHQUFJck0sR0FBY21NLEdBQXFDLGlCQUFsQkUsR0FBOEIzQixFQUFXMUgsYUFBYWpDLEVBQWFzTCxHQUN0RyxPQUFPQSxFQUdULElBQUkzSixFQUFVeUksR0FBUXRxQyxLQUFLMmhDLE1BQU80SSxFQUFrQlYsR0FDaEQ1dkMsRUFBT214QyxHQUFPcHJDLEtBQUtrZ0MsWUFBYzJCLEVBQVE1L0IsS0FBSyxLQU1sRCxPQUxLNG5DLEVBQVcxSCxhQUFhakMsRUFBYWptQyxJQUN4QzR2QyxFQUFXSixPQUFPenBDLEtBQUtrZ0MsWUFBYXdCLEVBQWVHLEVBQVMsSUFBTTVuQyxPQUFNd0YsRUFBV3lnQyxHQUFjam1DLEdBR25HK0YsS0FBS3dyQyxjQUFnQnZ4QyxFQUNkQSxHQUdUb3hDLEVBQWVJLGFBQWUsU0FBc0I1YSxHQUNsRCxPQUFPdWEsR0FBT3ZhLElBR1R3YSxFQTNDWSxHQXNFakJLLEdBQWlCLFNBQVd4TixFQUFPeU4sR0FDckMsSUFBSUMsRUFBZTl2QyxVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUs2aUMsRUFNbkZrTixJQUFpQkQsR0FBZTFOLEVBQU00TixRQUFVRixFQUFhRSxNQUM3REEsRUFBUTVOLEVBQU00TixRQUFVRCxFQUFpQjNOLEVBQU00TixNQUFRSCxHQUFpQkMsRUFBYUUsTUFHekYsT0FBT0EsR0FJTEMsR0FBYyw2QkFDZEMsR0FBZSxXQU1uQixTQUFTQyxHQUFPcGIsR0FDZCxPQUFPQSxFQUVOcnNCLFFBQVF1bkMsR0FBYSxLQUdyQnZuQyxRQUFRd25DLEdBQWMsSUFLekIsU0FBU0UsR0FBTXpjLEdBQ2IsTUFBeUIsaUJBQVhBLElBQXNILEVBWXRJLElBQUkwYyxHQUFnQixDQUNsQkMsbUJBQW1CLEVBQ25CQyxjQUFjLEVBQ2RULGNBQWMsRUFDZC9NLGFBQWEsRUFDYnlOLDBCQUEwQixFQUMxQkMsV0FBVyxFQUNYMVosTUFBTSxHQUdKMlosR0FBZ0IsQ0FDbEJ2eUMsTUFBTSxFQUNOeUMsUUFBUSxFQUNScEIsV0FBVyxFQUNYbXhDLFFBQVEsRUFDUkMsUUFBUSxFQUNSNXdDLFdBQVcsRUFDWDZ3QyxPQUFPLEdBR0xDLEtBQWdCekIsR0FBZ0IsSUFBa0IsY0FBYyxDQUNsRTBCLFVBQVUsRUFDVkMsUUFBUSxHQUNQM0IsSUFFQzRCLEdBQW1CM3lDLE9BQU9DLGVBQzFCb0MsR0FBc0JyQyxPQUFPcUMsb0JBQzdCdXdDLEdBQXdCNXlDLE9BQU9nMUIsc0JBQy9CQSxRQUFrRDN2QixJQUExQnV0QyxHQUFzQyxXQUNoRSxNQUFPLElBQ0xBLEdBQ0F6ZCxHQUEyQm4xQixPQUFPbTFCLHlCQUNsQzJMLEdBQWlCOWdDLE9BQU84Z0MsZUFDeEIrUixHQUFrQjd5QyxPQUFPa0IsVUFDekI0eEMsR0FBaUJqeEMsTUFBTVgsVUFHM0IsU0FBUzZ4QyxHQUFxQkMsRUFBaUJDLEVBQWlCQyxHQUM5RCxHQUErQixpQkFBcEJELEVBQThCLENBR3ZDLElBQUlFLEVBQXFCclMsR0FBZW1TLEdBRXBDRSxHQUFzQkEsSUFBdUJOLElBQy9DRSxHQUFxQkMsRUFBaUJHLEVBQW9CRCxHQWdCNUQsSUFiQSxJQUFJbHJDLEVBQU84cUMsR0FBZTU3QixPQUFPN1UsR0FBb0I0d0MsR0FFckRqZSxHQUFzQmllLElBRWxCRyxFQUFnQlosR0FBYVEsRUFBZ0JQLFdBQWFWLEdBRTFEc0IsRUFBZ0JiLEdBQWFTLEVBQWdCUixXQUFhVixHQUUxRHp5QyxFQUFJMEksRUFBSzFGLE9BQ1QyL0IsT0FBYSxFQUNicGhDLE9BQU0sRUFHSHZCLEtBR0wsR0FGQXVCLEVBQU1tSCxFQUFLMUksS0FJVjh5QyxHQUFjdnhDLElBQVVxeUMsR0FBYUEsRUFBVXJ5QyxJQUFXd3lDLEdBQWlCQSxFQUFjeHlDLElBRXhGdXlDLEdBQWlCQSxFQUFjdnlDLE1BQy9Cb2hDLEVBQWE5TSxHQUF5QjhkLEVBQWlCcHlDLElBR3JELElBRUU4eEMsR0FBaUJLLEVBQWlCbnlDLEVBQUtvaEMsR0FDdkMsTUFBTzkyQixJQU9mLE9BQU82bkMsRUFHVCxPQUFPQSxFQVVULElBYUlNLEdBQWUsMEJBRWZDLEdBQWdCRCxHQUFhRSxTQXNMN0JDLElBaExnQixTQUFVQyxHQUc1QixTQUFTQyxFQUFjN1AsR0FDckJGLEVBQWVoK0IsS0FBTSt0QyxHQUVyQixJQUFJeGQsRUFBUWdPLEVBQTBCditCLEtBQU04dEMsRUFBV2owQyxLQUFLbUcsS0FBTWsrQixJQUlsRSxPQUZBM04sRUFBTXlkLFdBQWEsWUFBUXpkLEVBQU15ZCxXQUFXOXlDLEtBQUtxMUIsSUFDakRBLEVBQU0wZCxZQUFjMWQsRUFBTTBkLFlBQVkveUMsS0FBS3ExQixHQUNwQ0EsRUFUVCtOLEVBQVN5UCxFQUFlRCxHQVl4QkMsRUFBY3p5QyxVQUFVd3hDLE9BQVMsV0FDL0IsT0FBSzlzQyxLQUFLaytCLE1BQU1nUSxTQUVULElBQU12SyxjQUNYK0osR0FBYUUsU0FDYixLQUNBNXRDLEtBQUtpdUMsYUFMMEIsTUFTbkNGLEVBQWN6eUMsVUFBVTJ5QyxZQUFjLFNBQXFCRSxHQUN6RCxJQUFJcE4sRUFBVS9nQyxLQUFLZ3VDLFdBQVdodUMsS0FBS2srQixNQUFNNE4sTUFBT3FDLEdBRWhELE9BQU8sSUFBTXhLLGNBQ1grSixHQUFhVSxTQUNiLENBQUV6ekMsTUFBT29tQyxHQUNUL2dDLEtBQUtrK0IsTUFBTWdRLFdBVWZILEVBQWN6eUMsVUFBVSt5QyxTQUFXLFNBQWtCdkMsRUFBT3FDLEdBQzFELEdBQUk1ckMsRUFBV3VwQyxHQU9iLE9BTmtCQSxFQUFNcUMsR0FTMUIsR0FBYyxPQUFWckMsR0FBa0I3dkMsTUFBTUYsUUFBUSt2QyxJQUE0RSxpQkFBaEQsSUFBVkEsRUFBd0IsWUFBY2pjLEVBQVFpYyxJQUNsRyxNQUFNLElBQUl0TSxFQUFzQixHQUdsQyxPQUFPbkIsRUFBUyxHQUFJOFAsRUFBWXJDLElBR2xDaUMsRUFBY3p5QyxVQUFVMHlDLFdBQWEsU0FBb0JsQyxFQUFPcUMsR0FDOUQsT0FBT251QyxLQUFLcXVDLFNBQVN2QyxFQUFPcUMsSUExRFosQ0E4RGxCLGFBTXFCLFdBQ3JCLFNBQVNHLElBQ1B0USxFQUFlaCtCLEtBQU1zdUMsR0FHckJ0dUMsS0FBS3V1QyxZQUFjaEgsR0FBV0QsT0FDOUJ0bkMsS0FBS2syQixTQUFXbDJCLEtBQUt1dUMsWUFBWXp2QixRQUNqQzllLEtBQUtnbEMsUUFBUyxFQVNoQnNKLEVBQWlCaHpDLFVBQVVrekMsS0FBTyxXQUNoQyxJQUFLeHVDLEtBQUtnbEMsT0FBUSxDQUVoQixJQUFJMWIsRUFBUXRwQixLQUFLdXVDLFlBQVl0RyxPQUFPcDhCLFFBQVE3TCxLQUFLazJCLFVBQ2pEbDJCLEtBQUt1dUMsWUFBWXRHLE9BQU93RyxPQUFPbmxCLEVBQU8sR0FDdEN0cEIsS0FBS2dsQyxRQUFTLElBSWxCc0osRUFBaUJoekMsVUFBVW96QyxjQUFnQixTQUF1QlIsR0FDaEUsR0FBSWx1QyxLQUFLZ2xDLE9BQ1AsTUFBTSxJQUFJeEYsRUFBc0IsR0FHbEMsT0FBTyxJQUFNbUUsY0FDWGdMLEdBQ0EsQ0FBRW5NLE1BQU94aUMsS0FBS2syQixVQUNkZ1ksSUFJSkksRUFBaUJoekMsVUFBVXN6QyxhQUFlLFdBRXhDLE9BREE1dUMsS0FBS3d1QyxPQUNFeHVDLEtBQUtrMkIsU0FBU2lQLFVBR3ZCbUosRUFBaUJoekMsVUFBVXV6QyxnQkFBa0IsV0FFM0MsT0FEQTd1QyxLQUFLd3VDLE9BQ0V4dUMsS0FBS2syQixTQUFTeVQsbUJBR3ZCMkUsRUFBaUJoekMsVUFBVXd6Qyx5QkFBMkIsU0FBa0NDLEdBSXBGLE1BQU0sSUFBSXZQLEVBQXNCLElBbkRmLEdBNEdDLDJCQUNwQndQLEdBQXFCbkIsR0FBa0JELFNBRXZDZSxHQUFvQixTQUFVYixHQUdoQyxTQUFTYSxFQUFrQnpRLEdBQ3pCRixFQUFlaCtCLEtBQU0ydUMsR0FFckIsSUFBSXBlLEVBQVFnTyxFQUEwQnYrQixLQUFNOHRDLEVBQVdqMEMsS0FBS21HLEtBQU1rK0IsSUFHbEUsT0FEQTNOLEVBQU15ZCxXQUFhLFlBQVF6ZCxFQUFNeWQsWUFDMUJ6ZCxFQTJCVCxPQW5DQStOLEVBQVNxUSxFQUFtQmIsR0FXNUJhLEVBQWtCcnpDLFVBQVUweUMsV0FBYSxTQUFvQnhMLEVBQU8vUyxHQUNsRSxHQUFJK1MsRUFDRixPQUFPQSxFQUNGLEdBQUkvUyxFQUNULE9BQU8sSUFBSThYLEdBQVc5WCxHQUV0QixNQUFNLElBQUkrUCxFQUFzQixJQUlwQ21QLEVBQWtCcnpDLFVBQVV3eEMsT0FBUyxXQUNuQyxJQUFJcEosRUFBUzFqQyxLQUFLaytCLE1BQ2RnUSxFQUFXeEssRUFBT3dLLFNBQ2xCMUwsRUFBUWtCLEVBQU9sQixNQUNmL1MsRUFBU2lVLEVBQU9qVSxPQUdwQixPQUFPLElBQU1rVSxjQUNYa0ssR0FBa0JPLFNBQ2xCLENBQUV6ekMsTUFBT3FGLEtBQUtndUMsV0FBV3hMLEVBQU8vUyxJQUN3Q3llLElBSXJFUyxFQXBDZSxDQXFDdEIsYUFXRU0sR0FBYyxHQW9CbEIsSUFBSUMsR0FBa0IsU0FBVXBCLEdBRzlCLFNBQVNvQixJQUNQbFIsRUFBZWgrQixLQUFNa3ZDLEdBRXJCLElBQUkzZSxFQUFRZ08sRUFBMEJ2K0IsS0FBTTh0QyxFQUFXajBDLEtBQUttRyxPQTZCNUQsT0EzQkF1d0IsRUFBTTBhLE1BQVEsR0FFZDFhLEVBQU00ZSxZQUFjNWUsRUFBTTRlLFlBQVlqMEMsS0FBS3ExQixHQUMzQ0EsRUFBTTBkLFlBQWMxZCxFQUFNMGQsWUFBWS95QyxLQUFLcTFCLEdBd0JwQ0EsRUE4SVQsT0FoTEErTixFQUFTNFEsRUFBaUJwQixHQXFDMUJvQixFQUFnQjV6QyxVQUFVd3hDLE9BQVMsV0FDakMsT0FBTyxJQUFNbkosY0FDWHFMLEdBQ0EsS0FDQWh2QyxLQUFLbXZDLGNBSVRELEVBQWdCNXpDLFVBQVU2ekMsWUFBYyxXQUN0QyxJQUFJdEYsRUFBYS90QyxVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUt5ckMsR0FBV0QsT0FLaEcsT0FIQXRuQyxLQUFLNnBDLFdBQWFBLEVBR2Q3cEMsS0FBS2srQixNQUFNa1IsbUJBQW1CQyxlQUFlL0QsU0FBaUJ0ckMsS0FBS2l1QyxjQUVoRSxJQUFNdEssY0FDWGdLLEdBQ0EsS0FDQTN0QyxLQUFLaXVDLGNBSVRpQixFQUFnQjV6QyxVQUFVMnlDLFlBQWMsU0FBcUJuQyxHQUMzRCxJQUFJd0QsRUFBd0J0dkMsS0FBS2srQixNQUFNa1IsbUJBQ25DQyxFQUFpQkMsRUFBc0JELGVBQ3ZDekQsRUFBZTBELEVBQXNCMUQsYUFFckMyRCxHQURjRCxFQUFzQnpRLFlBQ2Z5USxFQUFzQkMsb0JBQzNDeFEsRUFBb0J1USxFQUFzQnZRLGtCQUMxQ3RQLEVBQVM2ZixFQUFzQjdmLE9BRy9CK2YsT0FBcUIsRUFFdkJBLEVBREVILEVBQWUvRCxTQUNJdHJDLEtBQUt1ckMsd0JBQXdCNU0sRUFBYzMrQixLQUFLaytCLE9BRWhEbCtCLEtBQUt1ckMsd0JBQXdCRyxHQUFlMXJDLEtBQUtrK0IsTUFBTzROLEVBQU9GLElBQWlCak4sRUFBYzMrQixLQUFLaytCLE9BRzFILElBQUl1UixFQUFxQnp2QyxLQUFLaytCLE1BQU1wUyxJQUFNOXJCLEtBQUtpckMsTUFBTW5mLElBQU0yRCxFQUN2RGlnQixFQUFjeEQsR0FBTXVELEdBRXBCRSxFQUFrQixHQUNsQkMsRUFBZ0J2UixFQUFTLEdBQUlyK0IsS0FBS2srQixNQUFPbCtCLEtBQUtpckMsT0FFOUNod0MsT0FBTSxFQUVWLElBQUtBLEtBQU8yMEMsRUFLRSx1QkFBUjMwQyxHQUF3QyxPQUFSQSxJQUVqQixpQkFBUkEsRUFBd0IwMEMsRUFBZ0JFLElBQU1ELEVBQWMzMEMsR0FBc0IsZ0JBQVJBLEVBQXVCMDBDLEVBQWdCN2pCLEdBQUs4akIsRUFBYzMwQyxHQUFleTBDLElBQWUsWUFBVXowQyxLQUVyTDAwQyxFQUFnQjEwQyxHQUFPMjBDLEVBQWMzMEMsS0FVekMsT0FOSStFLEtBQUtrK0IsTUFBTTRSLE9BQVM5dkMsS0FBS2lyQyxNQUFNNkUsUUFDakNILEVBQWdCRyxNQUFRelIsRUFBUyxHQUFJcitCLEtBQUtpckMsTUFBTTZFLE1BQU85dkMsS0FBS2srQixNQUFNNFIsUUFHcEVILEVBQWdCSSxVQUFZOXpDLE1BQU1YLFVBQVVnVyxPQUFPaStCLEVBQW9CeFEsRUFBbUJ5USxJQUF1QnpRLEVBQW9CeVEsRUFBcUIsS0FBTXh2QyxLQUFLaytCLE1BQU02UixVQUFXL3ZDLEtBQUtpckMsTUFBTThFLFdBQVdudkIsT0FBTzhVLFNBQVN6ekIsS0FBSyxLQUUxTix3QkFBY3d0QyxFQUFvQkUsSUFHM0NULEVBQWdCNXpDLFVBQVUwMEMsc0JBQXdCLFNBQStCbEUsRUFBTzVOLEVBQU8rTSxHQUM3RixJQUFJZ0YsRUFBU2p3QyxLQUVUK2dDLEVBQVUxQyxFQUFTLEdBQUlILEVBQU8sQ0FBRTROLE1BQU9BLElBRTNDLE9BQUtiLEVBQU12dUMsUUFFWHNELEtBQUtpckMsTUFBUSxHQUViQSxFQUFNcDBCLFNBQVEsU0FBVXE1QixHQUN0QixJQXhZMkJoekMsRUF3WXZCaXpDLEVBQWtCRCxFQUNsQkUsR0FBZSxFQUNmQyxPQUFPLEVBQ1BwMUMsT0FBTSxFQVVWLElBQUtBLEtBUkRzSCxFQUFXNHRDLEtBRWJBLEVBQWtCQSxFQUFnQnBQLEdBQ2xDcVAsR0FBZSxHQUtMRCxFQUNWRSxFQUFPRixFQUFnQmwxQyxHQUVsQm0xQyxJQUNDN3RDLEVBQVc4dEMsS0F6WlFuekMsRUF5WjBCbXpDLElBeFp6Q256QyxFQUFHNUIsV0FBYTRCLEVBQUc1QixVQUFVbXZDLGtCQXdac0IzTCxFQUFrQnVSLEtBSzNFQSxFQUFPQSxFQUFLdFAsSUFRaEJrUCxFQUFPaEYsTUFBTWh3QyxHQUFPbzFDLEVBQ3BCdFAsRUFBUTlsQyxHQUFPbzFDLEtBS1p0UCxHQXpDbUJBLEdBNEM1Qm1PLEVBQWdCNXpDLFVBQVVpd0Msd0JBQTBCLFNBQWlDTyxFQUFPNU4sR0FDMUYsSUFBSW9TLEVBQXlCcFMsRUFBTWtSLG1CQUMvQm5FLEVBQVFxRixFQUF1QnJGLE1BQy9Cb0UsRUFBaUJpQixFQUF1QmpCLGVBQ25CaUIsRUFBdUJDLG1CQUtoRCxPQUFJbEIsRUFBZS9ELFdBQWFMLEVBQU12dUMsT0FDN0IyeUMsRUFBZTlELHdCQUF3QjVNLEVBQWMzK0IsS0FBSzZwQyxZQUduRHdGLEVBQWU5RCx3QkFBd0J2ckMsS0FBS2d3QyxzQkFBc0JsRSxFQUFPNU4sRUFBTytNLEdBQVFqckMsS0FBSzZwQyxhQU94R3FGLEVBakxhLENBa0xwQixhQUVGLFNBQVNzQixHQUFzQi9nQixFQUFRb0UsRUFBUzhOLEdBQzlDLElBQUk4TyxFQUFxQjNSLEVBQWtCclAsR0FDdkNpaEIsR0FBV3hFLEdBQU16YyxHQUVqQmtoQixFQUF1QjljLEVBQVFnTCxZQUMvQkEsT0FBdUNwL0IsSUFBekJreEMsRUExaUJwQixTQUE2QmxoQixHQUUzQixPQUFPeWMsR0FBTXpjLEdBQVUsVUFBWUEsRUFBUyxVQUFZbVAsRUFBaUJuUCxHQUFVLElBd2lCNUJtaEIsQ0FBb0JuaEIsR0FBVWtoQixFQUNqRkUsRUFBdUJoZCxFQUFRcU0sWUFDL0JBLE9BQXVDemdDLElBQXpCb3hDLEVBNU1wQixTQUFvQkMsRUFBaUJDLEVBQWNDLEdBQ2pELElBQUluUyxFQUFzQyxpQkFBakJrUyxFQUE0QixLQUFPOUUsR0FBTzhFLEdBTS9ERSxHQUFNaEMsR0FBWXBRLElBQWdCLEdBQUssRUFDM0NvUSxHQUFZcFEsR0FBZW9TLEVBRTNCLElBQUkvUSxFQUFjckIsRUFBYyxJQUFNaVMsRUFBZ0JyRixhQUFhNU0sRUFBY29TLEdBRWpGLE9BQU9ELEVBQW9CQSxFQUFvQixJQUFNOVEsRUFBY0EsRUFnTVpnUixDQUFXN0YsR0FBZ0J4WCxFQUFRZ0wsWUFBYWhMLEVBQVFtZCxtQkFBcUJILEVBQ2hJTSxFQUF3QnRkLEVBQVF1ZCxnQkFDaENBLE9BQTRDM3hDLElBQTFCMHhDLEVBQXNDakMsR0FBa0JpQyxFQUMxRUUsRUFBaUJ4ZCxFQUFRb1gsTUFDekJBLE9BQTJCeHJDLElBQW5CNHhDLEVBQStCM1MsRUFBYzJTLEVBR3JEdFMsRUFBb0JsTCxFQUFRZ0wsYUFBZWhMLEVBQVFxTSxZQUFjK0wsR0FBT3BZLEVBQVFnTCxhQUFlLElBQU1oTCxFQUFRcU0sWUFBY3JNLEVBQVFxTSxhQUFlQSxFQUdsSm9SLEVBRUpiLEdBQXNCaGhCLEVBQU93YixNQUFRaHZDLE1BQU1YLFVBQVVnVyxPQUFPbWUsRUFBT3diLE1BQU9BLEdBQU9ycUIsT0FBTzhVLFNBQVd1VixFQUUvRm9FLEVBQWlCLElBQUloRSxHQUFlb0YsRUFFeENoaEIsRUFBTzRmLGVBQWUxTixNQUFNcndCLE9BQU9xd0IsR0FBU0EsRUFBTzJQLEVBQVl2UyxHQU0zRHdTLE9BQXlCLEVBQ3pCQyxFQUFhLFNBQW9CdFQsRUFBTzJSLEdBQzFDLE9BQU8sSUFBTWxNLGNBQWN5TixFQUFpQi9TLEVBQVMsR0FBSUgsRUFBTyxDQUFFa1IsbUJBQW9CbUMsRUFBd0JFLGFBQWM1QixNQXlFOUgsT0F2RUEyQixFQUFXM1MsWUFBY0EsR0FDekIwUyxFQUF5QixJQUFNQyxXQUFXQSxJQUNuQjNTLFlBQWNBLEVBR3JDMFMsRUFBdUJ0RyxNQUFRcUcsRUFFL0JDLEVBQXVCbEMsZUFBaUJBLEVBR3hDa0MsRUFBdUJoQyxtQkFBcUJrQixFQUM1Q3gwQyxNQUFNWCxVQUFVZ1csT0FBT21lLEVBQU84ZixtQkFBb0I5ZixFQUFPc1AsbUJBQXFCTCxFQUc5RTZTLEVBQXVCeFMsa0JBQW9CQSxFQUkzQ3dTLEVBQXVCOWhCLE9BQVNnaEIsRUFBcUJoaEIsRUFBT0EsT0FBU0EsRUFHckU4aEIsRUFBdUJHLGNBQWdCLFNBQXVCblAsR0FDNUQsSUFBSW9QLEVBQXNCOWQsRUFBUXFNLFlBQzlCMFIsRUEzaUVzQixTQUFVcDFDLEVBQUs0RixHQUMzQyxJQUFJcXRCLEVBQVMsR0FFYixJQUFLLElBQUkvMUIsS0FBSzhDLEVBQ1I0RixFQUFLeUosUUFBUW5TLElBQU0sR0FDbEJVLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBSzJDLEVBQUs5QyxLQUMvQysxQixFQUFPLzFCLEdBQUs4QyxFQUFJOUMsSUFHbEIsT0FBTysxQixFQWtpRWVvaUIsQ0FBd0JoZSxFQUFTLENBQUMsZ0JBR2xEaWUsRUFBaUJILEdBQXVCQSxFQUFzQixLQUFPekYsR0FBTTNKLEdBQU9BLEVBQU0wSixHQUFPck4sRUFBaUIyRCxLQVFwSCxPQUFPaU8sR0FBc0JqTyxFQU5abEUsRUFBUyxHQUFJdVQsRUFBZSxDQUMzQzNHLE1BQU9xRyxFQUNQcFIsWUFBYTRSLEVBQ2JWLGdCQUFpQkEsSUFHMkJ6UCxJQUloRHZuQyxPQUFPQyxlQUFlazNDLEVBQXdCLGVBQWdCLENBQzVEaDNDLElBQUssV0FDSCxPQUFPeUYsS0FBSyt4QyxxQkFFZGx2QyxJQUFLLFNBQWdCckcsR0FFbkJ3RCxLQUFLK3hDLG9CQUFzQnRCLEVBQXFCLFlBQU1oaEIsRUFBT21jLGFBQWNwdkMsR0FBT0EsS0FVdEYrMEMsRUFBdUJyMUMsU0FBVyxXQUNoQyxNQUFPLElBQU1xMUMsRUFBdUJ4UyxtQkFHbEMyUixHQUNGdkQsR0FBcUJvRSxFQUF3QjloQixFQUFRLENBRW5Ed2IsT0FBTyxFQUNQb0UsZ0JBQWdCLEVBQ2hCeFEsYUFBYSxFQUNiMFEsb0JBQW9CLEVBQ3BCeFEsbUJBQW1CLEVBQ25CdFAsUUFBUSxFQUNSaWlCLGVBQWUsSUFJWkgsRUFNVCxJQU9JUyxHQUFTLFNBQWdCelAsR0FDM0IsT0E5M0JGLFNBQVMwUCxFQUFxQkMsRUFBc0IzUCxHQUNsRCxJQUFJMU8sRUFBVS8zQixVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUs2aUMsRUFFbEYsSUFBSyw2QkFBbUI0RCxHQUN0QixNQUFNLElBQUkvQyxFQUFzQixFQUFHaGYsT0FBTytoQixJQUs1QyxJQUFJNFAsRUFBbUIsV0FDckIsT0FBT0QsRUFBcUIzUCxFQUFLMU8sRUFBU21NLEdBQUlua0MsV0FBTTRELEVBQVczRCxhQWVqRSxPQVhBcTJDLEVBQWlCQyxXQUFhLFNBQVVqeEMsR0FDdEMsT0FBTzh3QyxFQUFxQkMsRUFBc0IzUCxFQUFLbEUsRUFBUyxHQUFJeEssRUFBUzF5QixLQUkvRWd4QyxFQUFpQmxILE1BQVEsU0FBVUEsR0FDakMsT0FBT2dILEVBQXFCQyxFQUFzQjNQLEVBQUtsRSxFQUFTLEdBQUl4SyxFQUFTLENBQzNFb1gsTUFBT2h2QyxNQUFNWCxVQUFVZ1csT0FBT3VpQixFQUFRb1gsTUFBT0EsR0FBT3JxQixPQUFPOFUsYUFJeER5YyxFQXEyQkFGLENBQXFCekIsR0FBdUJqTyxJQVJuQyxDQUFDLElBQUssT0FBUSxVQUFXLE9BQVEsVUFBVyxRQUFTLFFBQVMsSUFBSyxPQUFRLE1BQU8sTUFBTyxNQUFPLGFBQWMsT0FBUSxLQUFNLFNBQVUsU0FBVSxVQUFXLE9BQVEsT0FBUSxNQUFPLFdBQVksT0FBUSxXQUFZLEtBQU0sTUFBTyxVQUFXLE1BQU8sU0FBVSxNQUFPLEtBQU0sS0FBTSxLQUFNLFFBQVMsV0FBWSxhQUFjLFNBQVUsU0FBVSxPQUFRLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE9BQVEsU0FBVSxTQUFVLEtBQU0sT0FBUSxJQUFLLFNBQVUsTUFBTyxRQUFTLE1BQU8sTUFBTyxTQUFVLFFBQVMsU0FBVSxLQUFNLE9BQVEsT0FBUSxNQUFPLE9BQVEsVUFBVyxPQUFRLFdBQVksT0FBUSxRQUFTLE1BQU8sV0FBWSxTQUFVLEtBQU0sV0FBWSxTQUFVLFNBQVUsSUFBSyxRQUFTLFVBQVcsTUFBTyxXQUFZLElBQUssS0FBTSxLQUFNLE9BQVEsSUFBSyxPQUFRLFNBQVUsVUFBVyxTQUFVLFFBQVMsU0FBVSxPQUFRLFNBQVUsUUFBUyxNQUFPLFVBQVcsTUFBTyxRQUFTLFFBQVMsS0FBTSxXQUFZLFFBQVMsS0FBTSxRQUFTLE9BQVEsUUFBUyxLQUFNLFFBQVMsSUFBSyxLQUFNLE1BQU8sUUFBUyxNQUdwOEIsU0FBVSxXQUFZLE9BQVEsVUFBVyxnQkFBaUIsSUFBSyxRQUFTLE9BQVEsaUJBQWtCLFNBQVUsT0FBUSxPQUFRLFVBQVcsVUFBVyxXQUFZLGlCQUFrQixPQUFRLE9BQVEsTUFBTyxPQUFRLFNBU25NMXJCLFNBQVEsU0FBVXc3QixHQUM1QkwsR0FBT0ssR0FBY0wsR0FBT0ssTUFLOUIsSUFBSUMsR0FBYyxXQUNoQixTQUFTQSxFQUFZM1EsRUFBT3pCLEdBQzFCbEMsRUFBZWgrQixLQUFNc3lDLEdBRXJCdHlDLEtBQUsyaEMsTUFBUUEsRUFDYjNoQyxLQUFLa2dDLFlBQWNBLEVBQ25CbGdDLEtBQUtzckMsU0FBV04sR0FBY3JKLEVBQU9qRCxHQUVoQzZJLEdBQVdELE9BQU9pQyxNQUFNckosSUFDM0JxSCxHQUFXRCxPQUFPa0MsZUFBZXRKLEVBQWEsSUEyQmxELE9BdkJBb1MsRUFBWWgzQyxVQUFVaTNDLGFBQWUsU0FBc0JoSSxFQUFrQlYsR0FDM0UsSUFDSTdKLEVBQU0wQixFQURJNEksR0FBUXRxQyxLQUFLMmhDLE1BQU80SSxFQUFrQlYsR0FDbEIsSUFFbENBLEVBQVdKLE9BQU96cEMsS0FBS2tnQyxZQUFhRixJQUd0Q3NTLEVBQVloM0MsVUFBVWszQyxhQUFlLFNBQXNCM0ksR0FDekQsSUFBSTNKLEVBQWNsZ0MsS0FBS2tnQyxZQUVuQjJKLEVBQVdOLE1BQU1ySixJQUNuQjJKLEVBQVdILE9BQU94SixJQU90Qm9TLEVBQVloM0MsVUFBVW0zQyxhQUFlLFNBQXNCbEksRUFBa0JWLEdBQzNFN3BDLEtBQUt3eUMsYUFBYTNJLEdBQ2xCN3BDLEtBQUt1eUMsYUFBYWhJLEVBQWtCVixJQUcvQnlJLEVBcENTLEdBOENsQixTQUFTSSxHQUFrQjVVLEdBQ3pCLElBQUssSUFBSTZCLEVBQU83akMsVUFBVVksT0FBUXFoQyxFQUFpQjloQyxNQUFNMGpDLEVBQU8sRUFBSUEsRUFBTyxFQUFJLEdBQUlDLEVBQU8sRUFBR0EsRUFBT0QsRUFBTUMsSUFDeEc3QixFQUFlNkIsRUFBTyxHQUFLOWpDLFVBQVU4akMsR0FHdkMsSUFBSStCLEVBQVEzQixHQUFJbmtDLFdBQU00RCxFQUFXLENBQUNxK0IsR0FBU3hzQixPQUFPeXNCLElBQzlDa0UsRUFBSyxhQUFlMEksR0FBV2dJLEtBQUs1YyxVQUFVNEwsSUFDOUNtTyxFQUFRLElBQUl3QyxHQUFZM1EsRUFBT00sR0FFL0IyUSxFQUF1QixTQUFVQyxHQUduQyxTQUFTRCxFQUFxQjFVLEdBQzVCRixFQUFlaCtCLEtBQU00eUMsR0FFckIsSUFBSXJpQixFQUFRZ08sRUFBMEJ2K0IsS0FBTTZ5QyxFQUFpQmg1QyxLQUFLbUcsS0FBTWsrQixJQUVwRTRVLEVBQW9CdmlCLEVBQU1SLFlBQzFCZ2pCLEVBQWNELEVBQWtCQyxZQUNoQ2hVLEVBQW9CK1QsRUFBa0IvVCxrQkFnQjFDLE9BYklJLElBQ0Z6RixPQUFPc1osY0FBY2pVLElBQXNCckYsT0FBT3NaLGNBQWNqVSxJQUFzQixHQUFLLEdBUTdGeE8sRUFBTTBpQixNQUFRLENBQ1pGLFlBQWFBLEVBQ2JoVSxrQkFBbUJBLEdBRWR4TyxFQStEVCxPQXhGQStOLEVBQVNzVSxFQUFzQkMsR0E0Qi9CRCxFQUFxQnQzQyxVQUFVNDNDLHFCQUF1QixXQUNoRHhaLE9BQU9zWixjQUFjaHpDLEtBQUtpekMsTUFBTWxVLHFCQUNsQ3JGLE9BQU9zWixjQUFjaHpDLEtBQUtpekMsTUFBTWxVLG9CQUFzQixHQU9HLElBQXZEckYsT0FBT3NaLGNBQWNoekMsS0FBS2l6QyxNQUFNbFUsb0JBQ2xDLytCLEtBQUtpekMsTUFBTUYsWUFBWVAsYUFBYXh5QyxLQUFLNnBDLGFBSTdDK0ksRUFBcUJ0M0MsVUFBVXd4QyxPQUFTLFdBQ3RDLElBQUltRCxFQUFTandDLEtBT2IsT0FBTyxJQUFNMmpDLGNBQ1hxTCxHQUNBLE1BQ0EsU0FBVW5GLEdBQ1JvRyxFQUFPcEcsV0FBYUEsR0FBY3RDLEdBQVdELE9BRTdDLElBQUl5TCxFQUFjOUMsRUFBT2dELE1BQU1GLFlBRy9CLE9BQUlBLEVBQVl6SCxVQUNkeUgsRUFBWU4sYUFBYWxULEVBQTBCMFEsRUFBT3BHLFlBRW5ELE1BRUEsSUFBTWxHLGNBQ1hnSyxHQUNBLE1BQ0EsU0FBVTdCLEdBRVIsSUFBSUYsRUFBZXFFLEVBQU9sZ0IsWUFBWTZiLGFBR2xDN0ssRUFBVTFDLEVBQVMsR0FBSTRSLEVBQU8vUixPQVFsQyxZQU5xQixJQUFWNE4sSUFDVC9LLEVBQVErSyxNQUFRSixHQUFldUUsRUFBTy9SLE1BQU80TixFQUFPRixJQUd0RG1ILEVBQVlOLGFBQWExUixFQUFTa1AsRUFBT3BHLFlBRWxDLFlBUVorSSxFQXpGa0IsQ0EwRnpCLElBQU1PLFdBTVIsT0FKQVAsRUFBcUJHLFlBQWNqRCxFQUNuQzhDLEVBQXFCN1Qsa0JBQW9Ca0QsRUFHbEMyUSxFQTdHTHpULElBQ0Z6RixPQUFPc1osY0FBZ0IsSUFrTVYsUywrQ0NoN0VmLElBQUk5M0MsRUFBTyxFQUFRLElBTWZnQixFQUFXOUIsT0FBT2tCLFVBQVVZLFNBUWhDLFNBQVNILEVBQVF5RSxHQUNmLE1BQThCLG1CQUF2QnRFLEVBQVNyQyxLQUFLMkcsR0FTdkIsU0FBUzVELEVBQVk0RCxHQUNuQixZQUFzQixJQUFSQSxFQTRFaEIsU0FBU3JFLEVBQVNxRSxHQUNoQixPQUFlLE9BQVJBLEdBQStCLGlCQUFSQSxFQVNoQyxTQUFTaStCLEVBQWNqK0IsR0FDckIsR0FBMkIsb0JBQXZCdEUsRUFBU3JDLEtBQUsyRyxHQUNoQixPQUFPLEVBR1QsSUFBSWxGLEVBQVlsQixPQUFPOGdDLGVBQWUxNkIsR0FDdEMsT0FBcUIsT0FBZGxGLEdBQXNCQSxJQUFjbEIsT0FBT2tCLFVBdUNwRCxTQUFTaUgsRUFBVy9CLEdBQ2xCLE1BQThCLHNCQUF2QnRFLEVBQVNyQyxLQUFLMkcsR0F3RXZCLFNBQVNxVyxFQUFRcmEsRUFBS1UsR0FFcEIsR0FBSVYsUUFVSixHQUxtQixpQkFBUkEsSUFFVEEsRUFBTSxDQUFDQSxJQUdMVCxFQUFRUyxHQUVWLElBQUssSUFBSTlDLEVBQUksRUFBR0MsRUFBSTZDLEVBQUlFLE9BQVFoRCxFQUFJQyxFQUFHRCxJQUNyQ3dELEVBQUdyRCxLQUFLLEtBQU0yQyxFQUFJOUMsR0FBSUEsRUFBRzhDLFFBSTNCLElBQUssSUFBSXZCLEtBQU91QixFQUNWcEMsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLMkMsRUFBS3ZCLElBQzVDaUMsRUFBR3JELEtBQUssS0FBTTJDLEVBQUl2QixHQUFNQSxFQUFLdUIsR0EyRXJDL0MsRUFBT0QsUUFBVSxDQUNmdUMsUUFBU0EsRUFDVHEzQyxjQTFSRixTQUF1QjV5QyxHQUNyQixNQUE4Qix5QkFBdkJ0RSxFQUFTckMsS0FBSzJHLElBMFJyQjg4QixTQXRTRixTQUFrQjk4QixHQUNoQixPQUFlLE9BQVJBLElBQWlCNUQsRUFBWTRELElBQTRCLE9BQXBCQSxFQUFJdXZCLGNBQXlCbnpCLEVBQVk0RCxFQUFJdXZCLGNBQ2hELG1CQUE3QnZ2QixFQUFJdXZCLFlBQVl1TixVQUEyQjk4QixFQUFJdXZCLFlBQVl1TixTQUFTOThCLElBcVNoRjZ5QyxXQWxSRixTQUFvQjd5QyxHQUNsQixNQUE0QixvQkFBYjh5QyxVQUE4Qjl5QyxhQUFlOHlDLFVBa1I1REMsa0JBelFGLFNBQTJCL3lDLEdBT3pCLE1BTDRCLG9CQUFoQmc5QixhQUFpQ0EsWUFBa0IsT0FDcERBLFlBQVlDLE9BQU9qOUIsR0FFbkIsR0FBVUEsRUFBVSxRQUFNQSxFQUFJazlCLGtCQUFrQkYsYUFxUTNEamQsU0ExUEYsU0FBa0IvZixHQUNoQixNQUFzQixpQkFBUkEsR0EwUGQzRCxTQWpQRixTQUFrQjJELEdBQ2hCLE1BQXNCLGlCQUFSQSxHQWlQZHJFLFNBQVVBLEVBQ1ZzaUMsY0FBZUEsRUFDZjdoQyxZQUFhQSxFQUNiRSxPQWxORixTQUFnQjBELEdBQ2QsTUFBOEIsa0JBQXZCdEUsRUFBU3JDLEtBQUsyRyxJQWtOckJnekMsT0F6TUYsU0FBZ0JoekMsR0FDZCxNQUE4QixrQkFBdkJ0RSxFQUFTckMsS0FBSzJHLElBeU1yQml6QyxPQWhNRixTQUFnQmp6QyxHQUNkLE1BQThCLGtCQUF2QnRFLEVBQVNyQyxLQUFLMkcsSUFnTXJCK0IsV0FBWUEsRUFDWm14QyxTQTlLRixTQUFrQmx6QyxHQUNoQixPQUFPckUsRUFBU3FFLElBQVErQixFQUFXL0IsRUFBSW16QyxPQThLdkNDLGtCQXJLRixTQUEyQnB6QyxHQUN6QixNQUFrQyxvQkFBcEJxekMsaUJBQW1DcnpDLGFBQWVxekMsaUJBcUtoRUMscUJBeklGLFdBQ0UsT0FBeUIsb0JBQWRsYSxXQUFvRCxnQkFBdEJBLFVBQVVRLFNBQ1ksaUJBQXRCUixVQUFVUSxTQUNZLE9BQXRCUixVQUFVUSxXQUkvQixvQkFBWFYsUUFDYSxvQkFBYmdNLFdBa0lUN3VCLFFBQVNBLEVBQ1RrOUIsTUF2RUYsU0FBU0EsSUFDUCxJQUFJcjZCLEVBQVMsR0FDYixTQUFTczZCLEVBQVl4ekMsRUFBS3ZGLEdBQ3BCd2pDLEVBQWMva0IsRUFBT3plLEtBQVN3akMsRUFBY2orQixHQUM5Q2taLEVBQU96ZSxHQUFPODRDLEVBQU1yNkIsRUFBT3plLEdBQU11RixHQUN4QmkrQixFQUFjaitCLEdBQ3ZCa1osRUFBT3plLEdBQU84NEMsRUFBTSxHQUFJdnpDLEdBQ2Z6RSxFQUFReUUsR0FDakJrWixFQUFPemUsR0FBT3VGLEVBQUl3QixRQUVsQjBYLEVBQU96ZSxHQUFPdUYsRUFJbEIsSUFBSyxJQUFJOUcsRUFBSSxFQUFHQyxFQUFJbUMsVUFBVVksT0FBUWhELEVBQUlDLEVBQUdELElBQzNDbWQsRUFBUS9hLFVBQVVwQyxHQUFJczZDLEdBRXhCLE9BQU90NkIsR0F1RFBwYyxPQTVDRixTQUFnQmpCLEVBQUdDLEVBQUcyM0MsR0FRcEIsT0FQQXA5QixFQUFRdmEsR0FBRyxTQUFxQmtFLEVBQUt2RixHQUVqQ29CLEVBQUVwQixHQURBZzVDLEdBQTBCLG1CQUFSenpDLEVBQ1h0RixFQUFLc0YsRUFBS3l6QyxHQUVWenpDLEtBR05uRSxHQXFDUGdtQyxLQWhLRixTQUFjeFIsR0FDWixPQUFPQSxFQUFJcnNCLFFBQVEsT0FBUSxJQUFJQSxRQUFRLE9BQVEsS0FnSy9DMHZDLFNBN0JGLFNBQWtCQyxHQUloQixPQUg4QixRQUExQkEsRUFBUXZKLFdBQVcsS0FDckJ1SixFQUFVQSxFQUFRbnlDLE1BQU0sSUFFbkJteUMsSyw2QkNsVVQxNkMsRUFBT0QsUUFPUCxTQUFvQjQ2QyxHQUNsQixPQUFPbmtCLEVBQUdqckIsS0FDYSxpQkFBZG92QyxFQUF5QkMsRUFBU0QsR0FBYUEsRUFBVWhwQixPQUFPLEtBUDNFLElBQUlpcEIsRUFBVzd6QixPQUFPc3FCLGFBQ2xCN2EsRUFBSyxNLGNDTFR4MkIsRUFBT0QsUUFJUCxXQUdJLElBRkEsSUFBSWkyQixFQUFTLEdBRUovMUIsRUFBSSxFQUFHQSxFQUFJb0MsVUFBVVksT0FBUWhELElBQUssQ0FDdkMsSUFBSTh3QixFQUFTMXVCLFVBQVVwQyxHQUV2QixJQUFLLElBQUl1QixLQUFPdXZCLEVBQ1JqdkIsRUFBZTFCLEtBQUsyd0IsRUFBUXZ2QixLQUM1QncwQixFQUFPeDBCLEdBQU91dkIsRUFBT3Z2QixJQUtqQyxPQUFPdzBCLEdBZlgsSUFBSWwwQixFQUFpQm5CLE9BQU9rQixVQUFVQyxnQixnQkNBdEMsSUFBSSs0QyxFQUFVLEVBQVEsSUFBUixHQUNkNzZDLEVBQU9ELFFBQVU4NkMsRUFHakIsSUFDRUMsbUJBQXFCRCxFQUNyQixNQUFPRSxHQUNtQixpQkFBZmpZLFdBQ1RBLFdBQVdnWSxtQkFBcUJELEVBRWhDOXhDLFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0M4eEMsSyw2QkNUNUM3NkMsRUFBT0QsUUFBVTQzQixXLGVDRmpCNTNCLEVBQVVDLEVBQU9ELFFBRWpCLFNBQWNxM0IsR0FDWixPQUFPQSxFQUFJcnNCLFFBQVEsYUFBYyxNQUczQml3QyxLQUFPLFNBQVM1akIsR0FDdEIsT0FBT0EsRUFBSXJzQixRQUFRLE9BQVEsS0FHN0JoTCxFQUFRazdDLE1BQVEsU0FBUzdqQixHQUN2QixPQUFPQSxFQUFJcnNCLFFBQVEsT0FBUSxNLGdCQ1o3QixJQUFJbXdDLEVBQWdCLEVBQVEsSUFTNUJsN0MsRUFBT0QsUUFSUCxTQUF5QitMLEVBQUcvSyxFQUFHSSxHQUM3QixPQUFRSixFQUFJbTZDLEVBQWNuNkMsTUFBTytLLEVBQUluTCxPQUFPQyxlQUFla0wsRUFBRy9LLEVBQUcsQ0FDL0RHLE1BQU9DLEVBQ1BOLFlBQVksRUFDWjAyQixjQUFjLEVBQ2RDLFVBQVUsSUFDUDFyQixFQUFFL0ssR0FBS0ksRUFBRzJLLEdBRWlCOUwsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsY0NUdkcsU0FBU283QyxFQUFtQno1QyxFQUFHUCxFQUFHMkssRUFBRy9LLEVBQUdMLEVBQUdrQyxFQUFHdEMsR0FDNUMsSUFDRSxJQUFJTCxFQUFJeUIsRUFBRWtCLEdBQUd0QyxHQUNYa3NCLEVBQUl2c0IsRUFBRWlCLE1BQ1IsTUFBT1EsR0FDUCxZQUFZb0ssRUFBRXBLLEdBRWhCekIsRUFBRW00QixLQUFPajNCLEVBQUVxckIsR0FBS21OLFFBQVFDLFFBQVFwTixHQUFHMFEsS0FBS244QixFQUFHTCxHQWtCN0NWLEVBQU9ELFFBaEJQLFNBQTJCMkIsR0FDekIsT0FBTyxXQUNMLElBQUlQLEVBQUlvRixLQUNOdUYsRUFBSXpKLFVBQ04sT0FBTyxJQUFJczNCLFNBQVEsU0FBVTU0QixFQUFHTCxHQUM5QixJQUFJa0MsRUFBSWxCLEVBQUVVLE1BQU1qQixFQUFHMkssR0FDbkIsU0FBU3N2QyxFQUFNMTVDLEdBQ2J5NUMsRUFBbUJ2NEMsRUFBRzdCLEVBQUdMLEVBQUcwNkMsRUFBT0MsRUFBUSxPQUFRMzVDLEdBRXJELFNBQVMyNUMsRUFBTzM1QyxHQUNkeTVDLEVBQW1CdjRDLEVBQUc3QixFQUFHTCxFQUFHMDZDLEVBQU9DLEVBQVEsUUFBUzM1QyxHQUV0RDA1QyxPQUFNLFFBSXdCcDdDLEVBQU9ELFFBQVFzQixZQUFhLEVBQU1yQixFQUFPRCxRQUFpQixRQUFJQyxFQUFPRCxTLGNDeEJ6RyxJQU9JdTdDLEVBQ0FDLEVBUkEzaUIsRUFBVTU0QixFQUFPRCxRQUFVLEdBVS9CLFNBQVN5N0MsSUFDTCxNQUFNLElBQUkveUMsTUFBTSxtQ0FFcEIsU0FBU2d6QyxJQUNMLE1BQU0sSUFBSWh6QyxNQUFNLHFDQXNCcEIsU0FBU2l6QyxFQUFXcDFDLEdBQ2hCLEdBQUlnMUMsSUFBcUJ6aEIsV0FFckIsT0FBT0EsV0FBV3Z6QixFQUFLLEdBRzNCLElBQUtnMUMsSUFBcUJFLElBQXFCRixJQUFxQnpoQixXQUVoRSxPQURBeWhCLEVBQW1CemhCLFdBQ1pBLFdBQVd2ekIsRUFBSyxHQUUzQixJQUVJLE9BQU9nMUMsRUFBaUJoMUMsRUFBSyxHQUMvQixNQUFNd0YsR0FDSixJQUVJLE9BQU93dkMsRUFBaUJsN0MsS0FBSyxLQUFNa0csRUFBSyxHQUMxQyxNQUFNd0YsR0FFSixPQUFPd3ZDLEVBQWlCbDdDLEtBQUttRyxLQUFNRCxFQUFLLE1BdkNuRCxXQUNHLElBRVFnMUMsRUFEc0IsbUJBQWZ6aEIsV0FDWUEsV0FFQTJoQixFQUV6QixNQUFPMXZDLEdBQ0x3dkMsRUFBbUJFLEVBRXZCLElBRVFELEVBRHdCLG1CQUFqQkksYUFDY0EsYUFFQUYsRUFFM0IsTUFBTzN2QyxHQUNMeXZDLEVBQXFCRSxHQWpCN0IsR0F3RUEsSUFFSUcsRUFGQUMsRUFBUSxHQUNSQyxHQUFXLEVBRVhDLEdBQWMsRUFFbEIsU0FBU0MsSUFDQUYsR0FBYUYsSUFHbEJFLEdBQVcsRUFDUEYsRUFBYTM0QyxPQUNiNDRDLEVBQVFELEVBQWEvakMsT0FBT2drQyxHQUU1QkUsR0FBYyxFQUVkRixFQUFNNTRDLFFBQ05nNUMsS0FJUixTQUFTQSxJQUNMLElBQUlILEVBQUosQ0FHQSxJQUFJOWdCLEVBQVUwZ0IsRUFBV00sR0FDekJGLEdBQVcsRUFHWCxJQURBLElBQUl0MUMsRUFBTXExQyxFQUFNNTRDLE9BQ1Z1RCxHQUFLLENBR1AsSUFGQW8xQyxFQUFlQyxFQUNmQSxFQUFRLEtBQ0NFLEVBQWF2MUMsR0FDZG8xQyxHQUNBQSxFQUFhRyxHQUFZRyxNQUdqQ0gsR0FBYyxFQUNkdjFDLEVBQU1xMUMsRUFBTTU0QyxPQUVoQjI0QyxFQUFlLEtBQ2ZFLEdBQVcsRUFuRWYsU0FBeUJ4USxHQUNyQixHQUFJaVEsSUFBdUJJLGFBRXZCLE9BQU9BLGFBQWFyUSxHQUd4QixJQUFLaVEsSUFBdUJFLElBQXdCRixJQUF1QkksYUFFdkUsT0FEQUosRUFBcUJJLGFBQ2RBLGFBQWFyUSxHQUV4QixJQUVXaVEsRUFBbUJqUSxHQUM1QixNQUFPeC9CLEdBQ0wsSUFFSSxPQUFPeXZDLEVBQW1CbjdDLEtBQUssS0FBTWtyQyxHQUN2QyxNQUFPeC9CLEdBR0wsT0FBT3l2QyxFQUFtQm43QyxLQUFLbUcsS0FBTStrQyxLQWdEN0M2USxDQUFnQm5oQixJQWlCcEIsU0FBU29oQixFQUFLOTFDLEVBQUt1RSxHQUNmdEUsS0FBS0QsSUFBTUEsRUFDWEMsS0FBS3NFLE1BQVFBLEVBWWpCLFNBQVNvdUIsS0E1QlRMLEVBQVF5akIsU0FBVyxTQUFVLzFDLEdBQ3pCLElBQUkrQixFQUFPLElBQUk3RixNQUFNSCxVQUFVWSxPQUFTLEdBQ3hDLEdBQUlaLFVBQVVZLE9BQVMsRUFDbkIsSUFBSyxJQUFJaEQsRUFBSSxFQUFHQSxFQUFJb0MsVUFBVVksT0FBUWhELElBQ2xDb0ksRUFBS3BJLEVBQUksR0FBS29DLFVBQVVwQyxHQUdoQzQ3QyxFQUFNajRDLEtBQUssSUFBSXc0QyxFQUFLOTFDLEVBQUsrQixJQUNKLElBQWpCd3pDLEVBQU01NEMsUUFBaUI2NEMsR0FDdkJKLEVBQVdPLElBU25CRyxFQUFLdjZDLFVBQVVxNkMsSUFBTSxXQUNqQjMxQyxLQUFLRCxJQUFJbEUsTUFBTSxLQUFNbUUsS0FBS3NFLFFBRTlCK3RCLEVBQVE2QixNQUFRLFVBQ2hCN0IsRUFBUUMsU0FBVSxFQUNsQkQsRUFBUTRNLElBQU0sR0FDZDVNLEVBQVEwakIsS0FBTyxHQUNmMWpCLEVBQVF2RSxRQUFVLEdBQ2xCdUUsRUFBUUcsU0FBVyxHQUluQkgsRUFBUTJqQixHQUFLdGpCLEVBQ2JMLEVBQVE0akIsWUFBY3ZqQixFQUN0QkwsRUFBUTZqQixLQUFPeGpCLEVBQ2ZMLEVBQVE4akIsSUFBTXpqQixFQUNkTCxFQUFRK2pCLGVBQWlCMWpCLEVBQ3pCTCxFQUFRZ2tCLG1CQUFxQjNqQixFQUM3QkwsRUFBUWlrQixLQUFPNWpCLEVBQ2ZMLEVBQVFra0IsZ0JBQWtCN2pCLEVBQzFCTCxFQUFRbWtCLG9CQUFzQjlqQixFQUU5QkwsRUFBUW9rQixVQUFZLFNBQVV4OEMsR0FBUSxNQUFPLElBRTdDbzRCLEVBQVFxa0IsUUFBVSxTQUFVejhDLEdBQ3hCLE1BQU0sSUFBSWlJLE1BQU0scUNBR3BCbXdCLEVBQVFza0IsSUFBTSxXQUFjLE1BQU8sS0FDbkN0a0IsRUFBUXVrQixNQUFRLFNBQVVudkIsR0FDdEIsTUFBTSxJQUFJdmxCLE1BQU0sbUNBRXBCbXdCLEVBQVF3a0IsTUFBUSxXQUFhLE9BQU8sSSxjQ3pJcEMsSUFQaUIzeUMsRUFBTTR5QyxFQU9uQkMsRUFBWXYwQyxTQUFTbEgsVUFDckIwN0MsRUFBYzU4QyxPQUFPa0IsVUFHckIyN0MsRUFBZUYsRUFBVTc2QyxTQUd6QlgsRUFBaUJ5N0MsRUFBWXo3QyxlQUc3QjI3QyxFQUFtQkQsRUFBYXA5QyxLQUFLTyxRQU9yQys4QyxFQUFpQkgsRUFBWTk2QyxTQUc3Qms3QyxHQTNCYWx6QyxFQTJCVTlKLE9BQU84Z0MsZUEzQlg0YixFQTJCMkIxOEMsT0ExQnpDLFNBQVN5SCxHQUNkLE9BQU9xQyxFQUFLNHlDLEVBQVVqMUMsTUFpRzFCcEksRUFBT0QsUUFkUCxTQUF1Qm1CLEdBQ3JCLElBakNGLFNBQXNCQSxHQUNwQixRQUFTQSxHQUF5QixpQkFBVEEsRUFnQ3BCMDhDLENBQWExOEMsSUFuSEosbUJBb0hWdzhDLEVBQWV0OUMsS0FBS2MsSUEzRzFCLFNBQXNCQSxHQUdwQixJQUFJK2UsR0FBUyxFQUNiLEdBQWEsTUFBVC9lLEdBQTBDLG1CQUFsQkEsRUFBTXVCLFNBQ2hDLElBQ0V3ZCxLQUFZL2UsRUFBUSxJQUNwQixNQUFPNEssSUFFWCxPQUFPbVUsRUFrR3dDNDlCLENBQWEzOEMsR0FDMUQsT0FBTyxFQUVULElBQUl1cEIsRUFBUWt6QixFQUFhejhDLEdBQ3pCLEdBQWMsT0FBVnVwQixFQUNGLE9BQU8sRUFFVCxJQUFJcXpCLEVBQU9oOEMsRUFBZTFCLEtBQUtxcUIsRUFBTyxnQkFBa0JBLEVBQU02TCxZQUM5RCxNQUF1QixtQkFBUnduQixHQUNiQSxhQUFnQkEsR0FBUU4sRUFBYXA5QyxLQUFLMDlDLElBQVNMLEksY0N2SXZELFNBQVNybkIsRUFBUTExQixHQUdmLE9BQU9WLEVBQU9ELFFBQVVxMkIsRUFBVSxtQkFBcUJwMUIsUUFBVSxpQkFBbUJBLE9BQU9xMUIsU0FBVyxTQUFVMzFCLEdBQzlHLGNBQWNBLEdBQ1osU0FBVUEsR0FDWixPQUFPQSxHQUFLLG1CQUFxQk0sUUFBVU4sRUFBRTQxQixjQUFnQnQxQixRQUFVTixJQUFNTSxPQUFPYSxVQUFZLGdCQUFrQm5CLEdBQ2pIVixFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QsUUFBU3EyQixFQUFRMTFCLEdBRTNGVixFQUFPRCxRQUFVcTJCLEVBQVNwMkIsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsaUJDVC9GLHdEQUNJZytDLEVBQW9CcDlDLE9BQU9tMUIsMEJBQTRCa29CLEVBQVNyOUMsT0FBT20xQix5QkFBeUIwTixJQUFJM2hDLFVBQVcsUUFBVSxLQUN6SG84QyxFQUFVRCxHQUFVRCxHQUFzRCxtQkFBMUJBLEVBQWtCajlDLElBQXFCaTlDLEVBQWtCajlDLElBQU0sS0FDL0dvOUMsRUFBYUYsR0FBVXhhLElBQUkzaEMsVUFBVXViLFFBQ3JDK2dDLEVBQXdCLG1CQUFSMWEsS0FBc0JBLElBQUk1aEMsVUFDMUN1OEMsRUFBb0J6OUMsT0FBT20xQiwwQkFBNEJxb0IsRUFBU3g5QyxPQUFPbTFCLHlCQUF5QjJOLElBQUk1aEMsVUFBVyxRQUFVLEtBQ3pIdzhDLEVBQVVGLEdBQVVDLEdBQXNELG1CQUExQkEsRUFBa0J0OUMsSUFBcUJzOUMsRUFBa0J0OUMsSUFBTSxLQUMvR3c5QyxFQUFhSCxHQUFVMWEsSUFBSTVoQyxVQUFVdWIsUUFFckNtaEMsRUFEZ0MsbUJBQVoxbkIsU0FBMEJBLFFBQVFoMUIsVUFDNUJnMUIsUUFBUWgxQixVQUFVb2dDLElBQU0sS0FFbER1YyxFQURnQyxtQkFBWnRhLFNBQTBCQSxRQUFRcmlDLFVBQzVCcWlDLFFBQVFyaUMsVUFBVW9nQyxJQUFNLEtBRWxEd2MsRUFEZ0MsbUJBQVpDLFNBQTBCQSxRQUFRNzhDLFVBQzFCNjhDLFFBQVE3OEMsVUFBVTg4QyxNQUFRLEtBQ3REQyxFQUFpQjNpQixRQUFRcDZCLFVBQVVpQyxRQUNuQzQ1QyxFQUFpQi84QyxPQUFPa0IsVUFBVVksU0FDbENvOEMsRUFBbUI5MUMsU0FBU2xILFVBQVVZLFNBQ3RDcThDLEVBQVMvM0IsT0FBT2xsQixVQUFVaUosTUFDMUJpMEMsRUFBU2g0QixPQUFPbGxCLFVBQVUwRyxNQUMxQnkyQyxFQUFXajRCLE9BQU9sbEIsVUFBVWtKLFFBQzVCazBDLEVBQWVsNEIsT0FBT2xsQixVQUFVMnVCLFlBQ2hDMHVCLEVBQWVuNEIsT0FBT2xsQixVQUFVMk0sWUFDaEMyd0MsRUFBUXh1QyxPQUFPOU8sVUFBVTBKLEtBQ3pCNnpDLEVBQVU1OEMsTUFBTVgsVUFBVWdXLE9BQzFCd25DLEVBQVE3OEMsTUFBTVgsVUFBVTJHLEtBQ3hCODJDLEVBQVk5OEMsTUFBTVgsVUFBVTBHLE1BQzVCZzNDLEVBQVM3MUMsS0FBSzBILE1BQ2RvdUMsRUFBa0MsbUJBQVhDLE9BQXdCQSxPQUFPNTlDLFVBQVVpQyxRQUFVLEtBQzFFNDdDLEVBQU8vK0MsT0FBT2cxQixzQkFDZGdxQixFQUFnQyxtQkFBWDMrQyxRQUFvRCxpQkFBcEJBLE9BQU9xMUIsU0FBd0JyMUIsT0FBT2EsVUFBVVksU0FBVyxLQUNoSG05QyxFQUFzQyxtQkFBWDUrQyxRQUFvRCxpQkFBcEJBLE9BQU9xMUIsU0FFbEVwMUIsRUFBZ0MsbUJBQVhELFFBQXlCQSxPQUFPQyxxQkFBdUJELE9BQU9DLGNBQWdCMitDLEdBQStCLFVBQ2hJNStDLE9BQU9DLFlBQ1AsS0FDRjQrQyxFQUFlbC9DLE9BQU9rQixVQUFVNi9CLHFCQUVoQ29lLEdBQTBCLG1CQUFaQyxRQUF5QkEsUUFBUXRlLGVBQWlCOWdDLE9BQU84Z0Msa0JBQ3ZFLEdBQUc1SixZQUFjcjFCLE1BQU1YLFVBQ2pCLFNBQVVtK0MsR0FDUixPQUFPQSxFQUFFbm9CLFdBRVgsTUFHVixTQUFTb29CLEVBQW9CQyxFQUFLOW9CLEdBQzlCLEdBQ0k4b0IsSUFBUUMsS0FDTEQsS0FBU0MsS0FDVEQsR0FBUUEsR0FDUEEsR0FBT0EsR0FBTyxLQUFRQSxFQUFNLEtBQzdCZixFQUFNLytDLEtBQUssSUFBS2czQixHQUVuQixPQUFPQSxFQUVYLElBQUlncEIsRUFBVyxtQ0FDZixHQUFtQixpQkFBUkYsRUFBa0IsQ0FDekIsSUFBSUcsRUFBTUgsRUFBTSxHQUFLWCxHQUFRVyxHQUFPWCxFQUFPVyxHQUMzQyxHQUFJRyxJQUFRSCxFQUFLLENBQ2IsSUFBSUksRUFBU3Y1QixPQUFPczVCLEdBQ2hCRSxFQUFNeEIsRUFBTzMrQyxLQUFLZzNCLEVBQUtrcEIsRUFBT3I5QyxPQUFTLEdBQzNDLE9BQU8rN0MsRUFBUzUrQyxLQUFLa2dELEVBQVFGLEVBQVUsT0FBUyxJQUFNcEIsRUFBUzUrQyxLQUFLNCtDLEVBQVM1K0MsS0FBS21nRCxFQUFLLGNBQWUsT0FBUSxLQUFNLEtBRzVILE9BQU92QixFQUFTNStDLEtBQUtnM0IsRUFBS2dwQixFQUFVLE9BR3hDLElBQUlJLEVBQWMsRUFBUSxLQUN0QkMsRUFBZ0JELEVBQVlFLE9BQzVCQyxFQUFnQkMsRUFBU0gsR0FBaUJBLEVBQWdCLEtBRTFESSxFQUFTLENBQ1RocEIsVUFBVyxLQUNYLE9BQVUsSUFDVmlwQixPQUFRLEtBRVJDLEVBQVcsQ0FDWGxwQixVQUFXLEtBQ1gsT0FBVSxXQUNWaXBCLE9BQVEsWUF3TVosU0FBU0UsRUFBV2gvQyxFQUFHaS9DLEVBQWNDLEdBQ2pDLElBQUk3SyxFQUFRNkssRUFBS0MsWUFBY0YsRUFDM0JHLEVBQVlQLEVBQU94SyxHQUN2QixPQUFPK0ssRUFBWXAvQyxFQUFJby9DLEVBRzNCLFNBQVNDLEVBQU1yL0MsR0FDWCxPQUFPZzlDLEVBQVM1K0MsS0FBSzJtQixPQUFPL2tCLEdBQUksS0FBTSxVQUcxQyxTQUFTcy9DLEVBQWlCditDLEdBQ3RCLE9BQVE5QixLQUFnQyxpQkFBUjhCLElBQXFCOUIsS0FBZThCLFFBQW1DLElBQXJCQSxFQUFJOUIsS0FFMUYsU0FBU3FCLEVBQVFTLEdBQU8sTUFBc0IsbUJBQWZ3K0MsRUFBTXgrQyxJQUE2QnUrQyxFQUFpQnYrQyxHQUVuRixTQUFTeStDLEVBQVN6K0MsR0FBTyxNQUFzQixvQkFBZncrQyxFQUFNeCtDLElBQThCdStDLEVBQWlCditDLEdBT3JGLFNBQVM2OUMsRUFBUzc5QyxHQUNkLEdBQUk2OEMsRUFDQSxPQUFPNzhDLEdBQXNCLGlCQUFSQSxHQUFvQkEsYUFBZS9CLE9BRTVELEdBQW1CLGlCQUFSK0IsRUFDUCxPQUFPLEVBRVgsSUFBS0EsR0FBc0IsaUJBQVJBLElBQXFCNDhDLEVBQ3BDLE9BQU8sRUFFWCxJQUVJLE9BREFBLEVBQVl2L0MsS0FBSzJDLElBQ1YsRUFDVCxNQUFPK0ksSUFDVCxPQUFPLEVBek9YOUwsRUFBT0QsUUFBVSxTQUFTMGhELEVBQVMxK0MsRUFBS3EzQixFQUFTc25CLEVBQU9DLEdBQ3BELElBQUlULEVBQU85bUIsR0FBVyxHQUV0QixHQUFJNkgsRUFBSWlmLEVBQU0sZ0JBQWtCamYsRUFBSTRlLEVBQVFLLEVBQUtDLFlBQzdDLE1BQU0sSUFBSXhwQixVQUFVLG9EQUV4QixHQUNJc0ssRUFBSWlmLEVBQU0scUJBQXVELGlCQUF6QkEsRUFBS1UsZ0JBQ3ZDVixFQUFLVSxnQkFBa0IsR0FBS1YsRUFBS1Usa0JBQW9CekIsSUFDNUIsT0FBekJlLEVBQUtVLGlCQUdYLE1BQU0sSUFBSWpxQixVQUFVLDBGQUV4QixJQUFJa3FCLEdBQWdCNWYsRUFBSWlmLEVBQU0sa0JBQW1CQSxFQUFLVyxjQUN0RCxHQUE2QixrQkFBbEJBLEdBQWlELFdBQWxCQSxFQUN0QyxNQUFNLElBQUlscUIsVUFBVSxpRkFHeEIsR0FDSXNLLEVBQUlpZixFQUFNLFdBQ1MsT0FBaEJBLEVBQUtZLFFBQ1csT0FBaEJaLEVBQUtZLFVBQ0gzdkMsU0FBUyt1QyxFQUFLWSxPQUFRLE1BQVFaLEVBQUtZLFFBQVVaLEVBQUtZLE9BQVMsR0FFaEUsTUFBTSxJQUFJbnFCLFVBQVUsNERBRXhCLEdBQUlzSyxFQUFJaWYsRUFBTSxxQkFBd0Qsa0JBQTFCQSxFQUFLYSxpQkFDN0MsTUFBTSxJQUFJcHFCLFVBQVUscUVBRXhCLElBQUlvcUIsRUFBbUJiLEVBQUthLGlCQUU1QixRQUFtQixJQUFSaC9DLEVBQ1AsTUFBTyxZQUVYLEdBQVksT0FBUkEsRUFDQSxNQUFPLE9BRVgsR0FBbUIsa0JBQVJBLEVBQ1AsT0FBT0EsRUFBTSxPQUFTLFFBRzFCLEdBQW1CLGlCQUFSQSxFQUNQLE9BdVRSLFNBQVNpL0MsRUFBYzVxQixFQUFLOHBCLEdBQ3hCLEdBQUk5cEIsRUFBSW4wQixPQUFTaStDLEVBQUtVLGdCQUFpQixDQUNuQyxJQUFJSyxFQUFZN3FCLEVBQUluMEIsT0FBU2krQyxFQUFLVSxnQkFDOUJNLEVBQVUsT0FBU0QsRUFBWSxtQkFBcUJBLEVBQVksRUFBSSxJQUFNLElBQzlFLE9BQU9ELEVBQWNqRCxFQUFPMytDLEtBQUtnM0IsRUFBSyxFQUFHOHBCLEVBQUtVLGlCQUFrQlYsR0FBUWdCLEVBRTVFLElBQUlDLEVBQVVwQixFQUFTRyxFQUFLQyxZQUFjLFVBSTFDLE9BSEFnQixFQUFRNzJDLFVBQVksRUFHYjAxQyxFQURDaEMsRUFBUzUrQyxLQUFLNCtDLEVBQVM1K0MsS0FBS2czQixFQUFLK3FCLEVBQVMsUUFBUyxlQUFnQkMsR0FDdEQsU0FBVWxCLEdBalVwQmMsQ0FBY2ovQyxFQUFLbStDLEdBRTlCLEdBQW1CLGlCQUFSbitDLEVBQWtCLENBQ3pCLEdBQVksSUFBUkEsRUFDQSxPQUFPbzlDLElBQVdwOUMsRUFBTSxFQUFJLElBQU0sS0FFdEMsSUFBSXEwQixFQUFNclEsT0FBT2hrQixHQUNqQixPQUFPZy9DLEVBQW1COUIsRUFBb0JsOUMsRUFBS3EwQixHQUFPQSxFQUU5RCxHQUFtQixpQkFBUnIwQixFQUFrQixDQUN6QixJQUFJcy9DLEVBQVl0N0IsT0FBT2hrQixHQUFPLElBQzlCLE9BQU9nL0MsRUFBbUI5QixFQUFvQmw5QyxFQUFLcy9DLEdBQWFBLEVBR3BFLElBQUlDLE9BQWlDLElBQWZwQixFQUFLUSxNQUF3QixFQUFJUixFQUFLUSxNQUU1RCxRQURxQixJQUFWQSxJQUF5QkEsRUFBUSxHQUN4Q0EsR0FBU1ksR0FBWUEsRUFBVyxHQUFvQixpQkFBUnYvQyxFQUM1QyxPQUFPVCxFQUFRUyxHQUFPLFVBQVksV0FHdEMsSUFBSSsrQyxFQW1WUixTQUFtQlosRUFBTVEsR0FDckIsSUFBSWEsRUFDSixHQUFvQixPQUFoQnJCLEVBQUtZLE9BQ0xTLEVBQWEsU0FDVixNQUEyQixpQkFBaEJyQixFQUFLWSxRQUF1QlosRUFBS1ksT0FBUyxHQUd4RCxPQUFPLEtBRlBTLEVBQWFsRCxFQUFNai9DLEtBQUtvQyxNQUFNMCtDLEVBQUtZLE9BQVMsR0FBSSxLQUlwRCxNQUFPLENBQ0g5N0IsS0FBTXU4QixFQUNOelgsS0FBTXVVLEVBQU1qL0MsS0FBS29DLE1BQU1rL0MsRUFBUSxHQUFJYSxJQTlWMUJDLENBQVV0QixFQUFNUSxHQUU3QixRQUFvQixJQUFUQyxFQUNQQSxFQUFPLFFBQ0osR0FBSXZ2QyxFQUFRdXZDLEVBQU01K0MsSUFBUSxFQUM3QixNQUFPLGFBR1gsU0FBU2txQixFQUFRL3JCLEVBQU8yRixFQUFNNDdDLEdBSzFCLEdBSkk1N0MsSUFDQTg2QyxFQUFPckMsRUFBVWwvQyxLQUFLdWhELElBQ2pCLzlDLEtBQUtpRCxHQUVWNDdDLEVBQVUsQ0FDVixJQUFJQyxFQUFVLENBQ1ZoQixNQUFPUixFQUFLUSxPQUtoQixPQUhJemYsRUFBSWlmLEVBQU0sZ0JBQ1Z3QixFQUFRdkIsV0FBYUQsRUFBS0MsWUFFdkJNLEVBQVN2Z0QsRUFBT3doRCxFQUFTaEIsRUFBUSxFQUFHQyxHQUUvQyxPQUFPRixFQUFTdmdELEVBQU9nZ0QsRUFBTVEsRUFBUSxFQUFHQyxHQUc1QyxHQUFtQixtQkFBUjUrQyxJQUF1QnkrQyxFQUFTeitDLEdBQU0sQ0FDN0MsSUFBSXZDLEdBdUtaLFNBQWdCOCtCLEdBQ1osR0FBSUEsRUFBRTkrQixLQUFRLE9BQU84K0IsRUFBRTkrQixLQUN2QixJQUFJSCxFQUFJeStDLEVBQU8xK0MsS0FBS3krQyxFQUFpQnorQyxLQUFLay9CLEdBQUksd0JBQzlDLEdBQUlqL0IsRUFBSyxPQUFPQSxFQUFFLEdBQ2xCLE9BQU8sS0EzS1FzaUQsQ0FBTzUvQyxHQUNkNEYsR0FBT2k2QyxHQUFXNy9DLEVBQUtrcUIsR0FDM0IsTUFBTyxhQUFlenNCLEdBQU8sS0FBT0EsR0FBTyxnQkFBa0IsS0FBT21JLEdBQUsxRixPQUFTLEVBQUksTUFBUW84QyxFQUFNai9DLEtBQUt1SSxHQUFNLE1BQVEsS0FBTyxJQUVsSSxHQUFJaTRDLEVBQVM3OUMsR0FBTSxDQUNmLElBQUk4L0MsR0FBWWpELEVBQW9CWixFQUFTNStDLEtBQUsybUIsT0FBT2hrQixHQUFNLHlCQUEwQixNQUFRNDhDLEVBQVl2L0MsS0FBSzJDLEdBQ2xILE1BQXNCLGlCQUFSQSxHQUFxQjY4QyxFQUEyQ2lELEdBQXZCQyxFQUFVRCxJQUVyRSxHQXlQSixTQUFtQnJ1QyxHQUNmLElBQUtBLEdBQWtCLGlCQUFOQSxFQUFrQixPQUFPLEVBQzFDLEdBQTJCLG9CQUFoQnV1QyxhQUErQnZ1QyxhQUFhdXVDLFlBQ25ELE9BQU8sRUFFWCxNQUE2QixpQkFBZnZ1QyxFQUFFd3VDLFVBQW1ELG1CQUFuQnh1QyxFQUFFdzZCLGFBOVA5Q2lVLENBQVVsZ0QsR0FBTSxDQUdoQixJQUZBLElBQUlmLEdBQUksSUFBTWs5QyxFQUFhOStDLEtBQUsybUIsT0FBT2hrQixFQUFJaWdELFdBQ3ZDeFIsR0FBUXp1QyxFQUFJbWdELFlBQWMsR0FDckJqakQsR0FBSSxFQUFHQSxHQUFJdXhDLEdBQU12dUMsT0FBUWhELEtBQzlCK0IsSUFBSyxJQUFNd3ZDLEdBQU12eEMsSUFBR08sS0FBTyxJQUFNd2dELEVBQVdLLEVBQU03UCxHQUFNdnhDLElBQUdpQixPQUFRLFNBQVVnZ0QsR0FLakYsT0FIQWwvQyxJQUFLLElBQ0RlLEVBQUlvZ0QsWUFBY3BnRCxFQUFJb2dELFdBQVdsZ0QsU0FBVWpCLElBQUssT0FDcERBLElBQUssS0FBT2s5QyxFQUFhOStDLEtBQUsybUIsT0FBT2hrQixFQUFJaWdELFdBQWEsSUFHMUQsR0FBSTFnRCxFQUFRUyxHQUFNLENBQ2QsR0FBbUIsSUFBZkEsRUFBSUUsT0FBZ0IsTUFBTyxLQUMvQixJQUFJbWdELEdBQUtSLEdBQVc3L0MsRUFBS2txQixHQUN6QixPQUFJNjBCLElBMFJaLFNBQTBCc0IsR0FDdEIsSUFBSyxJQUFJbmpELEVBQUksRUFBR0EsRUFBSW1qRCxFQUFHbmdELE9BQVFoRCxJQUMzQixHQUFJbVMsRUFBUWd4QyxFQUFHbmpELEdBQUksT0FBUyxFQUN4QixPQUFPLEVBR2YsT0FBTyxFQWhTWW9qRCxDQUFpQkQsSUFDckIsSUFBTUUsR0FBYUYsR0FBSXRCLEdBQVUsSUFFckMsS0FBT3pDLEVBQU1qL0MsS0FBS2dqRCxHQUFJLE1BQVEsS0FFekMsR0FpR0osU0FBaUJyZ0QsR0FBTyxNQUFzQixtQkFBZncrQyxFQUFNeCtDLElBQTZCdStDLEVBQWlCditDLEdBakczRXdnRCxDQUFReGdELEdBQU0sQ0FDZCxJQUFJaWlCLEdBQVE0OUIsR0FBVzcvQyxFQUFLa3FCLEdBQzVCLE1BQU0sVUFBV3hrQixNQUFNNUcsYUFBYyxVQUFXa0IsSUFBUTg4QyxFQUFhei9DLEtBQUsyQyxFQUFLLFNBRzFELElBQWpCaWlCLEdBQU0vaEIsT0FBdUIsSUFBTThqQixPQUFPaGtCLEdBQU8sSUFDOUMsTUFBUWdrQixPQUFPaGtCLEdBQU8sS0FBT3M4QyxFQUFNai9DLEtBQUs0a0IsR0FBTyxNQUFRLEtBSG5ELE1BQVErQixPQUFPaGtCLEdBQU8sS0FBT3M4QyxFQUFNai9DLEtBQUtnL0MsRUFBUWgvQyxLQUFLLFlBQWM2c0IsRUFBUWxxQixFQUFJeWdELE9BQVF4K0IsSUFBUSxNQUFRLEtBS3RILEdBQW1CLGlCQUFSamlCLEdBQW9COCtDLEVBQWUsQ0FDMUMsR0FBSWxCLEdBQStDLG1CQUF2QjU5QyxFQUFJNDlDLElBQWlDSCxFQUM3RCxPQUFPQSxFQUFZejlDLEVBQUssQ0FBRTIrQyxNQUFPWSxFQUFXWixJQUN6QyxHQUFzQixXQUFsQkcsR0FBcUQsbUJBQWhCOStDLEVBQUlrcUIsUUFDaEQsT0FBT2xxQixFQUFJa3FCLFVBR25CLEdBNElKLFNBQWV6WSxHQUNYLElBQUt5cEMsSUFBWXpwQyxHQUFrQixpQkFBTkEsRUFDekIsT0FBTyxFQUVYLElBQ0l5cEMsRUFBUTc5QyxLQUFLb1UsR0FDYixJQUNJNnBDLEVBQVFqK0MsS0FBS29VLEdBQ2YsTUFBT3hTLEdBQ0wsT0FBTyxFQUVYLE9BQU93UyxhQUFhZ3ZCLElBQ3RCLE1BQU8xM0IsSUFDVCxPQUFPLEVBekpIMjNDLENBQU0xZ0QsR0FBTSxDQUNaLElBQUkyZ0QsR0FBVyxHQU1mLE9BTEl4RixHQUNBQSxFQUFXOTlDLEtBQUsyQyxHQUFLLFNBQVU3QixFQUFPTSxHQUNsQ2tpRCxHQUFTOS9DLEtBQUtxcEIsRUFBUXpyQixFQUFLdUIsR0FBSyxHQUFRLE9BQVNrcUIsRUFBUS9yQixFQUFPNkIsT0FHakU0Z0QsRUFBYSxNQUFPMUYsRUFBUTc5QyxLQUFLMkMsR0FBTTJnRCxHQUFVNUIsR0FFNUQsR0E4S0osU0FBZXR0QyxHQUNYLElBQUs2cEMsSUFBWTdwQyxHQUFrQixpQkFBTkEsRUFDekIsT0FBTyxFQUVYLElBQ0k2cEMsRUFBUWorQyxLQUFLb1UsR0FDYixJQUNJeXBDLEVBQVE3OUMsS0FBS29VLEdBQ2YsTUFBT25VLEdBQ0wsT0FBTyxFQUVYLE9BQU9tVSxhQUFhaXZCLElBQ3RCLE1BQU8zM0IsSUFDVCxPQUFPLEVBM0xIODNDLENBQU03Z0QsR0FBTSxDQUNaLElBQUk4Z0QsR0FBVyxHQU1mLE9BTEl2RixHQUNBQSxFQUFXbCtDLEtBQUsyQyxHQUFLLFNBQVU3QixHQUMzQjJpRCxHQUFTamdELEtBQUtxcEIsRUFBUS9yQixFQUFPNkIsT0FHOUI0Z0QsRUFBYSxNQUFPdEYsRUFBUWorQyxLQUFLMkMsR0FBTThnRCxHQUFVL0IsR0FFNUQsR0EwSUosU0FBbUJ0dEMsR0FDZixJQUFLK3BDLElBQWUvcEMsR0FBa0IsaUJBQU5BLEVBQzVCLE9BQU8sRUFFWCxJQUNJK3BDLEVBQVduK0MsS0FBS29VLEVBQUcrcEMsR0FDbkIsSUFDSUMsRUFBV3ArQyxLQUFLb1UsRUFBR2dxQyxHQUNyQixNQUFPeDhDLEdBQ0wsT0FBTyxFQUVYLE9BQU93UyxhQUFhcWlCLFFBQ3RCLE1BQU8vcUIsSUFDVCxPQUFPLEVBdkpIZzRDLENBQVUvZ0QsR0FDVixPQUFPZ2hELEVBQWlCLFdBRTVCLEdBa0xKLFNBQW1CdnZDLEdBQ2YsSUFBS2dxQyxJQUFlaHFDLEdBQWtCLGlCQUFOQSxFQUM1QixPQUFPLEVBRVgsSUFDSWdxQyxFQUFXcCtDLEtBQUtvVSxFQUFHZ3FDLEdBQ25CLElBQ0lELEVBQVduK0MsS0FBS29VLEVBQUcrcEMsR0FDckIsTUFBT3Y4QyxHQUNMLE9BQU8sRUFFWCxPQUFPd1MsYUFBYTB2QixRQUN0QixNQUFPcDRCLElBQ1QsT0FBTyxFQS9MSGs0QyxDQUFVamhELEdBQ1YsT0FBT2doRCxFQUFpQixXQUU1QixHQW9KSixTQUFtQnZ2QyxHQUNmLElBQUtpcUMsSUFBaUJqcUMsR0FBa0IsaUJBQU5BLEVBQzlCLE9BQU8sRUFFWCxJQUVJLE9BREFpcUMsRUFBYXIrQyxLQUFLb1UsSUFDWCxFQUNULE1BQU8xSSxJQUNULE9BQU8sRUE1SkhtNEMsQ0FBVWxoRCxHQUNWLE9BQU9naEQsRUFBaUIsV0FFNUIsR0F5REosU0FBa0JoaEQsR0FBTyxNQUFzQixvQkFBZncrQyxFQUFNeCtDLElBQThCdStDLEVBQWlCditDLEdBekQ3RUssQ0FBU0wsR0FDVCxPQUFPKy9DLEVBQVU3MUIsRUFBUWkzQixPQUFPbmhELEtBRXBDLEdBMkVKLFNBQWtCQSxHQUNkLElBQUtBLEdBQXNCLGlCQUFSQSxJQUFxQnk4QyxFQUNwQyxPQUFPLEVBRVgsSUFFSSxPQURBQSxFQUFjcC9DLEtBQUsyQyxJQUNaLEVBQ1QsTUFBTytJLElBQ1QsT0FBTyxFQW5GSHE0QyxDQUFTcGhELEdBQ1QsT0FBTysvQyxFQUFVNzFCLEVBQVF1eUIsRUFBY3AvQyxLQUFLMkMsS0FFaEQsR0FvREosU0FBbUJBLEdBQU8sTUFBc0IscUJBQWZ3K0MsRUFBTXgrQyxJQUErQnUrQyxFQUFpQnYrQyxHQXBEL0VxaEQsQ0FBVXJoRCxHQUNWLE9BQU8rL0MsRUFBVWxFLEVBQWV4K0MsS0FBSzJDLElBRXpDLEdBK0NKLFNBQWtCQSxHQUFPLE1BQXNCLG9CQUFmdytDLEVBQU14K0MsSUFBOEJ1K0MsRUFBaUJ2K0MsR0EvQzdFK2pCLENBQVMvakIsR0FDVCxPQUFPKy9DLEVBQVU3MUIsRUFBUWxHLE9BQU9oa0IsS0FJcEMsR0FBc0Isb0JBQVhrOUIsUUFBMEJsOUIsSUFBUWs5QixPQUN6QyxNQUFPLHNCQUVYLEdBQzJCLG9CQUFmNkMsWUFBOEIvL0IsSUFBUSsvQixpQkFDeEIsSUFBWEUsR0FBMEJqZ0MsSUFBUWlnQyxFQUU3QyxNQUFPLDBCQUVYLElBOEJKLFNBQWdCamdDLEdBQU8sTUFBc0Isa0JBQWZ3K0MsRUFBTXgrQyxJQUE0QnUrQyxFQUFpQnYrQyxHQTlCeEVNLENBQU9OLEtBQVN5K0MsRUFBU3orQyxHQUFNLENBQ2hDLElBQUlzaEQsR0FBS3pCLEdBQVc3L0MsRUFBS2txQixHQUNyQitYLEdBQWdCOGEsRUFBTUEsRUFBSS84QyxLQUFTcEMsT0FBT2tCLFVBQVlrQixhQUFlcEMsUUFBVW9DLEVBQUl1ekIsY0FBZ0IzMUIsT0FDbkcyakQsR0FBV3ZoRCxhQUFlcEMsT0FBUyxHQUFLLGlCQUN4QzRqRCxJQUFhdmYsSUFBaUIvakMsR0FBZU4sT0FBT29DLEtBQVNBLEdBQU85QixLQUFlOEIsRUFBTWc4QyxFQUFPMytDLEtBQUttaEQsRUFBTXgrQyxHQUFNLEdBQUksR0FBS3VoRCxHQUFXLFNBQVcsR0FFaEp4YixJQURpQjlELElBQTRDLG1CQUFwQmppQyxFQUFJdXpCLFlBQTZCLEdBQUt2ekIsRUFBSXV6QixZQUFZOTFCLEtBQU91QyxFQUFJdXpCLFlBQVk5MUIsS0FBTyxJQUFNLEtBQzNHK2pELElBQWFELEdBQVcsSUFBTWpGLEVBQU1qL0MsS0FBS2cvQyxFQUFRaC9DLEtBQUssR0FBSW1rRCxJQUFhLEdBQUlELElBQVksSUFBSyxNQUFRLEtBQU8sSUFDdkksT0FBa0IsSUFBZEQsR0FBR3BoRCxPQUF1QjZsQyxHQUFNLEtBQ2hDZ1osRUFDT2haLEdBQU0sSUFBTXdhLEdBQWFlLEdBQUl2QyxHQUFVLElBRTNDaFosR0FBTSxLQUFPdVcsRUFBTWovQyxLQUFLaWtELEdBQUksTUFBUSxLQUUvQyxPQUFPdDlCLE9BQU9oa0IsSUFxRGxCLElBQUl5aEQsRUFBUzdqRCxPQUFPa0IsVUFBVUMsZ0JBQWtCLFNBQVVOLEdBQU8sT0FBT0EsS0FBTytFLE1BQy9FLFNBQVMwN0IsRUFBSWwvQixFQUFLdkIsR0FDZCxPQUFPZ2pELEVBQU9wa0QsS0FBSzJDLEVBQUt2QixHQUc1QixTQUFTKy9DLEVBQU14K0MsR0FDWCxPQUFPMjZDLEVBQWV0OUMsS0FBSzJDLEdBVS9CLFNBQVNxUCxFQUFRZ3hDLEVBQUk1dUMsR0FDakIsR0FBSTR1QyxFQUFHaHhDLFFBQVcsT0FBT2d4QyxFQUFHaHhDLFFBQVFvQyxHQUNwQyxJQUFLLElBQUl2VSxFQUFJLEVBQUdDLEVBQUlrakQsRUFBR25nRCxPQUFRaEQsRUFBSUMsRUFBR0QsSUFDbEMsR0FBSW1qRCxFQUFHbmpELEtBQU91VSxFQUFLLE9BQU92VSxFQUU5QixPQUFRLEVBbUdaLFNBQVNtaUQsRUFBUTloRCxHQUNiLElBQUlvQixFQUFJcEIsRUFBRTZ3QyxXQUFXLEdBQ2pCMzhCLEVBQUksQ0FDSml3QyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLEdBQUksS0FDTm5qRCxHQUNGLE9BQUk4UyxFQUFZLEtBQU9BLEVBQ2hCLE9BQVM5UyxFQUFJLEdBQU8sSUFBTSxJQUFNdTlDLEVBQWE3K0MsS0FBS3NCLEVBQUVlLFNBQVMsS0FHeEUsU0FBU3FnRCxFQUFVMXJCLEdBQ2YsTUFBTyxVQUFZQSxFQUFNLElBRzdCLFNBQVMyc0IsRUFBaUIzcUIsR0FDdEIsT0FBT0EsRUFBTyxTQUdsQixTQUFTdXFCLEVBQWF2cUIsRUFBTXVLLEVBQU1taEIsRUFBU2hELEdBRXZDLE9BQU8xb0IsRUFBTyxLQUFPdUssRUFBTyxPQURSbWUsRUFBU3dCLEdBQWF3QixFQUFTaEQsR0FBVXpDLEVBQU1qL0MsS0FBSzBrRCxFQUFTLE9BQzdCLElBMkJ4RCxTQUFTeEIsR0FBYUYsRUFBSXRCLEdBQ3RCLEdBQWtCLElBQWRzQixFQUFHbmdELE9BQWdCLE1BQU8sR0FDOUIsSUFBSThoRCxFQUFhLEtBQU9qRCxFQUFPaFgsS0FBT2dYLEVBQU85N0IsS0FDN0MsT0FBTysrQixFQUFhMUYsRUFBTWovQyxLQUFLZ2pELEVBQUksSUFBTTJCLEdBQWMsS0FBT2pELEVBQU9oWCxLQUd6RSxTQUFTOFgsR0FBVzcvQyxFQUFLa3FCLEdBQ3JCLElBQUkrM0IsRUFBUTFpRCxFQUFRUyxHQUNoQnFnRCxFQUFLLEdBQ1QsR0FBSTRCLEVBQU8sQ0FDUDVCLEVBQUduZ0QsT0FBU0YsRUFBSUUsT0FDaEIsSUFBSyxJQUFJaEQsRUFBSSxFQUFHQSxFQUFJOEMsRUFBSUUsT0FBUWhELElBQzVCbWpELEVBQUduakQsR0FBS2dpQyxFQUFJbC9CLEVBQUs5QyxHQUFLZ3RCLEVBQVFscUIsRUFBSTlDLEdBQUk4QyxHQUFPLEdBR3JELElBQ0lraUQsRUFEQUMsRUFBdUIsbUJBQVR4RixFQUFzQkEsRUFBSzM4QyxHQUFPLEdBRXBELEdBQUk2OEMsRUFBbUIsQ0FDbkJxRixFQUFTLEdBQ1QsSUFBSyxJQUFJL2hELEVBQUksRUFBR0EsRUFBSWdpRCxFQUFLamlELE9BQVFDLElBQzdCK2hELEVBQU8sSUFBTUMsRUFBS2hpRCxJQUFNZ2lELEVBQUtoaUQsR0FJckMsSUFBSyxJQUFJMUIsS0FBT3VCLEVBQ1BrL0IsRUFBSWwvQixFQUFLdkIsS0FDVndqRCxHQUFTaitCLE9BQU9tOUIsT0FBTzFpRCxNQUFVQSxHQUFPQSxFQUFNdUIsRUFBSUUsUUFDbEQyOEMsR0FBcUJxRixFQUFPLElBQU16akQsYUFBZ0JSLFNBRzNDbStDLEVBQU0vK0MsS0FBSyxTQUFVb0IsR0FDNUI0aEQsRUFBR3gvQyxLQUFLcXBCLEVBQVF6ckIsRUFBS3VCLEdBQU8sS0FBT2txQixFQUFRbHFCLEVBQUl2QixHQUFNdUIsSUFFckRxZ0QsRUFBR3gvQyxLQUFLcEMsRUFBTSxLQUFPeXJCLEVBQVFscUIsRUFBSXZCLEdBQU11QixNQUcvQyxHQUFvQixtQkFBVDI4QyxFQUNQLElBQUssSUFBSXBpQyxFQUFJLEVBQUdBLEVBQUk0bkMsRUFBS2ppRCxPQUFRcWEsSUFDekJ1aUMsRUFBYXovQyxLQUFLMkMsRUFBS21pRCxFQUFLNW5DLEtBQzVCOGxDLEVBQUd4L0MsS0FBSyxJQUFNcXBCLEVBQVFpNEIsRUFBSzVuQyxJQUFNLE1BQVEyUCxFQUFRbHFCLEVBQUltaUQsRUFBSzVuQyxJQUFLdmEsSUFJM0UsT0FBT3FnRCxLLCtDQzVoQlgsSUFBSStCLEVBQWlCLEVBQVEsS0FFN0JubEQsRUFBT0QsUUFBVWdKLFNBQVNsSCxVQUFVSixNQUFRMGpELEcsNkJDRjVDbmxELEVBQU9ELFFBSVAsU0FBaUI0NkMsR0FDZixJQUFJMVUsRUFBNEIsaUJBQWQwVSxFQUF5QkEsRUFBVXhKLFdBQVcsR0FBS3dKLEVBRXJFLE9BQU8xVSxHQUFRLElBQU1BLEdBQVEsSyw2QkNQL0JqbUMsRUFBT0QsUUFBVXFsRCxFQUVqQixJQUFJQyxFQUFlLEVBQVEsS0FFdkJDLEVBQVdELEVBQWFDLFNBQ3hCQyxFQUFPRixFQUFhRSxLQUNwQkMsRUFBT0gsRUFBYUcsS0FNeEIsU0FBU0osRUFBTUssRUFBTWw2QyxFQUFNbTZDLEVBQVNDLEdBQ2QsbUJBQVRwNkMsR0FBMEMsbUJBQVptNkMsSUFDdkNDLEVBQVVELEVBQ1ZBLEVBQVVuNkMsRUFDVkEsRUFBTyxNQUdUODVDLEVBQWFJLEVBQU1sNkMsR0FFbkIsU0FBa0J5dEIsRUFBTTRzQixHQUN0QixJQUFJQyxFQUFTRCxFQUFRQSxFQUFRM2lELE9BQVMsR0FDbEM0c0IsRUFBUWcyQixFQUFTQSxFQUFPcFIsU0FBU3JpQyxRQUFRNG1CLEdBQVEsS0FDckQsT0FBTzBzQixFQUFRMXNCLEVBQU1uSixFQUFPZzJCLEtBTEtGLEdBWHJDUCxFQUFNRSxTQUFXQSxFQUNqQkYsRUFBTUcsS0FBT0EsRUFDYkgsRUFBTUksS0FBT0EsRyw2QkNUWHhsRCxFQUFPRCxRQUFVLEVBQVEsTSxnQkNIM0IsSUFBSStsRCxFQUFpQixFQUFRLEtBQ3pCQyxFQUF1QixFQUFRLEtBQy9CQyxFQUE2QixFQUFRLEtBQ3JDQyxFQUFrQixFQUFRLEtBSTlCam1ELEVBQU9ELFFBSFAsU0FBd0JnQixFQUFHK0ssR0FDekIsT0FBT2c2QyxFQUFlL2tELElBQU1nbEQsRUFBcUJobEQsRUFBRytLLElBQU1rNkMsRUFBMkJqbEQsRUFBRytLLElBQU1tNkMsS0FFL0RqbUQsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsNkJDTHRHLElBRUltbUQsRUFBVSxFQUFRLElBRWxCQyxFQUFTLEVBQVEsS0FDakJDLEVBQWEsRUFBUSxLQUNyQkMsRUFBYyxFQUFRLEtBQ3RCQyxFQUFrQixFQUFRLEtBQzFCQyxFQUFlLEVBQVEsS0FDdkJDLEVBQWEsRUFBUSxHQUNyQkMsRUFBWSxFQUFRLEtBRXBCOThDLEVBQU0sRUFBUSxLQUNkeUgsRUFBUSxFQUFRLEtBQ2hCdEgsRUFBTSxFQUFRLEtBQ2QrTCxFQUFNLEVBQVEsS0FDZGhNLEVBQU0sRUFBUSxLQUNkMmEsRUFBUSxFQUFRLEtBQ2hCSSxFQUFPLEVBQVEsS0FFZjhoQyxFQUFZMzlDLFNBR1o0OUMsRUFBd0IsU0FBVUMsR0FDckMsSUFDQyxPQUFPRixFQUFVLHlCQUEyQkUsRUFBbUIsaUJBQXhERixHQUNOLE1BQU81NkMsTUFHTis2QyxFQUFRLEVBQVEsSUFDaEJDLEVBQWtCLEVBQVEsS0FFMUJDLEVBQWlCLFdBQ3BCLE1BQU0sSUFBSVAsR0FFUFEsRUFBaUJILEVBQ2pCLFdBQ0YsSUFHQyxPQUFPRSxFQUNOLE1BQU9FLEdBQ1IsSUFFQyxPQUFPSixFQUFNeGtELFVBQVcsVUFBVXZCLElBQ2pDLE1BQU9vbUQsR0FDUixPQUFPSCxJQVZSLEdBY0FBLEVBRUNJLEVBQWEsRUFBUSxJQUFSLEdBRWJDLEVBQVcsRUFBUSxLQUNuQkMsRUFBYSxFQUFRLElBQ3JCQyxFQUFjLEVBQVEsSUFFdEJDLEVBQVMsRUFBUSxJQUNqQkMsRUFBUSxFQUFRLElBRWhCQyxFQUFZLEdBRVpDLEVBQW1DLG9CQUFmQyxZQUErQlAsRUFBdUJBLEVBQVNPLGlCQS9EbkYzaEQsRUFpRUE0aEQsRUFBYSxDQUNoQi92QixVQUFXLEtBQ1gsbUJBQThDLG9CQUFuQmd3QixvQkFuRXhCN2hELEVBbUVxRTZoRCxlQUN4RSxVQUFXcmxELE1BQ1gsZ0JBQXdDLG9CQUFoQnVoQyxpQkFyRXJCLzlCLEVBcUUrRCs5QixZQUNsRSwyQkFBNEJvakIsR0FBY0MsRUFBV0EsRUFBUyxHQUFHcG1ELE9BQU9xMUIsa0JBdEVyRXJ3QixFQXVFSCx3Q0F2RUdBLEVBd0VILGtCQUFtQnloRCxFQUNuQixtQkFBb0JBLEVBQ3BCLDJCQUE0QkEsRUFDNUIsMkJBQTRCQSxFQUM1QixZQUFnQyxvQkFBWkssYUE1RWpCOWhELEVBNEV1RDhoRCxRQUMxRCxXQUE4QixvQkFBWHJJLFlBN0VoQno1QyxFQTZFcUR5NUMsT0FDeEQsa0JBQTRDLG9CQUFsQnNJLG1CQTlFdkIvaEQsRUE4RW1FK2hELGNBQ3RFLG1CQUE4QyxvQkFBbkJDLG9CQS9FeEJoaUQsRUErRXFFZ2lELGVBQ3hFLFlBQWEvckIsUUFDYixhQUFrQyxvQkFBYmdzQixjQWpGbEJqaUQsRUFpRnlEaWlELFNBQzVELFNBQVUza0QsS0FDVixjQUFlNGtELFVBQ2YsdUJBQXdCQyxtQkFDeEIsY0FBZUMsVUFDZix1QkFBd0JDLG1CQUN4QixVQUFXbEMsRUFDWCxTQUFVbUMsS0FDVixjQUFlbEMsRUFDZixpQkFBMEMsb0JBQWpCbUMsa0JBMUZ0QnZpRCxFQTBGaUV1aUQsYUFDcEUsaUJBQTBDLG9CQUFqQkMsa0JBM0Z0QnhpRCxFQTJGaUV3aUQsYUFDcEUsaUJBQTBDLG9CQUFqQkMsa0JBNUZ0QnppRCxFQTRGaUV5aUQsYUFDcEUseUJBQTBELG9CQUF6QkMsMEJBN0Y5QjFpRCxFQTZGaUYwaUQscUJBQ3BGLGFBQWNoQyxFQUNkLHNCQUF1QmUsRUFDdkIsY0FBb0Msb0JBQWRrQixlQWhHbkIzaUQsRUFnRzJEMmlELFVBQzlELGVBQXNDLG9CQUFmQyxnQkFqR3BCNWlELEVBaUc2RDRpRCxXQUNoRSxlQUFzQyxvQkFBZkMsZ0JBbEdwQjdpRCxFQWtHNkQ2aUQsV0FDaEUsYUFBY3IzQyxTQUNkLFVBQVc1TCxNQUNYLHNCQUF1QnVoRCxHQUFjQyxFQUFXQSxFQUFTQSxFQUFTLEdBQUdwbUQsT0FBT3ExQixtQkFyR3pFcndCLEVBc0dILFNBQTBCLGlCQUFUa3pDLEtBQW9CQSxVQXRHbENsekMsRUF1R0gsUUFBd0Isb0JBQVJ3OUIsU0F2R2J4OUIsRUF1RytDdzlCLElBQ2xELHlCQUF5QyxvQkFBUkEsS0FBd0IyakIsR0FBZUMsRUFBdUJBLEdBQVMsSUFBSTVqQixLQUFNeGlDLE9BQU9xMUIsa0JBeEd0SHJ3QixFQXlHSCxTQUFVMEQsS0FDVixXQUFZdzZDLE9BQ1osV0FBWWdDLEVBQ1osb0NBQXFDVyxFQUNyQyxlQUFnQjlpQyxXQUNoQixhQUFjNVIsU0FDZCxZQUFnQyxvQkFBWnduQixhQS9HakIzekIsRUErR3VEMnpCLFFBQzFELFVBQTRCLG9CQUFWbXZCLFdBaEhmOWlELEVBZ0htRDhpRCxNQUN0RCxlQUFnQnpDLEVBQ2hCLG1CQUFvQkMsRUFDcEIsWUFBZ0Msb0JBQVp2RyxhQW5IakIvNUMsRUFtSHVEKzVDLFFBQzFELFdBQVlwdkMsT0FDWixRQUF3QixvQkFBUjh5QixTQXJIYno5QixFQXFIK0N5OUIsSUFDbEQseUJBQXlDLG9CQUFSQSxLQUF3QjBqQixHQUFlQyxFQUF1QkEsR0FBUyxJQUFJM2pCLEtBQU16aUMsT0FBT3ExQixrQkF0SHRIcndCLEVBdUhILHNCQUFvRCxvQkFBdEIraUQsdUJBdkgzQi9pRCxFQXVIMkUraUQsa0JBQzlFLFdBQVloaUMsT0FDWiw0QkFBNkJvZ0MsR0FBY0MsRUFBV0EsRUFBUyxHQUFHcG1ELE9BQU9xMUIsa0JBekh0RXJ3QixFQTBISCxXQUFZbWhELEVBQWFubUQsWUExSHRCZ0YsRUEySEgsZ0JBQWlCdWdELEVBQ2pCLG1CQUFvQlMsRUFDcEIsZUFBZ0JVLEVBQ2hCLGNBQWVsQixFQUNmLGVBQXNDLG9CQUFmbUIsZ0JBL0hwQjNoRCxFQStINkQyaEQsV0FDaEUsc0JBQW9ELG9CQUF0QnFCLHVCQWhJM0JoakQsRUFnSTJFZ2pELGtCQUM5RSxnQkFBd0Msb0JBQWhCQyxpQkFqSXJCampELEVBaUkrRGlqRCxZQUNsRSxnQkFBd0Msb0JBQWhCQyxpQkFsSXJCbGpELEVBa0krRGtqRCxZQUNsRSxhQUFjekMsRUFDZCxZQUFnQyxvQkFBWjV2QixhQXBJakI3d0IsRUFvSXVENndCLFFBQzFELFlBQWdDLG9CQUFaNm5CLGFBcklqQjE0QyxFQXFJdUQwNEMsUUFDMUQsWUFBZ0Msb0JBQVp4YSxhQXRJakJsK0IsRUFzSXVEaytCLFFBRTFELDRCQUE2QnNqQixFQUM3Qiw2QkFBOEJELEVBQzlCLDBCQUEyQlQsRUFDM0IsMEJBQTJCTyxFQUMzQixhQUFjMTlDLEVBQ2QsZUFBZ0J5SCxFQUNoQixhQUFjdEgsRUFDZCxhQUFjK0wsRUFDZCxhQUFjaE0sRUFDZCxlQUFnQjJhLEVBQ2hCLGNBQWVJLEVBQ2YsMkJBQTRCMGlDLEdBRzdCLEdBQUlGLEVBQ0gsSUFDQyxLQUFLenNCLE1BQ0osTUFBTzd1QixHQUVSLElBQUlxOUMsRUFBYS9CLEVBQVNBLEVBQVN0N0MsSUFDbkM4N0MsRUFBVyxxQkFBdUJ1QixFQUlwQyxJQXlCSUMsRUFBaUIsQ0FDcEJ2eEIsVUFBVyxLQUNYLHlCQUEwQixDQUFDLGNBQWUsYUFDMUMsbUJBQW9CLENBQUMsUUFBUyxhQUM5Qix1QkFBd0IsQ0FBQyxRQUFTLFlBQWEsV0FDL0MsdUJBQXdCLENBQUMsUUFBUyxZQUFhLFdBQy9DLG9CQUFxQixDQUFDLFFBQVMsWUFBYSxRQUM1QyxzQkFBdUIsQ0FBQyxRQUFTLFlBQWEsVUFDOUMsMkJBQTRCLENBQUMsZ0JBQWlCLGFBQzlDLG1CQUFvQixDQUFDLHlCQUEwQixhQUMvQyw0QkFBNkIsQ0FBQyx5QkFBMEIsWUFBYSxhQUNyRSxxQkFBc0IsQ0FBQyxVQUFXLGFBQ2xDLHNCQUF1QixDQUFDLFdBQVksYUFDcEMsa0JBQW1CLENBQUMsT0FBUSxhQUM1QixtQkFBb0IsQ0FBQyxRQUFTLGFBQzlCLHVCQUF3QixDQUFDLFlBQWEsYUFDdEMsMEJBQTJCLENBQUMsZUFBZ0IsYUFDNUMsMEJBQTJCLENBQUMsZUFBZ0IsYUFDNUMsc0JBQXVCLENBQUMsV0FBWSxhQUNwQyxjQUFlLENBQUMsb0JBQXFCLGFBQ3JDLHVCQUF3QixDQUFDLG9CQUFxQixZQUFhLGFBQzNELHVCQUF3QixDQUFDLFlBQWEsYUFDdEMsd0JBQXlCLENBQUMsYUFBYyxhQUN4Qyx3QkFBeUIsQ0FBQyxhQUFjLGFBQ3hDLGNBQWUsQ0FBQyxPQUFRLFNBQ3hCLGtCQUFtQixDQUFDLE9BQVEsYUFDNUIsaUJBQWtCLENBQUMsTUFBTyxhQUMxQixvQkFBcUIsQ0FBQyxTQUFVLGFBQ2hDLG9CQUFxQixDQUFDLFNBQVUsYUFDaEMsc0JBQXVCLENBQUMsU0FBVSxZQUFhLFlBQy9DLHFCQUFzQixDQUFDLFNBQVUsWUFBYSxXQUM5QyxxQkFBc0IsQ0FBQyxVQUFXLGFBQ2xDLHNCQUF1QixDQUFDLFVBQVcsWUFBYSxRQUNoRCxnQkFBaUIsQ0FBQyxVQUFXLE9BQzdCLG1CQUFvQixDQUFDLFVBQVcsVUFDaEMsb0JBQXFCLENBQUMsVUFBVyxXQUNqQyx3QkFBeUIsQ0FBQyxhQUFjLGFBQ3hDLDRCQUE2QixDQUFDLGlCQUFrQixhQUNoRCxvQkFBcUIsQ0FBQyxTQUFVLGFBQ2hDLGlCQUFrQixDQUFDLE1BQU8sYUFDMUIsK0JBQWdDLENBQUMsb0JBQXFCLGFBQ3RELG9CQUFxQixDQUFDLFNBQVUsYUFDaEMsb0JBQXFCLENBQUMsU0FBVSxhQUNoQyx5QkFBMEIsQ0FBQyxjQUFlLGFBQzFDLHdCQUF5QixDQUFDLGFBQWMsYUFDeEMsdUJBQXdCLENBQUMsWUFBYSxhQUN0Qyx3QkFBeUIsQ0FBQyxhQUFjLGFBQ3hDLCtCQUFnQyxDQUFDLG9CQUFxQixhQUN0RCx5QkFBMEIsQ0FBQyxjQUFlLGFBQzFDLHlCQUEwQixDQUFDLGNBQWUsYUFDMUMsc0JBQXVCLENBQUMsV0FBWSxhQUNwQyxxQkFBc0IsQ0FBQyxVQUFXLGFBQ2xDLHFCQUFzQixDQUFDLFVBQVcsY0FHL0JwMkIsRUFBTyxFQUFRLElBQ2YraUQsRUFBUyxFQUFRLEtBQ2pCcEYsRUFBVTM5QyxFQUFLckIsS0FBS29uRCxFQUFPaGxELE1BQU1YLFVBQVVnVyxRQUMzQ3d4QyxFQUFlNW5ELEVBQUtyQixLQUFLbW5ELEVBQVEva0QsTUFBTVgsVUFBVW16QyxRQUNqRGdLLEVBQVd2OUMsRUFBS3JCLEtBQUtvbkQsRUFBT3pnQyxPQUFPbGxCLFVBQVVrSixTQUM3Q3UrQyxFQUFZN25ELEVBQUtyQixLQUFLb25ELEVBQU96Z0MsT0FBT2xsQixVQUFVMEcsT0FDOUNnaEQsRUFBUTluRCxFQUFLckIsS0FBS29uRCxFQUFPNzJDLE9BQU85TyxVQUFVdWQsTUFHMUNvcUMsRUFBYSxxR0FDYkMsRUFBZSxXQUNmQyxFQUFlLFNBQXNCdnFDLEdBQ3hDLElBQUl3cUMsRUFBUUwsRUFBVW5xQyxFQUFRLEVBQUcsR0FDN0J5cUMsRUFBT04sRUFBVW5xQyxHQUFTLEdBQzlCLEdBQWMsTUFBVndxQyxHQUEwQixNQUFUQyxFQUNwQixNQUFNLElBQUlyRCxFQUFhLGtEQUNqQixHQUFhLE1BQVRxRCxHQUEwQixNQUFWRCxFQUMxQixNQUFNLElBQUlwRCxFQUFhLGtEQUV4QixJQUFJdG1DLEVBQVMsR0FJYixPQUhBKytCLEVBQVM3L0IsRUFBUXFxQyxHQUFZLFNBQVUxK0MsRUFBT3hCLEVBQVErM0MsRUFBT3dJLEdBQzVENXBDLEVBQU9BLEVBQU9oZCxRQUFVbytDLEVBQVFyQyxFQUFTNkssRUFBV0osRUFBYyxNQUFRbmdELEdBQVV3QixLQUU5RW1WLEdBSUo2cEMsRUFBbUIsU0FBMEJ0cEQsRUFBTXVwRCxHQUN0RCxJQUNJMzNCLEVBREE0M0IsRUFBZ0J4cEQsRUFPcEIsR0FMSWdrRCxFQUFPNEUsRUFBZ0JZLEtBRTFCQSxFQUFnQixLQURoQjUzQixFQUFRZzNCLEVBQWVZLElBQ0ssR0FBSyxLQUc5QnhGLEVBQU9vRCxFQUFZb0MsR0FBZ0IsQ0FDdEMsSUFBSTlvRCxFQUFRMG1ELEVBQVdvQyxHQUl2QixHQUhJOW9ELElBQVV1bUQsSUFDYnZtRCxFQXRIVSxTQUFTK29ELEVBQU96cEQsR0FDNUIsSUFBSVUsRUFDSixHQUFhLG9CQUFUVixFQUNIVSxFQUFReWxELEVBQXNCLDZCQUN4QixHQUFhLHdCQUFUbm1ELEVBQ1ZVLEVBQVF5bEQsRUFBc0Isd0JBQ3hCLEdBQWEsNkJBQVRubUQsRUFDVlUsRUFBUXlsRCxFQUFzQiw4QkFDeEIsR0FBYSxxQkFBVG5tRCxFQUE2QixDQUN2QyxJQUFJaUQsRUFBS3dtRCxFQUFPLDRCQUNaeG1ELElBQ0h2QyxFQUFRdUMsRUFBRzVCLGdCQUVOLEdBQWEsNkJBQVRyQixFQUFxQyxDQUMvQyxJQUFJMHBELEVBQU1ELEVBQU8sb0JBQ2JDLEdBQU85QyxJQUNWbG1ELEVBQVFrbUQsRUFBUzhDLEVBQUlyb0QsWUFNdkIsT0FGQStsRCxFQUFXcG5ELEdBQVFVLEVBRVpBLEVBZ0dHK29ELENBQU9ELFNBRUssSUFBVjlvRCxJQUEwQjZvRCxFQUNwQyxNQUFNLElBQUl2RCxFQUFXLGFBQWVobUQsRUFBTyx3REFHNUMsTUFBTyxDQUNONHhCLE1BQU9BLEVBQ1A1eEIsS0FBTXdwRCxFQUNOOW9ELE1BQU9BLEdBSVQsTUFBTSxJQUFJcWxELEVBQWEsYUFBZS9sRCxFQUFPLHFCQUc5Q1IsRUFBT0QsUUFBVSxTQUFzQlMsRUFBTXVwRCxHQUM1QyxHQUFvQixpQkFBVHZwRCxHQUFxQyxJQUFoQkEsRUFBS3lDLE9BQ3BDLE1BQU0sSUFBSXVqRCxFQUFXLDZDQUV0QixHQUFJbmtELFVBQVVZLE9BQVMsR0FBNkIsa0JBQWpCOG1ELEVBQ2xDLE1BQU0sSUFBSXZELEVBQVcsNkNBR3RCLEdBQW1DLE9BQS9CK0MsRUFBTSxjQUFlL29ELEdBQ3hCLE1BQU0sSUFBSStsRCxFQUFhLHNGQUV4QixJQUFJdmhDLEVBQVEwa0MsRUFBYWxwRCxHQUNyQjJwRCxFQUFvQm5sQyxFQUFNL2hCLE9BQVMsRUFBSStoQixFQUFNLEdBQUssR0FFbERvbEMsRUFBWU4sRUFBaUIsSUFBTUssRUFBb0IsSUFBS0osR0FDNURNLEVBQW9CRCxFQUFVNXBELEtBQzlCVSxFQUFRa3BELEVBQVVscEQsTUFDbEJvcEQsR0FBcUIsRUFFckJsNEIsRUFBUWc0QixFQUFVaDRCLE1BQ2xCQSxJQUNIKzNCLEVBQW9CLzNCLEVBQU0sR0FDMUJpM0IsRUFBYXJrQyxFQUFPbzZCLEVBQVEsQ0FBQyxFQUFHLEdBQUlodEIsS0FHckMsSUFBSyxJQUFJbnlCLEVBQUksRUFBR3NxRCxHQUFRLEVBQU10cUQsRUFBSStrQixFQUFNL2hCLE9BQVFoRCxHQUFLLEVBQUcsQ0FDdkQsSUFBSXVxRCxFQUFPeGxDLEVBQU0va0IsR0FDYjBwRCxFQUFRTCxFQUFVa0IsRUFBTSxFQUFHLEdBQzNCWixFQUFPTixFQUFVa0IsR0FBTyxHQUM1QixJQUVhLE1BQVZiLEdBQTJCLE1BQVZBLEdBQTJCLE1BQVZBLEdBQ3RCLE1BQVRDLEdBQXlCLE1BQVRBLEdBQXlCLE1BQVRBLElBRWxDRCxJQUFVQyxFQUViLE1BQU0sSUFBSXJELEVBQWEsd0RBU3hCLEdBUGEsZ0JBQVRpRSxHQUEyQkQsSUFDOUJELEdBQXFCLEdBTWxCOUYsRUFBT29ELEVBRlh5QyxFQUFvQixLQURwQkYsR0FBcUIsSUFBTUssR0FDbUIsS0FHN0N0cEQsRUFBUTBtRCxFQUFXeUMsUUFDYixHQUFhLE1BQVRucEQsRUFBZSxDQUN6QixLQUFNc3BELEtBQVF0cEQsR0FBUSxDQUNyQixJQUFLNm9ELEVBQ0osTUFBTSxJQUFJdkQsRUFBVyxzQkFBd0JobUQsRUFBTywrQ0FFckQsT0FFRCxHQUFJcW1ELEdBQVU1bUQsRUFBSSxHQUFNK2tCLEVBQU0vaEIsT0FBUSxDQUNyQyxJQUFJd25ELEVBQU81RCxFQUFNM2xELEVBQU9zcEQsR0FXdkJ0cEQsR0FWRHFwRCxJQUFVRSxJQVNHLFFBQVNBLEtBQVUsa0JBQW1CQSxFQUFLM3BELEtBQy9DMnBELEVBQUszcEQsSUFFTEksRUFBTXNwRCxRQUdmRCxFQUFRL0YsRUFBT3RqRCxFQUFPc3BELEdBQ3RCdHBELEVBQVFBLEVBQU1zcEQsR0FHWEQsSUFBVUQsSUFDYjFDLEVBQVd5QyxHQUFxQm5wRCxJQUluQyxPQUFPQSxJLDZCQ3JYUmxCLEVBQU9ELFFBQVVnSixTQUFTbEgsVUFBVXpCLE0sNkJDRHBDLElBQUkySyxFQUFVZ2MsT0FBT2xsQixVQUFVa0osUUFDM0IyL0MsRUFBa0IsT0FFbEJDLEVBQ1MsVUFEVEEsRUFFUyxVQUdiM3FELEVBQU9ELFFBQVUsQ0FDYixRQUFXNHFELEVBQ1hDLFdBQVksQ0FDUkMsUUFBUyxTQUFVM3BELEdBQ2YsT0FBTzZKLEVBQVEzSyxLQUFLYyxFQUFPd3BELEVBQWlCLE1BRWhESSxRQUFTLFNBQVU1cEQsR0FDZixPQUFPNmxCLE9BQU83bEIsS0FHdEIycEQsUUFBU0YsRUFDVEcsUUFBU0gsSSw2QkNuQmIsSUFBSUksRUFBUyxFQUFRLEtBQ2pCbmtDLEVBQVUsRUFBUSxLQUNsQm9rQyxFQUFVLEVBQVEsSUFDbEJDLEVBQWMsRUFBUSxLQUN0QkMsRUFBaUIsRUFBUSxLQUN6QkMsRUFBZSxFQUFRLEtBRTNCbnJELEVBQU9ELFFBZ0ZQLFNBQXVCbUIsRUFBT2s1QixHQUM1QixJQUNJZ3hCLEVBQ0E1cEQsRUFGQTZwRCxFQUFXLEdBSVZqeEIsSUFDSEEsRUFBVSxJQUdaLElBQUs1NEIsS0FBT2tmLEVBQ1YwcUMsRUFBU2h4QixFQUFRNTRCLEdBQ2pCNnBELEVBQVM3cEQsR0FDUDRwRCxRQUEwQzFxQyxFQUFTbGYsR0FBTzRwRCxHQUcxREMsRUFBU0MsU0FBU3hKLFFBQVV1SixFQUFTQyxTQUFTQyxTQUNoREYsRUFBU3ZKLE9BQVN1SixFQUFTQyxTQUFTeEosUUFBVSxHQUM5Q3VKLEVBQVNDLFNBQVdELEVBQVNDLFNBQVNDLE9BR3hDLE9BS0YsU0FBZXJxRCxFQUFPbXFELEdBQ3BCLElBaUJJRyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBaFIsRUFDQWlSLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0E5Z0QsRUFDQStnRCxFQUNBQyxFQUNBVixFQUNBbnlCLEVBQ0E3dEIsRUFDQXUvQixFQUNBdnRCLEVBQ0E2SCxFQUNBNG5CLEVBbkNBa2YsRUFBYWIsRUFBU2EsV0FDdEJDLEVBQWdCZCxFQUFTYyxjQUN6QkMsRUFBYWYsRUFBU2dCLEtBQ3RCQyxFQUFrQmpCLEVBQVNPLFVBQzNCVyxFQUFnQmxCLEVBQVNTLFFBQ3pCVSxFQUFjbkIsRUFBU21CLFlBQ3ZCQyxFQUFtQnBCLEVBQVNvQixpQkFDNUJDLEVBQWlCckIsRUFBU3FCLGVBQzFCeHlDLEVBQU1teEMsRUFBU0MsU0FDZnhKLEVBQVN1SixFQUFTdkosUUFBVSxHQUM1QjcrQyxFQUFTL0IsRUFBTStCLE9BQ2Y0c0IsRUFBUSxFQUNSODhCLEdBQVMsRUFDVEMsRUFBUzF5QyxFQUFJMHlDLFFBQVUsRUFDdkJDLEVBQU8zeUMsRUFBSTJ5QyxNQUFRLEVBQ25CaFIsRUFBUSxHQUNSNTdCLEVBQVMsR0FxQmEsaUJBQWZpc0MsSUFDVEEsRUFBYUEsRUFBVy9hLFdBQVcsSUFJckNyRyxFQUFPOXBCLElBR1A4cUMsRUFBVVMsRUF3UFYsU0FBb0J0bUIsRUFBTXhoQixHQUN4QixJQUFJNm1DLEVBQVd0cUMsSUFFZnNxQyxFQUFTc0IsUUFBVW5vQyxFQUNuQjZtQyxFQUFTN21DLFFBQVVBLEVBRW5COG5DLEVBQWNuc0QsS0FBS3NzRCxFQUFnQkksRUFBUzdtQixHQUFPcWxCLEVBQVVybEIsSUE5UHhCaE4sRUFHdkNwSixJQUNBNXNCLElBRUEsT0FBUzRzQixFQUFRNXNCLEdBUWYsR0EvSVcsS0F5SVAwM0MsSUFDRmlTLEVBQVM5SyxFQUFPNkssSUFBVSxHQXZJaEIsTUEwSVpoUyxFQUFZejVDLEVBQU1pd0MsV0FBV3RoQixJQUVBLENBSTNCLEdBcEpJLEtBaUpKZzhCLEVBQVkzcUQsRUFBTWl3QyxXQUFXdGhCLEVBQVEsS0FoSjVCLEtBcUpQZzhCLEdBcEpPLEtBcUpQQSxHQXBKSSxLQXFKSkEsR0FwSlEsS0FxSlJBLEdBbkpPLEtBb0pQQSxHQUNBQSxHQUFjQSxHQUNiSyxHQUFjTCxJQUFjSyxFQUM3QixDQUlBclEsR0FBU3hLLEVBQWFzSixHQUN0QmlTLElBRUEsU0FpQ0YsSUE3QkFYLEVBREFWLEVBQVExN0IsRUFBUSxFQUVoQm1kLEVBQU11ZSxFQWpLSyxLQW1LUE0sR0FFRjdlLElBQVFpZixFQXBLQyxNQXVLVEosRUFBWTNxRCxFQUFNaXdDLFdBQVduRSxLQXRLcEIsTUF3S3VCNmUsR0FFOUJ6eUIsRUFBTzJ6QixFQUNQL2YsSUFBUWlmLEdBR1I3eUIsRUF4S0MsV0E0S0hBLEVBQU81NEIsRUFHVGdyRCxFQUFtQixHQUNuQlEsRUFBUyxHQUNUTCxFQUFhLEdBQ2JwZ0QsRUFBT3loRCxFQUFNNXpCLEdBQ2I0VCxNQUVTQSxFQUFNL3BDLElBQ2I0b0QsRUFBWTNxRCxFQUFNaXdDLFdBQVduRSxHQUV4QnpoQyxFQUFLc2dELEtBSVZGLEdBQWN0YSxFQUFhd2EsR0FLdkJ6eUIsSUFBUzU0QixHQUFReXNELEVBQUk3c0QsS0FBSzJxRCxFQUFRWSxLQUNwQ0gsRUFBbUJHLEVBQ25CSyxFQUFTakIsRUFBT1ksS0FJcEJELEVBbE5VLEtBa05HeHFELEVBQU1pd0MsV0FBV25FLE1BRzVCQSxLQUVBeWUsRUFBY3J5QixJQUFTNTRCLEdBQU8ycUQsRUFBYVEsTUFHekNILEVBQW1CRyxFQUNuQkssRUFBU1AsSUFJYnJtQyxFQUFPLEVBQUk0bkIsRUFBTXVlLEdBRVpHLEdBQWVTLEtBRVJSLEVBTUR2eUIsSUFBUzU0QixHQUdka3JELElBQWVNLEVBQ2pCRixFQTNNUyxFQTJNYSxJQUlsQk4sSUFBcUJHLElBQ3ZCM2UsRUFBTWlmLEVBQVFULEVBQWlCdm9ELE9BQy9CbWlCLEVBQU8sRUFBSTRuQixFQUFNaWYsRUFDakJQLEdBQWEsR0FJVkEsSUFDSEssRUFBU1AsRUEzTkksRUFFUixFQTJOREgsRUFBUzZCLFVBelBWLE1BMFBEckIsRUFBWTNxRCxFQUFNaXdDLFdBQVduRSxLQUczQjhlLEVBQVFDLEVBQVEzbUMsR0FDaEI0bUMsRUFBUyxNQUNBZCxFQUFlVyxHQUN4QkcsRUFBUyxLQUVURixFQUFRQyxFQUFRM21DLEdBR2xCMG1DLEVBQVFDLEVBQVEzbUMsS0FLdEJ3bUMsRUFBWUksSUFFUE4sR0FHSEksRUFsUGlCLEVBa1BhMW1DLEdBSWhDd21DLEVBQVl6NUMsU0FBU3c1QyxFQUFZd0IsRUFBTS96QixLQTBIM0I2TSxFQXRIRzJsQixJQXVITCxPQUFVM2xCLEdBQVEsT0FBV0EsRUFBTyxTQXRINUM2bEIsRUF0UGMsRUFzUGExbUMsR0FDM0J3bUMsRUFBWXZhLEVBclJLLFFBc1JSdWEsS0FBYWhsQyxHQUd0QmtsQyxFQTVQYyxFQTRQYTFtQyxHQUMzQndtQyxFQUFZaGxDLEVBQVFnbEMsS0FHcEIzZ0QsRUFBUyxHQUdMbWlELEVBQVd4QixJQUNiRSxFQXBRWSxFQW9RZTFtQyxHQUl6QndtQyxFQUFZLFFBRWQzZ0QsR0FBVW9tQyxHQURWdWEsR0FBYSxTQUN5QixHQUFnQixPQUN0REEsRUFBWSxNQUFzQixLQUFaQSxHQUd4QkEsRUFBWTNnRCxFQUFTb21DLEVBQWF1YSxLQTNFaEN4eUIsSUFBUzU0QixHQUNYc3JELEVBdE1TLEVBc01hMW1DLElBZ0Z0QndtQyxHQUNGeUIsSUFFQXZpQixFQUFPOXBCLElBQ1A2TyxFQUFRbWQsRUFBTSxFQUNkNGYsR0FBVTVmLEVBQU11ZSxFQUFRLEVBQ3hCdHJDLEVBQU9yYyxLQUFLZ29ELElBQ1pydUMsRUFBT3lELEtBQ0Z5RCxTQUVENm5DLEdBQ0ZBLEVBQWdCbHNELEtBQ2Rxc0QsRUFDQWIsRUFDQSxDQUFDTCxNQUFPemdCLEVBQU1rQyxJQUFLenZCLEdBQ25CcmMsRUFBTXFILE1BQU1nakQsRUFBUSxFQUFHdmUsSUFJM0JsQyxFQUFPdnRCLElBTVBvdUMsRUFBYXpxRCxFQUFNcUgsTUFBTWdqRCxFQUFRLEVBQUd2ZSxHQUNwQzZPLEdBQVM4UCxFQUNUaUIsR0FBVWpCLEVBQVcxb0QsT0FDckI0c0IsRUFBUW1kLEVBQU0sUUFLQSxLQUFkMk4sSUFFQWtTLElBQ0FGLElBQ0FDLEVBQVMsR0FHUGpTLEdBQWNBLEdBQ2hCa0IsR0FBU3hLLEVBQWFzSixHQUN0QmlTLEtBRUFTLElBNENSLElBQW9CcG5CLEVBdENsQixPQUFPaG1CLEVBQU96WCxLQUFLLElBR25CLFNBQVN3WSxJQUNQLE1BQU8sQ0FDTDZyQyxLQUFNQSxFQUNORCxPQUFRQSxFQUNSbm9DLE9BQVFvTCxHQUFTM1YsRUFBSXVLLFFBQVUsSUFpQm5DLFNBQVM0b0MsSUFDSHhSLElBQ0Y1N0IsRUFBT3JjLEtBQUtpNEMsR0FFUnVRLEdBQ0ZBLEVBQVdoc0QsS0FBS29zRCxFQUFhM1EsRUFBTyxDQUFDMFAsTUFBT3pnQixFQUFNa0MsSUFBS2hzQixNQUd6RDY2QixFQUFRLEtBL1RMeVIsQ0FBTXBzRCxFQUFPbXFELElBbEd0QixJQUFJNEIsRUFBTSxHQUFHbnJELGVBQ1R1dkMsRUFBZXRxQixPQUFPc3FCLGFBQ3RCcFksRUFBT2x3QixTQUFTbEgsVUFHaEI2ZSxFQUFXLENBQ2JvckMsUUFBUyxLQUNURixVQUFXLEtBQ1hTLEtBQU0sS0FDTkssZUFBZ0IsS0FDaEJELGlCQUFrQixLQUNsQkQsWUFBYSxLQUNibEIsU0FBVSxHQUNWWSxXQUFZLEtBQ1pnQixXQUFXLEVBQ1hmLGVBQWUsR0FrQmIzckQsRUFBTyxRQUNQdXNELEVBQU8sY0FJUEksRUFBUSxDQUVaLFlBQWMsR0FDZCxRQUFjLElBTVZILEVBQVEsR0FFWkEsRUFBTXhzRCxHQUFRMHFELEVBQ2Q4QixFQUFVLFFBQUloQyxFQUNkZ0MsRUFBTUQsR0FBUTlCLEVBR2QsSUFTSTZCLEVBQVcsR0E2V2YsU0FBU00sRUFBV25uQixHQUNsQixPQUNHQSxHQUFRLEdBQVVBLEdBQVEsR0FDbEIsS0FBVEEsR0FDQ0EsR0FBUSxJQUFVQSxHQUFRLElBQzFCQSxHQUFRLEtBQVVBLEdBQVEsS0FDMUJBLEdBQVEsT0FBVUEsR0FBUSxPQUNQLFFBQVosTUFBUEEsSUFDbUIsUUFBWixNQUFQQSxHQW5YTDZtQixFQVh5QixHQVl2QiwrREFDRkEsRUFaMkIsR0FhekIsaUVBQ0ZBLEVBYmlCLEdBYU0sNkNBQ3ZCQSxFQWJtQixHQWFNLCtDQUN6QkEsRUFibUIsR0FhTSwyQ0FDekJBLEVBYndCLEdBY3RCLG9EQUNGQSxFQWR3QixHQWV0QixnRjs7Ozs7O0dDekVGLElBQ0l2cUIsRUFEQTcrQixFQUFNLEdBT1YxRCxFQUFPRCxRQW9CUCxTQUFnQnEzQixFQUFLOG9CLEdBQ25CLEdBQW1CLGlCQUFSOW9CLEVBQ1QsTUFBTSxJQUFJTyxVQUFVLHFCQUl0QixHQUFZLElBQVJ1b0IsRUFBVyxPQUFPOW9CLEVBQ3RCLEdBQVksSUFBUjhvQixFQUFXLE9BQU85b0IsRUFBTUEsRUFFNUIsSUFBSXR0QixFQUFNc3RCLEVBQUluMEIsT0FBU2k5QyxFQUN2QixHQUFJM2QsSUFBVW5MLFFBQXdCLElBQVZtTCxFQUMxQkEsRUFBUW5MLEVBQ1IxekIsRUFBTSxRQUNELEdBQUlBLEVBQUlULFFBQVU2RyxFQUN2QixPQUFPcEcsRUFBSXFHLE9BQU8sRUFBR0QsR0FHdkIsS0FBT0EsRUFBTXBHLEVBQUlULFFBQVVpOUMsRUFBTSxHQUNyQixFQUFOQSxJQUNGeDhDLEdBQU8wekIsR0FHVDhvQixJQUFRLEVBQ1I5b0IsR0FBT0EsRUFLVCxPQURBMXpCLEdBREFBLEdBQU8wekIsR0FDR3J0QixPQUFPLEVBQUdELEssNkJDakV0QjlKLEVBQU9ELFFBR1AsU0FBMkJtQixHQUN6QixPQUFPNmxCLE9BQU83bEIsR0FBTzZKLFFBQVEsT0FBUSxNLDZCQ0p2Qy9LLEVBQU9ELFFBRVAsU0FBbUJ3dEQsRUFBY0MsRUFBWUMsRUFBSzF1QixHQUNoRCxJQUlJMnVCLEVBQ0FobUQsRUFDQWpFLEVBQ0FnaEIsRUFDQWtwQyxFQUNBQyxFQVRBQyxFQUFRLENBQUMsV0FBWSxjQUNyQkMsRUFBUUQsRUFBTTVxRCxPQUNkQSxFQUFTc3FELEVBQWF0cUQsT0FDdEI0c0IsR0FBUyxFQVFiLE9BQVNBLEVBQVE1c0IsR0FBUSxDQU92QixJQU5BeXFELEVBQWNILEVBQWExOUIsR0FDM0Jub0IsRUFBU2dtRCxFQUFZLElBQU0sR0FDM0JqcUQsRUFBS2lxRCxFQUFZLEdBQ2pCanBDLEdBQVUsRUFDVm1wQyxHQUFTLElBRUFucEMsRUFBU3FwQyxHQUdoQixRQUFxQjluRCxJQUFqQjBCLEVBRkppbUQsRUFBT0UsRUFBTXBwQyxLQUVxQi9jLEVBQU9pbUQsS0FBVUYsRUFBSXJ6QixRQUFRdXpCLEdBQU8sQ0FDcEVDLEdBQVMsRUFDVCxNQUlKLElBQUlBLEdBSUFKLEVBQVcvcEQsR0FBSXJCLE1BQU1xckQsRUFBSzF1QixHQUM1QixPQUFPLEVBSVgsT0FBTyxJLDZCQ3ZDVCxJQUFJZ3ZCLEVBQXFCLEVBQVEsS0FFakMvdEQsRUFBT0QsUUFJUCxTQUFtQm1CLEdBQ2pCLE9BQU82c0QsRUFBbUI3c0QsR0FBT3NOLGdCLGNDVG5DLFNBQVN3L0MsRUFBZ0I3c0QsR0FDdkIsT0FBT25CLEVBQU9ELFFBQVVpdUQsRUFBa0JydEQsT0FBT2kzQixlQUFpQmozQixPQUFPOGdDLGVBQWVoZ0MsT0FBUyxTQUFVTixHQUN6RyxPQUFPQSxFQUFFMDJCLFdBQWFsM0IsT0FBTzhnQyxlQUFldGdDLElBQzNDbkIsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFFBQVNpdUQsRUFBZ0I3c0QsR0FFbkduQixFQUFPRCxRQUFVaXVELEVBQWlCaHVELEVBQU9ELFFBQVFzQixZQUFhLEVBQU1yQixFQUFPRCxRQUFpQixRQUFJQyxFQUFPRCxTLGdCQ0xyQ0MsRUFBT0QsUUFBNkYsU0FBUytMLEVBQUVsSixHQUFHLGFBQWEsSUFBSTdCLEVBQUUsUUFBUVQsRUFBRSxZQUFZMEIsRUFBRSxPQUFPYixFQUFFLFVBQVVsQixFQUFFLHNCQUFzQnEvQixFQUFFLHFCQUFxQjU5QixFQUFFLHFCQUFxQnhCLEVBQUUsWUFBWVEsRUFBRSxTQUFTNkwsRUFBRSxvQkFBb0JpZ0IsRUFBRSxzREFBc0Rqc0IsRUFBRSxPQUFPc0MsRUFBRSxxQkFBcUJkLEVBQUUsYUFBYW1CLEVBQUUsZ0JBQWdCK3pCLEVBQUUsb0JBQW9CZzNCLEVBQUUsZ0JBQWdCQyxFQUFFLHFCQUFxQnJnRCxFQUFFLFVBQVVzZ0QsRUFBRSxpQkFBaUI5dEQsRUFBRSxxQkFBcUJtVSxFQUFFLGtCQUFrQjQ1QyxFQUFFLGVBQWVqZ0QsRUFBRSxlQUFlNnhDLEVBQUUsOEJBQThCMWlDLEVBQUUsbUNBQW1DK3dDLEVBQUUsc0JBQXNCQyxFQUFFLFdBQVdDLEVBQUUsUUFBUWx2QixFQUFFLE9BQU9yeEIsRUFBRSxHQUFHd2dELEVBQUUsSUFBSUMsRUFBRSxJQUFJaGpELEVBQUUsR0FBR1EsRUFBRSxHQUFheWlELEVBQUUsR0FBR0MsRUFBRSxHQUFZNWhELEVBQUUsR0FBUUcsRUFBRSxHQUFRMGhELEVBQUUsR0FBR0MsRUFBRSxHQUFHQyxFQUFFLEdBQWFDLEVBQUUsR0FBb0dDLEVBQUcsRUFBRUMsRUFBRyxFQUFFQyxFQUFHLEVBQUVDLEVBQUcsRUFBRUMsRUFBRyxFQUFFQyxFQUFHLEVBQUVDLEVBQUcsRUFBRUMsRUFBRyxFQUFFQyxFQUFHLEVBQUVDLEdBQUcsR0FBR0MsR0FBRyxHQUFHQyxHQUFHLEVBQUVDLEdBQUcsS0FBcUNDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxHQUFHLFNBQVNDLEdBQUdwa0QsRUFBRWxKLEVBQUVaLEVBQUViLEVBQUVsQixHQUFHLElBQUksSUFBSXEvQixFQUFFNTlCLEVBQUVoQixFQUFFLEVBQUU2TCxFQUFFLEVBQUVpZ0IsRUFBRSxFQUFFanNCLEVBQUUsRUFBRTAyQixFQUFFLEVBQUVnM0IsRUFBRSxFQUFFQyxFQUFFLEVBQUVyZ0QsRUFBRSxFQUFFeE4sRUFBRSxFQUFFK3RELEVBQUUsRUFBRWpnRCxFQUFFLEVBQUU2eEMsRUFBRSxFQUFFMWlDLEVBQUUsRUFBRSt3QyxFQUFFLEVBQUU4QixFQUFFLEVBQUViLEVBQUcsRUFBRUksRUFBRyxFQUFFRSxHQUFHLEVBQUVRLEdBQUcsRUFBRUMsR0FBR3J1RCxFQUFFaUIsT0FBT3F0RCxHQUFHRCxHQUFHLEVBQUVFLEdBQUcsR0FBR0MsR0FBRyxHQUFHQyxHQUFHLEdBQUdDLEdBQUcsR0FBR0MsR0FBRyxHQUFHQyxHQUFHLEdBQUdULEVBQUVFLElBQUksQ0FBb0YsR0FBaEZuQyxFQUFFbHNELEVBQUVtdkMsV0FBV2dmLEdBQUdBLElBQUlHLElBQU0vakQsRUFBRWhNLEVBQUVpc0IsRUFBRTlyQixJQUFJLElBQU0sSUFBSTZMLElBQUUyaEQsRUFBRTNoRCxJQUFJd2lELEVBQUVMLEVBQUVLLEdBQUV4dUQsRUFBRWlzQixFQUFFOXJCLEVBQUUsRUFBRTJ2RCxLQUFLQyxNQUFRL2pELEVBQUVoTSxFQUFFaXNCLEVBQUU5ckIsSUFBSSxFQUFFLENBQUMsR0FBR3l2RCxJQUFJRyxLQUFPaEIsRUFBRyxJQUFFa0IsR0FBR0EsR0FBR3psRCxRQUFRekssRUFBRSxLQUFPa3dELEdBQUc1bkIsT0FBTzNsQyxPQUFPLEdBQUUsQ0FBQyxPQUFPaXJELEdBQUcsS0FBS25oRCxFQUFFLEtBQWhvQixFQUF1b0IsS0FBS2lCLEVBQUUsS0FBSzJnRCxFQUFFLEtBQUtELEVBQUUsTUFBTSxRQUFROEIsSUFBSXh1RCxFQUFFMnZCLE9BQU93K0IsR0FBR2pDLEVBQUVsZ0QsRUFBRyxHQUFHLElBQUkwaEQsRUFBRyxPQUFPeEIsR0FBRyxLQUFLTyxFQUFFLEtBQUtELEVBQUUsS0FBS3hnRCxFQUFFLEtBQXZyQixHQUE4ckIsS0FBbnNCLEdBQTBzQixLQUFLdkMsRUFBRSxLQUFLUSxFQUFFLEtBQUs0aUQsRUFBRWEsRUFBRyxFQUFFLEtBQWh4QixFQUF1eEIsS0FBS2YsRUFBRSxLQUFLRCxFQUFFLEtBQUszaEQsRUFBRSxNQUFNLFFBQVEsSUFBSTJpRCxFQUFHLEVBQUVVLEdBQUdELEVBQUVsNUIsRUFBRWkzQixFQUFFaUMsSUFBSWpDLEVBQUVsZ0QsRUFBRW9pRCxHQUFHQyxJQUFJLE9BQU9ydUQsRUFBRW12QyxXQUFXaWYsT0FBTyxLQUFLMUIsRUFBRSxLQUFLQyxFQUFFLEtBQUszZ0QsSUFBSW1pRCxFQUFFakMsRUFBRWozQixFQUFFbTVCLEdBQUdDLEdBQUcsTUFBTSxLQUFLdkIsRUFBS1EsRUFBRyxNQUFJYSxFQUFFakMsRUFBRWozQixHQUFFLEtBQUt3M0IsRUFBRTJCLEdBQUdDLElBQUksT0FBT25DLEdBQUcsS0FBS08sRUFBRSxJQUFJeDNCLEdBQUd1NUIsR0FBR0EsR0FBRzVuQixRQUFRdUksV0FBVyxHQUFHaGpDLEVBQUUsRUFBRWlpRCxLQUFLRCxFQUFFQSxFQUFFRSxJQUFJLENBQUMsT0FBT25DLEVBQUVsc0QsRUFBRW12QyxXQUFXZ2YsSUFBSSxLQUFLMUIsRUFBRXRnRCxJQUFJLE1BQU0sS0FBS3FnRCxFQUFFcmdELElBQUksTUFBTSxLQUFLNGdELEVBQUUsT0FBT2QsRUFBRWpzRCxFQUFFbXZDLFdBQVdnZixFQUFFLElBQUksS0FBS3ZCLEVBQUUsS0FBS0csRUFBRW9CLEVBQUVVLEdBQUc1QyxFQUFFa0MsRUFBRUcsR0FBR3R1RCxHQUFHLE1BQU0sS0FBaHFDLEdBQXVxQ2tzRCxJQUFJLEtBQUt6aUQsRUFBRXlpRCxJQUFJLEtBQWpuQyxHQUF3bkMsS0FBN25DLEdBQW9vQyxLQUFLaUMsSUFBSUcsSUFBSXR1RCxFQUFFbXZDLFdBQVdnZixLQUFLakMsS0FBSyxHQUFHLElBQUkvL0MsRUFBRSxNQUFNZ2lELElBQWdGLE9BQXpFTSxHQUFHenVELEVBQUU4dUQsVUFBVVYsR0FBR0QsR0FBOXFDLElBQWlyQ2w1QixJQUFPQSxHQUFHdTVCLEdBQUdBLEdBQUd6bEQsUUFBUWhLLEVBQUUsSUFBSTZuQyxRQUFRdUksV0FBVyxJQUFVbGEsR0FBRyxLQUF6ekMsR0FBNDFDLE9BQXpCcTRCLEVBQUcsSUFBRWtCLEdBQUdBLEdBQUd6bEQsUUFBUXpLLEVBQUUsS0FBVzJ0RCxFQUFFdUMsR0FBR3JmLFdBQVcsSUFBSSxLQUE1dUMsSUFBb3ZDLEtBQTd4QyxJQUFxeUMsS0FBOXhDLElBQXN5QyxLQUFLamtDLEVBQUVveUIsRUFBRTE4QixFQUFFLE1BQU0sUUFBUTA4QixFQUFFbXdCLEdBQTZMLEdBQXZMVyxJQUFJSyxHQUFHUCxHQUFHdHRELEVBQUUwOEIsRUFBRW14QixHQUFHeEMsRUFBRWh1RCxFQUFFLElBQUlnRCxPQUFPdXNELEVBQUcsR0FBRyxJQUFJWSxLQUFHQSxHQUFHSSxHQUFHdnRELFFBQVUwc0QsR0FBRyxJQUFvQmp1RCxFQUFFcXZELEdBQTV3QyxFQUFreENOLEdBQXZCbnhCLEVBQUUweEIsR0FBR3ZCLEdBQUdlLEdBQUdaLElBQWlCaHRELEVBQUVxc0QsRUFBR0QsRUFBR29CLEdBQUduQyxFQUFFaHVELEVBQUVrQixHQUFHcXZELEdBQUdseEIsRUFBRTkyQixLQUFLLFNBQUksSUFBUzlHLEdBQUssS0FBSzB1RCxJQUFJSyxHQUFHL3VELEVBQUVrbkMsUUFBUTNsQyxVQUFRZ3JELEVBQUUsRUFBRXdDLEdBQUcsS0FBTUwsR0FBRyxFQUFFLE9BQU9uQyxHQUFHLEtBQWhoRCxJQUF3aER1QyxHQUFHQSxHQUFHemxELFFBQVF5SixFQUFFeThDLElBQUksS0FBMWdELElBQWtoRCxLQUEzakQsSUFBbWtELEtBQUsvakQsRUFBRXVqRCxHQUFHRCxHQUFHLElBQUlDLEdBQUcsSUFBSSxNQUFNLEtBQXhtRCxJQUFtbkRBLElBQUlELEdBQUdBLEdBQUd6bEQsUUFBUWxJLEVBQUUsU0FBU2l0RCxHQUFHLEVBQUVDLEdBQUcsTUFBTSxJQUFJVSxHQUFHLElBQWlDQSxHQUE3QixJQUFJckIsR0FBSSxJQUFJQSxHQUFJOEIsR0FBRyxJQUFJVCxHQUFHLEdBQU0sSUFBSW5DLEVBQUVtQyxHQUFHLElBQUlBLEdBQVcsSUFBSUEsR0FBRyxNQUFNLFFBQVdBLEdBQUdELEdBQUdDLEdBQXhzRCxNQUEyc0R0dkQsSUFBT3V2RCxJQUFJRCxHQUFHQSxHQUFHLFNBQVFBLEdBQUcsR0FBRyxNQUFNLFFBQVFBLEdBQUdQLEdBQUd0dEQsRUFBRW91RCxHQUFHcHVELEVBQUU0dEQsR0FBR1osSUFBSWEsR0FBR3R2RCxFQUFFbEIsRUFBRSxHQUFHMHdELElBQUlGLEdBQUd6USxFQUFFLEVBQUUwUCxFQUFHLEVBQUVyQixFQUFFLEVBQUVpQixFQUFHLEVBQUVNLEdBQUcsRUFBRXR5QyxFQUFFLEVBQUVrekMsR0FBRyxHQUFHQyxHQUFHLEdBQUd2QyxFQUFFbHNELEVBQUVtdkMsYUFBYWdmLEdBQUcsTUFBTSxLQUFLM0IsRUFBRSxLQUFLeGdELEVBQUUsSUFBSW9pRCxJQUFJSSxJQUFJbEIsRUFBRyxFQUFFa0IsR0FBR3psRCxRQUFRekssRUFBRSxJQUFJa3dELElBQUk1bkIsUUFBUTNsQyxRQUFRLEVBQStMLE9BQXpMLElBQUlvckQsS0FBTXAzQixFQUFFdTVCLEdBQUdyZixXQUFXLE1BQU1qa0MsR0FBRytwQixFQUFFLElBQUlBLEVBQUUsT0FBSW01QixJQUFJSSxHQUFHQSxHQUFHemxELFFBQVEsSUFBSSxNQUFNOUgsUUFBVTBzRCxHQUFHLFFBQUssS0FBVWp1RCxFQUFFcXZELEdBQW43RCxFQUF5N0RQLEdBQUc1dEQsRUFBRWtKLEVBQUVtakQsRUFBR0QsRUFBRzBCLEdBQUd6dEQsT0FBTzlCLEVBQUVsQixFQUFFa0IsS0FBTyxLQUFLaXZELElBQUlJLEdBQUc5dUQsRUFBRWtuQyxRQUFRM2xDLFVBQVF1dEQsR0FBRyxRQUFjdjVCLEVBQUV1NUIsR0FBR3JmLFdBQVcsR0FBRzhjLEVBQUV1QyxHQUFHcmYsV0FBVyxHQUFHbGEsR0FBRyxLQUF6dEUsRUFBaXVFLE1BQU0sS0FBanpFLEdBQXd6RSxHQUExckUsTUFBNnJFZzNCLEdBQXRyRSxLQUE4ckVBLEVBQU8sQ0FBQzJDLElBQUlKLEdBQUd4dUQsRUFBRTJ2QixPQUFPdytCLEdBQUcsTUFBTSxRQUFRLEdBQUdLLEdBQUdyZixXQUFXaWYsR0FBRyxLQUFLdEIsRUFBRSxNQUFNNEIsSUFBSVMsR0FBR1gsR0FBR3Y1QixFQUFFZzNCLEVBQUV1QyxHQUFHcmYsV0FBVyxJQUFLNk8sRUFBRSxFQUFFMFAsRUFBRyxFQUFFckIsRUFBRSxFQUFFaUIsRUFBRyxFQUFFTSxHQUFHLEVBQUVZLEdBQUcsR0FBR3RDLEVBQUVsc0QsRUFBRW12QyxhQUFhZ2YsSUFBSSxPQUFPakMsR0FBRyxLQUFLUyxFQUFFLEtBQUtELEVBQUUsR0FBR25pRCxFQUFFaE0sRUFBRWlzQixFQUFFOXJCLEVBQUU2dUQsSUFBSyxFQUFFLE9BQU9uQixHQUFHLEtBQUtuaUQsRUFBRSxLQUFuL0UsR0FBMC9FLEtBQXIvRSxHQUE0L0UsS0FBemlGLEdBQWdqRixLQUE3K0UsSUFBcS9FLEtBQWpnRixHQUF3Z0YsS0FBSzJpRCxFQUFFLEtBQXpnRixHQUFpaEYsS0FBS0csRUFBRSxLQUFLN2hELEVBQUUsS0FBSzRoRCxFQUFFLEtBQUtELEVBQUUsS0FBSzdnRCxFQUFFLEtBQUt5Z0QsRUFBRSxLQUFLRCxFQUFFLE1BQU0sUUFBV0gsRUFBRSxJQUFFcUIsRUFBRyxHQUFLbmpELElBQUl3aUQsRUFBRXhpRCxFQUFFLEVBQVU0aUQsRUFBR25QLElBQUksR0FBMWxGLE1BQTZsRjcrQyxHQUFRcXZELEdBQUd2dEQsT0FBTyxJQUFFcXNELEVBQUcsRUFBRWtCLElBQUksTUFBUWIsR0FBR0UsR0FBRyxHQUFFa0IsR0FBMS9FLEVBQWdnRlAsR0FBRzV0RCxFQUFFa0osRUFBRW1qRCxFQUFHRCxFQUFHMEIsR0FBR3p0RCxPQUFPOUIsRUFBRWxCLEVBQUVrQixHQUFHNnRELEVBQUcsRUFBRUMsSUFBSyxNQUFNLEtBQUtqaEQsRUFBRSxLQUFLd2dELEVBQUUsR0FBR2ppRCxFQUFFaE0sRUFBRWlzQixFQUFFOXJCLElBQUksRUFBRSxDQUFDc3VELElBQUssTUFBTSxRQUFRLE9BQU9BLElBQUt1QixHQUFHdnVELEVBQUUydkIsT0FBT3crQixHQUFHakMsR0FBRyxLQUE1MkYsRUFBbTNGLEtBQUtuaEQsRUFBRSxHQUFHeE0sRUFBRUcsRUFBRTZMLElBQUksRUFBRSxPQUFPc0IsR0FBRyxLQUFLZ2hELEVBQUUsS0FBS0MsRUFBRSxLQUEvNUYsRUFBczZGLEtBQUsvaEQsRUFBRXdqRCxHQUFHLEdBQUcsTUFBTSxRQUFXckMsSUFBSW5oRCxJQUFFd2pELEdBQUcsS0FBSSxNQUFNLEtBQXo0RixFQUFpNUZBLEdBQUcsTUFBTSxNQUFNLEtBQTM1RixHQUFtNkZBLEdBQUcsTUFBTSxNQUFNLEtBQTU2RixHQUFvN0ZBLEdBQUcsTUFBTSxNQUFNLEtBQTlnRyxHQUF3aEdod0QsRUFBRWdNLEVBQUU3TCxJQUFJLEdBQUd5dUQsRUFBRyxJQUFFUyxHQUFHLEVBQUVOLEVBQUcsRUFBRWlCLEdBQUcsS0FBS0EsSUFBRyxNQUFNLEtBQUssSUFBSSxHQUFHaHdELEVBQUVnTSxFQUFFN0wsRUFBRXd1RCxJQUFLLEdBQUdiLEVBQUUsRUFBRSxPQUFPOEIsRUFBRTlCLEdBQUcsS0FBSyxFQUE1Z0csTUFBaWhHeGdELEdBQVE3TCxFQUFFbXZDLFdBQVdnZixFQUFFLEtBQUtyQixJQUFFSSxFQUFHcmhELEdBQUUsS0FBSyxFQUFsakcsTUFBdWpHeE4sSUFBTzZ1RCxFQUFHN3VELEdBQUUsTUFBTSxLQUFLeXVELEVBQUt2dUQsRUFBRWdNLEVBQUU3TCxJQUFJLElBQUUydEQsRUFBRThCLEdBQUUsTUFBTSxLQUFLdEIsRUFBS3RpRCxFQUFFaWdCLEVBQUVqc0IsRUFBRUcsSUFBSSxJQUFFNHVELEVBQUcsRUFBRWlCLElBQUksTUFBSyxNQUFNLEtBQTN0RyxHQUFrdUcsS0FBdnVHLEdBQWl2RyxJQUFJaGtELElBQUVoTSxFQUFFQSxJQUFJMnRELEVBQUUsRUFBRSxJQUFJM3RELEVBQUUydEQsRUFBRTN0RCxHQUFFLE1BQU0sS0FBajFHLEdBQTIxR0EsRUFBRWdNLEVBQUVpZ0IsSUFBSSxHQUFFOXJCLElBQUksTUFBTSxLQUExMkcsR0FBbzNHSCxFQUFFZ00sRUFBRWlnQixJQUFJLEdBQUU5ckIsSUFBSSxNQUFNLEtBQUt1TCxFQUFLMUwsRUFBRWdNLEVBQUU3TCxJQUFJLEdBQUU4ckIsSUFBSSxNQUFNLEtBQUsvZ0IsRUFBRSxHQUFHbEwsRUFBRWdNLEVBQUU3TCxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUlzL0MsRUFBRSxPQUFPLEVBQUVueUMsRUFBRSxFQUFFeE4sR0FBRyxLQUFLLElBQUksTUFBTSxRQUFROE4sRUFBRSxFQUFFNnhDLEVBQUUsRUFBRXh6QixJQUFJLE1BQU0sS0FBMStHLEdBQW8vR2pnQixFQUFFaWdCLEVBQUVqc0IsRUFBRUcsRUFBRTJ0RCxFQUFFL3dDLElBQUksSUFBRUEsRUFBRSxHQUFFLE1BQU0sS0FBS3N4QyxFQUFFLEtBQUtHLEVBQUUsR0FBR3h1RCxFQUFFRyxFQUFFOHJCLEVBQUUsRUFBRSxNQUFNLE9BQU9qZ0IsR0FBRyxLQUFLLEVBQUUsT0FBTyxFQUFFMmhELEVBQUUsRUFBRWxzRCxFQUFFbXZDLFdBQVdnZixFQUFFLElBQUksS0FBSyxJQUFJNWpELEVBQUV3aUQsRUFBRSxNQUFNLEtBQUssSUFBSXFCLEdBQUdELEVBQUU1akQsRUFBRXFpRCxFQUFFLE1BQU0sS0FBS0EsRUFBS1YsSUFBSWEsR0FBR2xoRCxJQUFJK2dELEdBQUd3QixHQUFHLElBQUlELElBQU0sS0FBS251RCxFQUFFbXZDLFdBQVdpZixHQUFHLEtBQUdNLElBQUkxdUQsRUFBRTh1RCxVQUFVVixHQUFHRCxFQUFFLElBQUdJLEdBQUcsR0FBR2hrRCxFQUFFLElBQUksR0FBRyxJQUFJQSxFQUFFLENBQUMsR0FBRzRpRCxFQUFHNXVELEVBQUVHLEVBQUU0YyxJQUFJLEdBQXZxSCxNQUEwcUhuYyxHQUFRK3NELElBQUlsZ0QsRUFBRSxPQUFPa2dELEdBQUcsS0FBS1csRUFBRSxLQUFqdUgsSUFBeXVILEtBQXJ2SCxHQUE0dkgsS0FBdHZILEdBQTh2SCxLQUFLNWlELEVBQUUsS0FBS1IsRUFBRSxHQUFHLElBQUl1MEMsRUFBRSxDQUFDLE9BQU9ueUMsR0FBRyxLQUFqMkgsRUFBdzJILEtBQUtkLEVBQUUsS0FBSzJoRCxFQUFFLEtBQUtDLEVBQUU0QixJQUFJLEtBQUssTUFBTSxRQUFRQSxHQUFHLEtBQUtBLElBQUlyQyxJQUFJVyxFQUFFLEdBQUcsTUFBTVMsRUFBRyxPQUFPLE9BQU9wQixHQUFHLEtBQUt6aUQsRUFBSzRpRCxFQUFFLElBQUk4QixHQUFHLE1BQU10aUQsSUFBRXdnRCxFQUFFLEdBQUVyTyxJQUFJN3hDLEVBQUUsTUFBTSxLQUFLbEMsRUFBSyxJQUFJK3pDLElBQUk3eEMsS0FBR21oRCxFQUFHLEVBQUVpQixJQUFJLE1BQUssTUFBTSxLQUF2aEksRUFBOGhJLEtBQUt4akQsRUFBRSxPQUFPYyxHQUFHLEtBQWorSCxFQUF5K0gsS0FBSzRnRCxFQUFFLEtBQUtELEVBQUUsS0FBS3hnRCxFQUFFLEtBQUs2Z0QsRUFBRSxLQUFoZ0ksR0FBd2dJLEtBQTNsSSxFQUFrbUksS0FBSzloRCxFQUFFLEtBQUsyaEQsRUFBRSxLQUFLQyxFQUFFLE1BQU0sUUFBVyxJQUFJM08sSUFBRXNQLEVBQUcsRUFBRWlCLElBQUksT0FBU0MsSUFBSUQsR0FBR3JDLElBQUluaEQsR0FBM3FJLElBQThxSW1oRCxJQUFNRSxFQUFFRixJQUFHN3RELEVBQUV3TixFQUFFQSxFQUFFcWdELEVBQUVpQyxJQUErSSxHQUF4SUMsR0FBR00sR0FBR3p0RCxPQUFPdXNELEVBQUcsR0FBSyxJQUFJWSxJQUFJLElBQUlPLEdBQUcxdEQsUUFBUSxJQUFJTCxFQUFFLEdBQUdLLFFBQVEsSUFBL3BJLE1BQXdxSTlCLEdBQVEsSUFBSXlCLEVBQUVLLFNBQVNrc0QsRUFBRyxFQUFFYSxHQUFHQyxNQUFNcnRELEVBQUUsTUFBR3d0RCxHQUFHeHRELEVBQUU0RixLQUFLLEtBQUt2RixPQUFPLEdBQUttdEQsR0FBRyxFQUFFLENBQUMsR0FBRzl3QixFQUFFLElBQUk2dkIsR0FBbndJLE1BQXV3SWh1RCxFQUFPLFNBQVMySyxHQUFHLElBQUksSUFBSWxKLEVBQUU3QixFQUFFaUIsRUFBRSxFQUFFYixFQUFFMkssRUFBRTdJLE9BQU9oRCxFQUFFdUMsTUFBTXJCLEdBQUdhLEVBQUViLElBQUlhLEVBQUUsQ0FBQyxJQUFJLElBQUlzOUIsRUFBRXh6QixFQUFFOUosR0FBRytTLE1BQU03VSxHQUFHd0IsRUFBRSxHQUFHaEIsRUFBRSxFQUFFNkwsRUFBRSxFQUFFaWdCLEVBQUUsRUFBRWpzQixFQUFFLEVBQUVzQyxFQUFFeThCLEVBQUVyOEIsT0FBT3ZDLEVBQUVtQyxJQUFJbkMsRUFBRyxLQUFHLEtBQUs2TCxHQUFHeEwsRUFBRXUrQixFQUFFNStCLElBQUl1QyxTQUFTSixFQUFFLEdBQTlCLENBQXlDLEdBQUcycEIsRUFBRTlxQixFQUFFeXZDLFdBQVd6dkMsRUFBRXVCLE9BQU8sR0FBRzFDLEVBQUVRLEVBQUVvd0MsV0FBVyxHQUFHdnVDLEVBQUUsR0FBRyxJQUFJbEMsRUFBRSxPQUFPOHJCLEdBQUcsS0FBS29pQyxFQUFFLEtBQXZoSixJQUEraEosS0FBM2lKLEdBQWtqSixLQUE1aUosR0FBb2pKLEtBQUs3aEQsRUFBRSxLQUFLdEIsRUFBRSxNQUFNLFFBQVE3SSxFQUFFLElBQUksT0FBT3JDLEdBQUcsS0FBbnBKLEdBQTBwSlEsRUFBRTZCLEVBQUVvdEQsR0FBRyxLQUF4bUosSUFBZ25KLEtBQTVuSixHQUFtb0osS0FBN25KLEdBQXFvSixLQUFLampELEVBQUUsS0FBS2QsRUFBRSxLQUFLUixFQUFFLE1BQU0sS0FBcnZKLEdBQTR2SjFLLEVBQUU2QixFQUFFN0IsRUFBRWl2RCxHQUFHLE1BQU0sS0FBS2xCLEVBQUUsT0FBTyxFQUFFL3RELEVBQUVvd0MsV0FBVyxHQUFHLEVBQUVwd0MsRUFBRW93QyxXQUFXLElBQUksS0FBSyxJQUFJLEdBQUdrZSxFQUFHLEVBQUUsQ0FBQ3R1RCxFQUFFNkIsRUFBRTdCLEVBQUUrdkQsVUFBVSxFQUFFdmtELEVBQUUsR0FBRyxNQUFNLFNBQVc3TCxFQUFFLEdBQUc0K0IsRUFBRTUrQixFQUFFLEdBQUd1QyxPQUFPLEtBQUVsQyxFQUFFNkIsRUFBRW90RCxHQUFHanZELEdBQUUsTUFBTSxLQUFLOHRELEVBQUVqc0QsRUFBRSxHQUFHLFFBQWlDN0IsRUFBdEJ3TCxFQUFFLEdBQUd4TCxFQUFFcVIsUUFBUSxLQUFLLEVBQUl4UCxFQUFFN0IsRUFBRWdLLFFBQVFvakQsRUFBRSxLQUFLNkIsR0FBRyxNQUFhcHRELEVBQUU3QixFQUFFaXZELEdBQUd0dUQsR0FBR1gsRUFBRWQsRUFBRStCLEdBQUdOLEVBQUVxSixRQUFRekssRUFBRSxJQUFJc29DLE9BQU8sT0FBTzNvQyxFQUE1cEIsQ0FBK3BCMkMsR0FBR0EsRUFBRStzRCxHQUFHLFFBQUssS0FBVWp1RCxFQUFFcXZELEdBQTV5SixFQUFrekpMLEdBQUdweEIsRUFBRXh6QixFQUFFbWpELEVBQUdELEVBQUdvQixHQUFHanZELEVBQUVsQixFQUFFa0IsS0FBSyxLQUFLdXZELEdBQUdodkQsR0FBR3VCLE9BQU8sT0FBTzJ0RCxHQUFHRixHQUFHQyxHQUFHLEdBQUdELEdBQUdweEIsRUFBRTkyQixLQUFLLEtBQUssSUFBSWtvRCxHQUFHLElBQUl0QixFQUFHRixHQUFJLEVBQUUsQ0FBMkIsT0FBdkIsSUFBSUUsR0FBSzhCLEdBQUdSLEdBQUcsS0FBR3hCLEVBQUcsR0FBU0EsR0FBSSxLQUF2akssSUFBK2pLd0IsR0FBR0EsR0FBRzNsRCxRQUFRN0gsRUFBRSxZQUFZd3RELEdBQUcsTUFBTSxLQUEzbUssSUFBbW5LQSxHQUFHQSxHQUFHM2xELFFBQVFoSixFQUFFLEtBQUt1c0QsRUFBRSxZQUFZb0MsR0FBRzNsRCxRQUFRaEosRUFBRSxhQUFhMnVELEdBQUczbEQsUUFBUWhKLEVBQUUsaUJBQWtCMnVELEdBQUd4QixFQUFHLEdBQUcsT0FBTzBCLEdBQUdGLEdBQUdDLEdBQUcsU0FBU0ssR0FBR2xsRCxFQUFFbEosRUFBRTdCLEdBQUcsSUFBSVQsRUFBRXNDLEVBQUVnbUMsT0FBTzd6QixNQUFNclUsR0FBR3NCLEVBQUUxQixFQUFFYSxFQUFFYixFQUFFMkMsT0FBT2hELEVBQUU2TCxFQUFFN0ksT0FBTyxPQUFPaEQsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSXEvQixFQUFFLEVBQUU1OUIsRUFBRSxJQUFJekIsRUFBRSxHQUFHNkwsRUFBRSxHQUFHLElBQUl3ekIsRUFBRW4rQixJQUFJbStCLEVBQUV0OUIsRUFBRXM5QixHQUFHZ3hCLEdBQUc1dUQsRUFBRU0sRUFBRXM5QixHQUFHditCLEVBQUVkLEdBQUcyb0MsT0FBTyxNQUFNLFFBQVF0SixFQUFFLEVBQUUsSUFBSXAvQixFQUFFLEVBQUUsSUFBSThCLEVBQUUsR0FBR3M5QixFQUFFbitCLElBQUltK0IsRUFBRSxJQUFJLElBQUkveUIsRUFBRSxFQUFFQSxFQUFFdE0sSUFBSXNNLEVBQUV2SyxFQUFFOUIsS0FBS293RCxHQUFHeGtELEVBQUVTLEdBQUcsSUFBSWpNLEVBQUVnL0IsR0FBR3YrQixFQUFFZCxHQUFHMm9DLE9BQU8sT0FBTzVtQyxFQUFFLFNBQVNzdUQsR0FBR3hrRCxFQUFFbEosRUFBRTdCLEVBQUVULEdBQUcsSUFBSTBCLEVBQUVZLEVBQUV6QixFQUFFYSxFQUFFbXZDLFdBQVcsR0FBd0MsT0FBbENod0MsRUFBRSxLQUFHQSxHQUFHYSxFQUFFQSxFQUFFNG1DLFFBQVF1SSxXQUFXLElBQVVod0MsR0FBRyxLQUF4ckwsR0FBK3JMLE9BQU9ndUQsRUFBRzd1RCxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJd0wsRUFBRTg4QixPQUFPM2xDLE9BQU8sTUFBTSxRQUFRLE9BQU9qQixFQUFFK0ksUUFBUXdCLEVBQUUsS0FBS1QsRUFBRTg4QixRQUFRLE1BQU0sS0FBS2ttQixFQUFFLE9BQU85c0QsRUFBRW12QyxXQUFXLElBQUksS0FBSyxJQUFJLEdBQUdrZSxFQUFHLEdBQUdGLEVBQUcsRUFBRSxPQUFPbnRELEVBQUUrSSxRQUFReWhCLEVBQUUsTUFBTXpoQixRQUFRd0IsRUFBRSxLQUFLMGpELElBQUksTUFBTSxRQUFRLE9BQU9ua0QsRUFBRTg4QixPQUFPNW1DLEVBQUUrSSxRQUFRd0IsRUFBRSxLQUFLVCxFQUFFODhCLFFBQVEsUUFBUSxHQUFHN25DLEVBQUVvdUQsRUFBRyxHQUFHbnRELEVBQUVvUSxRQUFRLE1BQU0sRUFBRSxPQUFPcFEsRUFBRStJLFFBQVF3QixHQUFHVCxFQUFFcWxDLFdBQVcsS0FBSzJkLEVBQUUsR0FBRyxNQUFNaGpELEVBQUU4OEIsUUFBUSxPQUFPOThCLEVBQUU5SixFQUFFLFNBQVNtdkQsR0FBR3JsRCxFQUFFbEosRUFBRTdCLEVBQUVULEdBQUcsSUFBSUosRUFBRVEsRUFBRSxFQUFFNkwsRUFBRVQsRUFBRSxJQUFJMGdCLEVBQUUsRUFBRTVwQixFQUFFLEVBQUU3QixFQUFFLEVBQUVULEVBQUUsR0FBRyxNQUFNa3NCLEVBQUUsT0FBTyxTQUFTMWdCLEdBQUcsSUFBSWxKLEVBQUVrSixFQUFFN0ksT0FBT2xDLEVBQUUrSyxFQUFFc0csUUFBUSxJQUFJLEdBQUcsRUFBRTlSLEVBQUV3TCxFQUFFZ2xELFVBQVUsRUFBRS92RCxHQUFHNm5DLE9BQU81bUMsRUFBRThKLEVBQUVnbEQsVUFBVS92RCxFQUFFNkIsRUFBRSxHQUFHZ21DLE9BQU8sT0FBTzk4QixFQUFFcWxDLFdBQVcsR0FBRzJlLElBQUksS0FBSyxFQUFFLE1BQU0sS0FBSzVpRCxFQUFFLEdBQUcsTUFBTXBCLEVBQUVxbEMsV0FBVyxJQUFJLE1BQU0sUUFBWSxJQUFJaHdDLEVBQUVhLEVBQUUrUyxPQUFPL1MsRUFBRSxHQUFHczlCLElBQUlyL0IsRUFBRSxFQUE5QixJQUFnQ2MsRUFBRSxFQUFFNkIsRUFBRXpCLEVBQUU4QixPQUFPaEQsRUFBRTJDLEVBQUU3QixFQUFFLElBQUlkLEVBQUUsQ0FBQyxJQUFJLElBQUlDLEVBQUVpQixFQUFFbEIsR0FBR1MsRUFBRVIsRUFBRTZVLE1BQU1yVCxHQUFHeEIsRUFBRVEsRUFBRUssSUFBSSxDQUFDLElBQUl3TCxFQUFFck0sRUFBRWl4QyxXQUFXLEdBQUcsR0FBRyxJQUFJMmUsS0FBS3ZqRCxFQUE5N00sSUFBbThNQSxFQUFFLElBQUlBLEVBQUUsSUFBSUEsRUFBRSxLQUE3N00sS0FBazhNQSxHQUFPQSxJQUFJVyxHQUFHaE4sRUFBRWl4QyxXQUFXLEtBQUtqa0MsR0FBRyxPQUFPdEgsTUFBTW1lLFdBQVc3akIsTUFBTSxJQUFJQSxFQUFFa1MsUUFBUSxPQUFPLEtBQUssRUFBRSxPQUFPbFMsR0FBRyxJQUFJLFdBQVcsSUFBSSxZQUFZLElBQUksWUFBWSxJQUFJLFVBQVUsSUFBSSxTQUFTLElBQUksV0FBVyxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxVQUFVLElBQUksV0FBVyxJQUFJLGNBQWMsSUFBSSxTQUFTLElBQUksVUFBVSxJQUFJLG9CQUFvQixJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksUUFBUSxJQUFJLGFBQWEsSUFBSSxXQUFXLE1BQU0sUUFBUUEsR0FBRzZ2RCxJQUFJcnZELEVBQUVLLEtBQUtiLEVBQUU4QixJQUFJLElBQUkvQixFQUFFLEdBQUcsS0FBS1MsRUFBRThILEtBQUssTUFBTSxPQUFHeEcsRUFBRTFCLEVBQUUwQixFQUFFLElBQUksSUFBSW90RCxHQUFJLElBQUlBLEdBQUk4QixHQUFHbHZELEVBQUUsR0FBVXNzRCxFQUFFdHNELEVBQUVBLEVBQVNBLEVBQXQyQixDQUF5MkJ1SyxHQUFRLEdBQUcsSUFBSTZpRCxHQUFJLElBQUlBLElBQUs4QixHQUFHM2tELEVBQUUsR0FBRyxPQUFPQSxFQUFFLE9BQU9pZ0IsR0FBRyxLQUFLLEtBQUssT0FBTyxLQUFLamdCLEVBQUU0a0MsV0FBVyxJQUFJbWQsRUFBRS9oRCxFQUFFQSxFQUFFQSxFQUFFLEtBQUssSUFBSSxPQUFPLE1BQU1BLEVBQUU0a0MsV0FBVyxHQUFHbWQsRUFBRS9oRCxFQUFFQSxFQUFFQSxFQUFFLEtBQUssSUFBSSxPQUFPLE1BQU1BLEVBQUU0a0MsV0FBVyxHQUFHbWQsRUFBRS9oRCxFQUFFQSxFQUFFQSxFQUFFLEtBQUssS0FBSyxHQUFHLE1BQU1BLEVBQUU0a0MsV0FBVyxHQUFHLE1BQU0sS0FBSyxJQUFJLEtBQUssSUFBSSxPQUFPbWQsRUFBRS9oRCxFQUFFQSxFQUFFLEtBQUssSUFBSSxPQUFPK2hELEVBQUUvaEQsRUFBRWdpRCxFQUFFaGlELEVBQUVBLEVBQUUsS0FBSyxLQUFLLEtBQUssSUFBSSxPQUFPK2hELEVBQUUvaEQsRUFBRWdpRCxFQUFFaGlELEVBQUU4eUIsRUFBRTl5QixFQUFFQSxFQUFFLEtBQUssSUFBSSxPQUFHQSxFQUFFNGtDLFdBQVcsS0FBS2prQyxFQUFTb2hELEVBQUUvaEQsRUFBRUEsRUFBS0EsRUFBRTZGLFFBQVEsYUFBYSxJQUFJLEVBQVM3RixFQUFFeEIsUUFBUXNqRCxFQUFFLEtBQUtDLEVBQUUsTUFBTS9oRCxFQUFTQSxFQUFFLEtBQUssSUFBSSxHQUFHQSxFQUFFNGtDLFdBQVcsS0FBS2prQyxFQUFFLE9BQU9YLEVBQUU0a0MsV0FBVyxJQUFJLEtBQUssSUFBSSxPQUFPbWQsRUFBRSxPQUFPL2hELEVBQUV4QixRQUFRLFFBQVEsSUFBSXVqRCxFQUFFL2hELEVBQUU4eUIsRUFBRTl5QixFQUFFeEIsUUFBUSxPQUFPLFlBQVl3QixFQUFFLEtBQUssSUFBSSxPQUFPK2hELEVBQUUvaEQsRUFBRTh5QixFQUFFOXlCLEVBQUV4QixRQUFRLFNBQVMsWUFBWXdCLEVBQUUsS0FBSyxHQUFHLE9BQU8raEQsRUFBRS9oRCxFQUFFOHlCLEVBQUU5eUIsRUFBRXhCLFFBQVEsUUFBUSxrQkFBa0J3QixFQUFFLE9BQU8raEQsRUFBRS9oRCxFQUFFOHlCLEVBQUU5eUIsRUFBRUEsRUFBRSxLQUFLLElBQUksT0FBTytoRCxFQUFFL2hELEVBQUU4eUIsRUFBRSxRQUFROXlCLEVBQUVBLEVBQUUsS0FBSyxLQUFLLEdBQUcsS0FBS0EsRUFBRTRrQyxXQUFXLEdBQUcsTUFBTSxPQUFPanhDLEVBQUVxTSxFQUFFdWtELFVBQVV2a0QsRUFBRTZGLFFBQVEsSUFBSSxLQUFLckgsUUFBUSxRQUFRLElBQUlBLFFBQVEsZ0JBQWdCLFdBQVd1akQsRUFBRSxXQUFXcHVELEVBQUVvdUQsRUFBRS9oRCxFQUFFOHlCLEVBQUUsWUFBWW4vQixFQUFFcU0sRUFBRSxLQUFLLEtBQUssT0FBT3BMLEVBQUVvSyxLQUFLZ0IsR0FBR0EsRUFBRXhCLFFBQVEvSSxFQUFFLElBQUlzc0QsR0FBRy9oRCxFQUFFeEIsUUFBUS9JLEVBQUUsSUFBSXVzRCxHQUFHaGlELEVBQUVBLEVBQUUsS0FBSyxJQUFJLE9BQU83TCxHQUFHUixFQUFFcU0sRUFBRXVrRCxVQUFVLElBQUlsb0IsUUFBUXgyQixRQUFRLEtBQUssRUFBRWxTLEVBQUVpeEMsV0FBVyxHQUFHanhDLEVBQUVpeEMsV0FBV3p3QyxJQUFJLEtBQUssSUFBSVIsRUFBRXFNLEVBQUV4QixRQUFRMUssRUFBRSxNQUFNLE1BQU0sS0FBSyxJQUFJSCxFQUFFcU0sRUFBRXhCLFFBQVExSyxFQUFFLFNBQVMsTUFBTSxLQUFLLElBQUlILEVBQUVxTSxFQUFFeEIsUUFBUTFLLEVBQUUsTUFBTSxNQUFNLFFBQVEsT0FBT2tNLEVBQUUsT0FBTytoRCxFQUFFL2hELEVBQUU4eUIsRUFBRW4vQixFQUFFcU0sRUFBRSxLQUFLLEtBQUssSUFBSSxJQUFJQSxFQUFFNkYsUUFBUSxTQUFTLEdBQUcsT0FBTzdGLEVBQUUsS0FBSyxJQUFJLE9BQU83TCxHQUFHNkwsRUFBRVQsR0FBRzdJLE9BQU8sR0FBR3VwQixHQUFHdHNCLEdBQUcsS0FBS3FNLEVBQUU0a0MsV0FBV3p3QyxHQUFHNkwsRUFBRXVrRCxVQUFVLEVBQUVwd0QsR0FBRzZMLEdBQUd1a0QsVUFBVWhsRCxFQUFFc0csUUFBUSxJQUFJLEdBQUcsR0FBR3cyQixRQUFRdUksV0FBVyxJQUFJLEVBQUVqeEMsRUFBRWl4QyxXQUFXLEtBQUssS0FBSyxJQUFJLEdBQUdqeEMsRUFBRWl4QyxXQUFXLEdBQUcsSUFBSSxNQUFNLEtBQUssSUFBSTVrQyxFQUFFQSxFQUFFeEIsUUFBUTdLLEVBQUVvdUQsRUFBRXB1RCxHQUFHLElBQUlxTSxFQUFFLE1BQU0sS0FBSyxJQUFJLEtBQUssSUFBSUEsRUFBRUEsRUFBRXhCLFFBQVE3SyxFQUFFb3VELEdBQUc5aEMsRUFBRSxJQUFJLFVBQVUsSUFBSSxPQUFPLElBQUlqZ0IsRUFBRXhCLFFBQVE3SyxFQUFFb3VELEVBQUVwdUQsR0FBRyxJQUFJcU0sRUFBRXhCLFFBQVE3SyxFQUFFbS9CLEVBQUVuL0IsRUFBRSxPQUFPLElBQUlxTSxFQUFFLE9BQU9BLEVBQUUsSUFBSSxLQUFLLElBQUksR0FBR0EsRUFBRTRrQyxXQUFXLEtBQUtqa0MsRUFBRSxPQUFPWCxFQUFFNGtDLFdBQVcsSUFBSSxLQUFLLElBQUksT0FBT2p4QyxFQUFFcU0sRUFBRXhCLFFBQVEsU0FBUyxJQUFJdWpELEVBQUUvaEQsRUFBRStoRCxFQUFFLE9BQU9wdUQsRUFBRW0vQixFQUFFLFFBQVFuL0IsRUFBRXFNLEVBQUUsS0FBSyxJQUFJLE9BQU8raEQsRUFBRS9oRCxFQUFFOHlCLEVBQUUsYUFBYTl5QixFQUFFeEIsUUFBUW9ELEVBQUUsSUFBSTVCLEVBQUUsUUFBUSxPQUFPK2hELEVBQUUvaEQsRUFBRTh5QixFQUFFLGlCQUFpQjl5QixFQUFFeEIsUUFBUSxnQkFBZ0IsSUFBSUEsUUFBUW9ELEVBQUUsSUFBSTVCLEVBQUUsTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUdBLEVBQUU0a0MsV0FBVyxLQUFLamtDLEdBQUcsTUFBTVgsRUFBRTRrQyxXQUFXLEdBQUcsTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJLElBQUcsSUFBTzd6QixFQUFFL1IsS0FBS08sR0FBRyxPQUFHLE9BQU81TCxFQUFFNEwsRUFBRWdsRCxVQUFVaGxELEVBQUVzRyxRQUFRLEtBQUssSUFBSSsrQixXQUFXLEdBQVVnZ0IsR0FBR3JsRCxFQUFFZixRQUFRLFVBQVUsa0JBQWtCbkksRUFBRTdCLEVBQUVULEdBQUd5SyxRQUFRLGtCQUFrQixZQUF3QndCLEVBQUV4QixRQUFRN0ssRUFBRW91RCxFQUFFcHVELEdBQUdxTSxFQUFFeEIsUUFBUTdLLEVBQUVxdUQsRUFBRXJ1RCxFQUFFNkssUUFBUSxRQUFRLEtBQUt3QixFQUFFLE1BQU0sS0FBSyxJQUFJLEdBQUdBLEVBQUUraEQsRUFBRS9oRCxHQUFHLE1BQU1BLEVBQUU0a0MsV0FBVyxHQUFHOVIsRUFBRTl5QixFQUFFLElBQUlBLEVBQUV4TCxFQUFFVCxJQUFJLEtBQUssTUFBTWlNLEVBQUU0a0MsV0FBVyxLQUFLNWtDLEVBQUU2RixRQUFRLFlBQVksSUFBSSxFQUFFLE9BQU83RixFQUFFdWtELFVBQVUsRUFBRXZrRCxFQUFFNkYsUUFBUSxJQUFJLElBQUksR0FBR3JILFFBQVE5SyxFQUFFLEtBQUtxdUQsRUFBRSxNQUFNL2hELEVBQUUsT0FBT0EsRUFBRSxTQUFTMmtELEdBQUdwbEQsRUFBRWxKLEdBQUcsSUFBSTdCLEVBQUUrSyxFQUFFc0csUUFBUSxJQUFJeFAsRUFBRSxJQUFJLEtBQUt0QyxFQUFFd0wsRUFBRWdsRCxVQUFVLEVBQUUsSUFBSWx1RCxFQUFFN0IsRUFBRSxJQUFJaUIsRUFBRThKLEVBQUVnbEQsVUFBVS92RCxFQUFFLEVBQUUrSyxFQUFFN0ksT0FBTyxHQUFHLE9BQU8yc0QsR0FBRyxJQUFJaHRELEVBQUV0QyxFQUFFQSxFQUFFeUssUUFBUWkxQyxFQUFFLE1BQU1oK0MsRUFBRVksR0FBRyxTQUFTcXVELEdBQUdubEQsRUFBRWxKLEdBQUcsSUFBSTdCLEVBQUVvd0QsR0FBR3Z1RCxFQUFFQSxFQUFFdXVDLFdBQVcsR0FBR3Z1QyxFQUFFdXVDLFdBQVcsR0FBR3Z1QyxFQUFFdXVDLFdBQVcsSUFBSSxPQUFPcHdDLElBQUk2QixFQUFFLElBQUk3QixFQUFFZ0ssUUFBUXFqRCxFQUFFLFlBQVkwQyxVQUFVLEdBQUcsSUFBSWx1RCxFQUFFLElBQUksU0FBU211RCxHQUFHamxELEVBQUVsSixFQUFFN0IsRUFBRVQsRUFBRTBCLEVBQUViLEVBQUVsQixFQUFFcS9CLEVBQUU1OUIsRUFBRXhCLEdBQUcsSUFBSSxJQUFJUSxFQUFFNkwsRUFBRSxFQUFFaWdCLEVBQUU1cEIsRUFBRTJKLEVBQUVvakQsS0FBS3BqRCxFQUFFLE9BQU83TCxFQUFFZ3ZELEdBQUduakQsR0FBR25NLEtBQUtvd0QsR0FBRzFrRCxFQUFFMGdCLEVBQUV6ckIsRUFBRVQsRUFBRTBCLEVBQUViLEVBQUVsQixFQUFFcS9CLEVBQUU1OUIsRUFBRXhCLElBQUksVUFBSyxFQUFPLEtBQUssRUFBTSxLQUFLLEVBQUssS0FBSyxLQUFLLE1BQU0sUUFBUXNzQixFQUFFOXJCLEVBQUUsR0FBRzhyQixJQUFJNXBCLEVBQUUsT0FBTzRwQixFQUFFLFNBQVNxa0MsR0FBRy9rRCxFQUFFbEosRUFBRTdCLEVBQUVULEdBQUcsSUFBSSxJQUFJMEIsRUFBRVksRUFBRSxFQUFFWixFQUFFakIsSUFBSWlCLEVBQUUsT0FBTzFCLEVBQUU2d0MsV0FBV252QyxJQUFJLEtBQUsrc0QsRUFBRSxHQUFHampELElBQUk4aUQsR0FBS3R1RCxFQUFFNndDLFdBQVdudkMsRUFBRSxLQUFLNHNELEdBQUdoc0QsRUFBRSxJQUFJWixFQUFFLE9BQU9BLEVBQUUsRUFBRSxNQUFNLEtBQUswc0QsRUFBRSxHQUFHNWlELElBQUlpakQsRUFBRSxPQUFPL3NELEVBQUUsRUFBRSxPQUFPQSxFQUFFLFNBQVN1dUQsR0FBR3prRCxHQUFHLElBQUksSUFBSWxKLEtBQUtrSixFQUFFLENBQUMsSUFBSS9LLEVBQUUrSyxFQUFFbEosR0FBRyxPQUFPQSxHQUFHLElBQUksV0FBV2t0RCxHQUFHLEVBQUUvdUQsRUFBRSxNQUFNLElBQUksU0FBU3N1RCxFQUFHLEVBQUV0dUQsRUFBRSxNQUFNLElBQUksVUFBVW91RCxFQUFHLEVBQUVwdUQsRUFBRSxNQUFNLElBQUksV0FBV3V1RCxFQUFHLEVBQUV2dUQsRUFBRSxNQUFNLElBQUksWUFBWXd1RCxFQUFHLEVBQUV4dUQsRUFBRSxNQUFNLElBQUksV0FBV3l1RCxFQUFHLEVBQUV6dUQsRUFBRSxNQUFNLElBQUksU0FBWTZ1RCxHQUFHLEtBQU03dUQsRUFBZSxtQkFBbUJBLEVBQUVxdUQsRUFBRyxHQUFPQSxFQUFHLEVBQUVRLEdBQUc3dUQsR0FBcERxdUQsRUFBRyxHQUFvRCxPQUFPbUIsR0FBRyxTQUFTQyxHQUFHNXRELEVBQUU3QixHQUFHLFFBQUcsSUFBU3dGLE1BQU1BLEtBQUsrdkIsY0FBY2s2QixHQUFHLE9BQU8xa0QsRUFBRWxKLEdBQUcsSUFBSVosRUFBRVksRUFBRXpCLEVBQUVhLEVBQUVtdkMsV0FBVyxHQUFNaHdDLEVBQUUsS0FBR0EsR0FBR2EsRUFBRUEsRUFBRTRtQyxRQUFRdUksV0FBVyxJQUFNMmUsR0FBRyxJQUFFQyxHQUFHL3RELEVBQUUrSSxRQUFReEssRUFBbDlVLEtBQW85VVksRUFBTSxHQUFHLE1BQVFBLEVBQUUsRUFBRSxJQUFJZ3VELEVBQUdjLEdBQUdqdUQsRUFBT2d1RCxHQUFHaHVELEVBQUUsSUFBSS9CLEVBQUVxL0IsRUFBRSxDQUFDMndCLElBQU9OLEdBQUcsUUFBSyxLQUFVMXZELEVBQUU4d0QsSUFBdHlVLEVBQTR5VWh3RCxFQUFFdStCLEVBQUVBLEVBQUUydkIsRUFBR0QsRUFBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLGlCQUFpQi91RCxJQUFFYyxFQUFFZCxHQUFFLElBQUl5QixFQUFFd3VELEdBQUdULEdBQUdud0IsRUFBRXYrQixFQUFFLEVBQUUsR0FBd0YsT0FBbEY0dUQsR0FBRyxRQUFLLEtBQVUxdkQsRUFBRTh3RCxJQUE1NFUsRUFBazVVcnZELEVBQUU0OUIsRUFBRUEsRUFBRTJ2QixFQUFHRCxFQUFHdHRELEVBQUV1QixPQUFPLEVBQUUsRUFBRSxLQUFLLGlCQUFpQnZCLEVBQUV6QixLQUFHa0IsRUFBRSxHQUFTNHVELEdBQUcsR0FBR0UsR0FBRyxHQUFHRCxHQUFHLEdBQUdkLEVBQUcsRUFBRUQsRUFBRyxFQUFFRCxFQUFHLEVBQUVNLEVBQUdudUQsR0FBRyxFQUFFTyxFQUFFQSxFQUFFcUosUUFBUXpLLEVBQUUsSUFBSXlLLFFBQVFrc0IsRUFBRSxJQUFJbHNCLFFBQVFrakQsRUFBRSxNQUFNbGpELFFBQVFtakQsRUFBRSxNQUFNbmpELFFBQVE4QyxFQUFFLEtBQWtQLE9BQTFPMmlELEdBQUd4ekIsSUFBSSxTQUFTbHhCLEVBQUVsSixHQUFHLE9BQU9BLEdBQUcsVUFBSyxFQUFPLEtBQUssS0FBSytzRCxHQUFHRCxHQUFHenNELE9BQU8sRUFBRSxNQUFNLFFBQVEsR0FBRyxtQkFBbUJMLEVBQUU4c0QsR0FBR0MsTUFBTS9zRCxPQUFPLEdBQUcsaUJBQWlCQSxFQUFFLElBQUksSUFBSTdCLEVBQUUsRUFBRVQsRUFBRXNDLEVBQUVLLE9BQU9sQyxFQUFFVCxJQUFJUyxFQUFFK0ssRUFBRWxKLEVBQUU3QixTQUFTOHVELEdBQUcsSUFBSWp0RCxFQUFFLE9BQU9rSixHQUFHMGtELEdBQUdwbkQsSUFBSW1uRCxRQUFHLElBQVMzdEQsR0FBRTJ0RCxHQUFHM3RELEdBQVU0dEQsR0FBeHdYMWtELENBQUUsTyw2QkNBbkYsSUFBSXNsRCxFQUFZbE4sT0FBT3QrQyxPQUNuQixTQUFrQjFFLEdBQ2QsTUFBd0IsaUJBQVZBLEdBQXNCQSxHQUFVQSxHQVd0RCxTQUFTbXdELEVBQWVDLEVBQVdDLEdBQy9CLEdBQUlELEVBQVVydUQsU0FBV3N1RCxFQUFXdHVELE9BQ2hDLE9BQU8sRUFFWCxJQUFLLElBQUloRCxFQUFJLEVBQUdBLEVBQUlxeEQsRUFBVXJ1RCxPQUFRaEQsSUFDbEMsR0FkUzBwRCxFQWNJMkgsRUFBVXJ4RCxHQWRQcU4sRUFjV2lrRCxFQUFXdHhELEtBYnRDMHBELElBQVVyOEMsR0FHVjhqRCxFQUFVekgsSUFBVXlILEVBQVU5akQsSUFXMUIsT0FBTyxFQWZuQixJQUFpQnE4QyxFQUFPcjhDLEVBa0JwQixPQUFPLEVBMEJJLElBdkJmLFNBQW9Ca2tELEVBQVVDLEdBRTFCLElBQUlDLE9BRFksSUFBWkQsSUFBc0JBLEVBQVVKLEdBRXBDLElBQ0lNLEVBREFDLEVBQVcsR0FFWEMsR0FBYSxFQWVqQixPQWRBLFdBRUksSUFEQSxJQUFJQyxFQUFVLEdBQ0w1cUQsRUFBSyxFQUFHQSxFQUFLN0UsVUFBVVksT0FBUWlFLElBQ3BDNHFELEVBQVE1cUQsR0FBTTdFLFVBQVU2RSxHQUU1QixPQUFJMnFELEdBQWNILElBQWFuckQsTUFBUWtyRCxFQUFRSyxFQUFTRixLQUd4REQsRUFBYUgsRUFBU3B2RCxNQUFNbUUsS0FBTXVyRCxHQUNsQ0QsR0FBYSxFQUNiSCxFQUFXbnJELEtBQ1hxckQsRUFBV0UsR0FMQUgsSyxjQzNCbkIsSUFTSWpVLEVBTmMvOEMsT0FBT2tCLFVBTVFZLFNBeUI3QkgsRUFBVUUsTUFBTUYsUUFrRHBCdEMsRUFBT0QsUUFMUCxTQUFrQm1CLEdBQ2hCLE1BQXVCLGlCQUFUQSxJQUNWb0IsRUFBUXBCLElBdEJkLFNBQXNCQSxHQUNwQixRQUFTQSxHQUF5QixpQkFBVEEsRUFxQkgwOEMsQ0FBYTE4QyxJQWpGckIsbUJBaUYrQnc4QyxFQUFldDlDLEtBQUtjLEs7Ozs7O0VDbkZuRSxJQUFJeTBCLEVBQXdCaDFCLE9BQU9nMUIsc0JBQy9CN3pCLEVBQWlCbkIsT0FBT2tCLFVBQVVDLGVBQ2xDaXdELEVBQW1CcHhELE9BQU9rQixVQUFVNi9CLHFCQUV4QyxTQUFTN1UsRUFBUzlsQixHQUNqQixHQUFJQSxRQUNILE1BQU0sSUFBSTR3QixVQUFVLHlEQUdyQixPQUFPaDNCLE9BQU9vRyxHQStDZi9HLEVBQU9ELFFBNUNQLFdBQ0MsSUFDQyxJQUFLWSxPQUFPc3pCLE9BQ1gsT0FBTyxFQU1SLElBQUkrOUIsRUFBUSxJQUFJanJDLE9BQU8sT0FFdkIsR0FEQWlyQyxFQUFNLEdBQUssS0FDa0MsTUFBekNyeEQsT0FBT3FDLG9CQUFvQmd2RCxHQUFPLEdBQ3JDLE9BQU8sRUFLUixJQURBLElBQUlDLEVBQVEsR0FDSGh5RCxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdkJneUQsRUFBTSxJQUFNbHJDLE9BQU9zcUIsYUFBYXB4QyxJQUFNQSxFQUt2QyxHQUF3QixlQUhYVSxPQUFPcUMsb0JBQW9CaXZELEdBQU8xdUQsS0FBSSxTQUFVN0IsR0FDNUQsT0FBT3V3RCxFQUFNdndELE1BRUg4RyxLQUFLLElBQ2YsT0FBTyxFQUlSLElBQUkwcEQsRUFBUSxHQUlaLE1BSEEsdUJBQXVCbjlDLE1BQU0sSUFBSXFJLFNBQVEsU0FBVSswQyxHQUNsREQsRUFBTUMsR0FBVUEsS0FHZix5QkFERXh4RCxPQUFPZ0ksS0FBS2hJLE9BQU9zekIsT0FBTyxHQUFJaStCLElBQVExcEQsS0FBSyxJQU05QyxNQUFPNnZCLEdBRVIsT0FBTyxHQUlRKzVCLEdBQW9CenhELE9BQU9zekIsT0FBUyxTQUFVK0IsRUFBUWpGLEdBS3RFLElBSkEsSUFBSWxxQixFQUVBK3VCLEVBREFodkIsRUFBS2ltQixFQUFTbUosR0FHVGgwQixFQUFJLEVBQUdBLEVBQUlLLFVBQVVZLE9BQVFqQixJQUFLLENBRzFDLElBQUssSUFBSVIsS0FGVHFGLEVBQU9sRyxPQUFPMEIsVUFBVUwsSUFHbkJGLEVBQWUxQixLQUFLeUcsRUFBTXJGLEtBQzdCb0YsRUFBR3BGLEdBQU9xRixFQUFLckYsSUFJakIsR0FBSW0wQixFQUF1QixDQUMxQkMsRUFBVUQsRUFBc0I5dUIsR0FDaEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJMjFCLEVBQVEzeUIsT0FBUWhELElBQy9COHhELEVBQWlCM3hELEtBQUt5RyxFQUFNK3VCLEVBQVEzMUIsTUFDdkMyRyxFQUFHZ3ZCLEVBQVEzMUIsSUFBTTRHLEVBQUsrdUIsRUFBUTMxQixNQU1sQyxPQUFPMkcsSSxnQkN4RlIsSUFBSXd2QixFQUFVLEVBQVEsSUFBd0IsUUFDMUNpOEIsRUFBYyxFQUFRLEtBSzFCcnlELEVBQU9ELFFBSlAsU0FBdUJvQixHQUNyQixJQUFJbEIsRUFBSW95RCxFQUFZbHhELEVBQUcsVUFDdkIsTUFBTyxVQUFZaTFCLEVBQVFuMkIsR0FBS0EsRUFBSUEsRUFBSSxJQUVWRCxFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QsUyw2QkNKckdDLEVBQU9ELFFBQVUsU0FBYzBELEVBQUkrMkMsR0FDakMsT0FBTyxXQUVMLElBREEsSUFBSW55QyxFQUFPLElBQUk3RixNQUFNSCxVQUFVWSxRQUN0QmhELEVBQUksRUFBR0EsRUFBSW9JLEVBQUtwRixPQUFRaEQsSUFDL0JvSSxFQUFLcEksR0FBS29DLFVBQVVwQyxHQUV0QixPQUFPd0QsRUFBR3JCLE1BQU1vNEMsRUFBU255QyxNLDZCQ043QixJQUFJaXFELEVBQVEsRUFBUSxHQUVwQixTQUFTQyxFQUFPeHJELEdBQ2QsT0FBT3NoRCxtQkFBbUJ0aEQsR0FDeEJnRSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsT0FBUSxLQUNoQkEsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxRQUFTLEtBVXJCL0ssRUFBT0QsUUFBVSxTQUFrQnl5RCxFQUFLenpCLEVBQVExQyxHQUU5QyxJQUFLMEMsRUFDSCxPQUFPeXpCLEVBR1QsSUFBSUMsRUFDSixHQUFJcDJCLEVBQ0ZvMkIsRUFBbUJwMkIsRUFBaUIwQyxRQUMvQixHQUFJdXpCLEVBQU1uWSxrQkFBa0JwYixHQUNqQzB6QixFQUFtQjF6QixFQUFPdDhCLGVBQ3JCLENBQ0wsSUFBSXVpQixFQUFRLEdBRVpzdEMsRUFBTWwxQyxRQUFRMmhCLEdBQVEsU0FBbUJoNEIsRUFBS3ZGLEdBQ3hDdUYsVUFJQXVyRCxFQUFNaHdELFFBQVF5RSxHQUNoQnZGLEdBQVksS0FFWnVGLEVBQU0sQ0FBQ0EsR0FHVHVyRCxFQUFNbDFDLFFBQVFyVyxHQUFLLFNBQW9Cb25ELEdBQ2pDbUUsRUFBTWp2RCxPQUFPOHFELEdBQ2ZBLEVBQUlBLEVBQUVwaEMsY0FDR3VsQyxFQUFNNXZELFNBQVN5ckQsS0FDeEJBLEVBQUlqVixLQUFLNWMsVUFBVTZ4QixJQUVyQm5wQyxFQUFNcGhCLEtBQUsydUQsRUFBTy93RCxHQUFPLElBQU0rd0QsRUFBT3BFLFdBSTFDc0UsRUFBbUJ6dEMsRUFBTXhjLEtBQUssS0FHaEMsR0FBSWlxRCxFQUFrQixDQUNwQixJQUFJQyxFQUFnQkYsRUFBSXBnRCxRQUFRLE1BQ1QsSUFBbkJzZ0QsSUFDRkYsRUFBTUEsRUFBSWpxRCxNQUFNLEVBQUdtcUQsSUFHckJGLEtBQThCLElBQXRCQSxFQUFJcGdELFFBQVEsS0FBYyxJQUFNLEtBQU9xZ0QsRUFHakQsT0FBT0QsSSw2QkNsRVR4eUQsRUFBT0QsUUFBVSxTQUFrQm1CLEdBQ2pDLFNBQVVBLElBQVNBLEVBQU15eEQsYyw4QkNIM0IsWUFFQSxJQUFJTCxFQUFRLEVBQVEsR0FDaEJNLEVBQXNCLEVBQVEsS0FFOUJDLEVBQXVCLENBQ3pCLGVBQWdCLHFDQUdsQixTQUFTQyxFQUFzQmo0QixFQUFTMzVCLElBQ2pDb3hELEVBQU1udkQsWUFBWTAzQixJQUFZeTNCLEVBQU1udkQsWUFBWTAzQixFQUFRLG1CQUMzREEsRUFBUSxnQkFBa0IzNUIsR0FnQjlCLElBWE1rNkIsRUFXRjFhLEVBQVcsQ0FDYjBhLFVBWDhCLG9CQUFuQjIzQixxQkFHbUIsSUFBWm42QixHQUF1RSxxQkFBNUNqNEIsT0FBT2tCLFVBQVVZLFNBQVNyQyxLQUFLdzRCLE1BRDFFd0MsRUFBVSxFQUFRLEtBS2JBLEdBTVA0M0IsaUJBQWtCLENBQUMsU0FBMEJsMkMsRUFBTStkLEdBR2pELE9BRkErM0IsRUFBb0IvM0IsRUFBUyxVQUM3QiszQixFQUFvQi8zQixFQUFTLGdCQUN6QnkzQixFQUFNMVksV0FBVzk4QixJQUNuQncxQyxFQUFNM1ksY0FBYzc4QixJQUNwQncxQyxFQUFNenVCLFNBQVMvbUIsSUFDZncxQyxFQUFNclksU0FBU245QixJQUNmdzFDLEVBQU12WSxPQUFPajlCLElBQ2J3MUMsRUFBTXRZLE9BQU9sOUIsR0FFTkEsRUFFTHcxQyxFQUFNeFksa0JBQWtCaDlCLEdBQ25CQSxFQUFLbW5CLE9BRVZxdUIsRUFBTW5ZLGtCQUFrQnI5QixJQUMxQmcyQyxFQUFzQmo0QixFQUFTLG1EQUN4Qi9kLEVBQUtyYSxZQUVWNnZELEVBQU01dkQsU0FBU29hLElBQ2pCZzJDLEVBQXNCajRCLEVBQVMsa0NBQ3hCcWUsS0FBSzVjLFVBQVV4ZixJQUVqQkEsSUFHVG0yQyxrQkFBbUIsQ0FBQyxTQUEyQm4yQyxHQUU3QyxHQUFvQixpQkFBVEEsRUFDVCxJQUNFQSxFQUFPbzhCLEtBQUtvVSxNQUFNeHdDLEdBQ2xCLE1BQU9oUixJQUVYLE9BQU9nUixJQU9Ua2UsUUFBUyxFQUVUazRCLGVBQWdCLGFBQ2hCQyxlQUFnQixlQUVoQjkzQixrQkFBbUIsRUFDbkJDLGVBQWdCLEVBRWhCODNCLGVBQWdCLFNBQXdCOTBCLEdBQ3RDLE9BQU9BLEdBQVUsS0FBT0EsRUFBUyxNQUlyQzVkLEVBQVNtYSxRQUFVLENBQ2pCdzRCLE9BQVEsQ0FDTixPQUFVLHNDQUlkZixFQUFNbDFDLFFBQVEsQ0FBQyxTQUFVLE1BQU8sU0FBUyxTQUE2QmsyQyxHQUNwRTV5QyxFQUFTbWEsUUFBUXk0QixHQUFVLE1BRzdCaEIsRUFBTWwxQyxRQUFRLENBQUMsT0FBUSxNQUFPLFVBQVUsU0FBK0JrMkMsR0FDckU1eUMsRUFBU21hLFFBQVF5NEIsR0FBVWhCLEVBQU1oWSxNQUFNdVksTUFHekM3eUQsRUFBT0QsUUFBVTJnQixJLCtDQy9GakIsSUFBSTR4QyxFQUFRLEVBQVEsR0FDaEJpQixFQUFTLEVBQVEsS0FDakJDLEVBQVUsRUFBUSxLQUNsQkMsRUFBVyxFQUFRLElBQ25CQyxFQUFnQixFQUFRLEtBQ3hCQyxFQUFlLEVBQVEsS0FDdkJDLEVBQWtCLEVBQVEsS0FDMUJDLEVBQWMsRUFBUSxJQUUxQjd6RCxFQUFPRCxRQUFVLFNBQW9CMkgsR0FDbkMsT0FBTyxJQUFJaXlCLFNBQVEsU0FBNEJDLEVBQVM0RCxHQUN0RCxJQUFJczJCLEVBQWNwc0QsRUFBT29WLEtBQ3JCaTNDLEVBQWlCcnNELEVBQU9tekIsUUFFeEJ5M0IsRUFBTTFZLFdBQVdrYSxXQUNaQyxFQUFlLGlCQUlyQnpCLEVBQU10WSxPQUFPOFosSUFBZ0J4QixFQUFNdlksT0FBTytaLEtBQzNDQSxFQUFZMTZCLGFBRUwyNkIsRUFBZSxnQkFHeEIsSUFBSWgzQixFQUFVLElBQUlnMkIsZUFHbEIsR0FBSXJyRCxFQUFPc3NELEtBQU0sQ0FDZixJQUFJQyxFQUFXdnNELEVBQU9zc0QsS0FBS0MsVUFBWSxHQUNuQ0MsRUFBV0MsU0FBUzlMLG1CQUFtQjNnRCxFQUFPc3NELEtBQUtFLFlBQWMsR0FDckVILEVBQWU1M0IsY0FBZ0IsU0FBV2k0QixLQUFLSCxFQUFXLElBQU1DLEdBR2xFLElBQUlHLEVBQVdYLEVBQWNoc0QsRUFBT3cwQixRQUFTeDBCLEVBQU84cUQsS0E0RXBELEdBM0VBejFCLEVBQVF1M0IsS0FBSzVzRCxFQUFPNHJELE9BQU85aUMsY0FBZWlqQyxFQUFTWSxFQUFVM3NELEVBQU9xM0IsT0FBUXIzQixFQUFPMjBCLG1CQUFtQixHQUd0R1UsRUFBUS9CLFFBQVV0ekIsRUFBT3N6QixRQUd6QitCLEVBQVF3M0IsbUJBQXFCLFdBQzNCLEdBQUt4M0IsR0FBa0MsSUFBdkJBLEVBQVF5M0IsYUFRRCxJQUFuQnozQixFQUFRdUIsUUFBa0J2QixFQUFRMDNCLGFBQXdELElBQXpDMTNCLEVBQVEwM0IsWUFBWXJpRCxRQUFRLFVBQWpGLENBS0EsSUFBSXNpRCxFQUFrQiwwQkFBMkIzM0IsRUFBVTQyQixFQUFhNTJCLEVBQVE0M0IseUJBQTJCLEtBRXZHajNCLEVBQVcsQ0FDYjVnQixLQUZrQnBWLEVBQU9rdEQsY0FBd0MsU0FBeEJsdEQsRUFBT2t0RCxhQUFpRDczQixFQUFRVyxTQUEvQlgsRUFBUTgzQixhQUdsRnYyQixPQUFRdkIsRUFBUXVCLE9BQ2hCdzJCLFdBQVkvM0IsRUFBUSszQixXQUNwQmo2QixRQUFTNjVCLEVBQ1RodEQsT0FBUUEsRUFDUnExQixRQUFTQSxHQUdYdzJCLEVBQU8zNUIsRUFBUzRELEVBQVFFLEdBR3hCWCxFQUFVLE9BSVpBLEVBQVFnNEIsUUFBVSxXQUNYaDRCLElBSUxTLEVBQU9xMkIsRUFBWSxrQkFBbUJuc0QsRUFBUSxlQUFnQnExQixJQUc5REEsRUFBVSxPQUlaQSxFQUFRaTRCLFFBQVUsV0FHaEJ4M0IsRUFBT3EyQixFQUFZLGdCQUFpQm5zRCxFQUFRLEtBQU1xMUIsSUFHbERBLEVBQVUsTUFJWkEsRUFBUWs0QixVQUFZLFdBQ2xCLElBQUlDLEVBQXNCLGNBQWdCeHRELEVBQU9zekIsUUFBVSxjQUN2RHR6QixFQUFPd3RELHNCQUNUQSxFQUFzQnh0RCxFQUFPd3RELHFCQUUvQjEzQixFQUFPcTJCLEVBQVlxQixFQUFxQnh0RCxFQUFRLGVBQzlDcTFCLElBR0ZBLEVBQVUsTUFNUnUxQixFQUFNalksdUJBQXdCLENBRWhDLElBQUk4YSxHQUFhenRELEVBQU8wdEQsaUJBQW1CeEIsRUFBZ0JTLEtBQWMzc0QsRUFBT3dyRCxlQUM5RU0sRUFBUTZCLEtBQUszdEQsRUFBT3dyRCxxQkFDcEJsdEQsRUFFRW12RCxJQUNGcEIsRUFBZXJzRCxFQUFPeXJELGdCQUFrQmdDLEdBdUI1QyxHQWxCSSxxQkFBc0JwNEIsR0FDeEJ1MUIsRUFBTWwxQyxRQUFRMjJDLEdBQWdCLFNBQTBCaHRELEVBQUt2RixRQUNoQyxJQUFoQnN5RCxHQUFxRCxpQkFBdEJ0eUQsRUFBSWdOLHFCQUVyQ3VsRCxFQUFldnlELEdBR3RCdTdCLEVBQVF1NEIsaUJBQWlCOXpELEVBQUt1RixNQU0vQnVyRCxFQUFNbnZELFlBQVl1RSxFQUFPMHRELG1CQUM1QnI0QixFQUFRcTRCLGtCQUFvQjF0RCxFQUFPMHRELGlCQUlqQzF0RCxFQUFPa3RELGFBQ1QsSUFDRTczQixFQUFRNjNCLGFBQWVsdEQsRUFBT2t0RCxhQUM5QixNQUFPOW9ELEdBR1AsR0FBNEIsU0FBeEJwRSxFQUFPa3RELGFBQ1QsTUFBTTlvRCxFQU02QixtQkFBOUJwRSxFQUFPNnRELG9CQUNoQng0QixFQUFReTRCLGlCQUFpQixXQUFZOXRELEVBQU82dEQsb0JBSVAsbUJBQTVCN3RELEVBQU8rdEQsa0JBQW1DMTRCLEVBQVEyNEIsUUFDM0QzNEIsRUFBUTI0QixPQUFPRixpQkFBaUIsV0FBWTl0RCxFQUFPK3RELGtCQUdqRC90RCxFQUFPaXVELGFBRVRqdUQsRUFBT2l1RCxZQUFZQyxRQUFRMTRCLE1BQUssU0FBb0IyNEIsR0FDN0M5NEIsSUFJTEEsRUFBUSs0QixRQUNSdDRCLEVBQU9xNEIsR0FFUDk0QixFQUFVLFNBSVQrMkIsSUFDSEEsRUFBYyxNQUloQi8yQixFQUFRZzVCLEtBQUtqQyxRLDZCQ3JMakIsSUFBSWtDLEVBQWUsRUFBUSxLQVkzQmgyRCxFQUFPRCxRQUFVLFNBQXFCMjZCLEVBQVNoekIsRUFBUXUrQixFQUFNbEosRUFBU1csR0FDcEUsSUFBSS9DLEVBQVEsSUFBSWx5QixNQUFNaXlCLEdBQ3RCLE9BQU9zN0IsRUFBYXI3QixFQUFPanpCLEVBQVF1K0IsRUFBTWxKLEVBQVNXLEssNkJDZHBELElBQUk0MEIsRUFBUSxFQUFRLEdBVXBCdHlELEVBQU9ELFFBQVUsU0FBcUJrMkQsRUFBU0MsR0FFN0NBLEVBQVVBLEdBQVcsR0FDckIsSUFBSXh1RCxFQUFTLEdBRVR5dUQsRUFBdUIsQ0FBQyxNQUFPLFNBQVUsUUFDekNDLEVBQTBCLENBQUMsVUFBVyxPQUFRLFFBQVMsVUFDdkRDLEVBQXVCLENBQ3pCLFVBQVcsbUJBQW9CLG9CQUFxQixtQkFDcEQsVUFBVyxpQkFBa0Isa0JBQW1CLFVBQVcsZUFBZ0IsaUJBQzNFLGlCQUFrQixtQkFBb0IscUJBQXNCLGFBQzVELG1CQUFvQixnQkFBaUIsZUFBZ0IsWUFBYSxZQUNsRSxhQUFjLGNBQWUsYUFBYyxvQkFFekNDLEVBQWtCLENBQUMsa0JBRXZCLFNBQVNDLEVBQWV2Z0MsRUFBUWpGLEdBQzlCLE9BQUl1aEMsRUFBTXR0QixjQUFjaFAsSUFBV3M4QixFQUFNdHRCLGNBQWNqVSxHQUM5Q3VoQyxFQUFNaFksTUFBTXRrQixFQUFRakYsR0FDbEJ1aEMsRUFBTXR0QixjQUFjalUsR0FDdEJ1aEMsRUFBTWhZLE1BQU0sR0FBSXZwQixHQUNkdWhDLEVBQU1od0QsUUFBUXl1QixHQUNoQkEsRUFBT3hvQixRQUVUd29CLEVBR1QsU0FBU3lsQyxFQUFvQjF2RCxHQUN0QndyRCxFQUFNbnZELFlBQVkreUQsRUFBUXB2RCxJQUVuQndyRCxFQUFNbnZELFlBQVk4eUQsRUFBUW52RCxNQUNwQ1ksRUFBT1osR0FBUXl2RCxPQUFldndELEVBQVdpd0QsRUFBUW52RCxLQUZqRFksRUFBT1osR0FBUXl2RCxFQUFlTixFQUFRbnZELEdBQU9vdkQsRUFBUXB2RCxJQU16RHdyRCxFQUFNbDFDLFFBQVErNEMsR0FBc0IsU0FBMEJydkQsR0FDdkR3ckQsRUFBTW52RCxZQUFZK3lELEVBQVFwdkQsTUFDN0JZLEVBQU9aLEdBQVF5dkQsT0FBZXZ3RCxFQUFXa3dELEVBQVFwdkQsUUFJckR3ckQsRUFBTWwxQyxRQUFRZzVDLEVBQXlCSSxHQUV2Q2xFLEVBQU1sMUMsUUFBUWk1QyxHQUFzQixTQUEwQnZ2RCxHQUN2RHdyRCxFQUFNbnZELFlBQVkreUQsRUFBUXB2RCxJQUVuQndyRCxFQUFNbnZELFlBQVk4eUQsRUFBUW52RCxNQUNwQ1ksRUFBT1osR0FBUXl2RCxPQUFldndELEVBQVdpd0QsRUFBUW52RCxLQUZqRFksRUFBT1osR0FBUXl2RCxPQUFldndELEVBQVdrd0QsRUFBUXB2RCxPQU1yRHdyRCxFQUFNbDFDLFFBQVFrNUMsR0FBaUIsU0FBZXh2RCxHQUN4Q0EsS0FBUW92RCxFQUNWeHVELEVBQU9aLEdBQVF5dkQsRUFBZU4sRUFBUW52RCxHQUFPb3ZELEVBQVFwdkQsSUFDNUNBLEtBQVFtdkQsSUFDakJ2dUQsRUFBT1osR0FBUXl2RCxPQUFldndELEVBQVdpd0QsRUFBUW52RCxRQUlyRCxJQUFJMnZELEVBQVlOLEVBQ2J0K0MsT0FBT3UrQyxHQUNQditDLE9BQU93K0MsR0FDUHgrQyxPQUFPeStDLEdBRU5JLEVBQVkvMUQsT0FDYmdJLEtBQUtzdEQsR0FDTHArQyxPQUFPbFgsT0FBT2dJLEtBQUt1dEQsSUFDbkIvdUMsUUFBTyxTQUF5QjNsQixHQUMvQixPQUFtQyxJQUE1QmkxRCxFQUFVcmtELFFBQVE1USxNQUs3QixPQUZBOHdELEVBQU1sMUMsUUFBUXM1QyxFQUFXRixHQUVsQjl1RCxJLDZCQzdFVCxTQUFTaXZELEVBQU9qOEIsR0FDZG4wQixLQUFLbTBCLFFBQVVBLEVBR2pCaThCLEVBQU85MEQsVUFBVVksU0FBVyxXQUMxQixNQUFPLFVBQVk4RCxLQUFLbTBCLFFBQVUsS0FBT24wQixLQUFLbTBCLFFBQVUsS0FHMURpOEIsRUFBTzkwRCxVQUFVOHdELFlBQWEsRUFFOUIzeUQsRUFBT0QsUUFBVTQyRCxHLGNDbEJqQixJQUFJMS9CLEVBR0pBLEVBQUksV0FDSCxPQUFPMXdCLEtBREosR0FJSixJQUVDMHdCLEVBQUlBLEdBQUssSUFBSWx1QixTQUFTLGNBQWIsR0FDUixNQUFPK0MsR0FFYyxpQkFBWG0wQixTQUFxQmhKLEVBQUlnSixRQU9yQ2pnQyxFQUFPRCxRQUFVazNCLEcsNkJDakJqQixJQUFJMi9CLEVBQWUsRUFBUSxJQUN2QkMsRUFBWSxFQUFRLElBQ3BCNXBDLEVBQVUsRUFBUSxJQUVsQnU1QixFQUFhLEVBQVEsR0FDckJzUSxFQUFPRixFQUFhLFNBQVMsR0FHN0JHLEVBQVVGLEVBQVUscUJBQXFCLEdBRXpDRyxFQUFVSCxFQUFVLHFCQUFxQixHQUV6Q0ksRUFBVUosRUFBVSxxQkFBcUIsR0FFekNLLEVBQWFMLEVBQVUsd0JBQXdCLEdBRS9DTSxFQUFXTixFQUFVLHNCQUFzQixHQUcvQzcyRCxFQUFPRCxVQUFZKzJELEdBQW1ELFdBS2hDLElBQUlNLEVBR3JDQyxFQUFVLENBQ2JDLE9BQVEsU0FBVTkxRCxHQUNqQixJQUFLNjFELEVBQVFwMUIsSUFBSXpnQyxHQUNoQixNQUFNLElBQUlnbEQsRUFBVyxpQ0FBbUN2NUIsRUFBUXpyQixLQUdsRSxPQUFVLFNBQVVBLEdBQ25CLEdBQUk0MUQsRUFBSSxDQUNQLElBQUluM0MsRUFBU2kzQyxFQUFXRSxFQUFJNTFELEdBSTVCLE9BSHFCLElBQWpCMjFELEVBQVNDLEtBQ1pBLE9BQUssR0FFQ24zQyxFQUVSLE9BQU8sR0FFUm5mLElBQUssU0FBVVUsR0FDZCxHQUFJNDFELEVBQ0gsT0FBT0wsRUFBUUssRUFBSTUxRCxJQUdyQnlnQyxJQUFLLFNBQVV6Z0MsR0FDZCxRQUFJNDFELEdBQ0lILEVBQVFHLEVBQUk1MUQsSUFJckI0SCxJQUFLLFNBQVU1SCxFQUFLTixHQUNkazJELElBRUpBLEVBQUssSUFBSU4sR0FFVkUsRUFBUUksRUFBSTUxRCxFQUFLTixLQUtuQixPQUFPbTJELEksNkJDL0RScjNELEVBQU9ELFFBQVVZLFEsNkJDQWpCLElBQUlrbUQsRUFBUSxFQUFRLEtBRXBCLEdBQUlBLEVBQ0gsSUFDQ0EsRUFBTSxHQUFJLFVBQ1QsTUFBTy82QyxHQUVSKzZDLEVBQVEsS0FJVjdtRCxFQUFPRCxRQUFVOG1ELEcsNkJDWGpCN21ELEVBQU9ELFFBQThCLG9CQUFaZ2dELFNBQTJCQSxRQUFRdGUsZ0JBQW1CLE0sNkJDRC9FLElBQUl5a0IsRUFBVSxFQUFRLElBR3RCbG1ELEVBQU9ELFFBQVVtbUQsRUFBUXprQixnQkFBa0IsTSw2QkNIM0MsSUFBSWhnQyxFQUFPLEVBQVEsSUFDZitrRCxFQUFhLEVBQVEsR0FFckJnQixFQUFRLEVBQVEsSUFDaEIrUCxFQUFlLEVBQVEsS0FHM0J2M0QsRUFBT0QsUUFBVSxTQUF1QnNJLEdBQ3ZDLEdBQUlBLEVBQUtwRixPQUFTLEdBQXdCLG1CQUFab0YsRUFBSyxHQUNsQyxNQUFNLElBQUltK0MsRUFBVywwQkFFdEIsT0FBTytRLEVBQWE5MUQsRUFBTStsRCxFQUFPbi9DLEssNkJDVmxDckksRUFBT0QsUUFBVWdKLFNBQVNsSCxVQUFVTyxPLDZCQ0RwQyxJQUFJdzBELEVBQWUsRUFBUSxJQUV2QlksRUFBZ0IsRUFBUSxJQUd4QkMsRUFBV0QsRUFBYyxDQUFDWixFQUFhLGdDQUczQzUyRCxFQUFPRCxRQUFVLFNBQTRCUyxFQUFNdXBELEdBR2xELElBQUlLLEVBQTJFd00sRUFBYXAyRCxJQUFRdXBELEdBQ3BHLE1BQXlCLG1CQUFkSyxHQUE0QnFOLEVBQVNqM0QsRUFBTSxnQkFBa0IsRUFDaEVnM0QsRUFBbUMsQ0FBRXBOLElBRXRDQSxJLDZCQ2ZSLElBQUl4L0IsRUFBVSxFQUFRLElBRWxCcVgsRUFBTXRoQyxPQUFPa0IsVUFBVUMsZUFDdkJRLEVBQVVFLE1BQU1GLFFBRWhCbzFELEVBQVksV0FFWixJQURBLElBQUk3c0QsRUFBUSxHQUNINUssRUFBSSxFQUFHQSxFQUFJLE1BQU9BLEVBQ3ZCNEssRUFBTWpILEtBQUssTUFBUTNELEVBQUksR0FBSyxJQUFNLElBQU1BLEVBQUV3QyxTQUFTLEtBQUsrdEIsZUFHNUQsT0FBTzNsQixFQU5JLEdBNEJYOHNELEVBQWdCLFNBQXVCNW1DLEVBQVFxSixHQUUvQyxJQURBLElBQUlyM0IsRUFBTXEzQixHQUFXQSxFQUFRdzlCLGFBQWUsQ0FBRS8vQixVQUFXLE1BQVMsR0FDekQ1M0IsRUFBSSxFQUFHQSxFQUFJOHdCLEVBQU85dEIsU0FBVWhELE9BQ1IsSUFBZDh3QixFQUFPOXdCLEtBQ2Q4QyxFQUFJOUMsR0FBSzh3QixFQUFPOXdCLElBSXhCLE9BQU84QyxHQXFOWC9DLEVBQU9ELFFBQVUsQ0FDYjQzRCxjQUFlQSxFQUNmMWpDLE9BeEpTLFNBQTRCK0IsRUFBUWpGLEdBQzdDLE9BQU9wd0IsT0FBT2dJLEtBQUtvb0IsR0FBUW1HLFFBQU8sU0FBVTJnQyxFQUFLcjJELEdBRTdDLE9BREFxMkQsRUFBSXIyRCxHQUFPdXZCLEVBQU92dkIsR0FDWHEyRCxJQUNSN2hDLElBcUpIOGhDLFFBbEJVLFNBQWlCbDFELEVBQUdDLEdBQzlCLE1BQU8sR0FBR2dWLE9BQU9qVixFQUFHQyxJQWtCcEJrMUQsUUF2RFUsU0FBaUI3MkQsR0FJM0IsSUFIQSxJQUFJMjZDLEVBQVEsQ0FBQyxDQUFFOTRDLElBQUssQ0FBRXJDLEVBQUdRLEdBQVM0RixLQUFNLE1BQ3BDa3hELEVBQU8sR0FFRi8zRCxFQUFJLEVBQUdBLEVBQUk0N0MsRUFBTTU0QyxTQUFVaEQsRUFLaEMsSUFKQSxJQUFJbW5CLEVBQU95MEIsRUFBTTU3QyxHQUNiOEMsRUFBTXFrQixFQUFLcmtCLElBQUlxa0IsRUFBS3RnQixNQUVwQjZCLEVBQU9oSSxPQUFPZ0ksS0FBSzVGLEdBQ2R1YSxFQUFJLEVBQUdBLEVBQUkzVSxFQUFLMUYsU0FBVXFhLEVBQUcsQ0FDbEMsSUFBSTliLEVBQU1tSCxFQUFLMlUsR0FDWHZXLEVBQU1oRSxFQUFJdkIsR0FDSyxpQkFBUnVGLEdBQTRCLE9BQVJBLElBQXVDLElBQXZCaXhELEVBQUs1bEQsUUFBUXJMLEtBQ3hEODBDLEVBQU1qNEMsS0FBSyxDQUFFYixJQUFLQSxFQUFLK0QsS0FBTXRGLElBQzdCdzJELEVBQUtwMEQsS0FBS21ELElBT3RCLE9BbE5lLFNBQXNCODBDLEdBQ3JDLEtBQU9BLEVBQU01NEMsT0FBUyxHQUFHLENBQ3JCLElBQUlta0IsRUFBT3kwQixFQUFNb2MsTUFDYmwxRCxFQUFNcWtCLEVBQUtya0IsSUFBSXFrQixFQUFLdGdCLE1BRXhCLEdBQUl4RSxFQUFRUyxHQUFNLENBR2QsSUFGQSxJQUFJbTFELEVBQVksR0FFUDU2QyxFQUFJLEVBQUdBLEVBQUl2YSxFQUFJRSxTQUFVcWEsT0FDUixJQUFYdmEsRUFBSXVhLElBQ1g0NkMsRUFBVXQwRCxLQUFLYixFQUFJdWEsSUFJM0I4SixFQUFLcmtCLElBQUlxa0IsRUFBS3RnQixNQUFRb3hELElBa005QkMsQ0FBYXRjLEdBRU4zNkMsR0FtQ1BrM0QsT0FwSlMsU0FBVWhoQyxFQUFLaWhDLEVBQWdCQyxHQUN4QyxJQUFJQyxFQUFpQm5oQyxFQUFJcnNCLFFBQVEsTUFBTyxLQUN4QyxHQUFnQixlQUFadXRELEVBRUEsT0FBT0MsRUFBZXh0RCxRQUFRLGlCQUFrQm9wRCxVQUdwRCxJQUNJLE9BQU9oTSxtQkFBbUJvUSxHQUM1QixNQUFPenNELEdBQ0wsT0FBT3lzRCxJQTJJWGhHLE9BbklTLFNBQWdCbjdCLEVBQUtvaEMsRUFBZ0JGLEVBQVNHLEVBQU16MEQsR0FHN0QsR0FBbUIsSUFBZm96QixFQUFJbjBCLE9BQ0osT0FBT20wQixFQUdYLElBQUlqWSxFQUFTaVksRUFPYixHQU5tQixpQkFBUkEsRUFDUGpZLEVBQVNuZSxPQUFPYSxVQUFVWSxTQUFTckMsS0FBS2czQixHQUNsQixpQkFBUkEsSUFDZGpZLEVBQVM0SCxPQUFPcVEsSUFHSixlQUFaa2hDLEVBQ0EsT0FBTzlsQixPQUFPcnpCLEdBQVFwVSxRQUFRLG1CQUFtQixTQUFVMnRELEdBQ3ZELE1BQU8sU0FBV3ZtRCxTQUFTdW1ELEVBQUdud0QsTUFBTSxHQUFJLElBQU0sU0FLdEQsSUFEQSxJQUFJMG5CLEVBQU0sR0FDRDNTLEVBQUksRUFBR0EsRUFBSTZCLEVBQU9sYyxPQUFRcWEsR0F6QjNCLEtBeUJ1QyxDQUkzQyxJQUhBLElBQUlxN0MsRUFBVXg1QyxFQUFPbGMsUUExQmpCLEtBMEJtQ2tjLEVBQU81VyxNQUFNK1UsRUFBR0EsRUExQm5ELE1BMEJnRTZCLEVBQ2hFM2IsRUFBTSxHQUVEdkQsRUFBSSxFQUFHQSxFQUFJMDRELEVBQVExMUQsU0FBVWhELEVBQUcsQ0FDckMsSUFBSUssRUFBSXE0RCxFQUFReG5CLFdBQVdseEMsR0FFakIsS0FBTkssR0FDUyxLQUFOQSxHQUNNLEtBQU5BLEdBQ00sTUFBTkEsR0FDQ0EsR0FBSyxJQUFRQSxHQUFLLElBQ2xCQSxHQUFLLElBQVFBLEdBQUssSUFDbEJBLEdBQUssSUFBUUEsR0FBSyxLQUNsQjBELElBQVc0bUIsRUFBUWlnQyxVQUFrQixLQUFOdnFELEdBQW9CLEtBQU5BLEdBRWpEa0QsRUFBSUEsRUFBSVAsUUFBVTAxRCxFQUFRaG5DLE9BQU8xeEIsR0FJakNLLEVBQUksSUFDSmtELEVBQUlBLEVBQUlQLFFBQVV5MEQsRUFBU3AzRCxHQUkzQkEsRUFBSSxLQUNKa0QsRUFBSUEsRUFBSVAsUUFBVXkwRCxFQUFTLElBQVFwM0QsR0FBSyxHQUNsQ28zRCxFQUFTLElBQVksR0FBSnAzRCxHQUl2QkEsRUFBSSxPQUFVQSxHQUFLLE1BQ25Ca0QsRUFBSUEsRUFBSVAsUUFBVXkwRCxFQUFTLElBQVFwM0QsR0FBSyxJQUNsQ28zRCxFQUFTLElBQVNwM0QsR0FBSyxFQUFLLElBQzVCbzNELEVBQVMsSUFBWSxHQUFKcDNELElBSTNCTCxHQUFLLEVBQ0xLLEVBQUksUUFBaUIsS0FBSkEsSUFBYyxHQUErQixLQUF4QnE0RCxFQUFReG5CLFdBQVdseEMsSUFFekR1RCxFQUFJQSxFQUFJUCxRQUFVeTBELEVBQVMsSUFBUXAzRCxHQUFLLElBQ2xDbzNELEVBQVMsSUFBU3AzRCxHQUFLLEdBQU0sSUFDN0JvM0QsRUFBUyxJQUFTcDNELEdBQUssRUFBSyxJQUM1Qm8zRCxFQUFTLElBQVksR0FBSnAzRCxJQUczQjJ2QixHQUFPenNCLEVBQUlnRixLQUFLLElBR3BCLE9BQU95bkIsR0E2RFA0VCxTQTlCVyxTQUFrQjlnQyxHQUM3QixTQUFLQSxHQUFzQixpQkFBUkEsT0FJVEEsRUFBSXV6QixhQUFldnpCLEVBQUl1ekIsWUFBWXVOLFVBQVk5Z0MsRUFBSXV6QixZQUFZdU4sU0FBUzlnQyxLQTBCbEZ5K0MsU0FuQ1csU0FBa0J6K0MsR0FDN0IsTUFBK0Msb0JBQXhDcEMsT0FBT2tCLFVBQVVZLFNBQVNyQyxLQUFLMkMsSUFtQ3RDNjFELFNBcEJXLFNBQWtCN3hELEVBQUt0RCxHQUNsQyxHQUFJbkIsRUFBUXlFLEdBQU0sQ0FFZCxJQURBLElBQUk4eEQsRUFBUyxHQUNKNTRELEVBQUksRUFBR0EsRUFBSThHLEVBQUk5RCxPQUFRaEQsR0FBSyxFQUNqQzQ0RCxFQUFPajFELEtBQUtILEVBQUdzRCxFQUFJOUcsS0FFdkIsT0FBTzQ0RCxFQUVYLE9BQU9wMUQsRUFBR3NELElBYVZ1ekMsTUE1TlEsU0FBU0EsRUFBTXRrQixFQUFRakYsRUFBUXFKLEdBRXZDLElBQUtySixFQUNELE9BQU9pRixFQUdYLEdBQXNCLGlCQUFYakYsR0FBeUMsbUJBQVhBLEVBQXVCLENBQzVELEdBQUl6dUIsRUFBUTB6QixHQUNSQSxFQUFPcHlCLEtBQUttdEIsT0FDVCxLQUFJaUYsR0FBNEIsaUJBQVhBLEVBUXhCLE1BQU8sQ0FBQ0EsRUFBUWpGLElBTlhxSixJQUFZQSxFQUFRdzlCLGNBQWdCeDlCLEVBQVEwK0IsbUJBQ3pDNzJCLEVBQUk3aEMsS0FBS08sT0FBT2tCLFVBQVdrdkIsTUFFL0JpRixFQUFPakYsSUFBVSxHQU16QixPQUFPaUYsRUFHWCxJQUFLQSxHQUE0QixpQkFBWEEsRUFDbEIsTUFBTyxDQUFDQSxHQUFRbmUsT0FBT2taLEdBRzNCLElBQUlnb0MsRUFBYy9pQyxFQUtsQixPQUpJMXpCLEVBQVEwekIsS0FBWTF6QixFQUFReXVCLEtBQzVCZ29DLEVBQWNwQixFQUFjM2hDLEVBQVFvRSxJQUdwQzkzQixFQUFRMHpCLElBQVcxekIsRUFBUXl1QixJQUMzQkEsRUFBTzNULFNBQVEsU0FBVWdLLEVBQU1ubkIsR0FDM0IsR0FBSWdpQyxFQUFJN2hDLEtBQUs0MUIsRUFBUS8xQixHQUFJLENBQ3JCLElBQUkrNEQsRUFBYWhqQyxFQUFPLzFCLEdBQ3BCKzRELEdBQW9DLGlCQUFmQSxHQUEyQjV4QyxHQUF3QixpQkFBVEEsRUFDL0Q0TyxFQUFPLzFCLEdBQUtxNkMsRUFBTTBlLEVBQVk1eEMsRUFBTWdULEdBRXBDcEUsRUFBT3B5QixLQUFLd2pCLFFBR2hCNE8sRUFBTy8xQixHQUFLbW5CLEtBR2I0TyxHQUdKcjFCLE9BQU9nSSxLQUFLb29CLEdBQVFtRyxRQUFPLFNBQVUyZ0MsRUFBS3IyRCxHQUM3QyxJQUFJTixFQUFRNnZCLEVBQU92dkIsR0FPbkIsT0FMSXlnQyxFQUFJN2hDLEtBQUt5M0QsRUFBS3IyRCxHQUNkcTJELEVBQUlyMkQsR0FBTzg0QyxFQUFNdWQsRUFBSXIyRCxHQUFNTixFQUFPazVCLEdBRWxDeTlCLEVBQUlyMkQsR0FBT04sRUFFUjIyRCxJQUNSa0IsTSxpQkM5RkMsU0FBV0UsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSw4RkFBOEYrSCxNQUNsRyxLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUsNERBQTREZ0osTUFDbEUsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2lILGNBQWUsU0FDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBTyxRQUFRZ0osS0FBS2hKLElBRXhCNkMsU0FBVSxTQUFVb0gsRUFBT0ssRUFBUytrQixHQUNoQyxPQUFJcGxCLEVBQVEsR0FDRG9sQixFQUFVLEtBQU8sS0FFakJBLEVBQVUsS0FBTyxNQUdoQ3ZtQixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWixTQUFVLENBQ05DLFFBQVMsaUJBQ1RDLFFBQVMsZUFDVEMsU0FBVSxlQUNWQyxRQUFTLGlCQUNUQyxTQUFVLHNCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFlBQ054WixFQUFHLG1CQUNIeVosR0FBSSxjQUNKcGIsRUFBRyxZQUNIcWIsR0FBSSxZQUNKblAsRUFBRyxTQUNIb1AsR0FBSSxTQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxXQUNIK08sR0FBSSxZQUNKM04sRUFBRyxVQUNINE4sR0FBSSxXQUVSVix1QkFBd0Isa0JBQ3hCOVEsUUFBUyxTQUFVakIsR0FDZixPQUNJQSxHQUNZLElBQVhBLEdBQTJCLElBQVhBLEdBQWdCQSxHQUFVLEdBQUssTUFBUSxPQUdoRXlFLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXJFeUJ1ZSxDQUFRLEVBQVEsSyxpQkNLbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJQyxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSGhWLEVBQUcsSUFDSEMsRUFBRyxJQUNIZ1YsRUFBRyxLQUVQQyxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUVUQyxFQUFhLFNBQVVsNEQsR0FDbkIsT0FBYSxJQUFOQSxFQUNELEVBQ00sSUFBTkEsRUFDRSxFQUNNLElBQU5BLEVBQ0UsRUFDQUEsRUFBSSxLQUFPLEdBQUtBLEVBQUksS0FBTyxHQUN6QixFQUNBQSxFQUFJLEtBQU8sR0FDVCxFQUNBLEdBRWxCbTRELEVBQVUsQ0FDTjczRCxFQUFHLENBQ0MsZUFDQSxjQUNBLENBQUMsVUFBVyxXQUNaLFVBQ0EsV0FDQSxZQUVKM0IsRUFBRyxDQUNDLGVBQ0EsY0FDQSxDQUFDLFVBQVcsV0FDWixXQUNBLFdBQ0EsWUFFSmtNLEVBQUcsQ0FDQyxjQUNBLGFBQ0EsQ0FBQyxTQUFVLFVBQ1gsV0FDQSxVQUNBLFdBRUpoTSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFVBQ0EsV0FDQSxVQUVKd00sRUFBRyxDQUNDLGFBQ0EsV0FDQSxDQUFDLFFBQVMsU0FDVixVQUNBLFVBQ0EsVUFFSm9CLEVBQUcsQ0FDQyxhQUNBLFdBQ0EsQ0FBQyxRQUFTLFNBQ1YsV0FDQSxXQUNBLFdBR1IyckQsRUFBWSxTQUFVdHRDLEdBQ2xCLE9BQU8sU0FBVWxqQixFQUFRaWlCLEVBQWVwTSxFQUFReVIsR0FDNUMsSUFBSTBPLEVBQUlzNkIsRUFBV3R3RCxHQUNmOHRCLEVBQU15aUMsRUFBUXJ0QyxHQUFHb3RDLEVBQVd0d0QsSUFJaEMsT0FIVSxJQUFOZzJCLElBQ0FsSSxFQUFNQSxFQUFJN0wsRUFBZ0IsRUFBSSxJQUUzQjZMLEVBQUlyc0IsUUFBUSxNQUFPekIsS0FHbEMwRCxFQUFTLENBQ0wsUUFDQSxTQUNBLE9BQ0EsUUFDQSxPQUNBLFFBQ0EsUUFDQSxRQUNBLFNBQ0EsU0FDQSxTQUNBLFVBR0Npc0QsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRQSxFQUNSMEgsWUFBYTFILEVBQ2JqQixTQUFVLHNEQUFzRGdKLE1BQU0sS0FDdEVnRCxjQUFlLHdDQUF3Q2hELE1BQU0sS0FDN0QrQyxZQUFhLGdCQUFnQi9DLE1BQU0sS0FDbkNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZZLGNBQWUsTUFDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBTyxNQUFRQSxHQUVuQjZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEdBQ0EsSUFFQSxLQUdmK04sU0FBVSxDQUNOQyxRQUFTLHdCQUNUQyxRQUFTLHVCQUNUQyxTQUFVLHVCQUNWQyxRQUFTLHNCQUNUQyxTQUFVLHVCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFNBQ054WixFQUFHODNELEVBQVUsS0FDYnIrQyxHQUFJcStDLEVBQVUsS0FDZHo1RCxFQUFHeTVELEVBQVUsS0FDYnArQyxHQUFJbytDLEVBQVUsS0FDZHZ0RCxFQUFHdXRELEVBQVUsS0FDYm4rQyxHQUFJbStDLEVBQVUsS0FDZHY1RCxFQUFHdTVELEVBQVUsS0FDYmwrQyxHQUFJaytDLEVBQVUsS0FDZC9zRCxFQUFHK3NELEVBQVUsS0FDYmgrQyxHQUFJZytDLEVBQVUsS0FDZDNyRCxFQUFHMnJELEVBQVUsS0FDYi85QyxHQUFJKzlDLEVBQVUsTUFFbEJ6M0MsU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFDRnBVLFFBQVEsaUJBQWlCLFNBQVVELEdBQ2hDLE9BQU82dUQsRUFBVTd1RCxNQUVwQkMsUUFBUSxLQUFNLE1BRXZCdWdCLFdBQVksU0FBVW5NLEdBQ2xCLE9BQU9BLEVBQ0ZwVSxRQUFRLE9BQU8sU0FBVUQsR0FDdEIsT0FBT291RCxFQUFVcHVELE1BRXBCQyxRQUFRLEtBQU0sTUFFdkJnRCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssTUF6THlCdWUsQ0FBUSxFQUFRLEssaUJDS2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSVcsRUFBYSxTQUFVbDRELEdBQ25CLE9BQWEsSUFBTkEsRUFDRCxFQUNNLElBQU5BLEVBQ0UsRUFDTSxJQUFOQSxFQUNFLEVBQ0FBLEVBQUksS0FBTyxHQUFLQSxFQUFJLEtBQU8sR0FDekIsRUFDQUEsRUFBSSxLQUFPLEdBQ1QsRUFDQSxHQUVsQm00RCxFQUFVLENBQ043M0QsRUFBRyxDQUNDLGVBQ0EsY0FDQSxDQUFDLFVBQVcsV0FDWixVQUNBLFdBQ0EsWUFFSjNCLEVBQUcsQ0FDQyxlQUNBLGNBQ0EsQ0FBQyxVQUFXLFdBQ1osV0FDQSxXQUNBLFlBRUprTSxFQUFHLENBQ0MsY0FDQSxhQUNBLENBQUMsU0FBVSxVQUNYLFdBQ0EsVUFDQSxXQUVKaE0sRUFBRyxDQUNDLGFBQ0EsV0FDQSxDQUFDLFFBQVMsU0FDVixVQUNBLFdBQ0EsVUFFSndNLEVBQUcsQ0FDQyxhQUNBLFdBQ0EsQ0FBQyxRQUFTLFNBQ1YsVUFDQSxVQUNBLFVBRUpvQixFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFdBQ0EsV0FDQSxXQUdSMnJELEVBQVksU0FBVXR0QyxHQUNsQixPQUFPLFNBQVVsakIsRUFBUWlpQixFQUFlcE0sRUFBUXlSLEdBQzVDLElBQUkwTyxFQUFJczZCLEVBQVd0d0QsR0FDZjh0QixFQUFNeWlDLEVBQVFydEMsR0FBR290QyxFQUFXdHdELElBSWhDLE9BSFUsSUFBTmcyQixJQUNBbEksRUFBTUEsRUFBSTdMLEVBQWdCLEVBQUksSUFFM0I2TCxFQUFJcnNCLFFBQVEsTUFBT3pCLEtBR2xDMEQsRUFBUyxDQUNMLFFBQ0EsUUFDQSxPQUNBLFFBQ0EsTUFDQSxPQUNBLFNBQ0EsTUFDQSxTQUNBLFNBQ0EsU0FDQSxVQUdHaXNELEVBQU9qOEMsYUFBYSxRQUFTLENBQ3BDaFEsT0FBUUEsRUFDUjBILFlBQWExSCxFQUNiakIsU0FBVSxzREFBc0RnSixNQUFNLEtBQ3RFZ0QsY0FBZSx3Q0FBd0NoRCxNQUFNLEtBQzdEK0MsWUFBYSxnQkFBZ0IvQyxNQUFNLEtBQ25DZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWSxjQUFlLE1BQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQU8sTUFBUUEsR0FFbkI2QyxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxHQUNBLElBRUEsS0FHZitOLFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyx1QkFDVEMsU0FBVSx1QkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxTQUNOeFosRUFBRzgzRCxFQUFVLEtBQ2JyK0MsR0FBSXErQyxFQUFVLEtBQ2R6NUQsRUFBR3k1RCxFQUFVLEtBQ2JwK0MsR0FBSW8rQyxFQUFVLEtBQ2R2dEQsRUFBR3V0RCxFQUFVLEtBQ2JuK0MsR0FBSW0rQyxFQUFVLEtBQ2R2NUQsRUFBR3U1RCxFQUFVLEtBQ2JsK0MsR0FBSWsrQyxFQUFVLEtBQ2Qvc0QsRUFBRytzRCxFQUFVLEtBQ2JoK0MsR0FBSWcrQyxFQUFVLEtBQ2QzckQsRUFBRzJyRCxFQUFVLEtBQ2IvOUMsR0FBSSs5QyxFQUFVLE1BRWxCeHVDLFdBQVksU0FBVW5NLEdBQ2xCLE9BQU9BLEVBQU9wVSxRQUFRLEtBQU0sTUFFaENnRCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0F0SnlCdWUsQ0FBUSxFQUFRLEssaUJDRGxELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdFQUF3RStILE1BQzVFLEtBRUpMLFlBQ0ksd0VBQXdFSyxNQUNwRSxLQUVSaEosU0FBVSxzREFBc0RnSixNQUFNLEtBQ3RFZ0QsY0FBZSx3Q0FBd0NoRCxNQUFNLEtBQzdEK0MsWUFBYSxnQkFBZ0IvQyxNQUFNLEtBQ25DZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWixTQUFVLENBQ05DLFFBQVMsd0JBQ1RDLFFBQVMsc0JBQ1RDLFNBQVUsdUJBQ1ZDLFFBQVMsc0JBQ1RDLFNBQVUsdUJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsT0FDSHlaLEdBQUksV0FDSnBiLEVBQUcsUUFDSHFiLEdBQUksV0FDSm5QLEVBQUcsT0FDSG9QLEdBQUksV0FDSnBiLEVBQUcsTUFDSHFiLEdBQUksVUFDSjdPLEVBQUcsTUFDSCtPLEdBQUksVUFDSjNOLEVBQUcsTUFDSDROLEdBQUksWUFFUmhPLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxNQXJEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJQyxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSGhWLEVBQUcsSUFDSEMsRUFBRyxJQUNIZ1YsRUFBRyxLQUVQRSxFQUFhLFNBQVVsNEQsR0FDbkIsT0FBYSxJQUFOQSxFQUNELEVBQ00sSUFBTkEsRUFDRSxFQUNNLElBQU5BLEVBQ0UsRUFDQUEsRUFBSSxLQUFPLEdBQUtBLEVBQUksS0FBTyxHQUN6QixFQUNBQSxFQUFJLEtBQU8sR0FDVCxFQUNBLEdBRWxCbTRELEVBQVUsQ0FDTjczRCxFQUFHLENBQ0MsZUFDQSxjQUNBLENBQUMsVUFBVyxXQUNaLFVBQ0EsV0FDQSxZQUVKM0IsRUFBRyxDQUNDLGVBQ0EsY0FDQSxDQUFDLFVBQVcsV0FDWixXQUNBLFdBQ0EsWUFFSmtNLEVBQUcsQ0FDQyxjQUNBLGFBQ0EsQ0FBQyxTQUFVLFVBQ1gsV0FDQSxVQUNBLFdBRUpoTSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFVBQ0EsV0FDQSxVQUVKd00sRUFBRyxDQUNDLGFBQ0EsV0FDQSxDQUFDLFFBQVMsU0FDVixVQUNBLFVBQ0EsVUFFSm9CLEVBQUcsQ0FDQyxhQUNBLFdBQ0EsQ0FBQyxRQUFTLFNBQ1YsV0FDQSxXQUNBLFdBR1IyckQsRUFBWSxTQUFVdHRDLEdBQ2xCLE9BQU8sU0FBVWxqQixFQUFRaWlCLEVBQWVwTSxFQUFReVIsR0FDNUMsSUFBSTBPLEVBQUlzNkIsRUFBV3R3RCxHQUNmOHRCLEVBQU15aUMsRUFBUXJ0QyxHQUFHb3RDLEVBQVd0d0QsSUFJaEMsT0FIVSxJQUFOZzJCLElBQ0FsSSxFQUFNQSxFQUFJN0wsRUFBZ0IsRUFBSSxJQUUzQjZMLEVBQUlyc0IsUUFBUSxNQUFPekIsS0FHbEMwRCxFQUFTLENBQ0wsUUFDQSxTQUNBLE9BQ0EsUUFDQSxPQUNBLFFBQ0EsUUFDQSxRQUNBLFNBQ0EsU0FDQSxTQUNBLFVBR0dpc0QsRUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRQSxFQUNSMEgsWUFBYTFILEVBQ2JqQixTQUFVLHNEQUFzRGdKLE1BQU0sS0FDdEVnRCxjQUFlLHdDQUF3Q2hELE1BQU0sS0FDN0QrQyxZQUFhLGdCQUFnQi9DLE1BQU0sS0FDbkNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZZLGNBQWUsTUFDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBTyxNQUFRQSxHQUVuQjZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEdBQ0EsSUFFQSxLQUdmK04sU0FBVSxDQUNOQyxRQUFTLHdCQUNUQyxRQUFTLHVCQUNUQyxTQUFVLHVCQUNWQyxRQUFTLHNCQUNUQyxTQUFVLHVCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFNBQ054WixFQUFHODNELEVBQVUsS0FDYnIrQyxHQUFJcStDLEVBQVUsS0FDZHo1RCxFQUFHeTVELEVBQVUsS0FDYnArQyxHQUFJbytDLEVBQVUsS0FDZHZ0RCxFQUFHdXRELEVBQVUsS0FDYm4rQyxHQUFJbStDLEVBQVUsS0FDZHY1RCxFQUFHdTVELEVBQVUsS0FDYmwrQyxHQUFJaytDLEVBQVUsS0FDZC9zRCxFQUFHK3NELEVBQVUsS0FDYmgrQyxHQUFJZytDLEVBQVUsS0FDZDNyRCxFQUFHMnJELEVBQVUsS0FDYi85QyxHQUFJKzlDLEVBQVUsTUFFbEJ6M0MsU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFBT3BVLFFBQVEsS0FBTSxNQUVoQ3VnQixXQUFZLFNBQVVuTSxHQUNsQixPQUFPQSxFQUNGcFUsUUFBUSxPQUFPLFNBQVVELEdBQ3RCLE9BQU9vdUQsRUFBVXB1RCxNQUVwQkMsUUFBUSxLQUFNLE1BRXZCZ0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLE1Bekt5QnVlLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSWRBO0VBQU9qOEMsYUFBYSxRQUFTLENBQ3BDaFEsT0FBUSx3RUFBd0UrSCxNQUM1RSxLQUVKTCxZQUNJLHdFQUF3RUssTUFDcEUsS0FFUmhKLFNBQVUsc0RBQXNEZ0osTUFBTSxLQUN0RWdELGNBQWUsd0NBQXdDaEQsTUFBTSxLQUM3RCtDLFlBQWEsZ0JBQWdCL0MsTUFBTSxLQUNuQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLHdCQUNUQyxRQUFTLHNCQUNUQyxTQUFVLHVCQUNWQyxRQUFTLHNCQUNUQyxTQUFVLHVCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ054WixFQUFHLE9BQ0h5WixHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFdBQ0puUCxFQUFHLE9BQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLE1BQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLE1BQ0grTyxHQUFJLFVBQ0ozTixFQUFHLE1BQ0g0TixHQUFJLFlBRVJoTyxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FyRHlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSUMsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hoVixFQUFHLElBQ0hDLEVBQUcsSUFDSGdWLEVBQUcsS0FFUEMsRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHRlYsRUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLGlHQUFpRytILE1BQ3JHLEtBRUpMLFlBQ0ksMERBQTBESyxNQUFNLEtBQ3BFaEosU0FBVSxzREFBc0RnSixNQUFNLEtBQ3RFZ0QsY0FBZSx3Q0FBd0NoRCxNQUFNLEtBQzdEK0MsWUFBYSxnQkFBZ0IvQyxNQUFNLEtBQ25DZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWSxjQUFlLE1BQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQU8sTUFBUUEsR0FFbkI2QyxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxHQUNBLElBRUEsS0FHZitOLFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNOeFosRUFBRyxPQUNIeVosR0FBSSxXQUNKcGIsRUFBRyxRQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxPQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxNQUNIcWIsR0FBSSxVQUNKN08sRUFBRyxNQUNIK08sR0FBSSxVQUNKM04sRUFBRyxNQUNINE4sR0FBSSxZQUVSc0csU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFDRnBVLFFBQVEsZUFBZSxTQUFVRCxHQUM5QixPQUFPNnVELEVBQVU3dUQsTUFFcEJpSyxNQUFNLElBQ040d0MsVUFDQW45QyxLQUFLLElBQ0x1QyxRQUFRLDJCQUEyQixTQUFVRCxHQUMxQyxPQUFPNnVELEVBQVU3dUQsTUFFcEJpSyxNQUFNLElBQ040d0MsVUFDQW45QyxLQUFLLElBQ0x1QyxRQUFRLEtBQU0sTUFFdkJ1Z0IsV0FBWSxTQUFVbk0sR0FDbEIsT0FBT0EsRUFDRnBVLFFBQVEsT0FBTyxTQUFVRCxHQUN0QixPQUFPb3VELEVBQVVwdUQsTUFFcEJDLFFBQVEsS0FBTSxNQUV2QmdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQTlHeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJQyxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSGhWLEVBQUcsSUFDSEMsRUFBRyxJQUNIZ1YsRUFBRyxLQUVQQyxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUdGVixFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsNkVBQTZFK0gsTUFDakYsS0FFSkwsWUFDSSw2RUFBNkVLLE1BQ3pFLEtBRVJoSixTQUFVLHNEQUFzRGdKLE1BQU0sS0FDdEVnRCxjQUFlLHdDQUF3Q2hELE1BQU0sS0FDN0QrQyxZQUFhLGdCQUFnQi9DLE1BQU0sS0FDbkNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZZLGNBQWUsTUFDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBTyxNQUFRQSxHQUVuQjZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEdBQ0EsSUFFQSxLQUdmK04sU0FBVSxDQUNOQyxRQUFTLHdCQUNUQyxRQUFTLHNCQUNUQyxTQUFVLHVCQUNWQyxRQUFTLHNCQUNUQyxTQUFVLHVCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ054WixFQUFHLE9BQ0h5WixHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFdBQ0puUCxFQUFHLE9BQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLE1BQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLE1BQ0grTyxHQUFJLFVBQ0ozTixFQUFHLE1BQ0g0TixHQUFJLFlBRVJzRyxTQUFVLFNBQVVsRCxHQUNoQixPQUFPQSxFQUNGcFUsUUFBUSxpQkFBaUIsU0FBVUQsR0FDaEMsT0FBTzZ1RCxFQUFVN3VELE1BRXBCQyxRQUFRLEtBQU0sTUFFdkJ1Z0IsV0FBWSxTQUFVbk0sR0FDbEIsT0FBT0EsRUFDRnBVLFFBQVEsT0FBTyxTQUFVRCxHQUN0QixPQUFPb3VELEVBQVVwdUQsTUFFcEJDLFFBQVEsS0FBTSxNQUV2QmdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXZHeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEseUVBQXlFK0gsTUFDN0UsS0FFSkwsWUFDSSx5RUFBeUVLLE1BQ3JFLEtBRVJoSixTQUFVLHNEQUFzRGdKLE1BQU0sS0FDdEVnRCxjQUFlLHdDQUF3Q2hELE1BQU0sS0FDN0QrQyxZQUFhLGdCQUFnQi9DLE1BQU0sS0FDbkNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZaLFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNOeFosRUFBRyxPQUNIeVosR0FBSSxXQUNKcGIsRUFBRyxRQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxPQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxNQUNIcWIsR0FBSSxVQUNKN08sRUFBRyxNQUNIK08sR0FBSSxVQUNKM04sRUFBRyxNQUNINE4sR0FBSSxZQUVSaE8sS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBckR5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUllLEVBQVcsQ0FDWGIsRUFBRyxRQUNISSxFQUFHLFFBQ0g5VSxFQUFHLFFBQ0h3VixHQUFJLFFBQ0pDLEdBQUksUUFDSmQsRUFBRyxPQUNISyxFQUFHLE9BQ0hVLEdBQUksT0FDSkMsR0FBSSxPQUNKZixFQUFHLFFBQ0hDLEVBQUcsUUFDSGUsSUFBSyxRQUNMYixFQUFHLE9BQ0g5VSxFQUFHLFFBQ0hDLEdBQUksUUFDSjJWLEdBQUksUUFDSkMsR0FBSSxRQUNKQyxHQUFJLFNBR0N2QixFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsK0VBQStFK0gsTUFDbkYsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUNJLHFFQUFxRWdKLE1BQ2pFLEtBRVJnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxrQkFDVEMsUUFBUyxrQkFDVEMsU0FBVSwrQkFDVkMsUUFBUyxhQUNUQyxTQUFVLCtCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxXQUNSQyxLQUFNLFdBQ054WixFQUFHLGtCQUNIeVosR0FBSSxZQUNKcGIsRUFBRyxhQUNIcWIsR0FBSSxZQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxTQUNIK08sR0FBSSxRQUNKM04sRUFBRyxTQUNINE4sR0FBSSxTQUVSQyxjQUFlLDBCQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUFPLG1CQUFtQmdKLEtBQUtoSixJQUVuQzZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEVBQ0EsT0FDQUEsRUFBTyxHQUNQLFFBQ0FBLEVBQU8sR0FDUCxTQUVBLFNBR2Y0Tyx1QkFBd0Isd0NBQ3hCOVEsUUFBUyxTQUFVakIsR0FDZixHQUFlLElBQVhBLEVBRUEsT0FBT0EsRUFBUyxRQUVwQixJQUFJMUcsRUFBSTBHLEVBQVMsR0FHakIsT0FBT0EsR0FBVTB3RCxFQUFTcDNELElBQU1vM0QsRUFGdkIxd0QsRUFBUyxJQUFPMUcsSUFFc0JvM0QsRUFEdkMxd0QsR0FBVSxJQUFNLElBQU0sUUFHbEN5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FwR3lCdWUsQ0FBUSxFQUFRLEssaUJDS2xELFNBQVd5akMsR0FBVTtrQ0FZekI7U0FBU3dCLEVBQXVCbnhELEVBQVFpaUIsRUFBZS9wQixHQUNuRCxJQVRrQjArQyxFQUNkd2EsRUFnQkosTUFBWSxNQUFSbDVELEVBQ08rcEIsRUFBZ0IsVUFBWSxVQUNwQixNQUFSL3BCLEVBQ0ErcEIsRUFBZ0IsVUFBWSxVQUU1QmppQixFQUFTLEtBdEJGNDJDLEdBc0I2QjUyQyxFQXJCM0NveEQsRUFRUyxDQUNUai9DLEdBQUk4UCxFQUFnQix5QkFBMkIseUJBQy9DN1AsR0FBSTZQLEVBQWdCLHlCQUEyQix5QkFDL0M1UCxHQUFJNFAsRUFBZ0IseUJBQTJCLHlCQUMvQzNQLEdBQUksaUJBQ0pFLEdBQUksdUJBQ0pDLEdBQUksa0JBT2dDdmEsR0FyQnZCdVQsTUFBTSxLQUNoQm1yQyxFQUFNLElBQU8sR0FBS0EsRUFBTSxLQUFRLEdBQ2pDd2EsRUFBTSxHQUNOeGEsRUFBTSxJQUFNLEdBQUtBLEVBQU0sSUFBTSxJQUFNQSxFQUFNLElBQU0sSUFBTUEsRUFBTSxLQUFPLElBQ2hFd2EsRUFBTSxHQUNOQSxFQUFNLElBb0JUekIsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLENBQ0poSixPQUFRLHVHQUF1RytRLE1BQzNHLEtBRUo0bEQsV0FDSSxxR0FBcUc1bEQsTUFDakcsTUFHWkwsWUFDSSwwREFBMERLLE1BQU0sS0FDcEVoSixTQUFVLENBQ04vSCxPQUFRLDBEQUEwRCtRLE1BQzlELEtBRUo0bEQsV0FDSSwwREFBMEQ1bEQsTUFDdEQsS0FFUmtjLFNBQVUsK0NBRWRsWixjQUFlLHVCQUF1QmhELE1BQU0sS0FDNUMrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxpQkFDSkMsSUFBSyx3QkFDTEMsS0FBTSwrQkFFVlosU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsZ0JBQ1RFLFFBQVMsZUFDVEQsU0FBVSxXQUNOLE1BQU8sbUJBRVhFLFNBQVUsV0FDTixPQUFRdFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sMEJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTywyQkFHbkJpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxVQUNSQyxLQUFNLFVBQ054WixFQUFHLGtCQUNIM0IsRUFBR282RCxFQUNILytDLEdBQUkrK0MsRUFDSmx1RCxFQUFHa3VELEVBQ0g5K0MsR0FBSTgrQyxFQUNKbDZELEVBQUcsUUFDSHFiLEdBQUk2K0MsRUFDSjF0RCxFQUFHLFFBQ0grTyxHQUFJMitDLEVBQ0p0c0QsRUFBRyxNQUNINE4sR0FBSTArQyxHQUVSeitDLGNBQWUseUJBQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQU8saUJBQWlCZ0osS0FBS2hKLElBRWpDNkMsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sRUFDQSxPQUNBQSxFQUFPLEdBQ1AsU0FDQUEsRUFBTyxHQUNQLE1BRUEsVUFHZjRPLHVCQUF3QixtQkFDeEI5USxRQUFTLFNBQVVqQixFQUFRa2QsR0FDdkIsT0FBUUEsR0FDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssTUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNELE9BQVFsZCxFQUFTLElBQU8sR0FBS0EsRUFBUyxJQUFPLEdBQ3pDQSxFQUFTLEtBQVEsSUFDakJBLEVBQVMsS0FBUSxHQUVmQSxFQUFTLEtBRFRBLEVBQVMsS0FFbkIsSUFBSyxJQUNELE9BQU9BLEVBQVMsTUFDcEIsUUFDSSxPQUFPQSxJQUduQnlFLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQTFJeUJ1ZSxDQUFRLEVBQVEsSyxpQkNDbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLG9GQUFvRitILE1BQ3hGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSx5REFBeURnSixNQUMvRCxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksT0FDSkQsSUFBSyxVQUNMRSxFQUFHLFlBQ0hDLEdBQUksY0FDSkMsSUFBSyxtQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsY0FDVEMsU0FBVSxjQUNWQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRdFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyx5QkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTywwQkFHbkJpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxVQUNSQyxLQUFNLFdBQ054WixFQUFHLGtCQUNIeVosR0FBSSxhQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxZQUNKblAsRUFBRyxNQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxNQUNIcWIsR0FBSSxVQUNKL04sRUFBRyxVQUNIZ08sR0FBSSxhQUNKOU8sRUFBRyxRQUNIK08sR0FBSSxZQUNKM04sRUFBRyxTQUNINE4sR0FBSSxhQUVSVix1QkFBd0IsOEJBQ3hCOVEsUUFBUyxTQUFVakIsR0FDZixJQUFJc3hELEVBQVl0eEQsRUFBUyxHQUNyQnV4RCxFQUFjdnhELEVBQVMsSUFDM0IsT0FBZSxJQUFYQSxFQUNPQSxFQUFTLE1BQ08sSUFBaEJ1eEQsRUFDQXZ4RCxFQUFTLE1BQ1R1eEQsRUFBYyxJQUFNQSxFQUFjLEdBQ2xDdnhELEVBQVMsTUFDSyxJQUFkc3hELEVBQ0F0eEQsRUFBUyxNQUNLLElBQWRzeEQsRUFDQXR4RCxFQUFTLE1BQ0ssSUFBZHN4RCxHQUFpQyxJQUFkQSxFQUNuQnR4RCxFQUFTLE1BRVRBLEVBQVMsT0FHeEJ5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FyRnlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSw4SUFBOEkrSCxNQUNsSixLQUVKTCxZQUFhLGlEQUFpREssTUFBTSxLQUNwRWhKLFNBQVUsK0NBQStDZ0osTUFBTSxLQUMvRGdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLDJCQUNKQyxJQUFLLHdDQUNMQyxLQUFNLDhDQUVWWixTQUFVLENBQ05DLFFBQVMsZUFDVEMsUUFBUyxpQkFDVEMsU0FBVSxxQkFDVkMsUUFBUyxpQkFDVEMsU0FBVSx5QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxhQUNOeFosRUFBRyxrQkFDSHlaLEdBQUksYUFDSnBiLEVBQUcsZUFDSHFiLEdBQUksWUFDSm5QLEVBQUcsYUFDSG9QLEdBQUksVUFDSnBiLEVBQUcsYUFDSHFiLEdBQUksVUFDSjdPLEVBQUcsYUFDSCtPLEdBQUksVUFDSjNOLEVBQUcsWUFDSDROLEdBQUksVUFFUmhPLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQWpEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJQyxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSGhWLEVBQUcsSUFDSEMsRUFBRyxJQUNIZ1YsRUFBRyxLQUVQQyxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUdKVixFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsMEZBQTBGK0gsTUFDOUYsS0FFSkwsWUFDSSxtRUFBbUVLLE1BQy9ELEtBRVJoSixTQUFVLDREQUE0RGdKLE1BQ2xFLEtBRUpnRCxjQUFlLHVDQUF1Q2hELE1BQU0sS0FDNUQrQyxZQUFhLGtDQUFrQy9DLE1BQU0sS0FDckQxSixlQUFnQixDQUNaMlAsR0FBSSxhQUNKRCxJQUFLLGdCQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSywwQkFDTEMsS0FBTSxpQ0FFVlosU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsZ0JBQ1RDLFNBQVUsV0FDVkMsUUFBUyxhQUNUQyxTQUFVLGdCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFNBQ054WixFQUFHLGVBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLFdBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFNBQ0hxYixHQUFJLFNBQ0o3TyxFQUFHLFNBQ0grTyxHQUFJLFNBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFVBRVJzRyxTQUFVLFNBQVVsRCxHQUNoQixPQUFPQSxFQUFPcFUsUUFBUSxpQkFBaUIsU0FBVUQsR0FDN0MsT0FBTzZ1RCxFQUFVN3VELE9BR3pCd2dCLFdBQVksU0FBVW5NLEdBQ2xCLE9BQU9BLEVBQU9wVSxRQUFRLE9BQU8sU0FBVUQsR0FDbkMsT0FBT291RCxFQUFVcHVELE9BR3pCa1IsY0FBZSwyQkFDZmlHLGFBQWMsU0FBVXhWLEVBQU1ySCxHQUkxQixPQUhhLEtBQVRxSCxJQUNBQSxFQUFPLEdBR08sUUFBYnJILEdBQXNCcUgsR0FBUSxHQUNqQixVQUFickgsR0FBd0JxSCxFQUFPLEdBQ25CLFVBQWJySCxFQUVPcUgsRUFBTyxHQUVQQSxHQUdmckgsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sRUFDQSxNQUNBQSxFQUFPLEdBQ1AsT0FDQUEsRUFBTyxHQUNQLFFBQ0FBLEVBQU8sR0FDUCxRQUVBLE9BR2ZzQixLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FySHlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSUMsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hoVixFQUFHLElBQ0hDLEVBQUcsSUFDSGdWLEVBQUcsS0FFUEMsRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHRlYsRUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLDBGQUEwRitILE1BQzlGLEtBRUpMLFlBQ0ksbUVBQW1FSyxNQUMvRCxLQUVSaEosU0FBVSw0REFBNERnSixNQUNsRSxLQUVKZ0QsY0FBZSx1Q0FBdUNoRCxNQUFNLEtBQzVEK0MsWUFBYSxrQ0FBa0MvQyxNQUFNLEtBQ3JEMUosZUFBZ0IsQ0FDWjJQLEdBQUksYUFDSkQsSUFBSyxnQkFDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssMEJBQ0xDLEtBQU0saUNBRVZaLFNBQVUsQ0FDTkMsUUFBUyxVQUNUQyxRQUFTLGdCQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsYUFDVEMsU0FBVSxnQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxTQUNOeFosRUFBRyxlQUNIeVosR0FBSSxhQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxTQUNIK08sR0FBSSxTQUNKM04sRUFBRyxTQUNINE4sR0FBSSxVQUVSc0csU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFBT3BVLFFBQVEsaUJBQWlCLFNBQVVELEdBQzdDLE9BQU82dUQsRUFBVTd1RCxPQUd6QndnQixXQUFZLFNBQVVuTSxHQUNsQixPQUFPQSxFQUFPcFUsUUFBUSxPQUFPLFNBQVVELEdBQ25DLE9BQU9vdUQsRUFBVXB1RCxPQUl6QmtSLGNBQWUsdUNBQ2ZpRyxhQUFjLFNBQVV4VixFQUFNckgsR0FJMUIsT0FIYSxLQUFUcUgsSUFDQUEsRUFBTyxHQUVNLFFBQWJySCxFQUNPcUgsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osUUFBYnJILEdBRWEsU0FBYkEsRUFEQXFILEVBR2EsVUFBYnJILEVBQ0FxSCxHQUFRLEVBQUlBLEVBQU9BLEVBQU8sR0FDYixVQUFickgsR0FFYSxZQUFiQSxFQURBcUgsRUFBTyxRQUNYLEdBS1hySCxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxFQUNBLE1BQ0FBLEVBQU8sRUFDUCxNQUNBQSxFQUFPLEdBQ1AsT0FDQUEsRUFBTyxHQUNQLFFBQ0FBLEVBQU8sR0FDUCxRQUNBQSxFQUFPLEdBQ1AsVUFFQSxPQUdmc0IsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBL0h5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlDLEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIaFYsRUFBRyxJQUNIQyxFQUFHLElBQ0hnVixFQUFHLEtBRVBDLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pWLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxxSkFBcUorSCxNQUN6SixLQUVKTCxZQUNJLGlFQUFpRUssTUFDN0QsS0FFUkosaUJBQWtCLGdCQUNsQm1tRCxrQkFBa0IsRUFDbEIvdUQsU0FDSSxnRkFBZ0ZnSixNQUM1RSxLQUVSZ0QsY0FBZSxvREFBb0RoRCxNQUMvRCxLQUVKK0MsWUFBYSw2QkFBNkIvQyxNQUFNLEtBQ2hEMUosZUFBZ0IsQ0FDWjJQLEdBQUksU0FDSkQsSUFBSyxZQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxzQkFDTEMsS0FBTSw2QkFFVlosU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsY0FDVEMsU0FBVSx3QkFDVkMsUUFBUyxZQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFdBQ054WixFQUFHLFFBQ0h5WixHQUFJLFlBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLFdBQ0puUCxFQUFHLGNBQ0hvUCxHQUFJLFlBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFlBQ0grTyxHQUFJLFVBQ0ozTixFQUFHLFVBQ0g0TixHQUFJLFNBRVJzRyxTQUFVLFNBQVVsRCxHQUNoQixPQUFPQSxFQUFPcFUsUUFBUSxpQkFBaUIsU0FBVUQsR0FDN0MsT0FBTzZ1RCxFQUFVN3VELE9BR3pCd2dCLFdBQVksU0FBVW5NLEdBQ2xCLE9BQU9BLEVBQU9wVSxRQUFRLE9BQU8sU0FBVUQsR0FDbkMsT0FBT291RCxFQUFVcHVELE9BR3pCa1IsY0FBZSx3Q0FDZmlHLGFBQWMsU0FBVXhWLEVBQU1ySCxHQUkxQixPQUhhLEtBQVRxSCxJQUNBQSxFQUFPLEdBR08sV0FBYnJILEdBQXlCcUgsR0FBUSxHQUNwQixZQUFickgsR0FBMEJxSCxFQUFPLEdBQ3JCLFlBQWJySCxFQUVPcUgsRUFBTyxHQUVQQSxHQUdmckgsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sRUFDQSxTQUNBQSxFQUFPLEdBQ1AsVUFDQUEsRUFBTyxHQUNQLFVBQ0FBLEVBQU8sR0FDUCxVQUVBLFVBR2ZzQixLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0ExSHlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7U0FBUzhCLEVBQXlCenhELEVBQVFpaUIsRUFBZS9wQixHQU1yRCxPQUFPOEgsRUFBUyxJQW9CcEIsU0FBa0IraUQsRUFBTS9pRCxHQUNwQixPQUFlLElBQVhBLEVBS1IsU0FBc0IraUQsR0FDbEIsSUFBSTJPLEVBQWdCLENBQ2hCMzZELEVBQUcsSUFDSHdDLEVBQUcsSUFDSHRDLEVBQUcsS0FFUCxZQUFzQ3lGLElBQWxDZzFELEVBQWMzTyxFQUFLMTZCLE9BQU8sSUFDbkIwNkIsRUFFSjJPLEVBQWMzTyxFQUFLMTZCLE9BQU8sSUFBTTA2QixFQUFLeUUsVUFBVSxHQWIzQ21LLENBQWE1TyxHQUVqQkEsRUF4QmU2TyxDQUxULENBQ1R4L0MsR0FBSSxXQUNKSSxHQUFJLE1BQ0pGLEdBQUksVUFFOEJwYSxHQUFNOEgsR0FzQ2hELElBQUl1TCxFQUFjLENBQ1YsUUFDQSxjQUNBLFFBQ0EsUUFDQSxRQUNBLGNBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxPQUNBLFNBRUpELEVBQ0ksNklBdUJKdW1ELEVBQW1CLENBQ2YsT0FDQSxPQUNBLGVBQ0EsUUFDQSxPQUNBLE9BQ0EsUUFHQ2xDLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxnRkFBZ0YrSCxNQUNwRixLQUVKTCxZQUFhLG1EQUFtREssTUFBTSxLQUN0RWhKLFNBQVUsNkNBQTZDZ0osTUFBTSxLQUM3RGdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsd0JBQXdCL0MsTUFBTSxLQUMzQ29ELGNBQWVnakQsRUFDZkMsa0JBckNvQixDQUNoQixRQUNBLFFBQ0EsV0FDQSxpQkFDQSxTQUNBLFdBQ0EsWUErQkpDLG1CQTdCcUIsQ0FDakIsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0F1QkpGLGlCQUFrQkEsRUFFbEJ2bUQsWUFBYUEsRUFDYkQsaUJBQWtCQyxFQUNsQjBtRCxrQkE5Q0ksd0ZBK0NKQyx1QkE3Q0ksMkRBOENKMW1ELFlBQWFBLEVBQ2IybUQsZ0JBQWlCM21ELEVBQ2pCNG1ELGlCQUFrQjVtRCxFQUVsQnhKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLHNCQUNKQyxJQUFLLDRCQUNMQyxLQUFNLG1DQUVWWixTQUFVLENBQ05DLFFBQVMsZ0JBQ1RDLFFBQVMscUJBQ1RDLFNBQVUsZUFDVkMsUUFBUyxnQkFDVEMsU0FBVSxxQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsWUFDUkMsS0FBTSxTQUNOeFosRUFBRyx3QkFDSHlaLEdBQUksWUFDSnBiLEVBQUcsY0FDSHFiLEdBQUlxL0MsRUFDSnh1RCxFQUFHLFNBQ0hvUCxHQUFJLFNBQ0pwYixFQUFHLFlBQ0hxYixHQUFJbS9DLEVBQ0podUQsRUFBRyxTQUNIK08sR0FBSWkvQyxFQUNKNXNELEVBQUcsV0FDSDROLEdBdklSLFNBQWlDelMsR0FDN0IsT0FXSixTQUFTb3lELEVBQVdweUQsR0FDaEIsT0FBSUEsRUFBUyxFQUNGb3lELEVBQVdweUQsRUFBUyxJQUV4QkEsRUFmQ295RCxDQUFXcHlELElBQ2YsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxPQUFPQSxFQUFTLFNBQ3BCLFFBQ0ksT0FBT0EsRUFBUyxZQWdJeEIrUix1QkFBd0Isa0JBQ3hCOVEsUUFBUyxTQUFVakIsR0FFZixPQUFPQSxHQURpQixJQUFYQSxFQUFlLEtBQU8sUUFHdkN5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssR0FFVCtFLGNBQWUsWUFDZmhDLEtBQU0sU0FBVTNQLEdBQ1osTUFBaUIsU0FBVkEsR0FFWGpGLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBT25sQixFQUFPLEdBQUssT0FBUyxVQXRLRStvQixDQUFRLEVBQVEsSyxpQkNLbEQsU0FBV3lqQyxHQUFVO2tDQWV6QjtTQUFTMEMsRUFBVXJ5RCxFQUFRaWlCLEVBQWUvcEIsR0FDdEMsSUFBSXllLEVBQVMzVyxFQUFTLElBQ3RCLE9BQVE5SCxHQUNKLElBQUssS0FRRCxPQU5JeWUsR0FEVyxJQUFYM1csRUFDVSxVQUNRLElBQVhBLEdBQTJCLElBQVhBLEdBQTJCLElBQVhBLEVBQzdCLFVBRUEsVUFHbEIsSUFBSyxLQVFELE9BTkkyVyxHQURXLElBQVgzVyxFQUNVLFNBQ1EsSUFBWEEsR0FBMkIsSUFBWEEsR0FBMkIsSUFBWEEsRUFDN0IsU0FFQSxTQUdsQixJQUFLLElBQ0QsTUFBdUIsWUFDM0IsSUFBSyxLQVFELE9BTkkyVyxHQURXLElBQVgzVyxFQUNVLE1BQ1EsSUFBWEEsR0FBMkIsSUFBWEEsR0FBMkIsSUFBWEEsRUFDN0IsT0FFQSxPQUdsQixJQUFLLEtBTUQsT0FKSTJXLEdBRFcsSUFBWDNXLEVBQ1UsTUFFQSxPQUdsQixJQUFLLEtBUUQsT0FOSTJXLEdBRFcsSUFBWDNXLEVBQ1UsU0FDUSxJQUFYQSxHQUEyQixJQUFYQSxHQUEyQixJQUFYQSxFQUM3QixVQUVBLFVBR2xCLElBQUssS0FRRCxPQU5JMlcsR0FEVyxJQUFYM1csRUFDVSxTQUNRLElBQVhBLEdBQTJCLElBQVhBLEdBQTJCLElBQVhBLEVBQzdCLFNBRUEsVUFNakIydkQsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHFGQUFxRitILE1BQ3pGLEtBRUpMLFlBQ0ksOERBQThESyxNQUMxRCxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUFVLDREQUE0RGdKLE1BQ2xFLEtBRUpnRCxjQUFlLHFDQUFxQ2hELE1BQU0sS0FDMUQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRcFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sd0JBQ1gsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNELE1BQU8sc0JBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sb0JBR25CK08sUUFBUyxlQUNUQyxTQUFVLFdBQ04sT0FBUXRVLEtBQUtzRixPQUNULEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyx1QkFDWCxLQUFLLEVBQ0QsTUFBTywyQkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyx5QkFHbkJpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFdBQ054WixFQUFHLGNBQ0h5WixHQUFJa2dELEVBQ0p0N0QsRUF0SVIsU0FBNkJpSixFQUFRaWlCLEVBQWUvcEIsRUFBS292QixHQUNyRCxPQUFRcHZCLEdBQ0osSUFBSyxJQUNELE9BQU8rcEIsRUFDRCxlQUNBcUYsRUFDRSxlQUNBLGlCQWdJWmxWLEdBQUlpZ0QsRUFDSnB2RCxFQUFHb3ZELEVBQ0hoZ0QsR0FBSWdnRCxFQUNKcDdELEVBQUcsTUFDSHFiLEdBQUkrL0MsRUFDSjV1RCxFQUFHLFNBQ0grTyxHQUFJNi9DLEVBQ0p4dEQsRUFBRyxTQUNINE4sR0FBSTQvQyxHQUVSdGdELHVCQUF3QixZQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQTVKeUJ1ZSxDQUFRLEVBQVEsSyxpQkNDbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLENBQ0oydEQsV0FDSSxvRkFBb0Y1bEQsTUFDaEYsS0FFUi9RLE9BQVEscUhBQXFIK1EsTUFDekgsS0FFSmtjLFNBQVUsbUJBRWR2YyxZQUNJLDhEQUE4REssTUFDMUQsS0FFUitsRCxrQkFBa0IsRUFDbEIvdUQsU0FDSSw4REFBOERnSixNQUMxRCxLQUVSZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxPQUNKRCxJQUFLLFVBQ0xFLEVBQUcsYUFDSEMsR0FBSSxtQkFDSjBnRCxHQUFJLGFBQ0p6Z0QsSUFBSyxnQ0FDTDBnRCxJQUFLLG1CQUNMemdELEtBQU0scUNBQ04wZ0QsS0FBTSx3QkFFVnRoRCxTQUFVLENBQ05DLFFBQVMsV0FDTCxNQUFPLFlBQStCLElBQWpCbFUsS0FBS2lHLFFBQWdCLE1BQVEsTUFBUSxRQUU5RGtPLFFBQVMsV0FDTCxNQUFPLFlBQStCLElBQWpCblUsS0FBS2lHLFFBQWdCLE1BQVEsTUFBUSxRQUU5RG1PLFNBQVUsV0FDTixNQUFPLFlBQStCLElBQWpCcFUsS0FBS2lHLFFBQWdCLE1BQVEsTUFBUSxRQUU5RG9PLFFBQVMsV0FDTCxNQUFPLFlBQStCLElBQWpCclUsS0FBS2lHLFFBQWdCLE1BQVEsTUFBUSxRQUU5RHFPLFNBQVUsV0FDTixNQUNJLHdCQUNrQixJQUFqQnRVLEtBQUtpRyxRQUFnQixNQUFRLE1BQzlCLFFBR1JzTyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLFFBQ054WixFQUFHLGFBQ0h5WixHQUFJLFlBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLFlBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFNBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFNBQ0grTyxHQUFJLFdBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixxQkFDeEI5USxRQUFTLFNBQVVqQixFQUFRa2QsR0FDdkIsSUFBSXZiLEVBQ1csSUFBWDNCLEVBQ00sSUFDVyxJQUFYQSxFQUNFLElBQ1csSUFBWEEsRUFDRSxJQUNXLElBQVhBLEVBQ0UsSUFDQSxJQUloQixNQUhlLE1BQVhrZCxHQUE2QixNQUFYQSxJQUNsQnZiLEVBQVMsS0FFTjNCLEVBQVMyQixHQUVwQjhDLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQWxHeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJanNELEVBQVMsQ0FDTDJ0RCxXQUNJLG9GQUFvRjVsRCxNQUNoRixLQUVSL1EsT0FBUSxzRkFBc0YrUSxNQUMxRixLQUVKa2MsU0FBVSxrQ0FFZHZjLEVBQWMsa0RBQWtESyxNQUFNLEtBQ3RFRixFQUFjLENBQ1YsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLHlCQUNBLDRCQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0FJSkQsRUFDSSx3SkFFUixTQUFTbW5ELEVBQU9yNkQsR0FDWixPQUFPQSxFQUFJLEdBQUtBLEVBQUksR0FBb0IsTUFBWkEsRUFBSSxJQUVwQyxTQUFTaTZELEVBQVVyeUQsRUFBUWlpQixFQUFlL3BCLEVBQUtvdkIsR0FDM0MsSUFBSTNRLEVBQVMzVyxFQUFTLElBQ3RCLE9BQVE5SCxHQUNKLElBQUssSUFDRCxPQUFPK3BCLEdBQWlCcUYsRUFBVyxhQUFlLGdCQUN0RCxJQUFLLEtBQ0QsT0FBSXJGLEdBQWlCcUYsRUFDVjNRLEdBQVU4N0MsRUFBT3p5RCxHQUFVLFVBQVksVUFFdkMyVyxFQUFTLFlBRXhCLElBQUssSUFDRCxPQUFPc0wsRUFBZ0IsU0FBV3FGLEVBQVcsU0FBVyxVQUM1RCxJQUFLLEtBQ0QsT0FBSXJGLEdBQWlCcUYsRUFDVjNRLEdBQVU4N0MsRUFBT3p5RCxHQUFVLFNBQVcsU0FFdEMyVyxFQUFTLFdBRXhCLElBQUssSUFDRCxPQUFPc0wsRUFBZ0IsU0FBV3FGLEVBQVcsU0FBVyxVQUM1RCxJQUFLLEtBQ0QsT0FBSXJGLEdBQWlCcUYsRUFDVjNRLEdBQVU4N0MsRUFBT3p5RCxHQUFVLFNBQVcsU0FFdEMyVyxFQUFTLFdBRXhCLElBQUssSUFDRCxPQUFPc0wsR0FBaUJxRixFQUFXLE1BQVEsT0FDL0MsSUFBSyxLQUNELE9BQUlyRixHQUFpQnFGLEVBQ1YzUSxHQUFVODdDLEVBQU96eUQsR0FBVSxNQUFRLE9BRW5DMlcsRUFBUyxNQUV4QixJQUFLLElBQ0QsT0FBT3NMLEdBQWlCcUYsRUFBVyxRQUFVLFVBQ2pELElBQUssS0FDRCxPQUFJckYsR0FBaUJxRixFQUNWM1EsR0FBVTg3QyxFQUFPenlELEdBQVUsU0FBVyxVQUV0QzJXLEVBQVMsU0FFeEIsSUFBSyxJQUNELE9BQU9zTCxHQUFpQnFGLEVBQVcsTUFBUSxRQUMvQyxJQUFLLEtBQ0QsT0FBSXJGLEdBQWlCcUYsRUFDVjNRLEdBQVU4N0MsRUFBT3p5RCxHQUFVLE9BQVMsT0FFcEMyVyxFQUFTLFFBS3ZCZzVDLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUUEsRUFDUjBILFlBQWFBLEVBQ2JFLFlBQWFBLEVBQ2JELGlCQUFrQkMsRUFHbEIwbUQsa0JBQ0ksdUtBQ0pDLHVCQUNJLHNEQUNKMW1ELFlBQWFBLEVBQ2IybUQsZ0JBQWlCM21ELEVBQ2pCNG1ELGlCQUFrQjVtRCxFQUNsQjlJLFNBQVUsbURBQW1EZ0osTUFBTSxLQUNuRWdELGNBQWUsdUJBQXVCaEQsTUFBTSxLQUM1QytDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssb0JBQ0xDLEtBQU0seUJBQ05sYixFQUFHLGNBRVBzYSxTQUFVLENBQ05DLFFBQVMsY0FDVEMsUUFBUyxlQUNUQyxTQUFVLFdBQ04sT0FBUXBVLEtBQUtzRixPQUNULEtBQUssRUFDRCxNQUFPLGtCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyxrQkFDWCxLQUFLLEVBQ0QsTUFBTyxtQkFDWCxLQUFLLEVBQ0QsTUFBTyxvQkFDWCxLQUFLLEVBQ0QsTUFBTyxpQkFDWCxLQUFLLEVBQ0QsTUFBTyxvQkFHbkIrTyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRdFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sd0JBQ1gsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLHVCQUNYLEtBQUssRUFDRCxNQUFPLHdCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyx1QkFDWCxLQUFLLEVBQ0QsTUFBTywwQkFHbkJpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFVBQ054WixFQUFHMjVELEVBQ0hsZ0QsR0FBSWtnRCxFQUNKdDdELEVBQUdzN0QsRUFDSGpnRCxHQUFJaWdELEVBQ0pwdkQsRUFBR292RCxFQUNIaGdELEdBQUlnZ0QsRUFDSnA3RCxFQUFHbzdELEVBQ0gvL0MsR0FBSSsvQyxFQUNKNXVELEVBQUc0dUQsRUFDSDcvQyxHQUFJNi9DLEVBQ0p4dEQsRUFBR3d0RCxFQUNINS9DLEdBQUk0L0MsR0FFUnRnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FuTHlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxnRUFBZ0UrSCxNQUNwRSxLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQ0ksb0VBQW9FZ0osTUFDaEUsS0FFUmdELGNBQWUsNkJBQTZCaEQsTUFBTSxLQUNsRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLHNDQUNKQyxJQUFLLDZDQUNMQyxLQUFNLG9EQUVWWixTQUFVLENBQ05DLFFBQVMsc0JBQ1RDLFFBQVMsc0JBQ1RFLFFBQVMsc0JBQ1RELFNBQVUsNEJBQ1ZFLFNBQVUsNEJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFNBQVV0USxHQU1kLE9BQU9BLEdBTEssVUFBVW1VLEtBQUtuVSxHQUNyQixNQUNBLFFBQVFtVSxLQUFLblUsR0FDWCxNQUNBLFFBR1p1USxLQUFNLFlBQ054WixFQUFHLGlCQUNIeVosR0FBSSxhQUNKcGIsRUFBRyxZQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxZQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxXQUNIK08sR0FBSSxVQUNKM04sRUFBRyxVQUNINE4sR0FBSSxVQUVSVix1QkFBd0IsY0FDeEI5USxRQUFTLFNBQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0E3RHlCdWUsQ0FBUSxFQUFRLEssaUJDSWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSx5RkFBeUYrSCxNQUM3RixLQUVKTCxZQUFhLHFEQUFxREssTUFDOUQsS0FFSmhKLFNBQ0ksK0VBQStFZ0osTUFDM0UsS0FFUmdELGNBQWUsK0JBQStCaEQsTUFBTSxLQUNwRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFFcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLGlCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZUFDVEMsU0FBVSx3QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxXQUNOeFosRUFBRyxtQkFDSHlaLEdBQUksWUFDSnBiLEVBQUcsUUFDSHFiLEdBQUksV0FDSm5QLEVBQUcsTUFDSG9QLEdBQUksU0FDSnBiLEVBQUcsVUFDSHFiLEdBQUksYUFDSjdPLEVBQUcsTUFDSCtPLEdBQUksU0FDSjNOLEVBQUcsV0FDSDROLEdBQUksY0FFUlYsdUJBQXdCLG1DQUV4QjlRLFFBQVMsU0FBVWpCLEdBQ2YsSUFDSTJCLEVBQVMsR0FpQ2IsT0FsQ1EzQixFQXlCQSxHQUVBMkIsRUFETSxLQTFCTjNCLEdBMEJrQixLQTFCbEJBLEdBMEI4QixLQTFCOUJBLEdBMEIwQyxLQTFCMUNBLEdBMEJzRCxNQTFCdERBLEVBMkJTLE1BRUEsTUE3QlRBLEVBK0JPLElBQ1gyQixFQTlCUyxDQUNMLEdBQ0EsS0FDQSxLQUNBLE1BQ0EsTUFDQSxLQUNBLEtBQ0EsS0FDQSxNQUNBLE1BQ0EsTUFDQSxLQUNBLE1BQ0EsS0FDQSxLQUNBLE1BQ0EsS0FDQSxLQUNBLE1BQ0EsS0FDQSxPQXZCQTNCLElBa0NEQSxFQUFTMkIsR0FFcEI4QyxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0EvRnlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxzRkFBc0YrSCxNQUMxRixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUscURBQXFEZ0osTUFBTSxLQUNyRWdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUsscUJBQ0xDLEtBQU0sc0NBRVZaLFNBQVUsQ0FDTkMsUUFBUyxpQkFDVEMsUUFBUyxvQkFDVEMsU0FBVSxtQkFDVkMsUUFBUyxpQkFDVEMsU0FBVSxxQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxXQUNOeFosRUFBRyxjQUNIeVosR0FBSSxjQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxjQUNKblAsRUFBRyxVQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxVQUNKN08sRUFBRyxXQUNIK08sR0FBSSxhQUNKM04sRUFBRyxRQUNINE4sR0FBSSxTQUVSVix1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FuRHlCdWUsQ0FBUSxFQUFRLEssaUJDS2xELFNBQVd5akMsR0FBVTtrQ0FJekI7U0FBUytDLEVBQW9CMXlELEVBQVFpaUIsRUFBZS9wQixFQUFLb3ZCLEdBQ3JELElBQUk1c0IsRUFBUyxDQUNUM0QsRUFBRyxDQUFDLGNBQWUsZ0JBQ25Ca00sRUFBRyxDQUFDLGNBQWUsZ0JBQ25CaE0sRUFBRyxDQUFDLFVBQVcsYUFDZnFiLEdBQUksQ0FBQ3RTLEVBQVMsUUFBU0EsRUFBUyxVQUNoQ3VFLEVBQUcsQ0FBQyxhQUFjLGVBQ2xCZCxFQUFHLENBQUMsWUFBYSxlQUNqQitPLEdBQUksQ0FBQ3hTLEVBQVMsVUFBV0EsRUFBUyxZQUNsQzZFLEVBQUcsQ0FBQyxXQUFZLGNBQ2hCNE4sR0FBSSxDQUFDelMsRUFBUyxTQUFVQSxFQUFTLFlBRXJDLE9BQU9paUIsRUFBZ0J2bkIsRUFBT3hDLEdBQUssR0FBS3dDLEVBQU94QyxHQUFLLEdBRy9DeTNELEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxxRkFBcUYrSCxNQUN6RixLQUVKTCxZQUNJLDZEQUE2REssTUFBTSxLQUN2RStsRCxrQkFBa0IsRUFDbEIvdUQsU0FDSSw4REFBOERnSixNQUMxRCxLQUVSZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxlQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWWixTQUFVLENBQ05DLFFBQVMsc0JBQ1RLLFNBQVUsSUFDVkosUUFBUyx1QkFDVEMsU0FBVSxxQkFDVkMsUUFBUyx3QkFDVEMsU0FBVSxnQ0FFZFMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsb0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHMjdELEVBQ0h0Z0QsR0FBSSxhQUNKblAsRUFBR3l2RCxFQUNIcmdELEdBQUksYUFDSnBiLEVBQUd5N0QsRUFDSHBnRCxHQUFJb2dELEVBQ0pudUQsRUFBR211RCxFQUNIbmdELEdBQUksWUFDSjlPLEVBQUdpdkQsRUFDSGxnRCxHQUFJa2dELEVBQ0o3dEQsRUFBRzZ0RCxFQUNIamdELEdBQUlpZ0QsR0FFUjNnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0ExRXlCdWUsQ0FBUSxFQUFRLEssaUJDSWxELFNBQVd5akMsR0FBVTtrQ0FJekI7U0FBUytDLEVBQW9CMXlELEVBQVFpaUIsRUFBZS9wQixFQUFLb3ZCLEdBQ3JELElBQUk1c0IsRUFBUyxDQUNUM0QsRUFBRyxDQUFDLGNBQWUsZ0JBQ25Ca00sRUFBRyxDQUFDLGNBQWUsZ0JBQ25CaE0sRUFBRyxDQUFDLFVBQVcsYUFDZnFiLEdBQUksQ0FBQ3RTLEVBQVMsUUFBU0EsRUFBUyxVQUNoQ3VFLEVBQUcsQ0FBQyxhQUFjLGVBQ2xCZCxFQUFHLENBQUMsWUFBYSxlQUNqQitPLEdBQUksQ0FBQ3hTLEVBQVMsVUFBV0EsRUFBUyxZQUNsQzZFLEVBQUcsQ0FBQyxXQUFZLGNBQ2hCNE4sR0FBSSxDQUFDelMsRUFBUyxTQUFVQSxFQUFTLFlBRXJDLE9BQU9paUIsRUFBZ0J2bkIsRUFBT3hDLEdBQUssR0FBS3dDLEVBQU94QyxHQUFLLEdBRzdDeTNELEVBQU9qOEMsYUFBYSxRQUFTLENBQ3BDaFEsT0FBUSxxRkFBcUYrSCxNQUN6RixLQUVKTCxZQUNJLDZEQUE2REssTUFBTSxLQUN2RStsRCxrQkFBa0IsRUFDbEIvdUQsU0FDSSw4REFBOERnSixNQUMxRCxLQUVSZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxlQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWWixTQUFVLENBQ05DLFFBQVMsc0JBQ1RLLFNBQVUsSUFDVkosUUFBUyx1QkFDVEMsU0FBVSxxQkFDVkMsUUFBUyx3QkFDVEMsU0FBVSxnQ0FFZFMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsb0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHMjdELEVBQ0h0Z0QsR0FBSSxhQUNKblAsRUFBR3l2RCxFQUNIcmdELEdBQUksYUFDSnBiLEVBQUd5N0QsRUFDSHBnRCxHQUFJb2dELEVBQ0pudUQsRUFBR211RCxFQUNIbmdELEdBQUksWUFDSjlPLEVBQUdpdkQsRUFDSGxnRCxHQUFJa2dELEVBQ0o3dEQsRUFBRzZ0RCxFQUNIamdELEdBQUlpZ0QsR0FFUjNnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0ExRXlCdWUsQ0FBUSxFQUFRLEssaUJDQWxELFNBQVd5akMsR0FBVTtrQ0FJekI7U0FBUytDLEVBQW9CMXlELEVBQVFpaUIsRUFBZS9wQixFQUFLb3ZCLEdBQ3JELElBQUk1c0IsRUFBUyxDQUNUM0QsRUFBRyxDQUFDLGNBQWUsZ0JBQ25Ca00sRUFBRyxDQUFDLGNBQWUsZ0JBQ25CaE0sRUFBRyxDQUFDLFVBQVcsYUFDZnFiLEdBQUksQ0FBQ3RTLEVBQVMsUUFBU0EsRUFBUyxVQUNoQ3VFLEVBQUcsQ0FBQyxhQUFjLGVBQ2xCZCxFQUFHLENBQUMsWUFBYSxlQUNqQitPLEdBQUksQ0FBQ3hTLEVBQVMsVUFBV0EsRUFBUyxZQUNsQzZFLEVBQUcsQ0FBQyxXQUFZLGNBQ2hCNE4sR0FBSSxDQUFDelMsRUFBUyxTQUFVQSxFQUFTLFlBRXJDLE9BQU9paUIsRUFBZ0J2bkIsRUFBT3hDLEdBQUssR0FBS3dDLEVBQU94QyxHQUFLLEdBRzdDeTNELEVBQU9qOEMsYUFBYSxRQUFTLENBQ3BDaFEsT0FBUSxxRkFBcUYrSCxNQUN6RixLQUVKTCxZQUNJLDZEQUE2REssTUFBTSxLQUN2RStsRCxrQkFBa0IsRUFDbEIvdUQsU0FDSSw4REFBOERnSixNQUMxRCxLQUVSZ0QsY0FBZSx1QkFBdUJoRCxNQUFNLEtBQzVDK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxlQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWWixTQUFVLENBQ05DLFFBQVMsc0JBQ1RLLFNBQVUsSUFDVkosUUFBUyx1QkFDVEMsU0FBVSxxQkFDVkMsUUFBUyx3QkFDVEMsU0FBVSxnQ0FFZFMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsb0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHMjdELEVBQ0h0Z0QsR0FBSSxhQUNKblAsRUFBR3l2RCxFQUNIcmdELEdBQUksYUFDSnBiLEVBQUd5N0QsRUFDSHBnRCxHQUFJb2dELEVBQ0pudUQsRUFBR211RCxFQUNIbmdELEdBQUksWUFDSjlPLEVBQUdpdkQsRUFDSGxnRCxHQUFJa2dELEVBQ0o3dEQsRUFBRzZ0RCxFQUNIamdELEdBQUlpZ0QsR0FFUjNnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0ExRXlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSWpzRCxFQUFTLENBQ0wsV0FDQSxhQUNBLFNBQ0EsV0FDQSxLQUNBLE9BQ0EsU0FDQSxXQUNBLGVBQ0EsYUFDQSxhQUNBLGNBRUpqQixFQUFXLENBQ1AsV0FDQSxPQUNBLFdBQ0EsT0FDQSxhQUNBLFNBQ0EsWUFHQ2t0RCxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVFBLEVBQ1IwSCxZQUFhMUgsRUFDYmpCLFNBQVVBLEVBQ1ZnTSxjQUFlaE0sRUFDZitMLFlBQWEscUNBQXFDL0MsTUFBTSxLQUN4RDFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxXQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZZLGNBQWUsUUFDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBTyxPQUFTQSxHQUVwQjZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEdBQ0EsS0FFQSxNQUdmK04sU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsY0FDVEMsU0FBVSxVQUNWQyxRQUFTLGNBQ1RDLFNBQVUscUJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLGNBQ1JDLEtBQU0sWUFDTnhaLEVBQUcsaUJBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLFlBQ0puUCxFQUFHLGFBQ0hvUCxHQUFJLGNBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLFlBQ0o3TyxFQUFHLFNBQ0grTyxHQUFJLFVBQ0ozTixFQUFHLFdBQ0g0TixHQUFJLGFBRVJzRyxTQUFVLFNBQVVsRCxHQUNoQixPQUFPQSxFQUFPcFUsUUFBUSxLQUFNLE1BRWhDdWdCLFdBQVksU0FBVW5NLEdBQ2xCLE9BQU9BLEVBQU9wVSxRQUFRLEtBQU0sTUFFaENnRCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssTUF4RnlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FXaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaS9DLG1CQUNJLHFIQUFxSGxuRCxNQUNqSCxLQUVSbW5ELGlCQUNJLHFIQUFxSG5uRCxNQUNqSCxLQUVSL0gsT0FBUSxTQUFVbXZELEVBQWdCbjRELEdBQzlCLE9BQUttNEQsRUFHaUIsaUJBQVhuNEQsR0FDUCxJQUFJdUgsS0FBS3ZILEVBQU84c0QsVUFBVSxFQUFHOXNELEVBQU9vTyxRQUFRLFVBR3JDN0wsS0FBSzYxRCxrQkFBa0JELEVBQWVsdkQsU0FFdEMxRyxLQUFLODFELG9CQUFvQkYsRUFBZWx2RCxTQVJ4QzFHLEtBQUs4MUQscUJBV3BCM25ELFlBQWEsb0RBQW9ESyxNQUFNLEtBQ3ZFaEosU0FBVSx5REFBeURnSixNQUMvRCxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDM1AsU0FBVSxTQUFVb0gsRUFBT0ssRUFBUytrQixHQUNoQyxPQUFJcGxCLEVBQVEsR0FDRG9sQixFQUFVLEtBQU8sS0FFakJBLEVBQVUsS0FBTyxNQUdoQzVYLEtBQU0sU0FBVXpYLEdBQ1osTUFBeUMsT0FBakNBLEVBQVEsSUFBSWlNLGNBQWMsSUFFdEN3TixjQUFlLGdCQUNmM1EsZUFBZ0IsQ0FDWjJQLEdBQUksU0FDSkQsSUFBSyxZQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVmtoRCxXQUFZLENBQ1I3aEQsUUFBUyxpQkFDVEMsUUFBUyxnQkFDVEMsU0FBVSxlQUNWQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRdFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sZ0NBQ1gsUUFDSSxNQUFPLG1DQUduQmlQLFNBQVUsS0FFZE4sU0FBVSxTQUFVaFosRUFBS3dKLEdBQ3JCLElBdEVZekksRUFzRVIwSSxFQUFTMUUsS0FBS2cyRCxZQUFZLzZELEdBQzFCZ0wsRUFBUXhCLEdBQU9BLEVBQUl3QixRQUl2QixPQTNFWWpLLEVBd0VHMEksR0F0RU0sb0JBQWJsQyxVQUE0QnhHLGFBQWlCd0csVUFDWCxzQkFBMUNwSSxPQUFPa0IsVUFBVVksU0FBU3JDLEtBQUttQyxNQXNFM0IwSSxFQUFTQSxFQUFPN0ksTUFBTTRJLElBRW5CQyxFQUFPRixRQUFRLEtBQU15QixFQUFRLElBQU8sRUFBSSxNQUFRLFNBRTNEOE8sYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTnhaLEVBQUcsb0JBQ0h5WixHQUFJLGtCQUNKcGIsRUFBRyxZQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxVQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxXQUNKN08sRUFBRyxhQUNIK08sR0FBSSxXQUNKM04sRUFBRyxjQUNINE4sR0FBSSxhQUVSVix1QkFBd0IsV0FDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0F4R3lCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwyREFBMkRnSixNQUNqRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksU0FDSkQsSUFBSyxZQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFlBRVJWLHVCQUF3Qix1QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLElBQUl6RyxFQUFJeUcsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOekcsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ0EsT0FHeEJrTCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FsRXlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwyREFBMkRnSixNQUNqRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksU0FDSkQsSUFBSyxZQUNMRSxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSyxzQkFDTEMsS0FBTSw2QkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFlBRVJWLHVCQUF3Qix1QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLElBQUl6RyxFQUFJeUcsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOekcsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ0EsU0E3RFUyeUIsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwyREFBMkRnSixNQUNqRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFlBRVJWLHVCQUF3Qix1QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLElBQUl6RyxFQUFJeUcsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOekcsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ0EsT0FHeEJrTCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FsRXlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwyREFBMkRnSixNQUNqRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFlBRVJWLHVCQUF3Qix1QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLElBQUl6RyxFQUFJeUcsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOekcsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ0EsT0FHeEJrTCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FsRXlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwyREFBMkRnSixNQUNqRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFlBRVJWLHVCQUF3Qix1QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLElBQUl6RyxFQUFJeUcsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOekcsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ0EsU0E3RFUyeUIsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwyREFBMkRnSixNQUNqRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksU0FDSkQsSUFBSyxZQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFlBRVJWLHVCQUF3Qix1QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLElBQUl6RyxFQUFJeUcsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOekcsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ0EsT0FHeEJrTCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FsRXlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwyREFBMkRnSixNQUNqRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksU0FDSkQsSUFBSyxZQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFlBRVJWLHVCQUF3Qix1QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLElBQUl6RyxFQUFJeUcsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOekcsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ0EsT0FHeEJrTCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FsRXlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwyREFBMkRnSixNQUNqRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFlBRVJWLHVCQUF3Qix1QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLElBQUl6RyxFQUFJeUcsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOekcsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDTSxJQUFOQSxFQUNFLEtBQ0EsT0FHeEJrTCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FsRXlCdWUsQ0FBUSxFQUFRLEssaUJDTWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSw2RkFBNkYrSCxNQUNqRyxLQUVKTCxZQUFhLG9EQUFvREssTUFBTSxLQUN2RWhKLFNBQVUscURBQXFEZ0osTUFBTSxLQUNyRWdELGNBQWUsZ0NBQWdDaEQsTUFBTSxLQUNyRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLDRCQUNKQyxJQUFLLGtDQUNMQyxLQUFNLDJDQUNOMGdELEtBQU0sdUNBRVY5L0MsY0FBZSxjQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUF5QyxNQUFsQ0EsRUFBTW92QixPQUFPLEdBQUduakIsZUFFM0JwSixTQUFVLFNBQVVvSCxFQUFPSyxFQUFTK2tCLEdBQ2hDLE9BQUlwbEIsRUFBUSxHQUNEb2xCLEVBQVUsU0FBVyxTQUVyQkEsRUFBVSxTQUFXLFVBR3BDcFgsU0FBVSxDQUNOQyxRQUFTLGlCQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGdCQUNWQyxRQUFTLGlCQUNUQyxTQUFVLDJCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxVQUNSQyxLQUFNLFdBQ054WixFQUFHLGtCQUNIeVosR0FBSSxjQUNKcGIsRUFBRyxhQUNIcWIsR0FBSSxhQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxXQUNKN08sRUFBRyxhQUNIK08sR0FBSSxhQUNKM04sRUFBRyxXQUNINE4sR0FBSSxZQUVSVix1QkFBd0IsV0FDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0EvRHlCdWUsQ0FBUSxFQUFRLEssaUJDQWxELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSXVELEVBQ0ksOERBQThEem5ELE1BQzFELEtBRVJMLEVBQWMsa0RBQWtESyxNQUFNLEtBQ3RFRixFQUFjLENBQ1YsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFNBRUpELEVBQ0ksbUxBRUNxa0QsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLDJGQUEyRitILE1BQy9GLEtBRUpMLFlBQWEsU0FBVXJVLEVBQUcyRCxHQUN0QixPQUFLM0QsRUFFTSxRQUFRa0wsS0FBS3ZILEdBQ2IwUSxFQUFZclUsRUFBRTRNLFNBRWR1dkQsRUFBZW44RCxFQUFFNE0sU0FKakJ1dkQsR0FPZjVuRCxZQUFhQSxFQUNiRCxpQkFBa0JDLEVBQ2xCMG1ELGtCQUNJLCtGQUNKQyx1QkFDSSwwRkFDSjFtRCxZQUFhQSxFQUNiMm1ELGdCQUFpQjNtRCxFQUNqQjRtRCxpQkFBa0I1bUQsRUFDbEI5SSxTQUFVLHVEQUF1RGdKLE1BQU0sS0FDdkVnRCxjQUFlLHFDQUFxQ2hELE1BQU0sS0FDMUQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxhQUNIQyxHQUFJLHdCQUNKQyxJQUFLLDZCQUNMQyxLQUFNLG9DQUVWWixTQUFVLENBQ05DLFFBQVMsV0FDTCxNQUFPLGFBQWdDLElBQWpCbFUsS0FBS2lHLFFBQWdCLElBQU0sSUFBTSxRQUUzRGtPLFFBQVMsV0FDTCxNQUFPLGdCQUFtQyxJQUFqQm5VLEtBQUtpRyxRQUFnQixJQUFNLElBQU0sUUFFOURtTyxTQUFVLFdBQ04sTUFBTyxjQUFpQyxJQUFqQnBVLEtBQUtpRyxRQUFnQixJQUFNLElBQU0sUUFFNURvTyxRQUFTLFdBQ0wsTUFBTyxjQUFpQyxJQUFqQnJVLEtBQUtpRyxRQUFnQixJQUFNLElBQU0sUUFFNURxTyxTQUFVLFdBQ04sTUFDSSwwQkFDa0IsSUFBakJ0VSxLQUFLaUcsUUFBZ0IsSUFBTSxJQUM1QixRQUdSc08sU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxVQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcsWUFDSHFiLEdBQUksYUFDSm5QLEVBQUcsV0FDSG9QLEdBQUksV0FDSnBiLEVBQUcsU0FDSHFiLEdBQUksVUFDSi9OLEVBQUcsYUFDSGdPLEdBQUksYUFDSjlPLEVBQUcsU0FDSCtPLEdBQUksV0FDSjNOLEVBQUcsU0FDSDROLEdBQUksV0FFUlYsdUJBQXdCLFdBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEdBRVQ5TCxZQUFhLG1CQTdHcUJxcUIsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSXVELEVBQ0ksOERBQThEem5ELE1BQzFELEtBRVJMLEVBQWMsa0RBQWtESyxNQUFNLEtBQ3RFRixFQUFjLENBQ1YsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFNBRUpELEVBQ0ksbUxBRUdxa0QsRUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLDJGQUEyRitILE1BQy9GLEtBRUpMLFlBQWEsU0FBVXJVLEVBQUcyRCxHQUN0QixPQUFLM0QsRUFFTSxRQUFRa0wsS0FBS3ZILEdBQ2IwUSxFQUFZclUsRUFBRTRNLFNBRWR1dkQsRUFBZW44RCxFQUFFNE0sU0FKakJ1dkQsR0FPZjVuRCxZQUFhQSxFQUNiRCxpQkFBa0JDLEVBQ2xCMG1ELGtCQUNJLCtGQUNKQyx1QkFDSSwwRkFDSjFtRCxZQUFhQSxFQUNiMm1ELGdCQUFpQjNtRCxFQUNqQjRtRCxpQkFBa0I1bUQsRUFDbEI5SSxTQUFVLHVEQUF1RGdKLE1BQU0sS0FDdkVnRCxjQUFlLHFDQUFxQ2hELE1BQU0sS0FDMUQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFNBQ0pELElBQUssWUFDTEUsRUFBRyxhQUNIQyxHQUFJLHdCQUNKQyxJQUFLLCtCQUNMQyxLQUFNLHNDQUVWWixTQUFVLENBQ05DLFFBQVMsV0FDTCxNQUFPLGFBQWdDLElBQWpCbFUsS0FBS2lHLFFBQWdCLElBQU0sSUFBTSxRQUUzRGtPLFFBQVMsV0FDTCxNQUFPLGdCQUFtQyxJQUFqQm5VLEtBQUtpRyxRQUFnQixJQUFNLElBQU0sUUFFOURtTyxTQUFVLFdBQ04sTUFBTyxjQUFpQyxJQUFqQnBVLEtBQUtpRyxRQUFnQixJQUFNLElBQU0sUUFFNURvTyxRQUFTLFdBQ0wsTUFBTyxjQUFpQyxJQUFqQnJVLEtBQUtpRyxRQUFnQixJQUFNLElBQU0sUUFFNURxTyxTQUFVLFdBQ04sTUFDSSwwQkFDa0IsSUFBakJ0VSxLQUFLaUcsUUFBZ0IsSUFBTSxJQUM1QixRQUdSc08sU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxVQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcsWUFDSHFiLEdBQUksYUFDSm5QLEVBQUcsV0FDSG9QLEdBQUksV0FDSnBiLEVBQUcsU0FDSHFiLEdBQUksVUFDSi9OLEVBQUcsYUFDSGdPLEdBQUksYUFDSjlPLEVBQUcsU0FDSCtPLEdBQUksV0FDSjNOLEVBQUcsU0FDSDROLEdBQUksV0FFUlYsdUJBQXdCLFdBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBM0d5QnVlLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUl1RCxFQUNJLDhEQUE4RHpuRCxNQUMxRCxLQUVSTCxFQUFjLGtEQUFrREssTUFBTSxLQUN0RUYsRUFBYyxDQUNWLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxTQUVKRCxFQUNJLG1MQUVHcWtELEVBQU9qOEMsYUFBYSxRQUFTLENBQ3BDaFEsT0FBUSwyRkFBMkYrSCxNQUMvRixLQUVKTCxZQUFhLFNBQVVyVSxFQUFHMkQsR0FDdEIsT0FBSzNELEVBRU0sUUFBUWtMLEtBQUt2SCxHQUNiMFEsRUFBWXJVLEVBQUU0TSxTQUVkdXZELEVBQWVuOEQsRUFBRTRNLFNBSmpCdXZELEdBT2Y1bkQsWUFBYUEsRUFDYkQsaUJBQWtCQyxFQUNsQjBtRCxrQkFDSSwrRkFDSkMsdUJBQ0ksMEZBQ0oxbUQsWUFBYUEsRUFDYjJtRCxnQkFBaUIzbUQsRUFDakI0bUQsaUJBQWtCNW1ELEVBQ2xCOUksU0FBVSx1REFBdURnSixNQUFNLEtBQ3ZFZ0QsY0FBZSxxQ0FBcUNoRCxNQUFNLEtBQzFEK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxPQUNKRCxJQUFLLFVBQ0xFLEVBQUcsYUFDSEMsR0FBSSx3QkFDSkMsSUFBSyw2QkFDTEMsS0FBTSxvQ0FFVlosU0FBVSxDQUNOQyxRQUFTLFdBQ0wsTUFBTyxhQUFnQyxJQUFqQmxVLEtBQUtpRyxRQUFnQixJQUFNLElBQU0sUUFFM0RrTyxRQUFTLFdBQ0wsTUFBTyxnQkFBbUMsSUFBakJuVSxLQUFLaUcsUUFBZ0IsSUFBTSxJQUFNLFFBRTlEbU8sU0FBVSxXQUNOLE1BQU8sY0FBaUMsSUFBakJwVSxLQUFLaUcsUUFBZ0IsSUFBTSxJQUFNLFFBRTVEb08sUUFBUyxXQUNMLE1BQU8sY0FBaUMsSUFBakJyVSxLQUFLaUcsUUFBZ0IsSUFBTSxJQUFNLFFBRTVEcU8sU0FBVSxXQUNOLE1BQ0ksMEJBQ2tCLElBQWpCdFUsS0FBS2lHLFFBQWdCLElBQU0sSUFDNUIsUUFHUnNPLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFNBQ0hxYixHQUFJLFVBQ0ovTixFQUFHLGFBQ0hnTyxHQUFJLGFBQ0o5TyxFQUFHLFNBQ0grTyxHQUFJLFdBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixXQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxHQUVUOUwsWUFBYSxtQkE3R3FCcXFCLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUl1RCxFQUNJLDhEQUE4RHpuRCxNQUMxRCxLQUVSTCxFQUFjLGtEQUFrREssTUFBTSxLQUN0RUYsRUFBYyxDQUNWLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxTQUVKRCxFQUNJLG1MQUVHcWtELEVBQU9qOEMsYUFBYSxRQUFTLENBQ3BDaFEsT0FBUSwyRkFBMkYrSCxNQUMvRixLQUVKTCxZQUFhLFNBQVVyVSxFQUFHMkQsR0FDdEIsT0FBSzNELEVBRU0sUUFBUWtMLEtBQUt2SCxHQUNiMFEsRUFBWXJVLEVBQUU0TSxTQUVkdXZELEVBQWVuOEQsRUFBRTRNLFNBSmpCdXZELEdBT2Y1bkQsWUFBYUEsRUFDYkQsaUJBQWtCQyxFQUNsQjBtRCxrQkFDSSwrRkFDSkMsdUJBQ0ksMEZBQ0oxbUQsWUFBYUEsRUFDYjJtRCxnQkFBaUIzbUQsRUFDakI0bUQsaUJBQWtCNW1ELEVBQ2xCOUksU0FBVSx1REFBdURnSixNQUFNLEtBQ3ZFZ0QsY0FBZSxxQ0FBcUNoRCxNQUFNLEtBQzFEK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxTQUNKRCxJQUFLLFlBQ0xFLEVBQUcsYUFDSEMsR0FBSSx3QkFDSkMsSUFBSywrQkFDTEMsS0FBTSxzQ0FFVlosU0FBVSxDQUNOQyxRQUFTLFdBQ0wsTUFBTyxhQUFnQyxJQUFqQmxVLEtBQUtpRyxRQUFnQixJQUFNLElBQU0sUUFFM0RrTyxRQUFTLFdBQ0wsTUFBTyxnQkFBbUMsSUFBakJuVSxLQUFLaUcsUUFBZ0IsSUFBTSxJQUFNLFFBRTlEbU8sU0FBVSxXQUNOLE1BQU8sY0FBaUMsSUFBakJwVSxLQUFLaUcsUUFBZ0IsSUFBTSxJQUFNLFFBRTVEb08sUUFBUyxXQUNMLE1BQU8sY0FBaUMsSUFBakJyVSxLQUFLaUcsUUFBZ0IsSUFBTSxJQUFNLFFBRTVEcU8sU0FBVSxXQUNOLE1BQ0ksMEJBQ2tCLElBQWpCdFUsS0FBS2lHLFFBQWdCLElBQU0sSUFDNUIsUUFHUnNPLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFNBQ0hxYixHQUFJLFVBQ0ovTixFQUFHLGFBQ0hnTyxHQUFJLGFBQ0o5TyxFQUFHLFNBQ0grTyxHQUFJLFdBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixXQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQTNHeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtTQUFTK0MsRUFBb0IxeUQsRUFBUWlpQixFQUFlL3BCLEVBQUtvdkIsR0FDckQsSUFBSTVzQixFQUFTLENBQ1RoQyxFQUFHLENBQUMsZUFBZ0IsY0FBZSxpQkFDbkN5WixHQUFJLENBQUNuUyxFQUFTLFVBQVdBLEVBQVMsWUFDbENqSixFQUFHLENBQUMsYUFBYyxhQUNsQnFiLEdBQUksQ0FBQ3BTLEVBQVMsVUFBV0EsRUFBUyxZQUNsQ2lELEVBQUcsQ0FBQyxZQUFhLFlBQWEsWUFDOUJvUCxHQUFJLENBQUNyUyxFQUFTLFNBQVVBLEVBQVMsVUFDakMvSSxFQUFHLENBQUMsWUFBYSxZQUNqQndNLEVBQUcsQ0FBQyxVQUFXLFdBQVksV0FDM0IrTyxHQUFJLENBQUN4UyxFQUFTLE9BQVFBLEVBQVMsU0FDL0I2RSxFQUFHLENBQUMsWUFBYSxRQUFTLGFBQzFCNE4sR0FBSSxDQUFDelMsRUFBUyxTQUFVQSxFQUFTLFlBRXJDLE9BQUlpaUIsRUFDT3ZuQixFQUFPeEMsR0FBSyxHQUFLd0MsRUFBT3hDLEdBQUssR0FBS3dDLEVBQU94QyxHQUFLLEdBRWxEb3ZCLEVBQVc1c0IsRUFBT3hDLEdBQUssR0FBS3dDLEVBQU94QyxHQUFLLEdBRzFDeTNELEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSw2RkFBNkYrSCxNQUNqRyxLQUVKTCxZQUNJLDZEQUE2REssTUFBTSxLQUN2RWhKLFNBQ0ksaUVBQWlFZ0osTUFDN0QsS0FFUmdELGNBQWUsZ0JBQWdCaEQsTUFBTSxLQUNyQytDLFlBQWEsZ0JBQWdCL0MsTUFBTSxLQUNuQzFKLGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxhQUNUQyxRQUFTLGNBQ1RDLFNBQVUscUJBQ1ZDLFFBQVMsYUFDVEMsU0FBVSxvQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsWUFDUkMsS0FBTSxZQUNOeFosRUFBR2c2RCxFQUNIdmdELEdBQUl1Z0QsRUFDSjM3RCxFQUFHMjdELEVBQ0h0Z0QsR0FBSXNnRCxFQUNKenZELEVBQUd5dkQsRUFDSHJnRCxHQUFJcWdELEVBQ0p6N0QsRUFBR3k3RCxFQUNIcGdELEdBQUksV0FDSjdPLEVBQUdpdkQsRUFDSGxnRCxHQUFJa2dELEVBQ0o3dEQsRUFBRzZ0RCxFQUNIamdELEdBQUlpZ0QsR0FFUjNnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0EzRXlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSwrRkFBK0YrSCxNQUNuRyxLQUVKTCxZQUNJLDhEQUE4REssTUFDMUQsS0FFUitsRCxrQkFBa0IsRUFDbEIvdUQsU0FDSSxzRUFBc0VnSixNQUNsRSxLQUVSZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSwwQkFDSkMsSUFBSyxnQ0FDTEMsS0FBTSxzQ0FDTmxiLEVBQUcsV0FDSDA3RCxHQUFJLG9CQUNKQyxJQUFLLDBCQUNMQyxLQUFNLGdDQUVWdGhELFNBQVUsQ0FDTkMsUUFBUyxrQkFDVEMsUUFBUyxtQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxrQkFDVEMsU0FBVSwwQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxXQUNOeFosRUFBRyxpQkFDSHlaLEdBQUksYUFDSnBiLEVBQUcsYUFDSHFiLEdBQUksWUFDSm5QLEVBQUcsV0FDSG9QLEdBQUksVUFDSnBiLEVBQUcsV0FDSHFiLEdBQUksVUFDSjdPLEVBQUcsZUFDSCtPLEdBQUksY0FDSjNOLEVBQUcsV0FDSDROLEdBQUksV0FFUlYsdUJBQXdCLFlBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBL0R5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlDLEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIaFYsRUFBRyxJQUNIQyxFQUFHLElBQ0hnVixFQUFHLEtBRVBDLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pWLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSx3RUFBd0UrSCxNQUM1RSxLQUVKTCxZQUNJLHdFQUF3RUssTUFDcEUsS0FFUmhKLFNBQ0kscURBQW9FZ0osTUFDaEUsS0FFUmdELGNBQ0kscURBQW9FaEQsTUFDaEUsS0FFUitDLFlBQWEsZ0JBQWdCL0MsTUFBTSxLQUNuQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlksY0FBZSx3QkFDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBTyxhQUFhZ0osS0FBS2hKLElBRTdCNkMsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sR0FDQSxhQUVBLGNBR2YrTixTQUFVLENBQ05DLFFBQVMsa0JBQ1RDLFFBQVMsaUJBQ1RDLFNBQVUsaUJBQ1ZDLFFBQVMsa0JBQ1RDLFNBQVUsdUJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsWUFDSHlaLEdBQUksV0FDSnBiLEVBQUcsV0FDSHFiLEdBQUksV0FDSm5QLEVBQUcsVUFDSG9QLEdBQUksVUFDSnBiLEVBQUcsU0FDSHFiLEdBQUksU0FDSjdPLEVBQUcsU0FDSCtPLEdBQUksU0FDSjNOLEVBQUcsU0FDSDROLEdBQUksVUFFUnNHLFNBQVUsU0FBVWxELEdBQ2hCLE9BQU9BLEVBQ0ZwVSxRQUFRLFVBQVUsU0FBVUQsR0FDekIsT0FBTzZ1RCxFQUFVN3VELE1BRXBCQyxRQUFRLEtBQU0sTUFFdkJ1Z0IsV0FBWSxTQUFVbk0sR0FDbEIsT0FBT0EsRUFDRnBVLFFBQVEsT0FBTyxTQUFVRCxHQUN0QixPQUFPb3VELEVBQVVwdUQsTUFFcEJDLFFBQVEsS0FBTSxNQUV2QnNRLHVCQUF3QixXQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxNQS9HeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJd0QsRUFDSSx3RUFBd0UxbkQsTUFDcEUsS0FFUjJuRCxFQUFnQixDQUNaLFFBQ0EsUUFDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0FELEVBQVksR0FDWkEsRUFBWSxHQUNaQSxFQUFZLElBRXBCLFNBQVNkLEVBQVVyeUQsRUFBUWlpQixFQUFlL3BCLEVBQUtvdkIsR0FDM0MsSUFBSTNRLEVBQVMsR0FDYixPQUFRemUsR0FDSixJQUFLLElBQ0QsT0FBT292QixFQUFXLG9CQUFzQixrQkFDNUMsSUFBSyxLQUNEM1EsRUFBUzJRLEVBQVcsV0FBYSxXQUNqQyxNQUNKLElBQUssSUFDRCxPQUFPQSxFQUFXLFdBQWEsV0FDbkMsSUFBSyxLQUNEM1EsRUFBUzJRLEVBQVcsV0FBYSxZQUNqQyxNQUNKLElBQUssSUFDRCxPQUFPQSxFQUFXLFNBQVcsUUFDakMsSUFBSyxLQUNEM1EsRUFBUzJRLEVBQVcsU0FBVyxTQUMvQixNQUNKLElBQUssSUFDRCxPQUFPQSxFQUFXLFNBQVcsUUFDakMsSUFBSyxLQUNEM1EsRUFBUzJRLEVBQVcsU0FBVyxTQUMvQixNQUNKLElBQUssSUFDRCxPQUFPQSxFQUFXLFlBQWMsV0FDcEMsSUFBSyxLQUNEM1EsRUFBUzJRLEVBQVcsWUFBYyxZQUNsQyxNQUNKLElBQUssSUFDRCxPQUFPQSxFQUFXLFNBQVcsUUFDakMsSUFBSyxLQUNEM1EsRUFBUzJRLEVBQVcsU0FBVyxTQUl2QyxPQURBM1EsRUFHSixTQUFzQjNXLEVBQVFzbkIsR0FDMUIsT0FBT3RuQixFQUFTLEdBQ1ZzbkIsRUFDSThyQyxFQUFjcHpELEdBQ2RtekQsRUFBWW56RCxHQUNoQkEsRUFSR3F6RCxDQUFhcnpELEVBQVFzbkIsR0FBWSxJQUFNM1EsRUFXM0NnNUMsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLDJHQUEyRytILE1BQy9HLEtBRUpMLFlBQ0ksdUVBQXVFSyxNQUNuRSxLQUVSaEosU0FDSSxxRUFBcUVnSixNQUNqRSxLQUVSZ0QsY0FBZSx1QkFBdUJoRCxNQUFNLEtBQzVDK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksbUJBQ0pDLElBQUssZ0NBQ0xDLEtBQU0sc0NBQ05sYixFQUFHLFdBQ0gwN0QsR0FBSSxjQUNKQyxJQUFLLDJCQUNMQyxLQUFNLGlDQUVWdGhELFNBQVUsQ0FDTkMsUUFBUyxvQkFDVEMsUUFBUyxzQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxtQkFDVEMsU0FBVSw0QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsWUFDUkMsS0FBTSxZQUNOeFosRUFBRzI1RCxFQUNIbGdELEdBQUlrZ0QsRUFDSnQ3RCxFQUFHczdELEVBQ0hqZ0QsR0FBSWlnRCxFQUNKcHZELEVBQUdvdkQsRUFDSGhnRCxHQUFJZ2dELEVBQ0pwN0QsRUFBR283RCxFQUNILy9DLEdBQUkrL0MsRUFDSjV1RCxFQUFHNHVELEVBQ0g3L0MsR0FBSTYvQyxFQUNKeHRELEVBQUd3dEQsRUFDSDUvQyxHQUFJNC9DLEdBRVJ0Z0QsdUJBQXdCLFlBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBMUh5QnVlLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSWZBO0VBQU9qOEMsYUFBYSxNQUFPLENBQ2pDaFEsT0FBUSwwRkFBMEYrSCxNQUM5RixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUseURBQXlEZ0osTUFDL0QsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsd0JBQXdCL0MsTUFBTSxLQUMzQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxZQUNIQyxHQUFJLGVBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxvQkFDVEMsUUFBUyxnQkFDVEMsU0FBVSwwQkFDVkMsUUFBUyxlQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxnQkFDUkMsS0FBTSxtQkFDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLGVBQ0hxYixHQUFJLFlBQ0puUCxFQUFHLGFBQ0hvUCxHQUFJLFVBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLGNBQ0grTyxHQUFJLFdBQ0ozTixFQUFHLGFBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixVQUN4QjlRLFFBQVMsU0FBVWpCLEdBQ2YsT0FBT0EsR0FFWHlFLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXZEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHFGQUFxRitILE1BQ3pGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FDSSw0RUFBNEVnSixNQUN4RSxLQUVSZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSw0QkFFVlosU0FBVSxDQUNOQyxRQUFTLGlCQUNUQyxRQUFTLG9CQUNUQyxTQUFVLGdCQUNWQyxRQUFTLGtCQUNUQyxTQUFVLHdCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFlBQ054WixFQUFHLFlBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLGVBQ0hxYixHQUFJLGNBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLFdBQ0o3TyxFQUFHLGNBQ0grTyxHQUFJLGFBQ0ozTixFQUFHLFVBQ0g0TixHQUFJLFNBRVJWLHVCQUF3QixZQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXREeUJ1ZSxDQUFRLEVBQVEsSyxpQkNFbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUlJcmtELEVBQ0kseUtBQ0pDLEVBQWMsQ0FDVixTQUNBLFNBQ0EsU0FDQSxRQUNBLFFBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxRQUNBLFFBQ0EsU0FHQ29rRCxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsdUZBQXVGK0gsTUFDM0YsS0FFSkwsWUFDSSxpRUFBaUVLLE1BQzdELEtBRVJILFlBQWFBLEVBQ2JELGlCQUFrQkMsRUFDbEIwbUQsa0JBOUJJLDJGQStCSkMsdUJBN0JJLG9GQThCSjFtRCxZQUFhQSxFQUNiMm1ELGdCQUFpQjNtRCxFQUNqQjRtRCxpQkFBa0I1bUQsRUFDbEI5SSxTQUFVLHNEQUFzRGdKLE1BQU0sS0FDdEVnRCxjQUFlLHFDQUFxQ2hELE1BQU0sS0FDMUQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxxQkFDVEMsUUFBUyxnQkFDVEMsU0FBVSxjQUNWQyxRQUFTLGNBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sWUFDTnhaLEVBQUcsb0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFlBQ0hvUCxHQUFJLFlBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFdBQ0ovTixFQUFHLGNBQ0hnTyxHQUFJLGNBQ0o5TyxFQUFHLFVBQ0grTyxHQUFJLFVBQ0ozTixFQUFHLFFBQ0g0TixHQUFJLFVBRVJWLHVCQUF3QixlQUN4QjlRLFFBQVMsU0FBVWpCLEVBQVFrZCxHQUN2QixPQUFRQSxHQUlKLElBQUssSUFDRCxPQUFPbGQsR0FBcUIsSUFBWEEsRUFBZSxLQUFPLElBRzNDLFFBQ0EsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0wsSUFBSyxJQUNELE9BQU9BLEdBQXFCLElBQVhBLEVBQWUsS0FBTyxLQUczQyxJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU9BLEdBQXFCLElBQVhBLEVBQWUsS0FBTyxPQUduRHlFLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQTFHeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsdUZBQXVGK0gsTUFDM0YsS0FFSkwsWUFDSSxpRUFBaUVLLE1BQzdELEtBRVIrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsc0RBQXNEZ0osTUFBTSxLQUN0RWdELGNBQWUscUNBQXFDaEQsTUFBTSxLQUMxRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLHFCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGNBQ1ZDLFFBQVMsY0FDVEMsU0FBVSxzQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxZQUNOeFosRUFBRyxvQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcsYUFDSHFiLEdBQUksYUFDSm5QLEVBQUcsWUFDSG9QLEdBQUksWUFDSnBiLEVBQUcsVUFDSHFiLEdBQUksV0FDSjdPLEVBQUcsVUFDSCtPLEdBQUksVUFDSjNOLEVBQUcsUUFDSDROLEdBQUksVUFFUlYsdUJBQXdCLGdCQUN4QjlRLFFBQVMsU0FBVWpCLEVBQVFrZCxHQUN2QixPQUFRQSxHQUVKLFFBQ0EsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNMLElBQUssSUFDRCxPQUFPbGQsR0FBcUIsSUFBWEEsRUFBZSxLQUFPLEtBRzNDLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsR0FBcUIsSUFBWEEsRUFBZSxLQUFPLFNBbkVqQmtzQixDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsdUZBQXVGK0gsTUFDM0YsS0FFSkwsWUFDSSxpRUFBaUVLLE1BQzdELEtBRVIrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsc0RBQXNEZ0osTUFBTSxLQUN0RWdELGNBQWUscUNBQXFDaEQsTUFBTSxLQUMxRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLHFCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGNBQ1ZDLFFBQVMsY0FDVEMsU0FBVSxzQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxZQUNOeFosRUFBRyxvQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcsYUFDSHFiLEdBQUksYUFDSm5QLEVBQUcsWUFDSG9QLEdBQUksWUFDSnBiLEVBQUcsVUFDSHFiLEdBQUksV0FDSjdPLEVBQUcsVUFDSCtPLEdBQUksVUFDSjNOLEVBQUcsUUFDSDROLEdBQUksVUFFUlYsdUJBQXdCLGdCQUN4QjlRLFFBQVMsU0FBVWpCLEVBQVFrZCxHQUN2QixPQUFRQSxHQUVKLFFBQ0EsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNMLElBQUssSUFDRCxPQUFPbGQsR0FBcUIsSUFBWEEsRUFBZSxLQUFPLEtBRzNDLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsR0FBcUIsSUFBWEEsRUFBZSxLQUFPLE9BR25EeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBeEV5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUkyRCxFQUNJLDZEQUE2RDduRCxNQUFNLEtBQ3ZFOG5ELEVBQ0ksa0RBQWtEOW5ELE1BQU0sS0FFdkRra0QsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLGlHQUFpRytILE1BQ3JHLEtBRUpMLFlBQWEsU0FBVXJVLEVBQUcyRCxHQUN0QixPQUFLM0QsRUFFTSxRQUFRa0wsS0FBS3ZILEdBQ2I2NEQsRUFBdUJ4OEQsRUFBRTRNLFNBRXpCMnZELEVBQW9CdjhELEVBQUU0TSxTQUp0QjJ2RCxHQU9mOUIsa0JBQWtCLEVBQ2xCL3VELFNBQVUsd0RBQXdEZ0osTUFDOUQsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsaUJBQ1RDLFNBQVUsd0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsbUJBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFdBQ0o3TyxFQUFHLGFBQ0grTyxHQUFJLGFBQ0ozTixFQUFHLFdBQ0g0TixHQUFJLGNBRVJWLHVCQUF3QixrQkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLE9BQ0lBLEdBQ1ksSUFBWEEsR0FBMkIsSUFBWEEsR0FBZ0JBLEdBQVUsR0FBSyxNQUFRLE9BR2hFeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBekV5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBNENoQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQXpDUyxDQUNMLFNBQ0EsVUFDQSxRQUNBLFVBQ0EsWUFDQSxZQUNBLE9BQ0EsU0FDQSxlQUNBLG1CQUNBLFVBQ0EsV0E4QkowSCxZQTVCYyxDQUNWLE1BQ0EsUUFDQSxPQUNBLE1BQ0EsT0FDQSxRQUNBLE9BQ0EsTUFDQSxPQUNBLE9BQ0EsT0FDQSxRQWlCSm9tRCxrQkFBa0IsRUFDbEIvdUQsU0FoQlcsQ0FDUCxlQUNBLFdBQ0EsV0FDQSxjQUNBLFlBQ0EsWUFDQSxlQVVKZ00sY0FSZ0IsQ0FBQyxPQUFRLE9BQVEsUUFBUyxPQUFRLE9BQVEsUUFBUyxRQVNuRUQsWUFSYyxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxJQUFLLE1BU2xEek0sZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLGtCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZUFDVEMsU0FBVSwyQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsT0FDUkMsS0FBTSxZQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksYUFDSnBiLEVBQUcsVUFDSHFiLEdBQUksYUFDSm5QLEVBQUcsaUJBQ0hvUCxHQUFJLG9CQUNKcGIsRUFBRyxLQUNIcWIsR0FBSSxRQUNKN08sRUFBRyxLQUNIK08sR0FBSSxZQUNKM04sRUFBRyxTQUNINE4sR0FBSSxhQUVSVix1QkFBd0IsbUJBQ3hCOVEsUUFBUyxTQUFVakIsR0FFZixPQUFPQSxHQURpQixJQUFYQSxFQUFlLElBQU1BLEVBQVMsSUFBTyxFQUFJLEtBQU8sT0FHakV5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0E3RnlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0E0Q2hCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BekNTLENBQ0wsZ0JBQ0EsYUFDQSxVQUNBLGFBQ0EsYUFDQSxlQUNBLGNBQ0EsY0FDQSxlQUNBLGFBQ0EsZUFDQSxnQkE4QkowSCxZQTVCYyxDQUNWLE9BQ0EsT0FDQSxPQUNBLE9BQ0EsT0FDQSxPQUNBLE9BQ0EsTUFDQSxPQUNBLE9BQ0EsT0FDQSxRQWlCSm9tRCxrQkFBa0IsRUFDbEIvdUQsU0FoQlcsQ0FDUCxjQUNBLFVBQ0EsVUFDQSxZQUNBLFlBQ0EsV0FDQSxlQVVKZ00sY0FSZ0IsQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQVMzREQsWUFSYyxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BU25Eek0sZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLG9CQUNUQyxRQUFTLHNCQUNUQyxTQUFVLGdCQUNWQyxRQUFTLGlCQUNUQyxTQUFVLDZCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLGdCQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksWUFDSnBiLEVBQUcsVUFDSHFiLEdBQUksZ0JBQ0puUCxFQUFHLE9BQ0hvUCxHQUFJLGFBQ0pwYixFQUFHLFFBQ0hxYixHQUFJLFdBQ0o3TyxFQUFHLE9BQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFdBQ0g0TixHQUFJLGVBRVJWLHVCQUF3QixtQkFDeEI5USxRQUFTLFNBQVVqQixHQUVmLE9BQU9BLEdBRGlCLElBQVhBLEVBQWUsSUFBTUEsRUFBUyxJQUFPLEVBQUksS0FBTyxPQUdqRXlFLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQTdGeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHlGQUF5RitILE1BQzdGLEtBRUpMLFlBQ0ksOERBQThESyxNQUMxRCxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUFVLG1EQUFtRGdKLE1BQU0sS0FDbkVnRCxjQUFlLHFDQUFxQ2hELE1BQU0sS0FDMUQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxhQUNIQyxHQUFJLHdCQUNKQyxJQUFLLDZCQUNMQyxLQUFNLG9DQUVWWixTQUFVLENBQ05DLFFBQVMsV0FDTCxNQUFPLFVBQTZCLElBQWpCbFUsS0FBS2lHLFFBQWdCLEtBQU8sS0FBTyxRQUUxRGtPLFFBQVMsV0FDTCxNQUFPLFVBQTZCLElBQWpCblUsS0FBS2lHLFFBQWdCLEtBQU8sS0FBTyxRQUUxRG1PLFNBQVUsV0FDTixNQUFPLFVBQTZCLElBQWpCcFUsS0FBS2lHLFFBQWdCLEtBQU8sS0FBTyxRQUUxRG9PLFFBQVMsV0FDTCxNQUFPLFVBQTZCLElBQWpCclUsS0FBS2lHLFFBQWdCLElBQU0sS0FBTyxRQUV6RHFPLFNBQVUsV0FDTixNQUNJLHFCQUF3QyxJQUFqQnRVLEtBQUtpRyxRQUFnQixLQUFPLEtBQU8sUUFHbEVzTyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUFVNmIsR0FDZCxPQUEwQixJQUF0QkEsRUFBSWhsQixRQUFRLE1BQ0wsSUFBTWdsQixFQUVWLE1BQVFBLEdBRW5CNWIsS0FBTSxTQUNOeFosRUFBRyxlQUNIeVosR0FBSSxjQUNKcGIsRUFBRyxZQUNIcWIsR0FBSSxhQUNKblAsRUFBRyxZQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxVQUNKN08sRUFBRyxTQUNIK08sR0FBSSxXQUNKM04sRUFBRyxTQUNINE4sR0FBSSxXQUVSVix1QkFBd0IsV0FDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0F6RXlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7U0FBUytDLEVBQW9CMXlELEVBQVFpaUIsRUFBZS9wQixFQUFLb3ZCLEdBQ3JELElBQUk1c0IsRUFBUyxDQUNUaEMsRUFBRyxDQUFDLGtCQUFtQixjQUN2QnlaLEdBQUksQ0FBQ25TLEVBQVMsYUFBY0EsRUFBUyxVQUNyQ2pKLEVBQUcsQ0FBQyxhQUFjLFlBQ2xCcWIsR0FBSSxDQUFDcFMsRUFBUyxZQUFhQSxFQUFTLFdBQ3BDaUQsRUFBRyxDQUFDLFdBQVksU0FDaEJvUCxHQUFJLENBQUNyUyxFQUFTLFVBQVdBLEVBQVMsU0FDbEMvSSxFQUFHLENBQUMsWUFBYSxVQUNqQnFiLEdBQUksQ0FBQ3RTLEVBQVMsV0FBWUEsRUFBUyxRQUNuQ3lELEVBQUcsQ0FBQyxnQkFBaUIsYUFDckIrTyxHQUFJLENBQUN4UyxFQUFTLGNBQWVBLEVBQVMsV0FDdEM2RSxFQUFHLENBQUMsYUFBYyxXQUNsQjROLEdBQUksQ0FBQ3pTLEVBQVMsWUFBYUEsRUFBUyxZQUV4QyxPQUFPc25CLEVBQVc1c0IsRUFBT3hDLEdBQUssR0FBS3dDLEVBQU94QyxHQUFLLEdBR3JDeTNELEVBQU9qOEMsYUFBYSxXQUFZLENBQzFDaFEsT0FBUSxDQUNKMnRELFdBQ0ksd0ZBQXdGNWxELE1BQ3BGLEtBRVIvUSxPQUFRLG1KQUFtSitRLE1BQ3ZKLEtBRUprYyxTQUFVLG1CQUVkdmMsWUFDSSw0RUFBNEVLLE1BQ3hFLEtBRVIrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUscURBQXFEZ0osTUFBTSxLQUNyRWdELGNBQWUsNENBQTRDaEQsTUFBTSxLQUNqRStDLFlBQWEsd0JBQXdCL0MsTUFBTSxLQUMzQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksa0JBQ0pELElBQUsscUJBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDhCQUNMQyxLQUFNLHVDQUNOMGdELEtBQU0sb0NBRVZ0aEQsU0FBVSxDQUNOQyxRQUFTLFdBQ1RDLFFBQVMsZUFDVEMsU0FBVSxxQkFDVkMsUUFBUyxXQUNUQyxTQUFVLHFCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxLQUNSQyxLQUFNLFVBQ054WixFQUFHZzZELEVBQ0h2Z0QsR0FBSXVnRCxFQUNKMzdELEVBQUcyN0QsRUFDSHRnRCxHQUFJc2dELEVBQ0p6dkQsRUFBR3l2RCxFQUNIcmdELEdBQUlxZ0QsRUFDSno3RCxFQUFHeTdELEVBQ0hwZ0QsR0FBSW9nRCxFQUNKanZELEVBQUdpdkQsRUFDSGxnRCxHQUFJa2dELEVBQ0o3dEQsRUFBRzZ0RCxFQUNIamdELEdBQUlpZ0QsR0FFUjNnRCx1QkFBd0IsZUFDeEI5USxRQUFTLFNBQVVqQixFQUFRa2QsR0FDdkIsT0FBUUEsR0FFSixJQUFLLElBQ0QsT0FBT2xkLEVBQVMsTUFDcEIsUUFDQSxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssTUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDRCxPQUFPQSxJQUduQnlFLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxHQUVUK0UsY0FBZSw0QkFDZmlHLGFBQWMsU0FBVXhWLEVBQU1ySCxHQUkxQixPQUhhLEtBQVRxSCxJQUNBQSxFQUFPLEdBRU0sU0FBYnJILEVBQ09xSCxFQUFPLEVBQUlBLEVBQU9BLEVBQU8sR0FDWixXQUFickgsRUFDQXFILEVBQ2EsWUFBYnJILEVBQ0FxSCxFQUFPLEdBQUtBLEVBQU9BLEVBQU8sR0FDYixVQUFickgsRUFDQXFILEVBQU8sUUFEWCxHQUlYckgsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sRUFDQSxPQUNBQSxFQUFPLEdBQ1AsU0FDQUEsRUFBTyxHQUNQLFVBQ0FBLEVBQU8sR0FDUCxRQUVBLFVBM0htQitvQixDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtTQUFTK0MsRUFBb0IxeUQsRUFBUWlpQixFQUFlL3BCLEVBQUtvdkIsR0FDckQsSUFBSTVzQixFQUFTLENBQ1RoQyxFQUFHLENBQUMscUJBQXNCLGlCQUMxQnlaLEdBQUksQ0FBQ25TLEVBQVMsY0FBZUEsRUFBUyxXQUN0Q2pKLEVBQUcsQ0FBQyxhQUFjLFlBQ2xCcWIsR0FBSSxDQUFDcFMsRUFBUyxZQUFhQSxFQUFTLFdBQ3BDaUQsRUFBRyxDQUFDLFlBQWEsVUFDakJvUCxHQUFJLENBQUNyUyxFQUFTLFdBQVlBLEVBQVMsVUFDbkMvSSxFQUFHLENBQUMsWUFBYSxVQUNqQnFiLEdBQUksQ0FBQ3RTLEVBQVMsV0FBWUEsRUFBUyxRQUNuQ3lELEVBQUcsQ0FBQyxlQUFnQixhQUNwQitPLEdBQUksQ0FBQ3hTLEVBQVMsY0FBZUEsRUFBUyxXQUN0QzZFLEVBQUcsQ0FBQyxhQUFjLFlBQ2xCNE4sR0FBSSxDQUFDelMsRUFBUyxZQUFhQSxFQUFTLFlBRXhDLE9BQU9zbkIsRUFBVzVzQixFQUFPeEMsR0FBSyxHQUFLd0MsRUFBT3hDLEdBQUssR0FHckN5M0QsRUFBT2o4QyxhQUFhLFdBQVksQ0FDMUNoUSxPQUFRLENBQ0oydEQsV0FDSSw0RUFBNEU1bEQsTUFDeEUsS0FFUi9RLE9BQVEsd0lBQXdJK1EsTUFDNUksS0FFSmtjLFNBQVUsbUJBRWR2YyxZQUNJLDREQUE0REssTUFBTSxLQUN0RStsRCxrQkFBa0IsRUFDbEIvdUQsU0FBVSx1REFBdURnSixNQUFNLEtBQ3ZFZ0QsY0FBZSxxQ0FBcUNoRCxNQUFNLEtBQzFEK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxpQkFDSkQsSUFBSyxvQkFDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssNkJBQ0xDLEtBQU0sc0NBQ04wZ0QsS0FBTSxtQ0FFVnRoRCxTQUFVLENBQ05DLFFBQVMsV0FDVEMsUUFBUyxjQUNUQyxTQUFVLHNCQUNWQyxRQUFTLFdBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLEtBQ1JDLEtBQU0sVUFDTnhaLEVBQUdnNkQsRUFDSHZnRCxHQUFJdWdELEVBQ0ozN0QsRUFBRzI3RCxFQUNIdGdELEdBQUlzZ0QsRUFDSnp2RCxFQUFHeXZELEVBQ0hyZ0QsR0FBSXFnRCxFQUNKejdELEVBQUd5N0QsRUFDSHBnRCxHQUFJb2dELEVBQ0pqdkQsRUFBR2l2RCxFQUNIbGdELEdBQUlrZ0QsRUFDSjd0RCxFQUFHNnRELEVBQ0hqZ0QsR0FBSWlnRCxHQUVSM2dELHVCQUF3QixjQUN4QjlRLFFBQVMsU0FBVWpCLEVBQVFrZCxHQUN2QixPQUFRQSxHQUVKLElBQUssSUFDRCxPQUFPbGQsRUFBUyxLQUNwQixRQUNBLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU9BLElBR25CeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEdBRVQrRSxjQUFlLCtCQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxTQUFickgsRUFDT3FILEVBQU8sRUFBSUEsRUFBT0EsRUFBTyxHQUNaLGFBQWJySCxFQUNBcUgsRUFDYSxhQUFickgsRUFDQXFILEVBQU8sR0FBS0EsRUFBT0EsRUFBTyxHQUNiLFVBQWJySCxFQUNBcUgsRUFBTyxRQURYLEdBSVhySCxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxFQUNBLE9BQ0FBLEVBQU8sR0FDUCxXQUNBQSxFQUFPLEdBQ1AsV0FDQUEsRUFBTyxHQUNQLFFBRUEsVUF6SG1CK29CLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlDLEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIaFYsRUFBRyxJQUNIQyxFQUFHLElBQ0hnVixFQUFHLEtBRVBDLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pWLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSx5RkFBeUYrSCxNQUM3RixLQUVKTCxZQUNJLHlFQUF5RUssTUFDckUsS0FFUitsRCxrQkFBa0IsRUFDbEIvdUQsU0FBVSx3REFBd0RnSixNQUM5RCxLQUVKZ0QsY0FBZSxtQ0FBbUNoRCxNQUFNLEtBQ3hEK0MsWUFBYSxxQkFBcUIvQyxNQUFNLEtBQ3hDMUosZUFBZ0IsQ0FDWjJQLEdBQUksZ0JBQ0pELElBQUssbUJBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDZCQUNMQyxLQUFNLG9DQUVWWixTQUFVLENBQ05DLFFBQVMsVUFDVEMsUUFBUyxZQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsY0FDVEMsU0FBVSxtQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxXQUNOeFosRUFBRyxXQUNIeVosR0FBSSxXQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxVQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxVQUNKN08sRUFBRyxXQUNIK08sR0FBSSxXQUNKM04sRUFBRyxVQUNINE4sR0FBSSxXQUVSc0csU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFBT3BVLFFBQVEsaUJBQWlCLFNBQVVELEdBQzdDLE9BQU82dUQsRUFBVTd1RCxPQUd6QndnQixXQUFZLFNBQVVuTSxHQUNsQixPQUFPQSxFQUFPcFUsUUFBUSxPQUFPLFNBQVVELEdBQ25DLE9BQU9vdUQsRUFBVXB1RCxPQUt6QmtSLGNBQWUscUJBQ2ZpRyxhQUFjLFNBQVV4VixFQUFNckgsR0FJMUIsT0FIYSxLQUFUcUgsSUFDQUEsRUFBTyxHQUVNLFFBQWJySCxFQUNPcUgsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osU0FBYnJILEVBQ0FxSCxFQUNhLFNBQWJySCxFQUNBcUgsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsU0FBYnJILEVBQ0FxSCxFQUFPLFFBRFgsR0FJWHJILFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEVBQ0EsTUFDQUEsRUFBTyxHQUNQLE9BQ0FBLEVBQU8sR0FDUCxPQUNBQSxFQUFPLEdBQ1AsT0FFQSxPQUdmc0IsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBeEh5QnVlLENBQVEsRUFBUSxLLGlCQ0tsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsMEVBQTBFK0gsTUFDOUUsS0FFSkwsWUFDSSw0REFBNERLLE1BQU0sS0FDdEVoSixTQUFVLHVDQUF1Q2dKLE1BQU0sS0FDdkRnRCxjQUFlLHVCQUF1QmhELE1BQU0sS0FDNUMrQyxZQUFhLGdCQUFnQi9DLE1BQU0sS0FDbkMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxpQkFDSkMsSUFBSyx1QkFDTEMsS0FBTSw2QkFDTmxiLEVBQUcsV0FDSDA3RCxHQUFJLGFBQ0pDLElBQUssbUJBQ0xDLEtBQU0seUJBRVZ0aEQsU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsYUFDVEMsU0FBVSxpQkFDVkMsUUFBUyxlQUNUQyxTQUFVLCtCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxVQUNSQyxLQUFNLFVBQ054WixFQUFHLGFBQ0h5WixHQUFJLFdBQ0pwYixFQUFHLE1BQ0hxYixHQUFJLFVBQ0puUCxFQUFHLE1BQ0hvUCxHQUFJLFNBQVVyUyxHQUNWLE9BQWUsSUFBWEEsRUFDTyxTQUVKQSxFQUFTLFNBRXBCL0ksRUFBRyxNQUNIcWIsR0FBSSxTQUFVdFMsR0FDVixPQUFlLElBQVhBLEVBQ08sU0FFSkEsRUFBUyxTQUVwQnlELEVBQUcsT0FDSCtPLEdBQUksU0FBVXhTLEdBQ1YsT0FBZSxJQUFYQSxFQUNPLFVBRUpBLEVBQVMsV0FFcEI2RSxFQUFHLE1BQ0g0TixHQUFJLFNBQVV6UyxHQUNWLE9BQWUsSUFBWEEsRUFDTyxTQUNBQSxFQUFTLElBQU8sR0FBZ0IsS0FBWEEsRUFDckJBLEVBQVMsT0FFYkEsRUFBUyxVQUd4QjBTLGNBQ0ksZ0VBQ0poQyxLQUFNLFNBQVV6WCxHQUNaLE1BQU8sOEJBQThCZ0osS0FBS2hKLElBRTlDNkMsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sRUFDQSxhQUNBQSxFQUFPLEdBQ1AsUUFDQUEsRUFBTyxHQUNQbWxCLEVBQVUsU0FBVyxlQUNyQm5sQixFQUFPLEdBQ1BtbEIsRUFBVSxRQUFVLGVBRXBCLFVBekZtQjRELENBQVEsRUFBUSxLLGlCQ0NsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlDLEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIaFYsRUFBRyxJQUNIQyxFQUFHLElBQ0hnVixFQUFHLEtBRVBDLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBRVQ5a0QsRUFBYyxDQUNWLE9BQ0EsV0FDQSxVQUNBLFVBQ0EsT0FDQSxRQUNBLFFBQ0EsT0FDQSxhQUNBLFVBQ0EsV0FDQSxjQWlCQ29rRCxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsQ0FDSmhKLE9BQVEsOEVBQThFK1EsTUFDbEYsS0FFSjRsRCxXQUNJLDBFQUEwRTVsRCxNQUN0RSxNQUdaTCxZQUNJLDZEQUE2REssTUFBTSxLQUN2RWhKLFNBQVUsdURBQXVEZ0osTUFBTSxLQUN2RWdELGNBQWUsa0NBQWtDaEQsTUFBTSxLQUN2RCtDLFlBQWEscUJBQXFCL0MsTUFBTSxLQUN4QzFKLGVBQWdCLENBQ1oyUCxHQUFJLGFBQ0pELElBQUssZ0JBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDBCQUNMQyxLQUFNLGlDQUdWdkcsWUFBYUEsRUFDYjJtRCxnQkFBaUIzbUQsRUFDakI0bUQsaUJBekNtQixDQUNmLE9BQ0EsUUFDQSxVQUNBLFVBQ0EsT0FDQSxRQUNBLFFBQ0EsT0FDQSxRQUNBLFVBQ0EsT0FDQSxTQStCSjdtRCxZQUNJLCtLQUVKRCxpQkFDSSwrS0FFSjJtRCxrQkFDSSx1SUFFSkMsdUJBQ0ksc0ZBRUovZ0QsU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsU0FBVSxXQUNWQyxRQUFTLFVBQ1RDLFNBQVUsbUJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sVUFDTnhaLEVBQUcsY0FDSHlaLEdBQUksV0FDSnBiLEVBQUcsVUFDSHFiLEdBQUksVUFDSm5QLEVBQUcsVUFDSG9QLEdBQUksVUFDSnBiLEVBQUcsU0FDSHFiLEdBQUksU0FDSjdPLEVBQUcsV0FDSCtPLEdBQUksV0FDSjNOLEVBQUcsVUFDSDROLEdBQUksV0FFUnNHLFNBQVUsU0FBVWxELEdBQ2hCLE9BQU9BLEVBQU9wVSxRQUFRLGlCQUFpQixTQUFVRCxHQUM3QyxPQUFPNnVELEVBQVU3dUQsT0FHekJ3Z0IsV0FBWSxTQUFVbk0sR0FDbEIsT0FBT0EsRUFBT3BVLFFBQVEsT0FBTyxTQUFVRCxHQUNuQyxPQUFPb3VELEVBQVVwdUQsT0FLekJrUixjQUFlLHFCQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxRQUFickgsRUFDT3FILEVBQU8sRUFBSUEsRUFBT0EsRUFBTyxHQUNaLFNBQWJySCxFQUNBcUgsRUFDYSxVQUFickgsRUFDQXFILEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFFBQWJySCxFQUNBcUgsRUFBTyxRQURYLEdBSVhySCxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxFQUNBLE1BQ0FBLEVBQU8sR0FDUCxPQUNBQSxFQUFPLEdBQ1AsUUFDQUEsRUFBTyxHQUNQLE1BRUEsT0FHZnNCLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXRLeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtTQUFTMEMsRUFBVXJ5RCxFQUFRaWlCLEVBQWUvcEIsR0FDdEMsSUFBSXllLEVBQVMzVyxFQUFTLElBQ3RCLE9BQVE5SCxHQUNKLElBQUssS0FRRCxPQU5JeWUsR0FEVyxJQUFYM1csRUFDVSxVQUNRLElBQVhBLEdBQTJCLElBQVhBLEdBQTJCLElBQVhBLEVBQzdCLFVBRUEsVUFHbEIsSUFBSyxJQUNELE9BQU9paUIsRUFBZ0IsZUFBaUIsZUFDNUMsSUFBSyxLQVFELE9BTkl0TCxHQURXLElBQVgzVyxFQUNVLFNBQ1EsSUFBWEEsR0FBMkIsSUFBWEEsR0FBMkIsSUFBWEEsRUFDN0IsU0FFQSxTQUdsQixJQUFLLElBQ0QsT0FBT2lpQixFQUFnQixZQUFjLGNBQ3pDLElBQUssS0FRRCxPQU5JdEwsR0FEVyxJQUFYM1csRUFDVSxNQUNRLElBQVhBLEdBQTJCLElBQVhBLEdBQTJCLElBQVhBLEVBQzdCLE9BRUEsT0FHbEIsSUFBSyxLQU1ELE9BSkkyVyxHQURXLElBQVgzVyxFQUNVLE1BRUEsT0FHbEIsSUFBSyxLQVFELE9BTkkyVyxHQURXLElBQVgzVyxFQUNVLFNBQ1EsSUFBWEEsR0FBMkIsSUFBWEEsR0FBMkIsSUFBWEEsRUFDN0IsVUFFQSxVQUdsQixJQUFLLEtBUUQsT0FOSTJXLEdBRFcsSUFBWDNXLEVBQ1UsU0FDUSxJQUFYQSxHQUEyQixJQUFYQSxHQUEyQixJQUFYQSxFQUM3QixTQUVBLFVBTWpCMnZELEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxDQUNKaEosT0FBUSxvR0FBb0crUSxNQUN4RyxLQUVKNGxELFdBQ0ksZ0dBQWdHNWxELE1BQzVGLE1BR1pMLFlBQ0ksK0RBQStESyxNQUMzRCxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUFVLDREQUE0RGdKLE1BQ2xFLEtBRUpnRCxjQUFlLHFDQUFxQ2hELE1BQU0sS0FDMUQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRcFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sd0JBQ1gsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNELE1BQU8sc0JBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sb0JBR25CK08sUUFBUyxlQUNUQyxTQUFVLFdBQ04sT0FBUXRVLEtBQUtzRixPQUNULEtBQUssRUFDRCxNQUFPLDZCQUNYLEtBQUssRUFDRCxNQUFPLDRCQUNYLEtBQUssRUFDRCxNQUFPLDJCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLHlCQUduQmlQLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sV0FDTnhaLEVBQUcsY0FDSHlaLEdBQUlrZ0QsRUFDSnQ3RCxFQUFHczdELEVBQ0hqZ0QsR0FBSWlnRCxFQUNKcHZELEVBQUdvdkQsRUFDSGhnRCxHQUFJZ2dELEVBQ0pwN0QsRUFBRyxNQUNIcWIsR0FBSSsvQyxFQUNKNXVELEVBQUcsU0FDSCtPLEdBQUk2L0MsRUFDSnh0RCxFQUFHLFNBQ0g0TixHQUFJNC9DLEdBRVJ0Z0QsdUJBQXdCLFlBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBMUp5QnVlLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUk2RCxFQUNBLGdFQUFnRS9uRCxNQUFNLEtBQzFFLFNBQVM0bUQsRUFBVXJ5RCxFQUFRaWlCLEVBQWUvcEIsRUFBS292QixHQUMzQyxJQUFJc3ZCLEVBQU01MkMsRUFDVixPQUFROUgsR0FDSixJQUFLLElBQ0QsT0FBT292QixHQUFZckYsRUFDYixtQkFDQSxvQkFDVixJQUFLLEtBQ0QsT0FBTzIwQixHQUFPdHZCLEdBQVlyRixHQUNwQixhQUNBLGNBQ1YsSUFBSyxJQUNELE1BQU8sT0FBU3FGLEdBQVlyRixFQUFnQixRQUFVLFVBQzFELElBQUssS0FDRCxPQUFPMjBCLEdBQU90dkIsR0FBWXJGLEVBQWdCLFFBQVUsVUFDeEQsSUFBSyxJQUNELE1BQU8sT0FBU3FGLEdBQVlyRixFQUFnQixPQUFTLFVBQ3pELElBQUssS0FDRCxPQUFPMjBCLEdBQU90dkIsR0FBWXJGLEVBQWdCLE9BQVMsVUFDdkQsSUFBSyxJQUNELE1BQU8sT0FBU3FGLEdBQVlyRixFQUFnQixPQUFTLFVBQ3pELElBQUssS0FDRCxPQUFPMjBCLEdBQU90dkIsR0FBWXJGLEVBQWdCLE9BQVMsVUFDdkQsSUFBSyxJQUNELE1BQU8sT0FBU3FGLEdBQVlyRixFQUFnQixTQUFXLFlBQzNELElBQUssS0FDRCxPQUFPMjBCLEdBQU90dkIsR0FBWXJGLEVBQWdCLFNBQVcsWUFDekQsSUFBSyxJQUNELE1BQU8sT0FBU3FGLEdBQVlyRixFQUFnQixNQUFRLFFBQ3hELElBQUssS0FDRCxPQUFPMjBCLEdBQU90dkIsR0FBWXJGLEVBQWdCLE1BQVEsUUFFMUQsTUFBTyxHQUVYLFNBQVN4ZCxFQUFLNmlCLEdBQ1YsT0FDS0EsRUFBVyxHQUFLLFdBQ2pCLElBQ0Frc0MsRUFBWXYyRCxLQUFLc0YsT0FDakIsYUFJQ290RCxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsb0dBQW9HK0gsTUFDeEcsS0FFSkwsWUFDSSxpRUFBaUVLLE1BQzdELEtBRVIrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsc0RBQXNEZ0osTUFBTSxLQUN0RWdELGNBQWUsZ0NBQWdDaEQsTUFBTSxLQUNyRCtDLFlBQWEscUJBQXFCL0MsTUFBTSxLQUN4QzFKLGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxjQUNIQyxHQUFJLGdCQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWWSxjQUFlLFNBQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQXlDLE1BQWxDQSxFQUFNb3ZCLE9BQU8sR0FBR25qQixlQUUzQnBKLFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBSXBsQixFQUFRLElBQ1csSUFBWm9sQixFQUFtQixLQUFPLE1BRWQsSUFBWkEsRUFBbUIsS0FBTyxNQUd6Q3BYLFNBQVUsQ0FDTkMsUUFBUyxnQkFDVEMsUUFBUyxvQkFDVEMsU0FBVSxXQUNOLE9BQU81TSxFQUFLM04sS0FBS21HLE1BQU0sSUFFM0JxVSxRQUFTLG9CQUNUQyxTQUFVLFdBQ04sT0FBTzlNLEVBQUszTixLQUFLbUcsTUFBTSxJQUUzQnVVLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sS0FDTnhaLEVBQUcyNUQsRUFDSGxnRCxHQUFJa2dELEVBQ0p0N0QsRUFBR3M3RCxFQUNIamdELEdBQUlpZ0QsRUFDSnB2RCxFQUFHb3ZELEVBQ0hoZ0QsR0FBSWdnRCxFQUNKcDdELEVBQUdvN0QsRUFDSC8vQyxHQUFJKy9DLEVBQ0o1dUQsRUFBRzR1RCxFQUNINy9DLEdBQUk2L0MsRUFDSnh0RCxFQUFHd3RELEVBQ0g1L0MsR0FBSTQvQyxHQUVSdGdELHVCQUF3QixZQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQW5IeUJ1ZSxDQUFRLEVBQVEsSyxpQkNFbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsQ0FDSmhKLE9BQVEsNEdBQTRHK1EsTUFDaEgsS0FFSjRsRCxXQUNJLGdHQUFnRzVsRCxNQUM1RixNQUdaTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQ0ksZ0VBQWdFZ0osTUFDNUQsS0FFUmdELGNBQWUsK0JBQStCaEQsTUFBTSxLQUNwRCtDLFlBQWEsK0JBQStCL0MsTUFBTSxLQUNsRDFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGlCQUNKQyxJQUFLLHdCQUNMQyxLQUFNLCtCQUVWWixTQUFVLENBQ05DLFFBQVMsYUFDVEMsUUFBUyxZQUNURSxRQUFTLFlBQ1RELFNBQVUsV0FDTixNQUFPLHNCQUVYRSxTQUFVLFdBQ04sTUFBTyw4QkFFWEMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxVQUNOeFosRUFBRyxtQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcsT0FDSHFiLEdBQUksVUFDSm5QLEVBQUcsTUFDSG9QLEdBQUksU0FDSnBiLEVBQUcsS0FDSHFiLEdBQUksUUFDSjdPLEVBQUcsT0FDSCtPLEdBQUksVUFDSjNOLEVBQUcsT0FDSDROLEdBQUksV0FFUkMsY0FBZSxvQ0FDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBTyx1QkFBdUJnSixLQUFLaEosSUFFdkM2QyxTQUFVLFNBQVVxSCxHQUNoQixPQUFJQSxFQUFPLEVBQ0EsVUFDQUEsRUFBTyxHQUNQLFdBQ0FBLEVBQU8sR0FDUCxVQUVBLFlBR2Y0Tyx1QkFBd0IsMEJBQ3hCOVEsUUFBUyxTQUFVakIsRUFBUWtkLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxNQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxPQUNELE9BQWUsSUFBWGxkLEVBQ09BLEVBQVMsTUFFYkEsRUFBUyxNQUNwQixRQUNJLE9BQU9BLElBR25CeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBNUZ5QnVlLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEseUZBQXlGK0gsTUFDN0YsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUFVLDZDQUE2Q2dKLE1BQU0sS0FDN0RnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDRCQUNMQyxLQUFNLG1DQUVWWSxjQUFlLHdCQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxTQUFickgsRUFDT3FILEVBQ2EsVUFBYnJILEVBQ0FxSCxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxTQUFickgsR0FBb0MsVUFBYkEsRUFDdkJxSCxFQUFPLFFBRFgsR0FJWHJILFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBSXBsQixFQUFRLEdBQ0QsT0FDQUEsRUFBUSxHQUNSLFFBQ0FBLEVBQVEsR0FDUixPQUVBLFNBR2ZnTyxTQUFVLENBQ05DLFFBQVMsc0JBQ1RDLFFBQVMsbUJBQ1RDLFNBQVUsa0JBQ1ZDLFFBQVMscUJBQ1RDLFNBQVUsdUJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sZUFDTnhaLEVBQUcsaUJBQ0h5WixHQUFJLFdBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFdBQ0puUCxFQUFHLFFBQ0hvUCxHQUFJLFNBQ0pwYixFQUFHLFNBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFdBQ0ozTixFQUFHLFVBQ0g0TixHQUFJLFlBRVJoTyxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0F6RXlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJekI7U0FBUzhDLEVBQU9yNkQsR0FDWixPQUFJQSxFQUFJLEtBQVEsSUFFTEEsRUFBSSxJQUFPLEVBSzFCLFNBQVNpNkQsRUFBVXJ5RCxFQUFRaWlCLEVBQWUvcEIsRUFBS292QixHQUMzQyxJQUFJM1EsRUFBUzNXLEVBQVMsSUFDdEIsT0FBUTlILEdBQ0osSUFBSyxJQUNELE9BQU8rcEIsR0FBaUJxRixFQUNsQixtQkFDQSxtQkFDVixJQUFLLEtBQ0QsT0FBSW1yQyxFQUFPenlELEdBRUgyVyxHQUNDc0wsR0FBaUJxRixFQUFXLFdBQWEsWUFHM0MzUSxFQUFTLFVBQ3BCLElBQUssSUFDRCxPQUFPc0wsRUFBZ0IsU0FBVyxTQUN0QyxJQUFLLEtBQ0QsT0FBSXd3QyxFQUFPenlELEdBRUgyVyxHQUFVc0wsR0FBaUJxRixFQUFXLFVBQVksV0FFL0NyRixFQUNBdEwsRUFBUyxTQUViQSxFQUFTLFNBQ3BCLElBQUssS0FDRCxPQUFJODdDLEVBQU96eUQsR0FFSDJXLEdBQ0NzTCxHQUFpQnFGLEVBQ1osZ0JBQ0EsaUJBR1AzUSxFQUFTLGNBQ3BCLElBQUssSUFDRCxPQUFJc0wsRUFDTyxRQUVKcUYsRUFBVyxNQUFRLE9BQzlCLElBQUssS0FDRCxPQUFJbXJDLEVBQU96eUQsR0FDSGlpQixFQUNPdEwsRUFBUyxRQUViQSxHQUFVMlEsRUFBVyxPQUFTLFNBQzlCckYsRUFDQXRMLEVBQVMsUUFFYkEsR0FBVTJRLEVBQVcsTUFBUSxRQUN4QyxJQUFLLElBQ0QsT0FBSXJGLEVBQ08sVUFFSnFGLEVBQVcsUUFBVSxTQUNoQyxJQUFLLEtBQ0QsT0FBSW1yQyxFQUFPenlELEdBQ0hpaUIsRUFDT3RMLEVBQVMsVUFFYkEsR0FBVTJRLEVBQVcsU0FBVyxXQUNoQ3JGLEVBQ0F0TCxFQUFTLFVBRWJBLEdBQVUyUSxFQUFXLFFBQVUsVUFDMUMsSUFBSyxJQUNELE9BQU9yRixHQUFpQnFGLEVBQVcsS0FBTyxNQUM5QyxJQUFLLEtBQ0QsT0FBSW1yQyxFQUFPenlELEdBQ0EyVyxHQUFVc0wsR0FBaUJxRixFQUFXLEtBQU8sUUFFakQzUSxHQUFVc0wsR0FBaUJxRixFQUFXLEtBQU8sUUFJdkRxb0MsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLG9GQUFvRitILE1BQ3hGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FDSSxtRkFBbUZnSixNQUMvRSxLQUVSZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksT0FDSkQsSUFBSyxVQUNMRSxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSywwQkFDTEMsS0FBTSxpQ0FFVlosU0FBVSxDQUNOQyxRQUFTLGlCQUNUQyxRQUFTLG9CQUNUQyxTQUFVLGdCQUNWQyxRQUFTLGlCQUNUQyxTQUFVLDBCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxXQUNSQyxLQUFNLGlCQUNOeFosRUFBRzI1RCxFQUNIbGdELEdBQUlrZ0QsRUFDSnQ3RCxFQUFHczdELEVBQ0hqZ0QsR0FBSWlnRCxFQUNKcHZELEVBQUcsY0FDSG9QLEdBQUlnZ0QsRUFDSnA3RCxFQUFHbzdELEVBQ0gvL0MsR0FBSSsvQyxFQUNKNXVELEVBQUc0dUQsRUFDSDcvQyxHQUFJNi9DLEVBQ0p4dEQsRUFBR3d0RCxFQUNINS9DLEdBQUk0L0MsR0FFUnRnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0ExSXlCdWUsQ0FBUSxFQUFRLEssaUJDS2xELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxnR0FBZ0crSCxNQUNwRyxLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUsMkRBQTJEZ0osTUFDakUsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxXQUNMLE1BQ0ksV0FDQ2xVLEtBQUtpRyxRQUFVLEVBQUksT0FBMEIsSUFBakJqRyxLQUFLaUcsUUFBZ0IsSUFBTSxPQUN4RCxPQUdSa08sUUFBUyxXQUNMLE1BQ0ksYUFDQ25VLEtBQUtpRyxRQUFVLEVBQUksT0FBMEIsSUFBakJqRyxLQUFLaUcsUUFBZ0IsSUFBTSxPQUN4RCxPQUdSbU8sU0FBVSxXQUNOLE1BQ0ksV0FDQ3BVLEtBQUtpRyxRQUFVLEVBQUksT0FBMEIsSUFBakJqRyxLQUFLaUcsUUFBZ0IsSUFBTSxPQUN4RCxPQUdSb08sUUFBUyxXQUNMLE1BQ0ksV0FDQ3JVLEtBQUtpRyxRQUFVLEVBQUksT0FBMEIsSUFBakJqRyxLQUFLaUcsUUFBZ0IsSUFBTSxPQUN4RCxPQUdScU8sU0FBVSxXQUNOLE9BQVF0VSxLQUFLc0YsT0FDVCxLQUFLLEVBQ0QsTUFDSSx1QkFDQ3RGLEtBQUtpRyxRQUFVLEVBQ1YsT0FDaUIsSUFBakJqRyxLQUFLaUcsUUFDSCxJQUNBLE9BQ1IsTUFFUixRQUNJLE1BQ0ksdUJBQ0NqRyxLQUFLaUcsUUFBVSxFQUNWLE9BQ2lCLElBQWpCakcsS0FBS2lHLFFBQ0gsSUFDQSxPQUNSLFFBSWhCc08sU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxRQUNOeFosRUFBRyxpQkFDSHlaLEdBQUksYUFDSnBiLEVBQUcsWUFDSHFiLEdBQUksWUFDSm5QLEVBQUcsU0FDSG9QLEdBQUksU0FDSnBiLEVBQUcsWUFDSHFiLEdBQUksWUFDSi9OLEVBQUcsZ0JBQ0hnTyxHQUFJLGVBQ0o5TyxFQUFHLFVBQ0grTyxHQUFJLFVBQ0ozTixFQUFHLFVBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixXQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXRHeUJ1ZSxDQUFRLEVBQVEsSyxpQkNDbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsZ0dBQWdHK0gsTUFDcEcsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUFVLDJEQUEyRGdKLE1BQ2pFLEtBRUpnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWixTQUFVLENBQ05DLFFBQVMsaUJBQ1RDLFFBQVMsbUJBQ1RDLFNBQVUsaUJBQ1ZDLFFBQVMsaUJBQ1RDLFNBQVUsV0FDTixPQUFRdFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sNkJBQ1gsUUFDSSxNQUFPLCtCQUduQmlQLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFNBQVV2WixHQUNkLE9BQVEsWUFBWXVKLEtBQUt2SixHQUFLLE1BQVEsTUFBUSxJQUFNQSxHQUV4RHdaLEtBQU0sUUFDTnhaLEVBQUcsaUJBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLFlBQ0puUCxFQUFHLFNBQ0hvUCxHQUFJLFNBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLFlBQ0o3TyxFQUFHLFVBQ0grTyxHQUFJLFVBQ0ozTixFQUFHLFVBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixXQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQTlEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JpTSxLQUFNLENBQ0YsQ0FDSTBFLE1BQU8sYUFDUGxKLE9BQVEsRUFDUmprQixLQUFNLEtBQ04wb0IsT0FBUSxJQUNSak0sS0FBTSxLQUVWLENBQ0kwUSxNQUFPLGFBQ1BDLE1BQU8sYUFDUG5KLE9BQVEsRUFDUmprQixLQUFNLEtBQ04wb0IsT0FBUSxJQUNSak0sS0FBTSxLQUVWLENBQ0kwUSxNQUFPLGFBQ1BDLE1BQU8sYUFDUG5KLE9BQVEsRUFDUmprQixLQUFNLEtBQ04wb0IsT0FBUSxJQUNSak0sS0FBTSxLQUVWLENBQ0kwUSxNQUFPLGFBQ1BDLE1BQU8sYUFDUG5KLE9BQVEsRUFDUmprQixLQUFNLEtBQ04wb0IsT0FBUSxJQUNSak0sS0FBTSxLQUVWLENBQ0kwUSxNQUFPLGFBQ1BDLE1BQU8sYUFDUG5KLE9BQVEsRUFDUmprQixLQUFNLEtBQ04wb0IsT0FBUSxJQUNSak0sS0FBTSxLQUVWLENBQ0kwUSxNQUFPLGFBQ1BDLE1BQU8sYUFDUG5KLE9BQVEsRUFDUmprQixLQUFNLEtBQ04wb0IsT0FBUSxLQUNSak0sS0FBTSxNQUVWLENBQ0kwUSxNQUFPLGFBQ1BDLE9BQU8sSUFDUG5KLE9BQVEsRUFDUmprQixLQUFNLE1BQ04wb0IsT0FBUSxLQUNSak0sS0FBTSxPQUdkOC9DLG9CQUFxQixXQUNyQi95QyxvQkFBcUIsU0FBVXpuQixFQUFPdUksR0FDbEMsTUFBb0IsTUFBYkEsRUFBTSxHQUFhLEVBQUlxSCxTQUFTckgsRUFBTSxJQUFNdkksRUFBTyxLQUU5RHlLLE9BQVEseUNBQXlDK0gsTUFBTSxLQUN2REwsWUFBYSx5Q0FBeUNLLE1BQ2xELEtBRUpoSixTQUFVLDhCQUE4QmdKLE1BQU0sS0FDOUNnRCxjQUFlLGdCQUFnQmhELE1BQU0sS0FDckMrQyxZQUFhLGdCQUFnQi9DLE1BQU0sS0FDbkMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxZQUNKQyxJQUFLLGtCQUNMQyxLQUFNLHVCQUNObGIsRUFBRyxhQUNIMDdELEdBQUksWUFDSkMsSUFBSyxrQkFDTEMsS0FBTSx3QkFFVjkvQyxjQUFlLFNBQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQWlCLE9BQVZBLEdBRVg2QyxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxHQUNBLEtBRUEsTUFHZitOLFNBQVUsQ0FDTkMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFNBQVUsU0FBVXFHLEdBQ2hCLE9BQUlBLEVBQUlqVCxTQUFXeEgsS0FBS3dILE9BQ2IsY0FFQSxXQUdmNk0sUUFBUyxVQUNUQyxTQUFVLFNBQVVtRyxHQUNoQixPQUFJemEsS0FBS3dILFNBQVdpVCxFQUFJalQsT0FDYixjQUVBLFdBR2YrTSxTQUFVLEtBRWRPLHVCQUF3QixXQUN4QjlRLFFBQVMsU0FBVWpCLEVBQVFrZCxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDRCxPQUFrQixJQUFYbGQsRUFBZSxLQUFPQSxFQUFTLElBQzFDLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU9BLEVBQVMsSUFDcEIsUUFDSSxPQUFPQSxJQUduQmdTLGFBQWMsQ0FDVkMsT0FBUSxNQUNSQyxLQUFNLE1BQ054WixFQUFHLEtBQ0h5WixHQUFJLE1BQ0pwYixFQUFHLEtBQ0hxYixHQUFJLE1BQ0puUCxFQUFHLE1BQ0hvUCxHQUFJLE9BQ0pwYixFQUFHLEtBQ0hxYixHQUFJLE1BQ0o3TyxFQUFHLE1BQ0grTyxHQUFJLE9BQ0ozTixFQUFHLEtBQ0g0TixHQUFJLFNBbEowQnlaLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEseUZBQXlGK0gsTUFDN0YsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUFVLCtDQUErQ2dKLE1BQU0sS0FDL0RnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDRCQUNMQyxLQUFNLG1DQUVWWSxjQUFlLDZCQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxXQUFickgsRUFDT3FILEVBQ2EsV0FBYnJILEVBQ0FxSCxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxXQUFickgsR0FBc0MsVUFBYkEsRUFDekJxSCxFQUFPLFFBRFgsR0FJWHJILFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBSXBsQixFQUFRLEdBQ0QsU0FDQUEsRUFBUSxHQUNSLFNBQ0FBLEVBQVEsR0FDUixTQUVBLFNBR2ZnTyxTQUFVLENBQ05DLFFBQVMsMkJBQ1RDLFFBQVMsc0JBQ1RDLFNBQVUsa0JBQ1ZDLFFBQVMsd0JBQ1RDLFNBQVUsNEJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLGdCQUNSQyxLQUFNLHVCQUNOeFosRUFBRyxrQkFDSHlaLEdBQUksV0FDSnBiLEVBQUcsa0JBQ0hxYixHQUFJLFdBQ0puUCxFQUFHLGdCQUNIb1AsR0FBSSxTQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxZQUNKN08sRUFBRyxVQUNIK08sR0FBSSxXQUNKM04sRUFBRyxTQUNINE4sR0FBSSxXQUVSaE8sS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBekV5QnVlLENBQVEsRUFBUSxLLGlCQ0VsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEscUdBQXFHK0gsTUFDekcsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUFVLENBQ040dUQsV0FDSSxnRUFBZ0U1bEQsTUFDNUQsS0FFUi9RLE9BQVEsaUVBQWlFK1EsTUFDckUsS0FFSmtjLFNBQVUsaUJBRWRsWixjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWixTQUFVLENBQ05DLFFBQVMsaUJBQ1RDLFFBQVMsaUJBQ1RFLFFBQVMsa0JBQ1RELFNBQVUsd0JBQ1ZFLFNBQVUsb0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFNBQVV2WixHQUNkLE9BQU9BLEVBQUUrSSxRQUNMLGlDQUNBLFNBQVUydEQsRUFBSXNFLEVBQUlDLEdBQ2QsTUFBYyxNQUFQQSxFQUFhRCxFQUFLLEtBQU9BLEVBQUtDLEVBQUssU0FJdER6aEQsS0FBTSxTQUFVeFosR0FDWixNQUFJLDRCQUE0QnVKLEtBQUt2SixHQUMxQkEsRUFBRStJLFFBQVEsU0FBVSxVQUUzQixPQUFPUSxLQUFLdkosR0FDTEEsRUFBRStJLFFBQVEsUUFBUyxZQUV2Qi9JLEdBRVhBLEVBQUcsaUJBQ0h5WixHQUFJLFVBQ0pwYixFQUFHLE9BQ0hxYixHQUFJLFVBQ0puUCxFQUFHLFFBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLE1BQ0hxYixHQUFJLFNBQ0o3TyxFQUFHLE1BQ0grTyxHQUFJLFNBQ0ozTixFQUFHLE9BQ0g0TixHQUFJLFdBRVJWLHVCQUF3Qiw4QkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLE9BQWUsSUFBWEEsRUFDT0EsRUFFSSxJQUFYQSxFQUNPQSxFQUFTLE1BR2hCQSxFQUFTLElBQ1JBLEdBQVUsS0FBT0EsRUFBUyxJQUFPLEdBQ2xDQSxFQUFTLEtBQVEsRUFFVixNQUFRQSxFQUVaQSxFQUFTLE1BRXBCeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBMUZ5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUllLEVBQVcsQ0FDWE4sRUFBRyxNQUNIUCxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hoVixFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsR0FBSSxNQUNKd1YsR0FBSSxNQUNKRyxHQUFJLE1BQ0o0QyxHQUFJLE1BQ0o5QyxHQUFJLE1BQ0pHLEdBQUksTUFDSk4sR0FBSSxNQUNKQyxHQUFJLE1BQ0pNLEdBQUksTUFDSkgsSUFBSyxPQUdBcEIsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHFGQUFxRitILE1BQ3pGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSwwREFBMERnSixNQUNoRSxLQUVKZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLG1CQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGtCQUNWQyxRQUFTLGtCQUNUQyxTQUFVLGtDQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLFdBQ054WixFQUFHLGlCQUNIeVosR0FBSSxZQUNKcGIsRUFBRyxZQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxZQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxTQUNIK08sR0FBSSxRQUNKM04sRUFBRyxVQUNINE4sR0FBSSxVQUVSVix1QkFBd0Isa0JBQ3hCOVEsUUFBUyxTQUFVakIsR0FHZixPQUFPQSxHQUFVMHdELEVBQVMxd0QsSUFBVzB3RCxFQUY3QjF3RCxFQUFTLEtBRW1DMHdELEVBRDVDMXdELEdBQVUsSUFBTSxJQUFNLFFBR2xDeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBaEZ5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlDLEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIaFYsRUFBRyxJQUNIQyxFQUFHLElBQ0hnVixFQUFHLEtBRVBDLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pWLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSx5RUFBeUUrSCxNQUM3RSxLQUVKTCxZQUNJLHlFQUF5RUssTUFDckUsS0FFUmhKLFNBQVUsaURBQWlEZ0osTUFBTSxLQUNqRWdELGNBQWUsb0JBQW9CaEQsTUFBTSxLQUN6QytDLFlBQWEsb0JBQW9CL0MsTUFBTSxLQUN2Q2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlksY0FBZSxjQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUFpQixVQUFWQSxHQUVYNkMsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sR0FDQSxRQUVBLFNBR2YrTixTQUFVLENBQ05DLFFBQVMsb0JBQ1RDLFFBQVMsa0JBQ1RDLFNBQVUsaUJBQ1ZDLFFBQVMscUJBQ1RDLFNBQVUsOEJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sUUFDTnhaLEVBQUcsaUJBQ0h5WixHQUFJLFlBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFVBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFVBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFFBQ0grTyxHQUFJLFFBQ0ozTixFQUFHLFdBQ0g0TixHQUFJLFlBRVJWLHVCQUF3QixZQUN4QjlRLFFBQVMsT0FDVDhYLFNBQVUsU0FBVWxELEdBQ2hCLE9BQU9BLEVBQU9wVSxRQUFRLGlCQUFpQixTQUFVRCxHQUM3QyxPQUFPNnVELEVBQVU3dUQsT0FHekJ3Z0IsV0FBWSxTQUFVbk0sR0FDbEIsT0FBT0EsRUFBT3BVLFFBQVEsT0FBTyxTQUFVRCxHQUNuQyxPQUFPb3VELEVBQVVwdUQsT0FHekJpRCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FyR3lCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSUMsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hoVixFQUFHLElBQ0hDLEVBQUcsSUFDSGdWLEVBQUcsS0FFUEMsRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHSlYsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLDZGQUE2RitILE1BQ2pHLEtBRUpMLFlBQ0ksMkVBQTJFSyxNQUN2RSxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUFVLDBEQUEwRGdKLE1BQ2hFLEtBRUpnRCxjQUFlLHFDQUFxQ2hELE1BQU0sS0FDMUQrQyxZQUFhLHdCQUF3Qi9DLE1BQU0sS0FDM0MxSixlQUFnQixDQUNaMlAsR0FBSSxTQUNKRCxJQUFLLFlBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHNCQUNMQyxLQUFNLDZCQUVWWixTQUFVLENBQ05DLFFBQVMsWUFDVEMsUUFBUyxZQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsY0FDVEMsU0FBVSxvQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxXQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksZ0JBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLFdBQ0puUCxFQUFHLFlBQ0hvUCxHQUFJLFVBQ0pwYixFQUFHLFdBQ0hxYixHQUFJLFNBQ0o3TyxFQUFHLGNBQ0grTyxHQUFJLFlBQ0ozTixFQUFHLFlBQ0g0TixHQUFJLFdBRVJzRyxTQUFVLFNBQVVsRCxHQUNoQixPQUFPQSxFQUFPcFUsUUFBUSxpQkFBaUIsU0FBVUQsR0FDN0MsT0FBTzZ1RCxFQUFVN3VELE9BR3pCd2dCLFdBQVksU0FBVW5NLEdBQ2xCLE9BQU9BLEVBQU9wVSxRQUFRLE9BQU8sU0FBVUQsR0FDbkMsT0FBT291RCxFQUFVcHVELE9BR3pCa1IsY0FBZSxnQ0FDZmlHLGFBQWMsU0FBVXhWLEVBQU1ySCxHQUkxQixPQUhhLEtBQVRxSCxJQUNBQSxFQUFPLEdBRU0sV0FBYnJILEVBQ09xSCxFQUFPLEVBQUlBLEVBQU9BLEVBQU8sR0FDWixhQUFickgsRUFDQXFILEVBQ2EsYUFBYnJILEVBQ0FxSCxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxTQUFickgsRUFDQXFILEVBQU8sUUFEWCxHQUlYckgsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sRUFDQSxTQUNBQSxFQUFPLEdBQ1AsV0FDQUEsRUFBTyxHQUNQLFdBQ0FBLEVBQU8sR0FDUCxPQUVBLFVBR2Y0Tyx1QkFBd0IsZUFDeEI5USxRQUFTLFNBQVVqQixHQUNmLE9BQU9BLEVBQVMsT0FFcEJ5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0ExSHlCdWUsQ0FBUSxFQUFRLEssaUJDSWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSx5Q0FBeUMrSCxNQUFNLEtBQ3ZETCxZQUFhLHlDQUF5Q0ssTUFDbEQsS0FFSmhKLFNBQVUsOEJBQThCZ0osTUFBTSxLQUM5Q2dELGNBQWUsZ0JBQWdCaEQsTUFBTSxLQUNyQytDLFlBQWEsZ0JBQWdCL0MsTUFBTSxLQUNuQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFNBQ0pELElBQUssWUFDTEUsRUFBRyxjQUNIQyxHQUFJLGdCQUNKQyxJQUFLLHVCQUNMQyxLQUFNLDRCQUNObGIsRUFBRyxjQUNIMDdELEdBQUksZ0JBQ0pDLElBQUssdUJBQ0xDLEtBQU0sNkJBRVZ0aEQsU0FBVSxDQUNOQyxRQUFTLFFBQ1RDLFFBQVMsUUFDVEMsU0FBVSxVQUNWQyxRQUFTLFFBQ1RDLFNBQVUsY0FDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsT0FDUkMsS0FBTSxPQUNOeFosRUFBRyxNQUNIeVosR0FBSSxNQUNKcGIsRUFBRyxLQUNIcWIsR0FBSSxNQUNKblAsRUFBRyxPQUNIb1AsR0FBSSxPQUNKcGIsRUFBRyxLQUNIcWIsR0FBSSxNQUNKN08sRUFBRyxNQUNIK08sR0FBSSxNQUNKM04sRUFBRyxNQUNINE4sR0FBSSxPQUVSVix1QkFBd0IsaUJBQ3hCOVEsUUFBUyxTQUFVakIsRUFBUWtkLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0QsT0FBT2xkLEVBQVMsSUFDcEIsSUFBSyxJQUNELE9BQU9BLEVBQVMsSUFDcEIsSUFBSyxJQUNMLElBQUssSUFDRCxPQUFPQSxFQUFTLElBQ3BCLFFBQ0ksT0FBT0EsSUFHbkIwUyxjQUFlLFFBQ2ZoQyxLQUFNLFNBQVUzUCxHQUNaLE1BQWlCLE9BQVZBLEdBRVhqRixTQUFVLFNBQVVxSCxFQUFNSyxFQUFRcXdELEdBQzlCLE9BQU8xd0QsRUFBTyxHQUFLLEtBQU8sUUF4RUkrb0IsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSUMsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hoVixFQUFHLElBQ0hDLEVBQUcsSUFDSGdWLEVBQUcsS0FFUEMsRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FFVDNzRCxFQUFTLENBQ0wsZUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFdBQ0EsU0FDQSxNQUNBLFVBQ0EsZUFDQSxlQUNBLGdCQUdDaXNELEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUUEsRUFDUjBILFlBQWExSCxFQUNiakIsU0FDSSwwRUFBMEVnSixNQUN0RSxLQUVSZ0QsY0FDSSwyREFBMkRoRCxNQUFNLEtBQ3JFK0MsWUFBYSxnQkFBZ0IvQyxNQUFNLEtBQ25DZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWSxjQUFlLGtCQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUFPLFVBQVVnSixLQUFLaEosSUFFMUI2QyxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxHQUNBLFVBRUEsV0FHZitOLFNBQVUsQ0FDTkMsUUFBUyxzQkFDVEMsUUFBUyx1QkFDVEMsU0FBVSxvQkFDVkMsUUFBUyxxQkFDVEMsU0FBVSxvQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxLQUNOeFosRUFBRyxrQkFDSHlaLEdBQUksV0FDSnBiLEVBQUcsY0FDSHFiLEdBQUksWUFDSm5QLEVBQUcsZUFDSG9QLEdBQUksYUFDSnBiLEVBQUcsV0FDSHFiLEdBQUksU0FDSjdPLEVBQUcsWUFDSCtPLEdBQUksVUFDSjNOLEVBQUcsV0FDSDROLEdBQUksVUFFUnNHLFNBQVUsU0FBVWxELEdBQ2hCLE9BQU9BLEVBQ0ZwVSxRQUFRLGlCQUFpQixTQUFVRCxHQUNoQyxPQUFPNnVELEVBQVU3dUQsTUFFcEJDLFFBQVEsS0FBTSxNQUV2QnVnQixXQUFZLFNBQVVuTSxHQUNsQixPQUFPQSxFQUNGcFUsUUFBUSxPQUFPLFNBQVVELEdBQ3RCLE9BQU9vdUQsRUFBVXB1RCxNQUVwQkMsUUFBUSxLQUFNLE1BRXZCZ0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLE1BcEh5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO1NBQVMrQyxFQUFvQjliLEVBQUszMEIsRUFBZS9wQixFQUFLb3ZCLEdBQ2xELElBQUk1c0IsRUFBUyxDQUNUaEMsRUFBRyxDQUFDLGNBQWUsa0JBQ25CeVosR0FBSSxDQUFDeWtDLEVBQU0sVUFBV0EsRUFBTSxjQUM1QjcvQyxFQUFHLENBQUMsWUFBYSxjQUNqQnFiLEdBQUksQ0FBQ3drQyxFQUFNLFVBQVdBLEVBQU0sY0FDNUIzekMsRUFBRyxDQUFDLFNBQVUsV0FDZG9QLEdBQUksQ0FBQ3VrQyxFQUFNLFFBQVNBLEVBQU0sV0FDMUIzL0MsRUFBRyxDQUFDLFFBQVMsVUFDYnFiLEdBQUksQ0FBQ3NrQyxFQUFNLE9BQVFBLEVBQU0sVUFDekJyeUMsRUFBRyxDQUFDLFdBQVksYUFDaEJnTyxHQUFJLENBQUNxa0MsRUFBTSxTQUFVQSxFQUFNLGFBQzNCbnpDLEVBQUcsQ0FBQyxRQUFTLFVBQ2IrTyxHQUFJLENBQUNva0MsRUFBTSxPQUFRQSxFQUFNLFVBQ3pCL3hDLEVBQUcsQ0FBQyxRQUFTLFVBQ2I0TixHQUFJLENBQUNta0MsRUFBTSxPQUFRQSxFQUFNLFdBRTdCLE9BQU8zMEIsRUFBZ0J2bkIsRUFBT3hDLEdBQUssR0FBS3dDLEVBQU94QyxHQUFLLEdBc0I1Q3kzRCxFQUFPajhDLGFBQWEsU0FBVSxDQUl0Q2hRLE9BQVEsb0ZBQW9GK0gsTUFDeEYsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckUrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsNENBQTRDZ0osTUFBTSxLQUM1RGdELGNBQWUsMkJBQTJCaEQsTUFBTSxLQUNoRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzNQLFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBSXBsQixFQUFRLEdBQ0RvbEIsRUFBVSxLQUFPLEtBRWpCQSxFQUFVLEtBQU8sTUFHaEM1VixjQUFlLGNBQ2YzUSxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxzQkFDSkMsSUFBSyw0QkFDTEMsS0FBTSxrQ0FDTndnRCxHQUFJLHFCQUNKQyxJQUFLLDJCQUNMQyxLQUFNLG9DQUVWdGhELFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyx5QkFDVEMsU0FBVSx5QkFDVkMsUUFBUyx3QkFDVEMsU0FBVSwrQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxVQUNOeFosRUFBR2c2RCxFQUNIdmdELEdBQUl1Z0QsRUFDSjM3RCxFQUFHMjdELEVBQ0h0Z0QsR0FBSXNnRCxFQUNKenZELEVBQUd5dkQsRUFDSHJnRCxHQUFJcWdELEVBQ0p6N0QsRUFBR3k3RCxFQUNIcGdELEdBQUlvZ0QsRUFDSm51RCxFQUFHbXVELEVBQ0huZ0QsR0FBSW1nRCxFQUNKanZELEVBQUdpdkQsRUFDSGxnRCxHQUFJa2dELEVBQ0o3dEQsRUFBRzZ0RCxFQUNIamdELEdBQUlpZ0QsR0FFUjNnRCx1QkFBd0IscUJBQ3hCOVEsUUFBUyxTQUFVMjFDLEVBQUsxNUIsR0FDcEIsSUFBSXprQixFQUFJeWtCLEVBQU9oWSxjQUNmLE9BQUl6TSxFQUFFcTdELFNBQVMsTUFBUXI3RCxFQUFFcTdELFNBQVMsS0FBYWxkLEVBQU0sSUFFOUNBLEVBMUVmLFNBQXdCQSxHQUVwQixJQUFJaGdELEdBREpnZ0QsRUFBTSxHQUFLQSxHQUNDNFEsVUFBVTVRLEVBQUlqOUMsT0FBUyxHQUMvQjI0RCxFQUFLMWIsRUFBSWo5QyxPQUFTLEVBQUlpOUMsRUFBSTRRLFVBQVU1USxFQUFJajlDLE9BQVMsR0FBSyxHQUMxRCxPQUNZLElBQU4yNEQsR0FBa0IsSUFBTkEsR0FDUixLQUFMMTdELEdBQWlCLEtBQUxBLEdBQWtCLE1BQU4wN0QsR0FBbUIsTUFBTDE3RCxHQUFrQixNQUFMQSxFQUdqRCxJQURJLEtBa0VNbTlELENBQWVuZCxJQUVoQ255QyxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FoSHlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSWUsRUFBVyxDQUNYTixFQUFHLE1BQ0hQLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSGhWLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxHQUFJLE1BQ0p3VixHQUFJLE1BQ0pHLEdBQUksTUFDSjRDLEdBQUksTUFDSjlDLEdBQUksTUFDSkcsR0FBSSxNQUNKTixHQUFJLE1BQ0pDLEdBQUksTUFDSk0sR0FBSSxNQUNKSCxJQUFLLE9BR0FwQixFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsa0ZBQWtGK0gsTUFDdEYsS0FFSkwsWUFBYSxxREFBcURLLE1BQzlELEtBRUpoSixTQUFVLDJEQUEyRGdKLE1BQ2pFLEtBRUpnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWixTQUFVLENBQ05DLFFBQVMsa0JBQ1RDLFFBQVMsa0JBQ1RDLFNBQVUsaUJBQ1ZDLFFBQVMsa0JBQ1RDLFNBQVUsd0NBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFlBQ1JDLEtBQU0sV0FDTnhaLEVBQUcsaUJBQ0h5WixHQUFJLFlBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLFdBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFVBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFNBQ0o3TyxFQUFHLFNBQ0grTyxHQUFJLFFBQ0ozTixFQUFHLFVBQ0g0TixHQUFJLFVBRVJWLHVCQUF3Qix3QkFDeEI5USxRQUFTLFNBQVVqQixHQUdmLE9BQU9BLEdBQVUwd0QsRUFBUzF3RCxJQUFXMHdELEVBRjdCMXdELEVBQVMsS0FFbUMwd0QsRUFENUMxd0QsR0FBVSxJQUFNLElBQU0sUUFHbEN5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FsRnlCdWUsQ0FBUSxFQUFRLEssaUJDSWxELFNBQVd5akMsR0FBVTtrQ0FJekI7U0FBUytDLEVBQW9CMXlELEVBQVFpaUIsRUFBZS9wQixFQUFLb3ZCLEdBQ3JELElBQUk1c0IsRUFBUyxDQUNUM0QsRUFBRyxDQUFDLGFBQWMsZ0JBQ2xCa00sRUFBRyxDQUFDLFlBQWEsZUFDakJoTSxFQUFHLENBQUMsVUFBVyxhQUNmd00sRUFBRyxDQUFDLFdBQVksZUFDaEJvQixFQUFHLENBQUMsVUFBVyxlQUVuQixPQUFPb2QsRUFBZ0J2bkIsRUFBT3hDLEdBQUssR0FBS3dDLEVBQU94QyxHQUFLLEdBdUJ4RCxTQUFTODdELEVBQTRCaDBELEdBRWpDLEdBREFBLEVBQVM2SSxTQUFTN0ksRUFBUSxJQUN0QjFELE1BQU0wRCxHQUNOLE9BQU8sRUFFWCxHQUFJQSxFQUFTLEVBRVQsT0FBTyxFQUNKLEdBQUlBLEVBQVMsR0FFaEIsT0FBSSxHQUFLQSxHQUFVQSxHQUFVLEVBSTFCLEdBQUlBLEVBQVMsSUFBSyxDQUVyQixJQUFJc3hELEVBQVl0eEQsRUFBUyxHQUV6QixPQUNXZzBELEVBRE8sSUFBZDFDLEVBRGF0eEQsRUFBUyxHQUlTc3hELEdBQ2hDLEdBQUl0eEQsRUFBUyxJQUFPLENBRXZCLEtBQU9BLEdBQVUsSUFDYkEsR0FBa0IsR0FFdEIsT0FBT2cwRCxFQUE0QmgwRCxHQUluQyxPQUFPZzBELEVBRFBoMEQsR0FBa0IsS0FLakIydkQsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHVGQUF1RitILE1BQzNGLEtBRUpMLFlBQ0ksK0RBQStESyxNQUMzRCxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUNJLG1FQUFtRWdKLE1BQy9ELEtBRVJnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLGNBQ0pELElBQUssaUJBQ0xFLEVBQUcsYUFDSEMsR0FBSSxlQUNKQyxJQUFLLDJCQUNMQyxLQUFNLGtDQUVWWixTQUFVLENBQ05DLFFBQVMsZUFDVEssU0FBVSxJQUNWSixRQUFTLGVBQ1RDLFNBQVUsZUFDVkMsUUFBUyxtQkFDVEMsU0FBVSxXQUVOLE9BQVF0VSxLQUFLc0YsT0FDVCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sMEJBQ1gsUUFDSSxNQUFPLDRCQUl2QnlQLGFBQWMsQ0FDVkMsT0FsR1IsU0FBMkI0RCxHQUV2QixPQUFJbStDLEVBRFNuK0MsRUFBT3BWLE9BQU8sRUFBR29WLEVBQU8vTSxRQUFRLE9BRWxDLEtBQU8rTSxFQUVYLE1BQVFBLEdBOEZYM0QsS0E1RlIsU0FBeUIyRCxHQUVyQixPQUFJbStDLEVBRFNuK0MsRUFBT3BWLE9BQU8sRUFBR29WLEVBQU8vTSxRQUFRLE9BRWxDLFFBQVUrTSxFQUVkLFNBQVdBLEdBd0ZkbmQsRUFBRyxrQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcyN0QsRUFDSHRnRCxHQUFJLGNBQ0puUCxFQUFHeXZELEVBQ0hyZ0QsR0FBSSxhQUNKcGIsRUFBR3k3RCxFQUNIcGdELEdBQUksVUFDSjdPLEVBQUdpdkQsRUFDSGxnRCxHQUFJLFdBQ0ozTixFQUFHNnRELEVBQ0hqZ0QsR0FBSSxXQUVSVix1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0F0SXlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSw2RUFBNkUrSCxNQUNqRixLQUVKTCxZQUNJLDZFQUE2RUssTUFDekUsS0FFUmhKLFNBQVUsc0NBQXNDZ0osTUFBTSxLQUN0RGdELGNBQWUsb0NBQW9DaEQsTUFBTSxLQUN6RCtDLFlBQWEsbUJBQW1CL0MsTUFBTSxLQUN0Q2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSw2QkFFVlksY0FBZSxrQkFDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBaUIsV0FBVkEsR0FFWDZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEdBQ0EsV0FFQSxVQUdmK04sU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLHdCQUNWQyxRQUFTLHFCQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFdBQ054WixFQUFHLG1CQUNIeVosR0FBSSxZQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxVQUNKblAsRUFBRyxZQUNIb1AsR0FBSSxhQUNKcGIsRUFBRyxRQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxVQUNIK08sR0FBSSxXQUNKM04sRUFBRyxPQUNINE4sR0FBSSxTQUVSVix1QkFBd0IsZUFDeEI5USxRQUFTLFNBQVVqQixHQUNmLE1BQU8sTUFBUUEsS0FoRWVrc0IsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSTFxRCxFQUFRLENBQ1JrTixHQUFJLDZCQUNKcGIsRUFBRyx3QkFDSHFiLEdBQUksMEJBQ0puUCxFQUFHLDJCQUNIb1AsR0FBSSw0QkFDSnBiLEVBQUcscUJBQ0hxYixHQUFJLHNCQUNKN08sRUFBRyx1QkFDSCtPLEdBQUksNEJBQ0ozTixFQUFHLG1CQUNINE4sR0FBSSxvQkFTUixTQUFTd2hELEVBQWtCajBELEVBQVFpaUIsRUFBZS9wQixFQUFLb3ZCLEdBQ25ELE9BQU9yRixFQUNEbXZDLEVBQU1sNUQsR0FBSyxHQUNYb3ZCLEVBQ0U4cEMsRUFBTWw1RCxHQUFLLEdBQ1hrNUQsRUFBTWw1RCxHQUFLLEdBRXZCLFNBQVNnOEQsRUFBUWwwRCxHQUNiLE9BQU9BLEVBQVMsSUFBTyxHQUFNQSxFQUFTLElBQU1BLEVBQVMsR0FFekQsU0FBU294RCxFQUFNbDVELEdBQ1gsT0FBTytNLEVBQU0vTSxHQUFLdVQsTUFBTSxLQUU1QixTQUFTNG1ELEVBQVVyeUQsRUFBUWlpQixFQUFlL3BCLEVBQUtvdkIsR0FDM0MsSUFBSTNRLEVBQVMzVyxFQUFTLElBQ3RCLE9BQWUsSUFBWEEsRUFFSTJXLEVBQVNzOUMsRUFBa0JqMEQsRUFBUWlpQixFQUFlL3BCLEVBQUksR0FBSW92QixHQUV2RHJGLEVBQ0F0TCxHQUFVdTlDLEVBQVFsMEQsR0FBVW94RCxFQUFNbDVELEdBQUssR0FBS2s1RCxFQUFNbDVELEdBQUssSUFFMURvdkIsRUFDTzNRLEVBQVN5NkMsRUFBTWw1RCxHQUFLLEdBRXBCeWUsR0FBVXU5QyxFQUFRbDBELEdBQVVveEQsRUFBTWw1RCxHQUFLLEdBQUtrNUQsRUFBTWw1RCxHQUFLLElBSWpFeTNELEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxDQUNKaEosT0FBUSxvR0FBb0crUSxNQUN4RyxLQUVKNGxELFdBQ0ksa0dBQWtHNWxELE1BQzlGLEtBRVJrYyxTQUFVLCtEQUVkdmMsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUFVLENBQ04vSCxPQUFRLG9GQUFvRitRLE1BQ3hGLEtBRUo0bEQsV0FDSSwyRkFBMkY1bEQsTUFDdkYsS0FFUmtjLFNBQVUsY0FFZGxaLGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsaUJBQWlCL0MsTUFBTSxLQUNwQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksd0JBQ0pDLElBQUssc0NBQ0xDLEtBQU0sNENBQ05sYixFQUFHLGFBQ0gwN0QsR0FBSSx3QkFDSkMsSUFBSyxzQ0FDTEMsS0FBTSw0Q0FFVnRoRCxTQUFVLENBQ05DLFFBQVMsZ0JBQ1RDLFFBQVMsYUFDVEMsU0FBVSxVQUNWQyxRQUFTLGFBQ1RDLFNBQVUscUJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sV0FDTnhaLEVBcEZSLFNBQTBCc0gsRUFBUWlpQixFQUFlL3BCLEVBQUtvdkIsR0FDbEQsT0FBSXJGLEVBQ08sa0JBRUFxRixFQUFXLGtCQUFvQixtQkFpRnRDblYsR0FBSWtnRCxFQUNKdDdELEVBQUdrOUQsRUFDSDdoRCxHQUFJaWdELEVBQ0pwdkQsRUFBR2d4RCxFQUNINWhELEdBQUlnZ0QsRUFDSnA3RCxFQUFHZzlELEVBQ0gzaEQsR0FBSSsvQyxFQUNKNXVELEVBQUd3d0QsRUFDSHpoRCxHQUFJNi9DLEVBQ0p4dEQsRUFBR292RCxFQUNIeGhELEdBQUk0L0MsR0FFUnRnRCx1QkFBd0IsY0FDeEI5USxRQUFTLFNBQVVqQixHQUNmLE9BQU9BLEVBQVMsUUFFcEJ5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0EzSHlCdWUsQ0FBUSxFQUFRLEssaUJDSWxELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSTFxRCxFQUFRLENBQ1JrTixHQUFJLHFDQUFxQzFHLE1BQU0sS0FDL0MxVSxFQUFHLGlDQUFpQzBVLE1BQU0sS0FDMUMyRyxHQUFJLGlDQUFpQzNHLE1BQU0sS0FDM0N4SSxFQUFHLGlDQUFpQ3dJLE1BQU0sS0FDMUM0RyxHQUFJLGlDQUFpQzVHLE1BQU0sS0FDM0N4VSxFQUFHLDZCQUE2QndVLE1BQU0sS0FDdEM2RyxHQUFJLDZCQUE2QjdHLE1BQU0sS0FDdkNoSSxFQUFHLGlDQUFpQ2dJLE1BQU0sS0FDMUMrRyxHQUFJLGlDQUFpQy9HLE1BQU0sS0FDM0M1RyxFQUFHLHdCQUF3QjRHLE1BQU0sS0FDakNnSCxHQUFJLHdCQUF3QmhILE1BQU0sTUFLdEMsU0FBUy9RLEVBQU8wMkQsRUFBT3B4RCxFQUFRaWlCLEdBQzNCLE9BQUlBLEVBRU9qaUIsRUFBUyxJQUFPLEdBQUtBLEVBQVMsS0FBUSxHQUFLb3hELEVBQU0sR0FBS0EsRUFBTSxHQUk1RHB4RCxFQUFTLElBQU8sR0FBS0EsRUFBUyxLQUFRLEdBQUtveEQsRUFBTSxHQUFLQSxFQUFNLEdBRzNFLFNBQVNELEVBQXVCbnhELEVBQVFpaUIsRUFBZS9wQixHQUNuRCxPQUFPOEgsRUFBUyxJQUFNdEYsRUFBT3VLLEVBQU0vTSxHQUFNOEgsRUFBUWlpQixHQUVyRCxTQUFTa3lDLEVBQXlCbjBELEVBQVFpaUIsRUFBZS9wQixHQUNyRCxPQUFPd0MsRUFBT3VLLEVBQU0vTSxHQUFNOEgsRUFBUWlpQixHQU03QjB0QyxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsdUdBQXVHK0gsTUFDM0csS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUNJLDBFQUEwRWdKLE1BQ3RFLEtBRVJnRCxjQUFlLGtCQUFrQmhELE1BQU0sS0FDdkMrQyxZQUFhLGtCQUFrQi9DLE1BQU0sS0FDckNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxjQUNIQyxHQUFJLHVCQUNKQyxJQUFLLDhCQUNMQyxLQUFNLHFDQUVWWixTQUFVLENBQ05DLFFBQVMsdUJBQ1RDLFFBQVMsb0JBQ1RDLFNBQVUscUJBQ1ZDLFFBQVMsc0JBQ1RDLFNBQVUsZ0NBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sV0FDTnhaLEVBbkNSLFNBQXlCc0gsRUFBUWlpQixHQUM3QixPQUFPQSxFQUFnQixpQkFBbUIsa0JBbUN0QzlQLEdBQUlnL0MsRUFDSnA2RCxFQUFHbzlELEVBQ0gvaEQsR0FBSSsrQyxFQUNKbHVELEVBQUdreEQsRUFDSDloRCxHQUFJOCtDLEVBQ0psNkQsRUFBR2s5RCxFQUNIN2hELEdBQUk2K0MsRUFDSjF0RCxFQUFHMHdELEVBQ0gzaEQsR0FBSTIrQyxFQUNKdHNELEVBQUdzdkQsRUFDSDFoRCxHQUFJMCtDLEdBRVJwL0MsdUJBQXdCLFlBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBM0Z5QnVlLENBQVEsRUFBUSxLLGlCQ0VsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUl5RSxFQUFhLENBQ2JDLE1BQU8sQ0FFSGxpRCxHQUFJLENBQUMsU0FBVSxVQUFXLFdBQzFCcGIsRUFBRyxDQUFDLGNBQWUsaUJBQ25CcWIsR0FBSSxDQUFDLFFBQVMsU0FBVSxVQUN4Qm5QLEVBQUcsQ0FBQyxZQUFhLGVBQ2pCb1AsR0FBSSxDQUFDLE1BQU8sT0FBUSxRQUNwQkMsR0FBSSxDQUFDLE1BQU8sT0FBUSxRQUNwQkUsR0FBSSxDQUFDLFNBQVUsVUFBVyxXQUMxQkMsR0FBSSxDQUFDLFNBQVUsU0FBVSxXQUU3QjZoRCx1QkFBd0IsU0FBVXQwRCxFQUFRdTBELEdBQ3RDLE9BQWtCLElBQVh2MEQsRUFDRHUwRCxFQUFRLEdBQ1J2MEQsR0FBVSxHQUFLQSxHQUFVLEVBQ3ZCdTBELEVBQVEsR0FDUkEsRUFBUSxJQUVwQmxDLFVBQVcsU0FBVXJ5RCxFQUFRaWlCLEVBQWUvcEIsR0FDeEMsSUFBSXE4RCxFQUFVSCxFQUFXQyxNQUFNbjhELEdBQy9CLE9BQW1CLElBQWZBLEVBQUl5QixPQUNHc29CLEVBQWdCc3lDLEVBQVEsR0FBS0EsRUFBUSxHQUd4Q3YwRCxFQUNBLElBQ0FvMEQsRUFBV0UsdUJBQXVCdDBELEVBQVF1MEQsS0FNakQ1RSxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsbUZBQW1GK0gsTUFDdkYsS0FFSkwsWUFDSSwyREFBMkRLLE1BQU0sS0FDckUrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsNERBQTREZ0osTUFDbEUsS0FFSmdELGNBQWUscUNBQXFDaEQsTUFBTSxLQUMxRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksT0FDSkQsSUFBSyxVQUNMRSxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsZ0JBRVRDLFNBQVUsV0FDTixPQUFRcFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sd0JBQ1gsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNELE1BQU8sc0JBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sb0JBR25CK08sUUFBUyxjQUNUQyxTQUFVLFdBVU4sTUFUbUIsQ0FDZiw2QkFDQSxpQ0FDQSw0QkFDQSw0QkFDQSw4QkFDQSwyQkFDQSw0QkFFZ0J0VSxLQUFLc0YsUUFFN0JpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFdBQ054WixFQUFHLG1CQUNIeVosR0FBSWlpRCxFQUFXL0IsVUFDZnQ3RCxFQUFHcTlELEVBQVcvQixVQUNkamdELEdBQUlnaUQsRUFBVy9CLFVBQ2ZwdkQsRUFBR214RCxFQUFXL0IsVUFDZGhnRCxHQUFJK2hELEVBQVcvQixVQUNmcDdELEVBQUcsTUFDSHFiLEdBQUk4aEQsRUFBVy9CLFVBQ2Y1dUQsRUFBRyxTQUNIK08sR0FBSTRoRCxFQUFXL0IsVUFDZnh0RCxFQUFHLFNBQ0g0TixHQUFJMmhELEVBQVcvQixXQUVuQnRnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FuSHlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSw4SUFBOEkrSCxNQUNsSixLQUVKTCxZQUNJLGlFQUFpRUssTUFDN0QsS0FFUkgsWUFBYSx5Q0FDYjBtRCxrQkFBbUIseUNBQ25CM21ELGlCQUFrQix5Q0FDbEI0bUQsdUJBQXdCLHlDQUN4Qnh2RCxTQUFVLGtEQUFrRGdKLE1BQU0sS0FDbEVnRCxjQUFlLHdCQUF3QmhELE1BQU0sS0FDN0MrQyxZQUFhLHdCQUF3Qi9DLE1BQU0sS0FDM0MxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHdCQUNMQyxLQUFNLCtCQUVWWixTQUFVLENBQ05DLFFBQVMsd0JBQ1RDLFFBQVMsZUFDVEMsU0FBVSxjQUNWQyxRQUFTLGlCQUNUQyxTQUFVLDJCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxjQUNSQyxLQUFNLFdBQ054WixFQUFHLG1CQUNIeVosR0FBSSxZQUNKcGIsRUFBRyxZQUNIcWIsR0FBSSxZQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxRQUNIcWIsR0FBSSxRQUNKN08sRUFBRyxZQUNIK08sR0FBSSxZQUNKM04sRUFBRyxTQUNINE4sR0FBSSxVQUVSVix1QkFBd0IsV0FDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0ExRHlCdWUsQ0FBUSxFQUFRLEssaUJDSWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSx1RkFBdUYrSCxNQUMzRixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUsd0RBQXdEZ0osTUFDOUQsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxZQUNIQyxHQUFJLGNBQ0pDLElBQUssbUJBQ0xDLEtBQU0sMEJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxnQkFDVEMsUUFBUyxlQUNUQyxTQUFVLG9CQUNWQyxRQUFTLGdCQUNUQyxTQUFVLFdBQ04sT0FBUXRVLEtBQUtzRixPQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sNEJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sOEJBR25CaVAsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxVQUNOeFosRUFBRyxrQkFDSHlaLEdBQUksYUFDSnBiLEVBQUcsY0FDSHFiLEdBQUksWUFDSm5QLEVBQUcsV0FDSG9QLEdBQUksVUFDSnBiLEVBQUcsV0FDSHFiLEdBQUksVUFDSjdPLEVBQUcsYUFDSCtPLEdBQUksWUFDSjNOLEVBQUcsY0FDSDROLEdBQUksYUFFUlYsdUJBQXdCLDhCQUN4QjlRLFFBQVMsU0FBVWpCLEdBQ2YsSUFBSXN4RCxFQUFZdHhELEVBQVMsR0FDckJ1eEQsRUFBY3Z4RCxFQUFTLElBQzNCLE9BQWUsSUFBWEEsRUFDT0EsRUFBUyxNQUNPLElBQWhCdXhELEVBQ0F2eEQsRUFBUyxNQUNUdXhELEVBQWMsSUFBTUEsRUFBYyxHQUNsQ3Z4RCxFQUFTLE1BQ0ssSUFBZHN4RCxFQUNBdHhELEVBQVMsTUFDSyxJQUFkc3hELEVBQ0F0eEQsRUFBUyxNQUNLLElBQWRzeEQsR0FBaUMsSUFBZEEsRUFDbkJ0eEQsRUFBUyxNQUVUQSxFQUFTLE9BR3hCeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBbkZ5QnVlLENBQVEsRUFBUSxLLGlCQ0VsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEseUZBQXlGK0gsTUFDN0YsS0FFSkwsWUFDSSx5RUFBeUVLLE1BQ3JFLEtBRVIrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQ0ksd0VBQXdFZ0osTUFDcEUsS0FFUmdELGNBQWUsMkNBQTJDaEQsTUFBTSxLQUNoRStDLFlBQWEsd0JBQXdCL0MsTUFBTSxLQUMzQzFKLGVBQWdCLENBQ1oyUCxHQUFJLGFBQ0pELElBQUssZ0JBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDBCQUNMQyxLQUFNLGlDQUVWWixTQUFVLENBQ05DLFFBQVMsYUFDVEMsUUFBUyxZQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsY0FDVEMsU0FBVSxvQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsYUFDUkMsS0FBTSxXQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcsZUFDSHFiLEdBQUksY0FDSm5QLEVBQUcsZUFDSG9QLEdBQUksY0FDSnBiLEVBQUcsWUFDSHFiLEdBQUksV0FDSjdPLEVBQUcsV0FDSCtPLEdBQUksVUFDSjNOLEVBQUcsV0FDSDROLEdBQUksV0FFUkMsY0FBZSxnREFDZmlHLGFBQWMsU0FBVXhWLEVBQU1ySCxHQUkxQixPQUhhLEtBQVRxSCxJQUNBQSxFQUFPLEdBR08sV0FBYnJILEdBQXlCcUgsR0FBUSxHQUNyQixpQkFBYnJILEdBQ2EsZUFBYkEsRUFFT3FILEVBQU8sR0FFUEEsR0FHZnJILFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEVBQ0EsU0FDQUEsRUFBTyxHQUNQLFNBQ0FBLEVBQU8sR0FDUCxlQUNBQSxFQUFPLEdBQ1AsYUFFQSxZQS9FbUIrb0IsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7U0FBUzBDLEVBQVVyeUQsRUFBUWlpQixFQUFlL3BCLEVBQUtvdkIsR0FDM0MsT0FBUXB2QixHQUNKLElBQUssSUFDRCxPQUFPK3BCLEVBQWdCLGdCQUFrQixrQkFDN0MsSUFBSyxLQUNELE9BQU9qaUIsR0FBVWlpQixFQUFnQixVQUFZLGFBQ2pELElBQUssSUFDTCxJQUFLLEtBQ0QsT0FBT2ppQixHQUFVaWlCLEVBQWdCLFNBQVcsWUFDaEQsSUFBSyxJQUNMLElBQUssS0FDRCxPQUFPamlCLEdBQVVpaUIsRUFBZ0IsT0FBUyxXQUM5QyxJQUFLLElBQ0wsSUFBSyxLQUNELE9BQU9qaUIsR0FBVWlpQixFQUFnQixRQUFVLFdBQy9DLElBQUssSUFDTCxJQUFLLEtBQ0QsT0FBT2ppQixHQUFVaWlCLEVBQWdCLE9BQVMsVUFDOUMsSUFBSyxJQUNMLElBQUssS0FDRCxPQUFPamlCLEdBQVVpaUIsRUFBZ0IsT0FBUyxXQUM5QyxRQUNJLE9BQU9qaUIsR0FJVjJ2RCxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsK0xBQStMK0gsTUFDbk0sS0FFSkwsWUFDSSw2RUFBNkVLLE1BQ3pFLEtBRVIrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsNkNBQTZDZ0osTUFBTSxLQUM3RGdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksb0JBQ0pDLElBQUssMEJBQ0xDLEtBQU0saUNBRVZZLGNBQWUsU0FDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBaUIsT0FBVkEsR0FFWDZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEdBQ0EsS0FFQSxNQUdmK04sU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsZUFDVEMsU0FBVSxpQkFDVkMsUUFBUyxlQUNUQyxTQUFVLHFCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxXQUNSQyxLQUFNLFVBQ054WixFQUFHMjVELEVBQ0hsZ0QsR0FBSWtnRCxFQUNKdDdELEVBQUdzN0QsRUFDSGpnRCxHQUFJaWdELEVBQ0pwdkQsRUFBR292RCxFQUNIaGdELEdBQUlnZ0QsRUFDSnA3RCxFQUFHbzdELEVBQ0gvL0MsR0FBSSsvQyxFQUNKNXVELEVBQUc0dUQsRUFDSDcvQyxHQUFJNi9DLEVBQ0p4dEQsRUFBR3d0RCxFQUNINS9DLEdBQUk0L0MsR0FFUnRnRCx1QkFBd0IsZUFDeEI5USxRQUFTLFNBQVVqQixFQUFRa2QsR0FDdkIsT0FBUUEsR0FDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssTUFDRCxPQUFPbGQsRUFBUyxRQUNwQixRQUNJLE9BQU9BLE1Bakdla3NCLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlDLEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIaFYsRUFBRyxJQUNIQyxFQUFHLElBQ0hnVixFQUFHLEtBRVBDLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR2IsU0FBU21FLEVBQWV4MEQsRUFBUWlpQixFQUFlcE0sRUFBUXlSLEdBQ25ELElBQUkzbEIsRUFBUyxHQUNiLEdBQUlzZ0IsRUFDQSxPQUFRcE0sR0FDSixJQUFLLElBQ0RsVSxFQUFTLGFBQ1QsTUFDSixJQUFLLEtBQ0RBLEVBQVMsV0FDVCxNQUNKLElBQUssSUFDREEsRUFBUyxXQUNULE1BQ0osSUFBSyxLQUNEQSxFQUFTLFlBQ1QsTUFDSixJQUFLLElBQ0RBLEVBQVMsU0FDVCxNQUNKLElBQUssS0FDREEsRUFBUyxTQUNULE1BQ0osSUFBSyxJQUNEQSxFQUFTLFVBQ1QsTUFDSixJQUFLLEtBQ0RBLEVBQVMsVUFDVCxNQUNKLElBQUssSUFDREEsRUFBUyxXQUNULE1BQ0osSUFBSyxLQUNEQSxFQUFTLFdBQ1QsTUFDSixJQUFLLElBQ0RBLEVBQVMsVUFDVCxNQUNKLElBQUssS0FDREEsRUFBUyxnQkFJakIsT0FBUWtVLEdBQ0osSUFBSyxJQUNEbFUsRUFBUyxlQUNULE1BQ0osSUFBSyxLQUNEQSxFQUFTLGFBQ1QsTUFDSixJQUFLLElBQ0RBLEVBQVMsYUFDVCxNQUNKLElBQUssS0FDREEsRUFBUyxhQUNULE1BQ0osSUFBSyxJQUNEQSxFQUFTLFdBQ1QsTUFDSixJQUFLLEtBQ0RBLEVBQVMsV0FDVCxNQUNKLElBQUssSUFDREEsRUFBUyxZQUNULE1BQ0osSUFBSyxLQUNEQSxFQUFTLFlBQ1QsTUFDSixJQUFLLElBQ0RBLEVBQVMsY0FDVCxNQUNKLElBQUssS0FDREEsRUFBUyxjQUNULE1BQ0osSUFBSyxJQUNEQSxFQUFTLFlBQ1QsTUFDSixJQUFLLEtBQ0RBLEVBQVMsWUFJckIsT0FBT0EsRUFBT0YsUUFBUSxNQUFPekIsR0FHeEIydkQsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQ0ksZ0ZBQWdGSyxNQUM1RSxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUFVLHVEQUF1RGdKLE1BQU0sS0FDdkVnRCxjQUFlLGtDQUFrQ2hELE1BQU0sS0FDdkQrQyxZQUFhLHFCQUFxQi9DLE1BQU0sS0FDeEMxSixlQUFnQixDQUNaMlAsR0FBSSxlQUNKRCxJQUFLLGtCQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyw0QkFDTEMsS0FBTSxtQ0FFVlosU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsYUFDVEMsU0FBVSxXQUNWQyxRQUFTLFdBQ1RDLFNBQVUsbUJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sV0FDTnhaLEVBQUc4N0QsRUFDSHJpRCxHQUFJcWlELEVBQ0p6OUQsRUFBR3k5RCxFQUNIcGlELEdBQUlvaUQsRUFDSnZ4RCxFQUFHdXhELEVBQ0huaUQsR0FBSW1pRCxFQUNKdjlELEVBQUd1OUQsRUFDSGxpRCxHQUFJa2lELEVBQ0ovd0QsRUFBRyt3RCxFQUNIaGlELEdBQUlnaUQsRUFDSjN2RCxFQUFHMnZELEVBQ0gvaEQsR0FBSStoRCxHQUVSejdDLFNBQVUsU0FBVWxELEdBQ2hCLE9BQU9BLEVBQU9wVSxRQUFRLGlCQUFpQixTQUFVRCxHQUM3QyxPQUFPNnVELEVBQVU3dUQsT0FHekJ3Z0IsV0FBWSxTQUFVbk0sR0FDbEIsT0FBT0EsRUFBT3BVLFFBQVEsT0FBTyxTQUFVRCxHQUNuQyxPQUFPb3VELEVBQVVwdUQsT0FHekJrUixjQUFlLHFDQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxVQUFickgsR0FBcUMsVUFBYkEsRUFDakJxSCxFQUVNLFdBQWJySCxHQUNhLGFBQWJBLEdBQ2EsV0FBYkEsRUFFT3FILEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxRQUwvQixHQVFYckgsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEdBQVEsR0FBS0EsRUFBTyxFQUNiLFFBQ0FBLEVBQU8sR0FDUCxRQUNBQSxFQUFPLEdBQ1AsU0FDQUEsRUFBTyxHQUNQLFdBRUEsVUFHZnNCLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXhNeUJ1ZSxDQUFRLEVBQVEsSyxpQkNFbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLG9GQUFvRitILE1BQ3hGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSw2Q0FBNkNnSixNQUFNLEtBQzdEZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyw0QkFDTEMsS0FBTSxtQ0FFVlksY0FBZSw4QkFDZmlHLGFBQWMsU0FBVXhWLEVBQU1ySCxHQUkxQixPQUhhLEtBQVRxSCxJQUNBQSxFQUFPLEdBRU0sU0FBYnJILEVBQ09xSCxFQUNhLGNBQWJySCxFQUNBcUgsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsV0FBYnJILEdBQXNDLFVBQWJBLEVBQ3pCcUgsRUFBTyxRQURYLEdBSVhySCxTQUFVLFNBQVVvSCxFQUFPSyxFQUFTK2tCLEdBQ2hDLE9BQUlwbEIsRUFBUSxHQUNELE9BQ0FBLEVBQVEsR0FDUixZQUNBQSxFQUFRLEdBQ1IsU0FFQSxTQUdmZ08sU0FBVSxDQUNOQyxRQUFTLHNCQUNUQyxRQUFTLGtCQUNUQyxTQUFVLGtCQUNWQyxRQUFTLHNCQUNUQyxTQUFVLHdCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxXQUNSQyxLQUFNLGdCQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksVUFDSnBiLEVBQUcsVUFDSHFiLEdBQUksV0FDSm5QLEVBQUcsUUFDSG9QLEdBQUksU0FDSnBiLEVBQUcsU0FDSHFiLEdBQUksVUFDSjdPLEVBQUcsVUFDSCtPLEdBQUksV0FDSjNOLEVBQUcsVUFDSDROLEdBQUksWUFFUmhPLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXpFeUJ1ZSxDQUFRLEVBQVEsSyxpQkNJbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsb0ZBQW9GK0gsTUFDeEYsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUFVLDZDQUE2Q2dKLE1BQU0sS0FDN0RnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDRCQUNMQyxLQUFNLG1DQUVWWSxjQUFlLDhCQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxTQUFickgsRUFDT3FILEVBQ2EsY0FBYnJILEVBQ0FxSCxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxXQUFickgsR0FBc0MsVUFBYkEsRUFDekJxSCxFQUFPLFFBRFgsR0FJWHJILFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBSXBsQixFQUFRLEdBQ0QsT0FDQUEsRUFBUSxHQUNSLFlBQ0FBLEVBQVEsR0FDUixTQUVBLFNBR2ZnTyxTQUFVLENBQ05DLFFBQVMsc0JBQ1RDLFFBQVMsa0JBQ1RDLFNBQVUsa0JBQ1ZDLFFBQVMsc0JBQ1RDLFNBQVUsd0JBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sZ0JBQ054WixFQUFHLGdCQUNIeVosR0FBSSxVQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxRQUNIb1AsR0FBSSxTQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxVQUNKN08sRUFBRyxVQUNIK08sR0FBSSxXQUNKM04sRUFBRyxVQUNINE4sR0FBSSxZQUVSaE8sS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBekV5QnVlLENBQVEsRUFBUSxLLGlCQ0VsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsd0ZBQXdGK0gsTUFDNUYsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUNJLGlFQUFpRWdKLE1BQzdELEtBRVJnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWixTQUFVLENBQ05DLFFBQVMsaUJBQ1RDLFFBQVMsaUJBQ1RDLFNBQVUsZ0JBQ1ZDLFFBQVMscUJBQ1RDLFNBQVUsNEJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsZUFDSHlaLEdBQUksYUFDSnBiLEVBQUcsU0FDSHFiLEdBQUksWUFDSm5QLEVBQUcsU0FDSG9QLEdBQUksYUFDSnBiLEVBQUcsVUFDSHFiLEdBQUksWUFDSjdPLEVBQUcsUUFDSCtPLEdBQUksVUFDSjNOLEVBQUcsT0FDSDROLEdBQUksVUFFUlYsdUJBQXdCLFdBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBdER5QnVlLENBQVEsRUFBUSxLLGlCQ0tsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlDLEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIaFYsRUFBRyxJQUNIQyxFQUFHLElBQ0hnVixFQUFHLEtBRVBDLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pWLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSwyRkFBMkYrSCxNQUMvRixLQUVKTCxZQUFhLG1EQUFtREssTUFBTSxLQUN0RWhKLFNBQVUsd0RBQXdEZ0osTUFDOUQsS0FFSmdELGNBQWUsMkJBQTJCaEQsTUFBTSxLQUNoRCtDLFlBQWEsMkJBQTJCL0MsTUFBTSxLQUU5QzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxrQkFDVEMsUUFBUyxzQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxtQkFDVEMsU0FBVSw2QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsZ0JBQ1JDLEtBQU0sa0JBQ054WixFQUFHLGtCQUNIeVosR0FBSSxhQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxVQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxPQUNIK08sR0FBSSxPQUNKM04sRUFBRyxVQUNINE4sR0FBSSxXQUVSc0csU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFBT3BVLFFBQVEsaUJBQWlCLFNBQVVELEdBQzdDLE9BQU82dUQsRUFBVTd1RCxPQUd6QndnQixXQUFZLFNBQVVuTSxHQUNsQixPQUFPQSxFQUFPcFUsUUFBUSxPQUFPLFNBQVVELEdBQ25DLE9BQU9vdUQsRUFBVXB1RCxPQUd6QmlELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXZGeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHFGQUFxRitILE1BQ3pGLEtBRUpMLFlBQ0ksNkRBQTZESyxNQUFNLEtBQ3ZFK2xELGtCQUFrQixFQUNsQi91RCxTQUFVLHFEQUFxRGdKLE1BQU0sS0FDckVnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssMkJBQ0xDLEtBQU0saUNBRVZaLFNBQVUsQ0FDTkMsUUFBUyxpQkFDVEMsUUFBUyxvQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxpQkFDVEMsU0FBVSwwQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxXQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcsYUFDSHFiLEdBQUksY0FDSm5QLEVBQUcsVUFDSG9QLEdBQUksV0FDSnBiLEVBQUcsU0FDSHFiLEdBQUksV0FDSi9OLEVBQUcsU0FDSGdPLEdBQUksVUFDSjlPLEVBQUcsV0FDSCtPLEdBQUksYUFDSjNOLEVBQUcsU0FDSDROLEdBQUksU0FFUlYsdUJBQXdCLFlBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBeER5QnVlLENBQVEsRUFBUSxLLGlCQ0NsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlDLEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIaFYsRUFBRyxJQUNIQyxFQUFHLElBQ0hnVixFQUFHLEtBRVBDLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pWLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSx1RkFBdUYrSCxNQUMzRixLQUVKTCxZQUNJLHVFQUF1RUssTUFDbkUsS0FFUitsRCxrQkFBa0IsRUFDbEIvdUQsU0FBVSx3REFBd0RnSixNQUM5RCxLQUVKZ0QsY0FBZSwwQ0FBMENoRCxNQUFNLEtBQy9EK0MsWUFBYSw0QkFBNEIvQyxNQUFNLEtBQy9DZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxlQUNKRCxJQUFLLGtCQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyw0QkFDTEMsS0FBTSxtQ0FFVmlILFNBQVUsU0FBVWxELEdBQ2hCLE9BQU9BLEVBQU9wVSxRQUFRLGlCQUFpQixTQUFVRCxHQUM3QyxPQUFPNnVELEVBQVU3dUQsT0FHekJ3Z0IsV0FBWSxTQUFVbk0sR0FDbEIsT0FBT0EsRUFBT3BVLFFBQVEsT0FBTyxTQUFVRCxHQUNuQyxPQUFPb3VELEVBQVVwdUQsT0FHekJrUixjQUFlLHlCQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxTQUFickgsRUFDT3FILEVBQU8sRUFBSUEsRUFBT0EsRUFBTyxHQUNaLFVBQWJySCxFQUNBcUgsRUFDYSxXQUFickgsRUFDQXFILEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFNBQWJySCxFQUNBcUgsRUFBTyxRQURYLEdBSVhySCxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxFQUNBLE9BQ0FBLEVBQU8sR0FDUCxRQUNBQSxFQUFPLEdBQ1AsU0FDQUEsRUFBTyxHQUNQLE9BRUEsUUFHZitOLFNBQVUsQ0FDTkMsUUFBUyxVQUNUQyxRQUFTLFlBQ1RDLFNBQVUscUJBQ1ZDLFFBQVMsWUFDVEMsU0FBVSxvQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsT0FDUkMsS0FBTSxXQUNOeFosRUFBRyxZQUNIeVosR0FBSSxhQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxXQUNIK08sR0FBSSxXQUNKM04sRUFBRyxVQUNINE4sR0FBSSxXQUVSaE8sS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBdkh5QnVlLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUkyRCxFQUNJLDZEQUE2RDduRCxNQUFNLEtBQ3ZFOG5ELEVBQ0ksa0RBQWtEOW5ELE1BQU0sS0FDNURGLEVBQWMsQ0FDVixRQUNBLFFBQ0Esb0JBQ0EsUUFDQSxTQUNBLGNBQ0EsY0FDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFNBRUpELEVBQ0kscUtBRUNxa0QsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLDBGQUEwRitILE1BQzlGLEtBRUpMLFlBQWEsU0FBVXJVLEVBQUcyRCxHQUN0QixPQUFLM0QsRUFFTSxRQUFRa0wsS0FBS3ZILEdBQ2I2NEQsRUFBdUJ4OEQsRUFBRTRNLFNBRXpCMnZELEVBQW9CdjhELEVBQUU0TSxTQUp0QjJ2RCxHQVFmaG9ELFlBQWFBLEVBQ2JELGlCQUFrQkMsRUFDbEIwbUQsa0JBQ0ksNEZBQ0pDLHVCQUNJLG1GQUVKMW1ELFlBQWFBLEVBQ2IybUQsZ0JBQWlCM21ELEVBQ2pCNG1ELGlCQUFrQjVtRCxFQUVsQjlJLFNBQ0ksNkRBQTZEZ0osTUFBTSxLQUN2RWdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsbUJBQ1RDLFNBQVUsMkJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sYUFDTnhaLEVBQUcsb0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFNBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFdBQ0ovTixFQUFHLFdBQ0hnTyxHQUFJLFdBQ0o5TyxFQUFHLFlBQ0grTyxHQUFJLGFBQ0ozTixFQUFHLFdBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixrQkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLE9BQ0lBLEdBQ1ksSUFBWEEsR0FBMkIsSUFBWEEsR0FBZ0JBLEdBQVUsR0FBSyxNQUFRLE9BR2hFeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBckd5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUkyRCxFQUNJLDZEQUE2RDduRCxNQUFNLEtBQ3ZFOG5ELEVBQ0ksa0RBQWtEOW5ELE1BQU0sS0FDNURGLEVBQWMsQ0FDVixRQUNBLFFBQ0Esb0JBQ0EsUUFDQSxTQUNBLGNBQ0EsY0FDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFNBRUpELEVBQ0kscUtBRUdxa0QsRUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLDBGQUEwRitILE1BQzlGLEtBRUpMLFlBQWEsU0FBVXJVLEVBQUcyRCxHQUN0QixPQUFLM0QsRUFFTSxRQUFRa0wsS0FBS3ZILEdBQ2I2NEQsRUFBdUJ4OEQsRUFBRTRNLFNBRXpCMnZELEVBQW9CdjhELEVBQUU0TSxTQUp0QjJ2RCxHQVFmaG9ELFlBQWFBLEVBQ2JELGlCQUFrQkMsRUFDbEIwbUQsa0JBQ0ksNEZBQ0pDLHVCQUNJLG1GQUVKMW1ELFlBQWFBLEVBQ2IybUQsZ0JBQWlCM21ELEVBQ2pCNG1ELGlCQUFrQjVtRCxFQUVsQjlJLFNBQ0ksNkRBQTZEZ0osTUFBTSxLQUN2RWdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsbUJBQ1RDLFNBQVUsMkJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sYUFDTnhaLEVBQUcsb0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFVBQ0hvUCxHQUFJLFNBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFdBQ0o3TyxFQUFHLFlBQ0grTyxHQUFJLGFBQ0ozTixFQUFHLFdBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixrQkFDeEI5USxRQUFTLFNBQVVqQixHQUNmLE9BQ0lBLEdBQ1ksSUFBWEEsR0FBMkIsSUFBWEEsR0FBZ0JBLEdBQVUsR0FBSyxNQUFRLE9BR2hFeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBbkd5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEscUZBQXFGK0gsTUFDekYsS0FFSkwsWUFDSSw2REFBNkRLLE1BQU0sS0FDdkUrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUscURBQXFEZ0osTUFBTSxLQUNyRWdELGNBQWUsK0JBQStCaEQsTUFBTSxLQUNwRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSywwQkFDTEMsS0FBTSxpQ0FFVlosU0FBVSxDQUNOQyxRQUFTLG9CQUNUQyxRQUFTLHVCQUNUQyxTQUFVLG1CQUNWQyxRQUFTLG9CQUNUQyxTQUFVLGdDQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFdBQ054WixFQUFHLGVBQ0h5WixHQUFJLFlBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLFlBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFdBQ0ovTixFQUFHLFVBQ0hnTyxHQUFJLFdBQ0o5TyxFQUFHLFlBQ0grTyxHQUFJLGFBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFNBRVJWLHVCQUF3QixZQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXhEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNFbEQsU0FBV3lqQyxHQUFVO2tDQUliQTtFQUFPajhDLGFBQWEsU0FBVSxDQUN0Q2hRLE9BQVEsQ0FDSjJ0RCxXQUNJLHFGQUFxRjVsRCxNQUNqRixLQUVSL1EsT0FBUSxzSEFBc0grUSxNQUMxSCxLQUVKa2MsU0FBVSxtQkFFZHZjLFlBQ0ksK0RBQStESyxNQUMzRCxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUFVLDJEQUEyRGdKLE1BQ2pFLEtBRUpnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLE9BQ0pELElBQUssVUFDTEUsRUFBRyxhQUNIQyxHQUFJLG1CQUNKMGdELEdBQUksYUFDSnpnRCxJQUFLLDRCQUNMMGdELElBQUssbUJBQ0x6Z0QsS0FBTSxpQ0FDTjBnRCxLQUFNLHdCQUVWdGhELFNBQVUsQ0FDTkMsUUFBUyxhQUNUQyxRQUFTLGVBQ1RDLFNBQVUsY0FDVkMsUUFBUyxhQUNUQyxTQUFVLHFCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLFFBQ054WixFQUFHLGdCQUNIeVosR0FBSSxjQUNKcGIsRUFBRyxhQUNIcWIsR0FBSSxhQUNKblAsRUFBRyxVQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxXQUNKN08sRUFBRyxTQUNIK08sR0FBSSxXQUNKM04sRUFBRyxRQUNINE4sR0FBSSxVQUVSVix1QkFBd0IscUJBQ3hCOVEsUUFBUyxTQUFVakIsRUFBUWtkLEdBQ3ZCLElBQUl2YixFQUNXLElBQVgzQixFQUNNLElBQ1csSUFBWEEsRUFDRSxJQUNXLElBQVhBLEVBQ0UsSUFDVyxJQUFYQSxFQUNFLElBQ0EsSUFJaEIsTUFIZSxNQUFYa2QsR0FBNkIsTUFBWEEsSUFDbEJ2YixFQUFTLEtBRU4zQixFQUFTMkIsR0FFcEI4QyxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FuRnlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSUMsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hoVixFQUFHLElBQ0hDLEVBQUcsSUFDSGdWLEVBQUcsS0FFUEMsRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHRlYsRUFBT2o4QyxhQUFhLFFBQVMsQ0FFcENoUSxPQUFRLHNFQUFzRStILE1BQzFFLEtBRUpMLFlBQ0ksc0VBQXNFSyxNQUNsRSxLQUVSaEosU0FBVSx5REFBeURnSixNQUMvRCxLQUVKZ0QsY0FBZSxpQ0FBaUNoRCxNQUFNLEtBQ3REK0MsWUFBYSxpQ0FBaUMvQyxNQUFNLEtBQ3BEMUosZUFBZ0IsQ0FDWjJQLEdBQUksYUFDSkQsSUFBSyxnQkFDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssMEJBQ0xDLEtBQU0saUNBRVZaLFNBQVUsQ0FDTkMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFNBQVUsa0JBQ1ZDLFFBQVMsVUFDVEMsU0FBVSxtQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxXQUNOeFosRUFBRyxZQUNIeVosR0FBSSxXQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxVQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxZQUNIK08sR0FBSSxXQUNKM04sRUFBRyxVQUNINE4sR0FBSSxVQUVSc0csU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFBT3BVLFFBQVEsaUJBQWlCLFNBQVVELEdBQzdDLE9BQU82dUQsRUFBVTd1RCxPQUd6QndnQixXQUFZLFNBQVVuTSxHQUNsQixPQUFPQSxFQUFPcFUsUUFBUSxPQUFPLFNBQVVELEdBQ25DLE9BQU9vdUQsRUFBVXB1RCxPQUt6QmtSLGNBQWUsdUJBQ2ZpRyxhQUFjLFNBQVV4VixFQUFNckgsR0FJMUIsT0FIYSxLQUFUcUgsSUFDQUEsRUFBTyxHQUVNLFFBQWJySCxFQUNPcUgsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osU0FBYnJILEVBQ0FxSCxFQUNhLFdBQWJySCxFQUNBcUgsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsU0FBYnJILEVBQ0FxSCxFQUFPLFFBRFgsR0FJWHJILFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEVBQ0EsTUFDQUEsRUFBTyxHQUNQLE9BQ0FBLEVBQU8sR0FDUCxTQUNBQSxFQUFPLEdBQ1AsT0FFQSxPQUdmc0IsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBeEh5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUk4RSxFQUNJLG1HQUFtR2hwRCxNQUMvRixLQUVSaXBELEVBQ0kscUdBQXFHanBELE1BQ2pHLEtBRVJGLEVBQWMsQ0FDVixRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0FFUixTQUFTa25ELEVBQU9yNkQsR0FDWixPQUFPQSxFQUFJLEdBQUssR0FBS0EsRUFBSSxHQUFLLE1BQVFBLEVBQUksSUFBTSxJQUFPLEVBRTNELFNBQVNpNkQsRUFBVXJ5RCxFQUFRaWlCLEVBQWUvcEIsR0FDdEMsSUFBSXllLEVBQVMzVyxFQUFTLElBQ3RCLE9BQVE5SCxHQUNKLElBQUssS0FDRCxPQUFPeWUsR0FBVTg3QyxFQUFPenlELEdBQVUsVUFBWSxVQUNsRCxJQUFLLElBQ0QsT0FBT2lpQixFQUFnQixTQUFXLFNBQ3RDLElBQUssS0FDRCxPQUFPdEwsR0FBVTg3QyxFQUFPenlELEdBQVUsU0FBVyxTQUNqRCxJQUFLLElBQ0QsT0FBT2lpQixFQUFnQixVQUFZLFVBQ3ZDLElBQUssS0FDRCxPQUFPdEwsR0FBVTg3QyxFQUFPenlELEdBQVUsVUFBWSxVQUNsRCxJQUFLLEtBQ0QsT0FBTzJXLEdBQVU4N0MsRUFBT3p5RCxHQUFVLFdBQWEsV0FDbkQsSUFBSyxLQUNELE9BQU8yVyxHQUFVODdDLEVBQU96eUQsR0FBVSxXQUFhLFlBQ25ELElBQUssS0FDRCxPQUFPMlcsR0FBVTg3QyxFQUFPenlELEdBQVUsT0FBUyxRQUk5QzJ2RCxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsU0FBVW12RCxFQUFnQm40RCxHQUM5QixPQUFLbTRELEVBRU0sU0FBUzV3RCxLQUFLdkgsR0FDZGc2RCxFQUFpQjdCLEVBQWVsdkQsU0FFaEM4d0QsRUFBaUI1QixFQUFlbHZELFNBSmhDOHdELEdBT2ZycEQsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVGLFlBQWFBLEVBQ2IybUQsZ0JBQWlCM21ELEVBQ2pCNG1ELGlCQUFrQjVtRCxFQUNsQjlJLFNBQ0ksNkRBQTZEZ0osTUFBTSxLQUN2RWdELGNBQWUsMkJBQTJCaEQsTUFBTSxLQUNoRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRcFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8scUJBRVgsS0FBSyxFQUNELE1BQU8sbUJBRVgsS0FBSyxFQUNELE1BQU8saUJBRVgsS0FBSyxFQUNELE1BQU8sa0JBRVgsUUFDSSxNQUFPLG9CQUduQitPLFFBQVMsaUJBQ1RDLFNBQVUsV0FDTixPQUFRdFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sNEJBQ1gsS0FBSyxFQUNELE1BQU8sd0JBQ1gsS0FBSyxFQUNELE1BQU8seUJBQ1gsUUFDSSxNQUFPLDJCQUduQmlQLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTnhaLEVBQUcsZUFDSHlaLEdBQUlrZ0QsRUFDSnQ3RCxFQUFHczdELEVBQ0hqZ0QsR0FBSWlnRCxFQUNKcHZELEVBQUdvdkQsRUFDSGhnRCxHQUFJZ2dELEVBQ0pwN0QsRUFBRyxVQUNIcWIsR0FBSSxTQUNKL04sRUFBRyxVQUNIZ08sR0FBSTgvQyxFQUNKNXVELEVBQUcsVUFDSCtPLEdBQUk2L0MsRUFDSnh0RCxFQUFHLE1BQ0g0TixHQUFJNC9DLEdBRVJ0Z0QsdUJBQXdCLFlBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBMUl5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsMkZBQTJGK0gsTUFDL0YsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUNJLGlGQUFpRmdKLE1BQzdFLEtBRVJnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLHdCQUNKQyxJQUFLLDhCQUNMQyxLQUFNLHFDQUVWWixTQUFVLENBQ05DLFFBQVMsZUFDVEMsUUFBUyxpQkFDVEMsU0FBVSxlQUNWQyxRQUFTLGdCQUNUQyxTQUFVLFdBQ04sT0FBc0IsSUFBZnRVLEtBQUtzRixPQUE4QixJQUFmdEYsS0FBS3NGLE1BQzFCLHdCQUNBLHlCQUVWaVAsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxRQUNOeFosRUFBRyxXQUNIeVosR0FBSSxjQUNKcGIsRUFBRyxZQUNIcWIsR0FBSSxhQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxVQUNKL04sRUFBRyxhQUNIZ08sR0FBSSxhQUNKOU8sRUFBRyxTQUNIK08sR0FBSSxXQUNKM04sRUFBRyxTQUNINE4sR0FBSSxXQUVSVix1QkFBd0IsV0FDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0E3RHlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLDJGQUEyRitILE1BQy9GLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FDSSxpRkFBaUZnSixNQUM3RSxLQUVSZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSx3QkFDSkMsSUFBSyxtQ0FDTEMsS0FBTSwwQ0FFVlosU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsaUJBQ1RDLFNBQVUsZUFDVkMsUUFBUyxnQkFDVEMsU0FBVSxXQUNOLE9BQXNCLElBQWZ0VSxLQUFLc0YsT0FBOEIsSUFBZnRGLEtBQUtzRixNQUMxQix3QkFDQSx5QkFFVmlQLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sUUFDTnhaLEVBQUcsa0JBQ0h5WixHQUFJLGNBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLGFBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFdBQ0pwYixFQUFHLFNBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLFNBQ0grTyxHQUFJLFdBQ0ozTixFQUFHLFNBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixXQUN4QjlRLFFBQVMsTUFDVFksWUFBYSxrQkF6RHFCcXFCLENBQVEsRUFBUSxLLGlCQ0tsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO1NBQVN3QixFQUF1Qm54RCxFQUFRaWlCLEVBQWUvcEIsR0FDbkQsSUFTSWtqQixFQUFZLElBSWhCLE9BSElwYixFQUFTLEtBQU8sSUFBT0EsR0FBVSxLQUFPQSxFQUFTLEtBQVEsS0FDekRvYixFQUFZLFFBRVRwYixFQUFTb2IsRUFiSCxDQUNMakosR0FBSSxVQUNKQyxHQUFJLFNBQ0pDLEdBQUksTUFDSkMsR0FBSSxPQUNKQyxHQUFJLFlBQ0pDLEdBQUksT0FDSkMsR0FBSSxPQU11QnZhLEdBRzlCeTNELEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxvR0FBb0crSCxNQUN4RyxLQUVKTCxZQUNJLCtEQUErREssTUFDM0QsS0FFUitsRCxrQkFBa0IsRUFDbEIvdUQsU0FBVSxrREFBa0RnSixNQUFNLEtBQ2xFZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksT0FDSkQsSUFBSyxVQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxtQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsZ0JBQ1RDLFNBQVUsZUFDVkMsUUFBUyxlQUNUQyxTQUFVLHVCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxXQUNSQyxLQUFNLGFBQ054WixFQUFHLGlCQUNIeVosR0FBSWcvQyxFQUNKcDZELEVBQUcsV0FDSHFiLEdBQUkrK0MsRUFDSmx1RCxFQUFHLFFBQ0hvUCxHQUFJOCtDLEVBQ0psNkQsRUFBRyxPQUNIcWIsR0FBSTYrQyxFQUNKNXNELEVBQUcsY0FDSGdPLEdBQUk0K0MsRUFDSjF0RCxFQUFHLFNBQ0grTyxHQUFJMitDLEVBQ0p0c0QsRUFBRyxRQUNINE4sR0FBSTArQyxHQUVSMXNELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXhFeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQVl6QjtTQUFTd0IsRUFBdUJueEQsRUFBUWlpQixFQUFlL3BCLEdBQ25ELElBVGtCMCtDLEVBQ2R3YSxFQWlCSixNQUFZLE1BQVJsNUQsRUFDTytwQixFQUFnQixTQUFXLFNBRTNCamlCLEVBQVMsS0FyQkY0MkMsR0FxQjZCNTJDLEVBcEIzQ294RCxFQVFTLENBQ1RqL0MsR0FBSThQLEVBQWdCLHlCQUEyQix5QkFDL0M3UCxHQUFJNlAsRUFBZ0Isc0JBQXdCLHNCQUM1QzVQLEdBQUksaUJBQ0pDLEdBQUksZ0JBQ0pDLEdBQUksdUJBQ0pDLEdBQUksdUJBQ0pDLEdBQUksZ0JBS2dDdmEsR0FwQnZCdVQsTUFBTSxLQUNoQm1yQyxFQUFNLElBQU8sR0FBS0EsRUFBTSxLQUFRLEdBQ2pDd2EsRUFBTSxHQUNOeGEsRUFBTSxJQUFNLEdBQUtBLEVBQU0sSUFBTSxJQUFNQSxFQUFNLElBQU0sSUFBTUEsRUFBTSxLQUFPLElBQ2hFd2EsRUFBTSxHQUNOQSxFQUFNLElBa0JsQixJQUFJN2xELEVBQWMsQ0FDZCxRQUNBLFFBQ0EsUUFDQSxRQUNBLFdBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0FNS29rRCxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsQ0FDSmhKLE9BQVEsb0ZBQW9GK1EsTUFDeEYsS0FFSjRsRCxXQUNJLGtGQUFrRjVsRCxNQUM5RSxNQUdaTCxZQUFhLENBRVQxUSxPQUFRLGdFQUFnRStRLE1BQ3BFLEtBRUo0bEQsV0FDSSxnRUFBZ0U1bEQsTUFDNUQsTUFHWmhKLFNBQVUsQ0FDTjR1RCxXQUNJLGdFQUFnRTVsRCxNQUM1RCxLQUVSL1EsT0FBUSxnRUFBZ0UrUSxNQUNwRSxLQUVKa2MsU0FBVSxpREFFZGxaLGNBQWUsdUJBQXVCaEQsTUFBTSxLQUM1QytDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ0YsWUFBYUEsRUFDYjJtRCxnQkFBaUIzbUQsRUFDakI0bUQsaUJBQWtCNW1ELEVBR2xCRCxZQUNJLDJNQUdKRCxpQkFDSSwyTUFHSjJtRCxrQkFDSSx3SEFHSkMsdUJBQ0ksNkZBQ0psd0QsZUFBZ0IsQ0FDWjJQLEdBQUksT0FDSkQsSUFBSyxVQUNMRSxFQUFHLGFBQ0hDLEdBQUksaUJBQ0pDLElBQUssdUJBQ0xDLEtBQU0sOEJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxrQkFDVEMsUUFBUyxpQkFDVEUsUUFBUyxnQkFDVEQsU0FBVSxTQUFVcUcsR0FDaEIsR0FBSUEsRUFBSWpULFNBQVd4SCxLQUFLd0gsT0FjcEIsT0FBbUIsSUFBZnhILEtBQUtzRixNQUNFLG9CQUVBLG1CQWhCWCxPQUFRdEYsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sNkJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyw2QkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLCtCQVV2QmdQLFNBQVUsU0FBVW1HLEdBQ2hCLEdBQUlBLEVBQUlqVCxTQUFXeEgsS0FBS3dILE9BY3BCLE9BQW1CLElBQWZ4SCxLQUFLc0YsTUFDRSxvQkFFQSxtQkFoQlgsT0FBUXRGLEtBQUtzRixPQUNULEtBQUssRUFDRCxNQUFPLDJCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sMkJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyw2QkFVdkJpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxXQUNSQyxLQUFNLFdBQ054WixFQUFHLG1CQUNIeVosR0FBSWcvQyxFQUNKcDZELEVBQUdvNkQsRUFDSC8rQyxHQUFJKytDLEVBQ0psdUQsRUFBRyxNQUNIb1AsR0FBSTgrQyxFQUNKbDZELEVBQUcsT0FDSHFiLEdBQUk2K0MsRUFDSjVzRCxFQUFHLFNBQ0hnTyxHQUFJNCtDLEVBQ0oxdEQsRUFBRyxRQUNIK08sR0FBSTIrQyxFQUNKdHNELEVBQUcsTUFDSDROLEdBQUkwK0MsR0FFUnorQyxjQUFlLHdCQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUFPLGlCQUFpQmdKLEtBQUtoSixJQUVqQzZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEVBQ0EsT0FDQUEsRUFBTyxHQUNQLE9BQ0FBLEVBQU8sR0FDUCxNQUVBLFVBR2Y0Tyx1QkFBd0IsbUJBQ3hCOVEsUUFBUyxTQUFVakIsRUFBUWtkLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0QsT0FBT2xkLEVBQVMsS0FDcEIsSUFBSyxJQUNELE9BQU9BLEVBQVMsTUFDcEIsSUFBSyxJQUNMLElBQUssSUFDRCxPQUFPQSxFQUFTLEtBQ3BCLFFBQ0ksT0FBT0EsSUFHbkJ5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FqTnlCdWUsQ0FBUSxFQUFRLEssaUJDQ2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSWpzRCxFQUFTLENBQ0wsUUFDQSxVQUNBLE9BQ0EsUUFDQSxNQUNBLE1BQ0EsU0FDQSxPQUNBLFVBQ0EsU0FDQSxRQUNBLFNBRUpwQixFQUFPLENBQUMsTUFBTyxPQUFRLFFBQVMsT0FBUSxPQUFRLE1BQU8sUUFFbERxdEQsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRQSxFQUNSMEgsWUFBYTFILEVBQ2JqQixTQUFVSCxFQUNWbU0sY0FBZW5NLEVBQ2ZrTSxZQUFhbE0sRUFDYlAsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlksY0FBZSxVQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUFPLFFBQVVBLEdBRXJCNkMsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sR0FDQSxNQUVKLE9BRVgrTixTQUFVLENBQ05DLFFBQVMsVUFDVEMsUUFBUyxhQUNUQyxTQUFVLHlCQUNWQyxRQUFTLGFBQ1RDLFNBQVUsNEJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sUUFDTnhaLEVBQUcsWUFDSHlaLEdBQUksV0FDSnBiLEVBQUcsU0FDSHFiLEdBQUksU0FDSm5QLEVBQUcsVUFDSG9QLEdBQUksVUFDSnBiLEVBQUcsV0FDSHFiLEdBQUksV0FDSjdPLEVBQUcsV0FDSCtPLEdBQUksV0FDSjNOLEVBQUcsU0FDSDROLEdBQUksVUFFUnNHLFNBQVUsU0FBVWxELEdBQ2hCLE9BQU9BLEVBQU9wVSxRQUFRLEtBQU0sTUFFaEN1Z0IsV0FBWSxTQUFVbk0sR0FDbEIsT0FBT0EsRUFBT3BVLFFBQVEsS0FBTSxNQUVoQ2dELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQS9FeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLG1KQUFtSitILE1BQ3ZKLEtBRUpMLFlBQ0ksNkRBQTZESyxNQUFNLEtBQ3ZFaEosU0FDSSw2RUFBNkVnSixNQUN6RSxLQUVSZ0QsY0FBZSxtQ0FBbUNoRCxNQUFNLEtBQ3hEK0MsWUFBYSxnQkFBZ0IvQyxNQUFNLEtBQ25DMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksb0JBQ0pDLElBQUssZ0NBQ0xDLEtBQU0sdUNBRVZaLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZUFDVEMsU0FBVSx3QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsWUFDUkMsS0FBTSxXQUNOeFosRUFBRyxtQkFDSHlaLEdBQUksZUFDSnBiLEVBQUcsZUFDSHFiLEdBQUksY0FDSm5QLEVBQUcsY0FDSG9QLEdBQUksYUFDSnBiLEVBQUcsY0FDSHFiLEdBQUksY0FDSjdPLEVBQUcsYUFDSCtPLEdBQUksV0FDSjNOLEVBQUcsYUFDSDROLEdBQUksWUFFUlYsdUJBQXdCLFlBQ3hCOVEsUUFBUyxNQUNUd0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBdkR5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBS2hCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsa0dBQWtHK0gsTUFDdEcsS0FFSkwsWUFBYSx3REFBd0RLLE1BQ2pFLEtBRUpoSixTQUNJLGdFQUFnRWdKLE1BQzVELEtBRVJnRCxjQUFlLGdDQUFnQ2hELE1BQU0sS0FDckQrQyxZQUFhLHFCQUFxQi9DLE1BQU0sS0FDeENnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFNBQ0pELElBQUssWUFDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssc0JBQ0xDLEtBQU0sc0NBRVZaLFNBQVUsQ0FDTkMsUUFBUyxhQUNUQyxRQUFTLGNBQ1RDLFNBQVUsYUFDVkMsUUFBUyxjQUNUQyxTQUFVLHNCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFdBQ054WixFQUFHLGVBQ0h5WixHQUFJLFdBQ0pwYixFQUFHLFlBQ0hxYixHQUFJLGNBQ0puUCxFQUFHLE1BQ0hvUCxHQUFJLFNBQ0pwYixFQUFHLE9BQ0hxYixHQUFJLFNBQ0o3TyxFQUFHLE9BQ0grTyxHQUFJLFNBQ0ozTixFQUFHLE1BQ0g0TixHQUFJLFVBRVJWLHVCQUF3QixlQUN4QjlRLFFBQVMsU0FBVWpCLEdBQ2YsT0FBT0EsRUFBUyxTQUVwQjBTLGNBQWUsNEJBQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQWlCLFNBQVZBLEdBQThCLFlBQVZBLEdBRS9CNkMsU0FBVSxTQUFVb0gsRUFBT0ssRUFBUytrQixHQUNoQyxPQUFJcGxCLEVBQVEsR0FDRG9sQixFQUFVLE9BQVMsVUFFbkJBLEVBQVUsUUFBVSxhQWxFRDRELENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlqc0QsRUFDSSxvRkFBb0YrSCxNQUNoRixLQUVSTCxFQUFjLGtEQUFrREssTUFBTSxLQUMxRSxTQUFTZ25ELEVBQU9yNkQsR0FDWixPQUFPQSxFQUFJLEdBQUtBLEVBQUksRUFFeEIsU0FBU2k2RCxFQUFVcnlELEVBQVFpaUIsRUFBZS9wQixFQUFLb3ZCLEdBQzNDLElBQUkzUSxFQUFTM1csRUFBUyxJQUN0QixPQUFROUgsR0FDSixJQUFLLElBQ0QsT0FBTytwQixHQUFpQnFGLEVBQVcsYUFBZSxnQkFDdEQsSUFBSyxLQUNELE9BQUlyRixHQUFpQnFGLEVBQ1YzUSxHQUFVODdDLEVBQU96eUQsR0FBVSxVQUFZLFVBRXZDMlcsRUFBUyxZQUV4QixJQUFLLElBQ0QsT0FBT3NMLEVBQWdCLFNBQVdxRixFQUFXLFNBQVcsVUFDNUQsSUFBSyxLQUNELE9BQUlyRixHQUFpQnFGLEVBQ1YzUSxHQUFVODdDLEVBQU96eUQsR0FBVSxTQUFXLFNBRXRDMlcsRUFBUyxXQUV4QixJQUFLLElBQ0QsT0FBT3NMLEVBQWdCLFNBQVdxRixFQUFXLFNBQVcsVUFDNUQsSUFBSyxLQUNELE9BQUlyRixHQUFpQnFGLEVBQ1YzUSxHQUFVODdDLEVBQU96eUQsR0FBVSxTQUFXLFNBRXRDMlcsRUFBUyxXQUV4QixJQUFLLElBQ0QsT0FBT3NMLEdBQWlCcUYsRUFBVyxNQUFRLE9BQy9DLElBQUssS0FDRCxPQUFJckYsR0FBaUJxRixFQUNWM1EsR0FBVTg3QyxFQUFPenlELEdBQVUsTUFBUSxPQUVuQzJXLEVBQVMsUUFFeEIsSUFBSyxJQUNELE9BQU9zTCxHQUFpQnFGLEVBQVcsU0FBVyxXQUNsRCxJQUFLLEtBQ0QsT0FBSXJGLEdBQWlCcUYsRUFDVjNRLEdBQVU4N0MsRUFBT3p5RCxHQUFVLFVBQVksWUFFdkMyVyxFQUFTLFdBRXhCLElBQUssSUFDRCxPQUFPc0wsR0FBaUJxRixFQUFXLE1BQVEsUUFDL0MsSUFBSyxLQUNELE9BQUlyRixHQUFpQnFGLEVBQ1YzUSxHQUFVODdDLEVBQU96eUQsR0FBVSxPQUFTLFNBRXBDMlcsRUFBUyxTQUt2Qmc1QyxFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVFBLEVBQ1IwSCxZQUFhQSxFQUNiM0ksU0FBVSxzREFBc0RnSixNQUFNLEtBQ3RFZ0QsY0FBZSx1QkFBdUJoRCxNQUFNLEtBQzVDK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksT0FDSkQsSUFBSyxVQUNMRSxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsZ0JBQ1RDLFNBQVUsV0FDTixPQUFRcFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sa0JBQ1gsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLGtCQUNYLEtBQUssRUFDRCxNQUFPLGtCQUNYLEtBQUssRUFDRCxNQUFPLG9CQUNYLEtBQUssRUFDRCxNQUFPLGtCQUNYLEtBQUssRUFDRCxNQUFPLG9CQUduQitPLFFBQVMsZUFDVEMsU0FBVSxXQUNOLE9BQVF0VSxLQUFLc0YsT0FDVCxLQUFLLEVBQ0QsTUFBTyx1QkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLHVCQUNYLEtBQUssRUFDRCxNQUFPLHlCQUduQmlQLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTnhaLEVBQUcyNUQsRUFDSGxnRCxHQUFJa2dELEVBQ0p0N0QsRUFBR3M3RCxFQUNIamdELEdBQUlpZ0QsRUFDSnB2RCxFQUFHb3ZELEVBQ0hoZ0QsR0FBSWdnRCxFQUNKcDdELEVBQUdvN0QsRUFDSC8vQyxHQUFJKy9DLEVBQ0o1dUQsRUFBRzR1RCxFQUNINy9DLEdBQUk2L0MsRUFDSnh0RCxFQUFHd3RELEVBQ0g1L0MsR0FBSTQvQyxHQUVSdGdELHVCQUF3QixZQUN4QjlRLFFBQVMsTUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQTlJeUJ1ZSxDQUFRLEVBQVEsSyxpQkNFbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtTQUFTK0MsRUFBb0IxeUQsRUFBUWlpQixFQUFlL3BCLEVBQUtvdkIsR0FDckQsSUFBSTNRLEVBQVMzVyxFQUFTLElBQ3RCLE9BQVE5SCxHQUNKLElBQUssSUFDRCxPQUFPK3BCLEdBQWlCcUYsRUFDbEIsZUFDQSxrQkFDVixJQUFLLEtBVUQsT0FSSTNRLEdBRFcsSUFBWDNXLEVBQ1VpaUIsRUFBZ0IsVUFBWSxVQUNwQixJQUFYamlCLEVBQ0dpaUIsR0FBaUJxRixFQUFXLFVBQVksV0FDM0N0bkIsRUFBUyxFQUNOaWlCLEdBQWlCcUYsRUFBVyxVQUFZLFdBRXhDLFNBR2xCLElBQUssSUFDRCxPQUFPckYsRUFBZ0IsYUFBZSxhQUMxQyxJQUFLLEtBVUQsT0FSSXRMLEdBRFcsSUFBWDNXLEVBQ1VpaUIsRUFBZ0IsU0FBVyxTQUNuQixJQUFYamlCLEVBQ0dpaUIsR0FBaUJxRixFQUFXLFNBQVcsV0FDMUN0bkIsRUFBUyxFQUNOaWlCLEdBQWlCcUYsRUFBVyxTQUFXLFdBRXZDckYsR0FBaUJxRixFQUFXLFFBQVUsV0FHeEQsSUFBSyxJQUNELE9BQU9yRixFQUFnQixVQUFZLFVBQ3ZDLElBQUssS0FVRCxPQVJJdEwsR0FEVyxJQUFYM1csRUFDVWlpQixFQUFnQixNQUFRLE1BQ2hCLElBQVhqaUIsRUFDR2lpQixHQUFpQnFGLEVBQVcsTUFBUSxRQUN2Q3RuQixFQUFTLEVBQ05paUIsR0FBaUJxRixFQUFXLE1BQVEsUUFFcENyRixHQUFpQnFGLEVBQVcsS0FBTyxRQUdyRCxJQUFLLElBQ0QsT0FBT3JGLEdBQWlCcUYsRUFBVyxTQUFXLFlBQ2xELElBQUssS0FRRCxPQU5JM1EsR0FEVyxJQUFYM1csRUFDVWlpQixHQUFpQnFGLEVBQVcsTUFBUSxPQUM1QixJQUFYdG5CLEVBQ0dpaUIsR0FBaUJxRixFQUFXLE1BQVEsVUFFcENyRixHQUFpQnFGLEVBQVcsTUFBUSxRQUd0RCxJQUFLLElBQ0QsT0FBT3JGLEdBQWlCcUYsRUFBVyxXQUFhLGVBQ3BELElBQUssS0FVRCxPQVJJM1EsR0FEVyxJQUFYM1csRUFDVWlpQixHQUFpQnFGLEVBQVcsUUFBVSxVQUM5QixJQUFYdG5CLEVBQ0dpaUIsR0FBaUJxRixFQUFXLFNBQVcsV0FDMUN0bkIsRUFBUyxFQUNOaWlCLEdBQWlCcUYsRUFBVyxTQUFXLFNBRXZDckYsR0FBaUJxRixFQUFXLFVBQVksU0FHMUQsSUFBSyxJQUNELE9BQU9yRixHQUFpQnFGLEVBQVcsV0FBYSxhQUNwRCxJQUFLLEtBVUQsT0FSSTNRLEdBRFcsSUFBWDNXLEVBQ1VpaUIsR0FBaUJxRixFQUFXLE9BQVMsUUFDN0IsSUFBWHRuQixFQUNHaWlCLEdBQWlCcUYsRUFBVyxPQUFTLFNBQ3hDdG5CLEVBQVMsRUFDTmlpQixHQUFpQnFGLEVBQVcsT0FBUyxPQUVyQ3JGLEdBQWlCcUYsRUFBVyxNQUFRLFFBTXJEcW9DLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSx3RkFBd0YrSCxNQUM1RixLQUVKTCxZQUNJLDhEQUE4REssTUFDMUQsS0FFUitsRCxrQkFBa0IsRUFDbEIvdUQsU0FBVSxzREFBc0RnSixNQUFNLEtBQ3RFZ0QsY0FBZSxxQ0FBcUNoRCxNQUFNLEtBQzFEK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxPQUNKRCxJQUFLLFVBQ0xFLEVBQUcsZUFDSEMsR0FBSSxlQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWixTQUFVLENBQ05DLFFBQVMsZ0JBQ1RDLFFBQVMsZ0JBRVRDLFNBQVUsV0FDTixPQUFRcFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sd0JBQ1gsS0FBSyxFQUNELE1BQU8sc0JBQ1gsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8scUJBR25CK08sUUFBUyxpQkFDVEMsU0FBVSxXQUNOLE9BQVF0VSxLQUFLc0YsT0FDVCxLQUFLLEVBQ0QsTUFBTywrQkFDWCxLQUFLLEVBQ0QsTUFBTyw2QkFDWCxLQUFLLEVBQ0QsTUFBTyw4QkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyw0QkFHbkJpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFVBQ054WixFQUFHZzZELEVBQ0h2Z0QsR0FBSXVnRCxFQUNKMzdELEVBQUcyN0QsRUFDSHRnRCxHQUFJc2dELEVBQ0p6dkQsRUFBR3l2RCxFQUNIcmdELEdBQUlxZ0QsRUFDSno3RCxFQUFHeTdELEVBQ0hwZ0QsR0FBSW9nRCxFQUNKanZELEVBQUdpdkQsRUFDSGxnRCxHQUFJa2dELEVBQ0o3dEQsRUFBRzZ0RCxFQUNIamdELEdBQUlpZ0QsR0FFUjNnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0F6S3lCdWUsQ0FBUSxFQUFRLEssaUJDS2xELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxnRkFBZ0YrSCxNQUNwRixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUsNERBQTREZ0osTUFDbEUsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsbUJBQW1CL0MsTUFBTSxLQUN0Q2dsRCxvQkFBb0IsRUFDcEIvOUMsY0FBZSxRQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUEyQixNQUFwQkEsRUFBTW92QixPQUFPLElBRXhCdnNCLFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBT3BsQixFQUFRLEdBQUssS0FBTyxNQUUvQm5CLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsY0FDVEMsU0FBVSx3QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxhQUNOeFosRUFBRyxlQUNIeVosR0FBSSxhQUNKcGIsRUFBRyxhQUNIcWIsR0FBSSxZQUNKblAsRUFBRyxVQUNIb1AsR0FBSSxTQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxVQUNKN08sRUFBRyxXQUNIK08sR0FBSSxVQUNKM04sRUFBRyxVQUNINE4sR0FBSSxXQUVSVix1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0E3RHlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSXlFLEVBQWEsQ0FDYkMsTUFBTyxDQUVIbGlELEdBQUksQ0FBQyxVQUFXLFVBQVcsV0FDM0JwYixFQUFHLENBQUMsY0FBZSxpQkFDbkJxYixHQUFJLENBQUMsUUFBUyxTQUFVLFVBQ3hCblAsRUFBRyxDQUFDLFlBQWEsZUFDakJvUCxHQUFJLENBQUMsTUFBTyxPQUFRLFFBQ3BCcGIsRUFBRyxDQUFDLFlBQWEsZUFDakJxYixHQUFJLENBQUMsTUFBTyxPQUFRLFFBQ3BCN08sRUFBRyxDQUFDLGNBQWUsaUJBQ25CK08sR0FBSSxDQUFDLFFBQVMsU0FBVSxVQUN4QjNOLEVBQUcsQ0FBQyxlQUFnQixnQkFDcEI0TixHQUFJLENBQUMsU0FBVSxTQUFVLFdBRTdCNmhELHVCQUF3QixTQUFVdDBELEVBQVF1MEQsR0FDdEMsT0FDSXYwRCxFQUFTLElBQU0sR0FDZkEsRUFBUyxJQUFNLElBQ2RBLEVBQVMsSUFBTSxJQUFNQSxFQUFTLEtBQU8sSUFFL0JBLEVBQVMsSUFBTyxFQUFJdTBELEVBQVEsR0FBS0EsRUFBUSxHQUU3Q0EsRUFBUSxJQUVuQmxDLFVBQVcsU0FBVXJ5RCxFQUFRaWlCLEVBQWUvcEIsRUFBS292QixHQUM3QyxJQUNJcXRDLEVBREFKLEVBQVVILEVBQVdDLE1BQU1uOEQsR0FHL0IsT0FBbUIsSUFBZkEsRUFBSXlCLE9BRVEsTUFBUnpCLEdBQWUrcEIsRUFBc0IsZUFDbENxRixHQUFZckYsRUFBZ0JzeUMsRUFBUSxHQUFLQSxFQUFRLElBRzVESSxFQUFPUCxFQUFXRSx1QkFBdUJ0MEQsRUFBUXUwRCxHQUVyQyxPQUFScjhELEdBQWdCK3BCLEdBQTBCLFdBQVQweUMsRUFDMUIzMEQsRUFBUyxVQUdiQSxFQUFTLElBQU0yMEQsS0FJckJoRixFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsbUZBQW1GK0gsTUFDdkYsS0FFSkwsWUFDSSwyREFBMkRLLE1BQU0sS0FDckUrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsd0RBQXdEZ0osTUFDOUQsS0FFSmdELGNBQWUscUNBQXFDaEQsTUFBTSxLQUMxRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksT0FDSkQsSUFBSyxVQUNMRSxFQUFHLGNBQ0hDLEdBQUksZ0JBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNEJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRcFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNELE1BQU8scUJBQ1gsS0FBSyxFQUNELE1BQU8sc0JBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sb0JBR25CK08sUUFBUyxjQUNUQyxTQUFVLFdBVU4sTUFUbUIsQ0FDZiw0QkFDQSxnQ0FDQSw0QkFDQSwwQkFDQSw4QkFDQSwyQkFDQSw0QkFFZ0J0VSxLQUFLc0YsUUFFN0JpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ054WixFQUFHLG1CQUNIeVosR0FBSWlpRCxFQUFXL0IsVUFDZnQ3RCxFQUFHcTlELEVBQVcvQixVQUNkamdELEdBQUlnaUQsRUFBVy9CLFVBQ2ZwdkQsRUFBR214RCxFQUFXL0IsVUFDZGhnRCxHQUFJK2hELEVBQVcvQixVQUNmcDdELEVBQUdtOUQsRUFBVy9CLFVBQ2QvL0MsR0FBSThoRCxFQUFXL0IsVUFDZjV1RCxFQUFHMndELEVBQVcvQixVQUNkNy9DLEdBQUk0aEQsRUFBVy9CLFVBQ2Z4dEQsRUFBR3V2RCxFQUFXL0IsVUFDZDUvQyxHQUFJMmhELEVBQVcvQixXQUVuQnRnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0E5SHlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSXlFLEVBQWEsQ0FDYkMsTUFBTyxDQUVIbGlELEdBQUksQ0FBQyxVQUFXLFVBQVcsV0FDM0JwYixFQUFHLENBQUMsY0FBZSxpQkFDbkJxYixHQUFJLENBQUMsUUFBUyxTQUFVLFVBQ3hCblAsRUFBRyxDQUFDLFlBQWEsZUFDakJvUCxHQUFJLENBQUMsTUFBTyxPQUFRLFFBQ3BCcGIsRUFBRyxDQUFDLFlBQWEsZUFDakJxYixHQUFJLENBQUMsTUFBTyxPQUFRLFFBQ3BCN08sRUFBRyxDQUFDLGNBQWUsaUJBQ25CK08sR0FBSSxDQUFDLFFBQVMsU0FBVSxVQUN4QjNOLEVBQUcsQ0FBQyxlQUFnQixnQkFDcEI0TixHQUFJLENBQUMsU0FBVSxTQUFVLFdBRTdCNmhELHVCQUF3QixTQUFVdDBELEVBQVF1MEQsR0FDdEMsT0FDSXYwRCxFQUFTLElBQU0sR0FDZkEsRUFBUyxJQUFNLElBQ2RBLEVBQVMsSUFBTSxJQUFNQSxFQUFTLEtBQU8sSUFFL0JBLEVBQVMsSUFBTyxFQUFJdTBELEVBQVEsR0FBS0EsRUFBUSxHQUU3Q0EsRUFBUSxJQUVuQmxDLFVBQVcsU0FBVXJ5RCxFQUFRaWlCLEVBQWUvcEIsRUFBS292QixHQUM3QyxJQUNJcXRDLEVBREFKLEVBQVVILEVBQVdDLE1BQU1uOEQsR0FHL0IsT0FBbUIsSUFBZkEsRUFBSXlCLE9BRVEsTUFBUnpCLEdBQWUrcEIsRUFBc0IsZUFDbENxRixHQUFZckYsRUFBZ0JzeUMsRUFBUSxHQUFLQSxFQUFRLElBRzVESSxFQUFPUCxFQUFXRSx1QkFBdUJ0MEQsRUFBUXUwRCxHQUVyQyxPQUFScjhELEdBQWdCK3BCLEdBQTBCLFdBQVQweUMsRUFDMUIzMEQsRUFBUyxVQUdiQSxFQUFTLElBQU0yMEQsS0FJakJoRixFQUFPajhDLGFBQWEsVUFBVyxDQUN4Q2hRLE9BQVEsbUZBQW1GK0gsTUFDdkYsS0FFSkwsWUFDSSwyREFBMkRLLE1BQU0sS0FDckUrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsc0RBQXNEZ0osTUFBTSxLQUN0RWdELGNBQWUscUNBQXFDaEQsTUFBTSxLQUMxRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksT0FDSkQsSUFBSyxVQUNMRSxFQUFHLGNBQ0hDLEdBQUksZ0JBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNEJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRcFUsS0FBS3NGLE9BQ1QsS0FBSyxFQUNELE1BQU8sc0JBQ1gsS0FBSyxFQUNELE1BQU8scUJBQ1gsS0FBSyxFQUNELE1BQU8sc0JBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sb0JBR25CK08sUUFBUyxjQUNUQyxTQUFVLFdBVU4sTUFUbUIsQ0FDZiwyQkFDQSwrQkFDQSw0QkFDQSwwQkFDQSw4QkFDQSwyQkFDQSw0QkFFZ0J0VSxLQUFLc0YsUUFFN0JpUCxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ054WixFQUFHLG1CQUNIeVosR0FBSWlpRCxFQUFXL0IsVUFDZnQ3RCxFQUFHcTlELEVBQVcvQixVQUNkamdELEdBQUlnaUQsRUFBVy9CLFVBQ2ZwdkQsRUFBR214RCxFQUFXL0IsVUFDZGhnRCxHQUFJK2hELEVBQVcvQixVQUNmcDdELEVBQUdtOUQsRUFBVy9CLFVBQ2QvL0MsR0FBSThoRCxFQUFXL0IsVUFDZjV1RCxFQUFHMndELEVBQVcvQixVQUNkNy9DLEdBQUk0aEQsRUFBVy9CLFVBQ2Z4dEQsRUFBR3V2RCxFQUFXL0IsVUFDZDUvQyxHQUFJMmhELEVBQVcvQixXQUVuQnRnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0E1SHlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxtSEFBbUgrSCxNQUN2SCxLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQ0ksc0VBQXNFZ0osTUFDbEUsS0FFUmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQ2dsRCxvQkFBb0IsRUFDcEIxdUQsZUFBZ0IsQ0FDWjJQLEdBQUksU0FDSkQsSUFBSyxZQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVlosU0FBVSxDQUNOQyxRQUFTLG1CQUNUQyxRQUFTLGtCQUNUQyxTQUFVLGdCQUNWQyxRQUFTLGlCQUNUQyxTQUFVLDhCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLGlCQUNOeFosRUFBRyxxQkFDSHlaLEdBQUksY0FDSnBiLEVBQUcsU0FDSHFiLEdBQUksYUFDSm5QLEVBQUcsU0FDSG9QLEdBQUksYUFDSnBiLEVBQUcsVUFDSHFiLEdBQUksY0FDSjdPLEVBQUcsVUFDSCtPLEdBQUksY0FDSjNOLEVBQUcsVUFDSDROLEdBQUksZUFFUkMsY0FBZSxtQ0FDZjVXLFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBSXBsQixFQUFRLEdBQ0QsVUFDQUEsRUFBUSxHQUNSLFFBQ0FBLEVBQVEsR0FDUixhQUVBLFdBR2Z5VixhQUFjLFNBQVV4VixFQUFNckgsR0FJMUIsT0FIYSxLQUFUcUgsSUFDQUEsRUFBTyxHQUVNLFlBQWJySCxFQUNPcUgsRUFDYSxVQUFickgsRUFDQXFILEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLGVBQWJySCxHQUEwQyxZQUFiQSxFQUN2QixJQUFUcUgsRUFDTyxFQUVKQSxFQUFPLFFBSlgsR0FPWDRPLHVCQUF3QixVQUN4QjlRLFFBQVMsS0FDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQWxGeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQWEsa0RBQWtESyxNQUFNLEtBQ3JFaEosU0FBVSxvREFBb0RnSixNQUFNLEtBQ3BFZ0QsY0FBZSw4QkFBOEJoRCxNQUFNLEtBQ25EK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSywwQkFDTEMsS0FBTSwrQkFDTnlnRCxJQUFLLG1CQUNMQyxLQUFNLHdCQUVWdGhELFNBQVUsQ0FDTkMsUUFBUyxZQUNUQyxRQUFTLGVBQ1RFLFFBQVMsWUFDVEQsU0FBVSxlQUNWRSxTQUFVLGlCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLGVBQ054WixFQUFHLGlCQUNIeVosR0FBSSxjQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxhQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxZQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxXQUNKN08sRUFBRyxXQUNIK08sR0FBSSxhQUNKM04sRUFBRyxTQUNINE4sR0FBSSxTQUVSVix1QkFBd0IsbUJBQ3hCOVEsUUFBUyxTQUFVakIsR0FDZixJQUFJekcsRUFBSXlHLEVBQVMsR0FXakIsT0FBT0EsR0FUNkIsTUFBeEJBLEVBQVMsSUFBTyxJQUNkLEtBQ00sSUFBTnpHLEdBRVEsSUFBTkEsRUFEQSxLQUlJLE9BSXhCa0wsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBbEV5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsc0ZBQXNGK0gsTUFDMUYsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUNJLDhEQUE4RGdKLE1BQzFELEtBRVJnRCxjQUFlLGtDQUFrQ2hELE1BQU0sS0FDdkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUNnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFVBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGlCQUNUQyxTQUFVLDhCQUNWQyxRQUFTLFlBQ1RDLFNBQVUsa0NBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLGFBQ1JDLEtBQU0sV0FDTnhaLEVBQUcsYUFDSHlaLEdBQUksYUFDSnBiLEVBQUcsY0FDSHFiLEdBQUksWUFDSm5QLEVBQUcsYUFDSG9QLEdBQUksV0FDSnBiLEVBQUcsWUFDSHFiLEdBQUksVUFDSjdPLEVBQUcsY0FDSCtPLEdBQUksV0FDSjNOLEVBQUcsY0FDSDROLEdBQUksWUFFUmhPLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXJEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJQyxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSGhWLEVBQUcsSUFDSEMsRUFBRyxJQUNIZ1YsRUFBRyxLQUVQQyxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUdKVixFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsMEZBQTBGK0gsTUFDOUYsS0FFSkwsWUFDSSwwRkFBMEZLLE1BQ3RGLEtBRVJoSixTQUNJLDhGQUE4RmdKLE1BQzFGLEtBRVJnRCxjQUFlLG1EQUFtRGhELE1BQzlELEtBRUorQyxZQUFhLHNCQUFzQi9DLE1BQU0sS0FDekMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWWixTQUFVLENBQ05DLFFBQVMsYUFDVEMsUUFBUyxZQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsY0FDVEMsU0FBVSx5QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxVQUNOeFosRUFBRyxvQkFDSHlaLEdBQUksZUFDSnBiLEVBQUcsY0FDSHFiLEdBQUksZ0JBQ0puUCxFQUFHLGdCQUNIb1AsR0FBSSxlQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxhQUNKN08sRUFBRyxZQUNIK08sR0FBSSxjQUNKM04sRUFBRyxhQUNINE4sR0FBSSxlQUVSVix1QkFBd0IsYUFDeEI5USxRQUFTLFNBQVVqQixHQUNmLE9BQU9BLEVBQVMsT0FFcEIrWSxTQUFVLFNBQVVsRCxHQUNoQixPQUFPQSxFQUFPcFUsUUFBUSxpQkFBaUIsU0FBVUQsR0FDN0MsT0FBTzZ1RCxFQUFVN3VELE9BR3pCd2dCLFdBQVksU0FBVW5NLEdBQ2xCLE9BQU9BLEVBQU9wVSxRQUFRLE9BQU8sU0FBVUQsR0FDbkMsT0FBT291RCxFQUFVcHVELE9BSXpCa1IsY0FBZSx3Q0FDZjVXLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEVBQ0EsU0FDQUEsRUFBTyxFQUNQLFNBQ0FBLEVBQU8sR0FDUCxRQUNBQSxFQUFPLEdBQ1AsV0FDQUEsRUFBTyxHQUNQLFdBQ0FBLEVBQU8sR0FDUCxRQUVBLFVBR2Z3VixhQUFjLFNBQVV4VixFQUFNckgsR0FJMUIsT0FIYSxLQUFUcUgsSUFDQUEsRUFBTyxHQUVNLFVBQWJySCxFQUNPcUgsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osVUFBYnJILEdBQXFDLFNBQWJBLEdBRVgsWUFBYkEsR0FDQXFILEdBQVEsR0FGUkEsRUFJQUEsRUFBTyxJQUd0QnNCLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQWpJeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLHdGQUF3RitILE1BQzVGLEtBRUpMLFlBQ0ksbUVBQW1FSyxNQUMvRCxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUNJLDhEQUE4RGdKLE1BQzFELEtBRVJnRCxjQUFlLGtDQUFrQ2hELE1BQU0sS0FDdkQrQyxZQUFhLHFCQUFxQi9DLE1BQU0sS0FDeEMxSixlQUFnQixDQUNaMlAsR0FBSSxTQUNKRCxJQUFLLFlBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHNCQUNMQyxLQUFNLDZCQUVWWixTQUFVLENBQ05DLFFBQVMsWUFDVEMsUUFBUyxZQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsYUFDVEMsU0FBVSxnQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxZQUNOeFosRUFBRyxpQkFDSHlaLEdBQUksYUFDSnBiLEVBQUcsWUFDSHFiLEdBQUksY0FDSm5QLEVBQUcsU0FDSG9QLEdBQUksV0FDSnBiLEVBQUcsVUFDSHFiLEdBQUksWUFDSjdPLEVBQUcsU0FDSCtPLEdBQUksV0FDSjNOLEVBQUcsY0FDSDROLEdBQUksaUJBRVJWLHVCQUF3QixXQUN4QjlRLFFBQVMsTUFDVHlSLGNBQWUsaUNBQ2ZpRyxhQUFjLFNBQVV4VixFQUFNckgsR0FJMUIsT0FIYSxLQUFUcUgsSUFDQUEsRUFBTyxHQUVNLFdBQWJySCxFQUNPcUgsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osU0FBYnJILEVBQ0FxSCxFQUNhLGNBQWJySCxFQUNBcUgsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsYUFBYnJILEVBQ0FxSCxFQUFPLFFBRFgsR0FJWHJILFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEVBQ0EsU0FDQUEsRUFBTyxHQUNQLE9BQ0FBLEVBQU8sR0FDUCxZQUNBQSxFQUFPLEdBQ1AsV0FFQSxVQUdmc0IsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBdEZ5QnVlLENBQVEsRUFBUSxLLGlCQ0tsRCxTQUFXeWpDLEdBQVU7a0NBSWZBO0VBQU9qOEMsYUFBYSxNQUFPLENBQ2pDaFEsT0FBUSwwRkFBMEYrSCxNQUM5RixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUsa0RBQWtEZ0osTUFBTSxLQUNsRWdELGNBQWUsaUNBQWlDaEQsTUFBTSxLQUN0RCtDLFlBQWEseUJBQXlCL0MsTUFBTSxLQUM1QzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxnQkFDVEMsUUFBUyxnQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxvQkFDVEMsU0FBVSwrQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxXQUNOeFosRUFBRyxnQkFDSHlaLEdBQUksYUFDSnBiLEVBQUcsYUFDSHFiLEdBQUksWUFDSm5QLEVBQUcsV0FDSG9QLEdBQUksVUFDSnBiLEVBQUcsWUFDSHFiLEdBQUksV0FDSjdPLEVBQUcsWUFDSCtPLEdBQUksV0FDSjNOLEVBQUcsWUFDSDROLEdBQUksWUFFUlYsdUJBQXdCLHVCQUN4QjlRLFFBQVMsU0FBVWpCLEdBQ2YsSUFBSXpHLEVBQUl5RyxFQUFTLEdBV2pCLE9BQU9BLEdBVDZCLE1BQXhCQSxFQUFTLElBQU8sSUFDZCxLQUNNLElBQU56RyxFQUNFLEtBQ00sSUFBTkEsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDQSxPQUd4QmtMLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQWhFeUJ1ZSxDQUFRLEVBQVEsSyxpQkNDbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJZSxFQUFXLENBQ1hOLEVBQUcsTUFDSFAsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIaFYsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEdBQUksTUFDSkMsR0FBSSxNQUNKQyxHQUFJLE1BQ0pzVixHQUFJLE1BQ0pHLEdBQUksTUFDSjRDLEdBQUksTUFDSjlDLEdBQUksTUFDSkcsR0FBSSxNQUNKTixHQUFJLE1BQ0pDLEdBQUksTUFDSk0sR0FBSSxNQUNKSCxJQUFLLE9BR0FwQixFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEsQ0FDSmhKLE9BQVEscUZBQXFGK1EsTUFDekYsS0FFSjRsRCxXQUNJLHlFQUF5RTVsRCxNQUNyRSxNQUdaTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUseURBQXlEZ0osTUFDL0QsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxtQkFDVEMsUUFBUyxtQkFDVEUsUUFBUyxtQkFDVEQsU0FBVSxrQ0FDVkUsU0FBVSxvQ0FDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxTQUNOeFosRUFBRyxlQUNIM0IsRUFBRyxZQUNIcWIsR0FBSSxZQUNKblAsRUFBRyxVQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxTQUNIK08sR0FBSSxTQUNKM04sRUFBRyxTQUNINE4sR0FBSSxVQUVSQyxjQUFlLHFCQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxRQUFickgsRUFDT3FILEVBQU8sRUFBSUEsRUFBT0EsRUFBTyxHQUNaLFNBQWJySCxFQUNBcUgsRUFDYSxRQUFickgsRUFDQXFILEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFVBQWJySCxFQUNBcUgsRUFBTyxRQURYLEdBSVhySCxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLE9BQUlubEIsRUFBTyxFQUNBLE1BQ0FBLEVBQU8sR0FDUCxPQUNBQSxFQUFPLEdBQ1AsTUFDQUEsRUFBTyxHQUNQLFFBRUEsT0FHZjRPLHVCQUF3QixrQkFDeEI5USxRQUFTLFNBQVVqQixHQUdmLE9BQU9BLEdBQVUwd0QsRUFBUzF3RCxJQUFXMHdELEVBRjdCMXdELEVBQVMsS0FFbUMwd0QsRUFENUMxd0QsR0FBVSxJQUFNLElBQU0sUUFHbEN5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FuSHlCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxvR0FBb0crSCxNQUN4RyxLQUVKTCxZQUNJLGlFQUFpRUssTUFDN0QsS0FFUitsRCxrQkFBa0IsRUFDbEIvdUQsU0FBVSxpREFBaURnSixNQUFNLEtBQ2pFZ0QsY0FBZSw4Q0FBOENoRCxNQUFNLEtBQ25FK0MsWUFBYSx5QkFBeUIvQyxNQUFNLEtBQzVDZ2xELG9CQUFvQixFQUNwQjF1RCxlQUFnQixDQUNaMlAsR0FBSSxPQUNKRCxJQUFLLFVBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHdCQUNMQyxLQUFNLG9DQUVWWSxjQUFlLHdCQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUFpQixlQUFWQSxHQUVYNkMsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixPQUFJbmxCLEVBQU8sR0FDQSxhQUVBLGNBR2YrTixTQUFVLENBQ05DLFFBQVMsbUJBQ1RDLFFBQVMscUJBQ1RDLFNBQVUscUJBQ1ZDLFFBQVMsd0JBQ1RDLFNBQVUsNkJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sWUFDTnhaLEVBQUcsZUFDSHlaLEdBQUksWUFDSnBiLEVBQUcsU0FDSHFiLEdBQUksVUFDSm5QLEVBQUcsWUFDSG9QLEdBQUksYUFDSnBiLEVBQUcsUUFDSHFiLEdBQUksU0FDSi9OLEVBQUcsWUFDSGdPLEdBQUksYUFDSjlPLEVBQUcsVUFDSCtPLEdBQUksV0FDSjNOLEVBQUcsT0FDSDROLEdBQUksV0EvRDBCeVosQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSWUsRUFBVyxDQUNYYixFQUFHLFFBQ0hJLEVBQUcsUUFDSDlVLEVBQUcsUUFDSHdWLEdBQUksUUFDSkMsR0FBSSxRQUNKZCxFQUFHLE9BQ0hLLEVBQUcsT0FDSFUsR0FBSSxPQUNKQyxHQUFJLE9BQ0pmLEVBQUcsUUFDSEMsRUFBRyxRQUNIZSxJQUFLLFFBQ0xiLEVBQUcsT0FDSDlVLEVBQUcsUUFDSEMsR0FBSSxRQUNKMlYsR0FBSSxRQUNKQyxHQUFJLFFBQ0pDLEdBQUksU0FHQ3ZCLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSwrRUFBK0UrSCxNQUNuRixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUsd0RBQXdEZ0osTUFDOUQsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxtQkFDVEMsUUFBUyxtQkFDVEMsU0FBVSwyQkFDVkMsUUFBUyxZQUNUQyxTQUFVLDBCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFFBQ054WixFQUFHLGlCQUNIM0IsRUFBRyxZQUNIcWIsR0FBSSxXQUNKblAsRUFBRyxZQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxTQUNIK08sR0FBSSxRQUNKM04sRUFBRyxVQUNINE4sR0FBSSxVQUVSeFIsUUFBUyxTQUFVakIsRUFBUWtkLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBQ0wsSUFBSyxLQUNELE9BQU9sZCxFQUNYLFFBQ0ksR0FBZSxJQUFYQSxFQUVBLE9BQU9BLEVBQVMsUUFFcEIsSUFBSTFHLEVBQUkwRyxFQUFTLEdBR2pCLE9BQU9BLEdBQVUwd0QsRUFBU3AzRCxJQUFNbzNELEVBRnZCMXdELEVBQVMsSUFBTzFHLElBRXNCbzNELEVBRHZDMXdELEdBQVUsSUFBTSxJQUFNLFNBSTFDeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBekZ5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSWRBO0VBQU9qOEMsYUFBYSxRQUFTLENBQ3BDaFEsT0FBUSwwRkFBMEYrSCxNQUM5RixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUseURBQXlEZ0osTUFDL0QsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsd0JBQXdCL0MsTUFBTSxLQUMzQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxZQUNIQyxHQUFJLGVBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxvQkFDVEMsUUFBUyxnQkFDVEMsU0FBVSwwQkFDVkMsUUFBUyxlQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxnQkFDUkMsS0FBTSxtQkFDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLGFBQ0pwYixFQUFHLGVBQ0hxYixHQUFJLFlBQ0puUCxFQUFHLGFBQ0hvUCxHQUFJLFVBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLFVBQ0o3TyxFQUFHLGNBQ0grTyxHQUFJLFdBQ0ozTixFQUFHLGFBQ0g0TixHQUFJLFdBRVJWLHVCQUF3QixVQUN4QjlRLFFBQVMsU0FBVWpCLEdBQ2YsT0FBT0EsR0FFWHlFLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXZEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUl6QjtJQUFJaUYsRUFBZSxpREFBaURucEQsTUFBTSxLQTRCMUUsU0FBUzRtRCxFQUFVcnlELEVBQVFpaUIsRUFBZXBNLEVBQVF5UixHQUM5QyxJQUFJdXRDLEVBaUJSLFNBQXNCNzBELEdBQ2xCLElBQUk4MEQsRUFBVTEwRCxLQUFLMEgsTUFBTzlILEVBQVMsSUFBUSxLQUN2QyswRCxFQUFNMzBELEtBQUswSCxNQUFPOUgsRUFBUyxJQUFPLElBQ2xDZzFELEVBQU1oMUQsRUFBUyxHQUNmMjBELEVBQU8sR0FVWCxPQVRJRyxFQUFVLElBQ1ZILEdBQVFDLEVBQWFFLEdBQVcsU0FFaENDLEVBQU0sSUFDTkosSUFBa0IsS0FBVEEsRUFBYyxJQUFNLElBQU1DLEVBQWFHLEdBQU8sT0FFdkRDLEVBQU0sSUFDTkwsSUFBa0IsS0FBVEEsRUFBYyxJQUFNLElBQU1DLEVBQWFJLElBRXBDLEtBQVRMLEVBQWMsT0FBU0EsRUEvQmJNLENBQWFqMUQsR0FDOUIsT0FBUTZWLEdBQ0osSUFBSyxLQUNELE9BQU9nL0MsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxRQXFCdEJsRixFQUFPajhDLGFBQWEsTUFBTyxDQUNqQ2hRLE9BQVEsa01BQWtNK0gsTUFDdE0sS0FFSkwsWUFDSSwwSEFBMEhLLE1BQ3RILEtBRVIrbEQsa0JBQWtCLEVBQ2xCL3VELFNBQVUsMkRBQTJEZ0osTUFDakUsS0FFSmdELGNBQ0ksMkRBQTJEaEQsTUFBTSxLQUNyRStDLFlBQ0ksMkRBQTJEL0MsTUFBTSxLQUNyRTFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGNBQ1RDLFNBQVUsTUFDVkMsUUFBUyxjQUNUQyxTQUFVLE1BQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQTlGUixTQUF5QnRRLEdBQ3JCLElBQUkwZixFQUFPMWYsRUFTWCxPQVJBMGYsR0FDK0IsSUFBM0IxZixFQUFPbUgsUUFBUSxPQUNUdVksRUFBS3BpQixNQUFNLEdBQUksR0FBSyxPQUNPLElBQTNCMEMsRUFBT21ILFFBQVEsT0FDYnVZLEVBQUtwaUIsTUFBTSxHQUFJLEdBQUssT0FDTyxJQUEzQjBDLEVBQU9tSCxRQUFRLE9BQ2J1WSxFQUFLcGlCLE1BQU0sR0FBSSxHQUFLLE1BQ3BCb2lCLEVBQU8sUUFzRmpCblAsS0FsRlIsU0FBdUJ2USxHQUNuQixJQUFJMGYsRUFBTzFmLEVBU1gsT0FSQTBmLEdBQytCLElBQTNCMWYsRUFBT21ILFFBQVEsT0FDVHVZLEVBQUtwaUIsTUFBTSxHQUFJLEdBQUssT0FDTyxJQUEzQjBDLEVBQU9tSCxRQUFRLE9BQ2J1WSxFQUFLcGlCLE1BQU0sR0FBSSxHQUFLLE9BQ08sSUFBM0IwQyxFQUFPbUgsUUFBUSxPQUNidVksRUFBS3BpQixNQUFNLEdBQUksR0FBSyxNQUNwQm9pQixFQUFPLFFBMEVqQjNvQixFQUFHLFVBQ0h5WixHQUFJa2dELEVBQ0p0N0QsRUFBRyxVQUNIcWIsR0FBSWlnRCxFQUNKcHZELEVBQUcsVUFDSG9QLEdBQUlnZ0QsRUFDSnA3RCxFQUFHLFVBQ0hxYixHQUFJKy9DLEVBQ0o1dUQsRUFBRyxVQUNIK08sR0FBSTYvQyxFQUNKeHRELEVBQUcsVUFDSDROLEdBQUk0L0MsR0FFUnRnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0ExSHlCdWUsQ0FBUSxFQUFRLEssaUJDSWxELFNBQVd5akMsR0FBVTtrQ0FJekI7SUFBSWUsRUFBVyxDQUNYYixFQUFHLFFBQ0hJLEVBQUcsUUFDSDlVLEVBQUcsUUFDSHdWLEdBQUksUUFDSkMsR0FBSSxRQUNKZCxFQUFHLE9BQ0hLLEVBQUcsT0FDSFUsR0FBSSxPQUNKQyxHQUFJLE9BQ0pmLEVBQUcsUUFDSEMsRUFBRyxRQUNIZSxJQUFLLFFBQ0xiLEVBQUcsT0FDSDlVLEVBQUcsUUFDSEMsR0FBSSxRQUNKMlYsR0FBSSxRQUNKQyxHQUFJLFFBQ0pDLEdBQUksU0FHQ3ZCLEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSw2RUFBNkUrSCxNQUNqRixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUsd0RBQXdEZ0osTUFDOUQsS0FFSmdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzNQLFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBSXBsQixFQUFRLEdBQ0RvbEIsRUFBVSxLQUFPLEtBRWpCQSxFQUFVLEtBQU8sTUFHaEM1VixjQUFlLGNBQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQWlCLE9BQVZBLEdBQTRCLE9BQVZBLEdBRTdCOEksZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLGtCQUNUQyxTQUFVLDJCQUNWQyxRQUFTLFdBQ1RDLFNBQVUseUJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sVUFDTnhaLEVBQUcsZ0JBQ0h5WixHQUFJLFlBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLFlBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFVBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFNBQ0ovTixFQUFHLFlBQ0hnTyxHQUFJLFdBQ0o5TyxFQUFHLFNBQ0grTyxHQUFJLFFBQ0ozTixFQUFHLFVBQ0g0TixHQUFJLFVBRVJ4UixRQUFTLFNBQVVqQixFQUFRa2QsR0FDdkIsT0FBUUEsR0FDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FDTCxJQUFLLEtBQ0QsT0FBT2xkLEVBQ1gsUUFDSSxHQUFlLElBQVhBLEVBRUEsT0FBT0EsRUFBUyxRQUVwQixJQUFJMUcsRUFBSTBHLEVBQVMsR0FHakIsT0FBT0EsR0FBVTB3RCxFQUFTcDNELElBQU1vM0QsRUFGdkIxd0QsRUFBUyxJQUFPMUcsSUFFc0JvM0QsRUFEdkMxd0QsR0FBVSxJQUFNLElBQU0sU0FJMUN5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0F2R3lCdWUsQ0FBUSxFQUFRLEssaUJDR2xELFNBQVd5akMsR0FBVTtrQ0FpRXpCO1NBQVMrQyxFQUFvQjF5RCxFQUFRaWlCLEVBQWUvcEIsRUFBS292QixHQUNyRCxJQUFJNXNCLEVBQVMsQ0FDVGhDLEVBQUcsQ0FBQyxrQkFBbUIsbUJBQ3ZCeVosR0FBSSxDQUFDblMsRUFBUyxXQUFpQkEsRUFBUyxZQUN4Q2pKLEVBQUcsQ0FBQyxVQUFXLGNBQ2ZxYixHQUFJLENBQUNwUyxFQUFTLFNBQWVBLEVBQVMsVUFDdENpRCxFQUFHLENBQUMsVUFBVyxlQUNmb1AsR0FBSSxDQUFDclMsRUFBUyxTQUFlQSxFQUFTLFVBQ3RDL0ksRUFBRyxDQUFDLFVBQVcsZUFDZnFiLEdBQUksQ0FBQ3RTLEVBQVMsU0FBZUEsRUFBUyxVQUN0Q3lELEVBQUcsQ0FBQyxTQUFVLGFBQ2QrTyxHQUFJLENBQUN4UyxFQUFTLFNBQWVBLEVBQVMsVUFDdEM2RSxFQUFHLENBQUMsUUFBUyxZQUNiNE4sR0FBSSxDQUFDelMsRUFBUyxPQUFhQSxFQUFTLFNBRXhDLE9BQU9zbkIsR0FFRHJGLEVBREF2bkIsRUFBT3hDLEdBQUssR0FHVndDLEVBQU94QyxHQUFLLEdBOUVkeTNELEVBQU9qOEMsYUFBYSxNQUFPLENBQ2pDaFEsT0FBUSxzRkFBc0YrSCxNQUMxRixLQUVKTCxZQUFhLGtEQUFrREssTUFBTSxLQUNyRWhKLFNBQVUsc0RBQXNEZ0osTUFBTSxLQUN0RWdELGNBQWUsOEJBQThCaEQsTUFBTSxLQUNuRCtDLFlBQWEsdUJBQXVCL0MsTUFBTSxLQUMxQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLHdCQUNKQyxJQUFLLDhCQUNMQyxLQUFNLDBDQUVWWSxjQUFlLGFBQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQU8sUUFBVUEsRUFBTWlNLGVBRTNCcEosU0FBVSxTQUFVb0gsRUFBT0ssRUFBUytrQixHQUNoQyxPQUFJcGxCLEVBQVEsR0FDRG9sQixFQUFVLE1BQVEsTUFFbEJBLEVBQVUsTUFBUSxPQUdqQ3BYLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGNBQ1RDLFNBQVUsY0FDVkMsUUFBUyxlQUNUQyxTQUFVLDhCQUNWQyxTQUFVLEtBRWRRLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLE9BQ054WixFQUFHZzZELEVBQ0h2Z0QsR0FBSXVnRCxFQUNKMzdELEVBQUcyN0QsRUFDSHRnRCxHQUFJc2dELEVBQ0p6dkQsRUFBR3l2RCxFQUNIcmdELEdBQUlxZ0QsRUFDSno3RCxFQUFHeTdELEVBQ0hwZ0QsR0FBSW9nRCxFQUNKanZELEVBQUdpdkQsRUFDSGxnRCxHQUFJa2dELEVBQ0o3dEQsRUFBRzZ0RCxFQUNIamdELEdBQUlpZ0QsR0FFUjNnRCx1QkFBd0IsWUFDeEI5USxRQUFTLE1BQ1R3RCxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FoRXlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJZkE7RUFBT2o4QyxhQUFhLE1BQU8sQ0FDakNoUSxPQUFRLGtGQUFrRitILE1BQ3RGLEtBRUpMLFlBQ0ksa0ZBQWtGSyxNQUM5RSxLQUVSaEosU0FBVSxrREFBa0RnSixNQUFNLEtBQ2xFZ0QsY0FBZSxrREFBa0RoRCxNQUFNLEtBQ3ZFK0MsWUFBYSxrREFBa0QvQyxNQUFNLEtBQ3JFMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsY0FDVEMsU0FBVSxjQUNWQyxRQUFTLGVBQ1RDLFNBQVUsY0FDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsZ0JBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsT0FDSHlaLEdBQUksVUFDSnBiLEVBQUcsUUFDSHFiLEdBQUksV0FDSm5QLEVBQUcsT0FDSG9QLEdBQUksY0FDSnBiLEVBQUcsTUFDSHFiLEdBQUksV0FDSjdPLEVBQUcsUUFDSCtPLEdBQUksWUFDSjNOLEVBQUcsUUFDSDROLEdBQUksYUFFUmhPLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxNQXBEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUlYQTtFQUFPajhDLGFBQWEsV0FBWSxDQUMxQ2hRLE9BQVEsd0ZBQXdGK0gsTUFDNUYsS0FFSkwsWUFDSSx3RkFBd0ZLLE1BQ3BGLEtBRVJoSixTQUFVLGtEQUFrRGdKLE1BQU0sS0FDbEVnRCxjQUFlLGtEQUFrRGhELE1BQU0sS0FDdkUrQyxZQUFhLGtEQUFrRC9DLE1BQU0sS0FDckUxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWixTQUFVLENBQ05DLFFBQVMsZUFDVEMsUUFBUyxjQUNUQyxTQUFVLGNBQ1ZDLFFBQVMsZ0JBQ1RDLFNBQVUsY0FDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsaUJBQ1JDLEtBQU0sU0FDTnhaLEVBQUcsT0FDSHlaLEdBQUksVUFDSnBiLEVBQUcsUUFDSHFiLEdBQUksV0FDSm5QLEVBQUcsT0FDSG9QLEdBQUksY0FDSnBiLEVBQUcsTUFDSHFiLEdBQUksV0FDSjdPLEVBQUcsUUFDSCtPLEdBQUksWUFDSjNOLEVBQUcsUUFDSDROLEdBQUksYUFFUmhPLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxNQXBEeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsc0ZBQXNGK0gsTUFDMUYsS0FFSkwsWUFDSSxzRkFBc0ZLLE1BQ2xGLEtBRVJoSixTQUFVLHlEQUF5RGdKLE1BQy9ELEtBRUpnRCxjQUFlLHVCQUF1QmhELE1BQU0sS0FDNUMrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSwwQkFDSkMsSUFBSyxpQ0FDTEMsS0FBTSx3Q0FFVlksY0FBZSxxREFDZmlHLGFBQWMsU0FBVXhWLEVBQU1ySCxHQUkxQixPQUhhLEtBQVRxSCxJQUNBQSxFQUFPLEdBR00sZUFBYnJILEdBQ2EsVUFBYkEsR0FDYSxpQkFBYkEsRUFFT3FILEVBQ2EsaUJBQWJySCxHQUE0QyxRQUFiQSxFQUMvQnFILEVBQU8sR0FFUEEsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLElBRzFDckgsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixJQUFJcFIsRUFBWSxJQUFQL1QsRUFBYUssRUFDdEIsT0FBSTBULEVBQUssSUFDRSxhQUNBQSxFQUFLLElBQ0wsUUFDQUEsRUFBSyxLQUNMLGVBQ0FBLEVBQUssS0FDTCxNQUNBQSxFQUFLLEtBQ0wsZUFFQSxPQUdmaEcsU0FBVSxDQUNOQyxRQUFTLG1CQUNUQyxRQUFTLGtCQUNUQyxTQUFVLDRCQUNWQyxRQUFTLGVBQ1RDLFNBQVUsNkJBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sV0FDTnhaLEVBQUcsZUFDSHlaLEdBQUksWUFDSnBiLEVBQUcsWUFDSHFiLEdBQUksV0FDSm5QLEVBQUcsWUFDSG9QLEdBQUksV0FDSnBiLEVBQUcsVUFDSHFiLEdBQUksU0FDSjdPLEVBQUcsVUFDSCtPLEdBQUksU0FDSjNOLEVBQUcsVUFDSDROLEdBQUksVUFHUlYsdUJBQXdCLDZCQUN4QjlRLFFBQVMsU0FBVWpCLEVBQVFrZCxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU9sZCxFQUFTLFFBQ3BCLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsRUFBUyxTQUNwQixRQUNJLE9BQU9BLElBR25CK1ksU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFBT3BVLFFBQVEsS0FBTSxNQUVoQ3VnQixXQUFZLFNBQVVuTSxHQUNsQixPQUFPQSxFQUFPcFUsUUFBUSxLQUFNLE1BRWhDZ0QsS0FBTSxDQUVGaUosSUFBSyxFQUNMQyxJQUFLLEtBN0d5QnVlLENBQVEsRUFBUSxLLGlCQ0lsRCxTQUFXeWpDLEdBQVU7a0NBWXpCO1NBQVN3QixFQUF1Qm54RCxFQUFRaWlCLEVBQWUvcEIsR0FDbkQsSUFUa0IwK0MsRUFDZHdhLEVBZ0JKLE1BQVksTUFBUmw1RCxFQUNPK3BCLEVBQWdCLFVBQVksVUFDcEIsTUFBUi9wQixFQUNBK3BCLEVBQWdCLFNBQVcsU0FFM0JqaUIsRUFBUyxLQXRCRjQyQyxHQXNCNkI1MkMsRUFyQjNDb3hELEVBUVMsQ0FDVGovQyxHQUFJOFAsRUFBZ0IseUJBQTJCLHlCQUMvQzdQLEdBQUk2UCxFQUFnQix5QkFBMkIseUJBQy9DNVAsR0FBSTRQLEVBQWdCLHNCQUF3QixzQkFDNUMzUCxHQUFJLGdCQUNKRSxHQUFJLHdCQUNKQyxHQUFJLGtCQU9nQ3ZhLEdBckJ2QnVULE1BQU0sS0FDaEJtckMsRUFBTSxJQUFPLEdBQUtBLEVBQU0sS0FBUSxHQUNqQ3dhLEVBQU0sR0FDTnhhLEVBQU0sSUFBTSxHQUFLQSxFQUFNLElBQU0sSUFBTUEsRUFBTSxJQUFNLElBQU1BLEVBQU0sS0FBTyxJQUNoRXdhLEVBQU0sR0FDTkEsRUFBTSxJQW9EbEIsU0FBUzhELEVBQXFCcG5DLEdBQzFCLE9BQU8sV0FDSCxPQUFPQSxFQUFNLEtBQXdCLEtBQWpCN3dCLEtBQUtpRyxRQUFpQixJQUFNLElBQU0sUUFJckR5c0QsRUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLENBQ0poSixPQUFRLHlGQUF5RitRLE1BQzdGLEtBRUo0bEQsV0FDSSxpR0FBaUc1bEQsTUFDN0YsTUFHWkwsWUFBYSx5REFBeURLLE1BQ2xFLEtBRUpoSixTQXBESixTQUE2QjFMLEVBQUcyRCxHQUM1QixJQUFJK0gsRUFBVyxDQUNQMHlELFdBQ0ksMERBQTBEMXBELE1BQ3RELEtBRVIycEQsV0FDSSwwREFBMEQzcEQsTUFDdEQsS0FFUjRwRCxTQUNJLDREQUE0RDVwRCxNQUN4RCxNQUtoQixPQUFVLElBQU4xVSxFQUNPMEwsRUFBcUIsV0FDdkJ4RCxNQUFNLEVBQUcsR0FDVHNQLE9BQU85TCxFQUFxQixXQUFFeEQsTUFBTSxFQUFHLElBRTNDbEksRUFTRTBMLEVBTEkscUJBQXFCUixLQUFLdkgsR0FDL0IsYUFDQSxzQ0FBc0N1SCxLQUFLdkgsR0FDekMsV0FDQSxjQUNrQjNELEVBQUV3TCxPQVJqQkUsRUFBcUIsWUE4QmhDZ00sY0FBZSx1QkFBdUJoRCxNQUFNLEtBQzVDK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksaUJBQ0pDLElBQUssd0JBQ0xDLEtBQU0sK0JBRVZaLFNBQVUsQ0FDTkMsUUFBUytqRCxFQUFxQixjQUM5QjlqRCxRQUFTOGpELEVBQXFCLFlBQzlCNWpELFFBQVM0akQsRUFBcUIsV0FDOUI3akQsU0FBVTZqRCxFQUFxQixjQUMvQjNqRCxTQUFVLFdBQ04sT0FBUXRVLEtBQUtzRixPQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxPQUFPMnlELEVBQXFCLG9CQUFvQnArRCxLQUFLbUcsTUFDekQsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsT0FBT2k0RCxFQUFxQixxQkFBcUJwK0QsS0FBS21HLFFBR2xFdVUsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxVQUNOeFosRUFBRyxrQkFDSHlaLEdBQUlnL0MsRUFDSnA2RCxFQUFHbzZELEVBQ0gvK0MsR0FBSSsrQyxFQUNKbHVELEVBQUcsU0FDSG9QLEdBQUk4K0MsRUFDSmw2RCxFQUFHLE9BQ0hxYixHQUFJNitDLEVBQ0oxdEQsRUFBRyxTQUNIK08sR0FBSTIrQyxFQUNKdHNELEVBQUcsTUFDSDROLEdBQUkwK0MsR0FHUnorQyxjQUFlLHdCQUNmaEMsS0FBTSxTQUFVelgsR0FDWixNQUFPLGlCQUFpQmdKLEtBQUtoSixJQUVqQzZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEVBQ0EsT0FDQUEsRUFBTyxHQUNQLFFBQ0FBLEVBQU8sR0FDUCxNQUVBLFVBR2Y0Tyx1QkFBd0IsaUJBQ3hCOVEsUUFBUyxTQUFVakIsRUFBUWtkLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0wsSUFBSyxJQUNMLElBQUssSUFDRCxPQUFPbGQsRUFBUyxLQUNwQixJQUFLLElBQ0QsT0FBT0EsRUFBUyxNQUNwQixRQUNJLE9BQU9BLElBR25CeUUsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBcEt5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSXpCO0lBQUlqc0QsRUFBUyxDQUNMLFFBQ0EsUUFDQSxPQUNBLFFBQ0EsTUFDQSxNQUNBLFNBQ0EsT0FDQSxRQUNBLFNBQ0EsUUFDQSxTQUVKcEIsRUFBTyxDQUFDLFFBQVMsTUFBTyxPQUFRLE1BQU8sU0FBVSxPQUFRLFFBRXBEcXRELEVBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUUEsRUFDUjBILFlBQWExSCxFQUNiakIsU0FBVUgsRUFDVm1NLGNBQWVuTSxFQUNma00sWUFBYWxNLEVBQ2JQLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZZLGNBQWUsVUFDZmhDLEtBQU0sU0FBVXpYLEdBQ1osTUFBTyxRQUFVQSxHQUVyQjZDLFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsT0FBSW5sQixFQUFPLEdBQ0EsTUFFSixPQUVYK04sU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsZUFDVEMsU0FBVSxpQkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx5QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxTQUNOeFosRUFBRyxZQUNIeVosR0FBSSxXQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxTQUNKblAsRUFBRyxZQUNIb1AsR0FBSSxXQUNKcGIsRUFBRyxTQUNIcWIsR0FBSSxRQUNKN08sRUFBRyxVQUNIK08sR0FBSSxTQUNKM04sRUFBRyxVQUNINE4sR0FBSSxVQUVSc0csU0FBVSxTQUFVbEQsR0FDaEIsT0FBT0EsRUFBT3BVLFFBQVEsS0FBTSxNQUVoQ3VnQixXQUFZLFNBQVVuTSxHQUNsQixPQUFPQSxFQUFPcFUsUUFBUSxLQUFNLE1BRWhDZ0QsS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBL0V5QnVlLENBQVEsRUFBUSxLLGlCQ0VsRCxTQUFXeWpDLEdBQVU7a0NBSWhCQTtFQUFPajhDLGFBQWEsS0FBTSxDQUMvQmhRLE9BQVEseUVBQXlFK0gsTUFDN0UsS0FFSkwsWUFBYSxrREFBa0RLLE1BQU0sS0FDckVoSixTQUFVLHVEQUF1RGdKLE1BQU0sS0FDdkVnRCxjQUFlLDhCQUE4QmhELE1BQU0sS0FDbkQrQyxZQUFhLHVCQUF1Qi9DLE1BQU0sS0FDMUMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWixTQUFVLENBQ05DLFFBQVMsdUJBQ1RDLFFBQVMsbUJBQ1RDLFNBQVUsMkJBQ1ZDLFFBQVMsc0JBQ1RDLFNBQVUsbUNBQ1ZDLFNBQVUsS0FFZFEsYUFBYyxDQUNWQyxPQUFRLGdCQUNSQyxLQUFNLG9CQUNOeFosRUFBRyxTQUNIeVosR0FBSSxZQUNKcGIsRUFBRyxhQUNIcWIsR0FBSSxZQUNKblAsRUFBRyxXQUNIb1AsR0FBSSxVQUNKcGIsRUFBRyxVQUNIcWIsR0FBSSxTQUNKN08sRUFBRyxTQUNIK08sR0FBSSxRQUNKM04sRUFBRyxVQUNINE4sR0FBSSxVQUVSaE8sS0FBTSxDQUNGaUosSUFBSyxFQUNMQyxJQUFLLEtBakR5QnVlLENBQVEsRUFBUSxLLGlCQ0dsRCxTQUFXeWpDLEdBQVU7a0NBSVpBO0VBQU9qOEMsYUFBYSxVQUFXLENBQ3hDaFEsT0FBUSw2RUFBNkUrSCxNQUNqRixLQUVKTCxZQUFhLG9EQUFvREssTUFBTSxLQUN2RWhKLFNBQ0ksK0RBQStEZ0osTUFDM0QsS0FFUmdELGNBQWUsa0NBQWtDaEQsTUFBTSxLQUN2RCtDLFlBQWEseUJBQXlCL0MsTUFBTSxLQUM1QzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLFNBQVUsQ0FDTkMsUUFBUyx1QkFDVEMsUUFBUyxtQkFDVEMsU0FBVSwyQkFDVkMsUUFBUyx1QkFDVEMsU0FBVSxvQ0FDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsa0JBQ1JDLEtBQU0scUJBQ054WixFQUFHLFNBQ0h5WixHQUFJLFlBQ0pwYixFQUFHLGFBQ0hxYixHQUFJLFlBQ0puUCxFQUFHLFdBQ0hvUCxHQUFJLFVBQ0pwYixFQUFHLFVBQ0hxYixHQUFJLFNBQ0o3TyxFQUFHLFNBQ0grTyxHQUFJLFFBQ0ozTixFQUFHLFVBQ0g0TixHQUFJLFVBRVJoTyxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0FwRHlCdWUsQ0FBUSxFQUFRLEssaUJDSWxELFNBQVd5akMsR0FBVTtrQ0FJaEJBO0VBQU9qOEMsYUFBYSxLQUFNLENBQy9CaFEsT0FBUSxxR0FBcUcrSCxNQUN6RyxLQUVKTCxZQUNJLHNGQUFzRkssTUFDbEYsS0FFUitsRCxrQkFBa0IsRUFDbEIvdUQsU0FBVSx5REFBeURnSixNQUMvRCxLQUVKZ0QsY0FBZSx1QkFBdUJoRCxNQUFNLEtBQzVDK0MsWUFBYSx1QkFBdUIvQyxNQUFNLEtBQzFDZ2xELG9CQUFvQixFQUNwQi85QyxjQUFlLFNBQ2ZoQyxLQUFNLFNBQVV6WCxHQUNaLE1BQU8sUUFBUWdKLEtBQUtoSixJQUV4QjZDLFNBQVUsU0FBVW9ILEVBQU9LLEVBQVMra0IsR0FDaEMsT0FBSXBsQixFQUFRLEdBQ0RvbEIsRUFBVSxLQUFPLEtBRWpCQSxFQUFVLEtBQU8sTUFHaEN2bUIsZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksb0JBQ0pDLElBQUssMEJBQ0xDLEtBQU0sZ0NBQ05sYixFQUFHLFlBQ0gwN0QsR0FBSSxhQUNKQyxJQUFLLG1CQUNMQyxLQUFNLHlCQUVWdGhELFNBQVUsQ0FDTkMsUUFBUyxtQkFDVEMsUUFBUyxvQkFDVEMsU0FBVSx5QkFDVkMsUUFBUyxtQkFDVEMsU0FBVSwyQkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxXQUNOeFosRUFBRyxXQUNIeVosR0FBSSxVQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxVQUNKblAsRUFBRyxVQUNIb1AsR0FBSSxTQUNKcGIsRUFBRyxXQUNIcWIsR0FBSSxVQUNKL04sRUFBRyxXQUNIZ08sR0FBSSxVQUNKOU8sRUFBRyxZQUNIK08sR0FBSSxXQUNKM04sRUFBRyxVQUNINE4sR0FBSSxVQUVSVix1QkFBd0IsVUFDeEI5USxRQUFTLFNBQVVqQixHQUNmLE9BQU9BLEdBRVh5RSxLQUFNLENBQ0ZpSixJQUFLLEVBQ0xDLElBQUssS0E3RXlCdWUsQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJWEE7RUFBT2o4QyxhQUFhLFdBQVksQ0FDMUNoUSxPQUFRLDZHQUE2RytILE1BQ2pILEtBRUpMLFlBQ0ksOERBQThESyxNQUMxRCxLQUVSK2xELGtCQUFrQixFQUNsQi91RCxTQUNJLHlFQUF5RWdKLE1BQ3JFLEtBRVJnRCxjQUFlLHFDQUFxQ2hELE1BQU0sS0FDMUQrQyxZQUFhLDRCQUE0Qi9DLE1BQU0sS0FDL0NnbEQsb0JBQW9CLEVBQ3BCMXVELGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWixTQUFVLENBQ05DLFFBQVMsa0JBQ1RDLFFBQVMsc0JBQ1RDLFNBQVUsZUFDVkMsUUFBUyx1QkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxVQUNOeFosRUFBRyxtQkFDSHlaLEdBQUksZUFDSnBiLEVBQUcsYUFDSHFiLEdBQUksZUFDSm5QLEVBQUcsWUFDSG9QLEdBQUksWUFDSnBiLEVBQUcsU0FDSHFiLEdBQUksV0FDSjdPLEVBQUcsWUFDSCtPLEdBQUksY0FDSjNOLEVBQUcsVUFDSDROLEdBQUksYUFFUlYsdUJBQXdCLHVCQUN4QjlRLFFBQVMsU0FBVWpCLEdBQ2YsSUFBSXpHLEVBQUl5RyxFQUFTLEdBV2pCLE9BQU9BLEdBVDZCLE1BQXhCQSxFQUFTLElBQU8sSUFDZCxLQUNNLElBQU56RyxFQUNFLEtBQ00sSUFBTkEsRUFDRSxLQUNNLElBQU5BLEVBQ0UsS0FDQSxPQUd4QmtMLEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQXZFeUJ1ZSxDQUFRLEVBQVEsSyxpQkNHbEQsU0FBV3lqQyxHQUFVO2tDQUloQkE7RUFBT2o4QyxhQUFhLEtBQU0sQ0FDL0JoUSxPQUFRLDBGQUEwRitILE1BQzlGLEtBRUpMLFlBQWEsZ0VBQWdFSyxNQUFNLEtBQ25GaEosU0FBVSx1REFBdURnSixNQUFNLEtBQ3ZFZ0QsY0FBZSxzQ0FBc0NoRCxNQUFNLEtBQzNEK0MsWUFBYSwyQkFBMkIvQyxNQUFNLEtBQzlDMUosZUFBZ0IsQ0FDWjJQLEdBQUksU0FDSkQsSUFBSyxZQUNMRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVlosU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLGVBQ1RDLFNBQVUsOEJBQ1ZDLFFBQVMsZUFDVEMsU0FBVSw2QkFDVkMsU0FBVSxLQUVkUSxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxXQUNOeFosRUFBRyxvQkFDSHlaLEdBQUksV0FDSnBiLEVBQUcsY0FDSHFiLEdBQUksYUFDSm5QLEVBQUcsY0FDSG9QLEdBQUksYUFDSnBiLEVBQUcsV0FDSHFiLEdBQUksVUFDSjdPLEVBQUcsV0FDSCtPLEdBQUksVUFDSjNOLEVBQUcsWUFDSDROLEdBQUksWUFFUlYsdUJBQXdCLGdCQUN4QjlRLFFBQVMsVUFDVHdELEtBQU0sQ0FDRmlKLElBQUssRUFDTEMsSUFBSyxLQW5EeUJ1ZSxDQUFRLEVBQVEsSyxpQkNLbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsd0NBQXdDK0gsTUFDNUMsS0FFSkwsWUFBYSx5Q0FBeUNLLE1BQ2xELEtBRUpoSixTQUFVLDhCQUE4QmdKLE1BQU0sS0FDOUNnRCxjQUFlLHVCQUF1QmhELE1BQU0sS0FDNUMrQyxZQUFhLGdCQUFnQi9DLE1BQU0sS0FDbkMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxZQUNKQyxJQUFLLGtCQUNMQyxLQUFNLHNCQUNObGIsRUFBRyxXQUNIMDdELEdBQUksWUFDSkMsSUFBSyxrQkFDTEMsS0FBTSx1QkFFVjkvQyxjQUFlLG9CQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxPQUFickgsR0FBa0MsT0FBYkEsR0FBa0MsT0FBYkEsRUFDbkNxSCxFQUNhLE9BQWJySCxHQUFrQyxPQUFiQSxFQUNyQnFILEVBQU8sR0FHUEEsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLElBRzFDckgsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixJQUFJcFIsRUFBWSxJQUFQL1QsRUFBYUssRUFDdEIsT0FBSTBULEVBQUssSUFDRSxLQUNBQSxFQUFLLElBQ0wsS0FDQUEsRUFBSyxLQUNMLEtBQ0FBLEVBQUssS0FDTCxLQUNBQSxFQUFLLEtBQ0wsS0FFQSxNQUdmaEcsU0FBVSxDQUNOQyxRQUFTLFNBQ1RDLFFBQVMsU0FDVEMsU0FBVSxTQUFVcUcsR0FDaEIsT0FBSUEsRUFBSWpULFNBQVd4SCxLQUFLd0gsT0FDYixXQUVBLFlBR2Y2TSxRQUFTLFNBQ1RDLFNBQVUsU0FBVW1HLEdBQ2hCLE9BQUl6YSxLQUFLd0gsU0FBV2lULEVBQUlqVCxPQUNiLFdBRUEsWUFHZitNLFNBQVUsS0FFZE8sdUJBQXdCLGlCQUN4QjlRLFFBQVMsU0FBVWpCLEVBQVFrZCxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU9sZCxFQUFTLElBQ3BCLElBQUssSUFDRCxPQUFPQSxFQUFTLElBQ3BCLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsRUFBUyxJQUNwQixRQUNJLE9BQU9BLElBR25CZ1MsYUFBYyxDQUNWQyxPQUFRLE1BQ1JDLEtBQU0sTUFDTnhaLEVBQUcsS0FDSHlaLEdBQUksT0FDSnBiLEVBQUcsT0FDSHFiLEdBQUksUUFDSm5QLEVBQUcsT0FDSG9QLEdBQUksUUFDSnBiLEVBQUcsTUFDSHFiLEdBQUksT0FDSi9OLEVBQUcsTUFDSGdPLEdBQUksT0FDSjlPLEVBQUcsT0FDSCtPLEdBQUksUUFDSjNOLEVBQUcsTUFDSDROLEdBQUksUUFFUmhPLEtBQU0sQ0FFRmlKLElBQUssRUFDTEMsSUFBSyxLQXBIeUJ1ZSxDQUFRLEVBQVEsSyxpQkNJbEQsU0FBV3lqQyxHQUFVO2tDQUlkQTtFQUFPajhDLGFBQWEsUUFBUyxDQUNwQ2hRLE9BQVEsd0NBQXdDK0gsTUFDNUMsS0FFSkwsWUFBYSx5Q0FBeUNLLE1BQ2xELEtBRUpoSixTQUFVLDhCQUE4QmdKLE1BQU0sS0FDOUNnRCxjQUFlLHVCQUF1QmhELE1BQU0sS0FDNUMrQyxZQUFhLGdCQUFnQi9DLE1BQU0sS0FDbkMxSixlQUFnQixDQUNaMlAsR0FBSSxRQUNKRCxJQUFLLFdBQ0xFLEVBQUcsYUFDSEMsR0FBSSxZQUNKQyxJQUFLLGtCQUNMQyxLQUFNLHNCQUNObGIsRUFBRyxXQUNIMDdELEdBQUksWUFDSkMsSUFBSyxrQkFDTEMsS0FBTSx1QkFFVjkvQyxjQUFlLG9CQUNmaUcsYUFBYyxTQUFVeFYsRUFBTXJILEdBSTFCLE9BSGEsS0FBVHFILElBQ0FBLEVBQU8sR0FFTSxPQUFickgsR0FBa0MsT0FBYkEsR0FBa0MsT0FBYkEsRUFDbkNxSCxFQUNhLE9BQWJySCxFQUNBcUgsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsT0FBYnJILEdBQWtDLE9BQWJBLEVBQ3JCcUgsRUFBTyxRQURYLEdBSVhySCxTQUFVLFNBQVVxSCxFQUFNSyxFQUFROGtCLEdBQzlCLElBQUlwUixFQUFZLElBQVAvVCxFQUFhSyxFQUN0QixPQUFJMFQsRUFBSyxJQUNFLEtBQ0FBLEVBQUssSUFDTCxLQUNBQSxFQUFLLEtBQ0wsS0FDTyxPQUFQQSxFQUNBLEtBQ0FBLEVBQUssS0FDTCxLQUVBLE1BR2ZoRyxTQUFVLENBQ05DLFFBQVMsU0FDVEMsUUFBUyxTQUNUQyxTQUFVLFlBQ1ZDLFFBQVMsU0FDVEMsU0FBVSxZQUNWQyxTQUFVLEtBRWRPLHVCQUF3QixpQkFDeEI5USxRQUFTLFNBQVVqQixFQUFRa2QsR0FDdkIsT0FBUUEsR0FDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssTUFDRCxPQUFPbGQsRUFBUyxJQUNwQixJQUFLLElBQ0QsT0FBT0EsRUFBUyxJQUNwQixJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU9BLEVBQVMsSUFDcEIsUUFDSSxPQUFPQSxJQUduQmdTLGFBQWMsQ0FDVkMsT0FBUSxNQUNSQyxLQUFNLE1BQ054WixFQUFHLEtBQ0h5WixHQUFJLE9BQ0pwYixFQUFHLE9BQ0hxYixHQUFJLFFBQ0puUCxFQUFHLE9BQ0hvUCxHQUFJLFFBQ0pwYixFQUFHLE1BQ0hxYixHQUFJLE9BQ0o3TyxFQUFHLE9BQ0grTyxHQUFJLFFBQ0ozTixFQUFHLE1BQ0g0TixHQUFJLFVBaEcwQnlaLENBQVEsRUFBUSxLLGlCQ0VsRCxTQUFXeWpDLEdBQVU7a0NBSWRBO0VBQU9qOEMsYUFBYSxRQUFTLENBQ3BDaFEsT0FBUSx3Q0FBd0MrSCxNQUM1QyxLQUVKTCxZQUFhLHlDQUF5Q0ssTUFDbEQsS0FFSmhKLFNBQVUsOEJBQThCZ0osTUFBTSxLQUM5Q2dELGNBQWUsdUJBQXVCaEQsTUFBTSxLQUM1QytDLFlBQWEsZ0JBQWdCL0MsTUFBTSxLQUNuQzFKLGVBQWdCLENBQ1oyUCxHQUFJLFFBQ0pELElBQUssV0FDTEUsRUFBRyxhQUNIQyxHQUFJLFlBQ0pDLElBQUssa0JBQ0xDLEtBQU0sc0JBQ05sYixFQUFHLFdBQ0gwN0QsR0FBSSxZQUNKQyxJQUFLLGtCQUNMQyxLQUFNLHVCQUVWOS9DLGNBQWUsb0JBQ2ZpRyxhQUFjLFNBQVV4VixFQUFNckgsR0FJMUIsT0FIYSxLQUFUcUgsSUFDQUEsRUFBTyxHQUVNLE9BQWJySCxHQUFrQyxPQUFiQSxHQUFrQyxPQUFiQSxFQUNuQ3FILEVBQ2EsT0FBYnJILEVBQ0FxSCxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxPQUFickgsR0FBa0MsT0FBYkEsRUFDckJxSCxFQUFPLFFBRFgsR0FJWHJILFNBQVUsU0FBVXFILEVBQU1LLEVBQVE4a0IsR0FDOUIsSUFBSXBSLEVBQVksSUFBUC9ULEVBQWFLLEVBQ3RCLE9BQUkwVCxFQUFLLElBQ0UsS0FDQUEsRUFBSyxJQUNMLEtBQ0FBLEVBQUssS0FDTCxLQUNBQSxFQUFLLEtBQ0wsS0FDQUEsRUFBSyxLQUNMLEtBRUEsTUFHZmhHLFNBQVUsQ0FDTkMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFNBQVUsYUFDVkMsUUFBUyxVQUNUQyxTQUFVLGFBQ1ZDLFNBQVUsS0FFZE8sdUJBQXdCLGlCQUN4QjlRLFFBQVMsU0FBVWpCLEVBQVFrZCxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU9sZCxFQUFTLElBQ3BCLElBQUssSUFDRCxPQUFPQSxFQUFTLElBQ3BCLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsRUFBUyxJQUNwQixRQUNJLE9BQU9BLElBR25CZ1MsYUFBYyxDQUNWQyxPQUFRLE1BQ1JDLEtBQU0sTUFDTnhaLEVBQUcsS0FDSHlaLEdBQUksT0FDSnBiLEVBQUcsT0FDSHFiLEdBQUksUUFDSm5QLEVBQUcsT0FDSG9QLEdBQUksUUFDSnBiLEVBQUcsTUFDSHFiLEdBQUksT0FDSjdPLEVBQUcsT0FDSCtPLEdBQUksUUFDSjNOLEVBQUcsTUFDSDROLEdBQUksVUFoRzBCeVosQ0FBUSxFQUFRLEssaUJDRWxELFNBQVd5akMsR0FBVTtrQ0FJZEE7RUFBT2o4QyxhQUFhLFFBQVMsQ0FDcENoUSxPQUFRLHdDQUF3QytILE1BQzVDLEtBRUpMLFlBQWEseUNBQXlDSyxNQUNsRCxLQUVKaEosU0FBVSw4QkFBOEJnSixNQUFNLEtBQzlDZ0QsY0FBZSx1QkFBdUJoRCxNQUFNLEtBQzVDK0MsWUFBYSxnQkFBZ0IvQyxNQUFNLEtBQ25DMUosZUFBZ0IsQ0FDWjJQLEdBQUksUUFDSkQsSUFBSyxXQUNMRSxFQUFHLGFBQ0hDLEdBQUksWUFDSkMsSUFBSyxrQkFDTEMsS0FBTSxzQkFDTmxiLEVBQUcsV0FDSDA3RCxHQUFJLFlBQ0pDLElBQUssa0JBQ0xDLEtBQU0sdUJBRVY5L0MsY0FBZSxvQkFDZmlHLGFBQWMsU0FBVXhWLEVBQU1ySCxHQUkxQixPQUhhLEtBQVRxSCxJQUNBQSxFQUFPLEdBRU0sT0FBYnJILEdBQWtDLE9BQWJBLEdBQWtDLE9BQWJBLEVBQ25DcUgsRUFDYSxPQUFickgsRUFDQXFILEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLE9BQWJySCxHQUFrQyxPQUFiQSxFQUNyQnFILEVBQU8sUUFEWCxHQUlYckgsU0FBVSxTQUFVcUgsRUFBTUssRUFBUThrQixHQUM5QixJQUFJcFIsRUFBWSxJQUFQL1QsRUFBYUssRUFDdEIsT0FBSTBULEVBQUssSUFDRSxLQUNBQSxFQUFLLElBQ0wsS0FDQUEsRUFBSyxLQUNMLEtBQ0FBLEVBQUssS0FDTCxLQUNBQSxFQUFLLEtBQ0wsS0FFQSxNQUdmaEcsU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsU0FBVSxhQUNWQyxRQUFTLFVBQ1RDLFNBQVUsYUFDVkMsU0FBVSxLQUVkTyx1QkFBd0IsaUJBQ3hCOVEsUUFBUyxTQUFVakIsRUFBUWtkLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0QsT0FBT2xkLEVBQVMsSUFDcEIsSUFBSyxJQUNELE9BQU9BLEVBQVMsSUFDcEIsSUFBSyxJQUNMLElBQUssSUFDRCxPQUFPQSxFQUFTLElBQ3BCLFFBQ0ksT0FBT0EsSUFHbkJnUyxhQUFjLENBQ1ZDLE9BQVEsTUFDUkMsS0FBTSxNQUNOeFosRUFBRyxLQUNIeVosR0FBSSxPQUNKcGIsRUFBRyxPQUNIcWIsR0FBSSxRQUNKblAsRUFBRyxPQUNIb1AsR0FBSSxRQUNKcGIsRUFBRyxNQUNIcWIsR0FBSSxPQUNKN08sRUFBRyxPQUNIK08sR0FBSSxRQUNKM04sRUFBRyxNQUNINE4sR0FBSSxVQWhHMEJ5WixDQUFRLEVBQVEsSyxpQkNQMUQsWUE0QkEsU0FBU29wQyxFQUFlNTVDLEVBQU82NUMsR0FHN0IsSUFEQSxJQUFJQyxFQUFLLEVBQ0E3K0QsRUFBSStrQixFQUFNL2hCLE9BQVMsRUFBR2hELEdBQUssRUFBR0EsSUFBSyxDQUMxQyxJQUFJMnBELEVBQU81a0MsRUFBTS9rQixHQUNKLE1BQVQycEQsRUFDRjVrQyxFQUFNZ3dCLE9BQU8vMEMsRUFBRyxHQUNFLE9BQVQycEQsR0FDVDVrQyxFQUFNZ3dCLE9BQU8vMEMsRUFBRyxHQUNoQjYrRCxLQUNTQSxJQUNUOTVDLEVBQU1nd0IsT0FBTy8wQyxFQUFHLEdBQ2hCNitELEtBS0osR0FBSUQsRUFDRixLQUFPQyxJQUFNQSxFQUNYOTVDLEVBQU0rNUMsUUFBUSxNQUlsQixPQUFPLzVDLEVBME9ULFNBQVNtQyxFQUFRaThCLEVBQUk5akIsR0FDakIsR0FBSThqQixFQUFHajhCLE9BQVEsT0FBT2k4QixFQUFHajhCLE9BQU9tWSxHQUVoQyxJQURBLElBQUk1N0IsRUFBTSxHQUNEekQsRUFBSSxFQUFHQSxFQUFJbWpELEVBQUduZ0QsT0FBUWhELElBQ3ZCcS9CLEVBQUU4akIsRUFBR25qRCxHQUFJQSxFQUFHbWpELElBQUsxL0MsRUFBSUUsS0FBS3cvQyxFQUFHbmpELElBRXJDLE9BQU95RCxFQTNPWDNELEVBQVE2NUIsUUFBVSxXQUloQixJQUhBLElBQUlvbEMsRUFBZSxHQUNmQyxHQUFtQixFQUVkaC9ELEVBQUlvQyxVQUFVWSxPQUFTLEVBQUdoRCxJQUFNLElBQU1nL0QsRUFBa0JoL0QsSUFBSyxDQUNwRSxJQUFJaS9ELEVBQVFqL0QsR0FBSyxFQUFLb0MsVUFBVXBDLEdBQUsyNEIsRUFBUXNrQixNQUc3QyxHQUFvQixpQkFBVGdpQixFQUNULE1BQU0sSUFBSXZuQyxVQUFVLDZDQUNWdW5DLElBSVpGLEVBQWVFLEVBQU8sSUFBTUYsRUFDNUJDLEVBQXNDLE1BQW5CQyxFQUFLdnRDLE9BQU8sSUFXakMsT0FBU3N0QyxFQUFtQixJQUFNLEtBSmxDRCxFQUFlSixFQUFlejNDLEVBQU82M0MsRUFBYWpxRCxNQUFNLE1BQU0sU0FBU2hULEdBQ3JFLFFBQVNBLE1BQ05rOUQsR0FBa0J6MkQsS0FBSyxPQUU2QixLQUszRHpJLEVBQVFvL0QsVUFBWSxTQUFTRCxHQUMzQixJQUFJRSxFQUFhci9ELEVBQVFxL0QsV0FBV0YsR0FDaENHLEVBQXFDLE1BQXJCdDFELEVBQU9tMUQsR0FBTyxHQWNsQyxPQVhBQSxFQUFPTixFQUFlejNDLEVBQU8rM0MsRUFBS25xRCxNQUFNLE1BQU0sU0FBU2hULEdBQ3JELFFBQVNBLE1BQ05xOUQsR0FBWTUyRCxLQUFLLE9BRVI0MkQsSUFDWkYsRUFBTyxLQUVMQSxHQUFRRyxJQUNWSCxHQUFRLE1BR0ZFLEVBQWEsSUFBTSxJQUFNRixHQUluQ24vRCxFQUFRcS9ELFdBQWEsU0FBU0YsR0FDNUIsTUFBMEIsTUFBbkJBLEVBQUt2dEMsT0FBTyxJQUlyQjV4QixFQUFReUksS0FBTyxXQUNiLElBQUk4MkQsRUFBUTk4RCxNQUFNWCxVQUFVMEcsTUFBTW5JLEtBQUtpQyxVQUFXLEdBQ2xELE9BQU90QyxFQUFRby9ELFVBQVVoNEMsRUFBT200QyxHQUFPLFNBQVN2OUQsRUFBRzh0QixHQUNqRCxHQUFpQixpQkFBTjl0QixFQUNULE1BQU0sSUFBSTQxQixVQUFVLDBDQUV0QixPQUFPNTFCLEtBQ055RyxLQUFLLE9BTVZ6SSxFQUFRdy9ELFNBQVcsU0FBUzE0RCxFQUFNRCxHQUloQyxTQUFTZ2lDLEVBQUtwbEMsR0FFWixJQURBLElBQUkrbkQsRUFBUSxFQUNMQSxFQUFRL25ELEVBQUlQLFFBQ0UsS0FBZk8sRUFBSStuRCxHQURpQkEsS0FLM0IsSUFEQSxJQUFJdmUsRUFBTXhwQyxFQUFJUCxPQUFTLEVBQ2hCK3BDLEdBQU8sR0FDSyxLQUFieHBDLEVBQUl3cEMsR0FET0EsS0FJakIsT0FBSXVlLEVBQVF2ZSxFQUFZLEdBQ2pCeHBDLEVBQUkrRSxNQUFNZ2pELEVBQU92ZSxFQUFNdWUsRUFBUSxHQWZ4QzFrRCxFQUFPOUcsRUFBUTY1QixRQUFRL3lCLEdBQU1rRCxPQUFPLEdBQ3BDbkQsRUFBSzdHLEVBQVE2NUIsUUFBUWh6QixHQUFJbUQsT0FBTyxHQXNCaEMsSUFMQSxJQUFJeTFELEVBQVk1MkIsRUFBSy9oQyxFQUFLa08sTUFBTSxNQUM1QjBxRCxFQUFVNzJCLEVBQUtoaUMsRUFBR21PLE1BQU0sTUFFeEI5UixFQUFTeUcsS0FBS21NLElBQUkycEQsRUFBVXY4RCxPQUFRdzhELEVBQVF4OEQsUUFDNUN5OEQsRUFBa0J6OEQsRUFDYmhELEVBQUksRUFBR0EsRUFBSWdELEVBQVFoRCxJQUMxQixHQUFJdS9ELEVBQVV2L0QsS0FBT3cvRCxFQUFReC9ELEdBQUksQ0FDL0J5L0QsRUFBa0J6L0QsRUFDbEIsTUFJSixJQUFJMC9ELEVBQWMsR0FDbEIsSUFBUzEvRCxFQUFJeS9ELEVBQWlCei9ELEVBQUl1L0QsRUFBVXY4RCxPQUFRaEQsSUFDbEQwL0QsRUFBWS83RCxLQUFLLE1BS25CLE9BRkErN0QsRUFBY0EsRUFBWTluRCxPQUFPNG5ELEVBQVFsM0QsTUFBTW0zRCxLQUU1QmwzRCxLQUFLLE1BRzFCekksRUFBUTYvRCxJQUFNLElBQ2Q3L0QsRUFBUTgvRCxVQUFZLElBRXBCOS9ELEVBQVErL0QsUUFBVSxTQUFVWixHQUUxQixHQURvQixpQkFBVEEsSUFBbUJBLEdBQWMsSUFDeEIsSUFBaEJBLEVBQUtqOEQsT0FBYyxNQUFPLElBSzlCLElBSkEsSUFBSWdqQyxFQUFPaTVCLEVBQUsvdEIsV0FBVyxHQUN2QjR1QixFQUFtQixLQUFUOTVCLEVBQ1YrRyxHQUFPLEVBQ1BnekIsR0FBZSxFQUNWLy9ELEVBQUlpL0QsRUFBS2o4RCxPQUFTLEVBQUdoRCxHQUFLLElBQUtBLEVBRXRDLEdBQWEsTUFEYmdtQyxFQUFPaTVCLEVBQUsvdEIsV0FBV2x4QyxLQUVuQixJQUFLKy9ELEVBQWMsQ0FDakJoekIsRUFBTS9zQyxFQUNOLFlBSUorL0QsR0FBZSxFQUluQixPQUFhLElBQVRoekIsRUFBbUIreUIsRUFBVSxJQUFNLElBQ25DQSxHQUFtQixJQUFSL3lCLEVBR04sSUFFRmt5QixFQUFLMzJELE1BQU0sRUFBR3lrQyxJQWlDdkJqdEMsRUFBUWtnRSxTQUFXLFNBQVVmLEVBQU1nQixHQUNqQyxJQUFJNWdDLEVBL0JOLFNBQWtCNC9CLEdBQ0ksaUJBQVRBLElBQW1CQSxHQUFjLElBRTVDLElBR0lqL0QsRUFIQXNyRCxFQUFRLEVBQ1J2ZSxHQUFPLEVBQ1BnekIsR0FBZSxFQUduQixJQUFLLy9ELEVBQUlpL0QsRUFBS2o4RCxPQUFTLEVBQUdoRCxHQUFLLElBQUtBLEVBQ2xDLEdBQTJCLEtBQXZCaS9ELEVBQUsvdEIsV0FBV2x4QyxJQUdoQixJQUFLKy9ELEVBQWMsQ0FDakJ6VSxFQUFRdHJELEVBQUksRUFDWixZQUVnQixJQUFUK3NDLElBR1hnekIsR0FBZSxFQUNmaHpCLEVBQU0vc0MsRUFBSSxHQUlkLE9BQWEsSUFBVCtzQyxFQUFtQixHQUNoQmt5QixFQUFLMzJELE1BQU1nakQsRUFBT3ZlLEdBTWpCaXpCLENBQVNmLEdBSWpCLE9BSElnQixHQUFPNWdDLEVBQUV2MUIsUUFBUSxFQUFJbTJELEVBQUlqOUQsVUFBWWk5RCxJQUN2QzVnQyxFQUFJQSxFQUFFdjFCLE9BQU8sRUFBR3UxQixFQUFFcjhCLE9BQVNpOUQsRUFBSWo5RCxTQUUxQnE4QixHQUdUdi9CLEVBQVFvZ0UsUUFBVSxTQUFVakIsR0FDTixpQkFBVEEsSUFBbUJBLEdBQWMsSUFRNUMsSUFQQSxJQUFJa0IsR0FBWSxFQUNaQyxFQUFZLEVBQ1pyekIsR0FBTyxFQUNQZ3pCLEdBQWUsRUFHZk0sRUFBYyxFQUNUcmdFLEVBQUlpL0QsRUFBS2o4RCxPQUFTLEVBQUdoRCxHQUFLLElBQUtBLEVBQUcsQ0FDekMsSUFBSWdtQyxFQUFPaTVCLEVBQUsvdEIsV0FBV2x4QyxHQUMzQixHQUFhLEtBQVRnbUMsR0FTUyxJQUFUK0csSUFHRmd6QixHQUFlLEVBQ2ZoekIsRUFBTS9zQyxFQUFJLEdBRUMsS0FBVGdtQyxHQUVrQixJQUFkbTZCLEVBQ0ZBLEVBQVduZ0UsRUFDWSxJQUFoQnFnRSxJQUNQQSxFQUFjLElBQ0ssSUFBZEYsSUFHVEUsR0FBZSxRQXJCYixJQUFLTixFQUFjLENBQ2pCSyxFQUFZcGdFLEVBQUksRUFDaEIsT0F1QlIsT0FBa0IsSUFBZG1nRSxJQUE0QixJQUFUcHpCLEdBRUgsSUFBaEJzekIsR0FFZ0IsSUFBaEJBLEdBQXFCRixJQUFhcHpCLEVBQU0sR0FBS296QixJQUFhQyxFQUFZLEVBQ2pFLEdBRUZuQixFQUFLMzJELE1BQU02M0QsRUFBVXB6QixJQWE5QixJQUFJampDLEVBQTZCLE1BQXBCLEtBQUtBLFFBQVEsR0FDcEIsU0FBVXF0QixFQUFLbTBCLEVBQU8va0QsR0FBTyxPQUFPNHdCLEVBQUlydEIsT0FBT3doRCxFQUFPL2tELElBQ3RELFNBQVU0d0IsRUFBS20wQixFQUFPL2tELEdBRXBCLE9BREkra0QsRUFBUSxJQUFHQSxFQUFRbjBCLEVBQUluMEIsT0FBU3NvRCxHQUM3Qm4wQixFQUFJcnRCLE9BQU93aEQsRUFBTy9rRCxNLCtDQ3pTakN4RyxFQUFPRCxRQUlQLFNBQXNCNDZDLEdBQ3BCLElBQUkxVSxFQUE0QixpQkFBZDBVLEVBQXlCQSxFQUFVeEosV0FBVyxHQUFLd0osRUFFckUsT0FDRzFVLEdBQVEsSUFBTUEsR0FBUSxLQUN0QkEsR0FBUSxJQUFNQSxHQUFRLEssNkJDVDNCam1DLEVBQU9ELFFBQVUsQ0FDZnVyRCxVQUFVLEVBQ1ZpVixLQUFLLEVBQ0xDLFlBQVksRUFDWkMsV0FBVyxFQUNYQyxVQUFVLEVBQ1ZDLE9BQVEsRUFBUSxPLDZCQ05sQjNnRSxFQUFPRCxRQU9QLFNBQXFCbUIsR0FDbkIsSUFJSXlpQyxFQUpBOVQsRUFBUSxFQUNSaXlCLEVBQVMsRUFDVG5ILEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FDekIrd0MsRUFBUSxHQUdaLEtBQU9qbUIsS0FBYWdSLEdBR2xCN0osR0FGQW5lLEVBQU9nb0IsRUFBV2hSLEdBSWRoWCxFQUFPLElBQ1RtZSxFQUFTcDRDLEtBQUswSCxNQUFNMHdDLEVBQVNuZSxHQUFRQSxHQUd2Q2k5QixFQUFNOWUsR0FBVWp5QixFQUVoQjhxQixFQUFZejVDLEVBQU15d0IsU0FBUzlCLEdBRzdCLE1BQU8sQ0FBQ2l5QixPQUFRQSxFQUFROGUsTUFBT0EsSUF4QmpDLElBQUlqVixFQUFhLENBQUMsSUFBSyxFQUFHLEtBQU0sSSw2QkNKaEMsSUFNSWtWLEVBQVUsc0lBQ1ZDLEVBQVcsbUNBTWYvZ0UsRUFBUWdoRSxhQUFlLElBQUlwd0QsT0FBTyxPQUFTa3dELEVBQVUsSUFBTUMsRUFBVyxLQUV0RS9nRSxFQUFRK29DLElBQU0sSUFBSW40QixPQUFPLE9BQ3ZCa3dELEVBQVUsSUFDVkMsRUFGdUIseUgsNkJDZnpCOWdFLEVBQU9ELFFBRVAsU0FBZ0JtQixFQUFPOC9ELEdBQ3JCLE9BQU85L0QsRUFBTWtSLFFBQVEsSUFBSzR1RCxLLDZCQ0g1QmhoRSxFQUFPRCxRQUVQLFNBQWdCbUIsRUFBTzgvRCxHQUNyQixJQUFJQyxFQUFPLy9ELEVBQU1rUixRQUFRLElBQUs0dUQsR0FDMUJFLEVBQVFoZ0UsRUFBTWtSLFFBQVEsS0FBTTR1RCxHQUVoQyxJQUFlLElBQVhFLEVBQ0YsT0FBT0QsRUFLVCxPQUFPQSxFQUFPQyxFQUFRRCxFQUFPQyxJLGdCQ0c3QmxoRSxFQUFPRCxRQUFVLEVBQVEsSUFBUixJLGNDZG5CQyxFQUFPRCxRQUhQLFNBQXlCNkMsRUFBR2xCLEdBQzFCLEtBQU1rQixhQUFhbEIsR0FBSSxNQUFNLElBQUlpMkIsVUFBVSxzQ0FFWDMzQixFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QsUyxnQkNIdkcsSUFBSW03QyxFQUFnQixFQUFRLElBQzVCLFNBQVNpbUIsRUFBa0JyMUQsRUFBRy9LLEdBQzVCLElBQUssSUFBSUksRUFBSSxFQUFHQSxFQUFJSixFQUFFa0MsT0FBUTlCLElBQUssQ0FDakMsSUFBSVQsRUFBSUssRUFBRUksR0FDVlQsRUFBRUcsV0FBYUgsRUFBRUcsYUFBYyxFQUFJSCxFQUFFNjJCLGNBQWUsRUFBSSxVQUFXNzJCLElBQU1BLEVBQUU4MkIsVUFBVyxHQUFLNzJCLE9BQU9DLGVBQWVrTCxFQUFHb3ZDLEVBQWN4NkMsRUFBRWMsS0FBTWQsSUFROUlWLEVBQU9ELFFBTFAsU0FBc0IrTCxFQUFHL0ssRUFBR0ksR0FDMUIsT0FBT0osR0FBS29nRSxFQUFrQnIxRCxFQUFFakssVUFBV2QsR0FBSUksR0FBS2dnRSxFQUFrQnIxRCxFQUFHM0ssR0FBSVIsT0FBT0MsZUFBZWtMLEVBQUcsWUFBYSxDQUNqSDByQixVQUFVLElBQ1IxckIsR0FFeUI5TCxFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QsUyxnQkNacEcsSUFBSXEyQixFQUFVLEVBQVEsSUFBd0IsUUFDMUNnckMsRUFBd0IsRUFBUSxLQU1wQ3BoRSxFQUFPRCxRQUxQLFNBQW9Db0IsRUFBRzJLLEdBQ3JDLEdBQUlBLElBQU0sVUFBWXNxQixFQUFRdHFCLElBQU0sbUJBQXFCQSxHQUFJLE9BQU9BLEVBQ3BFLFFBQUksSUFBV0EsRUFBRyxNQUFNLElBQUk2ckIsVUFBVSw0REFDdEMsT0FBT3lwQyxFQUFzQmpnRSxJQUVjbkIsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsZ0JDUGxILElBQUk2M0IsRUFBaUIsRUFBUSxLQWE3QjUzQixFQUFPRCxRQVpQLFNBQW1Cb0IsRUFBRzJLLEdBQ3BCLEdBQUksbUJBQXFCQSxHQUFLLE9BQVNBLEVBQUcsTUFBTSxJQUFJNnJCLFVBQVUsc0RBQzlEeDJCLEVBQUVVLFVBQVlsQixPQUFPWSxPQUFPdUssR0FBS0EsRUFBRWpLLFVBQVcsQ0FDNUN5MEIsWUFBYSxDQUNYcDFCLE1BQU9DLEVBQ1BxMkIsVUFBVSxFQUNWRCxjQUFjLEtBRWQ1MkIsT0FBT0MsZUFBZU8sRUFBRyxZQUFhLENBQ3hDcTJCLFVBQVUsSUFDUjFyQixHQUFLOHJCLEVBQWV6MkIsRUFBRzJLLElBRUQ5TCxFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QsUyxnQkNaaENDLEVBQWdCLFFBRy9FLFdBRUQsYUFFQSxPQUFPLFNBQVV1cEMsR0FJaEIsU0FBUzgzQixFQUFTQyxHQUNqQixHQUFJQSxFQUNILElBQ0MvM0IsRUFBVyszQixFQUFRLEtBQ2xCLE1BQU94MUQsS0FHWCxPQUFPLFNBQW9CdzdCLEVBQVNvVCxFQUFTNVMsRUFBVzhkLEVBQVNpSCxFQUFNRCxFQUFRM3BELEVBQVEzQixFQUFJb2dELEVBQU82ZixHQUNqRyxPQUFRajZCLEdBRVAsS0FBSyxFQUVKLEdBQWMsSUFBVm9hLEdBQXlDLEtBQTFCaEgsRUFBUXZKLFdBQVcsR0FDckMsT0FBTzVILEVBQVdtUixFQUFRLEtBQU0sR0FDakMsTUFFRCxLQUFLLEVBQ0osR0FBVyxJQUFQcDVDLEVBQ0gsT0FBT281QyxFQXJCSyxRQXNCYixNQUVELEtBQUssRUFDSixPQUFRcDVDLEdBRVAsS0FBSyxJQUNMLEtBQUssSUFDSixPQUFPaW9DLEVBQVd6QixFQUFVLEdBQUc0UyxHQUFVLEdBQzFDLFFBQ0MsT0FBT0EsR0FBa0IsSUFBUDZtQixFQS9CUCxRQStCOEIsSUFFNUMsS0FBTSxFQUNMN21CLEVBQVEzbEMsTUFqQ0U4cUQsVUFpQ1l6aUQsUUFBUWlrRCxNQTFDa0Q3ckMsSSw2QkNnRHRFLElBakRJLENBQ2pCZ3NDLHdCQUF5QixFQUN6QkMsa0JBQW1CLEVBQ25CQyxpQkFBa0IsRUFDbEJDLGlCQUFrQixFQUNsQkMsUUFBUyxFQUNUQyxhQUFjLEVBQ2RDLGdCQUFpQixFQUNqQkMsWUFBYSxFQUNiQyxRQUFTLEVBQ1RDLEtBQU0sRUFDTkMsU0FBVSxFQUNWQyxhQUFjLEVBQ2RDLFdBQVksRUFDWkMsYUFBYyxFQUNkQyxVQUFXLEVBQ1hDLFFBQVMsRUFDVEMsV0FBWSxFQUNaQyxZQUFhLEVBQ2JDLGFBQWMsRUFDZEMsV0FBWSxFQUNaQyxjQUFlLEVBQ2ZDLGVBQWdCLEVBQ2hCQyxnQkFBaUIsRUFDakJDLFVBQVcsRUFDWEMsY0FBZSxFQUNmQyxhQUFjLEVBQ2RDLGlCQUFrQixFQUNsQkMsV0FBWSxFQUNaQyxXQUFZLEVBQ1pDLFFBQVMsRUFDVEMsTUFBTyxFQUNQQyxRQUFTLEVBQ1RDLFFBQVMsRUFDVEMsT0FBUSxFQUNSQyxPQUFRLEVBQ1JDLEtBQU0sRUFDTkMsZ0JBQWlCLEVBRWpCQyxZQUFhLEVBQ2JDLGFBQWMsRUFDZEMsWUFBYSxFQUNiQyxnQkFBaUIsRUFDakJDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCQyxjQUFlLEVBQ2ZDLFlBQWEsSSxnQkM5Q2Zwa0UsRUFBT0QsUUFBVSxFQUFRLE0sNkJDRXpCLE1BQU1za0UsVUFBbUI1N0QsTUFDeEIsY0FDQzY3RCxNQUFNLDhCQUNOLzlELEtBQUsvRixLQUFPLGNBK0ZkUixFQUFPRCxRQTNGVyxFQUFFNjBCLFFBQU82RSxXQUFVdjFCLGFBQ3BDLElBQUtnZ0QsT0FBTzF5QyxTQUFTb2pCLEdBQ3BCLE1BQU0sSUFBSStDLFVBQVUsMENBR3JCLElBQUt1c0IsT0FBTzF5QyxTQUFTaW9CLEdBQ3BCLE1BQU0sSUFBSTlCLFVBQVUsNkNBR3JCLE1BQU1ra0IsRUFBUSxJQUFJclksSUFFbEIsSUFBSStnQyxFQUFjLEVBQ2RDLEVBQWMsRUFxQmxCLE1BQU1DLEVBQWMsR0FxQnBCLE1BQU1DLEVBQVd4Z0UsRUFuQmpCLFdBQ0MsTUFBTThjLEVBQU0xZCxLQUFLMGQsTUFFakIsR0FBSXlqRCxFQUFZeGhFLE9BQVMyeEIsRUFFeEIsT0FEQTZ2QyxFQUFZN2dFLEtBQUtvZCxHQUNWLEVBR1IsTUFBTTJqRCxFQUFlRixFQUFZcjBDLFFBQVVxSixFQUUzQyxPQUFJelksR0FBTzJqRCxHQUNWRixFQUFZN2dFLEtBQUtvZCxHQUNWLElBR1J5akQsRUFBWTdnRSxLQUFLK2dFLEdBQ1ZBLEVBQWUzakQsSUFyQ3ZCLFdBQ0MsTUFBTUEsRUFBTTFkLEtBQUswZCxNQUVqQixPQUFLQSxFQUFNdWpELEVBQWU5cUMsR0FDekIrcUMsRUFBYyxFQUNkRCxFQUFjdmpELEVBQ1AsSUFHSndqRCxFQUFjNXZDLEVBQ2pCNHZDLEtBRUFELEdBQWU5cUMsRUFDZitxQyxFQUFjLEdBR1JELEVBQWN2akQsSUEwQnRCLE9BQU80akQsSUFDTixNQUFNQyxFQUFZLFlBQWF4OEQsR0FDOUIsSUFBS3c4RCxFQUFVQyxVQUNkLE1BQU8sVUFBYUYsRUFBVXhpRSxNQUFNbUUsS0FBTThCLEdBQW5DLEdBR1IsSUFBSTJ5QixFQUNKLE9BQU8sSUFBSXJCLFFBQVEsQ0FBQ0MsRUFBUzRELEtBTTVCeEMsRUFBVW5CLFdBTE0sS0FDZkQsRUFBUWdyQyxFQUFVeGlFLE1BQU1tRSxLQUFNOEIsSUFDOUJ3ekMsRUFBTWtwQixPQUFPL3BDLElBR2dCMHBDLEtBRTlCN29CLEVBQU16eUMsSUFBSTR4QixFQUFTd0MsTUFnQnJCLE9BWkFxbkMsRUFBVS9PLE1BQVEsS0FDakIsSUFBSyxNQUFNOTZCLEtBQVc2Z0IsRUFBTWx6QyxPQUMzQmd6QyxhQUFhM2dCLEdBQ2I2Z0IsRUFBTS82QyxJQUFJazZCLEVBQVY2Z0IsQ0FBbUIsSUFBSXdvQixHQUd4QnhvQixFQUFNbXBCLFFBQ05QLEVBQVl6dkIsT0FBTyxFQUFHeXZCLEVBQVl4aEUsU0FHbkM0aEUsRUFBVUMsV0FBWSxFQUVmRCxJQUtUN2tFLEVBQU9ELFFBQVFza0UsV0FBYUEsRyw2QkNuRzVCLElBQUkvbkMsRUFBWSxFQUFRLEtBQ3BCZ3hCLEVBQVEsRUFBUSxLQUNoQjFpQyxFQUFVLEVBQVEsSUFFdEI1cUIsRUFBT0QsUUFBVSxDQUNiNnFCLFFBQVNBLEVBQ1QwaUMsTUFBT0EsRUFDUGh4QixVQUFXQSxJLGNDRmYsU0FBUzJvQyxFQUFXQyxFQUFVQyxHQUM1QixJQUFJejhELEVBQVEsR0FBSUMsRUFBTyxHQU92QixPQUxxQixNQUFqQnc4RCxJQUF1QkEsRUFBZ0IsU0FBUzNqRSxFQUFLTixHQUN2RCxPQUFJd0gsRUFBTSxLQUFPeEgsRUFBYyxlQUN4QixlQUFpQnlILEVBQUtKLE1BQU0sRUFBR0csRUFBTTBKLFFBQVFsUixJQUFRc0gsS0FBSyxLQUFPLE1BR25FLFNBQVNoSCxFQUFLTixHQUNuQixHQUFJd0gsRUFBTXpGLE9BQVMsRUFBRyxDQUNwQixJQUFJbWlFLEVBQVUxOEQsRUFBTTBKLFFBQVE3TCxPQUMzQjYrRCxFQUFVMThELEVBQU1zc0MsT0FBT293QixFQUFVLEdBQUsxOEQsRUFBTTlFLEtBQUsyQyxPQUNqRDYrRCxFQUFVejhELEVBQUtxc0MsT0FBT293QixFQUFTamxCLElBQVUzK0MsR0FBT21ILEVBQUsvRSxLQUFLcEMsSUFDdERrSCxFQUFNMEosUUFBUWxSLEtBQVFBLEVBQVFpa0UsRUFBYy9rRSxLQUFLbUcsS0FBTS9FLEVBQUtOLFNBRTlEd0gsRUFBTTlFLEtBQUsxQyxHQUVoQixPQUFtQixNQUFaZ2tFLEVBQW1CaGtFLEVBQVFna0UsRUFBUzlrRSxLQUFLbUcsS0FBTS9FLEVBQUtOLEtBeEJyRGxCLEVBQU9ELFFBR2pCLFNBQW1CZ0QsRUFBS21pRSxFQUFVRyxFQUFRRixHQUN4QyxPQUFPanNCLEtBQUs1YyxVQUFVdjVCLEVBQUtraUUsRUFBV0MsRUFBVUMsR0FBZ0JFLEtBSDFEQyxhQUFlTCxHLDZCQ0N2QixTQUFTTSxFQUFtQi9oRSxHQUFPLE9BTW5DLFNBQTRCQSxHQUFPLEdBQUloQixNQUFNRixRQUFRa0IsR0FBTSxDQUFFLElBQUssSUFBSXZELEVBQUksRUFBR29jLEVBQU8sSUFBSTdaLE1BQU1nQixFQUFJUCxRQUFTaEQsRUFBSXVELEVBQUlQLE9BQVFoRCxJQUFPb2MsRUFBS3BjLEdBQUt1RCxFQUFJdkQsR0FBTSxPQUFPb2MsR0FObkhtcEQsQ0FBbUJoaUUsSUFJN0QsU0FBMEJpaUUsR0FBUSxHQUFJemtFLE9BQU9xMUIsWUFBWTExQixPQUFPOGtFLElBQWtELHVCQUF6QzlrRSxPQUFPa0IsVUFBVVksU0FBU3JDLEtBQUtxbEUsR0FBZ0MsT0FBT2pqRSxNQUFNcUUsS0FBSzQrRCxHQUpyRkMsQ0FBaUJsaUUsSUFFdEYsV0FBZ0MsTUFBTSxJQUFJbTBCLFVBQVUsbURBRjBDZ3VDLEdBUTlGLElBQUlDLEVBQVEsRUFBUSxHQUVoQkMsRUFBVSxFQUFRLEtBRWxCdlksRUFBUSxFQUFRLEtBRWhCd1ksRUFBWSxFQUFRLEtBRXBCQyxFQUFrQixFQUFRLEtBRTFCQyxFQUFZLEVBQVEsS0FFcEJDLEVBQWUsRUFBUSxLQUV2QkMsRUFBYSxFQUFRLEtBRXJCQyxFQUFnQixFQUFRLEtBRXhCQyxFQUFpQixFQUFRLEtBRXpCQyxFQUFpQixFQUFRLEtBRXpCQyxFQUFtQixFQUFRLEtBRTNCMXdDLEVBQVUsRUFBUSxLQUVsQjJ3QyxFQUFXNWxFLE9BQU9nSSxLQUFLMjlELEdBRXZCRSxFQUFnQixTQUF1Qi9oQyxHQUN6QyxJQUFJZ2lDLEVBQU1oaUMsRUFBTTFULFFBQVUwVCxFQUFNZ1EsVUFBWSxHQUN4Q2l5QixFQUFnQmppQyxFQUFNaWlDLGNBRTFCLEdBQUlqaUMsRUFBTWtpQyxjQUFnQmxpQyxFQUFNbWlDLGdCQUM5QixNQUFNLElBQUluK0QsTUFBTSxzRUFHbEIsSUFBSW8rRCxFQUFZakIsRUFBTVUsRUFBa0I3aEMsRUFBTW9pQyxXQUUxQ0MsRUFEVSxDQUFDLENBQUN4WixFQUFPb1osSUFBZ0I3dUQsT0FBTzRzQixFQUFNc2lDLFNBQVcsSUFDMUM3dkMsT0FBTzh2QyxFQUFtQm5CLEtBQzNDb0IsRUFBU0gsRUFBT3haLE1BQU1tWixHQUN0QlMsRUFBY3RCLEVBQU1uaEMsRUFBTyxDQUM3Qm9pQyxVQUFXQSxFQUNYTSxZQUFhZixFQUFlYSxLQUUxQkcsRUFhTixTQUE2QjNpQyxHQUMzQixJQUFJc2lDLEVBQVUsQ0FBQ1osRUFBZUosS0FDMUJhLEVBQWtCbmlDLEVBQU1taUMsZ0JBRXhCbmlDLEVBQU1raUMsZUFDUkMsRUFBa0JMLEVBQVNwL0MsUUFBTyxTQUFVaVMsR0FDMUMsTUFBZ0IsU0FBVEEsSUFBeUQsSUFBdENxTCxFQUFNa2lDLGFBQWF2MEQsUUFBUWduQixPQUl6RCxJQUFJaXVDLEVBQWdCNWlDLEVBQU02aUMsaUJBQW1CLFNBQVcsU0FFcERWLEdBQW1CQSxFQUFnQjNqRSxPQUFTLEdBQzlDOGpFLEVBQVFuakUsS0FBS3FpRSxFQUFhc0IsT0FBT1gsRUFBaUJTLElBR2hENWlDLEVBQU0raUMsV0FDUlQsRUFBUW5qRSxLQUFLcWlFLEVBQWF3QixXQUFXaGpDLEVBQU0raUMsVUFBV0gsSUFHeEQsSUFBSUssR0FBY2pqQyxFQUFNa2pDLGFBQWVsakMsRUFBTW1qQyxTQUN6Q0MsR0FBaUJwakMsRUFBTTJpQyxZQUFjLElBQUlsbEUsTUFBSyxTQUFVa2xCLEdBRTFELE9BRGE1a0IsTUFBTUYsUUFBUThrQixHQUFRQSxFQUFLLEdBQUtBLEdBQy9CMGdELFdBQWFseUMsRUFBUW15QyxjQUdqQ0wsSUFBZUcsR0FDakJkLEVBQVFuakUsS0FBS29pRSxHQUdmLE9BQU92aEMsRUFBTTJpQyxXQUFhTCxFQUFRbHZELE9BQU80c0IsRUFBTTJpQyxZQUFjTCxFQTNDNUNpQixDQUFvQnZqQyxHQUVqQ3dqQyxFQUFpQm5CLEVBQU9vQixRQUFRakIsR0FDaENrQixFQUFNZixFQUFXbHdDLFFBQU8sU0FBVThCLEVBQU1vdkMsR0FDMUMsT0FBT0EsRUFBT3B2QyxFQUFNa3VDLEtBQ25CZSxHQUNILE9BQU8vQixFQUFXaUMsRUFBS2pCLElBR3pCLFNBQVNGLEVBQWtCRixFQUFRc0IsR0FDakMsT0FBTzVsRSxNQUFNRixRQUFROGxFLEdBQVV0QixFQUFPOXBDLElBQUk1NkIsTUFBTTBrRSxFQUFRdkIsRUFBbUI2QyxJQUFXdEIsRUFBTzlwQyxJQUFJb3JDLEdBb0NuRzVCLEVBQWNyMEIsYUFBZSxDQUMzQjAwQixVQUFXLEdBQ1hjLFlBQVksRUFDWkMsVUFBVSxFQUNWUyxXQUFXLEVBQ1hDLGNBQWMsRUFDZEMsaUJBQWtCbEMsRUFDbEJlLFdBQVksR0FDWkwsUUFBUyxHQUNUTCxjQUFlLElBRWpCRixFQUFjMXpCLFVBQVksQ0FDeEJ3RCxVQUFXd3ZCLEVBQVUzbUQsT0FDckI0UixPQUFRKzBDLEVBQVUzbUQsT0FDbEJzMUIsU0FBVXF4QixFQUFVM21ELE9BQ3BCa3BELFVBQVd2QyxFQUFVblksS0FDckIyYSxhQUFjeEMsRUFBVW5ZLEtBQ3hCZ2EsV0FBWTdCLEVBQVVuWSxLQUN0QmlhLFNBQVU5QixFQUFVblksS0FDcEI2WixVQUFXMUIsRUFBVXI3RCxLQUNyQms4RCxhQUFjYixFQUFVMEMsUUFBUTFDLEVBQVUyQyxNQUFNbEMsSUFDaERLLGdCQUFpQmQsRUFBVTBDLFFBQVExQyxFQUFVMkMsTUFBTWxDLElBQ25EZ0MsaUJBQWtCekMsRUFBVTRDLFVBQVUsQ0FBQzVDLEVBQVVyN0QsS0FBTXE3RCxFQUFVblksT0FDakVnYixXQUFZN0MsRUFBVTRDLFVBQVUsQ0FBQzVDLEVBQVVyN0QsS0FBTXE3RCxFQUFVM21ELFNBQzNEeXBELGtCQUFtQjlDLEVBQVVyN0QsS0FDN0IyOEQsV0FBWXRCLEVBQVUwQyxRQUFRMUMsRUFBVXI3RCxNQUN4QzY4RCxpQkFBa0J4QixFQUFVblksS0FDNUJrWixVQUFXZixFQUFVbmtFLE9BQ3JCb2xFLFFBQVNqQixFQUFVajdELE1BQ25CNjdELGNBQWVaLEVBQVVua0UsUUFFM0I2a0UsRUFBY3FDLE1BQVF0QyxFQUN0QkMsRUFBY0ssVUFBWVAsRUFDMUJFLEVBQWNILGVBQWlCQSxFQUMvQnJtRSxFQUFPRCxRQUFVeW1FLEcsOEJDcElqQixTQUFTc0MsSUFFUCxHQUM0QyxvQkFBbkNDLGdDQUM0QyxtQkFBNUNBLCtCQUErQkQsU0FGeEMsQ0FNSSxFQVVKLElBRUVDLCtCQUErQkQsU0FBU0EsR0FDeEMsTUFBT3p3QyxHQUdQcndCLFFBQVEyeUIsTUFBTXRDLEtBT2hCeXdDLEdBQ0E5b0UsRUFBT0QsUUFBVSxFQUFRLE0sNkJDMUJaLElDTlhpcEUsRUFBa0IsNDVIQUVsQm41QyxFREpKLFNBQWlCcHNCLEdBQ2YsSUFBSTgrQixFQUFRLEdBQ1osT0FBTyxTQUFVbjZCLEdBRWYsWUFEbUJwQyxJQUFmdThCLEVBQU1uNkIsS0FBb0JtNkIsRUFBTW42QixHQUFPM0UsRUFBRzJFLElBQ3ZDbTZCLEVBQU1uNkIsSUNBTCxFQUFRLFNBQVV0QixHQUM1QixPQUFPa2lFLEVBQWdCejlELEtBQUt6RSxJQUFnQyxNQUF2QkEsRUFBS3FxQyxXQUFXLElBRTNCLE1BQXZCcnFDLEVBQUtxcUMsV0FBVyxJQUVoQnJxQyxFQUFLcXFDLFdBQVcsR0FBSyxNQUtYLE8sNkJDUmYsU0FBUzgzQixFQUFRQyxHQUNiLE9BQU92b0UsT0FBT2tCLFVBQVVZLFNBQVNyQyxLQUFLOG9FLEdBQVMzZ0UsTUFBTSxHQUFJLEdBUTdELFNBQVNwRixFQUFZK2xFLEdBQ2pCLE1BQTRCLGNBQXJCRCxFQUFRQyxHQVFuQixTQUFTQyxFQUFPRCxHQUNaLE1BQTRCLFNBQXJCRCxFQUFRQyxHQVFuQixTQUFTbGtDLEVBQWNra0MsR0FDbkIsTUFBeUIsV0FBckJELEVBQVFDLEtBRUxBLEVBQVE1eUMsY0FBZ0IzMUIsUUFBVUEsT0FBTzhnQyxlQUFleW5DLEtBQWF2b0UsT0FBT2tCLFdBaUV2RixTQUFTUyxFQUFRNG1FLEdBQ2IsTUFBNEIsVUFBckJELEVBQVFDLEdBc0huQixTQUFTdG9CLEVBQVNzb0IsR0FDZCxNQUE0QixXQUFyQkQsRUFBUUMsR0E0RW5CLElBQ2lCdG1FLEVBQUdDLEVBQUd2QyxFQUFHQyxFQUFHdUwsRUFBWmxKLEVBRGV1bUUsRUFDWnRtRSxFQURvQk07Ozs7Ozs7Ozs7Ozs7OztBQ3hSeEMsU0FBU2ltRSxJQUNMLElBQUssSUFBSXBuRSxFQUFJLEVBQUcvQixFQUFJLEVBQUdvcEUsRUFBS2huRSxVQUFVWSxPQUFRaEQsRUFBSW9wRSxFQUFJcHBFLElBQUsrQixHQUFLSyxVQUFVcEMsR0FBR2dELE9BQ3hFLElBQUlsQyxFQUFJeUIsTUFBTVIsR0FBSWtCLEVBQUksRUFBM0IsSUFBOEJqRCxFQUFJLEVBQUdBLEVBQUlvcEUsRUFBSXBwRSxJQUN6QyxJQUFLLElBQUkyQyxFQUFJUCxVQUFVcEMsR0FBSXFkLEVBQUksRUFBR2dzRCxFQUFLMW1FLEVBQUVLLE9BQVFxYSxFQUFJZ3NELEVBQUloc0QsSUFBS3BhLElBQzFEbkMsRUFBRW1DLEdBQUtOLEVBQUUwYSxHQUNqQixPQUFPdmMsRUFHWCxTQUFTd29FLEVBQVdDLEVBQU9ob0UsRUFBS2lvRSxFQUFRQyxHQUNwQyxJQUFJQyxFQUFXRCxFQUFlaG9DLHFCQUFxQmxnQyxHQUM3QyxhQUNBLGdCQUNXLGVBQWJtb0UsSUFDQUgsRUFBTWhvRSxHQUFPaW9FLEdBQ0Esa0JBQWJFLEdBQ0FocEUsT0FBT0MsZUFBZTRvRSxFQUFPaG9FLEVBQUssQ0FDOUJOLE1BQU91b0UsRUFDUDVvRSxZQUFZLEVBQ1oyMkIsVUFBVSxFQUNWRCxjQUFjLElBSTFCLFNBQVNxeUMsRUFBaUJDLEVBQVFDLEVBQVVDLEdBRXhDLElBQUsva0MsRUFBYzhrQyxHQU9mLE9BTElDLEdBQWN6bkUsRUFBUXluRSxJQUN0QkEsRUFBVzNzRCxTQUFRLFNBQVV2WixHQUN6QmltRSxFQUFXam1FLEVBQU9nbUUsRUFBUUMsTUFHM0JBLEVBR1gsSUFBSUUsRUFBWSxHQUNaaGxDLEVBQWM2a0MsS0FHZEcsRUFBWVosRUFGRXpvRSxPQUFPcUMsb0JBQW9CNm1FLEdBQ3pCbHBFLE9BQU9nMUIsc0JBQXNCazBDLElBQ0UzeUMsUUFBTyxTQUFVc3lDLEVBQU9ob0UsR0FFbkUsSUFBSXlvRSxFQUFZSixFQUFPcm9FLEdBS3ZCLFFBSk1vL0MsRUFBU3AvQyxLQUFTYixPQUFPcUMsb0JBQW9COG1FLEdBQVUxTSxTQUFTNTdELElBQ2pFby9DLEVBQVNwL0MsS0FBU2IsT0FBT2cxQixzQkFBc0JtMEMsR0FBVTFNLFNBQVM1N0QsS0FDbkUrbkUsRUFBV0MsRUFBT2hvRSxFQUFLeW9FLEVBQVdKLEdBRS9CTCxJQUNSLEtBd0JQLE9BcEJhSixFQUZEem9FLE9BQU9xQyxvQkFBb0I4bUUsR0FDekJucEUsT0FBT2cxQixzQkFBc0JtMEMsSUFDQzV5QyxRQUFPLFNBQVVzeUMsRUFBT2hvRSxHQUVoRSxJQUFJaW9FLEVBQVNLLEVBQVN0b0UsR0FDbEJ5b0UsRUFBYWpsQyxFQUFjNmtDLEdBRXpCQSxFQUFPcm9FLFFBQ1B3RSxFQVlOLE9BVkkrakUsR0FBY3puRSxFQUFReW5FLElBQ3RCQSxFQUFXM3NELFNBQVEsU0FBVXZaLEdBQ3pCNGxFLEVBQVM1bEUsRUFBT29tRSxFQUFXUixXQUlqQnpqRSxJQUFkaWtFLEdBQTJCamxDLEVBQWN5a0MsS0FDekNBLEVBQVNHLEVBQWlCSyxFQUFXUixFQUFRTSxJQUVqRFIsRUFBV0MsRUFBT2hvRSxFQUFLaW9FLEVBQVFLLEdBQ3hCTixJQUNSUSxHQW9DUSxJQXhCZixTQUFlSCxHQUVYLElBREEsSUFBSUssRUFBWSxHQUNQaGpFLEVBQUssRUFBR0EsRUFBSzdFLFVBQVVZLE9BQVFpRSxJQUNwQ2dqRSxFQUFVaGpFLEVBQUssR0FBSzdFLFVBQVU2RSxHQUVsQyxJQUFJNmlFLEVBQWEsS0FDYi9qRCxFQUFPNmpELEVBS1gsT0FKSTdrQyxFQUFjNmtDLElBQVdBLEVBQU9FLFlBQTZDLElBQS9CcHBFLE9BQU9nSSxLQUFLa2hFLEdBQVE1bUUsU0FDbEUraUIsRUFBTyxHQUNQK2pELEVBQWFGLEVBQU9FLFlBRWpCRyxFQUFVaHpDLFFBQU8sU0FBVWpYLEVBQVE2cEQsR0FDdEMsT0FBT0YsRUFBaUIzcEQsRUFBUTZwRCxFQUFVQyxLQUMzQy9qRCxLOzs7Ozs7OztHQ3ZHTSxJQUFJOWxCLEVBQUUsRUFBUSxJQUFpQndCLEVBQUUsbUJBQW9CVixRQUFRQSxPQUFPc3NCLElBQUl2ckIsRUFBRUwsRUFBRVYsT0FBT3NzQixJQUFJLGlCQUFpQixNQUFNa2hDLEVBQUU5c0QsRUFBRVYsT0FBT3NzQixJQUFJLGdCQUFnQixNQUFNdnNCLEVBQUVXLEVBQUVWLE9BQU9zc0IsSUFBSSxrQkFBa0IsTUFBTW5zQixFQUFFTyxFQUFFVixPQUFPc3NCLElBQUkscUJBQXFCLE1BQU1kLEVBQUU5cUIsRUFBRVYsT0FBT3NzQixJQUFJLGtCQUFrQixNQUFNNmdDLEVBQUV6c0QsRUFBRVYsT0FBT3NzQixJQUFJLGtCQUFrQixNQUFNemYsRUFBRW5NLEVBQUVWLE9BQU9zc0IsSUFBSSxpQkFBaUIsTUFBTTlZLEVBQUU5UyxFQUFFVixPQUFPc3NCLElBQUkscUJBQXFCLE1BQU1uZixFQUFFek0sRUFBRVYsT0FBT3NzQixJQUFJLGtCQUFrQixNQUFNK2dDLEVBQUUzc0QsRUFBRVYsT0FBT3NzQixJQUFJLGNBQWMsTUFBTTJnQyxFQUFFdnNELEVBQUVWLE9BQU9zc0IsSUFBSSxjQUN4ZSxNQUFNbWhDLEVBQUUsbUJBQW9CenRELFFBQVFBLE9BQU9xMUIsU0FBUyxTQUFTNjNCLEVBQUV0ckQsR0FBRyxJQUFJLElBQUlDLEVBQUUseURBQXlERCxFQUFFdEMsRUFBRSxFQUFFQSxFQUFFK0IsVUFBVVksT0FBTzNDLElBQUl1QyxHQUFHLFdBQVd3bEQsbUJBQW1CaG1ELFVBQVUvQixJQUFJLE1BQU0seUJBQXlCc0MsRUFBRSxXQUFXQyxFQUFFLGlIQUMvUCxJQUFJNEksRUFBRSxDQUFDMCtELFVBQVUsV0FBVyxPQUFNLEdBQUlDLG1CQUFtQixhQUFhQyxvQkFBb0IsYUFBYUMsZ0JBQWdCLGNBQWNyK0QsRUFBRSxHQUFHLFNBQVNvekIsRUFBRXo4QixFQUFFQyxFQUFFdkMsR0FBR2lHLEtBQUtrK0IsTUFBTTdoQyxFQUFFMkQsS0FBSytnQyxRQUFRemtDLEVBQUUwRCxLQUFLeXhELEtBQUsvckQsRUFBRTFGLEtBQUtna0UsUUFBUWpxRSxHQUFHbUwsRUFDcE4sU0FBUysrRCxLQUE2QixTQUFTQyxFQUFFN25FLEVBQUVDLEVBQUV2QyxHQUFHaUcsS0FBS2srQixNQUFNN2hDLEVBQUUyRCxLQUFLK2dDLFFBQVF6a0MsRUFBRTBELEtBQUt5eEQsS0FBSy9yRCxFQUFFMUYsS0FBS2drRSxRQUFRanFFLEdBQUdtTCxFQURzRzR6QixFQUFFeDlCLFVBQVVtdkMsaUJBQWlCLEdBQUczUixFQUFFeDlCLFVBQVU2b0UsU0FBUyxTQUFTOW5FLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsbUJBQW9CQSxHQUFHLE1BQU1BLEVBQUUsTUFBTTZGLE1BQU15bEQsRUFBRSxLQUFLM25ELEtBQUtna0UsUUFBUUQsZ0JBQWdCL2pFLEtBQUszRCxFQUFFQyxFQUFFLGFBQWF3OEIsRUFBRXg5QixVQUFVOG9FLFlBQVksU0FBUy9uRSxHQUFHMkQsS0FBS2drRSxRQUFRSCxtQkFBbUI3akUsS0FBSzNELEVBQUUsZ0JBQ25kNG5FLEVBQUUzb0UsVUFBVXc5QixFQUFFeDlCLFVBQXNGLElBQUk2c0QsRUFBRStiLEVBQUU1b0UsVUFBVSxJQUFJMm9FLEVBQUU5YixFQUFFcDRCLFlBQVltMEMsRUFBRXZxRSxFQUFFd3VELEVBQUVydkIsRUFBRXg5QixXQUFXNnNELEVBQUVrYyxzQkFBcUIsRUFBRyxJQUFJamMsRUFBRSxDQUFDa2MsUUFBUSxNQUFNQyxFQUFFbnFFLE9BQU9rQixVQUFVQyxlQUFlbVosRUFBRSxDQUFDelosS0FBSSxFQUFHNDBDLEtBQUksRUFBRzIwQixRQUFPLEVBQUdDLFVBQVMsR0FDaFMsU0FBU2orRCxFQUFFbkssRUFBRUMsRUFBRXZDLEdBQUcsSUFBSXdMLEVBQUV2TCxFQUFFLEdBQUcwMkIsRUFBRSxLQUFLL3pCLEVBQUUsS0FBSyxHQUFHLE1BQU1MLEVBQUUsSUFBSWlKLFVBQUssSUFBU2pKLEVBQUV1ekMsTUFBTWx6QyxFQUFFTCxFQUFFdXpDLFVBQUssSUFBU3Z6QyxFQUFFckIsTUFBTXkxQixFQUFFLEdBQUdwMEIsRUFBRXJCLEtBQUtxQixFQUFFaW9FLEVBQUUxcUUsS0FBS3lDLEVBQUVpSixLQUFLbVAsRUFBRW5aLGVBQWVnSyxLQUFLdkwsRUFBRXVMLEdBQUdqSixFQUFFaUosSUFBSSxJQUFJd3pCLEVBQUVqOUIsVUFBVVksT0FBTyxFQUFFLEdBQUcsSUFBSXE4QixFQUFFLytCLEVBQUVrMEMsU0FBU24wQyxPQUFPLEdBQUcsRUFBRWcvQixFQUFFLENBQUMsSUFBSSxJQUFJL3lCLEVBQUUvSixNQUFNODhCLEdBQUdqL0IsRUFBRSxFQUFFQSxFQUFFaS9CLEVBQUVqL0IsSUFBSWtNLEVBQUVsTSxHQUFHZ0MsVUFBVWhDLEVBQUUsR0FBR0UsRUFBRWswQyxTQUFTbG9DLEVBQUUsR0FBRzNKLEdBQUdBLEVBQUV1dkMsYUFBYSxJQUFJcm1DLEtBQUt3ekIsRUFBRTE4QixFQUFFdXZDLGtCQUFlLElBQVM1eEMsRUFBRXVMLEtBQUt2TCxFQUFFdUwsR0FBR3d6QixFQUFFeHpCLElBQUksTUFBTSxDQUFDc25DLFNBQVNyeEMsRUFBRXEzQixLQUFLeDJCLEVBQUVwQixJQUFJeTFCLEVBQUVtZixJQUFJbHpDLEVBQUV1aEMsTUFBTWxrQyxFQUFFMHFFLE9BQU90YyxFQUFFa2MsU0FDeFUsU0FBUzdxQixFQUFFcDlDLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRXd3QyxXQUFXcnhDLEVBQTBHLElBQUltcEUsRUFBRSxPQUFPaCtELEVBQUUsR0FBRyxTQUFTaWpELEVBQUV2dEQsRUFBRUMsRUFBRXZDLEVBQUV3TCxHQUFHLEdBQUdvQixFQUFFakssT0FBTyxDQUFDLElBQUkxQyxFQUFFMk0sRUFBRStxRCxNQUE4RCxPQUF4RDEzRCxFQUFFMGYsT0FBT3JkLEVBQUVyQyxFQUFFNHFFLFVBQVV0b0UsRUFBRXRDLEVBQUVrSyxLQUFLbkssRUFBRUMsRUFBRSttQyxRQUFReDdCLEVBQUV2TCxFQUFFdXRELE1BQU0sRUFBU3Z0RCxFQUFFLE1BQU0sQ0FBQzBmLE9BQU9yZCxFQUFFdW9FLFVBQVV0b0UsRUFBRTRILEtBQUtuSyxFQUFFZ25DLFFBQVF4N0IsRUFBRWdpRCxNQUFNLEdBQzViLFNBQVNTLEVBQUUzckQsR0FBR0EsRUFBRXFkLE9BQU8sS0FBS3JkLEVBQUV1b0UsVUFBVSxLQUFLdm9FLEVBQUU2SCxLQUFLLEtBQUs3SCxFQUFFMGtDLFFBQVEsS0FBSzFrQyxFQUFFa3JELE1BQU0sRUFBRSxHQUFHNWdELEVBQUVqSyxRQUFRaUssRUFBRXRKLEtBQUtoQixHQUUyRixTQUFTa3NELEVBQUVsc0QsRUFBRUMsRUFBRXZDLEdBQUcsT0FBTyxNQUFNc0MsRUFBRSxFQURsTyxTQUFTZ3NELEVBQUVoc0QsRUFBRUMsRUFBRXZDLEVBQUV3TCxHQUFHLElBQUl2TCxTQUFTcUMsRUFBSyxjQUFjckMsR0FBRyxZQUFZQSxJQUFFcUMsRUFBRSxNQUFLLElBQUlxMEIsR0FBRSxFQUFHLEdBQUcsT0FBT3IwQixFQUFFcTBCLEdBQUUsT0FBUSxPQUFPMTJCLEdBQUcsSUFBSyxTQUFTLElBQUssU0FBUzAyQixHQUFFLEVBQUcsTUFBTSxJQUFLLFNBQVMsT0FBT3IwQixFQUFFd3dDLFVBQVUsS0FBS3J4QyxFQUFFLEtBQUt5c0QsRUFBRXYzQixHQUFFLEdBQUksR0FBR0EsRUFBRSxPQUFPMzJCLEVBQUV3TCxFQUFFbEosRUFBRSxLQUFLQyxFQUFFLElBQUlnc0QsRUFBRWpzRCxFQUFFLEdBQUdDLEdBQUcsRUFBeUIsR0FBdkJvMEIsRUFBRSxFQUFFcDBCLEVBQUUsS0FBS0EsRUFBRSxJQUFJQSxFQUFFLElBQU9MLE1BQU1GLFFBQVFNLEdBQUcsSUFBSSxJQUFJTSxFQUFFLEVBQUVBLEVBQUVOLEVBQUVLLE9BQU9DLElBQUksQ0FBUSxJQUFJbzhCLEVBQUV6OEIsRUFBRWdzRCxFQUFmdHVELEVBQUVxQyxFQUFFTSxHQUFlQSxHQUFHK3pCLEdBQUcyM0IsRUFBRXJ1RCxFQUFFKytCLEVBQUVoL0IsRUFBRXdMLFFBQVEsR0FBRyxPQUFPbEosR0FBRyxpQkFBa0JBLEVBQUUwOEIsRUFBRSxLQUFpQ0EsRUFBRSxtQkFBN0JBLEVBQUVtdkIsR0FBRzdyRCxFQUFFNnJELElBQUk3ckQsRUFBRSxlQUFzQzA4QixFQUFFLEtBQU0sbUJBQW9CQSxFQUFFLElBQUkxOEIsRUFBRTA4QixFQUFFbC9CLEtBQUt3QyxHQUFHTSxFQUNwZixJQUFJM0MsRUFBRXFDLEVBQUUyYSxRQUFRNmEsTUFBNkJuQixHQUFHMjNCLEVBQTFCcnVELEVBQUVBLEVBQUVXLE1BQU1vK0IsRUFBRXo4QixFQUFFZ3NELEVBQUV0dUQsRUFBRTJDLEtBQWM1QyxFQUFFd0wsUUFBUSxHQUFHLFdBQVd2TCxFQUFFLE1BQU1ELEVBQUUsR0FBR3NDLEVBQUU2RixNQUFNeWxELEVBQUUsR0FBRyxvQkFBb0I1dEQsRUFBRSxxQkFBcUJLLE9BQU9nSSxLQUFLL0YsR0FBRzRGLEtBQUssTUFBTSxJQUFJbEksRUFBRSxLQUFLLE9BQU8yMkIsRUFBcUMyM0IsQ0FBRWhzRCxFQUFFLEdBQUdDLEVBQUV2QyxHQUFHLFNBQVN1dUQsRUFBRWpzRCxFQUFFQyxHQUFHLE1BQU0saUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsTUFBTUEsRUFBRXBCLElBSDlJLFNBQWdCb0IsR0FBRyxJQUFJQyxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksTUFBTSxNQUFNLEtBQUssR0FBR0QsR0FBR21JLFFBQVEsU0FBUSxTQUFTbkksR0FBRyxPQUFPQyxFQUFFRCxNQUcrQzR2QyxDQUFPNXZDLEVBQUVwQixLQUFLcUIsRUFBRUosU0FBUyxJQUFJLFNBQVN1TCxFQUFFcEwsRUFBRUMsR0FBR0QsRUFBRTZILEtBQUtySyxLQUFLd0MsRUFBRTBrQyxRQUFRemtDLEVBQUVELEVBQUVrckQsU0FDeFgsU0FBU3NkLEVBQUd4b0UsRUFBRUMsRUFBRXZDLEdBQUcsSUFBSXdMLEVBQUVsSixFQUFFcWQsT0FBTzFmLEVBQUVxQyxFQUFFdW9FLFVBQVV2b0UsRUFBRUEsRUFBRTZILEtBQUtySyxLQUFLd0MsRUFBRTBrQyxRQUFRemtDLEVBQUVELEVBQUVrckQsU0FBU3RyRCxNQUFNRixRQUFRTSxHQUFHeW9FLEVBQUV6b0UsRUFBRWtKLEVBQUV4TCxHQUFFLFNBQVNzQyxHQUFHLE9BQU9BLEtBQUksTUFBTUEsSUFBSW85QyxFQUFFcDlDLEtBQUtBLEVBSnRKLFNBQVdBLEVBQUVDLEdBQUcsTUFBTSxDQUFDdXdDLFNBQVNyeEMsRUFBRXEzQixLQUFLeDJCLEVBQUV3MkIsS0FBSzUzQixJQUFJcUIsRUFBRXV6QyxJQUFJeHpDLEVBQUV3ekMsSUFBSTNSLE1BQU03aEMsRUFBRTZoQyxNQUFNd21DLE9BQU9yb0UsRUFBRXFvRSxRQUltRTNjLENBQUUxckQsRUFBRXJDLElBQUlxQyxFQUFFcEIsS0FBS3FCLEdBQUdBLEVBQUVyQixNQUFNb0IsRUFBRXBCLElBQUksSUFBSSxHQUFHb0IsRUFBRXBCLEtBQUt1SixRQUFRbWdFLEVBQUUsT0FBTyxLQUFLNXFFLElBQUl3TCxFQUFFbEksS0FBS2hCLElBQUksU0FBU3lvRSxFQUFFem9FLEVBQUVDLEVBQUV2QyxFQUFFd0wsRUFBRXZMLEdBQUcsSUFBSTAyQixFQUFFLEdBQUcsTUFBTTMyQixJQUFJMjJCLEdBQUcsR0FBRzMyQixHQUFHeUssUUFBUW1nRSxFQUFFLE9BQU8sS0FBa0JwYyxFQUFFbHNELEVBQUV3b0UsRUFBakJ2b0UsRUFBRXN0RCxFQUFFdHRELEVBQUVvMEIsRUFBRW5yQixFQUFFdkwsSUFBYWd1RCxFQUFFMXJELEdBQUcsSUFBSXlvRSxFQUFFLENBQUNULFFBQVEsTUFBTSxTQUFTOWIsSUFBSSxJQUFJbnNELEVBQUUwb0UsRUFBRVQsUUFBUSxHQUFHLE9BQU9qb0UsRUFBRSxNQUFNNkYsTUFBTXlsRCxFQUFFLE1BQU0sT0FBT3RyRCxFQUN4YSxJQUFJMm9FLEVBQUcsQ0FBQ0MsdUJBQXVCRixFQUFFRyx3QkFBd0IsQ0FBQ0MsU0FBUyxNQUFNQyxrQkFBa0JoZCxFQUFFaWQscUJBQXFCLENBQUNmLFNBQVEsR0FBSTUyQyxPQUFPL3pCLEdBQUdILEVBQVE4ckUsU0FBUyxDQUFDdG9FLElBQUksU0FBU1gsRUFBRUMsRUFBRXZDLEdBQUcsR0FBRyxNQUFNc0MsRUFBRSxPQUFPQSxFQUFFLElBQUlrSixFQUFFLEdBQW1CLE9BQWhCdS9ELEVBQUV6b0UsRUFBRWtKLEVBQUUsS0FBS2pKLEVBQUV2QyxHQUFVd0wsR0FBR3NSLFFBQVEsU0FBU3hhLEVBQUVDLEVBQUV2QyxHQUFHLEdBQUcsTUFBTXNDLEVBQUUsT0FBT0EsRUFBcUJrc0QsRUFBRWxzRCxFQUFFb0wsRUFBdkJuTCxFQUFFc3RELEVBQUUsS0FBSyxLQUFLdHRELEVBQUV2QyxJQUFZaXVELEVBQUUxckQsSUFBSWlyRCxNQUFNLFNBQVNsckQsR0FBRyxPQUFPa3NELEVBQUVsc0QsR0FBRSxXQUFXLE9BQU8sT0FBTSxPQUFPZ3FCLFFBQVEsU0FBU2hxQixHQUFHLElBQUlDLEVBQUUsR0FBcUMsT0FBbEN3b0UsRUFBRXpvRSxFQUFFQyxFQUFFLE1BQUssU0FBU0QsR0FBRyxPQUFPQSxLQUFXQyxHQUFHaXBFLEtBQUssU0FBU2xwRSxHQUFHLElBQUlvOUMsRUFBRXA5QyxHQUFHLE1BQU02RixNQUFNeWxELEVBQUUsTUFBTSxPQUFPdHJELElBQzllN0MsRUFBUTI1QyxVQUFVcmEsRUFBRXQvQixFQUFRZ3NFLFNBQVNockUsRUFBRWhCLEVBQVFpc0UsU0FBU3gvQyxFQUFFenNCLEVBQVFrc0UsY0FBY3hCLEVBQUUxcUUsRUFBUW1zRSxXQUFXL3FFLEVBQUVwQixFQUFRb3NFLFNBQVNoK0QsRUFBRXBPLEVBQVFxc0UsbURBQW1EYixFQUNyTHhyRSxFQUFRc3NFLGFBQWEsU0FBU3pwRSxFQUFFQyxFQUFFdkMsR0FBRyxHQUFHLE1BQU9zQyxFQUFjLE1BQU02RixNQUFNeWxELEVBQUUsSUFBSXRyRCxJQUFJLElBQUlrSixFQUFFNUwsRUFBRSxHQUFHMEMsRUFBRTZoQyxPQUFPbGtDLEVBQUVxQyxFQUFFcEIsSUFBSXkxQixFQUFFcjBCLEVBQUV3ekMsSUFBSWx6QyxFQUFFTixFQUFFcW9FLE9BQU8sR0FBRyxNQUFNcG9FLEVBQUUsQ0FBb0UsUUFBbkUsSUFBU0EsRUFBRXV6QyxNQUFNbmYsRUFBRXAwQixFQUFFdXpDLElBQUlsekMsRUFBRXlyRCxFQUFFa2MsY0FBUyxJQUFTaG9FLEVBQUVyQixNQUFNakIsRUFBRSxHQUFHc0MsRUFBRXJCLEtBQVFvQixFQUFFdzJCLE1BQU14MkIsRUFBRXcyQixLQUFLK1ksYUFBYSxJQUFJN1MsRUFBRTE4QixFQUFFdzJCLEtBQUsrWSxhQUFhLElBQUk1bEMsS0FBSzFKLEVBQUVpb0UsRUFBRTFxRSxLQUFLeUMsRUFBRTBKLEtBQUswTyxFQUFFblosZUFBZXlLLEtBQUtULEVBQUVTLFFBQUcsSUFBUzFKLEVBQUUwSixTQUFJLElBQVMreUIsRUFBRUEsRUFBRS95QixHQUFHMUosRUFBRTBKLElBQUksSUFBSUEsRUFBRWxLLFVBQVVZLE9BQU8sRUFBRSxHQUFHLElBQUlzSixFQUFFVCxFQUFFMm9DLFNBQVNuMEMsT0FBTyxHQUFHLEVBQUVpTSxFQUFFLENBQUMreUIsRUFBRTk4QixNQUFNK0osR0FBRyxJQUFJLElBQUlsTSxFQUFFLEVBQUVBLEVBQUVrTSxFQUFFbE0sSUFBSWkvQixFQUFFai9CLEdBQUdnQyxVQUFVaEMsRUFBRSxHQUFHeUwsRUFBRTJvQyxTQUFTblYsRUFBRSxNQUFNLENBQUM4VCxTQUFTcnhDLEVBQUVxM0IsS0FBS3gyQixFQUFFdzJCLEtBQ3hmNTNCLElBQUlqQixFQUFFNjFDLElBQUluZixFQUFFd04sTUFBTTM0QixFQUFFbS9ELE9BQU8vbkUsSUFBSW5ELEVBQVF1c0UsY0FBYyxTQUFTMXBFLEVBQUVDLEdBQThLLFlBQTNLLElBQVNBLElBQUlBLEVBQUUsT0FBTUQsRUFBRSxDQUFDd3dDLFNBQVN2bEMsRUFBRTArRCxzQkFBc0IxcEUsRUFBRTJwRSxjQUFjNXBFLEVBQUU2cEUsZUFBZTdwRSxFQUFFOHBFLGFBQWEsRUFBRS8zQixTQUFTLEtBQUtSLFNBQVMsT0FBUVEsU0FBUyxDQUFDdkIsU0FBUythLEVBQUV3ZSxTQUFTL3BFLEdBQVVBLEVBQUV1eEMsU0FBU3Z4QyxHQUFHN0MsRUFBUW1xQyxjQUFjbjlCLEVBQUVoTixFQUFRNnNFLGNBQWMsU0FBU2hxRSxHQUFHLElBQUlDLEVBQUVrSyxFQUFFdEwsS0FBSyxLQUFLbUIsR0FBWSxPQUFUQyxFQUFFdTJCLEtBQUt4MkIsRUFBU0MsR0FBRzlDLEVBQVE4c0UsVUFBVSxXQUFXLE1BQU0sQ0FBQ2hDLFFBQVEsT0FBTzlxRSxFQUFRZzRDLFdBQVcsU0FBU24xQyxHQUFHLE1BQU0sQ0FBQ3d3QyxTQUFTNStCLEVBQUU2K0IsT0FBT3p3QyxJQUFJN0MsRUFBUStzRSxlQUFlOXNCLEVBQzNlamdELEVBQVFndEUsS0FBSyxTQUFTbnFFLEdBQUcsTUFBTSxDQUFDd3dDLFNBQVM2YSxFQUFFK2UsTUFBTXBxRSxFQUFFcXFFLFNBQVMsRUFBRUMsUUFBUSxPQUFPbnRFLEVBQVFvdEUsS0FBSyxTQUFTdnFFLEVBQUVDLEdBQUcsTUFBTSxDQUFDdXdDLFNBQVNpYixFQUFFajFCLEtBQUt4MkIsRUFBRXdxRSxhQUFRLElBQVN2cUUsRUFBRSxLQUFLQSxJQUFJOUMsRUFBUXN0RSxZQUFZLFNBQVN6cUUsRUFBRUMsR0FBRyxPQUFPa3NELElBQUlzZSxZQUFZenFFLEVBQUVDLElBQUk5QyxFQUFRdXRFLFdBQVcsU0FBUzFxRSxFQUFFQyxHQUFHLE9BQU9rc0QsSUFBSXVlLFdBQVcxcUUsRUFBRUMsSUFBSTlDLEVBQVF3dEUsY0FBYyxhQUFheHRFLEVBQVF5dEUsVUFBVSxTQUFTNXFFLEVBQUVDLEdBQUcsT0FBT2tzRCxJQUFJeWUsVUFBVTVxRSxFQUFFQyxJQUFJOUMsRUFBUTB0RSxvQkFBb0IsU0FBUzdxRSxFQUFFQyxFQUFFdkMsR0FBRyxPQUFPeXVELElBQUkwZSxvQkFBb0I3cUUsRUFBRUMsRUFBRXZDLElBQ3RjUCxFQUFRMnRFLGdCQUFnQixTQUFTOXFFLEVBQUVDLEdBQUcsT0FBT2tzRCxJQUFJMmUsZ0JBQWdCOXFFLEVBQUVDLElBQUk5QyxFQUFRNHRFLFFBQVEsU0FBUy9xRSxFQUFFQyxHQUFHLE9BQU9rc0QsSUFBSTRlLFFBQVEvcUUsRUFBRUMsSUFBSTlDLEVBQVE2dEUsV0FBVyxTQUFTaHJFLEVBQUVDLEVBQUV2QyxHQUFHLE9BQU95dUQsSUFBSTZlLFdBQVdockUsRUFBRUMsRUFBRXZDLElBQUlQLEVBQVE4dEUsT0FBTyxTQUFTanJFLEdBQUcsT0FBT21zRCxJQUFJOGUsT0FBT2pyRSxJQUFJN0MsRUFBUSt0RSxTQUFTLFNBQVNsckUsR0FBRyxPQUFPbXNELElBQUkrZSxTQUFTbHJFLElBQUk3QyxFQUFRczBCLFFBQVEsVyxnQkN4QnJULElBQUkrQixFQUFVLEVBQVEsSUFBd0IsUUFXOUNwMkIsRUFBT0QsUUFWUCxTQUFxQm9CLEVBQUdKLEdBQ3RCLEdBQUksVUFBWXExQixFQUFRajFCLEtBQU9BLEVBQUcsT0FBT0EsRUFDekMsSUFBSTJLLEVBQUkzSyxFQUFFSCxPQUFPcXhELGFBQ2pCLFFBQUksSUFBV3ZtRCxFQUFHLENBQ2hCLElBQUk3TCxFQUFJNkwsRUFBRTFMLEtBQUtlLEVBQUdKLEdBQUssV0FDdkIsR0FBSSxVQUFZcTFCLEVBQVFuMkIsR0FBSSxPQUFPQSxFQUNuQyxNQUFNLElBQUkwM0IsVUFBVSxnREFFdEIsT0FBUSxXQUFhNTJCLEVBQUlnbUIsT0FBU205QixRQUFRL2lELElBRWRuQixFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QsUyxjQ1BuR0MsRUFBT0QsUUFKUCxTQUFnQytMLEdBQzlCLFFBQUksSUFBV0EsRUFBRyxNQUFNLElBQUlpNUIsZUFBZSw2REFDM0MsT0FBT2o1QixHQUVnQzlMLEVBQU9ELFFBQVFzQixZQUFhLEVBQU1yQixFQUFPRCxRQUFpQixRQUFJQyxFQUFPRCxTLGNDSjlHLFNBQVNnM0IsRUFBZ0I1MUIsRUFBRzJLLEdBQzFCLE9BQU85TCxFQUFPRCxRQUFVZzNCLEVBQWtCcDJCLE9BQU9pM0IsZUFBaUJqM0IsT0FBT2kzQixlQUFlbjJCLE9BQVMsU0FBVU4sRUFBRzJLLEdBQzVHLE9BQU8zSyxFQUFFMDJCLFVBQVkvckIsRUFBRzNLLEdBQ3ZCbkIsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFFBQVNnM0IsRUFBZ0I1MUIsRUFBRzJLLEdBRXRHOUwsRUFBT0QsUUFBVWczQixFQUFpQi8yQixFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QsUzs7Ozs7Ozs7R0NJMUYsSUFBSThDLEVBQUUsbUJBQW9CN0IsUUFBUUEsT0FBT3NzQixJQUFJaHRCLEVBQUV1QyxFQUFFN0IsT0FBT3NzQixJQUFJLGlCQUFpQixNQUFNL3NCLEVBQUVzQyxFQUFFN0IsT0FBT3NzQixJQUFJLGdCQUFnQixNQUFNeGhCLEVBQUVqSixFQUFFN0IsT0FBT3NzQixJQUFJLGtCQUFrQixNQUFNZ1MsRUFBRXo4QixFQUFFN0IsT0FBT3NzQixJQUFJLHFCQUFxQixNQUFNMkosRUFBRXAwQixFQUFFN0IsT0FBT3NzQixJQUFJLGtCQUFrQixNQUFNL2dCLEVBQUUxSixFQUFFN0IsT0FBT3NzQixJQUFJLGtCQUFrQixNQUFNcHFCLEVBQUVMLEVBQUU3QixPQUFPc3NCLElBQUksaUJBQWlCLE1BQU1wdEIsRUFBRTJDLEVBQUU3QixPQUFPc3NCLElBQUksb0JBQW9CLE1BQU1qdEIsRUFBRXdDLEVBQUU3QixPQUFPc3NCLElBQUkseUJBQXlCLE1BQU01ckIsRUFBRW1CLEVBQUU3QixPQUFPc3NCLElBQUkscUJBQXFCLE1BQU12ckIsRUFBRWMsRUFBRTdCLE9BQU9zc0IsSUFBSSxrQkFBa0IsTUFBTWtoQyxFQUFFM3JELEVBQ3BmN0IsT0FBT3NzQixJQUFJLHVCQUF1QixNQUFNdnNCLEVBQUU4QixFQUFFN0IsT0FBT3NzQixJQUFJLGNBQWMsTUFBTW5zQixFQUFFMEIsRUFBRTdCLE9BQU9zc0IsSUFBSSxjQUFjLE1BQU02Z0MsRUFBRXRyRCxFQUFFN0IsT0FBT3NzQixJQUFJLGVBQWUsTUFBTXpmLEVBQUVoTCxFQUFFN0IsT0FBT3NzQixJQUFJLHFCQUFxQixNQUFNOVksRUFBRTNSLEVBQUU3QixPQUFPc3NCLElBQUksbUJBQW1CLE1BQU1uZixFQUFFdEwsRUFBRTdCLE9BQU9zc0IsSUFBSSxlQUFlLE1BQ2xRLFNBQVMrZ0MsRUFBRXpyRCxHQUFHLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxJQUFJNHBCLEVBQUU1cEIsRUFBRXd3QyxTQUFTLE9BQU81bUIsR0FBRyxLQUFLbHNCLEVBQUUsT0FBT3NDLEVBQUVBLEVBQUV3MkIsTUFBUSxLQUFLbDVCLEVBQUUsS0FBS0csRUFBRSxLQUFLeUwsRUFBRSxLQUFLbXJCLEVBQUUsS0FBS3FJLEVBQUUsS0FBS3Y5QixFQUFFLE9BQU9hLEVBQUUsUUFBUSxPQUFPQSxFQUFFQSxHQUFHQSxFQUFFd3dDLFVBQVksS0FBS2x3QyxFQUFFLEtBQUt4QixFQUFFLEtBQUtQLEVBQUUsS0FBS0osRUFBRSxLQUFLd0wsRUFBRSxPQUFPM0osRUFBRSxRQUFRLE9BQU80cEIsR0FBRyxLQUFLanNCLEVBQUUsT0FBT2lzQixJQUFJLFNBQVN5aEMsRUFBRXJyRCxHQUFHLE9BQU95ckQsRUFBRXpyRCxLQUFLdkMsRUFBRU4sRUFBUWd1RSxVQUFVN3RFLEVBQUVILEVBQVFpdUUsZUFBZTN0RSxFQUFFTixFQUFRa3VFLGdCQUFnQi9xRSxFQUFFbkQsRUFBUW11RSxnQkFBZ0IzaEUsRUFBRXhNLEVBQVFvdUUsUUFBUTd0RSxFQUFFUCxFQUFRcXVFLFdBQVcxc0UsRUFBRTNCLEVBQVFnc0UsU0FBU2pnRSxFQUFFL0wsRUFBUXN1RSxLQUFLbHRFLEVBQUVwQixFQUFRdXVFLEtBQUt2dEUsRUFBRWhCLEVBQVF3dUUsT0FBT2h1RSxFQUNoZlIsRUFBUWlzRSxTQUFTLzBDLEVBQUVsM0IsRUFBUW1zRSxXQUFXNXNDLEVBQUV2L0IsRUFBUW9zRSxTQUFTcHFFLEVBQUVoQyxFQUFReXVFLFlBQVksU0FBUzVyRSxHQUFHLE9BQU9xckQsRUFBRXJyRCxJQUFJeXJELEVBQUV6ckQsS0FBSzFDLEdBQUdILEVBQVEwdUUsaUJBQWlCeGdCLEVBQUVsdUQsRUFBUTJ1RSxrQkFBa0IsU0FBUzlyRSxHQUFHLE9BQU95ckQsRUFBRXpyRCxLQUFLTSxHQUFHbkQsRUFBUTR1RSxrQkFBa0IsU0FBUy9yRSxHQUFHLE9BQU95ckQsRUFBRXpyRCxLQUFLMkosR0FBR3hNLEVBQVFrakQsVUFBVSxTQUFTcmdELEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRXd3QyxXQUFXOXlDLEdBQUdQLEVBQVE2dUUsYUFBYSxTQUFTaHNFLEdBQUcsT0FBT3lyRCxFQUFFenJELEtBQUtsQixHQUFHM0IsRUFBUTh1RSxXQUFXLFNBQVNqc0UsR0FBRyxPQUFPeXJELEVBQUV6ckQsS0FBS2tKLEdBQUcvTCxFQUFRK3VFLE9BQU8sU0FBU2xzRSxHQUFHLE9BQU95ckQsRUFBRXpyRCxLQUFLekIsR0FDemRwQixFQUFRZ3ZFLE9BQU8sU0FBU25zRSxHQUFHLE9BQU95ckQsRUFBRXpyRCxLQUFLN0IsR0FBR2hCLEVBQVFpdkUsU0FBUyxTQUFTcHNFLEdBQUcsT0FBT3lyRCxFQUFFenJELEtBQUtyQyxHQUFHUixFQUFRa3ZFLFdBQVcsU0FBU3JzRSxHQUFHLE9BQU95ckQsRUFBRXpyRCxLQUFLcTBCLEdBQUdsM0IsRUFBUW12RSxhQUFhLFNBQVN0c0UsR0FBRyxPQUFPeXJELEVBQUV6ckQsS0FBSzA4QixHQUFHdi9CLEVBQVFvdkUsV0FBVyxTQUFTdnNFLEdBQUcsT0FBT3lyRCxFQUFFenJELEtBQUtiLEdBQ3pPaEMsRUFBUXF2RSxtQkFBbUIsU0FBU3hzRSxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLG1CQUFvQkEsR0FBR0EsSUFBSWtKLEdBQUdsSixJQUFJdkMsR0FBR3VDLElBQUlxMEIsR0FBR3IwQixJQUFJMDhCLEdBQUcxOEIsSUFBSWIsR0FBR2EsSUFBSTRyRCxHQUFHLGlCQUFrQjVyRCxHQUFHLE9BQU9BLElBQUlBLEVBQUV3d0MsV0FBV2p5QyxHQUFHeUIsRUFBRXd3QyxXQUFXcnlDLEdBQUc2QixFQUFFd3dDLFdBQVc3bUMsR0FBRzNKLEVBQUV3d0MsV0FBV2x3QyxHQUFHTixFQUFFd3dDLFdBQVcxeEMsR0FBR2tCLEVBQUV3d0MsV0FBV3ZsQyxHQUFHakwsRUFBRXd3QyxXQUFXNStCLEdBQUc1UixFQUFFd3dDLFdBQVdqbEMsR0FBR3ZMLEVBQUV3d0MsV0FBVythLElBQUlwdUQsRUFBUXN2RSxPQUFPaGhCLEcsZ0JDZG5VLElBQUlqNEIsRUFBVSxFQUFRLElBQXdCLFFBQzlDLFNBQVNrNUMsSUFDUCxpS0FDQXR2RSxFQUFPRCxRQUFVdXZFLEVBQXNCLFdBQ3JDLE9BQU94akUsR0FDTjlMLEVBQU9ELFFBQVFzQixZQUFhLEVBQU1yQixFQUFPRCxRQUFpQixRQUFJQyxFQUFPRCxRQUN4RSxJQUFJb0IsRUFDRjJLLEVBQUksR0FDSi9LLEVBQUlKLE9BQU9rQixVQUNYSCxFQUFJWCxFQUFFZSxlQUNOcEIsRUFBSUMsT0FBT0MsZ0JBQWtCLFNBQVVPLEVBQUcySyxFQUFHL0ssR0FDM0NJLEVBQUUySyxHQUFLL0ssRUFBRUcsT0FFWGpCLEVBQUksbUJBQXFCZSxPQUFTQSxPQUFTLEdBQzNDNEIsRUFBSTNDLEVBQUVvMkIsVUFBWSxhQUNsQi8xQixFQUFJTCxFQUFFc3ZFLGVBQWlCLGtCQUN2Qi9pRCxFQUFJdnNCLEVBQUVnQixhQUFlLGdCQUN2QixTQUFTdXVFLEVBQU9ydUUsRUFBRzJLLEVBQUcvSyxHQUNwQixPQUFPSixPQUFPQyxlQUFlTyxFQUFHMkssRUFBRyxDQUNqQzVLLE1BQU9ILEVBQ1BGLFlBQVksRUFDWjAyQixjQUFjLEVBQ2RDLFVBQVUsSUFDUnIyQixFQUFFMkssR0FFUixJQUNFMGpFLEVBQU8sR0FBSSxJQUNYLE1BQU9ydUUsR0FDUHF1RSxFQUFTLFNBQWdCcnVFLEVBQUcySyxFQUFHL0ssR0FDN0IsT0FBT0ksRUFBRTJLLEdBQUsvSyxHQUdsQixTQUFTMHVFLEVBQUt0dUUsRUFBRzJLLEVBQUcvSyxFQUFHVyxHQUNyQixJQUFJekIsRUFBSTZMLEdBQUtBLEVBQUVqSyxxQkFBcUI2dEUsRUFBWTVqRSxFQUFJNGpFLEVBQ2xEOXNFLEVBQUlqQyxPQUFPWSxPQUFPdEIsRUFBRTRCLFdBQ3BCdkIsRUFBSSxJQUFJcXZFLEVBQVFqdUUsR0FBSyxJQUN2QixPQUFPaEIsRUFBRWtDLEVBQUcsVUFBVyxDQUNyQjFCLE1BQU8wdUUsRUFBaUJ6dUUsRUFBR0osRUFBR1QsS0FDNUJzQyxFQUVOLFNBQVNpdEUsRUFBUzF1RSxFQUFHMkssRUFBRy9LLEdBQ3RCLElBQ0UsTUFBTyxDQUNMcTRCLEtBQU0sU0FDTmh4QixJQUFLakgsRUFBRWYsS0FBSzBMLEVBQUcvSyxJQUVqQixNQUFPSSxHQUNQLE1BQU8sQ0FDTGk0QixLQUFNLFFBQ05oeEIsSUFBS2pILElBSVgySyxFQUFFMmpFLEtBQU9BLEVBQ1QsSUFBSWxqRSxFQUFJLGlCQUVOK3lCLEVBQUksWUFDSnQ5QixFQUFJLFlBQ0ptTSxFQUFJLEdBQ04sU0FBU3VoRSxLQUNULFNBQVNJLEtBQ1QsU0FBU0MsS0FDVCxJQUFJaHVFLEVBQUksR0FDUnl0RSxFQUFPenRFLEVBQUdhLEdBQUcsV0FDWCxPQUFPMkQsUUFFVCxJQUFJaEcsRUFBSUksT0FBTzhnQyxlQUNiMHNCLEVBQUk1dEQsR0FBS0EsRUFBRUEsRUFBRXNjLEVBQU8sTUFDdEJzeEMsR0FBS0EsSUFBTXB0RCxHQUFLVyxFQUFFdEIsS0FBSyt0RCxFQUFHdnJELEtBQU9iLEVBQUlvc0QsR0FDckMsSUFBSWwzQixFQUFJODRDLEVBQTJCbHVFLFVBQVk2dEUsRUFBVTd0RSxVQUFZbEIsT0FBT1ksT0FBT1EsR0FDbkYsU0FBU2l1RSxFQUFzQjd1RSxHQUM3QixDQUFDLE9BQVEsUUFBUyxVQUFVaWMsU0FBUSxTQUFVdFIsR0FDNUMwakUsRUFBT3J1RSxFQUFHMkssR0FBRyxTQUFVM0ssR0FDckIsT0FBT29GLEtBQUswcEUsUUFBUW5rRSxFQUFHM0ssU0FJN0IsU0FBUyt1RSxFQUFjL3VFLEVBQUcySyxHQUN4QixTQUFTcWtFLEVBQU9wdkUsRUFBR0wsRUFBR1QsRUFBRzJDLEdBQ3ZCLElBQUl0QyxFQUFJdXZFLEVBQVMxdUUsRUFBRUosR0FBSUksRUFBR1QsR0FDMUIsR0FBSSxVQUFZSixFQUFFODRCLEtBQU0sQ0FDdEIsSUFBSTVNLEVBQUlsc0IsRUFBRThILElBQ1JtRSxFQUFJaWdCLEVBQUV0ckIsTUFDUixPQUFPcUwsR0FBSyxVQUFZNnBCLEVBQVE3cEIsSUFBTTdLLEVBQUV0QixLQUFLbU0sRUFBRyxXQUFhVCxFQUFFOHRCLFFBQVFydEIsRUFBRTZqRSxTQUFTbHpDLE1BQUssU0FBVS83QixHQUMvRmd2RSxFQUFPLE9BQVFodkUsRUFBR2xCLEVBQUcyQyxNQUNwQixTQUFVekIsR0FDWGd2RSxFQUFPLFFBQVNodkUsRUFBR2xCLEVBQUcyQyxNQUNuQmtKLEVBQUU4dEIsUUFBUXJ0QixHQUFHMndCLE1BQUssU0FBVS83QixHQUMvQnFyQixFQUFFdHJCLE1BQVFDLEVBQUdsQixFQUFFdXNCLE1BQ2QsU0FBVXJyQixHQUNYLE9BQU9ndkUsRUFBTyxRQUFTaHZFLEVBQUdsQixFQUFHMkMsTUFHakNBLEVBQUV0QyxFQUFFOEgsS0FFTixJQUFJckgsRUFDSkwsRUFBRTZGLEtBQU0sVUFBVyxDQUNqQnJGLE1BQU8sU0FBZUMsRUFBR08sR0FDdkIsU0FBUzJ1RSxJQUNQLE9BQU8sSUFBSXZrRSxHQUFFLFNBQVVBLEVBQUcvSyxHQUN4Qm92RSxFQUFPaHZFLEVBQUdPLEVBQUdvSyxFQUFHL0ssTUFHcEIsT0FBT0EsRUFBSUEsRUFBSUEsRUFBRW04QixLQUFLbXpDLEVBQTRCQSxHQUE4QkEsT0FJdEYsU0FBU1QsRUFBaUI5akUsRUFBRy9LLEVBQUdXLEdBQzlCLElBQUloQixFQUFJNkwsRUFDUixPQUFPLFNBQVV0TSxFQUFHMkMsR0FDbEIsR0FBSWxDLElBQU00K0IsRUFBRyxNQUFNNzJCLE1BQU0sZ0NBQ3pCLEdBQUkvSCxJQUFNc0IsRUFBRyxDQUNYLEdBQUksVUFBWS9CLEVBQUcsTUFBTTJDLEVBQ3pCLE1BQU8sQ0FDTDFCLE1BQU9DLEVBQ1BpM0IsTUFBTSxHQUdWLElBQUsxMkIsRUFBRTR4RCxPQUFTcnpELEVBQUd5QixFQUFFMEcsSUFBTXhGLElBQUssQ0FDOUIsSUFBSXRDLEVBQUlvQixFQUFFNHVFLFNBQ1YsR0FBSWh3RSxFQUFHLENBQ0wsSUFBSWtzQixFQUFJK2pELEVBQW9CandFLEVBQUdvQixHQUMvQixHQUFJOHFCLEVBQUcsQ0FDTCxHQUFJQSxJQUFNcmUsRUFBRyxTQUNiLE9BQU9xZSxHQUdYLEdBQUksU0FBVzlxQixFQUFFNHhELE9BQVE1eEQsRUFBRTh1RSxLQUFPOXVFLEVBQUUrdUUsTUFBUS91RSxFQUFFMEcsU0FBUyxHQUFJLFVBQVkxRyxFQUFFNHhELE9BQVEsQ0FDL0UsR0FBSTV5RCxJQUFNNkwsRUFBRyxNQUFNN0wsRUFBSXNCLEVBQUdOLEVBQUUwRyxJQUM1QjFHLEVBQUVndkUsa0JBQWtCaHZFLEVBQUUwRyxTQUNqQixXQUFhMUcsRUFBRTR4RCxRQUFVNXhELEVBQUVpdkUsT0FBTyxTQUFVanZFLEVBQUUwRyxLQUNyRDFILEVBQUk0K0IsRUFDSixJQUFJdjlCLEVBQUk4dEUsRUFBUy9qRSxFQUFHL0ssRUFBR1csR0FDdkIsR0FBSSxXQUFhSyxFQUFFcTNCLEtBQU0sQ0FDdkIsR0FBSTE0QixFQUFJZ0IsRUFBRTAyQixLQUFPcDJCLEVBL0VuQixpQkErRTBCRCxFQUFFcUcsTUFBUStGLEVBQUcsU0FDckMsTUFBTyxDQUNMak4sTUFBT2EsRUFBRXFHLElBQ1Rnd0IsS0FBTTEyQixFQUFFMDJCLE1BR1osVUFBWXIyQixFQUFFcTNCLE9BQVMxNEIsRUFBSXNCLEVBQUdOLEVBQUU0eEQsT0FBUyxRQUFTNXhELEVBQUUwRyxJQUFNckcsRUFBRXFHLE9BSWxFLFNBQVNtb0UsRUFBb0J6a0UsRUFBRy9LLEdBQzlCLElBQUlXLEVBQUlYLEVBQUV1eUQsT0FDUjV5RCxFQUFJb0wsRUFBRXVxQixTQUFTMzBCLEdBQ2pCLEdBQUloQixJQUFNUyxFQUFHLE9BQU9KLEVBQUV1dkUsU0FBVyxLQUFNLFVBQVk1dUUsR0FBS29LLEVBQUV1cUIsU0FBaUIsU0FBTXQxQixFQUFFdXlELE9BQVMsU0FBVXZ5RCxFQUFFcUgsSUFBTWpILEVBQUdvdkUsRUFBb0J6a0UsRUFBRy9LLEdBQUksVUFBWUEsRUFBRXV5RCxTQUFXLFdBQWE1eEQsSUFBTVgsRUFBRXV5RCxPQUFTLFFBQVN2eUQsRUFBRXFILElBQU0sSUFBSXV2QixVQUFVLG9DQUFzQ2oyQixFQUFJLGFBQWN5TSxFQUMxUixJQUFJbE8sRUFBSTR2RSxFQUFTbnZFLEVBQUdvTCxFQUFFdXFCLFNBQVV0MUIsRUFBRXFILEtBQ2xDLEdBQUksVUFBWW5JLEVBQUVtNUIsS0FBTSxPQUFPcjRCLEVBQUV1eUQsT0FBUyxRQUFTdnlELEVBQUVxSCxJQUFNbkksRUFBRW1JLElBQUtySCxFQUFFdXZFLFNBQVcsS0FBTW5pRSxFQUNyRixJQUFJdkwsRUFBSTNDLEVBQUVtSSxJQUNWLE9BQU94RixFQUFJQSxFQUFFdzFCLE1BQVFyM0IsRUFBRStLLEVBQUU4a0UsWUFBY2h1RSxFQUFFMUIsTUFBT0gsRUFBRXdjLEtBQU96UixFQUFFK2tFLFFBQVMsV0FBYTl2RSxFQUFFdXlELFNBQVd2eUQsRUFBRXV5RCxPQUFTLE9BQVF2eUQsRUFBRXFILElBQU1qSCxHQUFJSixFQUFFdXZFLFNBQVcsS0FBTW5pRSxHQUFLdkwsR0FBSzdCLEVBQUV1eUQsT0FBUyxRQUFTdnlELEVBQUVxSCxJQUFNLElBQUl1dkIsVUFBVSxvQ0FBcUM1MkIsRUFBRXV2RSxTQUFXLEtBQU1uaUUsR0FFOVAsU0FBUzJpRSxFQUFhM3ZFLEdBQ3BCLElBQUkySyxFQUFJLENBQ05pbEUsT0FBUTV2RSxFQUFFLElBRVosS0FBS0EsSUFBTTJLLEVBQUVrbEUsU0FBVzd2RSxFQUFFLElBQUssS0FBS0EsSUFBTTJLLEVBQUVtbEUsV0FBYTl2RSxFQUFFLEdBQUkySyxFQUFFb2xFLFNBQVcvdkUsRUFBRSxJQUFLb0YsS0FBSzRxRSxXQUFXdnRFLEtBQUtrSSxHQUUxRyxTQUFTc2xFLEVBQWNqd0UsR0FDckIsSUFBSTJLLEVBQUkzSyxFQUFFa3dFLFlBQWMsR0FDeEJ2bEUsRUFBRXN0QixLQUFPLGdCQUFpQnR0QixFQUFFMUQsSUFBS2pILEVBQUVrd0UsV0FBYXZsRSxFQUVsRCxTQUFTNmpFLEVBQVF4dUUsR0FDZm9GLEtBQUs0cUUsV0FBYSxDQUFDLENBQ2pCSixPQUFRLFNBQ041dkUsRUFBRWljLFFBQVEwekQsRUFBY3ZxRSxNQUFPQSxLQUFLaXBDLE9BQU0sR0FFaEQsU0FBUzN5QixFQUFPL1EsR0FDZCxHQUFJQSxHQUFLLEtBQU9BLEVBQUcsQ0FDakIsSUFBSS9LLEVBQUkrSyxFQUFFbEosR0FDVixHQUFJN0IsRUFBRyxPQUFPQSxFQUFFWCxLQUFLMEwsR0FDckIsR0FBSSxtQkFBcUJBLEVBQUV5UixLQUFNLE9BQU96UixFQUN4QyxJQUFLbEcsTUFBTWtHLEVBQUU3SSxRQUFTLENBQ3BCLElBQUl2QyxHQUFLLEVBQ1BULEVBQUksU0FBU3NkLElBQ1gsT0FBUzdjLEVBQUlvTCxFQUFFN0ksUUFBUyxHQUFJdkIsRUFBRXRCLEtBQUswTCxFQUFHcEwsR0FBSSxPQUFPNmMsRUFBS3JjLE1BQVE0SyxFQUFFcEwsR0FBSTZjLEVBQUs2YSxNQUFPLEVBQUk3YSxFQUNwRixPQUFPQSxFQUFLcmMsTUFBUUMsRUFBR29jLEVBQUs2YSxNQUFPLEVBQUk3YSxHQUUzQyxPQUFPdGQsRUFBRXNkLEtBQU90ZCxHQUdwQixNQUFNLElBQUkwM0IsVUFBVXZCLEVBQVF0cUIsR0FBSyxvQkFFbkMsT0FBT2drRSxFQUFrQmp1RSxVQUFZa3VFLEVBQTRCcnZFLEVBQUV1MkIsRUFBRyxjQUFlLENBQ25GLzFCLE1BQU82dUUsRUFDUHg0QyxjQUFjLElBQ1o3MkIsRUFBRXF2RSxFQUE0QixjQUFlLENBQy9DN3VFLE1BQU80dUUsRUFDUHY0QyxjQUFjLElBQ1p1NEMsRUFBa0IxcUMsWUFBY29xQyxFQUFPTyxFQUE0QnZqRCxFQUFHLHFCQUFzQjFnQixFQUFFd2xFLG9CQUFzQixTQUFVbndFLEdBQ2hJLElBQUkySyxFQUFJLG1CQUFxQjNLLEdBQUtBLEVBQUVtMUIsWUFDcEMsUUFBU3hxQixJQUFNQSxJQUFNZ2tFLEdBQXFCLHVCQUF5QmhrRSxFQUFFczVCLGFBQWV0NUIsRUFBRXRMLFFBQ3JGc0wsRUFBRXlsRSxLQUFPLFNBQVVwd0UsR0FDcEIsT0FBT1IsT0FBT2kzQixlQUFpQmozQixPQUFPaTNCLGVBQWV6MkIsRUFBRzR1RSxJQUErQjV1RSxFQUFFMDJCLFVBQVlrNEMsRUFBNEJQLEVBQU9ydUUsRUFBR3FyQixFQUFHLHNCQUF1QnJyQixFQUFFVSxVQUFZbEIsT0FBT1ksT0FBTzAxQixHQUFJOTFCLEdBQ3BNMkssRUFBRTBsRSxNQUFRLFNBQVVyd0UsR0FDckIsTUFBTyxDQUNMaXZFLFFBQVNqdkUsSUFFVjZ1RSxFQUFzQkUsRUFBY3J1RSxXQUFZMnRFLEVBQU9VLEVBQWNydUUsVUFBV3ZCLEdBQUcsV0FDcEYsT0FBT2lHLFFBQ0x1RixFQUFFb2tFLGNBQWdCQSxFQUFlcGtFLEVBQUUybEUsTUFBUSxTQUFVdHdFLEVBQUdKLEVBQUdXLEVBQUdoQixFQUFHVCxRQUNuRSxJQUFXQSxJQUFNQSxFQUFJMDVCLFNBQ3JCLElBQUkvMkIsRUFBSSxJQUFJc3RFLEVBQWNULEVBQUt0dUUsRUFBR0osRUFBR1csRUFBR2hCLEdBQUlULEdBQzVDLE9BQU82TCxFQUFFd2xFLG9CQUFvQnZ3RSxHQUFLNkIsRUFBSUEsRUFBRTJhLE9BQU8yZixNQUFLLFNBQVUvN0IsR0FDNUQsT0FBT0EsRUFBRWkzQixLQUFPajNCLEVBQUVELE1BQVEwQixFQUFFMmEsV0FFN0J5eUQsRUFBc0IvNEMsR0FBSXU0QyxFQUFPdjRDLEVBQUd6SyxFQUFHLGFBQWNnakQsRUFBT3Y0QyxFQUFHcjBCLEdBQUcsV0FDbkUsT0FBTzJELFFBQ0xpcEUsRUFBT3Y0QyxFQUFHLFlBQVksV0FDeEIsTUFBTyx3QkFDTG5yQixFQUFFbkQsS0FBTyxTQUFVeEgsR0FDckIsSUFBSTJLLEVBQUluTCxPQUFPUSxHQUNiSixFQUFJLEdBQ04sSUFBSyxJQUFJVyxLQUFLb0ssRUFBRy9LLEVBQUU2QyxLQUFLbEMsR0FDeEIsT0FBT1gsRUFBRTRrRCxVQUFXLFNBQVNwb0MsSUFDM0IsS0FBT3hjLEVBQUVrQyxRQUFTLENBQ2hCLElBQUk5QixFQUFJSixFQUFFazNELE1BQ1YsR0FBSTkyRCxLQUFLMkssRUFBRyxPQUFPeVIsRUFBS3JjLE1BQVFDLEVBQUdvYyxFQUFLNmEsTUFBTyxFQUFJN2EsRUFFckQsT0FBT0EsRUFBSzZhLE1BQU8sRUFBSTdhLElBRXhCelIsRUFBRStRLE9BQVNBLEVBQVE4eUQsRUFBUTl0RSxVQUFZLENBQ3hDeTBCLFlBQWFxNUMsRUFDYm5nQyxNQUFPLFNBQWUxakMsR0FDcEIsR0FBSXZGLEtBQUt1a0MsS0FBTyxFQUFHdmtDLEtBQUtnWCxLQUFPLEVBQUdoWCxLQUFLaXFFLEtBQU9qcUUsS0FBS2txRSxNQUFRdHZFLEVBQUdvRixLQUFLNnhCLE1BQU8sRUFBSTd4QixLQUFLK3BFLFNBQVcsS0FBTS9wRSxLQUFLK3NELE9BQVMsT0FBUS9zRCxLQUFLNkIsSUFBTWpILEVBQUdvRixLQUFLNHFFLFdBQVcvekQsUUFBUWcwRCxJQUFpQnRsRSxFQUFHLElBQUssSUFBSS9LLEtBQUt3RixLQUFNLE1BQVF4RixFQUFFNHdCLE9BQU8sSUFBTWp3QixFQUFFdEIsS0FBS21HLEtBQU14RixLQUFPNkUsT0FBTzdFLEVBQUV3SCxNQUFNLE1BQVFoQyxLQUFLeEYsR0FBS0ksSUFFdFJ1d0UsS0FBTSxXQUNKbnJFLEtBQUs2eEIsTUFBTyxFQUNaLElBQUlqM0IsRUFBSW9GLEtBQUs0cUUsV0FBVyxHQUFHRSxXQUMzQixHQUFJLFVBQVlsd0UsRUFBRWk0QixLQUFNLE1BQU1qNEIsRUFBRWlILElBQ2hDLE9BQU83QixLQUFLb3JFLE1BRWRqQixrQkFBbUIsU0FBMkI1a0UsR0FDNUMsR0FBSXZGLEtBQUs2eEIsS0FBTSxNQUFNdHNCLEVBQ3JCLElBQUkvSyxFQUFJd0YsS0FDUixTQUFTcXJFLEVBQU9sd0UsRUFBR2hCLEdBQ2pCLE9BQU9rQyxFQUFFdzJCLEtBQU8sUUFBU3gyQixFQUFFd0YsSUFBTTBELEVBQUcvSyxFQUFFd2MsS0FBTzdiLEVBQUdoQixJQUFNSyxFQUFFdXlELE9BQVMsT0FBUXZ5RCxFQUFFcUgsSUFBTWpILEtBQU1ULEVBRXpGLElBQUssSUFBSUEsRUFBSTZGLEtBQUs0cUUsV0FBV2x1RSxPQUFTLEVBQUd2QyxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSVQsRUFBSXNHLEtBQUs0cUUsV0FBV3p3RSxHQUN0QmtDLEVBQUkzQyxFQUFFb3hFLFdBQ1IsR0FBSSxTQUFXcHhFLEVBQUU4d0UsT0FBUSxPQUFPYSxFQUFPLE9BQ3ZDLEdBQUkzeEUsRUFBRTh3RSxRQUFVeHFFLEtBQUt1a0MsS0FBTSxDQUN6QixJQUFJeHFDLEVBQUlvQixFQUFFdEIsS0FBS0gsRUFBRyxZQUNoQnVzQixFQUFJOXFCLEVBQUV0QixLQUFLSCxFQUFHLGNBQ2hCLEdBQUlLLEdBQUtrc0IsRUFBRyxDQUNWLEdBQUlqbUIsS0FBS3VrQyxLQUFPN3FDLEVBQUUrd0UsU0FBVSxPQUFPWSxFQUFPM3hFLEVBQUUrd0UsVUFBVSxHQUN0RCxHQUFJenFFLEtBQUt1a0MsS0FBTzdxQyxFQUFFZ3hFLFdBQVksT0FBT1csRUFBTzN4RSxFQUFFZ3hFLGlCQUN6QyxHQUFJM3dFLEdBQ1QsR0FBSWlHLEtBQUt1a0MsS0FBTzdxQyxFQUFFK3dFLFNBQVUsT0FBT1ksRUFBTzN4RSxFQUFFK3dFLFVBQVUsT0FDakQsQ0FDTCxJQUFLeGtELEVBQUcsTUFBTS9qQixNQUFNLDBDQUNwQixHQUFJbEMsS0FBS3VrQyxLQUFPN3FDLEVBQUVneEUsV0FBWSxPQUFPVyxFQUFPM3hFLEVBQUVneEUsZ0JBS3RETixPQUFRLFNBQWdCeHZFLEVBQUcySyxHQUN6QixJQUFLLElBQUkvSyxFQUFJd0YsS0FBSzRxRSxXQUFXbHVFLE9BQVMsRUFBR2xDLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJTCxFQUFJNkYsS0FBSzRxRSxXQUFXcHdFLEdBQ3hCLEdBQUlMLEVBQUVxd0UsUUFBVXhxRSxLQUFLdWtDLE1BQVFwcEMsRUFBRXRCLEtBQUtNLEVBQUcsZUFBaUI2RixLQUFLdWtDLEtBQU9wcUMsRUFBRXV3RSxXQUFZLENBQ2hGLElBQUloeEUsRUFBSVMsRUFDUixPQUdKVCxJQUFNLFVBQVlrQixHQUFLLGFBQWVBLElBQU1sQixFQUFFOHdFLFFBQVVqbEUsR0FBS0EsR0FBSzdMLEVBQUVneEUsYUFBZWh4RSxFQUFJLE1BQ3ZGLElBQUkyQyxFQUFJM0MsRUFBSUEsRUFBRW94RSxXQUFhLEdBQzNCLE9BQU96dUUsRUFBRXcyQixLQUFPajRCLEVBQUd5QixFQUFFd0YsSUFBTTBELEVBQUc3TCxHQUFLc0csS0FBSytzRCxPQUFTLE9BQVEvc0QsS0FBS2dYLEtBQU90ZCxFQUFFZ3hFLFdBQVk5aUUsR0FBSzVILEtBQUtzckUsU0FBU2p2RSxJQUV4R2l2RSxTQUFVLFNBQWtCMXdFLEVBQUcySyxHQUM3QixHQUFJLFVBQVkzSyxFQUFFaTRCLEtBQU0sTUFBTWo0QixFQUFFaUgsSUFDaEMsTUFBTyxVQUFZakgsRUFBRWk0QixNQUFRLGFBQWVqNEIsRUFBRWk0QixLQUFPN3lCLEtBQUtnWCxLQUFPcGMsRUFBRWlILElBQU0sV0FBYWpILEVBQUVpNEIsTUFBUTd5QixLQUFLb3JFLEtBQU9wckUsS0FBSzZCLElBQU1qSCxFQUFFaUgsSUFBSzdCLEtBQUsrc0QsT0FBUyxTQUFVL3NELEtBQUtnWCxLQUFPLE9BQVMsV0FBYXBjLEVBQUVpNEIsTUFBUXR0QixJQUFNdkYsS0FBS2dYLEtBQU96UixHQUFJcUMsR0FFMU4yakUsT0FBUSxTQUFnQjN3RSxHQUN0QixJQUFLLElBQUkySyxFQUFJdkYsS0FBSzRxRSxXQUFXbHVFLE9BQVMsRUFBRzZJLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJL0ssRUFBSXdGLEtBQUs0cUUsV0FBV3JsRSxHQUN4QixHQUFJL0ssRUFBRWt3RSxhQUFlOXZFLEVBQUcsT0FBT29GLEtBQUtzckUsU0FBUzl3RSxFQUFFc3dFLFdBQVl0d0UsRUFBRW13RSxVQUFXRSxFQUFjcndFLEdBQUlvTixJQUc5RixNQUFTLFNBQWdCaE4sR0FDdkIsSUFBSyxJQUFJMkssRUFBSXZGLEtBQUs0cUUsV0FBV2x1RSxPQUFTLEVBQUc2SSxHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSS9LLEVBQUl3RixLQUFLNHFFLFdBQVdybEUsR0FDeEIsR0FBSS9LLEVBQUVnd0UsU0FBVzV2RSxFQUFHLENBQ2xCLElBQUlPLEVBQUlYLEVBQUVzd0UsV0FDVixHQUFJLFVBQVkzdkUsRUFBRTAzQixLQUFNLENBQ3RCLElBQUkxNEIsRUFBSWdCLEVBQUUwRyxJQUNWZ3BFLEVBQWNyd0UsR0FFaEIsT0FBT0wsR0FHWCxNQUFNK0gsTUFBTSwwQkFFZHNwRSxjQUFlLFNBQXVCam1FLEVBQUcvSyxFQUFHVyxHQUMxQyxPQUFPNkUsS0FBSytwRSxTQUFXLENBQ3JCajZDLFNBQVV4WixFQUFPL1EsR0FDakI4a0UsV0FBWTd2RSxFQUNaOHZFLFFBQVNudkUsR0FDUixTQUFXNkUsS0FBSytzRCxTQUFXL3NELEtBQUs2QixJQUFNakgsR0FBSWdOLElBRTlDckMsRUFFTDlMLEVBQU9ELFFBQVV1dkUsRUFBcUJ0dkUsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsNkJDN1MzRyxJQUFJdXlELEVBQVEsRUFBUSxHQUNoQjd3RCxFQUFPLEVBQVEsSUFDZnV3RSxFQUFRLEVBQVEsS0FDaEJDLEVBQWMsRUFBUSxJQVMxQixTQUFTQyxFQUFlQyxHQUN0QixJQUFJN3FDLEVBQVUsSUFBSTBxQyxFQUFNRyxHQUNwQjExQyxFQUFXaDdCLEVBQUt1d0UsRUFBTW53RSxVQUFVazdCLFFBQVN1SyxHQVE3QyxPQUxBZ3JCLEVBQU16dUQsT0FBTzQ0QixFQUFVdTFDLEVBQU1ud0UsVUFBV3lsQyxHQUd4Q2dyQixFQUFNenVELE9BQU80NEIsRUFBVTZLLEdBRWhCN0ssRUFJVCxJQUFJdEMsRUFBUSszQyxFQXRCRyxFQUFRLEtBeUJ2Qi8zQyxFQUFNNjNDLE1BQVFBLEVBR2Q3M0MsRUFBTTU0QixPQUFTLFNBQWdCNndFLEdBQzdCLE9BQU9GLEVBQWVELEVBQVk5M0MsRUFBTXpaLFNBQVUweEQsS0FJcERqNEMsRUFBTXc4QixPQUFTLEVBQVEsSUFDdkJ4OEIsRUFBTWs0QyxZQUFjLEVBQVEsS0FDNUJsNEMsRUFBTW00QyxTQUFXLEVBQVEsSUFHekJuNEMsRUFBTW80QyxJQUFNLFNBQWFDLEdBQ3ZCLE9BQU83NEMsUUFBUTQ0QyxJQUFJQyxJQUVyQnI0QyxFQUFNczRDLE9BQVMsRUFBUSxLQUV2Qnp5RSxFQUFPRCxRQUFVbzZCLEVBR2pCbjZCLEVBQU9ELFFBQVFva0MsUUFBVWhLLEcsNkJDbER6QixJQUFJbTRCLEVBQVEsRUFBUSxHQUNoQm1CLEVBQVcsRUFBUSxJQUNuQmlmLEVBQXFCLEVBQVEsS0FDN0JDLEVBQWtCLEVBQVEsS0FDMUJWLEVBQWMsRUFBUSxJQU8xQixTQUFTRCxFQUFNSSxHQUNiN3JFLEtBQUttYSxTQUFXMHhELEVBQ2hCN3JFLEtBQUt1MkIsYUFBZSxDQUNsQkMsUUFBUyxJQUFJMjFDLEVBQ2JoMUMsU0FBVSxJQUFJZzFDLEdBU2xCVixFQUFNbndFLFVBQVVrN0IsUUFBVSxTQUFpQnIxQixHQUduQixpQkFBWEEsR0FDVEEsRUFBU3JGLFVBQVUsSUFBTSxJQUNsQm13RCxJQUFNbndELFVBQVUsR0FFdkJxRixFQUFTQSxHQUFVLElBR3JCQSxFQUFTdXFFLEVBQVkxckUsS0FBS21hLFNBQVVoWixJQUd6QjRyRCxPQUNUNXJELEVBQU80ckQsT0FBUzVyRCxFQUFPNHJELE9BQU85a0QsY0FDckJqSSxLQUFLbWEsU0FBUzR5QyxPQUN2QjVyRCxFQUFPNHJELE9BQVMvc0QsS0FBS21hLFNBQVM0eUMsT0FBTzlrRCxjQUVyQzlHLEVBQU80ckQsT0FBUyxNQUlsQixJQUFJc2YsRUFBUSxDQUFDRCxPQUFpQjNzRSxHQUMxQjR2RCxFQUFVajhCLFFBQVFDLFFBQVFseUIsR0FVOUIsSUFSQW5CLEtBQUt1MkIsYUFBYUMsUUFBUTNmLFNBQVEsU0FBb0N5MUQsR0FDcEVELEVBQU03VCxRQUFROFQsRUFBWUMsVUFBV0QsRUFBWUUsYUFHbkR4c0UsS0FBS3UyQixhQUFhWSxTQUFTdGdCLFNBQVEsU0FBa0N5MUQsR0FDbkVELEVBQU1odkUsS0FBS2l2RSxFQUFZQyxVQUFXRCxFQUFZRSxhQUd6Q0gsRUFBTTN2RSxRQUNYMnlELEVBQVVBLEVBQVExNEIsS0FBSzAxQyxFQUFNeGlELFFBQVN3aUQsRUFBTXhpRCxTQUc5QyxPQUFPd2xDLEdBR1RvYyxFQUFNbndFLFVBQVVteEUsT0FBUyxTQUFnQnRyRSxHQUV2QyxPQURBQSxFQUFTdXFFLEVBQVkxckUsS0FBS21hLFNBQVVoWixHQUM3QityRCxFQUFTL3JELEVBQU84cUQsSUFBSzlxRCxFQUFPcTNCLE9BQVFyM0IsRUFBTzIwQixrQkFBa0J0eEIsUUFBUSxNQUFPLEtBSXJGdW5ELEVBQU1sMUMsUUFBUSxDQUFDLFNBQVUsTUFBTyxPQUFRLFlBQVksU0FBNkJrMkMsR0FFL0UwZSxFQUFNbndFLFVBQVV5eEQsR0FBVSxTQUFTZCxFQUFLOXFELEdBQ3RDLE9BQU9uQixLQUFLdzJCLFFBQVFrMUMsRUFBWXZxRSxHQUFVLEdBQUksQ0FDNUM0ckQsT0FBUUEsRUFDUmQsSUFBS0EsU0FLWEYsRUFBTWwxQyxRQUFRLENBQUMsT0FBUSxNQUFPLFVBQVUsU0FBK0JrMkMsR0FFckUwZSxFQUFNbndFLFVBQVV5eEQsR0FBVSxTQUFTZCxFQUFLMTFDLEVBQU1wVixHQUM1QyxPQUFPbkIsS0FBS3cyQixRQUFRazFDLEVBQVl2cUUsR0FBVSxHQUFJLENBQzVDNHJELE9BQVFBLEVBQ1JkLElBQUtBLEVBQ0wxMUMsS0FBTUEsU0FLWjljLEVBQU9ELFFBQVVpeUUsRyw2QkMzRmpCLElBQUkxZixFQUFRLEVBQVEsR0FFcEIsU0FBU29nQixJQUNQbnNFLEtBQUswc0UsU0FBVyxHQVdsQlAsRUFBbUI3d0UsVUFBVW03QixJQUFNLFNBQWE4MUMsRUFBV0MsR0FLekQsT0FKQXhzRSxLQUFLMHNFLFNBQVNydkUsS0FBSyxDQUNqQmt2RSxVQUFXQSxFQUNYQyxTQUFVQSxJQUVMeHNFLEtBQUswc0UsU0FBU2h3RSxPQUFTLEdBUWhDeXZFLEVBQW1CN3dFLFVBQVVnOEIsTUFBUSxTQUFlMkssR0FDOUNqaUMsS0FBSzBzRSxTQUFTenFDLEtBQ2hCamlDLEtBQUswc0UsU0FBU3pxQyxHQUFNLE9BWXhCa3FDLEVBQW1CN3dFLFVBQVV1YixRQUFVLFNBQWlCM1osR0FDdEQ2dUQsRUFBTWwxQyxRQUFRN1csS0FBSzBzRSxVQUFVLFNBQXdCMW1FLEdBQ3pDLE9BQU5BLEdBQ0Y5SSxFQUFHOEksT0FLVHZNLEVBQU9ELFFBQVUyeUUsRyw2QkNqRGpCLElBQUlwZ0IsRUFBUSxFQUFRLEdBQ2hCNGdCLEVBQWdCLEVBQVEsS0FDeEJaLEVBQVcsRUFBUSxJQUNuQjV4RCxFQUFXLEVBQVEsSUFLdkIsU0FBU3l5RCxFQUE2QnpyRSxHQUNoQ0EsRUFBT2l1RCxhQUNUanVELEVBQU9pdUQsWUFBWXlkLG1CQVV2QnB6RSxFQUFPRCxRQUFVLFNBQXlCMkgsR0E2QnhDLE9BNUJBeXJFLEVBQTZCenJFLEdBRzdCQSxFQUFPbXpCLFFBQVVuekIsRUFBT216QixTQUFXLEdBR25DbnpCLEVBQU9vVixLQUFPbzJELEVBQ1p4ckUsRUFBT29WLEtBQ1BwVixFQUFPbXpCLFFBQ1BuekIsRUFBT3NyRCxrQkFJVHRyRCxFQUFPbXpCLFFBQVV5M0IsRUFBTWhZLE1BQ3JCNXlDLEVBQU9tekIsUUFBUXc0QixRQUFVLEdBQ3pCM3JELEVBQU9tekIsUUFBUW56QixFQUFPNHJELFNBQVcsR0FDakM1ckQsRUFBT216QixTQUdUeTNCLEVBQU1sMUMsUUFDSixDQUFDLFNBQVUsTUFBTyxPQUFRLE9BQVEsTUFBTyxRQUFTLFdBQ2xELFNBQTJCazJDLFVBQ2xCNXJELEVBQU9tekIsUUFBUXk0QixPQUlaNXJELEVBQU8wekIsU0FBVzFhLEVBQVMwYSxTQUUxQjF6QixHQUFRdzFCLE1BQUssU0FBNkJRLEdBVXZELE9BVEF5MUMsRUFBNkJ6ckUsR0FHN0JnMkIsRUFBUzVnQixLQUFPbzJELEVBQ2R4MUMsRUFBUzVnQixLQUNUNGdCLEVBQVM3QyxRQUNUbnpCLEVBQU91ckQsbUJBR0Z2MUIsS0FDTixTQUE0QnF1QixHQWM3QixPQWJLdW1CLEVBQVN2bUIsS0FDWm9uQixFQUE2QnpyRSxHQUd6QnFrRCxHQUFVQSxFQUFPcnVCLFdBQ25CcXVCLEVBQU9ydUIsU0FBUzVnQixLQUFPbzJELEVBQ3JCbm5CLEVBQU9ydUIsU0FBUzVnQixLQUNoQml2QyxFQUFPcnVCLFNBQVM3QyxRQUNoQm56QixFQUFPdXJELHFCQUtOdDVCLFFBQVE2RCxPQUFPdXVCLFEsNkJDMUUxQixJQUFJdUcsRUFBUSxFQUFRLEdBVXBCdHlELEVBQU9ELFFBQVUsU0FBdUIrYyxFQUFNK2QsRUFBU3c0QyxHQU1yRCxPQUpBL2dCLEVBQU1sMUMsUUFBUWkyRCxHQUFLLFNBQW1CNXZFLEdBQ3BDcVosRUFBT3JaLEVBQUdxWixFQUFNK2QsTUFHWC9kLEksNkJDaEJULElBQUl3MUMsRUFBUSxFQUFRLEdBRXBCdHlELEVBQU9ELFFBQVUsU0FBNkI4NkIsRUFBU3k0QyxHQUNyRGhoQixFQUFNbDFDLFFBQVF5ZCxHQUFTLFNBQXVCMzVCLEVBQU9WLEdBQy9DQSxJQUFTOHlFLEdBQWtCOXlFLEVBQUtnd0IsZ0JBQWtCOGlELEVBQWU5aUQsZ0JBQ25FcUssRUFBUXk0QyxHQUFrQnB5RSxTQUNuQjI1QixFQUFRcjZCLFMsNkJDTnJCLElBQUlxekQsRUFBYyxFQUFRLElBUzFCN3pELEVBQU9ELFFBQVUsU0FBZ0I2NUIsRUFBUzRELEVBQVFFLEdBQ2hELElBQUkwMUIsRUFBaUIxMUIsRUFBU2gyQixPQUFPMHJELGVBQ2hDMTFCLEVBQVNZLFFBQVc4MEIsSUFBa0JBLEVBQWUxMUIsRUFBU1ksUUFHakVkLEVBQU9xMkIsRUFDTCxtQ0FBcUNuMkIsRUFBU1ksT0FDOUNaLEVBQVNoMkIsT0FDVCxLQUNBZzJCLEVBQVNYLFFBQ1RXLElBUEY5RCxFQUFROEQsSyw2QkNGWjE5QixFQUFPRCxRQUFVLFNBQXNCNDZCLEVBQU9qekIsRUFBUXUrQixFQUFNbEosRUFBU1csR0E0Qm5FLE9BM0JBL0MsRUFBTWp6QixPQUFTQSxFQUNYdStCLElBQ0Z0TCxFQUFNc0wsS0FBT0EsR0FHZnRMLEVBQU1vQyxRQUFVQSxFQUNoQnBDLEVBQU0rQyxTQUFXQSxFQUNqQi9DLEVBQU00NEMsY0FBZSxFQUVyQjU0QyxFQUFNcE4sT0FBUyxXQUNiLE1BQU8sQ0FFTG1OLFFBQVNuMEIsS0FBS20wQixRQUNkbDZCLEtBQU0rRixLQUFLL0YsS0FFWGd6RSxZQUFhanRFLEtBQUtpdEUsWUFDbEJscUUsT0FBUS9DLEtBQUsrQyxPQUVibXFFLFNBQVVsdEUsS0FBS2t0RSxTQUNmQyxXQUFZbnRFLEtBQUttdEUsV0FDakJDLGFBQWNwdEUsS0FBS290RSxhQUNuQmpyRSxNQUFPbkMsS0FBS21DLE1BRVpoQixPQUFRbkIsS0FBS21CLE9BQ2J1K0IsS0FBTTEvQixLQUFLMC9CLE9BR1J0TCxJLDZCQ3RDVCxJQUFJMjNCLEVBQVEsRUFBUSxHQUVwQnR5RCxFQUFPRCxRQUNMdXlELEVBQU1qWSx1QkFJSyxDQUNMdTVCLE1BQU8sU0FBZXB6RSxFQUFNVSxFQUFPMnlFLEVBQVMzVSxFQUFNNFUsRUFBUUMsR0FDeEQsSUFBSUMsRUFBUyxHQUNiQSxFQUFPcHdFLEtBQUtwRCxFQUFPLElBQU02bkQsbUJBQW1Cbm5ELElBRXhDb3hELEVBQU1sdkQsU0FBU3l3RSxJQUNqQkcsRUFBT3B3RSxLQUFLLFdBQWEsSUFBSU4sS0FBS3V3RSxHQUFTSSxlQUd6QzNoQixFQUFNeHJDLFNBQVNvNEMsSUFDakI4VSxFQUFPcHdFLEtBQUssUUFBVXM3RCxHQUdwQjVNLEVBQU14ckMsU0FBU2d0RCxJQUNqQkUsRUFBT3B3RSxLQUFLLFVBQVlrd0UsSUFHWCxJQUFYQyxHQUNGQyxFQUFPcHdFLEtBQUssVUFHZHFvQyxTQUFTK25DLE9BQVNBLEVBQU94ckUsS0FBSyxPQUdoQzZzRCxLQUFNLFNBQWM3MEQsR0FDbEIsSUFBSXNLLEVBQVFtaEMsU0FBUytuQyxPQUFPbHBFLE1BQU0sSUFBSTZGLE9BQU8sYUFBZW5RLEVBQU8sY0FDbkUsT0FBUXNLLEVBQVFxOUMsbUJBQW1CcjlDLEVBQU0sSUFBTSxNQUdqRG1sQyxPQUFRLFNBQWdCenZDLEdBQ3RCK0YsS0FBS3F0RSxNQUFNcHpFLEVBQU0sR0FBSThDLEtBQUswZCxNQUFRLFNBTy9CLENBQ0w0eUQsTUFBTyxhQUNQdmUsS0FBTSxXQUFrQixPQUFPLE1BQy9CcGxCLE9BQVEsZSw2QkMvQ2hCLElBQUlpa0MsRUFBZ0IsRUFBUSxLQUN4QkMsRUFBYyxFQUFRLEtBVzFCbjBFLEVBQU9ELFFBQVUsU0FBdUJtOEIsRUFBU2s0QyxHQUMvQyxPQUFJbDRDLElBQVlnNEMsRUFBY0UsR0FDckJELEVBQVlqNEMsRUFBU2s0QyxHQUV2QkEsSSw2QkNWVHAwRSxFQUFPRCxRQUFVLFNBQXVCeXlELEdBSXRDLE1BQU8sZ0NBQWdDam5ELEtBQUtpbkQsSyw2QkNIOUN4eUQsRUFBT0QsUUFBVSxTQUFxQm04QixFQUFTbTRDLEdBQzdDLE9BQU9BLEVBQ0huNEMsRUFBUW54QixRQUFRLE9BQVEsSUFBTSxJQUFNc3BFLEVBQVl0cEUsUUFBUSxPQUFRLElBQ2hFbXhCLEksNkJDVk4sSUFBSW8yQixFQUFRLEVBQVEsR0FJaEJnaUIsRUFBb0IsQ0FDdEIsTUFBTyxnQkFBaUIsaUJBQWtCLGVBQWdCLE9BQzFELFVBQVcsT0FBUSxPQUFRLG9CQUFxQixzQkFDaEQsZ0JBQWlCLFdBQVksZUFBZ0Isc0JBQzdDLFVBQVcsY0FBZSxjQWdCNUJ0MEUsRUFBT0QsUUFBVSxTQUFzQjg2QixHQUNyQyxJQUNJcjVCLEVBQ0F1RixFQUNBOUcsRUFIQTg3QixFQUFTLEdBS2IsT0FBS2xCLEdBRUx5M0IsRUFBTWwxQyxRQUFReWQsRUFBUTlsQixNQUFNLE9BQU8sU0FBZ0I4M0MsR0FLakQsR0FKQTVzRCxFQUFJNHNELEVBQUt6NkMsUUFBUSxLQUNqQjVRLEVBQU04d0QsRUFBTTFwQixLQUFLaWtCLEVBQUs5aUQsT0FBTyxFQUFHOUosSUFBSXVPLGNBQ3BDekgsRUFBTXVyRCxFQUFNMXBCLEtBQUtpa0IsRUFBSzlpRCxPQUFPOUosRUFBSSxJQUU3QnVCLEVBQUssQ0FDUCxHQUFJdTZCLEVBQU92NkIsSUFBUTh5RSxFQUFrQmxpRSxRQUFRNVEsSUFBUSxFQUNuRCxPQUdBdTZCLEVBQU92NkIsR0FERyxlQUFSQSxHQUNhdTZCLEVBQU92NkIsR0FBT3U2QixFQUFPdjZCLEdBQU8sSUFBSXFXLE9BQU8sQ0FBQzlRLElBRXpDZzFCLEVBQU92NkIsR0FBT3U2QixFQUFPdjZCLEdBQU8sS0FBT3VGLEVBQU1BLE1BS3REZzFCLEdBbkJnQkEsSSw2QkM5QnpCLElBQUl1MkIsRUFBUSxFQUFRLEdBRXBCdHlELEVBQU9ELFFBQ0x1eUQsRUFBTWpZLHVCQUlKLFdBQ0UsSUFFSWs2QixFQUZBQyxFQUFPLGtCQUFrQmpwRSxLQUFLNDBCLFVBQVVELFdBQ3hDdTBDLEVBQWlCeG9DLFNBQVMvQixjQUFjLEtBUzVDLFNBQVN3cUMsRUFBV2xpQixHQUNsQixJQUFJbWlCLEVBQU9uaUIsRUFXWCxPQVRJZ2lCLElBRUZDLEVBQWV2b0MsYUFBYSxPQUFReW9DLEdBQ3BDQSxFQUFPRixFQUFlRSxNQUd4QkYsRUFBZXZvQyxhQUFhLE9BQVF5b0MsR0FHN0IsQ0FDTEEsS0FBTUYsRUFBZUUsS0FDckJsNUMsU0FBVWc1QyxFQUFlaDVDLFNBQVdnNUMsRUFBZWg1QyxTQUFTMXdCLFFBQVEsS0FBTSxJQUFNLEdBQ2hGK3dCLEtBQU0yNEMsRUFBZTM0QyxLQUNyQjg0QyxPQUFRSCxFQUFlRyxPQUFTSCxFQUFlRyxPQUFPN3BFLFFBQVEsTUFBTyxJQUFNLEdBQzNFOHBFLEtBQU1KLEVBQWVJLEtBQU9KLEVBQWVJLEtBQUs5cEUsUUFBUSxLQUFNLElBQU0sR0FDcEU0d0IsU0FBVTg0QyxFQUFlOTRDLFNBQ3pCRSxLQUFNNDRDLEVBQWU1NEMsS0FDckJpNUMsU0FBaUQsTUFBdENMLEVBQWVLLFNBQVNuakQsT0FBTyxHQUN4QzhpRCxFQUFlSyxTQUNmLElBQU1MLEVBQWVLLFVBWTNCLE9BUkFQLEVBQVlHLEVBQVd6MEMsT0FBTzgwQyxTQUFTSixNQVFoQyxTQUF5QkssR0FDOUIsSUFBSWo1QyxFQUFVdTJCLEVBQU14ckMsU0FBU2t1RCxHQUFlTixFQUFXTSxHQUFjQSxFQUNyRSxPQUFRajVDLEVBQU9OLFdBQWE4NEMsRUFBVTk0QyxVQUNsQ00sRUFBT0QsT0FBU3k0QyxFQUFVejRDLE1BaERsQyxHQXNEUyxXQUNMLE9BQU8sSSw2QkM5RGYsSUFBSTY2QixFQUFTLEVBQVEsSUFRckIsU0FBUzBiLEVBQVk0QyxHQUNuQixHQUF3QixtQkFBYkEsRUFDVCxNQUFNLElBQUl0OUMsVUFBVSxnQ0FHdEIsSUFBSXU5QyxFQUNKM3VFLEtBQUtxdkQsUUFBVSxJQUFJajhCLFNBQVEsU0FBeUJDLEdBQ2xEczdDLEVBQWlCdDdDLEtBR25CLElBQUl2dkIsRUFBUTlELEtBQ1owdUUsR0FBUyxTQUFnQnY2QyxHQUNuQnJ3QixFQUFNMGhELFNBS1YxaEQsRUFBTTBoRCxPQUFTLElBQUk0SyxFQUFPajhCLEdBQzFCdzZDLEVBQWU3cUUsRUFBTTBoRCxZQU96QnNtQixFQUFZeHdFLFVBQVV1eEUsaUJBQW1CLFdBQ3ZDLEdBQUk3c0UsS0FBS3dsRCxPQUNQLE1BQU14bEQsS0FBS3dsRCxRQVFmc21CLEVBQVl0aEQsT0FBUyxXQUNuQixJQUFJOGtDLEVBSUosTUFBTyxDQUNMeHJELE1BSlUsSUFBSWdvRSxHQUFZLFNBQWtCL3hFLEdBQzVDdTFELEVBQVN2MUQsS0FJVHUxRCxPQUFRQSxJQUlaNzFELEVBQU9ELFFBQVVzeUUsRyw2QkNsQ2pCcnlFLEVBQU9ELFFBQVUsU0FBZ0J5SyxHQUMvQixPQUFPLFNBQWNoSCxHQUNuQixPQUFPZ0gsRUFBU3BJLE1BQU0sS0FBTW9CLE0sNkJDdEJoQyxJQUFJMnhFLEVBQWlCLEVBQVEsS0FDekI3aUIsRUFBUSxFQUFRLElBQ2hCMW5DLEVBQVUsRUFBUSxJQUNsQnFYLEVBQU10aEMsT0FBT2tCLFVBQVVDLGVBRXZCc3pFLEVBQXdCLENBQ3hCQyxTQUFVLFNBQWtCbm9ELEdBQ3hCLE9BQU9BLEVBQVMsTUFFcEJvb0QsTUFBTyxRQUNQQyxRQUFTLFNBQWlCcm9ELEVBQVExckIsR0FDOUIsT0FBTzByQixFQUFTLElBQU0xckIsRUFBTSxLQUVoQ2cwRSxPQUFRLFNBQWdCdG9ELEdBQ3BCLE9BQU9BLElBSVg1cUIsRUFBVUUsTUFBTUYsUUFDaEJzQixFQUFPcEIsTUFBTVgsVUFBVStCLEtBQ3ZCNnhFLEVBQWMsU0FBVWp5RSxFQUFLa3lFLEdBQzdCOXhFLEVBQUt4QixNQUFNb0IsRUFBS2xCLEVBQVFvekUsR0FBZ0JBLEVBQWUsQ0FBQ0EsS0FHeERDLEVBQVFyeUUsS0FBS3pCLFVBQVVrckIsWUFFdkIvRSxFQUFnQjRDLEVBQWlCLFFBQ2pDbEssRUFBVyxDQUNYazFELGdCQUFnQixFQUNoQkMsV0FBVyxFQUNYQyxrQkFBa0IsRUFDbEJDLFlBQWEsVUFDYnpkLFFBQVMsUUFDVDBkLGlCQUFpQixFQUNqQkMsZ0JBQWdCLEVBQ2hCcFcsVUFBVyxJQUNYdE4sUUFBUSxFQUNSMmpCLGlCQUFpQixFQUNqQkMsUUFBUzdqQixFQUFNQyxPQUNmNmpCLGtCQUFrQixFQUNsQmp2RCxZQUFRLEVBQ1JuakIsT0FBUWdrQixFQUNScXVELFVBQVd6ckQsRUFBUWdnQyxXQUFXNWlDLEdBRTlCdXRELFNBQVMsRUFDVGUsY0FBZSxTQUF1QjNxRSxHQUNsQyxPQUFPZ3FFLEVBQU12MUUsS0FBS3VMLElBRXRCNHFFLFdBQVcsRUFDWEMsb0JBQW9CLEdBV3BCQyxFQUFXLEdBRVhuNkMsRUFBWSxTQUFTQSxFQUNyQjM2QixFQUNBdXJCLEVBQ0F3cEQsRUFDQVQsRUFDQUgsRUFDQVUsRUFDQUQsRUFDQUwsRUFDQUMsRUFDQWh2RCxFQUNBNVEsRUFDQXMvRCxFQUNBUyxFQUNBdHlFLEVBQ0FxeUUsRUFDQUQsRUFDQTlkLEVBQ0FxZSxHQU9BLElBTEEsSUE5QnVEeG9CLEVBOEJuRHByRCxFQUFNcEIsRUFFTmkxRSxFQUFRRCxFQUNSbDNDLEVBQU8sRUFDUG8zQyxHQUFXLE9BQzBCLEtBQWpDRCxFQUFRQSxFQUFNOTFFLElBQUkyMUUsTUFBa0NJLEdBQVUsQ0FFbEUsSUFBSTM4RCxFQUFNMDhELEVBQU05MUUsSUFBSWEsR0FFcEIsR0FEQTg5QixHQUFRLE9BQ1csSUFBUnZsQixFQUFxQixDQUM1QixHQUFJQSxJQUFRdWxCLEVBQ1IsTUFBTSxJQUFJcTNDLFdBQVcsdUJBRXJCRCxHQUFXLE9BR2dCLElBQXhCRCxFQUFNOTFFLElBQUkyMUUsS0FDakJoM0MsRUFBTyxHQWlCZixHQWJzQixtQkFBWHRZLEVBQ1Bwa0IsRUFBTW9rQixFQUFPK0YsRUFBUW5xQixHQUNkQSxhQUFlTyxLQUN0QlAsRUFBTXV6RSxFQUFjdnpFLEdBQ1csVUFBeEIyekUsR0FBbUNwMEUsRUFBUVMsS0FDbERBLEVBQU11dkQsRUFBTXNHLFNBQVM3MUQsR0FBSyxTQUFVN0IsR0FDaEMsT0FBSUEsYUFBaUJvQyxLQUNWZ3pFLEVBQWNwMUUsR0FFbEJBLE1BSUgsT0FBUjZCLEVBQWMsQ0FDZCxHQUFJeXpFLEVBQ0EsT0FBT0wsSUFBWUMsRUFBbUJELEVBQVFqcEQsRUFBUXhNLEVBQVN5MUQsUUFBUzdkLEVBQVMsTUFBT3QwRCxHQUFVa3BCLEVBR3RHbnFCLEVBQU0sR0FHVixHQXZFb0IsaUJBRG1Db3JELEVBd0U3QnByRCxJQXRFTixpQkFBTm9yRCxHQUNNLGtCQUFOQSxHQUNNLGlCQUFOQSxHQUNNLGlCQUFOQSxHQW1Fb0JtRSxFQUFNenVCLFNBQVM5Z0MsR0FDN0MsT0FBSW96RSxFQUVPLENBQUNFLEVBRE9ELEVBQW1CbHBELEVBQVNpcEQsRUFBUWpwRCxFQUFReE0sRUFBU3kxRCxRQUFTN2QsRUFBUyxNQUFPdDBELElBQy9ELElBQU1xeUUsRUFBVUYsRUFBUXB6RSxFQUFLMmQsRUFBU3kxRCxRQUFTN2QsRUFBUyxRQUFTdDBELEtBRTVGLENBQUNxeUUsRUFBVW5wRCxHQUFVLElBQU1tcEQsRUFBVXR2RCxPQUFPaGtCLEtBR3ZELElBTUlnMEUsRUFOQWw2RCxFQUFTLEdBRWIsUUFBbUIsSUFBUjlaLEVBQ1AsT0FBTzhaLEVBSVgsR0FBNEIsVUFBeEI2NUQsR0FBbUNwMEUsRUFBUVMsR0FFdkNxekUsR0FBb0JELElBQ3BCcHpFLEVBQU11dkQsRUFBTXNHLFNBQVM3MUQsRUFBS296RSxJQUU5QlksRUFBVSxDQUFDLENBQUU3MUUsTUFBTzZCLEVBQUlFLE9BQVMsRUFBSUYsRUFBSXlGLEtBQUssTUFBUSxVQUFPLFNBQzFELEdBQUlsRyxFQUFRNmtCLEdBQ2Y0dkQsRUFBVTV2RCxNQUNQLENBQ0gsSUFBSXhlLEVBQU9oSSxPQUFPZ0ksS0FBSzVGLEdBQ3ZCZzBFLEVBQVV4Z0UsRUFBTzVOLEVBQUs0TixLQUFLQSxHQUFRNU4sRUFHdkMsSUFBSXF1RSxFQUFnQmQsRUFBa0JudkQsT0FBT21HLEdBQVFuaUIsUUFBUSxNQUFPLE9BQVNnYyxPQUFPbUcsR0FFaEYrcEQsRUFBaUJoQixHQUFrQjN6RSxFQUFRUyxJQUF1QixJQUFmQSxFQUFJRSxPQUFlK3pFLEVBQWdCLEtBQU9BLEVBRWpHLEdBQUlsQixHQUFvQnh6RSxFQUFRUyxJQUF1QixJQUFmQSxFQUFJRSxPQUN4QyxPQUFPZzBFLEVBQWlCLEtBRzVCLElBQUssSUFBSTM1RCxFQUFJLEVBQUdBLEVBQUl5NUQsRUFBUTl6RSxTQUFVcWEsRUFBRyxDQUNyQyxJQUFJOWIsRUFBTXUxRSxFQUFRejVELEdBQ2RwYyxFQUF1QixpQkFBUk0sR0FBb0JBLFFBQTRCLElBQWRBLEVBQUlOLE1BQ25ETSxFQUFJTixNQUNKNkIsRUFBSXZCLEdBRVYsSUFBSSswRSxHQUF1QixPQUFWcjFFLEVBQWpCLENBSUEsSUFBSWcyRSxFQUFhckIsR0FBYUssRUFBa0JudkQsT0FBT3ZsQixHQUFLdUosUUFBUSxNQUFPLE9BQVNnYyxPQUFPdmxCLEdBQ3ZGMnBFLEVBQVk3b0UsRUFBUVMsR0FDYSxtQkFBeEIyekUsRUFBcUNBLEVBQW9CTyxFQUFnQkMsR0FBY0QsRUFDOUZBLEdBQWtCcEIsRUFBWSxJQUFNcUIsRUFBYSxJQUFNQSxFQUFhLEtBRTFFUCxFQUFZdnRFLElBQUl6SCxFQUFRODlCLEdBQ3hCLElBQUkwM0MsRUFBbUJoQyxJQUN2QmdDLEVBQWlCL3RFLElBQUlxdEUsRUFBVUUsR0FDL0JsQixFQUFZNTRELEVBQVF5ZixFQUNoQnA3QixFQUNBaXFFLEVBQ0F1TCxFQUNBVCxFQUNBSCxFQUNBVSxFQUNBRCxFQUNBTCxFQUN3QixVQUF4QlEsR0FBbUNOLEdBQW9COXpFLEVBQVFTLEdBQU8sS0FBT296RSxFQUM3RWh2RCxFQUNBNVEsRUFDQXMvRCxFQUNBUyxFQUNBdHlFLEVBQ0FxeUUsRUFDQUQsRUFDQTlkLEVBQ0E2ZSxLQUlSLE9BQU90NkQsR0E2RVg3YyxFQUFPRCxRQUFVLFNBQVU0QixFQUFRdS9DLEdBQy9CLElBR0k2MUIsRUFIQWgwRSxFQUFNcEIsRUFDTnk0QixFQTVFd0IsU0FBbUM4bUIsR0FDL0QsSUFBS0EsRUFDRCxPQUFPeGdDLEVBR1gsUUFBcUMsSUFBMUJ3Z0MsRUFBSzQwQixrQkFBcUUsa0JBQTFCNTBCLEVBQUs0MEIsaUJBQzVELE1BQU0sSUFBSW4rQyxVQUFVLDBFQUd4QixRQUFvQyxJQUF6QnVwQixFQUFLZzFCLGlCQUFtRSxrQkFBekJoMUIsRUFBS2cxQixnQkFDM0QsTUFBTSxJQUFJditDLFVBQVUseUVBR3hCLEdBQXFCLE9BQWpCdXBCLEVBQUtpMUIsY0FBNEMsSUFBakJqMUIsRUFBS2kxQixTQUFtRCxtQkFBakJqMUIsRUFBS2kxQixRQUM1RSxNQUFNLElBQUl4K0MsVUFBVSxpQ0FHeEIsSUFBSTJnQyxFQUFVcFgsRUFBS29YLFNBQVc1M0MsRUFBUzQzQyxRQUN2QyxRQUE0QixJQUFqQnBYLEVBQUtvWCxTQUE0QyxVQUFqQnBYLEVBQUtvWCxTQUF3QyxlQUFqQnBYLEVBQUtvWCxRQUN4RSxNQUFNLElBQUkzZ0MsVUFBVSxxRUFHeEIsSUFBSTN6QixFQUFTNG1CLEVBQWlCLFFBQzlCLFFBQTJCLElBQWhCczJCLEVBQUtsOUMsT0FBd0IsQ0FDcEMsSUFBS2krQixFQUFJN2hDLEtBQUt3cUIsRUFBUWdnQyxXQUFZMUosRUFBS2w5QyxRQUNuQyxNQUFNLElBQUkyekIsVUFBVSxtQ0FFeEIzekIsRUFBU2s5QyxFQUFLbDlDLE9BRWxCLElBT0kreEUsRUFQQU0sRUFBWXpyRCxFQUFRZ2dDLFdBQVc1bUQsR0FFL0JtakIsRUFBU3pHLEVBQVN5RyxPQWN0QixJQWIyQixtQkFBaEIrNUIsRUFBSy81QixRQUF5QjdrQixFQUFRNCtDLEVBQUsvNUIsV0FDbERBLEVBQVMrNUIsRUFBSy81QixRQUtkNHVELEVBREE3MEIsRUFBSzYwQixlQUFlWCxFQUNObDBCLEVBQUs2MEIsWUFDWixZQUFhNzBCLEVBQ05BLEVBQUtxMEIsUUFBVSxVQUFZLFNBRTNCNzBELEVBQVNxMUQsWUFHdkIsbUJBQW9CNzBCLEdBQXVDLGtCQUF4QkEsRUFBSyswQixlQUN4QyxNQUFNLElBQUl0K0MsVUFBVSxpREFHeEIsSUFBSWsrQyxPQUFzQyxJQUFuQjMwQixFQUFLMjBCLFdBQXFELElBQXpCMzBCLEVBQUtnMUIsaUJBQWtDeDFELEVBQVNtMUQsWUFBYzMwQixFQUFLMjBCLFVBRTNILE1BQU8sQ0FDSEQsZUFBK0Msa0JBQXhCMTBCLEVBQUswMEIsZUFBK0IxMEIsRUFBSzAwQixlQUFpQmwxRCxFQUFTazFELGVBQzFGQyxVQUFXQSxFQUNYQyxpQkFBbUQsa0JBQTFCNTBCLEVBQUs0MEIsbUJBQW1DNTBCLEVBQUs0MEIsaUJBQW1CcDFELEVBQVNvMUQsaUJBQ2xHQyxZQUFhQSxFQUNiemQsUUFBU0EsRUFDVDBkLGdCQUFpRCxrQkFBekI5MEIsRUFBSzgwQixnQkFBZ0M5MEIsRUFBSzgwQixnQkFBa0J0MUQsRUFBU3MxRCxnQkFDN0ZDLGlCQUFrQi8wQixFQUFLKzBCLGVBQ3ZCcFcsZUFBcUMsSUFBbkIzZSxFQUFLMmUsVUFBNEJuL0MsRUFBU20vQyxVQUFZM2UsRUFBSzJlLFVBQzdFdE4sT0FBK0Isa0JBQWhCclIsRUFBS3FSLE9BQXVCclIsRUFBS3FSLE9BQVM3eEMsRUFBUzZ4QyxPQUNsRTJqQixnQkFBaUQsa0JBQXpCaDFCLEVBQUtnMUIsZ0JBQWdDaDFCLEVBQUtnMUIsZ0JBQWtCeDFELEVBQVN3MUQsZ0JBQzdGQyxRQUFpQyxtQkFBakJqMUIsRUFBS2kxQixRQUF5QmoxQixFQUFLaTFCLFFBQVV6MUQsRUFBU3kxRCxRQUN0RUMsaUJBQW1ELGtCQUExQmwxQixFQUFLazFCLGlCQUFpQ2wxQixFQUFLazFCLGlCQUFtQjExRCxFQUFTMDFELGlCQUNoR2p2RCxPQUFRQSxFQUNSbmpCLE9BQVFBLEVBQ1JxeUUsVUFBV0EsRUFDWEMsY0FBNkMsbUJBQXZCcDFCLEVBQUtvMUIsY0FBK0JwMUIsRUFBS28xQixjQUFnQjUxRCxFQUFTNDFELGNBQ3hGQyxVQUFxQyxrQkFBbkJyMUIsRUFBS3ExQixVQUEwQnIxQixFQUFLcTFCLFVBQVk3MUQsRUFBUzYxRCxVQUMzRWhnRSxLQUEyQixtQkFBZDJxQyxFQUFLM3FDLEtBQXNCMnFDLEVBQUszcUMsS0FBTyxLQUNwRGlnRSxtQkFBdUQsa0JBQTVCdDFCLEVBQUtzMUIsbUJBQW1DdDFCLEVBQUtzMUIsbUJBQXFCOTFELEVBQVM4MUQsb0JBTTVGWSxDQUEwQmwyQixHQUtWLG1CQUFuQjltQixFQUFRalQsT0FFZnBrQixHQURBb2tCLEVBQVNpVCxFQUFRalQsUUFDSixHQUFJcGtCLEdBQ1ZULEVBQVE4M0IsRUFBUWpULFVBRXZCNHZELEVBRFMzOEMsRUFBUWpULFFBSXJCLElBQUl4ZSxFQUFPLEdBRVgsR0FBbUIsaUJBQVI1RixHQUE0QixPQUFSQSxFQUMzQixNQUFPLEdBR1gsSUFBSTJ6RSxFQUFzQnRCLEVBQXNCaDdDLEVBQVEyN0MsYUFDcERFLEVBQXlDLFVBQXhCUyxHQUFtQ3Q4QyxFQUFRNjdDLGVBRTNEYyxJQUNEQSxFQUFVcDJFLE9BQU9nSSxLQUFLNUYsSUFHdEJxM0IsRUFBUTdqQixNQUNSd2dFLEVBQVF4Z0UsS0FBSzZqQixFQUFRN2pCLE1BSXpCLElBREEsSUFBSW9nRSxFQUFjeEIsSUFDVGwxRSxFQUFJLEVBQUdBLEVBQUk4MkUsRUFBUTl6RSxTQUFVaEQsRUFBRyxDQUNyQyxJQUFJdUIsRUFBTXUxRSxFQUFROTJFLEdBQ2RpQixFQUFRNkIsRUFBSXZCLEdBRVo0NEIsRUFBUW04QyxXQUF1QixPQUFWcjFFLEdBR3pCdTBFLEVBQVk5c0UsRUFBTTJ6QixFQUNkcDdCLEVBQ0FNLEVBQ0FrMUUsRUFDQVQsRUFDQTc3QyxFQUFRMDdDLGlCQUNSMTdDLEVBQVFvOEMsbUJBQ1JwOEMsRUFBUW04QyxVQUNSbjhDLEVBQVE4N0MsZ0JBQ1I5N0MsRUFBUW00QixPQUFTbjRCLEVBQVErN0MsUUFBVSxLQUNuQy83QyxFQUFRalQsT0FDUmlULEVBQVE3akIsS0FDUjZqQixFQUFReTdDLFVBQ1J6N0MsRUFBUWs4QyxjQUNSbDhDLEVBQVFwMkIsT0FDUm8yQixFQUFRaThDLFVBQ1JqOEMsRUFBUWc4QyxpQkFDUmg4QyxFQUFRaytCLFFBQ1JxZSxJQUlSLElBQUlVLEVBQVMxdUUsRUFBS0gsS0FBSzR4QixFQUFReWxDLFdBQzNCM3lDLEdBQW9DLElBQTNCa04sRUFBUXc3QyxlQUEwQixJQUFNLEdBWXJELE9BVkl4N0MsRUFBUTQ3QyxrQkFDZ0IsZUFBcEI1N0MsRUFBUWsrQixRQUVScHJDLEdBQVUsdUJBR1ZBLEdBQVUsbUJBSVhtcUQsRUFBT3AwRSxPQUFTLEVBQUlpcUIsRUFBU21xRCxFQUFTLEssNkJDaFdqRCxJQUFJN3dCLEVBQWEsRUFBUSxHQUNyQnY1QixFQUFVLEVBQVEsSUFDbEJxcUQsRUFBcUIsRUFBUSxLQUM3QkMsRUFBb0IsRUFBUSxJQUc1QkMsRUFGd0IsRUFBUSxNQUVPRCxHQUFxQkQsRUFHaEV0M0UsRUFBT0QsUUFBVSxXQUdtQixJQUFJMDNFLEVBR25DcGdCLEVBQVUsQ0FDYkMsT0FBUSxTQUFVOTFELEdBQ2pCLElBQUs2MUQsRUFBUXAxQixJQUFJemdDLEdBQ2hCLE1BQU0sSUFBSWdsRCxFQUFXLGlDQUFtQ3Y1QixFQUFRenJCLEtBR2xFLE9BQVUsU0FBVUEsR0FDbkIsUUFBU2kyRSxHQUFnQkEsRUFBcUIsT0FBRWoyRSxJQUVqRFYsSUFBSyxTQUFVVSxHQUNkLE9BQU9pMkUsR0FBZ0JBLEVBQWEzMkUsSUFBSVUsSUFFekN5Z0MsSUFBSyxTQUFVemdDLEdBQ2QsUUFBU2kyRSxHQUFnQkEsRUFBYXgxQyxJQUFJemdDLElBRTNDNEgsSUFBSyxTQUFVNUgsRUFBS04sR0FDZHUyRSxJQUNKQSxFQUFlRCxLQUdoQkMsRUFBYXJ1RSxJQUFJNUgsRUFBS04sS0FJeEIsT0FBT20yRCxJLDZDQ3ZDUixJQUFJcHFDLEVBQVUsRUFBUSxJQUVsQnU1QixFQUFhLEVBQVEsR0FVckJreEIsRUFBYyxTQUFVQyxFQUFNbjJFLEVBQUtvMkUsR0FNdEMsSUFKQSxJQUVJQyxFQUZBL3NDLEVBQU82c0MsRUFJa0IsT0FBckJFLEVBQU8vc0MsRUFBS3Z0QixNQUFldXRCLEVBQU8rc0MsRUFDekMsR0FBSUEsRUFBS3IyRSxNQUFRQSxFQU9oQixPQU5Bc3BDLEVBQUt2dEIsS0FBT3M2RCxFQUFLdDZELEtBQ1pxNkQsSUFFSkMsRUFBS3Q2RCxLQUFxRG82RCxFQUFTLEtBQ25FQSxFQUFLcDZELEtBQU9zNkQsR0FFTkEsR0EyQ1Y3M0UsRUFBT0QsUUFBVSxXQUtnRCxJQUFJKzNFLEVBR2hFemdCLEVBQVUsQ0FDYkMsT0FBUSxTQUFVOTFELEdBQ2pCLElBQUs2MUQsRUFBUXAxQixJQUFJemdDLEdBQ2hCLE1BQU0sSUFBSWdsRCxFQUFXLGlDQUFtQ3Y1QixFQUFRenJCLEtBR2xFLE9BQVUsU0FBVUEsR0FDbkIsSUFBSXUyRSxFQUFPRCxHQUFNQSxFQUFHdjZELEtBQ2hCeTZELEVBdkJVLFNBQVVDLEVBQVN6MkUsR0FDbkMsR0FBSXkyRSxFQUNILE9BQU9QLEVBQVlPLEVBQVN6MkUsR0FBSyxHQXFCZDAyRSxDQUFXSixFQUFJdDJFLEdBSWpDLE9BSEl3MkUsR0FBZUQsR0FBUUEsSUFBU0MsSUFDbkNGLE9BQUssS0FFR0UsR0FFVmwzRSxJQUFLLFNBQVVVLEdBQ2QsT0E1RFcsU0FBVXkyRSxFQUFTejJFLEdBQ2hDLEdBQUt5MkUsRUFBTCxDQUdBLElBQUlqL0MsRUFBTzArQyxFQUFZTyxFQUFTejJFLEdBQ2hDLE9BQU93M0IsR0FBUUEsRUFBSzkzQixPQXVEWGkzRSxDQUFRTCxFQUFJdDJFLElBRXBCeWdDLElBQUssU0FBVXpnQyxHQUNkLE9BekNXLFNBQVV5MkUsRUFBU3oyRSxHQUNoQyxRQUFLeTJFLEtBR0lQLEVBQVlPLEVBQVN6MkUsR0FxQ3JCNDJFLENBQVFOLEVBQUl0MkUsSUFFcEI0SCxJQUFLLFNBQVU1SCxFQUFLTixHQUNkNDJFLElBRUpBLEVBQUssQ0FDSnY2RCxVQUFNLElBN0RHLFNBQVUwNkQsRUFBU3oyRSxFQUFLTixHQUNyQyxJQUFJODNCLEVBQU8wK0MsRUFBWU8sRUFBU3oyRSxHQUM1QnczQixFQUNIQSxFQUFLOTNCLE1BQVFBLEVBR2IrMkUsRUFBUTE2RCxLQUErRSxDQUN0Ri9iLElBQUtBLEVBQ0wrYixLQUFNMDZELEVBQVExNkQsS0FDZHJjLE1BQU9BLEdBd0RQbTNFLENBQThDLEVBQU03MkUsRUFBS04sS0FJM0QsT0FBT20yRCxJLDZCQzVHUnIzRCxFQUFPRCxRQUFVMEksTyw2QkNBakJ6SSxFQUFPRCxRQUFVdTRFLFcsNkJDQWpCdDRFLEVBQU9ELFFBQVUrMkUsWSw2QkNBakI5MkUsRUFBT0QsUUFBVWdsQyxnQiw2QkNBakIva0MsRUFBT0QsUUFBVXc0RSxhLDZCQ0FqQnY0RSxFQUFPRCxRQUFVeTRFLFUsNkJDQWpCeDRFLEVBQU9ELFFBQVUySixLQUFLQyxLLDZCQ0F0QjNKLEVBQU9ELFFBQVUySixLQUFLMEgsTyw2QkNBdEJwUixFQUFPRCxRQUFVMkosS0FBS0ksSyw2QkNBdEI5SixFQUFPRCxRQUFVMkosS0FBS21NLEssNkJDQXRCN1YsRUFBT0QsUUFBVTJKLEtBQUtHLEssNkJDQXRCN0osRUFBT0QsUUFBVTJKLEtBQUs4YSxPLDZCQ0R0QixJQUFJaTBELEVBQVMsRUFBUSxLQUdyQno0RSxFQUFPRCxRQUFVLFNBQWN1SixHQUM5QixPQUFJbXZFLEVBQU9udkUsSUFBc0IsSUFBWEEsRUFDZEEsRUFFREEsRUFBUyxHQUFLLEVBQUksSSw2QkNOMUJ0SixFQUFPRCxRQUFVbWtELE9BQU90K0MsT0FBUyxTQUFlaEQsR0FDL0MsT0FBT0EsR0FBTUEsSSw2QkNEZDVDLEVBQU9ELFFBQVVZLE9BQU9tMUIsMEIsNkJDQXhCLElBQUlneEIsRUFBa0JubUQsT0FBT0MsaUJBQWtCLEVBQy9DLEdBQUlrbUQsRUFDSCxJQUNDQSxFQUFnQixHQUFJLElBQUssQ0FBRTVsRCxNQUFPLElBQ2pDLE1BQU80SyxHQUVSZzdDLEdBQWtCLEVBSXBCOW1ELEVBQU9ELFFBQVUrbUQsRyw2QkNYakIsSUFBSTR4QixFQUErQixvQkFBWDEzRSxRQUEwQkEsT0FDOUMyM0UsRUFBZ0IsRUFBUSxLQUc1QjM0RSxFQUFPRCxRQUFVLFdBQ2hCLE1BQTBCLG1CQUFmMjRFLElBQ1csbUJBQVgxM0UsU0FDc0IsaUJBQXRCMDNFLEVBQVcsU0FDTyxpQkFBbEIxM0UsT0FBTyxRQUVYMjNFLFMsNkJDUlIzNEUsRUFBT0QsUUFBVSxXQUNoQixHQUFzQixtQkFBWGlCLFFBQWlFLG1CQUFqQ0wsT0FBT2cxQixzQkFBd0MsT0FBTyxFQUNqRyxHQUErQixpQkFBcEIzMEIsT0FBT3ExQixTQUF5QixPQUFPLEVBR2xELElBQUl0ekIsRUFBTSxHQUNOOHlCLEVBQU03MEIsT0FBTyxRQUNiNDNFLEVBQVNqNEUsT0FBT2sxQixHQUNwQixHQUFtQixpQkFBUkEsRUFBb0IsT0FBTyxFQUV0QyxHQUE0QyxvQkFBeENsMUIsT0FBT2tCLFVBQVVZLFNBQVNyQyxLQUFLeTFCLEdBQThCLE9BQU8sRUFDeEUsR0FBK0Msb0JBQTNDbDFCLE9BQU9rQixVQUFVWSxTQUFTckMsS0FBS3c0RSxHQUFpQyxPQUFPLEVBWTNFLElBQUssSUFBSXRoRCxLQURUdjBCLEVBQUk4eUIsR0FEUyxHQUVDOXlCLEVBQU8sT0FBTyxFQUM1QixHQUEyQixtQkFBaEJwQyxPQUFPZ0ksTUFBbUQsSUFBNUJoSSxPQUFPZ0ksS0FBSzVGLEdBQUtFLE9BQWdCLE9BQU8sRUFFakYsR0FBMEMsbUJBQS9CdEMsT0FBT3FDLHFCQUFpRixJQUEzQ3JDLE9BQU9xQyxvQkFBb0JELEdBQUtFLE9BQWdCLE9BQU8sRUFFL0csSUFBSWlpRCxFQUFPdmtELE9BQU9nMUIsc0JBQXNCNXlCLEdBQ3hDLEdBQW9CLElBQWhCbWlELEVBQUtqaUQsUUFBZ0JpaUQsRUFBSyxLQUFPcnZCLEVBQU8sT0FBTyxFQUVuRCxJQUFLbDFCLE9BQU9rQixVQUFVNi9CLHFCQUFxQnRoQyxLQUFLMkMsRUFBSzh5QixHQUFRLE9BQU8sRUFFcEUsR0FBK0MsbUJBQXBDbDFCLE9BQU9tMUIseUJBQXlDLENBRTFELElBQUk4TSxFQUFnRGppQyxPQUFPbTFCLHlCQUF5Qi95QixFQUFLOHlCLEdBQ3pGLEdBZlksS0FlUitNLEVBQVcxaEMsUUFBOEMsSUFBMUIwaEMsRUFBVy9oQyxXQUF1QixPQUFPLEVBRzdFLE9BQU8sSSw2QkN6Q1IsSUFBSWc0RSxFQUFrQixFQUFRLElBQzFCQyxFQUFtQixFQUFRLElBRTNCQyxFQUFpQixFQUFRLEtBRzdCLzRFLEVBQU9ELFFBQVU4NEUsRUFDZCxTQUFrQjc0QixHQUVuQixPQUFPNjRCLEVBQWdCNzRCLElBRXRCODRCLEVBQ0MsU0FBa0I5NEIsR0FDbkIsSUFBS0EsR0FBbUIsaUJBQU5BLEdBQStCLG1CQUFOQSxFQUMxQyxNQUFNLElBQUlyb0IsVUFBVSwyQkFHckIsT0FBT21oRCxFQUFpQjk0QixJQUV2Qis0QixFQUNDLFNBQWtCLzRCLEdBRW5CLE9BQU8rNEIsRUFBZS80QixJQUVyQixNLDZCQ3hCTCxJQUdJZzVCLEVBSEFDLEVBQVcsRUFBUSxJQUNuQkMsRUFBTyxFQUFRLElBR25CLElBRUNGLEVBQXlFLEdBQUtuaEQsWUFBY3IxQixNQUFNWCxVQUNqRyxNQUFPaUssR0FDUixJQUFLQSxHQUFrQixpQkFBTkEsS0FBb0IsU0FBVUEsSUFBaUIscUJBQVhBLEVBQUVtNkIsS0FDdEQsTUFBTW42QixFQUtSLElBQUkyK0MsSUFBU3V1QixHQUFvQkUsR0FBUUEsRUFBS3Y0RSxPQUFPa0IsVUFBd0QsYUFFekdxa0QsRUFBVXZsRCxPQUNWdzRFLEVBQWtCanpCLEVBQVF6a0IsZUFHOUJ6aEMsRUFBT0QsUUFBVTBxRCxHQUE0QixtQkFBYkEsRUFBSzNwRCxJQUNsQ200RSxFQUFTLENBQUN4dUIsRUFBSzNwRCxNQUNZLG1CQUFwQnE0RSxHQUN5QixTQUFtQmo0RSxHQUVuRCxPQUFPaTRFLEVBQXlCLE1BQVRqNEUsRUFBZ0JBLEVBQVFnbEQsRUFBUWhsRCxNLDZCQ3ZCMUQsSUFBSWs0RSxFQUFnQixrREFDaEI3M0IsRUFBUTVnRCxPQUFPa0IsVUFBVVksU0FDekJxSCxFQUFNSixLQUFLSSxJQUdYdXZFLEVBQVcsU0FBa0J6MkUsRUFBR0MsR0FHaEMsSUFGQSxJQUFJVyxFQUFNLEdBRUR2RCxFQUFJLEVBQUdBLEVBQUkyQyxFQUFFSyxPQUFRaEQsR0FBSyxFQUMvQnVELEVBQUl2RCxHQUFLMkMsRUFBRTNDLEdBRWYsSUFBSyxJQUFJcWQsRUFBSSxFQUFHQSxFQUFJemEsRUFBRUksT0FBUXFhLEdBQUssRUFDL0I5WixFQUFJOFosRUFBSTFhLEVBQUVLLFFBQVVKLEVBQUV5YSxHQUcxQixPQUFPOVosR0FHUDgxRSxFQUFRLFNBQWVDLEVBQVM5MEQsR0FFaEMsSUFEQSxJQUFJamhCLEVBQU0sR0FDRHZELEVBQUl3a0IsR0FBVSxFQUFHbkgsRUFBSSxFQUFHcmQsRUFBSXM1RSxFQUFRdDJFLE9BQVFoRCxHQUFLLEVBQUdxZCxHQUFLLEVBQzlEOVosRUFBSThaLEdBQUtpOEQsRUFBUXQ1RSxHQUVyQixPQUFPdUQsR0FHUGcyRSxFQUFRLFNBQVVoMkUsRUFBS2kyRSxHQUV2QixJQURBLElBQUlyaUQsRUFBTSxHQUNEbjNCLEVBQUksRUFBR0EsRUFBSXVELEVBQUlQLE9BQVFoRCxHQUFLLEVBQ2pDbTNCLEdBQU81ekIsRUFBSXZELEdBQ1BBLEVBQUksRUFBSXVELEVBQUlQLFNBQ1ptMEIsR0FBT3FpRCxHQUdmLE9BQU9yaUQsR0FHWHAzQixFQUFPRCxRQUFVLFNBQWNrckIsR0FDM0IsSUFBSStLLEVBQVN6dkIsS0FDYixHQUFzQixtQkFBWHl2QixHQXBDQSxzQkFvQ3lCdXJCLEVBQU1uL0MsTUFBTTR6QixHQUM1QyxNQUFNLElBQUkyQixVQUFVeWhELEVBQWdCcGpELEdBeUJ4QyxJQXZCQSxJQUVJMGpELEVBRkFyeEUsRUFBT2l4RSxFQUFNajNFLFVBQVcsR0FHeEJzM0UsRUFBUyxXQUNULEdBQUlwekUsZ0JBQWdCbXpFLEVBQU8sQ0FDdkIsSUFBSXo1RCxFQUFTK1YsRUFBTzV6QixNQUNoQm1FLEtBQ0E4eUUsRUFBU2h4RSxFQUFNaEcsWUFFbkIsT0FBSTFCLE9BQU9zZixLQUFZQSxFQUNaQSxFQUVKMVosS0FFWCxPQUFPeXZCLEVBQU81ekIsTUFDVjZvQixFQUNBb3VELEVBQVNoeEUsRUFBTWhHLGFBS25CdTNFLEVBQWM5dkUsRUFBSSxFQUFHa3NCLEVBQU8veUIsT0FBU29GLEVBQUtwRixRQUMxQzQyRSxFQUFZLEdBQ1A1NUUsRUFBSSxFQUFHQSxFQUFJMjVFLEVBQWEzNUUsSUFDN0I0NUUsRUFBVTU1RSxHQUFLLElBQU1BLEVBS3pCLEdBRkF5NUUsRUFBUTN3RSxTQUFTLFNBQVUsb0JBQXNCeXdFLEVBQU1LLEVBQVcsS0FBTyw0Q0FBakU5d0UsQ0FBOEc0d0UsR0FFbEgzakQsRUFBT24wQixVQUFXLENBQ2xCLElBQUlpNEUsRUFBUSxhQUNaQSxFQUFNajRFLFVBQVltMEIsRUFBT24wQixVQUN6QjYzRSxFQUFNNzNFLFVBQVksSUFBSWk0RSxFQUN0QkEsRUFBTWo0RSxVQUFZLEtBR3RCLE9BQU82M0UsSSw2QkNoRlgsSUFBSWo0RSxFQUFPLEVBQVEsSUFFZjhsRCxFQUFTLEVBQVEsSUFDakJDLEVBQVEsRUFBUSxJQUNoQnV5QixFQUFnQixFQUFRLEtBRzVCLzVFLEVBQU9ELFFBQVVnNkUsR0FBaUJ0NEUsRUFBS3JCLEtBQUtvbkQsRUFBT0QsSSw2QkNObkR2bkQsRUFBT0QsUUFBNkIsb0JBQVpnZ0QsU0FBMkJBLFNBQVdBLFFBQVEzOUMsTyw2QkNEdEUsSUFBSWhDLEVBQU8ySSxTQUFTbEgsVUFBVXpCLEtBQzFCNDVFLEVBQVVyNUUsT0FBT2tCLFVBQVVDLGVBQzNCTCxFQUFPLEVBQVEsSUFHbkJ6QixFQUFPRCxRQUFVMEIsRUFBS3JCLEtBQUtBLEVBQU00NUUsSSw2QkNMakMsSUFBSXBqQixFQUFlLEVBQVEsSUFDdkJDLEVBQVksRUFBUSxJQUNwQjVwQyxFQUFVLEVBQVEsSUFDbEJzcUQsRUFBb0IsRUFBUSxJQUU1Qi93QixFQUFhLEVBQVEsR0FDckJ5ekIsRUFBV3JqQixFQUFhLGFBQWEsR0FHckNzakIsRUFBY3JqQixFQUFVLHlCQUF5QixHQUVqRHNqQixFQUFjdGpCLEVBQVUseUJBQXlCLEdBRWpEdWpCLEVBQWN2akIsRUFBVSx5QkFBeUIsR0FFakR3akIsRUFBaUJ4akIsRUFBVSw0QkFBNEIsR0FHM0Q3MkQsRUFBT0QsUUFBVWs2RSxFQUM2QixXQUtNLElBQUlLLEVBQ2ZsakIsRUFHbkNDLEVBQVUsQ0FDYkMsT0FBUSxTQUFVOTFELEdBQ2pCLElBQUs2MUQsRUFBUXAxQixJQUFJemdDLEdBQ2hCLE1BQU0sSUFBSWdsRCxFQUFXLGlDQUFtQ3Y1QixFQUFRenJCLEtBR2xFLE9BQVUsU0FBVUEsR0FDbkIsR0FBSXk0RSxHQUFZejRFLElBQXVCLGlCQUFSQSxHQUFtQyxtQkFBUkEsSUFDekQsR0FBSTg0RSxFQUNILE9BQU9ELEVBQWVDLEVBQUs5NEUsUUFFdEIsR0FBSSsxRSxHQUNObmdCLEVBQ0gsT0FBT0EsRUFBVyxPQUFFNTFELEdBR3RCLE9BQU8sR0FFUlYsSUFBSyxTQUFVVSxHQUNkLE9BQUl5NEUsR0FBWXo0RSxJQUF1QixpQkFBUkEsR0FBbUMsbUJBQVJBLElBQ3JEODRFLEVBQ0lKLEVBQVlJLEVBQUs5NEUsR0FHbkI0MUQsR0FBTUEsRUFBR3QyRCxJQUFJVSxJQUVyQnlnQyxJQUFLLFNBQVV6Z0MsR0FDZCxPQUFJeTRFLEdBQVl6NEUsSUFBdUIsaUJBQVJBLEdBQW1DLG1CQUFSQSxJQUNyRDg0RSxFQUNJRixFQUFZRSxFQUFLOTRFLEtBR2pCNDFELEdBQU1BLEVBQUduMUIsSUFBSXpnQyxJQUV2QjRILElBQUssU0FBVTVILEVBQUtOLEdBQ2YrNEUsR0FBWXo0RSxJQUF1QixpQkFBUkEsR0FBbUMsbUJBQVJBLElBQ3BEODRFLElBQ0pBLEVBQU0sSUFBSUwsR0FFWEUsRUFBWUcsRUFBSzk0RSxFQUFLTixJQUNacTJFLElBQ0xuZ0IsSUFDSkEsRUFBS21nQixLQUdnQyxFQUFLbnVFLElBQUk1SCxFQUFLTixNQU12RCxPQUFPbTJELEdBRU5rZ0IsRyw2QkNqRkgsSUFBSWpsQixFQUFRLEVBQVEsSUFFaEJyd0IsRUFBTXRoQyxPQUFPa0IsVUFBVUMsZUFDdkJRLEVBQVVFLE1BQU1GLFFBRWhCb2UsRUFBVyxDQUNYbTFELFdBQVcsRUFDWEMsa0JBQWtCLEVBQ2xCaGQsaUJBQWlCLEVBQ2pCeWhCLGFBQWEsRUFDYkMsV0FBWSxHQUNabGlCLFFBQVMsUUFDVDBkLGlCQUFpQixFQUNqQlYsT0FBTyxFQUNQbUYsaUJBQWlCLEVBQ2pCQyxRQUFTcG9CLEVBQU04RixPQUNmeUgsVUFBVyxJQUNYbmUsTUFBTyxFQUNQaTVCLFdBQVksVUFDWkMsbUJBQW1CLEVBQ25CQywwQkFBMEIsRUFDMUJDLGVBQWdCLElBQ2hCQyxhQUFhLEVBQ2JuakIsY0FBYyxFQUNkb2pCLGFBQWEsRUFDYnhFLG9CQUFvQixFQUNwQnlFLHNCQUFzQixHQUd0QkosRUFBMkIsU0FBVXpqRCxHQUNyQyxPQUFPQSxFQUFJcnNCLFFBQVEsYUFBYSxTQUFVMnRELEVBQUl3aUIsR0FDMUMsT0FBT24wRCxPQUFPc3FCLGFBQWFsL0IsU0FBUytvRSxFQUFXLFNBSW5EQyxFQUFrQixTQUFVcDBFLEVBQUtxekIsRUFBU2doRCxHQUMxQyxHQUFJcjBFLEdBQXNCLGlCQUFSQSxHQUFvQnF6QixFQUFRazdDLE9BQVN2dUUsRUFBSXFMLFFBQVEsTUFBUSxFQUN2RSxPQUFPckwsRUFBSWdPLE1BQU0sS0FHckIsR0FBSXFsQixFQUFRNmdELHNCQUF3QkcsR0FBc0JoaEQsRUFBUW9nRCxXQUM5RCxNQUFNLElBQUkxRCxXQUFXLDhCQUFnQzE4QyxFQUFRb2dELFdBQWEsWUFBcUMsSUFBdkJwZ0QsRUFBUW9nRCxXQUFtQixHQUFLLEtBQU8seUJBR25JLE9BQU96ekUsR0EySVBzMEUsRUFBWSxTQUE4QkMsRUFBVXYwRSxFQUFLcXpCLEVBQVNtaEQsR0FDbEUsR0FBS0QsRUFBTCxDQUtBLElBQUk5NUUsRUFBTTQ0QixFQUFReTdDLFVBQVl5RixFQUFTdndFLFFBQVEsY0FBZSxRQUFVdXdFLEVBS3BFRSxFQUFRLGdCQUlSN2lCLEVBQVV2K0IsRUFBUXNuQixNQUFRLEdBTGYsZUFLNkJ0aUMsS0FBSzVkLEdBQzdDcWtELEVBQVM4UyxFQUFVbjNELEVBQUkrRyxNQUFNLEVBQUdvd0QsRUFBUTlvQyxPQUFTcnVCLEVBSWpEbUgsRUFBTyxHQUNYLEdBQUlrOUMsRUFBUSxDQUVSLElBQUt6ckIsRUFBUXc5QixjQUFnQjMxQixFQUFJN2hDLEtBQUtPLE9BQU9rQixVQUFXZ2tELEtBQy9DenJCLEVBQVEwK0IsZ0JBQ1QsT0FJUm53RCxFQUFLL0UsS0FBS2lpRCxHQU1kLElBREEsSUFBSTVsRCxFQUFJLEVBQ0RtNkIsRUFBUXNuQixNQUFRLEdBQXFDLFFBQS9CaVgsRUFBVTZpQixFQUFNcDhELEtBQUs1ZCxLQUFrQnZCLEVBQUltNkIsRUFBUXNuQixPQUFPLENBRW5GLEdBREF6aEQsR0FBSyxHQUNBbTZCLEVBQVF3OUIsY0FBZ0IzMUIsRUFBSTdoQyxLQUFLTyxPQUFPa0IsVUFBVzgyRCxFQUFRLEdBQUdwd0QsTUFBTSxHQUFJLE1BQ3BFNnhCLEVBQVEwK0IsZ0JBQ1QsT0FHUm53RCxFQUFLL0UsS0FBSyswRCxFQUFRLElBS3RCLEdBQUlBLEVBQVMsQ0FDVCxJQUE0QixJQUF4QnYrQixFQUFRNGdELFlBQ1IsTUFBTSxJQUFJbEUsV0FBVyx3Q0FBMEMxOEMsRUFBUXNuQixNQUFRLDRCQUVuRi80QyxFQUFLL0UsS0FBSyxJQUFNcEMsRUFBSStHLE1BQU1vd0QsRUFBUTlvQyxPQUFTLEtBRy9DLE9BbEdjLFNBQVUraUQsRUFBTzdyRSxFQUFLcXpCLEVBQVNtaEQsR0FDN0MsSUFBSUgsRUFBcUIsRUFDekIsR0FBSXhJLEVBQU0zdkUsT0FBUyxHQUFpQyxPQUE1QjJ2RSxFQUFNQSxFQUFNM3ZFLE9BQVMsR0FBYSxDQUN0RCxJQUFJdzRFLEVBQVk3SSxFQUFNcnFFLE1BQU0sR0FBSSxHQUFHQyxLQUFLLElBQ3hDNHlFLEVBQXFCNTRFLE1BQU1GLFFBQVF5RSxJQUFRQSxFQUFJMDBFLEdBQWExMEUsRUFBSTAwRSxHQUFXeDRFLE9BQVMsRUFLeEYsSUFGQSxJQUFJeTRFLEVBQU9ILEVBQWV4MEUsRUFBTW8wRSxFQUFnQnAwRSxFQUFLcXpCLEVBQVNnaEQsR0FFckRuN0UsRUFBSTJ5RSxFQUFNM3ZFLE9BQVMsRUFBR2hELEdBQUssSUFBS0EsRUFBRyxDQUN4QyxJQUFJOEMsRUFDQWcxRSxFQUFPbkYsRUFBTTN5RSxHQUVqQixHQUFhLE9BQVQ4M0UsR0FBaUIzOUMsRUFBUTJnRCxZQUN6Qmg0RSxFQUFNcTNCLEVBQVEwN0MsbUJBQThCLEtBQVQ0RixHQUFnQnRoRCxFQUFRbzhDLG9CQUErQixPQUFUa0YsR0FDM0UsR0FDQXBwQixFQUFNd0YsUUFBUSxHQUFJNGpCLE9BQ3JCLENBQ0gzNEUsRUFBTXEzQixFQUFRdzlCLGFBQWUsQ0FBRS8vQixVQUFXLE1BQVMsR0FDbkQsSUFBSThqRCxFQUErQixNQUFuQjVELEVBQUtwbUQsT0FBTyxJQUErQyxNQUFqQ29tRCxFQUFLcG1ELE9BQU9vbUQsRUFBSzkwRSxPQUFTLEdBQWE4MEUsRUFBS3h2RSxNQUFNLEdBQUksR0FBS3d2RSxFQUNqRzZELEVBQWN4aEQsRUFBUXFnRCxnQkFBa0JrQixFQUFVNXdFLFFBQVEsT0FBUSxLQUFPNHdFLEVBQ3pFOXJELEVBQVExZCxTQUFTeXBFLEVBQWEsSUFDN0J4aEQsRUFBUTJnRCxhQUErQixLQUFoQmEsR0FHdkJoMkUsTUFBTWlxQixJQUNKa29ELElBQVM2RCxHQUNUNzBELE9BQU84SSxLQUFXK3JELEdBQ2xCL3JELEdBQVMsR0FDUnVLLEVBQVEyZ0QsYUFBZWxyRCxHQUFTdUssRUFBUW9nRCxZQUU1Q3ozRSxFQUFNLElBQ0Y4c0IsR0FBUzZyRCxFQUNVLGNBQWhCRSxJQUNQNzRFLEVBQUk2NEUsR0FBZUYsR0FYbkIzNEUsRUFBTSxDQUFFMjJELEVBQUdnaUIsR0FlbkJBLEVBQU8zNEUsRUFHWCxPQUFPMjRFLEVBeURBRyxDQUFZbHpFLEVBQU01QixFQUFLcXpCLEVBQVNtaEQsS0FnRTNDdjdFLEVBQU9ELFFBQVUsU0FBVXEzQixFQUFLOHBCLEdBQzVCLElBQUk5bUIsRUE5RG9CLFNBQStCOG1CLEdBQ3ZELElBQUtBLEVBQ0QsT0FBT3hnQyxFQUdYLFFBQXFDLElBQTFCd2dDLEVBQUs0MEIsa0JBQXFFLGtCQUExQjUwQixFQUFLNDBCLGlCQUM1RCxNQUFNLElBQUluK0MsVUFBVSwwRUFHeEIsUUFBb0MsSUFBekJ1cEIsRUFBS3U1QixpQkFBbUUsa0JBQXpCdjVCLEVBQUt1NUIsZ0JBQzNELE1BQU0sSUFBSTlpRCxVQUFVLHlFQUd4QixHQUFxQixPQUFqQnVwQixFQUFLdzVCLGNBQTRDLElBQWpCeDVCLEVBQUt3NUIsU0FBbUQsbUJBQWpCeDVCLEVBQUt3NUIsUUFDNUUsTUFBTSxJQUFJL2lELFVBQVUsaUNBR3hCLFFBQTRCLElBQWpCdXBCLEVBQUtvWCxTQUE0QyxVQUFqQnBYLEVBQUtvWCxTQUF3QyxlQUFqQnBYLEVBQUtvWCxRQUN4RSxNQUFNLElBQUkzZ0MsVUFBVSxxRUFHeEIsUUFBeUMsSUFBOUJ1cEIsRUFBSys1QixzQkFBNkUsa0JBQTlCLzVCLEVBQUsrNUIscUJBQ2hFLE1BQU0sSUFBSXRqRCxVQUFVLG1EQUd4QixJQUFJMmdDLE9BQWtDLElBQWpCcFgsRUFBS29YLFFBQTBCNTNDLEVBQVM0M0MsUUFBVXBYLEVBQUtvWCxRQUV4RXFpQixPQUF3QyxJQUFwQno1QixFQUFLeTVCLFdBQTZCajZELEVBQVNpNkQsV0FBYXo1QixFQUFLeTVCLFdBRXJGLEdBQW1CLFlBQWZBLEdBQTJDLFVBQWZBLEdBQXlDLFNBQWZBLEVBQ3RELE1BQU0sSUFBSWhqRCxVQUFVLGdFQUt4QixNQUFPLENBQ0hrK0MsZUFIc0MsSUFBbkIzMEIsRUFBSzIwQixXQUFxRCxJQUF6QjMwQixFQUFLdTVCLGlCQUFrQy81RCxFQUFTbTFELFlBQWMzMEIsRUFBSzIwQixVQUl2SEMsaUJBQW1ELGtCQUExQjUwQixFQUFLNDBCLG1CQUFtQzUwQixFQUFLNDBCLGlCQUFtQnAxRCxFQUFTbzFELGlCQUNsR2hkLGdCQUFpRCxrQkFBekI1WCxFQUFLNFgsZ0JBQWdDNVgsRUFBSzRYLGdCQUFrQnA0QyxFQUFTbzRDLGdCQUM3RnloQixZQUF5QyxrQkFBckJyNUIsRUFBS3E1QixZQUE0QnI1QixFQUFLcTVCLFlBQWM3NUQsRUFBUzY1RCxZQUNqRkMsV0FBdUMsaUJBQXBCdDVCLEVBQUtzNUIsV0FBMEJ0NUIsRUFBS3M1QixXQUFhOTVELEVBQVM4NUQsV0FDN0VsaUIsUUFBU0EsRUFDVDBkLGdCQUFpRCxrQkFBekI5MEIsRUFBSzgwQixnQkFBZ0M5MEIsRUFBSzgwQixnQkFBa0J0MUQsRUFBU3MxRCxnQkFDN0ZWLE1BQTZCLGtCQUFmcDBCLEVBQUtvMEIsTUFBc0JwMEIsRUFBS28wQixNQUFRNTBELEVBQVM0MEQsTUFDL0RtRixnQkFBaUQsa0JBQXpCdjVCLEVBQUt1NUIsZ0JBQWdDdjVCLEVBQUt1NUIsZ0JBQWtCLzVELEVBQVMrNUQsZ0JBQzdGQyxRQUFpQyxtQkFBakJ4NUIsRUFBS3c1QixRQUF5Qng1QixFQUFLdzVCLFFBQVVoNkQsRUFBU2c2RCxRQUN0RTdhLFVBQXFDLGlCQUFuQjNlLEVBQUsyZSxXQUEwQnZOLEVBQU05USxTQUFTTixFQUFLMmUsV0FBYTNlLEVBQUsyZSxVQUFZbi9DLEVBQVNtL0MsVUFFNUduZSxNQUE4QixpQkFBZlIsRUFBS1EsUUFBcUMsSUFBZlIsRUFBS1EsT0FBb0JSLEVBQUtRLE1BQVFoaEMsRUFBU2doQyxNQUN6Rmk1QixXQUFZQSxFQUNaQyxtQkFBOEMsSUFBM0IxNUIsRUFBSzA1QixrQkFDeEJDLHlCQUFtRSxrQkFBbEMzNUIsRUFBSzI1Qix5QkFBeUMzNUIsRUFBSzI1Qix5QkFBMkJuNkQsRUFBU202RCx5QkFDeEhDLGVBQStDLGlCQUF4QjU1QixFQUFLNDVCLGVBQThCNTVCLEVBQUs0NUIsZUFBaUJwNkQsRUFBU282RCxlQUN6RkMsYUFBa0MsSUFBckI3NUIsRUFBSzY1QixZQUNsQm5qQixhQUEyQyxrQkFBdEIxVyxFQUFLMFcsYUFBNkIxVyxFQUFLMFcsYUFBZWwzQyxFQUFTazNDLGFBQ3BGb2pCLFlBQXlDLGtCQUFyQjk1QixFQUFLODVCLGNBQThCOTVCLEVBQUs4NUIsWUFBY3Q2RCxFQUFTczZELFlBQ25GeEUsbUJBQXVELGtCQUE1QnQxQixFQUFLczFCLG1CQUFtQ3QxQixFQUFLczFCLG1CQUFxQjkxRCxFQUFTODFELG1CQUN0R3lFLHFCQUEyRCxrQkFBOUIvNUIsRUFBSys1QixzQkFBcUMvNUIsRUFBSys1QixzQkFLbEVhLENBQXNCNTZCLEdBRXBDLEdBQVksS0FBUjlwQixTQUFjQSxFQUNkLE9BQU9nRCxFQUFRdzlCLGFBQWUsQ0FBRS8vQixVQUFXLE1BQVMsR0FTeEQsSUFOQSxJQUFJa2tELEVBQXlCLGlCQUFSM2tELEVBM1BQLFNBQWdDQSxFQUFLZ0QsR0FDbkQsSUFBSXIzQixFQUFNLENBQUU4MEIsVUFBVyxNQUVuQm1rRCxFQUFXNWhELEVBQVF3Z0Qsa0JBQW9CeGpELEVBQUlyc0IsUUFBUSxNQUFPLElBQU1xc0IsRUFDcEU0a0QsRUFBV0EsRUFBU2p4RSxRQUFRLFFBQVMsS0FBS0EsUUFBUSxRQUFTLEtBRTNELElBQUk2cEIsRUFBUXdGLEVBQVEwZ0QsaUJBQW1CMzZCLFNBQVduNkMsRUFBWW8wQixFQUFRMGdELGVBQ2xFOTFELEVBQVFnM0QsRUFBU2puRSxNQUNqQnFsQixFQUFReWxDLFVBQ1J6bEMsRUFBUTZnRCxxQkFBdUJybUQsRUFBUSxFQUFJQSxHQUcvQyxHQUFJd0YsRUFBUTZnRCxzQkFBd0JqMkQsRUFBTS9oQixPQUFTMnhCLEVBQy9DLE1BQU0sSUFBSWtpRCxXQUFXLGtDQUFvQ2xpRCxFQUFRLGNBQTBCLElBQVZBLEVBQWMsR0FBSyxLQUFPLGFBRy9HLElBQ0kzMEIsRUFEQWc4RSxHQUFhLEVBR2IzakIsRUFBVWwrQixFQUFRaytCLFFBQ3RCLEdBQUlsK0IsRUFBUTQ3QyxnQkFDUixJQUFLLzFFLEVBQUksRUFBR0EsRUFBSStrQixFQUFNL2hCLFNBQVVoRCxFQUNNLElBQTlCK2tCLEVBQU0va0IsR0FBR21TLFFBQVEsV0F4QlgsbUJBeUJGNFMsRUFBTS9rQixHQUNOcTRELEVBQVUsUUE3Qlosd0JBOEJTdHpDLEVBQU0va0IsS0FDYnE0RCxFQUFVLGNBRWQyakIsRUFBWWg4RSxFQUNaQSxFQUFJK2tCLEVBQU0vaEIsUUFLdEIsSUFBS2hELEVBQUksRUFBR0EsRUFBSStrQixFQUFNL2hCLFNBQVVoRCxFQUM1QixHQUFJQSxJQUFNZzhFLEVBQVYsQ0FHQSxJQUtJejZFLEVBQ0F1RixFQU5BeWpELEVBQU94bEMsRUFBTS9rQixHQUViaThFLEVBQW1CMXhCLEVBQUtwNEMsUUFBUSxNQUNoQzhILEdBQTRCLElBQXRCZ2lFLEVBQTBCMXhCLEVBQUtwNEMsUUFBUSxLQUFPOHBFLEVBQW1CLEdBSTlELElBQVRoaUUsR0FDQTFZLEVBQU00NEIsRUFBUXNnRCxRQUFRbHdCLEVBQU05cEMsRUFBU2c2RCxRQUFTcGlCLEVBQVMsT0FDdkR2eEQsRUFBTXF6QixFQUFRbzhDLG1CQUFxQixLQUFPLEtBRTFDaDFFLEVBQU00NEIsRUFBUXNnRCxRQUFRbHdCLEVBQUtqaUQsTUFBTSxFQUFHMlIsR0FBTXdHLEVBQVNnNkQsUUFBU3BpQixFQUFTLE9BRXJFdnhELEVBQU11ckQsRUFBTXNHLFNBQ1J1aUIsRUFDSTN3QixFQUFLamlELE1BQU0yUixFQUFNLEdBQ2pCa2dCLEVBQ0E5M0IsRUFBUVMsRUFBSXZCLElBQVF1QixFQUFJdkIsR0FBS3lCLE9BQVMsSUFFMUMsU0FBVWs1RSxHQUNOLE9BQU8vaEQsRUFBUXNnRCxRQUFReUIsRUFBWXo3RCxFQUFTZzZELFFBQVNwaUIsRUFBUyxhQUt0RXZ4RCxHQUFPcXpCLEVBQVF5Z0QsMEJBQXdDLGVBQVp2aUIsSUFDM0N2eEQsRUFBTTh6RSxFQUF5Qjl6RCxPQUFPaGdCLEtBR3RDeWpELEVBQUtwNEMsUUFBUSxRQUFVLElBQ3ZCckwsRUFBTXpFLEVBQVF5RSxHQUFPLENBQUNBLEdBQU9BLEdBR2pDLElBQUlxMUUsRUFBV242QyxFQUFJN2hDLEtBQUsyQyxFQUFLdkIsR0FDekI0NkUsR0FBbUMsWUFBdkJoaUQsRUFBUXVnRCxXQUNwQjUzRSxFQUFJdkIsR0FBTzh3RCxFQUFNd0YsUUFBUS8wRCxFQUFJdkIsR0FBTXVGLEdBQzNCcTFFLEdBQW1DLFNBQXZCaGlELEVBQVF1Z0QsYUFDNUI1M0UsRUFBSXZCLEdBQU91RixHQUluQixPQUFPaEUsRUE0S2lDczVFLENBQVlqbEQsRUFBS2dELEdBQVdoRCxFQUNoRXIwQixFQUFNcTNCLEVBQVF3OUIsYUFBZSxDQUFFLy9CLFVBQVcsTUFBUyxHQUluRGx2QixFQUFPaEksT0FBT2dJLEtBQUtvekUsR0FDZDk3RSxFQUFJLEVBQUdBLEVBQUkwSSxFQUFLMUYsU0FBVWhELEVBQUcsQ0FDbEMsSUFBSXVCLEVBQU1tSCxFQUFLMUksR0FDWHE4RSxFQUFTakIsRUFBVTc1RSxFQUFLdTZFLEVBQVF2NkUsR0FBTTQ0QixFQUF3QixpQkFBUmhELEdBQzFEcjBCLEVBQU11dkQsRUFBTWhZLE1BQU12M0MsRUFBS3U1RSxFQUFRbGlELEdBR25DLE9BQTRCLElBQXhCQSxFQUFRbWdELFlBQ0R4M0UsRUFHSnV2RCxFQUFNeUYsUUFBUWgxRCxLLGNDdFV6Qi9DLEVBQU9ELFFBQVUsU0FBU0MsR0FvQnpCLE9BbkJLQSxFQUFPdThFLGtCQUNYdjhFLEVBQU9pSSxVQUFZLGFBQ25CakksRUFBT3MvRCxNQUFRLEdBRVZ0L0QsRUFBT3kwQyxXQUFVejBDLEVBQU95MEMsU0FBVyxJQUN4Qzl6QyxPQUFPQyxlQUFlWixFQUFRLFNBQVUsQ0FDdkNhLFlBQVksRUFDWkMsSUFBSyxXQUNKLE9BQU9kLEVBQU9FLEtBR2hCUyxPQUFPQyxlQUFlWixFQUFRLEtBQU0sQ0FDbkNhLFlBQVksRUFDWkMsSUFBSyxXQUNKLE9BQU9kLEVBQU9DLEtBR2hCRCxFQUFPdThFLGdCQUFrQixHQUVuQnY4RSxJLGdCQ3BCUixJQUFJdUQsRUFBTSxDQUNULE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLFFBQVMsR0FDVCxXQUFZLEdBQ1osT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFR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bkYsU0FBUzhuRixlQUFlLGFBQ3hDRCxJQUFVRSxLQUFTM2dGLE9BQU8yOEMsSUFBQTlsRCxjQUFDaXBGLEdBQWEsTUFBS1ciLCJmaWxlIjoiaW5kZXhfYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzNTYpO1xuIiwiLy8hIG1vbWVudC5qc1xuLy8hIHZlcnNpb24gOiAyLjMwLjFcbi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzXG4vLyEgbGljZW5zZSA6IE1JVFxuLy8hIG1vbWVudGpzLmNvbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiBob29rcygpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4gICAgLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG4gICAgZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgICAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAgICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBhcnJMZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyTGVuOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eTogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnM6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQ6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlcjogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkRXJhOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNvOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZERhdGVQYXJ0czogW10sXG4gICAgICAgICAgICBlcmE6IG51bGwsXG4gICAgICAgICAgICBtZXJpZGllbTogbnVsbCxcbiAgICAgICAgICAgIHJmYzI4MjI6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheU1pc21hdGNoOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIHZhciBzb21lO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHQubGVuZ3RoID4+PiAwLFxuICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgICAgIHZhciBmbGFncyA9IG51bGwsXG4gICAgICAgICAgICBwYXJzZWRQYXJ0cyA9IGZhbHNlLFxuICAgICAgICAgICAgaXNOb3dWYWxpZCA9IG0uX2QgJiYgIWlzTmFOKG0uX2QuZ2V0VGltZSgpKTtcbiAgICAgICAgaWYgKGlzTm93VmFsaWQpIHtcbiAgICAgICAgICAgIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICAgICAgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRXJhICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy53ZWVrZGF5TWlzbWF0Y2ggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcbiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID1cbiAgICAgICAgICAgICAgICAgICAgaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQoZmxhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuICAgIC8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG4gICAgdmFyIG1vbWVudFByb3BlcnRpZXMgPSAoaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdKSxcbiAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHByb3AsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBtb21lbnRQcm9wZXJ0aWVzTGVuID0gbW9tZW50UHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzTGVuID4gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1vbWVudFByb3BlcnRpZXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG5cbiAgICAvLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgICAgICAvLyBvYmplY3RzLlxuICAgICAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQob2JqKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBjb25zb2xlLndhcm5cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBhcmcsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgYXJnTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJnTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AoYXJndW1lbnRzWzBdLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSBrZXkgKyAnOiAnICsgYXJndW1lbnRzWzBdW2tleV0gKyAnLCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgwLCAtMik7IC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYSBhbmQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAgICAgbXNnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG5Bcmd1bWVudHM6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuam9pbignJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKCkuc3RhY2tcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGZuKTtcbiAgICB9XG5cbiAgICB2YXIgZGVwcmVjYXRpb25zID0ge307XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbiAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHR5cGVvZiBGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbikgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBwcm9wLCBpO1xuICAgICAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjb25maWcsIGkpKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAgICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfZGF5T2ZNb250aE9yZGluYWxQYXJzZS5cbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAodGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZS5zb3VyY2UgfHwgdGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSkgK1xuICAgICAgICAgICAgICAgICd8JyArXG4gICAgICAgICAgICAgICAgL1xcZHsxLDJ9Ly5zb3VyY2VcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLFxuICAgICAgICAgICAgcHJvcDtcbiAgICAgICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGhhc093blByb3AocGFyZW50Q29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgZG9uJ3QgbW9kaWZ5IHBhcmVudCBjb25maWdcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyKGtleSwgbW9tLCBub3cpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArXG4gICAgICAgICAgICBhYnNOdW1iZXJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9XG4gICAgICAgICAgICAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oW0hoXW1tKHNzKT98TW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98UW8/fE57MSw1fXxZWVlZWVl8WVlZWVl8WVlZWXxZWXx5ezIsNH18eW8/fGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fGtrP3xtbT98c3M/fFN7MSw5fXx4fFh8eno/fFpaP3wuKS9nLFxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nLFxuICAgICAgICBmb3JtYXRGdW5jdGlvbnMgPSB7fSxcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMgPSB7fTtcblxuICAgIC8vIHRva2VuOiAgICAnTSdcbiAgICAvLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4gICAgLy8gb3JkaW5hbDogICdNbydcbiAgICAvLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbiAgICBmdW5jdGlvbiBhZGRGb3JtYXRUb2tlbih0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnLFxuICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpXSlcbiAgICAgICAgICAgICAgICAgICAgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICA6IGFycmF5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbiAgICBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9XG4gICAgICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBpID0gNTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLFxuICAgICAgICAgICAgICAgIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vuc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgIEw6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb25nRGF0ZUZvcm1hdChrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlclxuICAgICAgICAgICAgLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh0b2spIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ01NTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ01NJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdERCcgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnZGRkZCdcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvay5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvaztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG4gICAgZnVuY3Rpb24gaW52YWxpZERhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnLFxuICAgICAgICBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgdzogJ2Egd2VlaycsXG4gICAgICAgIHd3OiAnJWQgd2Vla3MnLFxuICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KVxuICAgICAgICAgICAgPyBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKVxuICAgICAgICAgICAgOiBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXN0RnV0dXJlKGRpZmYsIG91dHB1dCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWxpYXNlcyA9IHtcbiAgICAgICAgRDogJ2RhdGUnLFxuICAgICAgICBkYXRlczogJ2RhdGUnLFxuICAgICAgICBkYXRlOiAnZGF0ZScsXG4gICAgICAgIGQ6ICdkYXknLFxuICAgICAgICBkYXlzOiAnZGF5JyxcbiAgICAgICAgZGF5OiAnZGF5JyxcbiAgICAgICAgZTogJ3dlZWtkYXknLFxuICAgICAgICB3ZWVrZGF5czogJ3dlZWtkYXknLFxuICAgICAgICB3ZWVrZGF5OiAnd2Vla2RheScsXG4gICAgICAgIEU6ICdpc29XZWVrZGF5JyxcbiAgICAgICAgaXNvd2Vla2RheXM6ICdpc29XZWVrZGF5JyxcbiAgICAgICAgaXNvd2Vla2RheTogJ2lzb1dlZWtkYXknLFxuICAgICAgICBEREQ6ICdkYXlPZlllYXInLFxuICAgICAgICBkYXlvZnllYXJzOiAnZGF5T2ZZZWFyJyxcbiAgICAgICAgZGF5b2Z5ZWFyOiAnZGF5T2ZZZWFyJyxcbiAgICAgICAgaDogJ2hvdXInLFxuICAgICAgICBob3VyczogJ2hvdXInLFxuICAgICAgICBob3VyOiAnaG91cicsXG4gICAgICAgIG1zOiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICBtaWxsaXNlY29uZHM6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgIG1pbGxpc2Vjb25kOiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICBtOiAnbWludXRlJyxcbiAgICAgICAgbWludXRlczogJ21pbnV0ZScsXG4gICAgICAgIG1pbnV0ZTogJ21pbnV0ZScsXG4gICAgICAgIE06ICdtb250aCcsXG4gICAgICAgIG1vbnRoczogJ21vbnRoJyxcbiAgICAgICAgbW9udGg6ICdtb250aCcsXG4gICAgICAgIFE6ICdxdWFydGVyJyxcbiAgICAgICAgcXVhcnRlcnM6ICdxdWFydGVyJyxcbiAgICAgICAgcXVhcnRlcjogJ3F1YXJ0ZXInLFxuICAgICAgICBzOiAnc2Vjb25kJyxcbiAgICAgICAgc2Vjb25kczogJ3NlY29uZCcsXG4gICAgICAgIHNlY29uZDogJ3NlY29uZCcsXG4gICAgICAgIGdnOiAnd2Vla1llYXInLFxuICAgICAgICB3ZWVreWVhcnM6ICd3ZWVrWWVhcicsXG4gICAgICAgIHdlZWt5ZWFyOiAnd2Vla1llYXInLFxuICAgICAgICBHRzogJ2lzb1dlZWtZZWFyJyxcbiAgICAgICAgaXNvd2Vla3llYXJzOiAnaXNvV2Vla1llYXInLFxuICAgICAgICBpc293ZWVreWVhcjogJ2lzb1dlZWtZZWFyJyxcbiAgICAgICAgdzogJ3dlZWsnLFxuICAgICAgICB3ZWVrczogJ3dlZWsnLFxuICAgICAgICB3ZWVrOiAnd2VlaycsXG4gICAgICAgIFc6ICdpc29XZWVrJyxcbiAgICAgICAgaXNvd2Vla3M6ICdpc29XZWVrJyxcbiAgICAgICAgaXNvd2VlazogJ2lzb1dlZWsnLFxuICAgICAgICB5OiAneWVhcicsXG4gICAgICAgIHllYXJzOiAneWVhcicsXG4gICAgICAgIHllYXI6ICd5ZWFyJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgdmFyIHByaW9yaXRpZXMgPSB7XG4gICAgICAgIGRhdGU6IDksXG4gICAgICAgIGRheTogMTEsXG4gICAgICAgIHdlZWtkYXk6IDExLFxuICAgICAgICBpc29XZWVrZGF5OiAxMSxcbiAgICAgICAgZGF5T2ZZZWFyOiA0LFxuICAgICAgICBob3VyOiAxMyxcbiAgICAgICAgbWlsbGlzZWNvbmQ6IDE2LFxuICAgICAgICBtaW51dGU6IDE0LFxuICAgICAgICBtb250aDogOCxcbiAgICAgICAgcXVhcnRlcjogNyxcbiAgICAgICAgc2Vjb25kOiAxNSxcbiAgICAgICAgd2Vla1llYXI6IDEsXG4gICAgICAgIGlzb1dlZWtZZWFyOiAxLFxuICAgICAgICB3ZWVrOiA1LFxuICAgICAgICBpc29XZWVrOiA1LFxuICAgICAgICB5ZWFyOiAxLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtdLFxuICAgICAgICAgICAgdTtcbiAgICAgICAgZm9yICh1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcCh1bml0c09iaiwgdSkpIHtcbiAgICAgICAgICAgICAgICB1bml0cy5wdXNoKHsgdW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVuaXRzO1xuICAgIH1cblxuICAgIHZhciBtYXRjaDEgPSAvXFxkLywgLy8gICAgICAgMCAtIDlcbiAgICAgICAgbWF0Y2gyID0gL1xcZFxcZC8sIC8vICAgICAgMDAgLSA5OVxuICAgICAgICBtYXRjaDMgPSAvXFxkezN9LywgLy8gICAgIDAwMCAtIDk5OVxuICAgICAgICBtYXRjaDQgPSAvXFxkezR9LywgLy8gICAgMDAwMCAtIDk5OTlcbiAgICAgICAgbWF0Y2g2ID0gL1srLV0/XFxkezZ9LywgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaDF0bzIgPSAvXFxkXFxkPy8sIC8vICAgICAgIDAgLSA5OVxuICAgICAgICBtYXRjaDN0bzQgPSAvXFxkXFxkXFxkXFxkPy8sIC8vICAgICA5OTkgLSA5OTk5XG4gICAgICAgIG1hdGNoNXRvNiA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LywgLy8gICA5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaDF0bzMgPSAvXFxkezEsM30vLCAvLyAgICAgICAwIC0gOTk5XG4gICAgICAgIG1hdGNoMXRvNCA9IC9cXGR7MSw0fS8sIC8vICAgICAgIDAgLSA5OTk5XG4gICAgICAgIG1hdGNoMXRvNiA9IC9bKy1dP1xcZHsxLDZ9LywgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaFVuc2lnbmVkID0gL1xcZCsvLCAvLyAgICAgICAwIC0gaW5mXG4gICAgICAgIG1hdGNoU2lnbmVkID0gL1srLV0/XFxkKy8sIC8vICAgIC1pbmYgLSBpbmZcbiAgICAgICAgbWF0Y2hPZmZzZXQgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2ksIC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgICAgICBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2ksIC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgICAgIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LywgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcbiAgICAgICAgLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4gICAgICAgIC8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbiAgICAgICAgbWF0Y2hXb3JkID1cbiAgICAgICAgICAgIC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pLFxuICAgICAgICBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvID0gL15bMS05XVxcZD8vLCAvLyAgICAgICAgIDEtOTlcbiAgICAgICAgbWF0Y2gxdG8ySGFzWmVybyA9IC9eKFsxLTldXFxkfFxcZCkvLCAvLyAgICAgICAgICAgMC05OVxuICAgICAgICByZWdleGVzO1xuXG4gICAgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbih0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleClcbiAgICAgICAgICAgID8gcmVnZXhcbiAgICAgICAgICAgIDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXggPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG4gICAgZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgICAgICByZXR1cm4gcmVnZXhFc2NhcGUoXG4gICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1xcXFwnLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICAgICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgICAgIHZhbHVlID0gMDtcblxuICAgICAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGZ1bmMgPSBjYWxsYmFjayxcbiAgICAgICAgICAgIHRva2VuTGVuO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbkxlbiA9IHRva2VuLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuTGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDAsXG4gICAgICAgIE1PTlRIID0gMSxcbiAgICAgICAgREFURSA9IDIsXG4gICAgICAgIEhPVVIgPSAzLFxuICAgICAgICBNSU5VVEUgPSA0LFxuICAgICAgICBTRUNPTkQgPSA1LFxuICAgICAgICBNSUxMSVNFQ09ORCA9IDYsXG4gICAgICAgIFdFRUsgPSA3LFxuICAgICAgICBXRUVLREFZID0gODtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgICAgICByZXR1cm4geSA8PSA5OTk5ID8gemVyb0ZpbGwoeSwgNCkgOiAnKycgKyB5O1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsIDRdLCAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCA1XSwgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWScsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPVxuICAgICAgICAgICAgaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG4gICAgfTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIoKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0KHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0KG1vbSwgdW5pdCkge1xuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZCA9IG1vbS5fZCxcbiAgICAgICAgICAgIGlzVVRDID0gbW9tLl9pc1VUQztcblxuICAgICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ01pbGxpc2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENNaWxsaXNlY29uZHMoKSA6IGQuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICAgICAgICBjYXNlICdTZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ1NlY29uZHMoKSA6IGQuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgY2FzZSAnTWludXRlcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENNaW51dGVzKCkgOiBkLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgIGNhc2UgJ0hvdXJzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0hvdXJzKCkgOiBkLmdldEhvdXJzKCk7XG4gICAgICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0RhdGUoKSA6IGQuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgY2FzZSAnRGF5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0RheSgpIDogZC5nZXREYXkoKTtcbiAgICAgICAgICAgIGNhc2UgJ01vbnRoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01vbnRoKCkgOiBkLmdldE1vbnRoKCk7XG4gICAgICAgICAgICBjYXNlICdGdWxsWWVhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENGdWxsWWVhcigpIDogZC5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTmFOOyAvLyBKdXN0IGluIGNhc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCQxKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGQsIGlzVVRDLCB5ZWFyLCBtb250aCwgZGF0ZTtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkID0gbW9tLl9kO1xuICAgICAgICBpc1VUQyA9IG1vbS5faXNVVEM7XG5cbiAgICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgICAgICBjYXNlICdNaWxsaXNlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQ1xuICAgICAgICAgICAgICAgICAgICA/IGQuc2V0VVRDTWlsbGlzZWNvbmRzKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IGQuc2V0TWlsbGlzZWNvbmRzKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdTZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ1NlY29uZHModmFsdWUpIDogZC5zZXRTZWNvbmRzKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdNaW51dGVzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ01pbnV0ZXModmFsdWUpIDogZC5zZXRNaW51dGVzKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdIb3Vycyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENIb3Vycyh2YWx1ZSkgOiBkLnNldEhvdXJzKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ0RhdGUodmFsdWUpIDogZC5zZXREYXRlKHZhbHVlKSk7XG4gICAgICAgICAgICAvLyBjYXNlICdEYXknOiAvLyBOb3QgcmVhbFxuICAgICAgICAgICAgLy8gICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENEYXkodmFsdWUpIDogZC5zZXREYXkodmFsdWUpKTtcbiAgICAgICAgICAgIC8vIGNhc2UgJ01vbnRoJzogLy8gTm90IHVzZWQgYmVjYXVzZSB3ZSBuZWVkIHRvIHBhc3MgdHdvIHZhcmlhYmxlc1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDTW9udGgodmFsdWUpIDogZC5zZXRNb250aCh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnRnVsbFllYXInOlxuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBTZWUgYmVsb3cgLi4uXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gSnVzdCBpbiBjYXNlXG4gICAgICAgIH1cblxuICAgICAgICB5ZWFyID0gdmFsdWU7XG4gICAgICAgIG1vbnRoID0gbW9tLm1vbnRoKCk7XG4gICAgICAgIGRhdGUgPSBtb20uZGF0ZSgpO1xuICAgICAgICBkYXRlID0gZGF0ZSA9PT0gMjkgJiYgbW9udGggPT09IDEgJiYgIWlzTGVhcFllYXIoeWVhcikgPyAyOCA6IGRhdGU7XG4gICAgICAgIHZvaWQgKGlzVVRDXG4gICAgICAgICAgICA/IGQuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgsIGRhdGUpXG4gICAgICAgICAgICA6IGQuc2V0RnVsbFllYXIoeWVhciwgbW9udGgsIGRhdGUpKTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdHZXQodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RyaW5nU2V0KHVuaXRzLCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHByaW9yaXRpemVkTGVuID0gcHJpb3JpdGl6ZWQubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHByaW9yaXRpemVkTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb2QobiwgeCkge1xuICAgICAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4T2Y7XG5cbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgLy8gSSBrbm93XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgICAgIHJldHVybiBtb2RNb250aCA9PT0gMVxuICAgICAgICAgICAgPyBpc0xlYXBZZWFyKHllYXIpXG4gICAgICAgICAgICAgICAgPyAyOVxuICAgICAgICAgICAgICAgIDogMjhcbiAgICAgICAgICAgIDogMzEgLSAoKG1vZE1vbnRoICUgNykgJSAyKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ00nLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgICAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPVxuICAgICAgICAgICAgJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID1cbiAgICAgICAgICAgICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LyxcbiAgICAgICAgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyhtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV1cbiAgICAgICAgICAgIDogdGhpcy5fbW9udGhzW1xuICAgICAgICAgICAgICAgICAgKHRoaXMuX21vbnRocy5pc0Zvcm1hdCB8fCBNT05USFNfSU5fRk9STUFUKS50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KVxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV1cbiAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbXG4gICAgICAgICAgICAgICAgICBNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF1bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgaWksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAgICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdNTU1NJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdNTU0nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc2V0TW9udGgobW9tLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbW9udGggPSB2YWx1ZSxcbiAgICAgICAgICAgIGRhdGUgPSBtb20uZGF0ZSgpO1xuXG4gICAgICAgIGRhdGUgPSBkYXRlIDwgMjkgPyBkYXRlIDogTWF0aC5taW4oZGF0ZSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgbW9udGgpKTtcbiAgICAgICAgdm9pZCAobW9tLl9pc1VUQ1xuICAgICAgICAgICAgPyBtb20uX2Quc2V0VVRDTW9udGgobW9udGgsIGRhdGUpXG4gICAgICAgICAgICA6IG1vbS5fZC5zZXRNb250aChtb250aCwgZGF0ZSkpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBzaG9ydFAsXG4gICAgICAgICAgICBsb25nUDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBzaG9ydFAgPSByZWdleEVzY2FwZSh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQID0gcmVnZXhFc2NhcGUodGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydFApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdQKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ1ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydFApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG5cbiAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSArIDQwMCwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUoeSkge1xuICAgICAgICB2YXIgZGF0ZSwgYXJncztcbiAgICAgICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGFyZ3NbMF0gPSB5ICsgNDAwO1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG4gICAgZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICAgICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgcmVzWWVhcixcbiAgICAgICAgICAgIHJlc0RheU9mWWVhcjtcblxuICAgICAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhcixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgICAgIHJlc1dlZWssXG4gICAgICAgICAgICByZXNZZWFyO1xuXG4gICAgICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigndycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSxcbiAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vlayhtb20pIHtcbiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWsoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayhpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlaztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignZCcsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignRScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuICAgIGZ1bmN0aW9uIHNoaWZ0V2Vla2RheXMod3MsIG4pIHtcbiAgICAgICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9XG4gICAgICAgICAgICAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyhtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0gaXNBcnJheSh0aGlzLl93ZWVrZGF5cylcbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNcbiAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNbXG4gICAgICAgICAgICAgICAgICBtICYmIG0gIT09IHRydWUgJiYgdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF07XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXMod2Vla2RheXMsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgID8gd2Vla2RheXNbbS5kYXkoKV1cbiAgICAgICAgICAgICAgOiB3ZWVrZGF5cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0KG0pIHtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c1Nob3J0LCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV1cbiAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluKG0pIHtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c01pbiwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXVxuICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzTWluO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgaWksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICAgICAnXicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzKG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArXG4gICAgICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXkgPSBnZXQodGhpcywgJ0RheScpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUGllY2VzID0gW10sXG4gICAgICAgICAgICBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBtaW5wLFxuICAgICAgICAgICAgc2hvcnRwLFxuICAgICAgICAgICAgbG9uZ3A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgbWlucCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykpO1xuICAgICAgICAgICAgc2hvcnRwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5cyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgIGhGb3JtYXQuYXBwbHkodGhpcykgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgdGhpcy5ob3VycygpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbShcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzKCksXG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzKCksXG4gICAgICAgICAgICAgICAgbG93ZXJjYXNlXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXJpZGllbSgnYScsIHRydWUpO1xuICAgIG1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJIYXNaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdrJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNCxcbiAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaSxcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgICAgICAvLyB0aGlzIHJ1bGUuXG4gICAgICAgIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0oaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgICAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgICAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgICAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSxcbiAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge30sXG4gICAgICAgIGxvY2FsZUZhbWlsaWVzID0ge30sXG4gICAgICAgIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIGNvbW1vblByZWZpeChhcnIxLCBhcnIyKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbWlubCA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtaW5sOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbmw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4gICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbiAgICAvLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG4gICAgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgbmV4dCAmJlxuICAgICAgICAgICAgICAgICAgICBuZXh0Lmxlbmd0aCA+PSBqICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vblByZWZpeChzcGxpdCwgbmV4dCkgPj0gaiAtIDFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbGVOYW1lU2FuZShuYW1lKSB7XG4gICAgICAgIC8vIFByZXZlbnQgbmFtZXMgdGhhdCBsb29rIGxpa2UgZmlsZXN5c3RlbSBwYXRocywgaS5lIGNvbnRhaW4gJy8nIG9yICdcXCdcbiAgICAgICAgLy8gRW5zdXJlIG5hbWUgaXMgYXZhaWxhYmxlIGFuZCBmdW5jdGlvbiByZXR1cm5zIGJvb2xlYW5cbiAgICAgICAgcmV0dXJuICEhKG5hbWUgJiYgbmFtZS5tYXRjaCgnXlteL1xcXFxcXFxcXSokJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbCxcbiAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlO1xuICAgICAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBtb2R1bGUgJiZcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzICYmXG4gICAgICAgICAgICBpc0xvY2FsZU5hbWVTYW5lKG5hbWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUgPSByZXF1aXJlO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFyayBhcyBub3QgZm91bmQgdG8gYXZvaWQgcmVwZWF0aW5nIGV4cGVuc2l2ZSBmaWxlIHJlcXVpcmUgY2FsbCBjYXVzaW5nIGhpZ2ggQ1BVXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0cnlpbmcgdG8gZmluZCBlbi1VUywgZW5fVVMsIGVuLXVzIGZvciBldmVyeSBmb3JtYXQgY2FsbFxuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBudWxsOyAvLyBudWxsIG1lYW5zIG5vdCBmb3VuZFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBmdW5jdGlvbiBnZXRTZXRHbG9iYWxMb2NhbGUoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgICAgICAvL3dhcm4gdXNlciBpZiBhcmd1bWVudHMgYXJlIHBhc3NlZCBidXQgdGhlIGxvY2FsZSBjb3VsZCBub3QgYmUgc2V0XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICdMb2NhbGUgJyArIGtleSArICcgbm90IGZvdW5kLiBEaWQgeW91IGZvcmdldCB0byBsb2FkIGl0PydcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAgICAgJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsXG4gICAgICAgICAgICAgICAgdG1wTG9jYWxlLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwgJiYgbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBjaGlsZCBsb2NhbGUgaW4tcGxhY2UgdG8gYXZvaWQgbWVtb3J5LWxlYWtzXG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXS5zZXQobWVyZ2VDb25maWdzKGxvY2FsZXNbbmFtZV0uX2NvbmZpZywgY29uZmlnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE1FUkdFXG4gICAgICAgICAgICAgICAgdG1wTG9jYWxlID0gbG9hZExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRtcExvY2FsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZUxvY2FsZSBpcyBjYWxsZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZVxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgYWJiciBzbyBpdCB3aWxsIGhhdmUgYSBuYW1lIChnZXR0ZXJzIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAvLyB1bmRlZmluZWQgb3RoZXJ3aXNlKS5cbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwYXNzIG51bGwgZm9yIGNvbmZpZyB0byB1bnVwZGF0ZSwgdXNlZnVsIGZvciB0ZXN0c1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGdldFNldEdsb2JhbExvY2FsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuICAgIGZ1bmN0aW9uIGdldExvY2FsZShrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiBrZXlzKGxvY2FsZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cobSkge1xuICAgICAgICB2YXIgb3ZlcmZsb3csXG4gICAgICAgICAgICBhID0gbS5fYTtcblxuICAgICAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgYVtNT05USF0gPCAwIHx8IGFbTU9OVEhdID4gMTFcbiAgICAgICAgICAgICAgICAgICAgPyBNT05USFxuICAgICAgICAgICAgICAgICAgICA6IGFbREFURV0gPCAxIHx8IGFbREFURV0gPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSlcbiAgICAgICAgICAgICAgICAgICAgICA/IERBVEVcbiAgICAgICAgICAgICAgICAgICAgICA6IGFbSE9VUl0gPCAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFbSE9VUl0gPiAyNCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhW01JTlVURV0gIT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW1NFQ09ORF0gIT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSAhPT0gMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IEhPVVJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYVtNSU5VVEVdIDwgMCB8fCBhW01JTlVURV0gPiA1OVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IE1JTlVURVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFbU0VDT05EXSA8IDAgfHwgYVtTRUNPTkRdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFNFQ09ORFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IE1JTExJU0VDT05EXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IC0xO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJlxuICAgICAgICAgICAgICAgIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIGlzbyA4NjAxIHJlZ2V4XG4gICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG4gICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPVxuICAgICAgICAgICAgL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoWystXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC8sXG4gICAgICAgIGJhc2ljSXNvUmVnZXggPVxuICAgICAgICAgICAgL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZHwpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LyxcbiAgICAgICAgaXNvRGF0ZXMgPSBbXG4gICAgICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAgICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICAgICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L10sXG4gICAgICAgICAgICBbJ1lZWVlNTScsIC9cXGR7Nn0vLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVknLCAvXFxkezR9LywgZmFsc2VdLFxuICAgICAgICBdLFxuICAgICAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgICAgIGlzb1RpbWVzID0gW1xuICAgICAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICAgICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEgnLCAvXFxkXFxkL10sXG4gICAgICAgIF0sXG4gICAgICAgIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoLT9cXGQrKS9pLFxuICAgICAgICAvLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG4gICAgICAgIHJmYzI4MjIgPVxuICAgICAgICAgICAgL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLyxcbiAgICAgICAgb2JzT2Zmc2V0cyA9IHtcbiAgICAgICAgICAgIFVUOiAwLFxuICAgICAgICAgICAgR01UOiAwLFxuICAgICAgICAgICAgRURUOiAtNCAqIDYwLFxuICAgICAgICAgICAgRVNUOiAtNSAqIDYwLFxuICAgICAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICAgICAgQ1NUOiAtNiAqIDYwLFxuICAgICAgICAgICAgTURUOiAtNiAqIDYwLFxuICAgICAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICAgICAgUERUOiAtNyAqIDYwLFxuICAgICAgICAgICAgUFNUOiAtOCAqIDYwLFxuICAgICAgICB9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICAgICAgYWxsb3dUaW1lLFxuICAgICAgICAgICAgZGF0ZUZvcm1hdCxcbiAgICAgICAgICAgIHRpbWVGb3JtYXQsXG4gICAgICAgICAgICB0ekZvcm1hdCxcbiAgICAgICAgICAgIGlzb0RhdGVzTGVuID0gaXNvRGF0ZXMubGVuZ3RoLFxuICAgICAgICAgICAgaXNvVGltZXNMZW4gPSBpc29UaW1lcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzTGVuOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzTGVuOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgeWVhclN0cixcbiAgICAgICAgbW9udGhTdHIsXG4gICAgICAgIGRheVN0cixcbiAgICAgICAgaG91clN0cixcbiAgICAgICAgbWludXRlU3RyLFxuICAgICAgICBzZWNvbmRTdHJcbiAgICApIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICAgICAgcGFyc2VJbnQoZGF5U3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKSxcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWVhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwoW14oKV0qXFwpfFtcXG5cXHRdL2csICcgJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL15cXHNcXHMqLywgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVuZGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMF0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzFdLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsyXVxuICAgICAgICAgICAgICAgICkuZ2V0RGF5KCk7XG4gICAgICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgICAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICAgICAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyB0aGUgb25seSBhbGxvd2VkIG1pbGl0YXJ5IHR6IGlzIFpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCksXG4gICAgICAgICAgICAgICAgbSA9IGhtICUgMTAwLFxuICAgICAgICAgICAgICAgIGggPSAoaG0gLSBtKSAvIDEwMDtcbiAgICAgICAgICAgIHJldHVybiBoICogNjAgKyBtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2ggPSByZmMyODIyLmV4ZWMocHJlcHJvY2Vzc1JGQzI4MjIoY29uZmlnLl9pKSksXG4gICAgICAgICAgICBwYXJzZWRBcnJheTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBwYXJzZWRBcnJheSA9IGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoXG4gICAgICAgICAgICAgICAgbWF0Y2hbNF0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbM10sXG4gICAgICAgICAgICAgICAgbWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbNV0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbNl0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbN11cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgICAgICBjb25maWcuX2QgPSBjcmVhdGVVVENEYXRlLmFwcGx5KG51bGwsIGNvbmZpZy5fYSk7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIDEpIEFTUC5ORVQsIDIpIElTTywgMykgUkZDIDI4MjIgZm9ybWF0cywgb3IgNCkgb3B0aW9uYWwgZmFsbGJhY2sgaWYgcGFyc2luZyBpc24ndCBzdHJpY3RcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSk7XG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9zdHJpY3QpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgICAgICAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAgICAgICAgICdkaXNjb3VyYWdlZC4gUGxlYXNlIHJlZmVyIHRvIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbiAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbiAgICAvLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuICAgIC8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuICAgIC8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgaW5wdXQgPSBbXSxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlLFxuICAgICAgICAgICAgZXhwZWN0ZWRXZWVrZGF5LFxuICAgICAgICAgICAgeWVhclRvVXNlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiBjb25maWcuX2FbREFURV0gPT0gbnVsbCAmJiBjb25maWcuX2FbTU9OVEhdID09IG51bGwpIHtcbiAgICAgICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB0aGUgZGF5IG9mIHRoZSB5ZWFyIGlzIHNldCwgZmlndXJlIG91dCB3aGF0IGl0IGlzXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8XG4gICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgICAgIC8vICogaWYgbm8geWVhciwgbW9udGgsIGRheSBvZiBtb250aCBhcmUgZ2l2ZW4sIGRlZmF1bHQgdG8gdG9kYXlcbiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAgICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAgICAgLy8gKiBpZiB5ZWFyIGlzIGdpdmVuLCBkb24ndCBkZWZhdWx0IGFueXRoaW5nXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICAgICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID1cbiAgICAgICAgICAgICAgICBjb25maWcuX2FbaV0gPT0gbnVsbCA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBpbnB1dFxuICAgICAgICApO1xuICAgICAgICBleHBlY3RlZFdlZWtkYXkgPSBjb25maWcuX3VzZVVUQ1xuICAgICAgICAgICAgPyBjb25maWcuX2QuZ2V0VVRDRGF5KClcbiAgICAgICAgICAgIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgICAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICAgICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX3cgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3csIGN1cldlZWs7XG5cbiAgICAgICAgdyA9IGNvbmZpZy5fdztcbiAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG93ID0gMTtcbiAgICAgICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyhcbiAgICAgICAgICAgICAgICB3LkdHLFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSxcbiAgICAgICAgICAgICAgICB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICAgICAgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuICAgIGhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuICAgIGhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2EgPSBbXTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwYXJzZWRJbnB1dCxcbiAgICAgICAgICAgIHRva2VucyxcbiAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgc2tpcHBlZCxcbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMCxcbiAgICAgICAgICAgIGVyYSxcbiAgICAgICAgICAgIHRva2VuTGVuO1xuXG4gICAgICAgIHRva2VucyA9XG4gICAgICAgICAgICBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG4gICAgICAgIHRva2VuTGVuID0gdG9rZW5zLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuTGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHxcbiAgICAgICAgICAgICAgICBbXSlbMF07XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKFxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGhcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPVxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoXG4gICAgICAgICAgICBjb25maWcuX2xvY2FsZSxcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSxcbiAgICAgICAgICAgIGNvbmZpZy5fbWVyaWRpZW1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBoYW5kbGUgZXJhXG4gICAgICAgIGVyYSA9IGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYTtcbiAgICAgICAgaWYgKGVyYSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gY29uZmlnLl9sb2NhbGUuZXJhc0NvbnZlcnRZZWFyKGVyYSwgY29uZmlnLl9hW1lFQVJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW1GaXhXcmFwKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG4gICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUsXG4gICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kLFxuICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ2ZMZW4gPSBjb25maWcuX2YubGVuZ3RoO1xuXG4gICAgICAgIGlmIChjb25maWdmTGVuID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnZkxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoIWJlc3RGb3JtYXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0IHx8XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRGb3JtYXRGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpLFxuICAgICAgICAgICAgZGF5T3JEYXRlID0gaS5kYXkgPT09IHVuZGVmaW5lZCA/IGkuZGF0ZSA6IGkuZGF5O1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoXG4gICAgICAgICAgICBbaS55ZWFyLCBpLm1vbnRoLCBkYXlPckRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHsgbnVsbElucHV0OiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IHRydWUgfHwgZm9ybWF0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWwoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArbmV3IERhdGUoKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yZGVyaW5nID0gW1xuICAgICAgICAneWVhcicsXG4gICAgICAgICdxdWFydGVyJyxcbiAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgJ3dlZWsnLFxuICAgICAgICAnZGF5JyxcbiAgICAgICAgJ2hvdXInLFxuICAgICAgICAnbWludXRlJyxcbiAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgICAgIHZhciBrZXksXG4gICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IGZhbHNlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG9yZGVyTGVuID0gb3JkZXJpbmcubGVuZ3RoO1xuICAgICAgICBmb3IgKGtleSBpbiBtKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcChtLCBrZXkpICYmXG4gICAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9yZGVyTGVuOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgICAgIGlmICh1bml0SGFzRGVjaW1hbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9ubHkgYWxsb3cgbm9uLWludGVnZXJzIGZvciBzbWFsbGVzdCB1bml0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCBub3JtYWxpemVkSW5wdXQuaXNvV2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9XG4gICAgICAgICAgICArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAgICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICAgICAgdGhpcy5fZGF5cyA9ICtkYXlzICsgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRvIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICsgcXVhcnRlcnMgKiAzICsgeWVhcnMgKiAxMjtcblxuICAgICAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICAgICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICAgICAgdGhpcy5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic1JvdW5kKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZGlmZnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIG9mZnNldCh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKSxcbiAgICAgICAgICAgICAgICBzaWduID0gJysnO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHNpZ24gK1xuICAgICAgICAgICAgICAgIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgK1xuICAgICAgICAgICAgICAgIHNlcGFyYXRvciArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwofn5vZmZzZXQgJSA2MCwgMilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCgnWicsICc6Jyk7XG4gICAgb2Zmc2V0KCdaWicsICcnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKSxcbiAgICAgICAgICAgIGNodW5rLFxuICAgICAgICAgICAgcGFydHMsXG4gICAgICAgICAgICBtaW51dGVzO1xuXG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNodW5rID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgICAgICBwYXJ0cyA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgICAgIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgICAgIHJldHVybiBtaW51dGVzID09PSAwID8gMCA6IHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgICAgIHZhciByZXMsIGRpZmY7XG4gICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICBkaWZmID1cbiAgICAgICAgICAgICAgICAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dClcbiAgICAgICAgICAgICAgICAgICAgPyBpbnB1dC52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldChtKSB7XG4gICAgICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MVxuICAgICAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIGhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4gICAgLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbiAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4gICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuICAgIC8vXG4gICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4gICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4gICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG4gICAgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBsb2NhbEFkanVzdDtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZShpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwoa2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgICAgIGlmICh0Wm9uZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDApLnV0Y09mZnNldCgpIHx8XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnV0Y09mZnNldCgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkKCkge1xuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9LFxuICAgICAgICAgICAgb3RoZXI7XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIG90aGVyID0gYy5faXNVVEMgPyBjcmVhdGVVVEMoYy5fYSkgOiBjcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9XG4gICAgICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiYgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0YygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG4gICAgdmFyIGFzcE5ldFJlZ2V4ID0gL14oLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKTooXFxkKykoPzo6KFxcZCspKFxcLlxcZCopPyk/JC8sXG4gICAgICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbiAgICAgICAgLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxuICAgICAgICBpc29SZWdleCA9XG4gICAgICAgICAgICAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIGQ6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE06IGlucHV0Ll9tb250aHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSB8fCAhaXNOYU4oK2lucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gK2lucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSAraW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgZDogdG9JbnQobWF0Y2hbREFURV0pICogc2lnbixcbiAgICAgICAgICAgICAgICBoOiB0b0ludChtYXRjaFtIT1VSXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIG06IHRvSW50KG1hdGNoW01JTlVURV0pICogc2lnbixcbiAgICAgICAgICAgICAgICBzOiB0b0ludChtYXRjaFtTRUNPTkRdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXM6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24sIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeTogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE06IHBhcnNlSXNvKG1hdGNoWzNdLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3OiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGg6IHBhcnNlSXNvKG1hdGNoWzZdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgczogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShcbiAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi50bylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfaXNWYWxpZCcpKSB7XG4gICAgICAgICAgICByZXQuX2lzVmFsaWQgPSBpbnB1dC5faXNWYWxpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG4gICAgY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge307XG5cbiAgICAgICAgcmVzLm1vbnRocyA9XG4gICAgICAgICAgICBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICsgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gK2Jhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwIH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAnbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsO1xuICAgICAgICAgICAgICAgIHZhbCA9IHBlcmlvZDtcbiAgICAgICAgICAgICAgICBwZXJpb2QgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0KG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGQgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyksXG4gICAgICAgIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgaW5wdXQgaW5zdGFuY2VvZiBTdHJpbmc7XG4gICAgfVxuXG4gICAgLy8gdHlwZSBNb21lbnRJbnB1dCA9IE1vbWVudCB8IERhdGUgfCBzdHJpbmcgfCBudW1iZXIgfCAobnVtYmVyIHwgc3RyaW5nKVtdIHwgTW9tZW50SW5wdXRPYmplY3QgfCB2b2lkOyAvLyBudWxsIHwgdW5kZWZpbmVkXG4gICAgZnVuY3Rpb24gaXNNb21lbnRJbnB1dChpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaXNNb21lbnQoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc0RhdGUoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc1N0cmluZyhpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTnVtYmVyKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB8fFxuICAgICAgICAgICAgaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkgfHxcbiAgICAgICAgICAgIGlucHV0ID09PSBudWxsIHx8XG4gICAgICAgICAgICBpbnB1dCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkge1xuICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAgICAgJ3llYXJzJyxcbiAgICAgICAgICAgICAgICAneWVhcicsXG4gICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICdtb250aHMnLFxuICAgICAgICAgICAgICAgICdtb250aCcsXG4gICAgICAgICAgICAgICAgJ00nLFxuICAgICAgICAgICAgICAgICdkYXlzJyxcbiAgICAgICAgICAgICAgICAnZGF5JyxcbiAgICAgICAgICAgICAgICAnZCcsXG4gICAgICAgICAgICAgICAgJ2RhdGVzJyxcbiAgICAgICAgICAgICAgICAnZGF0ZScsXG4gICAgICAgICAgICAgICAgJ0QnLFxuICAgICAgICAgICAgICAgICdob3VycycsXG4gICAgICAgICAgICAgICAgJ2hvdXInLFxuICAgICAgICAgICAgICAgICdoJyxcbiAgICAgICAgICAgICAgICAnbWludXRlcycsXG4gICAgICAgICAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICAgICAgICAgJ20nLFxuICAgICAgICAgICAgICAgICdzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgICAgICAgICAncycsXG4gICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgICAgICAgICAnbXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAgIHByb3BlcnR5TGVuID0gcHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnR5TGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IHByb3BlcnR5VGVzdCB8fCBoYXNPd25Qcm9wKGlucHV0LCBwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB7XG4gICAgICAgIHZhciBhcnJheVRlc3QgPSBpc0FycmF5KGlucHV0KSxcbiAgICAgICAgICAgIGRhdGFUeXBlVGVzdCA9IGZhbHNlO1xuICAgICAgICBpZiAoYXJyYXlUZXN0KSB7XG4gICAgICAgICAgICBkYXRhVHlwZVRlc3QgPVxuICAgICAgICAgICAgICAgIGlucHV0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWlzTnVtYmVyKGl0ZW0pICYmIGlzU3RyaW5nKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5VGVzdCAmJiBkYXRhVHlwZVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNDYWxlbmRhclNwZWMoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICdzYW1lRGF5JyxcbiAgICAgICAgICAgICAgICAnbmV4dERheScsXG4gICAgICAgICAgICAgICAgJ2xhc3REYXknLFxuICAgICAgICAgICAgICAgICduZXh0V2VlaycsXG4gICAgICAgICAgICAgICAgJ2xhc3RXZWVrJyxcbiAgICAgICAgICAgICAgICAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcm9wZXJ0eTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkaWZmIDwgLTZcbiAgICAgICAgICAgID8gJ3NhbWVFbHNlJ1xuICAgICAgICAgICAgOiBkaWZmIDwgLTFcbiAgICAgICAgICAgICAgPyAnbGFzdFdlZWsnXG4gICAgICAgICAgICAgIDogZGlmZiA8IDBcbiAgICAgICAgICAgICAgICA/ICdsYXN0RGF5J1xuICAgICAgICAgICAgICAgIDogZGlmZiA8IDFcbiAgICAgICAgICAgICAgICAgID8gJ3NhbWVEYXknXG4gICAgICAgICAgICAgICAgICA6IGRpZmYgPCAyXG4gICAgICAgICAgICAgICAgICAgID8gJ25leHREYXknXG4gICAgICAgICAgICAgICAgICAgIDogZGlmZiA8IDdcbiAgICAgICAgICAgICAgICAgICAgICA/ICduZXh0V2VlaydcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzYW1lRWxzZSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIkMSh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIHNpbmdsZSBwYXJhbWV0ZXIsIGZvcm1hdHMgb25seSBvdmVybG9hZCB0byB0aGUgY2FsZW5kYXIgZnVuY3Rpb25cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01vbWVudElucHV0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2FsZW5kYXJTcGVjKGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJyxcbiAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgZm9ybWF0cyAmJlxuICAgICAgICAgICAgICAgIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSlcbiAgICAgICAgICAgICAgICAgICAgPyBmb3JtYXRzW2Zvcm1hdF0uY2FsbCh0aGlzLCBub3cpXG4gICAgICAgICAgICAgICAgICAgIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQoXG4gICAgICAgICAgICBvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JldHdlZW4oZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgICAgICB2YXIgbG9jYWxGcm9tID0gaXNNb21lbnQoZnJvbSkgPyBmcm9tIDogY3JlYXRlTG9jYWwoZnJvbSksXG4gICAgICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8pID8gdG8gOiBjcmVhdGVMb2NhbCh0byk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsRnJvbS5pc1ZhbGlkKCkgJiYgbG9jYWxUby5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzBdID09PSAnKCdcbiAgICAgICAgICAgICAgICA/IHRoaXMuaXNBZnRlcihsb2NhbEZyb20sIHVuaXRzKVxuICAgICAgICAgICAgICAgIDogIXRoaXMuaXNCZWZvcmUobG9jYWxGcm9tLCB1bml0cykpICYmXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5pc0JlZm9yZShsb2NhbFRvLCB1bml0cylcbiAgICAgICAgICAgICAgICA6ICF0aGlzLmlzQWZ0ZXIobG9jYWxUbywgdW5pdHMpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmXG4gICAgICAgICAgICAgICAgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZihpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgdmFyIHRoYXQsIHpvbmVEZWx0YSwgb3V0cHV0O1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzO1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwXG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmKGEsIGIpIHtcbiAgICAgICAgaWYgKGEuZGF0ZSgpIDwgYi5kYXRlKCkpIHtcbiAgICAgICAgICAgIC8vIGVuZC1vZi1tb250aCBjYWxjdWxhdGlvbnMgd29yayBjb3JyZWN0IHdoZW4gdGhlIHN0YXJ0IG1vbnRoIGhhcyBtb3JlXG4gICAgICAgICAgICAvLyBkYXlzIHRoYW4gdGhlIGVuZCBtb250aC5cbiAgICAgICAgICAgIHJldHVybiAtbW9udGhEaWZmKGIsIGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9IChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICAgIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG4gICAgfVxuXG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZSxcbiAgICAgICAgICAgIG0gPSB1dGMgPyB0aGlzLmNsb25lKCkudXRjKCkgOiB0aGlzO1xuICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgICAgICBtLFxuICAgICAgICAgICAgICAgIHV0Y1xuICAgICAgICAgICAgICAgICAgICA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nXG4gICAgICAgICAgICAgICAgICAgIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKVxuICAgICAgICAgICAgICAgICAgICAudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgbSxcbiAgICAgICAgICAgIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICAgICAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVuYyA9ICdtb21lbnQnLFxuICAgICAgICAgICAgem9uZSA9ICcnLFxuICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgeWVhcixcbiAgICAgICAgICAgIGRhdGV0aW1lLFxuICAgICAgICAgICAgc3VmZml4O1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgICAgIHpvbmUgPSAnWic7XG4gICAgICAgIH1cbiAgICAgICAgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICAgICAgeWVhciA9IDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgICAgICBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgICAgICBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKClcbiAgICAgICAgICAgICAgICA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGNcbiAgICAgICAgICAgICAgICA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgdG86IHRoaXMsIGZyb206IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbU5vdyh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8odGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHwgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IGZyb206IHRoaXMsIHRvOiB0aW1lIH0pXG4gICAgICAgICAgICAgICAgLmxvY2FsZSh0aGlzLmxvY2FsZSgpKVxuICAgICAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICB2YXIgTVNfUEVSX1NFQ09ORCA9IDEwMDAsXG4gICAgICAgIE1TX1BFUl9NSU5VVEUgPSA2MCAqIE1TX1BFUl9TRUNPTkQsXG4gICAgICAgIE1TX1BFUl9IT1VSID0gNjAgKiBNU19QRVJfTUlOVVRFLFxuICAgICAgICBNU19QRVJfNDAwX1lFQVJTID0gKDM2NSAqIDQwMCArIDk3KSAqIDI0ICogTVNfUEVSX0hPVVI7XG5cbiAgICAvLyBhY3R1YWwgbW9kdWxvIC0gaGFuZGxlcyBuZWdhdGl2ZSBudW1iZXJzIChmb3IgZGF0ZXMgYmVmb3JlIDE5NzApOlxuICAgIGZ1bmN0aW9uIG1vZCQxKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICAgIHJldHVybiAoKGRpdmlkZW5kICUgZGl2aXNvcikgKyBkaXZpc29yKSAlIGRpdmlzb3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHksIG0sIGQpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHV0Y1N0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gRGF0ZS5VVEMgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSwgbSwgZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMyksXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMShcbiAgICAgICAgICAgICAgICAgICAgdGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZE9mKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSArIDEsIDAsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpICsgMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkgKyA3XG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgN1xuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgKyAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPVxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUiAtXG4gICAgICAgICAgICAgICAgICAgIG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICAgICApIC1cbiAgICAgICAgICAgICAgICAgICAgMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbS55ZWFyKCksXG4gICAgICAgICAgICBtLm1vbnRoKCksXG4gICAgICAgICAgICBtLmRhdGUoKSxcbiAgICAgICAgICAgIG0uaG91cigpLFxuICAgICAgICAgICAgbS5taW51dGUoKSxcbiAgICAgICAgICAgIG0uc2Vjb25kKCksXG4gICAgICAgICAgICBtLm1pbGxpc2Vjb25kKCksXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDIoKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdOJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OJywgMCwgMCwgJ2VyYU5hbWUnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OTk4nLCAwLCAwLCAnZXJhTmFycm93Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneScsIDFdLCAneW8nLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eScsIDJdLCAwLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXknLCAzXSwgMCwgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXl5eScsIDRdLCAwLCAnZXJhWWVhcicpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk4nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OTicsIG1hdGNoRXJhTmFtZSk7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OTk4nLCBtYXRjaEVyYU5hcnJvdyk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFxuICAgICAgICBbJ04nLCAnTk4nLCAnTk5OJywgJ05OTk4nLCAnTk5OTk4nXSxcbiAgICAgICAgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgdmFyIGVyYSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgICAgIGlmIChlcmEpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmEgPSBlcmE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRFcmEgPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBhZGRSZWdleFRva2VuKCd5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eXl5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneW8nLCBtYXRjaEVyYVllYXJPcmRpbmFsKTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWyd5JywgJ3l5JywgJ3l5eScsICd5eXl5J10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWyd5byddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgaWYgKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KSB7XG4gICAgICAgICAgICBtYXRjaCA9IGlucHV0Lm1hdGNoKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX2xvY2FsZS5lcmFZZWFyT3JkaW5hbFBhcnNlKSB7XG4gICAgICAgICAgICBhcnJheVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UoaW5wdXQsIG1hdGNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhcyhtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZGF0ZSxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLl9lcmFzIHx8IGdldExvY2FsZSgnZW4nKS5fZXJhcztcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS5zaW5jZSkuc3RhcnRPZignZGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0uc2luY2UgPSBkYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gK0luZmluaXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBob29rcyhlcmFzW2ldLnVudGlsKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0udW50aWwgPSBkYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVyYXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhc1BhcnNlKGVyYU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhYmJyLFxuICAgICAgICAgICAgbmFycm93O1xuICAgICAgICBlcmFOYW1lID0gZXJhTmFtZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgbmFtZSA9IGVyYXNbaV0ubmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgYWJiciA9IGVyYXNbaV0uYWJici50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgbmFycm93ID0gZXJhc1tpXS5uYXJyb3cudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJiciA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hcnJvdyA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChbbmFtZSwgYWJiciwgbmFycm93XS5pbmRleE9mKGVyYU5hbWUpID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXNDb252ZXJ0WWVhcihlcmEsIHllYXIpIHtcbiAgICAgICAgdmFyIGRpciA9IGVyYS5zaW5jZSA8PSBlcmEudW50aWwgPyArMSA6IC0xO1xuICAgICAgICBpZiAoeWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaG9va3MoZXJhLnNpbmNlKS55ZWFyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaG9va3MoZXJhLnNpbmNlKS55ZWFyKCkgKyAoeWVhciAtIGVyYS5vZmZzZXQpICogZGlyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhTmFtZSgpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFOYXJyb3coKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYUFiYnIoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0uYWJicjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhWWVhcigpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZGlyLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBkaXIgPSBlcmFzW2ldLnNpbmNlIDw9IGVyYXNbaV0udW50aWwgPyArMSA6IC0xO1xuXG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB8fFxuICAgICAgICAgICAgICAgIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnllYXIoKSAtIGhvb2tzKGVyYXNbaV0uc2luY2UpLnllYXIoKSkgKiBkaXIgK1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLm9mZnNldFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc05hbWVSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzTmFtZVJlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzTmFtZVJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNBYmJyUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc0FiYnJSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc0FiYnJSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzTmFycm93UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hcnJvd1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzTmFycm93UmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFBYmJyKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzQWJiclJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYU5hbWUoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhTmFycm93KGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzTmFycm93UmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhWWVhck9yZGluYWwoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4IHx8IG1hdGNoVW5zaWduZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZUVyYXNQYXJzZSgpIHtcbiAgICAgICAgdmFyIGFiYnJQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG5hbWVQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG5hcnJvd1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZXJhc05hbWUsXG4gICAgICAgICAgICBlcmFzQWJicixcbiAgICAgICAgICAgIGVyYXNOYXJyb3csXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBlcmFzTmFtZSA9IHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFtZSk7XG4gICAgICAgICAgICBlcmFzQWJiciA9IHJlZ2V4RXNjYXBlKGVyYXNbaV0uYWJicik7XG4gICAgICAgICAgICBlcmFzTmFycm93ID0gcmVnZXhFc2NhcGUoZXJhc1tpXS5uYXJyb3cpO1xuXG4gICAgICAgICAgICBuYW1lUGllY2VzLnB1c2goZXJhc05hbWUpO1xuICAgICAgICAgICAgYWJiclBpZWNlcy5wdXNoKGVyYXNBYmJyKTtcbiAgICAgICAgICAgIG5hcnJvd1BpZWNlcy5wdXNoKGVyYXNOYXJyb3cpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChlcmFzTmFtZSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGVyYXNBYmJyKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goZXJhc05hcnJvdyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lcmFzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNOYW1lUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBuYW1lUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc0FiYnJSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGFiYnJQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzTmFycm93UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIG5hcnJvd1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1llYXJGb3JtYXRUb2tlbih0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignZycsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdHRycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdnZycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHR0cnLCBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSxcbiAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCkgKyB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3lcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMuaXNvV2VlaygpLFxuICAgICAgICAgICAgdGhpcy5pc29XZWVrZGF5KCksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5JU09XZWVrWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMuaXNvV2Vla1llYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luV2Vla1llYXIoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy53ZWVrWWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbiAgICBhZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMylcbiAgICAgICAgICAgIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyAodGhpcy5tb250aCgpICUgMykpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHJldHVybiBpc1N0cmljdFxuICAgICAgICAgICAgPyBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2VcbiAgICAgICAgICAgIDogbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignREREJywgbWF0Y2gxdG8zKTtcbiAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPVxuICAgICAgICAgICAgTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNVxuICAgICAgICAgICAgKSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoaW5wdXQgLSBkYXlPZlllYXIsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCBtYXRjaDF0bzIsIG1hdGNoMXRvMkhhc1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJIYXNaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTUycsIDRdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTUycsIDZdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTUycsIDddLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTUycsIDldLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xuICAgIH0pO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsIG1hdGNoMXRvMywgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdTU1MnLCBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW4sIGdldFNldE1pbGxpc2Vjb25kO1xuICAgIGZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmb3IgKHRva2VuID0gJ1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xuICAgIH1cblxuICAgIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAwLCAwLCAnem9uZUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFpvbmVBYmJyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLmFkZCA9IGFkZDtcbiAgICBwcm90by5jYWxlbmRhciA9IGNhbGVuZGFyJDE7XG4gICAgcHJvdG8uY2xvbmUgPSBjbG9uZTtcbiAgICBwcm90by5kaWZmID0gZGlmZjtcbiAgICBwcm90by5lbmRPZiA9IGVuZE9mO1xuICAgIHByb3RvLmZvcm1hdCA9IGZvcm1hdDtcbiAgICBwcm90by5mcm9tID0gZnJvbTtcbiAgICBwcm90by5mcm9tTm93ID0gZnJvbU5vdztcbiAgICBwcm90by50byA9IHRvO1xuICAgIHByb3RvLnRvTm93ID0gdG9Ob3c7XG4gICAgcHJvdG8uZ2V0ID0gc3RyaW5nR2V0O1xuICAgIHByb3RvLmludmFsaWRBdCA9IGludmFsaWRBdDtcbiAgICBwcm90by5pc0FmdGVyID0gaXNBZnRlcjtcbiAgICBwcm90by5pc0JlZm9yZSA9IGlzQmVmb3JlO1xuICAgIHByb3RvLmlzQmV0d2VlbiA9IGlzQmV0d2VlbjtcbiAgICBwcm90by5pc1NhbWUgPSBpc1NhbWU7XG4gICAgcHJvdG8uaXNTYW1lT3JBZnRlciA9IGlzU2FtZU9yQWZ0ZXI7XG4gICAgcHJvdG8uaXNTYW1lT3JCZWZvcmUgPSBpc1NhbWVPckJlZm9yZTtcbiAgICBwcm90by5pc1ZhbGlkID0gaXNWYWxpZCQyO1xuICAgIHByb3RvLmxhbmcgPSBsYW5nO1xuICAgIHByb3RvLmxvY2FsZSA9IGxvY2FsZTtcbiAgICBwcm90by5sb2NhbGVEYXRhID0gbG9jYWxlRGF0YTtcbiAgICBwcm90by5tYXggPSBwcm90b3R5cGVNYXg7XG4gICAgcHJvdG8ubWluID0gcHJvdG90eXBlTWluO1xuICAgIHByb3RvLnBhcnNpbmdGbGFncyA9IHBhcnNpbmdGbGFncztcbiAgICBwcm90by5zZXQgPSBzdHJpbmdTZXQ7XG4gICAgcHJvdG8uc3RhcnRPZiA9IHN0YXJ0T2Y7XG4gICAgcHJvdG8uc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBwcm90by50b0FycmF5ID0gdG9BcnJheTtcbiAgICBwcm90by50b09iamVjdCA9IHRvT2JqZWN0O1xuICAgIHByb3RvLnRvRGF0ZSA9IHRvRGF0ZTtcbiAgICBwcm90by50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nO1xuICAgIHByb3RvLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuZm9yICE9IG51bGwpIHtcbiAgICAgICAgcHJvdG9bU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ01vbWVudDwnICsgdGhpcy5mb3JtYXQoKSArICc+JztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHJvdG8udG9KU09OID0gdG9KU09OO1xuICAgIHByb3RvLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgcHJvdG8udW5peCA9IHVuaXg7XG4gICAgcHJvdG8udmFsdWVPZiA9IHZhbHVlT2Y7XG4gICAgcHJvdG8uY3JlYXRpb25EYXRhID0gY3JlYXRpb25EYXRhO1xuICAgIHByb3RvLmVyYU5hbWUgPSBnZXRFcmFOYW1lO1xuICAgIHByb3RvLmVyYU5hcnJvdyA9IGdldEVyYU5hcnJvdztcbiAgICBwcm90by5lcmFBYmJyID0gZ2V0RXJhQWJicjtcbiAgICBwcm90by5lcmFZZWFyID0gZ2V0RXJhWWVhcjtcbiAgICBwcm90by55ZWFyID0gZ2V0U2V0WWVhcjtcbiAgICBwcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcbiAgICBwcm90by53ZWVrWWVhciA9IGdldFNldFdlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG4gICAgcHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcbiAgICBwcm90by5tb250aCA9IGdldFNldE1vbnRoO1xuICAgIHByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG4gICAgcHJvdG8ud2VlayA9IHByb3RvLndlZWtzID0gZ2V0U2V0V2VlaztcbiAgICBwcm90by5pc29XZWVrID0gcHJvdG8uaXNvV2Vla3MgPSBnZXRTZXRJU09XZWVrO1xuICAgIHByb3RvLndlZWtzSW5ZZWFyID0gZ2V0V2Vla3NJblllYXI7XG4gICAgcHJvdG8ud2Vla3NJbldlZWtZZWFyID0gZ2V0V2Vla3NJbldlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJbklTT1dlZWtZZWFyID0gZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyO1xuICAgIHByb3RvLmRhdGUgPSBnZXRTZXREYXlPZk1vbnRoO1xuICAgIHByb3RvLmRheSA9IHByb3RvLmRheXMgPSBnZXRTZXREYXlPZldlZWs7XG4gICAgcHJvdG8ud2Vla2RheSA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBwcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xuICAgIHByb3RvLmRheU9mWWVhciA9IGdldFNldERheU9mWWVhcjtcbiAgICBwcm90by5ob3VyID0gcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuICAgIHByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG4gICAgcHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcbiAgICBwcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuICAgIHByb3RvLnV0Y09mZnNldCA9IGdldFNldE9mZnNldDtcbiAgICBwcm90by51dGMgPSBzZXRPZmZzZXRUb1VUQztcbiAgICBwcm90by5sb2NhbCA9IHNldE9mZnNldFRvTG9jYWw7XG4gICAgcHJvdG8ucGFyc2Vab25lID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgcHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbiAgICBwcm90by5pc0RTVCA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xuICAgIHByb3RvLmlzTG9jYWwgPSBpc0xvY2FsO1xuICAgIHByb3RvLmlzVXRjT2Zmc2V0ID0gaXNVdGNPZmZzZXQ7XG4gICAgcHJvdG8uaXNVdGMgPSBpc1V0YztcbiAgICBwcm90by5pc1VUQyA9IGlzVXRjO1xuICAgIHByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG4gICAgcHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcbiAgICBwcm90by5kYXRlcyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0U2V0RGF5T2ZNb250aFxuICAgICk7XG4gICAgcHJvdG8ubW9udGhzID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJyxcbiAgICAgICAgZ2V0U2V0TW9udGhcbiAgICApO1xuICAgIHByb3RvLnllYXJzID0gZGVwcmVjYXRlKFxuICAgICAgICAneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsXG4gICAgICAgIGdldFNldFllYXJcbiAgICApO1xuICAgIHByb3RvLnpvbmUgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lLycsXG4gICAgICAgIGdldFNldFpvbmVcbiAgICApO1xuICAgIHByb3RvLmlzRFNUU2hpZnRlZCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLFxuICAgICAgICBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWRcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlVW5peChpbnB1dCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJblpvbmUoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90byQxLmNhbGVuZGFyID0gY2FsZW5kYXI7XG4gICAgcHJvdG8kMS5sb25nRGF0ZUZvcm1hdCA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvJDEuaW52YWxpZERhdGUgPSBpbnZhbGlkRGF0ZTtcbiAgICBwcm90byQxLm9yZGluYWwgPSBvcmRpbmFsO1xuICAgIHByb3RvJDEucHJlcGFyc2UgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5wb3N0Zm9ybWF0ID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucmVsYXRpdmVUaW1lID0gcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvJDEucGFzdEZ1dHVyZSA9IHBhc3RGdXR1cmU7XG4gICAgcHJvdG8kMS5zZXQgPSBzZXQ7XG4gICAgcHJvdG8kMS5lcmFzID0gbG9jYWxlRXJhcztcbiAgICBwcm90byQxLmVyYXNQYXJzZSA9IGxvY2FsZUVyYXNQYXJzZTtcbiAgICBwcm90byQxLmVyYXNDb252ZXJ0WWVhciA9IGxvY2FsZUVyYXNDb252ZXJ0WWVhcjtcbiAgICBwcm90byQxLmVyYXNBYmJyUmVnZXggPSBlcmFzQWJiclJlZ2V4O1xuICAgIHByb3RvJDEuZXJhc05hbWVSZWdleCA9IGVyYXNOYW1lUmVnZXg7XG4gICAgcHJvdG8kMS5lcmFzTmFycm93UmVnZXggPSBlcmFzTmFycm93UmVnZXg7XG5cbiAgICBwcm90byQxLm1vbnRocyA9IGxvY2FsZU1vbnRocztcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0ID0gbG9jYWxlTW9udGhzU2hvcnQ7XG4gICAgcHJvdG8kMS5tb250aHNQYXJzZSA9IGxvY2FsZU1vbnRoc1BhcnNlO1xuICAgIHByb3RvJDEubW9udGhzUmVnZXggPSBtb250aHNSZWdleDtcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0UmVnZXggPSBtb250aHNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG4gICAgcHJvdG8kMS5maXJzdERheU9mWWVhciA9IGxvY2FsZUZpcnN0RGF5T2ZZZWFyO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2VlaztcblxuICAgIHByb3RvJDEud2Vla2RheXMgPSBsb2NhbGVXZWVrZGF5cztcbiAgICBwcm90byQxLndlZWtkYXlzTWluID0gbG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0ID0gbG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90byQxLndlZWtkYXlzUGFyc2UgPSBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5c1JlZ2V4ID0gd2Vla2RheXNSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCA9IHdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzTWluUmVnZXggPSB3ZWVrZGF5c01pblJlZ2V4O1xuXG4gICAgcHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbiAgICBwcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbiAgICBmdW5jdGlvbiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8vICgpXG4gICAgLy8gKDUpXG4gICAgLy8gKGZtdCwgNSlcbiAgICAvLyAoZm10KVxuICAgIC8vICh0cnVlKVxuICAgIC8vICh0cnVlLCA1KVxuICAgIC8vICh0cnVlLCBmbXQsIDUpXG4gICAgLy8gKHRydWUsIGZtdClcbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZS5fd2Vlay5kb3cgOiAwLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG91dCA9IFtdO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0KGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xuICAgIH1cblxuICAgIGdldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgICAgIGVyYXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDEtMDEtMDEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiArSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdBbm5vIERvbWluaScsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQUQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdBRCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMC0xMi0zMScsXG4gICAgICAgICAgICAgICAgdW50aWw6IC1JbmZpbml0eSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0JlZm9yZSBDaHJpc3QnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0JDJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQkMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgdG9JbnQoKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIGhvb2tzLmxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsXG4gICAgICAgIGdldFNldEdsb2JhbExvY2FsZVxuICAgICk7XG4gICAgaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0TG9jYWxlXG4gICAgKTtcblxuICAgIHZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBhYnMoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB0aGlzLl9tb250aHMgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCQxKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uX2RheXMgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgICAgIGR1cmF0aW9uLl9tb250aHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBhZGQkMShpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDEoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0NlaWwobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnViYmxlKCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMsXG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMsXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fZGF0YSxcbiAgICAgICAgICAgIHNlY29uZHMsXG4gICAgICAgICAgICBtaW51dGVzLFxuICAgICAgICAgICAgaG91cnMsXG4gICAgICAgICAgICB5ZWFycyxcbiAgICAgICAgICAgIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAgICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgICAgIGRheXMgPSAwO1xuICAgICAgICAgICAgbW9udGhzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICAgICAgc2Vjb25kcyA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgICAgICBkYXRhLnNlY29uZHMgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgICAgbWludXRlcyA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGRhdGEubWludXRlcyA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgICBob3VycyA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIGRhdGEuaG91cnMgPSBob3VycyAlIDI0O1xuXG4gICAgICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAgICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgICAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICAgICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICBkYXRhLmRheXMgPSBkYXlzO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICAgICAgZGF0YS55ZWFycyA9IHllYXJzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNUb01vbnRocyhkYXlzKSB7XG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgICAgIHJldHVybiAoZGF5cyAqIDQ4MDApIC8gMTQ2MDk3O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyhtb250aHMpIHtcbiAgICAgICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgICAgIHJldHVybiAobW9udGhzICogMTQ2MDk3KSAvIDQ4MDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXModW5pdHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBpZiAodW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICdxdWFydGVyJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocztcbiAgICAgICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocyAvIDM7XG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHMgLyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtaWxsaXNlY29uZHMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChpc3N1ZSAjMTg2NylcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzIC8gNyArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDI0ICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDE0NDAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlQXMoYWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyksXG4gICAgICAgIGFzU2Vjb25kcyA9IG1ha2VBcygncycpLFxuICAgICAgICBhc01pbnV0ZXMgPSBtYWtlQXMoJ20nKSxcbiAgICAgICAgYXNIb3VycyA9IG1ha2VBcygnaCcpLFxuICAgICAgICBhc0RheXMgPSBtYWtlQXMoJ2QnKSxcbiAgICAgICAgYXNXZWVrcyA9IG1ha2VBcygndycpLFxuICAgICAgICBhc01vbnRocyA9IG1ha2VBcygnTScpLFxuICAgICAgICBhc1F1YXJ0ZXJzID0gbWFrZUFzKCdRJyksXG4gICAgICAgIGFzWWVhcnMgPSBtYWtlQXMoJ3knKSxcbiAgICAgICAgdmFsdWVPZiQxID0gYXNNaWxsaXNlY29uZHM7XG5cbiAgICBmdW5jdGlvbiBjbG9uZSQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0JDIodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9kYXRhW25hbWVdIDogTmFOO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKSxcbiAgICAgICAgc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKSxcbiAgICAgICAgbWludXRlcyA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKSxcbiAgICAgICAgaG91cnMgPSBtYWtlR2V0dGVyKCdob3VycycpLFxuICAgICAgICBkYXlzID0gbWFrZUdldHRlcignZGF5cycpLFxuICAgICAgICBtb250aHMgPSBtYWtlR2V0dGVyKCdtb250aHMnKSxcbiAgICAgICAgeWVhcnMgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MoKSB7XG4gICAgICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xuICAgIH1cblxuICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICAgIHRocmVzaG9sZHMgPSB7XG4gICAgICAgICAgICBzczogNDQsIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgICAgICAgICAgczogNDUsIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgICAgICBtOiA0NSwgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgICAgICBoOiAyMiwgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgICAgICBkOiAyNiwgLy8gZGF5cyB0byBtb250aC93ZWVrXG4gICAgICAgICAgICB3OiBudWxsLCAvLyB3ZWVrcyB0byBtb250aFxuICAgICAgICAgICAgTTogMTEsIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgICAgIH07XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCB0aHJlc2hvbGRzLCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpLFxuICAgICAgICAgICAgc2Vjb25kcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpLFxuICAgICAgICAgICAgbWludXRlcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpLFxuICAgICAgICAgICAgaG91cnMgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKSxcbiAgICAgICAgICAgIGRheXMgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKSxcbiAgICAgICAgICAgIG1vbnRocyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpLFxuICAgICAgICAgICAgd2Vla3MgPSByb3VuZChkdXJhdGlvbi5hcygndycpKSxcbiAgICAgICAgICAgIHllYXJzID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSksXG4gICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICAoc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgICAgIChzZWNvbmRzIDwgdGhyZXNob2xkcy5zICYmIFsnc3MnLCBzZWNvbmRzXSkgfHxcbiAgICAgICAgICAgICAgICAobWludXRlcyA8PSAxICYmIFsnbSddKSB8fFxuICAgICAgICAgICAgICAgIChtaW51dGVzIDwgdGhyZXNob2xkcy5tICYmIFsnbW0nLCBtaW51dGVzXSkgfHxcbiAgICAgICAgICAgICAgICAoaG91cnMgPD0gMSAmJiBbJ2gnXSkgfHxcbiAgICAgICAgICAgICAgICAoaG91cnMgPCB0aHJlc2hvbGRzLmggJiYgWydoaCcsIGhvdXJzXSkgfHxcbiAgICAgICAgICAgICAgICAoZGF5cyA8PSAxICYmIFsnZCddKSB8fFxuICAgICAgICAgICAgICAgIChkYXlzIDwgdGhyZXNob2xkcy5kICYmIFsnZGQnLCBkYXlzXSk7XG5cbiAgICAgICAgaWYgKHRocmVzaG9sZHMudyAhPSBudWxsKSB7XG4gICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICBhIHx8XG4gICAgICAgICAgICAgICAgKHdlZWtzIDw9IDEgJiYgWyd3J10pIHx8XG4gICAgICAgICAgICAgICAgKHdlZWtzIDwgdGhyZXNob2xkcy53ICYmIFsnd3cnLCB3ZWVrc10pO1xuICAgICAgICB9XG4gICAgICAgIGEgPSBhIHx8XG4gICAgICAgICAgICAobW9udGhzIDw9IDEgJiYgWydNJ10pIHx8XG4gICAgICAgICAgICAobW9udGhzIDwgdGhyZXNob2xkcy5NICYmIFsnTU0nLCBtb250aHNdKSB8fFxuICAgICAgICAgICAgKHllYXJzIDw9IDEgJiYgWyd5J10pIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCB0aGUgcm91bmRpbmcgZnVuY3Rpb24gZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygcm91bmRpbmdGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgICAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUoYXJnV2l0aFN1ZmZpeCwgYXJnVGhyZXNob2xkcykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3aXRoU3VmZml4ID0gZmFsc2UsXG4gICAgICAgICAgICB0aCA9IHRocmVzaG9sZHMsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdXaXRoU3VmZml4ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgYXJnVGhyZXNob2xkcyA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgICAgICAgICBhcmdXaXRoU3VmZml4ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdXaXRoU3VmZml4ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHdpdGhTdWZmaXggPSBhcmdXaXRoU3VmZml4O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYXJnVGhyZXNob2xkcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoID0gT2JqZWN0LmFzc2lnbih7fSwgdGhyZXNob2xkcywgYXJnVGhyZXNob2xkcyk7XG4gICAgICAgICAgICBpZiAoYXJnVGhyZXNob2xkcy5zICE9IG51bGwgJiYgYXJnVGhyZXNob2xkcy5zcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGguc3MgPSBhcmdUaHJlc2hvbGRzLnMgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCB0aCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIHNpZ24oeCkge1xuICAgICAgICByZXR1cm4gKHggPiAwKSAtICh4IDwgMCkgfHwgK3g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmckMSgpIHtcbiAgICAgICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAgICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgICAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAgICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMCxcbiAgICAgICAgICAgIGRheXMgPSBhYnMkMSh0aGlzLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFicyQxKHRoaXMuX21vbnRocyksXG4gICAgICAgICAgICBtaW51dGVzLFxuICAgICAgICAgICAgaG91cnMsXG4gICAgICAgICAgICB5ZWFycyxcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCksXG4gICAgICAgICAgICB0b3RhbFNpZ24sXG4gICAgICAgICAgICB5bVNpZ24sXG4gICAgICAgICAgICBkYXlzU2lnbixcbiAgICAgICAgICAgIGhtc1NpZ247XG5cbiAgICAgICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBob3VycyA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIHNlY29uZHMgJT0gNjA7XG4gICAgICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgICAgIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcblxuICAgICAgICB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICAgICAgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRvdGFsU2lnbiArXG4gICAgICAgICAgICAnUCcgK1xuICAgICAgICAgICAgKHllYXJzID8geW1TaWduICsgeWVhcnMgKyAnWScgOiAnJykgK1xuICAgICAgICAgICAgKG1vbnRocyA/IHltU2lnbiArIG1vbnRocyArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoZGF5cyA/IGRheXNTaWduICsgZGF5cyArICdEJyA6ICcnKSArXG4gICAgICAgICAgICAoaG91cnMgfHwgbWludXRlcyB8fCBzZWNvbmRzID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgIChob3VycyA/IGhtc1NpZ24gKyBob3VycyArICdIJyA6ICcnKSArXG4gICAgICAgICAgICAobWludXRlcyA/IGhtc1NpZ24gKyBtaW51dGVzICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChzZWNvbmRzID8gaG1zU2lnbiArIHMgKyAnUycgOiAnJylcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDIuaXNWYWxpZCA9IGlzVmFsaWQkMTtcbiAgICBwcm90byQyLmFicyA9IGFicztcbiAgICBwcm90byQyLmFkZCA9IGFkZCQxO1xuICAgIHByb3RvJDIuc3VidHJhY3QgPSBzdWJ0cmFjdCQxO1xuICAgIHByb3RvJDIuYXMgPSBhcztcbiAgICBwcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5hc1NlY29uZHMgPSBhc1NlY29uZHM7XG4gICAgcHJvdG8kMi5hc01pbnV0ZXMgPSBhc01pbnV0ZXM7XG4gICAgcHJvdG8kMi5hc0hvdXJzID0gYXNIb3VycztcbiAgICBwcm90byQyLmFzRGF5cyA9IGFzRGF5cztcbiAgICBwcm90byQyLmFzV2Vla3MgPSBhc1dlZWtzO1xuICAgIHByb3RvJDIuYXNNb250aHMgPSBhc01vbnRocztcbiAgICBwcm90byQyLmFzUXVhcnRlcnMgPSBhc1F1YXJ0ZXJzO1xuICAgIHByb3RvJDIuYXNZZWFycyA9IGFzWWVhcnM7XG4gICAgcHJvdG8kMi52YWx1ZU9mID0gdmFsdWVPZiQxO1xuICAgIHByb3RvJDIuX2J1YmJsZSA9IGJ1YmJsZTtcbiAgICBwcm90byQyLmNsb25lID0gY2xvbmUkMTtcbiAgICBwcm90byQyLmdldCA9IGdldCQyO1xuICAgIHByb3RvJDIubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuc2Vjb25kcyA9IHNlY29uZHM7XG4gICAgcHJvdG8kMi5taW51dGVzID0gbWludXRlcztcbiAgICBwcm90byQyLmhvdXJzID0gaG91cnM7XG4gICAgcHJvdG8kMi5kYXlzID0gZGF5cztcbiAgICBwcm90byQyLndlZWtzID0gd2Vla3M7XG4gICAgcHJvdG8kMi5tb250aHMgPSBtb250aHM7XG4gICAgcHJvdG8kMi55ZWFycyA9IHllYXJzO1xuICAgIHByb3RvJDIuaHVtYW5pemUgPSBodW1hbml6ZTtcbiAgICBwcm90byQyLnRvSVNPU3RyaW5nID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvU3RyaW5nID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvSlNPTiA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi5sb2NhbGUgPSBsb2NhbGU7XG4gICAgcHJvdG8kMi5sb2NhbGVEYXRhID0gbG9jYWxlRGF0YTtcblxuICAgIHByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsXG4gICAgICAgIHRvSVNPU3RyaW5nJDFcbiAgICApO1xuICAgIHByb3RvJDIubGFuZyA9IGxhbmc7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCkgKiAxMDAwKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG4gICAgfSk7XG5cbiAgICAvLyEgbW9tZW50LmpzXG5cbiAgICBob29rcy52ZXJzaW9uID0gJzIuMzAuMSc7XG5cbiAgICBzZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG4gICAgaG9va3MuZm4gPSBwcm90bztcbiAgICBob29rcy5taW4gPSBtaW47XG4gICAgaG9va3MubWF4ID0gbWF4O1xuICAgIGhvb2tzLm5vdyA9IG5vdztcbiAgICBob29rcy51dGMgPSBjcmVhdGVVVEM7XG4gICAgaG9va3MudW5peCA9IGNyZWF0ZVVuaXg7XG4gICAgaG9va3MubW9udGhzID0gbGlzdE1vbnRocztcbiAgICBob29rcy5pc0RhdGUgPSBpc0RhdGU7XG4gICAgaG9va3MubG9jYWxlID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuICAgIGhvb2tzLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkO1xuICAgIGhvb2tzLmR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb247XG4gICAgaG9va3MuaXNNb21lbnQgPSBpc01vbWVudDtcbiAgICBob29rcy53ZWVrZGF5cyA9IGxpc3RXZWVrZGF5cztcbiAgICBob29rcy5wYXJzZVpvbmUgPSBjcmVhdGVJblpvbmU7XG4gICAgaG9va3MubG9jYWxlRGF0YSA9IGdldExvY2FsZTtcbiAgICBob29rcy5pc0R1cmF0aW9uID0gaXNEdXJhdGlvbjtcbiAgICBob29rcy5tb250aHNTaG9ydCA9IGxpc3RNb250aHNTaG9ydDtcbiAgICBob29rcy53ZWVrZGF5c01pbiA9IGxpc3RXZWVrZGF5c01pbjtcbiAgICBob29rcy5kZWZpbmVMb2NhbGUgPSBkZWZpbmVMb2NhbGU7XG4gICAgaG9va3MudXBkYXRlTG9jYWxlID0gdXBkYXRlTG9jYWxlO1xuICAgIGhvb2tzLmxvY2FsZXMgPSBsaXN0TG9jYWxlcztcbiAgICBob29rcy53ZWVrZGF5c1Nob3J0ID0gbGlzdFdlZWtkYXlzU2hvcnQ7XG4gICAgaG9va3Mubm9ybWFsaXplVW5pdHMgPSBub3JtYWxpemVVbml0cztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyA9IGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbiAgICBob29rcy5jYWxlbmRhckZvcm1hdCA9IGdldENhbGVuZGFyRm9ybWF0O1xuICAgIGhvb2tzLnByb3RvdHlwZSA9IHByb3RvO1xuXG4gICAgLy8gY3VycmVudGx5IEhUTUw1IGlucHV0IHR5cGUgb25seSBzdXBwb3J0cyAyNC1ob3VyIGZvcm1hdHNcbiAgICBob29rcy5IVE1MNV9GTVQgPSB7XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMOiAnWVlZWS1NTS1ERFRISDptbScsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9TRUNPTkRTOiAnWVlZWS1NTS1ERFRISDptbTpzcycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgREFURTogJ1lZWVktTU0tREQnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICBUSU1FOiAnSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgVElNRV9NUzogJ0hIOm1tOnNzLlNTUycsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIFdFRUs6ICdHR0dHLVtXXVdXJywgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICAgICAgTU9OVEg6ICdZWVlZLU1NJywgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG4gICAgfTtcblxuICAgIHJldHVybiBob29rcztcblxufSkpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCBxcyBmcm9tICdxcyc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnbG9kYXNoLmlzc3RyaW5nJztcbmltcG9ydCBwVGhyb3R0bGUgZnJvbSAncC10aHJvdHRsZSc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICdsb2Rhc2guaXNwbGFpbm9iamVjdCc7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX3dyYXBSZWdFeHAoKSB7XG4gIF93cmFwUmVnRXhwID0gZnVuY3Rpb24gKHJlLCBncm91cHMpIHtcbiAgICByZXR1cm4gbmV3IEJhYmVsUmVnRXhwKHJlLCB2b2lkIDAsIGdyb3Vwcyk7XG4gIH07XG5cbiAgdmFyIF9zdXBlciA9IFJlZ0V4cC5wcm90b3R5cGUsXG4gICAgICBfZ3JvdXBzID0gbmV3IFdlYWtNYXAoKTtcblxuICBmdW5jdGlvbiBCYWJlbFJlZ0V4cChyZSwgZmxhZ3MsIGdyb3Vwcykge1xuICAgIHZhciBfdGhpcyA9IG5ldyBSZWdFeHAocmUsIGZsYWdzKTtcblxuICAgIHJldHVybiBfZ3JvdXBzLnNldChfdGhpcywgZ3JvdXBzIHx8IF9ncm91cHMuZ2V0KHJlKSksIF9zZXRQcm90b3R5cGVPZihfdGhpcywgQmFiZWxSZWdFeHAucHJvdG90eXBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkR3JvdXBzKHJlc3VsdCwgcmUpIHtcbiAgICB2YXIgZyA9IF9ncm91cHMuZ2V0KHJlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhnKS5yZWR1Y2UoZnVuY3Rpb24gKGdyb3VwcywgbmFtZSkge1xuICAgICAgcmV0dXJuIGdyb3Vwc1tuYW1lXSA9IHJlc3VsdFtnW25hbWVdXSwgZ3JvdXBzO1xuICAgIH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG5cbiAgcmV0dXJuIF9pbmhlcml0cyhCYWJlbFJlZ0V4cCwgUmVnRXhwKSwgQmFiZWxSZWdFeHAucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9zdXBlci5leGVjLmNhbGwodGhpcywgc3RyKTtcblxuICAgIHJldHVybiByZXN1bHQgJiYgKHJlc3VsdC5ncm91cHMgPSBidWlsZEdyb3VwcyhyZXN1bHQsIHRoaXMpKSwgcmVzdWx0O1xuICB9LCBCYWJlbFJlZ0V4cC5wcm90b3R5cGVbU3ltYm9sLnJlcGxhY2VdID0gZnVuY3Rpb24gKHN0ciwgc3Vic3RpdHV0aW9uKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHN1YnN0aXR1dGlvbikge1xuICAgICAgdmFyIGdyb3VwcyA9IF9ncm91cHMuZ2V0KHRoaXMpO1xuXG4gICAgICByZXR1cm4gX3N1cGVyW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsIHN0ciwgc3Vic3RpdHV0aW9uLnJlcGxhY2UoL1xcJDwoW14+XSspPi9nLCBmdW5jdGlvbiAoXywgbmFtZSkge1xuICAgICAgICByZXR1cm4gXCIkXCIgKyBncm91cHNbbmFtZV07XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygc3Vic3RpdHV0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gX3N1cGVyW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsIHN0ciwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgIT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSAmJiAoYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJncykpLnB1c2goYnVpbGRHcm91cHMoYXJncywgX3RoaXMpKSwgc3Vic3RpdHV0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIHN1YnN0aXR1dGlvbik7XG4gIH0sIF93cmFwUmVnRXhwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoIWl0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBvW2krK11cbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0sXG4gICAgICAgIGY6IEZcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xuICB9XG5cbiAgdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLFxuICAgICAgZGlkRXJyID0gZmFsc2UsXG4gICAgICBlcnI7XG4gIHJldHVybiB7XG4gICAgczogZnVuY3Rpb24gKCkge1xuICAgICAgaXQgPSBpdC5jYWxsKG8pO1xuICAgIH0sXG4gICAgbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7XG4gICAgICBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lO1xuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfSxcbiAgICBlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgZGlkRXJyID0gdHJ1ZTtcbiAgICAgIGVyciA9IGU7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGRpZEVycikgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNOb2RlKCkge1xuICAvKipcbiAgICogUG9seWZpbGxzIG9mICdwcm9jZXNzJyBtaWdodCBzZXQgcHJvY2Vzcy5icm93c2VyID09PSB0cnVlXG4gICAqXG4gICAqIFNlZTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svbm9kZS1saWJzLWJyb3dzZXIvYmxvYi9tYXN0ZXIvbW9jay9wcm9jZXNzLmpzI0w4XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWZ1bmN0em9tYmllL25vZGUtcHJvY2Vzcy9ibG9iL21hc3Rlci9icm93c2VyLmpzI0wxNTZcbiAgICoqL1xuICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICFwcm9jZXNzLmJyb3dzZXI7XG59XG5mdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ25hdmlnYXRvcicgaW4gd2luZG93ICYmICdwcm9kdWN0JyBpbiB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJztcbn1cbmZ1bmN0aW9uIGdldE5vZGVWZXJzaW9uKCkge1xuICByZXR1cm4gcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgPyBcInZcIi5jb25jYXQocHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSA6IHByb2Nlc3MudmVyc2lvbjtcbn1cbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgcmV0dXJuIHdpbmRvdztcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbnZhciBQRVJDRU5UQUdFX1JFR0VYID0gLyojX19QVVJFX18qL193cmFwUmVnRXhwKC8oWzAtOV0rKSglKS8sIHtcbiAgdmFsdWU6IDFcbn0pO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVMaW1pdCh0eXBlKSB7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDc7XG4gIHZhciBsaW1pdCA9IG1heDtcblxuICBpZiAoUEVSQ0VOVEFHRV9SRUdFWC50ZXN0KHR5cGUpKSB7XG4gICAgdmFyIF90eXBlJG1hdGNoO1xuXG4gICAgdmFyIGdyb3VwcyA9IChfdHlwZSRtYXRjaCA9IHR5cGUubWF0Y2goUEVSQ0VOVEFHRV9SRUdFWCkpID09PSBudWxsIHx8IF90eXBlJG1hdGNoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdHlwZSRtYXRjaC5ncm91cHM7XG5cbiAgICBpZiAoZ3JvdXBzICYmIGdyb3Vwcy52YWx1ZSkge1xuICAgICAgdmFyIHBlcmNlbnRhZ2UgPSBwYXJzZUludChncm91cHMudmFsdWUpIC8gMTAwO1xuICAgICAgbGltaXQgPSBNYXRoLnJvdW5kKG1heCAqIHBlcmNlbnRhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBNYXRoLm1pbigzMCwgTWF0aC5tYXgoMSwgbGltaXQpKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGhyb3R0bGUobGltaXQsIGxvZ2dlcikge1xuICBsb2dnZXIoJ2luZm8nLCBcIlRocm90dGxlIHJlcXVlc3QgdG8gXCIuY29uY2F0KGxpbWl0LCBcIi9zXCIpKTtcbiAgcmV0dXJuIHBUaHJvdHRsZSh7XG4gICAgbGltaXQ6IGxpbWl0LFxuICAgIGludGVydmFsOiAxMDAwLFxuICAgIHN0cmljdDogZmFsc2VcbiAgfSk7XG59XG5cbnZhciByYXRlTGltaXRUaHJvdHRsZSA9IChmdW5jdGlvbiAoYXhpb3NJbnN0YW5jZSkge1xuICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2F1dG8nO1xuICB2YXIgX2F4aW9zSW5zdGFuY2UkZGVmYXVsID0gYXhpb3NJbnN0YW5jZS5kZWZhdWx0cy5sb2dIYW5kbGVyLFxuICAgICAgbG9nSGFuZGxlciA9IF9heGlvc0luc3RhbmNlJGRlZmF1bCA9PT0gdm9pZCAwID8gbm9vcCA6IF9heGlvc0luc3RhbmNlJGRlZmF1bDtcbiAgdmFyIGxpbWl0ID0gaXNTdHJpbmcodHlwZSkgPyBjYWxjdWxhdGVMaW1pdCh0eXBlKSA6IGNhbGN1bGF0ZUxpbWl0KCdhdXRvJywgdHlwZSk7XG4gIHZhciB0aHJvdHRsZSA9IGNyZWF0ZVRocm90dGxlKGxpbWl0LCBsb2dIYW5kbGVyKTtcbiAgdmFyIGlzQ2FsY3VsYXRlZCA9IGZhbHNlO1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9ySWQgPSBheGlvc0luc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfSkoKTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfSk7XG4gIHZhciByZXNwb25zZUludGVyY2VwdG9ySWQgPSBheGlvc0luc3RhbmNlLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgaWYgKCFpc0NhbGN1bGF0ZWQgJiYgaXNTdHJpbmcodHlwZSkgJiYgKHR5cGUgPT09ICdhdXRvJyB8fCBQRVJDRU5UQUdFX1JFR0VYLnRlc3QodHlwZSkpICYmIHJlc3BvbnNlLmhlYWRlcnMgJiYgcmVzcG9uc2UuaGVhZGVyc1sneC1jb250ZW50ZnVsLXJhdGVsaW1pdC1zZWNvbmQtbGltaXQnXSkge1xuICAgICAgdmFyIHJhd0xpbWl0ID0gcGFyc2VJbnQocmVzcG9uc2UuaGVhZGVyc1sneC1jb250ZW50ZnVsLXJhdGVsaW1pdC1zZWNvbmQtbGltaXQnXSk7XG4gICAgICB2YXIgbmV4dExpbWl0ID0gY2FsY3VsYXRlTGltaXQodHlwZSwgcmF3TGltaXQpO1xuXG4gICAgICBpZiAobmV4dExpbWl0ICE9PSBsaW1pdCkge1xuICAgICAgICBpZiAocmVxdWVzdEludGVyY2VwdG9ySWQpIHtcbiAgICAgICAgICBheGlvc0luc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LmVqZWN0KHJlcXVlc3RJbnRlcmNlcHRvcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbWl0ID0gbmV4dExpbWl0O1xuICAgICAgICB0aHJvdHRsZSA9IGNyZWF0ZVRocm90dGxlKG5leHRMaW1pdCwgbG9nSGFuZGxlcik7XG4gICAgICAgIHJlcXVlc3RJbnRlcmNlcHRvcklkID0gYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICAgIH0pKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpc0NhbGN1bGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC5lamVjdChyZXF1ZXN0SW50ZXJjZXB0b3JJZCk7XG4gICAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZWplY3QocmVzcG9uc2VJbnRlcmNlcHRvcklkKTtcbiAgfTtcbn0pO1xuXG52YXIgZGVsYXkgPSBmdW5jdGlvbiBkZWxheShtcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFdhaXQgPSBmdW5jdGlvbiBkZWZhdWx0V2FpdChhdHRlbXB0cykge1xuICByZXR1cm4gTWF0aC5wb3coTWF0aC5TUVJUMiwgYXR0ZW1wdHMpO1xufTtcblxuZnVuY3Rpb24gcmF0ZUxpbWl0KGluc3RhbmNlKSB7XG4gIHZhciBtYXhSZXRyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTtcbiAgdmFyIF9pbnN0YW5jZSRkZWZhdWx0cyA9IGluc3RhbmNlLmRlZmF1bHRzLFxuICAgICAgX2luc3RhbmNlJGRlZmF1bHRzJHJlID0gX2luc3RhbmNlJGRlZmF1bHRzLnJlc3BvbnNlTG9nZ2VyLFxuICAgICAgcmVzcG9uc2VMb2dnZXIgPSBfaW5zdGFuY2UkZGVmYXVsdHMkcmUgPT09IHZvaWQgMCA/IG5vb3AgOiBfaW5zdGFuY2UkZGVmYXVsdHMkcmUsXG4gICAgICBfaW5zdGFuY2UkZGVmYXVsdHMkcmUyID0gX2luc3RhbmNlJGRlZmF1bHRzLnJlcXVlc3RMb2dnZXIsXG4gICAgICByZXF1ZXN0TG9nZ2VyID0gX2luc3RhbmNlJGRlZmF1bHRzJHJlMiA9PT0gdm9pZCAwID8gbm9vcCA6IF9pbnN0YW5jZSRkZWZhdWx0cyRyZTI7XG4gIGluc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmVxdWVzdExvZ2dlcihjb25maWcpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJlcXVlc3RMb2dnZXIoZXJyb3IpO1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH0pO1xuICBpbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgaGVyZVxuICAgIHJlc3BvbnNlTG9nZ2VyKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHZhciByZXNwb25zZSA9IGVycm9yLnJlc3BvbnNlO1xuICAgIHZhciBjb25maWcgPSBlcnJvci5jb25maWc7XG4gICAgcmVzcG9uc2VMb2dnZXIoZXJyb3IpOyAvLyBEbyBub3QgcmV0cnkgaWYgaXQgaXMgZGlzYWJsZWQgb3Igbm8gcmVxdWVzdCBjb25maWcgZXhpc3RzIChub3QgYW4gYXhpb3MgZXJyb3IpXG5cbiAgICBpZiAoIWNvbmZpZyB8fCAhaW5zdGFuY2UuZGVmYXVsdHMucmV0cnlPbkVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH0gLy8gUmV0cmllZCBhbHJlYWR5IGZvciBtYXggYXR0ZW1wdHNcblxuXG4gICAgdmFyIGRvbmVBdHRlbXB0cyA9IGNvbmZpZy5hdHRlbXB0cyB8fCAxO1xuXG4gICAgaWYgKGRvbmVBdHRlbXB0cyA+IG1heFJldHJ5KSB7XG4gICAgICBlcnJvci5hdHRlbXB0cyA9IGNvbmZpZy5hdHRlbXB0cztcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgdmFyIHJldHJ5RXJyb3JUeXBlID0gbnVsbDtcbiAgICB2YXIgd2FpdCA9IGRlZmF1bHRXYWl0KGRvbmVBdHRlbXB0cyk7IC8vIEVycm9ycyB3aXRob3V0IHJlc3BvbnNlIGRpZCBub3QgcmVjZWl2ZSBhbnl0aGluZyBmcm9tIHRoZSBzZXJ2ZXJcblxuICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgIHJldHJ5RXJyb3JUeXBlID0gJ0Nvbm5lY3Rpb24nO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDUwMCAmJiByZXNwb25zZS5zdGF0dXMgPCA2MDApIHtcbiAgICAgIC8vIDUqKiBlcnJvcnMgYXJlIHNlcnZlciByZWxhdGVkXG4gICAgICByZXRyeUVycm9yVHlwZSA9IFwiU2VydmVyIFwiLmNvbmNhdChyZXNwb25zZS5zdGF0dXMpO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MjkpIHtcbiAgICAgIC8vIDQyOSBlcnJvcnMgYXJlIGV4Y2VlZGVkIHJhdGUgbGltaXQgZXhjZXB0aW9uc1xuICAgICAgcmV0cnlFcnJvclR5cGUgPSAnUmF0ZSBsaW1pdCc7IC8vIGFsbCBoZWFkZXJzIGFyZSBsb3dlcmNhc2VkIGJ5IGF4aW9zIGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL2F4aW9zL2lzc3Vlcy80MTNcblxuICAgICAgaWYgKHJlc3BvbnNlLmhlYWRlcnMgJiYgZXJyb3IucmVzcG9uc2UuaGVhZGVyc1sneC1jb250ZW50ZnVsLXJhdGVsaW1pdC1yZXNldCddKSB7XG4gICAgICAgIHdhaXQgPSByZXNwb25zZS5oZWFkZXJzWyd4LWNvbnRlbnRmdWwtcmF0ZWxpbWl0LXJlc2V0J107XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJldHJ5RXJyb3JUeXBlKSB7XG4gICAgICAvLyBjb252ZXJ0IHRvIG1zIGFuZCBhZGQgaml0dGVyXG4gICAgICB3YWl0ID0gTWF0aC5mbG9vcih3YWl0ICogMTAwMCArIE1hdGgucmFuZG9tKCkgKiAyMDAgKyA1MDApO1xuICAgICAgaW5zdGFuY2UuZGVmYXVsdHMubG9nSGFuZGxlcignd2FybmluZycsIFwiXCIuY29uY2F0KHJldHJ5RXJyb3JUeXBlLCBcIiBlcnJvciBvY2N1cnJlZC4gV2FpdGluZyBmb3IgXCIpLmNvbmNhdCh3YWl0LCBcIiBtcyBiZWZvcmUgcmV0cnlpbmcuLi5cIikpOyAvLyBpbmNyZWFzZSBhdHRlbXB0cyBjb3VudGVyXG5cbiAgICAgIGNvbmZpZy5hdHRlbXB0cyA9IGRvbmVBdHRlbXB0cyArIDE7XG4gICAgICAvKiBTb21laG93IGJldHdlZW4gdGhlIGludGVyY2VwdG9yIGFuZCByZXRyeWluZyB0aGUgcmVxdWVzdCB0aGUgaHR0cEFnZW50L2h0dHBzQWdlbnQgZ2V0cyB0cmFuc2Zvcm1lZCBmcm9tIGFuIEFnZW50LWxpa2Ugb2JqZWN0XG4gICAgICAgdG8gYSByZWd1bGFyIG9iamVjdCwgY2F1c2luZyBmYWlsdXJlcyBvbiByZXRyaWVzIGFmdGVyIHJhdGUgbGltaXRzLiBSZW1vdmluZyB0aGVzZSBwcm9wZXJ0aWVzIGhlcmUgZml4ZXMgdGhlIGVycm9yLCBidXQgcmV0cnlcbiAgICAgICByZXF1ZXN0cyBzdGlsbCB1c2UgdGhlIG9yaWdpbmFsIGh0dHAvaHR0cHNBZ2VudCBwcm9wZXJ0eSAqL1xuXG4gICAgICBkZWxldGUgY29uZmlnLmh0dHBBZ2VudDtcbiAgICAgIGRlbGV0ZSBjb25maWcuaHR0cHNBZ2VudDtcbiAgICAgIHJldHVybiBkZWxheSh3YWl0KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlKGNvbmZpZyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXN5bmNUb2tlbihpbnN0YW5jZSwgZ2V0VG9rZW4pIHtcbiAgaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICByZXR1cm4gZ2V0VG9rZW4oKS50aGVuKGZ1bmN0aW9uIChhY2Nlc3NUb2tlbikge1xuICAgICAgY29uZmlnLmhlYWRlcnMgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgY29uZmlnLmhlYWRlcnMpLCB7fSwge1xuICAgICAgICBBdXRob3JpemF0aW9uOiBcIkJlYXJlciBcIi5jb25jYXQoYWNjZXNzVG9rZW4pXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBBbHNvIGVuZm9yY2VzIHRvcGxldmVsIGRvbWFpbiBzcGVjaWZpZWQsIG5vIHNwYWNlcyBhbmQgbm8gcHJvdG9jb2xcblxudmFyIEhPU1RfUkVHRVggPSAvXig/IVxcdys6XFwvXFwvKShbXlxcczpdK1xcLj9bXlxcczpdKykoPzo6KFxcZCspKT8oPyE6KSQvO1xuLyoqXG4gKiBDcmVhdGUgcHJlIGNvbmZpZ3VyZWQgYXhpb3MgaW5zdGFuY2VcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0F4aW9zU3RhdGljfSBheGlvcyAtIEF4aW9zIGxpYnJhcnlcbiAqIEBwYXJhbSB7Q3JlYXRlSHR0cENsaWVudFBhcmFtc30gb3B0aW9ucyAtIEluaXRpYWxpemF0aW9uIHBhcmFtZXRlcnMgZm9yIHRoZSBIVFRQIGNsaWVudFxuICogQHJldHVybiB7Q29udGVudGZ1bEF4aW9zSW5zdGFuY2V9IEluaXRpYWxpemVkIGF4aW9zIGluc3RhbmNlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlSHR0cENsaWVudChheGlvcywgb3B0aW9ucykge1xuICB2YXIgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBpbnNlY3VyZTogZmFsc2UsXG4gICAgcmV0cnlPbkVycm9yOiB0cnVlLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbG9nSGFuZGxlcjogZnVuY3Rpb24gbG9nSGFuZGxlcihsZXZlbCwgZGF0YSkge1xuICAgICAgaWYgKGxldmVsID09PSAnZXJyb3InICYmIGRhdGEpIHtcbiAgICAgICAgdmFyIHRpdGxlID0gW2RhdGEubmFtZSwgZGF0YS5tZXNzYWdlXS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfSkuam9pbignIC0gJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbZXJyb3JdIFwiLmNvbmNhdCh0aXRsZSkpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiW1wiLmNvbmNhdChsZXZlbCwgXCJdIFwiKS5jb25jYXQoZGF0YSkpO1xuICAgIH0sXG4gICAgLy8gUGFzc2VkIHRvIGF4aW9zXG4gICAgaGVhZGVyczoge30sXG4gICAgaHR0cEFnZW50OiBmYWxzZSxcbiAgICBodHRwc0FnZW50OiBmYWxzZSxcbiAgICB0aW1lb3V0OiAzMDAwMCxcbiAgICB0aHJvdHRsZTogMCxcbiAgICBwcm94eTogZmFsc2UsXG4gICAgYmFzZVBhdGg6ICcnLFxuICAgIGFkYXB0ZXI6IHVuZGVmaW5lZCxcbiAgICBtYXhDb250ZW50TGVuZ3RoOiAxMDczNzQxODI0LFxuICAgIC8vIDFHQlxuICAgIG1heEJvZHlMZW5ndGg6IDEwNzM3NDE4MjQgLy8gMUdCXG5cbiAgfTtcblxuICB2YXIgY29uZmlnID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGRlZmF1bHRDb25maWcpLCBvcHRpb25zKTtcblxuICBpZiAoIWNvbmZpZy5hY2Nlc3NUb2tlbikge1xuICAgIHZhciBtaXNzaW5nQWNjZXNzVG9rZW5FcnJvciA9IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHBhcmFtZXRlciBhY2Nlc3NUb2tlbicpO1xuICAgIGNvbmZpZy5sb2dIYW5kbGVyKCdlcnJvcicsIG1pc3NpbmdBY2Nlc3NUb2tlbkVycm9yKTtcbiAgICB0aHJvdyBtaXNzaW5nQWNjZXNzVG9rZW5FcnJvcjtcbiAgfSAvLyBDb25zdHJ1Y3QgYXhpb3MgYmFzZVVSTCBvcHRpb25cblxuXG4gIHZhciBwcm90b2NvbCA9IGNvbmZpZy5pbnNlY3VyZSA/ICdodHRwJyA6ICdodHRwcyc7XG4gIHZhciBzcGFjZSA9IGNvbmZpZy5zcGFjZSA/IFwiXCIuY29uY2F0KGNvbmZpZy5zcGFjZSwgXCIvXCIpIDogJyc7XG4gIHZhciBob3N0bmFtZSA9IGNvbmZpZy5kZWZhdWx0SG9zdG5hbWU7XG4gIHZhciBwb3J0ID0gY29uZmlnLmluc2VjdXJlID8gODAgOiA0NDM7XG5cbiAgaWYgKGNvbmZpZy5ob3N0ICYmIEhPU1RfUkVHRVgudGVzdChjb25maWcuaG9zdCkpIHtcbiAgICB2YXIgcGFyc2VkID0gY29uZmlnLmhvc3Quc3BsaXQoJzonKTtcblxuICAgIGlmIChwYXJzZWQubGVuZ3RoID09PSAyKSB7XG5cbiAgICAgIHZhciBfcGFyc2VkID0gX3NsaWNlZFRvQXJyYXkocGFyc2VkLCAyKTtcblxuICAgICAgaG9zdG5hbWUgPSBfcGFyc2VkWzBdO1xuICAgICAgcG9ydCA9IF9wYXJzZWRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGhvc3RuYW1lID0gcGFyc2VkWzBdO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhhdCBiYXNlUGF0aCBkb2VzIHN0YXJ0IGJ1dCBub3QgZW5kIHdpdGggYSBzbGFzaFxuXG5cbiAgaWYgKGNvbmZpZy5iYXNlUGF0aCkge1xuICAgIGNvbmZpZy5iYXNlUGF0aCA9IFwiL1wiLmNvbmNhdChjb25maWcuYmFzZVBhdGguc3BsaXQoJy8nKS5maWx0ZXIoQm9vbGVhbikuam9pbignLycpKTtcbiAgfVxuXG4gIHZhciBiYXNlVVJMID0gb3B0aW9ucy5iYXNlVVJMIHx8IFwiXCIuY29uY2F0KHByb3RvY29sLCBcIjovL1wiKS5jb25jYXQoaG9zdG5hbWUsIFwiOlwiKS5jb25jYXQocG9ydCkuY29uY2F0KGNvbmZpZy5iYXNlUGF0aCwgXCIvc3BhY2VzL1wiKS5jb25jYXQoc3BhY2UpO1xuXG4gIGlmICghY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiAmJiB0eXBlb2YgY29uZmlnLmFjY2Vzc1Rva2VuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIGNvbmZpZy5hY2Nlc3NUb2tlbjtcbiAgfSAvLyBTZXQgdGhlc2UgaGVhZGVycyBvbmx5IGZvciBub2RlIGJlY2F1c2UgYnJvd3NlcnMgZG9uJ3QgbGlrZSBpdCB3aGVuIHlvdVxuICAvLyBvdmVycmlkZSB1c2VyLWFnZW50IG9yIGFjY2VwdC1lbmNvZGluZy5cbiAgLy8gVGhlIFNES3Mgc2hvdWxkIHNldCB0aGVpciBvd24gWC1Db250ZW50ZnVsLVVzZXItQWdlbnQuXG5cblxuICBpZiAoaXNOb2RlKCkpIHtcbiAgICBjb25maWcuaGVhZGVyc1sndXNlci1hZ2VudCddID0gJ25vZGUuanMvJyArIGdldE5vZGVWZXJzaW9uKCk7XG4gICAgY29uZmlnLmhlYWRlcnNbJ0FjY2VwdC1FbmNvZGluZyddID0gJ2d6aXAnO1xuICB9XG5cbiAgdmFyIGF4aW9zT3B0aW9ucyA9IHtcbiAgICAvLyBBeGlvc1xuICAgIGJhc2VVUkw6IGJhc2VVUkwsXG4gICAgaGVhZGVyczogY29uZmlnLmhlYWRlcnMsXG4gICAgaHR0cEFnZW50OiBjb25maWcuaHR0cEFnZW50LFxuICAgIGh0dHBzQWdlbnQ6IGNvbmZpZy5odHRwc0FnZW50LFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IHFzLnN0cmluZ2lmeSxcbiAgICBwcm94eTogY29uZmlnLnByb3h5LFxuICAgIHRpbWVvdXQ6IGNvbmZpZy50aW1lb3V0LFxuICAgIGFkYXB0ZXI6IGNvbmZpZy5hZGFwdGVyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoLFxuICAgIG1heEJvZHlMZW5ndGg6IGNvbmZpZy5tYXhCb2R5TGVuZ3RoLFxuICAgIC8vIENvbnRlbnRmdWxcbiAgICBsb2dIYW5kbGVyOiBjb25maWcubG9nSGFuZGxlcixcbiAgICByZXNwb25zZUxvZ2dlcjogY29uZmlnLnJlc3BvbnNlTG9nZ2VyLFxuICAgIHJlcXVlc3RMb2dnZXI6IGNvbmZpZy5yZXF1ZXN0TG9nZ2VyLFxuICAgIHJldHJ5T25FcnJvcjogY29uZmlnLnJldHJ5T25FcnJvclxuICB9O1xuICB2YXIgaW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoYXhpb3NPcHRpb25zKTtcbiAgaW5zdGFuY2UuaHR0cENsaWVudFBhcmFtcyA9IG9wdGlvbnM7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGF4aW9zIGluc3RhbmNlIHdpdGggdGhlIHNhbWUgZGVmYXVsdCBiYXNlIHBhcmFtZXRlcnMgYXMgdGhlXG4gICAqIGN1cnJlbnQgb25lLCBhbmQgd2l0aCBhbnkgb3ZlcnJpZGVzIHBhc3NlZCB0byB0aGUgbmV3UGFyYW1zIG9iamVjdFxuICAgKiBUaGlzIGlzIHVzZWZ1bCBhcyB0aGUgU0RLcyB1c2UgZGVwZW5kZW5jeSBpbmplY3Rpb24gdG8gZ2V0IHRoZSBheGlvcyBsaWJyYXJ5XG4gICAqIGFuZCB0aGUgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSBjb21lcyBmcm9tIGRpZmZlcmVudCBwbGFjZXMgZGVwZW5kaW5nXG4gICAqIG9uIHdoZXRoZXIgaXQncyBhIGJyb3dzZXIgYnVpbGQgb3IgYSBub2RlLmpzIGJ1aWxkLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0NyZWF0ZUh0dHBDbGllbnRQYXJhbXN9IGh0dHBDbGllbnRQYXJhbXMgLSBJbml0aWFsaXphdGlvbiBwYXJhbWV0ZXJzIGZvciB0aGUgSFRUUCBjbGllbnRcbiAgICogQHJldHVybiB7Q29udGVudGZ1bEF4aW9zSW5zdGFuY2V9IEluaXRpYWxpemVkIGF4aW9zIGluc3RhbmNlXG4gICAqL1xuXG4gIGluc3RhbmNlLmNsb25lV2l0aE5ld1BhcmFtcyA9IGZ1bmN0aW9uIChuZXdQYXJhbXMpIHtcbiAgICByZXR1cm4gY3JlYXRlSHR0cENsaWVudChheGlvcywgX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGNvcHkob3B0aW9ucykpLCBuZXdQYXJhbXMpKTtcbiAgfTtcbiAgLyoqXG4gICAqIEFwcGx5IGludGVyY2VwdG9ycy5cbiAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGUgb3JkZXIgb2YgaW50ZXJjZXB0b3JzIGlzIGltcG9ydGFudFxuICAgKi9cblxuXG4gIGlmIChjb25maWcub25CZWZvcmVSZXF1ZXN0KSB7XG4gICAgaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGNvbmZpZy5vbkJlZm9yZVJlcXVlc3QpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjb25maWcuYWNjZXNzVG9rZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICBhc3luY1Rva2VuKGluc3RhbmNlLCBjb25maWcuYWNjZXNzVG9rZW4pO1xuICB9XG5cbiAgaWYgKGNvbmZpZy50aHJvdHRsZSkge1xuICAgIHJhdGVMaW1pdFRocm90dGxlKGluc3RhbmNlLCBjb25maWcudGhyb3R0bGUpO1xuICB9XG5cbiAgcmF0ZUxpbWl0KGluc3RhbmNlLCBjb25maWcucmV0cnlMaW1pdCk7XG5cbiAgaWYgKGNvbmZpZy5vbkVycm9yKSB7XG4gICAgaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LCBjb25maWcub25FcnJvcik7XG4gIH1cblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqXG4gKiBDcmVhdGVzIHJlcXVlc3QgcGFyYW1ldGVycyBjb25maWd1cmF0aW9uIGJ5IHBhcnNpbmcgYW4gZXhpc3RpbmcgcXVlcnkgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5XG4gKiBAcmV0dXJuIHtPYmplY3R9IENvbmZpZyBvYmplY3Qgd2l0aCBgcGFyYW1zYCBwcm9wZXJ0eSwgcmVhZHkgdG8gYmUgdXNlZCBpbiBheGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0Q29uZmlnKF9yZWYpIHtcbiAgdmFyIHF1ZXJ5ID0gX3JlZi5xdWVyeTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuICBkZWxldGUgcXVlcnkucmVzb2x2ZUxpbmtzO1xuICBjb25maWcucGFyYW1zID0gY29weShxdWVyeSk7XG4gIHJldHVybiBjb25maWc7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBlbmZvcmNlT2JqUGF0aChvYmosIHBhdGgpIHtcbiAgaWYgKCEocGF0aCBpbiBvYmopKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpO1xuICAgIGVyci5uYW1lID0gJ1Byb3BlcnR5TWlzc2luZyc7XG4gICAgZXJyLm1lc3NhZ2UgPSBcIlJlcXVpcmVkIHByb3BlcnR5IFwiLmNvbmNhdChwYXRoLCBcIiBtaXNzaW5nIGZyb206XFxuXFxuXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShvYmopLCBcIlxcblxcblwiKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gY29waWVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2ZyZWV6ZVxuZnVuY3Rpb24gZGVlcEZyZWV6ZShvYmplY3QpIHtcbiAgdmFyIHByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XG5cbiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHByb3BOYW1lcyksXG4gICAgICBfc3RlcDtcblxuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgbmFtZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgJiYgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGRlZXBGcmVlemUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IuZigpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUob2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gZnJlZXplU3lzKG9iaikge1xuICBkZWVwRnJlZXplKG9iai5zeXMgfHwge30pO1xuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBnZXRCcm93c2VyT1MoKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcblxuICBpZiAoIXdpbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHVzZXJBZ2VudCA9IHdpbi5uYXZpZ2F0b3IudXNlckFnZW50OyAvLyBUT0RPOiBwbGF0Zm9ybSBpcyBkZXByZWNhdGVkLlxuXG4gIHZhciBwbGF0Zm9ybSA9IHdpbi5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIHZhciBtYWNvc1BsYXRmb3JtcyA9IFsnTWFjaW50b3NoJywgJ01hY0ludGVsJywgJ01hY1BQQycsICdNYWM2OEsnXTtcbiAgdmFyIHdpbmRvd3NQbGF0Zm9ybXMgPSBbJ1dpbjMyJywgJ1dpbjY0JywgJ1dpbmRvd3MnLCAnV2luQ0UnXTtcbiAgdmFyIGlvc1BsYXRmb3JtcyA9IFsnaVBob25lJywgJ2lQYWQnLCAnaVBvZCddO1xuXG4gIGlmIChtYWNvc1BsYXRmb3Jtcy5pbmRleE9mKHBsYXRmb3JtKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gJ21hY09TJztcbiAgfSBlbHNlIGlmIChpb3NQbGF0Zm9ybXMuaW5kZXhPZihwbGF0Zm9ybSkgIT09IC0xKSB7XG4gICAgcmV0dXJuICdpT1MnO1xuICB9IGVsc2UgaWYgKHdpbmRvd3NQbGF0Zm9ybXMuaW5kZXhPZihwbGF0Zm9ybSkgIT09IC0xKSB7XG4gICAgcmV0dXJuICdXaW5kb3dzJztcbiAgfSBlbHNlIGlmICgvQW5kcm9pZC8udGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgcmV0dXJuICdBbmRyb2lkJztcbiAgfSBlbHNlIGlmICgvTGludXgvLnRlc3QocGxhdGZvcm0pKSB7XG4gICAgcmV0dXJuICdMaW51eCc7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZU9TKCkge1xuICB2YXIgcGxhdGZvcm0gPSBwcm9jZXNzLnBsYXRmb3JtIHx8ICdsaW51eCc7XG4gIHZhciB2ZXJzaW9uID0gcHJvY2Vzcy52ZXJzaW9uIHx8ICcwLjAuMCc7XG4gIHZhciBwbGF0Zm9ybU1hcCA9IHtcbiAgICBhbmRyb2lkOiAnQW5kcm9pZCcsXG4gICAgYWl4OiAnTGludXgnLFxuICAgIGRhcndpbjogJ21hY09TJyxcbiAgICBmcmVlYnNkOiAnTGludXgnLFxuICAgIGxpbnV4OiAnTGludXgnLFxuICAgIG9wZW5ic2Q6ICdMaW51eCcsXG4gICAgc3Vub3M6ICdMaW51eCcsXG4gICAgd2luMzI6ICdXaW5kb3dzJ1xuICB9O1xuXG4gIGlmIChwbGF0Zm9ybSBpbiBwbGF0Zm9ybU1hcCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChwbGF0Zm9ybU1hcFtwbGF0Zm9ybV0gfHwgJ0xpbnV4JywgXCIvXCIpLmNvbmNhdCh2ZXJzaW9uKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRVc2VyQWdlbnRIZWFkZXIoc2RrLCBhcHBsaWNhdGlvbiwgaW50ZWdyYXRpb24sIGZlYXR1cmUpIHtcbiAgdmFyIGhlYWRlclBhcnRzID0gW107XG5cbiAgaWYgKGFwcGxpY2F0aW9uKSB7XG4gICAgaGVhZGVyUGFydHMucHVzaChcImFwcCBcIi5jb25jYXQoYXBwbGljYXRpb24pKTtcbiAgfVxuXG4gIGlmIChpbnRlZ3JhdGlvbikge1xuICAgIGhlYWRlclBhcnRzLnB1c2goXCJpbnRlZ3JhdGlvbiBcIi5jb25jYXQoaW50ZWdyYXRpb24pKTtcbiAgfVxuXG4gIGlmIChmZWF0dXJlKSB7XG4gICAgaGVhZGVyUGFydHMucHVzaCgnZmVhdHVyZSAnICsgZmVhdHVyZSk7XG4gIH1cblxuICBoZWFkZXJQYXJ0cy5wdXNoKFwic2RrIFwiLmNvbmNhdChzZGspKTtcbiAgdmFyIHBsYXRmb3JtID0gbnVsbDtcblxuICB0cnkge1xuICAgIGlmIChpc1JlYWN0TmF0aXZlKCkpIHtcbiAgICAgIHBsYXRmb3JtID0gZ2V0QnJvd3Nlck9TKCk7XG4gICAgICBoZWFkZXJQYXJ0cy5wdXNoKCdwbGF0Zm9ybSBSZWFjdE5hdGl2ZScpO1xuICAgIH0gZWxzZSBpZiAoaXNOb2RlKCkpIHtcbiAgICAgIHBsYXRmb3JtID0gZ2V0Tm9kZU9TKCk7XG4gICAgICBoZWFkZXJQYXJ0cy5wdXNoKFwicGxhdGZvcm0gbm9kZS5qcy9cIi5jb25jYXQoZ2V0Tm9kZVZlcnNpb24oKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGF0Zm9ybSA9IGdldEJyb3dzZXJPUygpO1xuICAgICAgaGVhZGVyUGFydHMucHVzaCgncGxhdGZvcm0gYnJvd3NlcicpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHBsYXRmb3JtID0gbnVsbDtcbiAgfVxuXG4gIGlmIChwbGF0Zm9ybSkge1xuICAgIGhlYWRlclBhcnRzLnB1c2goXCJvcyBcIi5jb25jYXQocGxhdGZvcm0pKTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChoZWFkZXJQYXJ0cy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbSAhPT0gJyc7XG4gIH0pLmpvaW4oJzsgJyksIFwiO1wiKTtcbn1cblxuLyoqXG4gKiBNaXhlcyBpbiBhIG1ldGhvZCB0byByZXR1cm4ganVzdCBhIHBsYWluIG9iamVjdCB3aXRoIG5vIGFkZGl0aW9uYWwgbWV0aG9kc1xuICogQHByaXZhdGVcbiAqIEBwYXJhbSBkYXRhIC0gQW55IHBsYWluIEpTT04gcmVzcG9uc2UgcmV0dXJuZWQgZnJvbSB0aGUgQVBJXG4gKiBAcmV0dXJuIEVuaGFuY2VkIG9iamVjdCB3aXRoIHRvUGxhaW5PYmplY3QgbWV0aG9kXG4gKi9cblxuZnVuY3Rpb24gdG9QbGFpbk9iamVjdChkYXRhKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwgJ3RvUGxhaW5PYmplY3QnLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgcmV0dXJuIGNvcHkodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBIYW5kbGVzIGVycm9ycyByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIuIFBhcnNlcyB0aGUgZXJyb3IgaW50byBhIG1vcmUgdXNlZnVsXG4gKiBmb3JtYXQsIHBsYWNlcyBpdCBpbiBhbiBleGNlcHRpb24gYW5kIHRocm93cyBpdC5cbiAqIFNlZSBodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVmZXJlbmNlcy9lcnJvcnMvXG4gKiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoZSBkYXRhIHJlY2VpdmVkIG9uIHRoZSBlcnJvclJlc3BvbnNlLmRhdGEgcHJvcGVydHlcbiAqIGFuZCB0aGUgZXhwZWN0ZWQgZXJyb3IgY29kZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlcnJvckhhbmRsZXIoZXJyb3JSZXNwb25zZSkge1xuICB2YXIgY29uZmlnID0gZXJyb3JSZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZSA9IGVycm9yUmVzcG9uc2UucmVzcG9uc2U7XG4gIHZhciBlcnJvck5hbWU7IC8vIE9ic2N1cmUgdGhlIE1hbmFnZW1lbnQgdG9rZW5cblxuICBpZiAoY29uZmlnICYmIGNvbmZpZy5oZWFkZXJzICYmIGNvbmZpZy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10pIHtcbiAgICB2YXIgdG9rZW4gPSBcIi4uLlwiLmNvbmNhdChjb25maWcuaGVhZGVyc1snQXV0aG9yaXphdGlvbiddLnN1YnN0cigtNSkpO1xuICAgIGNvbmZpZy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBcIkJlYXJlciBcIi5jb25jYXQodG9rZW4pO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KHJlc3BvbnNlKSB8fCAhaXNQbGFpbk9iamVjdChjb25maWcpKSB7XG4gICAgdGhyb3cgZXJyb3JSZXNwb25zZTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLmRhdGE7XG4gIHZhciBlcnJvckRhdGEgPSB7XG4gICAgc3RhdHVzOiByZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2Uuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgIG1lc3NhZ2U6ICcnLFxuICAgIGRldGFpbHM6IHt9XG4gIH07XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QoY29uZmlnKSkge1xuICAgIGVycm9yRGF0YS5yZXF1ZXN0ID0ge1xuICAgICAgdXJsOiBjb25maWcudXJsLFxuICAgICAgaGVhZGVyczogY29uZmlnLmhlYWRlcnMsXG4gICAgICBtZXRob2Q6IGNvbmZpZy5tZXRob2QsXG4gICAgICBwYXlsb2FkRGF0YTogY29uZmlnLmRhdGFcbiAgICB9O1xuICB9XG5cbiAgaWYgKGRhdGEgJiYgaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGlmICgncmVxdWVzdElkJyBpbiBkYXRhKSB7XG4gICAgICBlcnJvckRhdGEucmVxdWVzdElkID0gZGF0YS5yZXF1ZXN0SWQgfHwgJ1VOS05PV04nO1xuICAgIH1cblxuICAgIGlmICgnbWVzc2FnZScgaW4gZGF0YSkge1xuICAgICAgZXJyb3JEYXRhLm1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2UgfHwgJyc7XG4gICAgfVxuXG4gICAgaWYgKCdkZXRhaWxzJyBpbiBkYXRhKSB7XG4gICAgICBlcnJvckRhdGEuZGV0YWlscyA9IGRhdGEuZGV0YWlscyB8fCB7fTtcbiAgICB9XG5cbiAgICBpZiAoJ3N5cycgaW4gZGF0YSkge1xuICAgICAgaWYgKCdpZCcgaW4gZGF0YS5zeXMpIHtcbiAgICAgICAgZXJyb3JOYW1lID0gZGF0YS5zeXMuaWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG4gIGVycm9yLm5hbWUgPSBlcnJvck5hbWUgJiYgZXJyb3JOYW1lICE9PSAnVW5rbm93bicgPyBlcnJvck5hbWUgOiBcIlwiLmNvbmNhdChyZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2Uuc3RhdHVzLCBcIiBcIikuY29uY2F0KHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5zdGF0dXNUZXh0KTtcblxuICB0cnkge1xuICAgIGVycm9yLm1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShlcnJvckRhdGEsIG51bGwsICcgICcpO1xuICB9IGNhdGNoIChfdW51c2VkKSB7XG4gICAgdmFyIF9lcnJvckRhdGEkbWVzc2FnZTtcblxuICAgIGVycm9yLm1lc3NhZ2UgPSAoX2Vycm9yRGF0YSRtZXNzYWdlID0gZXJyb3JEYXRhID09PSBudWxsIHx8IGVycm9yRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3JEYXRhLm1lc3NhZ2UpICE9PSBudWxsICYmIF9lcnJvckRhdGEkbWVzc2FnZSAhPT0gdm9pZCAwID8gX2Vycm9yRGF0YSRtZXNzYWdlIDogJyc7XG4gIH1cblxuICB0aHJvdyBlcnJvcjtcbn1cblxuZXhwb3J0IHsgY3JlYXRlSHR0cENsaWVudCwgY3JlYXRlUmVxdWVzdENvbmZpZywgZW5mb3JjZU9ialBhdGgsIGVycm9ySGFuZGxlciwgZnJlZXplU3lzLCBnZXRVc2VyQWdlbnRIZWFkZXIsIHRvUGxhaW5PYmplY3QgfTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsW1wiZmFzdC1jb3B5XCJdID0gZmFjdG9yeSgpKTtcbn0pKHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciB0b1N0cmluZ0Z1bmN0aW9uID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLCBnZXRQcm90b3R5cGVPZiQxID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBfYSA9IE9iamVjdC5wcm90b3R5cGUsIGhhc093blByb3BlcnR5ID0gX2EuaGFzT3duUHJvcGVydHksIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gX2EucHJvcGVydHlJc0VudW1lcmFibGU7XG4gICAgdmFyIFNZTUJPTF9QUk9QRVJUSUVTID0gdHlwZW9mIGdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJztcbiAgICB2YXIgV0VBS19NQVAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlQ2FjaGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGdldCBhIG5ldyBjYWNoZSBvYmplY3QgdG8gcHJldmVudCBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IGNhY2hlIG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjcmVhdGVDYWNoZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChXRUFLX01BUCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBXZWFrTWFwKCk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIENhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gQ2FjaGUoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2FjaGUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF+dGhpcy5fa2V5cy5pbmRleE9mKGtleSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgQ2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzW3RoaXMuX2tleXMuaW5kZXhPZihrZXkpXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBDYWNoZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIENhY2hlO1xuICAgICAgICB9KCkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IENhY2hlKCk7IH07XG4gICAgfSkoKTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gZ2V0Q2xlYW5DbG9uZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogZ2V0IGFuIGVtcHR5IHZlcnNpb24gb2YgdGhlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHByb3RvdHlwZSBpdCBoYXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgdGhlIG9iamVjdCB0byBidWlsZCBhIGNsZWFuIGNsb25lIGZyb21cbiAgICAgKiBAcGFyYW0gcmVhbG0gdGhlIHJlYWxtIHRoZSBvYmplY3QgcmVzaWRlcyBpblxuICAgICAqIEByZXR1cm5zIHRoZSBlbXB0eSBjbG9uZWQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGdldENsZWFuQ2xvbmUgPSBmdW5jdGlvbiAob2JqZWN0LCByZWFsbSkge1xuICAgICAgICB2YXIgcHJvdG90eXBlID0gb2JqZWN0Ll9fcHJvdG9fXyB8fCBnZXRQcm90b3R5cGVPZiQxKG9iamVjdCk7XG4gICAgICAgIGlmICghcHJvdG90eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSByZWFsbS5PYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm90b3R5cGUgPT09IHJlYWxtLk9iamVjdC5wcm90b3R5cGUgPyB7fSA6IGNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh+dG9TdHJpbmdGdW5jdGlvbi5jYWxsKENvbnN0cnVjdG9yKS5pbmRleE9mKCdbbmF0aXZlIGNvZGVdJykpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlKHByb3RvdHlwZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gZ2V0T2JqZWN0Q2xvbmVMb29zZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogZ2V0IGEgY29weSBvZiB0aGUgb2JqZWN0IGJhc2VkIG9uIGxvb3NlIHJ1bGVzLCBtZWFuaW5nIGFsbCBlbnVtZXJhYmxlIGtleXNcbiAgICAgKiBhbmQgc3ltYm9scyBhcmUgY29waWVkLCBidXQgcHJvcGVydHkgZGVzY3JpcHRvcnMgYXJlIG5vdCBjb25zaWRlcmVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0IHRoZSBvYmplY3QgdG8gY2xvbmVcbiAgICAgKiBAcGFyYW0gcmVhbG0gdGhlIHJlYWxtIHRoZSBvYmplY3QgcmVzaWRlcyBpblxuICAgICAqIEBwYXJhbSBoYW5kbGVDb3B5IHRoZSBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgY29weWluZyB0aGUgb2JqZWN0XG4gICAgICogQHJldHVybnMgdGhlIGNvcGllZCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgZ2V0T2JqZWN0Q2xvbmVMb29zZSA9IGZ1bmN0aW9uIChvYmplY3QsIHJlYWxtLCBoYW5kbGVDb3B5LCBjYWNoZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSBnZXRDbGVhbkNsb25lKG9iamVjdCwgcmVhbG0pO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBjYWNoZS5zZXQob2JqZWN0LCBjbG9uZSk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgIGNsb25lW2tleV0gPSBoYW5kbGVDb3B5KG9iamVjdFtrZXldLCBjYWNoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFNZTUJPTF9QUk9QRVJUSUVTKSB7XG4gICAgICAgICAgICB2YXIgc3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGhfMSA9IHN5bWJvbHMubGVuZ3RoLCBzeW1ib2wgPSB2b2lkIDA7IGluZGV4IDwgbGVuZ3RoXzE7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBzeW1ib2xzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVbc3ltYm9sXSA9IGhhbmRsZUNvcHkob2JqZWN0W3N5bWJvbF0sIGNhY2hlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uIGdldE9iamVjdENsb25lU3RyaWN0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBnZXQgYSBjb3B5IG9mIHRoZSBvYmplY3QgYmFzZWQgb24gc3RyaWN0IHJ1bGVzLCBtZWFuaW5nIGFsbCBrZXlzIGFuZCBzeW1ib2xzXG4gICAgICogYXJlIGNvcGllZCBiYXNlZCBvbiB0aGUgb3JpZ2luYWwgcHJvcGVydHkgZGVzY3JpcHRvcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgdGhlIG9iamVjdCB0byBjbG9uZVxuICAgICAqIEBwYXJhbSByZWFsbSB0aGUgcmVhbG0gdGhlIG9iamVjdCByZXNpZGVzIGluXG4gICAgICogQHBhcmFtIGhhbmRsZUNvcHkgdGhlIGZ1bmN0aW9uIHRoYXQgaGFuZGxlcyBjb3B5aW5nIHRoZSBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB0aGUgY29waWVkIG9iamVjdFxuICAgICAqL1xuICAgIHZhciBnZXRPYmplY3RDbG9uZVN0cmljdCA9IGZ1bmN0aW9uIChvYmplY3QsIHJlYWxtLCBoYW5kbGVDb3B5LCBjYWNoZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSBnZXRDbGVhbkNsb25lKG9iamVjdCwgcmVhbG0pO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBjYWNoZS5zZXQob2JqZWN0LCBjbG9uZSk7XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gU1lNQk9MX1BST1BFUlRJRVNcbiAgICAgICAgICAgID8gZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSlcbiAgICAgICAgICAgIDogZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aF8yID0gcHJvcGVydGllcy5sZW5ndGgsIHByb3BlcnR5ID0gdm9pZCAwLCBkZXNjcmlwdG9yID0gdm9pZCAwOyBpbmRleCA8IGxlbmd0aF8yOyArK2luZGV4KSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSAnY2FsbGVlJyAmJiBwcm9wZXJ0eSAhPT0gJ2NhbGxlcicpIHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgY2xvbmUgdGhlIHZhbHVlIGlmIGFjdHVhbGx5IGEgdmFsdWUsIG5vdCBhIGdldHRlciAvIHNldHRlci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXNjcmlwdG9yLmdldCAmJiAhZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBoYW5kbGVDb3B5KG9iamVjdFtwcm9wZXJ0eV0sIGNhY2hlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkoY2xvbmUsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRlZSBhYm92ZSBjYW4gZmFpbCBvbiBub2RlIGluIGVkZ2UgY2FzZXMsIHNvIGZhbGwgYmFjayB0byB0aGUgbG9vc2UgYXNzaWdubWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lW3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluIGV4dHJhIGVkZ2UgY2FzZXMgd2hlcmUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgY2Fubm90IGJlIHJldHJpdmVkLCBmYWxsIGJhY2sgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGxvb3NlIGFzc2lnbm1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGNsb25lW3Byb3BlcnR5XSA9IGhhbmRsZUNvcHkob2JqZWN0W3Byb3BlcnR5XSwgY2FjaGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gZ2V0UmVnRXhwRmxhZ3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGdldCB0aGUgZmxhZ3MgdG8gYXBwbHkgdG8gdGhlIGNvcGllZCByZWdleHBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWdFeHAgdGhlIHJlZ2V4cCB0byBnZXQgdGhlIGZsYWdzIG9mXG4gICAgICogQHJldHVybnMgdGhlIGZsYWdzIGZvciB0aGUgcmVnZXhwXG4gICAgICovXG4gICAgdmFyIGdldFJlZ0V4cEZsYWdzID0gZnVuY3Rpb24gKHJlZ0V4cCkge1xuICAgICAgICB2YXIgZmxhZ3MgPSAnJztcbiAgICAgICAgaWYgKHJlZ0V4cC5nbG9iYWwpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnRXhwLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICdpJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnRXhwLm11bHRpbGluZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ20nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdFeHAudW5pY29kZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ3UnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdFeHAuc3RpY2t5KSB7XG4gICAgICAgICAgICBmbGFncyArPSAneSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZsYWdzO1xuICAgIH07XG5cbiAgICAvLyB1dGlsc1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIEdMT0JBTF9USElTID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QsIHJldHVybmluZyBcInRoaXNcIi4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9KSgpO1xuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvbiBjb3B5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBjb3B5IGFuIHZhbHVlIGRlZXBseSBhcyBtdWNoIGFzIHBvc3NpYmxlXG4gICAgICpcbiAgICAgKiBJZiBgc3RyaWN0YCBpcyBhcHBsaWVkLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIChpbmNsdWRpbmcgbm9uLWVudW1lcmFibGUgb25lcylcbiAgICAgKiBhcmUgY29waWVkIHdpdGggdGhlaXIgb3JpZ2luYWwgcHJvcGVydHkgZGVzY3JpcHRvcnMgb24gYm90aCBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBUaGUgdmFsdWUgaXMgY29tcGFyZWQgdG8gdGhlIGdsb2JhbCBjb25zdHJ1Y3RvcnMgaW4gdGhlIGByZWFsbWAgcHJvdmlkZWQsXG4gICAgICogYW5kIHRoZSBuYXRpdmUgY29uc3RydWN0b3IgaXMgYWx3YXlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgZXh0ZW5zaW9ucyBvZiBuYXRpdmVcbiAgICAgKiBvYmplY3RzIChhbGxvd3MgaW4gRVMyMDE1KykgYXJlIG1haW50YWluZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGNvcHlcbiAgICAgKiBAcGFyYW0gW29wdGlvbnNdIHRoZSBvcHRpb25zIGZvciBjb3B5aW5nIHdpdGhcbiAgICAgKiBAcGFyYW0gW29wdGlvbnMuaXNTdHJpY3RdIHNob3VsZCB0aGUgY29weSBiZSBzdHJpY3RcbiAgICAgKiBAcGFyYW0gW29wdGlvbnMucmVhbG1dIHRoZSByZWFsbSAodGhpcykgdmFsdWUgdGhlIHZhbHVlIGlzIGNvcGllZCBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIGNvcGllZCB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHkodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbWFudWFsbHkgY29hbGVzY2VkIGluc3RlYWQgb2YgZGVmYXVsdCBwYXJhbWV0ZXJzIGZvciBwZXJmb3JtYW5jZVxuICAgICAgICB2YXIgaXNTdHJpY3QgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuaXNTdHJpY3QpO1xuICAgICAgICB2YXIgcmVhbG0gPSAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWxtKSB8fCBHTE9CQUxfVEhJUztcbiAgICAgICAgdmFyIGdldE9iamVjdENsb25lID0gaXNTdHJpY3QgPyBnZXRPYmplY3RDbG9uZVN0cmljdCA6IGdldE9iamVjdENsb25lTG9vc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb24gaGFuZGxlQ29weVxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogY29weSB0aGUgdmFsdWUgcmVjdXJzaXZlbHkgYmFzZWQgb24gaXRzIHR5cGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBjb3B5XG4gICAgICAgICAqIEByZXR1cm5zIHRoZSBjb3BpZWQgdmFsdWVcbiAgICAgICAgICovXG4gICAgICAgIHZhciBoYW5kbGVDb3B5ID0gZnVuY3Rpb24gKHZhbHVlLCBjYWNoZSkge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhY2hlLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSB2YWx1ZS5fX3Byb3RvX18gfHwgZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgICAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gcHJvdG90eXBlICYmIHByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIC8vIHBsYWluIG9iamVjdHNcbiAgICAgICAgICAgIGlmICghQ29uc3RydWN0b3IgfHwgQ29uc3RydWN0b3IgPT09IHJlYWxtLk9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRPYmplY3RDbG9uZSh2YWx1ZSwgcmVhbG0sIGhhbmRsZUNvcHksIGNhY2hlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjbG9uZTtcbiAgICAgICAgICAgIC8vIGFycmF5c1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgc3RyaWN0LCBpbmNsdWRlIG5vbi1zdGFuZGFyZCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRPYmplY3RDbG9uZVN0cmljdCh2YWx1ZSwgcmVhbG0sIGhhbmRsZUNvcHksIGNhY2hlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aF8xID0gdmFsdWUubGVuZ3RoOyBpbmRleCA8IGxlbmd0aF8xOyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lW2luZGV4XSA9IGhhbmRsZUNvcHkodmFsdWVbaW5kZXhdLCBjYWNoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRhdGVzXG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiByZWFsbS5EYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih2YWx1ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVnZXhwc1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uUmVnRXhwKSB7XG4gICAgICAgICAgICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3IodmFsdWUuc291cmNlLCB2YWx1ZS5mbGFncyB8fCBnZXRSZWdFeHBGbGFncyh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGNsb25lLmxhc3RJbmRleCA9IHZhbHVlLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtYXBzXG4gICAgICAgICAgICBpZiAocmVhbG0uTWFwICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uTWFwKSB7XG4gICAgICAgICAgICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnNldChrZXksIGhhbmRsZUNvcHkodmFsdWUsIGNhY2hlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2V0c1xuICAgICAgICAgICAgaWYgKHJlYWxtLlNldCAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLlNldCkge1xuICAgICAgICAgICAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KHZhbHVlLCBjbG9uZSk7XG4gICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuYWRkKGhhbmRsZUNvcHkodmFsdWUsIGNhY2hlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYmxvYnNcbiAgICAgICAgICAgIGlmIChyZWFsbS5CbG9iICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uQmxvYikge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zbGljZSgwLCB2YWx1ZS5zaXplLCB2YWx1ZS50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJ1ZmZlcnMgKG5vZGUtb25seSlcbiAgICAgICAgICAgIGlmIChyZWFsbS5CdWZmZXIgJiYgcmVhbG0uQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNsb25lID0gcmVhbG0uQnVmZmVyLmFsbG9jVW5zYWZlXG4gICAgICAgICAgICAgICAgICAgID8gcmVhbG0uQnVmZmVyLmFsbG9jVW5zYWZlKHZhbHVlLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgQ29uc3RydWN0b3IodmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5jb3B5KGNsb25lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhcnJheWJ1ZmZlcnMgLyBkYXRhdmlld3NcbiAgICAgICAgICAgIGlmIChyZWFsbS5BcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIC8vIGRhdGF2aWV3c1xuICAgICAgICAgICAgICAgIGlmIChyZWFsbS5BcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKHZhbHVlLmJ1ZmZlci5zbGljZSgwKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldCh2YWx1ZSwgY2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGFycmF5YnVmZmVyc1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLkFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lID0gdmFsdWUuc2xpY2UoMCk7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldCh2YWx1ZSwgY2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgdGhlIHZhbHVlIGNhbm5vdCAvIHNob3VsZCBub3QgYmUgY2xvbmVkLCBkb24ndFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gcHJvbWlzZS1saWtlXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgIC8vIGVycm9yc1xuICAgICAgICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgRXJyb3IgfHxcbiAgICAgICAgICAgICAgICAvLyB3ZWFrbWFwc1xuICAgICAgICAgICAgICAgIChyZWFsbS5XZWFrTWFwICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uV2Vha01hcCkgfHxcbiAgICAgICAgICAgICAgICAvLyB3ZWFrc2V0c1xuICAgICAgICAgICAgICAgIChyZWFsbS5XZWFrU2V0ICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uV2Vha1NldCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhc3N1bWUgYW55dGhpbmcgbGVmdCBpcyBhIGN1c3RvbSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgcmV0dXJuIGdldE9iamVjdENsb25lKHZhbHVlLCByZWFsbSwgaGFuZGxlQ29weSwgY2FjaGUpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaGFuZGxlQ29weSh2YWx1ZSwgY3JlYXRlQ2FjaGUoKSk7XG4gICAgfVxuICAgIC8vIEFkZGluZyByZWZlcmVuY2UgdG8gYWxsb3cgdXNhZ2UgaW4gQ29tbW9uSlMgbGlicmFyaWVzIGNvbXBpbGVkIHVzaW5nIFRTQywgd2hpY2hcbiAgICAvLyBleHBlY3RzIHRoZXJlIHRvIGJlIGEgZGVmYXVsdCBwcm9wZXJ0eSBvbiB0aGUgZXhwb3J0ZWQgdmFsdWUuIFNlZVxuICAgIC8vIFsjMzddKGh0dHBzOi8vZ2l0aHViLmNvbS9wbGFudHRoZWlkZWEvZmFzdC1jb3B5L2lzc3Vlcy8zNykgZm9yIGRldGFpbHMuXG4gICAgY29weS5kZWZhdWx0ID0gY29weTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gc3RyaWN0Q29weVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogY29weSB0aGUgdmFsdWUgd2l0aCBgc3RyaWN0YCBvcHRpb24gcHJlLWFwcGxpZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gY29weVxuICAgICAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgZm9yIGNvcHlpbmcgd2l0aFxuICAgICAqIEBwYXJhbSBbb3B0aW9ucy5yZWFsbV0gdGhlIHJlYWxtICh0aGlzKSB2YWx1ZSB0aGUgdmFsdWUgaXMgY29waWVkIGZyb21cbiAgICAgKiBAcmV0dXJucyB0aGUgY29waWVkIHZhbHVlXG4gICAgICovXG4gICAgY29weS5zdHJpY3QgPSBmdW5jdGlvbiBzdHJpY3RDb3B5KHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBjb3B5KHZhbHVlLCB7XG4gICAgICAgICAgICBpc1N0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIHJlYWxtOiBvcHRpb25zID8gb3B0aW9ucy5yZWFsbSA6IHZvaWQgMCxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBjb3B5O1xuXG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYXN0LWNvcHkuanMubWFwXG4iLCJpbXBvcnQgU3R5bGlzIGZyb20gJ3N0eWxpcy9zdHlsaXMubWluJztcbmltcG9ydCBfaW5zZXJ0UnVsZVBsdWdpbiBmcm9tICdzdHlsaXMtcnVsZS1zaGVldCc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBjcmVhdGVDb250ZXh0LCBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc1ZhbGlkRWxlbWVudFR5cGUsIEZvcndhcmRSZWYgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHZhbGlkQXR0ciBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCBtZXJnZSBmcm9tICdtZXJnZS1hbnl0aGluZyc7XG5cbi8vIFxuXG52YXIgaW50ZXJsZWF2ZSA9IChmdW5jdGlvbiAoc3RyaW5ncywgaW50ZXJwb2xhdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtzdHJpbmdzWzBdXTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW50ZXJwb2xhdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0aW9uc1tpXSwgc3RyaW5nc1tpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cbnZhciBvYmplY3RXaXRob3V0UHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmosIGtleXMpIHtcbiAgdmFyIHRhcmdldCA9IHt9O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTtcbiAgICB0YXJnZXRbaV0gPSBvYmpbaV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbi8vIFxudmFyIGlzUGxhaW5PYmplY3QgPSAoZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoeCkpID09PSAnb2JqZWN0JyAmJiB4LmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59KTtcblxuLy8gXG52YXIgRU1QVFlfQVJSQVkgPSBPYmplY3QuZnJlZXplKFtdKTtcbnZhciBFTVBUWV9PQkpFQ1QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSh0YXJnZXQpIHtcbiAgcmV0dXJuIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiYgdGFyZ2V0IDogZmFsc2UpIHx8IHRhcmdldC5kaXNwbGF5TmFtZSB8fCB0YXJnZXQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn1cblxuLy8gXG5mdW5jdGlvbiBpc1N0YXRlbGVzc0Z1bmN0aW9uKHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmICEodGVzdC5wcm90b3R5cGUgJiYgdGVzdC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbi8vIFxuZnVuY3Rpb24gaXNTdHlsZWRDb21wb25lbnQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZyc7XG59XG5cbi8vIFxuXG52YXIgU0NfQVRUUiA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFIgfHwgcHJvY2Vzcy5lbnYuU0NfQVRUUikgfHwgJ2RhdGEtc3R5bGVkJztcblxudmFyIFNDX1ZFUlNJT05fQVRUUiA9ICdkYXRhLXN0eWxlZC12ZXJzaW9uJztcblxudmFyIFNDX1NUUkVBTV9BVFRSID0gJ2RhdGEtc3R5bGVkLXN0cmVhbWVkJztcblxudmFyIElTX0JST1dTRVIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnSFRNTEVsZW1lbnQnIGluIHdpbmRvdztcblxudmFyIERJU0FCTEVfU1BFRURZID0gdHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZID09PSAnYm9vbGVhbicgJiYgU0NfRElTQUJMRV9TUEVFRFkgfHwgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIChwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkgfHwgcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkpIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbi8vIFNoYXJlZCBlbXB0eSBleGVjdXRpb24gY29udGV4dCB3aGVuIGdlbmVyYXRpbmcgc3RhdGljIHN0eWxlc1xudmFyIFNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCA9IHt9O1xuXG4vLyBcblxuXG4vKipcbiAqIFBhcnNlIGVycm9ycy5tZCBhbmQgdHVybiBpdCBpbnRvIGEgc2ltcGxlIGhhc2ggb2YgY29kZTogbWVzc2FnZVxuICovXG52YXIgRVJST1JTID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgXCIxXCI6IFwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLFxuICBcIjJcIjogXCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIixcbiAgXCIzXCI6IFwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsXG4gIFwiNFwiOiBcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsXG4gIFwiNVwiOiBcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsXG4gIFwiNlwiOiBcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsXG4gIFwiN1wiOiBcIlRoZW1lUHJvdmlkZXI6IFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciBcXFwidGhlbWVcXFwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcblwiLFxuICBcIjhcIjogXCJUaGVtZVByb3ZpZGVyOiBQbGVhc2UgbWFrZSB5b3VyIFxcXCJ0aGVtZVxcXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuXCIsXG4gIFwiOVwiOiBcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIixcbiAgXCIxMFwiOiBcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsXG4gIFwiMTFcIjogXCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLFxuICBcIjEyXCI6IFwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsXG4gIFwiMTNcIjogXCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXCJcbn0gOiB7fTtcblxuLyoqXG4gKiBzdXBlciBiYXNpYyB2ZXJzaW9uIG9mIHNwcmludGZcbiAqL1xuZnVuY3Rpb24gZm9ybWF0KCkge1xuICB2YXIgYSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGIgPSBbXTtcblxuICBmb3IgKHZhciBjID0gMSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgYyA8IGxlbjsgYyArPSAxKSB7XG4gICAgYi5wdXNoKGFyZ3VtZW50cy5sZW5ndGggPD0gYyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tjXSk7XG4gIH1cblxuICBiLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICBhID0gYS5yZXBsYWNlKC8lW2Etel0vLCBkKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVycm9yIGZpbGUgb3V0IG9mIGVycm9ycy5tZCBmb3IgZGV2ZWxvcG1lbnQgYW5kIGEgc2ltcGxlIHdlYiBsaW5rIHRvIHRoZSBmdWxsIGVycm9yc1xuICogaW4gcHJvZHVjdGlvbiBtb2RlLlxuICovXG5cbnZhciBTdHlsZWRDb21wb25lbnRzRXJyb3IgPSBmdW5jdGlvbiAoX0Vycm9yKSB7XG4gIGluaGVyaXRzKFN0eWxlZENvbXBvbmVudHNFcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBTdHlsZWRDb21wb25lbnRzRXJyb3IoY29kZSkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlZENvbXBvbmVudHNFcnJvcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Vycm9yLmNhbGwodGhpcywgJ0FuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9lcnJvcnMubWQjJyArIGNvZGUgKyAnIGZvciBtb3JlIGluZm9ybWF0aW9uLicgKyAoaW50ZXJwb2xhdGlvbnMubGVuZ3RoID4gMCA/ICcgQWRkaXRpb25hbCBhcmd1bWVudHM6ICcgKyBpbnRlcnBvbGF0aW9ucy5qb2luKCcsICcpIDogJycpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Vycm9yLmNhbGwodGhpcywgZm9ybWF0LmFwcGx5KHVuZGVmaW5lZCwgW0VSUk9SU1tjb2RlXV0uY29uY2F0KGludGVycG9sYXRpb25zKSkudHJpbSgpKSk7XG4gICAgfVxuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcbiAgfVxuXG4gIHJldHVybiBTdHlsZWRDb21wb25lbnRzRXJyb3I7XG59KEVycm9yKTtcblxuLy8gXG52YXIgU0NfQ09NUE9ORU5UX0lEID0gL15bXlxcU1xcbl0qP1xcL1xcKiBzYy1jb21wb25lbnQtaWQ6XFxzKihcXFMrKVxccytcXCpcXC8vZ207XG5cbnZhciBleHRyYWN0Q29tcHMgPSAoZnVuY3Rpb24gKG1heWJlQ1NTKSB7XG4gIHZhciBjc3MgPSAnJyArIChtYXliZUNTUyB8fCAnJyk7IC8vIERlZmluaXRlbHkgYSBzdHJpbmcsIGFuZCBhIGNsb25lXG4gIHZhciBleGlzdGluZ0NvbXBvbmVudHMgPSBbXTtcbiAgY3NzLnJlcGxhY2UoU0NfQ09NUE9ORU5UX0lELCBmdW5jdGlvbiAobWF0Y2gsIGNvbXBvbmVudElkLCBtYXRjaEluZGV4KSB7XG4gICAgZXhpc3RpbmdDb21wb25lbnRzLnB1c2goeyBjb21wb25lbnRJZDogY29tcG9uZW50SWQsIG1hdGNoSW5kZXg6IG1hdGNoSW5kZXggfSk7XG4gICAgcmV0dXJuIG1hdGNoO1xuICB9KTtcbiAgcmV0dXJuIGV4aXN0aW5nQ29tcG9uZW50cy5tYXAoZnVuY3Rpb24gKF9yZWYsIGkpIHtcbiAgICB2YXIgY29tcG9uZW50SWQgPSBfcmVmLmNvbXBvbmVudElkLFxuICAgICAgICBtYXRjaEluZGV4ID0gX3JlZi5tYXRjaEluZGV4O1xuXG4gICAgdmFyIG5leHRDb21wID0gZXhpc3RpbmdDb21wb25lbnRzW2kgKyAxXTtcbiAgICB2YXIgY3NzRnJvbURPTSA9IG5leHRDb21wID8gY3NzLnNsaWNlKG1hdGNoSW5kZXgsIG5leHRDb21wLm1hdGNoSW5kZXgpIDogY3NzLnNsaWNlKG1hdGNoSW5kZXgpO1xuICAgIHJldHVybiB7IGNvbXBvbmVudElkOiBjb21wb25lbnRJZCwgY3NzRnJvbURPTTogY3NzRnJvbURPTSB9O1xuICB9KTtcbn0pO1xuXG4vLyBcblxudmFyIENPTU1FTlRfUkVHRVggPSAvXlxccypcXC9cXC8uKiQvZ207XG5cbi8vIE5PVEU6IFRoaXMgc3R5bGlzIGluc3RhbmNlIGlzIG9ubHkgdXNlZCB0byBzcGxpdCBydWxlcyBmcm9tIFNTUidkIHN0eWxlIHRhZ3NcbnZhciBzdHlsaXNTcGxpdHRlciA9IG5ldyBTdHlsaXMoe1xuICBnbG9iYWw6IGZhbHNlLFxuICBjYXNjYWRlOiB0cnVlLFxuICBrZXlmcmFtZTogZmFsc2UsXG4gIHByZWZpeDogZmFsc2UsXG4gIGNvbXByZXNzOiBmYWxzZSxcbiAgc2VtaWNvbG9uOiB0cnVlXG59KTtcblxudmFyIHN0eWxpcyA9IG5ldyBTdHlsaXMoe1xuICBnbG9iYWw6IGZhbHNlLFxuICBjYXNjYWRlOiB0cnVlLFxuICBrZXlmcmFtZTogZmFsc2UsXG4gIHByZWZpeDogdHJ1ZSxcbiAgY29tcHJlc3M6IGZhbHNlLFxuICBzZW1pY29sb246IGZhbHNlIC8vIE5PVEU6IFRoaXMgbWVhbnMgXCJhdXRvY29tcGxldGUgbWlzc2luZyBzZW1pY29sb25zXCJcbn0pO1xuXG4vLyBXcmFwIGBpbnNlcnRSdWxlUGx1Z2luIHRvIGJ1aWxkIGEgbGlzdCBvZiBydWxlcyxcbi8vIGFuZCB0aGVuIG1ha2Ugb3VyIG93biBwbHVnaW4gdG8gcmV0dXJuIHRoZSBydWxlcy4gVGhpc1xuLy8gbWFrZXMgaXQgZWFzaWVyIHRvIGhvb2sgaW50byB0aGUgZXhpc3RpbmcgU1NSIGFyY2hpdGVjdHVyZVxuXG52YXIgcGFyc2luZ1J1bGVzID0gW107XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIHJldHVyblJ1bGVzUGx1Z2luID0gZnVuY3Rpb24gcmV0dXJuUnVsZXNQbHVnaW4oY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gLTIpIHtcbiAgICB2YXIgcGFyc2VkUnVsZXMgPSBwYXJzaW5nUnVsZXM7XG4gICAgcGFyc2luZ1J1bGVzID0gW107XG4gICAgcmV0dXJuIHBhcnNlZFJ1bGVzO1xuICB9XG59O1xuXG52YXIgcGFyc2VSdWxlc1BsdWdpbiA9IF9pbnNlcnRSdWxlUGx1Z2luKGZ1bmN0aW9uIChydWxlKSB7XG4gIHBhcnNpbmdSdWxlcy5wdXNoKHJ1bGUpO1xufSk7XG5cbnZhciBfY29tcG9uZW50SWQgPSB2b2lkIDA7XG52YXIgX3NlbGVjdG9yID0gdm9pZCAwO1xudmFyIF9zZWxlY3RvclJlZ2V4cCA9IHZvaWQgMDtcblxudmFyIHNlbGZSZWZlcmVuY2VSZXBsYWNlciA9IGZ1bmN0aW9uIHNlbGZSZWZlcmVuY2VSZXBsYWNlcihtYXRjaCwgb2Zmc2V0LCBzdHJpbmcpIHtcbiAgaWYgKFxuICAvLyB0aGUgZmlyc3Qgc2VsZi1yZWYgaXMgYWx3YXlzIHVudG91Y2hlZFxuICBvZmZzZXQgPiAwICYmXG4gIC8vIHRoZXJlIHNob3VsZCBiZSBhdCBsZWFzdCB0d28gc2VsZi1yZWZzIHRvIGRvIGEgcmVwbGFjZW1lbnQgKC5iID4gLmIpXG4gIHN0cmluZy5zbGljZSgwLCBvZmZzZXQpLmluZGV4T2YoX3NlbGVjdG9yKSAhPT0gLTEgJiZcbiAgLy8gbm8gY29uc2VjdXRpdmUgc2VsZiByZWZzICguYi5iKTsgdGhhdCBpcyBhIHByZWNlZGVuY2UgYm9vc3QgYW5kIHRyZWF0ZWQgZGlmZmVyZW50bHlcbiAgc3RyaW5nLnNsaWNlKG9mZnNldCAtIF9zZWxlY3Rvci5sZW5ndGgsIG9mZnNldCkgIT09IF9zZWxlY3Rvcikge1xuICAgIHJldHVybiAnLicgKyBfY29tcG9uZW50SWQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2g7XG59O1xuXG4vKipcbiAqIFdoZW4gd3JpdGluZyBhIHN0eWxlIGxpa2VcbiAqXG4gKiAmICsgJiB7XG4gKiAgIGNvbG9yOiByZWQ7XG4gKiB9XG4gKlxuICogVGhlIHNlY29uZCBhbXBlcnNhbmQgc2hvdWxkIGJlIGEgcmVmZXJlbmNlIHRvIHRoZSBzdGF0aWMgY29tcG9uZW50IGNsYXNzLiBzdHlsaXNcbiAqIGhhcyBubyBrbm93bGVkZ2Ugb2Ygc3RhdGljIGNsYXNzIHNvIHdlIGhhdmUgdG8gaW50ZWxsaWdlbnRseSByZXBsYWNlIHRoZSBiYXNlIHNlbGVjdG9yLlxuICovXG52YXIgc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luID0gZnVuY3Rpb24gc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luKGNvbnRleHQsIF8sIHNlbGVjdG9ycykge1xuICBpZiAoY29udGV4dCA9PT0gMiAmJiBzZWxlY3RvcnMubGVuZ3RoICYmIHNlbGVjdG9yc1swXS5sYXN0SW5kZXhPZihfc2VsZWN0b3IpID4gMCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHNlbGVjdG9yc1swXSA9IHNlbGVjdG9yc1swXS5yZXBsYWNlKF9zZWxlY3RvclJlZ2V4cCwgc2VsZlJlZmVyZW5jZVJlcGxhY2VyKTtcbiAgfVxufTtcblxuc3R5bGlzLnVzZShbc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luLCBwYXJzZVJ1bGVzUGx1Z2luLCByZXR1cm5SdWxlc1BsdWdpbl0pO1xuc3R5bGlzU3BsaXR0ZXIudXNlKFtwYXJzZVJ1bGVzUGx1Z2luLCByZXR1cm5SdWxlc1BsdWdpbl0pO1xuXG52YXIgc3BsaXRCeVJ1bGVzID0gZnVuY3Rpb24gc3BsaXRCeVJ1bGVzKGNzcykge1xuICByZXR1cm4gc3R5bGlzU3BsaXR0ZXIoJycsIGNzcyk7XG59O1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlSdWxlcyhydWxlcywgc2VsZWN0b3IsIHByZWZpeCkge1xuICB2YXIgY29tcG9uZW50SWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICcmJztcblxuICB2YXIgZmxhdENTUyA9IHJ1bGVzLmpvaW4oJycpLnJlcGxhY2UoQ09NTUVOVF9SRUdFWCwgJycpOyAvLyByZXBsYWNlIEpTIGNvbW1lbnRzXG5cbiAgdmFyIGNzc1N0ciA9IHNlbGVjdG9yICYmIHByZWZpeCA/IHByZWZpeCArICcgJyArIHNlbGVjdG9yICsgJyB7ICcgKyBmbGF0Q1NTICsgJyB9JyA6IGZsYXRDU1M7XG5cbiAgLy8gc3R5bGlzIGhhcyBubyBjb25jZXB0IG9mIHN0YXRlIHRvIGJlIHBhc3NlZCB0byBwbHVnaW5zXG4gIC8vIGJ1dCBzaW5jZSBKUyBpcyBzaW5nbGU9dGhyZWFkZWQsIHdlIGNhbiByZWx5IG9uIHRoYXQgdG8gZW5zdXJlXG4gIC8vIHRoZXNlIHByb3BlcnRpZXMgc3RheSBpbiBzeW5jIHdpdGggdGhlIGN1cnJlbnQgc3R5bGlzIHJ1blxuICBfY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcbiAgX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gIF9zZWxlY3RvclJlZ2V4cCA9IG5ldyBSZWdFeHAoJ1xcXFwnICsgX3NlbGVjdG9yICsgJ1xcXFxiJywgJ2cnKTtcblxuICByZXR1cm4gc3R5bGlzKHByZWZpeCB8fCAhc2VsZWN0b3IgPyAnJyA6IHNlbGVjdG9yLCBjc3NTdHIpO1xufVxuXG4vLyBcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSwgbm8tdW5kZWYgKi9cblxudmFyIGdldE5vbmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG59KTtcblxuLy8gXG4vKiBUaGVzZSBhcmUgaGVscGVycyBmb3IgdGhlIFN0eWxlVGFncyB0byBrZWVwIHRyYWNrIG9mIHRoZSBpbmplY3RlZFxuICogcnVsZSBuYW1lcyBmb3IgZWFjaCAoY29tcG9uZW50KSBJRCB0aGF0IHRoZXkncmUga2VlcGluZyB0cmFjayBvZi5cbiAqIFRoZXkncmUgY3J1Y2lhbCBmb3IgZGV0ZWN0aW5nIHdoZXRoZXIgYSBuYW1lIGhhcyBhbHJlYWR5IGJlZW5cbiAqIGluamVjdGVkLlxuICogKFRoaXMgZXhjbHVkZXMgcmVoeWRyYXRlZCBuYW1lcykgKi9cblxuLyogYWRkcyBhIG5ldyBJRDpuYW1lIHBhaXJpbmcgdG8gYSBuYW1lcyBkaWN0aW9uYXJ5ICovXG52YXIgYWRkTmFtZUZvcklkID0gZnVuY3Rpb24gYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSkge1xuICBpZiAobmFtZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHZhciBuYW1lc0ZvcklkID0gbmFtZXNbaWRdIHx8IChuYW1lc1tpZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICBuYW1lc0ZvcklkW25hbWVdID0gdHJ1ZTtcbiAgfVxufTtcblxuLyogcmVzZXRzIGFuIElEIGVudGlyZWx5IGJ5IG92ZXJ3cml0aW5nIGl0IGluIHRoZSBkaWN0aW9uYXJ5ICovXG52YXIgcmVzZXRJZE5hbWVzID0gZnVuY3Rpb24gcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgbmFtZXNbaWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn07XG5cbi8qIGZhY3RvcnkgZm9yIGEgbmFtZXMgZGljdGlvbmFyeSBjaGVja2luZyB0aGUgZXhpc3RhbmNlIG9mIGFuIElEOm5hbWUgcGFpcmluZyAqL1xudmFyIGhhc05hbWVGb3JJZCA9IGZ1bmN0aW9uIGhhc05hbWVGb3JJZChuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGlkLCBuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWVzW2lkXSAhPT0gdW5kZWZpbmVkICYmIG5hbWVzW2lkXVtuYW1lXTtcbiAgfTtcbn07XG5cbi8qIHN0cmluZ2lmaWVzIG5hbWVzIGZvciB0aGUgaHRtbC9lbGVtZW50IG91dHB1dCAqL1xudmFyIHN0cmluZ2lmeU5hbWVzID0gZnVuY3Rpb24gc3RyaW5naWZ5TmFtZXMobmFtZXMpIHtcbiAgdmFyIHN0ciA9ICcnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gIGZvciAodmFyIGlkIGluIG5hbWVzKSB7XG4gICAgc3RyICs9IE9iamVjdC5rZXlzKG5hbWVzW2lkXSkuam9pbignICcpICsgJyAnO1xuICB9XG4gIHJldHVybiBzdHIudHJpbSgpO1xufTtcblxuLyogY2xvbmVzIHRoZSBuZXN0ZWQgbmFtZXMgZGljdGlvbmFyeSAqL1xudmFyIGNsb25lTmFtZXMgPSBmdW5jdGlvbiBjbG9uZU5hbWVzKG5hbWVzKSB7XG4gIHZhciBjbG9uZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yICh2YXIgaWQgaW4gbmFtZXMpIHtcbiAgICBjbG9uZVtpZF0gPSBfZXh0ZW5kcyh7fSwgbmFtZXNbaWRdKTtcbiAgfVxuICByZXR1cm4gY2xvbmU7XG59O1xuXG4vLyBcblxuLyogVGhlc2UgYXJlIGhlbHBlcnMgdGhhdCBkZWFsIHdpdGggdGhlIGluc2VydFJ1bGUgKGFrYSBzcGVlZHkpIEFQSVxuICogVGhleSBhcmUgdXNlZCBpbiB0aGUgU3R5bGVUYWdzIGFuZCBzcGVjaWZpY2FsbHkgdGhlIHNwZWVkeSB0YWdcbiAqL1xuXG4vKiByZXRyaWV2ZSBhIHNoZWV0IGZvciBhIGdpdmVuIHN0eWxlIHRhZyAqL1xudmFyIHNoZWV0Rm9yVGFnID0gZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHRhZy5zaGVldCkgcmV0dXJuIHRhZy5zaGVldDtcblxuICAvKiBGaXJlZm94IHF1aXJrIHJlcXVpcmVzIHVzIHRvIHN0ZXAgdGhyb3VnaCBhbGwgc3R5bGVzaGVldHMgdG8gZmluZCBvbmUgb3duZWQgYnkgdGhlIGdpdmVuIHRhZyAqL1xuICB2YXIgc2l6ZSA9IHRhZy5vd25lckRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IDEpIHtcbiAgICB2YXIgc2hlZXQgPSB0YWcub3duZXJEb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKHNoZWV0Lm93bmVyTm9kZSA9PT0gdGFnKSByZXR1cm4gc2hlZXQ7XG4gIH1cblxuICAvKiB3ZSBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gZmluZCBhIHRhZyAqL1xuICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDEwKTtcbn07XG5cbi8qIGluc2VydCBhIHJ1bGUgc2FmZWx5IGFuZCByZXR1cm4gd2hldGhlciBpdCB3YXMgYWN0dWFsbHkgaW5qZWN0ZWQgKi9cbnZhciBzYWZlSW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIHNhZmVJbnNlcnRSdWxlKHNoZWV0LCBjc3NSdWxlLCBpbmRleCkge1xuICAvKiBhYm9ydCBlYXJseSBpZiBjc3NSdWxlIHN0cmluZyBpcyBmYWxzeSAqL1xuICBpZiAoIWNzc1J1bGUpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4SW5kZXggPSBzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG5cbiAgdHJ5IHtcbiAgICAvKiB1c2UgaW5zZXJ0UnVsZSBhbmQgY2FwIHBhc3NlZCBpbmRleCB3aXRoIG1heEluZGV4IChubyBvZiBjc3NSdWxlcykgKi9cbiAgICBzaGVldC5pbnNlcnRSdWxlKGNzc1J1bGUsIGluZGV4IDw9IG1heEluZGV4ID8gaW5kZXggOiBtYXhJbmRleCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8qIGFueSBlcnJvciBpbmRpY2F0ZXMgYW4gaW52YWxpZCBydWxlICovXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKiBkZWxldGVzIGBzaXplYCBydWxlcyBzdGFydGluZyBmcm9tIGByZW1vdmFsSW5kZXhgICovXG52YXIgZGVsZXRlUnVsZXMgPSBmdW5jdGlvbiBkZWxldGVSdWxlcyhzaGVldCwgcmVtb3ZhbEluZGV4LCBzaXplKSB7XG4gIHZhciBsb3dlckJvdW5kID0gcmVtb3ZhbEluZGV4IC0gc2l6ZTtcbiAgZm9yICh2YXIgaSA9IHJlbW92YWxJbmRleDsgaSA+IGxvd2VyQm91bmQ7IGkgLT0gMSkge1xuICAgIHNoZWV0LmRlbGV0ZVJ1bGUoaSk7XG4gIH1cbn07XG5cbi8vIFxuXG4vKiB0aGlzIG1hcmtlciBzZXBhcmF0ZXMgY29tcG9uZW50IHN0eWxlcyBhbmQgaXMgaW1wb3J0YW50IGZvciByZWh5ZHJhdGlvbiAqL1xudmFyIG1ha2VUZXh0TWFya2VyID0gZnVuY3Rpb24gbWFrZVRleHRNYXJrZXIoaWQpIHtcbiAgcmV0dXJuICdcXG4vKiBzYy1jb21wb25lbnQtaWQ6ICcgKyBpZCArICcgKi9cXG4nO1xufTtcblxuLyogYWRkIHVwIGFsbCBudW1iZXJzIGluIGFycmF5IHVwIHVudGlsIGFuZCBpbmNsdWRpbmcgdGhlIGluZGV4ICovXG52YXIgYWRkVXBVbnRpbEluZGV4ID0gZnVuY3Rpb24gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBpbmRleCkge1xuICB2YXIgdG90YWxVcFRvSW5kZXggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8PSBpbmRleDsgaSArPSAxKSB7XG4gICAgdG90YWxVcFRvSW5kZXggKz0gc2l6ZXNbaV07XG4gIH1cblxuICByZXR1cm4gdG90YWxVcFRvSW5kZXg7XG59O1xuXG4vKiBjcmVhdGUgYSBuZXcgc3R5bGUgdGFnIGFmdGVyIGxhc3RFbCAqL1xudmFyIG1ha2VTdHlsZVRhZyA9IGZ1bmN0aW9uIG1ha2VTdHlsZVRhZyh0YXJnZXQsIHRhZ0VsLCBpbnNlcnRCZWZvcmUpIHtcbiAgdmFyIHRhcmdldERvY3VtZW50ID0gZG9jdW1lbnQ7XG4gIGlmICh0YXJnZXQpIHRhcmdldERvY3VtZW50ID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7ZWxzZSBpZiAodGFnRWwpIHRhcmdldERvY3VtZW50ID0gdGFnRWwub3duZXJEb2N1bWVudDtcblxuICB2YXIgZWwgPSB0YXJnZXREb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBlbC5zZXRBdHRyaWJ1dGUoU0NfQVRUUiwgJycpO1xuICBlbC5zZXRBdHRyaWJ1dGUoU0NfVkVSU0lPTl9BVFRSLCBcIjQuNC4xXCIpO1xuXG4gIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gIGlmIChub25jZSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cblxuICAvKiBXb3JrIGFyb3VuZCBpbnNlcnRSdWxlIHF1aXJrIGluIEVkZ2VIVE1MICovXG4gIGVsLmFwcGVuZENoaWxkKHRhcmdldERvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG5cbiAgaWYgKHRhcmdldCAmJiAhdGFnRWwpIHtcbiAgICAvKiBBcHBlbmQgdG8gdGFyZ2V0IHdoZW4gbm8gcHJldmlvdXMgZWxlbWVudCB3YXMgcGFzc2VkICovXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXRhZ0VsIHx8ICF0YXJnZXQgfHwgIXRhZ0VsLnBhcmVudE5vZGUpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoNik7XG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IG5ldyBzdHlsZSB0YWcgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZSAqL1xuICAgIHRhZ0VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCBpbnNlcnRCZWZvcmUgPyB0YWdFbCA6IHRhZ0VsLm5leHRTaWJsaW5nKTtcbiAgfVxuXG4gIHJldHVybiBlbDtcbn07XG5cbi8qIHRha2VzIGEgY3NzIGZhY3RvcnkgZnVuY3Rpb24gYW5kIG91dHB1dHMgYW4gaHRtbCBzdHlsZWQgdGFnIGZhY3RvcnkgKi9cbnZhciB3cmFwQXNIdG1sVGFnID0gZnVuY3Rpb24gd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYWRkaXRpb25hbEF0dHJzKSB7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICB2YXIgYXR0cnMgPSBbbm9uY2UgJiYgJ25vbmNlPVwiJyArIG5vbmNlICsgJ1wiJywgU0NfQVRUUiArICc9XCInICsgc3RyaW5naWZ5TmFtZXMobmFtZXMpICsgJ1wiJywgU0NfVkVSU0lPTl9BVFRSICsgJz1cIicgKyBcIjQuNC4xXCIgKyAnXCInLCBhZGRpdGlvbmFsQXR0cnNdO1xuXG4gICAgdmFyIGh0bWxBdHRyID0gYXR0cnMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcbiAgICByZXR1cm4gJzxzdHlsZSAnICsgaHRtbEF0dHIgKyAnPicgKyBjc3MoKSArICc8L3N0eWxlPic7XG4gIH07XG59O1xuXG4vKiB0YWtlcyBhIGNzcyBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBvdXRwdXRzIGFuIGVsZW1lbnQgZmFjdG9yeSAqL1xudmFyIHdyYXBBc0VsZW1lbnQgPSBmdW5jdGlvbiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzO1xuXG4gICAgdmFyIHByb3BzID0gKF9wcm9wcyA9IHt9LCBfcHJvcHNbU0NfQVRUUl0gPSBzdHJpbmdpZnlOYW1lcyhuYW1lcyksIF9wcm9wc1tTQ19WRVJTSU9OX0FUVFJdID0gXCI0LjQuMVwiLCBfcHJvcHMpO1xuXG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHByb3BzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWRhbmdlclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzdHlsZScsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IGNzcygpIH0gfSkpO1xuICB9O1xufTtcblxudmFyIGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeSA9IGZ1bmN0aW9uIGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeShtYXJrZXJzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcmtlcnMpO1xuICB9O1xufTtcblxuLyogc3BlZWR5IHRhZ3MgdXRpbGlzZSBpbnNlcnRSdWxlICovXG52YXIgbWFrZVNwZWVkeVRhZyA9IGZ1bmN0aW9uIG1ha2VTcGVlZHlUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpIHtcbiAgdmFyIG5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIG1hcmtlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc2l6ZXMgPSBbXTtcblxuICB2YXIgZXh0cmFjdEltcG9ydCA9IGdldEltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZDtcbiAgLyogaW5kaWNhdGVzIHdoZXRoZXIgZ2V0SW1wb3J0UnVsZVRhZyB3YXMgY2FsbGVkICovXG4gIHZhciB1c2VkSW1wb3J0UnVsZVRhZyA9IGZhbHNlO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIG1hcmtlcnNbaWRdID0gc2l6ZXMubGVuZ3RoO1xuICAgIHNpemVzLnB1c2goMCk7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG5cbiAgICByZXR1cm4gbWFya2Vyc1tpZF07XG4gIH07XG5cbiAgdmFyIGluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMoaWQsIGNzc1J1bGVzLCBuYW1lKSB7XG4gICAgdmFyIG1hcmtlciA9IGluc2VydE1hcmtlcihpZCk7XG4gICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcoZWwpO1xuICAgIHZhciBpbnNlcnRJbmRleCA9IGFkZFVwVW50aWxJbmRleChzaXplcywgbWFya2VyKTtcblxuICAgIHZhciBpbmplY3RlZFJ1bGVzID0gMDtcbiAgICB2YXIgaW1wb3J0UnVsZXMgPSBbXTtcbiAgICB2YXIgY3NzUnVsZXNTaXplID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlc1NpemU7IGkgKz0gMSkge1xuICAgICAgdmFyIGNzc1J1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgIHZhciBtYXlIYXZlSW1wb3J0ID0gZXh0cmFjdEltcG9ydDsgLyogQGltcG9ydCBydWxlcyBhcmUgcmVvcmRlcmVkIHRvIGFwcGVhciBmaXJzdCAqL1xuICAgICAgaWYgKG1heUhhdmVJbXBvcnQgJiYgY3NzUnVsZS5pbmRleE9mKCdAaW1wb3J0JykgIT09IC0xKSB7XG4gICAgICAgIGltcG9ydFJ1bGVzLnB1c2goY3NzUnVsZSk7XG4gICAgICB9IGVsc2UgaWYgKHNhZmVJbnNlcnRSdWxlKHNoZWV0LCBjc3NSdWxlLCBpbnNlcnRJbmRleCArIGluamVjdGVkUnVsZXMpKSB7XG4gICAgICAgIG1heUhhdmVJbXBvcnQgPSBmYWxzZTtcbiAgICAgICAgaW5qZWN0ZWRSdWxlcyArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIGltcG9ydFJ1bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHVzZWRJbXBvcnRSdWxlVGFnID0gdHJ1ZTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldEltcG9ydFJ1bGVUYWcoKS5pbnNlcnRSdWxlcyhpZCArICctaW1wb3J0JywgaW1wb3J0UnVsZXMpO1xuICAgIH1cblxuICAgIHNpemVzW21hcmtlcl0gKz0gaW5qZWN0ZWRSdWxlczsgLyogYWRkIHVwIG5vIG9mIGluamVjdGVkIHJ1bGVzICovXG4gICAgYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZVJ1bGVzID0gZnVuY3Rpb24gcmVtb3ZlUnVsZXMoaWQpIHtcbiAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKG1hcmtlciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmIChlbC5pc0Nvbm5lY3RlZCA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgIHZhciBzaXplID0gc2l6ZXNbbWFya2VyXTtcbiAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyhlbCk7XG4gICAgdmFyIHJlbW92YWxJbmRleCA9IGFkZFVwVW50aWxJbmRleChzaXplcywgbWFya2VyKSAtIDE7XG4gICAgZGVsZXRlUnVsZXMoc2hlZXQsIHJlbW92YWxJbmRleCwgc2l6ZSk7XG4gICAgc2l6ZXNbbWFya2VyXSA9IDA7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG5cbiAgICBpZiAoZXh0cmFjdEltcG9ydCAmJiB1c2VkSW1wb3J0UnVsZVRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLnJlbW92ZVJ1bGVzKGlkICsgJy1pbXBvcnQnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICB2YXIgX3NoZWV0Rm9yVGFnID0gc2hlZXRGb3JUYWcoZWwpLFxuICAgICAgICBjc3NSdWxlcyA9IF9zaGVldEZvclRhZy5jc3NSdWxlcztcblxuICAgIHZhciBzdHIgPSAnJztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBzdHIgKz0gbWFrZVRleHRNYXJrZXIoaWQpO1xuICAgICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgICAgdmFyIGVuZCA9IGFkZFVwVW50aWxJbmRleChzaXplcywgbWFya2VyKTtcbiAgICAgIHZhciBzaXplID0gc2l6ZXNbbWFya2VyXTtcbiAgICAgIGZvciAodmFyIGkgPSBlbmQgLSBzaXplOyBpIDwgZW5kOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgICAgaWYgKHJ1bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0ciArPSBydWxlLmNzc1RleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig1KTtcbiAgICB9LFxuXG4gICAgY3NzOiBjc3MsXG4gICAgZ2V0SWRzOiBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkobWFya2VycyksXG4gICAgaGFzTmFtZUZvcklkOiBoYXNOYW1lRm9ySWQobmFtZXMpLFxuICAgIGluc2VydE1hcmtlcjogaW5zZXJ0TWFya2VyLFxuICAgIGluc2VydFJ1bGVzOiBpbnNlcnRSdWxlcyxcbiAgICByZW1vdmVSdWxlczogcmVtb3ZlUnVsZXMsXG4gICAgc2VhbGVkOiBmYWxzZSxcbiAgICBzdHlsZVRhZzogZWwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xufTtcblxudmFyIG1ha2VUZXh0Tm9kZSA9IGZ1bmN0aW9uIG1ha2VUZXh0Tm9kZSh0YXJnZXREb2N1bWVudCwgaWQpIHtcbiAgcmV0dXJuIHRhcmdldERvY3VtZW50LmNyZWF0ZVRleHROb2RlKG1ha2VUZXh0TWFya2VyKGlkKSk7XG59O1xuXG52YXIgbWFrZUJyb3dzZXJUYWcgPSBmdW5jdGlvbiBtYWtlQnJvd3NlclRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICB2YXIgbmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbWFya2VycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgdmFyIGV4dHJhY3RJbXBvcnQgPSBnZXRJbXBvcnRSdWxlVGFnICE9PSB1bmRlZmluZWQ7XG5cbiAgLyogaW5kaWNhdGVzIHdoZXRoZXIgZ2V0SW1wb3J0UnVsZVRhZyB3YXMgY2FsbGVkICovXG4gIHZhciB1c2VkSW1wb3J0UnVsZVRhZyA9IGZhbHNlO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIG1hcmtlcnNbaWRdID0gbWFrZVRleHROb2RlKGVsLm93bmVyRG9jdW1lbnQsIGlkKTtcbiAgICBlbC5hcHBlbmRDaGlsZChtYXJrZXJzW2lkXSk7XG4gICAgbmFtZXNbaWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHJldHVybiBtYXJrZXJzW2lkXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICB2YXIgaW1wb3J0UnVsZXMgPSBbXTtcbiAgICB2YXIgY3NzUnVsZXNTaXplID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlc1NpemU7IGkgKz0gMSkge1xuICAgICAgdmFyIHJ1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgIHZhciBtYXlIYXZlSW1wb3J0ID0gZXh0cmFjdEltcG9ydDtcbiAgICAgIGlmIChtYXlIYXZlSW1wb3J0ICYmIHJ1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSkge1xuICAgICAgICBpbXBvcnRSdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF5SGF2ZUltcG9ydCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gaSA9PT0gY3NzUnVsZXNTaXplIC0gMSA/ICcnIDogJyAnO1xuICAgICAgICBtYXJrZXIuYXBwZW5kRGF0YSgnJyArIHJ1bGUgKyBzZXBhcmF0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuXG4gICAgaWYgKGV4dHJhY3RJbXBvcnQgJiYgaW1wb3J0UnVsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdXNlZEltcG9ydFJ1bGVUYWcgPSB0cnVlO1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLmluc2VydFJ1bGVzKGlkICsgJy1pbXBvcnQnLCBpbXBvcnRSdWxlcyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgLyogY3JlYXRlIG5ldyBlbXB0eSB0ZXh0IG5vZGUgYW5kIHJlcGxhY2UgdGhlIGN1cnJlbnQgb25lICovXG4gICAgdmFyIG5ld01hcmtlciA9IG1ha2VUZXh0Tm9kZShlbC5vd25lckRvY3VtZW50LCBpZCk7XG4gICAgZWwucmVwbGFjZUNoaWxkKG5ld01hcmtlciwgbWFya2VyKTtcbiAgICBtYXJrZXJzW2lkXSA9IG5ld01hcmtlcjtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIHVzZWRJbXBvcnRSdWxlVGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkucmVtb3ZlUnVsZXMoaWQgKyAnLWltcG9ydCcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBzdHIgPSAnJztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBzdHIgKz0gbWFya2Vyc1tpZF0uZGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig1KTtcbiAgICB9LFxuXG4gICAgY3NzOiBjc3MsXG4gICAgZ2V0SWRzOiBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkobWFya2VycyksXG4gICAgaGFzTmFtZUZvcklkOiBoYXNOYW1lRm9ySWQobmFtZXMpLFxuICAgIGluc2VydE1hcmtlcjogaW5zZXJ0TWFya2VyLFxuICAgIGluc2VydFJ1bGVzOiBpbnNlcnRSdWxlcyxcbiAgICByZW1vdmVSdWxlczogcmVtb3ZlUnVsZXMsXG4gICAgc2VhbGVkOiBmYWxzZSxcbiAgICBzdHlsZVRhZzogZWwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xufTtcblxudmFyIG1ha2VTZXJ2ZXJUYWcgPSBmdW5jdGlvbiBtYWtlU2VydmVyVGFnKG5hbWVzQXJnLCBtYXJrZXJzQXJnKSB7XG4gIHZhciBuYW1lcyA9IG5hbWVzQXJnID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogbmFtZXNBcmc7XG4gIHZhciBtYXJrZXJzID0gbWFya2Vyc0FyZyA9PT0gdW5kZWZpbmVkID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IG1hcmtlcnNBcmc7XG5cbiAgdmFyIGluc2VydE1hcmtlciA9IGZ1bmN0aW9uIGluc2VydE1hcmtlcihpZCkge1xuICAgIHZhciBwcmV2ID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtlcnNbaWRdID0gWycnXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICBtYXJrZXJbMF0gKz0gY3NzUnVsZXMuam9pbignICcpO1xuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIG1hcmtlclswXSA9ICcnO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuICB9O1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICB2YXIgY3NzRm9ySWQgPSBtYXJrZXJzW2lkXVswXTtcbiAgICAgIGlmIChjc3NGb3JJZCkge1xuICAgICAgICBzdHIgKz0gbWFrZVRleHRNYXJrZXIoaWQpICsgY3NzRm9ySWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgdmFyIGNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgdmFyIG5hbWVzQ2xvbmUgPSBjbG9uZU5hbWVzKG5hbWVzKTtcbiAgICB2YXIgbWFya2Vyc0Nsb25lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBtYXJrZXJzQ2xvbmVbaWRdID0gW21hcmtlcnNbaWRdWzBdXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZVNlcnZlclRhZyhuYW1lc0Nsb25lLCBtYXJrZXJzQ2xvbmUpO1xuICB9O1xuXG4gIHZhciB0YWcgPSB7XG4gICAgY2xvbmU6IGNsb25lLFxuICAgIGNzczogY3NzLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIHNlYWxlZDogZmFsc2UsXG4gICAgc3R5bGVUYWc6IG51bGwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xuXG4gIHJldHVybiB0YWc7XG59O1xuXG52YXIgbWFrZVRhZyA9IGZ1bmN0aW9uIG1ha2VUYWcodGFyZ2V0LCB0YWdFbCwgZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICBpZiAoSVNfQlJPV1NFUiAmJiAhZm9yY2VTZXJ2ZXIpIHtcbiAgICB2YXIgZWwgPSBtYWtlU3R5bGVUYWcodGFyZ2V0LCB0YWdFbCwgaW5zZXJ0QmVmb3JlKTtcblxuICAgIGlmIChESVNBQkxFX1NQRUVEWSkge1xuICAgICAgcmV0dXJuIG1ha2VCcm93c2VyVGFnKGVsLCBnZXRJbXBvcnRSdWxlVGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1ha2VTcGVlZHlUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYWtlU2VydmVyVGFnKCk7XG59O1xuXG52YXIgcmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlKHRhZywgZWxzLCBleHRyYWN0ZWQpIHtcbiAgLyogYWRkIGFsbCBleHRyYWN0ZWQgY29tcG9uZW50cyB0byB0aGUgbmV3IHRhZyAqL1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXh0cmFjdGVkLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgdmFyIF9leHRyYWN0ZWQkaSA9IGV4dHJhY3RlZFtpXSxcbiAgICAgICAgY29tcG9uZW50SWQgPSBfZXh0cmFjdGVkJGkuY29tcG9uZW50SWQsXG4gICAgICAgIGNzc0Zyb21ET00gPSBfZXh0cmFjdGVkJGkuY3NzRnJvbURPTTtcblxuICAgIHZhciBjc3NSdWxlcyA9IHNwbGl0QnlSdWxlcyhjc3NGcm9tRE9NKTtcbiAgICB0YWcuaW5zZXJ0UnVsZXMoY29tcG9uZW50SWQsIGNzc1J1bGVzKTtcbiAgfVxuXG4gIC8qIHJlbW92ZSBvbGQgSFRNTFN0eWxlRWxlbWVudHMsIHNpbmNlIHRoZXkgaGF2ZSBiZWVuIHJlaHlkcmF0ZWQgKi9cbiAgZm9yICh2YXIgX2kgPSAwLCBfbGVuID0gZWxzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSArPSAxKSB7XG4gICAgdmFyIGVsID0gZWxzW19pXTtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSkge1xuICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBcblxudmFyIFNQTElUX1JFR0VYID0gL1xccysvO1xuXG4vKiBkZXRlcm1pbmUgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNvbXBvbmVudHMgYmVmb3JlIHRhZ3MgYXJlIHNoYXJkZWQgKi9cbnZhciBNQVhfU0laRSA9IHZvaWQgMDtcbmlmIChJU19CUk9XU0VSKSB7XG4gIC8qIGluIHNwZWVkeSBtb2RlIHdlIGNhbiBrZWVwIGEgbG90IG1vcmUgcnVsZXMgaW4gYSBzaGVldCBiZWZvcmUgYSBzbG93ZG93biBjYW4gYmUgZXhwZWN0ZWQgKi9cbiAgTUFYX1NJWkUgPSBESVNBQkxFX1NQRUVEWSA/IDQwIDogMTAwMDtcbn0gZWxzZSB7XG4gIC8qIGZvciBzZXJ2ZXJzIHdlIGRvIG5vdCBuZWVkIHRvIHNoYXJkIGF0IGFsbCAqL1xuICBNQVhfU0laRSA9IC0xO1xufVxuXG52YXIgc2hlZXRSdW5uaW5nSWQgPSAwO1xudmFyIG1hc3RlciA9IHZvaWQgMDtcblxudmFyIFN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLyogYSBtYXAgZnJvbSBpZHMgdG8gdGFncyAqL1xuXG4gIC8qIGRlZmVycmVkIHJ1bGVzIGZvciBhIGdpdmVuIGlkICovXG5cbiAgLyogdGhpcyBpcyB1c2VkIGZvciBub3QgcmVpbmplY3RpbmcgcnVsZXMgdmlhIGhhc05hbWVGb3JJZCgpICovXG5cbiAgLyogd2hlbiBydWxlcyBmb3IgYW4gaWQgYXJlIHJlbW92ZWQgdXNpbmcgcmVtb3ZlKCkgd2UgaGF2ZSB0byBpZ25vcmUgcmVoeWRyYXRlZE5hbWVzIGZvciBpdCAqL1xuXG4gIC8qIGEgbGlzdCBvZiB0YWdzIGJlbG9uZ2luZyB0byB0aGlzIFN0eWxlU2hlZXQgKi9cblxuICAvKiBhIHRhZyBmb3IgaW1wb3J0IHJ1bGVzICovXG5cbiAgLyogY3VycmVudCBjYXBhY2l0eSB1bnRpbCBhIG5ldyB0YWcgbXVzdCBiZSBjcmVhdGVkICovXG5cbiAgLyogY2hpbGRyZW4gKGFrYSBjbG9uZXMpIG9mIHRoaXMgU3R5bGVTaGVldCBpbmhlcml0aW5nIGFsbCBhbmQgZnV0dXJlIGluamVjdGlvbnMgKi9cblxuICBmdW5jdGlvbiBTdHlsZVNoZWV0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBJU19CUk9XU0VSID8gZG9jdW1lbnQuaGVhZCA6IG51bGw7XG4gICAgdmFyIGZvcmNlU2VydmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZVNoZWV0KTtcblxuICAgIHRoaXMuZ2V0SW1wb3J0UnVsZVRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbXBvcnRSdWxlVGFnID0gX3RoaXMuaW1wb3J0UnVsZVRhZztcblxuICAgICAgaWYgKGltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaW1wb3J0UnVsZVRhZztcbiAgICAgIH1cblxuICAgICAgdmFyIGZpcnN0VGFnID0gX3RoaXMudGFnc1swXTtcbiAgICAgIHZhciBpbnNlcnRCZWZvcmUgPSB0cnVlO1xuXG4gICAgICByZXR1cm4gX3RoaXMuaW1wb3J0UnVsZVRhZyA9IG1ha2VUYWcoX3RoaXMudGFyZ2V0LCBmaXJzdFRhZyA/IGZpcnN0VGFnLnN0eWxlVGFnIDogbnVsbCwgX3RoaXMuZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSk7XG4gICAgfTtcblxuICAgIHNoZWV0UnVubmluZ0lkICs9IDE7XG4gICAgdGhpcy5pZCA9IHNoZWV0UnVubmluZ0lkO1xuICAgIHRoaXMuZm9yY2VTZXJ2ZXIgPSBmb3JjZVNlcnZlcjtcbiAgICB0aGlzLnRhcmdldCA9IGZvcmNlU2VydmVyID8gbnVsbCA6IHRhcmdldDtcbiAgICB0aGlzLnRhZ01hcCA9IHt9O1xuICAgIHRoaXMuZGVmZXJyZWQgPSB7fTtcbiAgICB0aGlzLnJlaHlkcmF0ZWROYW1lcyA9IHt9O1xuICAgIHRoaXMuaWdub3JlUmVoeWRyYXRlZE5hbWVzID0ge307XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jYXBhY2l0eSA9IDE7XG4gICAgdGhpcy5jbG9uZXMgPSBbXTtcbiAgfVxuXG4gIC8qIHJlaHlkcmF0ZSBhbGwgU1NSJ2Qgc3R5bGUgdGFncyAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUucmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlJCQxKCkge1xuICAgIGlmICghSVNfQlJPV1NFUiB8fCB0aGlzLmZvcmNlU2VydmVyKSByZXR1cm4gdGhpcztcblxuICAgIHZhciBlbHMgPSBbXTtcbiAgICB2YXIgZXh0cmFjdGVkID0gW107XG4gICAgdmFyIGlzU3RyZWFtZWQgPSBmYWxzZTtcblxuICAgIC8qIHJldHJpZXZlIGFsbCBvZiBvdXIgU1NSIHN0eWxlIGVsZW1lbnRzIGZyb20gdGhlIERPTSAqL1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlWycgKyBTQ19BVFRSICsgJ11bJyArIFNDX1ZFUlNJT05fQVRUUiArICc9XCInICsgXCI0LjQuMVwiICsgJ1wiXScpO1xuXG4gICAgdmFyIG5vZGVzU2l6ZSA9IG5vZGVzLmxlbmd0aDtcblxuICAgIC8qIGFib3J0IHJlaHlkcmF0aW9uIGlmIG5vIHByZXZpb3VzIHN0eWxlIHRhZ3Mgd2VyZSBmb3VuZCAqL1xuICAgIGlmICghbm9kZXNTaXplKSByZXR1cm4gdGhpcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBlbCA9IG5vZGVzW2ldO1xuXG4gICAgICAvKiBjaGVjayBpZiBzdHlsZSB0YWcgaXMgYSBzdHJlYW1lZCB0YWcgKi9cbiAgICAgIGlmICghaXNTdHJlYW1lZCkgaXNTdHJlYW1lZCA9ICEhZWwuZ2V0QXR0cmlidXRlKFNDX1NUUkVBTV9BVFRSKTtcblxuICAgICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBuYW1lcyAqL1xuICAgICAgdmFyIGVsTmFtZXMgPSAoZWwuZ2V0QXR0cmlidXRlKFNDX0FUVFIpIHx8ICcnKS50cmltKCkuc3BsaXQoU1BMSVRfUkVHRVgpO1xuICAgICAgdmFyIGVsTmFtZXNTaXplID0gZWxOYW1lcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBqID0gMCwgbmFtZTsgaiA8IGVsTmFtZXNTaXplOyBqICs9IDEpIHtcbiAgICAgICAgbmFtZSA9IGVsTmFtZXNbal07XG4gICAgICAgIC8qIGFkZCByZWh5ZHJhdGVkIG5hbWUgdG8gc2hlZXQgdG8gYXZvaWQgcmUtYWRkaW5nIHN0eWxlcyAqL1xuICAgICAgICB0aGlzLnJlaHlkcmF0ZWROYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIGV4dHJhY3QgYWxsIGNvbXBvbmVudHMgYW5kIHRoZWlyIENTUyAqL1xuICAgICAgZXh0cmFjdGVkLnB1c2guYXBwbHkoZXh0cmFjdGVkLCBleHRyYWN0Q29tcHMoZWwudGV4dENvbnRlbnQpKTtcblxuICAgICAgLyogc3RvcmUgb3JpZ2luYWwgSFRNTFN0eWxlRWxlbWVudCAqL1xuICAgICAgZWxzLnB1c2goZWwpO1xuICAgIH1cblxuICAgIC8qIGFib3J0IHJlaHlkcmF0aW9uIGlmIG5vdGhpbmcgd2FzIGV4dHJhY3RlZCAqL1xuICAgIHZhciBleHRyYWN0ZWRTaXplID0gZXh0cmFjdGVkLmxlbmd0aDtcbiAgICBpZiAoIWV4dHJhY3RlZFNpemUpIHJldHVybiB0aGlzO1xuXG4gICAgLyogY3JlYXRlIGEgdGFnIHRvIGJlIHVzZWQgZm9yIHJlaHlkcmF0aW9uICovXG4gICAgdmFyIHRhZyA9IHRoaXMubWFrZVRhZyhudWxsKTtcblxuICAgIHJlaHlkcmF0ZSh0YWcsIGVscywgZXh0cmFjdGVkKTtcblxuICAgIC8qIHJlc2V0IGNhcGFjaXR5IGFuZCBhZGp1c3QgTUFYX1NJWkUgYnkgdGhlIGluaXRpYWwgc2l6ZSBvZiB0aGUgcmVoeWRyYXRpb24gKi9cbiAgICB0aGlzLmNhcGFjaXR5ID0gTWF0aC5tYXgoMSwgTUFYX1NJWkUgLSBleHRyYWN0ZWRTaXplKTtcbiAgICB0aGlzLnRhZ3MucHVzaCh0YWcpO1xuXG4gICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBpZHMgKi9cbiAgICBmb3IgKHZhciBfaiA9IDA7IF9qIDwgZXh0cmFjdGVkU2l6ZTsgX2ogKz0gMSkge1xuICAgICAgdGhpcy50YWdNYXBbZXh0cmFjdGVkW19qXS5jb21wb25lbnRJZF0gPSB0YWc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyogcmV0cmlldmUgYSBcIm1hc3RlclwiIGluc3RhbmNlIG9mIFN0eWxlU2hlZXQgd2hpY2ggaXMgdHlwaWNhbGx5IHVzZWQgd2hlbiBubyBvdGhlciBpcyBhdmFpbGFibGVcbiAgICogVGhlIG1hc3RlciBTdHlsZVNoZWV0IGlzIHRhcmdldGVkIGJ5IGNyZWF0ZUdsb2JhbFN0eWxlLCBrZXlmcmFtZXMsIGFuZCBjb21wb25lbnRzIG91dHNpZGUgb2YgYW55XG4gICAgKiBTdHlsZVNoZWV0TWFuYWdlcidzIGNvbnRleHQgKi9cblxuXG4gIC8qIHJlc2V0IHRoZSBpbnRlcm5hbCBcIm1hc3RlclwiIGluc3RhbmNlICovXG4gIFN0eWxlU2hlZXQucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2YXIgZm9yY2VTZXJ2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgbWFzdGVyID0gbmV3IFN0eWxlU2hlZXQodW5kZWZpbmVkLCBmb3JjZVNlcnZlcikucmVoeWRyYXRlKCk7XG4gIH07XG5cbiAgLyogYWRkcyBcImNoaWxkcmVuXCIgdG8gdGhlIFN0eWxlU2hlZXQgdGhhdCBpbmhlcml0IGFsbCBvZiB0aGUgcGFyZW50cycgcnVsZXNcbiAgICogd2hpbGUgdGhlaXIgb3duIHJ1bGVzIGRvIG5vdCBhZmZlY3QgdGhlIHBhcmVudCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldCh0aGlzLnRhcmdldCwgdGhpcy5mb3JjZVNlcnZlcik7XG5cbiAgICAvKiBhZGQgdG8gY2xvbmUgYXJyYXkgKi9cbiAgICB0aGlzLmNsb25lcy5wdXNoKHNoZWV0KTtcblxuICAgIC8qIGNsb25lIGFsbCB0YWdzICovXG4gICAgc2hlZXQudGFncyA9IHRoaXMudGFncy5tYXAoZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGlkcyA9IHRhZy5nZXRJZHMoKTtcbiAgICAgIHZhciBuZXdUYWcgPSB0YWcuY2xvbmUoKTtcblxuICAgICAgLyogcmVjb25zdHJ1Y3QgdGFnTWFwICovXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzaGVldC50YWdNYXBbaWRzW2ldXSA9IG5ld1RhZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1RhZztcbiAgICB9KTtcblxuICAgIC8qIGNsb25lIG90aGVyIG1hcHMgKi9cbiAgICBzaGVldC5yZWh5ZHJhdGVkTmFtZXMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5yZWh5ZHJhdGVkTmFtZXMpO1xuICAgIHNoZWV0LmRlZmVycmVkID0gX2V4dGVuZHMoe30sIHRoaXMuZGVmZXJyZWQpO1xuXG4gICAgcmV0dXJuIHNoZWV0O1xuICB9O1xuXG4gIC8qIGZvcmNlIFN0eWxlU2hlZXQgdG8gY3JlYXRlIGEgbmV3IHRhZyBvbiB0aGUgbmV4dCBpbmplY3Rpb24gKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnNlYWxBbGxUYWdzID0gZnVuY3Rpb24gc2VhbEFsbFRhZ3MoKSB7XG4gICAgdGhpcy5jYXBhY2l0eSA9IDE7XG5cbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIHRhZy5zZWFsZWQgPSB0cnVlO1xuICAgIH0pO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLm1ha2VUYWcgPSBmdW5jdGlvbiBtYWtlVGFnJCQxKHRhZykge1xuICAgIHZhciBsYXN0RWwgPSB0YWcgPyB0YWcuc3R5bGVUYWcgOiBudWxsO1xuICAgIHZhciBpbnNlcnRCZWZvcmUgPSBmYWxzZTtcblxuICAgIHJldHVybiBtYWtlVGFnKHRoaXMudGFyZ2V0LCBsYXN0RWwsIHRoaXMuZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSwgdGhpcy5nZXRJbXBvcnRSdWxlVGFnKTtcbiAgfTtcblxuICAvKiBnZXQgYSB0YWcgZm9yIGEgZ2l2ZW4gY29tcG9uZW50SWQsIGFzc2lnbiB0aGUgY29tcG9uZW50SWQgdG8gb25lLCBvciBzaGFyZCAqL1xuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5nZXRUYWdGb3JJZCA9IGZ1bmN0aW9uIGdldFRhZ0ZvcklkKGlkKSB7XG4gICAgLyogc2ltcGx5IHJldHVybiBhIHRhZywgd2hlbiB0aGUgY29tcG9uZW50SWQgd2FzIGFscmVhZHkgYXNzaWduZWQgb25lICovXG4gICAgdmFyIHByZXYgPSB0aGlzLnRhZ01hcFtpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCAmJiAhcHJldi5zZWFsZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgLyogc2hhcmQgKGNyZWF0ZSBhIG5ldyB0YWcpIGlmIHRoZSB0YWcgaXMgZXhoYXVzdGVkIChTZWUgTUFYX1NJWkUpICovXG4gICAgdGhpcy5jYXBhY2l0eSAtPSAxO1xuXG4gICAgaWYgKHRoaXMuY2FwYWNpdHkgPT09IDApIHtcbiAgICAgIHRoaXMuY2FwYWNpdHkgPSBNQVhfU0laRTtcbiAgICAgIHRhZyA9IHRoaXMubWFrZVRhZyh0YWcpO1xuICAgICAgdGhpcy50YWdzLnB1c2godGFnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50YWdNYXBbaWRdID0gdGFnO1xuICB9O1xuXG4gIC8qIG1haW5seSBmb3IgY3JlYXRlR2xvYmFsU3R5bGUgdG8gY2hlY2sgZm9yIGl0cyBpZCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuaGFzSWQgPSBmdW5jdGlvbiBoYXNJZChpZCkge1xuICAgIHJldHVybiB0aGlzLnRhZ01hcFtpZF0gIT09IHVuZGVmaW5lZDtcbiAgfTtcblxuICAvKiBjYWNoaW5nIGxheWVyIGNoZWNraW5nIGlkK25hbWUgdG8gYWxyZWFkeSBoYXZlIGEgY29ycmVzcG9uZGluZyB0YWcgYW5kIGluamVjdGVkIHJ1bGVzICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5oYXNOYW1lRm9ySWQgPSBmdW5jdGlvbiBoYXNOYW1lRm9ySWQoaWQsIG5hbWUpIHtcbiAgICAvKiBleGNlcHRpb24gZm9yIHJlaHlkcmF0ZWQgbmFtZXMgd2hpY2ggYXJlIGNoZWNrZWQgc2VwYXJhdGVseSAqL1xuICAgIGlmICh0aGlzLmlnbm9yZVJlaHlkcmF0ZWROYW1lc1tpZF0gPT09IHVuZGVmaW5lZCAmJiB0aGlzLnJlaHlkcmF0ZWROYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnTWFwW2lkXTtcbiAgICByZXR1cm4gdGFnICE9PSB1bmRlZmluZWQgJiYgdGFnLmhhc05hbWVGb3JJZChpZCwgbmFtZSk7XG4gIH07XG5cbiAgLyogcmVnaXN0ZXJzIGEgY29tcG9uZW50SWQgYW5kIHJlZ2lzdGVycyBpdCBvbiBpdHMgdGFnICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5kZWZlcnJlZEluamVjdCA9IGZ1bmN0aW9uIGRlZmVycmVkSW5qZWN0KGlkLCBjc3NSdWxlcykge1xuICAgIC8qIGRvbid0IGluamVjdCB3aGVuIHRoZSBpZCBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgKi9cbiAgICBpZiAodGhpcy50YWdNYXBbaWRdICE9PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBjbG9uZXMgPSB0aGlzLmNsb25lcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0uZGVmZXJyZWRJbmplY3QoaWQsIGNzc1J1bGVzKTtcbiAgICB9XG5cbiAgICB0aGlzLmdldFRhZ0ZvcklkKGlkKS5pbnNlcnRNYXJrZXIoaWQpO1xuICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gY3NzUnVsZXM7XG4gIH07XG5cbiAgLyogaW5qZWN0cyBydWxlcyBmb3IgYSBnaXZlbiBpZCB3aXRoIGEgbmFtZSB0aGF0IHdpbGwgbmVlZCB0byBiZSBjYWNoZWQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmluamVjdCA9IGZ1bmN0aW9uIGluamVjdChpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgY2xvbmVzID0gdGhpcy5jbG9uZXM7XG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0uaW5qZWN0KGlkLCBjc3NSdWxlcywgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMuZ2V0VGFnRm9ySWQoaWQpO1xuXG4gICAgLyogYWRkIGRlZmVycmVkIHJ1bGVzIGZvciBjb21wb25lbnQgKi9cbiAgICBpZiAodGhpcy5kZWZlcnJlZFtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQ29tYmluZSBwYXNzZWQgY3NzUnVsZXMgd2l0aCBwcmV2aW91c2x5IGRlZmVycmVkIENTUyBydWxlc1xuICAgICAgLy8gTk9URTogV2UgY2Fubm90IG11dGF0ZSB0aGUgZGVmZXJyZWQgYXJyYXkgaXRzZWxmIGFzIGFsbCBjbG9uZXNcbiAgICAgIC8vIGRvIHRoZSBzYW1lIChzZWUgY2xvbmVzW2ldLmluamVjdClcbiAgICAgIHZhciBydWxlcyA9IHRoaXMuZGVmZXJyZWRbaWRdLmNvbmNhdChjc3NSdWxlcyk7XG4gICAgICB0YWcuaW5zZXJ0UnVsZXMoaWQsIHJ1bGVzLCBuYW1lKTtcblxuICAgICAgdGhpcy5kZWZlcnJlZFtpZF0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZy5pbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpO1xuICAgIH1cbiAgfTtcblxuICAvKiByZW1vdmVzIGFsbCBydWxlcyBmb3IgYSBnaXZlbiBpZCwgd2hpY2ggZG9lc24ndCByZW1vdmUgaXRzIG1hcmtlciBidXQgcmVzZXRzIGl0ICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoaWQpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWdNYXBbaWRdO1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIGNsb25lcyA9IHRoaXMuY2xvbmVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNsb25lc1tpXS5yZW1vdmUoaWQpO1xuICAgIH1cblxuICAgIC8qIHJlbW92ZSBhbGwgcnVsZXMgZnJvbSB0aGUgdGFnICovXG4gICAgdGFnLnJlbW92ZVJ1bGVzKGlkKTtcblxuICAgIC8qIGlnbm9yZSBwb3NzaWJsZSByZWh5ZHJhdGVkIG5hbWVzICovXG4gICAgdGhpcy5pZ25vcmVSZWh5ZHJhdGVkTmFtZXNbaWRdID0gdHJ1ZTtcblxuICAgIC8qIGRlbGV0ZSBwb3NzaWJsZSBkZWZlcnJlZCBydWxlcyAqL1xuICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnRvSFRNTCA9IGZ1bmN0aW9uIHRvSFRNTCgpIHtcbiAgICByZXR1cm4gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnRvSFRNTCgpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnRvUmVhY3RFbGVtZW50cyA9IGZ1bmN0aW9uIHRvUmVhY3RFbGVtZW50cygpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkO1xuXG5cbiAgICByZXR1cm4gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnLCBpKSB7XG4gICAgICB2YXIga2V5ID0gJ3NjLScgKyBpZCArICctJyArIGk7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KHRhZy50b0VsZW1lbnQoKSwgeyBrZXk6IGtleSB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjcmVhdGVDbGFzcyhTdHlsZVNoZWV0LCBudWxsLCBbe1xuICAgIGtleTogJ21hc3RlcicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gbWFzdGVyIHx8IChtYXN0ZXIgPSBuZXcgU3R5bGVTaGVldCgpLnJlaHlkcmF0ZSgpKTtcbiAgICB9XG5cbiAgICAvKiBOT1RFOiBUaGlzIGlzIGp1c3QgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggamVzdC1zdHlsZWQtY29tcG9uZW50cyAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnN0YW5jZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gU3R5bGVTaGVldC5tYXN0ZXI7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG4vLyBcblxudmFyIEtleWZyYW1lcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gS2V5ZnJhbWVzKG5hbWUsIHJ1bGVzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEtleWZyYW1lcyk7XG5cbiAgICB0aGlzLmluamVjdCA9IGZ1bmN0aW9uIChzdHlsZVNoZWV0KSB7XG4gICAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKF90aGlzLmlkLCBfdGhpcy5uYW1lKSkge1xuICAgICAgICBzdHlsZVNoZWV0LmluamVjdChfdGhpcy5pZCwgX3RoaXMucnVsZXMsIF90aGlzLm5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigxMiwgU3RyaW5nKF90aGlzLm5hbWUpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG5cbiAgICB0aGlzLmlkID0gJ3NjLWtleWZyYW1lcy0nICsgbmFtZTtcbiAgfVxuXG4gIEtleWZyYW1lcy5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzO1xufSgpO1xuXG4vLyBcblxuLyoqXG4gKiBpbmxpbmVkIHZlcnNpb24gb2ZcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gKi9cblxudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxuLy8gXG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjg3YWFiZGZlMWI3NDYxZTczMzFhYmIzNjAxZDllNmJiMjc1NDRiYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzXG5mdW5jdGlvbiBhZGRVbml0SWZOZWVkZWQobmFtZSwgdmFsdWUpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtaWxhamFjay9lc2xpbnQtcGx1Z2luLWZsb3d0eXBlLWVycm9ycy9pc3N1ZXMvMTMzXG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDAgJiYgIShuYW1lIGluIHVuaXRsZXNzKSkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7IC8vIFByZXN1bWVzIGltcGxpY2l0ICdweCcgc3VmZml4IGZvciB1bml0bGVzcyBudW1iZXJzXG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS50cmltKCk7XG59XG5cbi8vIFxuXG4vKipcbiAqIEl0J3MgZmFsc2lzaCBub3QgZmFsc3kgYmVjYXVzZSAwIGlzIGFsbG93ZWQuXG4gKi9cbnZhciBpc0ZhbHNpc2ggPSBmdW5jdGlvbiBpc0ZhbHNpc2goY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rID09PSB1bmRlZmluZWQgfHwgY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IGZhbHNlIHx8IGNodW5rID09PSAnJztcbn07XG5cbnZhciBvYmpUb0Nzc0FycmF5ID0gZnVuY3Rpb24gb2JqVG9Dc3NBcnJheShvYmosIHByZXZLZXkpIHtcbiAgdmFyIHJ1bGVzID0gW107XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaXNGYWxzaXNoKG9ialtrZXldKSkge1xuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qob2JqW2tleV0pKSB7XG4gICAgICAgIHJ1bGVzLnB1c2guYXBwbHkocnVsZXMsIG9ialRvQ3NzQXJyYXkob2JqW2tleV0sIGtleSkpO1xuXG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgICAgcnVsZXMucHVzaChoeXBoZW5hdGVTdHlsZU5hbWUoa2V5KSArICc6Jywgb2JqW2tleV0sICc7Jyk7XG5cbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgICAgfVxuICAgICAgcnVsZXMucHVzaChoeXBoZW5hdGVTdHlsZU5hbWUoa2V5KSArICc6ICcgKyBhZGRVbml0SWZOZWVkZWQoa2V5LCBvYmpba2V5XSkgKyAnOycpO1xuICAgIH1cbiAgICByZXR1cm4gcnVsZXM7XG4gIH0pO1xuXG4gIHJldHVybiBwcmV2S2V5ID8gW3ByZXZLZXkgKyAnIHsnXS5jb25jYXQocnVsZXMsIFsnfSddKSA6IHJ1bGVzO1xufTtcblxuZnVuY3Rpb24gZmxhdHRlbihjaHVuaywgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaHVuaykpIHtcbiAgICB2YXIgcnVsZVNldCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aCwgcmVzdWx0OyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHJlc3VsdCA9IGZsYXR0ZW4oY2h1bmtbaV0sIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBjb250aW51ZTtlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHJ1bGVTZXQucHVzaC5hcHBseShydWxlU2V0LCByZXN1bHQpO2Vsc2UgcnVsZVNldC5wdXNoKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGVTZXQ7XG4gIH1cblxuICBpZiAoaXNGYWxzaXNoKGNodW5rKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyogSGFuZGxlIG90aGVyIGNvbXBvbmVudHMgKi9cbiAgaWYgKGlzU3R5bGVkQ29tcG9uZW50KGNodW5rKSkge1xuICAgIHJldHVybiAnLicgKyBjaHVuay5zdHlsZWRDb21wb25lbnRJZDtcbiAgfVxuXG4gIC8qIEVpdGhlciBleGVjdXRlIG9yIGRlZmVyIHRoZSBmdW5jdGlvbiAqL1xuICBpZiAoaXNGdW5jdGlvbihjaHVuaykpIHtcbiAgICBpZiAoaXNTdGF0ZWxlc3NGdW5jdGlvbihjaHVuaykgJiYgZXhlY3V0aW9uQ29udGV4dCkge1xuICAgICAgdmFyIF9yZXN1bHQgPSBjaHVuayhleGVjdXRpb25Db250ZXh0KTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNFbGVtZW50KF9yZXN1bHQpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihnZXRDb21wb25lbnROYW1lKGNodW5rKSArICcgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmxhdHRlbihfcmVzdWx0LCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgICB9IGVsc2UgcmV0dXJuIGNodW5rO1xuICB9XG5cbiAgaWYgKGNodW5rIGluc3RhbmNlb2YgS2V5ZnJhbWVzKSB7XG4gICAgaWYgKHN0eWxlU2hlZXQpIHtcbiAgICAgIGNodW5rLmluamVjdChzdHlsZVNoZWV0KTtcbiAgICAgIHJldHVybiBjaHVuay5nZXROYW1lKCk7XG4gICAgfSBlbHNlIHJldHVybiBjaHVuaztcbiAgfVxuXG4gIC8qIEhhbmRsZSBvYmplY3RzICovXG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGNodW5rKSA/IG9ialRvQ3NzQXJyYXkoY2h1bmspIDogY2h1bmsudG9TdHJpbmcoKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGNzcyhzdHlsZXMpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVycG9sYXRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChpc0Z1bmN0aW9uKHN0eWxlcykgfHwgaXNQbGFpbk9iamVjdChzdHlsZXMpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBmbGF0dGVuKGludGVybGVhdmUoRU1QVFlfQVJSQVksIFtzdHlsZXNdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpKTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIGZsYXR0ZW4oaW50ZXJsZWF2ZShzdHlsZXMsIGludGVycG9sYXRpb25zKSk7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBFTVBUWV9PQkpFQ1Q7XG5cbiAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUodGFnKSkge1xuICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMSwgU3RyaW5nKHRhZykpO1xuICB9XG5cbiAgLyogVGhpcyBpcyBjYWxsYWJsZSBkaXJlY3RseSBhcyBhIHRlbXBsYXRlIGZ1bmN0aW9uICovXG4gIC8vICRGbG93Rml4TWU6IE5vdCB0eXBlZCB0byBhdm9pZCBkZXN0cnVjdHVyaW5nIGFyZ3VtZW50c1xuICB2YXIgdGVtcGxhdGVGdW5jdGlvbiA9IGZ1bmN0aW9uIHRlbXBsYXRlRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudENvbnN0cnVjdG9yKHRhZywgb3B0aW9ucywgY3NzLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgLyogSWYgY29uZmlnIG1ldGhvZHMgYXJlIGNhbGxlZCwgd3JhcCB1cCBhIG5ldyB0ZW1wbGF0ZSBmdW5jdGlvbiBhbmQgbWVyZ2Ugb3B0aW9ucyAqL1xuICB0ZW1wbGF0ZUZ1bmN0aW9uLndpdGhDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBjb25maWcpKTtcbiAgfTtcblxuICAvKiBNb2RpZnkvaW5qZWN0IG5ldyBwcm9wcyBhdCBydW50aW1lICovXG4gIHRlbXBsYXRlRnVuY3Rpb24uYXR0cnMgPSBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY29tcG9uZW50Q29uc3RydWN0b3IsIHRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGF0dHJzOiBBcnJheS5wcm90b3R5cGUuY29uY2F0KG9wdGlvbnMuYXR0cnMsIGF0dHJzKS5maWx0ZXIoQm9vbGVhbilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHRlbXBsYXRlRnVuY3Rpb247XG59XG5cbi8vIFxuLy8gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanMvYmxvYi9tYXN0ZXIvbXVybXVyaGFzaDJfZ2MuanNcbmZ1bmN0aW9uIG11cm11cmhhc2goYykge1xuICBmb3IgKHZhciBlID0gYy5sZW5ndGggfCAwLCBhID0gZSB8IDAsIGQgPSAwLCBiOyBlID49IDQ7KSB7XG4gICAgYiA9IGMuY2hhckNvZGVBdChkKSAmIDI1NSB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgOCB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgMTYgfCAoYy5jaGFyQ29kZUF0KCsrZCkgJiAyNTUpIDw8IDI0LCBiID0gMTU0MDQ4MzQ3NyAqIChiICYgNjU1MzUpICsgKCgxNTQwNDgzNDc3ICogKGIgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNiksIGIgXj0gYiA+Pj4gMjQsIGIgPSAxNTQwNDgzNDc3ICogKGIgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYiA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KSwgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpIF4gYiwgZSAtPSA0LCArK2Q7XG4gIH1cbiAgc3dpdGNoIChlKSB7XG4gICAgY2FzZSAzOlxuICAgICAgYSBePSAoYy5jaGFyQ29kZUF0KGQgKyAyKSAmIDI1NSkgPDwgMTY7XG4gICAgY2FzZSAyOlxuICAgICAgYSBePSAoYy5jaGFyQ29kZUF0KGQgKyAxKSAmIDI1NSkgPDwgODtcbiAgICBjYXNlIDE6XG4gICAgICBhIF49IGMuY2hhckNvZGVBdChkKSAmIDI1NSwgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpO1xuICB9XG4gIGEgXj0gYSA+Pj4gMTM7XG4gIGEgPSAxNTQwNDgzNDc3ICogKGEgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYSA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KTtcbiAgcmV0dXJuIChhIF4gYSA+Pj4gMTUpID4+PiAwO1xufVxuXG4vLyBcbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyogVGhpcyBpcyB0aGUgXCJjYXBhY2l0eVwiIG9mIG91ciBhbHBoYWJldCBpLmUuIDJ4MjYgZm9yIGFsbCBsZXR0ZXJzIHBsdXMgdGhlaXIgY2FwaXRhbGlzZWRcbiAqIGNvdW50ZXJwYXJ0cyAqL1xudmFyIGNoYXJzTGVuZ3RoID0gNTI7XG5cbi8qIHN0YXJ0IGF0IDc1IGZvciAnYScgdW50aWwgJ3onICgyNSkgYW5kIHRoZW4gc3RhcnQgYXQgNjUgZm9yIGNhcGl0YWxpc2VkIGxldHRlcnMgKi9cbnZhciBnZXRBbHBoYWJldGljQ2hhciA9IGZ1bmN0aW9uIGdldEFscGhhYmV0aWNDaGFyKGNvZGUpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSArIChjb2RlID4gMjUgPyAzOSA6IDk3KSk7XG59O1xuXG4vKiBpbnB1dCBhIG51bWJlciwgdXN1YWxseSBhIGhhc2ggYW5kIGNvbnZlcnQgaXQgdG8gYmFzZS01MiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShjb2RlKSB7XG4gIHZhciBuYW1lID0gJyc7XG4gIHZhciB4ID0gdm9pZCAwO1xuXG4gIC8qIGdldCBhIGNoYXIgYW5kIGRpdmlkZSBieSBhbHBoYWJldC1sZW5ndGggKi9cbiAgZm9yICh4ID0gY29kZTsgeCA+IGNoYXJzTGVuZ3RoOyB4ID0gTWF0aC5mbG9vcih4IC8gY2hhcnNMZW5ndGgpKSB7XG4gICAgbmFtZSA9IGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lO1xuICB9XG5cbiAgcmV0dXJuIGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gaGFzRnVuY3Rpb25PYmplY3RLZXkob2JqKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTdGF0aWNSdWxlcyhydWxlcywgYXR0cnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBydWxlID0gcnVsZXNbaV07XG5cbiAgICAvLyByZWN1cnNpdmUgY2FzZVxuICAgIGlmIChBcnJheS5pc0FycmF5KHJ1bGUpICYmICFpc1N0YXRpY1J1bGVzKHJ1bGUsIGF0dHJzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihydWxlKSAmJiAhaXNTdHlsZWRDb21wb25lbnQocnVsZSkpIHtcbiAgICAgIC8vIGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBzdGF0aWMgaWYgdGhleSdyZSBqdXN0IGJlaW5nXG4gICAgICAvLyB1c2VkIHRvIGdldCB0aGUgY2xhc3NuYW1lIG9mIGEgbmVzdGVkIHN0eWxlZCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXR0cnMuc29tZShmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHgpIHx8IGhhc0Z1bmN0aW9uT2JqZWN0S2V5KHgpO1xuICB9KSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBcblxuLyogY29tYmluZXMgaGFzaFN0ciAobXVybXVyaGFzaCkgYW5kIG5hbWVHZW5lcmF0b3IgZm9yIGNvbnZlbmllbmNlICovXG52YXIgaGFzaGVyID0gZnVuY3Rpb24gaGFzaGVyKHN0cikge1xuICByZXR1cm4gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShtdXJtdXJoYXNoKHN0cikpO1xufTtcblxuLypcbiBDb21wb25lbnRTdHlsZSBpcyBhbGwgdGhlIENTUy1zcGVjaWZpYyBzdHVmZiwgbm90XG4gdGhlIFJlYWN0LXNwZWNpZmljIHN0dWZmLlxuICovXG5cbnZhciBDb21wb25lbnRTdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50U3R5bGUocnVsZXMsIGF0dHJzLCBjb21wb25lbnRJZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvbmVudFN0eWxlKTtcblxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmlzU3RhdGljID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiBpc1N0YXRpY1J1bGVzKHJ1bGVzLCBhdHRycyk7XG4gICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuXG4gICAgaWYgKCFTdHlsZVNoZWV0Lm1hc3Rlci5oYXNJZChjb21wb25lbnRJZCkpIHtcbiAgICAgIFN0eWxlU2hlZXQubWFzdGVyLmRlZmVycmVkSW5qZWN0KGNvbXBvbmVudElkLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogRmxhdHRlbnMgYSBydWxlIHNldCBpbnRvIHZhbGlkIENTU1xuICAgKiBIYXNoZXMgaXQsIHdyYXBzIHRoZSB3aG9sZSBjaHVuayBpbiBhIC5oYXNoMTIzNCB7fVxuICAgKiBSZXR1cm5zIHRoZSBoYXNoIHRvIGJlIGluamVjdGVkIG9uIHJlbmRlcigpXG4gICAqICovXG5cblxuICBDb21wb25lbnRTdHlsZS5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMgPSBmdW5jdGlvbiBnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIGlzU3RhdGljID0gdGhpcy5pc1N0YXRpYyxcbiAgICAgICAgY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkLFxuICAgICAgICBsYXN0Q2xhc3NOYW1lID0gdGhpcy5sYXN0Q2xhc3NOYW1lO1xuXG4gICAgaWYgKElTX0JST1dTRVIgJiYgaXNTdGF0aWMgJiYgdHlwZW9mIGxhc3RDbGFzc05hbWUgPT09ICdzdHJpbmcnICYmIHN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKGNvbXBvbmVudElkLCBsYXN0Q2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuIGxhc3RDbGFzc05hbWU7XG4gICAgfVxuXG4gICAgdmFyIGZsYXRDU1MgPSBmbGF0dGVuKHRoaXMucnVsZXMsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICAgIHZhciBuYW1lID0gaGFzaGVyKHRoaXMuY29tcG9uZW50SWQgKyBmbGF0Q1NTLmpvaW4oJycpKTtcbiAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKGNvbXBvbmVudElkLCBuYW1lKSkge1xuICAgICAgc3R5bGVTaGVldC5pbmplY3QodGhpcy5jb21wb25lbnRJZCwgc3RyaW5naWZ5UnVsZXMoZmxhdENTUywgJy4nICsgbmFtZSwgdW5kZWZpbmVkLCBjb21wb25lbnRJZCksIG5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMubGFzdENsYXNzTmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH07XG5cbiAgQ29tcG9uZW50U3R5bGUuZ2VuZXJhdGVOYW1lID0gZnVuY3Rpb24gZ2VuZXJhdGVOYW1lKHN0cikge1xuICAgIHJldHVybiBoYXNoZXIoc3RyKTtcbiAgfTtcblxuICByZXR1cm4gQ29tcG9uZW50U3R5bGU7XG59KCk7XG5cbi8vIFxuXG52YXIgTElNSVQgPSAyMDA7XG5cbnZhciBjcmVhdGVXYXJuVG9vTWFueUNsYXNzZXMgPSAoZnVuY3Rpb24gKGRpc3BsYXlOYW1lKSB7XG4gIHZhciBnZW5lcmF0ZWRDbGFzc2VzID0ge307XG4gIHZhciB3YXJuaW5nU2VlbiA9IGZhbHNlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKCF3YXJuaW5nU2Vlbikge1xuICAgICAgZ2VuZXJhdGVkQ2xhc3Nlc1tjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhnZW5lcmF0ZWRDbGFzc2VzKS5sZW5ndGggPj0gTElNSVQpIHtcbiAgICAgICAgLy8gVW5hYmxlIHRvIGZpbmQgbGF0ZXN0UnVsZSBpbiB0ZXN0IGVudmlyb25tZW50LlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlLCBwcmVmZXItdGVtcGxhdGUgKi9cbiAgICAgICAgY29uc29sZS53YXJuKCdPdmVyICcgKyBMSU1JVCArICcgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50ICcgKyBkaXNwbGF5TmFtZSArICcuIFxcbicgKyAnQ29uc2lkZXIgdXNpbmcgdGhlIGF0dHJzIG1ldGhvZCwgdG9nZXRoZXIgd2l0aCBhIHN0eWxlIG9iamVjdCBmb3IgZnJlcXVlbnRseSBjaGFuZ2VkIHN0eWxlcy5cXG4nICsgJ0V4YW1wbGU6XFxuJyArICcgIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZC5kaXYuYXR0cnMocHJvcHMgPT4gKHtcXG4nICsgJyAgICBzdHlsZToge1xcbicgKyAnICAgICAgYmFja2dyb3VuZDogcHJvcHMuYmFja2dyb3VuZCxcXG4nICsgJyAgICB9LFxcbicgKyAnICB9KSlgd2lkdGg6IDEwMCU7YFxcblxcbicgKyAnICA8Q29tcG9uZW50IC8+Jyk7XG4gICAgICAgIHdhcm5pbmdTZWVuID0gdHJ1ZTtcbiAgICAgICAgZ2VuZXJhdGVkQ2xhc3NlcyA9IHt9O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0pO1xuXG4vLyBcblxudmFyIGRldGVybWluZVRoZW1lID0gKGZ1bmN0aW9uIChwcm9wcywgZmFsbGJhY2tUaGVtZSkge1xuICB2YXIgZGVmYXVsdFByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBFTVBUWV9PQkpFQ1Q7XG5cbiAgLy8gUHJvcHMgc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIFRoZW1lUHJvdmlkZXIsIHdoaWNoIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlclxuICAvLyBkZWZhdWx0UHJvcHMsIGJ1dCBSZWFjdCBhdXRvbWF0aWNhbGx5IHB1dHMgZGVmYXVsdFByb3BzIG9uIHByb3BzLlxuXG4gIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMsIGZsb3d0eXBlLWVycm9ycy9zaG93LWVycm9ycyAqL1xuICB2YXIgaXNEZWZhdWx0VGhlbWUgPSBkZWZhdWx0UHJvcHMgPyBwcm9wcy50aGVtZSA9PT0gZGVmYXVsdFByb3BzLnRoZW1lIDogZmFsc2U7XG4gIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lICYmICFpc0RlZmF1bHRUaGVtZSA/IHByb3BzLnRoZW1lIDogZmFsbGJhY2tUaGVtZSB8fCBkZWZhdWx0UHJvcHMudGhlbWU7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxuICByZXR1cm4gdGhlbWU7XG59KTtcblxuLy8gXG52YXIgZXNjYXBlUmVnZXggPSAvW1tcXF0uIyokPjwrfj18XjooKSxcIidgLV0rL2c7XG52YXIgZGFzaGVzQXRFbmRzID0gLyheLXwtJCkvZztcblxuLyoqXG4gKiBUT0RPOiBFeHBsb3JlIHVzaW5nIENTUy5lc2NhcGUgd2hlbiBpdCBiZWNvbWVzIG1vcmUgYXZhaWxhYmxlXG4gKiBpbiBldmVyZ3JlZW4gYnJvd3NlcnMuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0clxuICAvLyBSZXBsYWNlIGFsbCBwb3NzaWJsZSBDU1Mgc2VsZWN0b3JzXG4gIC5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnLScpXG5cbiAgLy8gUmVtb3ZlIGV4dHJhbmVvdXMgaHlwaGVucyBhdCB0aGUgc3RhcnQgYW5kIGVuZFxuICAucmVwbGFjZShkYXNoZXNBdEVuZHMsICcnKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGlzVGFnKHRhcmdldCkge1xuICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB0YXJnZXQuY2hhckF0KDApID09PSB0YXJnZXQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgOiB0cnVlKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGdlbmVyYXRlRGlzcGxheU5hbWUodGFyZ2V0KSB7XG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIGlzVGFnKHRhcmdldCkgPyAnc3R5bGVkLicgKyB0YXJnZXQgOiAnU3R5bGVkKCcgKyBnZXRDb21wb25lbnROYW1lKHRhcmdldCkgKyAnKSc7XG59XG5cbnZhciBfVFlQRV9TVEFUSUNTO1xuXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSAoX1RZUEVfU1RBVElDUyA9IHt9LCBfVFlQRV9TVEFUSUNTW0ZvcndhcmRSZWZdID0ge1xuICAkJHR5cGVvZjogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlXG59LCBfVFlQRV9TVEFUSUNTKTtcblxudmFyIGRlZmluZVByb3BlcnR5JDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAgIF9PYmplY3QkZ2V0T3duUHJvcGVydCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gX09iamVjdCRnZXRPd25Qcm9wZXJ0ID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbXTtcbn0gOiBfT2JqZWN0JGdldE93blByb3BlcnQsXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIGFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBhcnJheVByb3RvdHlwZS5jb25jYXQoZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpLFxuICAgIC8vICRGbG93Rml4TWVcbiAgICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IFRZUEVfU1RBVElDU1t0YXJnZXRDb21wb25lbnQuJCR0eXBlb2ZdIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICB2YXIgc291cmNlU3RhdGljcyA9IFRZUEVfU1RBVElDU1tzb3VyY2VDb21wb25lbnQuJCR0eXBlb2ZdIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBkZXNjcmlwdG9yID0gdm9pZCAwO1xuICAgIHZhciBrZXkgPSB2b2lkIDA7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXNcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAhS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJlxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkkMSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLyogZmFpbCBzaWxlbnRseSAqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG4vLyBcbmZ1bmN0aW9uIGlzRGVyaXZlZFJlYWN0Q29tcG9uZW50KGZuKSB7XG4gIHJldHVybiAhIShmbiAmJiBmbi5wcm90b3R5cGUgJiYgZm4ucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufVxuXG4vLyBcbi8vIEhlbHBlciB0byBjYWxsIGEgZ2l2ZW4gZnVuY3Rpb24sIG9ubHkgb25jZVxudmFyIG9uY2UgPSAoZnVuY3Rpb24gKGNiKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgY2IuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG4vLyBcblxudmFyIFRoZW1lQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcblxudmFyIFRoZW1lQ29uc3VtZXIgPSBUaGVtZUNvbnRleHQuQ29uc3VtZXI7XG5cbi8qKlxuICogUHJvdmlkZSBhIHRoZW1lIHRvIGFuIGVudGlyZSByZWFjdCBjb21wb25lbnQgdHJlZSB2aWEgY29udGV4dFxuICovXG5cbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoVGhlbWVQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFRoZW1lUHJvdmlkZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmdldENvbnRleHQgPSBtZW1vaXplKF90aGlzLmdldENvbnRleHQuYmluZChfdGhpcykpO1xuICAgIF90aGlzLnJlbmRlcklubmVyID0gX3RoaXMucmVuZGVySW5uZXIuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5jaGlsZHJlbikgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFRoZW1lQ29udGV4dC5Db25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICB0aGlzLnJlbmRlcklubmVyXG4gICAgKTtcbiAgfTtcblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXJJbm5lciA9IGZ1bmN0aW9uIHJlbmRlcklubmVyKG91dGVyVGhlbWUpIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dCh0aGlzLnByb3BzLnRoZW1lLCBvdXRlclRoZW1lKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb250ZXh0LlByb3ZpZGVyLFxuICAgICAgeyB2YWx1ZTogY29udGV4dCB9LFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdGhlbWUgZnJvbSB0aGUgcHJvcHMsIHN1cHBvcnRpbmcgYm90aCAob3V0ZXJUaGVtZSkgPT4ge31cbiAgICogYXMgd2VsbCBhcyBvYmplY3Qgbm90YXRpb25cbiAgICovXG5cblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5nZXRUaGVtZSA9IGZ1bmN0aW9uIGdldFRoZW1lKHRoZW1lLCBvdXRlclRoZW1lKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odGhlbWUpKSB7XG4gICAgICB2YXIgbWVyZ2VkVGhlbWUgPSB0aGVtZShvdXRlclRoZW1lKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkobWVyZ2VkVGhlbWUpIHx8ICh0eXBlb2YgbWVyZ2VkVGhlbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG1lcmdlZFRoZW1lKSkgIT09ICdvYmplY3QnKSkge1xuICAgICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gICAgfVxuXG4gICAgaWYgKHRoZW1lID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkodGhlbWUpIHx8ICh0eXBlb2YgdGhlbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHRoZW1lKSkgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDgpO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xuICB9O1xuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLmdldENvbnRleHQgPSBmdW5jdGlvbiBnZXRDb250ZXh0KHRoZW1lLCBvdXRlclRoZW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGhlbWUodGhlbWUsIG91dGVyVGhlbWUpO1xuICB9O1xuXG4gIHJldHVybiBUaGVtZVByb3ZpZGVyO1xufShDb21wb25lbnQpO1xuXG4vLyBcblxudmFyIENMT1NJTkdfVEFHX1IgPSAvXlxccyo8XFwvW2Etel0vaTtcblxudmFyIFNlcnZlclN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlcnZlclN0eWxlU2hlZXQoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VydmVyU3R5bGVTaGVldCk7XG5cbiAgICAvKiBUaGUgbWFzdGVyIHNoZWV0IG1pZ2h0IGJlIHJlc2V0LCBzbyBrZWVwIGEgcmVmZXJlbmNlIGhlcmUgKi9cbiAgICB0aGlzLm1hc3RlclNoZWV0ID0gU3R5bGVTaGVldC5tYXN0ZXI7XG4gICAgdGhpcy5pbnN0YW5jZSA9IHRoaXMubWFzdGVyU2hlZXQuY2xvbmUoKTtcbiAgICB0aGlzLnNlYWxlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIFNlcnZlclN0eWxlU2hlZXQgYXMgYmVpbmcgZnVsbHkgZW1pdHRlZCBhbmQgbWFudWFsbHkgR0MgaXQgZnJvbSB0aGVcbiAgICogU3R5bGVTaGVldCBzaW5nbGV0b24uXG4gICAqL1xuXG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuc2VhbCA9IGZ1bmN0aW9uIHNlYWwoKSB7XG4gICAgaWYgKCF0aGlzLnNlYWxlZCkge1xuICAgICAgLyogUmVtb3ZlIHNlYWxlZCBTdHlsZVNoZWV0cyBmcm9tIHRoZSBtYXN0ZXIgc2hlZXQgKi9cbiAgICAgIHZhciBpbmRleCA9IHRoaXMubWFzdGVyU2hlZXQuY2xvbmVzLmluZGV4T2YodGhpcy5pbnN0YW5jZSk7XG4gICAgICB0aGlzLm1hc3RlclNoZWV0LmNsb25lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5zZWFsZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5jb2xsZWN0U3R5bGVzID0gZnVuY3Rpb24gY29sbGVjdFN0eWxlcyhjaGlsZHJlbikge1xuICAgIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN0eWxlU2hlZXRNYW5hZ2VyLFxuICAgICAgeyBzaGVldDogdGhpcy5pbnN0YW5jZSB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmdldFN0eWxlVGFncyA9IGZ1bmN0aW9uIGdldFN0eWxlVGFncygpIHtcbiAgICB0aGlzLnNlYWwoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS50b0hUTUwoKTtcbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5nZXRTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiBnZXRTdHlsZUVsZW1lbnQoKSB7XG4gICAgdGhpcy5zZWFsKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UudG9SZWFjdEVsZW1lbnRzKCk7XG4gIH07XG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtID0gZnVuY3Rpb24gaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMyk7XG4gICAgfVxuXG4gICAgLyogdGhlIHRhZyBpbmRleCBrZWVwcyB0cmFjayBvZiB3aGljaCB0YWdzIGhhdmUgYWxyZWFkeSBiZWVuIGVtaXR0ZWQgKi9cbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xuXG4gICAgdmFyIGluc3RhbmNlVGFnSW5kZXggPSAwO1xuXG4gICAgdmFyIHN0cmVhbUF0dHIgPSBTQ19TVFJFQU1fQVRUUiArICc9XCJ0cnVlXCInO1xuXG4gICAgdmFyIHRyYW5zZm9ybWVyID0gbmV3IHN0cmVhbS5UcmFuc2Zvcm0oe1xuICAgICAgdHJhbnNmb3JtOiBmdW5jdGlvbiBhcHBlbmRTdHlsZUNodW5rcyhjaHVuaywgLyogZW5jb2RpbmcgKi9fLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdGFncyA9IGluc3RhbmNlLnRhZ3M7XG5cbiAgICAgICAgdmFyIGh0bWwgPSAnJztcblxuICAgICAgICAvKiByZXRyaWV2ZSBodG1sIGZvciBlYWNoIG5ldyBzdHlsZSB0YWcgKi9cbiAgICAgICAgZm9yICg7IGluc3RhbmNlVGFnSW5kZXggPCB0YWdzLmxlbmd0aDsgaW5zdGFuY2VUYWdJbmRleCArPSAxKSB7XG4gICAgICAgICAgdmFyIHRhZyA9IHRhZ3NbaW5zdGFuY2VUYWdJbmRleF07XG4gICAgICAgICAgaHRtbCArPSB0YWcudG9IVE1MKHN0cmVhbUF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogZm9yY2Ugb3VyIFN0eWxlU2hlZXRzIHRvIGVtaXQgZW50aXJlbHkgbmV3IHRhZ3MgKi9cbiAgICAgICAgaW5zdGFuY2Uuc2VhbEFsbFRhZ3MoKTtcblxuICAgICAgICB2YXIgcmVuZGVyZWRIdG1sID0gY2h1bmsudG9TdHJpbmcoKTtcblxuICAgICAgICAvKiBwcmVwZW5kIHN0eWxlIGh0bWwgdG8gY2h1bmssIHVubGVzcyB0aGUgc3RhcnQgb2YgdGhlIGNodW5rIGlzIGEgY2xvc2luZyB0YWcgaW4gd2hpY2ggY2FzZSBhcHBlbmQgcmlnaHQgYWZ0ZXIgdGhhdCAqL1xuICAgICAgICBpZiAoQ0xPU0lOR19UQUdfUi50ZXN0KHJlbmRlcmVkSHRtbCkpIHtcbiAgICAgICAgICB2YXIgZW5kT2ZDbG9zaW5nVGFnID0gcmVuZGVyZWRIdG1sLmluZGV4T2YoJz4nKTtcblxuICAgICAgICAgIHRoaXMucHVzaChyZW5kZXJlZEh0bWwuc2xpY2UoMCwgZW5kT2ZDbG9zaW5nVGFnICsgMSkgKyBodG1sICsgcmVuZGVyZWRIdG1sLnNsaWNlKGVuZE9mQ2xvc2luZ1RhZyArIDEpKTtcbiAgICAgICAgfSBlbHNlIHRoaXMucHVzaChodG1sICsgcmVuZGVyZWRIdG1sKTtcblxuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhZGFibGVTdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zZWFsKCk7XG4gICAgfSk7XG5cbiAgICByZWFkYWJsZVN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBfdGhpcy5zZWFsKCk7XG5cbiAgICAgIC8vIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSB0cmFuc2Zvcm0gc3RyZWFtXG4gICAgICB0cmFuc2Zvcm1lci5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVhZGFibGVTdHJlYW0ucGlwZSh0cmFuc2Zvcm1lcik7XG4gIH07XG5cbiAgcmV0dXJuIFNlcnZlclN0eWxlU2hlZXQ7XG59KCk7XG5cbi8vIFxuXG52YXIgU3R5bGVTaGVldENvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG52YXIgU3R5bGVTaGVldENvbnN1bWVyID0gU3R5bGVTaGVldENvbnRleHQuQ29uc3VtZXI7XG5cbnZhciBTdHlsZVNoZWV0TWFuYWdlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFN0eWxlU2hlZXRNYW5hZ2VyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdHlsZVNoZWV0TWFuYWdlcihwcm9wcykge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlU2hlZXRNYW5hZ2VyKTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5nZXRDb250ZXh0ID0gbWVtb2l6ZShfdGhpcy5nZXRDb250ZXh0KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBTdHlsZVNoZWV0TWFuYWdlci5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uIGdldENvbnRleHQoc2hlZXQsIHRhcmdldCkge1xuICAgIGlmIChzaGVldCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbmV3IFN0eWxlU2hlZXQodGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig0KTtcbiAgICB9XG4gIH07XG5cbiAgU3R5bGVTaGVldE1hbmFnZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHNoZWV0ID0gX3Byb3BzLnNoZWV0LFxuICAgICAgICB0YXJnZXQgPSBfcHJvcHMudGFyZ2V0O1xuXG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN0eWxlU2hlZXRDb250ZXh0LlByb3ZpZGVyLFxuICAgICAgeyB2YWx1ZTogdGhpcy5nZXRDb250ZXh0KHNoZWV0LCB0YXJnZXQpIH0sXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXRNYW5hZ2VyO1xufShDb21wb25lbnQpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVTaGVldE1hbmFnZXIucHJvcFR5cGVzID0ge1xuICBzaGVldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmluc3RhbmNlT2YoU3R5bGVTaGVldCksIFByb3BUeXBlcy5pbnN0YW5jZU9mKFNlcnZlclN0eWxlU2hlZXQpXSksXG5cbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVuZENoaWxkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pXG59IDogdm9pZCAwO1xuXG4vLyBcblxudmFyIGlkZW50aWZpZXJzID0ge307XG5cbi8qIFdlIGRlcGVuZCBvbiBjb21wb25lbnRzIGhhdmluZyB1bmlxdWUgSURzICovXG5mdW5jdGlvbiBnZW5lcmF0ZUlkKF9Db21wb25lbnRTdHlsZSwgX2Rpc3BsYXlOYW1lLCBwYXJlbnRDb21wb25lbnRJZCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSB0eXBlb2YgX2Rpc3BsYXlOYW1lICE9PSAnc3RyaW5nJyA/ICdzYycgOiBlc2NhcGUoX2Rpc3BsYXlOYW1lKTtcblxuICAvKipcbiAgICogVGhpcyBlbnN1cmVzIHVuaXF1ZW5lc3MgaWYgdHdvIGNvbXBvbmVudHMgaGFwcGVuIHRvIHNoYXJlXG4gICAqIHRoZSBzYW1lIGRpc3BsYXlOYW1lLlxuICAgKi9cbiAgdmFyIG5yID0gKGlkZW50aWZpZXJzW2Rpc3BsYXlOYW1lXSB8fCAwKSArIDE7XG4gIGlkZW50aWZpZXJzW2Rpc3BsYXlOYW1lXSA9IG5yO1xuXG4gIHZhciBjb21wb25lbnRJZCA9IGRpc3BsYXlOYW1lICsgJy0nICsgX0NvbXBvbmVudFN0eWxlLmdlbmVyYXRlTmFtZShkaXNwbGF5TmFtZSArIG5yKTtcblxuICByZXR1cm4gcGFyZW50Q29tcG9uZW50SWQgPyBwYXJlbnRDb21wb25lbnRJZCArICctJyArIGNvbXBvbmVudElkIDogY29tcG9uZW50SWQ7XG59XG5cbi8vICRGbG93Rml4TWVcblxudmFyIFN0eWxlZENvbXBvbmVudCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFN0eWxlZENvbXBvbmVudCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3R5bGVkQ29tcG9uZW50KCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlZENvbXBvbmVudCk7XG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5hdHRycyA9IHt9O1xuXG4gICAgX3RoaXMucmVuZGVyT3V0ZXIgPSBfdGhpcy5yZW5kZXJPdXRlci5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5yZW5kZXJJbm5lciA9IF90aGlzLnJlbmRlcklubmVyLmJpbmQoX3RoaXMpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIF90aGlzLndhcm5Jbm5lclJlZiA9IG9uY2UoZnVuY3Rpb24gKGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBcImlubmVyUmVmXCIgQVBJIGhhcyBiZWVuIHJlbW92ZWQgaW4gc3R5bGVkLWNvbXBvbmVudHMgdjQgaW4gZmF2b3Igb2YgUmVhY3QgMTYgcmVmIGZvcndhcmRpbmcsIHVzZSBcInJlZlwiIGluc3RlYWQgbGlrZSBhIHR5cGljYWwgY29tcG9uZW50LiBcImlubmVyUmVmXCIgd2FzIGRldGVjdGVkIG9uIGNvbXBvbmVudCBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLndhcm5BdHRyc0ZuT2JqZWN0S2V5RGVwcmVjYXRlZCA9IG9uY2UoZnVuY3Rpb24gKGtleSwgZGlzcGxheU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignRnVuY3Rpb25zIGFzIG9iamVjdC1mb3JtIGF0dHJzKHt9KSBrZXlzIGFyZSBub3cgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24gb2Ygc3R5bGVkLWNvbXBvbmVudHMuIFN3aXRjaCB0byB0aGUgbmV3IGF0dHJzKHByb3BzID0+ICh7fSkpIHN5bnRheCBpbnN0ZWFkIGZvciBlYXNpZXIgYW5kIG1vcmUgcG93ZXJmdWwgY29tcG9zaXRpb24uIFRoZSBhdHRycyBrZXkgaW4gcXVlc3Rpb24gaXMgXCInICsga2V5ICsgJ1wiIG9uIGNvbXBvbmVudCBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nLCAnXFxuICcgKyBuZXcgRXJyb3IoKS5zdGFjaylcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy53YXJuTm9uU3R5bGVkQ29tcG9uZW50QXR0cnNPYmplY3RLZXkgPSBvbmNlKGZ1bmN0aW9uIChrZXksIGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0l0IGxvb2tzIGxpa2UgeW91XFwndmUgdXNlZCBhIG5vbiBzdHlsZWQtY29tcG9uZW50IGFzIHRoZSB2YWx1ZSBmb3IgdGhlIFwiJyArIGtleSArICdcIiBwcm9wIGluIGFuIG9iamVjdC1mb3JtIGF0dHJzIGNvbnN0cnVjdG9yIG9mIFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLlxcbicgKyAnWW91IHNob3VsZCB1c2UgdGhlIG5ldyBmdW5jdGlvbi1mb3JtIGF0dHJzIGNvbnN0cnVjdG9yIHdoaWNoIGF2b2lkcyB0aGlzIGlzc3VlOiBhdHRycyhwcm9wcyA9PiAoeyB5b3VyU3R1ZmYgfSkpXFxuJyArIFwiVG8gY29udGludWUgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgb2JqZWN0IHN5bnRheCwgeW91J2xsIG5lZWQgdG8gd3JhcCB5b3VyIGNvbXBvbmVudCBwcm9wIGluIGEgZnVuY3Rpb24gdG8gbWFrZSBpdCBhdmFpbGFibGUgaW5zaWRlIHRoZSBzdHlsZWQgY29tcG9uZW50ICh5b3UnbGwgc3RpbGwgZ2V0IHRoZSBkZXByZWNhdGlvbiB3YXJuaW5nIHRob3VnaC4pXFxuXCIgKyAoJ0ZvciBleGFtcGxlLCB7ICcgKyBrZXkgKyAnOiAoKSA9PiBJbm5lckNvbXBvbmVudCB9IGluc3RlYWQgb2YgeyAnICsga2V5ICsgJzogSW5uZXJDb21wb25lbnQgfScpKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3R5bGVTaGVldENvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVyT3V0ZXJcbiAgICApO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyT3V0ZXIgPSBmdW5jdGlvbiByZW5kZXJPdXRlcigpIHtcbiAgICB2YXIgc3R5bGVTaGVldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogU3R5bGVTaGVldC5tYXN0ZXI7XG5cbiAgICB0aGlzLnN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0O1xuXG4gICAgLy8gTm8gbmVlZCB0byBzdWJzY3JpYmUgYSBzdGF0aWMgY29tcG9uZW50IHRvIHRoZW1lIGNoYW5nZXMsIGl0IHdvbid0IGNoYW5nZSBhbnl0aGluZ1xuICAgIGlmICh0aGlzLnByb3BzLmZvcndhcmRlZENvbXBvbmVudC5jb21wb25lbnRTdHlsZS5pc1N0YXRpYykgcmV0dXJuIHRoaXMucmVuZGVySW5uZXIoKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICB0aGlzLnJlbmRlcklubmVyXG4gICAgKTtcbiAgfTtcblxuICBTdHlsZWRDb21wb25lbnQucHJvdG90eXBlLnJlbmRlcklubmVyID0gZnVuY3Rpb24gcmVuZGVySW5uZXIodGhlbWUpIHtcbiAgICB2YXIgX3Byb3BzJGZvcndhcmRlZENvbXBvID0gdGhpcy5wcm9wcy5mb3J3YXJkZWRDb21wb25lbnQsXG4gICAgICAgIGNvbXBvbmVudFN0eWxlID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLmNvbXBvbmVudFN0eWxlLFxuICAgICAgICBkZWZhdWx0UHJvcHMgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uZGVmYXVsdFByb3BzLFxuICAgICAgICBkaXNwbGF5TmFtZSA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby5kaXNwbGF5TmFtZSxcbiAgICAgICAgZm9sZGVkQ29tcG9uZW50SWRzID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLmZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgICAgc3R5bGVkQ29tcG9uZW50SWQgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uc3R5bGVkQ29tcG9uZW50SWQsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby50YXJnZXQ7XG5cblxuICAgIHZhciBnZW5lcmF0ZWRDbGFzc05hbWUgPSB2b2lkIDA7XG4gICAgaWYgKGNvbXBvbmVudFN0eWxlLmlzU3RhdGljKSB7XG4gICAgICBnZW5lcmF0ZWRDbGFzc05hbWUgPSB0aGlzLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgdGhpcy5wcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoZGV0ZXJtaW5lVGhlbWUodGhpcy5wcm9wcywgdGhlbWUsIGRlZmF1bHRQcm9wcykgfHwgRU1QVFlfT0JKRUNULCB0aGlzLnByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudFRvQmVDcmVhdGVkID0gdGhpcy5wcm9wcy5hcyB8fCB0aGlzLmF0dHJzLmFzIHx8IHRhcmdldDtcbiAgICB2YXIgaXNUYXJnZXRUYWcgPSBpc1RhZyhlbGVtZW50VG9CZUNyZWF0ZWQpO1xuXG4gICAgdmFyIHByb3BzRm9yRWxlbWVudCA9IHt9O1xuICAgIHZhciBjb21wdXRlZFByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHRoaXMuYXR0cnMpO1xuXG4gICAgdmFyIGtleSA9IHZvaWQgMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChrZXkgaW4gY29tcHV0ZWRQcm9wcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ID09PSAnaW5uZXJSZWYnICYmIGlzVGFyZ2V0VGFnKSB7XG4gICAgICAgIHRoaXMud2FybklubmVyUmVmKGRpc3BsYXlOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZENvbXBvbmVudCcgfHwga2V5ID09PSAnYXMnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdmb3J3YXJkZWRSZWYnKSBwcm9wc0ZvckVsZW1lbnQucmVmID0gY29tcHV0ZWRQcm9wc1trZXldO2Vsc2UgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZEFzJykgcHJvcHNGb3JFbGVtZW50LmFzID0gY29tcHV0ZWRQcm9wc1trZXldO2Vsc2UgaWYgKCFpc1RhcmdldFRhZyB8fCB2YWxpZEF0dHIoa2V5KSkge1xuICAgICAgICAvLyBEb24ndCBwYXNzIHRocm91Z2ggbm9uIEhUTUwgdGFncyB0aHJvdWdoIHRvIEhUTUwgZWxlbWVudHNcbiAgICAgICAgcHJvcHNGb3JFbGVtZW50W2tleV0gPSBjb21wdXRlZFByb3BzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5hdHRycy5zdHlsZSkge1xuICAgICAgcHJvcHNGb3JFbGVtZW50LnN0eWxlID0gX2V4dGVuZHMoe30sIHRoaXMuYXR0cnMuc3R5bGUsIHRoaXMucHJvcHMuc3R5bGUpO1xuICAgIH1cblxuICAgIHByb3BzRm9yRWxlbWVudC5jbGFzc05hbWUgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0KGZvbGRlZENvbXBvbmVudElkcywgc3R5bGVkQ29tcG9uZW50SWQsIGdlbmVyYXRlZENsYXNzTmFtZSAhPT0gc3R5bGVkQ29tcG9uZW50SWQgPyBnZW5lcmF0ZWRDbGFzc05hbWUgOiBudWxsLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwgdGhpcy5hdHRycy5jbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChlbGVtZW50VG9CZUNyZWF0ZWQsIHByb3BzRm9yRWxlbWVudCk7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5idWlsZEV4ZWN1dGlvbkNvbnRleHQgPSBmdW5jdGlvbiBidWlsZEV4ZWN1dGlvbkNvbnRleHQodGhlbWUsIHByb3BzLCBhdHRycykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGhlbWU6IHRoZW1lIH0pO1xuXG4gICAgaWYgKCFhdHRycy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuXG4gICAgdGhpcy5hdHRycyA9IHt9O1xuXG4gICAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0ckRlZikge1xuICAgICAgdmFyIHJlc29sdmVkQXR0ckRlZiA9IGF0dHJEZWY7XG4gICAgICB2YXIgYXR0ckRlZldhc0ZuID0gZmFsc2U7XG4gICAgICB2YXIgYXR0ciA9IHZvaWQgMDtcbiAgICAgIHZhciBrZXkgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHJlc29sdmVkQXR0ckRlZikpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICByZXNvbHZlZEF0dHJEZWYgPSByZXNvbHZlZEF0dHJEZWYoY29udGV4dCk7XG4gICAgICAgIGF0dHJEZWZXYXNGbiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZm9yIChrZXkgaW4gcmVzb2x2ZWRBdHRyRGVmKSB7XG4gICAgICAgIGF0dHIgPSByZXNvbHZlZEF0dHJEZWZba2V5XTtcblxuICAgICAgICBpZiAoIWF0dHJEZWZXYXNGbikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGF0dHIpICYmICFpc0Rlcml2ZWRSZWFjdENvbXBvbmVudChhdHRyKSAmJiAhaXNTdHlsZWRDb21wb25lbnQoYXR0cikpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIF90aGlzMi53YXJuQXR0cnNGbk9iamVjdEtleURlcHJlY2F0ZWQoa2V5LCBwcm9wcy5mb3J3YXJkZWRDb21wb25lbnQuZGlzcGxheU5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRyID0gYXR0cihjb250ZXh0KTtcblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoYXR0cikpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLndhcm5Ob25TdHlsZWRDb21wb25lbnRBdHRyc09iamVjdEtleShrZXksIHByb3BzLmZvcndhcmRlZENvbXBvbmVudC5kaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLmF0dHJzW2tleV0gPSBhdHRyO1xuICAgICAgICBjb250ZXh0W2tleV0gPSBhdHRyO1xuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoZW1lLCBwcm9wcykge1xuICAgIHZhciBfcHJvcHMkZm9yd2FyZGVkQ29tcG8yID0gcHJvcHMuZm9yd2FyZGVkQ29tcG9uZW50LFxuICAgICAgICBhdHRycyA9IF9wcm9wcyRmb3J3YXJkZWRDb21wbzIuYXR0cnMsXG4gICAgICAgIGNvbXBvbmVudFN0eWxlID0gX3Byb3BzJGZvcndhcmRlZENvbXBvMi5jb21wb25lbnRTdHlsZSxcbiAgICAgICAgd2FyblRvb01hbnlDbGFzc2VzID0gX3Byb3BzJGZvcndhcmRlZENvbXBvMi53YXJuVG9vTWFueUNsYXNzZXM7XG5cbiAgICAvLyBzdGF0aWNhbGx5IHN0eWxlZC1jb21wb25lbnRzIGRvbid0IG5lZWQgdG8gYnVpbGQgYW4gZXhlY3V0aW9uIGNvbnRleHQgb2JqZWN0LFxuICAgIC8vIGFuZCBzaG91bGRuJ3QgYmUgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGNsYXNzIG5hbWVzXG5cbiAgICBpZiAoY29tcG9uZW50U3R5bGUuaXNTdGF0aWMgJiYgIWF0dHJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgdGhpcy5zdHlsZVNoZWV0KTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gY29tcG9uZW50U3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXModGhpcy5idWlsZEV4ZWN1dGlvbkNvbnRleHQodGhlbWUsIHByb3BzLCBhdHRycyksIHRoaXMuc3R5bGVTaGVldCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuVG9vTWFueUNsYXNzZXMpIHdhcm5Ub29NYW55Q2xhc3NlcyhjbGFzc05hbWUpO1xuXG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVkQ29tcG9uZW50O1xufShDb21wb25lbnQpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFyZ2V0LCBvcHRpb25zLCBydWxlcykge1xuICB2YXIgaXNUYXJnZXRTdHlsZWRDb21wID0gaXNTdHlsZWRDb21wb25lbnQodGFyZ2V0KTtcbiAgdmFyIGlzQ2xhc3MgPSAhaXNUYWcodGFyZ2V0KTtcblxuICB2YXIgX29wdGlvbnMkZGlzcGxheU5hbWUgPSBvcHRpb25zLmRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWUgPSBfb3B0aW9ucyRkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpIDogX29wdGlvbnMkZGlzcGxheU5hbWUsXG4gICAgICBfb3B0aW9ucyRjb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICBjb21wb25lbnRJZCA9IF9vcHRpb25zJGNvbXBvbmVudElkID09PSB1bmRlZmluZWQgPyBnZW5lcmF0ZUlkKENvbXBvbmVudFN0eWxlLCBvcHRpb25zLmRpc3BsYXlOYW1lLCBvcHRpb25zLnBhcmVudENvbXBvbmVudElkKSA6IF9vcHRpb25zJGNvbXBvbmVudElkLFxuICAgICAgX29wdGlvbnMkUGFyZW50Q29tcG9uID0gb3B0aW9ucy5QYXJlbnRDb21wb25lbnQsXG4gICAgICBQYXJlbnRDb21wb25lbnQgPSBfb3B0aW9ucyRQYXJlbnRDb21wb24gPT09IHVuZGVmaW5lZCA/IFN0eWxlZENvbXBvbmVudCA6IF9vcHRpb25zJFBhcmVudENvbXBvbixcbiAgICAgIF9vcHRpb25zJGF0dHJzID0gb3B0aW9ucy5hdHRycyxcbiAgICAgIGF0dHJzID0gX29wdGlvbnMkYXR0cnMgPT09IHVuZGVmaW5lZCA/IEVNUFRZX0FSUkFZIDogX29wdGlvbnMkYXR0cnM7XG5cblxuICB2YXIgc3R5bGVkQ29tcG9uZW50SWQgPSBvcHRpb25zLmRpc3BsYXlOYW1lICYmIG9wdGlvbnMuY29tcG9uZW50SWQgPyBlc2NhcGUob3B0aW9ucy5kaXNwbGF5TmFtZSkgKyAnLScgKyBvcHRpb25zLmNvbXBvbmVudElkIDogb3B0aW9ucy5jb21wb25lbnRJZCB8fCBjb21wb25lbnRJZDtcblxuICAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCBhdHRycyB1cCAoaW1wbGljaXQgZXh0ZW5kKVxuICB2YXIgZmluYWxBdHRycyA9XG4gIC8vICRGbG93Rml4TWVcbiAgaXNUYXJnZXRTdHlsZWRDb21wICYmIHRhcmdldC5hdHRycyA/IEFycmF5LnByb3RvdHlwZS5jb25jYXQodGFyZ2V0LmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pIDogYXR0cnM7XG5cbiAgdmFyIGNvbXBvbmVudFN0eWxlID0gbmV3IENvbXBvbmVudFN0eWxlKGlzVGFyZ2V0U3R5bGVkQ29tcCA/IC8vIGZvbGQgdGhlIHVuZGVybHlpbmcgU3R5bGVkQ29tcG9uZW50IHJ1bGVzIHVwIChpbXBsaWNpdCBleHRlbmQpXG4gIC8vICRGbG93Rml4TWVcbiAgdGFyZ2V0LmNvbXBvbmVudFN0eWxlLnJ1bGVzLmNvbmNhdChydWxlcykgOiBydWxlcywgZmluYWxBdHRycywgc3R5bGVkQ29tcG9uZW50SWQpO1xuXG4gIC8qKlxuICAgKiBmb3J3YXJkUmVmIGNyZWF0ZXMgYSBuZXcgaW50ZXJpbSBjb21wb25lbnQsIHdoaWNoIHdlJ2xsIHRha2UgYWR2YW50YWdlIG9mXG4gICAqIGluc3RlYWQgb2YgZXh0ZW5kaW5nIFBhcmVudENvbXBvbmVudCB0byBjcmVhdGUgX2Fub3RoZXJfIGludGVyaW0gY2xhc3NcbiAgICovXG4gIHZhciBXcmFwcGVkU3R5bGVkQ29tcG9uZW50ID0gdm9pZCAwO1xuICB2YXIgZm9yd2FyZFJlZiA9IGZ1bmN0aW9uIGZvcndhcmRSZWYocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBhcmVudENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGZvcndhcmRlZENvbXBvbmVudDogV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgZm9yd2FyZGVkUmVmOiByZWYgfSkpO1xuICB9O1xuICBmb3J3YXJkUmVmLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZvcndhcmRSZWYpO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmF0dHJzID0gZmluYWxBdHRycztcbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlID0gY29tcG9uZW50U3R5bGU7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmZvbGRlZENvbXBvbmVudElkcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcCA/IC8vICRGbG93Rml4TWVcbiAgQXJyYXkucHJvdG90eXBlLmNvbmNhdCh0YXJnZXQuZm9sZGVkQ29tcG9uZW50SWRzLCB0YXJnZXQuc3R5bGVkQ29tcG9uZW50SWQpIDogRU1QVFlfQVJSQVk7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gc3R5bGVkQ29tcG9uZW50SWQ7XG5cbiAgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgdGFyZ2V0IHVwIHNpbmNlIHdlIGZvbGRlZCB0aGUgc3R5bGVzXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50YXJnZXQgPSBpc1RhcmdldFN0eWxlZENvbXAgPyB0YXJnZXQudGFyZ2V0IDogdGFyZ2V0O1xuXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWcpIHtcbiAgICB2YXIgcHJldmlvdXNDb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICAgIG9wdGlvbnNUb0NvcHkgPSBvYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbJ2NvbXBvbmVudElkJ10pO1xuXG5cbiAgICB2YXIgbmV3Q29tcG9uZW50SWQgPSBwcmV2aW91c0NvbXBvbmVudElkICYmIHByZXZpb3VzQ29tcG9uZW50SWQgKyAnLScgKyAoaXNUYWcodGFnKSA/IHRhZyA6IGVzY2FwZShnZXRDb21wb25lbnROYW1lKHRhZykpKTtcblxuICAgIHZhciBuZXdPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnNUb0NvcHksIHtcbiAgICAgIGF0dHJzOiBmaW5hbEF0dHJzLFxuICAgICAgY29tcG9uZW50SWQ6IG5ld0NvbXBvbmVudElkLFxuICAgICAgUGFyZW50Q29tcG9uZW50OiBQYXJlbnRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHJldHVybiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFnLCBuZXdPcHRpb25zLCBydWxlcyk7XG4gIH07XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgJ2RlZmF1bHRQcm9wcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShvYmopIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHRoaXMuX2ZvbGRlZERlZmF1bHRQcm9wcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcCA/IG1lcmdlKHRhcmdldC5kZWZhdWx0UHJvcHMsIG9iaikgOiBvYmo7XG4gICAgfVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA9IGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyhkaXNwbGF5TmFtZSk7XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcuJyArIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQ7XG4gIH07XG5cbiAgaWYgKGlzQ2xhc3MpIHtcbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhXcmFwcGVkU3R5bGVkQ29tcG9uZW50LCB0YXJnZXQsIHtcbiAgICAgIC8vIGFsbCBTQy1zcGVjaWZpYyB0aGluZ3Mgc2hvdWxkIG5vdCBiZSBob2lzdGVkXG4gICAgICBhdHRyczogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudFN0eWxlOiB0cnVlLFxuICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICBmb2xkZWRDb21wb25lbnRJZHM6IHRydWUsXG4gICAgICBzdHlsZWRDb21wb25lbnRJZDogdHJ1ZSxcbiAgICAgIHRhcmdldDogdHJ1ZSxcbiAgICAgIHdpdGhDb21wb25lbnQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBXcmFwcGVkU3R5bGVkQ29tcG9uZW50O1xufVxuXG4vLyBcbi8vIFRoYW5rcyB0byBSZWFjdERPTUZhY3RvcmllcyBmb3IgdGhpcyBoYW5keSBsaXN0IVxuXG52YXIgZG9tRWxlbWVudHMgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsXG5cbi8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFya2VyJywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbi8vIFxuXG52YXIgc3R5bGVkID0gZnVuY3Rpb24gc3R5bGVkKHRhZykge1xuICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY3JlYXRlU3R5bGVkQ29tcG9uZW50LCB0YWcpO1xufTtcblxuLy8gU2hvcnRoYW5kcyBmb3IgYWxsIHZhbGlkIEhUTUwgRWxlbWVudHNcbmRvbUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGRvbUVsZW1lbnQpIHtcbiAgc3R5bGVkW2RvbUVsZW1lbnRdID0gc3R5bGVkKGRvbUVsZW1lbnQpO1xufSk7XG5cbi8vIFxuXG52YXIgR2xvYmFsU3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFN0eWxlKHJ1bGVzLCBjb21wb25lbnRJZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFN0eWxlKTtcblxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmNvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG4gICAgdGhpcy5pc1N0YXRpYyA9IGlzU3RhdGljUnVsZXMocnVsZXMsIEVNUFRZX0FSUkFZKTtcblxuICAgIGlmICghU3R5bGVTaGVldC5tYXN0ZXIuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBTdHlsZVNoZWV0Lm1hc3Rlci5kZWZlcnJlZEluamVjdChjb21wb25lbnRJZCwgW10pO1xuICAgIH1cbiAgfVxuXG4gIEdsb2JhbFN0eWxlLnByb3RvdHlwZS5jcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkge1xuICAgIHZhciBmbGF0Q1NTID0gZmxhdHRlbih0aGlzLnJ1bGVzLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgICB2YXIgY3NzID0gc3RyaW5naWZ5UnVsZXMoZmxhdENTUywgJycpO1xuXG4gICAgc3R5bGVTaGVldC5pbmplY3QodGhpcy5jb21wb25lbnRJZCwgY3NzKTtcbiAgfTtcblxuICBHbG9iYWxTdHlsZS5wcm90b3R5cGUucmVtb3ZlU3R5bGVzID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVzKHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkO1xuXG4gICAgaWYgKHN0eWxlU2hlZXQuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBzdHlsZVNoZWV0LnJlbW92ZShjb21wb25lbnRJZCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRPRE86IG92ZXJ3cml0ZSBpbi1wbGFjZSBpbnN0ZWFkIG9mIHJlbW92ZStjcmVhdGU/XG5cblxuICBHbG9iYWxTdHlsZS5wcm90b3R5cGUucmVuZGVyU3R5bGVzID0gZnVuY3Rpb24gcmVuZGVyU3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgICB0aGlzLnJlbW92ZVN0eWxlcyhzdHlsZVNoZWV0KTtcbiAgICB0aGlzLmNyZWF0ZVN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsU3R5bGU7XG59KCk7XG5cbi8vIFxuXG4vLyBwbGFjZSBvdXIgY2FjaGUgaW50byBzaGFyZWQgY29udGV4dCBzbyBpdCdsbCBwZXJzaXN0IGJldHdlZW4gSE1Sc1xuaWYgKElTX0JST1dTRVIpIHtcbiAgd2luZG93LnNjQ0dTSE1SQ2FjaGUgPSB7fTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2xvYmFsU3R5bGUoc3RyaW5ncykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHJ1bGVzID0gY3NzLmFwcGx5KHVuZGVmaW5lZCwgW3N0cmluZ3NdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpO1xuICB2YXIgaWQgPSAnc2MtZ2xvYmFsLScgKyBtdXJtdXJoYXNoKEpTT04uc3RyaW5naWZ5KHJ1bGVzKSk7XG4gIHZhciBzdHlsZSA9IG5ldyBHbG9iYWxTdHlsZShydWxlcywgaWQpO1xuXG4gIHZhciBHbG9iYWxTdHlsZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoR2xvYmFsU3R5bGVDb21wb25lbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gR2xvYmFsU3R5bGVDb21wb25lbnQocHJvcHMpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFN0eWxlQ29tcG9uZW50KTtcblxuICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgdmFyIF90aGlzJGNvbnN0cnVjdG9yID0gX3RoaXMuY29uc3RydWN0b3IsXG4gICAgICAgICAgZ2xvYmFsU3R5bGUgPSBfdGhpcyRjb25zdHJ1Y3Rvci5nbG9iYWxTdHlsZSxcbiAgICAgICAgICBzdHlsZWRDb21wb25lbnRJZCA9IF90aGlzJGNvbnN0cnVjdG9yLnN0eWxlZENvbXBvbmVudElkO1xuXG5cbiAgICAgIGlmIChJU19CUk9XU0VSKSB7XG4gICAgICAgIHdpbmRvdy5zY0NHU0hNUkNhY2hlW3N0eWxlZENvbXBvbmVudElkXSA9ICh3aW5kb3cuc2NDR1NITVJDYWNoZVtzdHlsZWRDb21wb25lbnRJZF0gfHwgMCkgKyAxO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgZml4ZXMgSE1SIGNvbXBhdGliaWxpdHkuIERvbid0IGFzayBtZSB3aHksIGJ1dCB0aGlzIGNvbWJpbmF0aW9uIG9mXG4gICAgICAgKiBjYWNoaW5nIHRoZSBjbG9zdXJlIHZhcmlhYmxlcyB2aWEgc3RhdGljcyBhbmQgdGhlbiBwZXJzaXN0aW5nIHRoZSBzdGF0aWNzIGluXG4gICAgICAgKiBzdGF0ZSB3b3JrcyBhY3Jvc3MgSE1SIHdoZXJlIG5vIG90aGVyIGNvbWJpbmF0aW9uIGRpZC4gwq9cXF8o44OEKV8vwq9cbiAgICAgICAqL1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGdsb2JhbFN0eWxlOiBnbG9iYWxTdHlsZSxcbiAgICAgICAgc3R5bGVkQ29tcG9uZW50SWQ6IHN0eWxlZENvbXBvbmVudElkXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIEdsb2JhbFN0eWxlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHdpbmRvdy5zY0NHU0hNUkNhY2hlW3RoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWRdKSB7XG4gICAgICAgIHdpbmRvdy5zY0NHU0hNUkNhY2hlW3RoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWRdIC09IDE7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIERlcGVuZGluZyBvbiB0aGUgb3JkZXIgXCJyZW5kZXJcIiBpcyBjYWxsZWQgdGhpcyBjYW4gY2F1c2UgdGhlIHN0eWxlcyB0byBiZSBsb3N0XG4gICAgICAgKiB1bnRpbCB0aGUgbmV4dCByZW5kZXIgcGFzcyBvZiB0aGUgcmVtYWluaW5nIGluc3RhbmNlLCB3aGljaCBtYXlcbiAgICAgICAqIG5vdCBiZSBpbW1lZGlhdGUuXG4gICAgICAgKi9cbiAgICAgIGlmICh3aW5kb3cuc2NDR1NITVJDYWNoZVt0aGlzLnN0YXRlLnN0eWxlZENvbXBvbmVudElkXSA9PT0gMCkge1xuICAgICAgICB0aGlzLnN0YXRlLmdsb2JhbFN0eWxlLnJlbW92ZVN0eWxlcyh0aGlzLnN0eWxlU2hlZXQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBHbG9iYWxTdHlsZUNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIFJlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIGdsb2JhbCBzdHlsZSBjb21wb25lbnQgJyArIHRoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWQgKyAnIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFN0eWxlU2hlZXRDb25zdW1lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZnVuY3Rpb24gKHN0eWxlU2hlZXQpIHtcbiAgICAgICAgICBfdGhpczIuc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQgfHwgU3R5bGVTaGVldC5tYXN0ZXI7XG5cbiAgICAgICAgICB2YXIgZ2xvYmFsU3R5bGUgPSBfdGhpczIuc3RhdGUuZ2xvYmFsU3R5bGU7XG5cblxuICAgICAgICAgIGlmIChnbG9iYWxTdHlsZS5pc1N0YXRpYykge1xuICAgICAgICAgICAgZ2xvYmFsU3R5bGUucmVuZGVyU3R5bGVzKFNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCwgX3RoaXMyLnN0eWxlU2hlZXQpO1xuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFRoZW1lQ29uc3VtZXIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICAgICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gX3RoaXMyLmNvbnN0cnVjdG9yLmRlZmF1bHRQcm9wcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgX3RoaXMyLnByb3BzKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhlbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0LnRoZW1lID0gZGV0ZXJtaW5lVGhlbWUoX3RoaXMyLnByb3BzLCB0aGVtZSwgZGVmYXVsdFByb3BzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnbG9iYWxTdHlsZS5yZW5kZXJTdHlsZXMoY29udGV4dCwgX3RoaXMyLnN0eWxlU2hlZXQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gR2xvYmFsU3R5bGVDb21wb25lbnQ7XG4gIH0oUmVhY3QuQ29tcG9uZW50KTtcblxuICBHbG9iYWxTdHlsZUNvbXBvbmVudC5nbG9iYWxTdHlsZSA9IHN0eWxlO1xuICBHbG9iYWxTdHlsZUNvbXBvbmVudC5zdHlsZWRDb21wb25lbnRJZCA9IGlkO1xuXG5cbiAgcmV0dXJuIEdsb2JhbFN0eWxlQ29tcG9uZW50O1xufVxuXG4vLyBcblxudmFyIHJlcGxhY2VXaGl0ZXNwYWNlID0gZnVuY3Rpb24gcmVwbGFjZVdoaXRlc3BhY2Uoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzfFxcXFxuL2csICcnKTtcbn07XG5cbmZ1bmN0aW9uIGtleWZyYW1lcyhzdHJpbmdzKSB7XG4gIC8qIFdhcm5pbmcgaWYgeW91J3ZlIHVzZWQga2V5ZnJhbWVzIG9uIFJlYWN0IE5hdGl2ZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKCdga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC4nKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcnVsZXMgPSBjc3MuYXBwbHkodW5kZWZpbmVkLCBbc3RyaW5nc10uY29uY2F0KGludGVycG9sYXRpb25zKSk7XG5cbiAgdmFyIG5hbWUgPSBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKG11cm11cmhhc2gocmVwbGFjZVdoaXRlc3BhY2UoSlNPTi5zdHJpbmdpZnkocnVsZXMpKSkpO1xuXG4gIHJldHVybiBuZXcgS2V5ZnJhbWVzKG5hbWUsIHN0cmluZ2lmeVJ1bGVzKHJ1bGVzLCBuYW1lLCAnQGtleWZyYW1lcycpKTtcbn1cblxuLy8gXG5cbnZhciB3aXRoVGhlbWUgPSAoZnVuY3Rpb24gKENvbXBvbmVudCQkMSkge1xuICB2YXIgV2l0aFRoZW1lID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50JCQxLmRlZmF1bHRQcm9wcztcblxuICAgICAgICB2YXIgdGhlbWVQcm9wID0gZGV0ZXJtaW5lVGhlbWUocHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHRoZW1lUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJyArIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50JCQxKSArICdcIicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50JCQxLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGhlbWU6IHRoZW1lUHJvcCwgcmVmOiByZWYgfSkpO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG4gIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50JCQxKTtcblxuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSAnV2l0aFRoZW1lKCcgKyBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCQkMSkgKyAnKSc7XG5cbiAgcmV0dXJuIFdpdGhUaGVtZTtcbn0pO1xuXG4vLyBcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfSEFVTlRFRF9CWV9TUE9PS1lfR0hPU1RTID0ge1xuICBTdHlsZVNoZWV0OiBTdHlsZVNoZWV0XG59O1xuXG4vLyBcblxuLyogV2FybmluZyBpZiB5b3UndmUgaW1wb3J0ZWQgdGhpcyBmaWxlIG9uIFJlYWN0IE5hdGl2ZSAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuXCIgKyBcIlBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblwiICsgJ1JlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmUnKTtcbn1cblxuLyogV2FybmluZyBpZiB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTm9kZS5qcycpID09PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2pzZG9tJykgPT09IC0xKSB7XG4gIHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSA9IHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSB8fCAwO1xuXG4gIGlmICh3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gPT09IDEpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gXCIgKyAnVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgbm90IHJlbmRlcmluZyBwcm9wZXJseSwgZXJyb3JzIGhhcHBlbmluZyBkdXJpbmcgcmVoeWRyYXRpb24gcHJvY2VzcyAnICsgJ2FuZCBtYWtlcyB5b3VyIGFwcGxpY2F0aW9uIGJpZ2dlciB3aXRob3V0IGEgZ29vZCByZWFzb24uXFxuXFxuJyArICdTZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLicpO1xuICB9XG5cbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddICs9IDE7XG59XG5cbi8vXG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDtcbmV4cG9ydCB7IGNyZWF0ZUdsb2JhbFN0eWxlLCBjc3MsIGlzU3R5bGVkQ29tcG9uZW50LCBrZXlmcmFtZXMsIFNlcnZlclN0eWxlU2hlZXQsIFN0eWxlU2hlZXRDb25zdW1lciwgU3R5bGVTaGVldENvbnRleHQsIFN0eWxlU2hlZXRNYW5hZ2VyLCBUaGVtZUNvbnN1bWVyLCBUaGVtZUNvbnRleHQsIFRoZW1lUHJvdmlkZXIsIHdpdGhUaGVtZSwgX19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0hBVU5URURfQllfU1BPT0tZX0dIT1NUUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB3aGl0ZXNwYWNlXG5cbnZhciBmcm9tQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciByZSA9IC9cXHMvXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhIHdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuZnVuY3Rpb24gd2hpdGVzcGFjZShjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIHJlLnRlc3QoXG4gICAgdHlwZW9mIGNoYXJhY3RlciA9PT0gJ251bWJlcicgPyBmcm9tQ29kZShjaGFyYWN0ZXIpIDogY2hhcmFjdGVyLmNoYXJBdCgwKVxuICApXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGV4dGVuZFxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gICAgdmFyIHRhcmdldCA9IHt9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldXG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldFxufVxuIiwiLy8gVE9ETyhCYWJlbCA4KTogUmVtb3ZlIHRoaXMgZmlsZS5cblxudmFyIHJ1bnRpbWUgPSByZXF1aXJlKFwiLi4vaGVscGVycy9yZWdlbmVyYXRvclJ1bnRpbWVcIikoKTtcbm1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcblxuLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2Jsb2IvbWFpbi9wYWNrYWdlcy9ydW50aW1lL3J1bnRpbWUuanMjTDczNj1cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi90eXBlJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFR5cGVFcnJvcjtcbiIsIlxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHJpbTtcblxuZnVuY3Rpb24gdHJpbShzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxuZXhwb3J0cy5sZWZ0ID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbn07XG5cbmV4cG9ydHMucmlnaHQgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xccyokLywgJycpO1xufTtcbiIsInZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZShcIi4vdG9Qcm9wZXJ0eUtleS5qc1wiKTtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7XG4gIHJldHVybiAociA9IHRvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwge1xuICAgIHZhbHVlOiB0LFxuICAgIGVudW1lcmFibGU6ICEwLFxuICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgd3JpdGFibGU6ICEwXG4gIH0pIDogZVtyXSA9IHQsIGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChuLCB0LCBlLCByLCBvLCBhLCBjKSB7XG4gIHRyeSB7XG4gICAgdmFyIGkgPSBuW2FdKGMpLFxuICAgICAgdSA9IGkudmFsdWU7XG4gIH0gY2F0Y2ggKG4pIHtcbiAgICByZXR1cm4gdm9pZCBlKG4pO1xuICB9XG4gIGkuZG9uZSA/IHQodSkgOiBQcm9taXNlLnJlc29sdmUodSkudGhlbihyLCBvKTtcbn1cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdCA9IHRoaXMsXG4gICAgICBlID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAociwgbykge1xuICAgICAgdmFyIGEgPSBuLmFwcGx5KHQsIGUpO1xuICAgICAgZnVuY3Rpb24gX25leHQobikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoYSwgciwgbywgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIG4pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gX3Rocm93KG4pIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGEsIHIsIG8sIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgbik7XG4gICAgICB9XG4gICAgICBfbmV4dCh2b2lkIDApO1xuICAgIH0pO1xuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvciwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHxcbiAgICAgIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpICE9IG9iamVjdFRhZyB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgX3R5cGVvZihvKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBoYXNNYXAgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIE1hcC5wcm90b3R5cGU7XG52YXIgbWFwU2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc01hcCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTWFwLnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgbWFwU2l6ZSA9IGhhc01hcCAmJiBtYXBTaXplRGVzY3JpcHRvciAmJiB0eXBlb2YgbWFwU2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gbWFwU2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBtYXBGb3JFYWNoID0gaGFzTWFwICYmIE1hcC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIFNldC5wcm90b3R5cGU7XG52YXIgc2V0U2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc1NldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU2V0LnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgc2V0U2l6ZSA9IGhhc1NldCAmJiBzZXRTaXplRGVzY3JpcHRvciAmJiB0eXBlb2Ygc2V0U2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gc2V0U2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBzZXRGb3JFYWNoID0gaGFzU2V0ICYmIFNldC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgV2Vha01hcC5wcm90b3R5cGU7XG52YXIgd2Vha01hcEhhcyA9IGhhc1dlYWtNYXAgPyBXZWFrTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrU2V0LnByb3RvdHlwZTtcbnZhciB3ZWFrU2V0SGFzID0gaGFzV2Vha1NldCA/IFdlYWtTZXQucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgaGFzV2Vha1JlZiA9IHR5cGVvZiBXZWFrUmVmID09PSAnZnVuY3Rpb24nICYmIFdlYWtSZWYucHJvdG90eXBlO1xudmFyIHdlYWtSZWZEZXJlZiA9IGhhc1dlYWtSZWYgPyBXZWFrUmVmLnByb3RvdHlwZS5kZXJlZiA6IG51bGw7XG52YXIgYm9vbGVhblZhbHVlT2YgPSBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mO1xudmFyIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyICRtYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2g7XG52YXIgJHNsaWNlID0gU3RyaW5nLnByb3RvdHlwZS5zbGljZTtcbnZhciAkcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciAkdG9VcHBlckNhc2UgPSBTdHJpbmcucHJvdG90eXBlLnRvVXBwZXJDYXNlO1xudmFyICR0b0xvd2VyQ2FzZSA9IFN0cmluZy5wcm90b3R5cGUudG9Mb3dlckNhc2U7XG52YXIgJHRlc3QgPSBSZWdFeHAucHJvdG90eXBlLnRlc3Q7XG52YXIgJGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgJGpvaW4gPSBBcnJheS5wcm90b3R5cGUuam9pbjtcbnZhciAkYXJyU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgJGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBiaWdJbnRWYWx1ZU9mID0gdHlwZW9mIEJpZ0ludCA9PT0gJ2Z1bmN0aW9uJyA/IEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZiA6IG51bGw7XG52YXIgZ09QUyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgc3ltVG9TdHJpbmcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnID8gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA6IG51bGw7XG52YXIgaGFzU2hhbW1lZFN5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdvYmplY3QnO1xuLy8gaWUsIGBoYXMtdG9zdHJpbmd0YWcvc2hhbXNcbnZhciB0b1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmICh0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSBoYXNTaGFtbWVkU3ltYm9scyA/ICdvYmplY3QnIDogJ3N5bWJvbCcpXG4gICAgPyBTeW1ib2wudG9TdHJpbmdUYWdcbiAgICA6IG51bGw7XG52YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxudmFyIGdQTyA9ICh0eXBlb2YgUmVmbGVjdCA9PT0gJ2Z1bmN0aW9uJyA/IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YgOiBPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHx8IChcbiAgICBbXS5fX3Byb3RvX18gPT09IEFycmF5LnByb3RvdHlwZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG4gICAgICAgID8gZnVuY3Rpb24gKE8pIHtcbiAgICAgICAgICAgIHJldHVybiBPLl9fcHJvdG9fXzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuICAgICAgICB9XG4gICAgICAgIDogbnVsbFxuKTtcblxuZnVuY3Rpb24gYWRkTnVtZXJpY1NlcGFyYXRvcihudW0sIHN0cikge1xuICAgIGlmIChcbiAgICAgICAgbnVtID09PSBJbmZpbml0eVxuICAgICAgICB8fCBudW0gPT09IC1JbmZpbml0eVxuICAgICAgICB8fCBudW0gIT09IG51bVxuICAgICAgICB8fCAobnVtICYmIG51bSA+IC0xMDAwICYmIG51bSA8IDEwMDApXG4gICAgICAgIHx8ICR0ZXN0LmNhbGwoL2UvLCBzdHIpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHZhciBzZXBSZWdleCA9IC9bMC05XSg/PSg/OlswLTldezN9KSsoPyFbMC05XSkpL2c7XG4gICAgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBpbnQgPSBudW0gPCAwID8gLSRmbG9vcigtbnVtKSA6ICRmbG9vcihudW0pOyAvLyB0cnVuYyhudW0pXG4gICAgICAgIGlmIChpbnQgIT09IG51bSkge1xuICAgICAgICAgICAgdmFyIGludFN0ciA9IFN0cmluZyhpbnQpO1xuICAgICAgICAgICAgdmFyIGRlYyA9ICRzbGljZS5jYWxsKHN0ciwgaW50U3RyLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoaW50U3RyLCBzZXBSZWdleCwgJyQmXycpICsgJy4nICsgJHJlcGxhY2UuY2FsbCgkcmVwbGFjZS5jYWxsKGRlYywgLyhbMC05XXszfSkvZywgJyQmXycpLCAvXyQvLCAnJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoc3RyLCBzZXBSZWdleCwgJyQmXycpO1xufVxuXG52YXIgdXRpbEluc3BlY3QgPSByZXF1aXJlKCcuL3V0aWwuaW5zcGVjdCcpO1xudmFyIGluc3BlY3RDdXN0b20gPSB1dGlsSW5zcGVjdC5jdXN0b207XG52YXIgaW5zcGVjdFN5bWJvbCA9IGlzU3ltYm9sKGluc3BlY3RDdXN0b20pID8gaW5zcGVjdEN1c3RvbSA6IG51bGw7XG5cbnZhciBxdW90ZXMgPSB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgICdkb3VibGUnOiAnXCInLFxuICAgIHNpbmdsZTogXCInXCJcbn07XG52YXIgcXVvdGVSRXMgPSB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgICdkb3VibGUnOiAvKFtcIlxcXFxdKS9nLFxuICAgIHNpbmdsZTogLyhbJ1xcXFxdKS9nXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluc3BlY3RfKG9iaiwgb3B0aW9ucywgZGVwdGgsIHNlZW4pIHtcbiAgICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBpZiAoaGFzKG9wdHMsICdxdW90ZVN0eWxlJykgJiYgIWhhcyhxdW90ZXMsIG9wdHMucXVvdGVTdHlsZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwicXVvdGVTdHlsZVwiIG11c3QgYmUgXCJzaW5nbGVcIiBvciBcImRvdWJsZVwiJyk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICAgaGFzKG9wdHMsICdtYXhTdHJpbmdMZW5ndGgnKSAmJiAodHlwZW9mIG9wdHMubWF4U3RyaW5nTGVuZ3RoID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBvcHRzLm1heFN0cmluZ0xlbmd0aCA8IDAgJiYgb3B0cy5tYXhTdHJpbmdMZW5ndGggIT09IEluZmluaXR5XG4gICAgICAgICAgICA6IG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBudWxsXG4gICAgICAgIClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwibWF4U3RyaW5nTGVuZ3RoXCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgSW5maW5pdHksIG9yIGBudWxsYCcpO1xuICAgIH1cbiAgICB2YXIgY3VzdG9tSW5zcGVjdCA9IGhhcyhvcHRzLCAnY3VzdG9tSW5zcGVjdCcpID8gb3B0cy5jdXN0b21JbnNwZWN0IDogdHJ1ZTtcbiAgICBpZiAodHlwZW9mIGN1c3RvbUluc3BlY3QgIT09ICdib29sZWFuJyAmJiBjdXN0b21JbnNwZWN0ICE9PSAnc3ltYm9sJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJjdXN0b21JbnNwZWN0XCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGB0cnVlYCwgYGZhbHNlYCwgb3IgYFxcJ3N5bWJvbFxcJ2AnKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnaW5kZW50JylcbiAgICAgICAgJiYgb3B0cy5pbmRlbnQgIT09IG51bGxcbiAgICAgICAgJiYgb3B0cy5pbmRlbnQgIT09ICdcXHQnXG4gICAgICAgICYmICEocGFyc2VJbnQob3B0cy5pbmRlbnQsIDEwKSA9PT0gb3B0cy5pbmRlbnQgJiYgb3B0cy5pbmRlbnQgPiAwKVxuICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJpbmRlbnRcIiBtdXN0IGJlIFwiXFxcXHRcIiwgYW4gaW50ZWdlciA+IDAsIG9yIGBudWxsYCcpO1xuICAgIH1cbiAgICBpZiAoaGFzKG9wdHMsICdudW1lcmljU2VwYXJhdG9yJykgJiYgdHlwZW9mIG9wdHMubnVtZXJpY1NlcGFyYXRvciAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm51bWVyaWNTZXBhcmF0b3JcIiwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYHRydWVgIG9yIGBmYWxzZWAnKTtcbiAgICB9XG4gICAgdmFyIG51bWVyaWNTZXBhcmF0b3IgPSBvcHRzLm51bWVyaWNTZXBhcmF0b3I7XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9iaiA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKG9iaiwgb3B0cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAob2JqID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHkgLyBvYmogPiAwID8gJzAnIDogJy0wJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyID0gU3RyaW5nKG9iaik7XG4gICAgICAgIHJldHVybiBudW1lcmljU2VwYXJhdG9yID8gYWRkTnVtZXJpY1NlcGFyYXRvcihvYmosIHN0cikgOiBzdHI7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYmlnaW50Jykge1xuICAgICAgICB2YXIgYmlnSW50U3RyID0gU3RyaW5nKG9iaikgKyAnbic7XG4gICAgICAgIHJldHVybiBudW1lcmljU2VwYXJhdG9yID8gYWRkTnVtZXJpY1NlcGFyYXRvcihvYmosIGJpZ0ludFN0cikgOiBiaWdJbnRTdHI7XG4gICAgfVxuXG4gICAgdmFyIG1heERlcHRoID0gdHlwZW9mIG9wdHMuZGVwdGggPT09ICd1bmRlZmluZWQnID8gNSA6IG9wdHMuZGVwdGg7XG4gICAgaWYgKHR5cGVvZiBkZXB0aCA9PT0gJ3VuZGVmaW5lZCcpIHsgZGVwdGggPSAwOyB9XG4gICAgaWYgKGRlcHRoID49IG1heERlcHRoICYmIG1heERlcHRoID4gMCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheShvYmopID8gJ1tBcnJheV0nIDogJ1tPYmplY3RdJztcbiAgICB9XG5cbiAgICB2YXIgaW5kZW50ID0gZ2V0SW5kZW50KG9wdHMsIGRlcHRoKTtcblxuICAgIGlmICh0eXBlb2Ygc2VlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VlbiA9IFtdO1xuICAgIH0gZWxzZSBpZiAoaW5kZXhPZihzZWVuLCBvYmopID49IDApIHtcbiAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNwZWN0KHZhbHVlLCBmcm9tLCBub0luZGVudCkge1xuICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgICAgc2VlbiA9ICRhcnJTbGljZS5jYWxsKHNlZW4pO1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub0luZGVudCkge1xuICAgICAgICAgICAgdmFyIG5ld09wdHMgPSB7XG4gICAgICAgICAgICAgICAgZGVwdGg6IG9wdHMuZGVwdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaGFzKG9wdHMsICdxdW90ZVN0eWxlJykpIHtcbiAgICAgICAgICAgICAgICBuZXdPcHRzLnF1b3RlU3R5bGUgPSBvcHRzLnF1b3RlU3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zcGVjdF8odmFsdWUsIG5ld09wdHMsIGRlcHRoICsgMSwgc2Vlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBvcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nICYmICFpc1JlZ0V4cChvYmopKSB7IC8vIGluIG9sZGVyIGVuZ2luZXMsIHJlZ2V4ZXMgYXJlIGNhbGxhYmxlXG4gICAgICAgIHZhciBuYW1lID0gbmFtZU9mKG9iaik7XG4gICAgICAgIHZhciBrZXlzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICByZXR1cm4gJ1tGdW5jdGlvbicgKyAobmFtZSA/ICc6ICcgKyBuYW1lIDogJyAoYW5vbnltb3VzKScpICsgJ10nICsgKGtleXMubGVuZ3RoID4gMCA/ICcgeyAnICsgJGpvaW4uY2FsbChrZXlzLCAnLCAnKSArICcgfScgOiAnJyk7XG4gICAgfVxuICAgIGlmIChpc1N5bWJvbChvYmopKSB7XG4gICAgICAgIHZhciBzeW1TdHJpbmcgPSBoYXNTaGFtbWVkU3ltYm9scyA/ICRyZXBsYWNlLmNhbGwoU3RyaW5nKG9iaiksIC9eKFN5bWJvbFxcKC4qXFwpKV9bXildKiQvLCAnJDEnKSA6IHN5bVRvU3RyaW5nLmNhbGwob2JqKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFoYXNTaGFtbWVkU3ltYm9scyA/IG1hcmtCb3hlZChzeW1TdHJpbmcpIDogc3ltU3RyaW5nO1xuICAgIH1cbiAgICBpZiAoaXNFbGVtZW50KG9iaikpIHtcbiAgICAgICAgdmFyIHMgPSAnPCcgKyAkdG9Mb3dlckNhc2UuY2FsbChTdHJpbmcob2JqLm5vZGVOYW1lKSk7XG4gICAgICAgIHZhciBhdHRycyA9IG9iai5hdHRyaWJ1dGVzIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzICs9ICcgJyArIGF0dHJzW2ldLm5hbWUgKyAnPScgKyB3cmFwUXVvdGVzKHF1b3RlKGF0dHJzW2ldLnZhbHVlKSwgJ2RvdWJsZScsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gJz4nO1xuICAgICAgICBpZiAob2JqLmNoaWxkTm9kZXMgJiYgb2JqLmNoaWxkTm9kZXMubGVuZ3RoKSB7IHMgKz0gJy4uLic7IH1cbiAgICAgICAgcyArPSAnPC8nICsgJHRvTG93ZXJDYXNlLmNhbGwoU3RyaW5nKG9iai5ub2RlTmFtZSkpICsgJz4nO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAob2JqLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1tdJzsgfVxuICAgICAgICB2YXIgeHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmIChpbmRlbnQgJiYgIXNpbmdsZUxpbmVWYWx1ZXMoeHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1snICsgaW5kZW50ZWRKb2luKHhzLCBpbmRlbnQpICsgJ10nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnWyAnICsgJGpvaW4uY2FsbCh4cywgJywgJykgKyAnIF0nO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcihvYmopKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKCEoJ2NhdXNlJyBpbiBFcnJvci5wcm90b3R5cGUpICYmICdjYXVzZScgaW4gb2JqICYmICFpc0VudW1lcmFibGUuY2FsbChvYmosICdjYXVzZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3sgWycgKyBTdHJpbmcob2JqKSArICddICcgKyAkam9pbi5jYWxsKCRjb25jYXQuY2FsbCgnW2NhdXNlXTogJyArIGluc3BlY3Qob2JqLmNhdXNlKSwgcGFydHMpLCAnLCAnKSArICcgfSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1snICsgU3RyaW5nKG9iaikgKyAnXSc7IH1cbiAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgJGpvaW4uY2FsbChwYXJ0cywgJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgY3VzdG9tSW5zcGVjdCkge1xuICAgICAgICBpZiAoaW5zcGVjdFN5bWJvbCAmJiB0eXBlb2Ygb2JqW2luc3BlY3RTeW1ib2xdID09PSAnZnVuY3Rpb24nICYmIHV0aWxJbnNwZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdXRpbEluc3BlY3Qob2JqLCB7IGRlcHRoOiBtYXhEZXB0aCAtIGRlcHRoIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbUluc3BlY3QgIT09ICdzeW1ib2wnICYmIHR5cGVvZiBvYmouaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5pbnNwZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTWFwKG9iaikpIHtcbiAgICAgICAgdmFyIG1hcFBhcnRzID0gW107XG4gICAgICAgIGlmIChtYXBGb3JFYWNoKSB7XG4gICAgICAgICAgICBtYXBGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIG1hcFBhcnRzLnB1c2goaW5zcGVjdChrZXksIG9iaiwgdHJ1ZSkgKyAnID0+ICcgKyBpbnNwZWN0KHZhbHVlLCBvYmopKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uT2YoJ01hcCcsIG1hcFNpemUuY2FsbChvYmopLCBtYXBQYXJ0cywgaW5kZW50KTtcbiAgICB9XG4gICAgaWYgKGlzU2V0KG9iaikpIHtcbiAgICAgICAgdmFyIHNldFBhcnRzID0gW107XG4gICAgICAgIGlmIChzZXRGb3JFYWNoKSB7XG4gICAgICAgICAgICBzZXRGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZXRQYXJ0cy5wdXNoKGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignU2V0Jywgc2V0U2l6ZS5jYWxsKG9iaiksIHNldFBhcnRzLCBpbmRlbnQpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtNYXAnKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha1NldChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrU2V0Jyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtSZWYob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1JlZicpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoTnVtYmVyKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnSW50KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KGJpZ0ludFZhbHVlT2YuY2FsbChvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW4ob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGJvb2xlYW5WYWx1ZU9mLmNhbGwob2JqKSk7XG4gICAgfVxuICAgIGlmIChpc1N0cmluZyhvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChTdHJpbmcob2JqKSkpO1xuICAgIH1cbiAgICAvLyBub3RlOiBpbiBJRSA4LCBzb21ldGltZXMgYGdsb2JhbCAhPT0gd2luZG93YCBidXQgYm90aCBhcmUgdGhlIHByb3RvdHlwZXMgb2YgZWFjaCBvdGhlclxuICAgIC8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBvYmogPT09IHdpbmRvdykge1xuICAgICAgICByZXR1cm4gJ3sgW29iamVjdCBXaW5kb3ddIH0nO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSBnbG9iYWxUaGlzKVxuICAgICAgICB8fCAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSBnbG9iYWwpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiAneyBbb2JqZWN0IGdsb2JhbFRoaXNdIH0nO1xuICAgIH1cbiAgICBpZiAoIWlzRGF0ZShvYmopICYmICFpc1JlZ0V4cChvYmopKSB7XG4gICAgICAgIHZhciB5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgdmFyIGlzUGxhaW5PYmplY3QgPSBnUE8gPyBnUE8ob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZSA6IG9iaiBpbnN0YW5jZW9mIE9iamVjdCB8fCBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICAgICAgdmFyIHByb3RvVGFnID0gb2JqIGluc3RhbmNlb2YgT2JqZWN0ID8gJycgOiAnbnVsbCBwcm90b3R5cGUnO1xuICAgICAgICB2YXIgc3RyaW5nVGFnID0gIWlzUGxhaW5PYmplY3QgJiYgdG9TdHJpbmdUYWcgJiYgT2JqZWN0KG9iaikgPT09IG9iaiAmJiB0b1N0cmluZ1RhZyBpbiBvYmogPyAkc2xpY2UuY2FsbCh0b1N0cihvYmopLCA4LCAtMSkgOiBwcm90b1RhZyA/ICdPYmplY3QnIDogJyc7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvclRhZyA9IGlzUGxhaW5PYmplY3QgfHwgdHlwZW9mIG9iai5jb25zdHJ1Y3RvciAhPT0gJ2Z1bmN0aW9uJyA/ICcnIDogb2JqLmNvbnN0cnVjdG9yLm5hbWUgPyBvYmouY29uc3RydWN0b3IubmFtZSArICcgJyA6ICcnO1xuICAgICAgICB2YXIgdGFnID0gY29uc3RydWN0b3JUYWcgKyAoc3RyaW5nVGFnIHx8IHByb3RvVGFnID8gJ1snICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoW10sIHN0cmluZ1RhZyB8fCBbXSwgcHJvdG9UYWcgfHwgW10pLCAnOiAnKSArICddICcgOiAnJyk7XG4gICAgICAgIGlmICh5cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIHRhZyArICd7fSc7IH1cbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhZyArICd7JyArIGluZGVudGVkSm9pbih5cywgaW5kZW50KSArICd9JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFnICsgJ3sgJyArICRqb2luLmNhbGwoeXMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhvYmopO1xufTtcblxuZnVuY3Rpb24gd3JhcFF1b3RlcyhzLCBkZWZhdWx0U3R5bGUsIG9wdHMpIHtcbiAgICB2YXIgc3R5bGUgPSBvcHRzLnF1b3RlU3R5bGUgfHwgZGVmYXVsdFN0eWxlO1xuICAgIHZhciBxdW90ZUNoYXIgPSBxdW90ZXNbc3R5bGVdO1xuICAgIHJldHVybiBxdW90ZUNoYXIgKyBzICsgcXVvdGVDaGFyO1xufVxuXG5mdW5jdGlvbiBxdW90ZShzKSB7XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoU3RyaW5nKHMpLCAvXCIvZywgJyZxdW90OycpO1xufVxuXG5mdW5jdGlvbiBjYW5UcnVzdFRvU3RyaW5nKG9iaikge1xuICAgIHJldHVybiAhdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAodG9TdHJpbmdUYWcgaW4gb2JqIHx8IHR5cGVvZiBvYmpbdG9TdHJpbmdUYWddICE9PSAndW5kZWZpbmVkJykpO1xufVxuZnVuY3Rpb24gaXNBcnJheShvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XScgJiYgY2FuVHJ1c3RUb1N0cmluZyhvYmopOyB9XG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBEYXRlXScgJiYgY2FuVHJ1c3RUb1N0cmluZyhvYmopOyB9XG5mdW5jdGlvbiBpc1JlZ0V4cChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nICYmIGNhblRydXN0VG9TdHJpbmcob2JqKTsgfVxuZnVuY3Rpb24gaXNFcnJvcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEVycm9yXScgJiYgY2FuVHJ1c3RUb1N0cmluZyhvYmopOyB9XG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nICYmIGNhblRydXN0VG9TdHJpbmcob2JqKTsgfVxuZnVuY3Rpb24gaXNOdW1iZXIob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBOdW1iZXJdJyAmJiBjYW5UcnVzdFRvU3RyaW5nKG9iaik7IH1cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJyAmJiBjYW5UcnVzdFRvU3RyaW5nKG9iaik7IH1cblxuLy8gU3ltYm9sIGFuZCBCaWdJbnQgZG8gaGF2ZSBTeW1ib2wudG9TdHJpbmdUYWcgYnkgc3BlYywgc28gdGhhdCBjYW4ndCBiZSB1c2VkIHRvIGVsaW1pbmF0ZSBmYWxzZSBwb3NpdGl2ZXNcbmZ1bmN0aW9uIGlzU3ltYm9sKG9iaikge1xuICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scykge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiBpbnN0YW5jZW9mIFN5bWJvbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhc3ltVG9TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0JpZ0ludChvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhYmlnSW50VmFsdWVPZikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGJpZ0ludFZhbHVlT2YuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkgfHwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5IGluIHRoaXM7IH07XG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cihvYmopIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBuYW1lT2YoZikge1xuICAgIGlmIChmLm5hbWUpIHsgcmV0dXJuIGYubmFtZTsgfVxuICAgIHZhciBtID0gJG1hdGNoLmNhbGwoZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGYpLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrUmVmKHgpIHtcbiAgICBpZiAoIXdlYWtSZWZEZXJlZiB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrUmVmRGVyZWYuY2FsbCh4KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU2V0KHgpIHtcbiAgICBpZiAoIXNldFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFNldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha1NldCh4KSB7XG4gICAgaWYgKCF3ZWFrU2V0SGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KHgpIHtcbiAgICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHggaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB4Lm5vZGVOYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgeC5nZXRBdHRyaWJ1dGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3RTdHJpbmcoc3RyLCBvcHRzKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPiBvcHRzLm1heFN0cmluZ0xlbmd0aCkge1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gc3RyLmxlbmd0aCAtIG9wdHMubWF4U3RyaW5nTGVuZ3RoO1xuICAgICAgICB2YXIgdHJhaWxlciA9ICcuLi4gJyArIHJlbWFpbmluZyArICcgbW9yZSBjaGFyYWN0ZXInICsgKHJlbWFpbmluZyA+IDEgPyAncycgOiAnJyk7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKCRzbGljZS5jYWxsKHN0ciwgMCwgb3B0cy5tYXhTdHJpbmdMZW5ndGgpLCBvcHRzKSArIHRyYWlsZXI7XG4gICAgfVxuICAgIHZhciBxdW90ZVJFID0gcXVvdGVSRXNbb3B0cy5xdW90ZVN0eWxlIHx8ICdzaW5nbGUnXTtcbiAgICBxdW90ZVJFLmxhc3RJbmRleCA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgICB2YXIgcyA9ICRyZXBsYWNlLmNhbGwoJHJlcGxhY2UuY2FsbChzdHIsIHF1b3RlUkUsICdcXFxcJDEnKSwgL1tcXHgwMC1cXHgxZl0vZywgbG93Ynl0ZSk7XG4gICAgcmV0dXJuIHdyYXBRdW90ZXMocywgJ3NpbmdsZScsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBsb3dieXRlKGMpIHtcbiAgICB2YXIgbiA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgeCA9IHtcbiAgICAgICAgODogJ2InLFxuICAgICAgICA5OiAndCcsXG4gICAgICAgIDEwOiAnbicsXG4gICAgICAgIDEyOiAnZicsXG4gICAgICAgIDEzOiAncidcbiAgICB9W25dO1xuICAgIGlmICh4KSB7IHJldHVybiAnXFxcXCcgKyB4OyB9XG4gICAgcmV0dXJuICdcXFxceCcgKyAobiA8IDB4MTAgPyAnMCcgOiAnJykgKyAkdG9VcHBlckNhc2UuY2FsbChuLnRvU3RyaW5nKDE2KSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtCb3hlZChzdHIpIHtcbiAgICByZXR1cm4gJ09iamVjdCgnICsgc3RyICsgJyknO1xufVxuXG5mdW5jdGlvbiB3ZWFrQ29sbGVjdGlvbk9mKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSArICcgeyA/IH0nO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YodHlwZSwgc2l6ZSwgZW50cmllcywgaW5kZW50KSB7XG4gICAgdmFyIGpvaW5lZEVudHJpZXMgPSBpbmRlbnQgPyBpbmRlbnRlZEpvaW4oZW50cmllcywgaW5kZW50KSA6ICRqb2luLmNhbGwoZW50cmllcywgJywgJyk7XG4gICAgcmV0dXJuIHR5cGUgKyAnICgnICsgc2l6ZSArICcpIHsnICsgam9pbmVkRW50cmllcyArICd9Jztcbn1cblxuZnVuY3Rpb24gc2luZ2xlTGluZVZhbHVlcyh4cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluZGV4T2YoeHNbaV0sICdcXG4nKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEluZGVudChvcHRzLCBkZXB0aCkge1xuICAgIHZhciBiYXNlSW5kZW50O1xuICAgIGlmIChvcHRzLmluZGVudCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICdcXHQnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdHMuaW5kZW50ID09PSAnbnVtYmVyJyAmJiBvcHRzLmluZGVudCA+IDApIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICRqb2luLmNhbGwoQXJyYXkob3B0cy5pbmRlbnQgKyAxKSwgJyAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZTogYmFzZUluZGVudCxcbiAgICAgICAgcHJldjogJGpvaW4uY2FsbChBcnJheShkZXB0aCArIDEpLCBiYXNlSW5kZW50KVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGluZGVudGVkSm9pbih4cywgaW5kZW50KSB7XG4gICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJyc7IH1cbiAgICB2YXIgbGluZUpvaW5lciA9ICdcXG4nICsgaW5kZW50LnByZXYgKyBpbmRlbnQuYmFzZTtcbiAgICByZXR1cm4gbGluZUpvaW5lciArICRqb2luLmNhbGwoeHMsICcsJyArIGxpbmVKb2luZXIpICsgJ1xcbicgKyBpbmRlbnQucHJldjtcbn1cblxuZnVuY3Rpb24gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpIHtcbiAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iaik7XG4gICAgdmFyIHhzID0gW107XG4gICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHhzLmxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB4c1tpXSA9IGhhcyhvYmosIGkpID8gaW5zcGVjdChvYmpbaV0sIG9iaikgOiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3ltcyA9IHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nID8gZ09QUyhvYmopIDogW107XG4gICAgdmFyIHN5bU1hcDtcbiAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMpIHtcbiAgICAgICAgc3ltTWFwID0ge307XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc3ltcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgc3ltTWFwWyckJyArIHN5bXNba11dID0gc3ltc1trXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoIWhhcyhvYmosIGtleSkpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKGlzQXJyICYmIFN0cmluZyhOdW1iZXIoa2V5KSkgPT09IGtleSAmJiBrZXkgPCBvYmoubGVuZ3RoKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scyAmJiBzeW1NYXBbJyQnICsga2V5XSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0byBwcmV2ZW50IHNoYW1tZWQgU3ltYm9scywgd2hpY2ggYXJlIHN0b3JlZCBhcyBzdHJpbmdzLCBmcm9tIGJlaW5nIGluY2x1ZGVkIGluIHRoZSBzdHJpbmcga2V5IHNlY3Rpb25cbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKCR0ZXN0LmNhbGwoL1teXFx3JF0vLCBrZXkpKSB7XG4gICAgICAgICAgICB4cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeHMucHVzaChrZXkgKyAnOiAnICsgaW5zcGVjdChvYmpba2V5XSwgb2JqKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ltcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltc1tqXSkpIHtcbiAgICAgICAgICAgICAgICB4cy5wdXNoKCdbJyArIGluc3BlY3Qoc3ltc1tqXSkgKyAnXTogJyArIGluc3BlY3Qob2JqW3N5bXNbal1dLCBvYmopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geHM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY2ltYWxcblxuLy8gQ2hlY2sgaWYgdGhlIGdpdmVuIGNoYXJhY3RlciBjb2RlLCBvciB0aGUgY2hhcmFjdGVyIGNvZGUgYXQgdGhlIGZpcnN0XG4vLyBjaGFyYWN0ZXIsIGlzIGRlY2ltYWwuXG5mdW5jdGlvbiBkZWNpbWFsKGNoYXJhY3Rlcikge1xuICB2YXIgY29kZSA9IHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdzdHJpbmcnID8gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgOiBjaGFyYWN0ZXJcblxuICByZXR1cm4gY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3IC8qIDAtOSAqL1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRcblxudmFyIHZpc2l0UGFyZW50cyA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cycpXG5cbnZhciBDT05USU5VRSA9IHZpc2l0UGFyZW50cy5DT05USU5VRVxudmFyIFNLSVAgPSB2aXNpdFBhcmVudHMuU0tJUFxudmFyIEVYSVQgPSB2aXNpdFBhcmVudHMuRVhJVFxuXG52aXNpdC5DT05USU5VRSA9IENPTlRJTlVFXG52aXNpdC5TS0lQID0gU0tJUFxudmlzaXQuRVhJVCA9IEVYSVRcblxuZnVuY3Rpb24gdmlzaXQodHJlZSwgdGVzdCwgdmlzaXRvciwgcmV2ZXJzZSkge1xuICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZpc2l0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXZlcnNlID0gdmlzaXRvclxuICAgIHZpc2l0b3IgPSB0ZXN0XG4gICAgdGVzdCA9IG51bGxcbiAgfVxuXG4gIHZpc2l0UGFyZW50cyh0cmVlLCB0ZXN0LCBvdmVybG9hZCwgcmV2ZXJzZSlcblxuICBmdW5jdGlvbiBvdmVybG9hZChub2RlLCBwYXJlbnRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXVxuICAgIHZhciBpbmRleCA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKG5vZGUpIDogbnVsbFxuICAgIHJldHVybiB2aXNpdG9yKG5vZGUsIGluZGV4LCBwYXJlbnQpXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXMuanNcIik7XG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiKTtcbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCIpO1xudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiKTtcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KHIsIGUpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKHIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGUpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGUpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRPYmplY3QgPSByZXF1aXJlKCdlcy1vYmplY3QtYXRvbXMnKTtcblxudmFyICRFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycycpO1xudmFyICRFdmFsRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvZXZhbCcpO1xudmFyICRSYW5nZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3JhbmdlJyk7XG52YXIgJFJlZmVyZW5jZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3JlZicpO1xudmFyICRTeW50YXhFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9zeW50YXgnKTtcbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkVVJJRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdXJpJyk7XG5cbnZhciBhYnMgPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3MvYWJzJyk7XG52YXIgZmxvb3IgPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3MvZmxvb3InKTtcbnZhciBtYXggPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3MvbWF4Jyk7XG52YXIgbWluID0gcmVxdWlyZSgnbWF0aC1pbnRyaW5zaWNzL21pbicpO1xudmFyIHBvdyA9IHJlcXVpcmUoJ21hdGgtaW50cmluc2ljcy9wb3cnKTtcbnZhciByb3VuZCA9IHJlcXVpcmUoJ21hdGgtaW50cmluc2ljcy9yb3VuZCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3Mvc2lnbicpO1xuXG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJ2dldC1wcm90bycpO1xudmFyICRPYmplY3RHUE8gPSByZXF1aXJlKCdnZXQtcHJvdG8vT2JqZWN0LmdldFByb3RvdHlwZU9mJyk7XG52YXIgJFJlZmxlY3RHUE8gPSByZXF1aXJlKCdnZXQtcHJvdG8vUmVmbGVjdC5nZXRQcm90b3R5cGVPZicpO1xuXG52YXIgJGFwcGx5ID0gcmVxdWlyZSgnY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvZnVuY3Rpb25BcHBseScpO1xudmFyICRjYWxsID0gcmVxdWlyZSgnY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvZnVuY3Rpb25DYWxsJyk7XG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQmlnSW50NjRBcnJheSUnOiB0eXBlb2YgQmlnSW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQ2NEFycmF5LFxuXHQnJUJpZ1VpbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdVaW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdVaW50NjRBcnJheSxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6ICRFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiAkRXZhbEVycm9yLFxuXHQnJUZsb2F0MTZBcnJheSUnOiB0eXBlb2YgRmxvYXQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MTZBcnJheSxcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU9iamVjdCUnOiAkT2JqZWN0LFxuXHQnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJzogJGdPUEQsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiAkUmFuZ2VFcnJvcixcblx0JyVSZWZlcmVuY2VFcnJvciUnOiAkUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6ICRVUklFcnJvcixcblx0JyVXZWFrTWFwJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAsXG5cdCclV2Vha1JlZiUnOiB0eXBlb2YgV2Vha1JlZiA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrUmVmLFxuXHQnJVdlYWtTZXQlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldCxcblxuXHQnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJSc6ICRjYWxsLFxuXHQnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnOiAkYXBwbHksXG5cdCclT2JqZWN0LmRlZmluZVByb3BlcnR5JSc6ICRkZWZpbmVQcm9wZXJ0eSxcblx0JyVPYmplY3QuZ2V0UHJvdG90eXBlT2YlJzogJE9iamVjdEdQTyxcblx0JyVNYXRoLmFicyUnOiBhYnMsXG5cdCclTWF0aC5mbG9vciUnOiBmbG9vcixcblx0JyVNYXRoLm1heCUnOiBtYXgsXG5cdCclTWF0aC5taW4lJzogbWluLFxuXHQnJU1hdGgucG93JSc6IHBvdyxcblx0JyVNYXRoLnJvdW5kJSc6IHJvdW5kLFxuXHQnJU1hdGguc2lnbiUnOiBzaWduLFxuXHQnJVJlZmxlY3QuZ2V0UHJvdG90eXBlT2YlJzogJFJlZmxlY3RHUE9cbn07XG5cbmlmIChnZXRQcm90bykge1xuXHR0cnkge1xuXHRcdG51bGwuZXJyb3I7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zaGFkb3dyZWFsbS9wdWxsLzM4NCNpc3N1ZWNvbW1lbnQtMTM2NDI2NDIyOVxuXHRcdHZhciBlcnJvclByb3RvID0gZ2V0UHJvdG8oZ2V0UHJvdG8oZSkpO1xuXHRcdElOVFJJTlNJQ1NbJyVFcnJvci5wcm90b3R5cGUlJ10gPSBlcnJvclByb3RvO1xuXHR9XG59XG5cbnZhciBkb0V2YWwgPSBmdW5jdGlvbiBkb0V2YWwobmFtZSkge1xuXHR2YXIgdmFsdWU7XG5cdGlmIChuYW1lID09PSAnJUFzeW5jRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yJScpIHtcblx0XHR2YXIgZm4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpO1xuXHRcdGlmIChmbikge1xuXHRcdFx0dmFsdWUgPSBmbi5wcm90b3R5cGU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnKSB7XG5cdFx0dmFyIGdlbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yJScpO1xuXHRcdGlmIChnZW4gJiYgZ2V0UHJvdG8pIHtcblx0XHRcdHZhbHVlID0gZ2V0UHJvdG8oZ2VuLnByb3RvdHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0SU5UUklOU0lDU1tuYW1lXSA9IHZhbHVlO1xuXG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBMRUdBQ1lfQUxJQVNFUyA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHQnJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b3R5cGUlJzogWydBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvX2VudHJpZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZW50cmllcyddLFxuXHQnJUFycmF5UHJvdG9fZm9yRWFjaCUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdmb3JFYWNoJ10sXG5cdCclQXJyYXlQcm90b19rZXlzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2tleXMnXSxcblx0JyVBcnJheVByb3RvX3ZhbHVlcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICd2YWx1ZXMnXSxcblx0JyVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IFsnQXN5bmNGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3JQcm90b3R5cGUlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVCb29sZWFuUHJvdG90eXBlJSc6IFsnQm9vbGVhbicsICdwcm90b3R5cGUnXSxcblx0JyVEYXRhVmlld1Byb3RvdHlwZSUnOiBbJ0RhdGFWaWV3JywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGVQcm90b3R5cGUlJzogWydEYXRlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUVycm9yUHJvdG90eXBlJSc6IFsnRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRXZhbEVycm9yUHJvdG90eXBlJSc6IFsnRXZhbEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0MzJBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDY0QXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDY0QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRnVuY3Rpb25Qcm90b3R5cGUlJzogWydGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3IlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3JQcm90b3R5cGUlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclSW50OEFycmF5UHJvdG90eXBlJSc6IFsnSW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDE2QXJyYXlQcm90b3R5cGUlJzogWydJbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDMyQXJyYXlQcm90b3R5cGUlJzogWydJbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUpTT05QYXJzZSUnOiBbJ0pTT04nLCAncGFyc2UnXSxcblx0JyVKU09OU3RyaW5naWZ5JSc6IFsnSlNPTicsICdzdHJpbmdpZnknXSxcblx0JyVNYXBQcm90b3R5cGUlJzogWydNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclTnVtYmVyUHJvdG90eXBlJSc6IFsnTnVtYmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJU9iamVjdFByb3RvdHlwZSUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnXSxcblx0JyVPYmpQcm90b190b1N0cmluZyUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndG9TdHJpbmcnXSxcblx0JyVPYmpQcm90b192YWx1ZU9mJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd2YWx1ZU9mJ10sXG5cdCclUHJvbWlzZVByb3RvdHlwZSUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJ10sXG5cdCclUHJvbWlzZVByb3RvX3RoZW4lJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZScsICd0aGVuJ10sXG5cdCclUHJvbWlzZV9hbGwlJzogWydQcm9taXNlJywgJ2FsbCddLFxuXHQnJVByb21pc2VfcmVqZWN0JSc6IFsnUHJvbWlzZScsICdyZWplY3QnXSxcblx0JyVQcm9taXNlX3Jlc29sdmUlJzogWydQcm9taXNlJywgJ3Jlc29sdmUnXSxcblx0JyVSYW5nZUVycm9yUHJvdG90eXBlJSc6IFsnUmFuZ2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBbJ1JlZmVyZW5jZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZ0V4cFByb3RvdHlwZSUnOiBbJ1JlZ0V4cCcsICdwcm90b3R5cGUnXSxcblx0JyVTZXRQcm90b3R5cGUlJzogWydTZXQnLCAncHJvdG90eXBlJ10sXG5cdCclU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydTaGFyZWRBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVTdHJpbmdQcm90b3R5cGUlJzogWydTdHJpbmcnLCAncHJvdG90eXBlJ10sXG5cdCclU3ltYm9sUHJvdG90eXBlJSc6IFsnU3ltYm9sJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bnRheEVycm9yUHJvdG90eXBlJSc6IFsnU3ludGF4RXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZWRBcnJheVByb3RvdHlwZSUnOiBbJ1R5cGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZUVycm9yUHJvdG90eXBlJSc6IFsnVHlwZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4QXJyYXlQcm90b3R5cGUlJzogWydVaW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhDbGFtcGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDE2QXJyYXlQcm90b3R5cGUlJzogWydVaW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVSSUVycm9yUHJvdG90eXBlJSc6IFsnVVJJRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha01hcFByb3RvdHlwZSUnOiBbJ1dlYWtNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha1NldFByb3RvdHlwZSUnOiBbJ1dlYWtTZXQnLCAncHJvdG90eXBlJ11cbn07XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhc293bicpO1xudmFyICRjb25jYXQgPSBiaW5kLmNhbGwoJGNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbCgkYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKCRjYWxsLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyICRzdHJTbGljZSA9IGJpbmQuY2FsbCgkY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgJGV4ZWMgPSBiaW5kLmNhbGwoJGNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG5cdHZhciBsYXN0ID0gJHN0clNsaWNlKHN0cmluZywgLTEpO1xuXHRpZiAoZmlyc3QgPT09ICclJyAmJiBsYXN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgJyk7XG5cdH0gZWxzZSBpZiAobGFzdCA9PT0gJyUnICYmIGZpcnN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgJyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuXHRcdFx0dmFsdWUgPSBkb0V2YWwoaW50cmluc2ljTmFtZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGlhczogYWxpYXMsXG5cdFx0XHRuYW1lOiBpbnRyaW5zaWNOYW1lLFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fTtcblx0fVxuXG5cdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0aWYgKCRleGVjKC9eJT9bXiVdKiU/JC8sIG5hbWUpID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignYCVgIG1heSBub3QgYmUgcHJlc2VudCBhbnl3aGVyZSBidXQgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRoZSBpbnRyaW5zaWMgbmFtZScpO1xuXHR9XG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHBhcnQsIDAsIDEpO1xuXHRcdHZhciBsYXN0ID0gJHN0clNsaWNlKHBhcnQsIC0xKTtcblx0XHRpZiAoXG5cdFx0XHQoXG5cdFx0XHRcdChmaXJzdCA9PT0gJ1wiJyB8fCBmaXJzdCA9PT0gXCInXCIgfHwgZmlyc3QgPT09ICdgJylcblx0XHRcdFx0fHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gJ2AnKVxuXHRcdFx0KVxuXHRcdFx0JiYgZmlyc3QgIT09IGxhc3Rcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Byb3BlcnR5IG5hbWVzIHdpdGggcXVvdGVzIG11c3QgaGF2ZSBtYXRjaGluZyBxdW90ZXMnKTtcblx0XHR9XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdGlzT3duID0gISFkZXNjO1xuXG5cdFx0XHRcdC8vIEJ5IGNvbnZlbnRpb24sIHdoZW4gYSBkYXRhIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhbiBhY2Nlc3NvclxuXHRcdFx0XHQvLyBwcm9wZXJ0eSB0byBlbXVsYXRlIGEgZGF0YSBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tXG5cdFx0XHRcdC8vIHRoZSBvdmVycmlkZSBtaXN0YWtlLCB0aGF0IGFjY2Vzc29yJ3MgZ2V0dGVyIGlzIG1hcmtlZCB3aXRoXG5cdFx0XHRcdC8vIGFuIGBvcmlnaW5hbFZhbHVlYCBwcm9wZXJ0eS4gSGVyZSwgd2hlbiB3ZSBkZXRlY3QgdGhpcywgd2Vcblx0XHRcdFx0Ly8gdXBob2xkIHRoZSBpbGx1c2lvbiBieSBwcmV0ZW5kaW5nIHRvIHNlZSB0aGF0IG9yaWdpbmFsIGRhdGFcblx0XHRcdFx0Ly8gcHJvcGVydHksIGkuZS4sIHJldHVybmluZyB0aGUgdmFsdWUgcmF0aGVyIHRoYW4gdGhlIGdldHRlclxuXHRcdFx0XHQvLyBpdHNlbGYuXG5cdFx0XHRcdGlmIChpc093biAmJiAnZ2V0JyBpbiBkZXNjICYmICEoJ29yaWdpbmFsVmFsdWUnIGluIGRlc2MuZ2V0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZGVzYy5nZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXNPd24gPSBoYXNPd24odmFsdWUsIHBhcnQpO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuXHRcdFx0XHRJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9mdW5jdGlvbkNhbGwnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyIHBlcmNlbnRUd2VudGllcyA9IC8lMjAvZztcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnZGVmYXVsdCc6IEZvcm1hdC5SRkMzOTg2LFxuICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFJGQzE3Mzg6IEZvcm1hdC5SRkMxNzM4LFxuICAgIFJGQzM5ODY6IEZvcm1hdC5SRkMzOTg2XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBsZWdhY3kgPSByZXF1aXJlKCdjaGFyYWN0ZXItZW50aXRpZXMtbGVnYWN5JylcbnZhciBpbnZhbGlkID0gcmVxdWlyZSgnY2hhcmFjdGVyLXJlZmVyZW5jZS1pbnZhbGlkJylcbnZhciBkZWNpbWFsID0gcmVxdWlyZSgnaXMtZGVjaW1hbCcpXG52YXIgaGV4YWRlY2ltYWwgPSByZXF1aXJlKCdpcy1oZXhhZGVjaW1hbCcpXG52YXIgYWxwaGFudW1lcmljYWwgPSByZXF1aXJlKCdpcy1hbHBoYW51bWVyaWNhbCcpXG52YXIgZGVjb2RlRW50aXR5ID0gcmVxdWlyZSgnLi9kZWNvZGUtZW50aXR5JylcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUVudGl0aWVzXG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciBub29wID0gRnVuY3Rpb24ucHJvdG90eXBlXG5cbi8vIERlZmF1bHQgc2V0dGluZ3MuXG52YXIgZGVmYXVsdHMgPSB7XG4gIHdhcm5pbmc6IG51bGwsXG4gIHJlZmVyZW5jZTogbnVsbCxcbiAgdGV4dDogbnVsbCxcbiAgd2FybmluZ0NvbnRleHQ6IG51bGwsXG4gIHJlZmVyZW5jZUNvbnRleHQ6IG51bGwsXG4gIHRleHRDb250ZXh0OiBudWxsLFxuICBwb3NpdGlvbjoge30sXG4gIGFkZGl0aW9uYWw6IG51bGwsXG4gIGF0dHJpYnV0ZTogZmFsc2UsXG4gIG5vblRlcm1pbmF0ZWQ6IHRydWVcbn1cblxuLy8gQ2hhcmFjdGVycy5cbnZhciB0YWIgPSA5IC8vICdcXHQnXG52YXIgbGluZUZlZWQgPSAxMCAvLyAnXFxuJ1xudmFyIGZvcm1GZWVkID0gMTIgLy8gICdcXGYnXG52YXIgc3BhY2UgPSAzMiAvLyAnICdcbnZhciBhbXBlcnNhbmQgPSAzOCAvLyAgJyYnXG52YXIgc2VtaWNvbG9uID0gNTkgLy8gICc7J1xudmFyIGxlc3NUaGFuID0gNjAgLy8gICc8J1xudmFyIGVxdWFsc1RvID0gNjEgLy8gICc9J1xudmFyIG51bWJlclNpZ24gPSAzNSAvLyAgJyMnXG52YXIgdXBwZXJjYXNlWCA9IDg4IC8vICAnWCdcbnZhciBsb3dlcmNhc2VYID0gMTIwIC8vICAneCdcbnZhciByZXBsYWNlbWVudENoYXJhY3RlciA9IDY1NTMzIC8vICfvv70nXG5cbi8vIFJlZmVyZW5jZSB0eXBlcy5cbnZhciBuYW1lID0gJ25hbWVkJ1xudmFyIGhleGEgPSAnaGV4YWRlY2ltYWwnXG52YXIgZGVjaSA9ICdkZWNpbWFsJ1xuXG4vLyBNYXAgb2YgYmFzZXMuXG52YXIgYmFzZXMgPSB7fVxuXG5iYXNlc1toZXhhXSA9IDE2XG5iYXNlc1tkZWNpXSA9IDEwXG5cbi8vIE1hcCBvZiB0eXBlcyB0byB0ZXN0cy5cbi8vIEVhY2ggdHlwZSBvZiBjaGFyYWN0ZXIgcmVmZXJlbmNlIGFjY2VwdHMgZGlmZmVyZW50IGNoYXJhY3RlcnMuXG4vLyBUaGlzIHRlc3QgaXMgdXNlZCB0byBkZXRlY3Qgd2hldGhlciBhIHJlZmVyZW5jZSBoYXMgZW5kZWQgKGFzIHRoZSBzZW1pY29sb25cbi8vIGlzIG5vdCBzdHJpY3RseSBuZWVkZWQpLlxudmFyIHRlc3RzID0ge31cblxudGVzdHNbbmFtZV0gPSBhbHBoYW51bWVyaWNhbFxudGVzdHNbZGVjaV0gPSBkZWNpbWFsXG50ZXN0c1toZXhhXSA9IGhleGFkZWNpbWFsXG5cbi8vIFdhcm5pbmcgdHlwZXMuXG52YXIgbmFtZWROb3RUZXJtaW5hdGVkID0gMVxudmFyIG51bWVyaWNOb3RUZXJtaW5hdGVkID0gMlxudmFyIG5hbWVkRW1wdHkgPSAzXG52YXIgbnVtZXJpY0VtcHR5ID0gNFxudmFyIG5hbWVkVW5rbm93biA9IDVcbnZhciBudW1lcmljRGlzYWxsb3dlZCA9IDZcbnZhciBudW1lcmljUHJvaGliaXRlZCA9IDdcblxuLy8gV2FybmluZyBtZXNzYWdlcy5cbnZhciBtZXNzYWdlcyA9IHt9XG5cbm1lc3NhZ2VzW25hbWVkTm90VGVybWluYXRlZF0gPVxuICAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJ1xubWVzc2FnZXNbbnVtZXJpY05vdFRlcm1pbmF0ZWRdID1cbiAgJ051bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJ1xubWVzc2FnZXNbbmFtZWRFbXB0eV0gPSAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgY2Fubm90IGJlIGVtcHR5J1xubWVzc2FnZXNbbnVtZXJpY0VtcHR5XSA9ICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBlbXB0eSdcbm1lc3NhZ2VzW25hbWVkVW5rbm93bl0gPSAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSBrbm93bidcbm1lc3NhZ2VzW251bWVyaWNEaXNhbGxvd2VkXSA9XG4gICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBkaXNhbGxvd2VkJ1xubWVzc2FnZXNbbnVtZXJpY1Byb2hpYml0ZWRdID1cbiAgJ051bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZXMgY2Fubm90IGJlIG91dHNpZGUgdGhlIHBlcm1pc3NpYmxlIFVuaWNvZGUgcmFuZ2UnXG5cbi8vIFdyYXAgdG8gZW5zdXJlIGNsZWFuIHBhcmFtZXRlcnMgYXJlIGdpdmVuIHRvIGBwYXJzZWAuXG5mdW5jdGlvbiBwYXJzZUVudGl0aWVzKHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IHt9XG4gIHZhciBvcHRpb25cbiAgdmFyIGtleVxuXG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBvcHRpb24gPSBvcHRpb25zW2tleV1cbiAgICBzZXR0aW5nc1trZXldID1cbiAgICAgIG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRzW2tleV0gOiBvcHRpb25cbiAgfVxuXG4gIGlmIChzZXR0aW5ncy5wb3NpdGlvbi5pbmRlbnQgfHwgc2V0dGluZ3MucG9zaXRpb24uc3RhcnQpIHtcbiAgICBzZXR0aW5ncy5pbmRlbnQgPSBzZXR0aW5ncy5wb3NpdGlvbi5pbmRlbnQgfHwgW11cbiAgICBzZXR0aW5ncy5wb3NpdGlvbiA9IHNldHRpbmdzLnBvc2l0aW9uLnN0YXJ0XG4gIH1cblxuICByZXR1cm4gcGFyc2UodmFsdWUsIHNldHRpbmdzKVxufVxuXG4vLyBQYXJzZSBlbnRpdGllcy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBwYXJzZSh2YWx1ZSwgc2V0dGluZ3MpIHtcbiAgdmFyIGFkZGl0aW9uYWwgPSBzZXR0aW5ncy5hZGRpdGlvbmFsXG4gIHZhciBub25UZXJtaW5hdGVkID0gc2V0dGluZ3Mubm9uVGVybWluYXRlZFxuICB2YXIgaGFuZGxlVGV4dCA9IHNldHRpbmdzLnRleHRcbiAgdmFyIGhhbmRsZVJlZmVyZW5jZSA9IHNldHRpbmdzLnJlZmVyZW5jZVxuICB2YXIgaGFuZGxlV2FybmluZyA9IHNldHRpbmdzLndhcm5pbmdcbiAgdmFyIHRleHRDb250ZXh0ID0gc2V0dGluZ3MudGV4dENvbnRleHRcbiAgdmFyIHJlZmVyZW5jZUNvbnRleHQgPSBzZXR0aW5ncy5yZWZlcmVuY2VDb250ZXh0XG4gIHZhciB3YXJuaW5nQ29udGV4dCA9IHNldHRpbmdzLndhcm5pbmdDb250ZXh0XG4gIHZhciBwb3MgPSBzZXR0aW5ncy5wb3NpdGlvblxuICB2YXIgaW5kZW50ID0gc2V0dGluZ3MuaW5kZW50IHx8IFtdXG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGhcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgbGluZXMgPSAtMVxuICB2YXIgY29sdW1uID0gcG9zLmNvbHVtbiB8fCAxXG4gIHZhciBsaW5lID0gcG9zLmxpbmUgfHwgMVxuICB2YXIgcXVldWUgPSAnJ1xuICB2YXIgcmVzdWx0ID0gW11cbiAgdmFyIGVudGl0eUNoYXJhY3RlcnNcbiAgdmFyIG5hbWVkRW50aXR5XG4gIHZhciB0ZXJtaW5hdGVkXG4gIHZhciBjaGFyYWN0ZXJzXG4gIHZhciBjaGFyYWN0ZXJcbiAgdmFyIHJlZmVyZW5jZVxuICB2YXIgZm9sbG93aW5nXG4gIHZhciB3YXJuaW5nXG4gIHZhciByZWFzb25cbiAgdmFyIG91dHB1dFxuICB2YXIgZW50aXR5XG4gIHZhciBiZWdpblxuICB2YXIgc3RhcnRcbiAgdmFyIHR5cGVcbiAgdmFyIHRlc3RcbiAgdmFyIHByZXZcbiAgdmFyIG5leHRcbiAgdmFyIGRpZmZcbiAgdmFyIGVuZFxuXG4gIGlmICh0eXBlb2YgYWRkaXRpb25hbCA9PT0gJ3N0cmluZycpIHtcbiAgICBhZGRpdGlvbmFsID0gYWRkaXRpb25hbC5jaGFyQ29kZUF0KDApXG4gIH1cblxuICAvLyBDYWNoZSB0aGUgY3VycmVudCBwb2ludC5cbiAgcHJldiA9IG5vdygpXG5cbiAgLy8gV3JhcCBgaGFuZGxlV2FybmluZ2AuXG4gIHdhcm5pbmcgPSBoYW5kbGVXYXJuaW5nID8gcGFyc2VFcnJvciA6IG5vb3BcblxuICAvLyBFbnN1cmUgdGhlIGFsZ29yaXRobSB3YWxrcyBvdmVyIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYW5kIHRoZSBlbmQgKGluY2x1c2l2ZSkuXG4gIGluZGV4LS1cbiAgbGVuZ3RoKytcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIC8vIElmIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgd2FzIGEgbmV3bGluZS5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBsaW5lRmVlZCkge1xuICAgICAgY29sdW1uID0gaW5kZW50W2xpbmVzXSB8fCAxXG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckNvZGVBdChpbmRleClcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IGFtcGVyc2FuZCkge1xuICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChpbmRleCArIDEpXG5cbiAgICAgIC8vIFRoZSBiZWhhdmlvdXIgZGVwZW5kcyBvbiB0aGUgaWRlbnRpdHkgb2YgdGhlIG5leHQgY2hhcmFjdGVyLlxuICAgICAgaWYgKFxuICAgICAgICBmb2xsb3dpbmcgPT09IHRhYiB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGxpbmVGZWVkIHx8XG4gICAgICAgIGZvbGxvd2luZyA9PT0gZm9ybUZlZWQgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBzcGFjZSB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGFtcGVyc2FuZCB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGxlc3NUaGFuIHx8XG4gICAgICAgIGZvbGxvd2luZyAhPT0gZm9sbG93aW5nIHx8XG4gICAgICAgIChhZGRpdGlvbmFsICYmIGZvbGxvd2luZyA9PT0gYWRkaXRpb25hbClcbiAgICAgICkge1xuICAgICAgICAvLyBOb3QgYSBjaGFyYWN0ZXIgcmVmZXJlbmNlLlxuICAgICAgICAvLyBObyBjaGFyYWN0ZXJzIGFyZSBjb25zdW1lZCwgYW5kIG5vdGhpbmcgaXMgcmV0dXJuZWQuXG4gICAgICAgIC8vIFRoaXMgaXMgbm90IGFuIGVycm9yLCBlaXRoZXIuXG4gICAgICAgIHF1ZXVlICs9IGZyb21DaGFyQ29kZShjaGFyYWN0ZXIpXG4gICAgICAgIGNvbHVtbisrXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc3RhcnQgPSBpbmRleCArIDFcbiAgICAgIGJlZ2luID0gc3RhcnRcbiAgICAgIGVuZCA9IHN0YXJ0XG5cbiAgICAgIGlmIChmb2xsb3dpbmcgPT09IG51bWJlclNpZ24pIHtcbiAgICAgICAgLy8gTnVtZXJpY2FsIGVudGl0eS5cbiAgICAgICAgZW5kID0gKytiZWdpblxuXG4gICAgICAgIC8vIFRoZSBiZWhhdmlvdXIgZnVydGhlciBkZXBlbmRzIG9uIHRoZSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChlbmQpXG5cbiAgICAgICAgaWYgKGZvbGxvd2luZyA9PT0gdXBwZXJjYXNlWCB8fCBmb2xsb3dpbmcgPT09IGxvd2VyY2FzZVgpIHtcbiAgICAgICAgICAvLyBBU0NJSSBoZXggZGlnaXRzLlxuICAgICAgICAgIHR5cGUgPSBoZXhhXG4gICAgICAgICAgZW5kID0gKytiZWdpblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEFTQ0lJIGRpZ2l0cy5cbiAgICAgICAgICB0eXBlID0gZGVjaVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOYW1lZCBlbnRpdHkuXG4gICAgICAgIHR5cGUgPSBuYW1lXG4gICAgICB9XG5cbiAgICAgIGVudGl0eUNoYXJhY3RlcnMgPSAnJ1xuICAgICAgZW50aXR5ID0gJydcbiAgICAgIGNoYXJhY3RlcnMgPSAnJ1xuICAgICAgdGVzdCA9IHRlc3RzW3R5cGVdXG4gICAgICBlbmQtLVxuXG4gICAgICB3aGlsZSAoKytlbmQgPCBsZW5ndGgpIHtcbiAgICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChlbmQpXG5cbiAgICAgICAgaWYgKCF0ZXN0KGZvbGxvd2luZykpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcmFjdGVycyArPSBmcm9tQ2hhckNvZGUoZm9sbG93aW5nKVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiBtYXRjaCBhIGxlZ2FjeSBuYW1lZCByZWZlcmVuY2UuXG4gICAgICAgIC8vIElmIHNvLCB3ZSBjYWNoZSB0aGF0IGFzIHRoZSBsYXN0IHZpYWJsZSBuYW1lZCByZWZlcmVuY2UuXG4gICAgICAgIC8vIFRoaXMgZW5zdXJlcyB3ZSBkbyBub3QgbmVlZCB0byB3YWxrIGJhY2t3YXJkcyBsYXRlci5cbiAgICAgICAgaWYgKHR5cGUgPT09IG5hbWUgJiYgb3duLmNhbGwobGVnYWN5LCBjaGFyYWN0ZXJzKSkge1xuICAgICAgICAgIGVudGl0eUNoYXJhY3RlcnMgPSBjaGFyYWN0ZXJzXG4gICAgICAgICAgZW50aXR5ID0gbGVnYWN5W2NoYXJhY3RlcnNdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGVybWluYXRlZCA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKSA9PT0gc2VtaWNvbG9uXG5cbiAgICAgIGlmICh0ZXJtaW5hdGVkKSB7XG4gICAgICAgIGVuZCsrXG5cbiAgICAgICAgbmFtZWRFbnRpdHkgPSB0eXBlID09PSBuYW1lID8gZGVjb2RlRW50aXR5KGNoYXJhY3RlcnMpIDogZmFsc2VcblxuICAgICAgICBpZiAobmFtZWRFbnRpdHkpIHtcbiAgICAgICAgICBlbnRpdHlDaGFyYWN0ZXJzID0gY2hhcmFjdGVyc1xuICAgICAgICAgIGVudGl0eSA9IG5hbWVkRW50aXR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGlmZiA9IDEgKyBlbmQgLSBzdGFydFxuXG4gICAgICBpZiAoIXRlcm1pbmF0ZWQgJiYgIW5vblRlcm1pbmF0ZWQpIHtcbiAgICAgICAgLy8gRW1wdHkuXG4gICAgICB9IGVsc2UgaWYgKCFjaGFyYWN0ZXJzKSB7XG4gICAgICAgIC8vIEFuIGVtcHR5IChwb3NzaWJsZSkgZW50aXR5IGlzIHZhbGlkLCB1bmxlc3MgaXTigJlzIG51bWVyaWMgKHRodXMgYW5cbiAgICAgICAgLy8gYW1wZXJzYW5kIGZvbGxvd2VkIGJ5IGFuIG9jdG90aG9ycCkuXG4gICAgICAgIGlmICh0eXBlICE9PSBuYW1lKSB7XG4gICAgICAgICAgd2FybmluZyhudW1lcmljRW1wdHksIGRpZmYpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gbmFtZSkge1xuICAgICAgICAvLyBBbiBhbXBlcnNhbmQgZm9sbG93ZWQgYnkgYW55dGhpbmcgdW5rbm93biwgYW5kIG5vdCB0ZXJtaW5hdGVkLCBpc1xuICAgICAgICAvLyBpbnZhbGlkLlxuICAgICAgICBpZiAodGVybWluYXRlZCAmJiAhZW50aXR5KSB7XG4gICAgICAgICAgd2FybmluZyhuYW1lZFVua25vd24sIDEpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmVzIHNvbWV0aGluZyBhZnRlciBhbiBlbnRpdHkgbmFtZSB3aGljaCBpcyBub3Qga25vd24sIGNhcFxuICAgICAgICAgIC8vIHRoZSByZWZlcmVuY2UuXG4gICAgICAgICAgaWYgKGVudGl0eUNoYXJhY3RlcnMgIT09IGNoYXJhY3RlcnMpIHtcbiAgICAgICAgICAgIGVuZCA9IGJlZ2luICsgZW50aXR5Q2hhcmFjdGVycy5sZW5ndGhcbiAgICAgICAgICAgIGRpZmYgPSAxICsgZW5kIC0gYmVnaW5cbiAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZSByZWZlcmVuY2UgaXMgbm90IHRlcm1pbmF0ZWQsIHdhcm4uXG4gICAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG4gICAgICAgICAgICByZWFzb24gPSBlbnRpdHlDaGFyYWN0ZXJzID8gbmFtZWROb3RUZXJtaW5hdGVkIDogbmFtZWRFbXB0eVxuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuYXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKVxuXG4gICAgICAgICAgICAgIGlmIChmb2xsb3dpbmcgPT09IGVxdWFsc1RvKSB7XG4gICAgICAgICAgICAgICAgd2FybmluZyhyZWFzb24sIGRpZmYpXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gbnVsbFxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFscGhhbnVtZXJpY2FsKGZvbGxvd2luZykpIHtcbiAgICAgICAgICAgICAgICBlbnRpdHkgPSBudWxsXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2FybmluZyhyZWFzb24sIGRpZmYpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdhcm5pbmcocmVhc29uLCBkaWZmKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlZmVyZW5jZSA9IGVudGl0eVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG4gICAgICAgICAgLy8gQWxsIG5vbi10ZXJtaW5hdGVkIG51bWVyaWMgZW50aXRpZXMgYXJlIG5vdCByZW5kZXJlZCwgYW5kIHRyaWdnZXIgYVxuICAgICAgICAgIC8vIHdhcm5pbmcuXG4gICAgICAgICAgd2FybmluZyhudW1lcmljTm90VGVybWluYXRlZCwgZGlmZilcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGVybWluYXRlZCBhbmQgbnVtYmVyLCBwYXJzZSBhcyBlaXRoZXIgaGV4YWRlY2ltYWwgb3IgZGVjaW1hbC5cbiAgICAgICAgcmVmZXJlbmNlID0gcGFyc2VJbnQoY2hhcmFjdGVycywgYmFzZXNbdHlwZV0pXG5cbiAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBpcyBwcm9oaWJpdGVkLCBhbmQgcmVwbGFjZVxuICAgICAgICAvLyB3aXRoIHJlcGxhY2VtZW50IGNoYXJhY3Rlci5cbiAgICAgICAgaWYgKHByb2hpYml0ZWQocmVmZXJlbmNlKSkge1xuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY1Byb2hpYml0ZWQsIGRpZmYpXG4gICAgICAgICAgcmVmZXJlbmNlID0gZnJvbUNoYXJDb2RlKHJlcGxhY2VtZW50Q2hhcmFjdGVyKVxuICAgICAgICB9IGVsc2UgaWYgKHJlZmVyZW5jZSBpbiBpbnZhbGlkKSB7XG4gICAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBpcyBkaXNhbGxvd2VkLCBhbmQgcmVwbGFjZVxuICAgICAgICAgIC8vIGJ5IGFuIGFsdGVybmF0aXZlLlxuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY0Rpc2FsbG93ZWQsIGRpZmYpXG4gICAgICAgICAgcmVmZXJlbmNlID0gaW52YWxpZFtyZWZlcmVuY2VdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUGFyc2UgdGhlIG51bWJlci5cbiAgICAgICAgICBvdXRwdXQgPSAnJ1xuXG4gICAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBzaG91bGQgbm90IGJlIHVzZWQuXG4gICAgICAgICAgaWYgKGRpc2FsbG93ZWQocmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgd2FybmluZyhudW1lcmljRGlzYWxsb3dlZCwgZGlmZilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTdHJpbmdpZnkgdGhlIG51bWJlci5cbiAgICAgICAgICBpZiAocmVmZXJlbmNlID4gMHhmZmZmKSB7XG4gICAgICAgICAgICByZWZlcmVuY2UgLT0gMHgxMDAwMFxuICAgICAgICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZSgocmVmZXJlbmNlID4+PiAoMTAgJiAweDNmZikpIHwgMHhkODAwKVxuICAgICAgICAgICAgcmVmZXJlbmNlID0gMHhkYzAwIHwgKHJlZmVyZW5jZSAmIDB4M2ZmKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlZmVyZW5jZSA9IG91dHB1dCArIGZyb21DaGFyQ29kZShyZWZlcmVuY2UpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRm91bmQgaXQhXG4gICAgICAvLyBGaXJzdCBlYXQgdGhlIHF1ZXVlZCBjaGFyYWN0ZXJzIGFzIG5vcm1hbCB0ZXh0LCB0aGVuIGVhdCBhbiBlbnRpdHkuXG4gICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgIGZsdXNoKClcblxuICAgICAgICBwcmV2ID0gbm93KClcbiAgICAgICAgaW5kZXggPSBlbmQgLSAxXG4gICAgICAgIGNvbHVtbiArPSBlbmQgLSBzdGFydCArIDFcbiAgICAgICAgcmVzdWx0LnB1c2gocmVmZXJlbmNlKVxuICAgICAgICBuZXh0ID0gbm93KClcbiAgICAgICAgbmV4dC5vZmZzZXQrK1xuXG4gICAgICAgIGlmIChoYW5kbGVSZWZlcmVuY2UpIHtcbiAgICAgICAgICBoYW5kbGVSZWZlcmVuY2UuY2FsbChcbiAgICAgICAgICAgIHJlZmVyZW5jZUNvbnRleHQsXG4gICAgICAgICAgICByZWZlcmVuY2UsXG4gICAgICAgICAgICB7c3RhcnQ6IHByZXYsIGVuZDogbmV4dH0sXG4gICAgICAgICAgICB2YWx1ZS5zbGljZShzdGFydCAtIDEsIGVuZClcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBwcmV2ID0gbmV4dFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgd2UgY291bGQgbm90IGZpbmQgYSByZWZlcmVuY2UsIHF1ZXVlIHRoZSBjaGVja2VkIGNoYXJhY3RlcnMgKGFzXG4gICAgICAgIC8vIG5vcm1hbCBjaGFyYWN0ZXJzKSwgYW5kIG1vdmUgdGhlIHBvaW50ZXIgdG8gdGhlaXIgZW5kLlxuICAgICAgICAvLyBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2Ugd2UgY2FuIGJlIGNlcnRhaW4gbmVpdGhlciBuZXdsaW5lcyBub3JcbiAgICAgICAgLy8gYW1wZXJzYW5kcyBhcmUgaW5jbHVkZWQuXG4gICAgICAgIGNoYXJhY3RlcnMgPSB2YWx1ZS5zbGljZShzdGFydCAtIDEsIGVuZClcbiAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyc1xuICAgICAgICBjb2x1bW4gKz0gY2hhcmFjdGVycy5sZW5ndGhcbiAgICAgICAgaW5kZXggPSBlbmQgLSAxXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhhbmRsZSBhbnl0aGluZyBvdGhlciB0aGFuIGFuIGFtcGVyc2FuZCwgaW5jbHVkaW5nIG5ld2xpbmVzIGFuZCBFT0YuXG4gICAgICBpZiAoXG4gICAgICAgIGNoYXJhY3RlciA9PT0gMTAgLy8gTGluZSBmZWVkXG4gICAgICApIHtcbiAgICAgICAgbGluZSsrXG4gICAgICAgIGxpbmVzKytcbiAgICAgICAgY29sdW1uID0gMFxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBjaGFyYWN0ZXIpIHtcbiAgICAgICAgcXVldWUgKz0gZnJvbUNoYXJDb2RlKGNoYXJhY3RlcilcbiAgICAgICAgY29sdW1uKytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZsdXNoKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIHJlZHVjZWQgbm9kZXMsIGFuZCBhbnkgcG9zc2libGUgd2FybmluZ3MuXG4gIHJldHVybiByZXN1bHQuam9pbignJylcblxuICAvLyBHZXQgY3VycmVudCBwb3NpdGlvbi5cbiAgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBsaW5lLFxuICAgICAgY29sdW1uOiBjb2x1bW4sXG4gICAgICBvZmZzZXQ6IGluZGV4ICsgKHBvcy5vZmZzZXQgfHwgMClcbiAgICB9XG4gIH1cblxuICAvLyDigJxUaHJvd+KAnSBhIHBhcnNlLWVycm9yOiBhIHdhcm5pbmcuXG4gIGZ1bmN0aW9uIHBhcnNlRXJyb3IoY29kZSwgb2Zmc2V0KSB7XG4gICAgdmFyIHBvc2l0aW9uID0gbm93KClcblxuICAgIHBvc2l0aW9uLmNvbHVtbiArPSBvZmZzZXRcbiAgICBwb3NpdGlvbi5vZmZzZXQgKz0gb2Zmc2V0XG5cbiAgICBoYW5kbGVXYXJuaW5nLmNhbGwod2FybmluZ0NvbnRleHQsIG1lc3NhZ2VzW2NvZGVdLCBwb3NpdGlvbiwgY29kZSlcbiAgfVxuXG4gIC8vIEZsdXNoIGBxdWV1ZWAgKG5vcm1hbCB0ZXh0KS5cbiAgLy8gTWFjcm8gaW52b2tlZCBiZWZvcmUgZWFjaCBlbnRpdHkgYW5kIGF0IHRoZSBlbmQgb2YgYHZhbHVlYC5cbiAgLy8gRG9lcyBub3RoaW5nIHdoZW4gYHF1ZXVlYCBpcyBlbXB0eS5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKHF1ZXVlKSB7XG4gICAgICByZXN1bHQucHVzaChxdWV1ZSlcblxuICAgICAgaWYgKGhhbmRsZVRleHQpIHtcbiAgICAgICAgaGFuZGxlVGV4dC5jYWxsKHRleHRDb250ZXh0LCBxdWV1ZSwge3N0YXJ0OiBwcmV2LCBlbmQ6IG5vdygpfSlcbiAgICAgIH1cblxuICAgICAgcXVldWUgPSAnJ1xuICAgIH1cbiAgfVxufVxuXG4vLyBDaGVjayBpZiBgY2hhcmFjdGVyYCBpcyBvdXRzaWRlIHRoZSBwZXJtaXNzaWJsZSB1bmljb2RlIHJhbmdlLlxuZnVuY3Rpb24gcHJvaGliaXRlZChjb2RlKSB7XG4gIHJldHVybiAoY29kZSA+PSAweGQ4MDAgJiYgY29kZSA8PSAweGRmZmYpIHx8IGNvZGUgPiAweDEwZmZmZlxufVxuXG4vLyBDaGVjayBpZiBgY2hhcmFjdGVyYCBpcyBkaXNhbGxvd2VkLlxuZnVuY3Rpb24gZGlzYWxsb3dlZChjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMHgwMDAxICYmIGNvZGUgPD0gMHgwMDA4KSB8fFxuICAgIGNvZGUgPT09IDB4MDAwYiB8fFxuICAgIChjb2RlID49IDB4MDAwZCAmJiBjb2RlIDw9IDB4MDAxZikgfHxcbiAgICAoY29kZSA+PSAweDAwN2YgJiYgY29kZSA8PSAweDAwOWYpIHx8XG4gICAgKGNvZGUgPj0gMHhmZGQwICYmIGNvZGUgPD0gMHhmZGVmKSB8fFxuICAgIChjb2RlICYgMHhmZmZmKSA9PT0gMHhmZmZmIHx8XG4gICAgKGNvZGUgJiAweGZmZmYpID09PSAweGZmZmVcbiAgKVxufVxuIiwiLyohXG4gKiByZXBlYXQtc3RyaW5nIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9yZXBlYXQtc3RyaW5nPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBKb24gU2NobGlua2VydC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVzdWx0cyBjYWNoZVxuICovXG5cbnZhciByZXMgPSAnJztcbnZhciBjYWNoZTtcblxuLyoqXG4gKiBFeHBvc2UgYHJlcGVhdGBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcGVhdDtcblxuLyoqXG4gKiBSZXBlYXQgdGhlIGdpdmVuIGBzdHJpbmdgIHRoZSBzcGVjaWZpZWQgYG51bWJlcmBcbiAqIG9mIHRpbWVzLlxuICpcbiAqICoqRXhhbXBsZToqKlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xuICogcmVwZWF0KCdBJywgNSk7XG4gKiAvLz0+IEFBQUFBXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYHN0cmluZ2AgVGhlIHN0cmluZyB0byByZXBlYXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBgbnVtYmVyYCBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlcGVhdGVkIHN0cmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiByZXBlYXQoc3RyLCBudW0pIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIC8vIGNvdmVyIGNvbW1vbiwgcXVpY2sgdXNlIGNhc2VzXG4gIGlmIChudW0gPT09IDEpIHJldHVybiBzdHI7XG4gIGlmIChudW0gPT09IDIpIHJldHVybiBzdHIgKyBzdHI7XG5cbiAgdmFyIG1heCA9IHN0ci5sZW5ndGggKiBudW07XG4gIGlmIChjYWNoZSAhPT0gc3RyIHx8IHR5cGVvZiBjYWNoZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYWNoZSA9IHN0cjtcbiAgICByZXMgPSAnJztcbiAgfSBlbHNlIGlmIChyZXMubGVuZ3RoID49IG1heCkge1xuICAgIHJldHVybiByZXMuc3Vic3RyKDAsIG1heCk7XG4gIH1cblxuICB3aGlsZSAobWF4ID4gcmVzLmxlbmd0aCAmJiBudW0gPiAxKSB7XG4gICAgaWYgKG51bSAmIDEpIHtcbiAgICAgIHJlcyArPSBzdHI7XG4gICAgfVxuXG4gICAgbnVtID4+PSAxO1xuICAgIHN0ciArPSBzdHI7XG4gIH1cblxuICByZXMgKz0gc3RyO1xuICByZXMgPSByZXMuc3Vic3RyKDAsIG1heCk7XG4gIHJldHVybiByZXM7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB0cmltVHJhaWxpbmdMaW5lc1xuXG4vLyBSZW1vdmUgZmluYWwgbmV3bGluZSBjaGFyYWN0ZXJzIGZyb20gYHZhbHVlYC5cbmZ1bmN0aW9uIHRyaW1UcmFpbGluZ0xpbmVzKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1xcbiskLywgJycpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJydXB0O1xuXG5mdW5jdGlvbiBpbnRlcnJ1cHQoaW50ZXJydXB0b3JzLCB0b2tlbml6ZXJzLCBjdHgsIHBhcmFtcykge1xuICB2YXIgYm9vbHMgPSBbJ3BlZGFudGljJywgJ2NvbW1vbm1hcmsnXTtcbiAgdmFyIGNvdW50ID0gYm9vbHMubGVuZ3RoO1xuICB2YXIgbGVuZ3RoID0gaW50ZXJydXB0b3JzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBpbnRlcnJ1cHRvcjtcbiAgdmFyIGNvbmZpZztcbiAgdmFyIGZuO1xuICB2YXIgb2Zmc2V0O1xuICB2YXIgYm9vbDtcbiAgdmFyIGlnbm9yZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGludGVycnVwdG9yID0gaW50ZXJydXB0b3JzW2luZGV4XTtcbiAgICBjb25maWcgPSBpbnRlcnJ1cHRvclsxXSB8fCB7fTtcbiAgICBmbiA9IGludGVycnVwdG9yWzBdO1xuICAgIG9mZnNldCA9IC0xO1xuICAgIGlnbm9yZSA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKCsrb2Zmc2V0IDwgY291bnQpIHtcbiAgICAgIGJvb2wgPSBib29sc1tvZmZzZXRdO1xuXG4gICAgICBpZiAoY29uZmlnW2Jvb2xdICE9PSB1bmRlZmluZWQgJiYgY29uZmlnW2Jvb2xdICE9PSBjdHgub3B0aW9uc1tib29sXSkge1xuICAgICAgICBpZ25vcmUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaWdub3JlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW5pemVyc1tmbl0uYXBwbHkoY3R4LCBwYXJhbXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb2xsYXBzZVdoaXRlU3BhY2UgPSByZXF1aXJlKCdjb2xsYXBzZS13aGl0ZS1zcGFjZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZTtcblxuLyogTm9ybWFsaXplIGFuIGlkZW50aWZpZXIuICBDb2xsYXBzZXMgbXVsdGlwbGUgd2hpdGUgc3BhY2VcbiAqIGNoYXJhY3RlcnMgaW50byBhIHNpbmdsZSBzcGFjZSwgYW5kIHJlbW92ZXMgY2FzaW5nLiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKHZhbHVlKSB7XG4gIHJldHVybiBjb2xsYXBzZVdoaXRlU3BhY2UodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG59XG4iLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkge1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIF9nZXRQcm90b3R5cGVPZih0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiIWZ1bmN0aW9uKGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUobnVsbCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKG51bGwpKTp3aW5kb3cuc3R5bGlzPWUobnVsbCl9KGZ1bmN0aW9uIGUoYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9L15cXDArL2csYz0vW1xcMFxcclxcZl0vZyxzPS86ICovZyx0PS96b298Z3JhLyxpPS8oWyw6IF0pKHRyYW5zZm9ybSkvZyxmPS8sK1xccyooPyFbXihdKlspXSkvZyxuPS8gK1xccyooPyFbXihdKlspXSkvZyxsPS8gKltcXDBdICovZyxvPS8sXFxyKz8vZyxoPS8oW1xcdFxcclxcbiBdKSpcXGY/Ji9nLHU9LzpnbG9iYWxcXCgoKD86W15cXChcXClcXFtcXF1dKnxcXFsuKlxcXXxcXChbXlxcKFxcKV0qXFwpKSopXFwpL2csZD0vXFxXKy9nLGI9L0Aoa1xcdyspXFxzKihcXFMqKVxccyovLHA9Lzo6KHBsYWNlKS9nLGs9LzoocmVhZC1vbmx5KS9nLGc9L1xccysoPz1be1xcXTs9Oj5dKS9nLEE9LyhbW309Oj5dKVxccysvZyxDPS8oXFx7W157XSs/KTsoPz1cXH0pL2csdz0vXFxzezIsfS9nLHY9LyhbXlxcKF0pKDorKSAqL2csbT0vW3N2aF1cXHcrLVt0YmxyXXsyfS8seD0vXFwoXFxzKiguKilcXHMqXFwpL2csJD0vKFtcXHNcXFNdKj8pOy9nLHk9Ly1zZWxmfGZsZXgtL2csTz0vW15dKj8oOltycF1bZWxdYVtcXHctXSspW15dKi8saj0vc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLHo9LyhbXi1dKShpbWFnZS1zZXRcXCgpLyxOPVwiLXdlYmtpdC1cIixTPVwiLW1vei1cIixGPVwiLW1zLVwiLFc9NTkscT0xMjUsQj0xMjMsRD00MCxFPTQxLEc9OTEsSD05MyxJPTEwLEo9MTMsSz05LEw9NjQsTT0zMixQPTM4LFE9NDUsUj05NSxUPTQyLFU9NDQsVj01OCxYPTM5LFk9MzQsWj00NyxfPTYyLGVlPTQzLGFlPTEyNixyZT0wLGNlPTEyLHNlPTExLHRlPTEwNyxpZT0xMDksZmU9MTE1LG5lPTExMixsZT0xMTEsb2U9MTA1LGhlPTk5LHVlPTEwMCxkZT0xMTIsYmU9MSxwZT0xLGtlPTAsZ2U9MSxBZT0xLENlPTEsd2U9MCx2ZT0wLG1lPTAseGU9W10sJGU9W10seWU9MCxPZT1udWxsLGplPS0yLHplPS0xLE5lPTAsU2U9MSxGZT0yLFdlPTMscWU9MCxCZT0xLERlPVwiXCIsRWU9XCJcIixHZT1cIlwiO2Z1bmN0aW9uIEhlKGUsYSxzLHQsaSl7Zm9yKHZhciBmLG4sbz0wLGg9MCx1PTAsZD0wLGc9MCxBPTAsQz0wLHc9MCxtPTAsJD0wLHk9MCxPPTAsaj0wLHo9MCxSPTAsd2U9MCwkZT0wLE9lPTAsamU9MCx6ZT1zLmxlbmd0aCxKZT16ZS0xLFJlPVwiXCIsVGU9XCJcIixVZT1cIlwiLFZlPVwiXCIsWGU9XCJcIixZZT1cIlwiO1I8emU7KXtpZihDPXMuY2hhckNvZGVBdChSKSxSPT09SmUpaWYoaCtkK3UrbyE9PTApe2lmKDAhPT1oKUM9aD09PVo/STpaO2Q9dT1vPTAsemUrKyxKZSsrfWlmKGgrZCt1K289PT0wKXtpZihSPT09SmUpe2lmKHdlPjApVGU9VGUucmVwbGFjZShjLFwiXCIpO2lmKFRlLnRyaW0oKS5sZW5ndGg+MCl7c3dpdGNoKEMpe2Nhc2UgTTpjYXNlIEs6Y2FzZSBXOmNhc2UgSjpjYXNlIEk6YnJlYWs7ZGVmYXVsdDpUZSs9cy5jaGFyQXQoUil9Qz1XfX1pZigxPT09JGUpc3dpdGNoKEMpe2Nhc2UgQjpjYXNlIHE6Y2FzZSBXOmNhc2UgWTpjYXNlIFg6Y2FzZSBEOmNhc2UgRTpjYXNlIFU6JGU9MDtjYXNlIEs6Y2FzZSBKOmNhc2UgSTpjYXNlIE06YnJlYWs7ZGVmYXVsdDpmb3IoJGU9MCxqZT1SLGc9QyxSLS0sQz1XO2plPHplOylzd2l0Y2gocy5jaGFyQ29kZUF0KGplKyspKXtjYXNlIEk6Y2FzZSBKOmNhc2UgVzorK1IsQz1nLGplPXplO2JyZWFrO2Nhc2UgVjppZih3ZT4wKSsrUixDPWc7Y2FzZSBCOmplPXplfX1zd2l0Y2goQyl7Y2FzZSBCOmZvcihnPShUZT1UZS50cmltKCkpLmNoYXJDb2RlQXQoMCkseT0xLGplPSsrUjtSPHplOyl7c3dpdGNoKEM9cy5jaGFyQ29kZUF0KFIpKXtjYXNlIEI6eSsrO2JyZWFrO2Nhc2UgcTp5LS07YnJlYWs7Y2FzZSBaOnN3aXRjaChBPXMuY2hhckNvZGVBdChSKzEpKXtjYXNlIFQ6Y2FzZSBaOlI9UWUoQSxSLEplLHMpfWJyZWFrO2Nhc2UgRzpDKys7Y2FzZSBEOkMrKztjYXNlIFk6Y2FzZSBYOmZvcig7UisrPEplJiZzLmNoYXJDb2RlQXQoUikhPT1DOyk7fWlmKDA9PT15KWJyZWFrO1IrK31pZihVZT1zLnN1YnN0cmluZyhqZSxSKSxnPT09cmUpZz0oVGU9VGUucmVwbGFjZShyLFwiXCIpLnRyaW0oKSkuY2hhckNvZGVBdCgwKTtzd2l0Y2goZyl7Y2FzZSBMOmlmKHdlPjApVGU9VGUucmVwbGFjZShjLFwiXCIpO3N3aXRjaChBPVRlLmNoYXJDb2RlQXQoMSkpe2Nhc2UgdWU6Y2FzZSBpZTpjYXNlIGZlOmNhc2UgUTpmPWE7YnJlYWs7ZGVmYXVsdDpmPXhlfWlmKGplPShVZT1IZShhLGYsVWUsQSxpKzEpKS5sZW5ndGgsbWU+MCYmMD09PWplKWplPVRlLmxlbmd0aDtpZih5ZT4wKWlmKGY9SWUoeGUsVGUsT2UpLG49UGUoV2UsVWUsZixhLHBlLGJlLGplLEEsaSx0KSxUZT1mLmpvaW4oXCJcIiksdm9pZCAwIT09bilpZigwPT09KGplPShVZT1uLnRyaW0oKSkubGVuZ3RoKSlBPTAsVWU9XCJcIjtpZihqZT4wKXN3aXRjaChBKXtjYXNlIGZlOlRlPVRlLnJlcGxhY2UoeCxNZSk7Y2FzZSB1ZTpjYXNlIGllOmNhc2UgUTpVZT1UZStcIntcIitVZStcIn1cIjticmVhaztjYXNlIHRlOmlmKFVlPShUZT1UZS5yZXBsYWNlKGIsXCIkMSAkMlwiKyhCZT4wP0RlOlwiXCIpKSkrXCJ7XCIrVWUrXCJ9XCIsMT09PUFlfHwyPT09QWUmJkxlKFwiQFwiK1VlLDMpKVVlPVwiQFwiK04rVWUrXCJAXCIrVWU7ZWxzZSBVZT1cIkBcIitVZTticmVhaztkZWZhdWx0OmlmKFVlPVRlK1VlLHQ9PT1kZSlWZSs9VWUsVWU9XCJcIn1lbHNlIFVlPVwiXCI7YnJlYWs7ZGVmYXVsdDpVZT1IZShhLEllKGEsVGUsT2UpLFVlLHQsaSsxKX1YZSs9VWUsTz0wLCRlPTAsej0wLHdlPTAsT2U9MCxqPTAsVGU9XCJcIixVZT1cIlwiLEM9cy5jaGFyQ29kZUF0KCsrUik7YnJlYWs7Y2FzZSBxOmNhc2UgVzppZigoamU9KFRlPSh3ZT4wP1RlLnJlcGxhY2UoYyxcIlwiKTpUZSkudHJpbSgpKS5sZW5ndGgpPjEpe2lmKDA9PT16KWlmKChnPVRlLmNoYXJDb2RlQXQoMCkpPT09UXx8Zz45NiYmZzwxMjMpamU9KFRlPVRlLnJlcGxhY2UoXCIgXCIsXCI6XCIpKS5sZW5ndGg7aWYoeWU+MClpZih2b2lkIDAhPT0obj1QZShTZSxUZSxhLGUscGUsYmUsVmUubGVuZ3RoLHQsaSx0KSkpaWYoMD09PShqZT0oVGU9bi50cmltKCkpLmxlbmd0aCkpVGU9XCJcXDBcXDBcIjtzd2l0Y2goZz1UZS5jaGFyQ29kZUF0KDApLEE9VGUuY2hhckNvZGVBdCgxKSxnKXtjYXNlIHJlOmJyZWFrO2Nhc2UgTDppZihBPT09b2V8fEE9PT1oZSl7WWUrPVRlK3MuY2hhckF0KFIpO2JyZWFrfWRlZmF1bHQ6aWYoVGUuY2hhckNvZGVBdChqZS0xKT09PVYpYnJlYWs7VmUrPUtlKFRlLGcsQSxUZS5jaGFyQ29kZUF0KDIpKX19Tz0wLCRlPTAsej0wLHdlPTAsT2U9MCxUZT1cIlwiLEM9cy5jaGFyQ29kZUF0KCsrUil9fXN3aXRjaChDKXtjYXNlIEo6Y2FzZSBJOmlmKGgrZCt1K28rdmU9PT0wKXN3aXRjaCgkKXtjYXNlIEU6Y2FzZSBYOmNhc2UgWTpjYXNlIEw6Y2FzZSBhZTpjYXNlIF86Y2FzZSBUOmNhc2UgZWU6Y2FzZSBaOmNhc2UgUTpjYXNlIFY6Y2FzZSBVOmNhc2UgVzpjYXNlIEI6Y2FzZSBxOmJyZWFrO2RlZmF1bHQ6aWYoej4wKSRlPTF9aWYoaD09PVopaD0wO2Vsc2UgaWYoZ2UrTz09PTAmJnQhPT10ZSYmVGUubGVuZ3RoPjApd2U9MSxUZSs9XCJcXDBcIjtpZih5ZSpxZT4wKVBlKE5lLFRlLGEsZSxwZSxiZSxWZS5sZW5ndGgsdCxpLHQpO2JlPTEscGUrKzticmVhaztjYXNlIFc6Y2FzZSBxOmlmKGgrZCt1K289PT0wKXtiZSsrO2JyZWFrfWRlZmF1bHQ6c3dpdGNoKGJlKyssUmU9cy5jaGFyQXQoUiksQyl7Y2FzZSBLOmNhc2UgTTppZihkK28raD09PTApc3dpdGNoKHcpe2Nhc2UgVTpjYXNlIFY6Y2FzZSBLOmNhc2UgTTpSZT1cIlwiO2JyZWFrO2RlZmF1bHQ6aWYoQyE9PU0pUmU9XCIgXCJ9YnJlYWs7Y2FzZSByZTpSZT1cIlxcXFwwXCI7YnJlYWs7Y2FzZSBjZTpSZT1cIlxcXFxmXCI7YnJlYWs7Y2FzZSBzZTpSZT1cIlxcXFx2XCI7YnJlYWs7Y2FzZSBQOmlmKGQraCtvPT09MCYmZ2U+MClPZT0xLHdlPTEsUmU9XCJcXGZcIitSZTticmVhaztjYXNlIDEwODppZihkK2grbytrZT09PTAmJno+MClzd2l0Y2goUi16KXtjYXNlIDI6aWYodz09PW5lJiZzLmNoYXJDb2RlQXQoUi0zKT09PVYpa2U9dztjYXNlIDg6aWYobT09PWxlKWtlPW19YnJlYWs7Y2FzZSBWOmlmKGQraCtvPT09MCl6PVI7YnJlYWs7Y2FzZSBVOmlmKGgrdStkK289PT0wKXdlPTEsUmUrPVwiXFxyXCI7YnJlYWs7Y2FzZSBZOmNhc2UgWDppZigwPT09aClkPWQ9PT1DPzA6MD09PWQ/QzpkO2JyZWFrO2Nhc2UgRzppZihkK2grdT09PTApbysrO2JyZWFrO2Nhc2UgSDppZihkK2grdT09PTApby0tO2JyZWFrO2Nhc2UgRTppZihkK2grbz09PTApdS0tO2JyZWFrO2Nhc2UgRDppZihkK2grbz09PTApe2lmKDA9PT1PKXN3aXRjaCgyKncrMyptKXtjYXNlIDUzMzpicmVhaztkZWZhdWx0Onk9MCxPPTF9dSsrfWJyZWFrO2Nhc2UgTDppZihoK3UrZCtvK3oraj09PTApaj0xO2JyZWFrO2Nhc2UgVDpjYXNlIFo6aWYoZCtvK3U+MClicmVhaztzd2l0Y2goaCl7Y2FzZSAwOnN3aXRjaCgyKkMrMypzLmNoYXJDb2RlQXQoUisxKSl7Y2FzZSAyMzU6aD1aO2JyZWFrO2Nhc2UgMjIwOmplPVIsaD1UfWJyZWFrO2Nhc2UgVDppZihDPT09WiYmdz09PVQmJmplKzIhPT1SKXtpZigzMz09PXMuY2hhckNvZGVBdChqZSsyKSlWZSs9cy5zdWJzdHJpbmcoamUsUisxKTtSZT1cIlwiLGg9MH19fWlmKDA9PT1oKXtpZihnZStkK28raj09PTAmJnQhPT10ZSYmQyE9PVcpc3dpdGNoKEMpe2Nhc2UgVTpjYXNlIGFlOmNhc2UgXzpjYXNlIGVlOmNhc2UgRTpjYXNlIEQ6aWYoMD09PU8pe3N3aXRjaCh3KXtjYXNlIEs6Y2FzZSBNOmNhc2UgSTpjYXNlIEo6UmUrPVwiXFwwXCI7YnJlYWs7ZGVmYXVsdDpSZT1cIlxcMFwiK1JlKyhDPT09VT9cIlwiOlwiXFwwXCIpfXdlPTF9ZWxzZSBzd2l0Y2goQyl7Y2FzZSBEOmlmKHorNz09PVImJjEwOD09PXcpej0wO089Kyt5O2JyZWFrO2Nhc2UgRTppZigwPT0oTz0tLXkpKXdlPTEsUmUrPVwiXFwwXCJ9YnJlYWs7Y2FzZSBLOmNhc2UgTTpzd2l0Y2godyl7Y2FzZSByZTpjYXNlIEI6Y2FzZSBxOmNhc2UgVzpjYXNlIFU6Y2FzZSBjZTpjYXNlIEs6Y2FzZSBNOmNhc2UgSTpjYXNlIEo6YnJlYWs7ZGVmYXVsdDppZigwPT09Tyl3ZT0xLFJlKz1cIlxcMFwifX1pZihUZSs9UmUsQyE9PU0mJkMhPT1LKSQ9Q319bT13LHc9QyxSKyt9aWYoamU9VmUubGVuZ3RoLG1lPjApaWYoMD09PWplJiYwPT09WGUubGVuZ3RoJiYwPT09YVswXS5sZW5ndGg9PWZhbHNlKWlmKHQhPT1pZXx8MT09PWEubGVuZ3RoJiYoZ2U+MD9FZTpHZSk9PT1hWzBdKWplPWEuam9pbihcIixcIikubGVuZ3RoKzI7aWYoamU+MCl7aWYoZj0wPT09Z2UmJnQhPT10ZT9mdW5jdGlvbihlKXtmb3IodmFyIGEscixzPTAsdD1lLmxlbmd0aCxpPUFycmF5KHQpO3M8dDsrK3Mpe2Zvcih2YXIgZj1lW3NdLnNwbGl0KGwpLG49XCJcIixvPTAsaD0wLHU9MCxkPTAsYj1mLmxlbmd0aDtvPGI7KytvKXtpZigwPT09KGg9KHI9ZltvXSkubGVuZ3RoKSYmYj4xKWNvbnRpbnVlO2lmKHU9bi5jaGFyQ29kZUF0KG4ubGVuZ3RoLTEpLGQ9ci5jaGFyQ29kZUF0KDApLGE9XCJcIiwwIT09bylzd2l0Y2godSl7Y2FzZSBUOmNhc2UgYWU6Y2FzZSBfOmNhc2UgZWU6Y2FzZSBNOmNhc2UgRDpicmVhaztkZWZhdWx0OmE9XCIgXCJ9c3dpdGNoKGQpe2Nhc2UgUDpyPWErRWU7Y2FzZSBhZTpjYXNlIF86Y2FzZSBlZTpjYXNlIE06Y2FzZSBFOmNhc2UgRDpicmVhaztjYXNlIEc6cj1hK3IrRWU7YnJlYWs7Y2FzZSBWOnN3aXRjaCgyKnIuY2hhckNvZGVBdCgxKSszKnIuY2hhckNvZGVBdCgyKSl7Y2FzZSA1MzA6aWYoQ2U+MCl7cj1hK3Iuc3Vic3RyaW5nKDgsaC0xKTticmVha31kZWZhdWx0OmlmKG88MXx8ZltvLTFdLmxlbmd0aDwxKXI9YStFZStyfWJyZWFrO2Nhc2UgVTphPVwiXCI7ZGVmYXVsdDppZihoPjEmJnIuaW5kZXhPZihcIjpcIik+MClyPWErci5yZXBsYWNlKHYsXCIkMVwiK0VlK1wiJDJcIik7ZWxzZSByPWErcitFZX1uKz1yfWlbc109bi5yZXBsYWNlKGMsXCJcIikudHJpbSgpfXJldHVybiBpfShhKTphLHllPjApaWYodm9pZCAwIT09KG49UGUoRmUsVmUsZixlLHBlLGJlLGplLHQsaSx0KSkmJjA9PT0oVmU9bikubGVuZ3RoKXJldHVybiBZZStWZStYZTtpZihWZT1mLmpvaW4oXCIsXCIpK1wie1wiK1ZlK1wifVwiLEFlKmtlIT0wKXtpZigyPT09QWUmJiFMZShWZSwyKSlrZT0wO3N3aXRjaChrZSl7Y2FzZSBsZTpWZT1WZS5yZXBsYWNlKGssXCI6XCIrUytcIiQxXCIpK1ZlO2JyZWFrO2Nhc2UgbmU6VmU9VmUucmVwbGFjZShwLFwiOjpcIitOK1wiaW5wdXQtJDFcIikrVmUucmVwbGFjZShwLFwiOjpcIitTK1wiJDFcIikrVmUucmVwbGFjZShwLFwiOlwiK0YrXCJpbnB1dC0kMVwiKStWZX1rZT0wfX1yZXR1cm4gWWUrVmUrWGV9ZnVuY3Rpb24gSWUoZSxhLHIpe3ZhciBjPWEudHJpbSgpLnNwbGl0KG8pLHM9Yyx0PWMubGVuZ3RoLGk9ZS5sZW5ndGg7c3dpdGNoKGkpe2Nhc2UgMDpjYXNlIDE6Zm9yKHZhciBmPTAsbj0wPT09aT9cIlwiOmVbMF0rXCIgXCI7Zjx0OysrZilzW2ZdPUplKG4sc1tmXSxyLGkpLnRyaW0oKTticmVhaztkZWZhdWx0OmY9MDt2YXIgbD0wO2ZvcihzPVtdO2Y8dDsrK2YpZm9yKHZhciBoPTA7aDxpOysraClzW2wrK109SmUoZVtoXStcIiBcIixjW2ZdLHIsaSkudHJpbSgpfXJldHVybiBzfWZ1bmN0aW9uIEplKGUsYSxyLGMpe3ZhciBzPWEsdD1zLmNoYXJDb2RlQXQoMCk7aWYodDwzMyl0PShzPXMudHJpbSgpKS5jaGFyQ29kZUF0KDApO3N3aXRjaCh0KXtjYXNlIFA6c3dpdGNoKGdlK2Mpe2Nhc2UgMDpjYXNlIDE6aWYoMD09PWUudHJpbSgpLmxlbmd0aClicmVhaztkZWZhdWx0OnJldHVybiBzLnJlcGxhY2UoaCxcIiQxXCIrZS50cmltKCkpfWJyZWFrO2Nhc2UgVjpzd2l0Y2gocy5jaGFyQ29kZUF0KDEpKXtjYXNlIDEwMzppZihDZT4wJiZnZT4wKXJldHVybiBzLnJlcGxhY2UodSxcIiQxXCIpLnJlcGxhY2UoaCxcIiQxXCIrR2UpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIGUudHJpbSgpK3MucmVwbGFjZShoLFwiJDFcIitlLnRyaW0oKSl9ZGVmYXVsdDppZihyKmdlPjAmJnMuaW5kZXhPZihcIlxcZlwiKT4wKXJldHVybiBzLnJlcGxhY2UoaCwoZS5jaGFyQ29kZUF0KDApPT09Vj9cIlwiOlwiJDFcIikrZS50cmltKCkpfXJldHVybiBlK3N9ZnVuY3Rpb24gS2UoZSxhLHIsYyl7dmFyIGwsbz0wLGg9ZStcIjtcIix1PTIqYSszKnIrNCpjO2lmKDk0ND09PXUpcmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBhPWUubGVuZ3RoLHI9ZS5pbmRleE9mKFwiOlwiLDkpKzEsYz1lLnN1YnN0cmluZygwLHIpLnRyaW0oKSxzPWUuc3Vic3RyaW5nKHIsYS0xKS50cmltKCk7c3dpdGNoKGUuY2hhckNvZGVBdCg5KSpCZSl7Y2FzZSAwOmJyZWFrO2Nhc2UgUTppZigxMTAhPT1lLmNoYXJDb2RlQXQoMTApKWJyZWFrO2RlZmF1bHQ6Zm9yKHZhciB0PXMuc3BsaXQoKHM9XCJcIixmKSksaT0wLHI9MCxhPXQubGVuZ3RoO2k8YTtyPTAsKytpKXtmb3IodmFyIGw9dFtpXSxvPWwuc3BsaXQobik7bD1vW3JdOyl7dmFyIGg9bC5jaGFyQ29kZUF0KDApO2lmKDE9PT1CZSYmKGg+TCYmaDw5MHx8aD45NiYmaDwxMjN8fGg9PT1SfHxoPT09USYmbC5jaGFyQ29kZUF0KDEpIT09USkpc3dpdGNoKGlzTmFOKHBhcnNlRmxvYXQobCkpKygtMSE9PWwuaW5kZXhPZihcIihcIikpKXtjYXNlIDE6c3dpdGNoKGwpe2Nhc2VcImluZmluaXRlXCI6Y2FzZVwiYWx0ZXJuYXRlXCI6Y2FzZVwiYmFja3dhcmRzXCI6Y2FzZVwicnVubmluZ1wiOmNhc2VcIm5vcm1hbFwiOmNhc2VcImZvcndhcmRzXCI6Y2FzZVwiYm90aFwiOmNhc2VcIm5vbmVcIjpjYXNlXCJsaW5lYXJcIjpjYXNlXCJlYXNlXCI6Y2FzZVwiZWFzZS1pblwiOmNhc2VcImVhc2Utb3V0XCI6Y2FzZVwiZWFzZS1pbi1vdXRcIjpjYXNlXCJwYXVzZWRcIjpjYXNlXCJyZXZlcnNlXCI6Y2FzZVwiYWx0ZXJuYXRlLXJldmVyc2VcIjpjYXNlXCJpbmhlcml0XCI6Y2FzZVwiaW5pdGlhbFwiOmNhc2VcInVuc2V0XCI6Y2FzZVwic3RlcC1zdGFydFwiOmNhc2VcInN0ZXAtZW5kXCI6YnJlYWs7ZGVmYXVsdDpsKz1EZX19b1tyKytdPWx9cys9KDA9PT1pP1wiXCI6XCIsXCIpK28uam9pbihcIiBcIil9fWlmKHM9YytzK1wiO1wiLDE9PT1BZXx8Mj09PUFlJiZMZShzLDEpKXJldHVybiBOK3MrcztyZXR1cm4gc30oaCk7ZWxzZSBpZigwPT09QWV8fDI9PT1BZSYmIUxlKGgsMSkpcmV0dXJuIGg7c3dpdGNoKHUpe2Nhc2UgMTAxNTpyZXR1cm4gOTc9PT1oLmNoYXJDb2RlQXQoMTApP04raCtoOmg7Y2FzZSA5NTE6cmV0dXJuIDExNj09PWguY2hhckNvZGVBdCgzKT9OK2graDpoO2Nhc2UgOTYzOnJldHVybiAxMTA9PT1oLmNoYXJDb2RlQXQoNSk/TitoK2g6aDtjYXNlIDEwMDk6aWYoMTAwIT09aC5jaGFyQ29kZUF0KDQpKWJyZWFrO2Nhc2UgOTY5OmNhc2UgOTQyOnJldHVybiBOK2graDtjYXNlIDk3ODpyZXR1cm4gTitoK1MraCtoO2Nhc2UgMTAxOTpjYXNlIDk4MzpyZXR1cm4gTitoK1MraCtGK2graDtjYXNlIDg4MzppZihoLmNoYXJDb2RlQXQoOCk9PT1RKXJldHVybiBOK2graDtpZihoLmluZGV4T2YoXCJpbWFnZS1zZXQoXCIsMTEpPjApcmV0dXJuIGgucmVwbGFjZSh6LFwiJDFcIitOK1wiJDJcIikraDtyZXR1cm4gaDtjYXNlIDkzMjppZihoLmNoYXJDb2RlQXQoNCk9PT1RKXN3aXRjaChoLmNoYXJDb2RlQXQoNSkpe2Nhc2UgMTAzOnJldHVybiBOK1wiYm94LVwiK2gucmVwbGFjZShcIi1ncm93XCIsXCJcIikrTitoK0YraC5yZXBsYWNlKFwiZ3Jvd1wiLFwicG9zaXRpdmVcIikraDtjYXNlIDExNTpyZXR1cm4gTitoK0YraC5yZXBsYWNlKFwic2hyaW5rXCIsXCJuZWdhdGl2ZVwiKStoO2Nhc2UgOTg6cmV0dXJuIE4raCtGK2gucmVwbGFjZShcImJhc2lzXCIsXCJwcmVmZXJyZWQtc2l6ZVwiKStofXJldHVybiBOK2grRitoK2g7Y2FzZSA5NjQ6cmV0dXJuIE4raCtGK1wiZmxleC1cIitoK2g7Y2FzZSAxMDIzOmlmKDk5IT09aC5jaGFyQ29kZUF0KDgpKWJyZWFrO3JldHVybiBsPWguc3Vic3RyaW5nKGguaW5kZXhPZihcIjpcIiwxNSkpLnJlcGxhY2UoXCJmbGV4LVwiLFwiXCIpLnJlcGxhY2UoXCJzcGFjZS1iZXR3ZWVuXCIsXCJqdXN0aWZ5XCIpLE4rXCJib3gtcGFja1wiK2wrTitoK0YrXCJmbGV4LXBhY2tcIitsK2g7Y2FzZSAxMDA1OnJldHVybiB0LnRlc3QoaCk/aC5yZXBsYWNlKHMsXCI6XCIrTikraC5yZXBsYWNlKHMsXCI6XCIrUykraDpoO2Nhc2UgMWUzOnN3aXRjaChvPShsPWguc3Vic3RyaW5nKDEzKS50cmltKCkpLmluZGV4T2YoXCItXCIpKzEsbC5jaGFyQ29kZUF0KDApK2wuY2hhckNvZGVBdChvKSl7Y2FzZSAyMjY6bD1oLnJlcGxhY2UobSxcInRiXCIpO2JyZWFrO2Nhc2UgMjMyOmw9aC5yZXBsYWNlKG0sXCJ0Yi1ybFwiKTticmVhaztjYXNlIDIyMDpsPWgucmVwbGFjZShtLFwibHJcIik7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gaH1yZXR1cm4gTitoK0YrbCtoO2Nhc2UgMTAxNzppZigtMT09PWguaW5kZXhPZihcInN0aWNreVwiLDkpKXJldHVybiBoO2Nhc2UgOTc1OnN3aXRjaChvPShoPWUpLmxlbmd0aC0xMCx1PShsPSgzMz09PWguY2hhckNvZGVBdChvKT9oLnN1YnN0cmluZygwLG8pOmgpLnN1YnN0cmluZyhlLmluZGV4T2YoXCI6XCIsNykrMSkudHJpbSgpKS5jaGFyQ29kZUF0KDApKygwfGwuY2hhckNvZGVBdCg3KSkpe2Nhc2UgMjAzOmlmKGwuY2hhckNvZGVBdCg4KTwxMTEpYnJlYWs7Y2FzZSAxMTU6aD1oLnJlcGxhY2UobCxOK2wpK1wiO1wiK2g7YnJlYWs7Y2FzZSAyMDc6Y2FzZSAxMDI6aD1oLnJlcGxhY2UobCxOKyh1PjEwMj9cImlubGluZS1cIjpcIlwiKStcImJveFwiKStcIjtcIitoLnJlcGxhY2UobCxOK2wpK1wiO1wiK2gucmVwbGFjZShsLEYrbCtcImJveFwiKStcIjtcIitofXJldHVybiBoK1wiO1wiO2Nhc2UgOTM4OmlmKGguY2hhckNvZGVBdCg1KT09PVEpc3dpdGNoKGguY2hhckNvZGVBdCg2KSl7Y2FzZSAxMDU6cmV0dXJuIGw9aC5yZXBsYWNlKFwiLWl0ZW1zXCIsXCJcIiksTitoK04rXCJib3gtXCIrbCtGK1wiZmxleC1cIitsK2g7Y2FzZSAxMTU6cmV0dXJuIE4raCtGK1wiZmxleC1pdGVtLVwiK2gucmVwbGFjZSh5LFwiXCIpK2g7ZGVmYXVsdDpyZXR1cm4gTitoK0YrXCJmbGV4LWxpbmUtcGFja1wiK2gucmVwbGFjZShcImFsaWduLWNvbnRlbnRcIixcIlwiKS5yZXBsYWNlKHksXCJcIikraH1icmVhaztjYXNlIDk3MzpjYXNlIDk4OTppZihoLmNoYXJDb2RlQXQoMykhPT1RfHwxMjI9PT1oLmNoYXJDb2RlQXQoNCkpYnJlYWs7Y2FzZSA5MzE6Y2FzZSA5NTM6aWYodHJ1ZT09PWoudGVzdChlKSlpZigxMTU9PT0obD1lLnN1YnN0cmluZyhlLmluZGV4T2YoXCI6XCIpKzEpKS5jaGFyQ29kZUF0KDApKXJldHVybiBLZShlLnJlcGxhY2UoXCJzdHJldGNoXCIsXCJmaWxsLWF2YWlsYWJsZVwiKSxhLHIsYykucmVwbGFjZShcIjpmaWxsLWF2YWlsYWJsZVwiLFwiOnN0cmV0Y2hcIik7ZWxzZSByZXR1cm4gaC5yZXBsYWNlKGwsTitsKStoLnJlcGxhY2UobCxTK2wucmVwbGFjZShcImZpbGwtXCIsXCJcIikpK2g7YnJlYWs7Y2FzZSA5NjI6aWYoaD1OK2grKDEwMj09PWguY2hhckNvZGVBdCg1KT9GK2g6XCJcIikraCxyK2M9PT0yMTEmJjEwNT09PWguY2hhckNvZGVBdCgxMykmJmguaW5kZXhPZihcInRyYW5zZm9ybVwiLDEwKT4wKXJldHVybiBoLnN1YnN0cmluZygwLGguaW5kZXhPZihcIjtcIiwyNykrMSkucmVwbGFjZShpLFwiJDFcIitOK1wiJDJcIikraH1yZXR1cm4gaH1mdW5jdGlvbiBMZShlLGEpe3ZhciByPWUuaW5kZXhPZigxPT09YT9cIjpcIjpcIntcIiksYz1lLnN1YnN0cmluZygwLDMhPT1hP3I6MTApLHM9ZS5zdWJzdHJpbmcocisxLGUubGVuZ3RoLTEpO3JldHVybiBPZSgyIT09YT9jOmMucmVwbGFjZShPLFwiJDFcIikscyxhKX1mdW5jdGlvbiBNZShlLGEpe3ZhciByPUtlKGEsYS5jaGFyQ29kZUF0KDApLGEuY2hhckNvZGVBdCgxKSxhLmNoYXJDb2RlQXQoMikpO3JldHVybiByIT09YStcIjtcIj9yLnJlcGxhY2UoJCxcIiBvciAoJDEpXCIpLnN1YnN0cmluZyg0KTpcIihcIithK1wiKVwifWZ1bmN0aW9uIFBlKGUsYSxyLGMscyx0LGksZixuLGwpe2Zvcih2YXIgbyxoPTAsdT1hO2g8eWU7KytoKXN3aXRjaChvPSRlW2hdLmNhbGwoVGUsZSx1LHIsYyxzLHQsaSxmLG4sbCkpe2Nhc2Ugdm9pZCAwOmNhc2UgZmFsc2U6Y2FzZSB0cnVlOmNhc2UgbnVsbDpicmVhaztkZWZhdWx0OnU9b31pZih1IT09YSlyZXR1cm4gdX1mdW5jdGlvbiBRZShlLGEscixjKXtmb3IodmFyIHM9YSsxO3M8cjsrK3Mpc3dpdGNoKGMuY2hhckNvZGVBdChzKSl7Y2FzZSBaOmlmKGU9PT1UKWlmKGMuY2hhckNvZGVBdChzLTEpPT09VCYmYSsyIT09cylyZXR1cm4gcysxO2JyZWFrO2Nhc2UgSTppZihlPT09WilyZXR1cm4gcysxfXJldHVybiBzfWZ1bmN0aW9uIFJlKGUpe2Zvcih2YXIgYSBpbiBlKXt2YXIgcj1lW2FdO3N3aXRjaChhKXtjYXNlXCJrZXlmcmFtZVwiOkJlPTB8cjticmVhaztjYXNlXCJnbG9iYWxcIjpDZT0wfHI7YnJlYWs7Y2FzZVwiY2FzY2FkZVwiOmdlPTB8cjticmVhaztjYXNlXCJjb21wcmVzc1wiOndlPTB8cjticmVhaztjYXNlXCJzZW1pY29sb25cIjp2ZT0wfHI7YnJlYWs7Y2FzZVwicHJlc2VydmVcIjptZT0wfHI7YnJlYWs7Y2FzZVwicHJlZml4XCI6aWYoT2U9bnVsbCwhcilBZT0wO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2YgcilBZT0xO2Vsc2UgQWU9MixPZT1yfX1yZXR1cm4gUmV9ZnVuY3Rpb24gVGUoYSxyKXtpZih2b2lkIDAhPT10aGlzJiZ0aGlzLmNvbnN0cnVjdG9yPT09VGUpcmV0dXJuIGUoYSk7dmFyIHM9YSx0PXMuY2hhckNvZGVBdCgwKTtpZih0PDMzKXQ9KHM9cy50cmltKCkpLmNoYXJDb2RlQXQoMCk7aWYoQmU+MClEZT1zLnJlcGxhY2UoZCx0PT09Rz9cIlwiOlwiLVwiKTtpZih0PTEsMT09PWdlKUdlPXM7ZWxzZSBFZT1zO3ZhciBpLGY9W0dlXTtpZih5ZT4wKWlmKHZvaWQgMCE9PShpPVBlKHplLHIsZixmLHBlLGJlLDAsMCwwLDApKSYmXCJzdHJpbmdcIj09dHlwZW9mIGkpcj1pO3ZhciBuPUhlKHhlLGYsciwwLDApO2lmKHllPjApaWYodm9pZCAwIT09KGk9UGUoamUsbixmLGYscGUsYmUsbi5sZW5ndGgsMCwwLDApKSYmXCJzdHJpbmdcIiE9dHlwZW9mKG49aSkpdD0wO3JldHVybiBEZT1cIlwiLEdlPVwiXCIsRWU9XCJcIixrZT0wLHBlPTEsYmU9MSx3ZSp0PT0wP246bi5yZXBsYWNlKGMsXCJcIikucmVwbGFjZShnLFwiXCIpLnJlcGxhY2UoQSxcIiQxXCIpLnJlcGxhY2UoQyxcIiQxXCIpLnJlcGxhY2UodyxcIiBcIil9aWYoVGUudXNlPWZ1bmN0aW9uIGUoYSl7c3dpdGNoKGEpe2Nhc2Ugdm9pZCAwOmNhc2UgbnVsbDp5ZT0kZS5sZW5ndGg9MDticmVhaztkZWZhdWx0OmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGEpJGVbeWUrK109YTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBhKWZvcih2YXIgcj0wLGM9YS5sZW5ndGg7cjxjOysrcillKGFbcl0pO2Vsc2UgcWU9MHwhIWF9cmV0dXJuIGV9LFRlLnNldD1SZSx2b2lkIDAhPT1hKVJlKGEpO3JldHVybiBUZX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGlzLm1pbi5qcy5tYXAiLCJ2YXIgc2FmZUlzTmFOID0gTnVtYmVyLmlzTmFOIHx8XG4gICAgZnVuY3Rpb24gcG9ueWZpbGwodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IHZhbHVlO1xuICAgIH07XG5mdW5jdGlvbiBpc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNhZmVJc05hTihmaXJzdCkgJiYgc2FmZUlzTmFOKHNlY29uZCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNFcXVhbChuZXdJbnB1dHNbaV0sIGxhc3RJbnB1dHNbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVPbmUocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7IGlzRXF1YWwgPSBhcmVJbnB1dHNFcXVhbDsgfVxuICAgIHZhciBsYXN0VGhpcztcbiAgICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgICB2YXIgbGFzdFJlc3VsdDtcbiAgICB2YXIgY2FsbGVkT25jZSA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgICAgICB2YXIgbmV3QXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbmV3QXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsZWRPbmNlICYmIGxhc3RUaGlzID09PSB0aGlzICYmIGlzRXF1YWwobmV3QXJncywgbGFzdEFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UmVzdWx0ID0gcmVzdWx0Rm4uYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgICAgIGNhbGxlZE9uY2UgPSB0cnVlO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RBcmdzID0gbmV3QXJncztcbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBtZW1vaXplZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZU9uZTtcbiIsIi8qKlxuICogbG9kYXNoIDQuMC4xIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgMjAxMi0yMDE2IFRoZSBEb2pvIEZvdW5kYXRpb24gPGh0dHA6Ly9kb2pvZm91bmRhdGlvbi5vcmcvPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCAyMDA5LTIwMTYgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqIEF2YWlsYWJsZSB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKi9cblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEB0eXBlIEZ1bmN0aW9uXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTdHJpbmcoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN0cmluZ1RhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmc7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZShcIi4vdG9QcmltaXRpdmUuanNcIik7XG5mdW5jdGlvbiB0b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSB0b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjtcbn1cbm1vZHVsZS5leHBvcnRzID0gdG9Qcm9wZXJ0eUtleSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAodXRpbHMuaXNCbG9iKHJlcXVlc3REYXRhKSB8fCB1dGlscy5pc0ZpbGUocmVxdWVzdERhdGEpKSAmJlxuICAgICAgcmVxdWVzdERhdGEudHlwZVxuICAgICkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1ib3VuZCcpO1xudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJE1hcCA9IEdldEludHJpbnNpYygnJU1hcCUnLCB0cnVlKTtcblxuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+LCBrZXk6IEspID0+IFZ9ICovXG52YXIgJG1hcEdldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEssIFY+KHRoaXNBcmc6IE1hcDxLLCBWPiwga2V5OiBLLCB2YWx1ZTogVikgPT4gdm9pZH0gKi9cbnZhciAkbWFwU2V0ID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLnNldCcsIHRydWUpO1xuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+LCBrZXk6IEspID0+IGJvb2xlYW59ICovXG52YXIgJG1hcEhhcyA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5oYXMnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEssIFY+KHRoaXNBcmc6IE1hcDxLLCBWPiwga2V5OiBLKSA9PiBib29sZWFufSAqL1xudmFyICRtYXBEZWxldGUgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZGVsZXRlJywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLLCBWPih0aGlzQXJnOiBNYXA8SywgVj4pID0+IG51bWJlcn0gKi9cbnZhciAkbWFwU2l6ZSA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5zaXplJywgdHJ1ZSk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9ICEhJE1hcCAmJiAvKiogQHR5cGUge0V4Y2x1ZGU8aW1wb3J0KCcuJyksIGZhbHNlPn0gKi8gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWxNYXAoKSB7XG5cdC8qKiBAdHlwZWRlZiB7UmV0dXJuVHlwZTx0eXBlb2YgZ2V0U2lkZUNoYW5uZWxNYXA+fSBDaGFubmVsICovXG5cdC8qKiBAdHlwZWRlZiB7UGFyYW1ldGVyczxDaGFubmVsWydnZXQnXT5bMF19IEsgKi9cblx0LyoqIEB0eXBlZGVmIHtQYXJhbWV0ZXJzPENoYW5uZWxbJ3NldCddPlsxXX0gViAqL1xuXG5cdC8qKiBAdHlwZSB7TWFwPEssIFY+IHwgdW5kZWZpbmVkfSAqLyB2YXIgJG07XG5cblx0LyoqIEB0eXBlIHtDaGFubmVsfSAqL1xuXHR2YXIgY2hhbm5lbCA9IHtcblx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSAkbWFwRGVsZXRlKCRtLCBrZXkpO1xuXHRcdFx0XHRpZiAoJG1hcFNpemUoJG0pID09PSAwKSB7XG5cdFx0XHRcdFx0JG0gPSB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0Z2V0OiBmdW5jdGlvbiAoa2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRyZXR1cm4gJG1hcEdldCgkbSwga2V5KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhczogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdHJldHVybiAkbWFwSGFzKCRtLCBrZXkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCEkbSkge1xuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGNhbid0IGhhbmRsZSBuYXJyb3dpbmcgYSB2YXJpYWJsZSBpbnNpZGUgYSBjbG9zdXJlXG5cdFx0XHRcdCRtID0gbmV3ICRNYXAoKTtcblx0XHRcdH1cblx0XHRcdCRtYXBTZXQoJG0sIGtleSwgdmFsdWUpO1xuXHRcdH1cblx0fTtcblxuXHQvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGZpZ3VyZSBvdXQgd2h5IFRTIGlzIGVycm9yaW5nIGhlcmVcblx0cmV0dXJuIGNoYW5uZWw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG52YXIgJGdPUEQgPSByZXF1aXJlKCcuL2dPUEQnKTtcblxuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoW10sICdsZW5ndGgnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGdPUERcblx0XHQkZ09QRCA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkZ09QRDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vUmVmbGVjdC5nZXRQcm90b3R5cGVPZicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSAodHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YpIHx8IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnZXMtb2JqZWN0LWF0b21zJyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL09iamVjdC5nZXRQcm90b3R5cGVPZicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSAkT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgJGNhbGwgPSByZXF1aXJlKCcuL2Z1bmN0aW9uQ2FsbCcpO1xudmFyICRhY3R1YWxBcHBseSA9IHJlcXVpcmUoJy4vYWN0dWFsQXBwbHknKTtcblxuLyoqIEB0eXBlIHsoYXJnczogW0Z1bmN0aW9uLCB0aGlzQXJnPzogdW5rbm93biwgLi4uYXJnczogdW5rbm93bltdXSkgPT4gRnVuY3Rpb259IFRPRE8gRklYTUUsIGZpbmQgYSB3YXkgdG8gdXNlIGltcG9ydCgnLicpICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kQmFzaWMoYXJncykge1xuXHRpZiAoYXJncy5sZW5ndGggPCAxIHx8IHR5cGVvZiBhcmdzWzBdICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2EgZnVuY3Rpb24gaXMgcmVxdWlyZWQnKTtcblx0fVxuXHRyZXR1cm4gJGFjdHVhbEFwcGx5KGJpbmQsICRjYWxsLCBhcmdzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2Z1bmN0aW9uQXBwbHknKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmRCYXNpYyA9IHJlcXVpcmUoJ2NhbGwtYmluZC1hcHBseS1oZWxwZXJzJyk7XG5cbi8qKiBAdHlwZSB7KHRoaXNBcmc6IHN0cmluZywgc2VhcmNoU3RyaW5nOiBzdHJpbmcsIHBvc2l0aW9uPzogbnVtYmVyKSA9PiBudW1iZXJ9ICovXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZEJhc2ljKFtHZXRJbnRyaW5zaWMoJyVTdHJpbmcucHJvdG90eXBlLmluZGV4T2YlJyldKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJvdW5kSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHQvKiBlc2xpbnQgbm8tZXh0cmEtcGFyZW5zOiAwICovXG5cblx0dmFyIGludHJpbnNpYyA9IC8qKiBAdHlwZSB7KHRoaXM6IHVua25vd24sIC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93bn0gKi8gKEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZykpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kQmFzaWMoLyoqIEB0eXBlIHtjb25zdH0gKi8gKFtpbnRyaW5zaWNdKSk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgaGV4VGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgYXJyYXkucHVzaCgnJScgKyAoKGkgPCAxNiA/ICcwJyA6ICcnKSArIGkudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59KCkpO1xuXG52YXIgY29tcGFjdFF1ZXVlID0gZnVuY3Rpb24gY29tcGFjdFF1ZXVlKHF1ZXVlKSB7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2pdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5vYmpbaXRlbS5wcm9wXSA9IGNvbXBhY3RlZDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBhcnJheVRvT2JqZWN0ID0gZnVuY3Rpb24gYXJyYXlUb09iamVjdChzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0gb3B0aW9ucyAmJiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IHsgX19wcm90b19fOiBudWxsIH0gOiB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIC8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogMCAqL1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnICYmIHR5cGVvZiBzb3VyY2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2goc291cmNlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAob3B0aW9ucyAmJiAob3B0aW9ucy5wbGFpbk9iamVjdHMgfHwgb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpKVxuICAgICAgICAgICAgICAgIHx8ICFoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzb3VyY2UpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbc291cmNlXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3RhcmdldCwgc291cmNlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXQgfHwgdHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBtZXJnZVRhcmdldCA9IHRhcmdldDtcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmICFpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgbWVyZ2VUYXJnZXQgPSBhcnJheVRvT2JqZWN0KHRhcmdldCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiBpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICAgIGlmIChoYXMuY2FsbCh0YXJnZXQsIGkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldEl0ZW0gPSB0YXJnZXRbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEl0ZW0gJiYgdHlwZW9mIHRhcmdldEl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IG1lcmdlKHRhcmdldEl0ZW0sIGl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAoaGFzLmNhbGwoYWNjLCBrZXkpKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IG1lcmdlKGFjY1trZXldLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbWVyZ2VUYXJnZXQpO1xufTtcblxudmFyIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnblNpbmdsZVNvdXJjZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB0YXJnZXQpO1xufTtcblxudmFyIGRlY29kZSA9IGZ1bmN0aW9uIChzdHIsIGRlZmF1bHREZWNvZGVyLCBjaGFyc2V0KSB7XG4gICAgdmFyIHN0cldpdGhvdXRQbHVzID0gc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgLy8gdW5lc2NhcGUgbmV2ZXIgdGhyb3dzLCBubyB0cnkuLi5jYXRjaCBuZWVkZWQ6XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cy5yZXBsYWNlKC8lWzAtOWEtZl17Mn0vZ2ksIHVuZXNjYXBlKTtcbiAgICB9XG4gICAgLy8gdXRmLThcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cldpdGhvdXRQbHVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cztcbiAgICB9XG59O1xuXG52YXIgbGltaXQgPSAxMDI0O1xuXG4vKiBlc2xpbnQgb3BlcmF0b3ItbGluZWJyZWFrOiBbMiwgXCJiZWZvcmVcIl0gKi9cblxudmFyIGVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShzdHIsIGRlZmF1bHRFbmNvZGVyLCBjaGFyc2V0LCBraW5kLCBmb3JtYXQpIHtcbiAgICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSAobXNjZGV4KSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS5cbiAgICAvLyBJdCBoYXMgYmVlbiBhZGFwdGVkIGhlcmUgZm9yIHN0cmljdGVyIGFkaGVyZW5jZSB0byBSRkMgMzk4NlxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IHN0cjtcbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgc3RyaW5nID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN0cik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICBzdHJpbmcgPSBTdHJpbmcoc3RyKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGUoc3RyaW5nKS5yZXBsYWNlKC8ldVswLTlhLWZdezR9L2dpLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJTI2JTIzJyArIHBhcnNlSW50KCQwLnNsaWNlKDIpLCAxNikgKyAnJTNCJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG91dCA9ICcnO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3RyaW5nLmxlbmd0aDsgaiArPSBsaW1pdCkge1xuICAgICAgICB2YXIgc2VnbWVudCA9IHN0cmluZy5sZW5ndGggPj0gbGltaXQgPyBzdHJpbmcuc2xpY2UoaiwgaiArIGxpbWl0KSA6IHN0cmluZztcbiAgICAgICAgdmFyIGFyciA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSBzZWdtZW50LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgYyA9PT0gMHgyRCAvLyAtXG4gICAgICAgICAgICAgICAgfHwgYyA9PT0gMHgyRSAvLyAuXG4gICAgICAgICAgICAgICAgfHwgYyA9PT0gMHg1RiAvLyBfXG4gICAgICAgICAgICAgICAgfHwgYyA9PT0gMHg3RSAvLyB+XG4gICAgICAgICAgICAgICAgfHwgKGMgPj0gMHgzMCAmJiBjIDw9IDB4MzkpIC8vIDAtOVxuICAgICAgICAgICAgICAgIHx8IChjID49IDB4NDEgJiYgYyA8PSAweDVBKSAvLyBhLXpcbiAgICAgICAgICAgICAgICB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSkgLy8gQS1aXG4gICAgICAgICAgICAgICAgfHwgKGZvcm1hdCA9PT0gZm9ybWF0cy5SRkMxNzM4ICYmIChjID09PSAweDI4IHx8IGMgPT09IDB4MjkpKSAvLyAoIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoXSA9IHNlZ21lbnQuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aF0gPSBoZXhUYWJsZVtjXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoXSA9IGhleFRhYmxlWzB4QzAgfCAoYyA+PiA2KV1cbiAgICAgICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjIDwgMHhEODAwIHx8IGMgPj0gMHhFMDAwKSB7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4VGFibGVbMHhFMCB8IChjID4+IDEyKV1cbiAgICAgICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICBjID0gMHgxMDAwMCArICgoKGMgJiAweDNGRikgPDwgMTApIHwgKHNlZ21lbnQuY2hhckNvZGVBdChpKSAmIDB4M0ZGKSk7XG5cbiAgICAgICAgICAgIGFyclthcnIubGVuZ3RoXSA9IGhleFRhYmxlWzB4RjAgfCAoYyA+PiAxOCldXG4gICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDEyKSAmIDB4M0YpXVxuICAgICAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXVxuICAgICAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0ICs9IGFyci5qb2luKCcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxudmFyIGNvbXBhY3QgPSBmdW5jdGlvbiBjb21wYWN0KHZhbHVlKSB7XG4gICAgdmFyIHF1ZXVlID0gW3sgb2JqOiB7IG86IHZhbHVlIH0sIHByb3A6ICdvJyB9XTtcbiAgICB2YXIgcmVmcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlW2ldO1xuICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbal07XG4gICAgICAgICAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsICYmIHJlZnMuaW5kZXhPZih2YWwpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goeyBvYmo6IG9iaiwgcHJvcDoga2V5IH0pO1xuICAgICAgICAgICAgICAgIHJlZnMucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcGFjdFF1ZXVlKHF1ZXVlKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBpc1JlZ0V4cCA9IGZ1bmN0aW9uIGlzUmVnRXhwKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59O1xuXG52YXIgaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iaikpO1xufTtcblxudmFyIGNvbWJpbmUgPSBmdW5jdGlvbiBjb21iaW5lKGEsIGIpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KGEsIGIpO1xufTtcblxudmFyIG1heWJlTWFwID0gZnVuY3Rpb24gbWF5YmVNYXAodmFsLCBmbikge1xuICAgIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdmFyIG1hcHBlZCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgbWFwcGVkLnB1c2goZm4odmFsW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcHBlZDtcbiAgICB9XG4gICAgcmV0dXJuIGZuKHZhbCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBhcnJheVRvT2JqZWN0OiBhcnJheVRvT2JqZWN0LFxuICAgIGFzc2lnbjogYXNzaWduLFxuICAgIGNvbWJpbmU6IGNvbWJpbmUsXG4gICAgY29tcGFjdDogY29tcGFjdCxcbiAgICBkZWNvZGU6IGRlY29kZSxcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gICAgaXNSZWdFeHA6IGlzUmVnRXhwLFxuICAgIG1heWJlTWFwOiBtYXliZU1hcCxcbiAgICBtZXJnZTogbWVyZ2Vcbn07XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQWZyaWthYW5zIFthZl1cbi8vISBhdXRob3IgOiBXZXJuZXIgTW9sbGVudHplIDogaHR0cHM6Ly9naXRodWIuY29tL3dlcm5lcm1cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBhZiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FmJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpZV9GZWJydWFyaWVfTWFhcnRfQXByaWxfTWVpX0p1bmllX0p1bGllX0F1Z3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTXJ0X0Fwcl9NZWlfSnVuX0p1bF9BdWdfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1NvbmRhZ19NYWFuZGFnX0RpbnNkYWdfV29lbnNkYWdfRG9uZGVyZGFnX1ZyeWRhZ19TYXRlcmRhZycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1Nvbl9NYWFfRGluX1dvZV9Eb25fVnJ5X1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19NYV9EaV9Xb19Eb19Wcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3ZtfG5tL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9ebm0kL2kudGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAndm0nIDogJ1ZNJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnbm0nIDogJ05NJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tWYW5kYWcgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTcO0cmUgb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbR2lzdGVyIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYWFzXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvb3IgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGdlbGVkZScsXG4gICAgICAgICAgICBzOiBcIiduIHBhYXIgc2Vrb25kZXNcIixcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vrb25kZXMnLFxuICAgICAgICAgICAgbTogXCInbiBtaW51dXRcIixcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlJyxcbiAgICAgICAgICAgIGg6IFwiJ24gdXVyXCIsXG4gICAgICAgICAgICBoaDogJyVkIHVyZScsXG4gICAgICAgICAgICBkOiBcIiduIGRhZ1wiLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWUnLFxuICAgICAgICAgICAgTTogXCInbiBtYWFuZFwiLFxuICAgICAgICAgICAgTU06ICclZCBtYWFuZGUnLFxuICAgICAgICAgICAgeTogXCInbiBqYWFyXCIsXG4gICAgICAgICAgICB5eTogJyVkIGphYXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgbnVtYmVyICtcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjAgPyAnc3RlJyA6ICdkZScpXG4gICAgICAgICAgICApOyAvLyBUaGFua3MgdG8gSm9yaXMgUsO2bGluZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qanVwaXRlclxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1hYW5kYWcgaXMgZGllIGVlcnN0ZSBkYWcgdmFuIGRpZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBEaWUgd2VlayB3YXQgZGllIDRkZSBKYW51YXJpZSBiZXZhdCBpcyBkaWUgZWVyc3RlIHdlZWsgdmFuIGRpZSBqYWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFmO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyBbYXJdXG4vLyEgYXV0aG9yIDogQWJkZWwgU2FpZDogaHR0cHM6Ly9naXRodWIuY29tL2FiZGVsc2FpZFxuLy8hIGF1dGhvciA6IEFobWVkIEVsa2hhdGliXG4vLyEgYXV0aG9yIDogZm9yYWJpIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JhYmlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn2aEnLFxuICAgICAgICAgICAgMjogJ9miJyxcbiAgICAgICAgICAgIDM6ICfZoycsXG4gICAgICAgICAgICA0OiAn2aQnLFxuICAgICAgICAgICAgNTogJ9mlJyxcbiAgICAgICAgICAgIDY6ICfZpicsXG4gICAgICAgICAgICA3OiAn2acnLFxuICAgICAgICAgICAgODogJ9moJyxcbiAgICAgICAgICAgIDk6ICfZqScsXG4gICAgICAgICAgICAwOiAn2aAnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICAgICAn2aInOiAnMicsXG4gICAgICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICAgICAn2aUnOiAnNScsXG4gICAgICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICAgICAn2agnOiAnOCcsXG4gICAgICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICAgICAn2aAnOiAnMCcsXG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbEZvcm0gPSBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgcmV0dXJuIG4gPT09IDBcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IG4gPT09IDFcbiAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgOiBuID09PSAyXG4gICAgICAgICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICAgICAgICA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwXG4gICAgICAgICAgICAgICAgICAgICAgPyAzXG4gICAgICAgICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDExXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogNTtcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFscyA9IHtcbiAgICAgICAgICAgIHM6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYq9mI2KfZhicsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgICAgICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLFxuICAgICAgICAgICAgICAgICfYr9mC2YrZgtipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2K/ZgtmK2YLYqtin2YYnLCAn2K/ZgtmK2YLYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBoOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAn2LPYp9i52Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYs9in2LnYqtin2YYnLCAn2LPYp9i52KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYqScsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINmK2YjZhScsXG4gICAgICAgICAgICAgICAgJ9mK2YjZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YXZi9inJyxcbiAgICAgICAgICAgICAgICAnJWQg2YrZiNmFJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBNOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi02YfYsScsXG4gICAgICAgICAgICAgICAgJ9i02YfYsSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYtNmH2LHYp9mGJywgJ9i02YfYsdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgICAgICclZCDYtNmH2LHYpycsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYudin2YUnLFxuICAgICAgICAgICAgICAgICfYudin2YUg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2LnYp9mF2KfZhicsICfYudin2YXZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2LnZiNin2YUnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YXZi9inJyxcbiAgICAgICAgICAgICAgICAnJWQg2LnYp9mFJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBwbHVyYWxzW3VdW3BsdXJhbEZvcm0obnVtYmVyKV07XG4gICAgICAgICAgICAgICAgaWYgKGYgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfZitmG2KfZitixJyxcbiAgICAgICAgICAgICfZgdio2LHYp9mK2LEnLFxuICAgICAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgICAgICfYo9io2LHZitmEJyxcbiAgICAgICAgICAgICfZhdin2YrZiCcsXG4gICAgICAgICAgICAn2YrZiNmG2YrZiCcsXG4gICAgICAgICAgICAn2YrZiNmE2YrZiCcsXG4gICAgICAgICAgICAn2KPYutiz2LfYsycsXG4gICAgICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgICAgICfYo9mD2KrZiNio2LEnLFxuICAgICAgICAgICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgICAgICAgICAn2K/Zitiz2YXYqNixJyxcbiAgICAgICAgXTtcblxuICAgIHZhciBhciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC9cXHUyMDBGTS9cXHUyMDBGWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9mL2Kcg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2KjYudivICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBzczogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBtOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIG1tOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIGg6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgaGg6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgZDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBkZDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBNOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIE1NOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIHk6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICAgICAgeXk6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKEFsZ2VyaWEpIFthci1kel1cbi8vISBhdXRob3IgOiBBbWluZSBSb3VraDogaHR0cHM6Ly9naXRodWIuY29tL0FtaW5lMjdcbi8vISBhdXRob3IgOiBBYmRlbCBTYWlkOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG4vLyEgYXV0aG9yIDogQWhtZWQgRWxraGF0aWJcbi8vISBhdXRob3IgOiBmb3JhYmkgaHR0cHM6Ly9naXRodWIuY29tL2ZvcmFiaVxuLy8hIGF1dGhvciA6IE5vdXJlZGRpbmUgTE9VQUhFREogOiBodHRwczovL2dpdGh1Yi5jb20vbm91cmVkZGluZW1cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBuID09PSAwXG4gICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgOiBuID09PSAxXG4gICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgIDogbiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDMgJiYgbiAlIDEwMCA8PSAxMFxuICAgICAgICAgICAgICAgICAgICAgID8gM1xuICAgICAgICAgICAgICAgICAgICAgIDogbiAlIDEwMCA+PSAxMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyA0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IDU7XG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbHMgPSB7XG4gICAgICAgICAgICBzOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINir2KfZhtmK2KknLFxuICAgICAgICAgICAgICAgICfYq9in2YbZitipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KvZiNin2YYnLFxuICAgICAgICAgICAgICAgICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgICAgICAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgICAgICAn2K/ZgtmK2YLYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9iv2YLZitmC2KrYp9mGJywgJ9iv2YLZitmC2KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgICAgICAnJWQg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaDogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYs9in2LnYqScsXG4gICAgICAgICAgICAgICAgJ9iz2KfYudipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2LPYp9i52KrYp9mGJywgJ9iz2KfYudiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KknLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZDogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDZitmI2YUnLFxuICAgICAgICAgICAgICAgICfZitmI2YUg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgICAgICAnJWQg2YrZiNmF2YvYpycsXG4gICAgICAgICAgICAgICAgJyVkINmK2YjZhScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgTTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYtNmH2LEnLFxuICAgICAgICAgICAgICAgICfYtNmH2LEg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2LTZh9ix2KfZhicsICfYtNmH2LHZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgICAgICAnJWQg2LTZh9ix2KcnLFxuICAgICAgICAgICAgICAgICclZCDYtNmH2LEnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHk6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LnYp9mFJyxcbiAgICAgICAgICAgICAgICAn2LnYp9mFINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9i52KfZhdin2YYnLCAn2LnYp9mF2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9i52YjYp9mFJyxcbiAgICAgICAgICAgICAgICAnJWQg2LnYp9mF2YvYpycsXG4gICAgICAgICAgICAgICAgJyVkINi52KfZhScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxpemUgPSBmdW5jdGlvbiAodSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gcGx1cmFsc1t1XVtwbHVyYWxGb3JtKG51bWJlcildO1xuICAgICAgICAgICAgICAgIGlmIChmID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBtb250aHMgPSBbXG4gICAgICAgICAgICAn2KzYp9mG2YHZiicsXG4gICAgICAgICAgICAn2YHZitmB2LHZiicsXG4gICAgICAgICAgICAn2YXYp9ix2LMnLFxuICAgICAgICAgICAgJ9ij2YHYsdmK2YQnLFxuICAgICAgICAgICAgJ9mF2KfZiicsXG4gICAgICAgICAgICAn2KzZiNin2YYnLFxuICAgICAgICAgICAgJ9is2YjZitmE2YrYqScsXG4gICAgICAgICAgICAn2KPZiNiqJyxcbiAgICAgICAgICAgICfYs9io2KrZhdio2LEnLFxuICAgICAgICAgICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgICAgICAgICAn2YbZiNmB2YXYqNixJyxcbiAgICAgICAgICAgICfYr9mK2LPZhdio2LEnLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGFyRHogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1keicsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QvXFx1MjAwRk0vXFx1MjAwRllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9io2LnYryAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgc3M6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgbTogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBtbTogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBoOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGhoOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGQ6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgZGQ6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgTTogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICBNTTogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICB5OiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgICAgIHl5OiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJEejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKEt1d2FpdCkgW2FyLWt3XVxuLy8hIGF1dGhvciA6IE51c3JldCBQYXJsYWs6IGh0dHBzOi8vZ2l0aHViLmNvbS9udXNyZXRwYXJsYWtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBhckt3ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXIta3cnLCB7XG4gICAgICAgIG1vbnRoczogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdiq2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYp9it2K9f2KfYqtmG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgICAgICBNTTogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHk6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJLdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKExpYnlhKSBbYXItbHldXG4vLyEgYXV0aG9yIDogQWxpIEhtZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9raWtvYW5pc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICcxJyxcbiAgICAgICAgICAgIDI6ICcyJyxcbiAgICAgICAgICAgIDM6ICczJyxcbiAgICAgICAgICAgIDQ6ICc0JyxcbiAgICAgICAgICAgIDU6ICc1JyxcbiAgICAgICAgICAgIDY6ICc2JyxcbiAgICAgICAgICAgIDc6ICc3JyxcbiAgICAgICAgICAgIDg6ICc4JyxcbiAgICAgICAgICAgIDk6ICc5JyxcbiAgICAgICAgICAgIDA6ICcwJyxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFsRm9ybSA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICByZXR1cm4gbiA9PT0gMFxuICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgIDogbiA9PT0gMVxuICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICA6IG4gPT09IDJcbiAgICAgICAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgICAgICAgIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTBcbiAgICAgICAgICAgICAgICAgICAgICA/IDNcbiAgICAgICAgICAgICAgICAgICAgICA6IG4gJSAxMDAgPj0gMTFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gNFxuICAgICAgICAgICAgICAgICAgICAgICAgOiA1O1xuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxzID0ge1xuICAgICAgICAgICAgczogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYq9in2YbZitipJyxcbiAgICAgICAgICAgICAgICAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9ir2KfZhtmK2KrYp9mGJywgJ9ir2KfZhtmK2KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINir2YjYp9mGJyxcbiAgICAgICAgICAgICAgICAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgICAgICAnJWQg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGg6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LPYp9i52KknLFxuICAgICAgICAgICAgICAgICfYs9in2LnYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGQ6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2YrZiNmFJyxcbiAgICAgICAgICAgICAgICAn2YrZiNmFINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9mK2YjZhdin2YYnLCAn2YrZiNmF2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINmK2YjZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIE06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LTZh9ixJyxcbiAgICAgICAgICAgICAgICAn2LTZh9ixINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsdinJyxcbiAgICAgICAgICAgICAgICAnJWQg2LTZh9ixJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB5OiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi52KfZhScsXG4gICAgICAgICAgICAgICAgJ9i52KfZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYudmI2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINi52KfZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBwbHVyYWxGb3JtKG51bWJlciksXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHJbd2l0aG91dFN1ZmZpeCA/IDAgOiAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzID0gW1xuICAgICAgICAgICAgJ9mK2YbYp9mK2LEnLFxuICAgICAgICAgICAgJ9mB2KjYsdin2YrYsScsXG4gICAgICAgICAgICAn2YXYp9ix2LMnLFxuICAgICAgICAgICAgJ9ij2KjYsdmK2YQnLFxuICAgICAgICAgICAgJ9mF2KfZitmIJyxcbiAgICAgICAgICAgICfZitmI2YbZitmIJyxcbiAgICAgICAgICAgICfZitmI2YTZitmIJyxcbiAgICAgICAgICAgICfYo9i62LPYt9izJyxcbiAgICAgICAgICAgICfYs9io2KrZhdio2LEnLFxuICAgICAgICAgICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgICAgICAgICAn2YbZiNmB2YXYqNixJyxcbiAgICAgICAgICAgICfYr9mK2LPZhdio2LEnLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGFyTHkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1seScsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QvXFx1MjAwRk0vXFx1MjAwRllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9io2LnYryAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgc3M6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgbTogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBtbTogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBoOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGhoOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGQ6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgZGQ6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgTTogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICBNTTogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICB5OiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgICAgIHl5OiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJMeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKE1vcm9jY28pIFthci1tYV1cbi8vISBhdXRob3IgOiBFbEZhZGlsaSBZYXNzaW5lIDogaHR0cHM6Ly9naXRodWIuY29tL0VsRmFkaWxpWVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYXJNYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLW1hJywge1xuICAgICAgICBtb250aHM6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KfYrdivX9in2KvZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzczogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbTogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW06ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE06ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU06ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPZhtmI2KfYqicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhck1hO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoUGFsZXN0aW5lKSBbYXItcHNdXG4vLyEgYXV0aG9yIDogTWFqZCBBbC1TaGloYWJpIDogaHR0cHM6Ly9naXRodWIuY29tL21hamRhbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfZoScsXG4gICAgICAgICAgICAyOiAn2aInLFxuICAgICAgICAgICAgMzogJ9mjJyxcbiAgICAgICAgICAgIDQ6ICfZpCcsXG4gICAgICAgICAgICA1OiAn2aUnLFxuICAgICAgICAgICAgNjogJ9mmJyxcbiAgICAgICAgICAgIDc6ICfZpycsXG4gICAgICAgICAgICA4OiAn2agnLFxuICAgICAgICAgICAgOTogJ9mpJyxcbiAgICAgICAgICAgIDA6ICfZoCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgICAgICfZoic6ICcyJyxcbiAgICAgICAgICAgICfZoyc6ICczJyxcbiAgICAgICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgICAgICfZpSc6ICc1JyxcbiAgICAgICAgICAgICfZpic6ICc2JyxcbiAgICAgICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgICAgICfZqCc6ICc4JyxcbiAgICAgICAgICAgICfZqSc6ICc5JyxcbiAgICAgICAgICAgICfZoCc6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBhclBzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItcHMnLCB7XG4gICAgICAgIG1vbnRoczogJ9mD2KfZhtmI2YYg2KfZhNir2KfZhtmKX9i02KjYp9i3X9ii2LDYp9ixX9mG2YrYs9in2YZf2KPZitmR2KfYsV/Yrdiy2YrYsdin2YZf2KrZhdmR2YjYsl/YotioX9ij2YrZhNmI2YRf2KrYtNix2Yog2KfZhNij2YjZkdmEX9iq2LTYsdmK2YYg2KfZhNir2KfZhtmKX9mD2KfZhtmI2YYg2KfZhNij2YjZkdmEJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfZg9miX9i02KjYp9i3X9ii2LDYp9ixX9mG2YrYs9in2YZf2KPZitmR2KfYsV/Yrdiy2YrYsdin2YZf2KrZhdmR2YjYsl/YotioX9ij2YrZhNmI2YRf2KrZoV/YqtmiX9mD2aEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgICAgICBNTTogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHk6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW9mj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zcGxpdCgnJykgLy8gcmV2ZXJzZWQgc2luY2UgbmVnYXRpdmUgbG9va2JlaGluZCBub3Qgc3VwcG9ydGVkIGV2ZXJ5d2hlcmVcbiAgICAgICAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgICAgICAgLmpvaW4oJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1vZodmiXSg/IVtcXHUwNjJhXFx1MDY0M10pL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5zcGxpdCgnJylcbiAgICAgICAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgICAgICAgLmpvaW4oJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJQcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKFNhdWRpIEFyYWJpYSkgW2FyLXNhXVxuLy8hIGF1dGhvciA6IFN1aGFpbCBBbGtvd2FpbGVldCA6IGh0dHBzOi8vZ2l0aHViLmNvbS94c29oXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ9mhJyxcbiAgICAgICAgICAgIDI6ICfZoicsXG4gICAgICAgICAgICAzOiAn2aMnLFxuICAgICAgICAgICAgNDogJ9mkJyxcbiAgICAgICAgICAgIDU6ICfZpScsXG4gICAgICAgICAgICA2OiAn2aYnLFxuICAgICAgICAgICAgNzogJ9mnJyxcbiAgICAgICAgICAgIDg6ICfZqCcsXG4gICAgICAgICAgICA5OiAn2aknLFxuICAgICAgICAgICAgMDogJ9mgJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ9mhJzogJzEnLFxuICAgICAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAgICAgJ9mkJzogJzQnLFxuICAgICAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAgICAgJ9mnJzogJzcnLFxuICAgICAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAgICAgJ9mgJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGFyU2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1zYScsIHtcbiAgICAgICAgbW9udGhzOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mK2Yhf2YrZiNmG2YrZiF/ZitmI2YTZitmIX9ij2LrYs9i32LNf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgICAgICBNTTogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHk6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhclNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSAgOiAgQXJhYmljIChUdW5pc2lhKSBbYXItdG5dXG4vLyEgYXV0aG9yIDogTmFkZXIgVG91a2FicmkgOiBodHRwczovL2dpdGh1Yi5jb20vbmFkZXJpb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGFyVG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci10bicsIHtcbiAgICAgICAgbW9udGhzOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfYrNin2YbZgdmKX9mB2YrZgdix2Ypf2YXYp9ix2LNf2KPZgdix2YrZhF/Zhdin2Ypf2KzZiNin2YZf2KzZiNmK2YTZitipX9ij2YjYql/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgICAgICBNTTogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHk6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyVG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXplcmJhaWphbmkgW2F6XVxuLy8hIGF1dGhvciA6IHRvcGNoaXlldiA6IGh0dHBzOi8vZ2l0aHViLmNvbS90b3BjaGl5ZXZcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMTogJy1pbmNpJyxcbiAgICAgICAgNTogJy1pbmNpJyxcbiAgICAgICAgODogJy1pbmNpJyxcbiAgICAgICAgNzA6ICctaW5jaScsXG4gICAgICAgIDgwOiAnLWluY2knLFxuICAgICAgICAyOiAnLW5jaScsXG4gICAgICAgIDc6ICctbmNpJyxcbiAgICAgICAgMjA6ICctbmNpJyxcbiAgICAgICAgNTA6ICctbmNpJyxcbiAgICAgICAgMzogJy3DvG5jw7wnLFxuICAgICAgICA0OiAnLcO8bmPDvCcsXG4gICAgICAgIDEwMDogJy3DvG5jw7wnLFxuICAgICAgICA2OiAnLW5jxLEnLFxuICAgICAgICA5OiAnLXVuY3UnLFxuICAgICAgICAxMDogJy11bmN1JyxcbiAgICAgICAgMzA6ICctdW5jdScsXG4gICAgICAgIDYwOiAnLcSxbmPEsScsXG4gICAgICAgIDkwOiAnLcSxbmPEsScsXG4gICAgfTtcblxuICAgIHZhciBheiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2F6Jywge1xuICAgICAgICBtb250aHM6ICd5YW52YXJfZmV2cmFsX21hcnRfYXByZWxfbWF5X2l5dW5faXl1bF9hdnF1c3Rfc2VudHlhYnJfb2t0eWFicl9ub3lhYnJfZGVrYWJyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ3lhbl9mZXZfbWFyX2Fwcl9tYXlfaXluX2l5bF9hdnFfc2VuX29rdF9ub3lfZGVrJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdCYXphcl9CYXphciBlcnTJmXNpX8OHyZlyxZ/JmW5iyZkgYXjFn2FtxLFfw4fJmXLFn8mZbmLJmV9Dw7xtyZkgYXjFn2FtxLFfQ8O8bcmZX8WeyZluYsmZJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdCYXpfQnpFX8OHQXhfw4fJmXJfQ0F4X0PDvG1fxZ7JmW4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnQnpfQkVfw4dBX8OHyZlfQ0FfQ8O8X8WeyZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tidWfDvG4gc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzYWJhaCBzYWF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tnyZlsyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZMO8bsmZbl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdba2XDp8mZbiBoyZlmdMmZXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIHNvbnJhJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDJmXZ2yZlsJyxcbiAgICAgICAgICAgIHM6ICdiaXIgbmXDp8mZIHNhbml5yZknLFxuICAgICAgICAgICAgc3M6ICclZCBzYW5pecmZJyxcbiAgICAgICAgICAgIG06ICdiaXIgZMmZcWlxyZknLFxuICAgICAgICAgICAgbW06ICclZCBkyZlxaXHJmScsXG4gICAgICAgICAgICBoOiAnYmlyIHNhYXQnLFxuICAgICAgICAgICAgaGg6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIGQ6ICdiaXIgZ8O8bicsXG4gICAgICAgICAgICBkZDogJyVkIGfDvG4nLFxuICAgICAgICAgICAgTTogJ2JpciBheScsXG4gICAgICAgICAgICBNTTogJyVkIGF5JyxcbiAgICAgICAgICAgIHk6ICdiaXIgaWwnLFxuICAgICAgICAgICAgeXk6ICclZCBpbCcsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9nZWPJmXxzyZloyZlyfGfDvG5kw7x6fGF4xZ9hbS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKGfDvG5kw7x6fGF4xZ9hbSkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZ2VjyZknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3PJmWjJmXInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2fDvG5kw7x6JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdheMWfYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKMSxbmPEsXxpbmNpfG5jaXzDvG5jw7x8bmPEsXx1bmN1KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIHplcm9cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3EsW5jxLEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBiID0gKG51bWJlciAlIDEwMCkgLSBhLFxuICAgICAgICAgICAgICAgIGMgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0gfHwgc3VmZml4ZXNbY10pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXo7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQmVsYXJ1c2lhbiBbYmVdXG4vLyEgYXV0aG9yIDogRG1pdHJ5IERlbWlkb3YgOiBodHRwczovL2dpdGh1Yi5jb20vZGVtaWRvdjkxXG4vLyEgYXV0aG9yOiBQcmFsZXNrYTogaHR0cDovL3ByYWxlc2thLnByby9cbi8vISBBdXRob3IgOiBNZW5lbGlvbiBFbGVuc8O6bGUgOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgICAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExXG4gICAgICAgICAgICA/IGZvcm1zWzBdXG4gICAgICAgICAgICA6IG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKVxuICAgICAgICAgICAgICA/IGZvcm1zWzFdXG4gICAgICAgICAgICAgIDogZm9ybXNbMl07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHNzOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG1tOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLRltC70ZbQvdCwX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScgOiAn0YXQstGW0LvRltC90YNf0YXQstGW0LvRltC90Ytf0YXQstGW0LvRltC9JyxcbiAgICAgICAgICAgIGhoOiB3aXRob3V0U3VmZml4ID8gJ9Cz0LDQtNC30ZbQvdCwX9Cz0LDQtNC30ZbQvdGLX9Cz0LDQtNC30ZbQvScgOiAn0LPQsNC00LfRltC90YNf0LPQsNC00LfRltC90Ytf0LPQsNC00LfRltC9JyxcbiAgICAgICAgICAgIGRkOiAn0LTQt9C10L3RjF/QtNC90ZZf0LTQt9GR0L0nLFxuICAgICAgICAgICAgTU06ICfQvNC10YHRj9GGX9C80LXRgdGP0YbRi1/QvNC10YHRj9GG0LDRnicsXG4gICAgICAgICAgICB5eTogJ9Cz0L7QtF/Qs9Cw0LTRi1/Qs9Cw0LTQvtGeJyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdCy0ZbQu9GW0L3QsCcgOiAn0YXQstGW0LvRltC90YMnO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2gnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQs9Cw0LTQt9GW0L3QsCcgOiAn0LPQsNC00LfRltC90YMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYmUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdiZScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfRgdGC0YPQtNC30LXQvdGPX9C70Y7RgtCw0LPQsF/RgdCw0LrQsNCy0ZbQutCwX9C60YDQsNGB0LDQstGW0LrQsF/RgtGA0LDRntC90Y9f0YfRjdGA0LLQtdC90Y9f0LvRltC/0LXQvdGPX9C20L3RltGe0L3Rj1/QstC10YDQsNGB0L3Rj1/QutCw0YHRgtGA0YvRh9C90ZbQutCwX9C70ZbRgdGC0LDQv9Cw0LTQsF/RgdC90LXQttC90Y8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9GB0YLRg9C00LfQtdC90Yxf0LvRjtGC0Ytf0YHQsNC60LDQstGW0Lpf0LrRgNCw0YHQsNCy0ZbQul/RgtGA0LDQstC10L3RjF/Rh9GN0YDQstC10L3RjF/Qu9GW0L/QtdC90Yxf0LbQvdGW0LLQtdC90Yxf0LLQtdGA0LDRgdC10L3RjF/QutCw0YHRgtGA0YvRh9C90ZbQul/Qu9GW0YHRgtCw0L/QsNC0X9GB0L3QtdC20LDQvdGMJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn0YHRgtGD0LRf0LvRjtGCX9GB0LDQul/QutGA0LDRgV/RgtGA0LDQsl/Rh9GN0YDQsl/Qu9GW0L9f0LbQvdGW0LJf0LLQtdGAX9C60LDRgdGCX9C70ZbRgdGCX9GB0L3QtdC2Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0L3Rj9C00LfQtdC70Y5f0L/QsNC90Y/QtNC30LXQu9Cw0Lpf0LDRntGC0L7RgNCw0Lpf0YHQtdGA0LDQtNGDX9GH0LDRhtCy0LXRgF/Qv9GP0YLQvdGW0YbRg1/RgdGD0LHQvtGC0YMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9C90Y/QtNC30LXQu9GPX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTQsF/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0LBf0YHRg9Cx0L7RgtCwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvXFxbID9b0KPRg9GeXSA/KD860LzRltC90YPQu9GD0Y580L3QsNGB0YLRg9C/0L3Rg9GOKT8gP1xcXSA/ZGRkZC8sXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQvdC0X9C/0L1f0LDRgl/RgdGAX9GH0YZf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9C90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVkg0LMuJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZINCzLiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZINCzLiwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQodGR0L3QvdGPINGeXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9CX0LDRntGC0YDQsCDRnl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQo9GH0L7RgNCwINGeXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW9CjXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRg9GOXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0KMg0LzRltC90YPQu9GLXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9C/0YDQsNC3ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDRgtCw0LzRgycsXG4gICAgICAgICAgICBzOiAn0L3QtdC60LDQu9GM0LrRliDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZDogJ9C00LfQtdC90YwnLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNOiAn0LzQtdGB0Y/RhicsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHk6ICfQs9C+0LQnLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRi3zRgNCw0L3RltGG0Yt80LTQvdGPfNCy0LXRh9Cw0YDQsC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNC00L3Rj3zQstC10YfQsNGA0LApJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C90L7Rh9GLJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgNCw0L3RltGG0YsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0LDRgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRlnzRi3zQs9CwKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG51bWJlciAlIDEwID09PSAyIHx8IG51bWJlciAlIDEwID09PSAzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyICUgMTAwICE9PSAxMiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyICUgMTAwICE9PSAxM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBudW1iZXIgKyAnLdGWJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBudW1iZXIgKyAnLdGLJztcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQsCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJ1bGdhcmlhbiBbYmddXG4vLyEgYXV0aG9yIDogS3Jhc2VuIEJvcmlzb3YgOiBodHRwczovL2dpdGh1Yi5jb20va3JhelxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGJnID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYmcnLCB7XG4gICAgICAgIG1vbnRoczogJ9GP0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNC5X9GO0L3QuF/RjtC70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0Y/QvdGDX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/RjtC90Lhf0Y7Qu9C4X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn0L3QtdC00LXQu9GPX9C/0L7QvdC10LTQtdC70L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDRj9C00LBf0YfQtdGC0LLRitGA0YLRitC6X9C/0LXRgtGK0Lpf0YHRitCx0L7RgtCwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0L3QtdC0X9C/0L7QvV/QstGC0L5f0YHRgNGPX9GH0LXRgl/Qv9C10YJf0YHRitCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9CU0L3QtdGBINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Cj0YLRgNC1INCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9CyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9CS0YfQtdGA0LAg0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQnNC40L3QsNC70LDRgtCwXSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQnNC40L3QsNC70LjRj10gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfRgdC70LXQtCAlcycsXG4gICAgICAgICAgICBwYXN0OiAn0L/RgNC10LTQuCAlcycsXG4gICAgICAgICAgICBzOiAn0L3Rj9C60L7Qu9C60L4g0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3M6ICclZCDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBtOiAn0LzQuNC90YPRgtCwJyxcbiAgICAgICAgICAgIG1tOiAnJWQg0LzQuNC90YPRgtC4JyxcbiAgICAgICAgICAgIGg6ICfRh9Cw0YEnLFxuICAgICAgICAgICAgaGg6ICclZCDRh9Cw0YHQsCcsXG4gICAgICAgICAgICBkOiAn0LTQtdC9JyxcbiAgICAgICAgICAgIGRkOiAnJWQg0LTQtdC90LAnLFxuICAgICAgICAgICAgdzogJ9GB0LXQtNC80LjRhtCwJyxcbiAgICAgICAgICAgIHd3OiAnJWQg0YHQtdC00LzQuNGG0LgnLFxuICAgICAgICAgICAgTTogJ9C80LXRgdC10YYnLFxuICAgICAgICAgICAgTU06ICclZCDQvNC10YHQtdGG0LAnLFxuICAgICAgICAgICAgeTogJ9Cz0L7QtNC40L3QsCcsXG4gICAgICAgICAgICB5eTogJyVkINCz0L7QtNC40L3QuCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGxhc3REaWdpdCA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGxhc3QyRGlnaXRzID0gbnVtYmVyICUgMTAwO1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10LInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10L0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA+IDEwICYmIGxhc3QyRGlnaXRzIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGA0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDcgfHwgbGFzdERpZ2l0ID09PSA4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LzQuCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmc7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQmFtYmFyYSBbYm1dXG4vLyEgYXV0aG9yIDogRXN0ZWxsZSBDb21tZW50IDogaHR0cHM6Ly9naXRodWIuY29tL2VzdGVsbGVjb21tZW50XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYm0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibScsIHtcbiAgICAgICAgbW9udGhzOiAnWmFud3V5ZWthbG9fRmV3dXJ1eWVrYWxvX01hcmlzaWthbG9fQXdpcmlsaWthbG9fTcmba2Fsb19adXfJm25rYWxvX1p1bHV5ZWthbG9fVXRpa2Fsb19TyZt0YW5idXJ1a2Fsb1/JlGt1dMmUYnVydWthbG9fTm93YW5idXJ1a2Fsb19EZXNhbmJ1cnVrYWxvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ1phbl9GZXdfTWFyX0F3aV9NyZtfWnV3X1p1bF9VdGlfU8mbdF/JlGt1X05vd19EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnS2FyaV9OdMmbbsmbbl9UYXJhdGFfQXJhYmFfQWxhbWlzYV9KdW1hX1NpYmlyaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0thcl9OdMmbX1Rhcl9BcmFfQWxhX0p1bV9TaWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnS2FfTnRfVGFfQXJfQWxfSnVfU2knLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ01NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWSBbbMmbcsmbXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVkgW2zJm3LJm10gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tCaSBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbU2luaSBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbZG9uIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tLdW51IGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt0yZttyZtuZW4gbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIGvJlG7JlCcsXG4gICAgICAgICAgICBwYXN0OiAnYSBiyZsgJXMgYsmUJyxcbiAgICAgICAgICAgIHM6ICdzYW5nYSBkYW1hIGRhbWEnLFxuICAgICAgICAgICAgc3M6ICdzZWtvbmRpICVkJyxcbiAgICAgICAgICAgIG06ICdtaW5pdGkga2VsZW4nLFxuICAgICAgICAgICAgbW06ICdtaW5pdGkgJWQnLFxuICAgICAgICAgICAgaDogJ2zJm3LJmyBrZWxlbicsXG4gICAgICAgICAgICBoaDogJ2zJm3LJmyAlZCcsXG4gICAgICAgICAgICBkOiAndGlsZSBrZWxlbicsXG4gICAgICAgICAgICBkZDogJ3RpbGUgJWQnLFxuICAgICAgICAgICAgTTogJ2thbG8ga2VsZW4nLFxuICAgICAgICAgICAgTU06ICdrYWxvICVkJyxcbiAgICAgICAgICAgIHk6ICdzYW4ga2VsZW4nLFxuICAgICAgICAgICAgeXk6ICdzYW4gJWQnLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQmVuZ2FsaSBbYm5dXG4vLyEgYXV0aG9yIDogS2F1c2hpayBHYW5kaGkgOiBodHRwczovL2dpdGh1Yi5jb20va2F1c2hpa2dhbmRoaVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgp6cnLFxuICAgICAgICAgICAgMjogJ+CnqCcsXG4gICAgICAgICAgICAzOiAn4KepJyxcbiAgICAgICAgICAgIDQ6ICfgp6onLFxuICAgICAgICAgICAgNTogJ+CnqycsXG4gICAgICAgICAgICA2OiAn4KesJyxcbiAgICAgICAgICAgIDc6ICfgp60nLFxuICAgICAgICAgICAgODogJ+CnricsXG4gICAgICAgICAgICA5OiAn4KevJyxcbiAgICAgICAgICAgIDA6ICfgp6YnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KenJzogJzEnLFxuICAgICAgICAgICAgJ+CnqCc6ICcyJyxcbiAgICAgICAgICAgICfgp6knOiAnMycsXG4gICAgICAgICAgICAn4KeqJzogJzQnLFxuICAgICAgICAgICAgJ+Cnqyc6ICc1JyxcbiAgICAgICAgICAgICfgp6wnOiAnNicsXG4gICAgICAgICAgICAn4KetJzogJzcnLFxuICAgICAgICAgICAgJ+Cnric6ICc4JyxcbiAgICAgICAgICAgICfgp68nOiAnOScsXG4gICAgICAgICAgICAn4KemJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGJuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm4nLCB7XG4gICAgICAgIG1vbnRoczogJ+CmnOCmvuCmqOCngeCnn+CmvuCmsOCmv1/gpqvgp4fgpqzgp43gprDgp4Hgp5/gpr7gprDgpr9f4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4Kaf4KeH4Kau4KeN4Kas4KawX+CmheCmleCnjeCmn+Cni+CmrOCmsF/gpqjgpq3gp4fgpq7gp43gpqzgprBf4Kah4Ka/4Ka44KeH4Kau4KeN4Kas4KawJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgppzgpr7gpqjgp4Ff4Kar4KeH4Kas4KeN4Kaw4KeBX+CmruCmvuCmsOCnjeCmml/gpo/gpqrgp43gprDgpr/gprJf4Kau4KeHX+CmnOCngeCmqF/gppzgp4HgprLgpr7gpodf4KaG4KaX4Ka44KeN4KafX+CmuOCnh+CmquCnjeCmn1/gpoXgppXgp43gpp/gp4tf4Kao4Kat4KeHX+CmoeCmv+CmuOCnhycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+CmsOCmrOCmv+CmrOCmvuCmsF/gprjgp4vgpq7gpqzgpr7gprBf4Kau4KaZ4KeN4KaX4Kay4Kas4Ka+4KawX+CmrOCngeCmp+CmrOCmvuCmsF/gpqzgp4Pgprngprjgp43gpqrgpqTgpr/gpqzgpr7gprBf4Ka24KeB4KaV4KeN4Kaw4Kas4Ka+4KawX+CmtuCmqOCmv+CmrOCmvuCmsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaX4KayX+CmrOCngeCmp1/gpqzgp4Pgprngprjgp43gpqrgpqTgpr9f4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml+Cmsl/gpqzgp4Hgpqdf4Kas4KeD4Ka5X+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgprjgpq7gp58nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CmhuCmnF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpobgppfgpr7gpq7gp4DgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgppfgpqTgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+Cml+CmpF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgpqrgprDgp4cnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCmhuCml+CnhycsXG4gICAgICAgICAgICBzOiAn4KaV4Kef4KeH4KaVIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBzczogJyVkIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBtOiAn4KaP4KaVIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBtbTogJyVkIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBoOiAn4KaP4KaVIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBoaDogJyVkIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBkOiAn4KaP4KaVIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBkZDogJyVkIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBNOiAn4KaP4KaVIOCmruCmvuCmuCcsXG4gICAgICAgICAgICBNTTogJyVkIOCmruCmvuCmuCcsXG4gICAgICAgICAgICB5OiAn4KaP4KaVIOCmrOCmm+CmsCcsXG4gICAgICAgICAgICB5eTogJyVkIOCmrOCmm+CmsCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgp6fgp6jgp6ngp6rgp6vgp6zgp63gp67gp6/gp6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gprDgpr7gpqR84Ka44KaV4Ka+4KayfOCmpuCngeCmquCngeCmsHzgpqzgpr/gppXgpr7gprJ84Kaw4Ka+4KakLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+CmsOCmvuCmpCcgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+CmpuCngeCmquCngeCmsCcgJiYgaG91ciA8IDUpIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpqzgpr/gppXgpr7gprInXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprjgppXgpr7gprInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmpuCngeCmquCngeCmsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kas4Ka/4KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQmVuZ2FsaSAoQmFuZ2xhZGVzaCkgW2JuLWJkXVxuLy8hIGF1dGhvciA6IEFzcmFmIEhvc3NhaW4gUGF0b2FyeSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hc2h3b29sZm9yZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgp6cnLFxuICAgICAgICAgICAgMjogJ+CnqCcsXG4gICAgICAgICAgICAzOiAn4KepJyxcbiAgICAgICAgICAgIDQ6ICfgp6onLFxuICAgICAgICAgICAgNTogJ+CnqycsXG4gICAgICAgICAgICA2OiAn4KesJyxcbiAgICAgICAgICAgIDc6ICfgp60nLFxuICAgICAgICAgICAgODogJ+CnricsXG4gICAgICAgICAgICA5OiAn4KevJyxcbiAgICAgICAgICAgIDA6ICfgp6YnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KenJzogJzEnLFxuICAgICAgICAgICAgJ+CnqCc6ICcyJyxcbiAgICAgICAgICAgICfgp6knOiAnMycsXG4gICAgICAgICAgICAn4KeqJzogJzQnLFxuICAgICAgICAgICAgJ+Cnqyc6ICc1JyxcbiAgICAgICAgICAgICfgp6wnOiAnNicsXG4gICAgICAgICAgICAn4KetJzogJzcnLFxuICAgICAgICAgICAgJ+Cnric6ICc4JyxcbiAgICAgICAgICAgICfgp68nOiAnOScsXG4gICAgICAgICAgICAn4KemJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGJuQmQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibi1iZCcsIHtcbiAgICAgICAgbW9udGhzOiAn4Kac4Ka+4Kao4KeB4Kef4Ka+4Kaw4Ka/X+Cmq+Cnh+CmrOCnjeCmsOCngeCnn+CmvuCmsOCmv1/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4Kaw4Ka/4KayX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4Kay4Ka+4KaHX+CmhuCml+CmuOCnjeCmn1/gprjgp4fgpqrgp43gpp/gp4fgpq7gp43gpqzgprBf4KaF4KaV4KeN4Kaf4KeL4Kas4KawX+CmqOCmreCnh+CmruCnjeCmrOCmsF/gpqHgpr/gprjgp4fgpq7gp43gpqzgprAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CmnOCmvuCmqOCngV/gpqvgp4fgpqzgp43gprDgp4Ff4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4KafX+CmheCmleCnjeCmn+Cni1/gpqjgpq3gp4df4Kah4Ka/4Ka44KeHJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn4Kaw4Kas4Ka/4Kas4Ka+4KawX+CmuOCni+CmruCmrOCmvuCmsF/gpq7gppngp43gppfgprLgpqzgpr7gprBf4Kas4KeB4Kan4Kas4Ka+4KawX+CmrOCng+CmueCmuOCnjeCmquCmpOCmv+CmrOCmvuCmsF/gprbgp4HgppXgp43gprDgpqzgpr7gprBf4Ka24Kao4Ka/4Kas4Ka+4KawJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4Kaw4Kas4Ka/X+CmuOCni+Cmrl/gpq7gppngp43gppfgprJf4Kas4KeB4KanX+CmrOCng+CmueCmuOCnjeCmquCmpOCmv1/gprbgp4HgppXgp43gprBf4Ka24Kao4Ka/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaX4KayX+CmrOCngeCmp1/gpqzgp4Pgprlf4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4Ka44Kau4KefJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KaG4KacXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CmhuCml+CmvuCmruCngOCmleCmvuCmsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+Cml+CmpOCmleCmvuCmsl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KaX4KakXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCmquCmsOCnhycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4KaG4KaX4KeHJyxcbiAgICAgICAgICAgIHM6ICfgppXgp5/gp4fgppUg4Ka44KeH4KaV4KeH4Kao4KeN4KahJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Ka44KeH4KaV4KeH4Kao4KeN4KahJyxcbiAgICAgICAgICAgIG06ICfgpo/gppUg4Kau4Ka/4Kao4Ka/4KafJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Kau4Ka/4Kao4Ka/4KafJyxcbiAgICAgICAgICAgIGg6ICfgpo/gppUg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgICAgIGQ6ICfgpo/gppUg4Kam4Ka/4KaoJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Kam4Ka/4KaoJyxcbiAgICAgICAgICAgIE06ICfgpo/gppUg4Kau4Ka+4Ka4JyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Kau4Ka+4Ka4JyxcbiAgICAgICAgICAgIHk6ICfgpo/gppUg4Kas4Kab4KawJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Kas4Kab4KawJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cnp+CnqOCnqeCnquCnq+CnrOCnreCnruCnr+Cnpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Kaw4Ka+4KakfOCmreCni+CmsHzgprjgppXgpr7gprJ84Kam4KeB4Kaq4KeB4KawfOCmrOCmv+CmleCmvuCmsnzgprjgpqjgp43gpqfgp43gpq/gpr584Kaw4Ka+4KakLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4Kaw4Ka+4KakJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kat4KeL4KawJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CmuOCmleCmvuCmsicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpqbgp4Hgpqrgp4HgprAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMyA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kas4Ka/4KaV4Ka+4KayJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ka44Kao4KeN4Kan4KeN4Kav4Ka+Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmreCni+CmsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ka44KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpqbgp4Hgpqrgp4HgprAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmrOCmv+CmleCmvuCmsic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ka44Kao4KeN4Kan4KeN4Kav4Ka+JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm5CZDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUaWJldGFuIFtib11cbi8vISBhdXRob3IgOiBUaHVwdGVuIE4uIENoYWtyaXNoYXIgOiBodHRwczovL2dpdGh1Yi5jb20vdmFqcmFkb2dcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4LyhJyxcbiAgICAgICAgICAgIDI6ICfgvKInLFxuICAgICAgICAgICAgMzogJ+C8oycsXG4gICAgICAgICAgICA0OiAn4LykJyxcbiAgICAgICAgICAgIDU6ICfgvKUnLFxuICAgICAgICAgICAgNjogJ+C8picsXG4gICAgICAgICAgICA3OiAn4LynJyxcbiAgICAgICAgICAgIDg6ICfgvKgnLFxuICAgICAgICAgICAgOTogJ+C8qScsXG4gICAgICAgICAgICAwOiAn4LygJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+C8oSc6ICcxJyxcbiAgICAgICAgICAgICfgvKInOiAnMicsXG4gICAgICAgICAgICAn4LyjJzogJzMnLFxuICAgICAgICAgICAgJ+C8pCc6ICc0JyxcbiAgICAgICAgICAgICfgvKUnOiAnNScsXG4gICAgICAgICAgICAn4LymJzogJzYnLFxuICAgICAgICAgICAgJ+C8pyc6ICc3JyxcbiAgICAgICAgICAgICfgvKgnOiAnOCcsXG4gICAgICAgICAgICAn4LypJzogJzknLFxuICAgICAgICAgICAgJ+C8oCc6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBibyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JvJywge1xuICAgICAgICBtb250aHM6ICfgvZ/gvrPgvIvgvZbgvIvgvZHgvYTgvIvgvZTgvbxf4L2f4L6z4LyL4L2W4LyL4L2C4L2J4L2y4L2m4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9guC9puC9tOC9mOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvZ7gvbLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2j4L6U4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9keC+suC9tOC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvZHgvbTgvZPgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2i4L6S4L6x4L2R4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9keC9guC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2F4L2y4L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9ieC9suC9puC8i+C9lCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4L2f4L6z4LyLMV/gvZ/gvrPgvIsyX+C9n+C+s+C8izNf4L2f4L6z4LyLNF/gvZ/gvrPgvIs1X+C9n+C+s+C8izZf4L2f4L6z4LyLN1/gvZ/gvrPgvIs4X+C9n+C+s+C8izlf4L2f4L6z4LyLMTBf4L2f4L6z4LyLMTFf4L2f4L6z4LyLMTInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogL14o4L2f4L6z4LyLXFxkezEsMn0pLyxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn4L2C4L2f4L2g4LyL4L2J4L2y4LyL4L2Y4LyLX+C9guC9n+C9oOC8i+C9n+C+s+C8i+C9luC8i1/gvYLgvZ/gvaDgvIvgvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2C4L2f4L2g4LyL4L2j4L634L2C4LyL4L2U4LyLX+C9guC9n+C9oOC8i+C9leC9tOC9ouC8i+C9luC9tF/gvYLgvZ/gvaDgvIvgvZTgvIvgvabgvYTgvabgvItf4L2C4L2f4L2g4LyL4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgvYngvbLgvIvgvZjgvItf4L2f4L6z4LyL4L2W4LyLX+C9mOC9suC9guC8i+C9keC9mOC9ouC8i1/gvaPgvrfgvYLgvIvgvZTgvItf4L2V4L204L2i4LyL4L2W4L20X+C9lOC8i+C9puC9hOC9puC8i1/gvabgvqTgvbrgvZPgvIvgvZTgvIsnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4L2J4L2yX+C9n+C+s1/gvZjgvbLgvYJf4L2j4L634L2CX+C9leC9tOC9ol/gvabgvYTgvaZf4L2m4L6k4L264L2TJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+C9keC9suC8i+C9ouC9suC9hF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgvabgvYTgvIvgvYngvbLgvZNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9ouC+l+C9uuC9puC8i+C9mF0sIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4L2B4LyL4L2m4L2EXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgvZbgvZHgvbTgvZPgvIvgvZXgvrLgvYLgvIvgvZjgvZDgvaDgvIvgvZhdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4L2j4LyLJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgvabgvpTgvZPgvIvgvaMnLFxuICAgICAgICAgICAgczogJ+C9o+C9mOC8i+C9puC9hCcsXG4gICAgICAgICAgICBzczogJyVkIOC9puC+kOC9ouC8i+C9huC8jScsXG4gICAgICAgICAgICBtOiAn4L2m4L6Q4L2i4LyL4L2Y4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4L2m4L6Q4L2i4LyL4L2YJyxcbiAgICAgICAgICAgIGg6ICfgvYbgvbTgvIvgvZrgvbzgvZHgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgaGg6ICclZCDgvYbgvbTgvIvgvZrgvbzgvZEnLFxuICAgICAgICAgICAgZDogJ+C9ieC9suC9k+C8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBkZDogJyVkIOC9ieC9suC9k+C8iycsXG4gICAgICAgICAgICBNOiAn4L2f4L6z4LyL4L2W4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4L2f4L6z4LyL4L2WJyxcbiAgICAgICAgICAgIHk6ICfgvaPgvbzgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgeXk6ICclZCDgvaPgvbwnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Lyh4Lyi4Lyj4Lyk4Lyl4Lym4Lyn4Lyo4Lyp4LygXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4L2Y4L2a4L2T4LyL4L2Y4L28fOC9nuC9vOC9guC9puC8i+C9gOC9pnzgvYngvbLgvZPgvIvgvYLgvbTgvYR84L2R4L2C4L284L2E4LyL4L2R4L2CfOC9mOC9muC9k+C8i+C9mOC9vC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgvZjgvZrgvZPgvIvgvZjgvbwnICYmIGhvdXIgPj0gNCkgfHxcbiAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgvYngvbLgvZPgvIvgvYLgvbTgvYQnICYmIGhvdXIgPCA1KSB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4L2R4L2C4L284L2E4LyL4L2R4L2CJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9mOC9muC9k+C8i+C9mOC9vCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2e4L284L2C4L2m4LyL4L2A4L2mJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvYngvbLgvZPgvIvgvYLgvbTgvYQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9keC9guC9vOC9hOC8i+C9keC9gic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2Y4L2a4L2T4LyL4L2Y4L28JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJyZXRvbiBbYnJdXG4vLyEgYXV0aG9yIDogSmVhbi1CYXB0aXN0ZSBMZSBEdWlnb3UgOiBodHRwczovL2dpdGh1Yi5jb20vamJsZWR1aWdvdVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBtbTogJ211bnV0ZW5uJyxcbiAgICAgICAgICAgIE1NOiAnbWl6JyxcbiAgICAgICAgICAgIGRkOiAnZGV2ZXpoJyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIG11dGF0aW9uKGZvcm1hdFtrZXldLCBudW1iZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzcGVjaWFsTXV0YXRpb25Gb3JZZWFycyhudW1iZXIpIHtcbiAgICAgICAgc3dpdGNoIChsYXN0TnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyBibG9heic7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIHZsb2F6JztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBsYXN0TnVtYmVyKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID4gOSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3ROdW1iZXIobnVtYmVyICUgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG11dGF0aW9uKHRleHQsIG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gc29mdE11dGF0aW9uKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzb2Z0TXV0YXRpb24odGV4dCkge1xuICAgICAgICB2YXIgbXV0YXRpb25UYWJsZSA9IHtcbiAgICAgICAgICAgIG06ICd2JyxcbiAgICAgICAgICAgIGI6ICd2JyxcbiAgICAgICAgICAgIGQ6ICd6JyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG11dGF0aW9uVGFibGVbdGV4dC5jaGFyQXQoMCldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtdXRhdGlvblRhYmxlW3RleHQuY2hhckF0KDApXSArIHRleHQuc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIHZhciBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZ2VuL2ksXG4gICAgICAgICAgICAvXmNbyrxcXCddaHdlL2ksXG4gICAgICAgICAgICAvXm1ldS9pLFxuICAgICAgICAgICAgL15lYnIvaSxcbiAgICAgICAgICAgIC9ebWFlL2ksXG4gICAgICAgICAgICAvXihtZXp8ZXZlKS9pLFxuICAgICAgICAgICAgL15nb3UvaSxcbiAgICAgICAgICAgIC9eZW9zL2ksXG4gICAgICAgICAgICAvXmd3ZS9pLFxuICAgICAgICAgICAgL15oZXIvaSxcbiAgICAgICAgICAgIC9eZHUvaSxcbiAgICAgICAgICAgIC9ea2VyL2ksXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKGdlbnZlcnxjW8q8XFwnXWh3ZXZyZXJ8bWV1cnpofGVicmVsfG1hZXxtZXpoZXZlbnxnb3VlcmV8ZW9zdHxnd2VuZ29sb3xoZXJlfGR1fGtlcnp1fGdlbnxjW8q8XFwnXWh3ZXxtZXV8ZWJyfG1hZXxldmV8Z291fGVvc3xnd2V8aGVyfGR1fGtlcikvaSxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXggPVxuICAgICAgICAgICAgL14oZ2VudmVyfGNbyrxcXCddaHdldnJlcnxtZXVyemh8ZWJyZWx8bWFlfG1lemhldmVufGdvdWVyZXxlb3N0fGd3ZW5nb2xvfGhlcmV8ZHV8a2VyenUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXggPVxuICAgICAgICAgICAgL14oZ2VufGNbyrxcXCddaHdlfG1ldXxlYnJ8bWFlfGV2ZXxnb3V8ZW9zfGd3ZXxoZXJ8ZHV8a2VyKS9pLFxuICAgICAgICBmdWxsV2Vla2RheXNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9ec3VsL2ksXG4gICAgICAgICAgICAvXmx1bi9pLFxuICAgICAgICAgICAgL15tZXVyemgvaSxcbiAgICAgICAgICAgIC9ebWVyY1vKvFxcJ11oZXIvaSxcbiAgICAgICAgICAgIC9eeWFvdS9pLFxuICAgICAgICAgICAgL15nd2VuZXIvaSxcbiAgICAgICAgICAgIC9ec2Fkb3JuL2ksXG4gICAgICAgIF0sXG4gICAgICAgIHNob3J0V2Vla2RheXNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eU3VsL2ksXG4gICAgICAgICAgICAvXkx1bi9pLFxuICAgICAgICAgICAgL15NZXUvaSxcbiAgICAgICAgICAgIC9eTWVyL2ksXG4gICAgICAgICAgICAvXllhby9pLFxuICAgICAgICAgICAgL15Hd2UvaSxcbiAgICAgICAgICAgIC9eU2FkL2ksXG4gICAgICAgIF0sXG4gICAgICAgIG1pbldlZWtkYXlzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXlN1L2ksXG4gICAgICAgICAgICAvXkx1L2ksXG4gICAgICAgICAgICAvXk1lKFtecl18JCkvaSxcbiAgICAgICAgICAgIC9eTWVyL2ksXG4gICAgICAgICAgICAvXllhL2ksXG4gICAgICAgICAgICAvXkd3L2ksXG4gICAgICAgICAgICAvXlNhL2ksXG4gICAgICAgIF07XG5cbiAgICB2YXIgYnIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdicicsIHtcbiAgICAgICAgbW9udGhzOiAnR2VudmVyX0PKvGh3ZXZyZXJfTWV1cnpoX0VicmVsX01hZV9NZXpoZXZlbl9Hb3VlcmVfRW9zdF9Hd2VuZ29sb19IZXJlX0R1X0tlcnp1Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0dlbl9Dyrxod2VfTWV1X0Vicl9NYWVfRXZlX0dvdV9Fb3NfR3dlX0hlcl9EdV9LZXInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VsX0x1bl9NZXVyemhfTWVyY8q8aGVyX1lhb3VfR3dlbmVyX1NhZG9ybicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bF9MdW5fTWV1X01lcl9ZYW9fR3dlX1NhZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9MdV9NZV9NZXJfWWFfR3dfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2U6IG1pbldlZWtkYXlzUGFyc2UsXG4gICAgICAgIGZ1bGxXZWVrZGF5c1BhcnNlOiBmdWxsV2Vla2RheXNQYXJzZSxcbiAgICAgICAgc2hvcnRXZWVrZGF5c1BhcnNlOiBzaG9ydFdlZWtkYXlzUGFyc2UsXG4gICAgICAgIG1pbldlZWtkYXlzUGFyc2U6IG1pbldlZWtkYXlzUGFyc2UsXG5cbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IG1vbnRoc1N0cmljdFJlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiBtb250aHNTaG9ydFN0cmljdFJlZ2V4LFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbYSB2aXpdIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFthIHZpel0gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFthIHZpel0gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGl6aXYgZGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbV2FyY8q8aG9hemggZGFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbZGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbRGVjyrxoIGRhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3Bhc2V0IGRhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2EtYmVubiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgyrx6bycsXG4gICAgICAgICAgICBzOiAndW4gbmViZXVkIHNlZ29uZGVubm/DuScsXG4gICAgICAgICAgICBzczogJyVkIGVpbGVubicsXG4gICAgICAgICAgICBtOiAndXIgdnVudXRlbm4nLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbixcbiAgICAgICAgICAgIGg6ICd1biBldXInLFxuICAgICAgICAgICAgaGg6ICclZCBldXInLFxuICAgICAgICAgICAgZDogJ3VuIGRldmV6aCcsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICAgICAgTTogJ3VyIG1peicsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICAgICAgeTogJ3VyIGJsb2F6JyxcbiAgICAgICAgICAgIHl5OiBzcGVjaWFsTXV0YXRpb25Gb3JZZWFycyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGHDsXx2ZXQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IG51bWJlciA9PT0gMSA/ICdhw7EnIDogJ3ZldCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9hLm0ufGcubS4vLCAvLyBnb3VkZSBtZXJlbm4gfCBhLXJhb2sgbWVyZW5uXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuID09PSAnZy5tLic7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDEyID8gJ2EubS4nIDogJ2cubS4nO1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJvc25pYW4gW2JzXVxuLy8hIGF1dGhvciA6IE5lZGltIENob2xpY2ggOiBodHRwczovL2dpdGh1Yi5jb20vZnJvbnR5YXJkXG4vLyEgYXV0aG9yIDogUmFzaWQgUmVkemljIDogaHR0cHM6Ly9naXRodWIuY29tL3Jhc2lkcmVcbi8vISBiYXNlZCBvbiAoaHIpIHRyYW5zbGF0aW9uIGJ5IEJvamFuIE1hcmtvdmnEh1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4XG4gICAgICAgICAgICAgICAgICAgID8gJ2plZG5hIG1pbnV0YSdcbiAgICAgICAgICAgICAgICAgICAgOiBpc0Z1dHVyZVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2plZG51IG1pbnV0dSdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdqZWRuZSBtaW51dGUnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZGFuIHNhdCcgOiAnamVkYW4gc2F0JztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2RhbmEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWMnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBicyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JzJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGplbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JpamVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2p1xI1lciB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbHVdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsaV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmlqZSAlcycsXG4gICAgICAgICAgICBzOiAncGFyIHNla3VuZGknLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6ICdkYW4nLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06ICdtamVzZWMnLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBicztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDYXRhbGFuIFtjYV1cbi8vISBhdXRob3IgOiBKdWFuIEcuIEh1cnRhZG8gOiBodHRwczovL2dpdGh1Yi5jb20vanVhbmdodXJ0YWRvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgY2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjYScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICdnZW5lcl9mZWJyZXJfbWFyw6dfYWJyaWxfbWFpZ19qdW55X2p1bGlvbF9hZ29zdF9zZXRlbWJyZV9vY3R1YnJlX25vdmVtYnJlX2Rlc2VtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZvcm1hdDogXCJkZSBnZW5lcl9kZSBmZWJyZXJfZGUgbWFyw6dfZCdhYnJpbF9kZSBtYWlnX2RlIGp1bnlfZGUganVsaW9sX2QnYWdvc3RfZGUgc2V0ZW1icmVfZCdvY3R1YnJlX2RlIG5vdmVtYnJlX2RlIGRlc2VtYnJlXCIuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9EW29EXT8oXFxzKStNTU1NLyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnZ2VuLl9mZWJyLl9tYXLDp19hYnIuX21haWdfanVueV9qdWwuX2FnLl9zZXQuX29jdC5fbm92Ll9kZXMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ2RpdW1lbmdlX2RpbGx1bnNfZGltYXJ0c19kaW1lY3Jlc19kaWpvdXNfZGl2ZW5kcmVzX2Rpc3NhYnRlJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkZy5fZGwuX2R0Ll9kYy5fZGouX2R2Ll9kcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZGdfZGxfZHRfZGNfZGpfZHZfZHMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBsbDogJ0QgTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFtkZV0gWVlZWSBbYSBsZXNdIEg6bW0nLFxuICAgICAgICAgICAgbGxsOiAnRCBNTU0gWVlZWSwgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gW2RlXSBZWVlZIFthIGxlc10gSDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkIEQgTU1NIFlZWVksIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F2dWkgYSAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2RlbcOgIGEgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYWhpciBhICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbZWxdIGRkZGQgW3Bhc3NhdCBhICcgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpICE9PSAxID8gJ2xlcycgOiAnbGEnKSArXG4gICAgICAgICAgICAgICAgICAgICddIExUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IFwiZCdhcXXDrSAlc1wiLFxuICAgICAgICAgICAgcGFzdDogJ2ZhICVzJyxcbiAgICAgICAgICAgIHM6ICd1bnMgc2Vnb25zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vnb25zJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0cycsXG4gICAgICAgICAgICBoOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JlcycsXG4gICAgICAgICAgICBkOiAndW4gZGlhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGllcycsXG4gICAgICAgICAgICBNOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzb3MnLFxuICAgICAgICAgICAgeTogJ3VuIGFueScsXG4gICAgICAgICAgICB5eTogJyVkIGFueXMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0ocnxufHR8w6h8YSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPVxuICAgICAgICAgICAgICAgIG51bWJlciA9PT0gMVxuICAgICAgICAgICAgICAgICAgICA/ICdyJ1xuICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgID8gJ24nXG4gICAgICAgICAgICAgICAgICAgICAgOiBudW1iZXIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3InXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gNFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICd0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICfDqCc7XG4gICAgICAgICAgICBpZiAocGVyaW9kID09PSAndycgfHwgcGVyaW9kID09PSAnVycpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ3plY2ggW2NzXVxuLy8hIGF1dGhvciA6IHBldHJiZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL3BldHJiZWxhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID0ge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAnbGVkZW5fw7pub3JfYsWZZXplbl9kdWJlbl9rdsSbdGVuX8SNZXJ2ZW5fxI1lcnZlbmVjX3NycGVuX3rDocWZw61fxZnDrWplbl9saXN0b3BhZF9wcm9zaW5lYycuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6ICdsZWRuYV/Dum5vcmFfYsWZZXpuYV9kdWJuYV9rdsSbdG5hX8SNZXJ2bmFfxI1lcnZlbmNlX3NycG5hX3rDocWZw61fxZnDrWpuYV9saXN0b3BhZHVfcHJvc2luY2UnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvREQ/W28uXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA9ICdsZWRfw7pub19ixZllX2R1Yl9rdsSbX8SNdm5fxI12Y19zcnBfesOhxZlfxZnDrWpfbGlzX3Bybycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmxlZC9pLFxuICAgICAgICAgICAgL17Dum5vL2ksXG4gICAgICAgICAgICAvXmLFmWUvaSxcbiAgICAgICAgICAgIC9eZHViL2ksXG4gICAgICAgICAgICAvXmt2xJsvaSxcbiAgICAgICAgICAgIC9eKMSNdm58xI1lcnZlbiR8xI1lcnZuYSkvaSxcbiAgICAgICAgICAgIC9eKMSNdmN8xI1lcnZlbmVjfMSNZXJ2ZW5jZSkvaSxcbiAgICAgICAgICAgIC9ec3JwL2ksXG4gICAgICAgICAgICAvXnrDocWZL2ksXG4gICAgICAgICAgICAvXsWZw61qL2ksXG4gICAgICAgICAgICAvXmxpcy9pLFxuICAgICAgICAgICAgL15wcm8vaSxcbiAgICAgICAgXSxcbiAgICAgICAgLy8gTk9URTogJ8SNZXJ2ZW4nIGlzIHN1YnN0cmluZyBvZiAnxI1lcnZlbmVjJzsgdGhlcmVmb3JlICfEjWVydmVuZWMnIG11c3QgcHJlY2VkZSAnxI1lcnZlbicgaW4gdGhlIHJlZ2V4IHRvIGJlIGZ1bGx5IG1hdGNoZWQuXG4gICAgICAgIC8vIE90aGVyd2lzZSBwYXJzZXIgbWF0Y2hlcyAnMS4gxI1lcnZlbmVjJyBhcyAnMS4gxI1lcnZlbicgKyAnZWMnLlxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvXihsZWRlbnzDum5vcnxixZllemVufGR1YmVufGt2xJt0ZW58xI1lcnZlbmVjfMSNZXJ2ZW5jZXzEjWVydmVufMSNZXJ2bmF8c3JwZW58esOhxZnDrXzFmcOtamVufGxpc3RvcGFkfHByb3NpbmVjfGxlZHzDum5vfGLFmWV8ZHVifGt2xJt8xI12bnzEjXZjfHNycHx6w6HFmXzFmcOtanxsaXN8cHJvKS9pO1xuXG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPiAxICYmIG4gPCA1ICYmIH5+KG4gLyAxMCkgIT09IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOiAvLyBhIGZldyBzZWNvbmRzIC8gaW4gYSBmZXcgc2Vjb25kcyAvIGEgZmV3IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAncMOhciBzZWt1bmQnIDogJ3DDoXIgc2VrdW5kYW1pJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzogLy8gOSBzZWNvbmRzIC8gaW4gOSBzZWNvbmRzIC8gOSBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2VrdW5kJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdzZWt1bmRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ20nOiAvLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6IGlzRnV0dXJlID8gJ21pbnV0dScgOiAnbWludXRvdSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6IC8vIDkgbWludXRlcyAvIGluIDkgbWludXRlcyAvIDkgbWludXRlcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbnV0eScgOiAnbWludXQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21pbnV0YW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdoJzogLy8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2hvZGluYScgOiBpc0Z1dHVyZSA/ICdob2RpbnUnIDogJ2hvZGlub3UnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOiAvLyA5IGhvdXJzIC8gaW4gOSBob3VycyAvIDkgaG91cnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdob2RpbnknIDogJ2hvZGluJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdob2RpbmFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnZCc6IC8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkZW4nIDogJ2RuZW0nO1xuICAgICAgICAgICAgY2FzZSAnZGQnOiAvLyA5IGRheXMgLyBpbiA5IGRheXMgLyA5IGRheXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdkbnknIDogJ2Ruw60nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RueSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnTSc6IC8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtxJtzw61jJyA6ICdtxJtzw61jZW0nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOiAvLyA5IG1vbnRocyAvIGluIDkgbW9udGhzIC8gOSBtb250aHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtxJtzw61jZScgOiAnbcSbc8OtY8WvJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtxJtzw61jaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAneSc6IC8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdyb2snIDogJ3Jva2VtJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzogLy8gOSB5ZWFycyAvIGluIDkgeWVhcnMgLyA5IHllYXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAncm9reScgOiAnbGV0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdsZXR5JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY3MgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjcycsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgLy8gTk9URTogJ8SNZXJ2ZW4nIGlzIHN1YnN0cmluZyBvZiAnxI1lcnZlbmVjJzsgdGhlcmVmb3JlICfEjWVydmVuZWMnIG11c3QgcHJlY2VkZSAnxI1lcnZlbicgaW4gdGhlIHJlZ2V4IHRvIGJlIGZ1bGx5IG1hdGNoZWQuXG4gICAgICAgIC8vIE90aGVyd2lzZSBwYXJzZXIgbWF0Y2hlcyAnMS4gxI1lcnZlbmVjJyBhcyAnMS4gxI1lcnZlbicgKyAnZWMnLlxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGxlZGVufGxlZG5hfMO6bm9yYXzDum5vcnxixZllemVufGLFmWV6bmF8ZHViZW58ZHVibmF8a3bEm3RlbnxrdsSbdG5hfMSNZXJ2ZW5lY3zEjWVydmVuY2V8xI1lcnZlbnzEjWVydm5hfHNycGVufHNycG5hfHrDocWZw618xZnDrWplbnzFmcOtam5hfGxpc3RvcGFkdXxsaXN0b3BhZHxwcm9zaW5lY3xwcm9zaW5jZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGxlZHzDum5vfGLFmWV8ZHVifGt2xJt8xI12bnzEjXZjfHNycHx6w6HFmXzFmcOtanxsaXN8cHJvKS9pLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZMSbbGVfcG9uZMSbbMOtX8O6dGVyw71fc3TFmWVkYV/EjXR2cnRla19ww6F0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVfcG9fw7p0X3N0X8SNdF9ww6Ffc28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fw7p0X3N0X8SNdF9ww6Ffc28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBsOiAnRC4gTS4gWVlZWScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RuZXMgdl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t6w610cmEgdl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZlIHN0xZllZHUgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSDEjXR2cnRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgcMOhdGVrIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBzb2JvdHUgdl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3bEjWVyYSB2XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IG5lZMSbbGkgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw6ldIGRkZGQgW3ZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBzdMWZZWR1IHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAncMWZZWQgJXMnLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENodXZhc2ggW2N2XVxuLy8hIGF1dGhvciA6IEFuYXRvbHkgTWlyb25vdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taXJvbnRvbGlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBjdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2N2Jywge1xuICAgICAgICBtb250aHM6ICfQutOR0YDQu9Cw0Ydf0L3QsNGA05HRgV/Qv9GD0Yhf0LDQutCwX9C80LDQuV/Sq9OX0YDRgtC80LVf0YPRgtORX9Kr0YPRgNC70LBf0LDQstOR0L1f0Y7Qv9CwX9GH07PQul/RgNCw0YjRgtCw0LInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0LrTkdGAX9C90LDRgF/Qv9GD0Yhf0LDQutCwX9C80LDQuV/Sq9OX0YBf0YPRgtORX9Kr0YPRgF/QsNCy0L1f0Y7Qv9CwX9GH07PQul/RgNCw0YgnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ9Cy0YvRgNGB0LDRgNC90LjQutGD0L1f0YLRg9C90YLQuNC60YPQvV/Ri9GC0LvQsNGA0LjQutGD0L1f0Y7QvdC60YPQvV/QutOX0qvQvdC10YDQvdC40LrRg9C9X9GN0YDQvdC10LrRg9C9X9GI05HQvNCw0YLQutGD0L0nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9Cy0YvRgF/RgtGD0L1f0YvRgtC7X9GO0L1f0LrTl9KrX9GN0YDQvV/RiNOR0LwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0LLRgF/RgtC9X9GL0YJf0Y7QvV/QutKrX9GN0YBf0YjQvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEw6ICdZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIFlZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddLCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Cf0LDRj9C9XSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0KvRgNCw0L1dIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1vTltC90LXRgF0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vSqtC40YLQtdGBXSBkZGRkIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb0JjRgNGC0L3Tl10gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiBmdW5jdGlvbiAob3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFmZml4ID0gL9GB0LXRhdC10YIkL2kuZXhlYyhvdXRwdXQpXG4gICAgICAgICAgICAgICAgICAgID8gJ9GA0LXQvSdcbiAgICAgICAgICAgICAgICAgICAgOiAv0qvRg9C7JC9pLmV4ZWMob3V0cHV0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ9GC0LDQvSdcbiAgICAgICAgICAgICAgICAgICAgICA6ICfRgNCw0L0nO1xuICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQgKyBhZmZpeDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0OiAnJXMg0LrQsNGP0LvQu9CwJyxcbiAgICAgICAgICAgIHM6ICfQv9OX0YAt0LjQuiDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBzczogJyVkINKr0LXQutC60YPQvdGCJyxcbiAgICAgICAgICAgIG06ICfQv9OX0YAg0LzQuNC90YPRgicsXG4gICAgICAgICAgICBtbTogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaDogJ9C/05fRgCDRgdC10YXQtdGCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YHQtdGF0LXRgicsXG4gICAgICAgICAgICBkOiAn0L/Tl9GAINC60YPQvScsXG4gICAgICAgICAgICBkZDogJyVkINC60YPQvScsXG4gICAgICAgICAgICBNOiAn0L/Tl9GAINGD0LnTkdGFJyxcbiAgICAgICAgICAgIE1NOiAnJWQg0YPQudOR0YUnLFxuICAgICAgICAgICAgeTogJ9C/05fRgCDSq9GD0LsnLFxuICAgICAgICAgICAgeXk6ICclZCDSq9GD0LsnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0t0LzTl9GILyxcbiAgICAgICAgb3JkaW5hbDogJyVkLdC805fRiCcsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBjdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBXZWxzaCBbY3ldXG4vLyEgYXV0aG9yIDogUm9iZXJ0IEFsbGVuIDogaHR0cHM6Ly9naXRodWIuY29tL3JvYmdhbGxlblxuLy8hIGF1dGhvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yeWFuZ3JlYXZlc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGN5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3knLCB7XG4gICAgICAgIG1vbnRoczogJ0lvbmF3cl9DaHdlZnJvcl9NYXdydGhfRWJyaWxsX01haV9NZWhlZmluX0dvcmZmZW5uYWZfQXdzdF9NZWRpX0h5ZHJlZl9UYWNod2VkZF9SaGFnZnlyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0lvbl9DaHdlX01hd19FYnJfTWFpX01laF9Hb3JfQXdzX01lZF9IeWRfVGFjaF9SaGFnJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdEeWRkIFN1bF9EeWRkIExsdW5fRHlkZCBNYXdydGhfRHlkZCBNZXJjaGVyX0R5ZGQgSWF1X0R5ZGQgR3dlbmVyX0R5ZGQgU2Fkd3JuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdWxfTGx1bl9NYXdfTWVyX0lhdV9Hd2VfU2FkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X0xsX01hX01lX0lhX0d3X1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIC8vIHRpbWUgZm9ybWF0cyBhcmUgdGhlIHNhbWUgYXMgZW4tZ2JcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIZWRkaXcgYW1dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbWWZvcnkgYW1dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYW1dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbRGRvZSBhbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtkaXdldGhhZiBhbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdtZXduICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB5biDDtGwnLFxuICAgICAgICAgICAgczogJ3ljaHlkaWcgZWlsaWFkYXUnLFxuICAgICAgICAgICAgc3M6ICclZCBlaWxpYWQnLFxuICAgICAgICAgICAgbTogJ211bnVkJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbXVudWQnLFxuICAgICAgICAgICAgaDogJ2F3cicsXG4gICAgICAgICAgICBoaDogJyVkIGF3cicsXG4gICAgICAgICAgICBkOiAnZGl3cm5vZCcsXG4gICAgICAgICAgICBkZDogJyVkIGRpd3Jub2QnLFxuICAgICAgICAgICAgTTogJ21pcycsXG4gICAgICAgICAgICBNTTogJyVkIG1pcycsXG4gICAgICAgICAgICB5OiAnYmx3eWRkeW4nLFxuICAgICAgICAgICAgeXk6ICclZCBmbHluZWRkJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGZlZHxhaW58YWZ8aWx8eWRkfGVkfGVnKS8sXG4gICAgICAgIC8vIHRyYWRpdGlvbmFsIG9yZGluYWwgbnVtYmVycyBhYm92ZSAzMSBhcmUgbm90IGNvbW1vbmx5IHVzZWQgaW4gY29sbG9xdWlhbCBXZWxzaFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlcixcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgICAgICBsb29rdXAgPSBbXG4gICAgICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgICAgICAnYWYnLFxuICAgICAgICAgICAgICAgICAgICAnaWwnLFxuICAgICAgICAgICAgICAgICAgICAneWRkJyxcbiAgICAgICAgICAgICAgICAgICAgJ3lkZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZCcsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsIC8vIDFhZiB0byAxMGZlZFxuICAgICAgICAgICAgICAgICAgICAnZWcnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZycsXG4gICAgICAgICAgICAgICAgICAgICdlZycsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZWcnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJywgLy8gMTFlZyB0byAyMGZlZFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoYiA+IDIwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGIgPT09IDQwIHx8IGIgPT09IDUwIHx8IGIgPT09IDYwIHx8IGIgPT09IDgwIHx8IGIgPT09IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnZmVkJzsgLy8gbm90IDMwYWluLCA3MGFpbiBvciA5MGFpblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhaW4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYiA+IDApIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBsb29rdXBbYl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRGFuaXNoIFtkYV1cbi8vISBhdXRob3IgOiBVbHJpayBOaWVsc2VuIDogaHR0cHM6Ly9naXRodWIuY29tL21yYmFzZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGRhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGEnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnRzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ3PDuG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDuHJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzw7huX21hbl90aXJfb25zX3Rvcl9mcmVfbMO4cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgW2QuXSBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaSBtb3JnZW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ3DDpSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaSBnw6VyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbaV0gZGRkZFtzIGtsLl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgc2lkZW4nLFxuICAgICAgICAgICAgczogJ2bDpSBzZWt1bmRlcicsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG06ICdldCBtaW51dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0dGVyJyxcbiAgICAgICAgICAgIGg6ICdlbiB0aW1lJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdGltZXInLFxuICAgICAgICAgICAgZDogJ2VuIGRhZycsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2UnLFxuICAgICAgICAgICAgTTogJ2VuIG3DpW5lZCcsXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5lZGVyJyxcbiAgICAgICAgICAgIHk6ICdldCDDpXInLFxuICAgICAgICAgICAgeXk6ICclZCDDpXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdlcm1hbiBbZGVdXG4vLyEgYXV0aG9yIDogbGx1Y2hzIDogaHR0cHM6Ly9naXRodWIuY29tL2xsdWNoc1xuLy8hIGF1dGhvcjogTWVuZWxpb24gRWxlbnPDumxlOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuLy8hIGF1dGhvciA6IE1pa29sYWogRGFkZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL21pazAxYWpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBtOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAgICAgaDogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgICAgIGQ6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgICAgIGRkOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAgICAgdzogWydlaW5lIFdvY2hlJywgJ2VpbmVyIFdvY2hlJ10sXG4gICAgICAgICAgICBNOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAgICAgeTogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGRlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGUnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWcnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1NvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAndm9yICVzJyxcbiAgICAgICAgICAgIHM6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzczogJyVkIFNla3VuZGVuJyxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgd3c6ICclZCBXb2NoZW4nLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdlcm1hbiAoQXVzdHJpYSkgW2RlLWF0XVxuLy8hIGF1dGhvciA6IGxsdWNocyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sbHVjaHNcbi8vISBhdXRob3I6IE1lbmVsaW9uIEVsZW5zw7psZTogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiBNYXJ0aW4gR3JvbGxlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9NYWRNR1xuLy8hIGF1dGhvciA6IE1pa29sYWogRGFkZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL21pazAxYWpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBtOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAgICAgaDogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgICAgIGQ6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgICAgIGRkOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAgICAgdzogWydlaW5lIFdvY2hlJywgJ2VpbmVyIFdvY2hlJ10sXG4gICAgICAgICAgICBNOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAgICAgeTogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGRlQXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZS1hdCcsIHtcbiAgICAgICAgbW9udGhzOiAnSsOkbm5lcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdKw6RuLl9GZWIuX03DpHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ1Nvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTby5fTW8uX0RpLl9NaS5fRG8uX0ZyLl9TYS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dlc3Rlcm4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ZvciAlcycsXG4gICAgICAgICAgICBzOiAnZWluIHBhYXIgU2VrdW5kZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06ICclZCBNaW51dGVuJyxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogJyVkIFN0dW5kZW4nLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgdzogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHd3OiAnJWQgV29jaGVuJyxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBkZUF0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdlcm1hbiAoU3dpdHplcmxhbmQpIFtkZS1jaF1cbi8vISBhdXRob3IgOiBzc2NodWVsbGVyIDogaHR0cHM6Ly9naXRodWIuY29tL3NzY2h1ZWxsZXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBtOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAgICAgaDogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgICAgIGQ6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgICAgIGRkOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAgICAgdzogWydlaW5lIFdvY2hlJywgJ2VpbmVyIFdvY2hlJ10sXG4gICAgICAgICAgICBNOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAgICAgeTogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGRlQ2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZS1jaCcsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyX0ZlYnJ1YXJfTcOkcnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ0phbi5fRmViLl9Nw6Ryel9BcHIuX01haV9KdW5pX0p1bGlfQXVnLl9TZXAuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dlc3Rlcm4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ZvciAlcycsXG4gICAgICAgICAgICBzOiAnZWluIHBhYXIgU2VrdW5kZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06ICclZCBNaW51dGVuJyxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogJyVkIFN0dW5kZW4nLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgdzogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHd3OiAnJWQgV29jaGVuJyxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBkZUNoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGRpdmlhbiBbZHZdXG4vLyEgYXV0aG9yIDogSmF3aXNoIEhhbWVlZCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXdpc2hcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICAgICAn3pberN6C3qreh96m3oPeqScsXG4gICAgICAgICAgICAn3orerN6E3rDeg96q3ofept6D3qknLFxuICAgICAgICAgICAgJ96J3qfeg96o3pfeqicsXG4gICAgICAgICAgICAn3oferd6V3rDeg96p3o3eqicsXG4gICAgICAgICAgICAn3onerScsXG4gICAgICAgICAgICAn3pbeq96C3rAnLFxuICAgICAgICAgICAgJ96W3qrejd6m3ofeqCcsXG4gICAgICAgICAgICAn3ofer96O3qbekN6w3pPeqicsXG4gICAgICAgICAgICAn3pDerN6V3rDek96s3onesN6E3qbeg96qJyxcbiAgICAgICAgICAgICfeh96u3obesN6T3q/ehN6m3oPeqicsXG4gICAgICAgICAgICAn3oLert6I3qzeid6w3oTept6D3qonLFxuICAgICAgICAgICAgJ96R3qjekN6s3onesN6E3qbeg96qJyxcbiAgICAgICAgXSxcbiAgICAgICAgd2Vla2RheXMgPSBbXG4gICAgICAgICAgICAn3ofep96L3qjeh96w3ozepicsXG4gICAgICAgICAgICAn3oDer96J3qYnLFxuICAgICAgICAgICAgJ96H3qbegt6w3o7ep96D3qYnLFxuICAgICAgICAgICAgJ96E3qrei96mJyxcbiAgICAgICAgICAgICfehN6q3oPep96Q3rDeit6m3ozeqCcsXG4gICAgICAgICAgICAn3oDeqt6G3qreg96qJyxcbiAgICAgICAgICAgICfegN6u3oLeqN6A3qjeg96qJyxcbiAgICAgICAgXTtcblxuICAgIHZhciBkdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2R2Jywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46ICfeh96n3oveqF/egN6v3onepl/eh96m3oLesF/ehN6q3ovepl/ehN6q3oPep1/egN6q3obeql/egN6u3oLeqCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QvTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv3onehnzeid6KLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ96J3oonID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ96J3oYnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ96J3oonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1veid6o3ofept6L3qpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb3onep96L3qbeid6nXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1veh96o3ofesN6U3qxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW96K3qfeh96o3ozeqt6I3qhdIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfejN6s3oPerd6O3qbeh96oICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfeht6q3oPeqN6C3rAgJXMnLFxuICAgICAgICAgICAgczogJ96Q3qjeht6q3oLesN6M3qreht6u3oXerN6H3rAnLFxuICAgICAgICAgICAgc3M6ICdkJSDekN6o3obeqt6C3rDejN6qJyxcbiAgICAgICAgICAgIG06ICfeid6o3oLeqN6T3qzeh96wJyxcbiAgICAgICAgICAgIG1tOiAn3oneqN6C3qjek96qICVkJyxcbiAgICAgICAgICAgIGg6ICfejt6m3pHeqN6H3qjeg96s3ofesCcsXG4gICAgICAgICAgICBoaDogJ96O3qbekd6o3ofeqN6D3qogJWQnLFxuICAgICAgICAgICAgZDogJ96L3qreiN6m3oDerN6H3rAnLFxuICAgICAgICAgICAgZGQ6ICfei96q3ojept6Q3rAgJWQnLFxuICAgICAgICAgICAgTTogJ96J3qbegN6s3ofesCcsXG4gICAgICAgICAgICBNTTogJ96J3qbekN6wICVkJyxcbiAgICAgICAgICAgIHk6ICfeh96m3oDept6D3qzeh96wJyxcbiAgICAgICAgICAgIHl5OiAn3ofept6A3qbeg96qICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDcsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBkdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHcmVlayBbZWxdXG4vLyEgYXV0aG9yIDogQWdnZWxvcyBLYXJhbGlhcyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tZWhpZWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlb2YgRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnICYmIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGVsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZWwnLCB7XG4gICAgICAgIG1vbnRoc05vbWluYXRpdmVFbDpcbiAgICAgICAgICAgICfOmc6xzr3Ov8+FzqzPgc65zr/Pgl/Ops61zrLPgc6/z4XOrM+BzrnOv8+CX86czqzPgc+EzrnOv8+CX86Rz4DPgc6vzrvOuc6/z4JfzpzOrM65zr/Pgl/Omc6/z43Ovc65zr/Pgl/Omc6/z43Ou865zr/Pgl/Okc+NzrPOv8+Fz4PPhM6/z4JfzqPOtc+Az4TOrc68zrLPgc65zr/Pgl/On866z4TPjs6yz4HOuc6/z4Jfzp3Ov86tzrzOss+BzrnOv8+CX86UzrXOus6tzrzOss+BzrnOv8+CJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc0dlbml0aXZlRWw6XG4gICAgICAgICAgICAnzpnOsc69zr/Phc6xz4HOr86/z4VfzqbOtc6yz4HOv8+FzrHPgc6vzr/PhV/OnM6xz4HPhM6vzr/PhV/Okc+Az4HOuc67zq/Ov8+FX86czrHOkM6/z4VfzpnOv8+Fzr3Or86/z4VfzpnOv8+FzrvOr86/z4VfzpHPhc6zzr/Pjc+Dz4TOv8+FX86jzrXPgM+EzrXOvM6yz4HOr86/z4Vfzp/Ous+Ez4nOss+Bzq/Ov8+FX86dzr/Otc68zrLPgc6vzr/PhV/OlM61zrrOtc68zrLPgc6vzr/PhScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHM6IGZ1bmN0aW9uIChtb21lbnRUb0Zvcm1hdCwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudFRvRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc05vbWluYXRpdmVFbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAvRC8udGVzdChmb3JtYXQuc3Vic3RyaW5nKDAsIGZvcm1hdC5pbmRleE9mKCdNTU1NJykpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBkYXkgbnVtYmVyIGJlZm9yZSAnTU1NTSdcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzR2VuaXRpdmVFbFttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc05vbWluYXRpdmVFbFttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfOmc6xzr1fzqbOtc6yX86czrHPgV/Okc+Az4FfzpzOsc+KX86Zzr/Phc69X86Zzr/Phc67X86Rz4XOs1/Oo861z4Bfzp/Ous+EX86dzr/OtV/OlM61zronLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnzprPhc+BzrnOsc66zq5fzpTOtc+Fz4TOrc+BzrFfzqTPgc6vz4TOt1/OpM61z4TOrM+Bz4TOt1/OoM6tzrzPgM+EzrdfzqDOsc+BzrHPg866zrXPhc6uX86jzqzOss6yzrHPhM6/Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnzprPhc+BX86UzrXPhV/OpM+BzrlfzqTOtc+EX86gzrXOvF/OoM6xz4FfzqPOsc6yJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ86az4VfzpTOtV/OpM+BX86kzrVfzqDOtV/OoM6xX86jzrEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnzrzOvCcgOiAnzpzOnCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ8+AzrwnIDogJ86gzpwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKVswXSA9PT0gJ868JztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL1vOoM6cXVxcLj/OnD9cXC4/L2ksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyRWw6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbzqPOrs68zrXPgc6xIHt9XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW86Rz43Pgc65zr8ge31dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbe31dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbzqfOuM61z4Ige31dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW8+Ezr8gz4DPgc6/zrfOs86/z43OvM61zr3Ov10gZGRkZCBbe31dIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW8+EzrfOvSDPgM+Bzr/Ot86zzr/Pjc68zrXOvc63XSBkZGRkIFt7fV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjogZnVuY3Rpb24gKGtleSwgbW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJFbFtrZXldLFxuICAgICAgICAgICAgICAgIGhvdXJzID0gbW9tICYmIG1vbS5ob3VycygpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3V0cHV0KSkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5hcHBseShtb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKCd7fScsIGhvdXJzICUgMTIgPT09IDEgPyAnz4PPhM63JyA6ICfPg8+EzrnPgicpO1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ8+DzrUgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIM+Az4HOuc69JyxcbiAgICAgICAgICAgIHM6ICfOu86vzrPOsSDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICAgICAgc3M6ICclZCDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICAgICAgbTogJ86tzr3OsSDOu861z4DPhM+MJyxcbiAgICAgICAgICAgIG1tOiAnJWQgzrvOtc+Az4TOrCcsXG4gICAgICAgICAgICBoOiAnzrzOr86xIM+Oz4HOsScsXG4gICAgICAgICAgICBoaDogJyVkIM+Oz4HOtc+CJyxcbiAgICAgICAgICAgIGQ6ICfOvM6vzrEgzrzOrc+BzrEnLFxuICAgICAgICAgICAgZGQ6ICclZCDOvM6tz4HOtc+CJyxcbiAgICAgICAgICAgIE06ICfOrc69zrHPgiDOvM6uzr3Osc+CJyxcbiAgICAgICAgICAgIE1NOiAnJWQgzrzOrs69zrXPgicsXG4gICAgICAgICAgICB5OiAnzq3Ovc6xz4Igz4fPgc+Mzr3Ov8+CJyxcbiAgICAgICAgICAgIHl5OiAnJWQgz4fPgc+Mzr3Ouc6xJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9zrcvLFxuICAgICAgICBvcmRpbmFsOiAnJWTOtycsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDRzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChBdXN0cmFsaWEpIFtlbi1hdV1cbi8vISBhdXRob3IgOiBKYXJlZCBNb3JzZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXJjb2FsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5BdSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWF1Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbkF1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKENhbmFkYSkgW2VuLWNhXVxuLy8hIGF1dGhvciA6IEpvbmF0aGFuIEFib3VyYmloIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmJjYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuQ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1jYScsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuQ2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoVW5pdGVkIEtpbmdkb20pIFtlbi1nYl1cbi8vISBhdXRob3IgOiBDaHJpcyBHZWRyaW0gOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNnZWRyaW1cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbkdiID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tZ2InLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5HYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChJcmVsYW5kKSBbZW4taWVdXG4vLyEgYXV0aG9yIDogQ2hyaXMgQ2FydGxpZGdlIDogaHR0cHM6Ly9naXRodWIuY29tL2NocmlzY2FydGxpZGdlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5JZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWllJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5JZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChJc3JhZWwpIFtlbi1pbF1cbi8vISBhdXRob3IgOiBDaHJpcyBHZWRyaW0gOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNnZWRyaW1cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbklsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4taWwnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuSWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoSW5kaWEpIFtlbi1pbl1cbi8vISBhdXRob3IgOiBKYXRpbiBBZ3Jhd2FsIDogaHR0cHM6Ly9naXRodWIuY29tL2phdGluYWcyMlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuSW4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1pbicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5JbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChOZXcgWmVhbGFuZCkgW2VuLW56XVxuLy8hIGF1dGhvciA6IEx1a2UgTWNHcmVnb3IgOiBodHRwczovL2dpdGh1Yi5jb20vbHVrZW1jZ3JlZ29yXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5OeiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLW56Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbk56O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKFNpbmdhcG9yZSkgW2VuLXNnXVxuLy8hIGF1dGhvciA6IE1hdHRoZXcgQ2FzdHJpbGxvbi1NYWRyaWdhbCA6IGh0dHBzOi8vZ2l0aHViLmNvbS90ZWNoZGltZW5zaW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5TZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLXNnJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuU2c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRXNwZXJhbnRvIFtlb11cbi8vISBhdXRob3IgOiBDb2xpbiBEZWFuIDogaHR0cHM6Ly9naXRodWIuY29tL2NvbGluZGVhblxuLy8hIGF1dGhvciA6IE1pYSBOb3JkZW50b2Z0IEltcGVyYXRvcmkgOiBodHRwczovL2dpdGh1Yi5jb20vbWllc3Rhc21pYVxuLy8hIGNvbW1lbnQgOiBtaWVzdGFzbWlhIGNvcnJlY3RlZCB0aGUgdHJhbnNsYXRpb24gYnkgY29saW5kZWFuXG4vLyEgY29tbWVudCA6IFZpdmFrdm8gY29ycmVjdGVkIHRoZSB0cmFuc2xhdGlvbiBieSBjb2xpbmRlYW4gYW5kIG1pZXN0YXNtaWFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VvJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJvX2ZlYnJ1YXJvX21hcnRvX2Fwcmlsb19tYWpvX2p1bmlvX2p1bGlvX2HFrWd1c3RvX3NlcHRlbWJyb19va3RvYnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFydF9hcHJfbWFqX2p1bl9qdWxfYcWtZ19zZXB0X29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ2RpbWFuxIlvX2x1bmRvX21hcmRvX21lcmtyZWRvX8S1YcWtZG9fdmVuZHJlZG9fc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZGltX2x1bl9tYXJkX21lcmtfxLVhxa1fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkaV9sdV9tYV9tZV/EtWFfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnW2xhXSBEWy1hbiBkZV0gTU1NTSwgWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdbbGFdIERbLWFuIGRlXSBNTU1NLCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkW25dLCBbbGFdIERbLWFuIGRlXSBNTU1NLCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIFtsYV0gRFstYW4gZGVdIE1NTSwgWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9bYXBdXFwudFxcLm0vaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgPT09ICdwJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwLnQubS4nIDogJ1AuVC5NLic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2EudC5tLicgOiAnQS5ULk0uJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9kaWHFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tNb3JnYcWtIGplXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGRbbiBqZV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIaWVyYcWtIGplXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1twYXNpbnRhbl0gZGRkZFtuIGplXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3Bvc3QgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2FudGHFrSAlcycsXG4gICAgICAgICAgICBzOiAna2Vsa2FqIHNla3VuZG9qJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kb2onLFxuICAgICAgICAgICAgbTogJ3VudSBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9qJyxcbiAgICAgICAgICAgIGg6ICd1bnUgaG9ybycsXG4gICAgICAgICAgICBoaDogJyVkIGhvcm9qJyxcbiAgICAgICAgICAgIGQ6ICd1bnUgdGFnbycsIC8vbmUgJ2RpdXJubycsIMSJYXIgZXN0YXMgdXppdGEgcG9yIHByb2tzaW11bW9cbiAgICAgICAgICAgIGRkOiAnJWQgdGFnb2onLFxuICAgICAgICAgICAgTTogJ3VudSBtb25hdG8nLFxuICAgICAgICAgICAgTU06ICclZCBtb25hdG9qJyxcbiAgICAgICAgICAgIHk6ICd1bnUgamFybycsXG4gICAgICAgICAgICB5eTogJyVkIGphcm9qJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9YS8sXG4gICAgICAgIG9yZGluYWw6ICclZGEnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCBbZXNdXG4vLyEgYXV0aG9yIDogSnVsaW8gTmFwdXLDrSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWxpb25jXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPVxuICAgICAgICAgICAgJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZW5lL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9eYWJyL2ksXG4gICAgICAgICAgICAvXm1heS9pLFxuICAgICAgICAgICAgL15qdW4vaSxcbiAgICAgICAgICAgIC9eanVsL2ksXG4gICAgICAgICAgICAvXmFnby9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kaWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZXxlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaTtcblxuICAgIHZhciBlcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzJywge1xuICAgICAgICBtb250aHM6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90O1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnXSBMVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2hhY2UgJXMnLFxuICAgICAgICAgICAgczogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIHc6ICd1bmEgc2VtYW5hJyxcbiAgICAgICAgICAgIHd3OiAnJWQgc2VtYW5hcycsXG4gICAgICAgICAgICBNOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXk6ICclZCBhw7FvcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWREYXRlOiAnRmVjaGEgaW52w6FsaWRhJyxcbiAgICB9KTtcblxuICAgIHJldHVybiBlcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTcGFuaXNoIChEb21pbmljYW4gUmVwdWJsaWMpIFtlcy1kb11cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydERvdCA9XG4gICAgICAgICAgICAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnZW5lX2ZlYl9tYXJfYWJyX21heV9qdW5fanVsX2Fnb19zZXBfb2N0X25vdl9kaWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15lbmUvaSxcbiAgICAgICAgICAgIC9eZmViL2ksXG4gICAgICAgICAgICAvXm1hci9pLFxuICAgICAgICAgICAgL15hYnIvaSxcbiAgICAgICAgICAgIC9ebWF5L2ksXG4gICAgICAgICAgICAvXmp1bi9pLFxuICAgICAgICAgICAgL15qdWwvaSxcbiAgICAgICAgICAgIC9eYWdvL2ksXG4gICAgICAgICAgICAvXnNlcC9pLFxuICAgICAgICAgICAgL15vY3QvaSxcbiAgICAgICAgICAgIC9ebm92L2ksXG4gICAgICAgICAgICAvXmRpYy9pLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzRG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy1kbycsIHtcbiAgICAgICAgbW9udGhzOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5czogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbS5fbHVuLl9tYXIuX21pw6kuX2p1ZS5fdmllLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb19sdV9tYV9taV9qdV92aV9zw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnXSBMVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2hhY2UgJXMnLFxuICAgICAgICAgICAgczogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIHc6ICd1bmEgc2VtYW5hJyxcbiAgICAgICAgICAgIHd3OiAnJWQgc2VtYW5hcycsXG4gICAgICAgICAgICBNOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXk6ICclZCBhw7FvcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXNEbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTcGFuaXNoIChNZXhpY28pIFtlcy1teF1cbi8vISBhdXRob3IgOiBKQyBGcmFuY28gOiBodHRwczovL2dpdGh1Yi5jb20vamNmcmFuY29cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydERvdCA9XG4gICAgICAgICAgICAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnZW5lX2ZlYl9tYXJfYWJyX21heV9qdW5fanVsX2Fnb19zZXBfb2N0X25vdl9kaWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15lbmUvaSxcbiAgICAgICAgICAgIC9eZmViL2ksXG4gICAgICAgICAgICAvXm1hci9pLFxuICAgICAgICAgICAgL15hYnIvaSxcbiAgICAgICAgICAgIC9ebWF5L2ksXG4gICAgICAgICAgICAvXmp1bi9pLFxuICAgICAgICAgICAgL15qdWwvaSxcbiAgICAgICAgICAgIC9eYWdvL2ksXG4gICAgICAgICAgICAvXnNlcC9pLFxuICAgICAgICAgICAgL15vY3QvaSxcbiAgICAgICAgICAgIC9ebm92L2ksXG4gICAgICAgICAgICAvXmRpYy9pLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzTXggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy1teCcsIHtcbiAgICAgICAgbW9udGhzOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5czogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbS5fbHVuLl9tYXIuX21pw6kuX2p1ZS5fdmllLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb19sdV9tYV9taV9qdV92aV9zw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHM6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkw61hcycsXG4gICAgICAgICAgICB3OiAndW5hIHNlbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFuYXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhw7FvJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYcOxb3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgICAgICBpbnZhbGlkRGF0ZTogJ0ZlY2hhIGludsOhbGlkYScsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXNNeDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTcGFuaXNoIChVbml0ZWQgU3RhdGVzKSBbZXMtdXNdXG4vLyEgYXV0aG9yIDogYnVzdHRhIDogaHR0cHM6Ly9naXRodWIuY29tL2J1c3R0YVxuLy8hIGF1dGhvciA6IGNocmlzcm9keiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc3JvZHpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydERvdCA9XG4gICAgICAgICAgICAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnZW5lX2ZlYl9tYXJfYWJyX21heV9qdW5fanVsX2Fnb19zZXBfb2N0X25vdl9kaWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15lbmUvaSxcbiAgICAgICAgICAgIC9eZmViL2ksXG4gICAgICAgICAgICAvXm1hci9pLFxuICAgICAgICAgICAgL15hYnIvaSxcbiAgICAgICAgICAgIC9ebWF5L2ksXG4gICAgICAgICAgICAvXmp1bi9pLFxuICAgICAgICAgICAgL15qdWwvaSxcbiAgICAgICAgICAgIC9eYWdvL2ksXG4gICAgICAgICAgICAvXnNlcC9pLFxuICAgICAgICAgICAgL15vY3QvaSxcbiAgICAgICAgICAgIC9ebm92L2ksXG4gICAgICAgICAgICAvXmRpYy9pLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzVXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy11cycsIHtcbiAgICAgICAgbW9udGhzOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5czogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbS5fbHVuLl9tYXIuX21pw6kuX2p1ZS5fdmllLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb19sdV9tYV9taV9qdV92aV9zw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnTU0vREQvWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnXSBMVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2hhY2UgJXMnLFxuICAgICAgICAgICAgczogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIHc6ICd1bmEgc2VtYW5hJyxcbiAgICAgICAgICAgIHd3OiAnJWQgc2VtYW5hcycsXG4gICAgICAgICAgICBNOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXk6ICclZCBhw7FvcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXNVcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFc3RvbmlhbiBbZXRdXG4vLyEgYXV0aG9yIDogSGVucnkgS2VobG1hbm4gOiBodHRwczovL2dpdGh1Yi5jb20vbWFkaGVucnlcbi8vISBpbXByb3ZlbWVudHMgOiBJbGxpbWFyIFRhbWJlayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWd1bGthXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgczogWydtw7VuZSBzZWt1bmRpJywgJ23DtW5pIHNla3VuZCcsICdwYWFyIHNla3VuZGl0J10sXG4gICAgICAgICAgICBzczogW251bWJlciArICdzZWt1bmRpJywgbnVtYmVyICsgJ3Nla3VuZGl0J10sXG4gICAgICAgICAgICBtOiBbJ8O8aGUgbWludXRpJywgJ8O8a3MgbWludXQnXSxcbiAgICAgICAgICAgIG1tOiBbbnVtYmVyICsgJyBtaW51dGknLCBudW1iZXIgKyAnIG1pbnV0aXQnXSxcbiAgICAgICAgICAgIGg6IFsnw7xoZSB0dW5uaScsICd0dW5kIGFlZ2EnLCAnw7xrcyB0dW5kJ10sXG4gICAgICAgICAgICBoaDogW251bWJlciArICcgdHVubmknLCBudW1iZXIgKyAnIHR1bmRpJ10sXG4gICAgICAgICAgICBkOiBbJ8O8aGUgcMOkZXZhJywgJ8O8a3MgcMOkZXYnXSxcbiAgICAgICAgICAgIE06IFsna3V1IGFqYScsICdrdXUgYWVnYScsICfDvGtzIGt1dSddLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIGt1dScsIG51bWJlciArICcga3V1ZCddLFxuICAgICAgICAgICAgeTogWyfDvGhlIGFhc3RhJywgJ2Fhc3RhJywgJ8O8a3MgYWFzdGEnXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyBhYXN0YScsIG51bWJlciArICcgYWFzdGF0J10sXG4gICAgICAgIH07XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0W2tleV1bMl0gPyBmb3JtYXRba2V5XVsyXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGV0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXQnLCB7XG4gICAgICAgIG1vbnRoczogJ2phYW51YXJfdmVlYnJ1YXJfbcOkcnRzX2FwcmlsbF9tYWlfanV1bmlfanV1bGlfYXVndXN0X3NlcHRlbWJlcl9va3Rvb2Jlcl9ub3ZlbWJlcl9kZXRzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phYW5fdmVlYnJfbcOkcnRzX2Fwcl9tYWlfanV1bmlfanV1bGlfYXVnX3NlcHRfb2t0X25vdl9kZXRzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdww7xoYXDDpGV2X2VzbWFzcMOkZXZfdGVpc2lww6Rldl9rb2xtYXDDpGV2X25lbGphcMOkZXZfcmVlZGVfbGF1cMOkZXYnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1BfRV9UX0tfTl9SX0wnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnUF9FX1RfS19OX1JfTCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1TDpG5hLF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tIb21tZSxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW0rDpHJnbWluZV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0VpbGUsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tFZWxtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgcMOkcmFzdCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMgdGFnYXNpJyxcbiAgICAgICAgICAgIHM6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogJyVkIHDDpGV2YScsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQmFzcXVlIFtldV1cbi8vISBhdXRob3IgOiBFbmVrbyBJbGxhcnJhbWVuZGkgOiBodHRwczovL2dpdGh1Yi5jb20vZWlsbGFycmFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBldSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2V1Jywge1xuICAgICAgICBtb250aHM6ICd1cnRhcnJpbGFfb3RzYWlsYV9tYXJ0eG9hX2FwaXJpbGFfbWFpYXR6YV9la2FpbmFfdXp0YWlsYV9hYnV6dHVhX2lyYWlsYV91cnJpYV9hemFyb2FfYWJlbmR1YScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAndXJ0Ll9vdHMuX21hci5fYXBpLl9tYWkuX2VrYS5fdXp0Ll9hYnUuX2lyYS5fdXJyLl9hemEuX2FiZS4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnaWdhbmRlYV9hc3RlbGVoZW5hX2FzdGVhcnRlYV9hc3RlYXprZW5hX29zdGVndW5hX29zdGlyYWxhX2xhcnVuYmF0YScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnaWcuX2FsLl9hci5fYXouX29nLl9vbC5fbHIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2lnX2FsX2FyX2F6X29nX29sX2xyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnWVlZWVtrb10gTU1NTVtyZW5dIERbYV0nLFxuICAgICAgICAgICAgTExMOiAnWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIFlZWVlba29dIE1NTU1bcmVuXSBEW2FdIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdZWVlZLU0tRCcsXG4gICAgICAgICAgICBsbDogJ1lZWVlba29dIE1NTSBEW2FdJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVlba29dIE1NTSBEW2FdIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIFlZWVlba29dIE1NTSBEW2FdIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZ2F1cl0gTFRbZXRhbl0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1tiaWhhcl0gTFRbZXRhbl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUW2V0YW5dJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbYXR6b10gTFRbZXRhbl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbYXVycmVrb10gZGRkZCBMVFtldGFuXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIGJhcnJ1JyxcbiAgICAgICAgICAgIHBhc3Q6ICdkdWVsYSAlcycsXG4gICAgICAgICAgICBzOiAnc2VndW5kbyBiYXR6dWsnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvJyxcbiAgICAgICAgICAgIG06ICdtaW51dHUgYmF0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXR1JyxcbiAgICAgICAgICAgIGg6ICdvcmR1IGJhdCcsXG4gICAgICAgICAgICBoaDogJyVkIG9yZHUnLFxuICAgICAgICAgICAgZDogJ2VndW4gYmF0JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZWd1bicsXG4gICAgICAgICAgICBNOiAnaGlsYWJldGUgYmF0JyxcbiAgICAgICAgICAgIE1NOiAnJWQgaGlsYWJldGUnLFxuICAgICAgICAgICAgeTogJ3VydGUgYmF0JyxcbiAgICAgICAgICAgIHl5OiAnJWQgdXJ0ZScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUGVyc2lhbiBbZmFdXG4vLyEgYXV0aG9yIDogRWJyYWhpbSBCeWFnb3dpIDogaHR0cHM6Ly9naXRodWIuY29tL2VicmFtaW5pb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfbsScsXG4gICAgICAgICAgICAyOiAn27InLFxuICAgICAgICAgICAgMzogJ9uzJyxcbiAgICAgICAgICAgIDQ6ICfbtCcsXG4gICAgICAgICAgICA1OiAn27UnLFxuICAgICAgICAgICAgNjogJ9u2JyxcbiAgICAgICAgICAgIDc6ICfbtycsXG4gICAgICAgICAgICA4OiAn27gnLFxuICAgICAgICAgICAgOTogJ9u5JyxcbiAgICAgICAgICAgIDA6ICfbsCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfbsSc6ICcxJyxcbiAgICAgICAgICAgICfbsic6ICcyJyxcbiAgICAgICAgICAgICfbsyc6ICczJyxcbiAgICAgICAgICAgICfbtCc6ICc0JyxcbiAgICAgICAgICAgICfbtSc6ICc1JyxcbiAgICAgICAgICAgICfbtic6ICc2JyxcbiAgICAgICAgICAgICfbtyc6ICc3JyxcbiAgICAgICAgICAgICfbuCc6ICc4JyxcbiAgICAgICAgICAgICfbuSc6ICc5JyxcbiAgICAgICAgICAgICfbsCc6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBmYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZhJywge1xuICAgICAgICBtb250aHM6ICfamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YcnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDpcbiAgICAgICAgICAgICfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn24xf2K9f2LNf2oZf2b5f2Kxf2LQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2YLYqNmEINin2LIg2LjZh9ixfNio2LnYryDYp9iyINi42YfYsS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC/YqNi52K8g2KfYsiDYuNmH2LEvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YLYqNmEINin2LIg2LjZh9ixJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYqNi52K8g2KfYsiDYuNmH2LEnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mF2LHZiNiyINiz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9mB2LHYr9inINiz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9iz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9iv24zYsdmI2LIg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2b7bjNi0XSBb2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2K/YsSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg2b7bjNi0JyxcbiAgICAgICAgICAgIHM6ICfahtmG2K8g2KvYp9mG24zZhycsXG4gICAgICAgICAgICBzczogJyVkINir2KfZhtuM2YcnLFxuICAgICAgICAgICAgbTogJ9uM2qkg2K/ZgtuM2YLZhycsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLbjNmC2YcnLFxuICAgICAgICAgICAgaDogJ9uM2qkg2LPYp9i52KonLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYqicsXG4gICAgICAgICAgICBkOiAn24zaqSDYsdmI2LInLFxuICAgICAgICAgICAgZGQ6ICclZCDYsdmI2LInLFxuICAgICAgICAgICAgTTogJ9uM2qkg2YXYp9mHJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2YXYp9mHJyxcbiAgICAgICAgICAgIHk6ICfbjNqpINiz2KfZhCcsXG4gICAgICAgICAgICB5eTogJyVkINiz2KfZhCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1vbsC3buV0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3ZhS8sXG4gICAgICAgIG9yZGluYWw6ICclZNmFJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGaW5uaXNoIFtmaV1cbi8vISBhdXRob3IgOiBUYXJtbyBBaWRhbnRhdXN0YSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ibGVhZG9mXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbnVtYmVyc1Bhc3QgPVxuICAgICAgICAgICAgJ25vbGxhIHlrc2kga2Frc2kga29sbWUgbmVsasOkIHZpaXNpIGt1dXNpIHNlaXRzZW3DpG4ga2FoZGVrc2FuIHloZGVrc8Okbicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJyAnXG4gICAgICAgICAgICApLFxuICAgICAgICBudW1iZXJzRnV0dXJlID0gW1xuICAgICAgICAgICAgJ25vbGxhJyxcbiAgICAgICAgICAgICd5aGRlbicsXG4gICAgICAgICAgICAna2FoZGVuJyxcbiAgICAgICAgICAgICdrb2xtZW4nLFxuICAgICAgICAgICAgJ25lbGrDpG4nLFxuICAgICAgICAgICAgJ3ZpaWRlbicsXG4gICAgICAgICAgICAna3V1ZGVuJyxcbiAgICAgICAgICAgIG51bWJlcnNQYXN0WzddLFxuICAgICAgICAgICAgbnVtYmVyc1Bhc3RbOF0sXG4gICAgICAgICAgICBudW1iZXJzUGFzdFs5XSxcbiAgICAgICAgXTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdtdXV0YW1hbiBzZWt1bm5pbicgOiAnbXV1dGFtYSBzZWt1bnRpJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdzZWt1bm5pbicgOiAnc2VrdW50aWEnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ21pbnV1dGluJyA6ICdtaW51dXR0aSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAnbWludXV0aW4nIDogJ21pbnV1dHRpYSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAndHVubmluJyA6ICd0dW50aSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAndHVubmluJyA6ICd0dW50aWEnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3DDpGl2w6RuJyA6ICdww6RpdsOkJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdww6RpdsOkbicgOiAncMOkaXbDpMOkJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdrdXVrYXVkZW4nIDogJ2t1dWthdXNpJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdrdXVrYXVkZW4nIDogJ2t1dWthdXR0YSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAndnVvZGVuJyA6ICd2dW9zaSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAndnVvZGVuJyA6ICd2dW90dGEnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHZlcmJhbE51bWJlcihudW1iZXIsIGlzRnV0dXJlKSArICcgJyArIHJlc3VsdDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmVyYmFsTnVtYmVyKG51bWJlciwgaXNGdXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciA8IDEwXG4gICAgICAgICAgICA/IGlzRnV0dXJlXG4gICAgICAgICAgICAgICAgPyBudW1iZXJzRnV0dXJlW251bWJlcl1cbiAgICAgICAgICAgICAgICA6IG51bWJlcnNQYXN0W251bWJlcl1cbiAgICAgICAgICAgIDogbnVtYmVyO1xuICAgIH1cblxuICAgIHZhciBmaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZpJywge1xuICAgICAgICBtb250aHM6ICd0YW1taWt1dV9oZWxtaWt1dV9tYWFsaXNrdXVfaHVodGlrdXVfdG91a29rdXVfa2Vzw6RrdXVfaGVpbsOka3V1X2Vsb2t1dV9zeXlza3V1X2xva2FrdXVfbWFycmFza3V1X2pvdWx1a3V1Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICd0YW1taV9oZWxtaV9tYWFsaXNfaHVodGlfdG91a29fa2Vzw6RfaGVpbsOkX2Vsb19zeXlzX2xva2FfbWFycmFzX2pvdWx1Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ3N1bm51bnRhaV9tYWFuYW50YWlfdGlpc3RhaV9rZXNraXZpaWtrb190b3JzdGFpX3BlcmphbnRhaV9sYXVhbnRhaScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc3VfbWFfdGlfa2VfdG9fcGVfbGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc3VfbWFfdGlfa2VfdG9fcGVfbGEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRG8gTU1NTVt0YV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRG8gTU1NTVt0YV0gWVlZWSwgW2tsb10gSEgubW0nLFxuICAgICAgICAgICAgbDogJ0QuTS5ZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnRG8gTU1NIFlZWVknLFxuICAgICAgICAgICAgbGxsOiAnRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIERvIE1NTSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW3TDpG7DpMOkbl0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1todW9tZW5uYV0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbG9dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZWlsZW5dIFtrbG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW3ZpaW1lXSBkZGRkW25hXSBba2xvXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIHDDpMOkc3TDpCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMgc2l0dGVuJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGaWxpcGlubyBbZmlsXVxuLy8hIGF1dGhvciA6IERhbiBIYWdtYW4gOiBodHRwczovL2dpdGh1Yi5jb20vaGFnbWFuZGFuXG4vLyEgYXV0aG9yIDogTWF0dGhldyBDbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGV3ZGVlY29cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBmaWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmaWwnLCB7XG4gICAgICAgIG1vbnRoczogJ0VuZXJvX1BlYnJlcm9fTWFyc29fQWJyaWxfTWF5b19IdW55b19IdWx5b19BZ29zdG9fU2V0eWVtYnJlX09rdHVicmVfTm9ieWVtYnJlX0Rpc3llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdFbmVfUGViX01hcl9BYnJfTWF5X0h1bl9IdWxfQWdvX1NldF9Pa3RfTm9iX0Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdMaW5nZ29fTHVuZXNfTWFydGVzX01peWVya3VsZXNfSHV3ZWJlc19CaXllcm5lc19TYWJhZG8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdMaW5fTHVuX01hcl9NaXlfSHV3X0JpeV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnTGlfTHVfTWFfTWlfSHVfQmlfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnTU0vRC9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBERCwgWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnTFQgW25nYXlvbmcgYXJhd10nLFxuICAgICAgICAgICAgbmV4dERheTogJ1tCdWthcyBuZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdMVCBbc2Egc3VzdW5vZCBuYV0gZGRkZCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnTFQgW2thaGFwb25dJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnTFQgW25vb25nIG5ha2FyYWFuZ10gZGRkZCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3NhIGxvb2IgbmcgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFuZyBuYWthbGlwYXMnLFxuICAgICAgICAgICAgczogJ2lsYW5nIHNlZ3VuZG8nLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvJyxcbiAgICAgICAgICAgIG06ICdpc2FuZyBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG8nLFxuICAgICAgICAgICAgaDogJ2lzYW5nIG9yYXMnLFxuICAgICAgICAgICAgaGg6ICclZCBvcmFzJyxcbiAgICAgICAgICAgIGQ6ICdpc2FuZyBhcmF3JyxcbiAgICAgICAgICAgIGRkOiAnJWQgYXJhdycsXG4gICAgICAgICAgICBNOiAnaXNhbmcgYnV3YW4nLFxuICAgICAgICAgICAgTU06ICclZCBidXdhbicsXG4gICAgICAgICAgICB5OiAnaXNhbmcgdGFvbicsXG4gICAgICAgICAgICB5eTogJyVkIHRhb24nLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmlsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZhcm9lc2UgW2ZvXVxuLy8hIGF1dGhvciA6IFJhZ25hciBKb2hhbm5lc2VuIDogaHR0cHM6Ly9naXRodWIuY29tL3JhZ25hcjEyM1xuLy8hIGF1dGhvciA6IEtyaXN0aWFuIFNha2FyaXNzb24gOiBodHRwczovL2dpdGh1Yi5jb20vc2FrYXJpc3NvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGZvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZm8nLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByw61sX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdzdW5udWRhZ3VyX23DoW5hZGFndXJfdMO9c2RhZ3VyX21pa3VkYWd1cl9ow7NzZGFndXJfZnLDrWdnamFkYWd1cl9sZXlnYXJkYWd1cicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc3VuX23DoW5fdMO9c19taWtfaMOzc19mcsOtX2xleScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzdV9tw6FfdMO9X21pX2jDs19mcl9sZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBELiBNTU1NLCBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbw40gZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vDjSBtb3JnaW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vDjSBnasOhciBrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW3PDrcOwc3R1XSBkZGRkIFtrbF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd1bSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgc8Otw7BhbmknLFxuICAgICAgICAgICAgczogJ2bDoSBzZWt1bmQnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRpcicsXG4gICAgICAgICAgICBtOiAnZWluIG1pbnV0dHVyJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXR0aXInLFxuICAgICAgICAgICAgaDogJ2VpbiB0w61taScsXG4gICAgICAgICAgICBoaDogJyVkIHTDrW1hcicsXG4gICAgICAgICAgICBkOiAnZWluIGRhZ3VyJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgTTogJ2VpbiBtw6FuYcOwdXInLFxuICAgICAgICAgICAgTU06ICclZCBtw6FuYcOwaXInLFxuICAgICAgICAgICAgeTogJ2VpdHQgw6FyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw6FyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGcmVuY2ggW2ZyXVxuLy8hIGF1dGhvciA6IEpvaG4gRmlzY2hlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qZnJvZmZpY2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTdHJpY3RSZWdleCA9XG4gICAgICAgICAgICAvXihqYW52aWVyfGbDqXZyaWVyfG1hcnN8YXZyaWx8bWFpfGp1aW58anVpbGxldHxhb8O7dHxzZXB0ZW1icmV8b2N0b2JyZXxub3ZlbWJyZXxkw6ljZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXggPVxuICAgICAgICAgICAgLyhqYW52XFwuP3xmw6l2clxcLj98bWFyc3xhdnJcXC4/fG1haXxqdWlufGp1aWxcXC4/fGFvw7t0fHNlcHRcXC4/fG9jdFxcLj98bm92XFwuP3xkw6ljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgLyhqYW52XFwuP3xmw6l2clxcLj98bWFyc3xhdnJcXC4/fG1haXxqdWlufGp1aWxcXC4/fGFvw7t0fHNlcHRcXC4/fG9jdFxcLj98bm92XFwuP3xkw6ljXFwuP3xqYW52aWVyfGbDqXZyaWVyfG1hcnN8YXZyaWx8bWFpfGp1aW58anVpbGxldHxhb8O7dHxzZXB0ZW1icmV8b2N0b2JyZXxub3ZlbWJyZXxkw6ljZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15qYW52L2ksXG4gICAgICAgICAgICAvXmbDqXZyL2ksXG4gICAgICAgICAgICAvXm1hcnMvaSxcbiAgICAgICAgICAgIC9eYXZyL2ksXG4gICAgICAgICAgICAvXm1haS9pLFxuICAgICAgICAgICAgL15qdWluL2ksXG4gICAgICAgICAgICAvXmp1aWwvaSxcbiAgICAgICAgICAgIC9eYW/Du3QvaSxcbiAgICAgICAgICAgIC9ec2VwdC9pLFxuICAgICAgICAgICAgL15vY3QvaSxcbiAgICAgICAgICAgIC9ebm92L2ksXG4gICAgICAgICAgICAvXmTDqWMvaSxcbiAgICAgICAgXTtcblxuICAgIHZhciBmciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZyJywge1xuICAgICAgICBtb250aHM6ICdqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiBtb250aHNTdHJpY3RSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogbW9udGhzU2hvcnRTdHJpY3RSZWdleCxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RpX2x1X21hX21lX2plX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFucyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaWwgeSBhICVzJyxcbiAgICAgICAgICAgIHM6ICdxdWVscXVlcyBzZWNvbmRlcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZGVzJyxcbiAgICAgICAgICAgIG06ICd1bmUgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAndW5lIGhldXJlJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgICAgIGQ6ICd1biBqb3VyJyxcbiAgICAgICAgICAgIGRkOiAnJWQgam91cnMnLFxuICAgICAgICAgICAgdzogJ3VuZSBzZW1haW5lJyxcbiAgICAgICAgICAgIHd3OiAnJWQgc2VtYWluZXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1vaXMnLFxuICAgICAgICAgICAgTU06ICclZCBtb2lzJyxcbiAgICAgICAgICAgIHk6ICd1biBhbicsXG4gICAgICAgICAgICB5eTogJyVkIGFucycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnwpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IFJldHVybiAnZScgd2hlbiBkYXkgb2YgbW9udGggPiAxLiBNb3ZlIHRoaXMgY2FzZSBpbnNpZGVcbiAgICAgICAgICAgICAgICAvLyBibG9jayBmb3IgbWFzY3VsaW5lIHdvcmRzIGJlbG93LlxuICAgICAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMzM3NVxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGcmVuY2ggKENhbmFkYSkgW2ZyLWNhXVxuLy8hIGF1dGhvciA6IEpvbmF0aGFuIEFib3VyYmloIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmJjYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGZyQ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmci1jYScsIHtcbiAgICAgICAgbW9udGhzOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZGlfbHVfbWFfbWVfamVfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0F1am91cmTigJlodWkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRGVtYWluIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0hpZXIgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZGVybmllciDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYW5zICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdpbCB5IGEgJXMnLFxuICAgICAgICAgICAgczogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kZXMnLFxuICAgICAgICAgICAgbTogJ3VuZSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICd1bmUgaGV1cmUnLFxuICAgICAgICAgICAgaGg6ICclZCBoZXVyZXMnLFxuICAgICAgICAgICAgZDogJ3VuIGpvdXInLFxuICAgICAgICAgICAgZGQ6ICclZCBqb3VycycsXG4gICAgICAgICAgICBNOiAndW4gbW9pcycsXG4gICAgICAgICAgICBNTTogJyVkIG1vaXMnLFxuICAgICAgICAgICAgeTogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfGUpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmckNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyZW5jaCAoU3dpdHplcmxhbmQpIFtmci1jaF1cbi8vISBhdXRob3IgOiBHYXNwYXJkIEJ1Y2hlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXNwYXJkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZnJDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZyLWNoJywge1xuICAgICAgICBtb250aHM6ICdqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZGltLl9sdW4uX21hci5fbWVyLl9qZXUuX3Zlbi5fc2FtLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkaV9sdV9tYV9tZV9qZV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RhbnMgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2lsIHkgYSAlcycsXG4gICAgICAgICAgICBzOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRlcycsXG4gICAgICAgICAgICBtOiAndW5lIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ3VuZSBoZXVyZScsXG4gICAgICAgICAgICBoaDogJyVkIGhldXJlcycsXG4gICAgICAgICAgICBkOiAndW4gam91cicsXG4gICAgICAgICAgICBkZDogJyVkIGpvdXJzJyxcbiAgICAgICAgICAgIE06ICd1biBtb2lzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9pcycsXG4gICAgICAgICAgICB5OiAndW4gYW4nLFxuICAgICAgICAgICAgeXk6ICclZCBhbnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXJ8ZSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnJDaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGcmlzaWFuIFtmeV1cbi8vISBhdXRob3IgOiBSb2JpbiB2YW4gZGVyIFZsaWV0IDogaHR0cHM6Ly9naXRodWIuY29tL3JvYmluMHZhbjBkZXIwdlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPVxuICAgICAgICAgICAgJ2phbi5fZmViLl9tcnQuX2Fwci5fbWFpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPVxuICAgICAgICAgICAgJ2phbl9mZWJfbXJ0X2Fwcl9tYWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVzJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIGZ5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnknLCB7XG4gICAgICAgIG1vbnRoczogJ2phbm5ld2FyaXNfZmVicmV3YXJpc19tYWFydF9hcHJpbF9tYWFpZV9qdW55X2p1bHlfYXVndXN0dXNfc2VwdGltYmVyX29rdG9iZXJfbm92aW1iZXJfZGVzaW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ3NuZWluX21vYW5kZWlfdGlpc2RlaV93b2Fuc2RlaV90b25nZXJzZGVpX2ZyZWVkX3NuZW9uJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc2kuX21vLl90aS5fd28uX3RvLl9mci5fc28uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NpX01vX1RpX1dvX1RvX0ZyX1NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toam9lZCBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb2FybiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdXN0ZXIgb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW8O0ZnLDu25lXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvZXIgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGx5bicsXG4gICAgICAgICAgICBzOiAnaW4gcGVhciBzZWtvbmRlbicsXG4gICAgICAgICAgICBzczogJyVkIHNla29uZGVuJyxcbiAgICAgICAgICAgIG06ICdpZW4gbWluw7p0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoOiAnaWVuIG9lcmUnLFxuICAgICAgICAgICAgaGg6ICclZCBvZXJlbicsXG4gICAgICAgICAgICBkOiAnaWVuIGRlaScsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2VuJyxcbiAgICAgICAgICAgIE06ICdpZW4gbW9hbm5lJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9hbm5lbicsXG4gICAgICAgICAgICB5OiAnaWVuIGppZXInLFxuICAgICAgICAgICAgeXk6ICclZCBqaWVycmVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIG51bWJlciArXG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwID8gJ3N0ZScgOiAnZGUnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IElyaXNoIG9yIElyaXNoIEdhZWxpYyBbZ2FdXG4vLyEgYXV0aG9yIDogQW5kcsOpIFNpbHZhIDogaHR0cHM6Ly9naXRodWIuY29tL2Fza3B0XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAgICAgJ0VhbsOhaXInLFxuICAgICAgICAgICAgJ0ZlYWJocmEnLFxuICAgICAgICAgICAgJ03DoXJ0YScsXG4gICAgICAgICAgICAnQWlicmXDoW4nLFxuICAgICAgICAgICAgJ0JlYWx0YWluZScsXG4gICAgICAgICAgICAnTWVpdGhlYW1oJyxcbiAgICAgICAgICAgICdJw7ppbCcsXG4gICAgICAgICAgICAnTMO6bmFzYScsXG4gICAgICAgICAgICAnTWXDoW4gRsOzbWhhaXInLFxuICAgICAgICAgICAgJ0RlaXJlYWRoIEbDs21oYWlyJyxcbiAgICAgICAgICAgICdTYW1oYWluJyxcbiAgICAgICAgICAgICdOb2xsYWlnJyxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSBbXG4gICAgICAgICAgICAnRWFuJyxcbiAgICAgICAgICAgICdGZWFiaCcsXG4gICAgICAgICAgICAnTcOhcnQnLFxuICAgICAgICAgICAgJ0FpYicsXG4gICAgICAgICAgICAnQmVhbCcsXG4gICAgICAgICAgICAnTWVpdGgnLFxuICAgICAgICAgICAgJ0nDumlsJyxcbiAgICAgICAgICAgICdMw7puJyxcbiAgICAgICAgICAgICdNLkYuJyxcbiAgICAgICAgICAgICdELkYuJyxcbiAgICAgICAgICAgICdTYW1oJyxcbiAgICAgICAgICAgICdOb2xsJyxcbiAgICAgICAgXSxcbiAgICAgICAgd2Vla2RheXMgPSBbXG4gICAgICAgICAgICAnRMOpIERvbWhuYWlnaCcsXG4gICAgICAgICAgICAnRMOpIEx1YWluJyxcbiAgICAgICAgICAgICdEw6kgTcOhaXJ0JyxcbiAgICAgICAgICAgICdEw6kgQ8OpYWRhb2luJyxcbiAgICAgICAgICAgICdEw6lhcmRhb2luJyxcbiAgICAgICAgICAgICdEw6kgaEFvaW5lJyxcbiAgICAgICAgICAgICdEw6kgU2F0aGFpcm4nLFxuICAgICAgICBdLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0ID0gWydEb21oJywgJ0x1YW4nLCAnTcOhaXJ0JywgJ0PDqWFkJywgJ0TDqWFyJywgJ0FvaW5lJywgJ1NhdGgnXSxcbiAgICAgICAgd2Vla2RheXNNaW4gPSBbJ0RvJywgJ0x1JywgJ03DoScsICdDw6knLCAnRMOpJywgJ0EnLCAnU2EnXTtcblxuICAgIHZhciBnYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dhJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRoc1Nob3J0LFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IHdlZWtkYXlzU2hvcnQsXG4gICAgICAgIHdlZWtkYXlzTWluOiB3ZWVrZGF5c01pbixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJbm5pdSBhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBbcOhcmFjaCBhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJbm7DqSBhZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtzZW8gY2FpdGVdIFthZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDsyBzaGluJyxcbiAgICAgICAgICAgIHM6ICdjw7pwbGEgc29pY2luZCcsXG4gICAgICAgICAgICBzczogJyVkIHNvaWNpbmQnLFxuICAgICAgICAgICAgbTogJ27Ds2ltw6lhZCcsXG4gICAgICAgICAgICBtbTogJyVkIG7Ds2ltw6lhZCcsXG4gICAgICAgICAgICBoOiAndWFpciBhbiBjaGxvaWcnLFxuICAgICAgICAgICAgaGg6ICclZCB1YWlyIGFuIGNobG9pZycsXG4gICAgICAgICAgICBkOiAnbMOhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgbMOhJyxcbiAgICAgICAgICAgIE06ICdtw60nLFxuICAgICAgICAgICAgTU06ICclZCBtw61vbm5hJyxcbiAgICAgICAgICAgIHk6ICdibGlhaW4nLFxuICAgICAgICAgICAgeXk6ICclZCBibGlhaW4nLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZHxuYXxtaCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gbnVtYmVyID09PSAxID8gJ2QnIDogbnVtYmVyICUgMTAgPT09IDIgPyAnbmEnIDogJ21oJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBnYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTY290dGlzaCBHYWVsaWMgW2dkXVxuLy8hIGF1dGhvciA6IEpvbiBBc2hkb3duIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmFzaGRvd25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICAgICAnQW0gRmFvaWxsZWFjaCcsXG4gICAgICAgICAgICAnQW4gR2VhcnJhbicsXG4gICAgICAgICAgICAnQW0gTcOgcnQnLFxuICAgICAgICAgICAgJ0FuIEdpYmxlYW4nLFxuICAgICAgICAgICAgJ0FuIEPDqGl0ZWFuJyxcbiAgICAgICAgICAgICdBbiB0LcOSZ21oaW9zJyxcbiAgICAgICAgICAgICdBbiB0LUl1Y2hhcicsXG4gICAgICAgICAgICAnQW4gTMO5bmFzdGFsJyxcbiAgICAgICAgICAgICdBbiB0LVN1bHRhaW4nLFxuICAgICAgICAgICAgJ0FuIETDoG1oYWlyJyxcbiAgICAgICAgICAgICdBbiB0LVNhbWhhaW4nLFxuICAgICAgICAgICAgJ0FuIETDuWJobGFjaGQnLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNTaG9ydCA9IFtcbiAgICAgICAgICAgICdGYW9pJyxcbiAgICAgICAgICAgICdHZWFyJyxcbiAgICAgICAgICAgICdNw6BydCcsXG4gICAgICAgICAgICAnR2libCcsXG4gICAgICAgICAgICAnQ8OoaXQnLFxuICAgICAgICAgICAgJ8OSZ21oJyxcbiAgICAgICAgICAgICdJdWNoJyxcbiAgICAgICAgICAgICdMw7luJyxcbiAgICAgICAgICAgICdTdWx0JyxcbiAgICAgICAgICAgICdEw6BtaCcsXG4gICAgICAgICAgICAnU2FtaCcsXG4gICAgICAgICAgICAnRMO5YmgnLFxuICAgICAgICBdLFxuICAgICAgICB3ZWVrZGF5cyA9IFtcbiAgICAgICAgICAgICdEaWTDsm1obmFpY2gnLFxuICAgICAgICAgICAgJ0RpbHVhaW4nLFxuICAgICAgICAgICAgJ0RpbcOgaXJ0JyxcbiAgICAgICAgICAgICdEaWNpYWRhaW4nLFxuICAgICAgICAgICAgJ0RpYXJkYW9pbicsXG4gICAgICAgICAgICAnRGloYW9pbmUnLFxuICAgICAgICAgICAgJ0Rpc2F0aGFpcm5lJyxcbiAgICAgICAgXSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA9IFsnRGlkJywgJ0RpbCcsICdEaW0nLCAnRGljJywgJ0RpYScsICdEaWgnLCAnRGlzJ10sXG4gICAgICAgIHdlZWtkYXlzTWluID0gWydEw7InLCAnTHUnLCAnTcOgJywgJ0NpJywgJ0FyJywgJ0hhJywgJ1NhJ107XG5cbiAgICB2YXIgZ2QgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnZCcsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiB3ZWVrZGF5c1Nob3J0LFxuICAgICAgICB3ZWVrZGF5c01pbjogd2Vla2RheXNNaW4sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQW4tZGl1Z2ggYWlnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0EtbcOgaXJlYWNoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthaWddIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbQW4tZMOoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtzZW8gY2hhaWRoXSBbYWlnXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2FubiBhbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnYmhvIGNoaW9ubiAlcycsXG4gICAgICAgICAgICBzOiAnYmVhZ2FuIGRpb2dhbicsXG4gICAgICAgICAgICBzczogJyVkIGRpb2dhbicsXG4gICAgICAgICAgICBtOiAnbWlvbmFpZCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pb25haWRlYW4nLFxuICAgICAgICAgICAgaDogJ3VhaXInLFxuICAgICAgICAgICAgaGg6ICclZCB1YWlyZWFuJyxcbiAgICAgICAgICAgIGQ6ICdsYXRoYScsXG4gICAgICAgICAgICBkZDogJyVkIGxhdGhhJyxcbiAgICAgICAgICAgIE06ICdtw6xvcycsXG4gICAgICAgICAgICBNTTogJyVkIG3DrG9zYW4nLFxuICAgICAgICAgICAgeTogJ2JsaWFkaG5hJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYmxpYWRobmEnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZHxuYXxtaCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gbnVtYmVyID09PSAxID8gJ2QnIDogbnVtYmVyICUgMTAgPT09IDIgPyAnbmEnIDogJ21oJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBnZDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHYWxpY2lhbiBbZ2xdXG4vLyEgYXV0aG9yIDogSnVhbiBHLiBIdXJ0YWRvIDogaHR0cHM6Ly9naXRodWIuY29tL2p1YW5naHVydGFkb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGdsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ2wnLCB7XG4gICAgICAgIG1vbnRoczogJ3hhbmVpcm9fZmVicmVpcm9fbWFyem9fYWJyaWxfbWFpb194dcOxb194dWxsb19hZ29zdG9fc2V0ZW1icm9fb3V0dWJyb19ub3ZlbWJyb19kZWNlbWJybycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAneGFuLl9mZWIuX21hci5fYWJyLl9tYWkuX3h1w7EuX3h1bC5fYWdvLl9zZXQuX291dC5fbm92Ll9kZWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZG9taW5nb19sdW5zX21hcnRlc19tw6lyY29yZXNfeG92ZXNfdmVucmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tw6lyLl94b3YuX3Zlbi5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbcOpX3hvX3ZlX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3hlICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ8OhcycgOiAnw6EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDscOhICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ8OhcycgOiAnw6EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnw6FzJyA6ICdhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW29udGUgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnw6EnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbb10gZGRkZCBbcGFzYWRvICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ8OhcycgOiAnYScpICsgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgICAgIGlmIChzdHIuaW5kZXhPZigndW4nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ24nICsgc3RyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VuICcgKyBzdHI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdDogJ2hhaSAlcycsXG4gICAgICAgICAgICBzOiAndW5zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VuaGEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhbm8nLFxuICAgICAgICAgICAgeXk6ICclZCBhbm9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBnbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLb25rYW5pIERldmFuYWdhcmkgc2NyaXB0IFtnb20tZGV2YV1cbi8vISBhdXRob3IgOiBUaGUgRGlzY292ZXJlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9XaWtpRGlzY292ZXJlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHM6IFsn4KSl4KWL4KSh4KSv4KS+IOCkuOClheCkleCkguCkoeCkvuCkguCkqOClgCcsICfgpKXgpYvgpKHgpYcg4KS44KWF4KSV4KSC4KShJ10sXG4gICAgICAgICAgICBzczogW251bWJlciArICcg4KS44KWF4KSV4KSC4KSh4KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpLjgpYXgpJXgpILgpKEnXSxcbiAgICAgICAgICAgIG06IFsn4KSP4KSV4KS+IOCkruCkv+Cko+Ckn+CkvuCkqCcsICfgpI/gpJUg4KSu4KS/4KSo4KWC4KSfJ10sXG4gICAgICAgICAgICBtbTogW251bWJlciArICcg4KSu4KS/4KSj4KSf4KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpK7gpL/gpKPgpJ/gpL7gpIInXSxcbiAgICAgICAgICAgIGg6IFsn4KSP4KSV4KS+IOCkteCksOCkvuCkqCcsICfgpI/gpJUg4KS14KSwJ10sXG4gICAgICAgICAgICBoaDogW251bWJlciArICcg4KS14KSw4KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpLXgpLDgpL7gpIInXSxcbiAgICAgICAgICAgIGQ6IFsn4KSP4KSV4KS+IOCkpuCkv+CkuOCkvuCkqCcsICfgpI/gpJUg4KSm4KWA4KS4J10sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcg4KSm4KS/4KS44KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpKbgpYDgpLgnXSxcbiAgICAgICAgICAgIE06IFsn4KSP4KSV4KS+IOCkruCljeCkueCkr+CkqOCljeCkr+CkvuCkqCcsICfgpI/gpJUg4KSu4KWN4KS54KSv4KSo4KWLJ10sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcg4KSu4KWN4KS54KSv4KSo4KWN4KSv4KS+4KSo4KWAJywgbnVtYmVyICsgJyDgpK7gpY3gpLngpK/gpKjgpYcnXSxcbiAgICAgICAgICAgIHk6IFsn4KSP4KSV4KS+IOCkteCksOCljeCkuOCkvuCkqCcsICfgpI/gpJUg4KS14KSw4KWN4KS4J10sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcg4KS14KSw4KWN4KS44KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpLXgpLDgpY3gpLjgpL7gpIInXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZ29tRGV2YSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dvbS1kZXZhJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ+CknOCkvuCkqOClh+CkteCkvuCksOClgF/gpKvgpYfgpKzgpY3gpLDgpYHgpLXgpL7gpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+Ckj+CkquCljeCksOClgOCksl/gpK7gpYdf4KSc4KWC4KSoX+CknOClgeCksuCkr1/gpJHgpJfgpLjgpY3gpJ9f4KS44KSq4KWN4KSf4KWH4KSC4KSs4KSwX+CkkeCkleCljeCkn+Cli+CkrOCksF/gpKjgpYvgpLXgpY3gpLngpYfgpILgpKzgpLBf4KSh4KS/4KS44KWH4KSC4KSs4KSwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ+CknOCkvuCkqOClh+CkteCkvuCksOClgOCkmuCljeCkr+Ckvl/gpKvgpYfgpKzgpY3gpLDgpYHgpLXgpL7gpLDgpYDgpJrgpY3gpK/gpL5f4KSu4KS+4KSw4KWN4KSa4KS+4KSa4KWN4KSv4KS+X+Ckj+CkquCljeCksOClgOCksuCkvuCkmuCljeCkr+Ckvl/gpK7gpYfgpK/gpL7gpJrgpY3gpK/gpL5f4KSc4KWC4KSo4KS+4KSa4KWN4KSv4KS+X+CknOClgeCksuCkr+CkvuCkmuCljeCkr+Ckvl/gpJHgpJfgpLjgpY3gpJ/gpL7gpJrgpY3gpK/gpL5f4KS44KSq4KWN4KSf4KWH4KSC4KSs4KSw4KS+4KSa4KWN4KSv4KS+X+CkkeCkleCljeCkn+Cli+CkrOCksOCkvuCkmuCljeCkr+Ckvl/gpKjgpYvgpLXgpY3gpLngpYfgpILgpKzgpLDgpL7gpJrgpY3gpK/gpL5f4KSh4KS/4KS44KWH4KSC4KSs4KSw4KS+4KSa4KWN4KSv4KS+Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL01NTU0oXFxzKStEW29EXT8vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgpJzgpL7gpKjgpYcuX+Ckq+Clh+CkrOCljeCksOClgS5f4KSu4KS+4KSw4KWN4KSaX+Ckj+CkquCljeCksOClgC5f4KSu4KWHX+CknOClguCkqF/gpJzgpYHgpLIuX+CkkeCkly5f4KS44KSq4KWN4KSf4KWH4KSCLl/gpJHgpJXgpY3gpJ/gpYsuX+CkqOCli+CkteCljeCkueClh+Ckgi5f4KSh4KS/4KS44KWH4KSCLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+CkhuCkr+CkpOCkvuCksF/gpLjgpYvgpK7gpL7gpLBf4KSu4KSC4KSX4KSz4KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpKzgpL/gpLDgpYfgpLjgpY3gpKTgpL7gpLBf4KS44KWB4KSV4KWN4KSw4KS+4KSwX+CktuClh+CkqOCkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CkhuCkr+CkpC5f4KS44KWL4KSuLl/gpK7gpILgpJfgpLMuX+CkrOClgeCkpy5f4KSs4KWN4KSw4KWH4KS44KWN4KSkLl/gpLjgpYHgpJXgpY3gpLAuX+CktuClh+CkqC4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KSGX+CkuOCli1/gpK7gpIJf4KSs4KWBX+CkrOCljeCksOClh1/gpLjgpYFf4KS24KWHJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSBb4KS14KS+4KSc4KSk4KS+4KSCXScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MgW+CkteCkvuCknOCkpOCkvuCkgl0nLFxuICAgICAgICAgICAgTDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBBIGg6bW0gW+CkteCkvuCknOCkpOCkvuCkgl0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRG8sIFlZWVksIEEgaDptbSBb4KS14KS+4KSc4KSk4KS+4KSCXScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkLCBEIE1NTSBZWVlZLCBBIGg6bW0gW+CkteCkvuCknOCkpOCkvuCkgl0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgpIbgpK/gpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KSr4KS+4KSy4KWN4KSv4KS+4KSCXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vgpKvgpYHgpKHgpLLgpYtdIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgpJXgpL7gpLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+Ckq+CkvuCkn+CksuCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgpIbgpKbgpYDgpIInLFxuICAgICAgICAgICAgczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o4KS14KWH4KSwKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgb3JkaW5hbCAn4KS14KWH4KSwJyBvbmx5IGFwcGxpZXMgdG8gZGF5IG9mIHRoZSBtb250aFxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+CkteClh+CksCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrXG4gICAgICAgICAgICBkb3k6IDMsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhciAoNyArIDAgLSA0KVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4KSw4KS+4KSk4KWAfOCkuOCkleCkvuCks+ClgOCkgnzgpKbgpKjgpKrgpL7gpLDgpL7gpIJ84KS44KS+4KSC4KSc4KWHLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSw4KS+4KSk4KWAJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KSV4KS+4KSz4KWA4KSCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCkqOCkquCkvuCksOCkvuCkgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+IDEyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpL7gpILgpJzgpYcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpJXgpL7gpLPgpYDgpIInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuCkqOCkquCkvuCksOCkvuCkgic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSC4KSc4KWHJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpYAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdvbURldmE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS29ua2FuaSBMYXRpbiBzY3JpcHQgW2dvbS1sYXRuXVxuLy8hIGF1dGhvciA6IFRoZSBEaXNjb3ZlcmVyIDogaHR0cHM6Ly9naXRodWIuY29tL1dpa2lEaXNjb3ZlcmVyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgczogWyd0aG9kZGVhIHNla29uZGFtbmknLCAndGhvZGRlIHNla29uZCddLFxuICAgICAgICAgICAgc3M6IFtudW1iZXIgKyAnIHNla29uZGFtbmknLCBudW1iZXIgKyAnIHNla29uZCddLFxuICAgICAgICAgICAgbTogWydla2EgbWludGFuJywgJ2VrIG1pbnV0J10sXG4gICAgICAgICAgICBtbTogW251bWJlciArICcgbWludGFtbmknLCBudW1iZXIgKyAnIG1pbnRhbSddLFxuICAgICAgICAgICAgaDogWydla2Egdm9yYW4nLCAnZWsgdm9yJ10sXG4gICAgICAgICAgICBoaDogW251bWJlciArICcgdm9yYW1uaScsIG51bWJlciArICcgdm9yYW0nXSxcbiAgICAgICAgICAgIGQ6IFsnZWthIGRpc2FuJywgJ2VrIGRpcyddLFxuICAgICAgICAgICAgZGQ6IFtudW1iZXIgKyAnIGRpc2FtbmknLCBudW1iZXIgKyAnIGRpcyddLFxuICAgICAgICAgICAgTTogWydla2EgbWhvaW5lYW4nLCAnZWsgbWhvaW5vJ10sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcgbWhvaW5lYW1uaScsIG51bWJlciArICcgbWhvaW5lJ10sXG4gICAgICAgICAgICB5OiBbJ2VrYSB2b3JzYW4nLCAnZWsgdm9yb3MnXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyB2b3JzYW1uaScsIG51bWJlciArICcgdm9yc2FtJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGdvbUxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnb20tbGF0bicsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICdKYW5lcl9GZWJyZXJfTWFyc19BYnJpbF9NYWlfSnVuX0p1bGFpX0Fnb3N0X1NldGVtYnJfT3R1YnJfTm92ZW1icl9EZXplbWJyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ0phbmVyYWNoZWFfRmVicmVyYWNoZWFfTWFyc2FjaGVhX0FicmlsYWNoZWFfTWFpYWNoZWFfSnVuYWNoZWFfSnVsYWlhY2hlYV9BZ29zdGFjaGVhX1NldGVtYnJhY2hlYV9PdHVicmFjaGVhX05vdmVtYnJhY2hlYV9EZXplbWJyYWNoZWEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvTU1NTShcXHMpK0Rbb0RdPy8sXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ0phbi5fRmViLl9NYXJzX0Fici5fTWFpX0p1bl9KdWwuX0Fnby5fU2V0Ll9PdHUuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6IFwiQWl0YXJfU29tYXJfTW9uZ2xsYXJfQnVkaHZhcl9CaXJlc3Rhcl9TdWtyYXJfU29uJ3ZhclwiLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdBaXQuX1NvbS5fTW9uLl9CdWQuX0JyZS5fU3VrLl9Tb24uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0FpX1NtX01vX0J1X0JyX1N1X1NuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyBbdmF6dGFdJyxcbiAgICAgICAgICAgIEw6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRG8sIFlZWVksIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVksIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQWl6XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ZhbGVhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbRnVkZGxvXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2FsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tGYXR0bG9dIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWRpbScsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcikvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG9yZGluYWwgJ2VyJyBvbmx5IGFwcGxpZXMgdG8gZGF5IG9mIHRoZSBtb250aFxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ2VyJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWtcbiAgICAgICAgICAgIGRveTogMywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyICg3ICsgMCAtIDQpXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9yYXRpfHNva2FsbGltfGRvbnBhcmFtfHNhbmplLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncmF0aScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3Nva2FsbGltJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2RvbnBhcmFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID4gMTIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NhbmplJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JhdGknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3Nva2FsbGltJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb25wYXJhbSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc2FuamUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JhdGknO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdvbUxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR3VqYXJhdGkgW2d1XVxuLy8hIGF1dGhvciA6IEthdXNoaWsgVGhhbmtpIDogaHR0cHM6Ly9naXRodWIuY29tL0thdXNoaWsxOTg3XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+CrpycsXG4gICAgICAgICAgICAyOiAn4KuoJyxcbiAgICAgICAgICAgIDM6ICfgq6knLFxuICAgICAgICAgICAgNDogJ+CrqicsXG4gICAgICAgICAgICA1OiAn4KurJyxcbiAgICAgICAgICAgIDY6ICfgq6wnLFxuICAgICAgICAgICAgNzogJ+CrrScsXG4gICAgICAgICAgICA4OiAn4KuuJyxcbiAgICAgICAgICAgIDk6ICfgq68nLFxuICAgICAgICAgICAgMDogJ+CrpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgq6cnOiAnMScsXG4gICAgICAgICAgICAn4KuoJzogJzInLFxuICAgICAgICAgICAgJ+CrqSc6ICczJyxcbiAgICAgICAgICAgICfgq6onOiAnNCcsXG4gICAgICAgICAgICAn4KurJzogJzUnLFxuICAgICAgICAgICAgJ+CrrCc6ICc2JyxcbiAgICAgICAgICAgICfgq60nOiAnNycsXG4gICAgICAgICAgICAn4KuuJzogJzgnLFxuICAgICAgICAgICAgJ+Crryc6ICc5JyxcbiAgICAgICAgICAgICfgq6YnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgZ3UgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdndScsIHtcbiAgICAgICAgbW9udGhzOiAn4Kqc4Kq+4Kqo4KuN4Kqv4KuB4KqG4Kqw4KuAX+Cqq+Crh+CqrOCrjeCqsOCrgeCqhuCqsOCrgF/gqq7gqr7gqrDgq43gqppf4KqP4Kqq4KuN4Kqw4Kq/4KqyX+CqruCrh1/gqpzgq4Lgqqhf4Kqc4KuB4Kqy4Kq+4KqIX+CqkeCql+CquOCrjeCqn1/gqrjgqqrgq43gqp/gq4fgqq7gq43gqqzgqrBf4KqR4KqV4KuN4Kqf4KuN4Kqs4KqwX+CqqOCqteCrh+CqruCrjeCqrOCqsF/gqqHgqr/gqrjgq4fgqq7gq43gqqzgqrAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CqnOCqvuCqqOCrjeCqr+CrgS5f4Kqr4KuH4Kqs4KuN4Kqw4KuBLl/gqq7gqr7gqrDgq43gqppf4KqP4Kqq4KuN4Kqw4Kq/Ll/gqq7gq4df4Kqc4KuC4KqoX+CqnOCrgeCqsuCqvi5f4KqR4KqXLl/gqrjgqqrgq43gqp/gq4cuX+CqkeCqleCrjeCqn+CrjS5f4Kqo4Kq14KuHLl/gqqHgqr/gqrjgq4cuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4Kqw4Kq14Kq/4Kq14Kq+4KqwX+CquOCri+CqruCqteCqvuCqsF/gqq7gqoLgqpfgqrPgqrXgqr7gqrBf4Kqs4KuB4Kqn4KuN4Kq14Kq+4KqwX+Cql+CrgeCqsOCrgeCqteCqvuCqsF/gqrbgq4HgqpXgq43gqrDgqrXgqr7gqrBf4Kq24Kqo4Kq/4Kq14Kq+4KqwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4Kqw4Kq14Kq/X+CquOCri+Cqrl/gqq7gqoLgqpfgqrNf4Kqs4KuB4Kqn4KuNX+Cql+CrgeCqsOCrgV/gqrbgq4HgqpXgq43gqrBf4Kq24Kqo4Kq/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CqsF/gqrjgq4tf4Kqu4KqCX+CqrOCrgV/gqpfgq4Ff4Kq24KuBX+Cqticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KqG4KqcXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CqleCqvuCqsuCrh10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+Cql+Cqh+CqleCqvuCqsuCrh10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4Kqq4Kq+4Kqb4Kqy4Kq+XSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCqruCqvicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4Kqq4Kq54KuH4Kqy4Kq+JyxcbiAgICAgICAgICAgIHM6ICfgqoXgqq7gq4HgqpUg4Kqq4Kqz4KuLJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Kq44KuH4KqV4KqC4KqhJyxcbiAgICAgICAgICAgIG06ICfgqo/gqpUg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIGg6ICfgqo/gqpUg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGQ6ICfgqo/gqpUg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIE06ICfgqo/gqpUg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIHk6ICfgqo/gqpUg4Kq14Kqw4KuN4Kq3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Kq14Kqw4KuN4Kq3JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Crp+CrqOCrqeCrquCrq+CrrOCrreCrruCrr+Crpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gR3VqYXJhdGkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gR3VqYXJhdGkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gqrDgqr7gqqR84Kqs4Kqq4KuL4KqwfOCquOCqteCqvuCqsHzgqrjgqr7gqoLgqpwvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgqrDgqr7gqqQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqrjgqrXgqr7gqrAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kqs4Kqq4KuL4KqwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqrjgqr7gqoLgqpwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kqw4Kq+4KqkJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrjgqrXgqr7gqrAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CqrOCqquCri+CqsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kq44Kq+4KqC4KqcJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrDgqr7gqqQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ3U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSGVicmV3IFtoZV1cbi8vISBhdXRob3IgOiBUb21lciBDb2hlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS90b21lclxuLy8hIGF1dGhvciA6IE1vc2hlIFNpbWFudG92IDogaHR0cHM6Ly9naXRodWIuY29tL0RldmVsb3BtZW50SUxcbi8vISBhdXRob3IgOiBUYWwgQXRlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9UYWxBdGVyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgaGUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoZScsIHtcbiAgICAgICAgbW9udGhzOiAn15nXoNeV15DXqF/XpNeR16jXldeQ16hf157XqNelX9eQ16TXqNeZ15xf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXkteV16HXmF/Xodek15jXnteR16hf15DXlden15jXldeR16hf16DXldeR157XkdeoX9eT16bXnteR16gnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9eZ16DXldezX9ek15HXqNezX9ee16jXpV/XkNek16jXs1/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS17Nf16HXpNeY17Nf15DXlden17Nf16DXldeR17Nf15PXptee17MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn16jXkNep15XXn1/Xqdeg15lf16nXnNeZ16nXmV/XqNeR15nXoteZX9eX157Xmdep15lf16nXmdep15lf16nXkdeqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn15DXs1/XkdezX9eS17Nf15PXs1/XlNezX9eV17Nf16nXsycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfXkF/XkV/Xkl/Xk1/XlF/XlV/XqScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFvXkV1NTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFvXkV1NTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ0QvTS9ZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGw6ICdEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vXlNeZ15XXnSDXkda+XUxUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb157Xl9eoINeR1r5dTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvXkdep16LXlF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vXkNeq157XldecINeR1r5dTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb15HXmdeV151dIGRkZGQgW9eU15DXl9eo15XXnyDXkdep16LXlF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfXkdei15XXkyAlcycsXG4gICAgICAgICAgICBwYXN0OiAn15zXpNeg15kgJXMnLFxuICAgICAgICAgICAgczogJ9ee16HXpNeoINep16DXmdeV16onLFxuICAgICAgICAgICAgc3M6ICclZCDXqdeg15nXldeqJyxcbiAgICAgICAgICAgIG06ICfXk9en15QnLFxuICAgICAgICAgICAgbW06ICclZCDXk9en15XXqicsXG4gICAgICAgICAgICBoOiAn16nXoteUJyxcbiAgICAgICAgICAgIGhoOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9ep16LXqteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16LXldeqJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkOiAn15nXldedJyxcbiAgICAgICAgICAgIGRkOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9eZ15XXnteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeZ157XmdedJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBNOiAn15fXldeT16knLFxuICAgICAgICAgICAgTU06IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAn15fXldeT16nXmdeZ150nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXl9eV15PXqdeZ150nO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHk6ICfXqdeg15QnLFxuICAgICAgICAgICAgeXk6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAn16nXoNeq15nXmdedJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciAlIDEwID09PSAwICYmIG51bWJlciAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg16nXoNeUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg16nXoNeZ150nO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTpcbiAgICAgICAgICAgIC/XkNeX15RcItemfNec16TXoNeUXCLXpnzXkNeX16jXmSDXlNem15TXqNeZ15nXnXzXnNek16DXmSDXlNem15TXqNeZ15nXnXzXnNek16DXldeqINeR15XXp9eofNeR15HXlden16h815HXoteo15EvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o15DXl9eUXCLXpnzXkNeX16jXmSDXlNem15TXqNeZ15nXnXzXkdei16jXkSkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn15zXpNeg15XXqiDXkdeV16fXqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn15HXkdeV16fXqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ9ec16TXoNeUXCLXpicgOiAn15zXpNeg15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfXkNeX15RcItemJyA6ICfXkNeX16jXmSDXlNem15TXqNeZ15nXnSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn15HXoteo15EnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEhpbmRpIFtoaV1cbi8vISBhdXRob3IgOiBNYXlhbmsgU2luZ2hhbCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXlhbmtzaW5naGFsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+ClpycsXG4gICAgICAgICAgICAyOiAn4KWoJyxcbiAgICAgICAgICAgIDM6ICfgpaknLFxuICAgICAgICAgICAgNDogJ+ClqicsXG4gICAgICAgICAgICA1OiAn4KWrJyxcbiAgICAgICAgICAgIDY6ICfgpawnLFxuICAgICAgICAgICAgNzogJ+ClrScsXG4gICAgICAgICAgICA4OiAn4KWuJyxcbiAgICAgICAgICAgIDk6ICfgpa8nLFxuICAgICAgICAgICAgMDogJ+ClpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICAgICAn4KWoJzogJzInLFxuICAgICAgICAgICAgJ+ClqSc6ICczJyxcbiAgICAgICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICAgICAn4KWrJzogJzUnLFxuICAgICAgICAgICAgJ+ClrCc6ICc2JyxcbiAgICAgICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICAgICAn4KWuJzogJzgnLFxuICAgICAgICAgICAgJ+Clryc6ICc5JyxcbiAgICAgICAgICAgICfgpaYnOiAnMCcsXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL17gpJzgpKgvaSxcbiAgICAgICAgICAgIC9e4KSr4KS84KSwfOCkq+CksC9pLFxuICAgICAgICAgICAgL17gpK7gpL7gpLDgpY3gpJovaSxcbiAgICAgICAgICAgIC9e4KSF4KSq4KWN4KSw4KWIL2ksXG4gICAgICAgICAgICAvXuCkruCkiC9pLFxuICAgICAgICAgICAgL17gpJzgpYLgpKgvaSxcbiAgICAgICAgICAgIC9e4KSc4KWB4KSyL2ksXG4gICAgICAgICAgICAvXuCkheCkly9pLFxuICAgICAgICAgICAgL17gpLjgpL/gpKTgpIJ84KS44KS/4KSkL2ksXG4gICAgICAgICAgICAvXuCkheCkleCljeCkn+Clgi9pLFxuICAgICAgICAgICAgL17gpKjgpLV84KSo4KS14KSCL2ksXG4gICAgICAgICAgICAvXuCkpuCkv+CkuOCkgnzgpKbgpL/gpLgvaSxcbiAgICAgICAgXSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9e4KSc4KSoL2ksXG4gICAgICAgICAgICAvXuCkq+CkvOCksC9pLFxuICAgICAgICAgICAgL17gpK7gpL7gpLDgpY3gpJovaSxcbiAgICAgICAgICAgIC9e4KSF4KSq4KWN4KSw4KWIL2ksXG4gICAgICAgICAgICAvXuCkruCkiC9pLFxuICAgICAgICAgICAgL17gpJzgpYLgpKgvaSxcbiAgICAgICAgICAgIC9e4KSc4KWB4KSyL2ksXG4gICAgICAgICAgICAvXuCkheCkly9pLFxuICAgICAgICAgICAgL17gpLjgpL/gpKQvaSxcbiAgICAgICAgICAgIC9e4KSF4KSV4KWN4KSf4KWCL2ksXG4gICAgICAgICAgICAvXuCkqOCktS9pLFxuICAgICAgICAgICAgL17gpKbgpL/gpLgvaSxcbiAgICAgICAgXTtcblxuICAgIHZhciBoaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hpJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ+CknOCkqOCkteCksOClgF/gpKvgpLzgpLDgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliOCksl/gpK7gpIhf4KSc4KWC4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLjgpY3gpKRf4KS44KS/4KSk4KSu4KWN4KSs4KSwX+CkheCkleCljeCkn+ClguCkrOCksF/gpKjgpLXgpK7gpY3gpKzgpLBf4KSm4KS/4KS44KSu4KWN4KSs4KSwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfgpJzgpKjgpLXgpLDgpYBf4KSr4KSw4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYjgpLJf4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS44KWN4KSkX+CkuOCkv+CkpOCkguCkrOCksF/gpIXgpJXgpY3gpJ/gpYLgpKzgpLBf4KSo4KS14KSC4KSs4KSwX+CkpuCkv+CkuOCkguCkrOCksCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CknOCkqC5f4KSr4KS84KSwLl/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KWILl/gpK7gpIhf4KSc4KWC4KSoX+CknOClgeCksi5f4KSF4KSXLl/gpLjgpL/gpKQuX+CkheCkleCljeCkn+Clgi5f4KSo4KS1Ll/gpKbgpL/gpLguJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSy4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CksOCkteCkv1/gpLjgpYvgpK5f4KSu4KSC4KSX4KSyX+CkrOClgeCkp1/gpJfgpYHgpLDgpYJf4KS24KWB4KSV4KWN4KSwX+CktuCkqOCkvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgpLBf4KS44KWLX+CkruCkgl/gpKzgpYFf4KSX4KWBX+CktuClgV/gpLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCkrOCknOClhycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkrOCknOClhycsXG4gICAgICAgIH0sXG5cbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBzaG9ydE1vbnRoc1BhcnNlLFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OlxuICAgICAgICAgICAgL14o4KSc4KSo4KS14KSw4KWAfOCknOCkqFxcLj984KSr4KS84KSw4KS14KSw4KWAfOCkq+CksOCkteCksOClgHzgpKvgpLzgpLBcXC4/fOCkruCkvuCksOCljeCkmj984KSF4KSq4KWN4KSw4KWI4KSyfOCkheCkquCljeCksOCliFxcLj984KSu4KSIP3zgpJzgpYLgpKg/fOCknOClgeCksuCkvuCkiHzgpJzgpYHgpLJcXC4/fOCkheCkl+CkuOCljeCkpHzgpIXgpJdcXC4/fOCkuOCkv+CkpOCkruCljeCkrOCksHzgpLjgpL/gpKTgpILgpKzgpLB84KS44KS/4KSkXFwuP3zgpIXgpJXgpY3gpJ/gpYLgpKzgpLB84KSF4KSV4KWN4KSf4KWCXFwuP3zgpKjgpLXgpK7gpY3gpKzgpLB84KSo4KS14KSC4KSs4KSwfOCkqOCktVxcLj984KSm4KS/4KS44KSu4KWN4KSs4KSwfOCkpuCkv+CkuOCkguCkrOCksHzgpKbgpL/gpLhcXC4/KS9pLFxuXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6XG4gICAgICAgICAgICAvXijgpJzgpKjgpLXgpLDgpYB84KSc4KSoXFwuP3zgpKvgpLzgpLDgpLXgpLDgpYB84KSr4KSw4KS14KSw4KWAfOCkq+CkvOCksFxcLj984KSu4KS+4KSw4KWN4KSaP3zgpIXgpKrgpY3gpLDgpYjgpLJ84KSF4KSq4KWN4KSw4KWIXFwuP3zgpK7gpIg/fOCknOClguCkqD984KSc4KWB4KSy4KS+4KSIfOCknOClgeCkslxcLj984KSF4KSX4KS44KWN4KSkfOCkheCkl1xcLj984KS44KS/4KSk4KSu4KWN4KSs4KSwfOCkuOCkv+CkpOCkguCkrOCksHzgpLjgpL/gpKRcXC4/fOCkheCkleCljeCkn+ClguCkrOCksHzgpIXgpJXgpY3gpJ/gpYJcXC4/fOCkqOCkteCkruCljeCkrOCksHzgpKjgpLXgpILgpKzgpLB84KSo4KS1XFwuP3zgpKbgpL/gpLjgpK7gpY3gpKzgpLB84KSm4KS/4KS44KSC4KSs4KSwfOCkpuCkv+CkuFxcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXijgpJzgpKjgpLXgpLDgpYA/fOCkq+CkvOCksOCkteCksOClgHzgpKvgpLDgpLXgpLDgpYA/fOCkruCkvuCksOCljeCkmj984KSF4KSq4KWN4KSw4KWI4KSyP3zgpK7gpIg/fOCknOClguCkqD984KSc4KWB4KSy4KS+4KSIP3zgpIXgpJfgpLjgpY3gpKQ/fOCkuOCkv+CkpOCkruCljeCkrOCksHzgpLjgpL/gpKTgpILgpKzgpLB84KS44KS/4KSkP1xcLj984KSF4KSV4KWN4KSf4KWC4KSs4KSwfOCkheCkleCljeCkn+ClglxcLj984KSo4KS14KSu4KWN4KSs4KSwfOCkqOCkteCkguCkrOCksD984KSm4KS/4KS44KSu4KWN4KSs4KSwfOCkpuCkv+CkuOCkguCkrOCksD8pL2ksXG5cbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKOCknOCkqFxcLj984KSr4KS84KSwXFwuP3zgpK7gpL7gpLDgpY3gpJo/fOCkheCkquCljeCksOCliFxcLj984KSu4KSIP3zgpJzgpYLgpKg/fOCknOClgeCkslxcLj984KSF4KSXXFwuP3zgpLjgpL/gpKRcXC4/fOCkheCkleCljeCkn+ClglxcLj984KSo4KS1XFwuP3zgpKbgpL/gpLhcXC4/KS9pLFxuXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CkhuCknF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpJXgpLJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgpJXgpLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CkquCkv+Ckm+CksuClh10gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgpK7gpYfgpIInLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCkquCkueCksuClhycsXG4gICAgICAgICAgICBzOiAn4KSV4KWB4KSbIOCkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICAgICAgc3M6ICclZCDgpLjgpYfgpJXgpILgpKEnLFxuICAgICAgICAgICAgbTogJ+Ckj+CklSDgpK7gpL/gpKjgpJ8nLFxuICAgICAgICAgICAgbW06ICclZCDgpK7gpL/gpKjgpJ8nLFxuICAgICAgICAgICAgaDogJ+Ckj+CklSDgpJjgpILgpJ/gpL4nLFxuICAgICAgICAgICAgaGg6ICclZCDgpJjgpILgpJ/gpYcnLFxuICAgICAgICAgICAgZDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgTTogJ+Ckj+CklSDgpK7gpLngpYDgpKjgpYcnLFxuICAgICAgICAgICAgTU06ICclZCDgpK7gpLngpYDgpKjgpYcnLFxuICAgICAgICAgICAgeTogJ+Ckj+CklSDgpLXgpLDgpY3gpLcnLFxuICAgICAgICAgICAgeXk6ICclZCDgpLXgpLDgpY3gpLcnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBIaW5kaSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBIaW5kaS5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CksOCkvuCkpHzgpLjgpYHgpKzgpLl84KSm4KWL4KSq4KS54KSwfOCktuCkvuCkri8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOClgeCkrOCkuScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKbgpYvgpKrgpLngpLAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CktuCkvuCkricpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOClgeCkrOCkuSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KWL4KSq4KS54KSwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLbgpL7gpK4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBoaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDcm9hdGlhbiBbaHJdXG4vLyEgYXV0aG9yIDogQm9qYW4gTWFya292acSHIDogaHR0cHM6Ly9naXRodWIuY29tL2JtYXJrb3ZpY1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkbmEgbWludXRhJyA6ICdqZWRuZSBtaW51dGUnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZGFuIHNhdCcgOiAnamVkbm9nIHNhdGEnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlYyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlY2EnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaHInLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2lqZcSNbmphX3ZlbGphxI1lX2/FvnVqa2FfdHJhdm5qYV9zdmlibmphX2xpcG5qYV9zcnBuamFfa29sb3ZvemFfcnVqbmFfbGlzdG9wYWRhX3N0dWRlbm9nYV9wcm9zaW5jYScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAnc2lqZcSNYW5qX3ZlbGphxI1hX2/FvnVqYWtfdHJhdmFual9zdmliYW5qX2xpcGFual9zcnBhbmpfa29sb3Zvel9ydWphbl9saXN0b3BhZF9zdHVkZW5pX3Byb3NpbmFjJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnc2lqLl92ZWxqLl9vxb51Ll90cmEuX3N2aS5fbGlwLl9zcnAuX2tvbC5fcnVqLl9saXMuX3N0dS5fcHJvLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRG8gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0RvIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEbyBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGplbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JpamVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2p1xI1lciB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbHVdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ByaWplICVzJyxcbiAgICAgICAgICAgIHM6ICdwYXIgc2VrdW5kaScsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiAnZGFuJyxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaHI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSHVuZ2FyaWFuIFtodV1cbi8vISBhdXRob3IgOiBBZGFtIEJydW5uZXIgOiBodHRwczovL2dpdGh1Yi5jb20vYWRhbWJydW5uZXJcbi8vISBhdXRob3IgOiBQZXRlciBWaXN6dCAgOiBodHRwczovL2dpdGh1Yi5jb20vcGFzc2F0Z3RcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB3ZWVrRW5kaW5ncyA9XG4gICAgICAgICd2YXPDoXJuYXAgaMOpdGbFkW4ga2VkZGVuIHN6ZXJkw6FuIGNzw7x0w7ZydMO2a8O2biBww6ludGVrZW4gc3pvbWJhdG9uJy5zcGxpdCgnICcpO1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG51bSA9IG51bWJlcjtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4XG4gICAgICAgICAgICAgICAgICAgID8gJ27DqWjDoW55IG3DoXNvZHBlcmMnXG4gICAgICAgICAgICAgICAgICAgIDogJ27DqWjDoW55IG3DoXNvZHBlcmNlJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXgpXG4gICAgICAgICAgICAgICAgICAgID8gJyBtw6Fzb2RwZXJjJ1xuICAgICAgICAgICAgICAgICAgICA6ICcgbcOhc29kcGVyY2UnO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIHBlcmMnIDogJyBwZXJjZScpO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgcGVyYycgOiAnIHBlcmNlJyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw7NyYScgOiAnIMOzcsOhamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOzcmEnIDogJyDDs3LDoWphJyk7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgbmFwJyA6ICcgbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIG5hcCcgOiAnIG5hcGphJyk7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgaMOzbmFwJyA6ICcgaMOzbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIGjDs25hcCcgOiAnIGjDs25hcGphJyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgZnVuY3Rpb24gd2Vlayhpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGlzRnV0dXJlID8gJycgOiAnW23Dumx0XSAnKSArXG4gICAgICAgICAgICAnWycgK1xuICAgICAgICAgICAgd2Vla0VuZGluZ3NbdGhpcy5kYXkoKV0gK1xuICAgICAgICAgICAgJ10gTFRbLWtvcl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGh1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaHUnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnXDoXJfZmVicnXDoXJfbcOhcmNpdXNfw6FwcmlsaXNfbcOhanVzX2rDum5pdXNfasO6bGl1c19hdWd1c3p0dXNfc3plcHRlbWJlcl9va3TDs2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFuLl9mZWIuX23DoXJjLl/DoXByLl9tw6FqLl9qw7puLl9qw7psLl9hdWcuX3N6ZXB0Ll9va3QuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ3Zhc8Ohcm5hcF9ow6l0ZsWRX2tlZGRfc3plcmRhX2Nzw7x0w7ZydMO2a19ww6ludGVrX3N6b21iYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICd2YXNfaMOpdF9rZWRkX3N6ZV9jc8O8dF9ww6luX3N6bycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICd2X2hfa19zemVfY3NfcF9zem8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS5NTS5ERC4nLFxuICAgICAgICAgICAgTEw6ICdZWVlZLiBNTU1NIEQuJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkuIE1NTU0gRC4gSDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWS4gTU1NTSBELiwgZGRkZCBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2RlfGR1L2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgxKS50b0xvd2VyQ2FzZSgpID09PSAndSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPT09IHRydWUgPyAnZGUnIDogJ0RFJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPT09IHRydWUgPyAnZHUnIDogJ0RVJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbbWFdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaG9sbmFwXSBMVFsta29yXScsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t0ZWduYXBdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlZWsuY2FsbCh0aGlzLCBmYWxzZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBtw7psdmEnLFxuICAgICAgICAgICAgcGFzdDogJyVzJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBodTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcm1lbmlhbiBbaHktYW1dXG4vLyEgYXV0aG9yIDogQXJtZW5kYXJhYnlhbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hcm1lbmRhcmFieWFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgaHlBbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h5LWFtJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9Ww1bjWgtW21b7VodaA1atf1oPVpdW/1oDVvtWh1oDVq1/VtNWh1oDVv9WrX9Wh1brWgNWr1azVq1/VtNWh1bXVq9W91atf1bDVuNaC1bbVq9W91atf1bDVuNaC1azVq9W91atf1oXVo9W41b3Vv9W41b3Vq1/VvdWl1brVv9Wl1bTVotWl1oDVq1/VsNW41a/Vv9Wl1bTVotWl1oDVq1/VttW41bXVpdW01aLVpdaA1atf1aTVpdWv1b/VpdW01aLVpdaA1asnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9Ww1bjWgtW21b7VodaAX9aD1aXVv9aA1b7VodaAX9W01aHWgNW/X9Wh1brWgNWr1axf1bTVodW11avVvV/VsNW41oLVttWr1b1f1bDVuNaC1azVq9W9X9aF1aPVuNW91b/VuNW9X9W91aXVutW/1aXVtNWi1aXWgF/VsNW41a/Vv9Wl1bTVotWl1oBf1bbVuNW11aXVtNWi1aXWgF/VpNWl1a/Vv9Wl1bTVotWl1oAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ9Ww1bbVvl/Wg9W/1oBf1bTWgNW/X9Wh1brWgF/VtNW11b1f1bDVttW9X9Ww1azVvV/WhdWj1b1f1b3VutW/X9Ww1a/Vv1/VttW01aJf1aTVr9W/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfVr9Wr1oDVodWv1atf1aXWgNWv1bjWgtW31aHVotWp1atf1aXWgNWl1oTVt9Wh1aLVqdWrX9W51bjWgNWl1oTVt9Wh1aLVqdWrX9Ww1avVttWj1bfVodWi1anVq1/VuNaC1oDVotWh1alf1bfVodWi1aHVqScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVkg1akuJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZINWpLiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZINWpLiwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vVodW11b3WhdaAXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9W+1aHVstWoXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Wl1oDVpdWvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1vVodW21oHVodWuXSBkZGRkIFvWhdaA1agg1arVodW01ahdIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINWw1aXVv9W4JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDVodW81aHVuycsXG4gICAgICAgICAgICBzOiAn1bTVqyDWhNWh1bbVqyDVvtWh1bXWgNWv1bXVodW2JyxcbiAgICAgICAgICAgIHNzOiAnJWQg1b7VodW11oDVr9W11aHVticsXG4gICAgICAgICAgICBtOiAn1oDVuNW61aUnLFxuICAgICAgICAgICAgbW06ICclZCDWgNW41brVpScsXG4gICAgICAgICAgICBoOiAn1arVodW0JyxcbiAgICAgICAgICAgIGhoOiAnJWQg1arVodW0JyxcbiAgICAgICAgICAgIGQ6ICfWhdaAJyxcbiAgICAgICAgICAgIGRkOiAnJWQg1oXWgCcsXG4gICAgICAgICAgICBNOiAn1aHVtNWr1b0nLFxuICAgICAgICAgICAgTU06ICclZCDVodW01avVvScsXG4gICAgICAgICAgICB5OiAn1b/VodaA1asnLFxuICAgICAgICAgICAgeXk6ICclZCDVv9Wh1oDVqycsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Vo9Wr1bfVpdaA1b7VoXzVodW81aHVvtW41b/VvtWhfNaB1aXWgNWl1a/VvtWhfNWl1oDVpdWv1bjVtdWh1bYvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijWgdWl1oDVpdWv1b7VoXzVpdaA1aXVr9W41bXVodW2KSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1aPVq9W31aXWgNW+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Wh1bzVodW+1bjVv9W+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9aB1aXWgNWl1a/VvtWhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfVpdaA1aXVr9W41bXVodW2JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9fFxcZHsxLDJ9LSjVq9W2fNaA1aQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREbyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdWr1bYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdaA1aQnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBoeUFtO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEluZG9uZXNpYW4gW2lkXVxuLy8hIGF1dGhvciA6IE1vaGFtbWFkIFNhdHJpbyBVdG9tbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS90eW9rXG4vLyEgcmVmZXJlbmNlOiBodHRwOi8vaWQud2lraXNvdXJjZS5vcmcvd2lraS9QZWRvbWFuX1VtdW1fRWphYW5fQmFoYXNhX0luZG9uZXNpYV95YW5nX0Rpc2VtcHVybmFrYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBpZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lkJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWVpX0p1bl9KdWxfQWd0X1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdNaW5nZ3VfU2VuaW5fU2VsYXNhX1JhYnVfS2FtaXNfSnVtYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdNaW5fU2VuX1NlbF9SYWJfS2FtX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnTWdfU25fU2xfUmJfS21fSm1fU2InLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9wYWdpfHNpYW5nfHNvcmV8bWFsYW0vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpYW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb3JlJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc2lhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb3JlJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0Jlc29rIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0tlbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGFsdSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgeWFuZyBsYWx1JyxcbiAgICAgICAgICAgIHM6ICdiZWJlcmFwYSBkZXRpaycsXG4gICAgICAgICAgICBzczogJyVkIGRldGlrJyxcbiAgICAgICAgICAgIG06ICdzZW1lbml0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWVuaXQnLFxuICAgICAgICAgICAgaDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQ6ICdzZWhhcmknLFxuICAgICAgICAgICAgZGQ6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE06ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnVsYW4nLFxuICAgICAgICAgICAgeTogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXk6ICclZCB0YWh1bicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBpZDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJY2VsYW5kaWMgW2lzXVxuLy8hIGF1dGhvciA6IEhpbnJpayDDlnJuIFNpZ3Vyw7Bzc29uIDogaHR0cHM6Ly9naXRodWIuY29tL2hpbnJpa1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgaWYgKG4gJSAxMDAgPT09IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChuICUgMTAgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmVcbiAgICAgICAgICAgICAgICAgICAgPyAnbm9ra3JhciBzZWvDum5kdXInXG4gICAgICAgICAgICAgICAgICAgIDogJ25va2tydW0gc2Vrw7puZHVtJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArXG4gICAgICAgICAgICAgICAgICAgICAgICAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWvDum5kdXInIDogJ3Nla8O6bmR1bScpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnc2Vrw7puZGEnO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbcOtbsO6dGEnIDogJ23DrW7DunR1JztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ23DrW7DunR1cicgOiAnbcOtbsO6dHVtJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAna2x1a2t1c3R1bmRpcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdrbHVra3VzdHVuZHVtJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdrbHVra3VzdHVuZCc7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RhZ3VyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2RhZycgOiAnZGVnaSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RhZ2FyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ2RhZ2EnIDogJ2TDtmd1bScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RhZ3VyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdkYWcnIDogJ2RlZ2knKTtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbcOhbnXDsHVyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ23DoW51w7AnIDogJ23DoW51w7BpJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOhbnXDsGlyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ23DoW51w7BpJyA6ICdtw6FudcOwdW0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw6FudcOwdXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ23DoW51w7AnIDogJ23DoW51w7BpJyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcmknO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnw6FyJyA6ICfDoXJ1bScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnw6FyJyA6ICfDoXJpJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpcycsIHtcbiAgICAgICAgbW9udGhzOiAnamFuw7phcl9mZWJyw7phcl9tYXJzX2FwcsOtbF9tYcOtX2rDum7DrV9qw7psw61fw6Fnw7pzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbsOzdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYcOtX2rDum5fasO6bF/DoWfDul9zZXBfb2t0X27Ds3ZfZGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdzdW5udWRhZ3VyX23DoW51ZGFndXJfw75yacOwanVkYWd1cl9tacOwdmlrdWRhZ3VyX2ZpbW10dWRhZ3VyX2bDtnN0dWRhZ3VyX2xhdWdhcmRhZ3VyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzdW5fbcOhbl/DvnJpX21pw7BfZmltX2bDtnNfbGF1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X03DoV/DnnJfTWlfRmlfRsO2X0xhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbw60gZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vDoSBtb3JndW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vDrSBnw6ZyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbc8Otw7Bhc3RhXSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZWZ0aXIgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2Z5cmlyICVzIHPDrcOwYW4nLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiAna2x1a2t1c3R1bmQnLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBpcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJdGFsaWFuIFtpdF1cbi8vISBhdXRob3IgOiBMb3JlbnpvIDogaHR0cHM6Ly9naXRodWIuY29tL2FsaWVtXG4vLyEgYXV0aG9yOiBNYXR0aWEgTGFyZW50aXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub3N0YWxnaWF6XG4vLyEgYXV0aG9yOiBNYXJjbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9NYW5mcmU5OFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGl0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXQnLCB7XG4gICAgICAgIG1vbnRoczogJ2dlbm5haW9fZmViYnJhaW9fbWFyem9fYXByaWxlX21hZ2dpb19naXVnbm9fbHVnbGlvX2Fnb3N0b19zZXR0ZW1icmVfb3R0b2JyZV9ub3ZlbWJyZV9kaWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdnZW5fZmViX21hcl9hcHJfbWFnX2dpdV9sdWdfYWdvX3NldF9vdHRfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21lbmljYV9sdW5lZMOsX21hcnRlZMOsX21lcmNvbGVkw6xfZ2lvdmVkw6xfdmVuZXJkw6xfc2FiYXRvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tX2x1bl9tYXJfbWVyX2dpb192ZW5fc2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX21lX2dpX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW09nZ2kgYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpID4gMSA/ICdsbGUgJyA6IHRoaXMuaG91cnMoKSA9PT0gMCA/ICcgJyA6IFwibGwnXCIpICtcbiAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW0RvbWFuaSBhJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgPiAxID8gJ2xsZSAnIDogdGhpcy5ob3VycygpID09PSAwID8gJyAnIDogXCJsbCdcIikgK1xuICAgICAgICAgICAgICAgICAgICAnXUxUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnZGRkZCBbYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpID4gMSA/ICdsbGUgJyA6IHRoaXMuaG91cnMoKSA9PT0gMCA/ICcgJyA6IFwibGwnXCIpICtcbiAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW0llcmkgYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpID4gMSA/ICdsbGUgJyA6IHRoaXMuaG91cnMoKSA9PT0gMCA/ICcgJyA6IFwibGwnXCIpICtcbiAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tMYSBzY29yc2FdIGRkZGQgW2EnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpID4gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdsbGUgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuaG91cnMoKSA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbTG8gc2NvcnNvXSBkZGRkIFthJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbGxlICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmhvdXJzKCkgPT09IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJsbCdcIikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3RyYSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgZmEnLFxuICAgICAgICAgICAgczogJ2FsY3VuaSBzZWNvbmRpJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kaScsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRpJyxcbiAgICAgICAgICAgIGg6IFwidW4nb3JhXCIsXG4gICAgICAgICAgICBoaDogJyVkIG9yZScsXG4gICAgICAgICAgICBkOiAndW4gZ2lvcm5vJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZ2lvcm5pJyxcbiAgICAgICAgICAgIHc6ICd1bmEgc2V0dGltYW5hJyxcbiAgICAgICAgICAgIHd3OiAnJWQgc2V0dGltYW5lJyxcbiAgICAgICAgICAgIE06ICd1biBtZXNlJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzaScsXG4gICAgICAgICAgICB5OiAndW4gYW5ubycsXG4gICAgICAgICAgICB5eTogJyVkIGFubmknLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGl0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEl0YWxpYW4gKFN3aXR6ZXJsYW5kKSBbaXQtY2hdXG4vLyEgYXV0aG9yIDogeGZoIDogaHR0cHM6Ly9naXRodWIuY29tL3hmaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGl0Q2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpdC1jaCcsIHtcbiAgICAgICAgbW9udGhzOiAnZ2VubmFpb19mZWJicmFpb19tYXJ6b19hcHJpbGVfbWFnZ2lvX2dpdWdub19sdWdsaW9fYWdvc3RvX3NldHRlbWJyZV9vdHRvYnJlX25vdmVtYnJlX2RpY2VtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2dlbl9mZWJfbWFyX2Fwcl9tYWdfZ2l1X2x1Z19hZ29fc2V0X290dF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ2RvbWVuaWNhX2x1bmVkw6xfbWFydGVkw6xfbWVyY29sZWTDrF9naW92ZWTDrF92ZW5lcmTDrF9zYWJhdG8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb21fbHVuX21hcl9tZXJfZ2lvX3Zlbl9zYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWVfZ2lfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tPZ2dpIGFsbGVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRG9tYW5pIGFsbGVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYWxsZV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJZXJpIGFsbGVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xhIHNjb3JzYV0gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbG8gc2NvcnNvXSBkZGRkIFthbGxlXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoL15bMC05XS4rJC8udGVzdChzKSA/ICd0cmEnIDogJ2luJykgKyAnICcgKyBzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBmYScsXG4gICAgICAgICAgICBzOiAnYWxjdW5pIHNlY29uZGknLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRpJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaDogXCJ1bidvcmFcIixcbiAgICAgICAgICAgIGhoOiAnJWQgb3JlJyxcbiAgICAgICAgICAgIGQ6ICd1biBnaW9ybm8nLFxuICAgICAgICAgICAgZGQ6ICclZCBnaW9ybmknLFxuICAgICAgICAgICAgTTogJ3VuIG1lc2UnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNpJyxcbiAgICAgICAgICAgIHk6ICd1biBhbm5vJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5uaScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaXRDaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBKYXBhbmVzZSBbamFdXG4vLyEgYXV0aG9yIDogTEkgTG9uZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iYXJ5b25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBqYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2phJywge1xuICAgICAgICBlcmFzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcyMDE5LTA1LTAxJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ+S7pOWSjCcsXG4gICAgICAgICAgICAgICAgbmFycm93OiAn44u/JyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnUicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMTk4OS0wMS0wOCcsXG4gICAgICAgICAgICAgICAgdW50aWw6ICcyMDE5LTA0LTMwJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ+W5s+aIkCcsXG4gICAgICAgICAgICAgICAgbmFycm93OiAn4427JyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnSCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMTkyNi0xMi0yNScsXG4gICAgICAgICAgICAgICAgdW50aWw6ICcxOTg5LTAxLTA3JyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ+aYreWSjCcsXG4gICAgICAgICAgICAgICAgbmFycm93OiAn4428JyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnUycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMTkxMi0wNy0zMCcsXG4gICAgICAgICAgICAgICAgdW50aWw6ICcxOTI2LTEyLTI0JyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ+Wkp+atoycsXG4gICAgICAgICAgICAgICAgbmFycm93OiAn4429JyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnVCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMTg3My0wMS0wMScsXG4gICAgICAgICAgICAgICAgdW50aWw6ICcxOTEyLTA3LTI5JyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDYsXG4gICAgICAgICAgICAgICAgbmFtZTogJ+aYjuayuycsXG4gICAgICAgICAgICAgICAgbmFycm93OiAn442+JyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnTScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMS0wMS0wMScsXG4gICAgICAgICAgICAgICAgdW50aWw6ICcxODczLTEyLTMxJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ+ilv+aapicsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQUQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdBRCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMC0xMi0zMScsXG4gICAgICAgICAgICAgICAgdW50aWw6IC1JbmZpbml0eSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ+e0gOWFg+WJjScsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQkMnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdCQycsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBlcmFZZWFyT3JkaW5hbFJlZ2V4OiAvKOWFg3xcXGQrKeW5tC8sXG4gICAgICAgIGVyYVllYXJPcmRpbmFsUGFyc2U6IGZ1bmN0aW9uIChpbnB1dCwgbWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaFsxXSA9PT0gJ+WFgycgPyAxIDogcGFyc2VJbnQobWF0Y2hbMV0gfHwgaW5wdXQsIDEwKTtcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzOiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn5pel5puc5pelX+aciOabnOaXpV/ngavmm5zml6Vf5rC05puc5pelX+acqOabnOaXpV/ph5Hmm5zml6Vf5Zyf5puc5pelJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+aXpV/mnIhf54GrX+awtF/mnKhf6YeRX+Wcnycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZ5bm0TeaciETml6UgZGRkZCBISDptbScsXG4gICAgICAgICAgICBsOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBsbDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBsbGw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ1lZWVnlubRN5pyIROaXpShkZGQpIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WNiOWJjXzljYjlvowvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfljYjlvownO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Y2I5YmNJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfljYjlvownO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vku4rml6VdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb5piO5pelXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vmnaXpgLFdZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1vmmKjml6VdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2VlaygpICE9PSBub3cud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW+WFiOmAsV1kZGRkIExUJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3ml6UvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyAn5YWD5bm0JyA6IG51bWJlciArICflubQnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5b6MJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5pWw56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWTnp5InLFxuICAgICAgICAgICAgbTogJzHliIYnLFxuICAgICAgICAgICAgbW06ICclZOWIhicsXG4gICAgICAgICAgICBoOiAnMeaZgumWkycsXG4gICAgICAgICAgICBoaDogJyVk5pmC6ZaTJyxcbiAgICAgICAgICAgIGQ6ICcx5pelJyxcbiAgICAgICAgICAgIGRkOiAnJWTml6UnLFxuICAgICAgICAgICAgTTogJzHjg7bmnIgnLFxuICAgICAgICAgICAgTU06ICclZOODtuaciCcsXG4gICAgICAgICAgICB5OiAnMeW5tCcsXG4gICAgICAgICAgICB5eTogJyVk5bm0JyxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBqYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBKYXZhbmVzZSBbanZdXG4vLyEgYXV0aG9yIDogUm9ueSBMYW50aXAgOiBodHRwczovL2dpdGh1Yi5jb20vbGFudGlwXG4vLyEgcmVmZXJlbmNlOiBodHRwOi8vanYud2lraXBlZGlhLm9yZy93aWtpL0Jhc2FfSmF3YVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGp2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnanYnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcmlfRmVicnVhcmlfTWFyZXRfQXByaWxfTWVpX0p1bmlfSnVsaV9BZ3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vcGVtYmVyX0Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3NfU2VwX09rdF9Ob3BfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ01pbmdndV9TZW5lbl9TZWxvc29fUmVidV9LZW1pc19KZW11d2FoX1NlcHR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnTWluX1Nlbl9TZWxfUmViX0tlbV9KZW1fU2VwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ01nX1NuX1NsX1JiX0ttX0ptX1NwJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISC5tbScsXG4gICAgICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZW5qaW5nfHNpeWFuZ3xzb250ZW58bmRhbHUvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdlbmppbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2l5YW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb250ZW4nIHx8IG1lcmlkaWVtID09PSAnbmRhbHUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VuamluZyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NpeWFuZyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NvbnRlbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbmRhbHUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tEaW50ZW4gcHVuaWtvIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW01iZW5qYW5nIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0thbGEgd2luZ2kgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBba2VwZW5na2VyIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3dvbnRlbiBpbmcgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGluZ2thbmcga2VwZW5na2VyJyxcbiAgICAgICAgICAgIHM6ICdzYXdldGF3aXMgZGV0aWsnLFxuICAgICAgICAgICAgc3M6ICclZCBkZXRpaycsXG4gICAgICAgICAgICBtOiAnc2V0dW5nZ2FsIG1lbml0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWVuaXQnLFxuICAgICAgICAgICAgaDogJ3NldHVuZ2dhbCBqYW0nLFxuICAgICAgICAgICAgaGg6ICclZCBqYW0nLFxuICAgICAgICAgICAgZDogJ3NlZGludGVuJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGludGVuJyxcbiAgICAgICAgICAgIE06ICdzZXd1bGFuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgd3VsYW4nLFxuICAgICAgICAgICAgeTogJ3NldGF1bicsXG4gICAgICAgICAgICB5eTogJyVkIHRhdW4nLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ganY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VvcmdpYW4gW2thXVxuLy8hIGF1dGhvciA6IElyYWtsaSBKYW5pYXNodmlsaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9JcmFrbGlKYW5pXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIga2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrYScsIHtcbiAgICAgICAgbW9udGhzOiAn4YOY4YOQ4YOc4YOV4YOQ4YOg4YOYX+GDl+GDlOGDkeGDlOGDoOGDleGDkOGDmuGDmF/hg5vhg5Dhg6Dhg6Lhg5hf4YOQ4YOe4YOg4YOY4YOa4YOYX+GDm+GDkOGDmOGDoeGDmF/hg5jhg5Xhg5zhg5jhg6Hhg5hf4YOY4YOV4YOa4YOY4YOh4YOYX+GDkOGDkuGDleGDmOGDoeGDouGDnV/hg6Hhg5Thg6Xhg6Lhg5Thg5vhg5Hhg5Thg6Dhg5hf4YOd4YOl4YOi4YOd4YOb4YOR4YOU4YOg4YOYX+GDnOGDneGDlOGDm+GDkeGDlOGDoOGDmF/hg5Phg5Thg5nhg5Thg5vhg5Hhg5Thg6Dhg5gnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4YOY4YOQ4YOcX+GDl+GDlOGDkV/hg5vhg5Dhg6Bf4YOQ4YOe4YOgX+GDm+GDkOGDmF/hg5jhg5Xhg5xf4YOY4YOV4YOaX+GDkOGDkuGDlV/hg6Hhg5Thg6Vf4YOd4YOl4YOiX+GDnOGDneGDlF/hg5Phg5Thg5knLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfhg5nhg5Xhg5jhg6Dhg5Bf4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDmF/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDmF/hg6jhg5Dhg5Hhg5Dhg5fhg5gnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiAn4YOZ4YOV4YOY4YOg4YOQ4YOhX+GDneGDoOGDqOGDkOGDkeGDkOGDl+GDoV/hg6Hhg5Dhg5vhg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOd4YOX4YOu4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDruGDo+GDl+GDqOGDkOGDkeGDkOGDl+GDoV/hg57hg5Dhg6Dhg5Dhg6Hhg5nhg5Thg5Xhg6Ff4YOo4YOQ4YOR4YOQ4YOX4YOhJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogLyjhg6zhg5jhg5zhg5B84YOo4YOU4YOb4YOT4YOU4YOSKS8sXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhg5nhg5Xhg5hf4YOd4YOg4YOoX+GDoeGDkOGDm1/hg53hg5fhg65f4YOu4YOj4YOXX+GDnuGDkOGDoF/hg6jhg5Dhg5EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4YOZ4YOVX+GDneGDoF/hg6Hhg5Bf4YOd4YOXX+GDruGDo1/hg57hg5Bf4YOo4YOQJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+GDk+GDpuGDlOGDoV0gTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhg67hg5Xhg5Dhg5pdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4YOS4YOj4YOo4YOY4YOcXSBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vhg6jhg5Thg5vhg5Phg5Thg5JdIGRkZGQgTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4YOs4YOY4YOc4YOQXSBkZGRkIExULeGDluGDlCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAvKOGDrOGDkOGDm3zhg6zhg6Phg5d84YOh4YOQ4YOQ4YOXfOGDrOGDlOGDmnzhg5Phg6Z84YOX4YOVKSjhg5h84YOUKS8sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkMCwgJDEsICQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJDIgPT09ICfhg5gnID8gJDEgKyAn4YOo4YOYJyA6ICQxICsgJDIgKyAn4YOo4YOYJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdDogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoLyjhg6zhg5Dhg5vhg5h84YOs4YOj4YOX4YOYfOGDoeGDkOGDkOGDl+GDmHzhg5Phg6bhg5R84YOX4YOV4YOUKS8udGVzdChzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC8o4YOYfOGDlCkkLywgJ+GDmOGDoSDhg6zhg5jhg5wnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKC/hg6zhg5Thg5rhg5gvLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgv4YOs4YOU4YOa4YOYJC8sICfhg6zhg5rhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHM6ICfhg6Dhg5Dhg5vhg5Phg5Thg5zhg5jhg5vhg5Qg4YOs4YOQ4YOb4YOYJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4YOs4YOQ4YOb4YOYJyxcbiAgICAgICAgICAgIG06ICfhg6zhg6Phg5fhg5gnLFxuICAgICAgICAgICAgbW06ICclZCDhg6zhg6Phg5fhg5gnLFxuICAgICAgICAgICAgaDogJ+GDoeGDkOGDkOGDl+GDmCcsXG4gICAgICAgICAgICBoaDogJyVkIOGDoeGDkOGDkOGDl+GDmCcsXG4gICAgICAgICAgICBkOiAn4YOT4YOm4YOUJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4YOT4YOm4YOUJyxcbiAgICAgICAgICAgIE06ICfhg5fhg5Xhg5QnLFxuICAgICAgICAgICAgTU06ICclZCDhg5fhg5Xhg5QnLFxuICAgICAgICAgICAgeTogJ+GDrOGDlOGDmuGDmCcsXG4gICAgICAgICAgICB5eTogJyVkIOGDrOGDlOGDmuGDmCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC8wfDEt4YOa4YOYfOGDm+GDlC1cXGR7MSwyfXxcXGR7MSwyfS3hg5QvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3hg5rhg5gnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG51bWJlciA8IDIwIHx8XG4gICAgICAgICAgICAgICAgKG51bWJlciA8PSAxMDAgJiYgbnVtYmVyICUgMjAgPT09IDApIHx8XG4gICAgICAgICAgICAgICAgbnVtYmVyICUgMTAwID09PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+GDm+GDlC0nICsgbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct4YOUJztcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLFxuICAgICAgICAgICAgZG95OiA3LFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGthO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEthemFraCBba2tdXG4vLyEgYXV0aG9ycyA6IE51cmxhbiBSYWtoaW16aGFub3YgOiBodHRwczovL2dpdGh1Yi5jb20vbnVybGFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDA6ICct0YjRlicsXG4gICAgICAgIDE6ICct0YjRlicsXG4gICAgICAgIDI6ICct0YjRlicsXG4gICAgICAgIDM6ICct0YjRlicsXG4gICAgICAgIDQ6ICct0YjRlicsXG4gICAgICAgIDU6ICct0YjRlicsXG4gICAgICAgIDY6ICct0YjRiycsXG4gICAgICAgIDc6ICct0YjRlicsXG4gICAgICAgIDg6ICct0YjRlicsXG4gICAgICAgIDk6ICct0YjRiycsXG4gICAgICAgIDEwOiAnLdGI0YsnLFxuICAgICAgICAyMDogJy3RiNGLJyxcbiAgICAgICAgMzA6ICct0YjRiycsXG4gICAgICAgIDQwOiAnLdGI0YsnLFxuICAgICAgICA1MDogJy3RiNGWJyxcbiAgICAgICAgNjA6ICct0YjRiycsXG4gICAgICAgIDcwOiAnLdGI0ZYnLFxuICAgICAgICA4MDogJy3RiNGWJyxcbiAgICAgICAgOTA6ICct0YjRiycsXG4gICAgICAgIDEwMDogJy3RiNGWJyxcbiAgICB9O1xuXG4gICAgdmFyIGtrID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2snLCB7XG4gICAgICAgIG1vbnRoczogJ9Kb0LDSo9GC0LDRgF/QsNKb0L/QsNC9X9C90LDRg9GA0YvQt1/RgdOZ0YPRltGAX9C80LDQvNGL0YBf0LzQsNGD0YHRi9C8X9GI0ZbQu9C00LVf0YLQsNC80YvQt1/Sm9GL0YDQutKv0LnQtdC6X9Kb0LDQt9Cw0L1f0pvQsNGA0LDRiNCwX9C20LXQu9GC0L7Sm9GB0LDQvScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfSm9Cw0qNf0LDSm9C/X9C90LDRg1/RgdOZ0YNf0LzQsNC8X9C80LDRg1/RiNGW0Ltf0YLQsNC8X9Kb0YvRgF/Sm9Cw0Ldf0pvQsNGAX9C20LXQuycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfQttC10LrRgdC10L3QsdGWX9C00q/QudGB0LXQvdCx0ZZf0YHQtdC50YHQtdC90LHRll/RgdOZ0YDRgdC10L3QsdGWX9Cx0LXQudGB0LXQvdCx0ZZf0LbSsdC80LBf0YHQtdC90LHRlicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C20LXQul/QtNKv0Llf0YHQtdC5X9GB05nRgF/QsdC10Llf0LbSsdC8X9GB0LXQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQttC6X9C00Llf0YHQuV/RgdGAX9Cx0Llf0LbQvF/RgdC9Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9CR0q/Qs9GW0L0g0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQldGA0YLQtdKjINGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQmtC10YjQtSDRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vTqNGC0LrQtdC9INCw0L/RgtCw0L3Ri9KjXSBkZGRkIFvRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINGW0YjRltC90LTQtScsXG4gICAgICAgICAgICBwYXN0OiAnJXMg0LHSsdGA0YvQvScsXG4gICAgICAgICAgICBzOiAn0LHRltGA0L3QtdGI0LUg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzOiAnJWQg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG06ICfQsdGW0YAg0LzQuNC90YPRgicsXG4gICAgICAgICAgICBtbTogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaDogJ9Cx0ZbRgCDRgdCw0pPQsNGCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YHQsNKT0LDRgicsXG4gICAgICAgICAgICBkOiAn0LHRltGAINC60q/QvScsXG4gICAgICAgICAgICBkZDogJyVkINC60q/QvScsXG4gICAgICAgICAgICBNOiAn0LHRltGAINCw0LknLFxuICAgICAgICAgICAgTU06ICclZCDQsNC5JyxcbiAgICAgICAgICAgIHk6ICfQsdGW0YAg0LbRi9C7JyxcbiAgICAgICAgICAgIHl5OiAnJWQg0LbRi9C7JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRiNGWfNGI0YspLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBiID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW251bWJlcl0gfHwgc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga2s7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2FtYm9kaWFuIFtrbV1cbi8vISBhdXRob3IgOiBLcnV5IFZhbm5hIDogaHR0cHM6Ly9naXRodWIuY29tL2tydXl2YW5uYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfhn6EnLFxuICAgICAgICAgICAgMjogJ+GfoicsXG4gICAgICAgICAgICAzOiAn4Z+jJyxcbiAgICAgICAgICAgIDQ6ICfhn6QnLFxuICAgICAgICAgICAgNTogJ+GfpScsXG4gICAgICAgICAgICA2OiAn4Z+mJyxcbiAgICAgICAgICAgIDc6ICfhn6cnLFxuICAgICAgICAgICAgODogJ+GfqCcsXG4gICAgICAgICAgICA5OiAn4Z+pJyxcbiAgICAgICAgICAgIDA6ICfhn6AnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4Z+hJzogJzEnLFxuICAgICAgICAgICAgJ+Gfoic6ICcyJyxcbiAgICAgICAgICAgICfhn6MnOiAnMycsXG4gICAgICAgICAgICAn4Z+kJzogJzQnLFxuICAgICAgICAgICAgJ+GfpSc6ICc1JyxcbiAgICAgICAgICAgICfhn6YnOiAnNicsXG4gICAgICAgICAgICAn4Z+nJzogJzcnLFxuICAgICAgICAgICAgJ+GfqCc6ICc4JyxcbiAgICAgICAgICAgICfhn6knOiAnOScsXG4gICAgICAgICAgICAn4Z+gJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGttID0gbW9tZW50LmRlZmluZUxvY2FsZSgna20nLCB7XG4gICAgICAgIG1vbnRoczogJ+GemOGegOGemuGetl/hnoDhnrvhnpjhn5Lhnpfhn4hf4Z6Y4Z644Z6T4Z62X+GemOGfgeGen+Getl/hnqfhnp/hnpfhnrZf4Z6Y4Z634Z6Q4Z674Z6T4Z62X+GegOGegOGfkuGegOGeiuGetl/hnp/hnrjhnqDhnrZf4Z6A4Z6J4Z+S4Z6J4Z62X+Gej+Geu+Gem+Getl/hnpzhnrfhnoXhn5LhnobhnrfhnoDhnrZf4Z6S4Z+S4Z6T4Z68Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+GeouGetuGekeGet+Gej+GfkuGemV/hnoXhn5DhnpPhn5LhnpFf4Z6i4Z6E4Z+S4Z6C4Z624Z6aX+GeluGeu+Gekl/hnpbhn5LhnprhnqDhnp/hn5LhnpThno/hnrfhn41f4Z6f4Z674Z6A4Z+S4Z6aX+Gen+GfheGemuGfjScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+GeouGetl/hnoVf4Z6iX+Gell/hnpbhn5Lhnppf4Z6f4Z67X+Genycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfhnqLhnrZf4Z6FX+Geol/hnpZf4Z6W4Z+S4Z6aX+Gen+Geu1/hnp8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Z6W4Z+S4Z6a4Z654Z6AfOGem+GfkuGehOGetuGehS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4Z6b4Z+S4Z6E4Z624Z6FJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+GeluGfkuGemuGeueGegCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Z6b4Z+S4Z6E4Z624Z6FJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4Z6Q4Z+S4Z6E4Z+D4Z6T4Z+B4Z+HIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhnp/hn5LhnqLhn4LhnoAg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vhnpjhn5Lhnp/hnrfhnpvhnpjhnrfhnokg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+Gen+GelOGfkuGej+GetuGeoOGfjeGemOGeu+Gek10gW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+GekeGfgOGejycsXG4gICAgICAgICAgICBwYXN0OiAnJXPhnpjhnrvhnpMnLFxuICAgICAgICAgICAgczogJ+GelOGfieGeu+Gek+GfkuGemOGetuGek+GenOGet+Gek+GetuGekeGeuCcsXG4gICAgICAgICAgICBzczogJyVkIOGenOGet+Gek+GetuGekeGeuCcsXG4gICAgICAgICAgICBtOiAn4Z6Y4Z694Z6Z4Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIGg6ICfhnpjhnr3hnpnhnpjhn4nhn4ThnoQnLFxuICAgICAgICAgICAgaGg6ICclZCDhnpjhn4nhn4ThnoQnLFxuICAgICAgICAgICAgZDogJ+GemOGeveGemeGekOGfkuGehOGfgycsXG4gICAgICAgICAgICBkZDogJyVkIOGekOGfkuGehOGfgycsXG4gICAgICAgICAgICBNOiAn4Z6Y4Z694Z6Z4Z6B4Z+CJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Z6B4Z+CJyxcbiAgICAgICAgICAgIHk6ICfhnpjhnr3hnpnhnobhn5LhnpPhnrbhn4YnLFxuICAgICAgICAgICAgeXk6ICclZCDhnobhn5LhnpPhnrbhn4YnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAv4Z6R4Z64XFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsOiAn4Z6R4Z64JWQnLFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Z+h4Z+i4Z+j4Z+k4Z+l4Z+m4Z+n4Z+o4Z+p4Z+gXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga207XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS2FubmFkYSBba25dXG4vLyEgYXV0aG9yIDogUmFqZWV2IE5haWsgOiBodHRwczovL2dpdGh1Yi5jb20vcmFqZWV2bmFpa3RlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+CzpycsXG4gICAgICAgICAgICAyOiAn4LOoJyxcbiAgICAgICAgICAgIDM6ICfgs6knLFxuICAgICAgICAgICAgNDogJ+CzqicsXG4gICAgICAgICAgICA1OiAn4LOrJyxcbiAgICAgICAgICAgIDY6ICfgs6wnLFxuICAgICAgICAgICAgNzogJ+CzrScsXG4gICAgICAgICAgICA4OiAn4LOuJyxcbiAgICAgICAgICAgIDk6ICfgs68nLFxuICAgICAgICAgICAgMDogJ+CzpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgs6cnOiAnMScsXG4gICAgICAgICAgICAn4LOoJzogJzInLFxuICAgICAgICAgICAgJ+CzqSc6ICczJyxcbiAgICAgICAgICAgICfgs6onOiAnNCcsXG4gICAgICAgICAgICAn4LOrJzogJzUnLFxuICAgICAgICAgICAgJ+CzrCc6ICc2JyxcbiAgICAgICAgICAgICfgs60nOiAnNycsXG4gICAgICAgICAgICAn4LOuJzogJzgnLFxuICAgICAgICAgICAgJ+Czryc6ICc5JyxcbiAgICAgICAgICAgICfgs6YnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIga24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrbicsIHtcbiAgICAgICAgbW9udGhzOiAn4LKc4LKo4LK14LKw4LK/X+Cyq+CzhuCyrOCzjeCysOCyteCysOCyv1/gsq7gsr7gsrDgs43gsprgs41f4LKP4LKq4LON4LKw4LK/4LKy4LONX+CyruCzhuCzlV/gspzgs4Lgsqjgs41f4LKc4LOB4LKy4LOG4LOWX+CyhuCyl+CyuOCzjeCyn+CzjV/gsrjgs4bgsqrgs43gsp/gs4bgsoLgsqzgsrDgs41f4LKF4LKV4LON4LKf4LOG4LOC4LOV4LKs4LKw4LONX+CyqOCyteCzhuCyguCyrOCysOCzjV/gsqHgsr/gsrjgs4bgsoLgsqzgsrDgs40nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CynOCyqF/gsqvgs4bgsqzgs43gsrBf4LKu4LK+4LKw4LON4LKa4LONX+Cyj+CyquCzjeCysOCyv+CysuCzjV/gsq7gs4bgs5Vf4LKc4LOC4LKo4LONX+CynOCzgeCysuCzhuCzll/gsobgspfgsrjgs43gsp/gs41f4LK44LOG4LKq4LON4LKf4LOG4LKCX+CyheCyleCzjeCyn+CzhuCzguCzlV/gsqjgsrXgs4bgsoJf4LKh4LK/4LK44LOG4LKCJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4LKt4LK+4LKo4LOB4LK14LK+4LKwX+CyuOCzhuCzguCzleCyruCyteCyvuCysF/gsq7gsoLgspfgsrPgsrXgsr7gsrBf4LKs4LOB4LKn4LK14LK+4LKwX+Cyl+CzgeCysOCzgeCyteCyvuCysF/gsrbgs4HgspXgs43gsrDgsrXgsr7gsrBf4LK24LKo4LK/4LK14LK+4LKwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4LKt4LK+4LKo4LOBX+CyuOCzhuCzguCzleCyrl/gsq7gsoLgspfgsrNf4LKs4LOB4LKnX+Cyl+CzgeCysOCzgV/gsrbgs4HgspXgs43gsrBf4LK24LKo4LK/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CyreCyvl/gsrjgs4bgs4Lgs5Vf4LKu4LKCX+CyrOCzgV/gspfgs4Ff4LK24LOBX+Cyticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgsofgsoLgsqbgs4FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4LKo4LK+4LKz4LOGXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4LKo4LK/4LKo4LON4LKo4LOGXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgspXgs4bgs4Lgsqjgs4bgsq9dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4LKo4LKC4LKk4LKwJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgsrngsr/gsoLgsqbgs4YnLFxuICAgICAgICAgICAgczogJ+CyleCzhuCysuCyteCzgSDgspXgs43gsrfgsqPgspfgsrPgs4EnLFxuICAgICAgICAgICAgc3M6ICclZCDgsrjgs4bgspXgs4bgsoLgsqHgs4HgspfgsrPgs4EnLFxuICAgICAgICAgICAgbTogJ+CykuCyguCypuCzgSDgsqjgsr/gsq7gsr/gsrcnLFxuICAgICAgICAgICAgbW06ICclZCDgsqjgsr/gsq7gsr/gsrcnLFxuICAgICAgICAgICAgaDogJ+CykuCyguCypuCzgSDgspfgsoLgsp/gs4YnLFxuICAgICAgICAgICAgaGg6ICclZCDgspfgsoLgsp/gs4YnLFxuICAgICAgICAgICAgZDogJ+CykuCyguCypuCzgSDgsqbgsr/gsqgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgsqbgsr/gsqgnLFxuICAgICAgICAgICAgTTogJ+CykuCyguCypuCzgSDgsqTgsr/gsoLgspfgsrPgs4EnLFxuICAgICAgICAgICAgTU06ICclZCDgsqTgsr/gsoLgspfgsrPgs4EnLFxuICAgICAgICAgICAgeTogJ+CykuCyguCypuCzgSDgsrXgsrDgs43gsrcnLFxuICAgICAgICAgICAgeXk6ICclZCDgsrXgsrDgs43gsrcnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4LOn4LOo4LOp4LOq4LOr4LOs4LOt4LOu4LOv4LOmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LKw4LK+4LKk4LON4LKw4LK/fOCyrOCzhuCys+Cyv+Cyl+CzjeCyl+Czhnzgsq7gsqfgs43gsq/gsr7gsrngs43gsqh84LK44LKC4LKc4LOGLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4LKw4LK+4LKk4LON4LKw4LK/Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyruCyp+CzjeCyr+CyvuCyueCzjeCyqCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LK44LKC4LKc4LOGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsq7gsqfgs43gsq/gsr7gsrngs43gsqgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CyuOCyguCynOCzhic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKw4LK+4LKk4LON4LKw4LK/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOCyqOCzhuCzlSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+CyqOCzhuCzlSc7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBrbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLb3JlYW4gW2tvXVxuLy8hIGF1dGhvciA6IEt5dW5nd29vaywgUGFyayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9reXVuZ3cwMGtcbi8vISBhdXRob3IgOiBKZWVleXVsIExlZSA8amVlZXl1bEBnbWFpbC5jb20+XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIga28gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrbycsIHtcbiAgICAgICAgbW9udGhzOiAnMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5QnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5QnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn7J287JqU7J28X+yblOyalOydvF/tmZTsmpTsnbxf7IiY7JqU7J28X+uqqeyalOydvF/quIjsmpTsnbxf7Yag7JqU7J28Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn7J28X+yblF/tmZRf7IiYX+uqqV/quIhf7YagJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+ydvF/sm5Rf7ZmUX+yImF/rqqlf6riIX+2GoCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS5NTS5ERC4nLFxuICAgICAgICAgICAgTEw6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ64WEIE1NTU0gROydvCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnrhYQgTU1NTSBE7J28IGRkZGQgQSBoOm1tJyxcbiAgICAgICAgICAgIGw6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBsbDogJ1lZWVnrhYQgTU1NTSBE7J28JyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnrhYQgTU1NTSBE7J28IEEgaDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ+yYpOuKmCBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAn64K07J28IExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAn7Ja07KCcIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAn7KeA64Kc7KO8IGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDtm4QnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOyghCcsXG4gICAgICAgICAgICBzOiAn66qHIOy0iCcsXG4gICAgICAgICAgICBzczogJyVk7LSIJyxcbiAgICAgICAgICAgIG06ICcx67aEJyxcbiAgICAgICAgICAgIG1tOiAnJWTrtoQnLFxuICAgICAgICAgICAgaDogJ+2VnCDsi5zqsIQnLFxuICAgICAgICAgICAgaGg6ICclZOyLnOqwhCcsXG4gICAgICAgICAgICBkOiAn7ZWY66OoJyxcbiAgICAgICAgICAgIGRkOiAnJWTsnbwnLFxuICAgICAgICAgICAgTTogJ+2VnCDri6wnLFxuICAgICAgICAgICAgTU06ICclZOuLrCcsXG4gICAgICAgICAgICB5OiAn7J28IOuFhCcsXG4gICAgICAgICAgICB5eTogJyVk64WEJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOydvHzsm5R87KO8KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+ydvCc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7JuUJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfso7wnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/smKTsoIR87Jik7ZuELyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW4gPT09ICfsmKTtm4QnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAxMiA/ICfsmKTsoIQnIDogJ+yYpO2bhCc7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga287XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS3VyZGlzaCBba3VdXG4vLyEgYXV0aG9yIDogU2hhaHJhbSBNZWJhc2hhciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9TaGFocmFtTWViYXNoYXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn2aEnLFxuICAgICAgICAgICAgMjogJ9miJyxcbiAgICAgICAgICAgIDM6ICfZoycsXG4gICAgICAgICAgICA0OiAn2aQnLFxuICAgICAgICAgICAgNTogJ9mlJyxcbiAgICAgICAgICAgIDY6ICfZpicsXG4gICAgICAgICAgICA3OiAn2acnLFxuICAgICAgICAgICAgODogJ9moJyxcbiAgICAgICAgICAgIDk6ICfZqScsXG4gICAgICAgICAgICAwOiAn2aAnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICAgICAn2aInOiAnMicsXG4gICAgICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICAgICAn2aUnOiAnNScsXG4gICAgICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICAgICAn2agnOiAnOCcsXG4gICAgICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICAgICAn2aAnOiAnMCcsXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfaqdin2YbZiNmG24wg2K/ZiNmI25XZhScsXG4gICAgICAgICAgICAn2LTZiNio2KfYqicsXG4gICAgICAgICAgICAn2KbYp9iy2KfYsScsXG4gICAgICAgICAgICAn2YbbjNiz2KfZhicsXG4gICAgICAgICAgICAn2KbYp9uM2KfYsScsXG4gICAgICAgICAgICAn2K3ZiNiy25XbjNix2KfZhicsXG4gICAgICAgICAgICAn2KrbldmF2YXZiNiyJyxcbiAgICAgICAgICAgICfYptin2KgnLFxuICAgICAgICAgICAgJ9im25XbjNmE2YjZiNmEJyxcbiAgICAgICAgICAgICfYqti02LHbjNmG24wg24zbldmD25XZhScsXG4gICAgICAgICAgICAn2KrYtNix24zZhtuMINiv2YjZiNuV2YUnLFxuICAgICAgICAgICAgJ9mD2KfZhtmI2YbbjCDbjNuV2qnbldmFJyxcbiAgICAgICAgXTtcblxuICAgIHZhciBrdSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2t1Jywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn24zZh+KAjNmD2LTZh+KAjNmF2YXZh+KAjF/Yr9mI2YjYtNmH4oCM2YXZhdmH4oCMX9iz247YtNmH4oCM2YXZhdmH4oCMX9qG2YjYp9ix2LTZh+KAjNmF2YXZh+KAjF/ZvtuO2YbYrNi02YfigIzZhdmF2YfigIxf2YfZh+KAjNuM2YbbjF/YtNmH4oCM2YXZhdmH4oCMJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6XG4gICAgICAgICAgICAn24zZh+KAjNmD2LTZh+KAjNmFX9iv2YjZiNi02YfigIzZhV/Ys9uO2LTZh+KAjNmFX9qG2YjYp9ix2LTZh+KAjNmFX9m+247Zhtis2LTZh+KAjNmFX9mH2YfigIzbjNmG24xf2LTZh+KAjNmF2YXZh+KAjCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfbjF/Yr1/Ys1/ahl/Zvl/Zh1/YtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YptuO2YjYp9ix2YfigIx82KjZh+KAjNuM2KfZhtuMLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL9im247ZiNin2LHZh+KAjC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYqNmH4oCM24zYp9mG24wnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9im247ZiNin2LHZh+KAjCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9im2YfigIzZhdix24Yg2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2KjZh+KAjNuM2KfZhtuMINmD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9mD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9iv2YjbjtmG244g2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YTZh+KAjCAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMnLFxuICAgICAgICAgICAgczogJ9qG2YfigIzZhtivINqG2LHZg9mH4oCM24zZh+KAjNmDJyxcbiAgICAgICAgICAgIHNzOiAn2obYsdmD2YfigIwgJWQnLFxuICAgICAgICAgICAgbTogJ9uM2YfigIzZgyDYrtmI2YTZh+KAjNmDJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K7ZiNmE2YfigIzZgycsXG4gICAgICAgICAgICBoOiAn24zZh+KAjNmDINmD2KfYqtqY2YXbjtixJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2YPYp9iq2pjZhduO2LEnLFxuICAgICAgICAgICAgZDogJ9uM2YfigIzZgyDalduG2pgnLFxuICAgICAgICAgICAgZGQ6ICclZCDalduG2pgnLFxuICAgICAgICAgICAgTTogJ9uM2YfigIzZgyDZhdin2YbarycsXG4gICAgICAgICAgICBNTTogJyVkINmF2KfZhtqvJyxcbiAgICAgICAgICAgIHk6ICfbjNmH4oCM2YMg2LPYp9q1JyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPYp9q1JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga3U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTm9ydGhlcm4gS3VyZGlzaCBba3Uta21yXVxuLy8hIGF1dGhvcnMgOiBNYXpsdW0gw5Z6ZG9nYW4gOiBodHRwczovL2dpdGh1Yi5jb20vbWVyZ2VoZXpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzOiBbJ8OnZW5kIHNhbsOueWUnLCAnw6dlbmQgc2Fuw655ZXlhbiddLFxuICAgICAgICAgICAgc3M6IFtudW0gKyAnIHNhbsOueWUnLCBudW0gKyAnIHNhbsOueWV5YW4nXSxcbiAgICAgICAgICAgIG06IFsnZGVxw65xZXllaycsICdkZXHDrnFleWVrw6onXSxcbiAgICAgICAgICAgIG1tOiBbbnVtICsgJyBkZXHDrnFlJywgbnVtICsgJyBkZXHDrnFleWFuJ10sXG4gICAgICAgICAgICBoOiBbJ3NhZXRlaycsICdzYWV0ZWvDqiddLFxuICAgICAgICAgICAgaGg6IFtudW0gKyAnIHNhZXQnLCBudW0gKyAnIHNhZXRhbiddLFxuICAgICAgICAgICAgZDogWydyb2playcsICdyb2pla8OqJ10sXG4gICAgICAgICAgICBkZDogW251bSArICcgcm9qJywgbnVtICsgJyByb2phbiddLFxuICAgICAgICAgICAgdzogWydoZWZ0ZXllaycsICdoZWZ0ZXlla8OqJ10sXG4gICAgICAgICAgICB3dzogW251bSArICcgaGVmdGUnLCBudW0gKyAnIGhlZnRleWFuJ10sXG4gICAgICAgICAgICBNOiBbJ21laGVrJywgJ21laGVrw6onXSxcbiAgICAgICAgICAgIE1NOiBbbnVtICsgJyBtZWgnLCBudW0gKyAnIG1laGFuJ10sXG4gICAgICAgICAgICB5OiBbJ3NhbGVrJywgJ3NhbGVrw6onXSxcbiAgICAgICAgICAgIHl5OiBbbnVtICsgJyBzYWwnLCBudW0gKyAnIHNhbGFuJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG4gICAgLy8gZnVuY3Rpb24gb2JsaXF1ZU51bVN1ZmZpeChudW0pIHtcbiAgICAvLyAgICAgaWYobnVtLmluY2x1ZGVzKCc6JykpXG4gICAgLy8gICAgICAgICBudW0gPSBwYXJzZUludChudW0uc3BsaXQoJzonKVswXSk7XG4gICAgLy8gICAgIGVsc2VcbiAgICAvLyAgICAgICAgIG51bSA9IHBhcnNlSW50KG51bSk7XG4gICAgLy8gICAgIHJldHVybiBudW0gPT0gMCB8fCBudW0gJSAxMCA9PSAxID8gJ8OqJ1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIDogKG51bSA+IDEwICYmIG51bSAlIDEwID09IDAgPyAnw64nIDogJ2FuJyk7XG4gICAgLy8gfVxuICAgIGZ1bmN0aW9uIGV6YWZlTnVtU3VmZml4KG51bSkge1xuICAgICAgICBudW0gPSAnJyArIG51bTtcbiAgICAgICAgdmFyIGwgPSBudW0uc3Vic3RyaW5nKG51bS5sZW5ndGggLSAxKSxcbiAgICAgICAgICAgIGxsID0gbnVtLmxlbmd0aCA+IDEgPyBudW0uc3Vic3RyaW5nKG51bS5sZW5ndGggLSAyKSA6ICcnO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKGxsID09IDEyIHx8IGxsID09IDEzKSAmJlxuICAgICAgICAgICAgKGwgPT0gJzInIHx8IGwgPT0gJzMnIHx8IGxsID09ICc1MCcgfHwgbCA9PSAnNzAnIHx8IGwgPT0gJzgwJylcbiAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuICd5w6onO1xuICAgICAgICByZXR1cm4gJ8OqJztcbiAgICB9XG5cbiAgICB2YXIga3VLbXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrdS1rbXInLCB7XG4gICAgICAgIC8vIEFjY29yZGluZyB0byB0aGUgc3BlbGxpbmcgcnVsZXMgZGVmaW5lZCBieSB0aGUgd29yayBncm91cCBvZiBXZXFmYSBNZXpvcG90YW15YXnDqiAoTWVzb3BvdGFtaWEgRm91bmRhdGlvbilcbiAgICAgICAgLy8gdGhpcyBzaG91bGQgYmU6ICdLYW7Du25hIFBhxZ/Drm5fU2liYXRfQWRhcl9Ow65zYW5fR3VsYW5fSGV6w65yYW5fVMOucm1laF9UZWJheF/Djmxvbl/Dh2lyw655YSBQw6rFn8Oubl/Dh2lyw655YSBQYcWfw65uX0thbsO7bmEgUMOqxZ/Drm4nXG4gICAgICAgIC8vIEJ1dCB0aGUgbmFtZXMgYmVsb3cgYXJlIG1vcmUgd2VsbCBrbm93biBhbmQgaGFuZHlcbiAgICAgICAgbW9udGhzOiAnUsOqYmVuZGFuX1NpYmF0X0FkYXJfTsOuc2FuX0d1bGFuX0hlesOucmFuX1TDrnJtZWhfVGViYXhfw45sb25fQ290bWVoX01pamRhcl9CZXJmYW5iYXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnUsOqYl9TaWJfQWRhX07DrnNfR3VsX0hlel9Uw65yX1RlYl/DjmxvX0NvdF9NaWpfQmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ1lla8WfZW1fRHXFn2VtX1PDqsWfZW1fw4dhcsWfZW1fUMOqbmPFn2VtX8OObl/FnmVtw64nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdZZWtfRHVfU8OqX8OHYXJfUMOqbl/Djm5fxZ5lbScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdZZV9EdV9Tw6pfw4dhX1DDql/Djm5fxZ5lJy5zcGxpdCgnXycpLFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2JuJyA6ICdCTic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BuJyA6ICdQTic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9ibnxCTnxwbnxQTi8sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRG8gTU1NTVthXSBZWVlZW2FuXScsXG4gICAgICAgICAgICBMTEw6ICdEbyBNTU1NW2FdIFlZWVlbYW5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEbyBNTU1NW2FdIFlZWVlbYW5dIEhIOm1tJyxcbiAgICAgICAgICAgIGxsOiAnRG8gTU1NWy5dIFlZWVlbYW5dJyxcbiAgICAgICAgICAgIGxsbDogJ0RvIE1NTVsuXSBZWVlZW2FuXSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkWy5dLCBEbyBNTU1bLl0gWVlZWVthbl0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vDjnJvIGRpIHNhZXRdIExUIFtkZV0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1tTaWLDqiBkaSBzYWV0XSBMVCBbZGVdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbZGkgc2FldF0gTFQgW2RlXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0R1aCBkaSBzYWV0XSBMVCBbZGVdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZFthIGJvcsOuIGRpIHNhZXRdIExUIFtkZV0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkaSAlcyBkZScsXG4gICAgICAgICAgICBwYXN0OiAnYmVyw64gJXMnLFxuICAgICAgICAgICAgczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgdzogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHd3OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oPzp5w6p8w6p8XFwuKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW0sIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIHAgPSBwZXJpb2QudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChwLmluY2x1ZGVzKCd3JykgfHwgcC5pbmNsdWRlcygnbScpKSByZXR1cm4gbnVtICsgJy4nO1xuXG4gICAgICAgICAgICByZXR1cm4gbnVtICsgZXphZmVOdW1TdWZmaXgobnVtKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGt1S21yO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEt5cmd5eiBba3ldXG4vLyEgYXV0aG9yIDogQ2h5bmd5eiBBcnlzdGFuIHV1bHUgOiBodHRwczovL2dpdGh1Yi5jb20vY2h5bmd5elxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGH0q8nLFxuICAgICAgICAxOiAnLdGH0LgnLFxuICAgICAgICAyOiAnLdGH0LgnLFxuICAgICAgICAzOiAnLdGH0q8nLFxuICAgICAgICA0OiAnLdGH0q8nLFxuICAgICAgICA1OiAnLdGH0LgnLFxuICAgICAgICA2OiAnLdGH0YsnLFxuICAgICAgICA3OiAnLdGH0LgnLFxuICAgICAgICA4OiAnLdGH0LgnLFxuICAgICAgICA5OiAnLdGH0YMnLFxuICAgICAgICAxMDogJy3Rh9GDJyxcbiAgICAgICAgMjA6ICct0YfRiycsXG4gICAgICAgIDMwOiAnLdGH0YMnLFxuICAgICAgICA0MDogJy3Rh9GLJyxcbiAgICAgICAgNTA6ICct0YfSrycsXG4gICAgICAgIDYwOiAnLdGH0YsnLFxuICAgICAgICA3MDogJy3Rh9C4JyxcbiAgICAgICAgODA6ICct0YfQuCcsXG4gICAgICAgIDkwOiAnLdGH0YMnLFxuICAgICAgICAxMDA6ICct0YfSrycsXG4gICAgfTtcblxuICAgIHZhciBreSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2t5Jywge1xuICAgICAgICBtb250aHM6ICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0Y/QvdCyX9GE0LXQsl/QvNCw0YDRgl/QsNC/0YBf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LonLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn0JbQtdC60YjQtdC80LHQuF/QlNKv0LnRiNOp0LzQsdKvX9Co0LXQudGI0LXQvNCx0Lhf0KjQsNGA0YjQtdC80LHQuF/QkdC10LnRiNC10LzQsdC4X9CW0YPQvNCwX9CY0YjQtdC80LHQuCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9CW0LXQul/QlNKv0Llf0KjQtdC5X9Co0LDRgF/QkdC10Llf0JbRg9C8X9CY0YjQtScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQltC6X9CU0Llf0KjQuV/QqNGAX9CR0Llf0JbQvF/QmNGIJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9CR0q/Qs9Kv0L0g0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0K3RgNGC0LXSoyDRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQmtC10YfRjdGNINGB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vTqNGC0LrTqdC9INCw0L/RgtCw0L3Ri9C9XSBkZGRkIFvQutKv0L3Sr10gW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINC40YfQuNC90LTQtScsXG4gICAgICAgICAgICBwYXN0OiAnJXMg0LzRg9GA0YPQvScsXG4gICAgICAgICAgICBzOiAn0LHQuNGA0L3QtdGH0LUg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzOiAnJWQg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG06ICfQsdC40YAg0LzSr9C906nRgicsXG4gICAgICAgICAgICBtbTogJyVkINC80q/QvdOp0YInLFxuICAgICAgICAgICAgaDogJ9Cx0LjRgCDRgdCw0LDRgicsXG4gICAgICAgICAgICBoaDogJyVkINGB0LDQsNGCJyxcbiAgICAgICAgICAgIGQ6ICfQsdC40YAg0LrSr9C9JyxcbiAgICAgICAgICAgIGRkOiAnJWQg0LrSr9C9JyxcbiAgICAgICAgICAgIE06ICfQsdC40YAg0LDQuScsXG4gICAgICAgICAgICBNTTogJyVkINCw0LknLFxuICAgICAgICAgICAgeTogJ9Cx0LjRgCDQttGL0LsnLFxuICAgICAgICAgICAgeXk6ICclZCDQttGL0LsnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGH0Lh80YfRi3zRh9KvfNGH0YMpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBiID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW251bWJlcl0gfHwgc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga3k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTHV4ZW1ib3VyZ2lzaCBbbGJdXG4vLyEgYXV0aG9yIDogbXdlaW1lcnNraXJjaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9td2VpbWVyc2tpcmNoXG4vLyEgYXV0aG9yIDogRGF2aWQgUmFpc29uIDogaHR0cHM6Ly9naXRodWIuY29tL2t3aXNhdHpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBtOiBbJ2VuZyBNaW51dHQnLCAnZW5nZXIgTWludXR0J10sXG4gICAgICAgICAgICBoOiBbJ2VuZyBTdG9ubicsICdlbmdlciBTdG9ubiddLFxuICAgICAgICAgICAgZDogWydlZW4gRGFnJywgJ2VuZ2VtIERhZyddLFxuICAgICAgICAgICAgTTogWydlZSBNb3VudCcsICdlbmdlbSBNb3VudCddLFxuICAgICAgICAgICAgeTogWydlZSBKb2VyJywgJ2VuZ2VtIEpvZXInXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzRnV0dXJlVGltZShzdHJpbmcpIHtcbiAgICAgICAgdmFyIG51bWJlciA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YoJyAnKSk7XG4gICAgICAgIGlmIChlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuICdhICcgKyBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdhbiAnICsgc3RyaW5nO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzUGFzdFRpbWUoc3RyaW5nKSB7XG4gICAgICAgIHZhciBudW1iZXIgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKCcgJykpO1xuICAgICAgICBpZiAoZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiAndmlydSAnICsgc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAndmlydW4gJyArIHN0cmluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB3b3JkIGJlZm9yZSB0aGUgZ2l2ZW4gbnVtYmVyIGxvc2VzIHRoZSAnLW4nIGVuZGluZy5cbiAgICAgKiBlLmcuICdhbiAxMCBEZWVnJyBidXQgJ2EgNSBEZWVnJ1xuICAgICAqXG4gICAgICogQHBhcmFtIG51bWJlciB7aW50ZWdlcn1cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSB7XG4gICAgICAgIG51bWJlciA9IHBhcnNlSW50KG51bWJlciwgMTApO1xuICAgICAgICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyBOZWdhdGl2ZSBOdW1iZXIgLS0+IGFsd2F5cyB0cnVlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMCkge1xuICAgICAgICAgICAgLy8gT25seSAxIGRpZ2l0XG4gICAgICAgICAgICBpZiAoNCA8PSBudW1iZXIgJiYgbnVtYmVyIDw9IDcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDApIHtcbiAgICAgICAgICAgIC8vIDIgZGlnaXRzXG4gICAgICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgZmlyc3REaWdpdCA9IG51bWJlciAvIDEwO1xuICAgICAgICAgICAgaWYgKGxhc3REaWdpdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIoZmlyc3REaWdpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKGxhc3REaWdpdCk7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTAwMDApIHtcbiAgICAgICAgICAgIC8vIDMgb3IgNCBkaWdpdHMgLS0+IHJlY3Vyc2l2ZWx5IGNoZWNrIGZpcnN0IGRpZ2l0XG4gICAgICAgICAgICB3aGlsZSAobnVtYmVyID49IDEwKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyIC8gMTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBbnl0aGluZyBsYXJnZXIgdGhhbiA0IGRpZ2l0czogcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3Qgbi0zIGRpZ2l0c1xuICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyIC8gMTAwMDtcbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2xiJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJfRmVicnVhcl9Nw6RlcnpfQWJyw6tsbF9NZWVfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnSmFuLl9GZWJyLl9NcnouX0Fici5fTWVlX0p1bi5fSnVsLl9BdWcuX1NlcHQuX09rdC5fTm92Ll9EZXouJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ1Nvbm5kZWdfTcOpaW5kZWdfRMOrbnNjaGRlZ19Nw6t0dHdvY2hfRG9ubmVzY2hkZWdfRnJlaWRlZ19TYW1zY2hkZWcnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1NvLl9Nw6kuX0TDqy5fTcOrLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19Nw6lfRMOrX03Dq19Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tIFtBdWVyXScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzIFtBdWVyXScsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbSBbQXVlcl0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hhdXQgdW1dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW011ZXIgdW1dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbR8Orc2NodGVyIHVtXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIERpZmZlcmVudCBkYXRlIHN0cmluZyBmb3IgJ0TDq25zY2hkZWcnIChUdWVzZGF5KSBhbmQgJ0Rvbm5lc2NoZGVnJyAoVGh1cnNkYXkpIGR1ZSB0byBwaG9ub2xvZ2ljYWwgcnVsZVxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW0xlc2NodGVuXSBkZGRkIFt1bV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbTGVzY2h0ZV0gZGRkZCBbdW1dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogcHJvY2Vzc0Z1dHVyZVRpbWUsXG4gICAgICAgICAgICBwYXN0OiBwcm9jZXNzUGFzdFRpbWUsXG4gICAgICAgICAgICBzOiAnZSBwdWVyIFNla29ubmVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgU2Vrb25uZW4nLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiAnJWQgTWludXR0ZW4nLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiAnJWQgU3Rvbm5lbicsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6ICclZCBEZWVnJyxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogJyVkIE3DqWludCcsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6ICclZCBKb2VyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBsYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMYW8gW2xvXVxuLy8hIGF1dGhvciA6IFJ5YW4gSGFydCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yeWFuaGFydDJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBsbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2xvJywge1xuICAgICAgICBtb250aHM6ICfguqHgurHguofguoHguq3guplf4LqB4Lq44Lqh4Lqe4LqyX+C6oeC6teC6meC6sl/gu4DguqHguqrgurJf4Lqe4Lq24LqU4Lqq4Lqw4Lqe4LqyX+C6oeC6tOC6luC6uOC6meC6sl/guoHgu43guqXgurDguoHgurvgupRf4Lqq4Lq04LqH4Lqr4LqyX+C6geC6seC6meC6jeC6sl/gupXgurjguqXgurJf4Lqe4Lqw4LqI4Lq04LqBX+C6l+C6seC6meC6p+C6sicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfguq3gurLgupfgurTgupRf4LqI4Lqx4LqZX+C6reC6seC6h+C6hOC6suC6mV/gup7gurjgupRf4Lqe4Lqw4Lqr4Lqx4LqUX+C6quC6uOC6gV/gu4DguqrgurvgurInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgupfgurTgupRf4LqI4Lqx4LqZX+C6reC6seC6h+C6hOC6suC6mV/gup7gurjgupRf4Lqe4Lqw4Lqr4Lqx4LqUX+C6quC6uOC6gV/gu4DguqrgurvgurInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4LqXX+C6iF/guq3guoRf4LqeX+C6nuC6q1/guqrguoFf4LqqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ+C6p+C6seC6mWRkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LqV4Lqt4LqZ4LuA4LqK4Lq74LuJ4LqyfOC6leC6reC6meC7geC6peC6hy8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4LqV4Lqt4LqZ4LuB4Lql4LqHJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C6leC6reC6meC7gOC6iuC6u+C7ieC6sic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuB4Lql4LqHJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4Lqh4Lq34LuJ4LqZ4Lq14LuJ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+C6oeC6t+C7ieC6reC6t+C7iOC6meC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb4Lqn4Lqx4LqZXWRkZGRb4Luc4LuJ4Lqy4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+C6oeC6t+C7ieC6p+C6suC6meC6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4Lqn4Lqx4LqZXWRkZGRb4LuB4Lql4LuJ4Lqn4LqZ4Lq14LuJ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ+C6reC6teC6gSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXPgupzgu4jgurLgupnguqHgurInLFxuICAgICAgICAgICAgczogJ+C6muC7jeC7iOC7gOC6l+C6u+C7iOC6suC7g+C6lOC6p+C6tOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBzczogJyVkIOC6p+C6tOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBtOiAnMSDgupngurLgupfgurUnLFxuICAgICAgICAgICAgbW06ICclZCDgupngurLgupfgurUnLFxuICAgICAgICAgICAgaDogJzEg4LqK4Lq74LuI4Lqn4LuC4Lqh4LqHJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4LqK4Lq74LuI4Lqn4LuC4Lqh4LqHJyxcbiAgICAgICAgICAgIGQ6ICcxIOC6oeC6t+C7iScsXG4gICAgICAgICAgICBkZDogJyVkIOC6oeC6t+C7iScsXG4gICAgICAgICAgICBNOiAnMSDgu4DgupTgurfguq3gupknLFxuICAgICAgICAgICAgTU06ICclZCDgu4DgupTgurfguq3gupknLFxuICAgICAgICAgICAgeTogJzEg4Lqb4Lq1JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Lqb4Lq1JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogLyjgupfgurXgu4gpXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+C6l+C6teC7iCcgKyBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbG87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTGl0aHVhbmlhbiBbbHRdXG4vLyEgYXV0aG9yIDogTWluZGF1Z2FzIE1vesWrcmFzIDogaHR0cHM6Ly9naXRodWIuY29tL21tb3p1cmFzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdW5pdHMgPSB7XG4gICAgICAgIHNzOiAnc2VrdW5kxJdfc2VrdW5kxb5pxbNfc2VrdW5kZXMnLFxuICAgICAgICBtOiAnbWludXTEl19taW51dMSXc19taW51dMSZJyxcbiAgICAgICAgbW06ICdtaW51dMSXc19taW51xI1pxbNfbWludXRlcycsXG4gICAgICAgIGg6ICd2YWxhbmRhX3ZhbGFuZG9zX3ZhbGFuZMSFJyxcbiAgICAgICAgaGg6ICd2YWxhbmRvc192YWxhbmTFs192YWxhbmRhcycsXG4gICAgICAgIGQ6ICdkaWVuYV9kaWVub3NfZGllbsSFJyxcbiAgICAgICAgZGQ6ICdkaWVub3NfZGllbsWzX2RpZW5hcycsXG4gICAgICAgIE06ICdtxJdudW9fbcSXbmVzaW9fbcSXbmVzxK8nLFxuICAgICAgICBNTTogJ23El25lc2lhaV9txJduZXNpxbNfbcSXbmVzaXVzJyxcbiAgICAgICAgeTogJ21ldGFpX21ldMWzX21ldHVzJyxcbiAgICAgICAgeXk6ICdtZXRhaV9tZXTFs19tZXR1cycsXG4gICAgfTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVTZWNvbmRzKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuICdrZWxpb3Mgc2VrdW5kxJdzJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdrZWxpxbMgc2VrdW5kxb5pxbMnIDogJ2tlbGlhcyBzZWt1bmRlcyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlU2luZ3VsYXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4XG4gICAgICAgICAgICA/IGZvcm1zKGtleSlbMF1cbiAgICAgICAgICAgIDogaXNGdXR1cmVcbiAgICAgICAgICAgICAgPyBmb3JtcyhrZXkpWzFdXG4gICAgICAgICAgICAgIDogZm9ybXMoa2V5KVsyXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3BlY2lhbChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAwIHx8IChudW1iZXIgPiAxMCAmJiBudW1iZXIgPCAyMCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1zKGtleSkge1xuICAgICAgICByZXR1cm4gdW5pdHNba2V5XS5zcGxpdCgnXycpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgcmVzdWx0ICsgdHJhbnNsYXRlU2luZ3VsYXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXlbMF0sIGlzRnV0dXJlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHNwZWNpYWwobnVtYmVyKSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyBmb3JtcyhrZXkpWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHNwZWNpYWwobnVtYmVyKSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgbHQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsdCcsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICdzYXVzaW9fdmFzYXJpb19rb3ZvX2JhbGFuZMW+aW9fZ2VndcW+xJdzX2JpcsW+ZWxpb19saWVwb3NfcnVncGrFq8SNaW9fcnVnc8SXam9fc3BhbGlvX2xhcGtyacSNaW9fZ3J1b2TFvmlvJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICdzYXVzaXNfdmFzYXJpc19rb3Zhc19iYWxhbmRpc19nZWd1xb7El19iaXLFvmVsaXNfbGllcGFfcnVncGrFq3Rpc19ydWdzxJdqaXNfc3BhbGlzX2xhcGtyaXRpc19ncnVvZGlzJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NP3xNTU1NPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrRFtvRF0/LyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdzYXVfdmFzX2tvdl9iYWxfZ2VnX2Jpcl9saWVfcmdwX3Jnc19zcGFfbGFwX2dyZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3Nla21hZGllbsSvX3Bpcm1hZGllbsSvX2FudHJhZGllbsSvX3RyZcSNaWFkaWVuxK9fa2V0dmlydGFkaWVuxK9fcGVua3RhZGllbsSvX8WhZcWhdGFkaWVuxK8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ3Nla21hZGllbmlzX3Bpcm1hZGllbmlzX2FudHJhZGllbmlzX3RyZcSNaWFkaWVuaXNfa2V0dmlydGFkaWVuaXNfcGVua3RhZGllbmlzX8WhZcWhdGFkaWVuaXMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9kZGRkIEhIOm1tLyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1Nla19QaXJfQW50X1RyZV9LZXRfUGVuX8WgZcWhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NfUF9BX1RfS19Qbl/FoCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBkZGRkLCBISDptbSBbdmFsLl0nLFxuICAgICAgICAgICAgbDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgbGw6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0nLFxuICAgICAgICAgICAgbGxsOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBISDptbSBbdmFsLl0nLFxuICAgICAgICAgICAgbGxsbDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkLCBISDptbSBbdmFsLl0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vFoGlhbmRpZW5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbUnl0b2pdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1Zha2FyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tQcmHEl2p1c8SvXSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAncG8gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ByaWXFoSAlcycsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGVTZWNvbmRzLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LW9qaS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLW9qaSc7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBsdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMYXR2aWFuIFtsdl1cbi8vISBhdXRob3IgOiBLcmlzdGFwcyBLYXJsc29ucyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9za2Frcmlcbi8vISBhdXRob3IgOiBKxIFuaXMgRWxtZXJpcyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9KYW5pc0VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB1bml0cyA9IHtcbiAgICAgICAgc3M6ICdzZWt1bmRlc19zZWt1bmTEk21fc2VrdW5kZV9zZWt1bmRlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgbTogJ21pbsWrdGVzX21pbsWrdMSTbV9taW7Fq3RlX21pbsWrdGVzJy5zcGxpdCgnXycpLFxuICAgICAgICBtbTogJ21pbsWrdGVzX21pbsWrdMSTbV9taW7Fq3RlX21pbsWrdGVzJy5zcGxpdCgnXycpLFxuICAgICAgICBoOiAnc3R1bmRhc19zdHVuZMSBbV9zdHVuZGFfc3R1bmRhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgaGg6ICdzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzJy5zcGxpdCgnXycpLFxuICAgICAgICBkOiAnZGllbmFzX2RpZW7EgW1fZGllbmFfZGllbmFzJy5zcGxpdCgnXycpLFxuICAgICAgICBkZDogJ2RpZW5hc19kaWVuxIFtX2RpZW5hX2RpZW5hcycuc3BsaXQoJ18nKSxcbiAgICAgICAgTTogJ23Ek25lxaFhX23Ek25lxaFpZW1fbcSTbmVzaXNfbcSTbmXFoWknLnNwbGl0KCdfJyksXG4gICAgICAgIE1NOiAnbcSTbmXFoWFfbcSTbmXFoWllbV9txJNuZXNpc19txJNuZcWhaScuc3BsaXQoJ18nKSxcbiAgICAgICAgeTogJ2dhZGFfZ2FkaWVtX2dhZHNfZ2FkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgeXk6ICdnYWRhX2dhZGllbV9nYWRzX2dhZGknLnNwbGl0KCdfJyksXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gd2l0aG91dFN1ZmZpeCBib29sZWFuIHRydWUgPSBhIGxlbmd0aCBvZiB0aW1lOyBmYWxzZSA9IGJlZm9yZS9hZnRlciBhIHBlcmlvZCBvZiB0aW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvcm1hdChmb3JtcywgbnVtYmVyLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAvLyBFLmcuIFwiMjEgbWluxat0ZVwiLCBcIjMgbWluxat0ZXNcIi5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSAmJiBudW1iZXIgJSAxMDAgIT09IDExID8gZm9ybXNbMl0gOiBmb3Jtc1szXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEUuZy4gXCIyMSBtaW7Fq3Rlc1wiIGFzIGluIFwicMSTYyAyMSBtaW7Fq3Rlc1wiLlxuICAgICAgICAgICAgLy8gRS5nLiBcIjMgbWluxat0xJNtXCIgYXMgaW4gXCJwxJNjIDMgbWluxat0xJNtXCIuXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDEgJiYgbnVtYmVyICUgMTAwICE9PSAxMSA/IGZvcm1zWzBdIDogZm9ybXNbMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgZm9ybWF0KHVuaXRzW2tleV0sIG51bWJlciwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0KHVuaXRzW2tleV0sIG51bWJlciwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlU2Vjb25kcyhudW1iZXIsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZGHFvmFzIHNla3VuZGVzJyA6ICdkYcW+xIFtIHNla3VuZMSTbSc7XG4gICAgfVxuXG4gICAgdmFyIGx2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbHYnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnbEgXJpc19mZWJydcSBcmlzX21hcnRzX2FwcsSrbGlzX21haWpzX2rFq25panNfasWrbGlqc19hdWd1c3RzX3NlcHRlbWJyaXNfb2t0b2JyaXNfbm92ZW1icmlzX2RlY2VtYnJpcycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcl9hcHJfbWFpX2rFq25fasWrbF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdzdsSTdGRpZW5hX3Bpcm1kaWVuYV9vdHJkaWVuYV90cmXFoWRpZW5hX2NldHVydGRpZW5hX3BpZWt0ZGllbmFfc2VzdGRpZW5hJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdl9QX09fVF9DX1BrX1MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3ZfUF9PX1RfQ19Qa19TJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZLicsXG4gICAgICAgICAgICBMTDogJ1lZWVkuIFtnYWRhXSBELiBNTU1NJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkuIFtnYWRhXSBELiBNTU1NLCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIGRkZGQsIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbxaBvZGllbiBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tSxKt0IHB1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3B1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1Zha2FyIHB1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tQYWfEgWp1xaHEgV0gZGRkZCBbcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAncMSTYyAlcycsXG4gICAgICAgICAgICBwYXN0OiAncGlybXMgJXMnLFxuICAgICAgICAgICAgczogcmVsYXRpdmVTZWNvbmRzLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGg6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHk6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGx2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1vbnRlbmVncmluIFttZV1cbi8vISBhdXRob3IgOiBNaW9kcmFnIE5pa2HEjSA8bWlvZHJhZ0ByZXN0YXJ0aXQubWU+IDogaHR0cHM6Ly9naXRodWIuY29tL21pb2RyYWduaWthY1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7XG4gICAgICAgICAgICAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICAgICAgc3M6IFsnc2VrdW5kJywgJ3Nla3VuZGEnLCAnc2VrdW5kaSddLFxuICAgICAgICAgICAgbTogWydqZWRhbiBtaW51dCcsICdqZWRub2cgbWludXRhJ10sXG4gICAgICAgICAgICBtbTogWydtaW51dCcsICdtaW51dGEnLCAnbWludXRhJ10sXG4gICAgICAgICAgICBoOiBbJ2plZGFuIHNhdCcsICdqZWRub2cgc2F0YSddLFxuICAgICAgICAgICAgaGg6IFsnc2F0JywgJ3NhdGEnLCAnc2F0aSddLFxuICAgICAgICAgICAgZGQ6IFsnZGFuJywgJ2RhbmEnLCAnZGFuYSddLFxuICAgICAgICAgICAgTU06IFsnbWplc2VjJywgJ21qZXNlY2EnLCAnbWplc2VjaSddLFxuICAgICAgICAgICAgeXk6IFsnZ29kaW5hJywgJ2dvZGluZScsICdnb2RpbmEnXSxcbiAgICAgICAgfSxcbiAgICAgICAgY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTogZnVuY3Rpb24gKG51bWJlciwgd29yZEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciA9PT0gMVxuICAgICAgICAgICAgICAgID8gd29yZEtleVswXVxuICAgICAgICAgICAgICAgIDogbnVtYmVyID49IDIgJiYgbnVtYmVyIDw9IDRcbiAgICAgICAgICAgICAgICAgID8gd29yZEtleVsxXVxuICAgICAgICAgICAgICAgICAgOiB3b3JkS2V5WzJdO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIG51bWJlciArXG4gICAgICAgICAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIG1lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWUnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bl9qdWxfYXZndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3NqdXRyYSB1XSBMVCcsXG5cbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdcSNZSB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW25lZGplbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRqZWxqa2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFt1dG9ya2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3NyaWplZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmlqZSAlcycsXG4gICAgICAgICAgICBzOiAnbmVrb2xpa28gc2VrdW5kaScsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogJ2RhbicsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1lO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hb3JpIFttaV1cbi8vISBhdXRob3IgOiBKb2huIENvcnJpZ2FuIDxyb2JiaWVjbG9zZXRAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb2huaWRlYWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21pJywge1xuICAgICAgICBtb250aHM6ICdLb2hpLXTEgXRlX0h1aS10YW5ndXJ1X1BvdXTFqy10ZS1yYW5naV9QYWVuZ2Etd2jEgXdoxIFfSGFyYXR1YV9QaXBpcmlfSMWNbmdvaW5nb2lfSGVyZS10dXJpLWvFjWvEgV9NYWh1cnVfV2hpcmluZ2EtxIEtbnVrdV9XaGlyaW5nYS3EgS1yYW5naV9IYWtpaGVhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdLb2hpX0h1aV9Qb3VfUGFlX0hhcmFfUGlwaV9IxY1uZ29pX0hlcmVfTWFodV9XaGktbnVfV2hpLXJhX0hha2knLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsMn0vaSxcbiAgICAgICAgd2Vla2RheXM6ICdSxIF0YXB1X01hbmVfVMWrcmVpX1dlbmVyZWlfVMSBaXRlX1BhcmFpcmVfSMSBdGFyZWknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdUYV9NYV9UxatfV2VfVMSBaV9QYV9IxIEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnVGFfTWFfVMWrX1dlX1TEgWlfUGFfSMSBJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtpXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW2ldIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaSB0ZWllIG1haGFuYSwgaV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1thcG9wbyBpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaW5hbmFoaSBpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3doYWthbXV0dW5nYSBpXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2kgcm90byBpICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBpIG11YScsXG4gICAgICAgICAgICBzOiAndGUgaMSTa29uYSBydWFydWEnLFxuICAgICAgICAgICAgc3M6ICclZCBoxJNrb25hJyxcbiAgICAgICAgICAgIG06ICdoZSBtZW5ldGknLFxuICAgICAgICAgICAgbW06ICclZCBtZW5ldGknLFxuICAgICAgICAgICAgaDogJ3RlIGhhb3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaGFvcmEnLFxuICAgICAgICAgICAgZDogJ2hlIHJhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgcmEnLFxuICAgICAgICAgICAgTTogJ2hlIG1hcmFtYScsXG4gICAgICAgICAgICBNTTogJyVkIG1hcmFtYScsXG4gICAgICAgICAgICB5OiAnaGUgdGF1JyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGF1JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWNlZG9uaWFuIFtta11cbi8vISBhdXRob3IgOiBCb3Jpc2xhdiBNaWNrb3YgOiBodHRwczovL2dpdGh1Yi5jb20vQjBrMFxuLy8hIGF1dGhvciA6IFNhc2hrbyBUb2Rvcm92IDogaHR0cHM6Ly9naXRodWIuY29tL2JreWNlaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1rID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWsnLCB7XG4gICAgICAgIG1vbnRoczogJ9GY0LDQvdGD0LDRgNC4X9GE0LXQstGA0YPQsNGA0Lhf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Zhf0ZjRg9C90Lhf0ZjRg9C70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0ZjQsNC9X9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn0L3QtdC00LXQu9CwX9C/0L7QvdC10LTQtdC70L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLRgNGC0L7Qul/Qv9C10YLQvtC6X9GB0LDQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LXQtF/Qv9C+0L1f0LLRgtC+X9GB0YDQtV/Rh9C10YJf0L/QtdGCX9GB0LDQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvWVf0L9vX9Cy0YJf0YHRgF/Rh9C1X9C/0LVf0YFhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQlNC10L3QtdGBINCy0L5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0KPRgtGA0LUg0LLQvl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0JLQvl0gZGRkZCBb0LLQvl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQktGH0LXRgNCwINCy0L5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQmNC30LzQuNC90LDRgtCw0YLQsF0gZGRkZCBb0LLQvl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQmNC30LzQuNC90LDRgtC40L7Rgl0gZGRkZCBb0LLQvl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9C30LAgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9C/0YDQtdC0ICVzJyxcbiAgICAgICAgICAgIHM6ICfQvdC10LrQvtC70LrRgyDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBzczogJyVkINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIG06ICfQtdC00L3QsCDQvNC40L3Rg9GC0LAnLFxuICAgICAgICAgICAgbW06ICclZCDQvNC40L3Rg9GC0LgnLFxuICAgICAgICAgICAgaDogJ9C10LTQtdC9INGH0LDRgScsXG4gICAgICAgICAgICBoaDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgICAgIGQ6ICfQtdC00LXQvSDQtNC10L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQtNC10L3QsCcsXG4gICAgICAgICAgICBNOiAn0LXQtNC10L0g0LzQtdGB0LXRhicsXG4gICAgICAgICAgICBNTTogJyVkINC80LXRgdC10YbQuCcsXG4gICAgICAgICAgICB5OiAn0LXQtNC90LAg0LPQvtC00LjQvdCwJyxcbiAgICAgICAgICAgIHl5OiAnJWQg0LPQvtC00LjQvdC4JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgbGFzdDJEaWdpdHMgPSBudW1iZXIgJSAxMDA7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQsic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQvSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID4gMTAgJiYgbGFzdDJEaWdpdHMgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QstC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YDQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gNyB8fCBsYXN0RGlnaXQgPT09IDgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QvNC4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtaztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxheWFsYW0gW21sXVxuLy8hIGF1dGhvciA6IEZsb3lkIFBpbmsgOiBodHRwczovL2dpdGh1Yi5jb20vZmxveWRwaW5rXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtbCcsIHtcbiAgICAgICAgbW9udGhzOiAn4LSc4LSo4LWB4LS14LSw4LS/X+C0q+C1huC0rOC1jeC0sOC1geC0teC0sOC0v1/gtK7gtL7gtbzgtJrgtY3gtJrgtY1f4LSP4LSq4LWN4LSw4LS/4LW9X+C0ruC1h+C0r+C1jV/gtJzgtYLgtbpf4LSc4LWC4LSy4LWIX+C0k+C0l+C0uOC1jeC0seC1jeC0seC1jV/gtLjgtYbgtKrgtY3gtLHgtY3gtLHgtILgtKzgtbxf4LSS4LSV4LWN4LSf4LWL4LSs4LW8X+C0qOC0teC0guC0rOC1vF/gtKHgtL/gtLjgtILgtKzgtbwnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+C0nOC0qOC1gS5f4LSr4LWG4LSs4LWN4LSw4LWBLl/gtK7gtL7gtbwuX+C0j+C0quC1jeC0sOC0vy5f4LSu4LWH4LSv4LWNX+C0nOC1guC1ul/gtJzgtYLgtLLgtYguX+C0k+C0ly5f4LS44LWG4LSq4LWN4LSx4LWN4LSxLl/gtJLgtJXgtY3gtJ/gtYsuX+C0qOC0teC0gi5f4LSh4LS/4LS44LSCLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfgtJ7gtL7gtK/gtLHgtL7gtLTgtY3gtJpf4LSk4LS/4LSZ4LWN4LSV4LSz4LS+4LS04LWN4LSaX+C0muC1iuC0teC1jeC0teC0vuC0tOC1jeC0ml/gtKzgtYHgtKfgtKjgtL7gtLTgtY3gtJpf4LS14LWN4LSv4LS+4LS04LS+4LS04LWN4LSaX+C0teC1huC0s+C1jeC0s+C0v+C0r+C0vuC0tOC1jeC0ml/gtLbgtKjgtL/gtK/gtL7gtLTgtY3gtJonLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+C0nuC0vuC0r+C1vF/gtKTgtL/gtJngtY3gtJXgtb5f4LSa4LWK4LS14LWN4LS1X+C0rOC1geC0p+C1u1/gtLXgtY3gtK/gtL7gtLTgtIJf4LS14LWG4LSz4LWN4LSz4LS/X+C0tuC0qOC0vycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgtJ7gtL5f4LSk4LS/X+C0muC1il/gtKzgtYFf4LS14LWN4LSv4LS+X+C0teC1hl/gtLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyAt4LSo4LWBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgtIfgtKjgtY3gtKjgtY1dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4LSo4LS+4LSz4LWGXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4LSH4LSo4LWN4LSo4LSy4LWGXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgtJXgtLTgtL/gtJ7gtY3gtJ5dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4LSV4LS04LS/4LSe4LWN4LSe4LWNJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgtK7gtYHgtbvgtKrgtY0nLFxuICAgICAgICAgICAgczogJ+C0heC1veC0qiDgtKjgtL/gtK7gtL/gtLfgtJngtY3gtJngtb4nLFxuICAgICAgICAgICAgc3M6ICclZCDgtLjgtYbgtJXgtY3gtJXgtbvgtKHgtY0nLFxuICAgICAgICAgICAgbTogJ+C0kuC0sOC1gSDgtK7gtL/gtKjgtL/gtLHgtY3gtLHgtY0nLFxuICAgICAgICAgICAgbW06ICclZCDgtK7gtL/gtKjgtL/gtLHgtY3gtLHgtY0nLFxuICAgICAgICAgICAgaDogJ+C0kuC0sOC1gSDgtK7gtKPgtL/gtJXgtY3gtJXgtYLgtbwnLFxuICAgICAgICAgICAgaGg6ICclZCDgtK7gtKPgtL/gtJXgtY3gtJXgtYLgtbwnLFxuICAgICAgICAgICAgZDogJ+C0kuC0sOC1gSDgtKbgtL/gtLXgtLjgtIInLFxuICAgICAgICAgICAgZGQ6ICclZCDgtKbgtL/gtLXgtLjgtIInLFxuICAgICAgICAgICAgTTogJ+C0kuC0sOC1gSDgtK7gtL7gtLjgtIInLFxuICAgICAgICAgICAgTU06ICclZCDgtK7gtL7gtLjgtIInLFxuICAgICAgICAgICAgeTogJ+C0kuC0sOC1gSDgtLXgtbzgtLfgtIInLFxuICAgICAgICAgICAgeXk6ICclZCDgtLXgtbzgtLfgtIInLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LSw4LS+4LSk4LWN4LSw4LS/fOC0sOC0vuC0teC0v+C0suC1hnzgtIngtJrgtY3gtJog4LSV4LS04LS/4LSe4LWN4LSe4LWNfOC0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gnzgtLDgtL7gtKTgtY3gtLDgtL8vaSxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+C0sOC0vuC0pOC1jeC0sOC0vycgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtKTgtY3gtLDgtL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0teC0v+C0suC1hic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtKTgtY3gtLDgtL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1sO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1vbmdvbGlhbiBbbW5dXG4vLyEgYXV0aG9yIDogSmF2a2hsYW50dWdzIE55YW1kb3JqIDogaHR0cHM6Ly9naXRodWIuY29tL2phdmtoYWFuajdcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9GF0Y3QtNGF0Y3QvSDRgdC10LrRg9C90LQnIDogJ9GF0Y3QtNGF0Y3QvSDRgdC10LrRg9C90LTRi9C9JztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGB0LXQutGD0L3QtCcgOiAnINGB0LXQutGD0L3QtNGL0L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0LzQuNC90YPRgicgOiAnINC80LjQvdGD0YLRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGG0LDQsycgOiAnINGG0LDQs9C40LnQvScpO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDTqdC006nRgCcgOiAnINOp0LTRgNC40LnQvScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDRgdCw0YAnIDogJyDRgdCw0YDRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINC20LjQuycgOiAnINC20LjQu9C40LnQvScpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1uID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbW4nLCB7XG4gICAgICAgIG1vbnRoczogJ9Cd0Y3Qs9C00q/Qs9GN0Y3RgCDRgdCw0YBf0KXQvtGR0YDQtNGD0LPQsNCw0YAg0YHQsNGAX9CT0YPRgNCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CU06nRgNOp0LLQtNKv0LPRjdGN0YAg0YHQsNGAX9Ci0LDQstC00YPQs9Cw0LDRgCDRgdCw0YBf0JfRg9GA0LPQsNC00YPQs9Cw0LDRgCDRgdCw0YBf0JTQvtC70LTRg9Cz0LDQsNGAINGB0LDRgF/QndCw0LnQvNC00YPQs9Cw0LDRgCDRgdCw0YBf0JXRgdC00q/Qs9GN0Y3RgCDRgdCw0YBf0JDRgNCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CQ0YDQstCw0L0g0L3RjdCz0LTSr9Cz0Y3RjdGAINGB0LDRgF/QkNGA0LLQsNC9INGF0L7RkdGA0LTRg9Cz0LDQsNGAINGB0LDRgCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnMSDRgdCw0YBfMiDRgdCw0YBfMyDRgdCw0YBfNCDRgdCw0YBfNSDRgdCw0YBfNiDRgdCw0YBfNyDRgdCw0YBfOCDRgdCw0YBfOSDRgdCw0YBfMTAg0YHQsNGAXzExINGB0LDRgF8xMiDRgdCw0YAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfQndGP0Lxf0JTQsNCy0LDQsF/QnNGP0LPQvNCw0YBf0JvRhdCw0LPQstCwX9Cf0q/RgNGN0LJf0JHQsNCw0YHQsNC9X9CR0Y/QvNCx0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQndGP0Lxf0JTQsNCyX9Cc0Y/Qs1/Qm9GF0LBf0J/Sr9GAX9CR0LDQsF/QkdGP0LwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0J3Rj1/QlNCwX9Cc0Y9f0JvRhV/Qn9KvX9CR0LBf0JHRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVkg0L7QvdGLIE1NTU3Ri9C9IEQnLFxuICAgICAgICAgICAgTExMOiAnWVlZWSDQvtC90YsgTU1NTdGL0L0gRCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgWVlZWSDQvtC90YsgTU1NTdGL0L0gRCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/SrtOofNKu0KUvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfSrtClJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Ku06gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Ku0KUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vTqNC906nTqdC006nRgF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQnNCw0YDQs9Cw0LDRiF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0JjRgNGN0YVdIGRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vTqNGH0LjQs9C006nRgF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb06jQvdCz06nRgNGB06nQvV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINC00LDRgNCw0LAnLFxuICAgICAgICAgICAgcGFzdDogJyVzINOp0LzQvdOpJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9INOp0LTTqdGALyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINOp0LTTqdGAJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1uO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hcmF0aGkgW21yXVxuLy8hIGF1dGhvciA6IEhhcnNoYWQgS2FsZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWxlaHZcbi8vISBhdXRob3IgOiBWaXZlayBBdGhhbHllIDogaHR0cHM6Ly9naXRodWIuY29tL3ZuYXRoYWx5ZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgpacnLFxuICAgICAgICAgICAgMjogJ+ClqCcsXG4gICAgICAgICAgICAzOiAn4KWpJyxcbiAgICAgICAgICAgIDQ6ICfgpaonLFxuICAgICAgICAgICAgNTogJ+ClqycsXG4gICAgICAgICAgICA2OiAn4KWsJyxcbiAgICAgICAgICAgIDc6ICfgpa0nLFxuICAgICAgICAgICAgODogJ+ClricsXG4gICAgICAgICAgICA5OiAn4KWvJyxcbiAgICAgICAgICAgIDA6ICfgpaYnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KWnJzogJzEnLFxuICAgICAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICAgICAn4KWqJzogJzQnLFxuICAgICAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICAgICAn4KWtJzogJzcnLFxuICAgICAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICAgICAn4KWmJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lTXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpJXgpL7gpLngpYAg4KS44KWH4KSV4KSC4KSmJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KS44KWH4KSV4KSC4KSmJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KSu4KS/4KSo4KS/4KSfJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSu4KS/4KSo4KS/4KSf4KWHJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KSk4KS+4KS4JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSk4KS+4KS4JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KSm4KS/4KS14KS4JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSm4KS/4KS14KS4JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KSu4KS54KS/4KSo4KS+JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSu4KS54KS/4KSo4KWHJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KS14KSw4KWN4KS3JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KS14KSw4KWN4KS34KWHJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpuCkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkuOClh+CkleCkguCkpuCkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkruCkv+CkqOCkv+Ckn+Ckvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkruCkv+CkqOCkv+Ckn+CkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkpOCkvuCkuOCkvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkpOCkvuCkuOCkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkpuCkv+CkteCkuOCkvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkpuCkv+CkteCkuOCkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkruCkueCkv+CkqOCljeCkr+Ckvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkruCkueCkv+CkqOCljeCkr+CkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkteCksOCljeCkt+Ckvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkteCksOCljeCkt+CkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgbXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcicsIHtcbiAgICAgICAgbW9udGhzOiAn4KSc4KS+4KSo4KWH4KS14KS+4KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCkvuCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSP4KSq4KWN4KSw4KS/4KSyX+CkruClh1/gpJzgpYLgpKhf4KSc4KWB4KSy4KWIX+CkkeCkl+CkuOCljeCkn1/gpLjgpKrgpY3gpJ/gpYfgpILgpKzgpLBf4KSR4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkteCljeCkueClh+CkguCkrOCksF/gpKHgpL/gpLjgpYfgpILgpKzgpLAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CknOCkvuCkqOClhy5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJouX+Ckj+CkquCljeCksOCkvy5f4KSu4KWHLl/gpJzgpYLgpKguX+CknOClgeCksuCliC5f4KSR4KSXLl/gpLjgpKrgpY3gpJ/gpYfgpIIuX+CkkeCkleCljeCkn+Cliy5f4KSo4KWL4KS14KWN4KS54KWH4KSCLl/gpKHgpL/gpLjgpYfgpIIuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4KSw4KS14KS/4KS14KS+4KSwX+CkuOCli+CkruCkteCkvuCksF/gpK7gpILgpJfgpLPgpLXgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+Ckl+ClgeCksOClguCkteCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLBf4KS24KSo4KS/4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KSw4KS14KS/X+CkuOCli+Ckrl/gpK7gpILgpJfgpLNf4KSs4KWB4KSnX+Ckl+ClgeCksOClgl/gpLbgpYHgpJXgpY3gpLBf4KS24KSo4KS/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KSG4KScXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CkieCkpuCljeCkr+Ckvl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CkleCkvuCksl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KSu4KS+4KSX4KWA4KSyXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4KSu4KSn4KWN4KSv4KWHJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+CkquClguCksOCljeCkteClgCcsXG4gICAgICAgICAgICBzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIE06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgeTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpKrgpLngpL7gpJ/gpYd84KS44KSV4KS+4KSz4KWAfOCkpuClgeCkquCkvuCksOClgHzgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYB84KSw4KS+4KSk4KWN4KSw4KWALyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSq4KS54KS+4KSf4KWHJyB8fCBtZXJpZGllbSA9PT0gJ+CkuOCkleCkvuCks+ClgCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpKbgpYHgpKrgpL7gpLDgpYAnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpY3gpLDgpYAnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMiA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA+PSAwICYmIGhvdXIgPCA2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKrgpLngpL7gpJ/gpYcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkleCkvuCks+ClgCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KWB4KSq4KS+4KSw4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCljeCksOClgCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxheSBbbXNdXG4vLyEgYXV0aG9yIDogV2VsZGFuIEphbWlsaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWxkYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21zJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnQWhhZF9Jc25pbl9TZWxhc2FfUmFidV9LaGFtaXNfSnVtYWF0X1NhYnR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0FoX0lzX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISC5tbScsXG4gICAgICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncGFnaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICd0ZW5nYWhhcmknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3BldGFuZycgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGFnaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RlbmdhaGFyaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BldGFuZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbWFsYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIYXJpIGluaSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tFc29rIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0tlbG1hcmluIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2xlcGFzIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RhbGFtICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB5YW5nIGxlcGFzJyxcbiAgICAgICAgICAgIHM6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBtOiAnc2VtaW5pdCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbml0JyxcbiAgICAgICAgICAgIGg6ICdzZWphbScsXG4gICAgICAgICAgICBoaDogJyVkIGphbScsXG4gICAgICAgICAgICBkOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkOiAnJWQgaGFyaScsXG4gICAgICAgICAgICBNOiAnc2VidWxhbicsXG4gICAgICAgICAgICBNTTogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHk6ICdzZXRhaHVuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGFodW4nLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFsYXkgW21zLW15XVxuLy8hIG5vdGUgOiBERVBSRUNBVEVELCB0aGUgY29ycmVjdCBvbmUgaXMgW21zXVxuLy8hIGF1dGhvciA6IFdlbGRhbiBKYW1pbGkgOiBodHRwczovL2dpdGh1Yi5jb20vd2VsZGFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbXNNeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21zLW15Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnQWhhZF9Jc25pbl9TZWxhc2FfUmFidV9LaGFtaXNfSnVtYWF0X1NhYnR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0FoX0lzX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISC5tbScsXG4gICAgICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncGFnaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICd0ZW5nYWhhcmknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3BldGFuZycgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGFnaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RlbmdhaGFyaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BldGFuZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbWFsYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIYXJpIGluaSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tFc29rIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0tlbG1hcmluIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2xlcGFzIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RhbGFtICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB5YW5nIGxlcGFzJyxcbiAgICAgICAgICAgIHM6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBtOiAnc2VtaW5pdCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbml0JyxcbiAgICAgICAgICAgIGg6ICdzZWphbScsXG4gICAgICAgICAgICBoaDogJyVkIGphbScsXG4gICAgICAgICAgICBkOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkOiAnJWQgaGFyaScsXG4gICAgICAgICAgICBNOiAnc2VidWxhbicsXG4gICAgICAgICAgICBNTTogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHk6ICdzZXRhaHVuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGFodW4nLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXNNeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWx0ZXNlIChNYWx0YSkgW210XVxuLy8hIGF1dGhvciA6IEFsZXNzYW5kcm8gTWFydWNjaWEgOiBodHRwczovL2dpdGh1Yi5jb20vYWxlc21hXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtdCcsIHtcbiAgICAgICAgbW9udGhzOiAnSmFubmFyX0ZyYXJfTWFyenVfQXByaWxfTWVqanVfxKB1bmp1X0x1bGp1X0F3d2lzc3VfU2V0dGVtYnJ1X090dHVicnVfTm92ZW1icnVfRGnEi2VtYnJ1Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GcmFfTWFyX0Fwcl9NZWpfxKB1bl9MdWxfQXd3X1NldF9PdHRfTm92X0RpxIsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ0lsLcSmYWRkX0l0LVRuZWpuX0l0LVRsaWV0YV9MLUVyYmfEp2FfSWwtxKZhbWlzX0lsLcSgaW1nxKdhX0lzLVNpYnQnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ8SmYWRfVG5lX1RsaV9FcmJfxKZhbV/EoGltX1NpYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfEpmFfVG5fVGxfRXJfxKZhX8SgaV9TaScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJbGx1bSBmaWwtXUxUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbR8SnYWRhIGZpbC1dTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtmaWwtXUxUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWwtYmllcmHEpyBmaWwtXUxUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGkgZ8SnYWRkYV0gW2ZpbC1dTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdm4oCZICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBpbHUnLFxuICAgICAgICAgICAgczogJ2Z0aXQgc2Vrb25kaScsXG4gICAgICAgICAgICBzczogJyVkIHNla29uZGknLFxuICAgICAgICAgICAgbTogJ21pbnV0YScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0aScsXG4gICAgICAgICAgICBoOiAnc2llZ8SnYScsXG4gICAgICAgICAgICBoaDogJyVkIHNpZWfEp2F0JyxcbiAgICAgICAgICAgIGQ6ICfEoXVybmF0YScsXG4gICAgICAgICAgICBkZDogJyVkIMShcmFuZXQnLFxuICAgICAgICAgICAgTTogJ3hhaGFyJyxcbiAgICAgICAgICAgIE1NOiAnJWQgeGh1cicsXG4gICAgICAgICAgICB5OiAnc2VuYScsXG4gICAgICAgICAgICB5eTogJyVkIHNuaScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQnVybWVzZSBbbXldXG4vLyEgYXV0aG9yIDogU3F1YXIgdGVhbSwgbXlzcXVhci5jb21cbi8vISBhdXRob3IgOiBEYXZpZCBSb3NzZWxsYXQgOiBodHRwczovL2dpdGh1Yi5jb20vZ2hvbGFkclxuLy8hIGF1dGhvciA6IFRpbiBBdW5nIExpbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS90aGFueWF3emlubWluXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+GBgScsXG4gICAgICAgICAgICAyOiAn4YGCJyxcbiAgICAgICAgICAgIDM6ICfhgYMnLFxuICAgICAgICAgICAgNDogJ+GBhCcsXG4gICAgICAgICAgICA1OiAn4YGFJyxcbiAgICAgICAgICAgIDY6ICfhgYYnLFxuICAgICAgICAgICAgNzogJ+GBhycsXG4gICAgICAgICAgICA4OiAn4YGIJyxcbiAgICAgICAgICAgIDk6ICfhgYknLFxuICAgICAgICAgICAgMDogJ+GBgCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfhgYEnOiAnMScsXG4gICAgICAgICAgICAn4YGCJzogJzInLFxuICAgICAgICAgICAgJ+GBgyc6ICczJyxcbiAgICAgICAgICAgICfhgYQnOiAnNCcsXG4gICAgICAgICAgICAn4YGFJzogJzUnLFxuICAgICAgICAgICAgJ+GBhic6ICc2JyxcbiAgICAgICAgICAgICfhgYcnOiAnNycsXG4gICAgICAgICAgICAn4YGIJzogJzgnLFxuICAgICAgICAgICAgJ+GBiSc6ICc5JyxcbiAgICAgICAgICAgICfhgYAnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgbXkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdteScsIHtcbiAgICAgICAgbW9udGhzOiAn4YCH4YCU4YC64YCU4YCd4YCr4YCb4YCuX+GAluGAseGAluGAseGArOGAuuGAneGAq+GAm+GArl/hgJnhgJDhgLpf4YCn4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCH4YCw4YCc4YCt4YCv4YCE4YC6X+GAnuGAvOGAguGAr+GAkOGAul/hgIXhgIDhgLrhgJDhgIThgLrhgJjhgKxf4YCh4YCx4YCs4YCA4YC64YCQ4YCt4YCv4YCY4YCsX+GAlOGAreGAr+GAneGAhOGAuuGAmOGArF/hgJLhgK7hgIfhgIThgLrhgJjhgKwnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4YCH4YCU4YC6X+GAluGAsV/hgJnhgJDhgLpf4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCc4YCt4YCv4YCE4YC6X+GAnuGAvF/hgIXhgIDhgLpf4YCh4YCx4YCs4YCA4YC6X+GAlOGAreGAr1/hgJLhgK4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn4YCQ4YCU4YCE4YC64YC54YCC4YCU4YC94YCxX+GAkOGAlOGAhOGAuuGAueGAnOGArF/hgKHhgIThgLrhgLnhgILhgKtf4YCX4YCv4YCS4YC54YCT4YCf4YCw4YC4X+GAgOGAvOGArOGAnuGAleGAkOGAseGAuF/hgJ7hgLHhgKzhgIDhgLzhgKxf4YCF4YCU4YCxJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+GAlOGAveGAsV/hgJzhgKxf4YCC4YCrX+GAn+GAsOGAuF/hgIDhgLzhgKxf4YCe4YCx4YCsX+GAlOGAsScuc3BsaXQoJ18nKSxcblxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4YCa4YCU4YCxLl0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhgJnhgJThgIDhgLrhgJbhgLzhgJThgLpdIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+GAmeGAlOGAsS7hgIBdIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+GAleGAvOGAruGAuOGAgeGAsuGAt+GAnuGAseGArF0gZGRkZCBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ+GAnOGArOGAmeGAiuGAuuGAtyAlcyDhgJnhgL7hgKwnLFxuICAgICAgICAgICAgcGFzdDogJ+GAnOGAveGAlOGAuuGAgeGAsuGAt+GAnuGAseGArCAlcyDhgIAnLFxuICAgICAgICAgICAgczogJ+GAheGAgOGAueGAgOGAlOGAui7hgKHhgJThgIrhgLrhgLjhgIThgJrhgLonLFxuICAgICAgICAgICAgc3M6ICclZCDhgIXhgIDhgLnhgIDhgJThgLfhgLonLFxuICAgICAgICAgICAgbTogJ+GAkOGAheGAuuGAmeGAreGAlOGAheGAuicsXG4gICAgICAgICAgICBtbTogJyVkIOGAmeGAreGAlOGAheGAuicsXG4gICAgICAgICAgICBoOiAn4YCQ4YCF4YC64YCU4YCs4YCb4YCuJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4YCU4YCs4YCb4YCuJyxcbiAgICAgICAgICAgIGQ6ICfhgJDhgIXhgLrhgJvhgIDhgLonLFxuICAgICAgICAgICAgZGQ6ICclZCDhgJvhgIDhgLonLFxuICAgICAgICAgICAgTTogJ+GAkOGAheGAuuGAnCcsXG4gICAgICAgICAgICBNTTogJyVkIOGAnCcsXG4gICAgICAgICAgICB5OiAn4YCQ4YCF4YC64YCU4YC+4YCF4YC6JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4YCU4YC+4YCF4YC6JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+GBgeGBguGBg+GBhOGBheGBhuGBh+GBiOGBieGBgF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG15O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE5vcndlZ2lhbiBCb2ttw6VsIFtuYl1cbi8vISBhdXRob3JzIDogRXNwZW4gSG92bGFuZHNkYWwgOiBodHRwczovL2dpdGh1Yi5jb20vcmV4eGFyc1xuLy8hICAgICAgICAgICBTaWd1cmQgR2FydG1hbm4gOiBodHRwczovL2dpdGh1Yi5jb20vc2lndXJkZ2Fcbi8vISAgICAgICAgICAgU3RlcGhlbiBSYW10aHVuIDogaHR0cHM6Ly9naXRodWIuY29tL3N0ZXBoZW5yYW10aHVuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbmIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCduYicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFuLl9mZWIuX21hcnNfYXByLl9tYWlfanVuaV9qdWxpX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdzw7huZGFnX21hbmRhZ190aXJzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7hyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc8O4Ll9tYS5fdGkuX29uLl90by5fZnIuX2zDuC4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc8O4X21hX3RpX29uX3RvX2ZyX2zDuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaSBkYWcga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2kgbW9yZ2VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaSBnw6VyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbZm9ycmlnZV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBzaWRlbicsXG4gICAgICAgICAgICBzOiAnbm9lbiBzZWt1bmRlcicsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG06ICdldHQgbWludXR0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXR0ZXInLFxuICAgICAgICAgICAgaDogJ8OpbiB0aW1lJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdGltZXInLFxuICAgICAgICAgICAgZDogJ8OpbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdlcicsXG4gICAgICAgICAgICB3OiAnw6luIHVrZScsXG4gICAgICAgICAgICB3dzogJyVkIHVrZXInLFxuICAgICAgICAgICAgTTogJ8OpbiBtw6VuZWQnLFxuICAgICAgICAgICAgTU06ICclZCBtw6VuZWRlcicsXG4gICAgICAgICAgICB5OiAnZXR0IMOlcicsXG4gICAgICAgICAgICB5eTogJyVkIMOlcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTmVwYWxlc2UgW25lXVxuLy8hIGF1dGhvciA6IHN1dmFzaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdXZhc2hcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4KWnJyxcbiAgICAgICAgICAgIDI6ICfgpagnLFxuICAgICAgICAgICAgMzogJ+ClqScsXG4gICAgICAgICAgICA0OiAn4KWqJyxcbiAgICAgICAgICAgIDU6ICfgpasnLFxuICAgICAgICAgICAgNjogJ+ClrCcsXG4gICAgICAgICAgICA3OiAn4KWtJyxcbiAgICAgICAgICAgIDg6ICfgpa4nLFxuICAgICAgICAgICAgOTogJ+ClrycsXG4gICAgICAgICAgICAwOiAn4KWmJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Clpyc6ICcxJyxcbiAgICAgICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICAgICAn4KWpJzogJzMnLFxuICAgICAgICAgICAgJ+Clqic6ICc0JyxcbiAgICAgICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICAgICAn4KWsJzogJzYnLFxuICAgICAgICAgICAgJ+ClrSc6ICc3JyxcbiAgICAgICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICAgICAn4KWvJzogJzknLFxuICAgICAgICAgICAgJ+Clpic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBuZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25lJywge1xuICAgICAgICBtb250aHM6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpL/gpLJf4KSu4KSIX+CknOClgeCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS34KWN4KSfX+CkuOClh+CkquCljeCkn+Clh+CkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KSt4KWH4KSu4KWN4KSs4KSwX+CkoeCkv+CkuOClh+CkruCljeCkrOCksCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4KSc4KSoLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpL8uX+CkruCkiF/gpJzgpYHgpKhf4KSc4KWB4KSy4KS+4KSILl/gpIXgpJcuX+CkuOClh+CkquCljeCkny5f4KSF4KSV4KWN4KSf4KWLLl/gpKjgpYvgpK3gpYcuX+CkoeCkv+CkuOClhy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfgpIbgpIfgpKTgpKzgpL7gpLBf4KS44KWL4KSu4KSs4KS+4KSwX+CkruCkmeCljeCkl+CksuCkrOCkvuCksF/gpKzgpYHgpKfgpKzgpL7gpLBf4KSs4KS/4KS54KS/4KSs4KS+4KSwX+CktuClgeCkleCljeCksOCkrOCkvuCksF/gpLbgpKjgpL/gpKzgpL7gpLAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgpIbgpIfgpKQuX+CkuOCli+Ckri5f4KSu4KSZ4KWN4KSX4KSyLl/gpKzgpYHgpKcuX+CkrOCkv+CkueCkvy5f4KS24KWB4KSV4KWN4KSwLl/gpLbgpKjgpL8uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+Ckhi5f4KS44KWLLl/gpK7gpIIuX+CkrOClgS5f4KSs4KS/Ll/gpLbgpYEuX+Ckti4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQeCkleCliyBoOm1tIOCkrOCknOClhycsXG4gICAgICAgICAgICBMVFM6ICdB4KSV4KWLIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEHgpJXgpYsgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CksOCkvuCkpOCkv3zgpKzgpL/gpLngpL7gpKh84KSm4KS/4KSJ4KSB4KS44KWLfOCkuOCkvuCkgeCknS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpOCkvycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkrOCkv+CkueCkvuCkqCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKbgpL/gpIngpIHgpLjgpYsnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkvuCkgeCknScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkrOCkv+CkueCkvuCkqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KS/4KSJ4KSB4KS44KWLJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpL7gpIHgpJ0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCkvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CkhuCknF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpK3gpYvgpLLgpL9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+CkhuCkieCkgeCkpuCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CkueCkv+CknOCli10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KSX4KSP4KSV4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPgpK7gpL4nLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCkheCkl+CkvuCkoeCkvycsXG4gICAgICAgICAgICBzOiAn4KSV4KWH4KS54KWAIOCkleCljeCkt+CkoycsXG4gICAgICAgICAgICBzczogJyVkIOCkuOClh+CkleClh+Cko+CljeCkoScsXG4gICAgICAgICAgICBtOiAn4KSP4KSVIOCkruCkv+CkqOClh+CknycsXG4gICAgICAgICAgICBtbTogJyVkIOCkruCkv+CkqOClh+CknycsXG4gICAgICAgICAgICBoOiAn4KSP4KSVIOCkmOCko+CljeCkn+CkvicsXG4gICAgICAgICAgICBoaDogJyVkIOCkmOCko+CljeCkn+CkvicsXG4gICAgICAgICAgICBkOiAn4KSP4KSVIOCkpuCkv+CkqCcsXG4gICAgICAgICAgICBkZDogJyVkIOCkpuCkv+CkqCcsXG4gICAgICAgICAgICBNOiAn4KSP4KSVIOCkruCkueCkv+CkqOCkvicsXG4gICAgICAgICAgICBNTTogJyVkIOCkruCkueCkv+CkqOCkvicsXG4gICAgICAgICAgICB5OiAn4KSP4KSVIOCkrOCksOCljeCktycsXG4gICAgICAgICAgICB5eTogJyVkIOCkrOCksOCljeCktycsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBEdXRjaCBbbmxdXG4vLyEgYXV0aG9yIDogSm9yaXMgUsO2bGluZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3Jpc3JvbGluZ1xuLy8hIGF1dGhvciA6IEphY29iIE1pZGRhZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWRkYWdqXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9XG4gICAgICAgICAgICAnamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9XG4gICAgICAgICAgICAnamFuX2ZlYl9tcnRfYXByX21laV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15qYW4vaSxcbiAgICAgICAgICAgIC9eZmViL2ksXG4gICAgICAgICAgICAvXihtYWFydHxtcnRcXC4/KSQvaSxcbiAgICAgICAgICAgIC9eYXByL2ksXG4gICAgICAgICAgICAvXm1laSQvaSxcbiAgICAgICAgICAgIC9eanVuW2kuXT8kL2ksXG4gICAgICAgICAgICAvXmp1bFtpLl0/JC9pLFxuICAgICAgICAgICAgL15hdWcvaSxcbiAgICAgICAgICAgIC9ec2VwL2ksXG4gICAgICAgICAgICAvXm9rdC9pLFxuICAgICAgICAgICAgL15ub3YvaSxcbiAgICAgICAgICAgIC9eZGVjL2ksXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8YXByaWx8bWVpfGp1W25sXWl8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXJ8amFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaTtcblxuICAgIHZhciBubCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25sJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJpX2ZlYnJ1YXJpX21hYXJ0X2FwcmlsX21laV9qdW5pX2p1bGlfYXVndXN0dXNfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98bWVpfGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pLFxuXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnem9uZGFnX21hYW5kYWdfZGluc2RhZ193b2Vuc2RhZ19kb25kZXJkYWdfdnJpamRhZ196YXRlcmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3pvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICd6b19tYV9kaV93b19kb192cl96YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdmFuZGFhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2lzdGVyZW4gb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2FmZ2Vsb3Blbl0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb3ZlciAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgZ2VsZWRlbicsXG4gICAgICAgICAgICBzOiAnZWVuIHBhYXIgc2Vjb25kZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRlbicsXG4gICAgICAgICAgICBtOiAnw6nDqW4gbWludXV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoOiAnw6nDqW4gdXVyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdXVyJyxcbiAgICAgICAgICAgIGQ6ICfDqcOpbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdlbicsXG4gICAgICAgICAgICB3OiAnw6nDqW4gd2VlaycsXG4gICAgICAgICAgICB3dzogJyVkIHdla2VuJyxcbiAgICAgICAgICAgIE06ICfDqcOpbiBtYWFuZCcsXG4gICAgICAgICAgICBNTTogJyVkIG1hYW5kZW4nLFxuICAgICAgICAgICAgeTogJ8Opw6luIGphYXInLFxuICAgICAgICAgICAgeXk6ICclZCBqYWFyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIG51bWJlciArXG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwID8gJ3N0ZScgOiAnZGUnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5sO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IER1dGNoIChCZWxnaXVtKSBbbmwtYmVdXG4vLyEgYXV0aG9yIDogSm9yaXMgUsO2bGluZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3Jpc3JvbGluZ1xuLy8hIGF1dGhvciA6IEphY29iIE1pZGRhZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWRkYWdqXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9XG4gICAgICAgICAgICAnamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9XG4gICAgICAgICAgICAnamFuX2ZlYl9tcnRfYXByX21laV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15qYW4vaSxcbiAgICAgICAgICAgIC9eZmViL2ksXG4gICAgICAgICAgICAvXihtYWFydHxtcnRcXC4/KSQvaSxcbiAgICAgICAgICAgIC9eYXByL2ksXG4gICAgICAgICAgICAvXm1laSQvaSxcbiAgICAgICAgICAgIC9eanVuW2kuXT8kL2ksXG4gICAgICAgICAgICAvXmp1bFtpLl0/JC9pLFxuICAgICAgICAgICAgL15hdWcvaSxcbiAgICAgICAgICAgIC9ec2VwL2ksXG4gICAgICAgICAgICAvXm9rdC9pLFxuICAgICAgICAgICAgL15ub3YvaSxcbiAgICAgICAgICAgIC9eZGVjL2ksXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8YXByaWx8bWVpfGp1W25sXWl8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXJ8amFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaTtcblxuICAgIHZhciBubEJlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmwtYmUnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhvdXREb3RzW20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzW20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oamFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xtZWl8anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcblxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICd6b25kYWdfbWFhbmRhZ19kaW5zZGFnX3dvZW5zZGFnX2RvbmRlcmRhZ192cmlqZGFnX3phdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnem8uX21hLl9kaS5fd28uX2RvLl92ci5femEuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3pvX21hX2RpX3dvX2RvX3ZyX3phJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t2YW5kYWFnIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnaXN0ZXJlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbYWZnZWxvcGVuXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvdmVyICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBnZWxlZGVuJyxcbiAgICAgICAgICAgIHM6ICdlZW4gcGFhciBzZWNvbmRlbicsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZGVuJyxcbiAgICAgICAgICAgIG06ICfDqcOpbiBtaW51dXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVuJyxcbiAgICAgICAgICAgIGg6ICfDqcOpbiB1dXInLFxuICAgICAgICAgICAgaGg6ICclZCB1dXInLFxuICAgICAgICAgICAgZDogJ8Opw6luIGRhZycsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2VuJyxcbiAgICAgICAgICAgIE06ICfDqcOpbiBtYWFuZCcsXG4gICAgICAgICAgICBNTTogJyVkIG1hYW5kZW4nLFxuICAgICAgICAgICAgeTogJ8Opw6luIGphYXInLFxuICAgICAgICAgICAgeXk6ICclZCBqYWFyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIG51bWJlciArXG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwID8gJ3N0ZScgOiAnZGUnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5sQmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTnlub3JzayBbbm5dXG4vLyEgYXV0aG9ycyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tZWNodXdpbmRcbi8vISAgICAgICAgICAgU3RlcGhlbiBSYW10aHVuIDogaHR0cHM6Ly9naXRodWIuY29tL3N0ZXBoZW5yYW10aHVuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbm4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFuLl9mZWIuX21hcnNfYXByLl9tYWlfanVuaV9qdWxpX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdzdW5kYWdfbcOlbmRhZ190eXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2xhdXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzdS5fbcOlLl90eS5fb24uX3RvLl9mci5fbGF1Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzdV9tw6VfdHlfb25fdG9fZnJfbGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSSBkYWcga2xva2thXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0kgbW9yZ29uIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSSBnw6VyIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbRsO4cmVnw6VhbmRlXSBkZGRkIFtrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHNpZGFuJyxcbiAgICAgICAgICAgIHM6ICdub2tyZSBzZWt1bmQnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmQnLFxuICAgICAgICAgICAgbTogJ2VpdCBtaW51dHQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHQnLFxuICAgICAgICAgICAgaDogJ2VpbiB0aW1lJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdGltYXInLFxuICAgICAgICAgICAgZDogJ2VpbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdhcicsXG4gICAgICAgICAgICB3OiAnZWkgdmVrZScsXG4gICAgICAgICAgICB3dzogJyVkIHZla2VyJyxcbiAgICAgICAgICAgIE06ICdlaW4gbcOlbmFkJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOlbmFkZXInLFxuICAgICAgICAgICAgeTogJ2VpdCDDpXInLFxuICAgICAgICAgICAgeXk6ICclZCDDpXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5uO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE9jY2l0YW4sIGxlbmdhZG9jaWFuIGRpYWxlY3RlIFtvYy1sbmNdXG4vLyEgYXV0aG9yIDogUXVlbnRpbiBQQUfDiFMgOiBodHRwczovL2dpdGh1Yi5jb20vUXVlbnR5MzFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBvY0xuYyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ29jLWxuYycsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICdnZW5pw6hyX2ZlYnJpw6hyX21hcsOnX2FicmlsX21haV9qdW5oX2p1bGhldF9hZ29zdF9zZXRlbWJyZV9vY3TDsmJyZV9ub3ZlbWJyZV9kZWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6IFwiZGUgZ2VuacOocl9kZSBmZWJyacOocl9kZSBtYXLDp19kJ2FicmlsX2RlIG1haV9kZSBqdW5oX2RlIGp1bGhldF9kJ2Fnb3N0X2RlIHNldGVtYnJlX2Qnb2N0w7JicmVfZGUgbm92ZW1icmVfZGUgZGVjZW1icmVcIi5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0Rbb0RdPyhcXHMpK01NTU0vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdnZW4uX2ZlYnIuX21hcsOnX2Fici5fbWFpX2p1bmhfanVsaC5fYWdvLl9zZXQuX29jdC5fbm92Ll9kZWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZGltZW5nZV9kaWx1bnNfZGltYXJzX2RpbcOoY3Jlc19kaWrDsnVzX2RpdmVuZHJlc19kaXNzYWJ0ZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RnLl9kbC5fZG0uX2RjLl9kai5fZHYuX2RzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkZ19kbF9kbV9kY19kal9kdl9kcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gW2RlXSBZWVlZIFthXSBIOm1tJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVksIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFtkZV0gWVlZWSBbYV0gSDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkIEQgTU1NIFlZWVksIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t1w6hpIGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbZGVtYW4gYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2nDqHIgYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtwYXNzYXQgYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IFwiZCdhcXXDrSAlc1wiLFxuICAgICAgICAgICAgcGFzdDogJ2ZhICVzJyxcbiAgICAgICAgICAgIHM6ICd1bmFzIHNlZ29uZGFzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vnb25kYXMnLFxuICAgICAgICAgICAgbTogJ3VuYSBtaW51dGEnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGFzJyxcbiAgICAgICAgICAgIGg6ICd1bmEgb3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgb3JhcycsXG4gICAgICAgICAgICBkOiAndW4gam9ybicsXG4gICAgICAgICAgICBkZDogJyVkIGpvcm5zJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW4gYW4nLFxuICAgICAgICAgICAgeXk6ICclZCBhbnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0ocnxufHR8w6h8YSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPVxuICAgICAgICAgICAgICAgIG51bWJlciA9PT0gMVxuICAgICAgICAgICAgICAgICAgICA/ICdyJ1xuICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgID8gJ24nXG4gICAgICAgICAgICAgICAgICAgICAgOiBudW1iZXIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3InXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gNFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICd0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICfDqCc7XG4gICAgICAgICAgICBpZiAocGVyaW9kID09PSAndycgfHwgcGVyaW9kID09PSAnVycpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9jTG5jO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFB1bmphYmkgKEluZGlhKSBbcGEtaW5dXG4vLyEgYXV0aG9yIDogSGFycHJlZXQgU2luZ2ggOiBodHRwczovL2dpdGh1Yi5jb20vaGFycHJlZXRraGFsc2FndGJpdFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgqacnLFxuICAgICAgICAgICAgMjogJ+CpqCcsXG4gICAgICAgICAgICAzOiAn4KmpJyxcbiAgICAgICAgICAgIDQ6ICfgqaonLFxuICAgICAgICAgICAgNTogJ+CpqycsXG4gICAgICAgICAgICA2OiAn4KmsJyxcbiAgICAgICAgICAgIDc6ICfgqa0nLFxuICAgICAgICAgICAgODogJ+CpricsXG4gICAgICAgICAgICA5OiAn4KmvJyxcbiAgICAgICAgICAgIDA6ICfgqaYnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KmnJzogJzEnLFxuICAgICAgICAgICAgJ+CpqCc6ICcyJyxcbiAgICAgICAgICAgICfgqaknOiAnMycsXG4gICAgICAgICAgICAn4KmqJzogJzQnLFxuICAgICAgICAgICAgJ+Cpqyc6ICc1JyxcbiAgICAgICAgICAgICfgqawnOiAnNicsXG4gICAgICAgICAgICAn4KmtJzogJzcnLFxuICAgICAgICAgICAgJ+Cpric6ICc4JyxcbiAgICAgICAgICAgICfgqa8nOiAnOScsXG4gICAgICAgICAgICAn4KmmJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIHBhSW4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwYS1pbicsIHtcbiAgICAgICAgLy8gVGhlcmUgYXJlIG1vbnRocyBuYW1lIGFzIHBlciBOYW5ha3NoYWhpIENhbGVuZGFyIGJ1dCB0aGV5IGFyZSBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBQdW5qYWJpLlxuICAgICAgICBtb250aHM6ICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4Kic4Kio4Ki14Kiw4KmAX+Coq+CovOCosOCoteCosOCpgF/gqK7gqL7gqLDgqJpf4KiF4Kiq4KmN4Kiw4KmI4KiyX+CoruCoiF/gqJzgqYLgqKhf4Kic4KmB4Kiy4Ki+4KiIX+CoheCol+CouOCopF/gqLjgqKTgqbDgqKzgqLBf4KiF4KiV4Kik4KmC4Kis4KiwX+CoqOCoteCpsOCorOCosF/gqKbgqLjgqbDgqKzgqLAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfgqJDgqKTgqLXgqL7gqLBf4Ki44KmL4Kiu4Ki14Ki+4KiwX+CoruCpsOCol+CosuCoteCovuCosF/gqKzgqYHgqKfgqLXgqL7gqLBf4Ki14KmA4Kiw4Ki14Ki+4KiwX+CouOCovOCpgeCpseColeCosOCoteCovuCosF/gqLjgqLzgqKjgqYDgqJrgqLDgqLXgqL7gqLAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KiQ4KikX+CouOCpi+Corl/gqK7gqbDgqJfgqLJf4Kis4KmB4KinX+CoteCpgOCosF/gqLjgqLzgqYHgqJXgqLBf4Ki44Ki84Kio4KmAJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgqLXgqJzgqYcnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCphycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgqLXgqJzgqYcnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgqIXgqJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vgqIXgqJfgqLLgqL5dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgqKrgqL/gqJvgqLLgqYddIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4Ki14Ki/4Kmx4KiaJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgqKrgqL/gqJvgqLLgqYcnLFxuICAgICAgICAgICAgczogJ+ColeCpgeConSDgqLjgqJXgqL/gqbDgqJ8nLFxuICAgICAgICAgICAgc3M6ICclZCDgqLjgqJXgqL/gqbDgqJ8nLFxuICAgICAgICAgICAgbTogJ+Coh+ColSDgqK7gqL/gqbDgqJ8nLFxuICAgICAgICAgICAgbW06ICclZCDgqK7gqL/gqbDgqJ8nLFxuICAgICAgICAgICAgaDogJ+Coh+CpseColSDgqJjgqbDgqJ/gqL4nLFxuICAgICAgICAgICAgaGg6ICclZCDgqJjgqbDgqJ/gqYcnLFxuICAgICAgICAgICAgZDogJ+Coh+CpseColSDgqKbgqL/gqKgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgqKbgqL/gqKgnLFxuICAgICAgICAgICAgTTogJ+Coh+CpseColSDgqK7gqLngqYDgqKjgqL4nLFxuICAgICAgICAgICAgTU06ICclZCDgqK7gqLngqYDgqKjgqYcnLFxuICAgICAgICAgICAgeTogJ+Coh+CpseColSDgqLjgqL7gqLInLFxuICAgICAgICAgICAgeXk6ICclZCDgqLjgqL7gqLInLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kmn4Kmo4Kmp4Kmq4Kmr4Kms4Kmt4Kmu4Kmv4KmmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBQdW5qYWJpIG5vdGF0aW9uIGZvciBtZXJpZGllbXMgYXJlIHF1aXRlIGZ1enp5IGluIHByYWN0aWNlLiBXaGlsZSB0aGVyZSBleGlzdHNcbiAgICAgICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gqLDgqL7gqKR84Ki44Ki14KmH4KiwfOCopuCpgeCoquCoueCov+CosHzgqLjgqLzgqL7gqK4vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgqLDgqL7gqKQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqLjgqLXgqYfgqLAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kim4KmB4Kiq4Ki54Ki/4KiwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqLjgqLzgqL7gqK4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kiw4Ki+4KikJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLjgqLXgqYfgqLAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CopuCpgeCoquCoueCov+CosCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ki44Ki84Ki+4KiuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLDgqL7gqKQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGFJbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQb2xpc2ggW3BsXVxuLy8hIGF1dGhvciA6IFJhZmFsIEhpcnN6IDogaHR0cHM6Ly9naXRodWIuY29tL2V2b0xcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNOb21pbmF0aXZlID1cbiAgICAgICAgICAgICdzdHljemXFhF9sdXR5X21hcnplY19rd2llY2llxYRfbWFqX2N6ZXJ3aWVjX2xpcGllY19zaWVycGllxYRfd3J6ZXNpZcWEX3Bhxbpkemllcm5pa19saXN0b3BhZF9ncnVkemllxYQnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU3ViamVjdGl2ZSA9XG4gICAgICAgICAgICAnc3R5Y3puaWFfbHV0ZWdvX21hcmNhX2t3aWV0bmlhX21hamFfY3plcndjYV9saXBjYV9zaWVycG5pYV93cnplxZtuaWFfcGHFumR6aWVybmlrYV9saXN0b3BhZGFfZ3J1ZG5pYScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9ec3R5L2ksXG4gICAgICAgICAgICAvXmx1dC9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9ea3dpL2ksXG4gICAgICAgICAgICAvXm1hai9pLFxuICAgICAgICAgICAgL15jemUvaSxcbiAgICAgICAgICAgIC9ebGlwL2ksXG4gICAgICAgICAgICAvXnNpZS9pLFxuICAgICAgICAgICAgL153cnovaSxcbiAgICAgICAgICAgIC9ecGHFui9pLFxuICAgICAgICAgICAgL15saXMvaSxcbiAgICAgICAgICAgIC9eZ3J1L2ksXG4gICAgICAgIF07XG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gJSAxMCA8IDUgJiYgbiAlIDEwID4gMSAmJiB+fihuIC8gMTApICUgMTAgIT09IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2VrdW5kJyk7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0xJknO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZ29kemluYScgOiAnZ29kemluxJknO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZ29kemlueScgOiAnZ29kemluJyk7XG4gICAgICAgICAgICBjYXNlICd3dyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICd0eWdvZG5pZScgOiAndHlnb2RuaScpO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWllc2nEhWNlJyA6ICdtaWVzacSZY3knKTtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2xhdGEnIDogJ2xhdCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBsID0gbW9tZW50LmRlZmluZUxvY2FsZSgncGwnLCB7XG4gICAgICAgIG1vbnRoczogZnVuY3Rpb24gKG1vbWVudFRvRm9ybWF0LCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50VG9Gb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzTm9taW5hdGl2ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL0QgTU1NTS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1N1YmplY3RpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNOb21pbmF0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ3N0eV9sdXRfbWFyX2t3aV9tYWpfY3plX2xpcF9zaWVfd3J6X3BhxbpfbGlzX2dydScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnbmllZHppZWxhX3BvbmllZHppYcWCZWtfd3RvcmVrX8Wbcm9kYV9jendhcnRla19wacSFdGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25kel9wb25fd3RfxZtyX2N6d19wdF9zb2InLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnTmRfUG5fV3RfxZpyX0N6X1B0X1NvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0R6acWbIG9dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbSnV0cm8gb10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyBuaWVkemllbMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXZSB3dG9yZWsgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgxZtyb2TEmSBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyBzb2JvdMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbV10gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1djem9yYWogb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYLEhSBuaWVkemllbMSZIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYLEhSDFm3JvZMSZIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYLEhSBzb2JvdMSZIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCeV0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB0ZW11JyxcbiAgICAgICAgICAgIHM6ICdraWxrYSBzZWt1bmQnLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogJzEgZHppZcWEJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZG5pJyxcbiAgICAgICAgICAgIHc6ICd0eWR6aWXFhCcsXG4gICAgICAgICAgICB3dzogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogJ21pZXNpxIVjJyxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiAncm9rJyxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUG9ydHVndWVzZSBbcHRdXG4vLyEgYXV0aG9yIDogSmVmZmVyc29uIDogaHR0cHM6Ly9naXRodWIuY29tL2phbGV4NzlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBwdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0Jywge1xuICAgICAgICBtb250aHM6ICdqYW5laXJvX2ZldmVyZWlyb19tYXLDp29fYWJyaWxfbWFpb19qdW5ob19qdWxob19hZ29zdG9fc2V0ZW1icm9fb3V0dWJyb19ub3ZlbWJyb19kZXplbWJybycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmV2X21hcl9hYnJfbWFpX2p1bl9qdWxfYWdvX3NldF9vdXRfbm92X2Rleicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnRG9taW5nb19TZWd1bmRhLWZlaXJhX1RlcsOnYS1mZWlyYV9RdWFydGEtZmVpcmFfUXVpbnRhLWZlaXJhX1NleHRhLWZlaXJhX1PDoWJhZG8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0RvbV9TZWdfVGVyX1F1YV9RdWlfU2V4X1PDoWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnRG9fMsKqXzPCql80wqpfNcKqXzbCql9Tw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIb2plIMOgc10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBbWFuaMOjIMOgc10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoHNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbT250ZW0gw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpID09PSAwIHx8IHRoaXMuZGF5KCkgPT09IDZcbiAgICAgICAgICAgICAgICAgICAgPyAnW8OabHRpbW9dIGRkZGQgW8Ogc10gTFQnIC8vIFNhdHVyZGF5ICsgU3VuZGF5XG4gICAgICAgICAgICAgICAgICAgIDogJ1vDmmx0aW1hXSBkZGRkIFvDoHNdIExUJzsgLy8gTW9uZGF5IC0gRnJpZGF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdlbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaMOhICVzJyxcbiAgICAgICAgICAgIHM6ICdzZWd1bmRvcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG06ICd1bSBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGg6ICd1bWEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1bSBkaWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkaWFzJyxcbiAgICAgICAgICAgIHc6ICd1bWEgc2VtYW5hJyxcbiAgICAgICAgICAgIHd3OiAnJWQgc2VtYW5hcycsXG4gICAgICAgICAgICBNOiAndW0gbcOqcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1bSBhbm8nLFxuICAgICAgICAgICAgeXk6ICclZCBhbm9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBwdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQb3J0dWd1ZXNlIChCcmF6aWwpIFtwdC1icl1cbi8vISBhdXRob3IgOiBDYWlvIFJpYmVpcm8gUGVyZWlyYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jYWlvLXJpYmVpcm8tcGVyZWlyYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHB0QnIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwdC1icicsIHtcbiAgICAgICAgbW9udGhzOiAnamFuZWlyb19mZXZlcmVpcm9fbWFyw6dvX2FicmlsX21haW9fanVuaG9fanVsaG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGV6ZW1icm8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2Zldl9tYXJfYWJyX21haV9qdW5fanVsX2Fnb19zZXRfb3V0X25vdl9kZXonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ2RvbWluZ29fc2VndW5kYS1mZWlyYV90ZXLDp2EtZmVpcmFfcXVhcnRhLWZlaXJhX3F1aW50YS1mZWlyYV9zZXh0YS1mZWlyYV9zw6FiYWRvJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb21fc2VnX3Rlcl9xdWFfcXVpX3NleF9zw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvXzLCql8zwqpfNMKqXzXCql82wqpfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSA9PT0gMCB8fCB0aGlzLmRheSgpID09PSA2XG4gICAgICAgICAgICAgICAgICAgID8gJ1vDmmx0aW1vXSBkZGRkIFvDoHNdIExUJyAvLyBTYXR1cmRheSArIFN1bmRheVxuICAgICAgICAgICAgICAgICAgICA6ICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2jDoSAlcycsXG4gICAgICAgICAgICBzOiAncG91Y29zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VtIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VtYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VtIGRpYScsXG4gICAgICAgICAgICBkZDogJyVkIGRpYXMnLFxuICAgICAgICAgICAgTTogJ3VtIG3DqnMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW0gYW5vJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5vcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICBpbnZhbGlkRGF0ZTogJ0RhdGEgaW52w6FsaWRhJyxcbiAgICB9KTtcblxuICAgIHJldHVybiBwdEJyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFJvbWFuaWFuIFtyb11cbi8vISBhdXRob3IgOiBWbGFkIEd1cmRpZ2EgOiBodHRwczovL2dpdGh1Yi5jb20vZ3VyZGlnYVxuLy8hIGF1dGhvciA6IFZhbGVudGluIEFnYWNoaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hdmFseVxuLy8hIGF1dGhvciA6IEVtYW51ZWwgQ2Vwb2kgOiBodHRwczovL2dpdGh1Yi5jb20vY2VwZW1cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICAgICBzczogJ3NlY3VuZGUnLFxuICAgICAgICAgICAgICAgIG1tOiAnbWludXRlJyxcbiAgICAgICAgICAgICAgICBoaDogJ29yZScsXG4gICAgICAgICAgICAgICAgZGQ6ICd6aWxlJyxcbiAgICAgICAgICAgICAgICB3dzogJ3PEg3B0xINtw6JuaScsXG4gICAgICAgICAgICAgICAgTU06ICdsdW5pJyxcbiAgICAgICAgICAgICAgICB5eTogJ2FuaScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VwYXJhdG9yID0gJyAnO1xuICAgICAgICBpZiAobnVtYmVyICUgMTAwID49IDIwIHx8IChudW1iZXIgPj0gMTAwICYmIG51bWJlciAlIDEwMCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9ICcgZGUgJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVtYmVyICsgc2VwYXJhdG9yICsgZm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIHJvID0gbW9tZW50LmRlZmluZUxvY2FsZSgncm8nLCB7XG4gICAgICAgIG1vbnRoczogJ2lhbnVhcmllX2ZlYnJ1YXJpZV9tYXJ0aWVfYXByaWxpZV9tYWlfaXVuaWVfaXVsaWVfYXVndXN0X3NlcHRlbWJyaWVfb2N0b21icmllX25vaWVtYnJpZV9kZWNlbWJyaWUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2lhbi5fZmViLl9tYXJ0Ll9hcHIuX21haV9pdW4uX2l1bC5fYXVnLl9zZXB0Ll9vY3QuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2R1bWluaWPEg19sdW5pX21hcsibaV9taWVyY3VyaV9qb2lfdmluZXJpX3PDom1ixIN0xIMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdEdW1fTHVuX01hcl9NaWVfSm9pX1Zpbl9Tw6JtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0R1X0x1X01hX01pX0pvX1ZpX1PDoicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2F6aSBsYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttw6JpbmUgbGFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbbGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaWVyaSBsYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbZm9zdGFdIGRkZGQgW2xhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3Blc3RlICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDrm4gdXJtxIMnLFxuICAgICAgICAgICAgczogJ2PDonRldmEgc2VjdW5kZScsXG4gICAgICAgICAgICBzczogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG06ICd1biBtaW51dCcsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGg6ICdvIG9yxIMnLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkOiAnbyB6aScsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHc6ICdvIHPEg3B0xINtw6JuxIMnLFxuICAgICAgICAgICAgd3c6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNOiAnbyBsdW7EgycsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHk6ICd1biBhbicsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFJ1c3NpYW4gW3J1XVxuLy8hIGF1dGhvciA6IFZpa3Rvcm1pbmF0b3IgOiBodHRwczovL2dpdGh1Yi5jb20vVmlrdG9ybWluYXRvclxuLy8hIGF1dGhvciA6IE1lbmVsaW9uIEVsZW5zw7psZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDog0JrQvtGA0LXQvdCx0LXRgNCzINCc0LDRgNC6IDogaHR0cHM6Ly9naXRodWIuY29tL3NvY2tldHBhaXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMVxuICAgICAgICAgICAgPyBmb3Jtc1swXVxuICAgICAgICAgICAgOiBudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMClcbiAgICAgICAgICAgICAgPyBmb3Jtc1sxXVxuICAgICAgICAgICAgICA6IGZvcm1zWzJdO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzczogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtbTogd2l0aG91dFN1ZmZpeCA/ICfQvNC40L3Rg9GC0LBf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInIDogJ9C80LjQvdGD0YLRg1/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicsXG4gICAgICAgICAgICBoaDogJ9GH0LDRgV/Rh9Cw0YHQsF/Rh9Cw0YHQvtCyJyxcbiAgICAgICAgICAgIGRkOiAn0LTQtdC90Yxf0LTQvdGPX9C00L3QtdC5JyxcbiAgICAgICAgICAgIHd3OiAn0L3QtdC00LXQu9GPX9C90LXQtNC10LvQuF/QvdC10LTQtdC70YwnLFxuICAgICAgICAgICAgTU06ICfQvNC10YHRj9GGX9C80LXRgdGP0YbQsF/QvNC10YHRj9GG0LXQsicsXG4gICAgICAgICAgICB5eTogJ9Cz0L7QtF/Qs9C+0LTQsF/Qu9C10YInLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsCcgOiAn0LzQuNC90YPRgtGDJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgL17Rj9C90LIvaSxcbiAgICAgICAgL17RhNC10LIvaSxcbiAgICAgICAgL17QvNCw0YAvaSxcbiAgICAgICAgL17QsNC/0YAvaSxcbiAgICAgICAgL17QvNCwW9C50Y9dL2ksXG4gICAgICAgIC9e0LjRjtC9L2ksXG4gICAgICAgIC9e0LjRjtC7L2ksXG4gICAgICAgIC9e0LDQstCzL2ksXG4gICAgICAgIC9e0YHQtdC9L2ksXG4gICAgICAgIC9e0L7QutGCL2ksXG4gICAgICAgIC9e0L3QvtGPL2ksXG4gICAgICAgIC9e0LTQtdC6L2ksXG4gICAgXTtcblxuICAgIC8vIGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL3J1bGVzLzEzOS1wcm9wIDogwqcgMTAzXG4gICAgLy8g0KHQvtC60YDQsNGJ0LXQvdC40Y8g0LzQtdGB0Y/RhtC10LI6IGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL2J1cm8vc2VhcmNoLWFuc3dlcj9zPTI0MjYzN1xuICAgIC8vIENMRFIgZGF0YTogICAgICAgICAgaHR0cDovL3d3dy51bmljb2RlLm9yZy9jbGRyL2NoYXJ0cy8yOC9zdW1tYXJ5L3J1Lmh0bWwjMTc1M1xuICAgIHZhciBydSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3J1Jywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GP0L3QstCw0YDRj1/RhNC10LLRgNCw0LvRj1/QvNCw0YDRgtCwX9Cw0L/RgNC10LvRj1/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCz0YPRgdGC0LBf0YHQtdC90YLRj9Cx0YDRj1/QvtC60YLRj9Cx0YDRj1/QvdC+0Y/QsdGA0Y9f0LTQtdC60LDQsdGA0Y8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiB7XG4gICAgICAgICAgICAvLyDQv9C+IENMRFIg0LjQvNC10L3QvdC+IFwi0LjRjtC7LlwiINC4IFwi0LjRjtC9LlwiLCDQvdC+INC60LDQutC+0Lkg0YHQvNGL0YHQuyDQvNC10L3Rj9GC0Ywg0LHRg9C60LLRgyDQvdCwINGC0L7Rh9C60YM/XG4gICAgICAgICAgICBmb3JtYXQ6ICfRj9C90LIuX9GE0LXQstGALl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgNGCX9Cw0L/RgC5f0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5czoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00YNf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0YNf0YHRg9Cx0LHQvtGC0YMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvXFxbID9b0JLQsl0gPyg/OtC/0YDQvtGI0LvRg9GOfNGB0LvQtdC00YPRjtGJ0YPRjnzRjdGC0YMpPyA/XSA/ZGRkZC8sXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuCwg0L/QviDRgtGA0Lgg0LHRg9C60LLRiywg0LTQu9GPINC90LXQutC+0YLQvtGA0YvRhSwg0L/QviA0INCx0YPQutCy0YssINGB0L7QutGA0LDRidC10L3QuNGPINGBINGC0L7Rh9C60L7QuSDQuCDQsdC10Lcg0YLQvtGH0LrQuFxuICAgICAgICBtb250aHNSZWdleDpcbiAgICAgICAgICAgIC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgICAgIC8vINC60L7Qv9C40Y8g0L/RgNC10LTRi9C00YPRidC10LPQvlxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OlxuICAgICAgICAgICAgL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAgICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKNGP0L3QstCw0YBb0Y/RjF180YTQtdCy0YDQsNC7W9GP0YxdfNC80LDRgNGC0LA/fNCw0L/RgNC10Ltb0Y/RjF180LzQsFvRj9C5XXzQuNGO0L1b0Y/RjF180LjRjtC7W9GP0YxdfNCw0LLQs9GD0YHRgtCwP3zRgdC10L3RgtGP0LHRgFvRj9GMXXzQvtC60YLRj9Cx0YBb0Y/RjF180L3QvtGP0LHRgFvRj9GMXXzQtNC10LrQsNCx0YBb0Y/RjF0pL2ksXG5cbiAgICAgICAgLy8g0JLRi9GA0LDQttC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0LXRgiDRgtC+0LvRjNC60L4g0YHQvtC60YDQsNGJ0ZHQvdC90YvQvCDRhNC+0YDQvNCw0LxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKNGP0L3QslxcLnzRhNC10LLRgD9cXC580LzQsNGAW9GCLl180LDQv9GAXFwufNC80LBb0Y/QuV180LjRjtC9W9GM0Y8uXXzQuNGO0Ltb0YzRjy5dfNCw0LLQs1xcLnzRgdC10L3Rgj9cXC580L7QutGCXFwufNC90L7Rj9CxP1xcLnzQtNC10LpcXC4pL2ksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSDQsy4sIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZINCzLiwgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Ch0LXQs9C+0LTQvdGPLCDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQl9Cw0LLRgtGA0LAsINCyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9CS0YfQtdGA0LAsINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC10LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LjQuV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70L7QtV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GL0LldIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9GH0LXRgNC10LcgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzINC90LDQt9Cw0LQnLFxuICAgICAgICAgICAgczogJ9C90LXRgdC60L7Qu9GM0LrQviDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZDogJ9C00LXQvdGMJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgdzogJ9C90LXQtNC10LvRjycsXG4gICAgICAgICAgICB3dzogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06ICfQvNC10YHRj9GGJyxcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogJ9Cz0L7QtCcsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9C4fNGD0YLRgNCwfNC00L3Rj3zQstC10YfQtdGA0LAvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9C10YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GD0YLRgNCwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9C+JztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0Y8nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBydTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTaW5kaGkgW3NkXVxuLy8hIGF1dGhvciA6IE5hcmFpbiBTYWdhciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9uYXJhaW5zYWdhclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfYrNmG2YjYsdmKJyxcbiAgICAgICAgICAgICfZgdmK2KjYsdmI2LHZiicsXG4gICAgICAgICAgICAn2YXYp9ix2oYnLFxuICAgICAgICAgICAgJ9in2b7YsdmK2YQnLFxuICAgICAgICAgICAgJ9mF2KbZiicsXG4gICAgICAgICAgICAn2KzZiNmGJyxcbiAgICAgICAgICAgICfYrNmI2YTYp9ih2ZAnLFxuICAgICAgICAgICAgJ9ii2q/Ys9m9JyxcbiAgICAgICAgICAgICfYs9mK2b7ZvdmF2KjYsScsXG4gICAgICAgICAgICAn2KLaqtm92YjYqNixJyxcbiAgICAgICAgICAgICfZhtmI2YXYqNixJyxcbiAgICAgICAgICAgICfaitiz2YXYqNixJyxcbiAgICAgICAgXSxcbiAgICAgICAgZGF5cyA9IFsn2KLahtixJywgJ9iz2YjZhdixJywgJ9in2rHYp9ix2YgnLCAn2KfYsdio2LknLCAn2K7ZhdmK2LMnLCAn2KzZhdi5JywgJ9qH2Ybah9ixJ107XG5cbiAgICB2YXIgc2QgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzZCcsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGF5cyxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i12KjYrXzYtNin2YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtdio2K0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnO1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9qEXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9iz2oDYp9q72YpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2Kfas9mK2YYg2YfZgdiq2Yog2KrZil0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vaqtin2YTZh9mHXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1var9iy2LHZitmEINmH2YHYqtmKXSBkZGRkIFvYqtmKXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINm+2YjYoScsXG4gICAgICAgICAgICBwYXN0OiAnJXMg2KfasycsXG4gICAgICAgICAgICBzOiAn2obZhtivINiz2YraqtmG2oonLFxuICAgICAgICAgICAgc3M6ICclZCDYs9mK2qrZhtqKJyxcbiAgICAgICAgICAgIG06ICfZh9qqINmF2YbZvScsXG4gICAgICAgICAgICBtbTogJyVkINmF2YbZvScsXG4gICAgICAgICAgICBoOiAn2YfaqiDaqtmE2KfaqicsXG4gICAgICAgICAgICBoaDogJyVkINqq2YTYp9qqJyxcbiAgICAgICAgICAgIGQ6ICfZh9qqINqP2YrZhtmH2YYnLFxuICAgICAgICAgICAgZGQ6ICclZCDaj9mK2YbZh9mGJyxcbiAgICAgICAgICAgIE06ICfZh9qqINmF2YfZitmG2YgnLFxuICAgICAgICAgICAgTU06ICclZCDZhdmH2YrZhtinJyxcbiAgICAgICAgICAgIHk6ICfZh9qqINiz2KfZhCcsXG4gICAgICAgICAgICB5eTogJyVkINiz2KfZhCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE5vcnRoZXJuIFNhbWkgW3NlXVxuLy8hIGF1dGhvcnMgOiBCw6VyZCBSb2xzdGFkIEhlbnJpa3NlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYXJhbWVsbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHNlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2UnLCB7XG4gICAgICAgIG1vbnRoczogJ2/EkcSRYWphZ2Vtw6FubnVfZ3VvdnZhbcOhbm51X25qdWvEjWFtw6FubnVfY3VvxYtvbcOhbm51X21pZXNzZW3DoW5udV9nZWFzc2Vtw6FubnVfc3VvaWRuZW3DoW5udV9ib3JnZW3DoW5udV/EjWFrxI1hbcOhbm51X2dvbGdnb3Rtw6FubnVfc2vDoWJtYW3DoW5udV9qdW92bGFtw6FubnUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2/EkcSRal9ndW92X25qdWtfY3VvX21pZXNfZ2Vhc19zdW9pX2JvcmdfxI1ha8SNX2dvbGdfc2vDoWJfanVvdicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnc290bmFiZWFpdmlfdnVvc3PDoXJnYV9tYcWLxYtlYsOhcmdhX2dhc2thdmFoa2t1X2R1b3Jhc3RhdF9iZWFyamFkYXRfbMOhdnZhcmRhdCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc290bl92dW9zX21hxYtfZ2Fza19kdW9yX2JlYXJfbMOhdicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzX3ZfbV9nX2RfYl9MJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ01NTU0gRC4gW2IuXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ01NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIEQuIFtiLl0gWVlZWSBbdGkuXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW290bmUgdGldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaWh0dGluIHRpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3RpXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2lrdGUgdGldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW292ZGRpdF0gZGRkZCBbdGldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgZ2Vhxb5lcycsXG4gICAgICAgICAgICBwYXN0OiAnbWHFi2l0ICVzJyxcbiAgICAgICAgICAgIHM6ICdtb2FkZGUgc2VrdW5kZGF0JyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kZGF0JyxcbiAgICAgICAgICAgIG06ICdva3RhIG1pbnVodGEnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51aHRhdCcsXG4gICAgICAgICAgICBoOiAnb2t0YSBkaWltbXUnLFxuICAgICAgICAgICAgaGg6ICclZCBkaWltbXV0JyxcbiAgICAgICAgICAgIGQ6ICdva3RhIGJlYWl2aScsXG4gICAgICAgICAgICBkZDogJyVkIGJlYWl2dml0JyxcbiAgICAgICAgICAgIE06ICdva3RhIG3DoW5udScsXG4gICAgICAgICAgICBNTTogJyVkIG3DoW51dCcsXG4gICAgICAgICAgICB5OiAnb2t0YSBqYWhraScsXG4gICAgICAgICAgICB5eTogJyVkIGphZ2l0JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTaW5oYWxlc2UgW3NpXVxuLy8hIGF1dGhvciA6IFNhbXBhdGggU2l0aW5hbWFsdXdhIDogaHR0cHM6Ly9naXRodWIuY29tL3NhbXBhdGhzcmlzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICAvKmpzaGludCAtVzEwMCovXG4gICAgdmFyIHNpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2knLCB7XG4gICAgICAgIG1vbnRoczogJ+C2ouC2seC3gOC3j+C2u+C3kl/gtrTgt5ngtrbgtrvgt4Dgt4/gtrvgt5Jf4La44LeP4La74LeK4Lat4LeUX+C2heC2tOC3iuKAjeC2u+C3muC2veC3il/gtrjgt5Dgtrrgt5Jf4Lai4LeW4Lax4LeSX+C2ouC3luC2veC3kl/gtoXgtpzgt53gt4Pgt4rgtq3gt5Rf4LeD4LeQ4La04LeK4Lat4LeQ4La44LeK4La24La74LeKX+C2lOC2muC3iuC2reC3neC2tuC2u+C3il/gtrHgt5zgt4Dgt5Dgtrjgt4rgtrbgtrvgt4pf4Lav4LeZ4LeD4LeQ4La44LeK4La24La74LeKJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+C2ouC2sV/gtrTgt5ngtrZf4La44LeP4La74LeKX+C2heC2tOC3il/gtrjgt5Dgtrrgt5Jf4Lai4LeW4Lax4LeSX+C2ouC3luC2veC3kl/gtoXgtpzgt51f4LeD4LeQ4La04LeKX+C2lOC2muC3il/gtrHgt5zgt4Dgt5Bf4Lav4LeZ4LeD4LeQJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfgtongtrvgt5Lgtq/gt49f4LeD4Laz4LeU4Lav4LePX+C2heC2n+C3hOC2u+C3lOC3gOC3j+C2r+C3j1/gtrbgtq/gt4/gtq/gt49f4La24LeK4oCN4La74LeE4LeD4LeK4La04Lat4LeS4Lax4LeK4Lav4LePX+C3g+C3kuC2muC3lOC2u+C3j+C2r+C3j1/gt4Pgt5ngtrHgt4Pgt5Tgtrvgt4/gtq/gt48nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+C2ieC2u+C3kl/gt4PgtrPgt5Rf4LaF4LafX+C2tuC2r+C3j1/gtrbgt4rigI3gtrvgt4Rf4LeD4LeS4Laa4LeUX+C3g+C3meC2sScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgtolf4LeDX+C2hV/gtrZf4La24LeK4oCN4La7X+C3g+C3kl/gt4Pgt5knLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnYSBoOm1tJyxcbiAgICAgICAgICAgIExUUzogJ2EgaDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVkgTU1NTSBEJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkgTU1NTSBELCBhIGg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVkgTU1NTSBEIFvgt4Dgt5DgtrHgt5JdIGRkZGQsIGEgaDptbTpzcycsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+C2heC2r10gTFRb4LanXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+C3hOC3meC2p10gTFRb4LanXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFRb4LanXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+C2iuC2uuC3ml0gTFRb4LanXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgtrTgt4Pgt5Tgtpzgt5LgtrpdIGRkZGQgTFRb4LanXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4Laa4LeS4Lax4LeKJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+C2muC2pyDgtrTgt5ngtrsnLFxuICAgICAgICAgICAgczogJ+C2reC2reC3iuC2tOC2uyDgtprgt5Lgt4Tgt5LgtrTgtronLFxuICAgICAgICAgICAgc3M6ICfgtq3gtq3gt4rgtrTgtrsgJWQnLFxuICAgICAgICAgICAgbTogJ+C2uOC3kuC2seC3kuC2reC3iuC2reC3lOC3gCcsXG4gICAgICAgICAgICBtbTogJ+C2uOC3kuC2seC3kuC2reC3iuC2reC3lCAlZCcsXG4gICAgICAgICAgICBoOiAn4La04LeQ4La6JyxcbiAgICAgICAgICAgIGhoOiAn4La04LeQ4La6ICVkJyxcbiAgICAgICAgICAgIGQ6ICfgtq/gt5LgtrHgtronLFxuICAgICAgICAgICAgZGQ6ICfgtq/gt5LgtrEgJWQnLFxuICAgICAgICAgICAgTTogJ+C2uOC3j+C3g+C2uicsXG4gICAgICAgICAgICBNTTogJ+C2uOC3j+C3gyAlZCcsXG4gICAgICAgICAgICB5OiAn4LeA4LeD4La7JyxcbiAgICAgICAgICAgIHl5OiAn4LeA4LeD4La7ICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9IOC3gOC3kOC2seC3ki8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIOC3gOC3kOC2seC3kic7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gtrTgt5ngtrsg4LeA4La74LeUfOC2tOC3g+C3iiDgt4Dgtrvgt5R84La04LeZLuC3gHzgtrQu4LeALi8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4La0LuC3gC4nIHx8IGlucHV0ID09PSAn4La04LeD4LeKIOC3gOC2u+C3lCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn4La0LuC3gC4nIDogJ+C2tOC3g+C3iiDgt4Dgtrvgt5QnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfgtrTgt5ku4LeALicgOiAn4La04LeZ4La7IOC3gOC2u+C3lCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2xvdmFrIFtza11cbi8vISBhdXRob3IgOiBNYXJ0aW4gTWlua2EgOiBodHRwczovL2dpdGh1Yi5jb20vazJzXG4vLyEgYmFzZWQgb24gd29yayBvZiBwZXRyYmVsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRyYmVsYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRocyA9XG4gICAgICAgICAgICAnamFudcOhcl9mZWJydcOhcl9tYXJlY19hcHLDrWxfbcOhal9qw7puX2rDumxfYXVndXN0X3NlcHRlbWJlcl9va3TDs2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdqYW5fZmViX21hcl9hcHJfbcOhal9qw7puX2rDumxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICByZXR1cm4gbiA+IDEgJiYgbiA8IDU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOiAvLyBhIGZldyBzZWNvbmRzIC8gaW4gYSBmZXcgc2Vjb25kcyAvIGEgZmV3IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAncMOhciBzZWvDum5kJyA6ICdww6FyIHNla3VuZGFtaSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6IC8vIDkgc2Vjb25kcyAvIGluIDkgc2Vjb25kcyAvIDkgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Nla3VuZHknIDogJ3Nla8O6bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla3VuZGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnbSc6IC8vIGEgbWludXRlIC8gaW4gYSBtaW51dGUgLyBhIG1pbnV0ZSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW7DunRhJyA6IGlzRnV0dXJlID8gJ21pbsO6dHUnIDogJ21pbsO6dG91JztcbiAgICAgICAgICAgIGNhc2UgJ21tJzogLy8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWluw7p0eScgOiAnbWluw7p0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW7DunRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2gnOiAvLyBhbiBob3VyIC8gaW4gYW4gaG91ciAvIGFuIGhvdXIgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnaG9kaW5hJyA6IGlzRnV0dXJlID8gJ2hvZGludScgOiAnaG9kaW5vdSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6IC8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2hvZGlueScgOiAnaG9kw61uJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdob2RpbmFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnZCc6IC8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkZcWIJyA6ICdkxYhvbSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6IC8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2RuaScgOiAnZG7DrScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZMWIYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdNJzogLy8gYSBtb250aCAvIGluIGEgbW9udGggLyBhIG1vbnRoIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2lhYycgOiAnbWVzaWFjb20nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOiAvLyA5IG1vbnRocyAvIGluIDkgbW9udGhzIC8gOSBtb250aHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtZXNpYWNlJyA6ICdtZXNpYWNvdicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWVzaWFjbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3knOiAvLyBhIHllYXIgLyBpbiBhIHllYXIgLyBhIHllYXIgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAncm9rJyA6ICdyb2tvbSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6IC8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Jva3knIDogJ3Jva292Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdyb2ttaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNrID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2snLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzU2hvcnQsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkZcS+YV9wb25kZWxva191dG9yb2tfc3RyZWRhX8WhdHZydG9rX3BpYXRva19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZV9wb191dF9zdF/FoXRfcGlfc28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3RfxaF0X3BpX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkbmVzIG9dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbemFqdHJhIG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkZcS+dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHN0cmVkdSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZvIMWhdHZydG9rIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBwaWF0b2sgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHNvYm90dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbdsSNZXJhIG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogbmVkZcS+dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IHN0cmVkdSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IHNvYm90dSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ByZWQgJXMnLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNsb3ZlbmlhbiBbc2xdXG4vLyEgYXV0aG9yIDogUm9iZXJ0IFNlZG92xaFlayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zZWRvdnNla1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlXG4gICAgICAgICAgICAgICAgICAgID8gJ25la2FqIHNla3VuZCdcbiAgICAgICAgICAgICAgICAgICAgOiAnbmVrYWogc2VrdW5kYW1pJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ3Nla3VuZG8nIDogJ3Nla3VuZGknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3Nla3VuZGknIDogJ3Nla3VuZGFoJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2VrdW5kZScgOiAnc2VrdW5kYWgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2VuYSBtaW51dGEnIDogJ2VubyBtaW51dG8nO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6ICdtaW51dG8nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0aScgOiAnbWludXRhbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dGUnIDogJ21pbnV0YW1pJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dCcgOiAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZW5hIHVyYScgOiAnZW5vIHVybyc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICd1cmEnIDogJ3Vybyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXJpJyA6ICd1cmFtYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3VyZScgOiAndXJhbWknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3VyJyA6ICd1cmFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdlbiBkYW4nIDogJ2VuaW0gZG5lbSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkYW4nIDogJ2RuZW0nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RuaScgOiAnZG5ldm9tYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZG5pJyA6ICdkbmV2aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdlbiBtZXNlYycgOiAnZW5pbSBtZXNlY2VtJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjJyA6ICdtZXNlY2VtJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2EnIDogJ21lc2VjZW1hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNlJyA6ICdtZXNlY2knO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjZXYnIDogJ21lc2VjaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdlbm8gbGV0bycgOiAnZW5pbSBsZXRvbSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRvJyA6ICdsZXRvbSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0aScgOiAnbGV0b21hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0YScgOiAnbGV0aSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0JyA6ICdsZXRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NsJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJlY19hcHJpbF9tYWpfanVuaWpfanVsaWpfYXZndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZGVsamFfcG9uZWRlbGpla190b3Jla19zcmVkYV/EjWV0cnRla19wZXRla19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdG9yLl9zcmUuX8SNZXQuX3BldC5fc29iLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb190b19zcl/EjWVfcGVfc28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC4gTU0uIFlZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuZXMgb2JdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbanV0cmkgb2JdIExUJyxcblxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW25lZGVsam9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbc3JlZG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbc29ib3RvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbb2JdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmFqIG9iXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtuZWRlbGpvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbc3JlZG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtzb2JvdG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuamldIGRkZGQgW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnxI1leiAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJlZCAlcycsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2w7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQWxiYW5pYW4gW3NxXVxuLy8hIGF1dGhvciA6IEZsYWvDq3JpbSBJc21hbmkgOiBodHRwczovL2dpdGh1Yi5jb20vZmxha2VyaW1pXG4vLyEgYXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiBPZXJkIEN1a2FsbGEgOiBodHRwczovL2dpdGh1Yi5jb20vb2VyZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHNxID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3EnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbmFyX1Noa3VydF9NYXJzX1ByaWxsX01hal9RZXJzaG9yX0tvcnJpa19HdXNodF9TaHRhdG9yX1RldG9yX07Dq250b3JfRGhqZXRvcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fU2hrX01hcl9QcmlfTWFqX1Flcl9Lb3JfR3VzX1NodF9UZXRfTsOrbl9EaGonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnRSBEaWVsX0UgSMOrbsOrX0UgTWFydMOrX0UgTcOrcmt1csOrX0UgRW5qdGVfRSBQcmVtdGVfRSBTaHR1bsOrJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnRGllX0jDq25fTWFyX03Dq3JfRW5qX1ByZV9TaHQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnRF9IX01hX03Dq19FX1BfU2gnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL1BEfE1ELyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDApID09PSAnTSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VycyA8IDEyID8gJ1BEJyA6ICdNRCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbU290IG7Dq10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tOZXPDq3IgbsOrXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW27Dq10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tEamUgbsOrXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Uga2FsdWFyIG7Dq10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICduw6sgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIG3DqyBwYXLDqycsXG4gICAgICAgICAgICBzOiAnZGlzYSBzZWtvbmRhJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vrb25kYScsXG4gICAgICAgICAgICBtOiAnbmrDqyBtaW51dMOrJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRhJyxcbiAgICAgICAgICAgIGg6ICduasOrIG9yw6snLFxuICAgICAgICAgICAgaGg6ICclZCBvcsOrJyxcbiAgICAgICAgICAgIGQ6ICduasOrIGRpdMOrJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGl0w6snLFxuICAgICAgICAgICAgTTogJ25qw6sgbXVhaicsXG4gICAgICAgICAgICBNTTogJyVkIG11YWonLFxuICAgICAgICAgICAgeTogJ25qw6sgdml0JyxcbiAgICAgICAgICAgIHl5OiAnJWQgdml0ZScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2VyYmlhbiBbc3JdXG4vLyEgYXV0aG9yIDogTWlsYW4gSmFuYcSNa292acSHPG1pbGFuamFuYWNrb3ZpY0BnbWFpbC5jb20+IDogaHR0cHM6Ly9naXRodWIuY29tL21pbGFuLWpcbi8vISBhdXRob3IgOiBTdGVmYW4gQ3JuamFrb3ZpxIcgPHN0ZWZhbkBob3RtYWlsLnJzPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jcm5qYWtvdmljXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdHJhbnNsYXRvciA9IHtcbiAgICAgICAgd29yZHM6IHtcbiAgICAgICAgICAgIC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWydzZWt1bmRhJywgJ3Nla3VuZGUnLCAnc2VrdW5kaSddLFxuICAgICAgICAgICAgbTogWydqZWRhbiBtaW51dCcsICdqZWRub2cgbWludXRhJ10sXG4gICAgICAgICAgICBtbTogWydtaW51dCcsICdtaW51dGEnLCAnbWludXRhJ10sXG4gICAgICAgICAgICBoOiBbJ2plZGFuIHNhdCcsICdqZWRub2cgc2F0YSddLFxuICAgICAgICAgICAgaGg6IFsnc2F0JywgJ3NhdGEnLCAnc2F0aSddLFxuICAgICAgICAgICAgZDogWydqZWRhbiBkYW4nLCAnamVkbm9nIGRhbmEnXSxcbiAgICAgICAgICAgIGRkOiBbJ2RhbicsICdkYW5hJywgJ2RhbmEnXSxcbiAgICAgICAgICAgIE06IFsnamVkYW4gbWVzZWMnLCAnamVkbm9nIG1lc2VjYSddLFxuICAgICAgICAgICAgTU06IFsnbWVzZWMnLCAnbWVzZWNhJywgJ21lc2VjaSddLFxuICAgICAgICAgICAgeTogWydqZWRudSBnb2RpbnUnLCAnamVkbmUgZ29kaW5lJ10sXG4gICAgICAgICAgICB5eTogWydnb2RpbnUnLCAnZ29kaW5lJywgJ2dvZGluYSddLFxuICAgICAgICB9LFxuICAgICAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbnVtYmVyICUgMTAgPj0gMSAmJlxuICAgICAgICAgICAgICAgIG51bWJlciAlIDEwIDw9IDQgJiZcbiAgICAgICAgICAgICAgICAobnVtYmVyICUgMTAwIDwgMTAgfHwgbnVtYmVyICUgMTAwID49IDIwKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAxID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd29yZEtleVsyXTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICB2YXIgd29yZEtleSA9IHRyYW5zbGF0b3Iud29yZHNba2V5XSxcbiAgICAgICAgICAgICAgICB3b3JkO1xuXG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIE5vbWluYXRpdlxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICd5JyAmJiB3aXRob3V0U3VmZml4KSByZXR1cm4gJ2plZG5hIGdvZGluYSc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd29yZCA9IHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpO1xuICAgICAgICAgICAgLy8gTm9taW5hdGl2XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAneXknICYmIHdpdGhvdXRTdWZmaXggJiYgd29yZCA9PT0gJ2dvZGludScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyBnb2RpbmEnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgd29yZDtcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIHNyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3InLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bl9qdWxfYXZndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRlbGphX3BvbmVkZWxqYWtfdXRvcmFrX3NyZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmUuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdELiBNLiBZWVlZLicsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWS4nLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZLiBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkuIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRlbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JlZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdcSNZSB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW25lZGVsamVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwb25lZGVsamthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtzcmVkZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW8SNZXR2cnRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3BldGthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ByZSAlcycsXG4gICAgICAgICAgICBzOiAnbmVrb2xpa28gc2VrdW5kaScsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNlcmJpYW4gQ3lyaWxsaWMgW3NyLWN5cmxdXG4vLyEgYXV0aG9yIDogTWlsYW4gSmFuYcSNa292acSHPG1pbGFuamFuYWNrb3ZpY0BnbWFpbC5jb20+IDogaHR0cHM6Ly9naXRodWIuY29tL21pbGFuLWpcbi8vISBhdXRob3IgOiBTdGVmYW4gQ3JuamFrb3ZpxIcgPHN0ZWZhbkBob3RtYWlsLnJzPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jcm5qYWtvdmljXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdHJhbnNsYXRvciA9IHtcbiAgICAgICAgd29yZHM6IHtcbiAgICAgICAgICAgIC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWyfRgdC10LrRg9C90LTQsCcsICfRgdC10LrRg9C90LTQtScsICfRgdC10LrRg9C90LTQuCddLFxuICAgICAgICAgICAgbTogWyfRmNC10LTQsNC9INC80LjQvdGD0YInLCAn0ZjQtdC00L3QvtCzINC80LjQvdGD0YLQsCddLFxuICAgICAgICAgICAgbW06IFsn0LzQuNC90YPRgicsICfQvNC40L3Rg9GC0LAnLCAn0LzQuNC90YPRgtCwJ10sXG4gICAgICAgICAgICBoOiBbJ9GY0LXQtNCw0L0g0YHQsNGCJywgJ9GY0LXQtNC90L7QsyDRgdCw0YLQsCddLFxuICAgICAgICAgICAgaGg6IFsn0YHQsNGCJywgJ9GB0LDRgtCwJywgJ9GB0LDRgtC4J10sXG4gICAgICAgICAgICBkOiBbJ9GY0LXQtNCw0L0g0LTQsNC9JywgJ9GY0LXQtNC90L7QsyDQtNCw0L3QsCddLFxuICAgICAgICAgICAgZGQ6IFsn0LTQsNC9JywgJ9C00LDQvdCwJywgJ9C00LDQvdCwJ10sXG4gICAgICAgICAgICBNOiBbJ9GY0LXQtNCw0L0g0LzQtdGB0LXRhicsICfRmNC10LTQvdC+0LMg0LzQtdGB0LXRhtCwJ10sXG4gICAgICAgICAgICBNTTogWyfQvNC10YHQtdGGJywgJ9C80LXRgdC10YbQsCcsICfQvNC10YHQtdGG0LgnXSxcbiAgICAgICAgICAgIHk6IFsn0ZjQtdC00L3RgyDQs9C+0LTQuNC90YMnLCAn0ZjQtdC00L3QtSDQs9C+0LTQuNC90LUnXSxcbiAgICAgICAgICAgIHl5OiBbJ9Cz0L7QtNC40L3RgycsICfQs9C+0LTQuNC90LUnLCAn0LPQvtC00LjQvdCwJ10sXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBudW1iZXIgJSAxMCA+PSAxICYmXG4gICAgICAgICAgICAgICAgbnVtYmVyICUgMTAgPD0gNCAmJlxuICAgICAgICAgICAgICAgIChudW1iZXIgJSAxMDAgPCAxMCB8fCBudW1iZXIgJSAxMDAgPj0gMjApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDEgPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3b3JkS2V5WzJdO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldLFxuICAgICAgICAgICAgICAgIHdvcmQ7XG5cbiAgICAgICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gTm9taW5hdGl2XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3knICYmIHdpdGhvdXRTdWZmaXgpIHJldHVybiAn0ZjQtdC00L3QsCDQs9C+0LTQuNC90LAnO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdvcmQgPSB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIC8vIE5vbWluYXRpdlxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3l5JyAmJiB3aXRob3V0U3VmZml4ICYmIHdvcmQgPT09ICfQs9C+0LTQuNC90YMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg0LPQvtC00LjQvdCwJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHdvcmQ7XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBzckN5cmwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzci1jeXJsJywge1xuICAgICAgICBtb250aHM6ICfRmNCw0L3Rg9Cw0YBf0YTQtdCx0YDRg9Cw0YBf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LPRg9GB0YJf0YHQtdC/0YLQtdC80LHQsNGAX9C+0LrRgtC+0LHQsNGAX9C90L7QstC10LzQsdCw0YBf0LTQtdGG0LXQvNCx0LDRgCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn0ZjQsNC9Ll/RhNC10LEuX9C80LDRgC5f0LDQv9GALl/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LMuX9GB0LXQvy5f0L7QutGCLl/QvdC+0LIuX9C00LXRhi4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn0L3QtdC00LXRmdCwX9C/0L7QvdC10LTQtdGZ0LDQul/Rg9GC0L7RgNCw0Lpf0YHRgNC10LTQsF/Rh9C10YLQstGA0YLQsNC6X9C/0LXRgtCw0Lpf0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0L3QtdC0Ll/Qv9C+0L0uX9GD0YLQvi5f0YHRgNC1Ll/Rh9C10YIuX9C/0LXRgi5f0YHRg9CxLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvdC1X9C/0L5f0YPRgl/RgdGAX9GH0LVf0L/QtV/RgdGDJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC4gTS4gWVlZWS4nLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVkuJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWS4gSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZLiBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0LTQsNC90LDRgSDRg10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vRgdGD0YLRgNCwINGDXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9C90LXQtNC10ZnRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0YHRgNC10LTRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0YHRg9Cx0L7RgtGDXSBb0YNdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIGRkZGQgW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0ZjRg9GH0LUg0YNdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RXZWVrRGF5cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvQvdC10LTQtdGZ0LVdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0L/QvtC90LXQtNC10ZnQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9GD0YLQvtGA0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0YHRgNC10LTQtV0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvRh9C10YLQstGA0YLQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9C/0LXRgtC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9GB0YPQsdC+0YLQtV0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0LfQsCAlcycsXG4gICAgICAgICAgICBwYXN0OiAn0L/RgNC1ICVzJyxcbiAgICAgICAgICAgIHM6ICfQvdC10LrQvtC70LjQutC+INGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3JDeXJsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IHNpU3dhdGkgW3NzXVxuLy8hIGF1dGhvciA6IE5pY29sYWkgRGF2aWVzPG1haWxAbmljb2xhaS5pbz4gOiBodHRwczovL2dpdGh1Yi5jb20vbmljb2xhaWRhdmllc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHNzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3MnLCB7XG4gICAgICAgIG1vbnRoczogXCJCaGltYmlkdndhbmVfSW5kbG92YW5hX0luZGxvdidsZW5raHVsdV9NYWJhc2FfSW5raHdla2h3ZXRpX0luaGxhYmFfS2hvbHdhbmVfSW5nY2lfSW55b25pX0ltcGhhbGFfTHdldGlfSW5nb25nb25pXCIuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdCaGlfSW5hX0ludV9NYWJfSW5rX0luaF9LaG9fSWdjX0lueV9JbXBfTHdlX0lnbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnTGlzb250Zm9fVW1zb21idWx1a29fTGVzaWJpbGlfTGVzaXRzYXRmdV9MZXNpbmVfTGVzaWhsYW51X1VtZ2NpYmVsbycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnTGlzX1VtYl9Mc2JfTGVzX0xzaV9Mc2hfVW1nJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0xpX1VzX0xiX0x0X0xzX0xoX1VnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW05hbXVobGEgbmdhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0t1c2FzYSBuZ2FdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbbmdhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0l0b2xvIG5nYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtsZWxpcGhlbGlsZV0gW25nYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICduZ2EgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3dlbnRla2EgbmdhICVzJyxcbiAgICAgICAgICAgIHM6ICdlbWl6dXp3YW5hIGxvbWNhbmUnLFxuICAgICAgICAgICAgc3M6ICclZCBtenV6d2FuYScsXG4gICAgICAgICAgICBtOiAndW16dXp1JyxcbiAgICAgICAgICAgIG1tOiAnJWQgZW1penV6dScsXG4gICAgICAgICAgICBoOiAnbGlob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgZW1haG9yYScsXG4gICAgICAgICAgICBkOiAnbGlsYW5nYScsXG4gICAgICAgICAgICBkZDogJyVkIGVtYWxhbmdhJyxcbiAgICAgICAgICAgIE06ICdpbnlhbmdhJyxcbiAgICAgICAgICAgIE1NOiAnJWQgdGlueWFuZ2EnLFxuICAgICAgICAgICAgeTogJ3Vtbnlha2EnLFxuICAgICAgICAgICAgeXk6ICclZCBpbWlueWFrYScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9la3VzZW5pfGVtaW5pfGVudHNhbWJhbWF8ZWJ1c3VrdS8sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdla3VzZW5pJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZW1pbmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbnRzYW1iYW1hJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlYnVzdWt1JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAnZWt1c2VuaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdlbWluaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZW50c2FtYmFtYScgfHwgbWVyaWRpZW0gPT09ICdlYnVzdWt1Jykge1xuICAgICAgICAgICAgICAgIGlmIChob3VyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsOiAnJWQnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3M7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3dlZGlzaCBbc3ZdXG4vLyEgYXV0aG9yIDogSmVucyBBbG0gOiBodHRwczovL2dpdGh1Yi5jb20vdWxtdXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N2Jywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJpX2ZlYnJ1YXJpX21hcnNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3RpX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ3PDtm5kYWdfbcOlbmRhZ190aXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDtnJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzw7ZuX23DpW5fdGlzX29uc190b3JfZnJlX2zDtnInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc8O2X23DpV90aV9vbl90b19mcl9sw7YnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgbGxsOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkIEQgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJZGFnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ltb3Jnb25dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWfDpXJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW1DDpV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tJXSBkZGRkW3NdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2bDtnIgJXMgc2VkYW4nLFxuICAgICAgICAgICAgczogJ27DpWdyYSBzZWt1bmRlcicsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG06ICdlbiBtaW51dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXInLFxuICAgICAgICAgICAgaDogJ2VuIHRpbW1lJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdGltbWFyJyxcbiAgICAgICAgICAgIGQ6ICdlbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdhcicsXG4gICAgICAgICAgICBNOiAnZW4gbcOlbmFkJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOlbmFkZXInLFxuICAgICAgICAgICAgeTogJ2V0dCDDpXInLFxuICAgICAgICAgICAgeXk6ICclZCDDpXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oXFw6ZXxcXDphKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJzplJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJzphJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICc6YSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJzplJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnOmUnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFN3YWhpbGkgW3N3XVxuLy8hIGF1dGhvciA6IEZhaGFkIEthc3NpbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWRzZWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N3Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY2hpX0FwcmlsaV9NZWlfSnVuaV9KdWxhaV9BZ29zdGlfU2VwdGVtYmFfT2t0b2JhX05vdmVtYmFfRGVzZW1iYScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfQWdvX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnSnVtYXBpbGlfSnVtYXRhdHVfSnVtYW5uZV9KdW1hdGFub19BbGhhbWlzaV9JanVtYWFfSnVtYW1vc2knLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0pwbF9KdGF0X0pubmVfSnRhbl9BbGhfSWptX0ptb3MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnSjJfSjNfSjRfSjVfQWxfSWpfSjEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaGg6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2xlbyBzYWFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdba2VzaG8gc2FhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1t3aWtpIGlqYXlvXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2phbmFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW3dpa2kgaWxpeW9waXRhXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIGJhYWRheWUnLFxuICAgICAgICAgICAgcGFzdDogJ3Rva2VhICVzJyxcbiAgICAgICAgICAgIHM6ICdoaXZpIHB1bmRlJyxcbiAgICAgICAgICAgIHNzOiAnc2VrdW5kZSAlZCcsXG4gICAgICAgICAgICBtOiAnZGFraWthIG1vamEnLFxuICAgICAgICAgICAgbW06ICdkYWtpa2EgJWQnLFxuICAgICAgICAgICAgaDogJ3NhYSBsaW1vamEnLFxuICAgICAgICAgICAgaGg6ICdtYXNhYSAlZCcsXG4gICAgICAgICAgICBkOiAnc2lrdSBtb2phJyxcbiAgICAgICAgICAgIGRkOiAnc2lrdSAlZCcsXG4gICAgICAgICAgICBNOiAnbXdlemkgbW1vamEnLFxuICAgICAgICAgICAgTU06ICdtaWV6aSAlZCcsXG4gICAgICAgICAgICB5OiAnbXdha2EgbW1vamEnLFxuICAgICAgICAgICAgeXk6ICdtaWFrYSAlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUYW1pbCBbdGFdXG4vLyEgYXV0aG9yIDogQXJqdW5rdW1hciBLcmlzaG5hbW9vcnRoeSA6IGh0dHBzOi8vZ2l0aHViLmNvbS90azEyMDQwNFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgr6cnLFxuICAgICAgICAgICAgMjogJ+CvqCcsXG4gICAgICAgICAgICAzOiAn4K+pJyxcbiAgICAgICAgICAgIDQ6ICfgr6onLFxuICAgICAgICAgICAgNTogJ+CvqycsXG4gICAgICAgICAgICA2OiAn4K+sJyxcbiAgICAgICAgICAgIDc6ICfgr60nLFxuICAgICAgICAgICAgODogJ+CvricsXG4gICAgICAgICAgICA5OiAn4K+vJyxcbiAgICAgICAgICAgIDA6ICfgr6YnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4K+nJzogJzEnLFxuICAgICAgICAgICAgJ+CvqCc6ICcyJyxcbiAgICAgICAgICAgICfgr6knOiAnMycsXG4gICAgICAgICAgICAn4K+qJzogJzQnLFxuICAgICAgICAgICAgJ+Cvqyc6ICc1JyxcbiAgICAgICAgICAgICfgr6wnOiAnNicsXG4gICAgICAgICAgICAn4K+tJzogJzcnLFxuICAgICAgICAgICAgJ+Cvric6ICc4JyxcbiAgICAgICAgICAgICfgr68nOiAnOScsXG4gICAgICAgICAgICAn4K+mJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIHRhID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGEnLCB7XG4gICAgICAgIG1vbnRoczogJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgrpzgrqngrrXgrrDgrr9f4K6q4K6/4K6q4K+N4K6w4K614K6w4K6/X+CuruCuvuCusOCvjeCumuCvjV/gro/grqrgr43grrDgrrLgr41f4K6u4K+HX+CunOCvguCuqeCvjV/grpzgr4LgrrLgr4hf4K6G4K6V4K644K+N4K6f4K+NX+CumuCvhuCuquCvjeCun+CvhuCuruCvjeCuquCusOCvjV/groXgrpXgr43grp/gr4fgrr7grqrgrrDgr41f4K6o4K614K6u4K+N4K6q4K6w4K+NX+Cun+Cuv+CumuCuruCvjeCuquCusOCvjScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfgrp7grr7grq/grr/grrHgr43grrHgr4HgrpXgr43grpXgrr/grrTgrq7gr4hf4K6k4K6/4K6Z4K+N4K6V4K6f4K+N4K6V4K6/4K604K6u4K+IX+CumuCvhuCuteCvjeCuteCuvuCur+CvjeCuleCuv+CutOCuruCviF/grqrgr4HgrqTgrqngr43grpXgrr/grrTgrq7gr4hf4K614K6/4K6v4K6+4K604K6V4K+N4K6V4K6/4K604K6u4K+IX+CuteCvhuCus+CvjeCus+Cuv+CuleCvjeCuleCuv+CutOCuruCviF/grprgrqngrr/grpXgr43grpXgrr/grrTgrq7gr4gnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CunuCuvuCur+Cuv+CuseCvgV/grqTgrr/grpngr43grpXgrrPgr41f4K6a4K+G4K614K+N4K614K6+4K6v4K+NX+CuquCvgeCupOCuqeCvjV/grrXgrr/grq/grr7grrTgrqngr41f4K614K+G4K6z4K+N4K6z4K6/X+CumuCuqeCuvycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgrp7grr5f4K6k4K6/X+CumuCvhl/grqrgr4Ff4K614K6/X+CuteCvhl/grponLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgrofgrqngr43grrHgr4FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4K6o4K6+4K6z4K+IXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4K6o4K+H4K6x4K+N4K6x4K+BXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgrpXgrp/grqjgr43grqQg4K614K6+4K6w4K6u4K+NXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCuh+CusuCvjScsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4K6u4K+B4K6p4K+NJyxcbiAgICAgICAgICAgIHM6ICfgrpLgrrDgr4Eg4K6a4K6/4K6yIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjScsXG4gICAgICAgICAgICBzczogJyVkIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjScsXG4gICAgICAgICAgICBtOiAn4K6S4K6w4K+BIOCuqOCuv+CuruCuv+Cun+CuruCvjScsXG4gICAgICAgICAgICBtbTogJyVkIOCuqOCuv+CuruCuv+Cun+CumeCvjeCuleCus+CvjScsXG4gICAgICAgICAgICBoOiAn4K6S4K6w4K+BIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40nLFxuICAgICAgICAgICAgaGg6ICclZCDgrq7grqPgrr8g4K6o4K+H4K6w4K6u4K+NJyxcbiAgICAgICAgICAgIGQ6ICfgrpLgrrDgr4Eg4K6o4K6+4K6z4K+NJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4K6o4K6+4K6f4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIE06ICfgrpLgrrDgr4Eg4K6u4K6+4K6k4K6u4K+NJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4K6u4K6+4K6k4K6Z4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIHk6ICfgrpLgrrDgr4Eg4K614K6w4K+B4K6f4K6u4K+NJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4K6G4K6j4K+N4K6f4K+B4K6V4K6z4K+NJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ94K614K6k4K+BLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfgrrXgrqTgr4EnO1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4K+n4K+o4K+p4K+q4K+r4K+s4K+t4K+u4K+v4K+mXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyByZWZlciBodHRwOi8vdGEud2lraXBlZGlhLm9yZy9zLzFlcjFcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+Cur+CuvuCuruCuruCvjXzgrrXgr4jgrpXgrrHgr4h84K6V4K6+4K6y4K+IfOCuqOCuo+CvjeCuquCuleCusuCvjXzgro7grrHgr43grqrgrr7grp/gr4F84K6u4K6+4K6y4K+ILyxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCur+CuvuCuruCuruCvjSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCA2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K614K+I4K6V4K6x4K+IJzsgLy8g4K614K+I4K6V4K6x4K+IXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuleCuvuCusuCviCc7IC8vIOCuleCuvuCusuCviFxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrqjgrqPgr43grqrgrpXgrrLgr40nOyAvLyDgrqjgrqPgr43grqrgrpXgrrLgr41cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6O4K6x4K+N4K6q4K6+4K6f4K+BJzsgLy8g4K6O4K6x4K+N4K6q4K6+4K6f4K+BXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuruCuvuCusuCviCc7IC8vIOCuruCuvuCusuCviFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrq/grr7grq7grq7gr40nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgrq/grr7grq7grq7gr40nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgrrXgr4jgrpXgrrHgr4gnIHx8IG1lcmlkaWVtID09PSAn4K6V4K6+4K6y4K+IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CuqOCuo+CvjeCuquCuleCusuCvjScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0YTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUZWx1Z3UgW3RlXVxuLy8hIGF1dGhvciA6IEtyaXNobmEgQ2hhaXRhbnlhIFRob3RhIDogaHR0cHM6Ly9naXRodWIuY29tL2tjdGhvdGFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0ZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RlJywge1xuICAgICAgICBtb250aHM6ICfgsJzgsKjgsLXgsLDgsL9f4LCr4LC/4LCs4LGN4LCw4LC14LCw4LC/X+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL/gsLLgsY1f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYHgsLLgsYhf4LCG4LCX4LC44LGN4LCf4LGBX+CwuOCxhuCwquCxjeCwn+CxhuCwguCwrOCwsOCxjV/gsIXgsJXgsY3gsJ/gsYvgsKzgsLDgsY1f4LCo4LC14LCC4LCs4LCw4LGNX+CwoeCwv+CwuOCxhuCwguCwrOCwsOCxjScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4LCc4LCoLl/gsKvgsL/gsKzgsY3gsLAuX+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL8uX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGB4LCy4LGIX+CwhuCwly5f4LC44LGG4LCq4LGNLl/gsIXgsJXgsY3gsJ/gsYsuX+CwqOCwtS5f4LCh4LC/4LC44LGGLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfgsIbgsKbgsL/gsLXgsL7gsLDgsIJf4LC44LGL4LCu4LC14LC+4LCw4LCCX+CwruCwguCwl+Cws+CwteCwvuCwsOCwgl/gsKzgsYHgsKfgsLXgsL7gsLDgsIJf4LCX4LGB4LCw4LGB4LC14LC+4LCw4LCCX+CwtuCxgeCwleCxjeCwsOCwteCwvuCwsOCwgl/gsLbgsKjgsL/gsLXgsL7gsLDgsIInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CwhuCwpuCwv1/gsLjgsYvgsK5f4LCu4LCC4LCX4LCzX+CwrOCxgeCwp1/gsJfgsYHgsLDgsYFf4LC24LGB4LCV4LGN4LCwX+CwtuCwqOCwvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgsIZf4LC44LGLX+CwruCwgl/gsKzgsYFf4LCX4LGBX+CwtuCxgV/gsLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4LCo4LGH4LCh4LGBXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CwsOCxh+CwquCxgV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CwqOCwv+CwqOCxjeCwqF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4LCX4LCkXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCwsuCxiycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4LCV4LGN4LCw4LC/4LCk4LCCJyxcbiAgICAgICAgICAgIHM6ICfgsJXgsYrgsKjgsY3gsKjgsL8g4LCV4LGN4LC34LCj4LC+4LCy4LGBJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4LC44LGG4LCV4LCo4LGN4LCy4LGBJyxcbiAgICAgICAgICAgIG06ICfgsJLgsJUg4LCo4LC/4LCu4LC/4LC34LCCJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4LCo4LC/4LCu4LC/4LC34LC+4LCy4LGBJyxcbiAgICAgICAgICAgIGg6ICfgsJLgsJUg4LCX4LCC4LCfJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4LCX4LCC4LCf4LCy4LGBJyxcbiAgICAgICAgICAgIGQ6ICfgsJLgsJUg4LCw4LGL4LCc4LGBJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4LCw4LGL4LCc4LGB4LCy4LGBJyxcbiAgICAgICAgICAgIE06ICfgsJLgsJUg4LCo4LGG4LCyJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4LCo4LGG4LCy4LCy4LGBJyxcbiAgICAgICAgICAgIHk6ICfgsJLgsJUg4LC44LCC4LC14LCk4LGN4LC44LCw4LCCJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4LC44LCC4LC14LCk4LGN4LC44LCw4LC+4LCy4LGBJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ94LC1LyxcbiAgICAgICAgb3JkaW5hbDogJyVk4LC1JyxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CwsOCwvuCwpOCxjeCwsOCwv3zgsIngsKbgsK/gsIJ84LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCfOCwuOCwvuCwr+CwguCwpOCxjeCwsOCwgi8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CwsOCwvuCwpOCxjeCwsOCwvycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwieCwpuCwr+CwgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwuOCwvuCwr+CwguCwpOCxjeCwsOCwgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsLDgsL7gsKTgsY3gsLDgsL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwieCwpuCwr+Cwgic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwsOCwvuCwpOCxjeCwsOCwvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUZXR1biBEaWxpIChFYXN0IFRpbW9yKSBbdGV0XVxuLy8hIGF1dGhvciA6IEpvc2h1YSBCcm9va3MgOiBodHRwczovL2dpdGh1Yi5jb20vam9zaGJyb29rc1xuLy8hIGF1dGhvciA6IE9ub3JpbyBEZSBKLiBBZm9uc28gOiBodHRwczovL2dpdGh1Yi5jb20vbWFyb2JvXG4vLyEgYXV0aG9yIDogU29uaWEgU2ltb2VzIDogaHR0cHM6Ly9naXRodWIuY29tL3Nvbmlhc2ltb2VzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdGV0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGV0Jywge1xuICAgICAgICBtb250aHM6ICdKYW5laXJ1X0ZldmVyZWlydV9NYXJzdV9BYnJpbF9NYWl1X0p1w7F1X0p1bGx1X0FndXN0dV9TZXRlbWJydV9PdXR1YnJ1X05vdmVtYnJ1X0RlemVtYnJ1Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0RvbWluZ3VfU2VndW5kYV9UZXJzYV9LdWFydGFfS2ludGFfU2VzdGFfU2FiYWR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnRG9tX1NlZ19UZXJzX0t1YV9LaW50X1Nlc3RfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0RvX1NlZ19UZV9LdV9LaV9TZXNfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2hpbiBpaGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQWJhbiBpaGFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbaWhhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0hvcmlzZWlrIGloYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtzZW1hbmEga290dWtdIFtpaGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaWhhICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBsaXViYScsXG4gICAgICAgICAgICBzOiAnc2VndW5kdSBiYWx1bicsXG4gICAgICAgICAgICBzczogJ3NlZ3VuZHUgJWQnLFxuICAgICAgICAgICAgbTogJ21pbnV0dSBpZGEnLFxuICAgICAgICAgICAgbW06ICdtaW51dHUgJWQnLFxuICAgICAgICAgICAgaDogJ29yYXMgaWRhJyxcbiAgICAgICAgICAgIGhoOiAnb3JhcyAlZCcsXG4gICAgICAgICAgICBkOiAnbG9yb24gaWRhJyxcbiAgICAgICAgICAgIGRkOiAnbG9yb24gJWQnLFxuICAgICAgICAgICAgTTogJ2Z1bGFuIGlkYScsXG4gICAgICAgICAgICBNTTogJ2Z1bGFuICVkJyxcbiAgICAgICAgICAgIHk6ICd0aW5hbiBpZGEnLFxuICAgICAgICAgICAgeXk6ICd0aW5hbiAlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGFqaWsgW3RnXVxuLy8hIGF1dGhvciA6IE9yaWYgTi4gSnIuIDogaHR0cHM6Ly9naXRodWIuY29tL29yaWYtanJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMDogJy3Rg9C8JyxcbiAgICAgICAgMTogJy3Rg9C8JyxcbiAgICAgICAgMjogJy3RjtC8JyxcbiAgICAgICAgMzogJy3RjtC8JyxcbiAgICAgICAgNDogJy3Rg9C8JyxcbiAgICAgICAgNTogJy3Rg9C8JyxcbiAgICAgICAgNjogJy3Rg9C8JyxcbiAgICAgICAgNzogJy3Rg9C8JyxcbiAgICAgICAgODogJy3Rg9C8JyxcbiAgICAgICAgOTogJy3Rg9C8JyxcbiAgICAgICAgMTA6ICct0YPQvCcsXG4gICAgICAgIDEyOiAnLdGD0LwnLFxuICAgICAgICAxMzogJy3Rg9C8JyxcbiAgICAgICAgMjA6ICct0YPQvCcsXG4gICAgICAgIDMwOiAnLdGO0LwnLFxuICAgICAgICA0MDogJy3Rg9C8JyxcbiAgICAgICAgNTA6ICct0YPQvCcsXG4gICAgICAgIDYwOiAnLdGD0LwnLFxuICAgICAgICA3MDogJy3Rg9C8JyxcbiAgICAgICAgODA6ICct0YPQvCcsXG4gICAgICAgIDkwOiAnLdGD0LwnLFxuICAgICAgICAxMDA6ICct0YPQvCcsXG4gICAgfTtcblxuICAgIHZhciB0ZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RnJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GP0L3QstCw0YDQuF/RhNC10LLRgNCw0LvQuF/QvNCw0YDRgtC4X9Cw0L/RgNC10LvQuF/QvNCw0LnQuF/QuNGO0L3QuF/QuNGO0LvQuF/QsNCy0LPRg9GB0YLQuF/RgdC10L3RgtGP0LHRgNC4X9C+0LrRgtGP0LHRgNC4X9C90L7Rj9Cx0YDQuF/QtNC10LrQsNCx0YDQuCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0Y/QvdCy0LDRgF/RhNC10LLRgNCw0Ltf0LzQsNGA0YJf0LDQv9GA0LXQu1/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YBf0L7QutGC0Y/QsdGAX9C90L7Rj9Cx0YBf0LTQtdC60LDQsdGAJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRj9C90LJf0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCzX9GB0LXQvV/QvtC60YJf0L3QvtGPX9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfRj9C60YjQsNC90LHQtV/QtNGD0YjQsNC90LHQtV/RgdC10YjQsNC90LHQtV/Rh9C+0YDRiNCw0L3QsdC1X9C/0LDQvdK30YjQsNC90LHQtV/St9GD0LzRitCwX9GI0LDQvdCx0LUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfRj9GI0LFf0LTRiNCxX9GB0YjQsV/Rh9GI0LFf0L/RiNCxX9K30YPQvF/RiNC90LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0Y/RiF/QtNGIX9GB0Yhf0YfRiF/Qv9GIX9K30Lxf0YjQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQmNC80YDTr9C3INGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0KTQsNGA0LTQviDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9CU0LjRgNOv0Lcg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkW9C4XSBb0rPQsNGE0YLQsNC4INC+0Y/QvdC00LAg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkW9C4XSBb0rPQsNGE0YLQsNC4INCz0YPQt9Cw0YjRgtCwINGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0LHQsNGK0LTQuCAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg0L/QtdGIJyxcbiAgICAgICAgICAgIHM6ICfRj9C60YfQsNC90LQg0YHQvtC90LjRjycsXG4gICAgICAgICAgICBtOiAn0Y/QuiDQtNCw0pvQuNKb0LAnLFxuICAgICAgICAgICAgbW06ICclZCDQtNCw0pvQuNKb0LAnLFxuICAgICAgICAgICAgaDogJ9GP0Log0YHQvtCw0YInLFxuICAgICAgICAgICAgaGg6ICclZCDRgdC+0LDRgicsXG4gICAgICAgICAgICBkOiAn0Y/QuiDRgNOv0LcnLFxuICAgICAgICAgICAgZGQ6ICclZCDRgNOv0LcnLFxuICAgICAgICAgICAgTTogJ9GP0Log0LzQvtKzJyxcbiAgICAgICAgICAgIE1NOiAnJWQg0LzQvtKzJyxcbiAgICAgICAgICAgIHk6ICfRj9C6INGB0L7QuycsXG4gICAgICAgICAgICB5eTogJyVkINGB0L7QuycsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/RiNCw0LF80YHRg9Cx0rN80YDTr9C3fNCx0LXQs9C+0rMvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfRiNCw0LEnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfRgdGD0LHSsycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfRgNOv0LcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9Cx0LXQs9C+0rMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YjQsNCxJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgdGD0LHSsyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YDTr9C3JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQsdC10LPQvtKzJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRiNCw0LEnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGD0Lx80Y7QvCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDF0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUaGFpIFt0aF1cbi8vISBhdXRob3IgOiBLcmlkc2FkYSBUaGFuYWJ1bHBvbmcgOiBodHRwczovL2dpdGh1Yi5jb20vc2lyblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGgnLCB7XG4gICAgICAgIG1vbnRoczogJ+C4oeC4geC4o+C4suC4hOC4oV/guIHguLjguKHguKDguLLguJ7guLHguJnguJjguYxf4Lih4Li14LiZ4Liy4LiE4LihX+C5gOC4oeC4qeC4suC4ouC4mV/guJ7guKTguKnguKDguLLguITguKFf4Lih4Li04LiW4Li44LiZ4Liy4Lii4LiZX+C4geC4o+C4geC4juC4suC4hOC4oV/guKrguLTguIfguKvguLLguITguKFf4LiB4Lix4LiZ4Lii4Liy4Lii4LiZX+C4leC4uOC4peC4suC4hOC4oV/guJ7guKTguKjguIjguLTguIHguLLguKLguJlf4LiY4Lix4LiZ4Lin4Liy4LiE4LihJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfguKEu4LiELl/guIEu4LieLl/guKHguLUu4LiELl/guYDguKEu4LiiLl/guJ4u4LiELl/guKHguLQu4LiiLl/guIEu4LiELl/guKou4LiELl/guIEu4LiiLl/guJUu4LiELl/guJ4u4LiiLl/guJgu4LiELicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+C4reC4suC4l+C4tOC4leC4ouC5jF/guIjguLHguJnguJfguKPguYxf4Lit4Lix4LiH4LiE4Liy4LijX+C4nuC4uOC4mF/guJ7guKTguKvguLHguKrguJrguJTguLVf4Lio4Li44LiB4Lij4LmMX+C5gOC4quC4suC4o+C5jCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+C4reC4suC4l+C4tOC4leC4ouC5jF/guIjguLHguJnguJfguKPguYxf4Lit4Lix4LiH4LiE4Liy4LijX+C4nuC4uOC4mF/guJ7guKTguKvguLHguKpf4Lio4Li44LiB4Lij4LmMX+C5gOC4quC4suC4o+C5jCcuc3BsaXQoJ18nKSwgLy8geWVzLCB0aHJlZSBjaGFyYWN0ZXJzIGRpZmZlcmVuY2VcbiAgICAgICAgd2Vla2RheXNNaW46ICfguK3guLIuX+C4iC5f4LitLl/guJ4uX+C4nuC4pC5f4LioLl/guKouJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIOC5gOC4p+C4peC4siBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICfguKfguLHguJlkZGRk4LiX4Li14LmIIEQgTU1NTSBZWVlZIOC5gOC4p+C4peC4siBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4h3zguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfguIHguYjguK3guJnguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+C4p+C4seC4meC4meC4teC5iSDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4Lie4Lij4Li44LmI4LiH4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkW+C4q+C4meC5ieC4siDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4LmA4Lih4Li34LmI4Lit4Lin4Liy4LiZ4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4Lin4Lix4LiZXWRkZGRb4LiX4Li14LmI4LmB4Lil4LmJ4LinIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfguK3guLXguIEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVz4LiX4Li14LmI4LmB4Lil4LmJ4LinJyxcbiAgICAgICAgICAgIHM6ICfguYTguKHguYjguIHguLXguYjguKfguLTguJnguLLguJfguLUnLFxuICAgICAgICAgICAgc3M6ICclZCDguKfguLTguJnguLLguJfguLUnLFxuICAgICAgICAgICAgbTogJzEg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIGg6ICcxIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgICAgICAgICBoaDogJyVkIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgICAgICAgICBkOiAnMSDguKfguLHguJknLFxuICAgICAgICAgICAgZGQ6ICclZCDguKfguLHguJknLFxuICAgICAgICAgICAgdzogJzEg4Liq4Lix4Lib4LiU4Liy4Lir4LmMJyxcbiAgICAgICAgICAgIHd3OiAnJWQg4Liq4Lix4Lib4LiU4Liy4Lir4LmMJyxcbiAgICAgICAgICAgIE06ICcxIOC5gOC4lOC4t+C4reC4mScsXG4gICAgICAgICAgICBNTTogJyVkIOC5gOC4lOC4t+C4reC4mScsXG4gICAgICAgICAgICB5OiAnMSDguJvguLUnLFxuICAgICAgICAgICAgeXk6ICclZCDguJvguLUnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFR1cmttZW4gW3RrXVxuLy8hIGF1dGhvciA6IEF0YW15cmF0IEFiZHlyYWhtYW5vdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGFteXJhdGFiZHlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMTogXCInaW5qaVwiLFxuICAgICAgICA1OiBcIidpbmppXCIsXG4gICAgICAgIDg6IFwiJ2luamlcIixcbiAgICAgICAgNzA6IFwiJ2luamlcIixcbiAgICAgICAgODA6IFwiJ2luamlcIixcbiAgICAgICAgMjogXCInbmppXCIsXG4gICAgICAgIDc6IFwiJ25qaVwiLFxuICAgICAgICAyMDogXCInbmppXCIsXG4gICAgICAgIDUwOiBcIiduamlcIixcbiAgICAgICAgMzogXCInw7xuamlcIixcbiAgICAgICAgNDogXCInw7xuamlcIixcbiAgICAgICAgMTAwOiBcIifDvG5qaVwiLFxuICAgICAgICA2OiBcIiduanlcIixcbiAgICAgICAgOTogXCIndW5qeVwiLFxuICAgICAgICAxMDogXCIndW5qeVwiLFxuICAgICAgICAzMDogXCIndW5qeVwiLFxuICAgICAgICA2MDogXCIneW5qeVwiLFxuICAgICAgICA5MDogXCIneW5qeVwiLFxuICAgIH07XG5cbiAgICB2YXIgdGsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0aycsIHtcbiAgICAgICAgbW9udGhzOiAnw51hbndhcl9GZXdyYWxfTWFydF9BcHJlbF9NYcO9X0nDvXVuX0nDvXVsX0F3Z3VzdF9TZW50w71hYnJfT2t0w71hYnJfTm/DvWFicl9EZWthYnInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnw51hbl9GZXdfTWFyX0Fwcl9NYcO9X0nDvW5fScO9bF9Bd2dfU2VuX09rdF9Ob8O9X0Rlaycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfDnWVrxZ9lbmJlX0R1xZ9lbmJlX1NpxZ9lbmJlX8OHYXLFn2VuYmVfUGVuxZ9lbmJlX0FubmFfxZ5lbmJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnw51la19EdcWfX1NpxZ9fw4dhcl9QZW5fQW5uX8WeZW4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnw51rX0TFn19TxZ9fw4dyX1BuX0FuX8Webicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tidWfDvG4gc2FnYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbZXJ0aXIgc2FnYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW2luZGlraV0gZGRkZCBbc2FnYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZMO8w71uXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tnZcOnZW5dIGRkZGQgW3NhZ2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIHNvxYgnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMO2xYgnLFxuICAgICAgICAgICAgczogJ2Jpcm7DpMOnZSBzZWt1bnQnLFxuICAgICAgICAgICAgbTogJ2JpciBtaW51dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0JyxcbiAgICAgICAgICAgIGg6ICdiaXIgc2FnYXQnLFxuICAgICAgICAgICAgaGg6ICclZCBzYWdhdCcsXG4gICAgICAgICAgICBkOiAnYmlyIGfDvG4nLFxuICAgICAgICAgICAgZGQ6ICclZCBnw7xuJyxcbiAgICAgICAgICAgIE06ICdiaXIgYcO9JyxcbiAgICAgICAgICAgIE1NOiAnJWQgYcO9JyxcbiAgICAgICAgICAgIHk6ICdiaXIgw715bCcsXG4gICAgICAgICAgICB5eTogJyVkIMO9eWwnLFxuICAgICAgICB9LFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRG8nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0REJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIHplcm9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBcIid1bmp5XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSAobnVtYmVyICUgMTAwKSAtIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0gfHwgc3VmZml4ZXNbY10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGFnYWxvZyAoUGhpbGlwcGluZXMpIFt0bC1waF1cbi8vISBhdXRob3IgOiBEYW4gSGFnbWFuIDogaHR0cHM6Ly9naXRodWIuY29tL2hhZ21hbmRhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRsUGggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0bC1waCcsIHtcbiAgICAgICAgbW9udGhzOiAnRW5lcm9fUGVicmVyb19NYXJzb19BYnJpbF9NYXlvX0h1bnlvX0h1bHlvX0Fnb3N0b19TZXR5ZW1icmVfT2t0dWJyZV9Ob2J5ZW1icmVfRGlzeWVtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0VuZV9QZWJfTWFyX0Ficl9NYXlfSHVuX0h1bF9BZ29fU2V0X09rdF9Ob2JfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0xpbmdnb19MdW5lc19NYXJ0ZXNfTWl5ZXJrdWxlc19IdXdlYmVzX0JpeWVybmVzX1NhYmFkbycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0xpbl9MdW5fTWFyX01peV9IdXdfQml5X1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdMaV9MdV9NYV9NaV9IdV9CaV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdNTS9EL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnTU1NTSBELCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIERELCBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdMVCBbbmdheW9uZyBhcmF3XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0J1a2FzIG5nXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ0xUIFtzYSBzdXN1bm9kIG5hXSBkZGRkJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdMVCBba2FoYXBvbl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdMVCBbbm9vbmcgbmFrYXJhYW5nXSBkZGRkJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnc2EgbG9vYiBuZyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYW5nIG5ha2FsaXBhcycsXG4gICAgICAgICAgICBzOiAnaWxhbmcgc2VndW5kbycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG8nLFxuICAgICAgICAgICAgbTogJ2lzYW5nIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0bycsXG4gICAgICAgICAgICBoOiAnaXNhbmcgb3JhcycsXG4gICAgICAgICAgICBoaDogJyVkIG9yYXMnLFxuICAgICAgICAgICAgZDogJ2lzYW5nIGFyYXcnLFxuICAgICAgICAgICAgZGQ6ICclZCBhcmF3JyxcbiAgICAgICAgICAgIE06ICdpc2FuZyBidXdhbicsXG4gICAgICAgICAgICBNTTogJyVkIGJ1d2FuJyxcbiAgICAgICAgICAgIHk6ICdpc2FuZyB0YW9uJyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGFvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0bFBoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEtsaW5nb24gW3RsaF1cbi8vISBhdXRob3IgOiBEb21pbmlrYSBLcnVrIDogaHR0cHM6Ly9naXRodWIuY29tL2FtYXJhbnRocm9zZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG51bWJlcnNOb3VucyA9ICdwYWdoX3dh4oCZX2NoYeKAmV93ZWpfbG9TX3ZhZ2hfamF2X1NvY2hfY2hvcmdoX0h1dCcuc3BsaXQoJ18nKTtcblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZUZ1dHVyZShvdXRwdXQpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBvdXRwdXQ7XG4gICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgb3V0cHV0LmluZGV4T2YoJ2phaicpICE9PSAtMVxuICAgICAgICAgICAgICAgID8gdGltZS5zbGljZSgwLCAtMykgKyAnbGVTJ1xuICAgICAgICAgICAgICAgIDogb3V0cHV0LmluZGV4T2YoJ2phcicpICE9PSAtMVxuICAgICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICd3YVEnXG4gICAgICAgICAgICAgICAgICA6IG91dHB1dC5pbmRleE9mKCdESVMnKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICduZW0nXG4gICAgICAgICAgICAgICAgICAgIDogdGltZSArICcgcElxJztcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlUGFzdChvdXRwdXQpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBvdXRwdXQ7XG4gICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgb3V0cHV0LmluZGV4T2YoJ2phaicpICE9PSAtMVxuICAgICAgICAgICAgICAgID8gdGltZS5zbGljZSgwLCAtMykgKyAnSHXigJknXG4gICAgICAgICAgICAgICAgOiBvdXRwdXQuaW5kZXhPZignamFyJykgIT09IC0xXG4gICAgICAgICAgICAgICAgICA/IHRpbWUuc2xpY2UoMCwgLTMpICsgJ3dlbidcbiAgICAgICAgICAgICAgICAgIDogb3V0cHV0LmluZGV4T2YoJ0RJUycpICE9PSAtMVxuICAgICAgICAgICAgICAgICAgICA/IHRpbWUuc2xpY2UoMCwgLTMpICsgJ2JlbidcbiAgICAgICAgICAgICAgICAgICAgOiB0aW1lICsgJyByZXQnO1xuICAgICAgICByZXR1cm4gdGltZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBudW1iZXJOb3VuID0gbnVtYmVyQXNOb3VuKG51bWJlcik7XG4gICAgICAgIHN3aXRjaCAoc3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIGx1cCc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIHR1cCc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIHJlcCc7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIGphaic7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIGphcic7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck5vdW4gKyAnIERJUyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBudW1iZXJBc05vdW4obnVtYmVyKSB7XG4gICAgICAgIHZhciBodW5kcmVkID0gTWF0aC5mbG9vcigobnVtYmVyICUgMTAwMCkgLyAxMDApLFxuICAgICAgICAgICAgdGVuID0gTWF0aC5mbG9vcigobnVtYmVyICUgMTAwKSAvIDEwKSxcbiAgICAgICAgICAgIG9uZSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgd29yZCA9ICcnO1xuICAgICAgICBpZiAoaHVuZHJlZCA+IDApIHtcbiAgICAgICAgICAgIHdvcmQgKz0gbnVtYmVyc05vdW5zW2h1bmRyZWRdICsgJ3ZhdGxoJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGVuID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSAod29yZCAhPT0gJycgPyAnICcgOiAnJykgKyBudW1iZXJzTm91bnNbdGVuXSArICdtYUgnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbmUgPiAwKSB7XG4gICAgICAgICAgICB3b3JkICs9ICh3b3JkICE9PSAnJyA/ICcgJyA6ICcnKSArIG51bWJlcnNOb3Vuc1tvbmVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3b3JkID09PSAnJyA/ICdwYWdoJyA6IHdvcmQ7XG4gICAgfVxuXG4gICAgdmFyIHRsaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RsaCcsIHtcbiAgICAgICAgbW9udGhzOiAndGVyYeKAmSBqYXIgd2HigJlfdGVyYeKAmSBqYXIgY2hh4oCZX3RlcmHigJkgamFyIHdlal90ZXJh4oCZIGphciBsb1NfdGVyYeKAmSBqYXIgdmFnaF90ZXJh4oCZIGphciBqYXZfdGVyYeKAmSBqYXIgU29jaF90ZXJh4oCZIGphciBjaG9yZ2hfdGVyYeKAmSBqYXIgSHV0X3RlcmHigJkgamFyIHdh4oCZbWFIX3RlcmHigJkgamFyIHdh4oCZbWFIIHdh4oCZX3RlcmHigJkgamFyIHdh4oCZbWFIIGNoYeKAmScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFyIHdh4oCZX2phciBjaGHigJlfamFyIHdlal9qYXIgbG9TX2phciB2YWdoX2phciBqYXZfamFyIFNvY2hfamFyIGNob3JnaF9qYXIgSHV0X2phciB3YeKAmW1hSF9qYXIgd2HigJltYUggd2HigJlfamFyIHdh4oCZbWFIIGNoYeKAmScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OlxuICAgICAgICAgICAgJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjpcbiAgICAgICAgICAgICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tEYUhqYWpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbd2HigJlsZVNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnTExMJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbd2HigJlIdeKAmV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdMTEwnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IHRyYW5zbGF0ZUZ1dHVyZSxcbiAgICAgICAgICAgIHBhc3Q6IHRyYW5zbGF0ZVBhc3QsXG4gICAgICAgICAgICBzOiAncHVTIGx1cCcsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogJ3dh4oCZIHR1cCcsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogJ3dh4oCZIHJlcCcsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogJ3dh4oCZIGphaicsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogJ3dh4oCZIGphcicsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogJ3dh4oCZIERJUycsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRsaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUdXJraXNoIFt0cl1cbi8vISBhdXRob3JzIDogRXJoYW4gR3VuZG9nYW4gOiBodHRwczovL2dpdGh1Yi5jb20vZXJoYW5ndW5kb2dhbixcbi8vISAgICAgICAgICAgQnVyYWsgWWnEn2l0IEtheWE6IGh0dHBzOi8vZ2l0aHViLmNvbS9CWUtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMTogXCInaW5jaVwiLFxuICAgICAgICA1OiBcIidpbmNpXCIsXG4gICAgICAgIDg6IFwiJ2luY2lcIixcbiAgICAgICAgNzA6IFwiJ2luY2lcIixcbiAgICAgICAgODA6IFwiJ2luY2lcIixcbiAgICAgICAgMjogXCInbmNpXCIsXG4gICAgICAgIDc6IFwiJ25jaVwiLFxuICAgICAgICAyMDogXCInbmNpXCIsXG4gICAgICAgIDUwOiBcIiduY2lcIixcbiAgICAgICAgMzogXCInw7xuY8O8XCIsXG4gICAgICAgIDQ6IFwiJ8O8bmPDvFwiLFxuICAgICAgICAxMDA6IFwiJ8O8bmPDvFwiLFxuICAgICAgICA2OiBcIiduY8SxXCIsXG4gICAgICAgIDk6IFwiJ3VuY3VcIixcbiAgICAgICAgMTA6IFwiJ3VuY3VcIixcbiAgICAgICAgMzA6IFwiJ3VuY3VcIixcbiAgICAgICAgNjA6IFwiJ8SxbmPEsVwiLFxuICAgICAgICA5MDogXCInxLFuY8SxXCIsXG4gICAgfTtcblxuICAgIHZhciB0ciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RyJywge1xuICAgICAgICBtb250aHM6ICdPY2FrX8WedWJhdF9NYXJ0X05pc2FuX01hecSxc19IYXppcmFuX1RlbW11el9BxJ91c3Rvc19FeWzDvGxfRWtpbV9LYXPEsW1fQXJhbMSxaycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdPY2FfxZ51Yl9NYXJfTmlzX01heV9IYXpfVGVtX0HEn3VfRXlsX0VraV9LYXNfQXJhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1BhemFyX1BhemFydGVzaV9TYWzEsV/Dh2FyxZ9hbWJhX1BlcsWfZW1iZV9DdW1hX0N1bWFydGVzaScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1Bhel9QenRfU2FsX8OHYXJfUGVyX0N1bV9DbXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnUHpfUHRfU2Ffw4dhX1BlX0N1X0N0Jy5zcGxpdCgnXycpLFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ8O2w7YnIDogJ8OWw5YnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfDtnMnIDogJ8OWUyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/DtsO2fMOWw5Z8w7ZzfMOWUy8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAnw7ZzJyB8fCBpbnB1dCA9PT0gJ8OWUyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbeWFyxLFuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW2dlbGVjZWtdIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZMO8bl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbZ2XDp2VuXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIHNvbnJhJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDtm5jZScsXG4gICAgICAgICAgICBzOiAnYmlya2HDpyBzYW5peWUnLFxuICAgICAgICAgICAgc3M6ICclZCBzYW5peWUnLFxuICAgICAgICAgICAgbTogJ2JpciBkYWtpa2EnLFxuICAgICAgICAgICAgbW06ICclZCBkYWtpa2EnLFxuICAgICAgICAgICAgaDogJ2JpciBzYWF0JyxcbiAgICAgICAgICAgIGhoOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBkOiAnYmlyIGfDvG4nLFxuICAgICAgICAgICAgZGQ6ICclZCBnw7xuJyxcbiAgICAgICAgICAgIHc6ICdiaXIgaGFmdGEnLFxuICAgICAgICAgICAgd3c6ICclZCBoYWZ0YScsXG4gICAgICAgICAgICBNOiAnYmlyIGF5JyxcbiAgICAgICAgICAgIE1NOiAnJWQgYXknLFxuICAgICAgICAgICAgeTogJ2JpciB5xLFsJyxcbiAgICAgICAgICAgIHl5OiAnJWQgecSxbCcsXG4gICAgICAgIH0sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEbyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIFwiJ8SxbmPEsVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gKG51bWJlciAlIDEwMCkgLSBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdIHx8IHN1ZmZpeGVzW2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRhbG9zc2FuIFt0emxdXG4vLyEgYXV0aG9yIDogUm9iaW4gdmFuIGRlciBWbGlldCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JpbjB2YW4wZGVyMHZcbi8vISBhdXRob3IgOiBJdXN0w6wgQ2FudW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIC8vIEFmdGVyIHRoZSB5ZWFyIHRoZXJlIHNob3VsZCBiZSBhIHNsYXNoIGFuZCB0aGUgYW1vdW50IG9mIHllYXJzIHNpbmNlIERlY2VtYmVyIDI2LCAxOTc5IGluIFJvbWFuIG51bWVyYWxzLlxuICAgIC8vIFRoaXMgaXMgY3VycmVudGx5IHRvbyBkaWZmaWN1bHQgKG1heWJlIGV2ZW4gaW1wb3NzaWJsZSkgdG8gYWRkLlxuICAgIHZhciB0emwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0emwnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcl9GZXZyYWdsaF9NYXLDp19BdnLDr3VfTWFpX0fDvG5fSnVsaWFfR3VzY2h0X1NldGVtdmFyX0xpc3RvcMOkdHNfTm9lbXZhcl9aZWNlbXZhcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmV2X01hcl9BdnJfTWFpX0fDvG5fSnVsX0d1c19TZXRfTGlzX05vZV9aZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU8O6bGFkaV9Mw7puZcOnaV9NYWl0emlfTcOhcmN1cmlfWGjDumFkaV9WacOpbmVyw6dpX1PDoXR1cmknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTw7psX0zDum5fTWFpX03DoXJfWGjDul9WacOpX1PDoXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU8O6X0zDul9NYV9Nw6FfWGhfVmlfU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISC5tbScsXG4gICAgICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gW2RhbGxhc10gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIFtsaV0gRC4gTU1NTSBbZGFsbGFzXSBZWVlZIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2RcXCdvfGRcXCdhL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZCdvXCIgPT09IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyBcImQnb1wiIDogXCJEJ09cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyBcImQnYVwiIDogXCJEJ0FcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbb3hoaSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tkZW3DoCDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpZWlyaSDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbc8O8ciBlbF0gZGRkZCBbbGFzdGV1IMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29zcHJlaSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnamElcycsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgczogWyd2aWVuc2FzIHNlY3VuZHMnLCBcIidpZW5zYXMgc2VjdW5kc1wiXSxcbiAgICAgICAgICAgIHNzOiBbbnVtYmVyICsgJyBzZWN1bmRzJywgJycgKyBudW1iZXIgKyAnIHNlY3VuZHMnXSxcbiAgICAgICAgICAgIG06IFtcIiduIG3DrXV0XCIsIFwiJ2llbnMgbcOtdXRcIl0sXG4gICAgICAgICAgICBtbTogW251bWJlciArICcgbcOtdXRzJywgJycgKyBudW1iZXIgKyAnIG3DrXV0cyddLFxuICAgICAgICAgICAgaDogW1wiJ24gw75vcmFcIiwgXCInaWVuc2Egw75vcmFcIl0sXG4gICAgICAgICAgICBoaDogW251bWJlciArICcgw75vcmFzJywgJycgKyBudW1iZXIgKyAnIMO+b3JhcyddLFxuICAgICAgICAgICAgZDogW1wiJ24geml1YVwiLCBcIidpZW5zYSB6aXVhXCJdLFxuICAgICAgICAgICAgZGQ6IFtudW1iZXIgKyAnIHppdWFzJywgJycgKyBudW1iZXIgKyAnIHppdWFzJ10sXG4gICAgICAgICAgICBNOiBbXCInbiBtZXNcIiwgXCInaWVucyBtZXNcIl0sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcgbWVzZW4nLCAnJyArIG51bWJlciArICcgbWVzZW4nXSxcbiAgICAgICAgICAgIHk6IFtcIiduIGFyXCIsIFwiJ2llbnMgYXJcIl0sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcgYXJzJywgJycgKyBudW1iZXIgKyAnIGFycyddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXNGdXR1cmVcbiAgICAgICAgICAgID8gZm9ybWF0W2tleV1bMF1cbiAgICAgICAgICAgIDogd2l0aG91dFN1ZmZpeFxuICAgICAgICAgICAgICA/IGZvcm1hdFtrZXldWzBdXG4gICAgICAgICAgICAgIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHR6bDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDZW50cmFsIEF0bGFzIFRhbWF6aWdodCBbdHptXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdHptID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHptJywge1xuICAgICAgICBtb250aHM6ICfitYnitY/itY/itLDitaLitZRf4rSx4rWV4rSw4rWi4rWVX+K1juK0sOK1leK1ml/itYnitLHitZTitYnitZRf4rWO4rSw4rWi4rWi4rWTX+K1ouK1k+K1j+K1ouK1k1/itaLitZPitY3itaLitZPitaNf4rWW4rWT4rWb4rWcX+K1m+K1k+K1nOK0sOK1j+K0seK1ieK1lF/itL3itZ/itZPitLHitZVf4rWP4rWT4rWh4rSw4rWP4rSx4rWJ4rWUX+K0t+K1k+K1iuK1j+K0seK1ieK1lCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4rSw4rWZ4rS34rWFIOK0tF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vitLDitZnitL3itLAg4rS0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW+K0tF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vitLDitZritLDitY/itZwg4rS0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+K0tF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfitLfitLDitLfitYUg4rWZIOK1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBwYXN0OiAn4rWi4rSw4rWPICVzJyxcbiAgICAgICAgICAgIHM6ICfitYnitY7itYnitL0nLFxuICAgICAgICAgICAgc3M6ICclZCDitYnitY7itYnitL0nLFxuICAgICAgICAgICAgbTogJ+K1juK1ieK1j+K1k+K0uicsXG4gICAgICAgICAgICBtbTogJyVkIOK1juK1ieK1j+K1k+K0uicsXG4gICAgICAgICAgICBoOiAn4rWZ4rSw4rWE4rSwJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4rWc4rSw4rWZ4rWZ4rSw4rWE4rWJ4rWPJyxcbiAgICAgICAgICAgIGQ6ICfitLDitZnitZknLFxuICAgICAgICAgICAgZGQ6ICclZCBv4rWZ4rWZ4rSw4rWPJyxcbiAgICAgICAgICAgIE06ICfitLDitaJv4rWT4rWUJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4rWJ4rWi4rWi4rWJ4rWU4rWPJyxcbiAgICAgICAgICAgIHk6ICfitLDitZnitLPitLDitZknLFxuICAgICAgICAgICAgeXk6ICclZCDitYnitZnitLPitLDitZnitY8nLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHR6bTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDZW50cmFsIEF0bGFzIFRhbWF6aWdodCBMYXRpbiBbdHptLWxhdG5dXG4vLyEgYXV0aG9yIDogQWJkZWwgU2FpZCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0em1MYXRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHptLWxhdG4nLCB7XG4gICAgICAgIG1vbnRoczogJ2lubmF5cl9icsukYXlyy6RfbWFyy6Rzy6RfaWJyaXJfbWF5eXdfeXdueXdfeXdseXd6X8mjd8WhdF/FoXd0YW5iaXJfa3TLpHdicsukX253d2FuYmlyX2R3am5iaXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2lubmF5cl9icsukYXlyy6RfbWFyy6Rzy6RfaWJyaXJfbWF5eXdfeXdueXdfeXdseXd6X8mjd8WhdF/FoXd0YW5iaXJfa3TLpHdicsukX253d2FuYmlyX2R3am5iaXInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaeG4jXlhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYXNka2ggZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1thc2thIGddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1thc3NhbnQgZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtnXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RhZGtoIHMgeWFuICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICd5YW4gJXMnLFxuICAgICAgICAgICAgczogJ2ltaWsnLFxuICAgICAgICAgICAgc3M6ICclZCBpbWlrJyxcbiAgICAgICAgICAgIG06ICdtaW514biNJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludeG4jScsXG4gICAgICAgICAgICBoOiAnc2HJm2EnLFxuICAgICAgICAgICAgaGg6ICclZCB0YXNzYcmbaW4nLFxuICAgICAgICAgICAgZDogJ2FzcycsXG4gICAgICAgICAgICBkZDogJyVkIG9zc2FuJyxcbiAgICAgICAgICAgIE06ICdheW93cicsXG4gICAgICAgICAgICBNTTogJyVkIGl5eWlybicsXG4gICAgICAgICAgICB5OiAnYXNnYXMnLFxuICAgICAgICAgICAgeXk6ICclZCBpc2dhc24nLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHR6bUxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVXlnaHVyIChDaGluYSkgW3VnLWNuXVxuLy8hIGF1dGhvcjogYm95YXEgOiBodHRwczovL2dpdGh1Yi5jb20vYm95YXFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB1Z0NuID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWctY24nLCB7XG4gICAgICAgIG1vbnRoczogJ9mK2KfZhtuL2KfYsV/ZgduQ24vYsdin2YRf2YXYp9ix2Kpf2KbYp9m+2LHbkNmEX9mF2KfZil/YptmJ2Yrbh9mGX9im2YnZituH2YRf2KbYp9uL2Lrbh9iz2Kpf2LPbkNmG2Krbldio2YnYsV/YptuG2YPYqtuV2KjZidixX9mG2YjZitin2KjZidixX9iv25DZg9in2KjZidixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfZitin2Ybbi9in2LFf2YHbkNuL2LHYp9mEX9mF2KfYsdiqX9im2KfZvtix25DZhF/Zhdin2Ypf2KbZidmK24fZhl/YptmJ2Yrbh9mEX9im2Kfbi9i624fYs9iqX9iz25DZhtiq25XYqNmJ2LFf2KbbhtmD2Krbldio2YnYsV/ZhtmI2YrYp9io2YnYsV/Yr9uQ2YPYp9io2YnYsScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9mK25XZg9i025XZhtio25Vf2K/biNi025XZhtio25Vf2LPbldmK2LTbldmG2KjblV/ahtin2LHYtNuV2YbYqNuVX9m+25XZiti025XZhtio25Vf2KzbiNmF25Vf2LTbldmG2KjblScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9mK25Vf2K/biF/Ys9uVX9qG2Kdf2b7blV/YrNuIX9i025UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2YrblV/Yr9uIX9iz25Vf2obYp1/ZvtuVX9is24hf2LTblScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZLdmK2YnZhNmJTS3Yptin2YrZhtmJ2q1ELdmD24jZhtmJJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YnYjCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZNiMIFlZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YnYjCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/ZituQ2LHZidmFINmD25DahtuVfNiz25XavtuV2LF82obbiNi02KrZidmGINio24fYsduH2YZ82obbiNi0fNqG24jYtNiq2YnZhiDZg9uQ2YrZidmGfNmD25Xahi8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ9mK25DYsdmJ2YUg2YPbkNqG25UnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfYs9uV2r7bldixJyB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn2obbiNi02KrZidmGINio24fYsduH2YYnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfahtuI2LTYqtmJ2YYg2YPbkNmK2YnZhicgfHwgbWVyaWRpZW0gPT09ICfZg9uV2oYnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YrbkNix2YnZhSDZg9uQ2obblSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgOTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYs9uV2r7bldixJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2obbiNi0JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxODAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfahtuI2LTYqtmJ2YYg2YPbkNmK2YnZhic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YPbldqGJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KjbiNqv24jZhiDYs9in2KbbldiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9im25XYqtuVINiz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW9mD25DZhNuV2LHZg9mJXSBkZGRkIFvYs9in2KbbldiqXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9iq24bZhtuI2q/biNmGXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vYptin2YTYr9mJ2YbZgtmJXSBkZGRkIFvYs9in2KbbldiqXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINmD25DZitmJ2YYnLFxuICAgICAgICAgICAgcGFzdDogJyVzINio24fYsduH2YYnLFxuICAgICAgICAgICAgczogJ9mG25XahtqG25Ug2LPbkNmD2YjZhtiqJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2LPbkNmD2YjZhtiqJyxcbiAgICAgICAgICAgIG06ICfYqNmJ2LEg2YXZidmG24fYqicsXG4gICAgICAgICAgICBtbTogJyVkINmF2YnZhtuH2KonLFxuICAgICAgICAgICAgaDogJ9io2YnYsSDYs9in2KbbldiqJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9im25XYqicsXG4gICAgICAgICAgICBkOiAn2KjZidixINmD24jZhicsXG4gICAgICAgICAgICBkZDogJyVkINmD24jZhicsXG4gICAgICAgICAgICBNOiAn2KjZidixINim2KfZiicsXG4gICAgICAgICAgICBNTTogJyVkINim2KfZiicsXG4gICAgICAgICAgICB5OiAn2KjZidixINmK2YnZhCcsXG4gICAgICAgICAgICB5eTogJyVkINmK2YnZhCcsXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KC3Zg9uI2YbZiXwt2KbYp9mKfC3avtuV2b7YqtuVKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Zg9uI2YbZiSc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdq+25XZvtiq25UnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgLy8gR0IvVCA3NDA4LTE5OTTjgIrmlbDmja7lhYPlkozkuqTmjaLmoLzlvI/Ct+S/oeaBr+S6pOaNosK35pel5pyf5ZKM5pe26Ze06KGo56S65rOV44CL5LiOSVNPIDg2MDE6MTk4OOetieaViFxuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVnQ247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVWtyYWluaWFuIFt1a11cbi8vISBhdXRob3IgOiB6ZW1sYW5pbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS96ZW1sYW5pblxuLy8hIEF1dGhvciA6IE1lbmVsaW9uIEVsZW5zw7psZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTFcbiAgICAgICAgICAgID8gZm9ybXNbMF1cbiAgICAgICAgICAgIDogbnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApXG4gICAgICAgICAgICAgID8gZm9ybXNbMV1cbiAgICAgICAgICAgICAgOiBmb3Jtc1syXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgc3M6IHdpdGhvdXRTdWZmaXggPyAn0YHQtdC60YPQvdC00LBf0YHQtdC60YPQvdC00Lhf0YHQtdC60YPQvdC0JyA6ICfRgdC10LrRg9C90LTRg1/RgdC10LrRg9C90LTQuF/RgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbW06IHdpdGhvdXRTdWZmaXggPyAn0YXQstC40LvQuNC90LBf0YXQstC40LvQuNC90Lhf0YXQstC40LvQuNC9JyA6ICfRhdCy0LjQu9C40L3Rg1/RhdCy0LjQu9C40L3QuF/RhdCy0LjQu9C40L0nLFxuICAgICAgICAgICAgaGg6IHdpdGhvdXRTdWZmaXggPyAn0LPQvtC00LjQvdCwX9Cz0L7QtNC40L3QuF/Qs9C+0LTQuNC9JyA6ICfQs9C+0LTQuNC90YNf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L0nLFxuICAgICAgICAgICAgZGQ6ICfQtNC10L3RjF/QtNC90ZZf0LTQvdGW0LInLFxuICAgICAgICAgICAgTU06ICfQvNGW0YHRj9GG0Yxf0LzRltGB0Y/RhtGWX9C80ZbRgdGP0YbRltCyJyxcbiAgICAgICAgICAgIHl5OiAn0YDRltC6X9GA0L7QutC4X9GA0L7QutGW0LInLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9GF0LLQuNC70LjQvdCwJyA6ICfRhdCy0LjQu9C40L3Rgyc7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaCcpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9Cz0L7QtNC40L3QsCcgOiAn0LPQvtC00LjQvdGDJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzQ2FzZVJlcGxhY2UobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciB3ZWVrZGF5cyA9IHtcbiAgICAgICAgICAgICAgICBub21pbmF0aXZlOlxuICAgICAgICAgICAgICAgICAgICAn0L3QtdC00ZbQu9GPX9C/0L7QvdC10LTRltC70L7Qul/QstGW0LLRgtC+0YDQvtC6X9GB0LXRgNC10LTQsF/Rh9C10YLQstC10YBf0L/igJnRj9GC0L3QuNGG0Y9f0YHRg9Cx0L7RgtCwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGFjY3VzYXRpdmU6XG4gICAgICAgICAgICAgICAgICAgICfQvdC10LTRltC70Y5f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNGDX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRjl/RgdGD0LHQvtGC0YMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgZ2VuaXRpdmU6XG4gICAgICAgICAgICAgICAgICAgICfQvdC10LTRltC70ZZf0L/QvtC90LXQtNGW0LvQutCwX9Cy0ZbQstGC0L7RgNC60LBf0YHQtdGA0LXQtNC4X9GH0LXRgtCy0LXRgNCz0LBf0L/igJnRj9GC0L3QuNGG0ZZf0YHRg9Cx0L7RgtC4Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vdW5DYXNlO1xuXG4gICAgICAgIGlmIChtID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheXNbJ25vbWluYXRpdmUnXVxuICAgICAgICAgICAgICAgIC5zbGljZSgxLCA3KVxuICAgICAgICAgICAgICAgIC5jb25jYXQod2Vla2RheXNbJ25vbWluYXRpdmUnXS5zbGljZSgwLCAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheXNbJ25vbWluYXRpdmUnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdW5DYXNlID0gLyhcXFtb0JLQstCj0YNdXFxdKSA/ZGRkZC8udGVzdChmb3JtYXQpXG4gICAgICAgICAgICA/ICdhY2N1c2F0aXZlJ1xuICAgICAgICAgICAgOiAvXFxbPyg/OtC80LjQvdGD0LvQvtGXfNC90LDRgdGC0YPQv9C90L7Rlyk/ID9cXF0gP2RkZGQvLnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICA/ICdnZW5pdGl2ZSdcbiAgICAgICAgICAgICAgOiAnbm9taW5hdGl2ZSc7XG4gICAgICAgIHJldHVybiB3ZWVrZGF5c1tub3VuQ2FzZV1bbS5kYXkoKV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ciArICfQvicgKyAodGhpcy5ob3VycygpID09PSAxMSA/ICfQsScgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHVrID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWsnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0YHRltGH0L3Rj1/Qu9GO0YLQvtCz0L5f0LHQtdGA0LXQt9C90Y9f0LrQstGW0YLQvdGPX9GC0YDQsNCy0L3Rj1/Rh9C10YDQstC90Y9f0LvQuNC/0L3Rj1/RgdC10YDQv9C90Y9f0LLQtdGA0LXRgdC90Y9f0LbQvtCy0YLQvdGPX9C70LjRgdGC0L7Qv9Cw0LTQsF/Qs9GA0YPQtNC90Y8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9GB0ZbRh9C10L3RjF/Qu9GO0YLQuNC5X9Cx0LXRgNC10LfQtdC90Yxf0LrQstGW0YLQtdC90Yxf0YLRgNCw0LLQtdC90Yxf0YfQtdGA0LLQtdC90Yxf0LvQuNC/0LXQvdGMX9GB0LXRgNC/0LXQvdGMX9Cy0LXRgNC10YHQtdC90Yxf0LbQvtCy0YLQtdC90Yxf0LvQuNGB0YLQvtC/0LDQtF/Qs9GA0YPQtNC10L3RjCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0YHRltGHX9C70Y7Rgl/QsdC10YBf0LrQstGW0YJf0YLRgNCw0LJf0YfQtdGA0LJf0LvQuNC/X9GB0LXRgNC/X9Cy0LXRgF/QttC+0LLRgl/Qu9C40YHRgl/Qs9GA0YPQtCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6IHdlZWtkYXlzQ2FzZVJlcGxhY2UsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQvdC0X9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVkg0YAuJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZINGALiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZINGALiwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQodGM0L7Qs9C+0LTQvdGWICcpLFxuICAgICAgICAgICAgbmV4dERheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQl9Cw0LLRgtGA0LAgJyksXG4gICAgICAgICAgICBsYXN0RGF5OiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9CS0YfQvtGA0LAgJyksXG4gICAgICAgICAgICBuZXh0V2VlazogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQo10gZGRkZCBbJyksXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQnNC40L3Rg9C70L7Rl10gZGRkZCBbJykuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9Cc0LjQvdGD0LvQvtCz0L5dIGRkZGQgWycpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0LfQsCAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg0YLQvtC80YMnLFxuICAgICAgICAgICAgczogJ9C00LXQutGW0LvRjNC60LAg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaDogJ9Cz0L7QtNC40L3RgycsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQ6ICfQtNC10L3RjCcsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06ICfQvNGW0YHRj9GG0YwnLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5OiAn0YDRltC6JyxcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB9LFxuICAgICAgICAvLyBNLiBFLjogdGhvc2UgdHdvIGFyZSB2aXJ0dWFsbHkgdW51c2VkIGJ1dCBhIHVzZXIgbWlnaHQgd2FudCB0byBpbXBsZW1lbnQgdGhlbSBmb3IgaGlzL2hlciB3ZWJzaXRlIGZvciBzb21lIHJlYXNvblxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0ZZ80YDQsNC90LrRg3zQtNC90Y980LLQtdGH0L7RgNCwLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9C+0YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0ZYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdC60YMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0L7RgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQuXzQs9C+KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QuSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0L4nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB1aztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVcmR1IFt1cl1cbi8vISBhdXRob3IgOiBTYXdvb2QgQWxhbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9pYm5lc2F5ZWVkXG4vLyEgYXV0aG9yIDogWmFjayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9aYWNrVmlzaW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAgICAgJ9is2YbZiNix24wnLFxuICAgICAgICAgICAgJ9mB2LHZiNix24wnLFxuICAgICAgICAgICAgJ9mF2KfYsdqGJyxcbiAgICAgICAgICAgICfYp9m+2LHbjNmEJyxcbiAgICAgICAgICAgICfZhdim24wnLFxuICAgICAgICAgICAgJ9is2YjZhicsXG4gICAgICAgICAgICAn2KzZiNmE2KfYptuMJyxcbiAgICAgICAgICAgICfYp9qv2LPYqicsXG4gICAgICAgICAgICAn2LPYqtmF2KjYsScsXG4gICAgICAgICAgICAn2Kfaqdiq2YjYqNixJyxcbiAgICAgICAgICAgICfZhtmI2YXYqNixJyxcbiAgICAgICAgICAgICfYr9iz2YXYqNixJyxcbiAgICAgICAgXSxcbiAgICAgICAgZGF5cyA9IFsn2KfYqtmI2KfYsScsICfZvtuM2LEnLCAn2YXZhtqv2YQnLCAn2KjYr9q+JywgJ9is2YXYudix2KfYqicsICfYrNmF2LnbgScsICfbgdmB2KrbgSddO1xuXG4gICAgdmFyIHVyID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXInLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5czogZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRheXMsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGTYjCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Ytdio2K182LTYp9mFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9i02KfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LXYqNitJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJztcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KLYrCDYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vaqdmEINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9io2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9qv2LDYtNiq24Eg2LHZiNiyINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1var9iw2LTYqtuBXSBkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDYqNi52K8nLFxuICAgICAgICAgICAgcGFzdDogJyVzINmC2KjZhCcsXG4gICAgICAgICAgICBzOiAn2obZhtivINiz24zaqdmG2ognLFxuICAgICAgICAgICAgc3M6ICclZCDYs9uM2qnZhtqIJyxcbiAgICAgICAgICAgIG06ICfYp9uM2qkg2YXZhtm5JyxcbiAgICAgICAgICAgIG1tOiAnJWQg2YXZhtm5JyxcbiAgICAgICAgICAgIGg6ICfYp9uM2qkg2q/avtmG2bnbgScsXG4gICAgICAgICAgICBoaDogJyVkINqv2r7Zhtm525InLFxuICAgICAgICAgICAgZDogJ9in24zaqSDYr9mGJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2K/ZhicsXG4gICAgICAgICAgICBNOiAn2KfbjNqpINmF2KfbgScsXG4gICAgICAgICAgICBNTTogJyVkINmF2KfbgScsXG4gICAgICAgICAgICB5OiAn2KfbjNqpINiz2KfZhCcsXG4gICAgICAgICAgICB5eTogJyVkINiz2KfZhCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFV6YmVrIFt1el1cbi8vISBhdXRob3IgOiBTYXJkb3IgTXVtaW5vdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdW1pbm9mZlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHV6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXonLCB7XG4gICAgICAgIG1vbnRoczogJ9GP0L3QstCw0YBf0YTQtdCy0YDQsNC7X9C80LDRgNGCX9Cw0L/RgNC10Ltf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGAX9C+0LrRgtGP0LHRgF/QvdC+0Y/QsdGAX9C00LXQutCw0LHRgCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRj9C90LJf0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCzX9GB0LXQvV/QvtC60YJf0L3QvtGPX9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfQr9C60YjQsNC90LHQsF/QlNGD0YjQsNC90LHQsF/QodC10YjQsNC90LHQsF/Qp9C+0YDRiNCw0L3QsdCwX9Cf0LDQudGI0LDQvdCx0LBf0JbRg9C80LBf0KjQsNC90LHQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9Cv0LrRiF/QlNGD0Yhf0KHQtdGIX9Cn0L7RgF/Qn9Cw0Llf0JbRg9C8X9Co0LDQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQr9C6X9CU0YNf0KHQtV/Qp9C+X9Cf0LBf0JbRg1/QqNCwJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9CR0YPQs9GD0L0g0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Ct0YDRgtCw0LPQsF0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb0LrRg9C90Lgg0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Ca0LXRh9CwINGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb0KPRgtCz0LDQvV0gZGRkZCBb0LrRg9C90Lgg0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9Cv0LrQuNC9ICVzINC40YfQuNC00LAnLFxuICAgICAgICAgICAgcGFzdDogJ9CR0LjRgCDQvdC10YfQsCAlcyDQvtC70LTQuNC9JyxcbiAgICAgICAgICAgIHM6ICfRhNGD0YDRgdCw0YInLFxuICAgICAgICAgICAgc3M6ICclZCDRhNGD0YDRgdCw0YInLFxuICAgICAgICAgICAgbTogJ9Cx0LjRgCDQtNCw0LrQuNC60LAnLFxuICAgICAgICAgICAgbW06ICclZCDQtNCw0LrQuNC60LAnLFxuICAgICAgICAgICAgaDogJ9Cx0LjRgCDRgdC+0LDRgicsXG4gICAgICAgICAgICBoaDogJyVkINGB0L7QsNGCJyxcbiAgICAgICAgICAgIGQ6ICfQsdC40YAg0LrRg9C9JyxcbiAgICAgICAgICAgIGRkOiAnJWQg0LrRg9C9JyxcbiAgICAgICAgICAgIE06ICfQsdC40YAg0L7QuScsXG4gICAgICAgICAgICBNTTogJyVkINC+0LknLFxuICAgICAgICAgICAgeTogJ9Cx0LjRgCDQudC40LsnLFxuICAgICAgICAgICAgeXk6ICclZCDQudC40LsnLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXo7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVXpiZWsgTGF0aW4gW3V6LWxhdG5dXG4vLyEgYXV0aG9yIDogUmFzdWxiZWsgTWlyemF5ZXYgOiBnaXRodWIuY29tL1Jhc3VsYmVlZWtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB1ekxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1ei1sYXRuJywge1xuICAgICAgICBtb250aHM6ICdZYW52YXJfRmV2cmFsX01hcnRfQXByZWxfTWF5X0l5dW5fSXl1bF9Bdmd1c3RfU2VudGFicl9Pa3RhYnJfTm95YWJyX0Rla2Ficicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdZYW5fRmV2X01hcl9BcHJfTWF5X0l5dW5fSXl1bF9BdmdfU2VuX09rdF9Ob3lfRGVrJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdZYWtzaGFuYmFfRHVzaGFuYmFfU2VzaGFuYmFfQ2hvcnNoYW5iYV9QYXlzaGFuYmFfSnVtYV9TaGFuYmEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1lha19EdXNoX1Nlc2hfQ2hvcl9QYXlfSnVtX1NoYW4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnWWFfRHVfU2VfQ2hvX1BhX0p1X1NoYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnRCBNTU1NIFlZWVksIGRkZGQgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tCdWd1biBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRXJ0YWdhXSBMVCBbZGFdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba3VuaSBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2VjaGEgc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBsYXN0V2VlazogXCJbTyd0Z2FuXSBkZGRkIFtrdW5pIHNvYXRdIExUIFtkYV1cIixcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnWWFxaW4gJXMgaWNoaWRhJyxcbiAgICAgICAgICAgIHBhc3Q6ICdCaXIgbmVjaGEgJXMgb2xkaW4nLFxuICAgICAgICAgICAgczogJ3Nvbml5YScsXG4gICAgICAgICAgICBzczogJyVkIHNvbml5YScsXG4gICAgICAgICAgICBtOiAnYmlyIGRhcWlxYScsXG4gICAgICAgICAgICBtbTogJyVkIGRhcWlxYScsXG4gICAgICAgICAgICBoOiAnYmlyIHNvYXQnLFxuICAgICAgICAgICAgaGg6ICclZCBzb2F0JyxcbiAgICAgICAgICAgIGQ6ICdiaXIga3VuJyxcbiAgICAgICAgICAgIGRkOiAnJWQga3VuJyxcbiAgICAgICAgICAgIE06ICdiaXIgb3knLFxuICAgICAgICAgICAgTU06ICclZCBveScsXG4gICAgICAgICAgICB5OiAnYmlyIHlpbCcsXG4gICAgICAgICAgICB5eTogJyVkIHlpbCcsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB1ekxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVmlldG5hbWVzZSBbdmldXG4vLyEgYXV0aG9yIDogQmFuZyBOZ3V5ZW4gOiBodHRwczovL2dpdGh1Yi5jb20vYmFuZ25rXG4vLyEgYXV0aG9yIDogQ2hpZW4gS2lyYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaGllbmtpcmFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB2aSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3ZpJywge1xuICAgICAgICBtb250aHM6ICd0aMOhbmcgMV90aMOhbmcgMl90aMOhbmcgM190aMOhbmcgNF90aMOhbmcgNV90aMOhbmcgNl90aMOhbmcgN190aMOhbmcgOF90aMOhbmcgOV90aMOhbmcgMTBfdGjDoW5nIDExX3Row6FuZyAxMicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnVGhnIDAxX1RoZyAwMl9UaGcgMDNfVGhnIDA0X1RoZyAwNV9UaGcgMDZfVGhnIDA3X1RoZyAwOF9UaGcgMDlfVGhnIDEwX1RoZyAxMV9UaGcgMTInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdjaOG7pyBuaOG6rXRfdGjhu6kgaGFpX3Ro4bupIGJhX3Ro4bupIHTGsF90aOG7qSBuxINtX3Ro4bupIHPDoXVfdGjhu6kgYuG6o3knLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdDTl9UMl9UM19UNF9UNV9UNl9UNycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdDTl9UMl9UM19UNF9UNV9UNl9UNycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvc2F8Y2gvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL15jaCQvaS50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdzYScgOiAnU0EnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdjaCcgOiAnQ0gnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBbbsSDbV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBbbsSDbV0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsOiAnREQvTS9ZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGw6ICdEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIw7RtIG5heSBsw7pjXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW05nw6B5IG1haSBsw7pjXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3R14bqnbiB04bubaSBsw7pjXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0jDtG0gcXVhIGzDumNdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbdHXhuqduIHRyxrDhu5tjIGzDumNdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgdOG7m2knLFxuICAgICAgICAgICAgcGFzdDogJyVzIHRyxrDhu5tjJyxcbiAgICAgICAgICAgIHM6ICd2w6BpIGdpw6J5JyxcbiAgICAgICAgICAgIHNzOiAnJWQgZ2nDonknLFxuICAgICAgICAgICAgbTogJ23hu5l0IHBow7p0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgcGjDunQnLFxuICAgICAgICAgICAgaDogJ23hu5l0IGdp4budJyxcbiAgICAgICAgICAgIGhoOiAnJWQgZ2nhu50nLFxuICAgICAgICAgICAgZDogJ23hu5l0IG5nw6B5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgbmfDoHknLFxuICAgICAgICAgICAgdzogJ23hu5l0IHR14bqnbicsXG4gICAgICAgICAgICB3dzogJyVkIHR14bqnbicsXG4gICAgICAgICAgICBNOiAnbeG7mXQgdGjDoW5nJyxcbiAgICAgICAgICAgIE1NOiAnJWQgdGjDoW5nJyxcbiAgICAgICAgICAgIHk6ICdt4buZdCBuxINtJyxcbiAgICAgICAgICAgIHl5OiAnJWQgbsSDbScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB2aTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQc2V1ZG8gW3gtcHNldWRvXVxuLy8hIGF1dGhvciA6IEFuZHJldyBIb29kIDogaHR0cHM6Ly9naXRodWIuY29tL2FuZHJld2hvb2QxMjVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB4UHNldWRvID0gbW9tZW50LmRlZmluZUxvY2FsZSgneC1wc2V1ZG8nLCB7XG4gICAgICAgIG1vbnRoczogJ0p+w6HDscO6w6F+csO9X0Z+w6licsO6fsOhcsO9X35Nw6FyY35oX8OBcH5yw61sX35Nw6HDvV9+SsO6w7HDqX5fSsO6bH7DvV/DgcO6fmfDunN0fl9Tw6lwfnTDqW1ifsOpcl/Dk35jdMOzYn7DqXJfw5F+w7N2w6ltfmLDqXJffkTDqWPDqX5tYsOpcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnSn7DocOxX35Gw6liX35Nw6FyX37DgXByX35Nw6HDvV9+SsO6w7FffkrDumxffsOBw7pnX35Tw6lwX37Dk2N0X37DkcOzdl9+RMOpYycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdTfsO6w7Fkw6F+w71fTcOzfsOxZMOhw71+X1TDusOpfnNkw6HDvX5fV8OpZH7DscOpc2R+w6HDvV9UfmjDunJzfmTDocO9X35GcsOtZH7DocO9X1N+w6F0w7pyfmTDocO9Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTfsO6w7Fffk3Ds8OxX35Uw7rDqV9+V8OpZF9+VGjDul9+RnLDrV9+U8OhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTfsO6X03Ds35fVMO6X35Xw6lfVH5oX0Zyfl9Tw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUfsOzZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUfsOzbcOzfnJyw7N+dyDDoXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW8OdfsOpc3R+w6lyZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTH7DoXN0XSBkZGRkIFvDoXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnw61+w7EgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMOhfmfDsycsXG4gICAgICAgICAgICBzOiAnw6EgfmbDqXcgfnPDqWPDs37DsWRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc37DqWPDs8OxfmRzJyxcbiAgICAgICAgICAgIG06ICfDoSB+bcOtw7F+w7p0w6knLFxuICAgICAgICAgICAgbW06ICclZCBtfsOtw7HDun50w6lzJyxcbiAgICAgICAgICAgIGg6ICfDoX7DsSBow7N+w7pyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaH7Ds8O6cnMnLFxuICAgICAgICAgICAgZDogJ8OhIH5kw6HDvScsXG4gICAgICAgICAgICBkZDogJyVkIGR+w6HDvXMnLFxuICAgICAgICAgICAgTTogJ8OhIH5tw7PDsX50aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1+w7PDsXR+aHMnLFxuICAgICAgICAgICAgeTogJ8OhIH7DvcOpw6FyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw71+w6nDoXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhQc2V1ZG87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogWW9ydWJhIE5pZ2VyaWEgW3lvXVxuLy8hIGF1dGhvciA6IEF0b2xhZ2JlIEFiaXNveWUgOiBodHRwczovL2dpdGh1Yi5jb20vYW5kZWxhLWJhdG9sYWdiZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHlvID0gbW9tZW50LmRlZmluZUxvY2FsZSgneW8nLCB7XG4gICAgICAgIG1vbnRoczogJ1PhurnMgXLhurnMgV9FzIByZcyAbGXMgF/hurhy4bq5zIBuYcyAX0nMgGdiZcyBX0XMgGJpYmlfT8yAa3XMgGR1X0Fn4bq5bW9fT8yAZ3XMgW5fT3dld2Vf4buMzIB3YcyAcmHMgF9CZcyBbHXMgV/hu4zMgHDhurnMgMyAJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ1PhurnMgXJfRcyAcmxf4bq4cm5fScyAZ2JfRcyAYmlfT8yAa3XMgF9BZ+G6uV9PzIBndcyBX093ZV/hu4zMgHdhzIBfQmXMgWxf4buMzIBw4bq5zIDMgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdBzIBpzIBrdcyBX0FqZcyBX0nMgHPhurnMgWd1bl/hu4xq4buNzIFydcyBX+G7jGrhu43MgWLhu41f4bq4dGnMgF9BzIBiYcyBbeG6ucyBdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdBzIBpzIBrX0FqZcyBX0nMgHPhurnMgV/hu4xqcl/hu4xqYl/hurh0acyAX0HMgGJhzIEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnQcyAacyAX0FqX0nMgHNf4buMcl/hu4xiX+G6uHRfQcyAYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT8yAbmnMgCBuaV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhu4zMgGxhIG5pXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogXCJkZGRkIFvhu4xz4bq5zIAgdG/MgW4nYuG7jV0gW25pXSBMVFwiLFxuICAgICAgICAgICAgbGFzdERheTogJ1tBzIBuYSBuaV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvhu4xz4bq5zIAgdG/MgWzhu43MgV0gW25pXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ25pzIEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGvhu41qYcyBJyxcbiAgICAgICAgICAgIHM6ICdpzIBz4bq5anXMgSBhYXlhzIEgZGllJyxcbiAgICAgICAgICAgIHNzOiAnYWF5YcyBICVkJyxcbiAgICAgICAgICAgIG06ICdpzIBz4bq5anXMgSBrYW4nLFxuICAgICAgICAgICAgbW06ICdpzIBz4bq5anXMgSAlZCcsXG4gICAgICAgICAgICBoOiAnd2HMgWthdGkga2FuJyxcbiAgICAgICAgICAgIGhoOiAnd2HMgWthdGkgJWQnLFxuICAgICAgICAgICAgZDogJ+G7jWrhu43MgSBrYW4nLFxuICAgICAgICAgICAgZGQ6ICfhu41q4buNzIEgJWQnLFxuICAgICAgICAgICAgTTogJ29zdcyAIGthbicsXG4gICAgICAgICAgICBNTTogJ29zdcyAICVkJyxcbiAgICAgICAgICAgIHk6ICfhu41kdcyBbiBrYW4nLFxuICAgICAgICAgICAgeXk6ICfhu41kdcyBbiAlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC/hu41q4buNzIFcXHNcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6ICfhu41q4buNzIEgJWQnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4geW87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoQ2hpbmEpIFt6aC1jbl1cbi8vISBhdXRob3IgOiBzdXVwaWMgOiBodHRwczovL2dpdGh1Yi5jb20vc3V1cGljXG4vLyEgYXV0aG9yIDogWmVubyBaZW5nIDogaHR0cHM6Ly9naXRodWIuY29tL3plbm96ZW5nXG4vLyEgYXV0aG9yIDogdXUxMDkgOiBodHRwczovL2dpdGh1Yi5jb20vdXUxMDlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB6aENuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnemgtY24nLCB7XG4gICAgICAgIG1vbnRoczogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+aYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+WRqOaXpV/lkajkuIBf5ZGo5LqMX+WRqOS4iV/lkajlm5tf5ZGo5LqUX+WRqOWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVnlubRN5pyIROaXpUFo54K5bW3liIYnLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnlubRN5pyIROaXpWRkZGRBaOeCuW1t5YiGJyxcbiAgICAgICAgICAgIGw6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBsbGw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuIvljYgnIHx8IG1lcmlkaWVtID09PSAn5pma5LiKJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vICfkuK3ljYgnXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb5LuK5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW+S4i11kZGRMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5pysXWRkZExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1vmmKjlpKldTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53ZWVrKCkgIT09IG5vdy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5LiKXWRkZExUJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vmnKxdZGRkTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzlkagpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+WRqCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+WQjicsXG4gICAgICAgICAgICBwYXN0OiAnJXPliY0nLFxuICAgICAgICAgICAgczogJ+WHoOenkicsXG4gICAgICAgICAgICBzczogJyVkIOenkicsXG4gICAgICAgICAgICBtOiAnMSDliIbpkp8nLFxuICAgICAgICAgICAgbW06ICclZCDliIbpkp8nLFxuICAgICAgICAgICAgaDogJzEg5bCP5pe2JyxcbiAgICAgICAgICAgIGhoOiAnJWQg5bCP5pe2JyxcbiAgICAgICAgICAgIGQ6ICcxIOWkqScsXG4gICAgICAgICAgICBkZDogJyVkIOWkqScsXG4gICAgICAgICAgICB3OiAnMSDlkagnLFxuICAgICAgICAgICAgd3c6ICclZCDlkagnLFxuICAgICAgICAgICAgTTogJzEg5Liq5pyIJyxcbiAgICAgICAgICAgIE1NOiAnJWQg5Liq5pyIJyxcbiAgICAgICAgICAgIHk6ICcxIOW5tCcsXG4gICAgICAgICAgICB5eTogJyVkIOW5tCcsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIC8vIEdCL1QgNzQwOC0xOTk044CK5pWw5o2u5YWD5ZKM5Lqk5o2i5qC85byPwrfkv6Hmga/kuqTmjaLCt+aXpeacn+WSjOaXtumXtOihqOekuuazleOAi+S4jklTTyA4NjAxOjE5ODjnrYnmlYhcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB6aENuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENoaW5lc2UgKEhvbmcgS29uZykgW3poLWhrXVxuLy8hIGF1dGhvciA6IEJlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZW4tbGluXG4vLyEgYXV0aG9yIDogQ2hyaXMgTGFtIDogaHR0cHM6Ly9naXRodWIuY29tL2hlaGFjaHJpc1xuLy8hIGF1dGhvciA6IEtvbnN0YW50aW4gOiBodHRwczovL2dpdGh1Yi5jb20vc2tmZFxuLy8hIGF1dGhvciA6IEFudGhvbnkgOiBodHRwczovL2dpdGh1Yi5jb20vYW50aG9ueWxhdVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHpoSGsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1oaycsIHtcbiAgICAgICAgbW9udGhzOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBsbGw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuK3ljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WHjOaZqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgOTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfml6nkuIonO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4iuWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtID09PSAxMjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb5LuK5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+S4i11kZGRkTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vmmKjlpKldTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+mAsSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+W+jCcsXG4gICAgICAgICAgICBwYXN0OiAnJXPliY0nLFxuICAgICAgICAgICAgczogJ+W5vuenkicsXG4gICAgICAgICAgICBzczogJyVkIOenkicsXG4gICAgICAgICAgICBtOiAnMSDliIbpkJgnLFxuICAgICAgICAgICAgbW06ICclZCDliIbpkJgnLFxuICAgICAgICAgICAgaDogJzEg5bCP5pmCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg5bCP5pmCJyxcbiAgICAgICAgICAgIGQ6ICcxIOWkqScsXG4gICAgICAgICAgICBkZDogJyVkIOWkqScsXG4gICAgICAgICAgICBNOiAnMSDlgIvmnIgnLFxuICAgICAgICAgICAgTU06ICclZCDlgIvmnIgnLFxuICAgICAgICAgICAgeTogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5OiAnJWQg5bm0JyxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB6aEhrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENoaW5lc2UgKE1hY2F1KSBbemgtbW9dXG4vLyEgYXV0aG9yIDogQmVuIDogaHR0cHM6Ly9naXRodWIuY29tL2Jlbi1saW5cbi8vISBhdXRob3IgOiBDaHJpcyBMYW0gOiBodHRwczovL2dpdGh1Yi5jb20vaGVoYWNocmlzXG4vLyEgYXV0aG9yIDogVGFuIFl1YW5ob25nIDogaHR0cHM6Ly9naXRodWIuY29tL2xlMHRhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHpoTW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1tbycsIHtcbiAgICAgICAgbW9udGhzOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdEL00vWVlZWScsXG4gICAgICAgICAgICBsbDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBsbGw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuK3ljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WHjOaZqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgOTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfml6nkuIonO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4iuWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Lit5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxODAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIvljYgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aZmuS4iic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+S7iuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vmmI7lpKldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+S4i11kZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb5pio5aSpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vkuIpdZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+mAsSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+WFpycsXG4gICAgICAgICAgICBwYXN0OiAnJXPliY0nLFxuICAgICAgICAgICAgczogJ+W5vuenkicsXG4gICAgICAgICAgICBzczogJyVkIOenkicsXG4gICAgICAgICAgICBtOiAnMSDliIbpkJgnLFxuICAgICAgICAgICAgbW06ICclZCDliIbpkJgnLFxuICAgICAgICAgICAgaDogJzEg5bCP5pmCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg5bCP5pmCJyxcbiAgICAgICAgICAgIGQ6ICcxIOWkqScsXG4gICAgICAgICAgICBkZDogJyVkIOWkqScsXG4gICAgICAgICAgICBNOiAnMSDlgIvmnIgnLFxuICAgICAgICAgICAgTU06ICclZCDlgIvmnIgnLFxuICAgICAgICAgICAgeTogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5OiAnJWQg5bm0JyxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB6aE1vO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENoaW5lc2UgKFRhaXdhbikgW3poLXR3XVxuLy8hIGF1dGhvciA6IEJlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZW4tbGluXG4vLyEgYXV0aG9yIDogQ2hyaXMgTGFtIDogaHR0cHM6Ly9naXRodWIuY29tL2hlaGFjaHJpc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHpoVHcgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC10dycsIHtcbiAgICAgICAgbW9udGhzOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBsbGw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuK3ljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WHjOaZqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgOTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfml6nkuIonO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4iuWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Lit5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxODAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIvljYgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aZmuS4iic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+S7iuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vmmI7lpKldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+S4i11kZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb5pio5aSpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vkuIpdZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+mAsSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+W+jCcsXG4gICAgICAgICAgICBwYXN0OiAnJXPliY0nLFxuICAgICAgICAgICAgczogJ+W5vuenkicsXG4gICAgICAgICAgICBzczogJyVkIOenkicsXG4gICAgICAgICAgICBtOiAnMSDliIbpkJgnLFxuICAgICAgICAgICAgbW06ICclZCDliIbpkJgnLFxuICAgICAgICAgICAgaDogJzEg5bCP5pmCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg5bCP5pmCJyxcbiAgICAgICAgICAgIGQ6ICcxIOWkqScsXG4gICAgICAgICAgICBkZDogJyVkIOWkqScsXG4gICAgICAgICAgICBNOiAnMSDlgIvmnIgnLFxuICAgICAgICAgICAgTU06ICclZCDlgIvmnIgnLFxuICAgICAgICAgICAgeTogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5OiAnJWQg5bm0JyxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB6aFR3O1xuXG59KSkpO1xuIiwiLy8gLmRpcm5hbWUsIC5iYXNlbmFtZSwgYW5kIC5leHRuYW1lIG1ldGhvZHMgYXJlIGV4dHJhY3RlZCBmcm9tIE5vZGUuanMgdjguMTEuMSxcbi8vIGJhY2twb3J0ZWQgYW5kIHRyYW5zcGxpdGVkIHdpdGggQmFiZWwsIHdpdGggYmFja3dhcmRzLWNvbXBhdCBmaXhlc1xuXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6IHByb2Nlc3MuY3dkKCk7XG5cbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG59O1xuXG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59O1xuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7XG5cbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XG4gIH1cblxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoJy8nKSk7XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgdmFyIHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59O1xuXG5leHBvcnRzLnNlcCA9ICcvJztcbmV4cG9ydHMuZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnRzLmRpcm5hbWUgPSBmdW5jdGlvbiAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG4gIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICB2YXIgaGFzUm9vdCA9IGNvZGUgPT09IDQ3IC8qLyovO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xuICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIGhhc1Jvb3QgPyAnLycgOiAnLic7XG4gIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkge1xuICAgIC8vIHJldHVybiAnLy8nO1xuICAgIC8vIEJhY2t3YXJkcy1jb21wYXQgZml4OlxuICAgIHJldHVybiAnLyc7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGJhc2VuYW1lKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcblxuICB2YXIgc3RhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICBlbmQgPSBpICsgMTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuICcnO1xuICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbn1cblxuLy8gVXNlcyBhIG1peGVkIGFwcHJvYWNoIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSwgYXMgZXh0IGJlaGF2aW9yIGNoYW5nZWRcbi8vIGluIG5ldyBOb2RlLmpzIHZlcnNpb25zLCBzbyBvbmx5IGJhc2VuYW1lKCkgYWJvdmUgaXMgYmFja3BvcnRlZCBoZXJlXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24gKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IGJhc2VuYW1lKHBhdGgpO1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcbiAgdmFyIHN0YXJ0RG90ID0gLTE7XG4gIHZhciBzdGFydFBhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gIHZhciBwcmVEb3RTdGF0ZSA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBleHRlbnNpb25cbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgZW5kID0gaSArIDE7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA0NiAvKi4qLykge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSlcbiAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKVxuICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0RG90ICE9PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICBwcmVEb3RTdGF0ZSA9IC0xO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGFydERvdCA9PT0gLTEgfHwgZW5kID09PSAtMSB8fFxuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXG4gICAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFscGhhYmV0aWNhbFxuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYWxwaGFiZXRpY2FsLlxuZnVuY3Rpb24gYWxwaGFiZXRpY2FsKGNoYXJhY3Rlcikge1xuICB2YXIgY29kZSA9IHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdzdHJpbmcnID8gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgOiBjaGFyYWN0ZXJcblxuICByZXR1cm4gKFxuICAgIChjb2RlID49IDk3ICYmIGNvZGUgPD0gMTIyKSAvKiBhLXogKi8gfHxcbiAgICAoY29kZSA+PSA2NSAmJiBjb2RlIDw9IDkwKSAvKiBBLVogKi9cbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcG9zaXRpb246IHRydWUsXG4gIGdmbTogdHJ1ZSxcbiAgY29tbW9ubWFyazogZmFsc2UsXG4gIGZvb3Rub3RlczogZmFsc2UsXG4gIHBlZGFudGljOiBmYWxzZSxcbiAgYmxvY2tzOiByZXF1aXJlKCcuL2Jsb2NrLWVsZW1lbnRzLmpzb24nKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBpbmRlbnRhdGlvbjtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMsIGFuZCB0aGVpciBjb2x1bW4gbGVuZ3RoLFxuICogd2hpY2ggY2FuIGJlIHVzZWQgYXMgaW5kZW50YXRpb24uICovXG52YXIgY2hhcmFjdGVycyA9IHsnICc6IDEsICdcXHQnOiA0fTtcblxuLyogR2V0cyBpbmRlbnRhdGlvbiBpbmZvcm1hdGlvbiBmb3IgYSBsaW5lLiAqL1xuZnVuY3Rpb24gaW5kZW50YXRpb24odmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGluZGVudCA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICB2YXIgc3RvcHMgPSB7fTtcbiAgdmFyIHNpemU7XG5cbiAgd2hpbGUgKGNoYXJhY3RlciBpbiBjaGFyYWN0ZXJzKSB7XG4gICAgc2l6ZSA9IGNoYXJhY3RlcnNbY2hhcmFjdGVyXTtcblxuICAgIGluZGVudCArPSBzaXplO1xuXG4gICAgaWYgKHNpemUgPiAxKSB7XG4gICAgICBpbmRlbnQgPSBNYXRoLmZsb29yKGluZGVudCAvIHNpemUpICogc2l6ZTtcbiAgICB9XG5cbiAgICBzdG9wc1tpbmRlbnRdID0gaW5kZXg7XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gIH1cblxuICByZXR1cm4ge2luZGVudDogaW5kZW50LCBzdG9wczogc3RvcHN9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXR0cmlidXRlTmFtZSA9ICdbYS16QS1aXzpdW2EtekEtWjAtOTouXy1dKic7XG52YXIgdW5xdW90ZWQgPSAnW15cIlxcJz08PmBcXFxcdTAwMDAtXFxcXHUwMDIwXSsnO1xudmFyIHNpbmdsZVF1b3RlZCA9ICdcXCdbXlxcJ10qXFwnJztcbnZhciBkb3VibGVRdW90ZWQgPSAnXCJbXlwiXSpcIic7XG52YXIgYXR0cmlidXRlVmFsdWUgPSAnKD86JyArIHVucXVvdGVkICsgJ3wnICsgc2luZ2xlUXVvdGVkICsgJ3wnICsgZG91YmxlUXVvdGVkICsgJyknO1xudmFyIGF0dHJpYnV0ZSA9ICcoPzpcXFxccysnICsgYXR0cmlidXRlTmFtZSArICcoPzpcXFxccyo9XFxcXHMqJyArIGF0dHJpYnV0ZVZhbHVlICsgJyk/KSc7XG52YXIgb3BlblRhZyA9ICc8W0EtWmEtel1bQS1aYS16MC05XFxcXC1dKicgKyBhdHRyaWJ1dGUgKyAnKlxcXFxzKlxcXFwvPz4nO1xudmFyIGNsb3NlVGFnID0gJzxcXFxcL1tBLVphLXpdW0EtWmEtejAtOVxcXFwtXSpcXFxccyo+JztcbnZhciBjb21tZW50ID0gJzwhLS0tLT58PCEtLSg/Oi0/W14+LV0pKD86LT9bXi1dKSotLT4nO1xudmFyIHByb2Nlc3NpbmcgPSAnPFs/XS4qP1s/XT4nO1xudmFyIGRlY2xhcmF0aW9uID0gJzwhW0EtWmEtel0rXFxcXHMrW14+XSo+JztcbnZhciBjZGF0YSA9ICc8IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT4nO1xuXG5leHBvcnRzLm9wZW5DbG9zZVRhZyA9IG5ldyBSZWdFeHAoJ14oPzonICsgb3BlblRhZyArICd8JyArIGNsb3NlVGFnICsgJyknKTtcblxuZXhwb3J0cy50YWcgPSBuZXcgUmVnRXhwKCdeKD86JyArXG4gIG9wZW5UYWcgKyAnfCcgK1xuICBjbG9zZVRhZyArICd8JyArXG4gIGNvbW1lbnQgKyAnfCcgK1xuICBwcm9jZXNzaW5nICsgJ3wnICtcbiAgZGVjbGFyYXRpb24gKyAnfCcgK1xuICBjZGF0YSArXG4nKScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJzwnLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxpbmsgPSB2YWx1ZS5pbmRleE9mKCdbJywgZnJvbUluZGV4KTtcbiAgdmFyIGltYWdlID0gdmFsdWUuaW5kZXhPZignIVsnLCBmcm9tSW5kZXgpO1xuXG4gIGlmIChpbWFnZSA9PT0gLTEpIHtcbiAgICByZXR1cm4gbGluaztcbiAgfVxuXG4gIC8qIExpbmsgY2FuIG5ldmVyIGJlIGAtMWAgaWYgYW4gaW1hZ2UgaXMgZm91bmQsIHNvIHdlIGRvbuKAmXQgbmVlZFxuICAgKiB0byBjaGVjayBmb3IgdGhhdCA6KSAqL1xuICByZXR1cm4gbGluayA8IGltYWdlID8gbGluayA6IGltYWdlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHtcbiAgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2ssIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoXCIuL3RvUHJvcGVydHlLZXkuanNcIik7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyhlLCByKSB7XG4gIGZvciAodmFyIHQgPSAwOyB0IDwgci5sZW5ndGg7IHQrKykge1xuICAgIHZhciBvID0gclt0XTtcbiAgICBvLmVudW1lcmFibGUgPSBvLmVudW1lcmFibGUgfHwgITEsIG8uY29uZmlndXJhYmxlID0gITAsIFwidmFsdWVcIiBpbiBvICYmIChvLndyaXRhYmxlID0gITApLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdG9Qcm9wZXJ0eUtleShvLmtleSksIG8pO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoZSwgciwgdCkge1xuICByZXR1cm4gciAmJiBfZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSwgciksIHQgJiYgX2RlZmluZVByb3BlcnRpZXMoZSwgdCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3MsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCIpO1xuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgZSkge1xuICBpZiAoZSAmJiAoXCJvYmplY3RcIiA9PSBfdHlwZW9mKGUpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZSkpIHJldHVybiBlO1xuICBpZiAodm9pZCAwICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vc2V0UHJvdG90eXBlT2YuanNcIik7XG5mdW5jdGlvbiBfaW5oZXJpdHModCwgZSkge1xuICBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlICYmIG51bGwgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGUgJiYgZS5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHQsXG4gICAgICB3cml0YWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfVxuICB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogITFcbiAgfSksIGUgJiYgc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIihmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyAobW9kdWxlWydleHBvcnRzJ10gPSBmYWN0b3J5KCkpIDpcblx0XHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10gPyBkZWZpbmUoZmFjdG9yeSgpKSA6XG5cdFx0XHQod2luZG93WydzdHlsaXNSdWxlU2hlZXQnXSA9IGZhY3RvcnkoKSlcbn0oZnVuY3Rpb24gKCkge1xuXG5cdCd1c2Ugc3RyaWN0J1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5zZXJ0UnVsZSkge1xuXHRcdHZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nXG5cdFx0dmFyIG5lZWRsZSA9IGRlbGltaXRlcisnfSdcblxuXHRcdGZ1bmN0aW9uIHRvU2hlZXQgKGJsb2NrKSB7XG5cdFx0XHRpZiAoYmxvY2spXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aW5zZXJ0UnVsZShibG9jayArICd9Jylcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcnVsZVNoZWV0IChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBucywgZGVwdGgsIGF0KSB7XG5cdFx0XHRzd2l0Y2ggKGNvbnRleHQpIHtcblx0XHRcdFx0Ly8gcHJvcGVydHlcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdC8vIEBpbXBvcnRcblx0XHRcdFx0XHRpZiAoZGVwdGggPT09IDAgJiYgY29udGVudC5jaGFyQ29kZUF0KDApID09PSA2NClcblx0XHRcdFx0XHRcdHJldHVybiBpbnNlcnRSdWxlKGNvbnRlbnQrJzsnKSwgJydcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHQvLyBzZWxlY3RvclxuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0aWYgKG5zID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnQgKyBkZWxpbWl0ZXJcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHQvLyBhdC1ydWxlXG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRzd2l0Y2ggKG5zKSB7XG5cdFx0XHRcdFx0XHQvLyBAZm9udC1mYWNlLCBAcGFnZVxuXHRcdFx0XHRcdFx0Y2FzZSAxMDI6XG5cdFx0XHRcdFx0XHRjYXNlIDExMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGluc2VydFJ1bGUoc2VsZWN0b3JzWzBdK2NvbnRlbnQpLCAnJ1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnQgKyAoYXQgPT09IDAgPyBkZWxpbWl0ZXIgOiAnJylcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGNhc2UgLTI6XG5cdFx0XHRcdFx0Y29udGVudC5zcGxpdChuZWVkbGUpLmZvckVhY2godG9TaGVldClcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pKVxuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbmNsYXNzIEFib3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCdUaHJvdHRsZWQgZnVuY3Rpb24gYWJvcnRlZCcpO1xuXHRcdHRoaXMubmFtZSA9ICdBYm9ydEVycm9yJztcblx0fVxufVxuXG5jb25zdCBwVGhyb3R0bGUgPSAoe2xpbWl0LCBpbnRlcnZhbCwgc3RyaWN0fSkgPT4ge1xuXHRpZiAoIU51bWJlci5pc0Zpbml0ZShsaW1pdCkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgbGltaXRgIHRvIGJlIGEgZmluaXRlIG51bWJlcicpO1xuXHR9XG5cblx0aWYgKCFOdW1iZXIuaXNGaW5pdGUoaW50ZXJ2YWwpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGludGVydmFsYCB0byBiZSBhIGZpbml0ZSBudW1iZXInKTtcblx0fVxuXG5cdGNvbnN0IHF1ZXVlID0gbmV3IE1hcCgpO1xuXG5cdGxldCBjdXJyZW50VGljayA9IDA7XG5cdGxldCBhY3RpdmVDb3VudCA9IDA7XG5cblx0ZnVuY3Rpb24gd2luZG93ZWREZWxheSgpIHtcblx0XHRjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG5cdFx0aWYgKChub3cgLSBjdXJyZW50VGljaykgPiBpbnRlcnZhbCkge1xuXHRcdFx0YWN0aXZlQ291bnQgPSAxO1xuXHRcdFx0Y3VycmVudFRpY2sgPSBub3c7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRpZiAoYWN0aXZlQ291bnQgPCBsaW1pdCkge1xuXHRcdFx0YWN0aXZlQ291bnQrKztcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VycmVudFRpY2sgKz0gaW50ZXJ2YWw7XG5cdFx0XHRhY3RpdmVDb3VudCA9IDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGN1cnJlbnRUaWNrIC0gbm93O1xuXHR9XG5cblx0Y29uc3Qgc3RyaWN0VGlja3MgPSBbXTtcblxuXHRmdW5jdGlvbiBzdHJpY3REZWxheSgpIHtcblx0XHRjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG5cdFx0aWYgKHN0cmljdFRpY2tzLmxlbmd0aCA8IGxpbWl0KSB7XG5cdFx0XHRzdHJpY3RUaWNrcy5wdXNoKG5vdyk7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRjb25zdCBlYXJsaWVzdFRpbWUgPSBzdHJpY3RUaWNrcy5zaGlmdCgpICsgaW50ZXJ2YWw7XG5cblx0XHRpZiAobm93ID49IGVhcmxpZXN0VGltZSkge1xuXHRcdFx0c3RyaWN0VGlja3MucHVzaChub3cpO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0c3RyaWN0VGlja3MucHVzaChlYXJsaWVzdFRpbWUpO1xuXHRcdHJldHVybiBlYXJsaWVzdFRpbWUgLSBub3c7XG5cdH1cblxuXHRjb25zdCBnZXREZWxheSA9IHN0cmljdCA/IHN0cmljdERlbGF5IDogd2luZG93ZWREZWxheTtcblxuXHRyZXR1cm4gZnVuY3Rpb25fID0+IHtcblx0XHRjb25zdCB0aHJvdHRsZWQgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdFx0aWYgKCF0aHJvdHRsZWQuaXNFbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybiAoYXN5bmMgKCkgPT4gZnVuY3Rpb25fLmFwcGx5KHRoaXMsIGFyZ3MpKSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgdGltZW91dDtcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGV4ZWN1dGUgPSAoKSA9PiB7XG5cdFx0XHRcdFx0cmVzb2x2ZShmdW5jdGlvbl8uYXBwbHkodGhpcywgYXJncykpO1xuXHRcdFx0XHRcdHF1ZXVlLmRlbGV0ZSh0aW1lb3V0KTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aW1lb3V0ID0gc2V0VGltZW91dChleGVjdXRlLCBnZXREZWxheSgpKTtcblxuXHRcdFx0XHRxdWV1ZS5zZXQodGltZW91dCwgcmVqZWN0KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR0aHJvdHRsZWQuYWJvcnQgPSAoKSA9PiB7XG5cdFx0XHRmb3IgKGNvbnN0IHRpbWVvdXQgb2YgcXVldWUua2V5cygpKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHRcdFx0cXVldWUuZ2V0KHRpbWVvdXQpKG5ldyBBYm9ydEVycm9yKCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRxdWV1ZS5jbGVhcigpO1xuXHRcdFx0c3RyaWN0VGlja3Muc3BsaWNlKDAsIHN0cmljdFRpY2tzLmxlbmd0aCk7XG5cdFx0fTtcblxuXHRcdHRocm90dGxlZC5pc0VuYWJsZWQgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRocm90dGxlZDtcblx0fTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcFRocm90dGxlO1xubW9kdWxlLmV4cG9ydHMuQWJvcnRFcnJvciA9IEFib3J0RXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xudmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlcbn07XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdpZnlcbmV4cG9ydHMuZ2V0U2VyaWFsaXplID0gc2VyaWFsaXplclxuXG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqLCByZXBsYWNlciwgc3BhY2VzLCBjeWNsZVJlcGxhY2VyKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIHNlcmlhbGl6ZXIocmVwbGFjZXIsIGN5Y2xlUmVwbGFjZXIpLCBzcGFjZXMpXG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZXIocmVwbGFjZXIsIGN5Y2xlUmVwbGFjZXIpIHtcbiAgdmFyIHN0YWNrID0gW10sIGtleXMgPSBbXVxuXG4gIGlmIChjeWNsZVJlcGxhY2VyID09IG51bGwpIGN5Y2xlUmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgaWYgKHN0YWNrWzBdID09PSB2YWx1ZSkgcmV0dXJuIFwiW0NpcmN1bGFyIH5dXCJcbiAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfi5cIiArIGtleXMuc2xpY2UoMCwgc3RhY2suaW5kZXhPZih2YWx1ZSkpLmpvaW4oXCIuXCIpICsgXCJdXCJcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciB0aGlzUG9zID0gc3RhY2suaW5kZXhPZih0aGlzKVxuICAgICAgfnRoaXNQb3MgPyBzdGFjay5zcGxpY2UodGhpc1BvcyArIDEpIDogc3RhY2sucHVzaCh0aGlzKVxuICAgICAgfnRoaXNQb3MgPyBrZXlzLnNwbGljZSh0aGlzUG9zLCBJbmZpbml0eSwga2V5KSA6IGtleXMucHVzaChrZXkpXG4gICAgICBpZiAofnN0YWNrLmluZGV4T2YodmFsdWUpKSB2YWx1ZSA9IGN5Y2xlUmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKVxuICAgIH1cbiAgICBlbHNlIHN0YWNrLnB1c2godmFsdWUpXG5cbiAgICByZXR1cm4gcmVwbGFjZXIgPT0gbnVsbCA/IHZhbHVlIDogcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG5cbnZhciB1bmlmaWVkID0gcmVxdWlyZSgndW5pZmllZCcpO1xuXG52YXIgcGFyc2UgPSByZXF1aXJlKCdyZW1hcmstcGFyc2UnKTtcblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIGFkZExpc3RNZXRhZGF0YSA9IHJlcXVpcmUoJ21kYXN0LWFkZC1saXN0LW1ldGFkYXRhJyk7XG5cbnZhciBuYWl2ZUh0bWwgPSByZXF1aXJlKCcuL3BsdWdpbnMvbmFpdmUtaHRtbCcpO1xuXG52YXIgZGlzYWxsb3dOb2RlID0gcmVxdWlyZSgnLi9wbHVnaW5zL2Rpc2FsbG93LW5vZGUnKTtcblxudmFyIGFzdFRvUmVhY3QgPSByZXF1aXJlKCcuL2FzdC10by1yZWFjdCcpO1xuXG52YXIgd3JhcFRhYmxlUm93cyA9IHJlcXVpcmUoJy4vd3JhcC10YWJsZS1yb3dzJyk7XG5cbnZhciBnZXREZWZpbml0aW9ucyA9IHJlcXVpcmUoJy4vZ2V0LWRlZmluaXRpb25zJyk7XG5cbnZhciB1cmlUcmFuc2Zvcm1lciA9IHJlcXVpcmUoJy4vdXJpLXRyYW5zZm9ybWVyJyk7XG5cbnZhciBkZWZhdWx0UmVuZGVyZXJzID0gcmVxdWlyZSgnLi9yZW5kZXJlcnMnKTtcblxudmFyIHN5bWJvbHMgPSByZXF1aXJlKCcuL3N5bWJvbHMnKTtcblxudmFyIGFsbFR5cGVzID0gT2JqZWN0LmtleXMoZGVmYXVsdFJlbmRlcmVycyk7XG5cbnZhciBSZWFjdE1hcmtkb3duID0gZnVuY3Rpb24gUmVhY3RNYXJrZG93bihwcm9wcykge1xuICB2YXIgc3JjID0gcHJvcHMuc291cmNlIHx8IHByb3BzLmNoaWxkcmVuIHx8ICcnO1xuICB2YXIgcGFyc2VyT3B0aW9ucyA9IHByb3BzLnBhcnNlck9wdGlvbnM7XG5cbiAgaWYgKHByb3BzLmFsbG93ZWRUeXBlcyAmJiBwcm9wcy5kaXNhbGxvd2VkVHlwZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgb25lIG9mIGBhbGxvd2VkVHlwZXNgIGFuZCBgZGlzYWxsb3dlZFR5cGVzYCBzaG91bGQgYmUgZGVmaW5lZCcpO1xuICB9XG5cbiAgdmFyIHJlbmRlcmVycyA9IHh0ZW5kKGRlZmF1bHRSZW5kZXJlcnMsIHByb3BzLnJlbmRlcmVycyk7XG4gIHZhciBwbHVnaW5zID0gW1twYXJzZSwgcGFyc2VyT3B0aW9uc11dLmNvbmNhdChwcm9wcy5wbHVnaW5zIHx8IFtdKTtcbiAgdmFyIHBhcnNlciA9IHBsdWdpbnMucmVkdWNlKGFwcGx5UGFyc2VyUGx1Z2luLCB1bmlmaWVkKCkpO1xuICB2YXIgcmF3QXN0ID0gcGFyc2VyLnBhcnNlKHNyYyk7XG4gIHZhciByZW5kZXJQcm9wcyA9IHh0ZW5kKHByb3BzLCB7XG4gICAgcmVuZGVyZXJzOiByZW5kZXJlcnMsXG4gICAgZGVmaW5pdGlvbnM6IGdldERlZmluaXRpb25zKHJhd0FzdClcbiAgfSk7XG4gIHZhciBhc3RQbHVnaW5zID0gZGV0ZXJtaW5lQXN0UGx1Z2lucyhwcm9wcyk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zeW5jXG5cbiAgdmFyIHRyYW5zZm9ybWVkQXN0ID0gcGFyc2VyLnJ1blN5bmMocmF3QXN0KTtcbiAgdmFyIGFzdCA9IGFzdFBsdWdpbnMucmVkdWNlKGZ1bmN0aW9uIChub2RlLCBwbHVnaW4pIHtcbiAgICByZXR1cm4gcGx1Z2luKG5vZGUsIHJlbmRlclByb3BzKTtcbiAgfSwgdHJhbnNmb3JtZWRBc3QpO1xuICByZXR1cm4gYXN0VG9SZWFjdChhc3QsIHJlbmRlclByb3BzKTtcbn07XG5cbmZ1bmN0aW9uIGFwcGx5UGFyc2VyUGx1Z2luKHBhcnNlciwgcGx1Z2luKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHBsdWdpbikgPyBwYXJzZXIudXNlLmFwcGx5KHBhcnNlciwgX3RvQ29uc3VtYWJsZUFycmF5KHBsdWdpbikpIDogcGFyc2VyLnVzZShwbHVnaW4pO1xufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVBc3RQbHVnaW5zKHByb3BzKSB7XG4gIHZhciBwbHVnaW5zID0gW3dyYXBUYWJsZVJvd3MsIGFkZExpc3RNZXRhZGF0YSgpXTtcbiAgdmFyIGRpc2FsbG93ZWRUeXBlcyA9IHByb3BzLmRpc2FsbG93ZWRUeXBlcztcblxuICBpZiAocHJvcHMuYWxsb3dlZFR5cGVzKSB7XG4gICAgZGlzYWxsb3dlZFR5cGVzID0gYWxsVHlwZXMuZmlsdGVyKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gdHlwZSAhPT0gJ3Jvb3QnICYmIHByb3BzLmFsbG93ZWRUeXBlcy5pbmRleE9mKHR5cGUpID09PSAtMTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciByZW1vdmFsTWV0aG9kID0gcHJvcHMudW53cmFwRGlzYWxsb3dlZCA/ICd1bndyYXAnIDogJ3JlbW92ZSc7XG5cbiAgaWYgKGRpc2FsbG93ZWRUeXBlcyAmJiBkaXNhbGxvd2VkVHlwZXMubGVuZ3RoID4gMCkge1xuICAgIHBsdWdpbnMucHVzaChkaXNhbGxvd05vZGUub2ZUeXBlKGRpc2FsbG93ZWRUeXBlcywgcmVtb3ZhbE1ldGhvZCkpO1xuICB9XG5cbiAgaWYgKHByb3BzLmFsbG93Tm9kZSkge1xuICAgIHBsdWdpbnMucHVzaChkaXNhbGxvd05vZGUuaWZOb3RNYXRjaChwcm9wcy5hbGxvd05vZGUsIHJlbW92YWxNZXRob2QpKTtcbiAgfVxuXG4gIHZhciByZW5kZXJIdG1sID0gIXByb3BzLmVzY2FwZUh0bWwgJiYgIXByb3BzLnNraXBIdG1sO1xuICB2YXIgaGFzSHRtbFBhcnNlciA9IChwcm9wcy5hc3RQbHVnaW5zIHx8IFtdKS5zb21lKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIHBsdWdpbiA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyBpdGVtWzBdIDogaXRlbTtcbiAgICByZXR1cm4gcGx1Z2luLmlkZW50aXR5ID09PSBzeW1ib2xzLkh0bWxQYXJzZXI7XG4gIH0pO1xuXG4gIGlmIChyZW5kZXJIdG1sICYmICFoYXNIdG1sUGFyc2VyKSB7XG4gICAgcGx1Z2lucy5wdXNoKG5haXZlSHRtbCk7XG4gIH1cblxuICByZXR1cm4gcHJvcHMuYXN0UGx1Z2lucyA/IHBsdWdpbnMuY29uY2F0KHByb3BzLmFzdFBsdWdpbnMpIDogcGx1Z2lucztcbn1cblxuUmVhY3RNYXJrZG93bi5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlbmRlcmVyczoge30sXG4gIGVzY2FwZUh0bWw6IHRydWUsXG4gIHNraXBIdG1sOiBmYWxzZSxcbiAgc291cmNlUG9zOiBmYWxzZSxcbiAgcmF3U291cmNlUG9zOiBmYWxzZSxcbiAgdHJhbnNmb3JtTGlua1VyaTogdXJpVHJhbnNmb3JtZXIsXG4gIGFzdFBsdWdpbnM6IFtdLFxuICBwbHVnaW5zOiBbXSxcbiAgcGFyc2VyT3B0aW9uczoge31cbn07XG5SZWFjdE1hcmtkb3duLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzb3VyY2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzb3VyY2VQb3M6IFByb3BUeXBlcy5ib29sLFxuICByYXdTb3VyY2VQb3M6IFByb3BUeXBlcy5ib29sLFxuICBlc2NhcGVIdG1sOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2tpcEh0bWw6IFByb3BUeXBlcy5ib29sLFxuICBhbGxvd05vZGU6IFByb3BUeXBlcy5mdW5jLFxuICBhbGxvd2VkVHlwZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihhbGxUeXBlcykpLFxuICBkaXNhbGxvd2VkVHlwZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihhbGxUeXBlcykpLFxuICB0cmFuc2Zvcm1MaW5rVXJpOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgbGlua1RhcmdldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgdHJhbnNmb3JtSW1hZ2VVcmk6IFByb3BUeXBlcy5mdW5jLFxuICBhc3RQbHVnaW5zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuZnVuYyksXG4gIHVud3JhcERpc2FsbG93ZWQ6IFByb3BUeXBlcy5ib29sLFxuICByZW5kZXJlcnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIHBsdWdpbnM6IFByb3BUeXBlcy5hcnJheSxcbiAgcGFyc2VyT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdFxufTtcblJlYWN0TWFya2Rvd24udHlwZXMgPSBhbGxUeXBlcztcblJlYWN0TWFya2Rvd24ucmVuZGVyZXJzID0gZGVmYXVsdFJlbmRlcmVycztcblJlYWN0TWFya2Rvd24udXJpVHJhbnNmb3JtZXIgPSB1cmlUcmFuc2Zvcm1lcjtcbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNYXJrZG93bjsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsIi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBvYmplY3QgdHlwZSBvZiB0aGUgZ2l2ZW4gcGF5bG9hZFxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGdldFR5cGUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXlsb2FkKS5zbGljZSg4LCAtMSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyB1bmRlZmluZWRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHVuZGVmaW5lZH1cclxuICovXHJcbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnVW5kZWZpbmVkJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIG51bGxcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIG51bGx9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc051bGwocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdOdWxsJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgKGV4Y2x1ZGluZyBzcGVjaWFsIGNsYXNzZXMgb3Igb2JqZWN0cyB3aXRoIG90aGVyIHByb3RvdHlwZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBQbGFpbk9iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QocGF5bG9hZCkge1xyXG4gICAgaWYgKGdldFR5cGUocGF5bG9hZCkgIT09ICdPYmplY3QnKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiBwYXlsb2FkLmNvbnN0cnVjdG9yID09PSBPYmplY3QgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHBheWxvYWQpID09PSBPYmplY3QucHJvdG90eXBlO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdCAoZXhjbHVkaW5nIHNwZWNpYWwgY2xhc3NlcyBvciBvYmplY3RzIHdpdGggb3RoZXIgcHJvdG90eXBlcylcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFBsYWluT2JqZWN0fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNPYmplY3QocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIGFuIGVtcHR5IG9iamVjdCAoZXhjbHVkaW5nIHNwZWNpYWwgY2xhc3NlcyBvciBvYmplY3RzIHdpdGggb3RoZXIgcHJvdG90eXBlcylcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHsgW0sgaW4gYW55XTogbmV2ZXIgfX1cclxuICovXHJcbmZ1bmN0aW9uIGlzRW1wdHlPYmplY3QocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QocGF5bG9hZCkgJiYgT2JqZWN0LmtleXMocGF5bG9hZCkubGVuZ3RoID09PSAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBhbiBlbXB0eSBvYmplY3QgKGV4Y2x1ZGluZyBzcGVjaWFsIGNsYXNzZXMgb3Igb2JqZWN0cyB3aXRoIG90aGVyIHByb3RvdHlwZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBQbGFpbk9iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGlzRnVsbE9iamVjdChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdChwYXlsb2FkKSAmJiBPYmplY3Qua2V5cyhwYXlsb2FkKS5sZW5ndGggPiAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gYW55IGtpbmQgb2Ygb2JqZWN0IChpbmNsdWRpbmcgc3BlY2lhbCBjbGFzc2VzIG9yIG9iamVjdHMgd2l0aCBkaWZmZXJlbnQgcHJvdG90eXBlcylcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFBsYWluT2JqZWN0fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNBbnlPYmplY3QocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdPYmplY3QnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gb2JqZWN0IGxpa2UgYSB0eXBlIHBhc3NlZCBpbiA8ID5cclxuICpcclxuICogVXNhZ2U6IGlzT2JqZWN0TGlrZTx7aWQ6IGFueX0+KHBheWxvYWQpIC8vIHdpbGwgbWFrZSBzdXJlIGl0J3MgYW4gb2JqZWN0IGFuZCBoYXMgYW4gYGlkYCBwcm9wLlxyXG4gKlxyXG4gKiBAdGVtcGxhdGUgVCB0aGlzIG11c3QgYmUgcGFzc2VkIGluIDwgPlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgVH1cclxuICovXHJcbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gaXNBbnlPYmplY3QocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIGZ1bmN0aW9uIChyZWd1bGFyIG9yIGFzeW5jKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgQW55RnVuY3Rpb259XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgIHJldHVybiB0eXBlb2YgcGF5bG9hZCA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSB7YW55fSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIGFueVtdfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNBcnJheShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ0FycmF5JztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCAxIGl0ZW1cclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIGFueVtdfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNGdWxsQXJyYXkocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzQXJyYXkocGF5bG9hZCkgJiYgcGF5bG9hZC5sZW5ndGggPiAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBhbiBlbXB0eSBhcnJheVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgW119XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VtcHR5QXJyYXkocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzQXJyYXkocGF5bG9hZCkgJiYgcGF5bG9hZC5sZW5ndGggPT09IDA7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIHN0cmluZ1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgc3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTdHJpbmcocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdTdHJpbmcnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBzdHJpbmcsIEJVVCByZXR1cm5zIGZhbHNlIGZvciAnJ1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgc3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNGdWxsU3RyaW5nKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBpc1N0cmluZyhwYXlsb2FkKSAmJiBwYXlsb2FkICE9PSAnJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzICcnXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBzdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VtcHR5U3RyaW5nKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBwYXlsb2FkID09PSAnJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgbnVtYmVyIChidXQgbm90IE5hTilcclxuICpcclxuICogVGhpcyB3aWxsIHJldHVybiBgZmFsc2VgIGZvciBgTmFOYCEhXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc051bWJlcihwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ051bWJlcicgJiYgIWlzTmFOKHBheWxvYWQpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBib29sZWFuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBib29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNCb29sZWFuKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnQm9vbGVhbic7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiAoUmVnRXhwKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgUmVnRXhwfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNSZWdFeHAocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdSZWdFeHAnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBNYXBcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIE1hcDxhbnksIGFueT59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc01hcChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ01hcCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIFdlYWtNYXBcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFdlYWtNYXA8YW55LCBhbnk+fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNXZWFrTWFwKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnV2Vha01hcCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIFNldFxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgU2V0PGFueT59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1NldChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ1NldCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIFdlYWtTZXRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFdlYWtTZXQ8YW55Pn1cclxuICovXHJcbmZ1bmN0aW9uIGlzV2Vha1NldChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ1dlYWtTZXQnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBTeW1ib2xcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHN5bWJvbH1cclxuICovXHJcbmZ1bmN0aW9uIGlzU3ltYm9sKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnU3ltYm9sJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgRGF0ZSwgYW5kIHRoYXQgdGhlIGRhdGUgaXMgdmFsaWRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIERhdGV9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0RhdGUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdEYXRlJyAmJiAhaXNOYU4ocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIEJsb2JcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIEJsb2J9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Jsb2IocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdCbG9iJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgRmlsZVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgRmlsZX1cclxuICovXHJcbmZ1bmN0aW9uIGlzRmlsZShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ0ZpbGUnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBQcm9taXNlXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBQcm9taXNlPGFueT59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1Byb21pc2UocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdQcm9taXNlJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIEVycm9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBFcnJvcn1cclxuICovXHJcbmZ1bmN0aW9uIGlzRXJyb3IocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdFcnJvcic7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBsaXRlcmFsbHkgdGhlIHZhbHVlIGBOYU5gIChpdCdzIGBOYU5gIGFuZCBhbHNvIGEgYG51bWJlcmApXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyB0eXBlb2YgTmFOfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNOYU5WYWx1ZShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ051bWJlcicgJiYgaXNOYU4ocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIHByaW1pdGl2ZSB0eXBlIChlZy4gQm9vbGVhbiB8IE51bGwgfCBVbmRlZmluZWQgfCBOdW1iZXIgfCBTdHJpbmcgfCBTeW1ib2wpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7KHBheWxvYWQgaXMgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQgfCBudW1iZXIgfCBzdHJpbmcgfCBzeW1ib2wpfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNQcmltaXRpdmUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIChpc0Jvb2xlYW4ocGF5bG9hZCkgfHxcclxuICAgICAgICBpc051bGwocGF5bG9hZCkgfHxcclxuICAgICAgICBpc1VuZGVmaW5lZChwYXlsb2FkKSB8fFxyXG4gICAgICAgIGlzTnVtYmVyKHBheWxvYWQpIHx8XHJcbiAgICAgICAgaXNTdHJpbmcocGF5bG9hZCkgfHxcclxuICAgICAgICBpc1N5bWJvbChwYXlsb2FkKSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIG51bGwgb3IgdW5kZWZpbmVkXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7KHBheWxvYWQgaXMgbnVsbCB8IHVuZGVmaW5lZCl9XHJcbiAqL1xyXG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSBpc09uZU9mKGlzTnVsbCwgaXNVbmRlZmluZWQpO1xyXG5mdW5jdGlvbiBpc09uZU9mKGEsIGIsIGMsIGQsIGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gYSh2YWx1ZSkgfHwgYih2YWx1ZSkgfHwgKCEhYyAmJiBjKHZhbHVlKSkgfHwgKCEhZCAmJiBkKHZhbHVlKSkgfHwgKCEhZSAmJiBlKHZhbHVlKSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBEb2VzIGEgZ2VuZXJpYyBjaGVjayB0byBjaGVjayB0aGF0IHRoZSBnaXZlbiBwYXlsb2FkIGlzIG9mIGEgZ2l2ZW4gdHlwZS5cclxuICogSW4gY2FzZXMgbGlrZSBOdW1iZXIsIGl0IHdpbGwgcmV0dXJuIHRydWUgZm9yIE5hTiBhcyBOYU4gaXMgYSBOdW1iZXIgKHRoYW5rcyBqYXZhc2NyaXB0ISk7XHJcbiAqIEl0IHdpbGwsIGhvd2V2ZXIsIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBvYmplY3QgYW5kIG51bGxcclxuICpcclxuICogQHRlbXBsYXRlIFRcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEBwYXJhbSB7VH0gdHlwZVxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IFdpbGwgdGhyb3cgdHlwZSBlcnJvciBpZiB0eXBlIGlzIGFuIGludmFsaWQgdHlwZVxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBUfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNUeXBlKHBheWxvYWQsIHR5cGUpIHtcclxuICAgIGlmICghKHR5cGUgaW5zdGFuY2VvZiBGdW5jdGlvbikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUeXBlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodHlwZSwgJ3Byb3RvdHlwZScpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVHlwZSBpcyBub3QgYSBjbGFzcycpO1xyXG4gICAgfVxyXG4gICAgLy8gQ2xhc3NlcyB1c3VhbGx5IGhhdmUgbmFtZXMgKGFzIGZ1bmN0aW9ucyB1c3VhbGx5IGhhdmUgbmFtZXMpXHJcbiAgICB2YXIgbmFtZSA9IHR5cGUubmFtZTtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSBuYW1lIHx8IEJvb2xlYW4ocGF5bG9hZCAmJiBwYXlsb2FkLmNvbnN0cnVjdG9yID09PSB0eXBlKTtcclxufVxuXG5leHBvcnQgeyBnZXRUeXBlLCBpc0FueU9iamVjdCwgaXNBcnJheSwgaXNCbG9iLCBpc0Jvb2xlYW4sIGlzRGF0ZSwgaXNFbXB0eUFycmF5LCBpc0VtcHR5T2JqZWN0LCBpc0VtcHR5U3RyaW5nLCBpc0Vycm9yLCBpc0ZpbGUsIGlzRnVsbEFycmF5LCBpc0Z1bGxPYmplY3QsIGlzRnVsbFN0cmluZywgaXNGdW5jdGlvbiwgaXNNYXAsIGlzTmFOVmFsdWUsIGlzTnVsbCwgaXNOdWxsT3JVbmRlZmluZWQsIGlzTnVtYmVyLCBpc09iamVjdCwgaXNPYmplY3RMaWtlLCBpc09uZU9mLCBpc1BsYWluT2JqZWN0LCBpc1ByaW1pdGl2ZSwgaXNQcm9taXNlLCBpc1JlZ0V4cCwgaXNTZXQsIGlzU3RyaW5nLCBpc1N5bWJvbCwgaXNUeXBlLCBpc1VuZGVmaW5lZCwgaXNXZWFrTWFwLCBpc1dlYWtTZXQgfTtcbiIsImltcG9ydCB7IGlzUGxhaW5PYmplY3QsIGlzQXJyYXksIGlzU3ltYm9sIH0gZnJvbSAnaXMtd2hhdCc7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XG5cbmZ1bmN0aW9uIGFzc2lnblByb3AoY2FycnksIGtleSwgbmV3VmFsLCBvcmlnaW5hbE9iamVjdCkge1xyXG4gICAgdmFyIHByb3BUeXBlID0gb3JpZ2luYWxPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUoa2V5KVxyXG4gICAgICAgID8gJ2VudW1lcmFibGUnXHJcbiAgICAgICAgOiAnbm9uZW51bWVyYWJsZSc7XHJcbiAgICBpZiAocHJvcFR5cGUgPT09ICdlbnVtZXJhYmxlJylcclxuICAgICAgICBjYXJyeVtrZXldID0gbmV3VmFsO1xyXG4gICAgaWYgKHByb3BUeXBlID09PSAnbm9uZW51bWVyYWJsZScpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FycnksIGtleSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogbmV3VmFsLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG1lcmdlUmVjdXJzaXZlbHkob3JpZ2luLCBuZXdDb21lciwgZXh0ZW5zaW9ucykge1xyXG4gICAgLy8gd29yayBkaXJlY3RseSBvbiBuZXdDb21lciBpZiBpdHMgbm90IGFuIG9iamVjdFxyXG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KG5ld0NvbWVyKSkge1xyXG4gICAgICAgIC8vIGV4dGVuZCBtZXJnZSBydWxlc1xyXG4gICAgICAgIGlmIChleHRlbnNpb25zICYmIGlzQXJyYXkoZXh0ZW5zaW9ucykpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChleHRlbmQpIHtcclxuICAgICAgICAgICAgICAgIG5ld0NvbWVyID0gZXh0ZW5kKG9yaWdpbiwgbmV3Q29tZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld0NvbWVyO1xyXG4gICAgfVxyXG4gICAgLy8gZGVmaW5lIG5ld09iamVjdCB0byBtZXJnZSBhbGwgdmFsdWVzIHVwb25cclxuICAgIHZhciBuZXdPYmplY3QgPSB7fTtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KG9yaWdpbikpIHtcclxuICAgICAgICB2YXIgcHJvcHNfMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9yaWdpbik7XHJcbiAgICAgICAgdmFyIHN5bWJvbHNfMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob3JpZ2luKTtcclxuICAgICAgICBuZXdPYmplY3QgPSBfX3NwcmVhZEFycmF5cyhwcm9wc18xLCBzeW1ib2xzXzEpLnJlZHVjZShmdW5jdGlvbiAoY2FycnksIGtleSkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRWYWwgPSBvcmlnaW5ba2V5XTtcclxuICAgICAgICAgICAgaWYgKCghaXNTeW1ib2woa2V5KSAmJiAhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobmV3Q29tZXIpLmluY2x1ZGVzKGtleSkpIHx8XHJcbiAgICAgICAgICAgICAgICAoaXNTeW1ib2woa2V5KSAmJiAhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuZXdDb21lcikuaW5jbHVkZXMoa2V5KSkpIHtcclxuICAgICAgICAgICAgICAgIGFzc2lnblByb3AoY2FycnksIGtleSwgdGFyZ2V0VmFsLCBvcmlnaW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjYXJyeTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICB9XHJcbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuZXdDb21lcik7XHJcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobmV3Q29tZXIpO1xyXG4gICAgdmFyIHJlc3VsdCA9IF9fc3ByZWFkQXJyYXlzKHByb3BzLCBzeW1ib2xzKS5yZWR1Y2UoZnVuY3Rpb24gKGNhcnJ5LCBrZXkpIHtcclxuICAgICAgICAvLyByZS1kZWZpbmUgdGhlIG9yaWdpbiBhbmQgbmV3Q29tZXIgYXMgdGFyZ2V0VmFsIGFuZCBuZXdWYWxcclxuICAgICAgICB2YXIgbmV3VmFsID0gbmV3Q29tZXJba2V5XTtcclxuICAgICAgICB2YXIgdGFyZ2V0VmFsID0gKGlzUGxhaW5PYmplY3Qob3JpZ2luKSlcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICA/IG9yaWdpbltrZXldXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIC8vIGV4dGVuZCBtZXJnZSBydWxlc1xyXG4gICAgICAgIGlmIChleHRlbnNpb25zICYmIGlzQXJyYXkoZXh0ZW5zaW9ucykpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChleHRlbmQpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZhbCA9IGV4dGVuZCh0YXJnZXRWYWwsIG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBXaGVuIG5ld1ZhbCBpcyBhbiBvYmplY3QgZG8gdGhlIG1lcmdlIHJlY3Vyc2l2ZWx5XHJcbiAgICAgICAgaWYgKHRhcmdldFZhbCAhPT0gdW5kZWZpbmVkICYmIGlzUGxhaW5PYmplY3QobmV3VmFsKSkge1xyXG4gICAgICAgICAgICBuZXdWYWwgPSBtZXJnZVJlY3Vyc2l2ZWx5KHRhcmdldFZhbCwgbmV3VmFsLCBleHRlbnNpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzaWduUHJvcChjYXJyeSwga2V5LCBuZXdWYWwsIG5ld0NvbWVyKTtcclxuICAgICAgICByZXR1cm4gY2Fycnk7XHJcbiAgICB9LCBuZXdPYmplY3QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4vKipcclxuICogTWVyZ2UgYW55dGhpbmcgcmVjdXJzaXZlbHkuXHJcbiAqIE9iamVjdHMgZ2V0IG1lcmdlZCwgc3BlY2lhbCBvYmplY3RzIChjbGFzc2VzIGV0Yy4pIGFyZSByZS1hc3NpZ25lZCBcImFzIGlzXCIuXHJcbiAqIEJhc2ljIHR5cGVzIG92ZXJ3cml0ZSBvYmplY3RzIG9yIG90aGVyIGJhc2ljIHR5cGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0geyhJQ29uZmlnIHwgYW55KX0gb3JpZ2luXHJcbiAqIEBwYXJhbSB7Li4uYW55W119IG5ld0NvbWVyc1xyXG4gKiBAcmV0dXJucyB0aGUgcmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZShvcmlnaW4pIHtcclxuICAgIHZhciBuZXdDb21lcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbmV3Q29tZXJzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGV4dGVuc2lvbnMgPSBudWxsO1xyXG4gICAgdmFyIGJhc2UgPSBvcmlnaW47XHJcbiAgICBpZiAoaXNQbGFpbk9iamVjdChvcmlnaW4pICYmIG9yaWdpbi5leHRlbnNpb25zICYmIE9iamVjdC5rZXlzKG9yaWdpbikubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgYmFzZSA9IHt9O1xyXG4gICAgICAgIGV4dGVuc2lvbnMgPSBvcmlnaW4uZXh0ZW5zaW9ucztcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdDb21lcnMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIG5ld0NvbWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lcmdlUmVjdXJzaXZlbHkocmVzdWx0LCBuZXdDb21lciwgZXh0ZW5zaW9ucyk7XHJcbiAgICB9LCBiYXNlKTtcclxufVxuXG5mdW5jdGlvbiBjb25jYXRBcnJheXMob3JpZ2luVmFsLCBuZXdWYWwpIHtcclxuICAgIGlmIChpc0FycmF5KG9yaWdpblZhbCkgJiYgaXNBcnJheShuZXdWYWwpKSB7XHJcbiAgICAgICAgLy8gY29uY2F0IGxvZ2ljXHJcbiAgICAgICAgcmV0dXJuIG9yaWdpblZhbC5jb25jYXQobmV3VmFsKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdWYWw7IC8vIGFsd2F5cyByZXR1cm4gbmV3VmFsIGFzIGZhbGxiYWNrISFcclxufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTtcbmV4cG9ydCB7IGNvbmNhdEFycmF5cywgbWVyZ2UgfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTQuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xNC4wXCI7XG4iLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5mdW5jdGlvbiB0b1ByaW1pdGl2ZSh0LCByKSB7XG4gIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpO1xufVxubW9kdWxlLmV4cG9ydHMgPSB0b1ByaW1pdGl2ZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkge1xuICBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIHJldHVybiBlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBfc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5mdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICBcInVzZSBzdHJpY3RcIjsgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqL1xuICBtb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvclJ1bnRpbWUgPSBmdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICAgIHJldHVybiBlO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHZhciB0LFxuICAgIGUgPSB7fSxcbiAgICByID0gT2JqZWN0LnByb3RvdHlwZSxcbiAgICBuID0gci5oYXNPd25Qcm9wZXJ0eSxcbiAgICBvID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uICh0LCBlLCByKSB7XG4gICAgICB0W2VdID0gci52YWx1ZTtcbiAgICB9LFxuICAgIGkgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbCA6IHt9LFxuICAgIGEgPSBpLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiLFxuICAgIGMgPSBpLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIixcbiAgICB1ID0gaS50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcbiAgZnVuY3Rpb24gZGVmaW5lKHQsIGUsIHIpIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIGUsIHtcbiAgICAgIHZhbHVlOiByLFxuICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgd3JpdGFibGU6ICEwXG4gICAgfSksIHRbZV07XG4gIH1cbiAgdHJ5IHtcbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoICh0KSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKHQsIGUsIHIpIHtcbiAgICAgIHJldHVybiB0W2VdID0gcjtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHdyYXAodCwgZSwgciwgbikge1xuICAgIHZhciBpID0gZSAmJiBlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IGUgOiBHZW5lcmF0b3IsXG4gICAgICBhID0gT2JqZWN0LmNyZWF0ZShpLnByb3RvdHlwZSksXG4gICAgICBjID0gbmV3IENvbnRleHQobiB8fCBbXSk7XG4gICAgcmV0dXJuIG8oYSwgXCJfaW52b2tlXCIsIHtcbiAgICAgIHZhbHVlOiBtYWtlSW52b2tlTWV0aG9kKHQsIHIsIGMpXG4gICAgfSksIGE7XG4gIH1cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2godCwgZSwgcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcIm5vcm1hbFwiLFxuICAgICAgICBhcmc6IHQuY2FsbChlLCByKVxuICAgICAgfTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcInRocm93XCIsXG4gICAgICAgIGFyZzogdFxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgZS53cmFwID0gd3JhcDtcbiAgdmFyIGggPSBcInN1c3BlbmRlZFN0YXJ0XCIsXG4gICAgbCA9IFwic3VzcGVuZGVkWWllbGRcIixcbiAgICBmID0gXCJleGVjdXRpbmdcIixcbiAgICBzID0gXCJjb21wbGV0ZWRcIixcbiAgICB5ID0ge307XG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuICB2YXIgcCA9IHt9O1xuICBkZWZpbmUocCwgYSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgdmFyIGQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgdiA9IGQgJiYgZChkKHZhbHVlcyhbXSkpKTtcbiAgdiAmJiB2ICE9PSByICYmIG4uY2FsbCh2LCBhKSAmJiAocCA9IHYpO1xuICB2YXIgZyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHApO1xuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHModCkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICBkZWZpbmUodCwgZSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShlLCB0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IodCwgZSkge1xuICAgIGZ1bmN0aW9uIGludm9rZShyLCBvLCBpLCBhKSB7XG4gICAgICB2YXIgYyA9IHRyeUNhdGNoKHRbcl0sIHQsIG8pO1xuICAgICAgaWYgKFwidGhyb3dcIiAhPT0gYy50eXBlKSB7XG4gICAgICAgIHZhciB1ID0gYy5hcmcsXG4gICAgICAgICAgaCA9IHUudmFsdWU7XG4gICAgICAgIHJldHVybiBoICYmIFwib2JqZWN0XCIgPT0gX3R5cGVvZihoKSAmJiBuLmNhbGwoaCwgXCJfX2F3YWl0XCIpID8gZS5yZXNvbHZlKGguX19hd2FpdCkudGhlbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdCwgaSwgYSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgdCwgaSwgYSk7XG4gICAgICAgIH0pIDogZS5yZXNvbHZlKGgpLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICB1LnZhbHVlID0gdCwgaSh1KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgdCwgaSwgYSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYShjLmFyZyk7XG4gICAgfVxuICAgIHZhciByO1xuICAgIG8odGhpcywgXCJfaW52b2tlXCIsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSh0LCBuKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgZShmdW5jdGlvbiAoZSwgcikge1xuICAgICAgICAgICAgaW52b2tlKHQsIG4sIGUsIHIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByID0gciA/IHIudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGUsIHIsIG4pIHtcbiAgICB2YXIgbyA9IGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpLCBhKSB7XG4gICAgICBpZiAobyA9PT0gZikgdGhyb3cgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgaWYgKG8gPT09IHMpIHtcbiAgICAgICAgaWYgKFwidGhyb3dcIiA9PT0gaSkgdGhyb3cgYTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogdCxcbiAgICAgICAgICBkb25lOiAhMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZm9yIChuLm1ldGhvZCA9IGksIG4uYXJnID0gYTs7KSB7XG4gICAgICAgIHZhciBjID0gbi5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICB2YXIgdSA9IG1heWJlSW52b2tlRGVsZWdhdGUoYywgbik7XG4gICAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICAgIGlmICh1ID09PSB5KSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJuZXh0XCIgPT09IG4ubWV0aG9kKSBuLnNlbnQgPSBuLl9zZW50ID0gbi5hcmc7ZWxzZSBpZiAoXCJ0aHJvd1wiID09PSBuLm1ldGhvZCkge1xuICAgICAgICAgIGlmIChvID09PSBoKSB0aHJvdyBvID0gcywgbi5hcmc7XG4gICAgICAgICAgbi5kaXNwYXRjaEV4Y2VwdGlvbihuLmFyZyk7XG4gICAgICAgIH0gZWxzZSBcInJldHVyblwiID09PSBuLm1ldGhvZCAmJiBuLmFicnVwdChcInJldHVyblwiLCBuLmFyZyk7XG4gICAgICAgIG8gPSBmO1xuICAgICAgICB2YXIgcCA9IHRyeUNhdGNoKGUsIHIsIG4pO1xuICAgICAgICBpZiAoXCJub3JtYWxcIiA9PT0gcC50eXBlKSB7XG4gICAgICAgICAgaWYgKG8gPSBuLmRvbmUgPyBzIDogbCwgcC5hcmcgPT09IHkpIGNvbnRpbnVlO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcC5hcmcsXG4gICAgICAgICAgICBkb25lOiBuLmRvbmVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFwidGhyb3dcIiA9PT0gcC50eXBlICYmIChvID0gcywgbi5tZXRob2QgPSBcInRocm93XCIsIG4uYXJnID0gcC5hcmcpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShlLCByKSB7XG4gICAgdmFyIG4gPSByLm1ldGhvZCxcbiAgICAgIG8gPSBlLml0ZXJhdG9yW25dO1xuICAgIGlmIChvID09PSB0KSByZXR1cm4gci5kZWxlZ2F0ZSA9IG51bGwsIFwidGhyb3dcIiA9PT0gbiAmJiBlLml0ZXJhdG9yW1wicmV0dXJuXCJdICYmIChyLm1ldGhvZCA9IFwicmV0dXJuXCIsIHIuYXJnID0gdCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShlLCByKSwgXCJ0aHJvd1wiID09PSByLm1ldGhvZCkgfHwgXCJyZXR1cm5cIiAhPT0gbiAmJiAoci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gbmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ1wiICsgbiArIFwiJyBtZXRob2RcIikpLCB5O1xuICAgIHZhciBpID0gdHJ5Q2F0Y2gobywgZS5pdGVyYXRvciwgci5hcmcpO1xuICAgIGlmIChcInRocm93XCIgPT09IGkudHlwZSkgcmV0dXJuIHIubWV0aG9kID0gXCJ0aHJvd1wiLCByLmFyZyA9IGkuYXJnLCByLmRlbGVnYXRlID0gbnVsbCwgeTtcbiAgICB2YXIgYSA9IGkuYXJnO1xuICAgIHJldHVybiBhID8gYS5kb25lID8gKHJbZS5yZXN1bHROYW1lXSA9IGEudmFsdWUsIHIubmV4dCA9IGUubmV4dExvYywgXCJyZXR1cm5cIiAhPT0gci5tZXRob2QgJiYgKHIubWV0aG9kID0gXCJuZXh0XCIsIHIuYXJnID0gdCksIHIuZGVsZWdhdGUgPSBudWxsLCB5KSA6IGEgOiAoci5tZXRob2QgPSBcInRocm93XCIsIHIuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpLCByLmRlbGVnYXRlID0gbnVsbCwgeSk7XG4gIH1cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KHQpIHtcbiAgICB2YXIgZSA9IHtcbiAgICAgIHRyeUxvYzogdFswXVxuICAgIH07XG4gICAgMSBpbiB0ICYmIChlLmNhdGNoTG9jID0gdFsxXSksIDIgaW4gdCAmJiAoZS5maW5hbGx5TG9jID0gdFsyXSwgZS5hZnRlckxvYyA9IHRbM10pLCB0aGlzLnRyeUVudHJpZXMucHVzaChlKTtcbiAgfVxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KHQpIHtcbiAgICB2YXIgZSA9IHQuY29tcGxldGlvbiB8fCB7fTtcbiAgICBlLnR5cGUgPSBcIm5vcm1hbFwiLCBkZWxldGUgZS5hcmcsIHQuY29tcGxldGlvbiA9IGU7XG4gIH1cbiAgZnVuY3Rpb24gQ29udGV4dCh0KSB7XG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3tcbiAgICAgIHRyeUxvYzogXCJyb290XCJcbiAgICB9XSwgdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyksIHRoaXMucmVzZXQoITApO1xuICB9XG4gIGZ1bmN0aW9uIHZhbHVlcyhlKSB7XG4gICAgaWYgKGUgfHwgXCJcIiA9PT0gZSkge1xuICAgICAgdmFyIHIgPSBlW2FdO1xuICAgICAgaWYgKHIpIHJldHVybiByLmNhbGwoZSk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLm5leHQpIHJldHVybiBlO1xuICAgICAgaWYgKCFpc05hTihlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIG8gPSAtMSxcbiAgICAgICAgICBpID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIGZvciAoOyArK28gPCBlLmxlbmd0aDspIGlmIChuLmNhbGwoZSwgbykpIHJldHVybiBuZXh0LnZhbHVlID0gZVtvXSwgbmV4dC5kb25lID0gITEsIG5leHQ7XG4gICAgICAgICAgICByZXR1cm4gbmV4dC52YWx1ZSA9IHQsIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBpLm5leHQgPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKF90eXBlb2YoZSkgKyBcIiBpcyBub3QgaXRlcmFibGVcIik7XG4gIH1cbiAgcmV0dXJuIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBvKGcsIFwiY29uc3RydWN0b3JcIiwge1xuICAgIHZhbHVlOiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICBjb25maWd1cmFibGU6ICEwXG4gIH0pLCBvKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIHtcbiAgICB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb24sXG4gICAgY29uZmlndXJhYmxlOiAhMFxuICB9KSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHUsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIiksIGUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHQgJiYgdC5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gISFlICYmIChlID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgPT09IChlLmRpc3BsYXlOYW1lIHx8IGUubmFtZSkpO1xuICB9LCBlLm1hcmsgPSBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YodCwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpIDogKHQuX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGRlZmluZSh0LCB1LCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSwgdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGcpLCB0O1xuICB9LCBlLmF3cmFwID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19hd2FpdDogdFxuICAgIH07XG4gIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvciwgZS5hc3luYyA9IGZ1bmN0aW9uICh0LCByLCBuLCBvLCBpKSB7XG4gICAgdm9pZCAwID09PSBpICYmIChpID0gUHJvbWlzZSk7XG4gICAgdmFyIGEgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKHQsIHIsIG4sIG8pLCBpKTtcbiAgICByZXR1cm4gZS5pc0dlbmVyYXRvckZ1bmN0aW9uKHIpID8gYSA6IGEubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiB0LmRvbmUgPyB0LnZhbHVlIDogYS5uZXh0KCk7XG4gICAgfSk7XG4gIH0sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhnKSwgZGVmaW5lKGcsIHUsIFwiR2VuZXJhdG9yXCIpLCBkZWZpbmUoZywgYSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZGVmaW5lKGcsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KSwgZS5rZXlzID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgZSA9IE9iamVjdCh0KSxcbiAgICAgIHIgPSBbXTtcbiAgICBmb3IgKHZhciBuIGluIGUpIHIucHVzaChuKTtcbiAgICByZXR1cm4gci5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBmb3IgKDsgci5sZW5ndGg7KSB7XG4gICAgICAgIHZhciB0ID0gci5wb3AoKTtcbiAgICAgICAgaWYgKHQgaW4gZSkgcmV0dXJuIG5leHQudmFsdWUgPSB0LCBuZXh0LmRvbmUgPSAhMSwgbmV4dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXh0LmRvbmUgPSAhMCwgbmV4dDtcbiAgICB9O1xuICB9LCBlLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KGUpIHtcbiAgICAgIGlmICh0aGlzLnByZXYgPSAwLCB0aGlzLm5leHQgPSAwLCB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdCwgdGhpcy5kb25lID0gITEsIHRoaXMuZGVsZWdhdGUgPSBudWxsLCB0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLmFyZyA9IHQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhZSkgZm9yICh2YXIgciBpbiB0aGlzKSBcInRcIiA9PT0gci5jaGFyQXQoMCkgJiYgbi5jYWxsKHRoaXMsIHIpICYmICFpc05hTigrci5zbGljZSgxKSkgJiYgKHRoaXNbcl0gPSB0KTtcbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmRvbmUgPSAhMDtcbiAgICAgIHZhciB0ID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSB0LnR5cGUpIHRocm93IHQuYXJnO1xuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihlKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB0aHJvdyBlO1xuICAgICAgdmFyIHIgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKG4sIG8pIHtcbiAgICAgICAgcmV0dXJuIGEudHlwZSA9IFwidGhyb3dcIiwgYS5hcmcgPSBlLCByLm5leHQgPSBuLCBvICYmIChyLm1ldGhvZCA9IFwibmV4dFwiLCByLmFyZyA9IHQpLCAhIW87XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBvID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IG8gPj0gMDsgLS1vKSB7XG4gICAgICAgIHZhciBpID0gdGhpcy50cnlFbnRyaWVzW29dLFxuICAgICAgICAgIGEgPSBpLmNvbXBsZXRpb247XG4gICAgICAgIGlmIChcInJvb3RcIiA9PT0gaS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIGlmIChpLnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgYyA9IG4uY2FsbChpLCBcImNhdGNoTG9jXCIpLFxuICAgICAgICAgICAgdSA9IG4uY2FsbChpLCBcImZpbmFsbHlMb2NcIik7XG4gICAgICAgICAgaWYgKGMgJiYgdSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoaS5jYXRjaExvYywgITApO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShpLmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYykge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoaS5jYXRjaExvYywgITApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXUpIHRocm93IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgaS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGkuZmluYWxseUxvYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0LCBlKSB7XG4gICAgICBmb3IgKHZhciByID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IHIgPj0gMDsgLS1yKSB7XG4gICAgICAgIHZhciBvID0gdGhpcy50cnlFbnRyaWVzW3JdO1xuICAgICAgICBpZiAoby50cnlMb2MgPD0gdGhpcy5wcmV2ICYmIG4uY2FsbChvLCBcImZpbmFsbHlMb2NcIikgJiYgdGhpcy5wcmV2IDwgby5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGkgPSBvO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpICYmIChcImJyZWFrXCIgPT09IHQgfHwgXCJjb250aW51ZVwiID09PSB0KSAmJiBpLnRyeUxvYyA8PSBlICYmIGUgPD0gaS5maW5hbGx5TG9jICYmIChpID0gbnVsbCk7XG4gICAgICB2YXIgYSA9IGkgPyBpLmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJldHVybiBhLnR5cGUgPSB0LCBhLmFyZyA9IGUsIGkgPyAodGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5uZXh0ID0gaS5maW5hbGx5TG9jLCB5KSA6IHRoaXMuY29tcGxldGUoYSk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodCwgZSkge1xuICAgICAgaWYgKFwidGhyb3dcIiA9PT0gdC50eXBlKSB0aHJvdyB0LmFyZztcbiAgICAgIHJldHVybiBcImJyZWFrXCIgPT09IHQudHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHQudHlwZSA/IHRoaXMubmV4dCA9IHQuYXJnIDogXCJyZXR1cm5cIiA9PT0gdC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gdC5hcmcsIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIiwgdGhpcy5uZXh0ID0gXCJlbmRcIikgOiBcIm5vcm1hbFwiID09PSB0LnR5cGUgJiYgZSAmJiAodGhpcy5uZXh0ID0gZSksIHk7XG4gICAgfSxcbiAgICBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaCh0KSB7XG4gICAgICBmb3IgKHZhciBlID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGUgPj0gMDsgLS1lKSB7XG4gICAgICAgIHZhciByID0gdGhpcy50cnlFbnRyaWVzW2VdO1xuICAgICAgICBpZiAoci5maW5hbGx5TG9jID09PSB0KSByZXR1cm4gdGhpcy5jb21wbGV0ZShyLmNvbXBsZXRpb24sIHIuYWZ0ZXJMb2MpLCByZXNldFRyeUVudHJ5KHIpLCB5O1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2godCkge1xuICAgICAgZm9yICh2YXIgZSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBlID49IDA7IC0tZSkge1xuICAgICAgICB2YXIgciA9IHRoaXMudHJ5RW50cmllc1tlXTtcbiAgICAgICAgaWYgKHIudHJ5TG9jID09PSB0KSB7XG4gICAgICAgICAgdmFyIG4gPSByLmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKFwidGhyb3dcIiA9PT0gbi50eXBlKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG4uYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChlLCByLCBuKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcixcbiAgICAgICAgbmV4dExvYzogblxuICAgICAgfSwgXCJuZXh0XCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHQpLCB5O1xuICAgIH1cbiAgfSwgZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yUnVudGltZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0U2lkZUNoYW5uZWwgPSByZXF1aXJlKCdzaWRlLWNoYW5uZWwnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGFycmF5UHJlZml4R2VuZXJhdG9ycyA9IHtcbiAgICBicmFja2V0czogZnVuY3Rpb24gYnJhY2tldHMocHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnW10nO1xuICAgIH0sXG4gICAgY29tbWE6ICdjb21tYScsXG4gICAgaW5kaWNlczogZnVuY3Rpb24gaW5kaWNlcyhwcmVmaXgsIGtleSkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1snICsga2V5ICsgJ10nO1xuICAgIH0sXG4gICAgcmVwZWF0OiBmdW5jdGlvbiByZXBlYXQocHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfVxufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIHB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcbnZhciBwdXNoVG9BcnJheSA9IGZ1bmN0aW9uIChhcnIsIHZhbHVlT3JBcnJheSkge1xuICAgIHB1c2guYXBwbHkoYXJyLCBpc0FycmF5KHZhbHVlT3JBcnJheSkgPyB2YWx1ZU9yQXJyYXkgOiBbdmFsdWVPckFycmF5XSk7XG59O1xuXG52YXIgdG9JU08gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGRlZmF1bHRGb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107XG52YXIgZGVmYXVsdHMgPSB7XG4gICAgYWRkUXVlcnlQcmVmaXg6IGZhbHNlLFxuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dFbXB0eUFycmF5czogZmFsc2UsXG4gICAgYXJyYXlGb3JtYXQ6ICdpbmRpY2VzJyxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgY29tbWFSb3VuZFRyaXA6IGZhbHNlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGVuY29kZTogdHJ1ZSxcbiAgICBlbmNvZGVEb3RJbktleXM6IGZhbHNlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICBmaWx0ZXI6IHZvaWQgdW5kZWZpbmVkLFxuICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICBmb3JtYXR0ZXI6IGZvcm1hdHMuZm9ybWF0dGVyc1tkZWZhdWx0Rm9ybWF0XSxcbiAgICAvLyBkZXByZWNhdGVkXG4gICAgaW5kaWNlczogZmFsc2UsXG4gICAgc2VyaWFsaXplRGF0ZTogZnVuY3Rpb24gc2VyaWFsaXplRGF0ZShkYXRlKSB7XG4gICAgICAgIHJldHVybiB0b0lTTy5jYWxsKGRhdGUpO1xuICAgIH0sXG4gICAgc2tpcE51bGxzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaXNOb25OdWxsaXNoUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNOb25OdWxsaXNoUHJpbWl0aXZlKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnc3ltYm9sJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2JpZ2ludCc7XG59O1xuXG52YXIgc2VudGluZWwgPSB7fTtcblxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICBvYmplY3QsXG4gICAgcHJlZml4LFxuICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgY29tbWFSb3VuZFRyaXAsXG4gICAgYWxsb3dFbXB0eUFycmF5cyxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgc2tpcE51bGxzLFxuICAgIGVuY29kZURvdEluS2V5cyxcbiAgICBlbmNvZGVyLFxuICAgIGZpbHRlcixcbiAgICBzb3J0LFxuICAgIGFsbG93RG90cyxcbiAgICBzZXJpYWxpemVEYXRlLFxuICAgIGZvcm1hdCxcbiAgICBmb3JtYXR0ZXIsXG4gICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICBjaGFyc2V0LFxuICAgIHNpZGVDaGFubmVsXG4pIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuXG4gICAgdmFyIHRtcFNjID0gc2lkZUNoYW5uZWw7XG4gICAgdmFyIHN0ZXAgPSAwO1xuICAgIHZhciBmaW5kRmxhZyA9IGZhbHNlO1xuICAgIHdoaWxlICgodG1wU2MgPSB0bXBTYy5nZXQoc2VudGluZWwpKSAhPT0gdm9pZCB1bmRlZmluZWQgJiYgIWZpbmRGbGFnKSB7XG4gICAgICAgIC8vIFdoZXJlIG9iamVjdCBsYXN0IGFwcGVhcmVkIGluIHRoZSByZWYgdHJlZVxuICAgICAgICB2YXIgcG9zID0gdG1wU2MuZ2V0KG9iamVjdCk7XG4gICAgICAgIHN0ZXAgKz0gMTtcbiAgICAgICAgaWYgKHR5cGVvZiBwb3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAocG9zID09PSBzdGVwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0N5Y2xpYyBvYmplY3QgdmFsdWUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmluZEZsYWcgPSB0cnVlOyAvLyBCcmVhayB3aGlsZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG1wU2MuZ2V0KHNlbnRpbmVsKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHN0ZXAgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqID0gc2VyaWFsaXplRGF0ZShvYmopO1xuICAgIH0gZWxzZSBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgb2JqID0gdXRpbHMubWF5YmVNYXAob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHN0cmljdE51bGxIYW5kbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXIgJiYgIWVuY29kZVZhbHVlc09ubHkgPyBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScsIGZvcm1hdCkgOiBwcmVmaXg7XG4gICAgICAgIH1cblxuICAgICAgICBvYmogPSAnJztcbiAgICB9XG5cbiAgICBpZiAoaXNOb25OdWxsaXNoUHJpbWl0aXZlKG9iaikgfHwgdXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gZW5jb2RlVmFsdWVzT25seSA/IHByZWZpeCA6IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAna2V5JywgZm9ybWF0KTtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ3ZhbHVlJywgZm9ybWF0KSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbZm9ybWF0dGVyKHByZWZpeCkgKyAnPScgKyBmb3JtYXR0ZXIoU3RyaW5nKG9iaikpXTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgLy8gd2UgbmVlZCB0byBqb2luIGVsZW1lbnRzIGluXG4gICAgICAgIGlmIChlbmNvZGVWYWx1ZXNPbmx5ICYmIGVuY29kZXIpIHtcbiAgICAgICAgICAgIG9iaiA9IHV0aWxzLm1heWJlTWFwKG9iaiwgZW5jb2Rlcik7XG4gICAgICAgIH1cbiAgICAgICAgb2JqS2V5cyA9IFt7IHZhbHVlOiBvYmoubGVuZ3RoID4gMCA/IG9iai5qb2luKCcsJykgfHwgbnVsbCA6IHZvaWQgdW5kZWZpbmVkIH1dO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShmaWx0ZXIpKSB7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBvYmpLZXlzID0gc29ydCA/IGtleXMuc29ydChzb3J0KSA6IGtleXM7XG4gICAgfVxuXG4gICAgdmFyIGVuY29kZWRQcmVmaXggPSBlbmNvZGVEb3RJbktleXMgPyBTdHJpbmcocHJlZml4KS5yZXBsYWNlKC9cXC4vZywgJyUyRScpIDogU3RyaW5nKHByZWZpeCk7XG5cbiAgICB2YXIgYWRqdXN0ZWRQcmVmaXggPSBjb21tYVJvdW5kVHJpcCAmJiBpc0FycmF5KG9iaikgJiYgb2JqLmxlbmd0aCA9PT0gMSA/IGVuY29kZWRQcmVmaXggKyAnW10nIDogZW5jb2RlZFByZWZpeDtcblxuICAgIGlmIChhbGxvd0VtcHR5QXJyYXlzICYmIGlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBhZGp1c3RlZFByZWZpeCArICdbXSc7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmpLZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2pdO1xuICAgICAgICB2YXIgdmFsdWUgPSB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJiBrZXkgJiYgdHlwZW9mIGtleS52YWx1ZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgID8ga2V5LnZhbHVlXG4gICAgICAgICAgICA6IG9ialtrZXldO1xuXG4gICAgICAgIGlmIChza2lwTnVsbHMgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVuY29kZWRLZXkgPSBhbGxvd0RvdHMgJiYgZW5jb2RlRG90SW5LZXlzID8gU3RyaW5nKGtleSkucmVwbGFjZSgvXFwuL2csICclMkUnKSA6IFN0cmluZyhrZXkpO1xuICAgICAgICB2YXIga2V5UHJlZml4ID0gaXNBcnJheShvYmopXG4gICAgICAgICAgICA/IHR5cGVvZiBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnZnVuY3Rpb24nID8gZ2VuZXJhdGVBcnJheVByZWZpeChhZGp1c3RlZFByZWZpeCwgZW5jb2RlZEtleSkgOiBhZGp1c3RlZFByZWZpeFxuICAgICAgICAgICAgOiBhZGp1c3RlZFByZWZpeCArIChhbGxvd0RvdHMgPyAnLicgKyBlbmNvZGVkS2V5IDogJ1snICsgZW5jb2RlZEtleSArICddJyk7XG5cbiAgICAgICAgc2lkZUNoYW5uZWwuc2V0KG9iamVjdCwgc3RlcCk7XG4gICAgICAgIHZhciB2YWx1ZVNpZGVDaGFubmVsID0gZ2V0U2lkZUNoYW5uZWwoKTtcbiAgICAgICAgdmFsdWVTaWRlQ2hhbm5lbC5zZXQoc2VudGluZWwsIHNpZGVDaGFubmVsKTtcbiAgICAgICAgcHVzaFRvQXJyYXkodmFsdWVzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGtleVByZWZpeCxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBjb21tYVJvdW5kVHJpcCxcbiAgICAgICAgICAgIGFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICBlbmNvZGVEb3RJbktleXMsXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGVuY29kZVZhbHVlc09ubHkgJiYgaXNBcnJheShvYmopID8gbnVsbCA6IGVuY29kZXIsXG4gICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgICAgIGZvcm1hdHRlcixcbiAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICBjaGFyc2V0LFxuICAgICAgICAgICAgdmFsdWVTaWRlQ2hhbm5lbFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxudmFyIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGFsbG93RW1wdHlBcnJheXNgIG9wdGlvbiBjYW4gb25seSBiZSBgdHJ1ZWAgb3IgYGZhbHNlYCwgd2hlbiBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5lbmNvZGVEb3RJbktleXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmVuY29kZURvdEluS2V5cyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BlbmNvZGVEb3RJbktleXNgIG9wdGlvbiBjYW4gb25seSBiZSBgdHJ1ZWAgb3IgYGZhbHNlYCwgd2hlbiBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmVuY29kZXIgIT09IG51bGwgJiYgdHlwZW9mIG9wdHMuZW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuZW5jb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBjaGFyc2V0ID0gb3B0cy5jaGFyc2V0IHx8IGRlZmF1bHRzLmNoYXJzZXQ7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmNoYXJzZXQgIT09ICd1bmRlZmluZWQnICYmIG9wdHMuY2hhcnNldCAhPT0gJ3V0Zi04JyAmJiBvcHRzLmNoYXJzZXQgIT09ICdpc28tODg1OS0xJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZvcm1hdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFoYXMuY2FsbChmb3JtYXRzLmZvcm1hdHRlcnMsIG9wdHMuZm9ybWF0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1hdCA9IG9wdHMuZm9ybWF0O1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICB2YXIgZmlsdGVyID0gZGVmYXVsdHMuZmlsdGVyO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5maWx0ZXIgPT09ICdmdW5jdGlvbicgfHwgaXNBcnJheShvcHRzLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0cy5maWx0ZXI7XG4gICAgfVxuXG4gICAgdmFyIGFycmF5Rm9ybWF0O1xuICAgIGlmIChvcHRzLmFycmF5Rm9ybWF0IGluIGFycmF5UHJlZml4R2VuZXJhdG9ycykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdHMuYXJyYXlGb3JtYXQ7XG4gICAgfSBlbHNlIGlmICgnaW5kaWNlcycgaW4gb3B0cykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdHMuaW5kaWNlcyA/ICdpbmRpY2VzJyA6ICdyZXBlYXQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gZGVmYXVsdHMuYXJyYXlGb3JtYXQ7XG4gICAgfVxuXG4gICAgaWYgKCdjb21tYVJvdW5kVHJpcCcgaW4gb3B0cyAmJiB0eXBlb2Ygb3B0cy5jb21tYVJvdW5kVHJpcCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bjb21tYVJvdW5kVHJpcGAgbXVzdCBiZSBhIGJvb2xlYW4sIG9yIGFic2VudCcpO1xuICAgIH1cblxuICAgIHZhciBhbGxvd0RvdHMgPSB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gb3B0cy5lbmNvZGVEb3RJbktleXMgPT09IHRydWUgPyB0cnVlIDogZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cztcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZFF1ZXJ5UHJlZml4OiB0eXBlb2Ygb3B0cy5hZGRRdWVyeVByZWZpeCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hZGRRdWVyeVByZWZpeCA6IGRlZmF1bHRzLmFkZFF1ZXJ5UHJlZml4LFxuICAgICAgICBhbGxvd0RvdHM6IGFsbG93RG90cyxcbiAgICAgICAgYWxsb3dFbXB0eUFycmF5czogdHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyA9PT0gJ2Jvb2xlYW4nID8gISFvcHRzLmFsbG93RW1wdHlBcnJheXMgOiBkZWZhdWx0cy5hbGxvd0VtcHR5QXJyYXlzLFxuICAgICAgICBhcnJheUZvcm1hdDogYXJyYXlGb3JtYXQsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgY29tbWFSb3VuZFRyaXA6ICEhb3B0cy5jb21tYVJvdW5kVHJpcCxcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZGVsaW1pdGVyIDogb3B0cy5kZWxpbWl0ZXIsXG4gICAgICAgIGVuY29kZTogdHlwZW9mIG9wdHMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZSA6IGRlZmF1bHRzLmVuY29kZSxcbiAgICAgICAgZW5jb2RlRG90SW5LZXlzOiB0eXBlb2Ygb3B0cy5lbmNvZGVEb3RJbktleXMgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlRG90SW5LZXlzIDogZGVmYXVsdHMuZW5jb2RlRG90SW5LZXlzLFxuICAgICAgICBlbmNvZGVyOiB0eXBlb2Ygb3B0cy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcixcbiAgICAgICAgZW5jb2RlVmFsdWVzT25seTogdHlwZW9mIG9wdHMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICAgICAgc2VyaWFsaXplRGF0ZTogdHlwZW9mIG9wdHMuc2VyaWFsaXplRGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc2VyaWFsaXplRGF0ZSA6IGRlZmF1bHRzLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgIHNraXBOdWxsczogdHlwZW9mIG9wdHMuc2tpcE51bGxzID09PSAnYm9vbGVhbicgPyBvcHRzLnNraXBOdWxscyA6IGRlZmF1bHRzLnNraXBOdWxscyxcbiAgICAgICAgc29ydDogdHlwZW9mIG9wdHMuc29ydCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc29ydCA6IG51bGwsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG9wdHMpIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKTtcblxuICAgIHZhciBvYmpLZXlzO1xuICAgIHZhciBmaWx0ZXI7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBhcnJheVByZWZpeEdlbmVyYXRvcnNbb3B0aW9ucy5hcnJheUZvcm1hdF07XG4gICAgdmFyIGNvbW1hUm91bmRUcmlwID0gZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBvcHRpb25zLmNvbW1hUm91bmRUcmlwO1xuXG4gICAgaWYgKCFvYmpLZXlzKSB7XG4gICAgICAgIG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvcnQpIHtcbiAgICAgICAgb2JqS2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG4gICAgfVxuXG4gICAgdmFyIHNpZGVDaGFubmVsID0gZ2V0U2lkZUNoYW5uZWwoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG4gICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNraXBOdWxscyAmJiB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaFRvQXJyYXkoa2V5cywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgY29tbWFSb3VuZFRyaXAsXG4gICAgICAgICAgICBvcHRpb25zLmFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgICAgICBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcE51bGxzLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGVEb3RJbktleXMsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZSA/IG9wdGlvbnMuZW5jb2RlciA6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25zLmZpbHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuc29ydCxcbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dEb3RzLFxuICAgICAgICAgICAgb3B0aW9ucy5zZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXQsXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIG9wdGlvbnMuY2hhcnNldCxcbiAgICAgICAgICAgIHNpZGVDaGFubmVsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHZhciBqb2luZWQgPSBrZXlzLmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpO1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLmFkZFF1ZXJ5UHJlZml4ID09PSB0cnVlID8gJz8nIDogJyc7XG5cbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JyksIHRoZSBcIm51bWVyaWMgZW50aXR5XCIgcmVwcmVzZW50YXRpb24gb2YgYSBjaGVja21hcmtcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lMjYlMjMxMDAwMyUzQiYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCfinJMnKVxuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSVFMiU5QyU5MyYnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGpvaW5lZC5sZW5ndGggPiAwID8gcHJlZml4ICsgam9pbmVkIDogJyc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG52YXIgZ2V0U2lkZUNoYW5uZWxMaXN0ID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsLWxpc3QnKTtcbnZhciBnZXRTaWRlQ2hhbm5lbE1hcCA9IHJlcXVpcmUoJ3NpZGUtY2hhbm5lbC1tYXAnKTtcbnZhciBnZXRTaWRlQ2hhbm5lbFdlYWtNYXAgPSByZXF1aXJlKCdzaWRlLWNoYW5uZWwtd2Vha21hcCcpO1xuXG52YXIgbWFrZUNoYW5uZWwgPSBnZXRTaWRlQ2hhbm5lbFdlYWtNYXAgfHwgZ2V0U2lkZUNoYW5uZWxNYXAgfHwgZ2V0U2lkZUNoYW5uZWxMaXN0O1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTaWRlQ2hhbm5lbCgpIHtcblx0LyoqIEB0eXBlZGVmIHtSZXR1cm5UeXBlPHR5cGVvZiBnZXRTaWRlQ2hhbm5lbD59IENoYW5uZWwgKi9cblxuXHQvKiogQHR5cGUge0NoYW5uZWwgfCB1bmRlZmluZWR9ICovIHZhciAkY2hhbm5lbERhdGE7XG5cblx0LyoqIEB0eXBlIHtDaGFubmVsfSAqL1xuXHR2YXIgY2hhbm5lbCA9IHtcblx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuICEhJGNoYW5uZWxEYXRhICYmICRjaGFubmVsRGF0YVsnZGVsZXRlJ10oa2V5KTtcblx0XHR9LFxuXHRcdGdldDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuICRjaGFubmVsRGF0YSAmJiAkY2hhbm5lbERhdGEuZ2V0KGtleSk7XG5cdFx0fSxcblx0XHRoYXM6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiAhISRjaGFubmVsRGF0YSAmJiAkY2hhbm5lbERhdGEuaGFzKGtleSk7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRpZiAoISRjaGFubmVsRGF0YSkge1xuXHRcdFx0XHQkY2hhbm5lbERhdGEgPSBtYWtlQ2hhbm5lbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQkY2hhbm5lbERhdGEuc2V0KGtleSwgdmFsdWUpO1xuXHRcdH1cblx0fTtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBmaWd1cmUgb3V0IHdoeSB0aGlzIGlzIGVycm9yaW5nXG5cdHJldHVybiBjaGFubmVsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbi8qXG4qIFRoaXMgZnVuY3Rpb24gdHJhdmVyc2VzIHRoZSBsaXN0IHJldHVybmluZyB0aGUgbm9kZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBrZXkuXG4qXG4qIFRoYXQgbm9kZSBpcyBhbHNvIG1vdmVkIHRvIHRoZSBoZWFkIG9mIHRoZSBsaXN0LCBzbyB0aGF0IGlmIGl0J3MgYWNjZXNzZWQgYWdhaW4gd2UgZG9uJ3QgbmVlZCB0byB0cmF2ZXJzZSB0aGUgd2hvbGUgbGlzdC5cbiogQnkgZG9pbmcgc28sIGFsbCB0aGUgcmVjZW50bHkgdXNlZCBub2RlcyBjYW4gYmUgYWNjZXNzZWQgcmVsYXRpdmVseSBxdWlja2x5LlxuKi9cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2xpc3QuZC50cycpLmxpc3RHZXROb2RlfSAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG52YXIgbGlzdEdldE5vZGUgPSBmdW5jdGlvbiAobGlzdCwga2V5LCBpc0RlbGV0ZSkge1xuXHQvKiogQHR5cGUge3R5cGVvZiBsaXN0IHwgTm9uTnVsbGFibGU8KHR5cGVvZiBsaXN0KVsnbmV4dCddPn0gKi9cblx0dmFyIHByZXYgPSBsaXN0O1xuXHQvKiogQHR5cGUgeyh0eXBlb2YgbGlzdClbJ25leHQnXX0gKi9cblx0dmFyIGN1cnI7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0Zm9yICg7IChjdXJyID0gcHJldi5uZXh0KSAhPSBudWxsOyBwcmV2ID0gY3Vycikge1xuXHRcdGlmIChjdXJyLmtleSA9PT0ga2V5KSB7XG5cdFx0XHRwcmV2Lm5leHQgPSBjdXJyLm5leHQ7XG5cdFx0XHRpZiAoIWlzRGVsZXRlKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnNcblx0XHRcdFx0Y3Vyci5uZXh0ID0gLyoqIEB0eXBlIHtOb25OdWxsYWJsZTx0eXBlb2YgbGlzdC5uZXh0Pn0gKi8gKGxpc3QubmV4dCk7XG5cdFx0XHRcdGxpc3QubmV4dCA9IGN1cnI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRcdH1cblx0XHRcdHJldHVybiBjdXJyO1xuXHRcdH1cblx0fVxufTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vbGlzdC5kLnRzJykubGlzdEdldH0gKi9cbnZhciBsaXN0R2V0ID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHRpZiAoIW9iamVjdHMpIHtcblx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdH1cblx0dmFyIG5vZGUgPSBsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xuXHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlO1xufTtcbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2xpc3QuZC50cycpLmxpc3RTZXR9ICovXG52YXIgbGlzdFNldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXksIHZhbHVlKSB7XG5cdHZhciBub2RlID0gbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcblx0aWYgKG5vZGUpIHtcblx0XHRub2RlLnZhbHVlID0gdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gUHJlcGVuZCB0aGUgbmV3IG5vZGUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdFxuXHRcdG9iamVjdHMubmV4dCA9IC8qKiBAdHlwZSB7aW1wb3J0KCcuL2xpc3QuZC50cycpLkxpc3ROb2RlPHR5cGVvZiB2YWx1ZSwgdHlwZW9mIGtleT59ICovICh7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLWV4dHJhLXBhcmVuc1xuXHRcdFx0a2V5OiBrZXksXG5cdFx0XHRuZXh0OiBvYmplY3RzLm5leHQsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9KTtcblx0fVxufTtcbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2xpc3QuZC50cycpLmxpc3RIYXN9ICovXG52YXIgbGlzdEhhcyA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHtcblx0aWYgKCFvYmplY3RzKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiAhIWxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG59O1xuLyoqIEB0eXBlIHtpbXBvcnQoJy4vbGlzdC5kLnRzJykubGlzdERlbGV0ZX0gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGxpc3REZWxldGUgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5KSB7XG5cdGlmIChvYmplY3RzKSB7XG5cdFx0cmV0dXJuIGxpc3RHZXROb2RlKG9iamVjdHMsIGtleSwgdHJ1ZSk7XG5cdH1cbn07XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFNpZGVDaGFubmVsTGlzdCgpIHtcblx0LyoqIEB0eXBlZGVmIHtSZXR1cm5UeXBlPHR5cGVvZiBnZXRTaWRlQ2hhbm5lbExpc3Q+fSBDaGFubmVsICovXG5cdC8qKiBAdHlwZWRlZiB7UGFyYW1ldGVyczxDaGFubmVsWydnZXQnXT5bMF19IEsgKi9cblx0LyoqIEB0eXBlZGVmIHtQYXJhbWV0ZXJzPENoYW5uZWxbJ3NldCddPlsxXX0gViAqL1xuXG5cdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2xpc3QuZC50cycpLlJvb3ROb2RlPFYsIEs+IHwgdW5kZWZpbmVkfSAqLyB2YXIgJG87XG5cblx0LyoqIEB0eXBlIHtDaGFubmVsfSAqL1xuXHR2YXIgY2hhbm5lbCA9IHtcblx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0dmFyIHJvb3QgPSAkbyAmJiAkby5uZXh0O1xuXHRcdFx0dmFyIGRlbGV0ZWROb2RlID0gbGlzdERlbGV0ZSgkbywga2V5KTtcblx0XHRcdGlmIChkZWxldGVkTm9kZSAmJiByb290ICYmIHJvb3QgPT09IGRlbGV0ZWROb2RlKSB7XG5cdFx0XHRcdCRvID0gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gISFkZWxldGVkTm9kZTtcblx0XHR9LFxuXHRcdGdldDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGxpc3RHZXQoJG8sIGtleSk7XG5cdFx0fSxcblx0XHRoYXM6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBsaXN0SGFzKCRvLCBrZXkpO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCEkbykge1xuXHRcdFx0XHQvLyBJbml0aWFsaXplIHRoZSBsaW5rZWQgbGlzdCBhcyBhbiBlbXB0eSBub2RlLCBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gc3BlY2lhbC1jYXNlIGhhbmRsaW5nIG9mIHRoZSBmaXJzdCBub2RlOiB3ZSBjYW4gYWx3YXlzIHJlZmVyIHRvIGl0IGFzIChwcmV2aW91cyBub2RlKS5uZXh0LCBpbnN0ZWFkIG9mIHNvbWV0aGluZyBsaWtlIChsaXN0KS5oZWFkXG5cdFx0XHRcdCRvID0ge1xuXHRcdFx0XHRcdG5leHQ6IHZvaWQgdW5kZWZpbmVkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG5cdFx0XHRsaXN0U2V0KC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8dHlwZW9mICRvPn0gKi8gKCRvKSwga2V5LCB2YWx1ZSk7XG5cdFx0fVxuXHR9O1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGZpZ3VyZSBvdXQgd2h5IHRoaXMgaXMgZXJyb3Jpbmdcblx0cmV0dXJuIGNoYW5uZWw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZXZhbCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFdmFsRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3JhbmdlJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFJhbmdlRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3JlZicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBSZWZlcmVuY2VFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vc3ludGF4Jyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRheEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi91cmknKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gVVJJRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2FicycpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmFicztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZmxvb3InKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mbG9vcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vbWF4Jyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubWF4O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9taW4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5taW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3BvdycpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnBvdztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcm91bmQnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5yb3VuZDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4vaXNOYU4nKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vc2lnbicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaWduKG51bWJlcikge1xuXHRpZiAoJGlzTmFOKG51bWJlcikgfHwgbnVtYmVyID09PSAwKSB7XG5cdFx0cmV0dXJuIG51bWJlcjtcblx0fVxuXHRyZXR1cm4gbnVtYmVyIDwgMCA/IC0xIDogKzE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9pc05hTicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOYU4oYSkge1xuXHRyZXR1cm4gYSAhPT0gYTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2dPUEQnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgfHwgZmFsc2U7XG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGRlZmluZVByb3BlcnR5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3JpZ1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNOYXRpdmVTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2woJ2ZvbycpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2woJ2JhcicpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRyZXR1cm4gaGFzU3ltYm9sU2hhbSgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vc2hhbXMnKX0gKi9cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0LyoqIEB0eXBlIHt7IFtrIGluIHN5bWJvbF0/OiB1bmtub3duIH19ICovXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAodmFyIF8gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xuXHRcdHZhciBkZXNjcmlwdG9yID0gLyoqIEB0eXBlIHtQcm9wZXJ0eURlc2NyaXB0b3J9ICovIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWZsZWN0R2V0UHJvdG8gPSByZXF1aXJlKCcuL1JlZmxlY3QuZ2V0UHJvdG90eXBlT2YnKTtcbnZhciBvcmlnaW5hbEdldFByb3RvID0gcmVxdWlyZSgnLi9PYmplY3QuZ2V0UHJvdG90eXBlT2YnKTtcblxudmFyIGdldER1bmRlclByb3RvID0gcmVxdWlyZSgnZHVuZGVyLXByb3RvL2dldCcpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSByZWZsZWN0R2V0UHJvdG9cblx0PyBmdW5jdGlvbiBnZXRQcm90byhPKSB7XG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUUyBjYW4ndCBuYXJyb3cgaW5zaWRlIGEgY2xvc3VyZSwgZm9yIHNvbWUgcmVhc29uXG5cdFx0cmV0dXJuIHJlZmxlY3RHZXRQcm90byhPKTtcblx0fVxuXHQ6IG9yaWdpbmFsR2V0UHJvdG9cblx0XHQ/IGZ1bmN0aW9uIGdldFByb3RvKE8pIHtcblx0XHRcdGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXRQcm90bzogbm90IGFuIG9iamVjdCcpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUUyBjYW4ndCBuYXJyb3cgaW5zaWRlIGEgY2xvc3VyZSwgZm9yIHNvbWUgcmVhc29uXG5cdFx0XHRyZXR1cm4gb3JpZ2luYWxHZXRQcm90byhPKTtcblx0XHR9XG5cdFx0OiBnZXREdW5kZXJQcm90b1xuXHRcdFx0PyBmdW5jdGlvbiBnZXRQcm90byhPKSB7XG5cdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgY2FuJ3QgbmFycm93IGluc2lkZSBhIGNsb3N1cmUsIGZvciBzb21lIHJlYXNvblxuXHRcdFx0XHRyZXR1cm4gZ2V0RHVuZGVyUHJvdG8oTyk7XG5cdFx0XHR9XG5cdFx0XHQ6IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC1hcHBseS1oZWxwZXJzJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJ2dvcGQnKTtcblxudmFyIGhhc1Byb3RvQWNjZXNzb3I7XG50cnkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zLCBuby1wcm90b1xuXHRoYXNQcm90b0FjY2Vzc29yID0gLyoqIEB0eXBlIHt7IF9fcHJvdG9fXz86IHR5cGVvZiBBcnJheS5wcm90b3R5cGUgfX0gKi8gKFtdKS5fX3Byb3RvX18gPT09IEFycmF5LnByb3RvdHlwZTtcbn0gY2F0Y2ggKGUpIHtcblx0aWYgKCFlIHx8IHR5cGVvZiBlICE9PSAnb2JqZWN0JyB8fCAhKCdjb2RlJyBpbiBlKSB8fCBlLmNvZGUgIT09ICdFUlJfUFJPVE9fQUNDRVNTJykge1xuXHRcdHRocm93IGU7XG5cdH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xudmFyIGRlc2MgPSAhIWhhc1Byb3RvQWNjZXNzb3IgJiYgZ09QRCAmJiBnT1BEKE9iamVjdC5wcm90b3R5cGUsIC8qKiBAdHlwZSB7a2V5b2YgdHlwZW9mIE9iamVjdC5wcm90b3R5cGV9ICovICgnX19wcm90b19fJykpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSAkT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9nZXQnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZGVzYyAmJiB0eXBlb2YgZGVzYy5nZXQgPT09ICdmdW5jdGlvbidcblx0PyBjYWxsQmluZChbZGVzYy5nZXRdKVxuXHQ6IHR5cGVvZiAkZ2V0UHJvdG90eXBlT2YgPT09ICdmdW5jdGlvbidcblx0XHQ/IC8qKiBAdHlwZSB7aW1wb3J0KCcuL2dldCcpfSAqLyBmdW5jdGlvbiBnZXREdW5kZXIodmFsdWUpIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdHJldHVybiAkZ2V0UHJvdG90eXBlT2YodmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogJE9iamVjdCh2YWx1ZSkpO1xuXHRcdH1cblx0XHQ6IGZhbHNlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG52YXIgY29uY2F0dHkgPSBmdW5jdGlvbiBjb25jYXR0eShhLCBiKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycltpXSA9IGFbaV07XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhcnJbaiArIGEubGVuZ3RoXSA9IGJbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcbn07XG5cbnZhciBzbGljeSA9IGZ1bmN0aW9uIHNsaWN5KGFyckxpa2UsIG9mZnNldCkge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gb2Zmc2V0IHx8IDAsIGogPSAwOyBpIDwgYXJyTGlrZS5sZW5ndGg7IGkgKz0gMSwgaiArPSAxKSB7XG4gICAgICAgIGFycltqXSA9IGFyckxpa2VbaV07XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgam9pbnkgPSBmdW5jdGlvbiAoYXJyLCBqb2luZXIpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGFycltpXTtcbiAgICAgICAgaWYgKGkgKyAxIDwgYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RyICs9IGpvaW5lcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5hcHBseSh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWN5KGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgKTtcblxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBtYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJnc1tpXSA9ICckJyArIGk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGpvaW55KGJvdW5kQXJncywgJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxudmFyICRhcHBseSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25BcHBseScpO1xudmFyICRjYWxsID0gcmVxdWlyZSgnLi9mdW5jdGlvbkNhbGwnKTtcbnZhciAkcmVmbGVjdEFwcGx5ID0gcmVxdWlyZSgnLi9yZWZsZWN0QXBwbHknKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vYWN0dWFsQXBwbHknKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gJHJlZmxlY3RBcHBseSB8fCBiaW5kLmNhbGwoJGNhbGwsICRhcHBseSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3JlZmxlY3RBcHBseScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgUmVmbGVjdCAmJiBSZWZsZWN0LmFwcGx5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xudmFyICRoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChjYWxsLCAkaGFzT3duKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJvdW5kJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG52YXIgZ2V0U2lkZUNoYW5uZWxNYXAgPSByZXF1aXJlKCdzaWRlLWNoYW5uZWwtbWFwJyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkV2Vha01hcCA9IEdldEludHJpbnNpYygnJVdlYWtNYXAlJywgdHJ1ZSk7XG5cbi8qKiBAdHlwZSB7PEsgZXh0ZW5kcyBvYmplY3QsIFY+KHRoaXNBcmc6IFdlYWtNYXA8SywgVj4sIGtleTogSykgPT4gVn0gKi9cbnZhciAkd2Vha01hcEdldCA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuZ2V0JywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLIGV4dGVuZHMgb2JqZWN0LCBWPih0aGlzQXJnOiBXZWFrTWFwPEssIFY+LCBrZXk6IEssIHZhbHVlOiBWKSA9PiB2b2lkfSAqL1xudmFyICR3ZWFrTWFwU2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEsgZXh0ZW5kcyBvYmplY3QsIFY+KHRoaXNBcmc6IFdlYWtNYXA8SywgVj4sIGtleTogSykgPT4gYm9vbGVhbn0gKi9cbnZhciAkd2Vha01hcEhhcyA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLIGV4dGVuZHMgb2JqZWN0LCBWPih0aGlzQXJnOiBXZWFrTWFwPEssIFY+LCBrZXk6IEspID0+IGJvb2xlYW59ICovXG52YXIgJHdlYWtNYXBEZWxldGUgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmRlbGV0ZScsIHRydWUpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSAkV2Vha01hcFxuXHQ/IC8qKiBAdHlwZSB7RXhjbHVkZTxpbXBvcnQoJy4nKSwgZmFsc2U+fSAqLyBmdW5jdGlvbiBnZXRTaWRlQ2hhbm5lbFdlYWtNYXAoKSB7XG5cdFx0LyoqIEB0eXBlZGVmIHtSZXR1cm5UeXBlPHR5cGVvZiBnZXRTaWRlQ2hhbm5lbFdlYWtNYXA+fSBDaGFubmVsICovXG5cdFx0LyoqIEB0eXBlZGVmIHtQYXJhbWV0ZXJzPENoYW5uZWxbJ2dldCddPlswXX0gSyAqL1xuXHRcdC8qKiBAdHlwZWRlZiB7UGFyYW1ldGVyczxDaGFubmVsWydzZXQnXT5bMV19IFYgKi9cblxuXHRcdC8qKiBAdHlwZSB7V2Vha01hcDxLICYgb2JqZWN0LCBWPiB8IHVuZGVmaW5lZH0gKi8gdmFyICR3bTtcblx0XHQvKiogQHR5cGUge0NoYW5uZWwgfCB1bmRlZmluZWR9ICovIHZhciAkbTtcblxuXHRcdC8qKiBAdHlwZSB7Q2hhbm5lbH0gKi9cblx0XHR2YXIgY2hhbm5lbCA9IHtcblx0XHRcdGFzc2VydDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRpZiAoIWNoYW5uZWwuaGFzKGtleSkpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRcdGlmICgkd20pIHtcblx0XHRcdFx0XHRcdHJldHVybiAkd2Vha01hcERlbGV0ZSgkd20sIGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGdldFNpZGVDaGFubmVsTWFwKSB7XG5cdFx0XHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJG1bJ2RlbGV0ZSddKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJHdlYWtNYXBHZXQoJHdtLCBrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gJG0gJiYgJG0uZ2V0KGtleSk7XG5cdFx0XHR9LFxuXHRcdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwSGFzKCR3bSwga2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICEhJG0gJiYgJG0uaGFzKGtleSk7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRcdGlmICghJHdtKSB7XG5cdFx0XHRcdFx0XHQkd20gPSBuZXcgJFdlYWtNYXAoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0JHdlYWtNYXBTZXQoJHdtLCBrZXksIHZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIGlmIChnZXRTaWRlQ2hhbm5lbE1hcCkge1xuXHRcdFx0XHRcdGlmICghJG0pIHtcblx0XHRcdFx0XHRcdCRtID0gZ2V0U2lkZUNoYW5uZWxNYXAoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xuXHRcdFx0XHRcdC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8dHlwZW9mICRtPn0gKi8gKCRtKS5zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBmaWd1cmUgb3V0IHdoeSB0aGlzIGlzIGVycm9yaW5nXG5cdFx0cmV0dXJuIGNoYW5uZWw7XG5cdH1cblx0OiBnZXRTaWRlQ2hhbm5lbE1hcDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dFbXB0eUFycmF5czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZSxcbiAgICBhbGxvd1NwYXJzZTogZmFsc2UsXG4gICAgYXJyYXlMaW1pdDogMjAsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGNvbW1hOiBmYWxzZSxcbiAgICBkZWNvZGVEb3RJbktleXM6IGZhbHNlLFxuICAgIGRlY29kZXI6IHV0aWxzLmRlY29kZSxcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBkZXB0aDogNSxcbiAgICBkdXBsaWNhdGVzOiAnY29tYmluZScsXG4gICAgaWdub3JlUXVlcnlQcmVmaXg6IGZhbHNlLFxuICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogZmFsc2UsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDAsXG4gICAgcGFyc2VBcnJheXM6IHRydWUsXG4gICAgcGxhaW5PYmplY3RzOiBmYWxzZSxcbiAgICBzdHJpY3REZXB0aDogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZSxcbiAgICB0aHJvd09uTGltaXRFeGNlZWRlZDogZmFsc2Vcbn07XG5cbnZhciBpbnRlcnByZXROdW1lcmljRW50aXRpZXMgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mIyhcXGQrKTsvZywgZnVuY3Rpb24gKCQwLCBudW1iZXJTdHIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobnVtYmVyU3RyLCAxMCkpO1xuICAgIH0pO1xufTtcblxudmFyIHBhcnNlQXJyYXlWYWx1ZSA9IGZ1bmN0aW9uICh2YWwsIG9wdGlvbnMsIGN1cnJlbnRBcnJheUxlbmd0aCkge1xuICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5jb21tYSAmJiB2YWwuaW5kZXhPZignLCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5zcGxpdCgnLCcpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnRocm93T25MaW1pdEV4Y2VlZGVkICYmIGN1cnJlbnRBcnJheUxlbmd0aCA+PSBvcHRpb25zLmFycmF5TGltaXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0FycmF5IGxpbWl0IGV4Y2VlZGVkLiBPbmx5ICcgKyBvcHRpb25zLmFycmF5TGltaXQgKyAnIGVsZW1lbnQnICsgKG9wdGlvbnMuYXJyYXlMaW1pdCA9PT0gMSA/ICcnIDogJ3MnKSArICcgYWxsb3dlZCBpbiBhbiBhcnJheS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xufTtcblxuLy8gVGhpcyBpcyB3aGF0IGJyb3dzZXJzIHdpbGwgc3VibWl0IHdoZW4gdGhlIOKckyBjaGFyYWN0ZXIgb2NjdXJzIGluIGFuXG4vLyBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgYm9keSBhbmQgdGhlIGVuY29kaW5nIG9mIHRoZSBwYWdlIGNvbnRhaW5pbmdcbi8vIHRoZSBmb3JtIGlzIGlzby04ODU5LTEsIG9yIHdoZW4gdGhlIHN1Ym1pdHRlZCBmb3JtIGhhcyBhbiBhY2NlcHQtY2hhcnNldFxuLy8gYXR0cmlidXRlIG9mIGlzby04ODU5LTEuIFByZXN1bWFibHkgYWxzbyB3aXRoIG90aGVyIGNoYXJzZXRzIHRoYXQgZG8gbm90IGNvbnRhaW5cbi8vIHRoZSDinJMgY2hhcmFjdGVyLCBzdWNoIGFzIHVzLWFzY2lpLlxudmFyIGlzb1NlbnRpbmVsID0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0InOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JylcblxuLy8gVGhlc2UgYXJlIHRoZSBwZXJjZW50LWVuY29kZWQgdXRmLTggb2N0ZXRzIHJlcHJlc2VudGluZyBhIGNoZWNrbWFyaywgaW5kaWNhdGluZyB0aGF0IHRoZSByZXF1ZXN0IGFjdHVhbGx5IGlzIHV0Zi04IGVuY29kZWQuXG52YXIgY2hhcnNldFNlbnRpbmVsID0gJ3V0Zjg9JUUyJTlDJTkzJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCfinJMnKVxuXG52YXIgcGFyc2VWYWx1ZXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nVmFsdWVzKHN0ciwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSB7IF9fcHJvdG9fXzogbnVsbCB9O1xuXG4gICAgdmFyIGNsZWFuU3RyID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA/IHN0ci5yZXBsYWNlKC9eXFw/LywgJycpIDogc3RyO1xuICAgIGNsZWFuU3RyID0gY2xlYW5TdHIucmVwbGFjZSgvJTVCL2dpLCAnWycpLnJlcGxhY2UoLyU1RC9naSwgJ10nKTtcblxuICAgIHZhciBsaW1pdCA9IG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09IEluZmluaXR5ID8gdW5kZWZpbmVkIDogb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdDtcbiAgICB2YXIgcGFydHMgPSBjbGVhblN0ci5zcGxpdChcbiAgICAgICAgb3B0aW9ucy5kZWxpbWl0ZXIsXG4gICAgICAgIG9wdGlvbnMudGhyb3dPbkxpbWl0RXhjZWVkZWQgPyBsaW1pdCArIDEgOiBsaW1pdFxuICAgICk7XG5cbiAgICBpZiAob3B0aW9ucy50aHJvd09uTGltaXRFeGNlZWRlZCAmJiBwYXJ0cy5sZW5ndGggPiBsaW1pdCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignUGFyYW1ldGVyIGxpbWl0IGV4Y2VlZGVkLiBPbmx5ICcgKyBsaW1pdCArICcgcGFyYW1ldGVyJyArIChsaW1pdCA9PT0gMSA/ICcnIDogJ3MnKSArICcgYWxsb3dlZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgc2tpcEluZGV4ID0gLTE7IC8vIEtlZXAgdHJhY2sgb2Ygd2hlcmUgdGhlIHV0Zjggc2VudGluZWwgd2FzIGZvdW5kXG4gICAgdmFyIGk7XG5cbiAgICB2YXIgY2hhcnNldCA9IG9wdGlvbnMuY2hhcnNldDtcbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAocGFydHNbaV0uaW5kZXhPZigndXRmOD0nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAndXRmLTgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydHNbaV0gPT09IGlzb1NlbnRpbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAnaXNvLTg4NTktMSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNraXBJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaSA9IHBhcnRzLmxlbmd0aDsgLy8gVGhlIGVzbGludCBzZXR0aW5ncyBkbyBub3QgYWxsb3cgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGkgPT09IHNraXBJbmRleCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcblxuICAgICAgICB2YXIgYnJhY2tldEVxdWFsc1BvcyA9IHBhcnQuaW5kZXhPZignXT0nKTtcbiAgICAgICAgdmFyIHBvcyA9IGJyYWNrZXRFcXVhbHNQb3MgPT09IC0xID8gcGFydC5pbmRleE9mKCc9JykgOiBicmFja2V0RXF1YWxzUG9zICsgMTtcblxuICAgICAgICB2YXIga2V5O1xuICAgICAgICB2YXIgdmFsO1xuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID8gbnVsbCA6ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UoMCwgcG9zKSwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuXG4gICAgICAgICAgICB2YWwgPSB1dGlscy5tYXliZU1hcChcbiAgICAgICAgICAgICAgICBwYXJzZUFycmF5VmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIHBhcnQuc2xpY2UocG9zICsgMSksXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkob2JqW2tleV0pID8gb2JqW2tleV0ubGVuZ3RoIDogMFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVuY29kZWRWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGVjb2RlcihlbmNvZGVkVmFsLCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAndmFsdWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCAmJiBvcHRpb25zLmludGVycHJldE51bWVyaWNFbnRpdGllcyAmJiBjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIHZhbCA9IGludGVycHJldE51bWVyaWNFbnRpdGllcyhTdHJpbmcodmFsKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFydC5pbmRleE9mKCdbXT0nKSA+IC0xKSB7XG4gICAgICAgICAgICB2YWwgPSBpc0FycmF5KHZhbCkgPyBbdmFsXSA6IHZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBleGlzdGluZyA9IGhhcy5jYWxsKG9iaiwga2V5KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nICYmIG9wdGlvbnMuZHVwbGljYXRlcyA9PT0gJ2NvbWJpbmUnKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHV0aWxzLmNvbWJpbmUob2JqW2tleV0sIHZhbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWV4aXN0aW5nIHx8IG9wdGlvbnMuZHVwbGljYXRlcyA9PT0gJ2xhc3QnKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgcGFyc2VPYmplY3QgPSBmdW5jdGlvbiAoY2hhaW4sIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKSB7XG4gICAgdmFyIGN1cnJlbnRBcnJheUxlbmd0aCA9IDA7XG4gICAgaWYgKGNoYWluLmxlbmd0aCA+IDAgJiYgY2hhaW5bY2hhaW4ubGVuZ3RoIC0gMV0gPT09ICdbXScpIHtcbiAgICAgICAgdmFyIHBhcmVudEtleSA9IGNoYWluLnNsaWNlKDAsIC0xKS5qb2luKCcnKTtcbiAgICAgICAgY3VycmVudEFycmF5TGVuZ3RoID0gQXJyYXkuaXNBcnJheSh2YWwpICYmIHZhbFtwYXJlbnRLZXldID8gdmFsW3BhcmVudEtleV0ubGVuZ3RoIDogMDtcbiAgICB9XG5cbiAgICB2YXIgbGVhZiA9IHZhbHVlc1BhcnNlZCA/IHZhbCA6IHBhcnNlQXJyYXlWYWx1ZSh2YWwsIG9wdGlvbnMsIGN1cnJlbnRBcnJheUxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gY2hhaW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIG9iajtcbiAgICAgICAgdmFyIHJvb3QgPSBjaGFpbltpXTtcblxuICAgICAgICBpZiAocm9vdCA9PT0gJ1tdJyAmJiBvcHRpb25zLnBhcnNlQXJyYXlzKSB7XG4gICAgICAgICAgICBvYmogPSBvcHRpb25zLmFsbG93RW1wdHlBcnJheXMgJiYgKGxlYWYgPT09ICcnIHx8IChvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyAmJiBsZWFmID09PSBudWxsKSlcbiAgICAgICAgICAgICAgICA/IFtdXG4gICAgICAgICAgICAgICAgOiB1dGlscy5jb21iaW5lKFtdLCBsZWFmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8geyBfX3Byb3RvX186IG51bGwgfSA6IHt9O1xuICAgICAgICAgICAgdmFyIGNsZWFuUm9vdCA9IHJvb3QuY2hhckF0KDApID09PSAnWycgJiYgcm9vdC5jaGFyQXQocm9vdC5sZW5ndGggLSAxKSA9PT0gJ10nID8gcm9vdC5zbGljZSgxLCAtMSkgOiByb290O1xuICAgICAgICAgICAgdmFyIGRlY29kZWRSb290ID0gb3B0aW9ucy5kZWNvZGVEb3RJbktleXMgPyBjbGVhblJvb3QucmVwbGFjZSgvJTJFL2csICcuJykgOiBjbGVhblJvb3Q7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChkZWNvZGVkUm9vdCwgMTApO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBhcnNlQXJyYXlzICYmIGRlY29kZWRSb290ID09PSAnJykge1xuICAgICAgICAgICAgICAgIG9iaiA9IHsgMDogbGVhZiB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAhaXNOYU4oaW5kZXgpXG4gICAgICAgICAgICAgICAgJiYgcm9vdCAhPT0gZGVjb2RlZFJvb3RcbiAgICAgICAgICAgICAgICAmJiBTdHJpbmcoaW5kZXgpID09PSBkZWNvZGVkUm9vdFxuICAgICAgICAgICAgICAgICYmIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICAmJiAob3B0aW9ucy5wYXJzZUFycmF5cyAmJiBpbmRleCA8PSBvcHRpb25zLmFycmF5TGltaXQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgICAgICBvYmpbaW5kZXhdID0gbGVhZjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVjb2RlZFJvb3QgIT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgICAgICAgICAgb2JqW2RlY29kZWRSb290XSA9IGxlYWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZWFmID0gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiBsZWFmO1xufTtcblxudmFyIHBhcnNlS2V5cyA9IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdLZXlzKGdpdmVuS2V5LCB2YWwsIG9wdGlvbnMsIHZhbHVlc1BhcnNlZCkge1xuICAgIGlmICghZ2l2ZW5LZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRyYW5zZm9ybSBkb3Qgbm90YXRpb24gdG8gYnJhY2tldCBub3RhdGlvblxuICAgIHZhciBrZXkgPSBvcHRpb25zLmFsbG93RG90cyA/IGdpdmVuS2V5LnJlcGxhY2UoL1xcLihbXi5bXSspL2csICdbJDFdJykgOiBnaXZlbktleTtcblxuICAgIC8vIFRoZSByZWdleCBjaHVua3NcblxuICAgIHZhciBicmFja2V0cyA9IC8oXFxbW15bXFxdXSpdKS87XG4gICAgdmFyIGNoaWxkID0gLyhcXFtbXltcXF1dKl0pL2c7XG5cbiAgICAvLyBHZXQgdGhlIHBhcmVudFxuXG4gICAgdmFyIHNlZ21lbnQgPSBvcHRpb25zLmRlcHRoID4gMCAmJiBicmFja2V0cy5leGVjKGtleSk7XG4gICAgdmFyIHBhcmVudCA9IHNlZ21lbnQgPyBrZXkuc2xpY2UoMCwgc2VnbWVudC5pbmRleCkgOiBrZXk7XG5cbiAgICAvLyBTdGFzaCB0aGUgcGFyZW50IGlmIGl0IGV4aXN0c1xuXG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIC8vIElmIHdlIGFyZW4ndCB1c2luZyBwbGFpbiBvYmplY3RzLCBvcHRpb25hbGx5IHByZWZpeCBrZXlzIHRoYXQgd291bGQgb3ZlcndyaXRlIG9iamVjdCBwcm90b3R5cGUgcHJvcGVydGllc1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHBhcmVudCkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzLnB1c2gocGFyZW50KTtcbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggY2hpbGRyZW4gYXBwZW5kaW5nIHRvIHRoZSBhcnJheSB1bnRpbCB3ZSBoaXQgZGVwdGhcblxuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAob3B0aW9ucy5kZXB0aCA+IDAgJiYgKHNlZ21lbnQgPSBjaGlsZC5leGVjKGtleSkpICE9PSBudWxsICYmIGkgPCBvcHRpb25zLmRlcHRoKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzZWdtZW50WzFdLnNsaWNlKDEsIC0xKSkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlJ3MgYSByZW1haW5kZXIsIGNoZWNrIHN0cmljdERlcHRoIG9wdGlvbiBmb3IgdGhyb3csIGVsc2UganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RyaWN0RGVwdGggPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnB1dCBkZXB0aCBleGNlZWRlZCBkZXB0aCBvcHRpb24gb2YgJyArIG9wdGlvbnMuZGVwdGggKyAnIGFuZCBzdHJpY3REZXB0aCBpcyB0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKTtcbn07XG5cbnZhciBub3JtYWxpemVQYXJzZU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgYWxsb3dFbXB0eUFycmF5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmRlY29kZURvdEluS2V5cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuZGVjb2RlRG90SW5LZXlzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGRlY29kZURvdEluS2V5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZGVjb2RlciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0cy5kZWNvZGVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5kZWNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RlY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmNoYXJzZXQgIT09ICd1bmRlZmluZWQnICYmIG9wdHMuY2hhcnNldCAhPT0gJ3V0Zi04JyAmJiBvcHRzLmNoYXJzZXQgIT09ICdpc28tODg1OS0xJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy50aHJvd09uTGltaXRFeGNlZWRlZCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMudGhyb3dPbkxpbWl0RXhjZWVkZWQgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgdGhyb3dPbkxpbWl0RXhjZWVkZWRgIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbicpO1xuICAgIH1cblxuICAgIHZhciBjaGFyc2V0ID0gdHlwZW9mIG9wdHMuY2hhcnNldCA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5jaGFyc2V0IDogb3B0cy5jaGFyc2V0O1xuXG4gICAgdmFyIGR1cGxpY2F0ZXMgPSB0eXBlb2Ygb3B0cy5kdXBsaWNhdGVzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmR1cGxpY2F0ZXMgOiBvcHRzLmR1cGxpY2F0ZXM7XG5cbiAgICBpZiAoZHVwbGljYXRlcyAhPT0gJ2NvbWJpbmUnICYmIGR1cGxpY2F0ZXMgIT09ICdmaXJzdCcgJiYgZHVwbGljYXRlcyAhPT0gJ2xhc3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBkdXBsaWNhdGVzIG9wdGlvbiBtdXN0IGJlIGVpdGhlciBjb21iaW5lLCBmaXJzdCwgb3IgbGFzdCcpO1xuICAgIH1cblxuICAgIHZhciBhbGxvd0RvdHMgPSB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gb3B0cy5kZWNvZGVEb3RJbktleXMgPT09IHRydWUgPyB0cnVlIDogZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cztcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93RG90czogYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd0VtcHR5QXJyYXlzOiB0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzID09PSAnYm9vbGVhbicgPyAhIW9wdHMuYWxsb3dFbXB0eUFycmF5cyA6IGRlZmF1bHRzLmFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgIGFsbG93UHJvdG90eXBlczogdHlwZW9mIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcyxcbiAgICAgICAgYWxsb3dTcGFyc2U6IHR5cGVvZiBvcHRzLmFsbG93U3BhcnNlID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93U3BhcnNlIDogZGVmYXVsdHMuYWxsb3dTcGFyc2UsXG4gICAgICAgIGFycmF5TGltaXQ6IHR5cGVvZiBvcHRzLmFycmF5TGltaXQgPT09ICdudW1iZXInID8gb3B0cy5hcnJheUxpbWl0IDogZGVmYXVsdHMuYXJyYXlMaW1pdCxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBjb21tYTogdHlwZW9mIG9wdHMuY29tbWEgPT09ICdib29sZWFuJyA/IG9wdHMuY29tbWEgOiBkZWZhdWx0cy5jb21tYSxcbiAgICAgICAgZGVjb2RlRG90SW5LZXlzOiB0eXBlb2Ygb3B0cy5kZWNvZGVEb3RJbktleXMgPT09ICdib29sZWFuJyA/IG9wdHMuZGVjb2RlRG90SW5LZXlzIDogZGVmYXVsdHMuZGVjb2RlRG90SW5LZXlzLFxuICAgICAgICBkZWNvZGVyOiB0eXBlb2Ygb3B0cy5kZWNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5kZWNvZGVyIDogZGVmYXVsdHMuZGVjb2RlcixcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnIHx8IHV0aWxzLmlzUmVnRXhwKG9wdHMuZGVsaW1pdGVyKSA/IG9wdHMuZGVsaW1pdGVyIDogZGVmYXVsdHMuZGVsaW1pdGVyLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtY29lcmNpb24sIG5vLWV4dHJhLXBhcmVuc1xuICAgICAgICBkZXB0aDogKHR5cGVvZiBvcHRzLmRlcHRoID09PSAnbnVtYmVyJyB8fCBvcHRzLmRlcHRoID09PSBmYWxzZSkgPyArb3B0cy5kZXB0aCA6IGRlZmF1bHRzLmRlcHRoLFxuICAgICAgICBkdXBsaWNhdGVzOiBkdXBsaWNhdGVzLFxuICAgICAgICBpZ25vcmVRdWVyeVByZWZpeDogb3B0cy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZSxcbiAgICAgICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiB0eXBlb2Ygb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgPT09ICdib29sZWFuJyA/IG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIDogZGVmYXVsdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzLFxuICAgICAgICBwYXJhbWV0ZXJMaW1pdDogdHlwZW9mIG9wdHMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0cy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0LFxuICAgICAgICBwYXJzZUFycmF5czogb3B0cy5wYXJzZUFycmF5cyAhPT0gZmFsc2UsXG4gICAgICAgIHBsYWluT2JqZWN0czogdHlwZW9mIG9wdHMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRzLnBsYWluT2JqZWN0cyA6IGRlZmF1bHRzLnBsYWluT2JqZWN0cyxcbiAgICAgICAgc3RyaWN0RGVwdGg6IHR5cGVvZiBvcHRzLnN0cmljdERlcHRoID09PSAnYm9vbGVhbicgPyAhIW9wdHMuc3RyaWN0RGVwdGggOiBkZWZhdWx0cy5zdHJpY3REZXB0aCxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICB0aHJvd09uTGltaXRFeGNlZWRlZDogdHlwZW9mIG9wdHMudGhyb3dPbkxpbWl0RXhjZWVkZWQgPT09ICdib29sZWFuJyA/IG9wdHMudGhyb3dPbkxpbWl0RXhjZWVkZWQgOiBmYWxzZVxuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKTtcblxuICAgIGlmIChzdHIgPT09ICcnIHx8IHN0ciA9PT0gbnVsbCB8fCB0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyB7IF9fcHJvdG9fXzogbnVsbCB9IDoge307XG4gICAgfVxuXG4gICAgdmFyIHRlbXBPYmogPSB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHBhcnNlVmFsdWVzKHN0ciwgb3B0aW9ucykgOiBzdHI7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8geyBfX3Byb3RvX186IG51bGwgfSA6IHt9O1xuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBrZXlzIGFuZCBzZXR1cCB0aGUgbmV3IG9iamVjdFxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciBuZXdPYmogPSBwYXJzZUtleXMoa2V5LCB0ZW1wT2JqW2tleV0sIG9wdGlvbnMsIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKTtcbiAgICAgICAgb2JqID0gdXRpbHMubWVyZ2Uob2JqLCBuZXdPYmosIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmFsbG93U3BhcnNlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLmNvbXBhY3Qob2JqKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vYWZcIjogNTQsXG5cdFwiLi9hZi5qc1wiOiA1NCxcblx0XCIuL2FyXCI6IDU1LFxuXHRcIi4vYXItZHpcIjogNTYsXG5cdFwiLi9hci1kei5qc1wiOiA1Nixcblx0XCIuL2FyLWt3XCI6IDU3LFxuXHRcIi4vYXIta3cuanNcIjogNTcsXG5cdFwiLi9hci1seVwiOiA1OCxcblx0XCIuL2FyLWx5LmpzXCI6IDU4LFxuXHRcIi4vYXItbWFcIjogNTksXG5cdFwiLi9hci1tYS5qc1wiOiA1OSxcblx0XCIuL2FyLXBzXCI6IDYwLFxuXHRcIi4vYXItcHMuanNcIjogNjAsXG5cdFwiLi9hci1zYVwiOiA2MSxcblx0XCIuL2FyLXNhLmpzXCI6IDYxLFxuXHRcIi4vYXItdG5cIjogNjIsXG5cdFwiLi9hci10bi5qc1wiOiA2Mixcblx0XCIuL2FyLmpzXCI6IDU1LFxuXHRcIi4vYXpcIjogNjMsXG5cdFwiLi9hei5qc1wiOiA2Myxcblx0XCIuL2JlXCI6IDY0LFxuXHRcIi4vYmUuanNcIjogNjQsXG5cdFwiLi9iZ1wiOiA2NSxcblx0XCIuL2JnLmpzXCI6IDY1LFxuXHRcIi4vYm1cIjogNjYsXG5cdFwiLi9ibS5qc1wiOiA2Nixcblx0XCIuL2JuXCI6IDY3LFxuXHRcIi4vYm4tYmRcIjogNjgsXG5cdFwiLi9ibi1iZC5qc1wiOiA2OCxcblx0XCIuL2JuLmpzXCI6IDY3LFxuXHRcIi4vYm9cIjogNjksXG5cdFwiLi9iby5qc1wiOiA2OSxcblx0XCIuL2JyXCI6IDcwLFxuXHRcIi4vYnIuanNcIjogNzAsXG5cdFwiLi9ic1wiOiA3MSxcblx0XCIuL2JzLmpzXCI6IDcxLFxuXHRcIi4vY2FcIjogNzIsXG5cdFwiLi9jYS5qc1wiOiA3Mixcblx0XCIuL2NzXCI6IDczLFxuXHRcIi4vY3MuanNcIjogNzMsXG5cdFwiLi9jdlwiOiA3NCxcblx0XCIuL2N2LmpzXCI6IDc0LFxuXHRcIi4vY3lcIjogNzUsXG5cdFwiLi9jeS5qc1wiOiA3NSxcblx0XCIuL2RhXCI6IDc2LFxuXHRcIi4vZGEuanNcIjogNzYsXG5cdFwiLi9kZVwiOiA3Nyxcblx0XCIuL2RlLWF0XCI6IDc4LFxuXHRcIi4vZGUtYXQuanNcIjogNzgsXG5cdFwiLi9kZS1jaFwiOiA3OSxcblx0XCIuL2RlLWNoLmpzXCI6IDc5LFxuXHRcIi4vZGUuanNcIjogNzcsXG5cdFwiLi9kdlwiOiA4MCxcblx0XCIuL2R2LmpzXCI6IDgwLFxuXHRcIi4vZWxcIjogODEsXG5cdFwiLi9lbC5qc1wiOiA4MSxcblx0XCIuL2VuLWF1XCI6IDgyLFxuXHRcIi4vZW4tYXUuanNcIjogODIsXG5cdFwiLi9lbi1jYVwiOiA4Myxcblx0XCIuL2VuLWNhLmpzXCI6IDgzLFxuXHRcIi4vZW4tZ2JcIjogODQsXG5cdFwiLi9lbi1nYi5qc1wiOiA4NCxcblx0XCIuL2VuLWllXCI6IDg1LFxuXHRcIi4vZW4taWUuanNcIjogODUsXG5cdFwiLi9lbi1pbFwiOiA4Nixcblx0XCIuL2VuLWlsLmpzXCI6IDg2LFxuXHRcIi4vZW4taW5cIjogODcsXG5cdFwiLi9lbi1pbi5qc1wiOiA4Nyxcblx0XCIuL2VuLW56XCI6IDg4LFxuXHRcIi4vZW4tbnouanNcIjogODgsXG5cdFwiLi9lbi1zZ1wiOiA4OSxcblx0XCIuL2VuLXNnLmpzXCI6IDg5LFxuXHRcIi4vZW9cIjogOTAsXG5cdFwiLi9lby5qc1wiOiA5MCxcblx0XCIuL2VzXCI6IDkxLFxuXHRcIi4vZXMtZG9cIjogOTIsXG5cdFwiLi9lcy1kby5qc1wiOiA5Mixcblx0XCIuL2VzLW14XCI6IDkzLFxuXHRcIi4vZXMtbXguanNcIjogOTMsXG5cdFwiLi9lcy11c1wiOiA5NCxcblx0XCIuL2VzLXVzLmpzXCI6IDk0LFxuXHRcIi4vZXMuanNcIjogOTEsXG5cdFwiLi9ldFwiOiA5NSxcblx0XCIuL2V0LmpzXCI6IDk1LFxuXHRcIi4vZXVcIjogOTYsXG5cdFwiLi9ldS5qc1wiOiA5Nixcblx0XCIuL2ZhXCI6IDk3LFxuXHRcIi4vZmEuanNcIjogOTcsXG5cdFwiLi9maVwiOiA5OCxcblx0XCIuL2ZpLmpzXCI6IDk4LFxuXHRcIi4vZmlsXCI6IDk5LFxuXHRcIi4vZmlsLmpzXCI6IDk5LFxuXHRcIi4vZm9cIjogMTAwLFxuXHRcIi4vZm8uanNcIjogMTAwLFxuXHRcIi4vZnJcIjogMTAxLFxuXHRcIi4vZnItY2FcIjogMTAyLFxuXHRcIi4vZnItY2EuanNcIjogMTAyLFxuXHRcIi4vZnItY2hcIjogMTAzLFxuXHRcIi4vZnItY2guanNcIjogMTAzLFxuXHRcIi4vZnIuanNcIjogMTAxLFxuXHRcIi4vZnlcIjogMTA0LFxuXHRcIi4vZnkuanNcIjogMTA0LFxuXHRcIi4vZ2FcIjogMTA1LFxuXHRcIi4vZ2EuanNcIjogMTA1LFxuXHRcIi4vZ2RcIjogMTA2LFxuXHRcIi4vZ2QuanNcIjogMTA2LFxuXHRcIi4vZ2xcIjogMTA3LFxuXHRcIi4vZ2wuanNcIjogMTA3LFxuXHRcIi4vZ29tLWRldmFcIjogMTA4LFxuXHRcIi4vZ29tLWRldmEuanNcIjogMTA4LFxuXHRcIi4vZ29tLWxhdG5cIjogMTA5LFxuXHRcIi4vZ29tLWxhdG4uanNcIjogMTA5LFxuXHRcIi4vZ3VcIjogMTEwLFxuXHRcIi4vZ3UuanNcIjogMTEwLFxuXHRcIi4vaGVcIjogMTExLFxuXHRcIi4vaGUuanNcIjogMTExLFxuXHRcIi4vaGlcIjogMTEyLFxuXHRcIi4vaGkuanNcIjogMTEyLFxuXHRcIi4vaHJcIjogMTEzLFxuXHRcIi4vaHIuanNcIjogMTEzLFxuXHRcIi4vaHVcIjogMTE0LFxuXHRcIi4vaHUuanNcIjogMTE0LFxuXHRcIi4vaHktYW1cIjogMTE1LFxuXHRcIi4vaHktYW0uanNcIjogMTE1LFxuXHRcIi4vaWRcIjogMTE2LFxuXHRcIi4vaWQuanNcIjogMTE2LFxuXHRcIi4vaXNcIjogMTE3LFxuXHRcIi4vaXMuanNcIjogMTE3LFxuXHRcIi4vaXRcIjogMTE4LFxuXHRcIi4vaXQtY2hcIjogMTE5LFxuXHRcIi4vaXQtY2guanNcIjogMTE5LFxuXHRcIi4vaXQuanNcIjogMTE4LFxuXHRcIi4vamFcIjogMTIwLFxuXHRcIi4vamEuanNcIjogMTIwLFxuXHRcIi4vanZcIjogMTIxLFxuXHRcIi4vanYuanNcIjogMTIxLFxuXHRcIi4va2FcIjogMTIyLFxuXHRcIi4va2EuanNcIjogMTIyLFxuXHRcIi4va2tcIjogMTIzLFxuXHRcIi4va2suanNcIjogMTIzLFxuXHRcIi4va21cIjogMTI0LFxuXHRcIi4va20uanNcIjogMTI0LFxuXHRcIi4va25cIjogMTI1LFxuXHRcIi4va24uanNcIjogMTI1LFxuXHRcIi4va29cIjogMTI2LFxuXHRcIi4va28uanNcIjogMTI2LFxuXHRcIi4va3VcIjogMTI3LFxuXHRcIi4va3Uta21yXCI6IDEyOCxcblx0XCIuL2t1LWttci5qc1wiOiAxMjgsXG5cdFwiLi9rdS5qc1wiOiAxMjcsXG5cdFwiLi9reVwiOiAxMjksXG5cdFwiLi9reS5qc1wiOiAxMjksXG5cdFwiLi9sYlwiOiAxMzAsXG5cdFwiLi9sYi5qc1wiOiAxMzAsXG5cdFwiLi9sb1wiOiAxMzEsXG5cdFwiLi9sby5qc1wiOiAxMzEsXG5cdFwiLi9sdFwiOiAxMzIsXG5cdFwiLi9sdC5qc1wiOiAxMzIsXG5cdFwiLi9sdlwiOiAxMzMsXG5cdFwiLi9sdi5qc1wiOiAxMzMsXG5cdFwiLi9tZVwiOiAxMzQsXG5cdFwiLi9tZS5qc1wiOiAxMzQsXG5cdFwiLi9taVwiOiAxMzUsXG5cdFwiLi9taS5qc1wiOiAxMzUsXG5cdFwiLi9ta1wiOiAxMzYsXG5cdFwiLi9tay5qc1wiOiAxMzYsXG5cdFwiLi9tbFwiOiAxMzcsXG5cdFwiLi9tbC5qc1wiOiAxMzcsXG5cdFwiLi9tblwiOiAxMzgsXG5cdFwiLi9tbi5qc1wiOiAxMzgsXG5cdFwiLi9tclwiOiAxMzksXG5cdFwiLi9tci5qc1wiOiAxMzksXG5cdFwiLi9tc1wiOiAxNDAsXG5cdFwiLi9tcy1teVwiOiAxNDEsXG5cdFwiLi9tcy1teS5qc1wiOiAxNDEsXG5cdFwiLi9tcy5qc1wiOiAxNDAsXG5cdFwiLi9tdFwiOiAxNDIsXG5cdFwiLi9tdC5qc1wiOiAxNDIsXG5cdFwiLi9teVwiOiAxNDMsXG5cdFwiLi9teS5qc1wiOiAxNDMsXG5cdFwiLi9uYlwiOiAxNDQsXG5cdFwiLi9uYi5qc1wiOiAxNDQsXG5cdFwiLi9uZVwiOiAxNDUsXG5cdFwiLi9uZS5qc1wiOiAxNDUsXG5cdFwiLi9ubFwiOiAxNDYsXG5cdFwiLi9ubC1iZVwiOiAxNDcsXG5cdFwiLi9ubC1iZS5qc1wiOiAxNDcsXG5cdFwiLi9ubC5qc1wiOiAxNDYsXG5cdFwiLi9ublwiOiAxNDgsXG5cdFwiLi9ubi5qc1wiOiAxNDgsXG5cdFwiLi9vYy1sbmNcIjogMTQ5LFxuXHRcIi4vb2MtbG5jLmpzXCI6IDE0OSxcblx0XCIuL3BhLWluXCI6IDE1MCxcblx0XCIuL3BhLWluLmpzXCI6IDE1MCxcblx0XCIuL3BsXCI6IDE1MSxcblx0XCIuL3BsLmpzXCI6IDE1MSxcblx0XCIuL3B0XCI6IDE1Mixcblx0XCIuL3B0LWJyXCI6IDE1Myxcblx0XCIuL3B0LWJyLmpzXCI6IDE1Myxcblx0XCIuL3B0LmpzXCI6IDE1Mixcblx0XCIuL3JvXCI6IDE1NCxcblx0XCIuL3JvLmpzXCI6IDE1NCxcblx0XCIuL3J1XCI6IDE1NSxcblx0XCIuL3J1LmpzXCI6IDE1NSxcblx0XCIuL3NkXCI6IDE1Nixcblx0XCIuL3NkLmpzXCI6IDE1Nixcblx0XCIuL3NlXCI6IDE1Nyxcblx0XCIuL3NlLmpzXCI6IDE1Nyxcblx0XCIuL3NpXCI6IDE1OCxcblx0XCIuL3NpLmpzXCI6IDE1OCxcblx0XCIuL3NrXCI6IDE1OSxcblx0XCIuL3NrLmpzXCI6IDE1OSxcblx0XCIuL3NsXCI6IDE2MCxcblx0XCIuL3NsLmpzXCI6IDE2MCxcblx0XCIuL3NxXCI6IDE2MSxcblx0XCIuL3NxLmpzXCI6IDE2MSxcblx0XCIuL3NyXCI6IDE2Mixcblx0XCIuL3NyLWN5cmxcIjogMTYzLFxuXHRcIi4vc3ItY3lybC5qc1wiOiAxNjMsXG5cdFwiLi9zci5qc1wiOiAxNjIsXG5cdFwiLi9zc1wiOiAxNjQsXG5cdFwiLi9zcy5qc1wiOiAxNjQsXG5cdFwiLi9zdlwiOiAxNjUsXG5cdFwiLi9zdi5qc1wiOiAxNjUsXG5cdFwiLi9zd1wiOiAxNjYsXG5cdFwiLi9zdy5qc1wiOiAxNjYsXG5cdFwiLi90YVwiOiAxNjcsXG5cdFwiLi90YS5qc1wiOiAxNjcsXG5cdFwiLi90ZVwiOiAxNjgsXG5cdFwiLi90ZS5qc1wiOiAxNjgsXG5cdFwiLi90ZXRcIjogMTY5LFxuXHRcIi4vdGV0LmpzXCI6IDE2OSxcblx0XCIuL3RnXCI6IDE3MCxcblx0XCIuL3RnLmpzXCI6IDE3MCxcblx0XCIuL3RoXCI6IDE3MSxcblx0XCIuL3RoLmpzXCI6IDE3MSxcblx0XCIuL3RrXCI6IDE3Mixcblx0XCIuL3RrLmpzXCI6IDE3Mixcblx0XCIuL3RsLXBoXCI6IDE3Myxcblx0XCIuL3RsLXBoLmpzXCI6IDE3Myxcblx0XCIuL3RsaFwiOiAxNzQsXG5cdFwiLi90bGguanNcIjogMTc0LFxuXHRcIi4vdHJcIjogMTc1LFxuXHRcIi4vdHIuanNcIjogMTc1LFxuXHRcIi4vdHpsXCI6IDE3Nixcblx0XCIuL3R6bC5qc1wiOiAxNzYsXG5cdFwiLi90em1cIjogMTc3LFxuXHRcIi4vdHptLWxhdG5cIjogMTc4LFxuXHRcIi4vdHptLWxhdG4uanNcIjogMTc4LFxuXHRcIi4vdHptLmpzXCI6IDE3Nyxcblx0XCIuL3VnLWNuXCI6IDE3OSxcblx0XCIuL3VnLWNuLmpzXCI6IDE3OSxcblx0XCIuL3VrXCI6IDE4MCxcblx0XCIuL3VrLmpzXCI6IDE4MCxcblx0XCIuL3VyXCI6IDE4MSxcblx0XCIuL3VyLmpzXCI6IDE4MSxcblx0XCIuL3V6XCI6IDE4Mixcblx0XCIuL3V6LWxhdG5cIjogMTgzLFxuXHRcIi4vdXotbGF0bi5qc1wiOiAxODMsXG5cdFwiLi91ei5qc1wiOiAxODIsXG5cdFwiLi92aVwiOiAxODQsXG5cdFwiLi92aS5qc1wiOiAxODQsXG5cdFwiLi94LXBzZXVkb1wiOiAxODUsXG5cdFwiLi94LXBzZXVkby5qc1wiOiAxODUsXG5cdFwiLi95b1wiOiAxODYsXG5cdFwiLi95by5qc1wiOiAxODYsXG5cdFwiLi96aC1jblwiOiAxODcsXG5cdFwiLi96aC1jbi5qc1wiOiAxODcsXG5cdFwiLi96aC1oa1wiOiAxODgsXG5cdFwiLi96aC1oay5qc1wiOiAxODgsXG5cdFwiLi96aC1tb1wiOiAxODksXG5cdFwiLi96aC1tby5qc1wiOiAxODksXG5cdFwiLi96aC10d1wiOiAxOTAsXG5cdFwiLi96aC10dy5qc1wiOiAxOTBcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyNjY7IiwiZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiByO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSB0KSB7XG4gICAgdmFyIGUsXG4gICAgICBuLFxuICAgICAgaSxcbiAgICAgIHUsXG4gICAgICBhID0gW10sXG4gICAgICBmID0gITAsXG4gICAgICBvID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuO1xuICAgICAgICBmID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdFtcInJldHVyblwiXSAmJiAodSA9IHRbXCJyZXR1cm5cIl0oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtcbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7XG4gIGlmIChyKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KHIsIGEpO1xuICAgIHZhciB0ID0ge30udG9TdHJpbmcuY2FsbChyKS5zbGljZSg4LCAtMSk7XG4gICAgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gYXJyYXlMaWtlVG9BcnJheShyLCBhKSA6IHZvaWQgMDtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7XG4gIChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTtcbiAgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07XG4gIHJldHVybiBuO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3QsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCIndXNlIHN0cmljdCdcblxuLyogRGVwZW5kZW5jaWVzLiAqL1xudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpXG52YXIgYmFpbCA9IHJlcXVpcmUoJ2JhaWwnKVxudmFyIHZmaWxlID0gcmVxdWlyZSgndmZpbGUnKVxudmFyIHRyb3VnaCA9IHJlcXVpcmUoJ3Ryb3VnaCcpXG52YXIgc3RyaW5nID0gcmVxdWlyZSgneC1pcy1zdHJpbmcnKVxudmFyIHBsYWluID0gcmVxdWlyZSgnaXMtcGxhaW4tb2JqJylcblxuLyogRXhwb3NlIGEgZnJvemVuIHByb2Nlc3Nvci4gKi9cbm1vZHVsZS5leHBvcnRzID0gdW5pZmllZCgpLmZyZWV6ZSgpXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyogUHJvY2VzcyBwaXBlbGluZS4gKi9cbnZhciBwaXBlbGluZSA9IHRyb3VnaCgpXG4gIC51c2UocGlwZWxpbmVQYXJzZSlcbiAgLnVzZShwaXBlbGluZVJ1bilcbiAgLnVzZShwaXBlbGluZVN0cmluZ2lmeSlcblxuZnVuY3Rpb24gcGlwZWxpbmVQYXJzZShwLCBjdHgpIHtcbiAgY3R4LnRyZWUgPSBwLnBhcnNlKGN0eC5maWxlKVxufVxuXG5mdW5jdGlvbiBwaXBlbGluZVJ1bihwLCBjdHgsIG5leHQpIHtcbiAgcC5ydW4oY3R4LnRyZWUsIGN0eC5maWxlLCBkb25lKVxuXG4gIGZ1bmN0aW9uIGRvbmUoZXJyLCB0cmVlLCBmaWxlKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbmV4dChlcnIpXG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC50cmVlID0gdHJlZVxuICAgICAgY3R4LmZpbGUgPSBmaWxlXG4gICAgICBuZXh0KClcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGlwZWxpbmVTdHJpbmdpZnkocCwgY3R4KSB7XG4gIGN0eC5maWxlLmNvbnRlbnRzID0gcC5zdHJpbmdpZnkoY3R4LnRyZWUsIGN0eC5maWxlKVxufVxuXG4vKiBGdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpcnN0IHByb2Nlc3Nvci4gKi9cbmZ1bmN0aW9uIHVuaWZpZWQoKSB7XG4gIHZhciBhdHRhY2hlcnMgPSBbXVxuICB2YXIgdHJhbnNmb3JtZXJzID0gdHJvdWdoKClcbiAgdmFyIG5hbWVzcGFjZSA9IHt9XG4gIHZhciBmcm96ZW4gPSBmYWxzZVxuICB2YXIgZnJlZXplSW5kZXggPSAtMVxuXG4gIC8qIERhdGEgbWFuYWdlbWVudC4gKi9cbiAgcHJvY2Vzc29yLmRhdGEgPSBkYXRhXG5cbiAgLyogTG9jay4gKi9cbiAgcHJvY2Vzc29yLmZyZWV6ZSA9IGZyZWV6ZVxuXG4gIC8qIFBsdWctaW5zLiAqL1xuICBwcm9jZXNzb3IuYXR0YWNoZXJzID0gYXR0YWNoZXJzXG4gIHByb2Nlc3Nvci51c2UgPSB1c2VcblxuICAvKiBBUEkuICovXG4gIHByb2Nlc3Nvci5wYXJzZSA9IHBhcnNlXG4gIHByb2Nlc3Nvci5zdHJpbmdpZnkgPSBzdHJpbmdpZnlcbiAgcHJvY2Vzc29yLnJ1biA9IHJ1blxuICBwcm9jZXNzb3IucnVuU3luYyA9IHJ1blN5bmNcbiAgcHJvY2Vzc29yLnByb2Nlc3MgPSBwcm9jZXNzXG4gIHByb2Nlc3Nvci5wcm9jZXNzU3luYyA9IHByb2Nlc3NTeW5jXG5cbiAgLyogRXhwb3NlLiAqL1xuICByZXR1cm4gcHJvY2Vzc29yXG5cbiAgLyogQ3JlYXRlIGEgbmV3IHByb2Nlc3NvciBiYXNlZCBvbiB0aGUgcHJvY2Vzc29yXG4gICAqIGluIHRoZSBjdXJyZW50IHNjb3BlLiAqL1xuICBmdW5jdGlvbiBwcm9jZXNzb3IoKSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gdW5pZmllZCgpXG4gICAgdmFyIGxlbmd0aCA9IGF0dGFjaGVycy5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGRlc3RpbmF0aW9uLnVzZS5hcHBseShudWxsLCBhdHRhY2hlcnNbaW5kZXhdKVxuICAgIH1cblxuICAgIGRlc3RpbmF0aW9uLmRhdGEoZXh0ZW5kKHRydWUsIHt9LCBuYW1lc3BhY2UpKVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG4gIH1cblxuICAvKiBGcmVlemU6IHVzZWQgdG8gc2lnbmFsIGEgcHJvY2Vzc29yIHRoYXQgaGFzIGZpbmlzaGVkXG4gICAqIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCB0YWtlIHVuaWZpZWQgaXRzZWxmLiAgSXTigJlzIGZyb3plbi5cbiAgICogUGx1Zy1pbnMgc2hvdWxkIG5vdCBiZSBhZGRlZCB0byBpdC4gIFJhdGhlciwgaXQgc2hvdWxkXG4gICAqIGJlIGV4dGVuZGVkLCBieSBpbnZva2luZyBpdCwgYmVmb3JlIG1vZGlmeWluZyBpdC5cbiAgICpcbiAgICogSW4gZXNzZW5jZSwgYWx3YXlzIGludm9rZSB0aGlzIHdoZW4gZXhwb3J0aW5nIGFcbiAgICogcHJvY2Vzc29yLiAqL1xuICBmdW5jdGlvbiBmcmVlemUoKSB7XG4gICAgdmFyIHZhbHVlc1xuICAgIHZhciBwbHVnaW5cbiAgICB2YXIgb3B0aW9uc1xuICAgIHZhciB0cmFuc2Zvcm1lclxuXG4gICAgaWYgKGZyb3plbikge1xuICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgIH1cblxuICAgIHdoaWxlICgrK2ZyZWV6ZUluZGV4IDwgYXR0YWNoZXJzLmxlbmd0aCkge1xuICAgICAgdmFsdWVzID0gYXR0YWNoZXJzW2ZyZWV6ZUluZGV4XVxuICAgICAgcGx1Z2luID0gdmFsdWVzWzBdXG4gICAgICBvcHRpb25zID0gdmFsdWVzWzFdXG4gICAgICB0cmFuc2Zvcm1lciA9IG51bGxcblxuICAgICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlc1sxXSA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICB0cmFuc2Zvcm1lciA9IHBsdWdpbi5hcHBseShwcm9jZXNzb3IsIHZhbHVlcy5zbGljZSgxKSlcblxuICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0cmFuc2Zvcm1lcnMudXNlKHRyYW5zZm9ybWVyKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZyb3plbiA9IHRydWVcbiAgICBmcmVlemVJbmRleCA9IEluZmluaXR5XG5cbiAgICByZXR1cm4gcHJvY2Vzc29yXG4gIH1cblxuICAvKiBEYXRhIG1hbmFnZW1lbnQuXG4gICAqIEdldHRlciAvIHNldHRlciBmb3IgcHJvY2Vzc29yLXNwZWNpZmljIGluZm9ybXRpb24uICovXG4gIGZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChzdHJpbmcoa2V5KSkge1xuICAgICAgLyogU2V0IGBrZXlgLiAqL1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgYXNzZXJ0VW5mcm96ZW4oJ2RhdGEnLCBmcm96ZW4pXG5cbiAgICAgICAgbmFtZXNwYWNlW2tleV0gPSB2YWx1ZVxuXG4gICAgICAgIHJldHVybiBwcm9jZXNzb3JcbiAgICAgIH1cblxuICAgICAgLyogR2V0IGBrZXlgLiAqL1xuICAgICAgcmV0dXJuIChvd24uY2FsbChuYW1lc3BhY2UsIGtleSkgJiYgbmFtZXNwYWNlW2tleV0pIHx8IG51bGxcbiAgICB9XG5cbiAgICAvKiBTZXQgc3BhY2UuICovXG4gICAgaWYgKGtleSkge1xuICAgICAgYXNzZXJ0VW5mcm96ZW4oJ2RhdGEnLCBmcm96ZW4pXG4gICAgICBuYW1lc3BhY2UgPSBrZXlcbiAgICAgIHJldHVybiBwcm9jZXNzb3JcbiAgICB9XG5cbiAgICAvKiBHZXQgc3BhY2UuICovXG4gICAgcmV0dXJuIG5hbWVzcGFjZVxuICB9XG5cbiAgLyogUGx1Zy1pbiBtYW5hZ2VtZW50LlxuICAgKlxuICAgKiBQYXNzIGl0OlxuICAgKiAqICAgYW4gYXR0YWNoZXIgYW5kIG9wdGlvbnMsXG4gICAqICogICBhIHByZXNldCxcbiAgICogKiAgIGEgbGlzdCBvZiBwcmVzZXRzLCBhdHRhY2hlcnMsIGFuZCBhcmd1bWVudHMgKGxpc3RcbiAgICogICAgIG9mIGF0dGFjaGVycyBhbmQgb3B0aW9ucykuICovXG4gIGZ1bmN0aW9uIHVzZSh2YWx1ZSkge1xuICAgIHZhciBzZXR0aW5nc1xuXG4gICAgYXNzZXJ0VW5mcm96ZW4oJ3VzZScsIGZyb3plbilcblxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvKiBFbXB0eSAqL1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhZGRQbHVnaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKCdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgICAgIGFkZExpc3QodmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdXNhYmxlIHZhbHVlLCBub3QgYCcgKyB2YWx1ZSArICdgJylcbiAgICB9XG5cbiAgICBpZiAoc2V0dGluZ3MpIHtcbiAgICAgIG5hbWVzcGFjZS5zZXR0aW5ncyA9IGV4dGVuZChuYW1lc3BhY2Uuc2V0dGluZ3MgfHwge30sIHNldHRpbmdzKVxuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzb3JcblxuICAgIGZ1bmN0aW9uIGFkZFByZXNldChyZXN1bHQpIHtcbiAgICAgIGFkZExpc3QocmVzdWx0LnBsdWdpbnMpXG5cbiAgICAgIGlmIChyZXN1bHQuc2V0dGluZ3MpIHtcbiAgICAgICAgc2V0dGluZ3MgPSBleHRlbmQoc2V0dGluZ3MgfHwge30sIHJlc3VsdC5zZXR0aW5ncylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYWRkUGx1Z2luKHZhbHVlKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmICgnbGVuZ3RoJyBpbiB2YWx1ZSkge1xuICAgICAgICAgIGFkZFBsdWdpbi5hcHBseShudWxsLCB2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdXNhYmxlIHZhbHVlLCBub3QgYCcgKyB2YWx1ZSArICdgJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRMaXN0KHBsdWdpbnMpIHtcbiAgICAgIHZhciBsZW5ndGhcbiAgICAgIHZhciBpbmRleFxuXG4gICAgICBpZiAocGx1Z2lucyA9PT0gbnVsbCB8fCBwbHVnaW5zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLyogRW1wdHkgKi9cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHBsdWdpbnMpIHtcbiAgICAgICAgbGVuZ3RoID0gcGx1Z2lucy5sZW5ndGhcbiAgICAgICAgaW5kZXggPSAtMVxuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYWRkKHBsdWdpbnNbaW5kZXhdKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgbGlzdCBvZiBwbHVnaW5zLCBub3QgYCcgKyBwbHVnaW5zICsgJ2AnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFBsdWdpbihwbHVnaW4sIHZhbHVlKSB7XG4gICAgICB2YXIgZW50cnkgPSBmaW5kKHBsdWdpbilcblxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGlmIChwbGFpbihlbnRyeVsxXSkgJiYgcGxhaW4odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBleHRlbmQoZW50cnlbMV0sIHZhbHVlKVxuICAgICAgICB9XG5cbiAgICAgICAgZW50cnlbMV0gPSB2YWx1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXR0YWNoZXJzLnB1c2goc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmQocGx1Z2luKSB7XG4gICAgdmFyIGxlbmd0aCA9IGF0dGFjaGVycy5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBlbnRyeVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gYXR0YWNoZXJzW2luZGV4XVxuXG4gICAgICBpZiAoZW50cnlbMF0gPT09IHBsdWdpbikge1xuICAgICAgICByZXR1cm4gZW50cnlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBQYXJzZSBhIGZpbGUgKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbilcbiAgICogaW50byBhIFVuaXN0IG5vZGUgdXNpbmcgdGhlIGBQYXJzZXJgIG9uIHRoZVxuICAgKiBwcm9jZXNzb3IuICovXG4gIGZ1bmN0aW9uIHBhcnNlKGRvYykge1xuICAgIHZhciBmaWxlID0gdmZpbGUoZG9jKVxuICAgIHZhciBQYXJzZXJcblxuICAgIGZyZWV6ZSgpXG4gICAgUGFyc2VyID0gcHJvY2Vzc29yLlBhcnNlclxuICAgIGFzc2VydFBhcnNlcigncGFyc2UnLCBQYXJzZXIpXG5cbiAgICBpZiAobmV3YWJsZShQYXJzZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IFBhcnNlcihTdHJpbmcoZmlsZSksIGZpbGUpLnBhcnNlKClcbiAgICB9XG5cbiAgICByZXR1cm4gUGFyc2VyKFN0cmluZyhmaWxlKSwgZmlsZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIH1cblxuICAvKiBSdW4gdHJhbnNmb3JtcyBvbiBhIFVuaXN0IG5vZGUgcmVwcmVzZW50YXRpb24gb2YgYSBmaWxlXG4gICAqIChpbiBzdHJpbmcgb3IgVkZpbGUgcmVwcmVzZW50YXRpb24pLCBhc3luYy4gKi9cbiAgZnVuY3Rpb24gcnVuKG5vZGUsIGZpbGUsIGNiKSB7XG4gICAgYXNzZXJ0Tm9kZShub2RlKVxuICAgIGZyZWV6ZSgpXG5cbiAgICBpZiAoIWNiICYmIHR5cGVvZiBmaWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYiA9IGZpbGVcbiAgICAgIGZpbGUgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKCFjYikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGV4ZWN1dG9yKVxuICAgIH1cblxuICAgIGV4ZWN1dG9yKG51bGwsIGNiKVxuXG4gICAgZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0cmFuc2Zvcm1lcnMucnVuKG5vZGUsIHZmaWxlKGZpbGUpLCBkb25lKVxuXG4gICAgICBmdW5jdGlvbiBkb25lKGVyciwgdHJlZSwgZmlsZSkge1xuICAgICAgICB0cmVlID0gdHJlZSB8fCBub2RlXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKHRyZWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IobnVsbCwgdHJlZSwgZmlsZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qIFJ1biB0cmFuc2Zvcm1zIG9uIGEgVW5pc3Qgbm9kZSByZXByZXNlbnRhdGlvbiBvZiBhIGZpbGVcbiAgICogKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbiksIHN5bmMuICovXG4gIGZ1bmN0aW9uIHJ1blN5bmMobm9kZSwgZmlsZSkge1xuICAgIHZhciBjb21wbGV0ZSA9IGZhbHNlXG4gICAgdmFyIHJlc3VsdFxuXG4gICAgcnVuKG5vZGUsIGZpbGUsIGRvbmUpXG5cbiAgICBhc3NlcnREb25lKCdydW5TeW5jJywgJ3J1bicsIGNvbXBsZXRlKVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgZnVuY3Rpb24gZG9uZShlcnIsIHRyZWUpIHtcbiAgICAgIGNvbXBsZXRlID0gdHJ1ZVxuICAgICAgYmFpbChlcnIpXG4gICAgICByZXN1bHQgPSB0cmVlXG4gICAgfVxuICB9XG5cbiAgLyogU3RyaW5naWZ5IGEgVW5pc3Qgbm9kZSByZXByZXNlbnRhdGlvbiBvZiBhIGZpbGVcbiAgICogKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbikgaW50byBhIHN0cmluZ1xuICAgKiB1c2luZyB0aGUgYENvbXBpbGVyYCBvbiB0aGUgcHJvY2Vzc29yLiAqL1xuICBmdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgZG9jKSB7XG4gICAgdmFyIGZpbGUgPSB2ZmlsZShkb2MpXG4gICAgdmFyIENvbXBpbGVyXG5cbiAgICBmcmVlemUoKVxuICAgIENvbXBpbGVyID0gcHJvY2Vzc29yLkNvbXBpbGVyXG4gICAgYXNzZXJ0Q29tcGlsZXIoJ3N0cmluZ2lmeScsIENvbXBpbGVyKVxuICAgIGFzc2VydE5vZGUobm9kZSlcblxuICAgIGlmIChuZXdhYmxlKENvbXBpbGVyKSkge1xuICAgICAgcmV0dXJuIG5ldyBDb21waWxlcihub2RlLCBmaWxlKS5jb21waWxlKClcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcGlsZXIobm9kZSwgZmlsZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIH1cblxuICAvKiBQYXJzZSBhIGZpbGUgKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbilcbiAgICogaW50byBhIFVuaXN0IG5vZGUgdXNpbmcgdGhlIGBQYXJzZXJgIG9uIHRoZSBwcm9jZXNzb3IsXG4gICAqIHRoZW4gcnVuIHRyYW5zZm9ybXMgb24gdGhhdCBub2RlLCBhbmQgY29tcGlsZSB0aGVcbiAgICogcmVzdWx0aW5nIG5vZGUgdXNpbmcgdGhlIGBDb21waWxlcmAgb24gdGhlIHByb2Nlc3NvcixcbiAgICogYW5kIHN0b3JlIHRoYXQgcmVzdWx0IG9uIHRoZSBWRmlsZS4gKi9cbiAgZnVuY3Rpb24gcHJvY2Vzcyhkb2MsIGNiKSB7XG4gICAgZnJlZXplKClcbiAgICBhc3NlcnRQYXJzZXIoJ3Byb2Nlc3MnLCBwcm9jZXNzb3IuUGFyc2VyKVxuICAgIGFzc2VydENvbXBpbGVyKCdwcm9jZXNzJywgcHJvY2Vzc29yLkNvbXBpbGVyKVxuXG4gICAgaWYgKCFjYikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGV4ZWN1dG9yKVxuICAgIH1cblxuICAgIGV4ZWN1dG9yKG51bGwsIGNiKVxuXG4gICAgZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZmlsZSA9IHZmaWxlKGRvYylcblxuICAgICAgcGlwZWxpbmUucnVuKHByb2Nlc3Nvciwge2ZpbGU6IGZpbGV9LCBkb25lKVxuXG4gICAgICBmdW5jdGlvbiBkb25lKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZShmaWxlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKG51bGwsIGZpbGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBQcm9jZXNzIHRoZSBnaXZlbiBkb2N1bWVudCAoaW4gc3RyaW5nIG9yIFZGaWxlXG4gICAqIHJlcHJlc2VudGF0aW9uKSwgc3luYy4gKi9cbiAgZnVuY3Rpb24gcHJvY2Vzc1N5bmMoZG9jKSB7XG4gICAgdmFyIGNvbXBsZXRlID0gZmFsc2VcbiAgICB2YXIgZmlsZVxuXG4gICAgZnJlZXplKClcbiAgICBhc3NlcnRQYXJzZXIoJ3Byb2Nlc3NTeW5jJywgcHJvY2Vzc29yLlBhcnNlcilcbiAgICBhc3NlcnRDb21waWxlcigncHJvY2Vzc1N5bmMnLCBwcm9jZXNzb3IuQ29tcGlsZXIpXG4gICAgZmlsZSA9IHZmaWxlKGRvYylcblxuICAgIHByb2Nlc3MoZmlsZSwgZG9uZSlcblxuICAgIGFzc2VydERvbmUoJ3Byb2Nlc3NTeW5jJywgJ3Byb2Nlc3MnLCBjb21wbGV0ZSlcblxuICAgIHJldHVybiBmaWxlXG5cbiAgICBmdW5jdGlvbiBkb25lKGVycikge1xuICAgICAgY29tcGxldGUgPSB0cnVlXG4gICAgICBiYWlsKGVycilcbiAgICB9XG4gIH1cbn1cblxuLyogQ2hlY2sgaWYgYGZ1bmNgIGlzIGEgY29uc3RydWN0b3IuICovXG5mdW5jdGlvbiBuZXdhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYga2V5cyh2YWx1ZS5wcm90b3R5cGUpXG59XG5cbi8qIENoZWNrIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0IHdpdGgga2V5cy4gKi9cbmZ1bmN0aW9uIGtleXModmFsdWUpIHtcbiAgdmFyIGtleVxuICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qIEFzc2VydCBhIHBhcnNlciBpcyBhdmFpbGFibGUuICovXG5mdW5jdGlvbiBhc3NlcnRQYXJzZXIobmFtZSwgUGFyc2VyKSB7XG4gIGlmICh0eXBlb2YgUGFyc2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYCcgKyBuYW1lICsgJ2Agd2l0aG91dCBgUGFyc2VyYCcpXG4gIH1cbn1cblxuLyogQXNzZXJ0IGEgY29tcGlsZXIgaXMgYXZhaWxhYmxlLiAqL1xuZnVuY3Rpb24gYXNzZXJ0Q29tcGlsZXIobmFtZSwgQ29tcGlsZXIpIHtcbiAgaWYgKHR5cGVvZiBDb21waWxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGAnICsgbmFtZSArICdgIHdpdGhvdXQgYENvbXBpbGVyYCcpXG4gIH1cbn1cblxuLyogQXNzZXJ0IHRoZSBwcm9jZXNzb3IgaXMgbm90IGZyb3plbi4gKi9cbmZ1bmN0aW9uIGFzc2VydFVuZnJvemVuKG5hbWUsIGZyb3plbikge1xuICBpZiAoZnJvemVuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgW1xuICAgICAgICAnQ2Fubm90IGludm9rZSBgJyArIG5hbWUgKyAnYCBvbiBhIGZyb3plbiBwcm9jZXNzb3IuXFxuQ3JlYXRlIGEgbmV3ICcsXG4gICAgICAgICdwcm9jZXNzb3IgZmlyc3QsIGJ5IGludm9raW5nIGl0OiB1c2UgYHByb2Nlc3NvcigpYCBpbnN0ZWFkIG9mICcsXG4gICAgICAgICdgcHJvY2Vzc29yYC4nXG4gICAgICBdLmpvaW4oJycpXG4gICAgKVxuICB9XG59XG5cbi8qIEFzc2VydCBgbm9kZWAgaXMgYSBVbmlzdCBub2RlLiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm9kZShub2RlKSB7XG4gIGlmICghbm9kZSB8fCAhc3RyaW5nKG5vZGUudHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG5vZGUsIGdvdCBgJyArIG5vZGUgKyAnYCcpXG4gIH1cbn1cblxuLyogQXNzZXJ0IHRoYXQgYGNvbXBsZXRlYCBpcyBgdHJ1ZWAuICovXG5mdW5jdGlvbiBhc3NlcnREb25lKG5hbWUsIGFzeW5jTmFtZSwgY29tcGxldGUpIHtcbiAgaWYgKCFjb21wbGV0ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdgJyArIG5hbWUgKyAnYCBmaW5pc2hlZCBhc3luYy4gVXNlIGAnICsgYXN5bmNOYW1lICsgJ2AgaW5zdGVhZCdcbiAgICApXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgaXNBcnJheSA9IGZ1bmN0aW9uIGlzQXJyYXkoYXJyKSB7XG5cdGlmICh0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KGFycik7XG5cdH1cblxuXHRyZXR1cm4gdG9TdHIuY2FsbChhcnIpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxudmFyIGlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuXHRpZiAoIW9iaiB8fCB0b1N0ci5jYWxsKG9iaikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGhhc093bkNvbnN0cnVjdG9yID0gaGFzT3duLmNhbGwob2JqLCAnY29uc3RydWN0b3InKTtcblx0dmFyIGhhc0lzUHJvdG90eXBlT2YgPSBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAnaXNQcm90b3R5cGVPZicpO1xuXHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdGlmIChvYmouY29uc3RydWN0b3IgJiYgIWhhc093bkNvbnN0cnVjdG9yICYmICFoYXNJc1Byb3RvdHlwZU9mKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXHR2YXIga2V5O1xuXHRmb3IgKGtleSBpbiBvYmopIHsgLyoqLyB9XG5cblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn07XG5cbi8vIElmIG5hbWUgaXMgJ19fcHJvdG9fXycsIGFuZCBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgYXZhaWxhYmxlLCBkZWZpbmUgX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eSBvbiB0YXJnZXRcbnZhciBzZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIHNldFByb3BlcnR5KHRhcmdldCwgb3B0aW9ucykge1xuXHRpZiAoZGVmaW5lUHJvcGVydHkgJiYgb3B0aW9ucy5uYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGRlZmluZVByb3BlcnR5KHRhcmdldCwgb3B0aW9ucy5uYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IG9wdGlvbnMubmV3VmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHRhcmdldFtvcHRpb25zLm5hbWVdID0gb3B0aW9ucy5uZXdWYWx1ZTtcblx0fVxufTtcblxuLy8gUmV0dXJuIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIF9fcHJvdG9fXyBpZiAnX19wcm90b19fJyBpcyBub3QgYW4gb3duIHByb3BlcnR5XG52YXIgZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eShvYmosIG5hbWUpIHtcblx0aWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0aWYgKCFoYXNPd24uY2FsbChvYmosIG5hbWUpKSB7XG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xuXHRcdH0gZWxzZSBpZiAoZ09QRCkge1xuXHRcdFx0Ly8gSW4gZWFybHkgdmVyc2lvbnMgb2Ygbm9kZSwgb2JqWydfX3Byb3RvX18nXSBpcyBidWdneSB3aGVuIG9iaiBoYXNcblx0XHRcdC8vIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB3b3Jrcy5cblx0XHRcdHJldHVybiBnT1BEKG9iaiwgbmFtZSkudmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9ialtuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmU7XG5cdHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF07XG5cdHZhciBpID0gMTtcblx0dmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdHZhciBkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMV0gfHwge307XG5cdFx0Ly8gc2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdGkgPSAyO1xuXHR9XG5cdGlmICh0YXJnZXQgPT0gbnVsbCB8fCAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzW2ldO1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAob3B0aW9ucyAhPSBudWxsKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRzcmMgPSBnZXRQcm9wZXJ0eSh0YXJnZXQsIG5hbWUpO1xuXHRcdFx0XHRjb3B5ID0gZ2V0UHJvcGVydHkob3B0aW9ucywgbmFtZSk7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAodGFyZ2V0ICE9PSBjb3B5KSB7XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBpc0FycmF5KGNvcHkpKSkpIHtcblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KSB9KTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBjb3B5ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBjb3B5IH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYmFpbFxuXG5mdW5jdGlvbiBiYWlsKGVycikge1xuICBpZiAoZXJyKSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFZNZXNzYWdlID0gcmVxdWlyZSgndmZpbGUtbWVzc2FnZScpO1xudmFyIFZGaWxlID0gcmVxdWlyZSgnLi9jb3JlLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gVkZpbGU7XG5cbnZhciBwcm90byA9IFZGaWxlLnByb3RvdHlwZTtcblxucHJvdG8ubWVzc2FnZSA9IG1lc3NhZ2U7XG5wcm90by5pbmZvID0gaW5mbztcbnByb3RvLmZhaWwgPSBmYWlsO1xuXG4vKiBTbGlnaHQgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuICBSZW1vdmUgaW4gdGhlIGZ1dHVyZS4gKi9cbnByb3RvLndhcm4gPSBtZXNzYWdlO1xuXG4vKiBDcmVhdGUgYSBtZXNzYWdlIHdpdGggYHJlYXNvbmAgYXQgYHBvc2l0aW9uYC5cbiAqIFdoZW4gYW4gZXJyb3IgaXMgcGFzc2VkIGluIGFzIGByZWFzb25gLCBjb3BpZXMgdGhlIHN0YWNrLiAqL1xuZnVuY3Rpb24gbWVzc2FnZShyZWFzb24sIHBvc2l0aW9uLCBvcmlnaW4pIHtcbiAgdmFyIGZpbGVQYXRoID0gdGhpcy5wYXRoO1xuICB2YXIgbWVzc2FnZSA9IG5ldyBWTWVzc2FnZShyZWFzb24sIHBvc2l0aW9uLCBvcmlnaW4pO1xuXG4gIGlmIChmaWxlUGF0aCkge1xuICAgIG1lc3NhZ2UubmFtZSA9IGZpbGVQYXRoICsgJzonICsgbWVzc2FnZS5uYW1lO1xuICAgIG1lc3NhZ2UuZmlsZSA9IGZpbGVQYXRoO1xuICB9XG5cbiAgbWVzc2FnZS5mYXRhbCA9IGZhbHNlO1xuXG4gIHRoaXMubWVzc2FnZXMucHVzaChtZXNzYWdlKTtcblxuICByZXR1cm4gbWVzc2FnZTtcbn1cblxuLyogRmFpbC4gQ3JlYXRlcyBhIHZtZXNzYWdlLCBhc3NvY2lhdGVzIGl0IHdpdGggdGhlIGZpbGUsXG4gKiBhbmQgdGhyb3dzIGl0LiAqL1xuZnVuY3Rpb24gZmFpbCgpIHtcbiAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBtZXNzYWdlLmZhdGFsID0gdHJ1ZTtcblxuICB0aHJvdyBtZXNzYWdlO1xufVxuXG4vKiBJbmZvLiBDcmVhdGVzIGEgdm1lc3NhZ2UsIGFzc29jaWF0ZXMgaXQgd2l0aCB0aGUgZmlsZSxcbiAqIGFuZCBtYXJrcyB0aGUgZmF0YWxpdHkgYXMgbnVsbC4gKi9cbmZ1bmN0aW9uIGluZm8oKSB7XG4gIHZhciBtZXNzYWdlID0gdGhpcy5tZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgbWVzc2FnZS5mYXRhbCA9IG51bGw7XG5cbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSBWTWVzc2FnZVxuXG4vLyBJbmhlcml0IGZyb20gYEVycm9yI2AuXG5mdW5jdGlvbiBWTWVzc2FnZVByb3RvdHlwZSgpIHt9XG5WTWVzc2FnZVByb3RvdHlwZS5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGVcblZNZXNzYWdlLnByb3RvdHlwZSA9IG5ldyBWTWVzc2FnZVByb3RvdHlwZSgpXG5cbi8vIE1lc3NhZ2UgcHJvcGVydGllcy5cbnZhciBwcm90byA9IFZNZXNzYWdlLnByb3RvdHlwZVxuXG5wcm90by5maWxlID0gJydcbnByb3RvLm5hbWUgPSAnJ1xucHJvdG8ucmVhc29uID0gJydcbnByb3RvLm1lc3NhZ2UgPSAnJ1xucHJvdG8uc3RhY2sgPSAnJ1xucHJvdG8uZmF0YWwgPSBudWxsXG5wcm90by5jb2x1bW4gPSBudWxsXG5wcm90by5saW5lID0gbnVsbFxuXG4vLyBDb25zdHJ1Y3QgYSBuZXcgVk1lc3NhZ2UuXG4vL1xuLy8gTm90ZTogV2UgY2Fubm90IGludm9rZSBgRXJyb3JgIG9uIHRoZSBjcmVhdGVkIGNvbnRleHQsIGFzIHRoYXQgYWRkcyByZWFkb25seVxuLy8gYGxpbmVgIGFuZCBgY29sdW1uYCBhdHRyaWJ1dGVzIG9uIFNhZmFyaSA5LCB0aHVzIHRocm93aW5nIGFuZCBmYWlsaW5nIHRoZVxuLy8gZGF0YS5cbmZ1bmN0aW9uIFZNZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24sIG9yaWdpbikge1xuICB2YXIgcGFydHNcbiAgdmFyIHJhbmdlXG4gIHZhciBsb2NhdGlvblxuXG4gIGlmICh0eXBlb2YgcG9zaXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgb3JpZ2luID0gcG9zaXRpb25cbiAgICBwb3NpdGlvbiA9IG51bGxcbiAgfVxuXG4gIHBhcnRzID0gcGFyc2VPcmlnaW4ob3JpZ2luKVxuICByYW5nZSA9IHN0cmluZ2lmeShwb3NpdGlvbikgfHwgJzE6MSdcblxuICBsb2NhdGlvbiA9IHtcbiAgICBzdGFydDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbH0sXG4gICAgZW5kOiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsfVxuICB9XG5cbiAgLy8gTm9kZS5cbiAgaWYgKHBvc2l0aW9uICYmIHBvc2l0aW9uLnBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBwb3NpdGlvbi5wb3NpdGlvblxuICB9XG5cbiAgaWYgKHBvc2l0aW9uKSB7XG4gICAgLy8gUG9zaXRpb24uXG4gICAgaWYgKHBvc2l0aW9uLnN0YXJ0KSB7XG4gICAgICBsb2NhdGlvbiA9IHBvc2l0aW9uXG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLnN0YXJ0XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBvaW50LlxuICAgICAgbG9jYXRpb24uc3RhcnQgPSBwb3NpdGlvblxuICAgIH1cbiAgfVxuXG4gIGlmIChyZWFzb24uc3RhY2spIHtcbiAgICB0aGlzLnN0YWNrID0gcmVhc29uLnN0YWNrXG4gICAgcmVhc29uID0gcmVhc29uLm1lc3NhZ2VcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IHJlYXNvblxuICB0aGlzLm5hbWUgPSByYW5nZVxuICB0aGlzLnJlYXNvbiA9IHJlYXNvblxuICB0aGlzLmxpbmUgPSBwb3NpdGlvbiA/IHBvc2l0aW9uLmxpbmUgOiBudWxsXG4gIHRoaXMuY29sdW1uID0gcG9zaXRpb24gPyBwb3NpdGlvbi5jb2x1bW4gOiBudWxsXG4gIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvblxuICB0aGlzLnNvdXJjZSA9IHBhcnRzWzBdXG4gIHRoaXMucnVsZUlkID0gcGFydHNbMV1cbn1cblxuZnVuY3Rpb24gcGFyc2VPcmlnaW4ob3JpZ2luKSB7XG4gIHZhciByZXN1bHQgPSBbbnVsbCwgbnVsbF1cbiAgdmFyIGluZGV4XG5cbiAgaWYgKHR5cGVvZiBvcmlnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBvcmlnaW4uaW5kZXhPZignOicpXG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXN1bHRbMV0gPSBvcmlnaW5cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0WzBdID0gb3JpZ2luLnNsaWNlKDAsIGluZGV4KVxuICAgICAgcmVzdWx0WzFdID0gb3JpZ2luLnNsaWNlKGluZGV4ICsgMSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5naWZ5XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICAvKiBOb3RoaW5nLiAqL1xuICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyogTm9kZS4gKi9cbiAgaWYgKG93bi5jYWxsKHZhbHVlLCAncG9zaXRpb24nKSB8fCBvd24uY2FsbCh2YWx1ZSwgJ3R5cGUnKSkge1xuICAgIHJldHVybiBwb3NpdGlvbih2YWx1ZS5wb3NpdGlvbilcbiAgfVxuXG4gIC8qIFBvc2l0aW9uLiAqL1xuICBpZiAob3duLmNhbGwodmFsdWUsICdzdGFydCcpIHx8IG93bi5jYWxsKHZhbHVlLCAnZW5kJykpIHtcbiAgICByZXR1cm4gcG9zaXRpb24odmFsdWUpXG4gIH1cblxuICAvKiBQb2ludC4gKi9cbiAgaWYgKG93bi5jYWxsKHZhbHVlLCAnbGluZScpIHx8IG93bi5jYWxsKHZhbHVlLCAnY29sdW1uJykpIHtcbiAgICByZXR1cm4gcG9pbnQodmFsdWUpXG4gIH1cblxuICAvKiA/ICovXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHBvaW50KHBvaW50KSB7XG4gIGlmICghcG9pbnQgfHwgdHlwZW9mIHBvaW50ICE9PSAnb2JqZWN0Jykge1xuICAgIHBvaW50ID0ge31cbiAgfVxuXG4gIHJldHVybiBpbmRleChwb2ludC5saW5lKSArICc6JyArIGluZGV4KHBvaW50LmNvbHVtbilcbn1cblxuZnVuY3Rpb24gcG9zaXRpb24ocG9zKSB7XG4gIGlmICghcG9zIHx8IHR5cGVvZiBwb3MgIT09ICdvYmplY3QnKSB7XG4gICAgcG9zID0ge31cbiAgfVxuXG4gIHJldHVybiBwb2ludChwb3Muc3RhcnQpICsgJy0nICsgcG9pbnQocG9zLmVuZClcbn1cblxuZnVuY3Rpb24gaW5kZXgodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyB2YWx1ZSA6IDFcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgcmVwbGFjZSA9IHJlcXVpcmUoJ3JlcGxhY2UtZXh0Jyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gVkZpbGU7XG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm90byA9IFZGaWxlLnByb3RvdHlwZTtcblxucHJvdG8udG9TdHJpbmcgPSB0b1N0cmluZztcblxuLyogT3JkZXIgb2Ygc2V0dGluZyAobGVhc3Qgc3BlY2lmaWMgdG8gbW9zdCksIHdlIG5lZWQgdGhpcyBiZWNhdXNlXG4gKiBvdGhlcndpc2UgYHtzdGVtOiAnYScsIHBhdGg6ICd+L2IuanMnfWAgd291bGQgdGhyb3csIGFzIGEgcGF0aFxuICogaXMgbmVlZGVkIGJlZm9yZSBhIHN0ZW0gY2FuIGJlIHNldC4gKi9cbnZhciBvcmRlciA9IFtcbiAgJ2hpc3RvcnknLFxuICAncGF0aCcsXG4gICdiYXNlbmFtZScsXG4gICdzdGVtJyxcbiAgJ2V4dG5hbWUnLFxuICAnZGlybmFtZSdcbl07XG5cbi8qIENvbnN0cnVjdCBhIG5ldyBmaWxlLiAqL1xuZnVuY3Rpb24gVkZpbGUob3B0aW9ucykge1xuICB2YXIgcHJvcDtcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuXG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgYnVmZmVyKG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtjb250ZW50czogb3B0aW9uc307XG4gIH0gZWxzZSBpZiAoJ21lc3NhZ2UnIGluIG9wdGlvbnMgJiYgJ21lc3NhZ2VzJyBpbiBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVkZpbGUpKSB7XG4gICAgcmV0dXJuIG5ldyBWRmlsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuZGF0YSA9IHt9O1xuICB0aGlzLm1lc3NhZ2VzID0gW107XG4gIHRoaXMuaGlzdG9yeSA9IFtdO1xuICB0aGlzLmN3ZCA9IHByb2Nlc3MuY3dkKCk7XG5cbiAgLyogU2V0IHBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzIGluIHRoZSBjb3JyZWN0IG9yZGVyLiAqL1xuICBpbmRleCA9IC0xO1xuICBsZW5ndGggPSBvcmRlci5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBwcm9wID0gb3JkZXJbaW5kZXhdO1xuXG4gICAgaWYgKG93bi5jYWxsKG9wdGlvbnMsIHByb3ApKSB7XG4gICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG4gIH1cblxuICAvKiBTZXQgbm9uLXBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzLiAqL1xuICBmb3IgKHByb3AgaW4gb3B0aW9ucykge1xuICAgIGlmIChvcmRlci5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuICB9XG59XG5cbi8qIEFjY2VzcyBmdWxsIHBhdGggKGB+L2luZGV4Lm1pbi5qc2ApLiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAncGF0aCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBhc3NlcnROb25FbXB0eShwYXRoLCAncGF0aCcpO1xuXG4gICAgaWYgKHBhdGggIT09IHRoaXMucGF0aCkge1xuICAgICAgdGhpcy5oaXN0b3J5LnB1c2gocGF0aCk7XG4gICAgfVxuICB9XG59KTtcblxuLyogQWNjZXNzIHBhcmVudCBwYXRoIChgfmApLiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnZGlybmFtZScsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnID8gcGF0aC5kaXJuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGRpcm5hbWUpIHtcbiAgICBhc3NlcnRQYXRoKHRoaXMucGF0aCwgJ2Rpcm5hbWUnKTtcbiAgICB0aGlzLnBhdGggPSBwYXRoLmpvaW4oZGlybmFtZSB8fCAnJywgdGhpcy5iYXNlbmFtZSk7XG4gIH1cbn0pO1xuXG4vKiBBY2Nlc3MgYmFzZW5hbWUgKGBpbmRleC5taW4uanNgKS4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ2Jhc2VuYW1lJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmJhc2VuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGJhc2VuYW1lKSB7XG4gICAgYXNzZXJ0Tm9uRW1wdHkoYmFzZW5hbWUsICdiYXNlbmFtZScpO1xuICAgIGFzc2VydFBhcnQoYmFzZW5hbWUsICdiYXNlbmFtZScpO1xuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIGJhc2VuYW1lKTtcbiAgfVxufSk7XG5cbi8qIEFjY2VzcyBleHRuYW1lIChgLmpzYCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdleHRuYW1lJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmV4dG5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoZXh0bmFtZSkge1xuICAgIHZhciBleHQgPSBleHRuYW1lIHx8ICcnO1xuXG4gICAgYXNzZXJ0UGFydChleHQsICdleHRuYW1lJyk7XG4gICAgYXNzZXJ0UGF0aCh0aGlzLnBhdGgsICdleHRuYW1lJyk7XG5cbiAgICBpZiAoZXh0KSB7XG4gICAgICBpZiAoZXh0LmNoYXJBdCgwKSAhPT0gJy4nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGV4dG5hbWVgIG11c3Qgc3RhcnQgd2l0aCBgLmAnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4dC5pbmRleE9mKCcuJywgMSkgIT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGV4dG5hbWVgIGNhbm5vdCBjb250YWluIG11bHRpcGxlIGRvdHMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBhdGggPSByZXBsYWNlKHRoaXMucGF0aCwgZXh0KTtcbiAgfVxufSk7XG5cbi8qIEFjY2VzcyBzdGVtIChgaW5kZXgubWluYCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdzdGVtJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmJhc2VuYW1lKHRoaXMucGF0aCwgdGhpcy5leHRuYW1lKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoc3RlbSkge1xuICAgIGFzc2VydE5vbkVtcHR5KHN0ZW0sICdzdGVtJyk7XG4gICAgYXNzZXJ0UGFydChzdGVtLCAnc3RlbScpO1xuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIHN0ZW0gKyAodGhpcy5leHRuYW1lIHx8ICcnKSk7XG4gIH1cbn0pO1xuXG4vKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBmaWxlLiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2RpbmcpIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5jb250ZW50cyB8fCAnJztcbiAgcmV0dXJuIGJ1ZmZlcih2YWx1ZSkgPyB2YWx1ZS50b1N0cmluZyhlbmNvZGluZykgOiBTdHJpbmcodmFsdWUpO1xufVxuXG4vKiBBc3NlcnQgdGhhdCBgcGFydGAgaXMgbm90IGEgcGF0aCAoaS5lLiwgZG9lc1xuICogbm90IGNvbnRhaW4gYHBhdGguc2VwYCkuICovXG5mdW5jdGlvbiBhc3NlcnRQYXJ0KHBhcnQsIG5hbWUpIHtcbiAgaWYgKHBhcnQuaW5kZXhPZihwYXRoLnNlcCkgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgJyArIG5hbWUgKyAnYCBjYW5ub3QgYmUgYSBwYXRoOiBkaWQgbm90IGV4cGVjdCBgJyArIHBhdGguc2VwICsgJ2AnKTtcbiAgfVxufVxuXG4vKiBBc3NlcnQgdGhhdCBgcGFydGAgaXMgbm90IGVtcHR5LiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm9uRW1wdHkocGFydCwgbmFtZSkge1xuICBpZiAoIXBhcnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2AnICsgbmFtZSArICdgIGNhbm5vdCBiZSBlbXB0eScpO1xuICB9XG59XG5cbi8qIEFzc2VydCBgcGF0aGAgZXhpc3RzLiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGF0aChwYXRoLCBuYW1lKSB7XG4gIGlmICghcGF0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZyBgJyArIG5hbWUgKyAnYCByZXF1aXJlcyBgcGF0aGAgdG8gYmUgc2V0IHRvbycpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5mdW5jdGlvbiByZXBsYWNlRXh0KG5wYXRoLCBleHQpIHtcbiAgaWYgKHR5cGVvZiBucGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnBhdGg7XG4gIH1cblxuICBpZiAobnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG5wYXRoO1xuICB9XG5cbiAgdmFyIG5GaWxlTmFtZSA9IHBhdGguYmFzZW5hbWUobnBhdGgsIHBhdGguZXh0bmFtZShucGF0aCkpICsgZXh0O1xuICByZXR1cm4gcGF0aC5qb2luKHBhdGguZGlybmFtZShucGF0aCksIG5GaWxlTmFtZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVwbGFjZUV4dDtcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB3cmFwID0gcmVxdWlyZSgnLi93cmFwLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSB0cm91Z2hcblxudHJvdWdoLndyYXAgPSB3cmFwXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlXG5cbi8vIENyZWF0ZSBuZXcgbWlkZGxld2FyZS5cbmZ1bmN0aW9uIHRyb3VnaCgpIHtcbiAgdmFyIGZucyA9IFtdXG4gIHZhciBtaWRkbGV3YXJlID0ge31cblxuICBtaWRkbGV3YXJlLnJ1biA9IHJ1blxuICBtaWRkbGV3YXJlLnVzZSA9IHVzZVxuXG4gIHJldHVybiBtaWRkbGV3YXJlXG5cbiAgLy8gUnVuIGBmbnNgLiAgTGFzdCBhcmd1bWVudCBtdXN0IGJlIGEgY29tcGxldGlvbiBoYW5kbGVyLlxuICBmdW5jdGlvbiBydW4oKSB7XG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgaW5wdXQgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgLTEpXG4gICAgdmFyIGRvbmUgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdXG5cbiAgICBpZiAodHlwZW9mIGRvbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZnVuY3Rpb24gYXMgbGFzdCBhcmd1bWVudCwgbm90ICcgKyBkb25lKVxuICAgIH1cblxuICAgIG5leHQuYXBwbHkobnVsbCwgW251bGxdLmNvbmNhdChpbnB1dCkpXG5cbiAgICAvLyBSdW4gdGhlIG5leHQgYGZuYCwgaWYgYW55LlxuICAgIGZ1bmN0aW9uIG5leHQoZXJyKSB7XG4gICAgICB2YXIgZm4gPSBmbnNbKytpbmRleF1cbiAgICAgIHZhciBwYXJhbXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMClcbiAgICAgIHZhciB2YWx1ZXMgPSBwYXJhbXMuc2xpY2UoMSlcbiAgICAgIHZhciBsZW5ndGggPSBpbnB1dC5sZW5ndGhcbiAgICAgIHZhciBwb3MgPSAtMVxuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGRvbmUoZXJyKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gQ29weSBub24tbnVsbHkgaW5wdXQgaW50byB2YWx1ZXMuXG4gICAgICB3aGlsZSAoKytwb3MgPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKHZhbHVlc1twb3NdID09PSBudWxsIHx8IHZhbHVlc1twb3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YWx1ZXNbcG9zXSA9IGlucHV0W3Bvc11cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnB1dCA9IHZhbHVlc1xuXG4gICAgICAvLyBOZXh0IG9yIGRvbmUuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgd3JhcChmbiwgbmV4dCkuYXBwbHkobnVsbCwgaW5wdXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lLmFwcGx5KG51bGwsIFtudWxsXS5jb25jYXQoaW5wdXQpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBgZm5gIHRvIHRoZSBsaXN0LlxuICBmdW5jdGlvbiB1c2UoZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGBmbmAgdG8gYmUgYSBmdW5jdGlvbiwgbm90ICcgKyBmbilcbiAgICB9XG5cbiAgICBmbnMucHVzaChmbilcblxuICAgIHJldHVybiBtaWRkbGV3YXJlXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBcblxuLy8gV3JhcCBgZm5gLlxuLy8gQ2FuIGJlIHN5bmMgb3IgYXN5bmM7IHJldHVybiBhIHByb21pc2UsIHJlY2VpdmUgYSBjb21wbGV0aW9uIGhhbmRsZXIsIHJldHVyblxuLy8gbmV3IHZhbHVlcyBhbmQgZXJyb3JzLlxuZnVuY3Rpb24gd3JhcChmbiwgY2FsbGJhY2spIHtcbiAgdmFyIGludm9rZWRcblxuICByZXR1cm4gd3JhcHBlZFxuXG4gIGZ1bmN0aW9uIHdyYXBwZWQoKSB7XG4gICAgdmFyIHBhcmFtcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgIHZhciBjYWxsYmFjayA9IGZuLmxlbmd0aCA+IHBhcmFtcy5sZW5ndGhcbiAgICB2YXIgcmVzdWx0XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHBhcmFtcy5wdXNoKGRvbmUpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KG51bGwsIHBhcmFtcylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gV2VsbCwgdGhpcyBpcyBxdWl0ZSB0aGUgcGlja2xlLlxuICAgICAgLy8gYGZuYCByZWNlaXZlZCBhIGNhbGxiYWNrIGFuZCBpbnZva2VkIGl0ICh0aHVzIGNvbnRpbnVpbmcgdGhlIHBpcGVsaW5lKSxcbiAgICAgIC8vIGJ1dCBsYXRlciBhbHNvIHRocmV3IGFuIGVycm9yLlxuICAgICAgLy8gV2XigJlyZSBub3QgYWJvdXQgdG8gcmVzdGFydCB0aGUgcGlwZWxpbmUgYWdhaW4sIHNvIHRoZSBvbmx5IHRoaW5nIGxlZnRcbiAgICAgIC8vIHRvIGRvIGlzIHRvIHRocm93IHRoZSB0aGluZyBpbnN0ZWFkLlxuICAgICAgaWYgKGNhbGxiYWNrICYmIGludm9rZWQpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRvbmUoZXJyb3IpXG4gICAgfVxuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzdWx0LnRoZW4odGhlbiwgZG9uZSlcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgZG9uZShyZXN1bHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGVuKHJlc3VsdClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBJbnZva2UgYG5leHRgLCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgaWYgKCFpbnZva2VkKSB7XG4gICAgICBpbnZva2VkID0gdHJ1ZVxuXG4gICAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG5cbiAgLy8gSW52b2tlIGBkb25lYCB3aXRoIG9uZSB2YWx1ZS5cbiAgLy8gVHJhY2tzIGlmIGFuIGVycm9yIGlzIHBhc3NlZCwgdG9vLlxuICBmdW5jdGlvbiB0aGVuKHZhbHVlKSB7XG4gICAgZG9uZShudWxsLCB2YWx1ZSlcbiAgfVxufVxuIiwidmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaW5nXG5cbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBTdHJpbmddXCJcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHgpIHtcblx0dmFyIHByb3RvdHlwZTtcblx0cmV0dXJuIHRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmIChwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoeCksIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih7fSkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVuaGVyaXQgPSByZXF1aXJlKCd1bmhlcml0Jyk7XG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIFBhcnNlciA9IHJlcXVpcmUoJy4vbGliL3BhcnNlci5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xucGFyc2UuUGFyc2VyID0gUGFyc2VyO1xuXG5mdW5jdGlvbiBwYXJzZShvcHRpb25zKSB7XG4gIHZhciBMb2NhbCA9IHVuaGVyaXQoUGFyc2VyKTtcbiAgTG9jYWwucHJvdG90eXBlLm9wdGlvbnMgPSB4dGVuZChMb2NhbC5wcm90b3R5cGUub3B0aW9ucywgdGhpcy5kYXRhKCdzZXR0aW5ncycpLCBvcHRpb25zKTtcbiAgdGhpcy5QYXJzZXIgPSBMb2NhbDtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbm1vZHVsZS5leHBvcnRzID0gdW5oZXJpdFxuXG4vLyBDcmVhdGUgYSBjdXN0b20gY29uc3RydWN0b3Igd2hpY2ggY2FuIGJlIG1vZGlmaWVkIHdpdGhvdXQgYWZmZWN0aW5nIHRoZVxuLy8gb3JpZ2luYWwgY2xhc3MuXG5mdW5jdGlvbiB1bmhlcml0KFN1cGVyKSB7XG4gIHZhciByZXN1bHRcbiAgdmFyIGtleVxuICB2YXIgdmFsdWVcblxuICBpbmhlcml0cyhPZiwgU3VwZXIpXG4gIGluaGVyaXRzKEZyb20sIE9mKVxuXG4gIC8vIENsb25lIHZhbHVlcy5cbiAgcmVzdWx0ID0gT2YucHJvdG90eXBlXG5cbiAgZm9yIChrZXkgaW4gcmVzdWx0KSB7XG4gICAgdmFsdWUgPSByZXN1bHRba2V5XVxuXG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gJ2NvbmNhdCcgaW4gdmFsdWUgPyB2YWx1ZS5jb25jYXQoKSA6IHh0ZW5kKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPZlxuXG4gIC8vIENvbnN0cnVjdG9yIGFjY2VwdGluZyBhIHNpbmdsZSBhcmd1bWVudCwgd2hpY2ggaXRzZWxmIGlzIGFuIGBhcmd1bWVudHNgXG4gIC8vIG9iamVjdC5cbiAgZnVuY3Rpb24gRnJvbShwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIFN1cGVyLmFwcGx5KHRoaXMsIHBhcmFtZXRlcnMpXG4gIH1cblxuICAvLyBDb25zdHJ1Y3RvciBhY2NlcHRpbmcgdmFyaWFkaWMgYXJndW1lbnRzLlxuICBmdW5jdGlvbiBPZigpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT2YpKSB7XG4gICAgICByZXR1cm4gbmV3IEZyb20oYXJndW1lbnRzKVxuICAgIH1cblxuICAgIHJldHVybiBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gIH1cbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcbnZhciB0b2dnbGUgPSByZXF1aXJlKCdzdGF0ZS10b2dnbGUnKTtcbnZhciB2ZmlsZUxvY2F0aW9uID0gcmVxdWlyZSgndmZpbGUtbG9jYXRpb24nKTtcbnZhciB1bmVzY2FwZSA9IHJlcXVpcmUoJy4vdW5lc2NhcGUnKTtcbnZhciBkZWNvZGUgPSByZXF1aXJlKCcuL2RlY29kZScpO1xudmFyIHRva2VuaXplciA9IHJlcXVpcmUoJy4vdG9rZW5pemVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuXG5mdW5jdGlvbiBQYXJzZXIoZG9jLCBmaWxlKSB7XG4gIHRoaXMuZmlsZSA9IGZpbGU7XG4gIHRoaXMub2Zmc2V0ID0ge307XG4gIHRoaXMub3B0aW9ucyA9IHh0ZW5kKHRoaXMub3B0aW9ucyk7XG4gIHRoaXMuc2V0T3B0aW9ucyh7fSk7XG5cbiAgdGhpcy5pbkxpc3QgPSBmYWxzZTtcbiAgdGhpcy5pbkJsb2NrID0gZmFsc2U7XG4gIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gIHRoaXMuYXRTdGFydCA9IHRydWU7XG5cbiAgdGhpcy50b09mZnNldCA9IHZmaWxlTG9jYXRpb24oZmlsZSkudG9PZmZzZXQ7XG4gIHRoaXMudW5lc2NhcGUgPSB1bmVzY2FwZSh0aGlzLCAnZXNjYXBlJyk7XG4gIHRoaXMuZGVjb2RlID0gZGVjb2RlKHRoaXMpO1xufVxuXG52YXIgcHJvdG8gPSBQYXJzZXIucHJvdG90eXBlO1xuXG4vKiBFeHBvc2UgY29yZS4gKi9cbnByb3RvLnNldE9wdGlvbnMgPSByZXF1aXJlKCcuL3NldC1vcHRpb25zJyk7XG5wcm90by5wYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcblxuLyogRXhwb3NlIGBkZWZhdWx0c2AuICovXG5wcm90by5vcHRpb25zID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKiBFbnRlciBhbmQgZXhpdCBoZWxwZXJzLiAqL1xucHJvdG8uZXhpdFN0YXJ0ID0gdG9nZ2xlKCdhdFN0YXJ0JywgdHJ1ZSk7XG5wcm90by5lbnRlckxpc3QgPSB0b2dnbGUoJ2luTGlzdCcsIGZhbHNlKTtcbnByb3RvLmVudGVyTGluayA9IHRvZ2dsZSgnaW5MaW5rJywgZmFsc2UpO1xucHJvdG8uZW50ZXJCbG9jayA9IHRvZ2dsZSgnaW5CbG9jaycsIGZhbHNlKTtcblxuLyogTm9kZXMgdGhhdCBjYW4gaW50ZXJ1cHQgYSBwYXJhZ3JhcGg6XG4gKlxuICogYGBgbWFya2Rvd25cbiAqIEEgcGFyYWdyYXBoLCBmb2xsb3dlZCBieSBhIHRoZW1hdGljIGJyZWFrLlxuICogX19fXG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgYWJvdmUgZXhhbXBsZSwgdGhlIHRoZW1hdGljIGJyZWFrIOKAnGludGVydXB0c+KAnVxuICogdGhlIHBhcmFncmFwaC4gKi9cbnByb3RvLmludGVycnVwdFBhcmFncmFwaCA9IFtcbiAgWyd0aGVtYXRpY0JyZWFrJ10sXG4gIFsnYXR4SGVhZGluZyddLFxuICBbJ2ZlbmNlZENvZGUnXSxcbiAgWydibG9ja3F1b3RlJ10sXG4gIFsnaHRtbCddLFxuICBbJ3NldGV4dEhlYWRpbmcnLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydkZWZpbml0aW9uJywge2NvbW1vbm1hcms6IGZhbHNlfV0sXG4gIFsnZm9vdG5vdGUnLCB7Y29tbW9ubWFyazogZmFsc2V9XVxuXTtcblxuLyogTm9kZXMgdGhhdCBjYW4gaW50ZXJ1cHQgYSBsaXN0OlxuICpcbiAqIGBgYG1hcmtkb3duXG4gKiAtIE9uZVxuICogX19fXG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgYWJvdmUgZXhhbXBsZSwgdGhlIHRoZW1hdGljIGJyZWFrIOKAnGludGVydXB0c+KAnVxuICogdGhlIGxpc3QuICovXG5wcm90by5pbnRlcnJ1cHRMaXN0ID0gW1xuICBbJ2F0eEhlYWRpbmcnLCB7cGVkYW50aWM6IGZhbHNlfV0sXG4gIFsnZmVuY2VkQ29kZScsIHtwZWRhbnRpYzogZmFsc2V9XSxcbiAgWyd0aGVtYXRpY0JyZWFrJywge3BlZGFudGljOiBmYWxzZX1dLFxuICBbJ2RlZmluaXRpb24nLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydmb290bm90ZScsIHtjb21tb25tYXJrOiBmYWxzZX1dXG5dO1xuXG4vKiBOb2RlcyB0aGF0IGNhbiBpbnRlcnVwdCBhIGJsb2NrcXVvdGU6XG4gKlxuICogYGBgbWFya2Rvd25cbiAqID4gQSBwYXJhZ3JhcGguXG4gKiBfX19cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgdGhlbWF0aWMgYnJlYWsg4oCcaW50ZXJ1cHRz4oCdXG4gKiB0aGUgYmxvY2txdW90ZS4gKi9cbnByb3RvLmludGVycnVwdEJsb2NrcXVvdGUgPSBbXG4gIFsnaW5kZW50ZWRDb2RlJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydmZW5jZWRDb2RlJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydhdHhIZWFkaW5nJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydzZXRleHRIZWFkaW5nJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWyd0aGVtYXRpY0JyZWFrJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydodG1sJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydsaXN0Jywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydkZWZpbml0aW9uJywge2NvbW1vbm1hcms6IGZhbHNlfV0sXG4gIFsnZm9vdG5vdGUnLCB7Y29tbW9ubWFyazogZmFsc2V9XVxuXTtcblxuLyogSGFuZGxlcnMuICovXG5wcm90by5ibG9ja1Rva2VuaXplcnMgPSB7XG4gIG5ld2xpbmU6IHJlcXVpcmUoJy4vdG9rZW5pemUvbmV3bGluZScpLFxuICBpbmRlbnRlZENvZGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvY29kZS1pbmRlbnRlZCcpLFxuICBmZW5jZWRDb2RlOiByZXF1aXJlKCcuL3Rva2VuaXplL2NvZGUtZmVuY2VkJyksXG4gIGJsb2NrcXVvdGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvYmxvY2txdW90ZScpLFxuICBhdHhIZWFkaW5nOiByZXF1aXJlKCcuL3Rva2VuaXplL2hlYWRpbmctYXR4JyksXG4gIHRoZW1hdGljQnJlYWs6IHJlcXVpcmUoJy4vdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsnKSxcbiAgbGlzdDogcmVxdWlyZSgnLi90b2tlbml6ZS9saXN0JyksXG4gIHNldGV4dEhlYWRpbmc6IHJlcXVpcmUoJy4vdG9rZW5pemUvaGVhZGluZy1zZXRleHQnKSxcbiAgaHRtbDogcmVxdWlyZSgnLi90b2tlbml6ZS9odG1sLWJsb2NrJyksXG4gIGZvb3Rub3RlOiByZXF1aXJlKCcuL3Rva2VuaXplL2Zvb3Rub3RlLWRlZmluaXRpb24nKSxcbiAgZGVmaW5pdGlvbjogcmVxdWlyZSgnLi90b2tlbml6ZS9kZWZpbml0aW9uJyksXG4gIHRhYmxlOiByZXF1aXJlKCcuL3Rva2VuaXplL3RhYmxlJyksXG4gIHBhcmFncmFwaDogcmVxdWlyZSgnLi90b2tlbml6ZS9wYXJhZ3JhcGgnKVxufTtcblxucHJvdG8uaW5saW5lVG9rZW5pemVycyA9IHtcbiAgZXNjYXBlOiByZXF1aXJlKCcuL3Rva2VuaXplL2VzY2FwZScpLFxuICBhdXRvTGluazogcmVxdWlyZSgnLi90b2tlbml6ZS9hdXRvLWxpbmsnKSxcbiAgdXJsOiByZXF1aXJlKCcuL3Rva2VuaXplL3VybCcpLFxuICBodG1sOiByZXF1aXJlKCcuL3Rva2VuaXplL2h0bWwtaW5saW5lJyksXG4gIGxpbms6IHJlcXVpcmUoJy4vdG9rZW5pemUvbGluaycpLFxuICByZWZlcmVuY2U6IHJlcXVpcmUoJy4vdG9rZW5pemUvcmVmZXJlbmNlJyksXG4gIHN0cm9uZzogcmVxdWlyZSgnLi90b2tlbml6ZS9zdHJvbmcnKSxcbiAgZW1waGFzaXM6IHJlcXVpcmUoJy4vdG9rZW5pemUvZW1waGFzaXMnKSxcbiAgZGVsZXRpb246IHJlcXVpcmUoJy4vdG9rZW5pemUvZGVsZXRlJyksXG4gIGNvZGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvY29kZS1pbmxpbmUnKSxcbiAgYnJlYWs6IHJlcXVpcmUoJy4vdG9rZW5pemUvYnJlYWsnKSxcbiAgdGV4dDogcmVxdWlyZSgnLi90b2tlbml6ZS90ZXh0Jylcbn07XG5cbi8qIEV4cG9zZSBwcmVjZWRlbmNlLiAqL1xucHJvdG8uYmxvY2tNZXRob2RzID0ga2V5cyhwcm90by5ibG9ja1Rva2VuaXplcnMpO1xucHJvdG8uaW5saW5lTWV0aG9kcyA9IGtleXMocHJvdG8uaW5saW5lVG9rZW5pemVycyk7XG5cbi8qIFRva2VuaXplcnMuICovXG5wcm90by50b2tlbml6ZUJsb2NrID0gdG9rZW5pemVyKCdibG9jaycpO1xucHJvdG8udG9rZW5pemVJbmxpbmUgPSB0b2tlbml6ZXIoJ2lubGluZScpO1xucHJvdG8udG9rZW5pemVGYWN0b3J5ID0gdG9rZW5pemVyO1xuXG4vKiBHZXQgYWxsIGtleXMgaW4gYHZhbHVlYC4gKi9cbmZ1bmN0aW9uIGtleXModmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuXG4gIGZvciAoa2V5IGluIHZhbHVlKSB7XG4gICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG5cbi8vIENvbnN0cnVjdCBhIHN0YXRlIGB0b2dnbGVyYDogYSBmdW5jdGlvbiB3aGljaCBpbnZlcnNlcyBgcHJvcGVydHlgIGluIGNvbnRleHRcbi8vIGJhc2VkIG9uIGl0cyBjdXJyZW50IHZhbHVlLlxuLy8gVGhlIGJ5IGB0b2dnbGVyYCByZXR1cm5lZCBmdW5jdGlvbiByZXN0b3JlcyB0aGF0IHZhbHVlLlxuZnVuY3Rpb24gZmFjdG9yeShrZXksIHN0YXRlLCBjdHgpIHtcbiAgcmV0dXJuIGVudGVyXG5cbiAgZnVuY3Rpb24gZW50ZXIoKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjdHggfHwgdGhpc1xuICAgIHZhciBjdXJyZW50ID0gY29udGV4dFtrZXldXG5cbiAgICBjb250ZXh0W2tleV0gPSAhc3RhdGVcblxuICAgIHJldHVybiBleGl0XG5cbiAgICBmdW5jdGlvbiBleGl0KCkge1xuICAgICAgY29udGV4dFtrZXldID0gY3VycmVudFxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeVxuXG5mdW5jdGlvbiBmYWN0b3J5KGZpbGUpIHtcbiAgdmFyIGNvbnRlbnRzID0gaW5kaWNlcyhTdHJpbmcoZmlsZSkpXG5cbiAgcmV0dXJuIHtcbiAgICB0b1Bvc2l0aW9uOiBvZmZzZXRUb1Bvc2l0aW9uRmFjdG9yeShjb250ZW50cyksXG4gICAgdG9PZmZzZXQ6IHBvc2l0aW9uVG9PZmZzZXRGYWN0b3J5KGNvbnRlbnRzKVxuICB9XG59XG5cbi8vIEZhY3RvcnkgdG8gZ2V0IHRoZSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBmb3IgYG9mZnNldGAgaW4gdGhlIGJvdW5kXG4vLyBpbmRpY2VzLlxuZnVuY3Rpb24gb2Zmc2V0VG9Qb3NpdGlvbkZhY3RvcnkoaW5kaWNlcykge1xuICByZXR1cm4gb2Zmc2V0VG9Qb3NpdGlvblxuXG4gIC8vIEdldCB0aGUgbGluZSBhbmQgY29sdW1uLWJhc2VkIGBwb3NpdGlvbmAgZm9yIGBvZmZzZXRgIGluIHRoZSBib3VuZCBpbmRpY2VzLlxuICBmdW5jdGlvbiBvZmZzZXRUb1Bvc2l0aW9uKG9mZnNldCkge1xuICAgIHZhciBpbmRleCA9IC0xXG4gICAgdmFyIGxlbmd0aCA9IGluZGljZXMubGVuZ3RoXG5cbiAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgcmV0dXJuIHt9XG4gICAgfVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpbmRpY2VzW2luZGV4XSA+IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxpbmU6IGluZGV4ICsgMSxcbiAgICAgICAgICBjb2x1bW46IG9mZnNldCAtIChpbmRpY2VzW2luZGV4IC0gMV0gfHwgMCkgKyAxLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge31cbiAgfVxufVxuXG4vLyBGYWN0b3J5IHRvIGdldCB0aGUgYG9mZnNldGAgZm9yIGEgbGluZSBhbmQgY29sdW1uLWJhc2VkIGBwb3NpdGlvbmAgaW4gdGhlXG4vLyBib3VuZCBpbmRpY2VzLlxuZnVuY3Rpb24gcG9zaXRpb25Ub09mZnNldEZhY3RvcnkoaW5kaWNlcykge1xuICByZXR1cm4gcG9zaXRpb25Ub09mZnNldFxuXG4gIC8vIEdldCB0aGUgYG9mZnNldGAgZm9yIGEgbGluZSBhbmQgY29sdW1uLWJhc2VkIGBwb3NpdGlvbmAgaW4gdGhlIGJvdW5kXG4gIC8vIGluZGljZXMuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uVG9PZmZzZXQocG9zaXRpb24pIHtcbiAgICB2YXIgbGluZSA9IHBvc2l0aW9uICYmIHBvc2l0aW9uLmxpbmVcbiAgICB2YXIgY29sdW1uID0gcG9zaXRpb24gJiYgcG9zaXRpb24uY29sdW1uXG5cbiAgICBpZiAoIWlzTmFOKGxpbmUpICYmICFpc05hTihjb2x1bW4pICYmIGxpbmUgLSAxIGluIGluZGljZXMpIHtcbiAgICAgIHJldHVybiAoaW5kaWNlc1tsaW5lIC0gMl0gfHwgMCkgKyBjb2x1bW4gLSAxIHx8IDBcbiAgICB9XG5cbiAgICByZXR1cm4gLTFcbiAgfVxufVxuXG4vLyBHZXQgaW5kaWNlcyBvZiBsaW5lLWJyZWFrcyBpbiBgdmFsdWVgLlxuZnVuY3Rpb24gaW5kaWNlcyh2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gW11cbiAgdmFyIGluZGV4ID0gdmFsdWUuaW5kZXhPZignXFxuJylcblxuICB3aGlsZSAoaW5kZXggIT09IC0xKSB7XG4gICAgcmVzdWx0LnB1c2goaW5kZXggKyAxKVxuICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZignXFxuJywgaW5kZXggKyAxKVxuICB9XG5cbiAgcmVzdWx0LnB1c2godmFsdWUubGVuZ3RoICsgMSlcblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcblxuLyogRmFjdG9yeSB0byBkZS1lc2NhcGUgYSB2YWx1ZSwgYmFzZWQgb24gYSBsaXN0IGF0IGBrZXlgXG4gKiBpbiBgY3R4YC4gKi9cbmZ1bmN0aW9uIGZhY3RvcnkoY3R4LCBrZXkpIHtcbiAgcmV0dXJuIHVuZXNjYXBlO1xuXG4gIC8qIERlLWVzY2FwZSBhIHN0cmluZyB1c2luZyB0aGUgZXhwcmVzc2lvbiBhdCBga2V5YFxuICAgKiBpbiBgY3R4YC4gKi9cbiAgZnVuY3Rpb24gdW5lc2NhcGUodmFsdWUpIHtcbiAgICB2YXIgcHJldiA9IDA7XG4gICAgdmFyIGluZGV4ID0gdmFsdWUuaW5kZXhPZignXFxcXCcpO1xuICAgIHZhciBlc2NhcGUgPSBjdHhba2V5XTtcbiAgICB2YXIgcXVldWUgPSBbXTtcbiAgICB2YXIgY2hhcmFjdGVyO1xuXG4gICAgd2hpbGUgKGluZGV4ICE9PSAtMSkge1xuICAgICAgcXVldWUucHVzaCh2YWx1ZS5zbGljZShwcmV2LCBpbmRleCkpO1xuICAgICAgcHJldiA9IGluZGV4ICsgMTtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChwcmV2KTtcblxuICAgICAgLyogSWYgdGhlIGZvbGxvd2luZyBjaGFyYWN0ZXIgaXMgbm90IGEgdmFsaWQgZXNjYXBlLFxuICAgICAgICogYWRkIHRoZSBzbGFzaC4gKi9cbiAgICAgIGlmICghY2hhcmFjdGVyIHx8IGVzY2FwZS5pbmRleE9mKGNoYXJhY3RlcikgPT09IC0xKSB7XG4gICAgICAgIHF1ZXVlLnB1c2goJ1xcXFwnKTtcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXFxcJywgcHJldik7XG4gICAgfVxuXG4gICAgcXVldWUucHVzaCh2YWx1ZS5zbGljZShwcmV2KSk7XG5cbiAgICByZXR1cm4gcXVldWUuam9pbignJyk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcbnZhciBlbnRpdGllcyA9IHJlcXVpcmUoJ3BhcnNlLWVudGl0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcblxuLyogRmFjdG9yeSB0byBjcmVhdGUgYW4gZW50aXR5IGRlY29kZXIuICovXG5mdW5jdGlvbiBmYWN0b3J5KGN0eCkge1xuICBkZWNvZGVyLnJhdyA9IGRlY29kZVJhdztcblxuICByZXR1cm4gZGVjb2RlcjtcblxuICAvKiBOb3JtYWxpemUgYHBvc2l0aW9uYCB0byBhZGQgYW4gYGluZGVudGAuICovXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShwb3NpdGlvbikge1xuICAgIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgICB2YXIgbGluZSA9IHBvc2l0aW9uLmxpbmU7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsrbGluZSkge1xuICAgICAgaWYgKCEobGluZSBpbiBvZmZzZXRzKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVzdWx0LnB1c2goKG9mZnNldHNbbGluZV0gfHwgMCkgKyAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHBvc2l0aW9uLFxuICAgICAgaW5kZW50OiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgLyogSGFuZGxlIGEgd2FybmluZy5cbiAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93b29vcm0vcGFyc2UtZW50aXRpZXNcbiAgICogZm9yIHRoZSB3YXJuaW5ncy4gKi9cbiAgZnVuY3Rpb24gaGFuZGxlV2FybmluZyhyZWFzb24sIHBvc2l0aW9uLCBjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdHguZmlsZS5tZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24pO1xuICB9XG5cbiAgLyogRGVjb2RlIGB2YWx1ZWAgKGF0IGBwb3NpdGlvbmApIGludG8gdGV4dC1ub2Rlcy4gKi9cbiAgZnVuY3Rpb24gZGVjb2Rlcih2YWx1ZSwgcG9zaXRpb24sIGhhbmRsZXIpIHtcbiAgICBlbnRpdGllcyh2YWx1ZSwge1xuICAgICAgcG9zaXRpb246IG5vcm1hbGl6ZShwb3NpdGlvbiksXG4gICAgICB3YXJuaW5nOiBoYW5kbGVXYXJuaW5nLFxuICAgICAgdGV4dDogaGFuZGxlcixcbiAgICAgIHJlZmVyZW5jZTogaGFuZGxlcixcbiAgICAgIHRleHRDb250ZXh0OiBjdHgsXG4gICAgICByZWZlcmVuY2VDb250ZXh0OiBjdHhcbiAgICB9KTtcbiAgfVxuXG4gIC8qIERlY29kZSBgdmFsdWVgIChhdCBgcG9zaXRpb25gKSBpbnRvIGEgc3RyaW5nLiAqL1xuICBmdW5jdGlvbiBkZWNvZGVSYXcodmFsdWUsIHBvc2l0aW9uLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGVudGl0aWVzKHZhbHVlLCB4dGVuZChvcHRpb25zLCB7XG4gICAgICBwb3NpdGlvbjogbm9ybWFsaXplKHBvc2l0aW9uKSxcbiAgICAgIHdhcm5pbmc6IGhhbmRsZVdhcm5pbmdcbiAgICB9KSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhleGFkZWNpbWFsXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBoZXhhZGVjaW1hbC5cbmZ1bmN0aW9uIGhleGFkZWNpbWFsKGNoYXJhY3Rlcikge1xuICB2YXIgY29kZSA9IHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdzdHJpbmcnID8gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgOiBjaGFyYWN0ZXJcblxuICByZXR1cm4gKFxuICAgIChjb2RlID49IDk3IC8qIGEgKi8gJiYgY29kZSA8PSAxMDIpIC8qIHogKi8gfHxcbiAgICAoY29kZSA+PSA2NSAvKiBBICovICYmIGNvZGUgPD0gNzApIC8qIFogKi8gfHxcbiAgICAoY29kZSA+PSA0OCAvKiBBICovICYmIGNvZGUgPD0gNTcpIC8qIFogKi9cbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBhbHBoYWJldGljYWwgPSByZXF1aXJlKCdpcy1hbHBoYWJldGljYWwnKVxudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJylcblxubW9kdWxlLmV4cG9ydHMgPSBhbHBoYW51bWVyaWNhbFxuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYWxwaGFudW1lcmljYWwuXG5mdW5jdGlvbiBhbHBoYW51bWVyaWNhbChjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIGFscGhhYmV0aWNhbChjaGFyYWN0ZXIpIHx8IGRlY2ltYWwoY2hhcmFjdGVyKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG52YXIgZWxcblxudmFyIHNlbWljb2xvbiA9IDU5IC8vICAnOydcblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVFbnRpdHlcblxuZnVuY3Rpb24gZGVjb2RlRW50aXR5KGNoYXJhY3RlcnMpIHtcbiAgdmFyIGVudGl0eSA9ICcmJyArIGNoYXJhY3RlcnMgKyAnOydcbiAgdmFyIGNoYXJcblxuICBlbCA9IGVsIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKVxuICBlbC5pbm5lckhUTUwgPSBlbnRpdHlcbiAgY2hhciA9IGVsLnRleHRDb250ZW50XG5cbiAgLy8gU29tZSBlbnRpdGllcyBkbyBub3QgcmVxdWlyZSB0aGUgY2xvc2luZyBzZW1pY29sb24gKGAmbm90YCAtIGZvciBpbnN0YW5jZSksXG4gIC8vIHdoaWNoIGxlYWRzIHRvIHNpdHVhdGlvbnMgd2hlcmUgcGFyc2luZyB0aGUgYXNzdW1lZCBlbnRpdHkgb2YgJm5vdGl0OyB3aWxsXG4gIC8vIHJlc3VsdCBpbiB0aGUgc3RyaW5nIGDCrGl0O2AuICBXaGVuIHdlIGVuY291bnRlciBhIHRyYWlsaW5nIHNlbWljb2xvbiBhZnRlclxuICAvLyBwYXJzaW5nIGFuZCB0aGUgZW50aXR5IHRvIGRlY29kZSB3YXMgbm90IGEgc2VtaWNvbG9uIChgJnNlbWk7YCksIHdlIGNhblxuICAvLyBhc3N1bWUgdGhhdCB0aGUgbWF0Y2hpbmcgd2FzIGluY29tcGxldGVcbiAgaWYgKGNoYXIuY2hhckNvZGVBdChjaGFyLmxlbmd0aCAtIDEpID09PSBzZW1pY29sb24gJiYgY2hhcmFjdGVycyAhPT0gJ3NlbWknKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBJZiB0aGUgZGVjb2RlZCBzdHJpbmcgaXMgZXF1YWwgdG8gdGhlIGlucHV0LCB0aGUgZW50aXR5IHdhcyBub3QgdmFsaWRcbiAgcmV0dXJuIGNoYXIgPT09IGVudGl0eSA/IGZhbHNlIDogY2hhclxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG5cbnZhciBNRVJHRUFCTEVfTk9ERVMgPSB7XG4gIHRleHQ6IG1lcmdlVGV4dCxcbiAgYmxvY2txdW90ZTogbWVyZ2VCbG9ja3F1b3RlXG59O1xuXG4vKiBDaGVjayB3aGV0aGVyIGEgbm9kZSBpcyBtZXJnZWFibGUgd2l0aCBhZGphY2VudCBub2Rlcy4gKi9cbmZ1bmN0aW9uIG1lcmdlYWJsZShub2RlKSB7XG4gIHZhciBzdGFydDtcbiAgdmFyIGVuZDtcblxuICBpZiAobm9kZS50eXBlICE9PSAndGV4dCcgfHwgIW5vZGUucG9zaXRpb24pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXJ0ID0gbm9kZS5wb3NpdGlvbi5zdGFydDtcbiAgZW5kID0gbm9kZS5wb3NpdGlvbi5lbmQ7XG5cbiAgLyogT25seSBtZXJnZSBub2RlcyB3aGljaCBvY2N1cHkgdGhlIHNhbWUgc2l6ZSBhcyB0aGVpclxuICAgKiBgdmFsdWVgLiAqL1xuICByZXR1cm4gc3RhcnQubGluZSAhPT0gZW5kLmxpbmUgfHxcbiAgICAgIGVuZC5jb2x1bW4gLSBzdGFydC5jb2x1bW4gPT09IG5vZGUudmFsdWUubGVuZ3RoO1xufVxuXG4vKiBNZXJnZSB0d28gdGV4dCBub2RlczogYG5vZGVgIGludG8gYHByZXZgLiAqL1xuZnVuY3Rpb24gbWVyZ2VUZXh0KHByZXYsIG5vZGUpIHtcbiAgcHJldi52YWx1ZSArPSBub2RlLnZhbHVlO1xuXG4gIHJldHVybiBwcmV2O1xufVxuXG4vKiBNZXJnZSB0d28gYmxvY2txdW90ZXM6IGBub2RlYCBpbnRvIGBwcmV2YCwgdW5sZXNzIGluXG4gKiBDb21tb25NYXJrIG1vZGUuICovXG5mdW5jdGlvbiBtZXJnZUJsb2NrcXVvdGUocHJldiwgbm9kZSkge1xuICBpZiAodGhpcy5vcHRpb25zLmNvbW1vbm1hcmspIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHByZXYuY2hpbGRyZW4gPSBwcmV2LmNoaWxkcmVuLmNvbmNhdChub2RlLmNoaWxkcmVuKTtcblxuICByZXR1cm4gcHJldjtcbn1cblxuLyogQ29uc3RydWN0IGEgdG9rZW5pemVyLiAgVGhpcyBjcmVhdGVzIGJvdGhcbiAqIGB0b2tlbml6ZUlubGluZWAgYW5kIGB0b2tlbml6ZUJsb2NrYC4gKi9cbmZ1bmN0aW9uIGZhY3RvcnkodHlwZSkge1xuICByZXR1cm4gdG9rZW5pemU7XG5cbiAgLyogVG9rZW5pemVyIGZvciBhIGJvdW5kIGB0eXBlYC4gKi9cbiAgZnVuY3Rpb24gdG9rZW5pemUodmFsdWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBvZmZzZXQgPSBzZWxmLm9mZnNldDtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgdmFyIG1ldGhvZHMgPSBzZWxmW3R5cGUgKyAnTWV0aG9kcyddO1xuICAgIHZhciB0b2tlbml6ZXJzID0gc2VsZlt0eXBlICsgJ1Rva2VuaXplcnMnXTtcbiAgICB2YXIgbGluZSA9IGxvY2F0aW9uLmxpbmU7XG4gICAgdmFyIGNvbHVtbiA9IGxvY2F0aW9uLmNvbHVtbjtcbiAgICB2YXIgaW5kZXg7XG4gICAgdmFyIGxlbmd0aDtcbiAgICB2YXIgbWV0aG9kO1xuICAgIHZhciBuYW1lO1xuICAgIHZhciBtYXRjaGVkO1xuICAgIHZhciB2YWx1ZUxlbmd0aDtcblxuICAgIC8qIFRyaW0gd2hpdGUgc3BhY2Ugb25seSBsaW5lcy4gKi9cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cblxuICAgIC8qIEV4cG9zZSBvbiBgZWF0YC4gKi9cbiAgICBlYXQubm93ID0gbm93O1xuICAgIGVhdC5maWxlID0gc2VsZi5maWxlO1xuXG4gICAgLyogU3luYyBpbml0aWFsIG9mZnNldC4gKi9cbiAgICB1cGRhdGVQb3NpdGlvbignJyk7XG5cbiAgICAvKiBJdGVyYXRlIG92ZXIgYHZhbHVlYCwgYW5kIGl0ZXJhdGUgb3ZlciBhbGxcbiAgICAgKiB0b2tlbml6ZXJzLiAgV2hlbiBvbmUgZWF0cyBzb21ldGhpbmcsIHJlLWl0ZXJhdGVcbiAgICAgKiB3aXRoIHRoZSByZW1haW5pbmcgdmFsdWUuICBJZiBubyB0b2tlbml6ZXIgZWF0cyxcbiAgICAgKiBzb21ldGhpbmcgZmFpbGVkIChzaG91bGQgbm90IGhhcHBlbikgYW5kIGFuXG4gICAgICogZXhjZXB0aW9uIGlzIHRocm93bi4gKi9cbiAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgIGluZGV4ID0gLTE7XG4gICAgICBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDtcbiAgICAgIG1hdGNoZWQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgbmFtZSA9IG1ldGhvZHNbaW5kZXhdO1xuICAgICAgICBtZXRob2QgPSB0b2tlbml6ZXJzW25hbWVdO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBtZXRob2QgJiZcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoIW1ldGhvZC5vbmx5QXRTdGFydCB8fCBzZWxmLmF0U3RhcnQpICYmXG4gICAgICAgICAgKCFtZXRob2Qubm90SW5MaXN0IHx8ICFzZWxmLmluTGlzdCkgJiZcbiAgICAgICAgICAoIW1ldGhvZC5ub3RJbkJsb2NrIHx8ICFzZWxmLmluQmxvY2spICYmXG4gICAgICAgICAgKCFtZXRob2Qubm90SW5MaW5rIHx8ICFzZWxmLmluTGluaylcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICBtZXRob2QuYXBwbHkoc2VsZiwgW2VhdCwgdmFsdWVdKTtcblxuICAgICAgICAgIG1hdGNoZWQgPSB2YWx1ZUxlbmd0aCAhPT0gdmFsdWUubGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgICBzZWxmLmZpbGUuZmFpbChuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3AnKSwgZWF0Lm5vdygpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmLmVvZiA9IG5vdygpO1xuXG4gICAgcmV0dXJuIHRva2VucztcblxuICAgIC8qIFVwZGF0ZSBsaW5lLCBjb2x1bW4sIGFuZCBvZmZzZXQgYmFzZWQgb25cbiAgICAgKiBgdmFsdWVgLiAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKHN1YnZhbHVlKSB7XG4gICAgICB2YXIgbGFzdEluZGV4ID0gLTE7XG4gICAgICB2YXIgaW5kZXggPSBzdWJ2YWx1ZS5pbmRleE9mKCdcXG4nKTtcblxuICAgICAgd2hpbGUgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBsaW5lKys7XG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICBpbmRleCA9IHN1YnZhbHVlLmluZGV4T2YoJ1xcbicsIGluZGV4ICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXN0SW5kZXggPT09IC0xKSB7XG4gICAgICAgIGNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2x1bW4gPSBzdWJ2YWx1ZS5sZW5ndGggLSBsYXN0SW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaW5lIGluIG9mZnNldCkge1xuICAgICAgICBpZiAobGFzdEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIGNvbHVtbiArPSBvZmZzZXRbbGluZV07XG4gICAgICAgIH0gZWxzZSBpZiAoY29sdW1uIDw9IG9mZnNldFtsaW5lXSkge1xuICAgICAgICAgIGNvbHVtbiA9IG9mZnNldFtsaW5lXSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBHZXQgb2Zmc2V0LiAgQ2FsbGVkIGJlZm9yZSB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzXG4gICAgICogZWF0ZW4gdG8gcmV0cmlldmUgdGhlIHJhbmdlJ3Mgb2Zmc2V0cy4gKi9cbiAgICBmdW5jdGlvbiBnZXRPZmZzZXQoKSB7XG4gICAgICB2YXIgaW5kZW50YXRpb24gPSBbXTtcbiAgICAgIHZhciBwb3MgPSBsaW5lICsgMTtcblxuICAgICAgLyogRG9uZS4gIENhbGxlZCB3aGVuIHRoZSBsYXN0IGNoYXJhY3RlciBpc1xuICAgICAgICogZWF0ZW4gdG8gcmV0cmlldmUgdGhlIHJhbmdl4oCZcyBvZmZzZXRzLiAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxhc3QgPSBsaW5lICsgMTtcblxuICAgICAgICB3aGlsZSAocG9zIDwgbGFzdCkge1xuICAgICAgICAgIGluZGVudGF0aW9uLnB1c2goKG9mZnNldFtwb3NdIHx8IDApICsgMSk7XG5cbiAgICAgICAgICBwb3MrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRlbnRhdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyogR2V0IHRoZSBjdXJyZW50IHBvc2l0aW9uLiAqL1xuICAgIGZ1bmN0aW9uIG5vdygpIHtcbiAgICAgIHZhciBwb3MgPSB7bGluZTogbGluZSwgY29sdW1uOiBjb2x1bW59O1xuXG4gICAgICBwb3Mub2Zmc2V0ID0gc2VsZi50b09mZnNldChwb3MpO1xuXG4gICAgICByZXR1cm4gcG9zO1xuICAgIH1cblxuICAgIC8qIFN0b3JlIHBvc2l0aW9uIGluZm9ybWF0aW9uIGZvciBhIG5vZGUuICovXG4gICAgZnVuY3Rpb24gUG9zaXRpb24oc3RhcnQpIHtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gbm93KCk7XG4gICAgfVxuXG4gICAgLyogVGhyb3cgd2hlbiBhIHZhbHVlIGlzIGluY29ycmVjdGx5IGVhdGVuLlxuICAgICAqIFRoaXMgc2hvdWxkbuKAmXQgaGFwcGVuIGJ1dCB3aWxsIHRocm93IG9uIG5ldyxcbiAgICAgKiBpbmNvcnJlY3QgcnVsZXMuICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVFYXQoc3VidmFsdWUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHZhbHVlLnN1YnN0cmluZygwLCBzdWJ2YWx1ZS5sZW5ndGgpICE9PSBzdWJ2YWx1ZSkge1xuICAgICAgICAvKiBDYXB0dXJlIHN0YWNrLXRyYWNlLiAqL1xuICAgICAgICBzZWxmLmZpbGUuZmFpbChcbiAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnSW5jb3JyZWN0bHkgZWF0ZW4gdmFsdWU6IHBsZWFzZSByZXBvcnQgdGhpcyAnICtcbiAgICAgICAgICAgICd3YXJuaW5nIG9uIGh0dHA6Ly9naXQuaW8vdmc1RnQnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBub3coKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIE1hcmsgcG9zaXRpb24gYW5kIHBhdGNoIGBub2RlLnBvc2l0aW9uYC4gKi9cbiAgICBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICAgIHZhciBiZWZvcmUgPSBub3coKTtcblxuICAgICAgcmV0dXJuIHVwZGF0ZTtcblxuICAgICAgLyogQWRkIHRoZSBwb3NpdGlvbiB0byBhIG5vZGUuICovXG4gICAgICBmdW5jdGlvbiB1cGRhdGUobm9kZSwgaW5kZW50KSB7XG4gICAgICAgIHZhciBwcmV2ID0gbm9kZS5wb3NpdGlvbjtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcHJldiA/IHByZXYuc3RhcnQgOiBiZWZvcmU7XG4gICAgICAgIHZhciBjb21iaW5lZCA9IFtdO1xuICAgICAgICB2YXIgbiA9IHByZXYgJiYgcHJldi5lbmQubGluZTtcbiAgICAgICAgdmFyIGwgPSBiZWZvcmUubGluZTtcblxuICAgICAgICBub2RlLnBvc2l0aW9uID0gbmV3IFBvc2l0aW9uKHN0YXJ0KTtcblxuICAgICAgICAvKiBJZiB0aGVyZSB3YXMgYWxyZWFkeSBhIGBwb3NpdGlvbmAsIHRoaXNcbiAgICAgICAgICogbm9kZSB3YXMgbWVyZ2VkLiAgRml4aW5nIGBzdGFydGAgd2FzbuKAmXRcbiAgICAgICAgICogaGFyZCwgYnV0IHRoZSBpbmRlbnQgaXMgZGlmZmVyZW50LlxuICAgICAgICAgKiBFc3BlY2lhbGx5IGJlY2F1c2Ugc29tZSBpbmZvcm1hdGlvbiwgdGhlXG4gICAgICAgICAqIGluZGVudCBiZXR3ZWVuIGBuYCBhbmQgYGxgIHdhc27igJl0XG4gICAgICAgICAqIHRyYWNrZWQuICBMdWNraWx5LCB0aGF0IHNwYWNlIGlzXG4gICAgICAgICAqIChzaG91bGQgYmU/KSBlbXB0eSwgc28gd2UgY2FuIHNhZmVseVxuICAgICAgICAgKiBjaGVjayBmb3IgaXQgbm93LiAqL1xuICAgICAgICBpZiAocHJldiAmJiBpbmRlbnQgJiYgcHJldi5pbmRlbnQpIHtcbiAgICAgICAgICBjb21iaW5lZCA9IHByZXYuaW5kZW50O1xuXG4gICAgICAgICAgaWYgKG4gPCBsKSB7XG4gICAgICAgICAgICB3aGlsZSAoKytuIDwgbCkge1xuICAgICAgICAgICAgICBjb21iaW5lZC5wdXNoKChvZmZzZXRbbl0gfHwgMCkgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tYmluZWQucHVzaChiZWZvcmUuY29sdW1uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmRlbnQgPSBjb21iaW5lZC5jb25jYXQoaW5kZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUucG9zaXRpb24uaW5kZW50ID0gaW5kZW50IHx8IFtdO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEFkZCBgbm9kZWAgdG8gYHBhcmVudGBzIGNoaWxkcmVuIG9yIHRvIGB0b2tlbnNgLlxuICAgICAqIFBlcmZvcm1zIG1lcmdlcyB3aGVyZSBwb3NzaWJsZS4gKi9cbiAgICBmdW5jdGlvbiBhZGQobm9kZSwgcGFyZW50KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4gOiB0b2tlbnM7XG4gICAgICB2YXIgcHJldiA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHByZXYgJiZcbiAgICAgICAgbm9kZS50eXBlID09PSBwcmV2LnR5cGUgJiZcbiAgICAgICAgbm9kZS50eXBlIGluIE1FUkdFQUJMRV9OT0RFUyAmJlxuICAgICAgICBtZXJnZWFibGUocHJldikgJiZcbiAgICAgICAgbWVyZ2VhYmxlKG5vZGUpXG4gICAgICApIHtcbiAgICAgICAgbm9kZSA9IE1FUkdFQUJMRV9OT0RFU1tub2RlLnR5cGVdLmNhbGwoc2VsZiwgcHJldiwgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlICE9PSBwcmV2KSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmF0U3RhcnQgJiYgdG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBzZWxmLmV4aXRTdGFydCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvKiBSZW1vdmUgYHN1YnZhbHVlYCBmcm9tIGB2YWx1ZWAuXG4gICAgICogYHN1YnZhbHVlYCBtdXN0IGJlIGF0IHRoZSBzdGFydCBvZiBgdmFsdWVgLiAqL1xuICAgIGZ1bmN0aW9uIGVhdChzdWJ2YWx1ZSkge1xuICAgICAgdmFyIGluZGVudCA9IGdldE9mZnNldCgpO1xuICAgICAgdmFyIHBvcyA9IHBvc2l0aW9uKCk7XG4gICAgICB2YXIgY3VycmVudCA9IG5vdygpO1xuXG4gICAgICB2YWxpZGF0ZUVhdChzdWJ2YWx1ZSk7XG5cbiAgICAgIGFwcGx5LnJlc2V0ID0gcmVzZXQ7XG4gICAgICByZXNldC50ZXN0ID0gdGVzdDtcbiAgICAgIGFwcGx5LnRlc3QgPSB0ZXN0O1xuXG4gICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyhzdWJ2YWx1ZS5sZW5ndGgpO1xuXG4gICAgICB1cGRhdGVQb3NpdGlvbihzdWJ2YWx1ZSk7XG5cbiAgICAgIGluZGVudCA9IGluZGVudCgpO1xuXG4gICAgICByZXR1cm4gYXBwbHk7XG5cbiAgICAgIC8qIEFkZCB0aGUgZ2l2ZW4gYXJndW1lbnRzLCBhZGQgYHBvc2l0aW9uYCB0b1xuICAgICAgICogdGhlIHJldHVybmVkIG5vZGUsIGFuZCByZXR1cm4gdGhlIG5vZGUuICovXG4gICAgICBmdW5jdGlvbiBhcHBseShub2RlLCBwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHBvcyhhZGQocG9zKG5vZGUpLCBwYXJlbnQpLCBpbmRlbnQpO1xuICAgICAgfVxuXG4gICAgICAvKiBGdW5jdGlvbnMganVzdCBsaWtlIGFwcGx5LCBidXQgcmVzZXRzIHRoZVxuICAgICAgICogY29udGVudDogIHRoZSBsaW5lIGFuZCBjb2x1bW4gYXJlIHJldmVyc2VkLFxuICAgICAgICogYW5kIHRoZSBlYXRlbiB2YWx1ZSBpcyByZS1hZGRlZC5cbiAgICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciBub2RlcyB3aXRoIGEgc2luZ2xlXG4gICAgICAgKiB0eXBlIG9mIGNvbnRlbnQsIHN1Y2ggYXMgbGlzdHMgYW5kIHRhYmxlcy5cbiAgICAgICAqIFNlZSBgYXBwbHlgIGFib3ZlIGZvciB3aGF0IHBhcmFtZXRlcnMgYXJlXG4gICAgICAgKiBleHBlY3RlZC4gKi9cbiAgICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICB2YXIgbm9kZSA9IGFwcGx5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgbGluZSA9IGN1cnJlbnQubGluZTtcbiAgICAgICAgY29sdW1uID0gY3VycmVudC5jb2x1bW47XG4gICAgICAgIHZhbHVlID0gc3VidmFsdWUgKyB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cblxuICAgICAgLyogVGVzdCB0aGUgcG9zaXRpb24sIGFmdGVyIGVhdGluZywgYW5kIHJldmVyc2VcbiAgICAgICAqIHRvIGEgbm90LWVhdGVuIHN0YXRlLiAqL1xuICAgICAgZnVuY3Rpb24gdGVzdCgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBvcyh7fSk7XG5cbiAgICAgICAgbGluZSA9IGN1cnJlbnQubGluZTtcbiAgICAgICAgY29sdW1uID0gY3VycmVudC5jb2x1bW47XG4gICAgICAgIHZhbHVlID0gc3VidmFsdWUgKyB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0LnBvc2l0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIGVzY2FwZXMgPSByZXF1aXJlKCdtYXJrZG93bi1lc2NhcGVzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0T3B0aW9ucztcblxuZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGN1cnJlbnQgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBrZXk7XG4gIHZhciB2YWx1ZTtcblxuICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSB4dGVuZChvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnSW52YWxpZCB2YWx1ZSBgJyArIG9wdGlvbnMgKyAnYCAnICtcbiAgICAgICdmb3Igc2V0dGluZyBgb3B0aW9uc2AnXG4gICAgKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGRlZmF1bHRzKSB7XG4gICAgdmFsdWUgPSBvcHRpb25zW2tleV07XG5cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSBjdXJyZW50W2tleV07XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgKGtleSAhPT0gJ2Jsb2NrcycgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpIHx8XG4gICAgICAoa2V5ID09PSAnYmxvY2tzJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGAnICsgdmFsdWUgKyAnYCBmb3Igc2V0dGluZyBgb3B0aW9ucy4nICsga2V5ICsgJ2AnKTtcbiAgICB9XG5cbiAgICBvcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHNlbGYub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHNlbGYuZXNjYXBlID0gZXNjYXBlcyhvcHRpb25zKTtcblxuICByZXR1cm4gc2VsZjtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZXNcblxudmFyIGRlZmF1bHRzID0gW1xuICAnXFxcXCcsXG4gICdgJyxcbiAgJyonLFxuICAneycsXG4gICd9JyxcbiAgJ1snLFxuICAnXScsXG4gICcoJyxcbiAgJyknLFxuICAnIycsXG4gICcrJyxcbiAgJy0nLFxuICAnLicsXG4gICchJyxcbiAgJ18nLFxuICAnPidcbl1cblxudmFyIGdmbSA9IGRlZmF1bHRzLmNvbmNhdChbJ34nLCAnfCddKVxuXG52YXIgY29tbW9ubWFyayA9IGdmbS5jb25jYXQoW1xuICAnXFxuJyxcbiAgJ1wiJyxcbiAgJyQnLFxuICAnJScsXG4gICcmJyxcbiAgXCInXCIsXG4gICcsJyxcbiAgJy8nLFxuICAnOicsXG4gICc7JyxcbiAgJzwnLFxuICAnPScsXG4gICc/JyxcbiAgJ0AnLFxuICAnXidcbl0pXG5cbmVzY2FwZXMuZGVmYXVsdCA9IGRlZmF1bHRzXG5lc2NhcGVzLmdmbSA9IGdmbVxuZXNjYXBlcy5jb21tb25tYXJrID0gY29tbW9ubWFya1xuXG4vLyBHZXQgbWFya2Rvd24gZXNjYXBlcy5cbmZ1bmN0aW9uIGVzY2FwZXMob3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHNldHRpbmdzLmNvbW1vbm1hcmspIHtcbiAgICByZXR1cm4gY29tbW9ubWFya1xuICB9XG5cbiAgcmV0dXJuIHNldHRpbmdzLmdmbSA/IGdmbSA6IGRlZmF1bHRzXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG52YXIgcmVtb3ZlUG9zaXRpb24gPSByZXF1aXJlKCd1bmlzdC11dGlsLXJlbW92ZS1wb3NpdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgRVhQUkVTU0lPTl9MSU5FX0JSRUFLUyA9IC9cXHJcXG58XFxyL2c7XG5cbi8qIFBhcnNlIHRoZSBib3VuZCBmaWxlLiAqL1xuZnVuY3Rpb24gcGFyc2UoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHZhbHVlID0gU3RyaW5nKHNlbGYuZmlsZSk7XG4gIHZhciBzdGFydCA9IHtsaW5lOiAxLCBjb2x1bW46IDEsIG9mZnNldDogMH07XG4gIHZhciBjb250ZW50ID0geHRlbmQoc3RhcnQpO1xuICB2YXIgbm9kZTtcblxuICAvKiBDbGVhbiBub24tdW5peCBuZXdsaW5lczogYFxcclxcbmAgYW5kIGBcXHJgIGFyZSBhbGxcbiAgICogY2hhbmdlZCB0byBgXFxuYC4gIFRoaXMgc2hvdWxkIG5vdCBhZmZlY3QgcG9zaXRpb25hbFxuICAgKiBpbmZvcm1hdGlvbi4gKi9cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fTElORV9CUkVBS1MsIENfTkVXTElORSk7XG5cbiAgaWYgKHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG5cbiAgICBjb250ZW50LmNvbHVtbisrO1xuICAgIGNvbnRlbnQub2Zmc2V0Kys7XG4gIH1cblxuICBub2RlID0ge1xuICAgIHR5cGU6ICdyb290JyxcbiAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUJsb2NrKHZhbHVlLCBjb250ZW50KSxcbiAgICBwb3NpdGlvbjoge1xuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgZW5kOiBzZWxmLmVvZiB8fCB4dGVuZChzdGFydClcbiAgICB9XG4gIH07XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMucG9zaXRpb24pIHtcbiAgICByZW1vdmVQb3NpdGlvbihub2RlLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB2aXNpdCA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZVBvc2l0aW9uXG5cbmZ1bmN0aW9uIHJlbW92ZVBvc2l0aW9uKG5vZGUsIGZvcmNlKSB7XG4gIHZpc2l0KG5vZGUsIGZvcmNlID8gaGFyZCA6IHNvZnQpXG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIGhhcmQobm9kZSkge1xuICBkZWxldGUgbm9kZS5wb3NpdGlvblxufVxuXG5mdW5jdGlvbiBzb2Z0KG5vZGUpIHtcbiAgbm9kZS5wb3NpdGlvbiA9IHVuZGVmaW5lZFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRQYXJlbnRzXG5cbnZhciBjb252ZXJ0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC1pcy9jb252ZXJ0JylcblxudmFyIENPTlRJTlVFID0gdHJ1ZVxudmFyIFNLSVAgPSAnc2tpcCdcbnZhciBFWElUID0gZmFsc2VcblxudmlzaXRQYXJlbnRzLkNPTlRJTlVFID0gQ09OVElOVUVcbnZpc2l0UGFyZW50cy5TS0lQID0gU0tJUFxudmlzaXRQYXJlbnRzLkVYSVQgPSBFWElUXG5cbmZ1bmN0aW9uIHZpc2l0UGFyZW50cyh0cmVlLCB0ZXN0LCB2aXNpdG9yLCByZXZlcnNlKSB7XG4gIHZhciBpc1xuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmlzaXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldmVyc2UgPSB2aXNpdG9yXG4gICAgdmlzaXRvciA9IHRlc3RcbiAgICB0ZXN0ID0gbnVsbFxuICB9XG5cbiAgaXMgPSBjb252ZXJ0KHRlc3QpXG5cbiAgb25lKHRyZWUsIG51bGwsIFtdKVxuXG4gIC8vIFZpc2l0IGEgc2luZ2xlIG5vZGUuXG4gIGZ1bmN0aW9uIG9uZShub2RlLCBpbmRleCwgcGFyZW50cykge1xuICAgIHZhciByZXN1bHQgPSBbXVxuICAgIHZhciBzdWJyZXN1bHRcblxuICAgIGlmICghdGVzdCB8fCBpcyhub2RlLCBpbmRleCwgcGFyZW50c1twYXJlbnRzLmxlbmd0aCAtIDFdIHx8IG51bGwpKSB7XG4gICAgICByZXN1bHQgPSB0b1Jlc3VsdCh2aXNpdG9yKG5vZGUsIHBhcmVudHMpKVxuXG4gICAgICBpZiAocmVzdWx0WzBdID09PSBFWElUKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiByZXN1bHRbMF0gIT09IFNLSVApIHtcbiAgICAgIHN1YnJlc3VsdCA9IHRvUmVzdWx0KGFsbChub2RlLmNoaWxkcmVuLCBwYXJlbnRzLmNvbmNhdChub2RlKSkpXG4gICAgICByZXR1cm4gc3VicmVzdWx0WzBdID09PSBFWElUID8gc3VicmVzdWx0IDogcmVzdWx0XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gVmlzaXQgY2hpbGRyZW4gaW4gYHBhcmVudGAuXG4gIGZ1bmN0aW9uIGFsbChjaGlsZHJlbiwgcGFyZW50cykge1xuICAgIHZhciBtaW4gPSAtMVxuICAgIHZhciBzdGVwID0gcmV2ZXJzZSA/IC0xIDogMVxuICAgIHZhciBpbmRleCA9IChyZXZlcnNlID8gY2hpbGRyZW4ubGVuZ3RoIDogbWluKSArIHN0ZXBcbiAgICB2YXIgcmVzdWx0XG5cbiAgICB3aGlsZSAoaW5kZXggPiBtaW4gJiYgaW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IG9uZShjaGlsZHJlbltpbmRleF0sIGluZGV4LCBwYXJlbnRzKVxuXG4gICAgICBpZiAocmVzdWx0WzBdID09PSBFWElUKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSB0eXBlb2YgcmVzdWx0WzFdID09PSAnbnVtYmVyJyA/IHJlc3VsdFsxXSA6IGluZGV4ICsgc3RlcFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0b1Jlc3VsdCh2YWx1ZSkge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gW0NPTlRJTlVFLCB2YWx1ZV1cbiAgfVxuXG4gIHJldHVybiBbdmFsdWVdXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0XG5cbmZ1bmN0aW9uIGNvbnZlcnQodGVzdCkge1xuICBpZiAodHlwZW9mIHRlc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHR5cGVGYWN0b3J5KHRlc3QpXG4gIH1cblxuICBpZiAodGVzdCA9PT0gbnVsbCB8fCB0ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gb2tcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gKCdsZW5ndGgnIGluIHRlc3QgPyBhbnlGYWN0b3J5IDogbWF0Y2hlc0ZhY3RvcnkpKHRlc3QpXG4gIH1cblxuICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGVzdFxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbiwgc3RyaW5nLCBvciBvYmplY3QgYXMgdGVzdCcpXG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRBbGwodGVzdHMpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXVxuICB2YXIgbGVuZ3RoID0gdGVzdHMubGVuZ3RoXG4gIHZhciBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRzW2luZGV4XSA9IGNvbnZlcnQodGVzdHNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHNcbn1cblxuLy8gVXRpbGl0eSBhc3NlcnQgZWFjaCBwcm9wZXJ0eSBpbiBgdGVzdGAgaXMgcmVwcmVzZW50ZWQgaW4gYG5vZGVgLCBhbmQgZWFjaFxuLy8gdmFsdWVzIGFyZSBzdHJpY3RseSBlcXVhbC5cbmZ1bmN0aW9uIG1hdGNoZXNGYWN0b3J5KHRlc3QpIHtcbiAgcmV0dXJuIG1hdGNoZXNcblxuICBmdW5jdGlvbiBtYXRjaGVzKG5vZGUpIHtcbiAgICB2YXIga2V5XG5cbiAgICBmb3IgKGtleSBpbiB0ZXN0KSB7XG4gICAgICBpZiAobm9kZVtrZXldICE9PSB0ZXN0W2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBhbnlGYWN0b3J5KHRlc3RzKSB7XG4gIHZhciBjaGVja3MgPSBjb252ZXJ0QWxsKHRlc3RzKVxuICB2YXIgbGVuZ3RoID0gY2hlY2tzLmxlbmd0aFxuXG4gIHJldHVybiBtYXRjaGVzXG5cbiAgZnVuY3Rpb24gbWF0Y2hlcygpIHtcbiAgICB2YXIgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjaGVja3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vLyBVdGlsaXR5IHRvIGNvbnZlcnQgYSBzdHJpbmcgaW50byBhIGZ1bmN0aW9uIHdoaWNoIGNoZWNrcyBhIGdpdmVuIG5vZGXigJlzIHR5cGVcbi8vIGZvciBzYWlkIHN0cmluZy5cbmZ1bmN0aW9uIHR5cGVGYWN0b3J5KHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVcblxuICBmdW5jdGlvbiB0eXBlKG5vZGUpIHtcbiAgICByZXR1cm4gQm9vbGVhbihub2RlICYmIG5vZGUudHlwZSA9PT0gdGVzdClcbiAgfVxufVxuXG4vLyBVdGlsaXR5IHRvIHJldHVybiB0cnVlLlxuZnVuY3Rpb24gb2soKSB7XG4gIHJldHVybiB0cnVlXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXdsaW5lO1xuXG4vKiBUb2tlbmlzZSBuZXdsaW5lLiAqL1xuZnVuY3Rpb24gbmV3bGluZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgwKTtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgcXVldWU7XG4gIHZhciBpbmRleDtcblxuICBpZiAoY2hhcmFjdGVyICE9PSAnXFxuJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5kZXggPSAxO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgZWF0KHN1YnZhbHVlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgndHJpbS10cmFpbGluZy1saW5lcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGVudGVkQ29kZTtcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcblxudmFyIENPREVfSU5ERU5UX0NPVU5UID0gNDtcbnZhciBDT0RFX0lOREVOVCA9IHJlcGVhdChDX1NQQUNFLCBDT0RFX0lOREVOVF9DT1VOVCk7XG5cbi8qIFRva2VuaXNlIGluZGVudGVkIGNvZGUuICovXG5mdW5jdGlvbiBpbmRlbnRlZENvZGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGNvbnRlbnQgPSAnJztcbiAgdmFyIHN1YnZhbHVlUXVldWUgPSAnJztcbiAgdmFyIGNvbnRlbnRRdWV1ZSA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgYmxhbmtRdWV1ZTtcbiAgdmFyIGluZGVudDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoaW5kZW50KSB7XG4gICAgICBpbmRlbnQgPSBmYWxzZTtcblxuICAgICAgc3VidmFsdWUgKz0gc3VidmFsdWVRdWV1ZTtcbiAgICAgIGNvbnRlbnQgKz0gY29udGVudFF1ZXVlO1xuICAgICAgc3VidmFsdWVRdWV1ZSA9ICcnO1xuICAgICAgY29udGVudFF1ZXVlID0gJyc7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgICBzdWJ2YWx1ZVF1ZXVlID0gY2hhcmFjdGVyO1xuICAgICAgICBjb250ZW50UXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICAgIGlmICghY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICAgICAgICBjb250ZW50UXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgICBzdWJ2YWx1ZVF1ZXVlID0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19TUEFDRSAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IGNoYXJhY3RlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMikgPT09IGNoYXJhY3RlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMykgPT09IGNoYXJhY3RlclxuICAgICkge1xuICAgICAgc3VidmFsdWVRdWV1ZSArPSBDT0RFX0lOREVOVDtcbiAgICAgIGluZGV4ICs9IDM7XG4gICAgICBpbmRlbnQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgc3VidmFsdWVRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRlbnQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBibGFua1F1ZXVlID0gJyc7XG5cbiAgICAgIHdoaWxlIChjaGFyYWN0ZXIgPT09IENfVEFCIHx8IGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICBibGFua1F1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN1YnZhbHVlUXVldWUgKz0gYmxhbmtRdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIGNvbnRlbnRRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbnRlbnQpIHtcbiAgICBpZiAoc2lsZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgICB0eXBlOiAnY29kZScsXG4gICAgICBsYW5nOiBudWxsLFxuICAgICAgdmFsdWU6IHRyaW0oY29udGVudClcbiAgICB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0tdHJhaWxpbmctbGluZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmZW5jZWRDb2RlO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfVElMREUgPSAnfic7XG52YXIgQ19USUNLID0gJ2AnO1xuXG52YXIgTUlOX0ZFTkNFX0NPVU5UID0gMztcbnZhciBDT0RFX0lOREVOVF9DT1VOVCA9IDQ7XG5cbmZ1bmN0aW9uIGZlbmNlZENvZGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBmZW5jZUNvdW50O1xuICB2YXIgbWFya2VyO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgZmxhZztcbiAgdmFyIHF1ZXVlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIGV4ZGVudGVkQ29udGVudDtcbiAgdmFyIGNsb3Npbmc7XG4gIHZhciBleGRlbnRlZENsb3Npbmc7XG4gIHZhciBpbmRlbnQ7XG4gIHZhciBub3c7XG5cbiAgaWYgKCFzZXR0aW5ncy5nZm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBFYXQgaW5pdGlhbCBzcGFjaW5nLiAqL1xuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGluZGVudCA9IGluZGV4O1xuXG4gIC8qIEVhdCB0aGUgZmVuY2UuICovXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19USUxERSAmJiBjaGFyYWN0ZXIgIT09IENfVElDSykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgZmVuY2VDb3VudCA9IDE7XG4gIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgZmVuY2VDb3VudCsrO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoZmVuY2VDb3VudCA8IE1JTl9GRU5DRV9DT1VOVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEVhdCBzcGFjaW5nIGJlZm9yZSBmbGFnLiAqL1xuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIC8qIEVhdCBmbGFnLiAqL1xuICBmbGFnID0gJyc7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IENfVElMREUgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19USUNLXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFIHx8IGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZmxhZyArPSBxdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAmJiBjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoO1xuXG4gIHN1YnZhbHVlICs9IGZsYWc7XG4gIGZsYWcgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZShmbGFnKSwgbm93KTtcblxuICBpZiAocXVldWUpIHtcbiAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgfVxuXG4gIHF1ZXVlID0gJyc7XG4gIGNsb3NpbmcgPSAnJztcbiAgZXhkZW50ZWRDbG9zaW5nID0gJyc7XG4gIGNvbnRlbnQgPSAnJztcbiAgZXhkZW50ZWRDb250ZW50ID0gJyc7XG5cbiAgLyogRWF0IGNvbnRlbnQuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgY29udGVudCArPSBjbG9zaW5nO1xuICAgIGV4ZGVudGVkQ29udGVudCArPSBleGRlbnRlZENsb3Npbmc7XG4gICAgY2xvc2luZyA9ICcnO1xuICAgIGV4ZGVudGVkQ2xvc2luZyA9ICcnO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FKSB7XG4gICAgICBjb250ZW50ICs9IGNoYXJhY3RlcjtcbiAgICAgIGV4ZGVudGVkQ2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyogQWRkIHRoZSBuZXdsaW5lIHRvIGBzdWJ2YWx1ZWAgaWYgaXRzIHRoZSBmaXJzdFxuICAgICAqIGNoYXJhY3Rlci4gIE90aGVyd2lzZSwgYWRkIGl0IHRvIHRoZSBgY2xvc2luZ2BcbiAgICAgKiBxdWV1ZS4gKi9cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgY2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBleGRlbnRlZENsb3NpbmcgKz0gY2hhcmFjdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfVxuXG4gICAgcXVldWUgPSAnJztcbiAgICBpbmRleCsrO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNsb3NpbmcgKz0gcXVldWU7XG4gICAgZXhkZW50ZWRDbG9zaW5nICs9IHF1ZXVlLnNsaWNlKGluZGVudCk7XG5cbiAgICBpZiAocXVldWUubGVuZ3RoID49IENPREVfSU5ERU5UX0NPVU5UKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgY2xvc2luZyArPSBxdWV1ZTtcbiAgICBleGRlbnRlZENsb3NpbmcgKz0gcXVldWU7XG5cbiAgICBpZiAocXVldWUubGVuZ3RoIDwgZmVuY2VDb3VudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcXVldWUgPSAnJztcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGV4ZGVudGVkQ2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGlmICghY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBjb250ZW50ICsgY2xvc2luZztcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2NvZGUnLFxuICAgIGxhbmc6IGZsYWcgfHwgbnVsbCxcbiAgICB2YWx1ZTogdHJpbShleGRlbnRlZENvbnRlbnQpXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciBpbnRlcnJ1cHQgPSByZXF1aXJlKCcuLi91dGlsL2ludGVycnVwdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJsb2NrcXVvdGU7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19HVCA9ICc+JztcblxuLyogVG9rZW5pc2UgYSBibG9ja3F1b3RlLiAqL1xuZnVuY3Rpb24gYmxvY2txdW90ZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgb2Zmc2V0cyA9IHNlbGYub2Zmc2V0O1xuICB2YXIgdG9rZW5pemVycyA9IHNlbGYuYmxvY2tUb2tlbml6ZXJzO1xuICB2YXIgaW50ZXJydXB0b3JzID0gc2VsZi5pbnRlcnJ1cHRCbG9ja3F1b3RlO1xuICB2YXIgbm93ID0gZWF0Lm5vdygpO1xuICB2YXIgY3VycmVudExpbmUgPSBub3cubGluZTtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHZhbHVlcyA9IFtdO1xuICB2YXIgY29udGVudHMgPSBbXTtcbiAgdmFyIGluZGVudHMgPSBbXTtcbiAgdmFyIGFkZDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHJlc3Q7XG4gIHZhciBuZXh0SW5kZXg7XG4gIHZhciBjb250ZW50O1xuICB2YXIgbGluZTtcbiAgdmFyIHN0YXJ0SW5kZXg7XG4gIHZhciBwcmVmaXhlZDtcbiAgdmFyIGV4aXQ7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX0dUKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5kZXggPSAwO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIG5leHRJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCk7XG4gICAgc3RhcnRJbmRleCA9IGluZGV4O1xuICAgIHByZWZpeGVkID0gZmFsc2U7XG5cbiAgICBpZiAobmV4dEluZGV4ID09PSAtMSkge1xuICAgICAgbmV4dEluZGV4ID0gbGVuZ3RoO1xuICAgIH1cblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpID09PSBDX0dUKSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgcHJlZml4ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSA9PT0gQ19TUEFDRSkge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgfVxuXG4gICAgY29udGVudCA9IHZhbHVlLnNsaWNlKGluZGV4LCBuZXh0SW5kZXgpO1xuXG4gICAgaWYgKCFwcmVmaXhlZCAmJiAhdHJpbShjb250ZW50KSkge1xuICAgICAgaW5kZXggPSBzdGFydEluZGV4O1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCFwcmVmaXhlZCkge1xuICAgICAgcmVzdCA9IHZhbHVlLnNsaWNlKGluZGV4KTtcblxuICAgICAgLyogQ2hlY2sgaWYgdGhlIGZvbGxvd2luZyBjb2RlIGNvbnRhaW5zIGEgcG9zc2libGVcbiAgICAgICAqIGJsb2NrLiAqL1xuICAgICAgaWYgKGludGVycnVwdChpbnRlcnJ1cHRvcnMsIHRva2VuaXplcnMsIHNlbGYsIFtlYXQsIHJlc3QsIHRydWVdKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaW5lID0gc3RhcnRJbmRleCA9PT0gaW5kZXggPyBjb250ZW50IDogdmFsdWUuc2xpY2Uoc3RhcnRJbmRleCwgbmV4dEluZGV4KTtcblxuICAgIGluZGVudHMucHVzaChpbmRleCAtIHN0YXJ0SW5kZXgpO1xuICAgIHZhbHVlcy5wdXNoKGxpbmUpO1xuICAgIGNvbnRlbnRzLnB1c2goY29udGVudCk7XG5cbiAgICBpbmRleCA9IG5leHRJbmRleCArIDE7XG4gIH1cblxuICBpbmRleCA9IC0xO1xuICBsZW5ndGggPSBpbmRlbnRzLmxlbmd0aDtcbiAgYWRkID0gZWF0KHZhbHVlcy5qb2luKENfTkVXTElORSkpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2Zmc2V0c1tjdXJyZW50TGluZV0gPSAob2Zmc2V0c1tjdXJyZW50TGluZV0gfHwgMCkgKyBpbmRlbnRzW2luZGV4XTtcbiAgICBjdXJyZW50TGluZSsrO1xuICB9XG5cbiAgZXhpdCA9IHNlbGYuZW50ZXJCbG9jaygpO1xuICBjb250ZW50cyA9IHNlbGYudG9rZW5pemVCbG9jayhjb250ZW50cy5qb2luKENfTkVXTElORSksIG5vdyk7XG4gIGV4aXQoKTtcblxuICByZXR1cm4gYWRkKHtcbiAgICB0eXBlOiAnYmxvY2txdW90ZScsXG4gICAgY2hpbGRyZW46IGNvbnRlbnRzXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF0eEhlYWRpbmc7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19IQVNIID0gJyMnO1xuXG52YXIgTUFYX0FUWF9DT1VOVCA9IDY7XG5cbmZ1bmN0aW9uIGF0eEhlYWRpbmcoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBub3cgPSBlYXQubm93KCk7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgY29udGVudCA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgcXVldWU7XG4gIHZhciBkZXB0aDtcblxuICAvKiBFYXQgaW5pdGlhbCBzcGFjaW5nLiAqL1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFYXQgaGFzaGVzLiAqL1xuICBkZXB0aCA9IDA7XG5cbiAgd2hpbGUgKCsraW5kZXggPD0gbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfSEFTSCkge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBkZXB0aCsrO1xuICB9XG5cbiAgaWYgKGRlcHRoID4gTUFYX0FUWF9DT1VOVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChcbiAgICAhZGVwdGggfHxcbiAgICAoIXNldHRpbmdzLnBlZGFudGljICYmIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBDX0hBU0gpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aCArIDE7XG5cbiAgLyogRWF0IGludGVybWVkaWF0ZSB3aGl0ZS1zcGFjZS4gKi9cbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gbm90IGluIHBlZGFudGljIG1vZGUgd2l0aG91dCBzcGFjaW5nLiAqL1xuICBpZiAoXG4gICAgIXNldHRpbmdzLnBlZGFudGljICYmXG4gICAgcXVldWUubGVuZ3RoID09PSAwICYmXG4gICAgY2hhcmFjdGVyICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX05FV0xJTkVcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyogRWF0IGNvbnRlbnQuICovXG4gIHN1YnZhbHVlICs9IHF1ZXVlO1xuICBxdWV1ZSA9ICcnO1xuICBjb250ZW50ID0gJyc7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX1RBQiAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX0hBU0hcbiAgICApIHtcbiAgICAgIGNvbnRlbnQgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSB8fCBjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19IQVNIKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSB8fCBjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgaW5kZXgtLTtcbiAgfVxuXG4gIG5vdy5jb2x1bW4gKz0gc3VidmFsdWUubGVuZ3RoO1xuICBub3cub2Zmc2V0ICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgKz0gY29udGVudCArIHF1ZXVlO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgZGVwdGg6IGRlcHRoLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gdGhlbWF0aWNCcmVhaztcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0FTVEVSSVNLID0gJyonO1xudmFyIENfVU5ERVJTQ09SRSA9ICdfJztcbnZhciBDX0RBU0ggPSAnLSc7XG5cbnZhciBUSEVNQVRJQ19CUkVBS19NQVJLRVJfQ09VTlQgPSAzO1xuXG5mdW5jdGlvbiB0aGVtYXRpY0JyZWFrKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aCArIDE7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbWFya2VyO1xuICB2YXIgbWFya2VyQ291bnQ7XG4gIHZhciBxdWV1ZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIGlmIChcbiAgICBjaGFyYWN0ZXIgIT09IENfQVNURVJJU0sgJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfREFTSCAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICBtYXJrZXJDb3VudCA9IDE7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICBtYXJrZXJDb3VudCsrO1xuICAgICAgc3VidmFsdWUgKz0gcXVldWUgKyBtYXJrZXI7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG1hcmtlckNvdW50ID49IFRIRU1BVElDX0JSRUFLX01BUktFUl9DT1VOVCAmJlxuICAgICAgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpXG4gICAgKSB7XG4gICAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcblxuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe3R5cGU6ICd0aGVtYXRpY0JyZWFrJ30pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1wYXJhbXMgKi9cblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJyk7XG52YXIgZ2V0SW5kZW50ID0gcmVxdWlyZSgnLi4vdXRpbC9nZXQtaW5kZW50YXRpb24nKTtcbnZhciByZW1vdmVJbmRlbnQgPSByZXF1aXJlKCcuLi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbicpO1xudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdDtcblxudmFyIENfQVNURVJJU0sgPSAnKic7XG52YXIgQ19VTkRFUlNDT1JFID0gJ18nO1xudmFyIENfUExVUyA9ICcrJztcbnZhciBDX0RBU0ggPSAnLSc7XG52YXIgQ19ET1QgPSAnLic7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfUEFSRU5fQ0xPU0UgPSAnKSc7XG52YXIgQ19YX0xPV0VSID0gJ3gnO1xuXG52YXIgVEFCX1NJWkUgPSA0O1xudmFyIEVYUFJFU1NJT05fTE9PU0VfTElTVF9JVEVNID0gL1xcblxcbig/IVxccyokKS87XG52YXIgRVhQUkVTU0lPTl9UQVNLX0lURU0gPSAvXlxcWyhbIFxcdF18eHxYKV1bIFxcdF0vO1xudmFyIEVYUFJFU1NJT05fQlVMTEVUID0gL14oWyBcXHRdKikoWyorLV18XFxkK1suKV0pKCB7MSw0fSg/ISApfCB8XFx0fCR8KD89XFxuKSkoW15cXG5dKikvO1xudmFyIEVYUFJFU1NJT05fUEVEQU5USUNfQlVMTEVUID0gL14oWyBcXHRdKikoWyorLV18XFxkK1suKV0pKFsgXFx0XSspLztcbnZhciBFWFBSRVNTSU9OX0lOSVRJQUxfSU5ERU5UID0gL14oIHsxLDR9fFxcdCk/L2dtO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrXG4gKiBsaXN0LWl0ZW1zLiAqL1xudmFyIExJU1RfVU5PUkRFUkVEX01BUktFUlMgPSB7fTtcblxuTElTVF9VTk9SREVSRURfTUFSS0VSU1tDX0FTVEVSSVNLXSA9IHRydWU7XG5MSVNUX1VOT1JERVJFRF9NQVJLRVJTW0NfUExVU10gPSB0cnVlO1xuTElTVF9VTk9SREVSRURfTUFSS0VSU1tDX0RBU0hdID0gdHJ1ZTtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFya1xuICogbGlzdC1pdGVtcyBhZnRlciBhIGRpZ2l0LiAqL1xudmFyIExJU1RfT1JERVJFRF9NQVJLRVJTID0ge307XG5cbkxJU1RfT1JERVJFRF9NQVJLRVJTW0NfRE9UXSA9IHRydWU7XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmtcbiAqIGxpc3QtaXRlbXMgYWZ0ZXIgYSBkaWdpdC4gKi9cbnZhciBMSVNUX09SREVSRURfQ09NTU9OTUFSS19NQVJLRVJTID0ge307XG5cbkxJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlNbQ19ET1RdID0gdHJ1ZTtcbkxJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlNbQ19QQVJFTl9DTE9TRV0gPSB0cnVlO1xuXG5mdW5jdGlvbiBsaXN0KGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpYztcbiAgdmFyIHRva2VuaXplcnMgPSBzZWxmLmJsb2NrVG9rZW5pemVycztcbiAgdmFyIGludGVydXB0b3JzID0gc2VsZi5pbnRlcnJ1cHRMaXN0O1xuICB2YXIgbWFya2VycztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gbnVsbDtcbiAgdmFyIHNpemUgPSAwO1xuICB2YXIgcXVldWU7XG4gIHZhciBvcmRlcmVkO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbWFya2VyO1xuICB2YXIgbmV4dEluZGV4O1xuICB2YXIgc3RhcnRJbmRleDtcbiAgdmFyIHByZWZpeGVkO1xuICB2YXIgY3VycmVudE1hcmtlcjtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBsaW5lO1xuICB2YXIgcHJldkVtcHR5O1xuICB2YXIgZW1wdHk7XG4gIHZhciBpdGVtcztcbiAgdmFyIGFsbExpbmVzO1xuICB2YXIgZW1wdHlMaW5lcztcbiAgdmFyIGl0ZW07XG4gIHZhciBlbnRlclRvcDtcbiAgdmFyIGV4aXRCbG9ja3F1b3RlO1xuICB2YXIgaXNMb29zZTtcbiAgdmFyIG5vZGU7XG4gIHZhciBub3c7XG4gIHZhciBlbmQ7XG4gIHZhciBpbmRlbnRlZDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHNpemUgKz0gVEFCX1NJWkUgLSAoc2l6ZSAlIFRBQl9TSVpFKTtcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgc2l6ZSsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKHNpemUgPj0gVEFCX1NJWkUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIG1hcmtlcnMgPSBjb21tb25tYXJrID9cbiAgICBMSVNUX09SREVSRURfQ09NTU9OTUFSS19NQVJLRVJTIDpcbiAgICBMSVNUX09SREVSRURfTUFSS0VSUztcblxuICBpZiAoTElTVF9VTk9SREVSRURfTUFSS0VSU1tjaGFyYWN0ZXJdID09PSB0cnVlKSB7XG4gICAgbWFya2VyID0gY2hhcmFjdGVyO1xuICAgIG9yZGVyZWQgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBvcmRlcmVkID0gdHJ1ZTtcbiAgICBxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoIWRlY2ltYWwoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCFxdWV1ZSB8fCBtYXJrZXJzW2NoYXJhY3Rlcl0gIT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGFydCA9IHBhcnNlSW50KHF1ZXVlLCAxMCk7XG4gICAgbWFya2VyID0gY2hhcmFjdGVyO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGluZGV4ID0gMDtcbiAgaXRlbXMgPSBbXTtcbiAgYWxsTGluZXMgPSBbXTtcbiAgZW1wdHlMaW5lcyA9IFtdO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIG5leHRJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCk7XG4gICAgc3RhcnRJbmRleCA9IGluZGV4O1xuICAgIHByZWZpeGVkID0gZmFsc2U7XG4gICAgaW5kZW50ZWQgPSBmYWxzZTtcblxuICAgIGlmIChuZXh0SW5kZXggPT09IC0xKSB7XG4gICAgICBuZXh0SW5kZXggPSBsZW5ndGg7XG4gICAgfVxuXG4gICAgZW5kID0gaW5kZXggKyBUQUJfU0laRTtcbiAgICBzaXplID0gMDtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgICAgc2l6ZSArPSBUQUJfU0laRSAtIChzaXplICUgVEFCX1NJWkUpO1xuICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgc2l6ZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHNpemUgPj0gVEFCX1NJWkUpIHtcbiAgICAgIGluZGVudGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbSAmJiBzaXplID49IGl0ZW0uaW5kZW50KSB7XG4gICAgICBpbmRlbnRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICBjdXJyZW50TWFya2VyID0gbnVsbDtcblxuICAgIGlmICghaW5kZW50ZWQpIHtcbiAgICAgIGlmIChMSVNUX1VOT1JERVJFRF9NQVJLRVJTW2NoYXJhY3Rlcl0gPT09IHRydWUpIHtcbiAgICAgICAgY3VycmVudE1hcmtlciA9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgc2l6ZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWUgPSAnJztcblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgICAgaWYgKCFkZWNpbWFsKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICAgICAgaW5kZXgrKztcblxuICAgICAgICBpZiAocXVldWUgJiYgbWFya2Vyc1tjaGFyYWN0ZXJdID09PSB0cnVlKSB7XG4gICAgICAgICAgY3VycmVudE1hcmtlciA9IGNoYXJhY3RlcjtcbiAgICAgICAgICBzaXplICs9IHF1ZXVlLmxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgICAgIHNpemUgKz0gVEFCX1NJWkUgLSAoc2l6ZSAlIFRBQl9TSVpFKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICAgIGVuZCA9IGluZGV4ICsgVEFCX1NJWkU7XG5cbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX1NQQUNFKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kICYmIHZhbHVlLmNoYXJBdChpbmRleCkgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgICAgIGluZGV4IC09IFRBQl9TSVpFIC0gMTtcbiAgICAgICAgICAgIHNpemUgLT0gVEFCX1NJWkUgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSAmJiBjaGFyYWN0ZXIgIT09ICcnKSB7XG4gICAgICAgICAgY3VycmVudE1hcmtlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudE1hcmtlcikge1xuICAgICAgaWYgKCFwZWRhbnRpYyAmJiBtYXJrZXIgIT09IGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHByZWZpeGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjb21tb25tYXJrICYmICFpbmRlbnRlZCAmJiB2YWx1ZS5jaGFyQXQoc3RhcnRJbmRleCkgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgaW5kZW50ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjb21tb25tYXJrICYmIGl0ZW0pIHtcbiAgICAgICAgaW5kZW50ZWQgPSBzaXplID49IGl0ZW0uaW5kZW50IHx8IHNpemUgPiBUQUJfU0laRTtcbiAgICAgIH1cblxuICAgICAgcHJlZml4ZWQgPSBmYWxzZTtcbiAgICAgIGluZGV4ID0gc3RhcnRJbmRleDtcbiAgICB9XG5cbiAgICBsaW5lID0gdmFsdWUuc2xpY2Uoc3RhcnRJbmRleCwgbmV4dEluZGV4KTtcbiAgICBjb250ZW50ID0gc3RhcnRJbmRleCA9PT0gaW5kZXggPyBsaW5lIDogdmFsdWUuc2xpY2UoaW5kZXgsIG5leHRJbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjdXJyZW50TWFya2VyID09PSBDX0FTVEVSSVNLIHx8XG4gICAgICBjdXJyZW50TWFya2VyID09PSBDX1VOREVSU0NPUkUgfHxcbiAgICAgIGN1cnJlbnRNYXJrZXIgPT09IENfREFTSFxuICAgICkge1xuICAgICAgaWYgKHRva2VuaXplcnMudGhlbWF0aWNCcmVhay5jYWxsKHNlbGYsIGVhdCwgbGluZSwgdHJ1ZSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJldkVtcHR5ID0gZW1wdHk7XG4gICAgZW1wdHkgPSAhdHJpbShjb250ZW50KS5sZW5ndGg7XG5cbiAgICBpZiAoaW5kZW50ZWQgJiYgaXRlbSkge1xuICAgICAgaXRlbS52YWx1ZSA9IGl0ZW0udmFsdWUuY29uY2F0KGVtcHR5TGluZXMsIGxpbmUpO1xuICAgICAgYWxsTGluZXMgPSBhbGxMaW5lcy5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBlbXB0eUxpbmVzID0gW107XG4gICAgfSBlbHNlIGlmIChwcmVmaXhlZCkge1xuICAgICAgaWYgKGVtcHR5TGluZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGl0ZW0udmFsdWUucHVzaCgnJyk7XG4gICAgICAgIGl0ZW0udHJhaWwgPSBlbXB0eUxpbmVzLmNvbmNhdCgpO1xuICAgICAgfVxuXG4gICAgICBpdGVtID0ge1xuICAgICAgICB2YWx1ZTogW2xpbmVdLFxuICAgICAgICBpbmRlbnQ6IHNpemUsXG4gICAgICAgIHRyYWlsOiBbXVxuICAgICAgfTtcblxuICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIGFsbExpbmVzID0gYWxsTGluZXMuY29uY2F0KGVtcHR5TGluZXMsIGxpbmUpO1xuICAgICAgZW1wdHlMaW5lcyA9IFtdO1xuICAgIH0gZWxzZSBpZiAoZW1wdHkpIHtcbiAgICAgIGlmIChwcmV2RW1wdHkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGVtcHR5TGluZXMucHVzaChsaW5lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZXZFbXB0eSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGludGVycnVwdChpbnRlcnVwdG9ycywgdG9rZW5pemVycywgc2VsZiwgW2VhdCwgbGluZSwgdHJ1ZV0pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpdGVtLnZhbHVlID0gaXRlbS52YWx1ZS5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBhbGxMaW5lcyA9IGFsbExpbmVzLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKTtcbiAgICAgIGVtcHR5TGluZXMgPSBbXTtcbiAgICB9XG5cbiAgICBpbmRleCA9IG5leHRJbmRleCArIDE7XG4gIH1cblxuICBub2RlID0gZWF0KGFsbExpbmVzLmpvaW4oQ19ORVdMSU5FKSkucmVzZXQoe1xuICAgIHR5cGU6ICdsaXN0JyxcbiAgICBvcmRlcmVkOiBvcmRlcmVkLFxuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBsb29zZTogbnVsbCxcbiAgICBjaGlsZHJlbjogW11cbiAgfSk7XG5cbiAgZW50ZXJUb3AgPSBzZWxmLmVudGVyTGlzdCgpO1xuICBleGl0QmxvY2txdW90ZSA9IHNlbGYuZW50ZXJCbG9jaygpO1xuICBpc0xvb3NlID0gZmFsc2U7XG4gIGluZGV4ID0gLTE7XG4gIGxlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGl0ZW0gPSBpdGVtc1tpbmRleF0udmFsdWUuam9pbihDX05FV0xJTkUpO1xuICAgIG5vdyA9IGVhdC5ub3coKTtcblxuICAgIGl0ZW0gPSBlYXQoaXRlbSkobGlzdEl0ZW0oc2VsZiwgaXRlbSwgbm93KSwgbm9kZSk7XG5cbiAgICBpZiAoaXRlbS5sb29zZSkge1xuICAgICAgaXNMb29zZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaXRlbSA9IGl0ZW1zW2luZGV4XS50cmFpbC5qb2luKENfTkVXTElORSk7XG5cbiAgICBpZiAoaW5kZXggIT09IGxlbmd0aCAtIDEpIHtcbiAgICAgIGl0ZW0gKz0gQ19ORVdMSU5FO1xuICAgIH1cblxuICAgIGVhdChpdGVtKTtcbiAgfVxuXG4gIGVudGVyVG9wKCk7XG4gIGV4aXRCbG9ja3F1b3RlKCk7XG5cbiAgbm9kZS5sb29zZSA9IGlzTG9vc2U7XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgdmFyIGZuID0gY3R4Lm9wdGlvbnMucGVkYW50aWMgPyBwZWRhbnRpY0xpc3RJdGVtIDogbm9ybWFsTGlzdEl0ZW07XG4gIHZhciBjaGVja2VkID0gbnVsbDtcbiAgdmFyIHRhc2s7XG4gIHZhciBpbmRlbnQ7XG5cbiAgdmFsdWUgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXG4gIGlmIChjdHgub3B0aW9ucy5nZm0pIHtcbiAgICB0YXNrID0gdmFsdWUubWF0Y2goRVhQUkVTU0lPTl9UQVNLX0lURU0pO1xuXG4gICAgaWYgKHRhc2spIHtcbiAgICAgIGluZGVudCA9IHRhc2tbMF0ubGVuZ3RoO1xuICAgICAgY2hlY2tlZCA9IHRhc2tbMV0udG9Mb3dlckNhc2UoKSA9PT0gQ19YX0xPV0VSO1xuICAgICAgb2Zmc2V0c1twb3NpdGlvbi5saW5lXSArPSBpbmRlbnQ7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKGluZGVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnbGlzdEl0ZW0nLFxuICAgIGxvb3NlOiBFWFBSRVNTSU9OX0xPT1NFX0xJU1RfSVRFTS50ZXN0KHZhbHVlKSB8fFxuICAgICAgdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpID09PSBDX05FV0xJTkUsXG4gICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICBjaGlsZHJlbjogY3R4LnRva2VuaXplQmxvY2sodmFsdWUsIHBvc2l0aW9uKVxuICB9O1xufVxuXG4vKiBDcmVhdGUgYSBsaXN0LWl0ZW0gdXNpbmcgb3Zlcmx5IHNpbXBsZSBtZWNoYW5pY3MuICovXG5mdW5jdGlvbiBwZWRhbnRpY0xpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgdmFyIGxpbmUgPSBwb3NpdGlvbi5saW5lO1xuXG4gIC8qIFJlbW92ZSB0aGUgbGlzdC1pdGVt4oCZcyBidWxsZXQuICovXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShFWFBSRVNTSU9OX1BFREFOVElDX0JVTExFVCwgcmVwbGFjZXIpO1xuXG4gIC8qIFRoZSBpbml0aWFsIGxpbmUgd2FzIGFsc28gbWF0Y2hlZCBieSB0aGUgYmVsb3csIHNvXG4gICAqIHdlIHJlc2V0IHRoZSBgbGluZWAuICovXG4gIGxpbmUgPSBwb3NpdGlvbi5saW5lO1xuXG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fSU5JVElBTF9JTkRFTlQsIHJlcGxhY2VyKTtcblxuICAvKiBBIHNpbXBsZSByZXBsYWNlciB3aGljaCByZW1vdmVkIGFsbCBtYXRjaGVzLFxuICAgKiBhbmQgYWRkcyB0aGVpciBsZW5ndGggdG8gYG9mZnNldGAuICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VyKCQwKSB7XG4gICAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICsgJDAubGVuZ3RoO1xuICAgIGxpbmUrKztcblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG4vKiBDcmVhdGUgYSBsaXN0LWl0ZW0gdXNpbmcgc2FuZSBtZWNoYW5pY3MuICovXG5mdW5jdGlvbiBub3JtYWxMaXN0SXRlbShjdHgsIHZhbHVlLCBwb3NpdGlvbikge1xuICB2YXIgb2Zmc2V0cyA9IGN0eC5vZmZzZXQ7XG4gIHZhciBsaW5lID0gcG9zaXRpb24ubGluZTtcbiAgdmFyIG1heDtcbiAgdmFyIGJ1bGxldDtcbiAgdmFyIHJlc3Q7XG4gIHZhciBsaW5lcztcbiAgdmFyIHRyaW1tZWRMaW5lcztcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuXG4gIC8qIFJlbW92ZSB0aGUgbGlzdC1pdGVt4oCZcyBidWxsZXQuICovXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShFWFBSRVNTSU9OX0JVTExFVCwgcmVwbGFjZXIpO1xuXG4gIGxpbmVzID0gdmFsdWUuc3BsaXQoQ19ORVdMSU5FKTtcblxuICB0cmltbWVkTGluZXMgPSByZW1vdmVJbmRlbnQodmFsdWUsIGdldEluZGVudChtYXgpLmluZGVudCkuc3BsaXQoQ19ORVdMSU5FKTtcblxuICAvKiBXZSByZXBsYWNlZCB0aGUgaW5pdGlhbCBidWxsZXQgd2l0aCBzb21ldGhpbmdcbiAgICogZWxzZSBhYm92ZSwgd2hpY2ggd2FzIHVzZWQgdG8gdHJpY2tcbiAgICogYHJlbW92ZUluZGVudGF0aW9uYCBpbnRvIHJlbW92aW5nIHNvbWUgbW9yZVxuICAgKiBjaGFyYWN0ZXJzIHdoZW4gcG9zc2libGUuICBIb3dldmVyLCB0aGF0IGNvdWxkXG4gICAqIHJlc3VsdCBpbiB0aGUgaW5pdGlhbCBsaW5lIHRvIGJlIHN0cmlwcGVkIG1vcmVcbiAgICogdGhhbiBpdCBzaG91bGQgYmUuICovXG4gIHRyaW1tZWRMaW5lc1swXSA9IHJlc3Q7XG5cbiAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICsgYnVsbGV0Lmxlbmd0aDtcbiAgbGluZSsrO1xuXG4gIGluZGV4ID0gMDtcbiAgbGVuZ3RoID0gbGluZXMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICtcbiAgICAgIGxpbmVzW2luZGV4XS5sZW5ndGggLSB0cmltbWVkTGluZXNbaW5kZXhdLmxlbmd0aDtcbiAgICBsaW5lKys7XG4gIH1cblxuICByZXR1cm4gdHJpbW1lZExpbmVzLmpvaW4oQ19ORVdMSU5FKTtcblxuICBmdW5jdGlvbiByZXBsYWNlcigkMCwgJDEsICQyLCAkMywgJDQpIHtcbiAgICBidWxsZXQgPSAkMSArICQyICsgJDM7XG4gICAgcmVzdCA9ICQ0O1xuXG4gICAgLyogTWFrZSBzdXJlIHRoYXQgdGhlIGZpcnN0IG5pbmUgbnVtYmVyZWQgbGlzdCBpdGVtc1xuICAgICAqIGNhbiBpbmRlbnQgd2l0aCBhbiBleHRyYSBzcGFjZS4gIFRoYXQgaXMsIHdoZW5cbiAgICAgKiB0aGUgYnVsbGV0IGRpZCBub3QgcmVjZWl2ZSBhbiBleHRyYSBmaW5hbCBzcGFjZS4gKi9cbiAgICBpZiAoTnVtYmVyKCQyKSA8IDEwICYmIGJ1bGxldC5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAkMiA9IENfU1BBQ0UgKyAkMjtcbiAgICB9XG5cbiAgICBtYXggPSAkMSArIHJlcGVhdChDX1NQQUNFLCAkMi5sZW5ndGgpICsgJDM7XG5cbiAgICByZXR1cm4gbWF4ICsgcmVzdDtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG52YXIgZ2V0SW5kZW50ID0gcmVxdWlyZSgnLi9nZXQtaW5kZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbmRlbnRhdGlvbjtcblxudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcblxuLyogUmVtb3ZlIHRoZSBtaW5pbXVtIGluZGVudCBmcm9tIGV2ZXJ5IGxpbmUgaW4gYHZhbHVlYC5cbiAqIFN1cHBvcnRzIGJvdGggdGFiLCBzcGFjZWQsIGFuZCBtaXhlZCBpbmRlbnRhdGlvbiAoYXNcbiAqIHdlbGwgYXMgcG9zc2libGUpLiAqL1xuZnVuY3Rpb24gaW5kZW50YXRpb24odmFsdWUsIG1heGltdW0pIHtcbiAgdmFyIHZhbHVlcyA9IHZhbHVlLnNwbGl0KENfTkVXTElORSk7XG4gIHZhciBwb3NpdGlvbiA9IHZhbHVlcy5sZW5ndGggKyAxO1xuICB2YXIgbWluSW5kZW50ID0gSW5maW5pdHk7XG4gIHZhciBtYXRyaXggPSBbXTtcbiAgdmFyIGluZGV4O1xuICB2YXIgaW5kZW50YXRpb247XG4gIHZhciBzdG9wcztcbiAgdmFyIHBhZGRpbmc7XG5cbiAgdmFsdWVzLnVuc2hpZnQocmVwZWF0KENfU1BBQ0UsIG1heGltdW0pICsgJyEnKTtcblxuICB3aGlsZSAocG9zaXRpb24tLSkge1xuICAgIGluZGVudGF0aW9uID0gZ2V0SW5kZW50KHZhbHVlc1twb3NpdGlvbl0pO1xuXG4gICAgbWF0cml4W3Bvc2l0aW9uXSA9IGluZGVudGF0aW9uLnN0b3BzO1xuXG4gICAgaWYgKHRyaW0odmFsdWVzW3Bvc2l0aW9uXSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZW50YXRpb24uaW5kZW50KSB7XG4gICAgICBpZiAoaW5kZW50YXRpb24uaW5kZW50ID4gMCAmJiBpbmRlbnRhdGlvbi5pbmRlbnQgPCBtaW5JbmRlbnQpIHtcbiAgICAgICAgbWluSW5kZW50ID0gaW5kZW50YXRpb24uaW5kZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtaW5JbmRlbnQgPSBJbmZpbml0eTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1pbkluZGVudCAhPT0gSW5maW5pdHkpIHtcbiAgICBwb3NpdGlvbiA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAocG9zaXRpb24tLSkge1xuICAgICAgc3RvcHMgPSBtYXRyaXhbcG9zaXRpb25dO1xuICAgICAgaW5kZXggPSBtaW5JbmRlbnQ7XG5cbiAgICAgIHdoaWxlIChpbmRleCAmJiAhKGluZGV4IGluIHN0b3BzKSkge1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRyaW0odmFsdWVzW3Bvc2l0aW9uXSkubGVuZ3RoICE9PSAwICYmXG4gICAgICAgIG1pbkluZGVudCAmJlxuICAgICAgICBpbmRleCAhPT0gbWluSW5kZW50XG4gICAgICApIHtcbiAgICAgICAgcGFkZGluZyA9IENfVEFCO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFkZGluZyA9ICcnO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZXNbcG9zaXRpb25dID0gcGFkZGluZyArIHZhbHVlc1twb3NpdGlvbl0uc2xpY2UoXG4gICAgICAgIGluZGV4IGluIHN0b3BzID8gc3RvcHNbaW5kZXhdICsgMSA6IDBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFsdWVzLnNoaWZ0KCk7XG5cbiAgcmV0dXJuIHZhbHVlcy5qb2luKENfTkVXTElORSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0ZXh0SGVhZGluZztcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0VRVUFMUyA9ICc9JztcbnZhciBDX0RBU0ggPSAnLSc7XG5cbnZhciBNQVhfSEVBRElOR19JTkRFTlQgPSAzO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrIHNldGV4dFxuICogaGVhZGVycywgbWFwcGluZyB0byB0aGVpciBjb3JyZXNwb25kaW5nIGRlcHRoLiAqL1xudmFyIFNFVEVYVF9NQVJLRVJTID0ge307XG5cblNFVEVYVF9NQVJLRVJTW0NfRVFVQUxTXSA9IDE7XG5TRVRFWFRfTUFSS0VSU1tDX0RBU0hdID0gMjtcblxuZnVuY3Rpb24gc2V0ZXh0SGVhZGluZyhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbm93ID0gZWF0Lm5vdygpO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBjb250ZW50O1xuICB2YXIgcXVldWU7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBkZXB0aDtcblxuICAvKiBFYXQgaW5pdGlhbCBpbmRlbnRhdGlvbi4gKi9cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSB8fCBpbmRleCA+PSBNQVhfSEVBRElOR19JTkRFTlQpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFYXQgY29udGVudC4gKi9cbiAgY29udGVudCA9ICcnO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UgfHwgY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG4gIH1cblxuICBub3cuY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlICs9IGNvbnRlbnQgKyBxdWV1ZTtcblxuICAvKiBFbnN1cmUgdGhlIGNvbnRlbnQgaXMgZm9sbG93ZWQgYnkgYSBuZXdsaW5lIGFuZCBhXG4gICAqIHZhbGlkIG1hcmtlci4gKi9cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICBtYXJrZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FIHx8ICFTRVRFWFRfTUFSS0VSU1ttYXJrZXJdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuXG4gIC8qIEVhdCBTZXRleHQtbGluZS4gKi9cbiAgcXVldWUgPSBtYXJrZXI7XG4gIGRlcHRoID0gU0VURVhUX01BUktFUlNbbWFya2VyXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlICsgcXVldWUpKHtcbiAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgZGVwdGg6IGRlcHRoLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcGVuQ2xvc2VUYWcgPSByZXF1aXJlKCcuLi91dGlsL2h0bWwnKS5vcGVuQ2xvc2VUYWc7XG5cbm1vZHVsZS5leHBvcnRzID0gYmxvY2tIVE1MO1xuXG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfTFQgPSAnPCc7XG5cbmZ1bmN0aW9uIGJsb2NrSFRNTChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgYmxvY2tzID0gc2VsZi5vcHRpb25zLmJsb2NrcztcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIG5leHQ7XG4gIHZhciBsaW5lO1xuICB2YXIgb2Zmc2V0O1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgY291bnQ7XG4gIHZhciBzZXF1ZW5jZTtcbiAgdmFyIHN1YnZhbHVlO1xuXG4gIHZhciBzZXF1ZW5jZXMgPSBbXG4gICAgWy9ePChzY3JpcHR8cHJlfHN0eWxlKSg/PShcXHN8PnwkKSkvaSwgLzxcXC8oc2NyaXB0fHByZXxzdHlsZSk+L2ksIHRydWVdLFxuICAgIFsvXjwhLS0vLCAvLS0+LywgdHJ1ZV0sXG4gICAgWy9ePFxcPy8sIC9cXD8+LywgdHJ1ZV0sXG4gICAgWy9ePCFbQS1aYS16XS8sIC8+LywgdHJ1ZV0sXG4gICAgWy9ePCFcXFtDREFUQVxcWy8sIC9cXF1cXF0+LywgdHJ1ZV0sXG4gICAgW25ldyBSZWdFeHAoJ148Lz8oJyArIGJsb2Nrcy5qb2luKCd8JykgKyAnKSg/PShcXFxcc3wvPz58JCkpJywgJ2knKSwgL14kLywgdHJ1ZV0sXG4gICAgW25ldyBSZWdFeHAob3BlbkNsb3NlVGFnLnNvdXJjZSArICdcXFxccyokJyksIC9eJC8sIGZhbHNlXVxuICBdO1xuXG4gIC8qIEVhdCBpbml0aWFsIHNwYWNpbmcuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19MVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG5leHQgPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXggKyAxKTtcbiAgbmV4dCA9IG5leHQgPT09IC0xID8gbGVuZ3RoIDogbmV4dDtcbiAgbGluZSA9IHZhbHVlLnNsaWNlKGluZGV4LCBuZXh0KTtcbiAgb2Zmc2V0ID0gLTE7XG4gIGNvdW50ID0gc2VxdWVuY2VzLmxlbmd0aDtcblxuICB3aGlsZSAoKytvZmZzZXQgPCBjb3VudCkge1xuICAgIGlmIChzZXF1ZW5jZXNbb2Zmc2V0XVswXS50ZXN0KGxpbmUpKSB7XG4gICAgICBzZXF1ZW5jZSA9IHNlcXVlbmNlc1tvZmZzZXRdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzZXF1ZW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gc2VxdWVuY2VbMl07XG4gIH1cblxuICBpbmRleCA9IG5leHQ7XG5cbiAgaWYgKCFzZXF1ZW5jZVsxXS50ZXN0KGxpbmUpKSB7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBuZXh0ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4ICsgMSk7XG4gICAgICBuZXh0ID0gbmV4dCA9PT0gLTEgPyBsZW5ndGggOiBuZXh0O1xuICAgICAgbGluZSA9IHZhbHVlLnNsaWNlKGluZGV4ICsgMSwgbmV4dCk7XG5cbiAgICAgIGlmIChzZXF1ZW5jZVsxXS50ZXN0KGxpbmUpKSB7XG4gICAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgICAgaW5kZXggPSBuZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGluZGV4ID0gbmV4dDtcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGluZGV4KTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7dHlwZTogJ2h0bWwnLCB2YWx1ZTogc3VidmFsdWV9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIG5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvbm9ybWFsaXplJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZm9vdG5vdGVEZWZpbml0aW9uO1xuZm9vdG5vdGVEZWZpbml0aW9uLm5vdEluTGlzdCA9IHRydWU7XG5mb290bm90ZURlZmluaXRpb24ubm90SW5CbG9jayA9IHRydWU7XG5cbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfQ0FSRVQgPSAnXic7XG52YXIgQ19DT0xPTiA9ICc6JztcblxudmFyIEVYUFJFU1NJT05fSU5JVElBTF9UQUIgPSAvXiggezR9fFxcdCk/L2dtO1xuXG5mdW5jdGlvbiBmb290bm90ZURlZmluaXRpb24oZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG9mZnNldHMgPSBzZWxmLm9mZnNldDtcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBub3c7XG4gIHZhciBjdXJyZW50TGluZTtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHN1YnF1ZXVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgaWRlbnRpZmllcjtcbiAgdmFyIGFkZDtcbiAgdmFyIGV4aXQ7XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMuZm9vdG5vdGVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSAwO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlID0gJyc7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgY3VycmVudExpbmUgPSBub3cubGluZTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfQlJBQ0tFVF9PUEVOIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfQ0FSRVRcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgKz0gQ19CUkFDS0VUX09QRU4gKyBDX0NBUkVUO1xuICBpbmRleCA9IHN1YnZhbHVlLmxlbmd0aDtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKFxuICAgICFxdWV1ZSB8fFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfQlJBQ0tFVF9DTE9TRSB8fFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBDX0NPTE9OXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlkZW50aWZpZXIgPSBub3JtYWxpemUocXVldWUpO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIENfQlJBQ0tFVF9DTE9TRSArIENfQ09MT047XG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuICBjb250ZW50ID0gJyc7XG4gIHN1YnF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgc3VicXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdWJxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IHN1YnF1ZXVlO1xuICAgIH1cblxuICAgIGlmIChxdWV1ZSkge1xuICAgICAgY29udGVudCArPSBxdWV1ZTtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgY29udGVudCArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIHN1YnZhbHVlICs9IGNvbnRlbnQ7XG5cbiAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShFWFBSRVNTSU9OX0lOSVRJQUxfVEFCLCBmdW5jdGlvbiAobGluZSkge1xuICAgIG9mZnNldHNbY3VycmVudExpbmVdID0gKG9mZnNldHNbY3VycmVudExpbmVdIHx8IDApICsgbGluZS5sZW5ndGg7XG4gICAgY3VycmVudExpbmUrKztcblxuICAgIHJldHVybiAnJztcbiAgfSk7XG5cbiAgYWRkID0gZWF0KHN1YnZhbHVlKTtcblxuICBleGl0ID0gc2VsZi5lbnRlckJsb2NrKCk7XG4gIGNvbnRlbnQgPSBzZWxmLnRva2VuaXplQmxvY2soY29udGVudCwgbm93KTtcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBhZGQoe1xuICAgIHR5cGU6ICdmb290bm90ZURlZmluaXRpb24nLFxuICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjb2xsYXBzZVxuXG4vLyBgY29sbGFwc2UoJyBcXHRcXG5iYXIgXFxuYmF6XFx0JykgLy8gJyBiYXIgYmF6ICdgXG5mdW5jdGlvbiBjb2xsYXBzZSh2YWx1ZSkge1xuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cXHMrL2csICcgJylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIG5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvbm9ybWFsaXplJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbjtcbmRlZmluaXRpb24ubm90SW5MaXN0ID0gdHJ1ZTtcbmRlZmluaXRpb24ubm90SW5CbG9jayA9IHRydWU7XG5cbnZhciBDX0RPVUJMRV9RVU9URSA9ICdcIic7XG52YXIgQ19TSU5HTEVfUVVPVEUgPSAnXFwnJztcbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfUEFSRU5fT1BFTiA9ICcoJztcbnZhciBDX1BBUkVOX0NMT1NFID0gJyknO1xudmFyIENfQ09MT04gPSAnOic7XG52YXIgQ19MVCA9ICc8JztcbnZhciBDX0dUID0gJz4nO1xuXG5mdW5jdGlvbiBkZWZpbml0aW9uKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgYmVmb3JlVVJMO1xuICB2YXIgYmVmb3JlVGl0bGU7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHRlc3Q7XG4gIHZhciBpZGVudGlmaWVyO1xuICB2YXIgdXJsO1xuICB2YXIgdGl0bGU7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoXG4gICAgIXF1ZXVlIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19CUkFDS0VUX0NMT1NFIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfQ09MT05cbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWRlbnRpZmllciA9IHF1ZXVlO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIENfQlJBQ0tFVF9DTE9TRSArIENfQ09MT047XG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgIT09IENfVEFCICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiZcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHF1ZXVlID0gJyc7XG4gIGJlZm9yZVVSTCA9IHN1YnZhbHVlO1xuXG4gIGlmIChjaGFyYWN0ZXIgPT09IENfTFQpIHtcbiAgICBpbmRleCsrO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoIWlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gaXNFbmNsb3NlZFVSTENoYXJhY3Rlci5kZWxpbWl0ZXIpIHtcbiAgICAgIHN1YnZhbHVlICs9IENfTFQgKyBxdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjb21tb25tYXJrKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW5kZXggLT0gcXVldWUubGVuZ3RoICsgMTtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKCFpc1VuY2xvc2VkVVJMQ2hhcmFjdGVyKGNoYXJhY3RlcikpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gcXVldWU7XG4gIH1cblxuICBpZiAoIXF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdXJsID0gcXVldWU7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19UQUIgJiZcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX05FV0xJTkVcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgdGVzdCA9IG51bGw7XG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gQ19ET1VCTEVfUVVPVEUpIHtcbiAgICB0ZXN0ID0gQ19ET1VCTEVfUVVPVEU7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NJTkdMRV9RVU9URSkge1xuICAgIHRlc3QgPSBDX1NJTkdMRV9RVU9URTtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fT1BFTikge1xuICAgIHRlc3QgPSBDX1BBUkVOX0NMT1NFO1xuICB9XG5cbiAgaWYgKCF0ZXN0KSB7XG4gICAgcXVldWUgPSAnJztcbiAgICBpbmRleCA9IHN1YnZhbHVlLmxlbmd0aDtcbiAgfSBlbHNlIGlmIChxdWV1ZSkge1xuICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICAgIHF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IHRlc3QpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSB8fCBjaGFyYWN0ZXIgPT09IHRlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBxdWV1ZSArPSBDX05FV0xJTkU7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IHRlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBiZWZvcmVUaXRsZSA9IHN1YnZhbHVlO1xuICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gICAgdGl0bGUgPSBxdWV1ZTtcbiAgICBxdWV1ZSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoIWNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgIGlmIChzaWxlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGJlZm9yZVVSTCA9IGVhdChiZWZvcmVVUkwpLnRlc3QoKS5lbmQ7XG4gICAgdXJsID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodXJsKSwgYmVmb3JlVVJMLCB7bm9uVGVybWluYXRlZDogZmFsc2V9KTtcblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgYmVmb3JlVGl0bGUgPSBlYXQoYmVmb3JlVGl0bGUpLnRlc3QoKS5lbmQ7XG4gICAgICB0aXRsZSA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKHRpdGxlKSwgYmVmb3JlVGl0bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICAgIHR5cGU6ICdkZWZpbml0aW9uJyxcbiAgICAgIGlkZW50aWZpZXI6IG5vcm1hbGl6ZShpZGVudGlmaWVyKSxcbiAgICAgIHRpdGxlOiB0aXRsZSB8fCBudWxsLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KTtcbiAgfVxufVxuXG4vKiBDaGVjayBpZiBgY2hhcmFjdGVyYCBjYW4gYmUgaW5zaWRlIGFuIGVuY2xvc2VkIFVSSS4gKi9cbmZ1bmN0aW9uIGlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiBjaGFyYWN0ZXIgIT09IENfR1QgJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfQ0xPU0U7XG59XG5cbmlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIuZGVsaW1pdGVyID0gQ19HVDtcblxuLyogQ2hlY2sgaWYgYGNoYXJhY3RlcmAgY2FuIGJlIGluc2lkZSBhbiB1bmNsb3NlZCBVUkkuICovXG5mdW5jdGlvbiBpc1VuY2xvc2VkVVJMQ2hhcmFjdGVyKGNoYXJhY3Rlcikge1xuICByZXR1cm4gY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfT1BFTiAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX0NMT1NFICYmXG4gICAgIXdoaXRlc3BhY2UoY2hhcmFjdGVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRhYmxlO1xuXG52YXIgQ19CQUNLU0xBU0ggPSAnXFxcXCc7XG52YXIgQ19USUNLID0gJ2AnO1xudmFyIENfREFTSCA9ICctJztcbnZhciBDX1BJUEUgPSAnfCc7XG52YXIgQ19DT0xPTiA9ICc6JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG5cbnZhciBNSU5fVEFCTEVfQ09MVU1OUyA9IDE7XG52YXIgTUlOX1RBQkxFX1JPV1MgPSAyO1xuXG52YXIgVEFCTEVfQUxJR05fTEVGVCA9ICdsZWZ0JztcbnZhciBUQUJMRV9BTElHTl9DRU5URVIgPSAnY2VudGVyJztcbnZhciBUQUJMRV9BTElHTl9SSUdIVCA9ICdyaWdodCc7XG52YXIgVEFCTEVfQUxJR05fTk9ORSA9IG51bGw7XG5cbmZ1bmN0aW9uIHRhYmxlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpbmRleDtcbiAgdmFyIGFsaWdubWVudHM7XG4gIHZhciBhbGlnbm1lbnQ7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIHJvdztcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIGxpbmVzO1xuICB2YXIgcXVldWU7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBoYXNEYXNoO1xuICB2YXIgYWxpZ247XG4gIHZhciBjZWxsO1xuICB2YXIgcHJlYW1ibGU7XG4gIHZhciBjb3VudDtcbiAgdmFyIG9wZW5pbmc7XG4gIHZhciBub3c7XG4gIHZhciBwb3NpdGlvbjtcbiAgdmFyIGxpbmVDb3VudDtcbiAgdmFyIGxpbmU7XG4gIHZhciByb3dzO1xuICB2YXIgdGFibGU7XG4gIHZhciBsaW5lSW5kZXg7XG4gIHZhciBwaXBlSW5kZXg7XG4gIHZhciBmaXJzdDtcblxuICAvKiBFeGl0IHdoZW4gbm90IGluIGdmbS1tb2RlLiAqL1xuICBpZiAoIXNlbGYub3B0aW9ucy5nZm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBHZXQgdGhlIHJvd3MuXG4gICAqIERldGVjdGluZyB0YWJsZXMgc29vbiBpcyBoYXJkLCBzbyB0aGVyZSBhcmUgc29tZVxuICAgKiBjaGVja3MgZm9yIHBlcmZvcm1hbmNlIGhlcmUsIHN1Y2ggYXMgdGhlIG1pbmltdW1cbiAgICogbnVtYmVyIG9mIHJvd3MsIGFuZCBhbGxvd2VkIGNoYXJhY3RlcnMgaW4gdGhlXG4gICAqIGFsaWdubWVudCByb3cuICovXG4gIGluZGV4ID0gMDtcbiAgbGluZUNvdW50ID0gMDtcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgbGluZXMgPSBbXTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBsaW5lSW5kZXggPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXgpO1xuICAgIHBpcGVJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19QSVBFLCBpbmRleCArIDEpO1xuXG4gICAgaWYgKGxpbmVJbmRleCA9PT0gLTEpIHtcbiAgICAgIGxpbmVJbmRleCA9IHZhbHVlLmxlbmd0aDtcbiAgICB9XG5cbiAgICBpZiAocGlwZUluZGV4ID09PSAtMSB8fCBwaXBlSW5kZXggPiBsaW5lSW5kZXgpIHtcbiAgICAgIGlmIChsaW5lQ291bnQgPCBNSU5fVEFCTEVfUk9XUykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxpbmVzLnB1c2godmFsdWUuc2xpY2UoaW5kZXgsIGxpbmVJbmRleCkpO1xuICAgIGxpbmVDb3VudCsrO1xuICAgIGluZGV4ID0gbGluZUluZGV4ICsgMTtcbiAgfVxuXG4gIC8qIFBhcnNlIHRoZSBhbGlnbm1lbnQgcm93LiAqL1xuICBzdWJ2YWx1ZSA9IGxpbmVzLmpvaW4oQ19ORVdMSU5FKTtcbiAgYWxpZ25tZW50cyA9IGxpbmVzLnNwbGljZSgxLCAxKVswXSB8fCBbXTtcbiAgaW5kZXggPSAwO1xuICBsZW5ndGggPSBhbGlnbm1lbnRzLmxlbmd0aDtcbiAgbGluZUNvdW50LS07XG4gIGFsaWdubWVudCA9IGZhbHNlO1xuICBhbGlnbiA9IFtdO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IGFsaWdubWVudHMuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfUElQRSkge1xuICAgICAgaGFzRGFzaCA9IG51bGw7XG5cbiAgICAgIGlmIChhbGlnbm1lbnQgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChmaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsaWduLnB1c2goYWxpZ25tZW50KTtcbiAgICAgICAgYWxpZ25tZW50ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfREFTSCkge1xuICAgICAgaGFzRGFzaCA9IHRydWU7XG4gICAgICBhbGlnbm1lbnQgPSBhbGlnbm1lbnQgfHwgVEFCTEVfQUxJR05fTk9ORTtcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19DT0xPTikge1xuICAgICAgaWYgKGFsaWdubWVudCA9PT0gVEFCTEVfQUxJR05fTEVGVCkge1xuICAgICAgICBhbGlnbm1lbnQgPSBUQUJMRV9BTElHTl9DRU5URVI7XG4gICAgICB9IGVsc2UgaWYgKGhhc0Rhc2ggJiYgYWxpZ25tZW50ID09PSBUQUJMRV9BTElHTl9OT05FKSB7XG4gICAgICAgIGFsaWdubWVudCA9IFRBQkxFX0FMSUdOX1JJR0hUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ25tZW50ID0gVEFCTEVfQUxJR05fTEVGVDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKGFsaWdubWVudCAhPT0gZmFsc2UpIHtcbiAgICBhbGlnbi5wdXNoKGFsaWdubWVudCk7XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gd2l0aG91dCBlbm91Z2ggY29sdW1ucy4gKi9cbiAgaWYgKGFsaWduLmxlbmd0aCA8IE1JTl9UQUJMRV9DT0xVTU5TKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiBQYXJzZSB0aGUgcm93cy4gKi9cbiAgcG9zaXRpb24gPSAtMTtcbiAgcm93cyA9IFtdO1xuXG4gIHRhYmxlID0gZWF0KHN1YnZhbHVlKS5yZXNldCh7XG4gICAgdHlwZTogJ3RhYmxlJyxcbiAgICBhbGlnbjogYWxpZ24sXG4gICAgY2hpbGRyZW46IHJvd3NcbiAgfSk7XG5cbiAgd2hpbGUgKCsrcG9zaXRpb24gPCBsaW5lQ291bnQpIHtcbiAgICBsaW5lID0gbGluZXNbcG9zaXRpb25dO1xuICAgIHJvdyA9IHt0eXBlOiAndGFibGVSb3cnLCBjaGlsZHJlbjogW119O1xuXG4gICAgLyogRWF0IGEgbmV3bGluZSBjaGFyYWN0ZXIgd2hlbiB0aGlzIGlzIG5vdCB0aGVcbiAgICAgKiBmaXJzdCByb3cuICovXG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICBlYXQoQ19ORVdMSU5FKTtcbiAgICB9XG5cbiAgICAvKiBFYXQgdGhlIHJvdy4gKi9cbiAgICBlYXQobGluZSkucmVzZXQocm93LCB0YWJsZSk7XG5cbiAgICBsZW5ndGggPSBsaW5lLmxlbmd0aCArIDE7XG4gICAgaW5kZXggPSAwO1xuICAgIHF1ZXVlID0gJyc7XG4gICAgY2VsbCA9ICcnO1xuICAgIHByZWFtYmxlID0gdHJ1ZTtcbiAgICBjb3VudCA9IG51bGw7XG4gICAgb3BlbmluZyA9IG51bGw7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IGxpbmUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIgfHwgY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICAgIGlmIChjZWxsKSB7XG4gICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVhdChjaGFyYWN0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09ICcnIHx8IGNoYXJhY3RlciA9PT0gQ19QSVBFKSB7XG4gICAgICAgIGlmIChwcmVhbWJsZSkge1xuICAgICAgICAgIGVhdChjaGFyYWN0ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFyYWN0ZXIgJiYgb3BlbmluZykge1xuICAgICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgoY2VsbCB8fCBjaGFyYWN0ZXIpICYmICFwcmVhbWJsZSkge1xuICAgICAgICAgICAgc3VidmFsdWUgPSBjZWxsO1xuXG4gICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgc3VidmFsdWUgKz0gcXVldWUuc2xpY2UoMCwgcXVldWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgcXVldWUgPSBxdWV1ZS5jaGFyQXQocXVldWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgICAgICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub3cgPSBlYXQubm93KCk7XG5cbiAgICAgICAgICAgIGVhdChzdWJ2YWx1ZSkoe1xuICAgICAgICAgICAgICB0eXBlOiAndGFibGVDZWxsJyxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoY2VsbCwgbm93KVxuICAgICAgICAgICAgfSwgcm93KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlYXQocXVldWUgKyBjaGFyYWN0ZXIpO1xuXG4gICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChxdWV1ZSkge1xuICAgICAgICAgIGNlbGwgKz0gcXVldWU7XG4gICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNlbGwgKz0gY2hhcmFjdGVyO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIICYmIGluZGV4ICE9PSBsZW5ndGggLSAyKSB7XG4gICAgICAgICAgY2VsbCArPSBsaW5lLmNoYXJBdChpbmRleCArIDEpO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RJQ0spIHtcbiAgICAgICAgICBjb3VudCA9IDE7XG5cbiAgICAgICAgICB3aGlsZSAobGluZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICBjZWxsICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghb3BlbmluZykge1xuICAgICAgICAgICAgb3BlbmluZyA9IGNvdW50O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY291bnQgPj0gb3BlbmluZykge1xuICAgICAgICAgICAgb3BlbmluZyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByZWFtYmxlID0gZmFsc2U7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIC8qIEVhdCB0aGUgYWxpZ25tZW50IHJvdy4gKi9cbiAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICBlYXQoQ19ORVdMSU5FICsgYWxpZ25tZW50cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciBkZWNpbWFsID0gcmVxdWlyZSgnaXMtZGVjaW1hbCcpO1xudmFyIHRyaW1UcmFpbGluZ0xpbmVzID0gcmVxdWlyZSgndHJpbS10cmFpbGluZy1saW5lcycpO1xudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyYWdyYXBoO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xuXG52YXIgVEFCX1NJWkUgPSA0O1xuXG4vKiBUb2tlbmlzZSBwYXJhZ3JhcGguICovXG5mdW5jdGlvbiBwYXJhZ3JhcGgoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgY29tbW9ubWFyayA9IHNldHRpbmdzLmNvbW1vbm1hcms7XG4gIHZhciBnZm0gPSBzZXR0aW5ncy5nZm07XG4gIHZhciB0b2tlbml6ZXJzID0gc2VsZi5ibG9ja1Rva2VuaXplcnM7XG4gIHZhciBpbnRlcnJ1cHRvcnMgPSBzZWxmLmludGVycnVwdFBhcmFncmFwaDtcbiAgdmFyIGluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUpO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgcG9zaXRpb247XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHNpemU7XG4gIHZhciBub3c7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgLyogRWF0IGV2ZXJ5dGhpbmcgaWYgdGhlcmXigJlzIG5vIGZvbGxvd2luZyBuZXdsaW5lLiAqL1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogU3RvcCBpZiB0aGUgbmV4dCBjaGFyYWN0ZXIgaXMgTkVXTElORS4gKi9cbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IENfTkVXTElORSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogSW4gY29tbW9ubWFyay1tb2RlLCBmb2xsb3dpbmcgaW5kZW50ZWQgbGluZXNcbiAgICAgKiBhcmUgcGFydCBvZiB0aGUgcGFyYWdyYXBoLiAqL1xuICAgIGlmIChjb21tb25tYXJrKSB7XG4gICAgICBzaXplID0gMDtcbiAgICAgIHBvc2l0aW9uID0gaW5kZXggKyAxO1xuXG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KHBvc2l0aW9uKTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgICAgIHNpemUgPSBUQUJfU0laRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgICBzaXplKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2l6ZSA+PSBUQUJfU0laRSkge1xuICAgICAgICBpbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCArIDEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKGluZGV4ICsgMSk7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZm9sbG93aW5nIGNvZGUgY29udGFpbnMgYSBwb3NzaWJsZVxuICAgICAqIGJsb2NrLiAqL1xuICAgIGlmIChpbnRlcnJ1cHQoaW50ZXJydXB0b3JzLCB0b2tlbml6ZXJzLCBzZWxmLCBbZWF0LCBzdWJ2YWx1ZSwgdHJ1ZV0pKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBCcmVhayBpZiB0aGUgZm9sbG93aW5nIGxpbmUgc3RhcnRzIGEgbGlzdCwgd2hlblxuICAgICAqIGFscmVhZHkgaW4gYSBsaXN0LCBvciB3aGVuIGluIGNvbW1vbm1hcmssIG9yIHdoZW5cbiAgICAgKiBpbiBnZm0gbW9kZSBhbmQgdGhlIGJ1bGxldCBpcyAqbm90KiBudW1lcmljLiAqL1xuICAgIGlmIChcbiAgICAgIHRva2VuaXplcnMubGlzdC5jYWxsKHNlbGYsIGVhdCwgc3VidmFsdWUsIHRydWUpICYmXG4gICAgICAoXG4gICAgICAgIHNlbGYuaW5MaXN0IHx8XG4gICAgICAgIGNvbW1vbm1hcmsgfHxcbiAgICAgICAgKGdmbSAmJiAhZGVjaW1hbCh0cmltLmxlZnQoc3VidmFsdWUpLmNoYXJBdCgwKSkpXG4gICAgICApXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBwb3NpdGlvbiA9IGluZGV4O1xuICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4ICsgMSk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xICYmIHRyaW0odmFsdWUuc2xpY2UocG9zaXRpb24sIGluZGV4KSkgPT09ICcnKSB7XG4gICAgICBpbmRleCA9IHBvc2l0aW9uO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpbmRleCk7XG5cbiAgaWYgKHRyaW0oc3VidmFsdWUpID09PSAnJykge1xuICAgIGVhdChzdWJ2YWx1ZSk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbm93ID0gZWF0Lm5vdygpO1xuICBzdWJ2YWx1ZSA9IHRyaW1UcmFpbGluZ0xpbmVzKHN1YnZhbHVlKTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoc3VidmFsdWUsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvZXNjYXBlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlO1xuZXNjYXBlLmxvY2F0b3IgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGVzY2FwZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbm9kZTtcblxuICBpZiAodmFsdWUuY2hhckF0KDApID09PSAnXFxcXCcpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMSk7XG5cbiAgICBpZiAoc2VsZi5lc2NhcGUuaW5kZXhPZihjaGFyYWN0ZXIpICE9PSAtMSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgICAgbm9kZSA9IHt0eXBlOiAnYnJlYWsnfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUgPSB7XG4gICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgIHZhbHVlOiBjaGFyYWN0ZXJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdCgnXFxcXCcgKyBjaGFyYWN0ZXIpKG5vZGUpO1xuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ1xcXFwnLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgZGVjb2RlID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvdGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXV0b0xpbms7XG5hdXRvTGluay5sb2NhdG9yID0gbG9jYXRlO1xuYXV0b0xpbmsubm90SW5MaW5rID0gdHJ1ZTtcblxudmFyIENfTFQgPSAnPCc7XG52YXIgQ19HVCA9ICc+JztcbnZhciBDX0FUX1NJR04gPSAnQCc7XG52YXIgQ19TTEFTSCA9ICcvJztcbnZhciBNQUlMVE8gPSAnbWFpbHRvOic7XG52YXIgTUFJTFRPX0xFTkdUSCA9IE1BSUxUTy5sZW5ndGg7XG5cbi8qIFRva2VuaXNlIGEgbGluay4gKi9cbmZ1bmN0aW9uIGF1dG9MaW5rKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZjtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgaW5kZXg7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGhhc0F0Q2hhcmFjdGVyO1xuICB2YXIgbGluaztcbiAgdmFyIG5vdztcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciB0b2tlbml6ZXJzO1xuICB2YXIgZXhpdDtcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSBDX0xUKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc2VsZiA9IHRoaXM7XG4gIHN1YnZhbHVlID0gJyc7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgaW5kZXggPSAwO1xuICBxdWV1ZSA9ICcnO1xuICBoYXNBdENoYXJhY3RlciA9IGZhbHNlO1xuICBsaW5rID0gJyc7XG5cbiAgaW5kZXgrKztcbiAgc3VidmFsdWUgPSBDX0xUO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICB3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19HVCB8fFxuICAgICAgY2hhcmFjdGVyID09PSBDX0FUX1NJR04gfHxcbiAgICAgIChjaGFyYWN0ZXIgPT09ICc6JyAmJiB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gQ19TTEFTSClcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxpbmsgKz0gcXVldWU7XG4gIHF1ZXVlID0gJyc7XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgbGluayArPSBjaGFyYWN0ZXI7XG4gIGluZGV4Kys7XG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gQ19BVF9TSUdOKSB7XG4gICAgaGFzQXRDaGFyYWN0ZXIgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gJzonIHx8XG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSAhPT0gQ19TTEFTSFxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxpbmsgKz0gQ19TTEFTSDtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHwgY2hhcmFjdGVyID09PSBDX0dUKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKCFxdWV1ZSB8fCBjaGFyYWN0ZXIgIT09IENfR1QpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGxpbmsgKz0gcXVldWU7XG4gIGNvbnRlbnQgPSBsaW5rO1xuICBzdWJ2YWx1ZSArPSBsaW5rICsgY2hhcmFjdGVyO1xuICBub3cgPSBlYXQubm93KCk7XG4gIG5vdy5jb2x1bW4rKztcbiAgbm93Lm9mZnNldCsrO1xuXG4gIGlmIChoYXNBdENoYXJhY3Rlcikge1xuICAgIGlmIChsaW5rLnNsaWNlKDAsIE1BSUxUT19MRU5HVEgpLnRvTG93ZXJDYXNlKCkgPT09IE1BSUxUTykge1xuICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyKE1BSUxUT19MRU5HVEgpO1xuICAgICAgbm93LmNvbHVtbiArPSBNQUlMVE9fTEVOR1RIO1xuICAgICAgbm93Lm9mZnNldCArPSBNQUlMVE9fTEVOR1RIO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rID0gTUFJTFRPICsgbGluaztcbiAgICB9XG4gIH1cblxuICAvKiBUZW1wb3JhcmlseSByZW1vdmUgYWxsIHRva2VuaXplcnMgZXhjZXB0IHRleHQgaW4gYXV0b2xpbmtzLiAqL1xuICB0b2tlbml6ZXJzID0gc2VsZi5pbmxpbmVUb2tlbml6ZXJzO1xuICBzZWxmLmlubGluZVRva2VuaXplcnMgPSB7dGV4dDogdG9rZW5pemVycy50ZXh0fTtcblxuICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcblxuICBjb250ZW50ID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBub3cpO1xuXG4gIHNlbGYuaW5saW5lVG9rZW5pemVycyA9IHRva2VuaXplcnM7XG4gIGV4aXQoKTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2xpbmsnLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHVybDogZGVjb2RlKGxpbmssIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pLFxuICAgIGNoaWxkcmVuOiBjb250ZW50XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVjb2RlID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvdXJsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdXJsO1xudXJsLmxvY2F0b3IgPSBsb2NhdGU7XG51cmwubm90SW5MaW5rID0gdHJ1ZTtcblxudmFyIENfQlJBQ0tFVF9PUEVOID0gJ1snO1xudmFyIENfQlJBQ0tFVF9DTE9TRSA9ICddJztcbnZhciBDX1BBUkVOX09QRU4gPSAnKCc7XG52YXIgQ19QQVJFTl9DTE9TRSA9ICcpJztcbnZhciBDX0xUID0gJzwnO1xudmFyIENfQVRfU0lHTiA9ICdAJztcblxudmFyIEhUVFBfUFJPVE9DT0wgPSAnaHR0cDovLyc7XG52YXIgSFRUUFNfUFJPVE9DT0wgPSAnaHR0cHM6Ly8nO1xudmFyIE1BSUxUT19QUk9UT0NPTCA9ICdtYWlsdG86JztcblxudmFyIFBST1RPQ09MUyA9IFtcbiAgSFRUUF9QUk9UT0NPTCxcbiAgSFRUUFNfUFJPVE9DT0wsXG4gIE1BSUxUT19QUk9UT0NPTFxuXTtcblxudmFyIFBST1RPQ09MU19MRU5HVEggPSBQUk9UT0NPTFMubGVuZ3RoO1xuXG5mdW5jdGlvbiB1cmwoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGluZGV4O1xuICB2YXIgcG9zaXRpb247XG4gIHZhciBwcm90b2NvbDtcbiAgdmFyIG1hdGNoO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgcXVldWU7XG4gIHZhciBwYXJlbkNvdW50O1xuICB2YXIgbmV4dENoYXJhY3RlcjtcbiAgdmFyIGV4aXQ7XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMuZ2ZtKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgPSAnJztcbiAgaW5kZXggPSAtMTtcbiAgbGVuZ3RoID0gUFJPVE9DT0xTX0xFTkdUSDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHByb3RvY29sID0gUFJPVE9DT0xTW2luZGV4XTtcbiAgICBtYXRjaCA9IHZhbHVlLnNsaWNlKDAsIHByb3RvY29sLmxlbmd0aCk7XG5cbiAgICBpZiAobWF0Y2gudG9Mb3dlckNhc2UoKSA9PT0gcHJvdG9jb2wpIHtcbiAgICAgIHN1YnZhbHVlID0gbWF0Y2g7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXN1YnZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgcXVldWUgPSAnJztcbiAgcGFyZW5Db3VudCA9IDA7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHwgY2hhcmFjdGVyID09PSBDX0xUKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgPT09ICcuJyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnLCcgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJzonIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICc7JyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnXCInIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICdcXCcnIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICcpJyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnXSdcbiAgICApIHtcbiAgICAgIG5leHRDaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgICAgaWYgKCFuZXh0Q2hhcmFjdGVyIHx8IHdoaXRlc3BhY2UobmV4dENoYXJhY3RlcikpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9PUEVOIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICAgIHBhcmVuQ291bnQrKztcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX0NMT1NFIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBwYXJlbkNvdW50LS07XG5cbiAgICAgIGlmIChwYXJlbkNvdW50IDwgMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghcXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgY29udGVudCA9IHN1YnZhbHVlO1xuXG4gIGlmIChwcm90b2NvbCA9PT0gTUFJTFRPX1BST1RPQ09MKSB7XG4gICAgcG9zaXRpb24gPSBxdWV1ZS5pbmRleE9mKENfQVRfU0lHTik7XG5cbiAgICBpZiAocG9zaXRpb24gPT09IC0xIHx8IHBvc2l0aW9uID09PSBsZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyKE1BSUxUT19QUk9UT0NPTC5sZW5ndGgpO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcbiAgY29udGVudCA9IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgZWF0Lm5vdygpKTtcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdXJsOiBkZWNvZGUoc3VidmFsdWUsIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pLFxuICAgIGNoaWxkcmVuOiBjb250ZW50XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxudmFyIFBST1RPQ09MUyA9IFsnaHR0cHM6Ly8nLCAnaHR0cDovLycsICdtYWlsdG86J107XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBsZW5ndGggPSBQUk9UT0NPTFMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIG1pbiA9IC0xO1xuICB2YXIgcG9zaXRpb247XG5cbiAgaWYgKCF0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHZhbHVlLmluZGV4T2YoUFJPVE9DT0xTW2luZGV4XSwgZnJvbUluZGV4KTtcblxuICAgIGlmIChwb3NpdGlvbiAhPT0gLTEgJiYgKHBvc2l0aW9uIDwgbWluIHx8IG1pbiA9PT0gLTEpKSB7XG4gICAgICBtaW4gPSBwb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWluO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXRpY2FsID0gcmVxdWlyZSgnaXMtYWxwaGFiZXRpY2FsJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL3RhZycpO1xudmFyIHRhZyA9IHJlcXVpcmUoJy4uL3V0aWwvaHRtbCcpLnRhZztcblxubW9kdWxlLmV4cG9ydHMgPSBpbmxpbmVIVE1MO1xuaW5saW5lSFRNTC5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgRVhQUkVTU0lPTl9IVE1MX0xJTktfT1BFTiA9IC9ePGEgL2k7XG52YXIgRVhQUkVTU0lPTl9IVE1MX0xJTktfQ0xPU0UgPSAvXjxcXC9hPi9pO1xuXG5mdW5jdGlvbiBpbmxpbmVIVE1MKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBzdWJ2YWx1ZTtcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSAnPCcgfHwgbGVuZ3RoIDwgMykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgxKTtcblxuICBpZiAoXG4gICAgIWFscGhhYmV0aWNhbChjaGFyYWN0ZXIpICYmXG4gICAgY2hhcmFjdGVyICE9PSAnPycgJiZcbiAgICBjaGFyYWN0ZXIgIT09ICchJyAmJlxuICAgIGNoYXJhY3RlciAhPT0gJy8nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlID0gdmFsdWUubWF0Y2godGFnKTtcblxuICBpZiAoIXN1YnZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbm90IHVzZWQgeWV0LiAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHN1YnZhbHVlWzBdO1xuXG4gIGlmICghc2VsZi5pbkxpbmsgJiYgRVhQUkVTU0lPTl9IVE1MX0xJTktfT1BFTi50ZXN0KHN1YnZhbHVlKSkge1xuICAgIHNlbGYuaW5MaW5rID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChzZWxmLmluTGluayAmJiBFWFBSRVNTSU9OX0hUTUxfTElOS19DTE9TRS50ZXN0KHN1YnZhbHVlKSkge1xuICAgIHNlbGYuaW5MaW5rID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7dHlwZTogJ2h0bWwnLCB2YWx1ZTogc3VidmFsdWV9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9saW5rJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbGluaztcbmxpbmsubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgQ19CQUNLU0xBU0ggPSAnXFxcXCc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfUEFSRU5fT1BFTiA9ICcoJztcbnZhciBDX1BBUkVOX0NMT1NFID0gJyknO1xudmFyIENfTFQgPSAnPCc7XG52YXIgQ19HVCA9ICc+JztcbnZhciBDX1RJQ0sgPSAnYCc7XG52YXIgQ19ET1VCTEVfUVVPVEUgPSAnXCInO1xudmFyIENfU0lOR0xFX1FVT1RFID0gJ1xcJyc7XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzLCB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrIGxpbmtcbiAqIGFuZCBpbWFnZSB0aXRsZXMuICovXG52YXIgTElOS19NQVJLRVJTID0ge307XG5cbkxJTktfTUFSS0VSU1tDX0RPVUJMRV9RVU9URV0gPSBDX0RPVUJMRV9RVU9URTtcbkxJTktfTUFSS0VSU1tDX1NJTkdMRV9RVU9URV0gPSBDX1NJTkdMRV9RVU9URTtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmsgbGlua1xuICogYW5kIGltYWdlIHRpdGxlcyBpbiBjb21tb25tYXJrLW1vZGUuICovXG52YXIgQ09NTU9OTUFSS19MSU5LX01BUktFUlMgPSB7fTtcblxuQ09NTU9OTUFSS19MSU5LX01BUktFUlNbQ19ET1VCTEVfUVVPVEVdID0gQ19ET1VCTEVfUVVPVEU7XG5DT01NT05NQVJLX0xJTktfTUFSS0VSU1tDX1NJTkdMRV9RVU9URV0gPSBDX1NJTkdMRV9RVU9URTtcbkNPTU1PTk1BUktfTElOS19NQVJLRVJTW0NfUEFSRU5fT1BFTl0gPSBDX1BBUkVOX0NMT1NFO1xuXG5mdW5jdGlvbiBsaW5rKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KDApO1xuICB2YXIgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBnZm0gPSBzZWxmLm9wdGlvbnMuZ2ZtO1xuICB2YXIgY2xvc2VkO1xuICB2YXIgY291bnQ7XG4gIHZhciBvcGVuaW5nO1xuICB2YXIgYmVmb3JlVVJMO1xuICB2YXIgYmVmb3JlVGl0bGU7XG4gIHZhciBzdWJxdWV1ZTtcbiAgdmFyIGhhc01hcmtlcjtcbiAgdmFyIG1hcmtlcnM7XG4gIHZhciBpc0ltYWdlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHRpdGxlO1xuICB2YXIgZGVwdGg7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHVybDtcbiAgdmFyIG5vdztcbiAgdmFyIGV4aXQ7XG4gIHZhciBub2RlO1xuXG4gIC8qIERldGVjdCB3aGV0aGVyIHRoaXMgaXMgYW4gaW1hZ2UuICovXG4gIGlmIChjaGFyYWN0ZXIgPT09ICchJykge1xuICAgIGlzSW1hZ2UgPSB0cnVlO1xuICAgIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgfVxuXG4gIC8qIEVhdCB0aGUgb3BlbmluZy4gKi9cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gdGhpcyBpcyBhIGxpbmsgYW5kIHdl4oCZcmUgYWxyZWFkeSBpbnNpZGVcbiAgICogYSBsaW5rLiAqL1xuICBpZiAoIWlzSW1hZ2UgJiYgc2VsZi5pbkxpbmspIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIHF1ZXVlID0gJyc7XG4gIGluZGV4Kys7XG5cbiAgLyogRWF0IHRoZSBjb250ZW50LiAqL1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgZGVwdGggPSAwO1xuXG4gIG5vdy5jb2x1bW4gKz0gaW5kZXg7XG4gIG5vdy5vZmZzZXQgKz0gaW5kZXg7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICBzdWJxdWV1ZSA9IGNoYXJhY3RlcjtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVElDSykge1xuICAgICAgLyogSW5saW5lLWNvZGUgaW4gbGluayBjb250ZW50LiAqL1xuICAgICAgY291bnQgPSAxO1xuXG4gICAgICB3aGlsZSAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IENfVElDSykge1xuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3BlbmluZykge1xuICAgICAgICBvcGVuaW5nID0gY291bnQ7XG4gICAgICB9IGVsc2UgaWYgKGNvdW50ID49IG9wZW5pbmcpIHtcbiAgICAgICAgb3BlbmluZyA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAvKiBBbGxvdyBicmFja2V0cyB0byBiZSBlc2NhcGVkLiAqL1xuICAgICAgaW5kZXgrKztcbiAgICAgIHN1YnF1ZXVlICs9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgLyogSW4gR0ZNIG1vZGUsIGJyYWNrZXRzIGluIGNvZGUgc3RpbGwgY291bnQuXG4gICAgICogSW4gYWxsIG90aGVyIG1vZGVzLCB0aGV5IGRvbuKAmXQuICBUaGlzIGVtcHR5XG4gICAgICogYmxvY2sgcHJldmVudHMgdGhlIG5leHQgc3RhdGVtZW50cyBhcmVcbiAgICAgKiBlbnRlcmVkLiAqL1xuICAgIH0gZWxzZSBpZiAoKCFvcGVuaW5nIHx8IGdmbSkgJiYgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgICAgZGVwdGgrKztcbiAgICB9IGVsc2UgaWYgKCghb3BlbmluZyB8fCBnZm0pICYmIGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBpZiAoZGVwdGgpIHtcbiAgICAgICAgZGVwdGgtLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEFsbG93IHdoaXRlLXNwYWNlIGJldHdlZW4gY29udGVudCBhbmRcbiAgICAgICAgICogdXJsIGluIEdGTSBtb2RlLiAqL1xuICAgICAgICBpZiAoIXBlZGFudGljKSB7XG4gICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgICAgICAgICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBDX1BBUkVOX09QRU4pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBDX1BBUkVOX09QRU47XG4gICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgc3VicXVldWUgPSAnJztcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgLyogRWF0IHRoZSBjb250ZW50IGNsb3NpbmcuICovXG4gIGlmICghY2xvc2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29udGVudCA9IHF1ZXVlO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIHN1YnF1ZXVlO1xuICBpbmRleCsrO1xuXG4gIC8qIEVhdCB3aGl0ZS1zcGFjZS4gKi9cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICghd2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIC8qIEVhdCB0aGUgVVJMLiAqL1xuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICBtYXJrZXJzID0gY29tbW9ubWFyayA/IENPTU1PTk1BUktfTElOS19NQVJLRVJTIDogTElOS19NQVJLRVJTO1xuICBxdWV1ZSA9ICcnO1xuICBiZWZvcmVVUkwgPSBzdWJ2YWx1ZTtcblxuICBpZiAoY2hhcmFjdGVyID09PSBDX0xUKSB7XG4gICAgaW5kZXgrKztcbiAgICBiZWZvcmVVUkwgKz0gQ19MVDtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19HVCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbW1vbm1hcmsgJiYgY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfR1QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBDX0xUICsgcXVldWUgKyBDX0dUO1xuICAgIHVybCA9IHF1ZXVlO1xuICAgIGluZGV4Kys7XG4gIH0gZWxzZSB7XG4gICAgY2hhcmFjdGVyID0gbnVsbDtcbiAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoc3VicXVldWUgJiYgb3duLmNhbGwobWFya2VycywgY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgICBpZiAoIXBlZGFudGljKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX09QRU4pIHtcbiAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9DTE9TRSkge1xuICAgICAgICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlICs9IHN1YnF1ZXVlO1xuICAgICAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAgICAgcXVldWUgKz0gQ19CQUNLU0xBU0g7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgfVxuXG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgIHVybCA9IHF1ZXVlO1xuICAgIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICB9XG5cbiAgLyogRWF0IHdoaXRlLXNwYWNlLiAqL1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZTtcblxuICAvKiBFYXQgdGhlIHRpdGxlLiAqL1xuICBpZiAocXVldWUgJiYgb3duLmNhbGwobWFya2VycywgY2hhcmFjdGVyKSkge1xuICAgIGluZGV4Kys7XG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIHF1ZXVlID0gJyc7XG4gICAgbWFya2VyID0gbWFya2Vyc1tjaGFyYWN0ZXJdO1xuICAgIGJlZm9yZVRpdGxlID0gc3VidmFsdWU7XG5cbiAgICAvKiBJbiBjb21tb25tYXJrLW1vZGUsIHRoaW5ncyBhcmUgcHJldHR5IGVhc3k6IHRoZVxuICAgICAqIG1hcmtlciBjYW5ub3Qgb2NjdXIgaW5zaWRlIHRoZSB0aXRsZS5cbiAgICAgKlxuICAgICAqIE5vbi1jb21tb25tYXJrIGRvZXMsIGhvd2V2ZXIsIHN1cHBvcnQgbmVzdGVkXG4gICAgICogZGVsaW1pdGVycy4gKi9cbiAgICBpZiAoY29tbW9ubWFyaykge1xuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgICAgIHF1ZXVlICs9IENfQkFDS1NMQVNIO1xuICAgICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIH1cblxuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGl0bGUgPSBxdWV1ZTtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VicXVldWUgPSAnJztcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgaWYgKGhhc01hcmtlcikge1xuICAgICAgICAgICAgcXVldWUgKz0gbWFya2VyICsgc3VicXVldWU7XG4gICAgICAgICAgICBzdWJxdWV1ZSA9ICcnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGhhc01hcmtlciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIWhhc01hcmtlcikge1xuICAgICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fQ0xPU0UpIHtcbiAgICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZSArIG1hcmtlciArIHN1YnF1ZXVlO1xuICAgICAgICAgIHRpdGxlID0gcXVldWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHF1ZXVlICs9IG1hcmtlciArIHN1YnF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgICAgIHN1YnF1ZXVlID0gJyc7XG4gICAgICAgICAgaGFzTWFya2VyID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX1BBUkVOX0NMT1NFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBDX1BBUkVOX0NMT1NFO1xuXG4gIHVybCA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKHVybCksIGVhdChiZWZvcmVVUkwpLnRlc3QoKS5lbmQsIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pO1xuXG4gIGlmICh0aXRsZSkge1xuICAgIGJlZm9yZVRpdGxlID0gZWF0KGJlZm9yZVRpdGxlKS50ZXN0KCkuZW5kO1xuICAgIHRpdGxlID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodGl0bGUpLCBiZWZvcmVUaXRsZSk7XG4gIH1cblxuICBub2RlID0ge1xuICAgIHR5cGU6IGlzSW1hZ2UgPyAnaW1hZ2UnIDogJ2xpbmsnLFxuICAgIHRpdGxlOiB0aXRsZSB8fCBudWxsLFxuICAgIHVybDogdXJsXG4gIH07XG5cbiAgaWYgKGlzSW1hZ2UpIHtcbiAgICBub2RlLmFsdCA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKGNvbnRlbnQpLCBub3cpIHx8IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgZXhpdCA9IHNlbGYuZW50ZXJMaW5rKCk7XG4gICAgbm9kZS5jaGlsZHJlbiA9IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgbm93KTtcbiAgICBleGl0KCk7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKShub2RlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9saW5rJyk7XG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vdXRpbC9ub3JtYWxpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWZlcmVuY2U7XG5yZWZlcmVuY2UubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIFRfTElOSyA9ICdsaW5rJztcbnZhciBUX0lNQUdFID0gJ2ltYWdlJztcbnZhciBUX0ZPT1ROT1RFID0gJ2Zvb3Rub3RlJztcbnZhciBSRUZFUkVOQ0VfVFlQRV9TSE9SVENVVCA9ICdzaG9ydGN1dCc7XG52YXIgUkVGRVJFTkNFX1RZUEVfQ09MTEFQU0VEID0gJ2NvbGxhcHNlZCc7XG52YXIgUkVGRVJFTkNFX1RZUEVfRlVMTCA9ICdmdWxsJztcbnZhciBDX0NBUkVUID0gJ14nO1xudmFyIENfQkFDS1NMQVNIID0gJ1xcXFwnO1xudmFyIENfQlJBQ0tFVF9PUEVOID0gJ1snO1xudmFyIENfQlJBQ0tFVF9DTE9TRSA9ICddJztcblxuZnVuY3Rpb24gcmVmZXJlbmNlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMCk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgaW50cm8gPSAnJztcbiAgdmFyIHR5cGUgPSBUX0xJTks7XG4gIHZhciByZWZlcmVuY2VUeXBlID0gUkVGRVJFTkNFX1RZUEVfU0hPUlRDVVQ7XG4gIHZhciBjb250ZW50O1xuICB2YXIgaWRlbnRpZmllcjtcbiAgdmFyIG5vdztcbiAgdmFyIG5vZGU7XG4gIHZhciBleGl0O1xuICB2YXIgcXVldWU7XG4gIHZhciBicmFja2V0ZWQ7XG4gIHZhciBkZXB0aDtcblxuICAvKiBDaGVjayB3aGV0aGVyIHdl4oCZcmUgZWF0aW5nIGFuIGltYWdlLiAqL1xuICBpZiAoY2hhcmFjdGVyID09PSAnIScpIHtcbiAgICB0eXBlID0gVF9JTUFHRTtcbiAgICBpbnRybyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gIH1cblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfT1BFTikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIGludHJvICs9IGNoYXJhY3RlcjtcbiAgcXVldWUgPSAnJztcblxuICAvKiBDaGVjayB3aGV0aGVyIHdl4oCZcmUgZWF0aW5nIGEgZm9vdG5vdGUuICovXG4gIGlmIChzZWxmLm9wdGlvbnMuZm9vdG5vdGVzICYmIHZhbHVlLmNoYXJBdChpbmRleCkgPT09IENfQ0FSRVQpIHtcbiAgICAvKiBFeGl0IGlmIGAhW15gIGlzIGZvdW5kLCBzbyB0aGUgYCFgIHdpbGwgYmUgc2VlbiBhcyB0ZXh0IGFmdGVyIHRoaXMsXG4gICAgICogYW5kIHdl4oCZbGwgZW50ZXIgdGhpcyBmdW5jdGlvbiBhZ2FpbiB3aGVuIGBbXmAgaXMgZm91bmQuICovXG4gICAgaWYgKHR5cGUgPT09IFRfSU1BR0UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRybyArPSBDX0NBUkVUO1xuICAgIGluZGV4Kys7XG4gICAgdHlwZSA9IFRfRk9PVE5PVEU7XG4gIH1cblxuICAvKiBFYXQgdGhlIHRleHQuICovXG4gIGRlcHRoID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICAgIGJyYWNrZXRlZCA9IHRydWU7XG4gICAgICBkZXB0aCsrO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGlmICghZGVwdGgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRlcHRoLS07XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgIHF1ZXVlICs9IENfQkFDS1NMQVNIO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgc3VidmFsdWUgPSBxdWV1ZTtcbiAgY29udGVudCA9IHF1ZXVlO1xuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9DTE9TRSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAvKiBJbmxpbmUgZm9vdG5vdGVzIGNhbm5vdCBoYXZlIGFuIGlkZW50aWZpZXIuICovXG4gIGlmICh0eXBlICE9PSBUX0ZPT1ROT1RFICYmIGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICBpZGVudGlmaWVyID0gJyc7XG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9PUEVOIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgICBpZGVudGlmaWVyICs9IENfQkFDS1NMQVNIO1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGlkZW50aWZpZXIgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICByZWZlcmVuY2VUeXBlID0gaWRlbnRpZmllciA/IFJFRkVSRU5DRV9UWVBFX0ZVTEwgOiBSRUZFUkVOQ0VfVFlQRV9DT0xMQVBTRUQ7XG4gICAgICBxdWV1ZSArPSBpZGVudGlmaWVyICsgY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9IGVsc2Uge1xuICAgICAgaWRlbnRpZmllciA9ICcnO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgIHF1ZXVlID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWRlbnRpZmllciA9IGNvbnRlbnQ7XG4gIH1cblxuICAvKiBCcmFja2V0cyBjYW5ub3QgYmUgaW5zaWRlIHRoZSBpZGVudGlmaWVyLiAqL1xuICBpZiAocmVmZXJlbmNlVHlwZSAhPT0gUkVGRVJFTkNFX1RZUEVfRlVMTCAmJiBicmFja2V0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSA9IGludHJvICsgc3VidmFsdWU7XG5cbiAgaWYgKHR5cGUgPT09IFRfTElOSyAmJiBzZWxmLmluTGluaykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gVF9GT09UTk9URSAmJiBjb250ZW50LmluZGV4T2YoJyAnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgICB0eXBlOiAnZm9vdG5vdGUnLFxuICAgICAgY2hpbGRyZW46IHRoaXMudG9rZW5pemVJbmxpbmUoY29udGVudCwgZWF0Lm5vdygpKVxuICAgIH0pO1xuICB9XG5cbiAgbm93ID0gZWF0Lm5vdygpO1xuICBub3cuY29sdW1uICs9IGludHJvLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBpbnRyby5sZW5ndGg7XG4gIGlkZW50aWZpZXIgPSByZWZlcmVuY2VUeXBlID09PSBSRUZFUkVOQ0VfVFlQRV9GVUxMID8gaWRlbnRpZmllciA6IGNvbnRlbnQ7XG5cbiAgbm9kZSA9IHtcbiAgICB0eXBlOiB0eXBlICsgJ1JlZmVyZW5jZScsXG4gICAgaWRlbnRpZmllcjogbm9ybWFsaXplKGlkZW50aWZpZXIpXG4gIH07XG5cbiAgaWYgKHR5cGUgPT09IFRfTElOSyB8fCB0eXBlID09PSBUX0lNQUdFKSB7XG4gICAgbm9kZS5yZWZlcmVuY2VUeXBlID0gcmVmZXJlbmNlVHlwZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSBUX0xJTkspIHtcbiAgICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcbiAgICBub2RlLmNoaWxkcmVuID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBub3cpO1xuICAgIGV4aXQoKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBUX0lNQUdFKSB7XG4gICAgbm9kZS5hbHQgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZShjb250ZW50KSwgbm93KSB8fCBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkobm9kZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9zdHJvbmcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJvbmc7XG5zdHJvbmcubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIENfQVNURVJJU0sgPSAnKic7XG52YXIgQ19VTkRFUlNDT1JFID0gJ18nO1xuXG5mdW5jdGlvbiBzdHJvbmcoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHZhciBub3c7XG4gIHZhciBwZWRhbnRpYztcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBwcmV2O1xuXG4gIGlmIChcbiAgICAoY2hhcmFjdGVyICE9PSBDX0FTVEVSSVNLICYmIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFKSB8fFxuICAgIHZhbHVlLmNoYXJBdCgrK2luZGV4KSAhPT0gY2hhcmFjdGVyXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBlZGFudGljID0gc2VsZi5vcHRpb25zLnBlZGFudGljO1xuICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gIHN1YnZhbHVlID0gbWFya2VyICsgbWFya2VyO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIGluZGV4Kys7XG4gIHF1ZXVlID0gJyc7XG4gIGNoYXJhY3RlciA9ICcnO1xuXG4gIGlmIChwZWRhbnRpYyAmJiB3aGl0ZXNwYWNlKHZhbHVlLmNoYXJBdChpbmRleCkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgcHJldiA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBtYXJrZXIgJiZcbiAgICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBtYXJrZXIgJiZcbiAgICAgICghcGVkYW50aWMgfHwgIXdoaXRlc3BhY2UocHJldikpXG4gICAgKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAyKTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIGlmICghdHJpbShxdWV1ZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdyA9IGVhdC5ub3coKTtcbiAgICAgICAgbm93LmNvbHVtbiArPSAyO1xuICAgICAgICBub3cub2Zmc2V0ICs9IDI7XG5cbiAgICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSArIHF1ZXVlICsgc3VidmFsdWUpKHtcbiAgICAgICAgICB0eXBlOiAnc3Ryb25nJyxcbiAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShxdWV1ZSwgbm93KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBlZGFudGljICYmIGNoYXJhY3RlciA9PT0gJ1xcXFwnKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBhc3RlcmlzayA9IHZhbHVlLmluZGV4T2YoJyoqJywgZnJvbUluZGV4KTtcbiAgdmFyIHVuZGVyc2NvcmUgPSB2YWx1ZS5pbmRleE9mKCdfXycsIGZyb21JbmRleCk7XG5cbiAgaWYgKHVuZGVyc2NvcmUgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFzdGVyaXNrO1xuICB9XG5cbiAgaWYgKGFzdGVyaXNrID09PSAtMSkge1xuICAgIHJldHVybiB1bmRlcnNjb3JlO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVyc2NvcmUgPCBhc3RlcmlzayA/IHVuZGVyc2NvcmUgOiBhc3Rlcmlzaztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG52YXIgd29yZCA9IHJlcXVpcmUoJ2lzLXdvcmQtY2hhcmFjdGVyJyk7XG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2VtcGhhc2lzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW1waGFzaXM7XG5lbXBoYXNpcy5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgQ19BU1RFUklTSyA9ICcqJztcbnZhciBDX1VOREVSU0NPUkUgPSAnXyc7XG5cbmZ1bmN0aW9uIGVtcGhhc2lzKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICB2YXIgbm93O1xuICB2YXIgcGVkYW50aWM7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgcHJldjtcblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX0FTVEVSSVNLICYmIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWM7XG4gIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgaW5kZXgrKztcbiAgcXVldWUgPSAnJztcbiAgY2hhcmFjdGVyID0gJyc7XG5cbiAgaWYgKHBlZGFudGljICYmIHdoaXRlc3BhY2UodmFsdWUuY2hhckF0KGluZGV4KSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBwcmV2ID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIgJiYgKCFwZWRhbnRpYyB8fCAhd2hpdGVzcGFjZShwcmV2KSkpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIGlmICghdHJpbShxdWV1ZSkgfHwgcHJldiA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwZWRhbnRpYyAmJiBtYXJrZXIgPT09IENfVU5ERVJTQ09SRSAmJiB3b3JkKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICBxdWV1ZSArPSBtYXJrZXI7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdyA9IGVhdC5ub3coKTtcbiAgICAgICAgbm93LmNvbHVtbisrO1xuICAgICAgICBub3cub2Zmc2V0Kys7XG5cbiAgICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSArIHF1ZXVlICsgbWFya2VyKSh7XG4gICAgICAgICAgdHlwZTogJ2VtcGhhc2lzJyxcbiAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShxdWV1ZSwgbm93KVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gbWFya2VyO1xuICAgIH1cblxuICAgIGlmICghcGVkYW50aWMgJiYgY2hhcmFjdGVyID09PSAnXFxcXCcpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gd29yZENoYXJhY3RlclxuXG52YXIgZnJvbUNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG52YXIgcmUgPSAvXFx3L1xuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYSB3b3JkIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHdvcmRDaGFyYWN0ZXIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiByZS50ZXN0KFxuICAgIHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdudW1iZXInID8gZnJvbUNvZGUoY2hhcmFjdGVyKSA6IGNoYXJhY3Rlci5jaGFyQXQoMClcbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGFzdGVyaXNrID0gdmFsdWUuaW5kZXhPZignKicsIGZyb21JbmRleCk7XG4gIHZhciB1bmRlcnNjb3JlID0gdmFsdWUuaW5kZXhPZignXycsIGZyb21JbmRleCk7XG5cbiAgaWYgKHVuZGVyc2NvcmUgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFzdGVyaXNrO1xuICB9XG5cbiAgaWYgKGFzdGVyaXNrID09PSAtMSkge1xuICAgIHJldHVybiB1bmRlcnNjb3JlO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVyc2NvcmUgPCBhc3RlcmlzayA/IHVuZGVyc2NvcmUgOiBhc3Rlcmlzaztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9kZWxldGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpa2V0aHJvdWdoO1xuc3RyaWtldGhyb3VnaC5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgQ19USUxERSA9ICd+JztcbnZhciBET1VCTEUgPSAnfn4nO1xuXG5mdW5jdGlvbiBzdHJpa2V0aHJvdWdoKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjaGFyYWN0ZXIgPSAnJztcbiAgdmFyIHByZXZpb3VzID0gJyc7XG4gIHZhciBwcmVjZWRpbmcgPSAnJztcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBpbmRleDtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIG5vdztcblxuICBpZiAoXG4gICAgIXNlbGYub3B0aW9ucy5nZm0gfHxcbiAgICB2YWx1ZS5jaGFyQXQoMCkgIT09IENfVElMREUgfHxcbiAgICB2YWx1ZS5jaGFyQXQoMSkgIT09IENfVElMREUgfHxcbiAgICB3aGl0ZXNwYWNlKHZhbHVlLmNoYXJBdCgyKSlcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSAxO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgbm93LmNvbHVtbiArPSAyO1xuICBub3cub2Zmc2V0ICs9IDI7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBDX1RJTERFICYmXG4gICAgICBwcmV2aW91cyA9PT0gQ19USUxERSAmJlxuICAgICAgKCFwcmVjZWRpbmcgfHwgIXdoaXRlc3BhY2UocHJlY2VkaW5nKSlcbiAgICApIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlYXQoRE9VQkxFICsgc3VidmFsdWUgKyBET1VCTEUpKHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKHN1YnZhbHVlLCBub3cpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBwcmV2aW91cztcbiAgICBwcmVjZWRpbmcgPSBwcmV2aW91cztcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ35+JywgZnJvbUluZGV4KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9jb2RlLWlubGluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlubGluZUNvZGU7XG5pbmxpbmVDb2RlLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBDX1RJQ0sgPSAnYCc7XG5cbi8qIFRva2VuaXNlIGlubGluZSBjb2RlLiAqL1xuZnVuY3Rpb24gaW5saW5lQ29kZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHF1ZXVlID0gJyc7XG4gIHZhciB0aWNrUXVldWUgPSAnJztcbiAgdmFyIGNvbnRlbnRRdWV1ZTtcbiAgdmFyIHN1YnF1ZXVlO1xuICB2YXIgY291bnQ7XG4gIHZhciBvcGVuaW5nQ291bnQ7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGZvdW5kO1xuICB2YXIgbmV4dDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19USUNLKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBDX1RJQ0s7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghcXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHF1ZXVlO1xuICBvcGVuaW5nQ291bnQgPSBpbmRleDtcbiAgcXVldWUgPSAnJztcbiAgbmV4dCA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIGNvdW50ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSBuZXh0O1xuICAgIG5leHQgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVElDSykge1xuICAgICAgY291bnQrKztcbiAgICAgIHRpY2tRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBpZiAoY291bnQgJiYgbmV4dCAhPT0gQ19USUNLKSB7XG4gICAgICBpZiAoY291bnQgPT09IG9wZW5pbmdDb3VudCkge1xuICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZSArIHRpY2tRdWV1ZTtcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gdGlja1F1ZXVlO1xuICAgICAgdGlja1F1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghZm91bmQpIHtcbiAgICBpZiAob3BlbmluZ0NvdW50ICUgMiAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHF1ZXVlID0gJyc7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnRlbnRRdWV1ZSA9ICcnO1xuICBzdWJxdWV1ZSA9ICcnO1xuICBsZW5ndGggPSBxdWV1ZS5sZW5ndGg7XG4gIGluZGV4ID0gLTE7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSBxdWV1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN1YnF1ZXVlKSB7XG4gICAgICBpZiAoY29udGVudFF1ZXVlKSB7XG4gICAgICAgIGNvbnRlbnRRdWV1ZSArPSBzdWJxdWV1ZTtcbiAgICAgIH1cblxuICAgICAgc3VicXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBjb250ZW50UXVldWUgKz0gY2hhcmFjdGVyO1xuICB9XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgIHR5cGU6ICdpbmxpbmVDb2RlJyxcbiAgICB2YWx1ZTogY29udGVudFF1ZXVlXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ2AnLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2JyZWFrJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaGFyZEJyZWFrO1xuaGFyZEJyZWFrLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBNSU5fQlJFQUtfTEVOR1RIID0gMjtcblxuZnVuY3Rpb24gaGFyZEJyZWFrKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIHF1ZXVlID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgIGlmIChpbmRleCA8IE1JTl9CUkVBS19MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICBpZiAoc2lsZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG5cbiAgICAgIHJldHVybiBlYXQocXVldWUpKHt0eXBlOiAnYnJlYWsnfSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gJyAnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nLCBmcm9tSW5kZXgpO1xuXG4gIHdoaWxlIChpbmRleCA+IGZyb21JbmRleCkge1xuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXggLSAxKSAhPT0gJyAnKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbmRleC0tO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRleHQ7XG5cbmZ1bmN0aW9uIHRleHQoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG1ldGhvZHM7XG4gIHZhciB0b2tlbml6ZXJzO1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIHBvc2l0aW9uO1xuICB2YXIgdG9rZW5pemVyO1xuICB2YXIgbmFtZTtcbiAgdmFyIG1pbjtcbiAgdmFyIG5vdztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG1ldGhvZHMgPSBzZWxmLmlubGluZU1ldGhvZHM7XG4gIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICB0b2tlbml6ZXJzID0gc2VsZi5pbmxpbmVUb2tlbml6ZXJzO1xuICBpbmRleCA9IC0xO1xuICBtaW4gPSB2YWx1ZS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBuYW1lID0gbWV0aG9kc1tpbmRleF07XG5cbiAgICBpZiAobmFtZSA9PT0gJ3RleHQnIHx8ICF0b2tlbml6ZXJzW25hbWVdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB0b2tlbml6ZXIgPSB0b2tlbml6ZXJzW25hbWVdLmxvY2F0b3I7XG5cbiAgICBpZiAoIXRva2VuaXplcikge1xuICAgICAgZWF0LmZpbGUuZmFpbCgnTWlzc2luZyBsb2NhdG9yOiBgJyArIG5hbWUgKyAnYCcpO1xuICAgIH1cblxuICAgIHBvc2l0aW9uID0gdG9rZW5pemVyLmNhbGwoc2VsZiwgdmFsdWUsIDEpO1xuXG4gICAgaWYgKHBvc2l0aW9uICE9PSAtMSAmJiBwb3NpdGlvbiA8IG1pbikge1xuICAgICAgbWluID0gcG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBtaW4pO1xuICBub3cgPSBlYXQubm93KCk7XG5cbiAgc2VsZi5kZWNvZGUoc3VidmFsdWUsIG5vdywgZnVuY3Rpb24gKGNvbnRlbnQsIHBvc2l0aW9uLCBzb3VyY2UpIHtcbiAgICBlYXQoc291cmNlIHx8IGNvbnRlbnQpKHtcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiBjb250ZW50XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJ2YXIgdmlzaXRXaXRoUGFyZW50cyA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cycpO1xuXG5mdW5jdGlvbiBhZGRMaXN0TWV0YWRhdGEoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYXN0KSB7XG4gICAgdmlzaXRXaXRoUGFyZW50cyhhc3QsICdsaXN0JywgZnVuY3Rpb24gKGxpc3ROb2RlLCBwYXJlbnRzKSB7XG4gICAgICB2YXIgZGVwdGggPSAwLCBpLCBuO1xuICAgICAgZm9yIChpID0gMCwgbiA9IHBhcmVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJlbnRzW2ldLnR5cGUgPT09ICdsaXN0JykgZGVwdGggKz0gMTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDAsIG4gPSBsaXN0Tm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbGlzdE5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgIGNoaWxkLmluZGV4ID0gaTtcbiAgICAgICAgY2hpbGQub3JkZXJlZCA9IGxpc3ROb2RlLm9yZGVyZWQ7XG4gICAgICB9XG4gICAgICBsaXN0Tm9kZS5kZXB0aCA9IGRlcHRoO1xuICAgIH0pO1xuICAgIHJldHVybiBhc3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRkTGlzdE1ldGFkYXRhO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbi8qIEV4cG9zZS4gKi9cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRQYXJlbnRzXG5cbi8qIFZpc2l0LiAqL1xuZnVuY3Rpb24gdmlzaXRQYXJlbnRzKHRyZWUsIHR5cGUsIHZpc2l0b3IpIHtcbiAgdmFyIHN0YWNrID0gW11cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2aXNpdG9yID0gdHlwZVxuICAgIHR5cGUgPSBudWxsXG4gIH1cblxuICBvbmUodHJlZSlcblxuICAvKiBWaXNpdCBhIHNpbmdsZSBub2RlLiAqL1xuICBmdW5jdGlvbiBvbmUobm9kZSkge1xuICAgIHZhciByZXN1bHRcblxuICAgIGlmICghdHlwZSB8fCBub2RlLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgIHJlc3VsdCA9IHZpc2l0b3Iobm9kZSwgc3RhY2suY29uY2F0KCkpXG4gICAgfVxuXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgcmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGFsbChub2RlLmNoaWxkcmVuLCBub2RlKVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qIFZpc2l0IGNoaWxkcmVuIGluIGBwYXJlbnRgLiAqL1xuICBmdW5jdGlvbiBhbGwoY2hpbGRyZW4sIHBhcmVudCkge1xuICAgIHZhciBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBjaGlsZFxuXG4gICAgc3RhY2sucHVzaChwYXJlbnQpXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpbmRleF1cblxuICAgICAgaWYgKGNoaWxkICYmIG9uZShjaGlsZCkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIHN0YWNrLnBvcCgpXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBOYWl2ZSwgc2ltcGxlIHBsdWdpbiB0byBtYXRjaCBpbmxpbmUgbm9kZXMgd2l0aG91dCBhdHRyaWJ1dGVzXG4gKiBUaGlzIGFsbG93cyBzYXkgPHN0cm9uZz5mb288L3N0cm9uZz4sIGJ1dCBub3QgPHN0cm9uZyBjbGFzcz1cInZlcnlcIj5mb288L3N0cm9uZz5cbiAqIEZvciBwcm9wZXIgSFRNTCBzdXBwb3J0LCB5b3UnbGwgd2FudCBhIGRpZmZlcmVudCBwbHVnaW5cbiAqKi9cbnZhciB2aXNpdCA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQnKTtcblxudmFyIHR5cGUgPSAndmlydHVhbEh0bWwnO1xudmFyIHNlbGZDbG9zaW5nUmUgPSAvXjwoYXJlYXxiYXNlfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8a2V5Z2VufGxpbmt8bWV0YXxwYXJhbXxzb3VyY2V8dHJhY2t8d2JyKVxccypcXC8/PiQvaTtcbnZhciBzaW1wbGVUYWdSZSA9IC9ePChcXC8/KShbYS16XSspXFxzKj4kLztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodHJlZSkge1xuICB2YXIgb3BlbjtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZpc2l0KHRyZWUsICdodG1sJywgZnVuY3Rpb24gKG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAoY3VycmVudFBhcmVudCAhPT0gcGFyZW50KSB7XG4gICAgICBvcGVuID0gW107XG4gICAgICBjdXJyZW50UGFyZW50ID0gcGFyZW50O1xuICAgIH1cblxuICAgIHZhciBzZWxmQ2xvc2luZyA9IGdldFNlbGZDbG9zaW5nKG5vZGUpO1xuXG4gICAgaWYgKHNlbGZDbG9zaW5nKSB7XG4gICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHRhZzogc2VsZkNsb3NpbmcsXG4gICAgICAgIHBvc2l0aW9uOiBub2RlLnBvc2l0aW9uXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50ID0gZ2V0U2ltcGxlVGFnKG5vZGUsIHBhcmVudCk7XG5cbiAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGluZyA9IGZpbmRBbmRQdWxsKG9wZW4sIGN1cnJlbnQudGFnKTtcblxuICAgIGlmIChtYXRjaGluZykge1xuICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgdmlydHVhbChjdXJyZW50LCBtYXRjaGluZywgcGFyZW50KSk7XG4gICAgfSBlbHNlIGlmICghY3VycmVudC5vcGVuaW5nKSB7XG4gICAgICBvcGVuLnB1c2goY3VycmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIHRydWUgLy8gSXRlcmF0ZSBpbiByZXZlcnNlXG4gICk7XG4gIHJldHVybiB0cmVlO1xufTtcblxuZnVuY3Rpb24gZmluZEFuZFB1bGwob3BlbiwgbWF0Y2hpbmdUYWcpIHtcbiAgdmFyIGkgPSBvcGVuLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKG9wZW5baV0udGFnID09PSBtYXRjaGluZ1RhZykge1xuICAgICAgcmV0dXJuIG9wZW4uc3BsaWNlKGksIDEpWzBdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0U2ltcGxlVGFnKG5vZGUsIHBhcmVudCkge1xuICB2YXIgbWF0Y2ggPSBub2RlLnZhbHVlLm1hdGNoKHNpbXBsZVRhZ1JlKTtcbiAgcmV0dXJuIG1hdGNoID8ge1xuICAgIHRhZzogbWF0Y2hbMl0sXG4gICAgb3BlbmluZzogIW1hdGNoWzFdLFxuICAgIG5vZGU6IG5vZGVcbiAgfSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxmQ2xvc2luZyhub2RlKSB7XG4gIHZhciBtYXRjaCA9IG5vZGUudmFsdWUubWF0Y2goc2VsZkNsb3NpbmdSZSk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHZpcnR1YWwoZnJvbU5vZGUsIHRvTm9kZSwgcGFyZW50KSB7XG4gIHZhciBmcm9tSW5kZXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihmcm9tTm9kZS5ub2RlKTtcbiAgdmFyIHRvSW5kZXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0b05vZGUubm9kZSk7XG4gIHZhciBleHRyYWN0ZWQgPSBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGZyb21JbmRleCwgdG9JbmRleCAtIGZyb21JbmRleCArIDEpO1xuICB2YXIgY2hpbGRyZW4gPSBleHRyYWN0ZWQuc2xpY2UoMSwgLTEpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHRhZzogZnJvbU5vZGUudGFnLFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICBzdGFydDogZnJvbU5vZGUubm9kZS5wb3NpdGlvbi5zdGFydCxcbiAgICAgIGVuZDogdG9Ob2RlLm5vZGUucG9zaXRpb24uZW5kLFxuICAgICAgaW5kZW50OiBbXVxuICAgIH1cbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpO1xuXG5leHBvcnRzLm9mVHlwZSA9IGZ1bmN0aW9uICh0eXBlcywgbW9kZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gdmlzaXQobm9kZSwgdHlwZSwgZGlzYWxsb3csIHRydWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRpc2FsbG93KG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB1bnRhbmdsZShub2RlLCBpbmRleCwgcGFyZW50LCBtb2RlKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMuaWZOb3RNYXRjaCA9IGZ1bmN0aW9uIChhbGxvd05vZGUsIG1vZGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmlzaXQobm9kZSwgZGlzYWxsb3csIHRydWUpO1xuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRpc2FsbG93KG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50ICYmICFhbGxvd05vZGUobm9kZSwgaW5kZXgsIHBhcmVudCkpIHtcbiAgICAgIHVudGFuZ2xlKG5vZGUsIGluZGV4LCBwYXJlbnQsIG1vZGUpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gdW50YW5nbGUobm9kZSwgaW5kZXgsIHBhcmVudCwgbW9kZSkge1xuICBpZiAobW9kZSA9PT0gJ3JlbW92ZScpIHtcbiAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgfSBlbHNlIGlmIChtb2RlID09PSAndW53cmFwJykge1xuICAgIHZhciBhcmdzID0gW2luZGV4LCAxXTtcblxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQobm9kZS5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShwYXJlbnQuY2hpbGRyZW4sIGFyZ3MpO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xuXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbnZhciBkZWZhdWx0Tm9kZVBvc2l0aW9uID0ge1xuICBzdGFydDoge1xuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAxLFxuICAgIG9mZnNldDogMFxuICB9LFxuICBlbmQ6IHtcbiAgICBsaW5lOiAxLFxuICAgIGNvbHVtbjogMSxcbiAgICBvZmZzZXQ6IDBcbiAgfVxufTtcblxuZnVuY3Rpb24gYXN0VG9SZWFjdChub2RlLCBvcHRpb25zKSB7XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gIHZhciByZW5kZXJlciA9IG9wdGlvbnMucmVuZGVyZXJzW25vZGUudHlwZV07IC8vIG5vZGVzIGdlbmVyYXRlZCBieSBwbHVnaW5zIG1heSBub3QgaGF2ZSBwb3NpdGlvbiBkYXRhXG4gIC8vIG11Y2ggb2YgdGhlIGNvZGUgYWZ0ZXIgdGhpcyBwb2ludCB3aWxsIGF0dGVtcHQgdG8gYWNjZXNzIHByb3BlcnRpZXMgb2YgdGhlIG5vZGUucG9zaXRpb25cbiAgLy8gdGhpcyB3aWxsIHNldCB0aGUgbm9kZSBwb3NpdGlvbiB0byB0aGUgcGFyZW50IG5vZGUncyBwb3NpdGlvbiB0byBwcmV2ZW50IGVycm9yc1xuXG4gIGlmIChub2RlLnBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBub2RlLnBvc2l0aW9uID0gcGFyZW50Lm5vZGUgJiYgcGFyZW50Lm5vZGUucG9zaXRpb24gfHwgZGVmYXVsdE5vZGVQb3NpdGlvbjtcbiAgfVxuXG4gIHZhciBwb3MgPSBub2RlLnBvc2l0aW9uLnN0YXJ0O1xuICB2YXIga2V5ID0gW25vZGUudHlwZSwgcG9zLmxpbmUsIHBvcy5jb2x1bW4sIGluZGV4XS5qb2luKCctJyk7XG5cbiAgaWYgKCFSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShyZW5kZXJlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZW5kZXJlciBmb3IgdHlwZSBgXCIuY29uY2F0KG5vZGUudHlwZSwgXCJgIG5vdCBkZWZpbmVkIG9yIGlzIG5vdCByZW5kZXJhYmxlXCIpKTtcbiAgfVxuXG4gIHZhciBub2RlUHJvcHMgPSBnZXROb2RlUHJvcHMobm9kZSwga2V5LCBvcHRpb25zLCByZW5kZXJlciwgcGFyZW50LCBpbmRleCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHJlbmRlcmVyLCBub2RlUHJvcHMsIG5vZGVQcm9wcy5jaGlsZHJlbiB8fCByZXNvbHZlQ2hpbGRyZW4oKSB8fCB1bmRlZmluZWQpO1xuXG4gIGZ1bmN0aW9uIHJlc29sdmVDaGlsZHJlbigpIHtcbiAgICByZXR1cm4gbm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGROb2RlLCBpKSB7XG4gICAgICByZXR1cm4gYXN0VG9SZWFjdChjaGlsZE5vZGUsIG9wdGlvbnMsIHtcbiAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgcHJvcHM6IG5vZGVQcm9wc1xuICAgICAgfSwgaSk7XG4gICAgfSk7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXMsIGNvbXBsZXhpdHlcblxuXG5mdW5jdGlvbiBnZXROb2RlUHJvcHMobm9kZSwga2V5LCBvcHRzLCByZW5kZXJlciwgcGFyZW50LCBpbmRleCkge1xuICB2YXIgcHJvcHMgPSB7XG4gICAga2V5OiBrZXlcbiAgfTtcbiAgdmFyIGlzVGFnUmVuZGVyZXIgPSB0eXBlb2YgcmVuZGVyZXIgPT09ICdzdHJpbmcnOyAvLyBgc291cmNlUG9zYCBpcyB0cnVlIGlmIHRoZSB1c2VyIHdhbnRzIHNvdXJjZSBpbmZvcm1hdGlvbiAobGluZS9jb2x1bW4gaW5mbyBmcm9tIG1hcmtkb3duIHNvdXJjZSlcblxuICBpZiAob3B0cy5zb3VyY2VQb3MgJiYgbm9kZS5wb3NpdGlvbikge1xuICAgIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID0gZmxhdHRlblBvc2l0aW9uKG5vZGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKG9wdHMucmF3U291cmNlUG9zICYmICFpc1RhZ1JlbmRlcmVyKSB7XG4gICAgcHJvcHMuc291cmNlUG9zaXRpb24gPSBub2RlLnBvc2l0aW9uO1xuICB9IC8vIElmIGBpbmNsdWRlTm9kZUluZGV4YCBpcyB0cnVlLCBwYXNzIG5vZGUgaW5kZXggaW5mbyB0byBhbGwgbm9uLXRhZyByZW5kZXJlcnNcblxuXG4gIGlmIChvcHRzLmluY2x1ZGVOb2RlSW5kZXggJiYgcGFyZW50Lm5vZGUgJiYgcGFyZW50Lm5vZGUuY2hpbGRyZW4gJiYgIWlzVGFnUmVuZGVyZXIpIHtcbiAgICBwcm9wcy5pbmRleCA9IHBhcmVudC5ub2RlLmNoaWxkcmVuLmluZGV4T2Yobm9kZSk7XG4gICAgcHJvcHMucGFyZW50Q2hpbGRDb3VudCA9IHBhcmVudC5ub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgfVxuXG4gIHZhciByZWYgPSBub2RlLmlkZW50aWZpZXIgIT09IG51bGwgJiYgbm9kZS5pZGVudGlmaWVyICE9PSB1bmRlZmluZWQgPyBvcHRzLmRlZmluaXRpb25zW25vZGUuaWRlbnRpZmllcl0gfHwge30gOiBudWxsO1xuXG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSAncm9vdCc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogb3B0cy5jbGFzc05hbWVcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0ZXh0JzpcbiAgICAgIHByb3BzLm5vZGVLZXkgPSBrZXk7XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IG5vZGUudmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hlYWRpbmcnOlxuICAgICAgcHJvcHMubGV2ZWwgPSBub2RlLmRlcHRoO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaXN0JzpcbiAgICAgIHByb3BzLnN0YXJ0ID0gbm9kZS5zdGFydDtcbiAgICAgIHByb3BzLm9yZGVyZWQgPSBub2RlLm9yZGVyZWQ7XG4gICAgICBwcm9wcy50aWdodCA9ICFub2RlLmxvb3NlO1xuICAgICAgcHJvcHMuZGVwdGggPSBub2RlLmRlcHRoO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaXN0SXRlbSc6XG4gICAgICBwcm9wcy5jaGVja2VkID0gbm9kZS5jaGVja2VkO1xuICAgICAgcHJvcHMudGlnaHQgPSAhbm9kZS5sb29zZTtcbiAgICAgIHByb3BzLm9yZGVyZWQgPSBub2RlLm9yZGVyZWQ7XG4gICAgICBwcm9wcy5pbmRleCA9IG5vZGUuaW5kZXg7XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IGdldExpc3RJdGVtQ2hpbGRyZW4obm9kZSwgcGFyZW50KS5tYXAoZnVuY3Rpb24gKGNoaWxkTm9kZSwgaSkge1xuICAgICAgICByZXR1cm4gYXN0VG9SZWFjdChjaGlsZE5vZGUsIG9wdHMsIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIHByb3BzOiBwcm9wc1xuICAgICAgICB9LCBpKTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkZWZpbml0aW9uJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgaWRlbnRpZmllcjogbm9kZS5pZGVudGlmaWVyLFxuICAgICAgICB0aXRsZTogbm9kZS50aXRsZSxcbiAgICAgICAgdXJsOiBub2RlLnVybFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2NvZGUnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBsYW5ndWFnZTogbm9kZS5sYW5nICYmIG5vZGUubGFuZy5zcGxpdCgvXFxzLywgMSlbMF1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbmxpbmVDb2RlJzpcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gbm9kZS52YWx1ZTtcbiAgICAgIHByb3BzLmlubGluZSA9IHRydWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICB0aXRsZTogbm9kZS50aXRsZSB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRhcmdldDogdHlwZW9mIG9wdHMubGlua1RhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMubGlua1RhcmdldChub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSkgOiBvcHRzLmxpbmtUYXJnZXQsXG4gICAgICAgIGhyZWY6IG9wdHMudHJhbnNmb3JtTGlua1VyaSA/IG9wdHMudHJhbnNmb3JtTGlua1VyaShub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSkgOiBub2RlLnVybFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgYWx0OiBub2RlLmFsdCB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRpdGxlOiBub2RlLnRpdGxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgc3JjOiBvcHRzLnRyYW5zZm9ybUltYWdlVXJpID8gb3B0cy50cmFuc2Zvcm1JbWFnZVVyaShub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSwgbm9kZS5hbHQpIDogbm9kZS51cmxcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaW5rUmVmZXJlbmNlJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHh0ZW5kKHJlZiwge1xuICAgICAgICBocmVmOiBvcHRzLnRyYW5zZm9ybUxpbmtVcmkgPyBvcHRzLnRyYW5zZm9ybUxpbmtVcmkocmVmLmhyZWYpIDogcmVmLmhyZWZcbiAgICAgIH0pKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW1hZ2VSZWZlcmVuY2UnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBzcmM6IG9wdHMudHJhbnNmb3JtSW1hZ2VVcmkgJiYgcmVmLmhyZWYgPyBvcHRzLnRyYW5zZm9ybUltYWdlVXJpKHJlZi5ocmVmLCBub2RlLmNoaWxkcmVuLCByZWYudGl0bGUsIG5vZGUuYWx0KSA6IHJlZi5ocmVmLFxuICAgICAgICB0aXRsZTogcmVmLnRpdGxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgYWx0OiBub2RlLmFsdCB8fCB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0YWJsZSc6XG4gICAgY2FzZSAndGFibGVIZWFkJzpcbiAgICBjYXNlICd0YWJsZUJvZHknOlxuICAgICAgcHJvcHMuY29sdW1uQWxpZ25tZW50ID0gbm9kZS5hbGlnbjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGFibGVSb3cnOlxuICAgICAgcHJvcHMuaXNIZWFkZXIgPSBwYXJlbnQubm9kZS50eXBlID09PSAndGFibGVIZWFkJztcbiAgICAgIHByb3BzLmNvbHVtbkFsaWdubWVudCA9IHBhcmVudC5wcm9wcy5jb2x1bW5BbGlnbm1lbnQ7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RhYmxlQ2VsbCc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIGlzSGVhZGVyOiBwYXJlbnQucHJvcHMuaXNIZWFkZXIsXG4gICAgICAgIGFsaWduOiBwYXJlbnQucHJvcHMuY29sdW1uQWxpZ25tZW50W2luZGV4XVxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3ZpcnR1YWxIdG1sJzpcbiAgICAgIHByb3BzLnRhZyA9IG5vZGUudGFnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdodG1sJzpcbiAgICAgIC8vIEB0b2RvIGZpbmQgYSBiZXR0ZXIgd2F5IHRoYW4gdGhpc1xuICAgICAgcHJvcHMuaXNCbG9jayA9IG5vZGUucG9zaXRpb24uc3RhcnQubGluZSAhPT0gbm9kZS5wb3NpdGlvbi5lbmQubGluZTtcbiAgICAgIHByb3BzLmVzY2FwZUh0bWwgPSBvcHRzLmVzY2FwZUh0bWw7XG4gICAgICBwcm9wcy5za2lwSHRtbCA9IG9wdHMuc2tpcEh0bWw7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BhcnNlZEh0bWwnOlxuICAgICAge1xuICAgICAgICB2YXIgcGFyc2VkQ2hpbGRyZW47XG5cbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICBwYXJzZWRDaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzdFRvUmVhY3QoY2hpbGQsIG9wdHMsIHtcbiAgICAgICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgICAgICB9LCBpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3BzLmVzY2FwZUh0bWwgPSBvcHRzLmVzY2FwZUh0bWw7XG4gICAgICAgIHByb3BzLnNraXBIdG1sID0gb3B0cy5za2lwSHRtbDtcbiAgICAgICAgcHJvcHMuZWxlbWVudCA9IG1lcmdlTm9kZUNoaWxkcmVuKG5vZGUsIHBhcnNlZENoaWxkcmVuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywgeHRlbmQobm9kZSwge1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIHBvc2l0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWRcbiAgICAgIH0pKTtcbiAgfVxuXG4gIGlmICghaXNUYWdSZW5kZXJlciAmJiBub2RlLnZhbHVlKSB7XG4gICAgcHJvcHMudmFsdWUgPSBub2RlLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25EZWZpbmVkKHRhcmdldCwgYXR0cnMpIHtcbiAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKHR5cGVvZiBhdHRyc1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGFyZ2V0W2tleV0gPSBhdHRyc1trZXldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZU5vZGVDaGlsZHJlbihub2RlLCBwYXJzZWRDaGlsZHJlbikge1xuICB2YXIgZWwgPSBub2RlLmVsZW1lbnQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgdmFyIEZyYWdtZW50ID0gUmVhY3QuRnJhZ21lbnQgfHwgJ2Rpdic7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIGVsKTtcbiAgfVxuXG4gIGlmIChlbC5wcm9wcy5jaGlsZHJlbiB8fCBwYXJzZWRDaGlsZHJlbikge1xuICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoZWwucHJvcHMuY2hpbGRyZW4pLmNvbmNhdChwYXJzZWRDaGlsZHJlbik7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChlbCwgbnVsbCwgY2hpbGRyZW4pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChlbCwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Qb3NpdGlvbihwb3MpIHtcbiAgcmV0dXJuIFtwb3Muc3RhcnQubGluZSwgJzonLCBwb3Muc3RhcnQuY29sdW1uLCAnLScsIHBvcy5lbmQubGluZSwgJzonLCBwb3MuZW5kLmNvbHVtbl0ubWFwKFN0cmluZykuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGdldExpc3RJdGVtQ2hpbGRyZW4obm9kZSwgcGFyZW50KSB7XG4gIGlmIChub2RlLmxvb3NlKSB7XG4gICAgcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gIH1cblxuICBpZiAocGFyZW50Lm5vZGUgJiYgbm9kZS5pbmRleCA+IDAgJiYgcGFyZW50Lm5vZGUuY2hpbGRyZW5bbm9kZS5pbmRleCAtIDFdLmxvb3NlKSB7XG4gICAgcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gIH1cblxuICByZXR1cm4gdW53cmFwUGFyYWdyYXBocyhub2RlKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwUGFyYWdyYXBocyhub2RlKSB7XG4gIHJldHVybiBub2RlLmNoaWxkcmVuLnJlZHVjZShmdW5jdGlvbiAoYXJyYXksIGNoaWxkKSB7XG4gICAgcmV0dXJuIGFycmF5LmNvbmNhdChjaGlsZC50eXBlID09PSAncGFyYWdyYXBoJyA/IGNoaWxkLmNoaWxkcmVuIHx8IFtdIDogW2NoaWxkXSk7XG4gIH0sIFtdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3RUb1JlYWN0OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZpc2l0KG5vZGUsICd0YWJsZScsIHdyYXApO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbmZ1bmN0aW9uIHdyYXAodGFibGUpIHtcbiAgdmFyIGNoaWxkcmVuID0gdGFibGUuY2hpbGRyZW47XG4gIHRhYmxlLmNoaWxkcmVuID0gW3tcbiAgICB0eXBlOiAndGFibGVIZWFkJyxcbiAgICBhbGlnbjogdGFibGUuYWxpZ24sXG4gICAgY2hpbGRyZW46IFtjaGlsZHJlblswXV0sXG4gICAgcG9zaXRpb246IGNoaWxkcmVuWzBdLnBvc2l0aW9uXG4gIH1dO1xuXG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgdGFibGUuY2hpbGRyZW4ucHVzaCh7XG4gICAgICB0eXBlOiAndGFibGVCb2R5JyxcbiAgICAgIGFsaWduOiB0YWJsZS5hbGlnbixcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbi5zbGljZSgxKSxcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHN0YXJ0OiBjaGlsZHJlblsxXS5wb3NpdGlvbi5zdGFydCxcbiAgICAgICAgZW5kOiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS5wb3NpdGlvbi5lbmRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXREZWZpbml0aW9ucyhub2RlKSB7XG4gIHZhciBkZWZzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIChub2RlLmNoaWxkcmVuIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKGRlZmluaXRpb25zLCBjaGlsZCkge1xuICAgIGlmIChjaGlsZC50eXBlID09PSAnZGVmaW5pdGlvbicpIHtcbiAgICAgIGRlZmluaXRpb25zW2NoaWxkLmlkZW50aWZpZXJdID0ge1xuICAgICAgICBocmVmOiBjaGlsZC51cmwsXG4gICAgICAgIHRpdGxlOiBjaGlsZC50aXRsZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0RGVmaW5pdGlvbnMoY2hpbGQsIGRlZmluaXRpb25zKTtcbiAgfSwgZGVmcyk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcHJvdG9jb2xzID0gWydodHRwJywgJ2h0dHBzJywgJ21haWx0bycsICd0ZWwnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1cmlUcmFuc2Zvcm1lcih1cmkpIHtcbiAgdmFyIHVybCA9ICh1cmkgfHwgJycpLnRyaW0oKTtcbiAgdmFyIGZpcnN0ID0gdXJsLmNoYXJBdCgwKTtcblxuICBpZiAoZmlyc3QgPT09ICcjJyB8fCBmaXJzdCA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBjb2xvbiA9IHVybC5pbmRleE9mKCc6Jyk7XG5cbiAgaWYgKGNvbG9uID09PSAtMSkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcHJvdG9jb2xzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gLTE7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgcHJvdG9jb2wgPSBwcm90b2NvbHNbaW5kZXhdO1xuXG4gICAgaWYgKGNvbG9uID09PSBwcm90b2NvbC5sZW5ndGggJiYgdXJsLnNsaWNlKDAsIHByb3RvY29sLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gcHJvdG9jb2wpIHtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSB1cmwuaW5kZXhPZignPycpO1xuXG4gIGlmIChpbmRleCAhPT0gLTEgJiYgY29sb24gPiBpbmRleCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBjb2xvbiA+IGluZGV4KSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2NyaXB0LXVybFxuXG5cbiAgcmV0dXJuICdqYXZhc2NyaXB0OnZvaWQoMCknO1xufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzLCByZWFjdC9uby1tdWx0aS1jb21wICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBzdXBwb3J0c1N0cmluZ1JlbmRlciA9IHBhcnNlSW50KChSZWFjdC52ZXJzaW9uIHx8ICcxNicpLnNsaWNlKDAsIDIpLCAxMCkgPj0gMTY7XG52YXIgY3JlYXRlRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYnJlYWs6ICdicicsXG4gIHBhcmFncmFwaDogJ3AnLFxuICBlbXBoYXNpczogJ2VtJyxcbiAgc3Ryb25nOiAnc3Ryb25nJyxcbiAgdGhlbWF0aWNCcmVhazogJ2hyJyxcbiAgYmxvY2txdW90ZTogJ2Jsb2NrcXVvdGUnLFxuICBkZWxldGU6ICdkZWwnLFxuICBsaW5rOiAnYScsXG4gIGltYWdlOiAnaW1nJyxcbiAgbGlua1JlZmVyZW5jZTogJ2EnLFxuICBpbWFnZVJlZmVyZW5jZTogJ2ltZycsXG4gIHRhYmxlOiBTaW1wbGVSZW5kZXJlci5iaW5kKG51bGwsICd0YWJsZScpLFxuICB0YWJsZUhlYWQ6IFNpbXBsZVJlbmRlcmVyLmJpbmQobnVsbCwgJ3RoZWFkJyksXG4gIHRhYmxlQm9keTogU2ltcGxlUmVuZGVyZXIuYmluZChudWxsLCAndGJvZHknKSxcbiAgdGFibGVSb3c6IFNpbXBsZVJlbmRlcmVyLmJpbmQobnVsbCwgJ3RyJyksXG4gIHRhYmxlQ2VsbDogVGFibGVDZWxsLFxuICByb290OiBSb290LFxuICB0ZXh0OiBUZXh0UmVuZGVyZXIsXG4gIGxpc3Q6IExpc3QsXG4gIGxpc3RJdGVtOiBMaXN0SXRlbSxcbiAgZGVmaW5pdGlvbjogTnVsbFJlbmRlcmVyLFxuICBoZWFkaW5nOiBIZWFkaW5nLFxuICBpbmxpbmVDb2RlOiBJbmxpbmVDb2RlLFxuICBjb2RlOiBDb2RlQmxvY2ssXG4gIGh0bWw6IEh0bWwsXG4gIHZpcnR1YWxIdG1sOiBWaXJ0dWFsSHRtbCxcbiAgcGFyc2VkSHRtbDogUGFyc2VkSHRtbFxufTtcblxuZnVuY3Rpb24gVGV4dFJlbmRlcmVyKHByb3BzKSB7XG4gIHJldHVybiBzdXBwb3J0c1N0cmluZ1JlbmRlciA/IHByb3BzLmNoaWxkcmVuIDogY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gUm9vdChwcm9wcykge1xuICB2YXIgdXNlRnJhZ21lbnQgPSAhcHJvcHMuY2xhc3NOYW1lO1xuICB2YXIgcm9vdCA9IHVzZUZyYWdtZW50ID8gUmVhY3QuRnJhZ21lbnQgfHwgJ2RpdicgOiAnZGl2JztcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocm9vdCwgdXNlRnJhZ21lbnQgPyBudWxsIDogcHJvcHMsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gU2ltcGxlUmVuZGVyZXIodGFnLCBwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWcsIGdldENvcmVQcm9wcyhwcm9wcyksIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzKSB7XG4gIHZhciBzdHlsZSA9IHByb3BzLmFsaWduID8ge1xuICAgIHRleHRBbGlnbjogcHJvcHMuYWxpZ25cbiAgfSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvcmVQcm9wcyA9IGdldENvcmVQcm9wcyhwcm9wcyk7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzLmlzSGVhZGVyID8gJ3RoJyA6ICd0ZCcsIHN0eWxlID8geHRlbmQoe1xuICAgIHN0eWxlOiBzdHlsZVxuICB9LCBjb3JlUHJvcHMpIDogY29yZVByb3BzLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXCJoXCIuY29uY2F0KHByb3BzLmxldmVsKSwgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBMaXN0KHByb3BzKSB7XG4gIHZhciBhdHRycyA9IGdldENvcmVQcm9wcyhwcm9wcyk7XG5cbiAgaWYgKHByb3BzLnN0YXJ0ICE9PSBudWxsICYmIHByb3BzLnN0YXJ0ICE9PSAxICYmIHByb3BzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBhdHRycy5zdGFydCA9IHByb3BzLnN0YXJ0LnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudChwcm9wcy5vcmRlcmVkID8gJ29sJyA6ICd1bCcsIGF0dHJzLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIExpc3RJdGVtKHByb3BzKSB7XG4gIHZhciBjaGVja2JveCA9IG51bGw7XG5cbiAgaWYgKHByb3BzLmNoZWNrZWQgIT09IG51bGwgJiYgcHJvcHMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkO1xuICAgIGNoZWNrYm94ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudCgnbGknLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBjaGVja2JveCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBDb2RlQmxvY2socHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmxhbmd1YWdlICYmIFwibGFuZ3VhZ2UtXCIuY29uY2F0KHByb3BzLmxhbmd1YWdlKTtcbiAgdmFyIGNvZGUgPSBjcmVhdGVFbGVtZW50KCdjb2RlJywgY2xhc3NOYW1lID8ge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0gOiBudWxsLCBwcm9wcy52YWx1ZSk7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KCdwcmUnLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBjb2RlKTtcbn1cblxuZnVuY3Rpb24gSW5saW5lQ29kZShwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCgnY29kZScsIGdldENvcmVQcm9wcyhwcm9wcyksIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gSHRtbChwcm9wcykge1xuICBpZiAocHJvcHMuc2tpcEh0bWwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB0YWcgPSBwcm9wcy5pc0Jsb2NrID8gJ2RpdicgOiAnc3Bhbic7XG5cbiAgaWYgKHByb3BzLmVzY2FwZUh0bWwpIHtcbiAgICB2YXIgY29tcCA9IFJlYWN0LkZyYWdtZW50IHx8IHRhZztcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChjb21wLCBudWxsLCBwcm9wcy52YWx1ZSk7XG4gIH1cblxuICB2YXIgbm9kZVByb3BzID0ge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6IHByb3BzLnZhbHVlXG4gICAgfVxuICB9O1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWcsIG5vZGVQcm9wcyk7XG59XG5cbmZ1bmN0aW9uIFBhcnNlZEh0bWwocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID8gUmVhY3QuY2xvbmVFbGVtZW50KHByb3BzLmVsZW1lbnQsIHtcbiAgICAnZGF0YS1zb3VyY2Vwb3MnOiBwcm9wc1snZGF0YS1zb3VyY2Vwb3MnXVxuICB9KSA6IHByb3BzLmVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIFZpcnR1YWxIdG1sKHByb3BzKSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzLnRhZywgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBOdWxsUmVuZGVyZXIoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRDb3JlUHJvcHMocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID8ge1xuICAgICdkYXRhLXNvdXJjZXBvcyc6IHByb3BzWydkYXRhLXNvdXJjZXBvcyddXG4gIH0gOiB7fTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIEh0bWxQYXJzZXIgPSAnX19STURfSFRNTF9QQVJTRVJfXyc7XG5leHBvcnRzLkh0bWxQYXJzZXIgPSB0eXBlb2YgU3ltYm9sID09PSAndW5kZWZpbmVkJyA/IEh0bWxQYXJzZXIgOiBTeW1ib2woSHRtbFBhcnNlcik7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xNC4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjE0LjBcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjE0LjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIlxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5BeXl5ISBJJ20gd29ya2luIGhlYSE8L2Rpdj5cbiAgKVxufSIsIi8qIENvb2xvcnMgRXhwb3J0ZWQgUGFsZXR0ZSAtIGNvb2xvcnMuY28vNDRhZjY5LWY4MzMzYy1mY2FiMTAtMmI5ZWIzLWRiZDViNSAqL1xuXG4vLyBjb21tb24gY29sb3JzIGFuZCB3aGF0IG5vdFxuLypcbndoaXRlICAgICAgICNmZmZmZmZcbmRhcmsgYmx1ZSAgICMwMjJiM2FcbmJsdWUgICAgICAgICMxZjdhOGNcbmxpZ2h0IGJsdWUgICNiZmRiZjdcbmdyYXkgICAgICAgICNlMWU1ZjJcblxuKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYmFja2dyb3VuZDogJyMwMjJiM2EnLFxuICBoZWFkaW5nOiAnI2ZmZmZmZicsXG4gIHRleHQ6ICcjZTFlNWYyJyxcbiAgbmF2OiAnI2JmZGJmNycsXG4gIHN1YkhlYWRpbmc6ICcjYmZkYmY3JyxcbiAgaW1hZ2VCb3JkZXI6ICcjZGRkZGRkJ1xufVxuXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmNvbnN0IE5hdiA9IHN0eWxlZC5kaXZgXG4gIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9VGVrbyZkaXNwbGF5PXN3YXAnKTtcbiAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BemVyZXQrTW9ubyZkaXNwbGF5PXN3YXAnKTtcbiAgZm9udC1mYW1pbHk6ICdUZWtvJywgc2Fucy1zZXJpZjtcblxuICBmb250LXNpemU6IDM1cHg7XG4gIGNvbG9yOiAke3BhbGV0dGUubmF2fTtcblxuICAjbmF2LWNvbnRhaW5lciB7XG4gICAgYSwgc3Ryb25nIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgICB9XG5cbiAgICBhIHtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG5cbiAgICAuc2VsZWN0ZWQge1xuICAgICAgY29sb3I6ICR7cGFsZXR0ZS5uYXZ9O1xuICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICR7cGFsZXR0ZS5uYXZ9XG4gICAgfVxuXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcbiAgICAjbWFpbi1uYXYge1xuICAgICAgd2lkdGg6IDcyMHB4O1xuICAgICAgbWFyZ2luOiBhdXRvO1xuICAgIH1cblxuICAgICNsZWZ0LW5hdiB7XG4gICAgICAjcGhpbC1hdmVyeSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICB9XG5cbiAgICAgICNiZWxvdy1waGlsIHtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgIH1cblxuICAgICAgZm9udC1mYW1pbHk6ICdBemVyZXQgTW9ubyc7XG4gICAgICBmb250LXNpemU6IDE3cHg7XG4gICAgICBsaW5lLWhlaWdodDogMjVweDtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcbiAgICAgIG1hcmdpbjogMTdweCAxNXB4IDAgMTBweDtcbiAgICB9XG4gIH1cbmBcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPE5hdj5cbiAgICAgIDxkaXYgaWQ9XCJuYXYtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJsZWZ0LW5hdlwiPlxuICAgICAgICAgIDxkaXYgaWQ9J3BoaWwtYXZlcnknPlBoaWwgQXZlcnk8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGlkPVwiYmVsb3ctcGhpbFwiPlxuICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9waGlsbGlwYXZlcnkvXCI+TGlua2VkSW48L2E+XG4gICAgICAgICAgICA8YnIvPjxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vcGlsbFwiPkdpdGh1YjwvYT5cbiAgICAgICAgICAgIDxici8+PGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vY2xhc3NpcXVlX3BoaWwvXCI+QGNsYXNzaXF1ZV9waGlsPC9hPlxuICAgICAgICAgICAgPGJyLz48YSBocmVmPVwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9waWxsX21vdG8vXCI+QHBpbGxfbW90bzwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBpZD1cIm1haW4tbmF2XCI+XG4gICAgICAgICAgICAgIDxhIGNsYXNzPXsgWycnXS5pbmNsdWRlcyhwcm9wcy5zZWN0aW9uKSA/ICdzZWxlY3RlZCcgOiAnJ31cbiAgICAgICAgICAgICAgICAgaHJlZj1cIi9cIj5ob21lPC9hPlxuICAgICAgICAgICAgICA8YSBjbGFzcz17WydibG9nJywgJ3RhZ3MnLCAncG9zdCddLmluY2x1ZGVzKHByb3BzLnNlY3Rpb24pID8gJ3NlbGVjdGVkJyA6ICcnfVxuICAgICAgICAgICAgICAgICBocmVmPScvYmxvZyc+YmxvZzwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L05hdj5cblxuICApXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmFuZ2UgfSBmcm9tICcuLi8uLi91dGlscydcblxuZXhwb3J0IGRlZmF1bHQgKHsgdG90YWxQYWdlcywgcCwgcnBwIH0pID0+IHtcbiAgY29uc3QgcGFkZGluZyA9IDVcbiAgY29uc3Qgc3RhcnQgPSAocCAtIHBhZGRpbmcpID4gMCA/IChwIC0gcGFkZGluZykgOiAxXG4gIGNvbnN0IGVuZCA9IChwICsgcGFkZGluZykgPD0gdG90YWxQYWdlcyA/IChwICsgcGFkZGluZykgOiB0b3RhbFBhZ2VzXG5cbiAgY29uc29sZS5sb2codG90YWxQYWdlcywgc3RhcnQsIGVuZClcblxuICByZXR1cm4gKFxuICAgIDxkaXYgaWQ9XCJwYWdpbmF0b3JcIj5cbiAgICB7XG4gICAgICByYW5nZShzdGFydCwgZW5kKzEsIDEpLm1hcChpID0+IHtcbiAgICAgICAgcmV0dXJuIDxhIGhyZWY9e2AvYmxvZz9wPSR7aX0mcnBwPSR7cnBwfWB9IGtleT17aX0+e2l9PC9hPlxuICAgICAgfSlcbiAgICB9XG4gICAgPC9kaXY+XG4gIClcbn0iLCIvKipcbiAqIFJldHVybiBwYXJ0cyBvZiB0aGUgcGF0aCBhbmQgc2VhcmNoIHBhcmFtc1xuICovXG5jb25zdCBwYXJzZVVybCA9ICgpID0+IHtcbiAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgY29uc29sZS5sb2coJ3VybCcsIHBhcnNlZFVybClcbiAgY29uc3QgcGFydHMgPSBwYXJzZWRVcmwucGF0aG5hbWUuc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwLmxlbmd0aCA+IDApXG4gIHJldHVybiB7XG4gICAgcGFydHMsXG4gICAgc2VhcmNoUGFyYW1zOiBwYXJzZWRVcmwuc2VhcmNoUGFyYW1zXG4gIH1cbn1cblxuLyoqXG4gKiBNaW1pYyBQeXRob24gcmFuZ2UgZnVuY3Rpb25cbiAqL1xuY29uc3QgcmFuZ2UgPSAoc3RhcnQsIHN0b3AsIHN0ZXApID0+IHtcbiAgaWYgKHR5cGVvZiBzdG9wID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBvbmUgcGFyYW0gZGVmaW5lZFxuICAgICAgc3RvcCA9IHN0YXJ0O1xuICAgICAgc3RhcnQgPSAwXG4gIH1cblxuICBpZiAodHlwZW9mIHN0ZXAgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN0ZXAgPSAxXG4gIH1cblxuICBpZiAoKHN0ZXAgPiAwICYmIHN0YXJ0ID49IHN0b3ApIHx8IChzdGVwIDwgMCAmJiBzdGFydCA8PSBzdG9wKSkge1xuICAgICAgcmV0dXJuIFtdXG4gIH1cblxuICB2YXIgcmVzdWx0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBzdGVwID4gMCA/IGkgPCBzdG9wIDogaSA+IHN0b3A7IGkgKz0gc3RlcCkge1xuICAgICAgcmVzdWx0LnB1c2goaSlcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IHtcbiAgcGFyc2VVcmwsXG4gIHJhbmdlXG59XG5cbiIsImltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIFNwYWNlXG4gKiBAcHJvcCB7T2JqZWN0fSBzeXMgLSBTeXN0ZW0gbWV0YWRhdGFcbiAqIEBwcm9wIHtzdHJpbmd9IHN5cy5pZCAtIFNwYWNlIGlkXG4gKiBAcHJvcCB7c3RyaW5nfSBzeXMudHlwZSAtIEVudGl0eSB0eXBlXG4gKiBAcHJvcCB7c3RyaW5nfSBuYW1lIC0gU3BhY2UgbmFtZVxuICogQHByb3Age0FycmF5PHN0cmluZz59IGxvY2FsZXMgLSBBcnJheSB3aXRoIGxvY2FsZSBjb2Rlc1xuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIFNwYWNlIGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIC0gQVBJIHJlc3BvbnNlIGZvciBhIFNwYWNlXG4gKiBAcmV0dXJuIHtTcGFjZX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFNwYWNlKGRhdGEpIHtcbiAgcmV0dXJuIGZyZWV6ZVN5cyh0b1BsYWluT2JqZWN0KGRhdGEpKTtcbn0iLCJpbXBvcnQganNvblN0cmluZ2lmeVNhZmUgZnJvbSAnanNvbi1zdHJpbmdpZnktc2FmZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaXhpblN0cmluZ2lmeVNhZmUoZGF0YSkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsICdzdHJpbmdpZnlTYWZlJywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHZhciBzZXJpYWxpemVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuICAgICAgdmFyIGluZGVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gICAgICByZXR1cm4ganNvblN0cmluZ2lmeVNhZmUodGhpcywgc2VyaWFsaXplciwgaW5kZW50LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN5czoge1xuICAgICAgICAgICAgdHlwZTogJ0xpbmsnLFxuICAgICAgICAgICAgbGlua1R5cGU6ICdFbnRyeScsXG4gICAgICAgICAgICBpZDogdmFsdWUuc3lzLmlkLFxuICAgICAgICAgICAgY2lyY3VsYXI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufSIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcblxudmFyIFVOUkVTT0xWRURfTElOSyA9IHt9OyAvLyB1bmlxdWUgb2JqZWN0IHRvIGF2b2lkIHBvbHlmaWxsIGJsb2F0IHVzaW5nIFN5bWJvbCgpXG5cbi8qKlxuICogaXNMaW5rIEZ1bmN0aW9uXG4gKiBDaGVja3MgaWYgdGhlIG9iamVjdCBoYXMgc3lzLnR5cGUgXCJMaW5rXCJcbiAqIEBwYXJhbSBvYmplY3RcbiAqL1xudmFyIGlzTGluayA9IGZ1bmN0aW9uIGlzTGluayhvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3Quc3lzICYmIG9iamVjdC5zeXMudHlwZSA9PT0gJ0xpbmsnO1xufTtcblxuLyoqXG4gKiBpc1Jlc291cmNlTGluayBGdW5jdGlvblxuICogQ2hlY2tzIGlmIHRoZSBvYmplY3QgaGFzIHN5cy50eXBlIFwiUmVzb3VyY2VMaW5rXCJcbiAqIEBwYXJhbSBvYmplY3RcbiAqL1xudmFyIGlzUmVzb3VyY2VMaW5rID0gZnVuY3Rpb24gaXNSZXNvdXJjZUxpbmsob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgJiYgb2JqZWN0LnN5cyAmJiBvYmplY3Quc3lzLnR5cGUgPT09ICdSZXNvdXJjZUxpbmsnO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEga2V5IHdpdGggc3BhY2VJZCBhbmQgYSBrZXkgd2l0aG91dCBmb3IgZW50aXR5TWFwXG4gKlxuICogQHBhcmFtIHsqfSBzeXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzeXMudHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IHN5cy5pZFxuICogQHBhcmFtIHsqfSBzeXMuc3BhY2VcbiAqIEBwYXJhbSB7Kn0gc3lzLnNwYWNlLnN5c1xuICogQHBhcmFtIHtTdHJpbmd9IHN5cy5zcGFjZS5pZFxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbnZhciBtYWtlRW50aXR5TWFwS2V5cyA9IGZ1bmN0aW9uIG1ha2VFbnRpdHlNYXBLZXlzKHN5cykge1xuICBpZiAoc3lzLnNwYWNlICYmIHN5cy5lbnZpcm9ubWVudCkge1xuICAgIHJldHVybiBbc3lzLnR5cGUgKyAnIScgKyBzeXMuaWQsIHN5cy5zcGFjZS5zeXMuaWQgKyAnIScgKyBzeXMuZW52aXJvbm1lbnQuc3lzLmlkICsgJyEnICsgc3lzLnR5cGUgKyAnIScgKyBzeXMuaWRdO1xuICB9XG5cbiAgcmV0dXJuIFtzeXMudHlwZSArICchJyArIHN5cy5pZF07XG59O1xuXG4vKipcbiAqIExvb2tzIHVwIGluIGVudGl0eU1hcFxuICpcbiAqIEBwYXJhbSBlbnRpdHlNYXBcbiAqIEBwYXJhbSB7Kn0gbGlua0RhdGFcbiAqIEBwYXJhbSB7U3RyaW5nfSBsaW5rRGF0YS50eXBlXG4gKiBAcGFyYW0ge1N0cmluZ30gbGlua0RhdGEubGlua1R5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBsaW5rRGF0YS5pZFxuICogQHBhcmFtIHtTdHJpbmd9IGxpbmtEYXRhLnVyblxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG52YXIgbG9va3VwSW5FbnRpdHlNYXAgPSBmdW5jdGlvbiBsb29rdXBJbkVudGl0eU1hcChlbnRpdHlNYXAsIGxpbmtEYXRhKSB7XG4gIHZhciBlbnRyeUlkID0gbGlua0RhdGEuZW50cnlJZCxcbiAgICAgIGxpbmtUeXBlID0gbGlua0RhdGEubGlua1R5cGUsXG4gICAgICBzcGFjZUlkID0gbGlua0RhdGEuc3BhY2VJZCxcbiAgICAgIGVudmlyb25tZW50SWQgPSBsaW5rRGF0YS5lbnZpcm9ubWVudElkO1xuXG5cbiAgaWYgKHNwYWNlSWQgJiYgZW52aXJvbm1lbnRJZCkge1xuICAgIHJldHVybiBlbnRpdHlNYXAuZ2V0KHNwYWNlSWQgKyAnIScgKyBlbnZpcm9ubWVudElkICsgJyEnICsgbGlua1R5cGUgKyAnIScgKyBlbnRyeUlkKTtcbiAgfVxuXG4gIHJldHVybiBlbnRpdHlNYXAuZ2V0KGxpbmtUeXBlICsgJyEnICsgZW50cnlJZCk7XG59O1xuXG52YXIgZ2V0SWRzRnJvbVVybiA9IGZ1bmN0aW9uIGdldElkc0Zyb21Vcm4odXJuKSB7XG4gIHZhciByZWdFeHAgPSAvLio6c3BhY2VzXFwvKFteL10rKSg/OlxcL2Vudmlyb25tZW50c1xcLyhbXi9dKykpP1xcL2VudHJpZXNcXC8oW14vXSspJC87XG5cbiAgaWYgKCFyZWdFeHAudGVzdCh1cm4pKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gIHZhciBfdXJuJG1hdGNoID0gdXJuLm1hdGNoKHJlZ0V4cCksXG4gICAgICBfdXJuJG1hdGNoMiA9IF9zbGljZWRUb0FycmF5KF91cm4kbWF0Y2gsIDQpLFxuICAgICAgXyA9IF91cm4kbWF0Y2gyWzBdLFxuICAgICAgc3BhY2VJZCA9IF91cm4kbWF0Y2gyWzFdLFxuICAgICAgX3VybiRtYXRjaDIkID0gX3VybiRtYXRjaDJbMl0sXG4gICAgICBlbnZpcm9ubWVudElkID0gX3VybiRtYXRjaDIkID09PSB1bmRlZmluZWQgPyAnbWFzdGVyJyA6IF91cm4kbWF0Y2gyJCxcbiAgICAgIGVudHJ5SWQgPSBfdXJuJG1hdGNoMlszXTtcblxuICByZXR1cm4geyBzcGFjZUlkOiBzcGFjZUlkLCBlbnZpcm9ubWVudElkOiBlbnZpcm9ubWVudElkLCBlbnRyeUlkOiBlbnRyeUlkIH07XG59O1xuXG4vKipcbiAqIGdldFJlc29sdmVkTGluayBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSBlbnRpdHlNYXBcbiAqIEBwYXJhbSBsaW5rXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gKi9cbnZhciBnZXRSZXNvbHZlZExpbmsgPSBmdW5jdGlvbiBnZXRSZXNvbHZlZExpbmsoZW50aXR5TWFwLCBsaW5rKSB7XG4gIHZhciBfbGluayRzeXMgPSBsaW5rLnN5cyxcbiAgICAgIHR5cGUgPSBfbGluayRzeXMudHlwZSxcbiAgICAgIGxpbmtUeXBlID0gX2xpbmskc3lzLmxpbmtUeXBlO1xuXG4gIGlmICh0eXBlID09PSAnUmVzb3VyY2VMaW5rJykge1xuICAgIGlmICghbGlua1R5cGUuc3RhcnRzV2l0aCgnQ29udGVudGZ1bDonKSkge1xuICAgICAgcmV0dXJuIGxpbms7XG4gICAgfVxuXG4gICAgdmFyIHVybiA9IGxpbmsuc3lzLnVybjtcblxuICAgIHZhciBfZ2V0SWRzRnJvbVVybiA9IGdldElkc0Zyb21Vcm4odXJuKSxcbiAgICAgICAgc3BhY2VJZCA9IF9nZXRJZHNGcm9tVXJuLnNwYWNlSWQsXG4gICAgICAgIGVudmlyb25tZW50SWQgPSBfZ2V0SWRzRnJvbVVybi5lbnZpcm9ubWVudElkLFxuICAgICAgICBfZW50cnlJZCA9IF9nZXRJZHNGcm9tVXJuLmVudHJ5SWQ7XG5cbiAgICB2YXIgZXh0cmFjdGVkTGlua1R5cGUgPSBsaW5rVHlwZS5zcGxpdCgnOicpWzFdO1xuXG4gICAgcmV0dXJuIGxvb2t1cEluRW50aXR5TWFwKGVudGl0eU1hcCwge1xuICAgICAgbGlua1R5cGU6IGV4dHJhY3RlZExpbmtUeXBlLFxuICAgICAgZW50cnlJZDogX2VudHJ5SWQsXG4gICAgICBzcGFjZUlkOiBzcGFjZUlkLFxuICAgICAgZW52aXJvbm1lbnRJZDogZW52aXJvbm1lbnRJZFxuICAgIH0pIHx8IFVOUkVTT0xWRURfTElOSztcbiAgfVxuXG4gIHZhciBlbnRyeUlkID0gbGluay5zeXMuaWQ7XG5cbiAgcmV0dXJuIGxvb2t1cEluRW50aXR5TWFwKGVudGl0eU1hcCwgeyBsaW5rVHlwZTogbGlua1R5cGUsIGVudHJ5SWQ6IGVudHJ5SWQgfSkgfHwgVU5SRVNPTFZFRF9MSU5LO1xufTtcblxuLyoqXG4gKiBjbGVhblVwTGlua3MgRnVuY3Rpb25cbiAqIC0gUmVtb3ZlcyB1bnJlc29sdmFibGUgbGlua3MgZnJvbSBBcnJheXMgYW5kIE9iamVjdHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdFtdfE9iamVjdH0gaW5wdXRcbiAqL1xudmFyIGNsZWFuVXBMaW5rcyA9IGZ1bmN0aW9uIGNsZWFuVXBMaW5rcyhpbnB1dCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICByZXR1cm4gaW5wdXQuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgIT09IFVOUkVTT0xWRURfTElOSztcbiAgICB9KTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gaW5wdXQpIHtcbiAgICBpZiAoaW5wdXRba2V5XSA9PT0gVU5SRVNPTFZFRF9MSU5LKSB7XG4gICAgICBkZWxldGUgaW5wdXRba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlucHV0O1xufTtcblxuLyoqXG4gKiB3YWxrTXV0YXRlIEZ1bmN0aW9uXG4gKiBAcGFyYW0gaW5wdXRcbiAqIEBwYXJhbSBwcmVkaWNhdGVcbiAqIEBwYXJhbSBtdXRhdG9yXG4gKiBAcGFyYW0gcmVtb3ZlVW5yZXNvbHZlZFxuICogQHJldHVybiB7Kn1cbiAqL1xudmFyIHdhbGtNdXRhdGUgPSBmdW5jdGlvbiB3YWxrTXV0YXRlKGlucHV0LCBwcmVkaWNhdGUsIG11dGF0b3IsIHJlbW92ZVVucmVzb2x2ZWQpIHtcbiAgaWYgKHByZWRpY2F0ZShpbnB1dCkpIHtcbiAgICByZXR1cm4gbXV0YXRvcihpbnB1dCk7XG4gIH1cblxuICBpZiAoaW5wdXQgJiYgKHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaW5wdXQpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5wdXQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIGlmIChpbnB1dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGlucHV0W2tleV0gPSB3YWxrTXV0YXRlKGlucHV0W2tleV0sIHByZWRpY2F0ZSwgbXV0YXRvciwgcmVtb3ZlVW5yZXNvbHZlZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZW1vdmVVbnJlc29sdmVkKSB7XG4gICAgICBpbnB1dCA9IGNsZWFuVXBMaW5rcyhpbnB1dCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbnB1dDtcbn07XG5cbnZhciBub3JtYWxpemVMaW5rID0gZnVuY3Rpb24gbm9ybWFsaXplTGluayhlbnRpdHlNYXAsIGxpbmssIHJlbW92ZVVucmVzb2x2ZWQpIHtcbiAgdmFyIHJlc29sdmVkTGluayA9IGdldFJlc29sdmVkTGluayhlbnRpdHlNYXAsIGxpbmspO1xuICBpZiAocmVzb2x2ZWRMaW5rID09PSBVTlJFU09MVkVEX0xJTkspIHtcbiAgICByZXR1cm4gcmVtb3ZlVW5yZXNvbHZlZCA/IHJlc29sdmVkTGluayA6IGxpbms7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkTGluaztcbn07XG5cbnZhciBtYWtlRW50cnlPYmplY3QgPSBmdW5jdGlvbiBtYWtlRW50cnlPYmplY3QoaXRlbSwgaXRlbUVudHJ5UG9pbnRzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShpdGVtRW50cnlQb2ludHMpKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICB2YXIgZW50cnlQb2ludHMgPSBPYmplY3Qua2V5cyhpdGVtKS5maWx0ZXIoZnVuY3Rpb24gKG93bktleSkge1xuICAgIHJldHVybiBpdGVtRW50cnlQb2ludHMuaW5kZXhPZihvd25LZXkpICE9PSAtMTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudHJ5UG9pbnRzLnJlZHVjZShmdW5jdGlvbiAoZW50cnlPYmosIGVudHJ5UG9pbnQpIHtcbiAgICBlbnRyeU9ialtlbnRyeVBvaW50XSA9IGl0ZW1bZW50cnlQb2ludF07XG4gICAgcmV0dXJuIGVudHJ5T2JqO1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIHJlc29sdmVSZXNwb25zZSBGdW5jdGlvblxuICogUmVzb2x2ZXMgY29udGVudGZ1bCByZXNwb25zZSB0byBub3JtYWxpemVkIGZvcm0uXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgQ29udGVudGZ1bCByZXNwb25zZVxuICogQHBhcmFtIHt7cmVtb3ZlVW5yZXNvbHZlZDogQm9vbGVhbiwgaXRlbUVudHJ5UG9pbnRzOiBBcnJheTxTdHJpbmc+fXx7fX0gb3B0aW9uc1xuICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnJlbW92ZVVucmVzb2x2ZWQgLSBSZW1vdmUgdW5yZXNvbHZlZCBsaW5rcyBkZWZhdWx0OmZhbHNlXG4gKiBAcGFyYW0ge0FycmF5PFN0cmluZz59IG9wdGlvbnMuaXRlbUVudHJ5UG9pbnRzIC0gUmVzb2x2ZSBsaW5rcyBvbmx5IGluIHRob3NlIGl0ZW0gcHJvcGVydGllc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgcmVzb2x2ZVJlc3BvbnNlID0gZnVuY3Rpb24gcmVzb2x2ZVJlc3BvbnNlKHJlc3BvbnNlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoIXJlc3BvbnNlLml0ZW1zKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciByZXNwb25zZUNsb25lID0gY29weShyZXNwb25zZSk7XG4gIHZhciBhbGxJbmNsdWRlcyA9IE9iamVjdC5rZXlzKHJlc3BvbnNlQ2xvbmUuaW5jbHVkZXMgfHwge30pLnJlZHVjZShmdW5jdGlvbiAoYWxsLCB0eXBlKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWxsKSwgX3RvQ29uc3VtYWJsZUFycmF5KHJlc3BvbnNlLmluY2x1ZGVzW3R5cGVdKSk7XG4gIH0sIFtdKTtcblxuICB2YXIgYWxsRW50cmllcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocmVzcG9uc2VDbG9uZS5pdGVtcyksIF90b0NvbnN1bWFibGVBcnJheShhbGxJbmNsdWRlcykpLmZpbHRlcihmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZW50aXR5LnN5cyk7XG4gIH0pO1xuXG4gIHZhciBlbnRpdHlNYXAgPSBuZXcgTWFwKGFsbEVudHJpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGVudGl0eSkge1xuICAgIHZhciBlbnRyaWVzID0gbWFrZUVudGl0eU1hcEtleXMoZW50aXR5LnN5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBlbnRpdHldO1xuICAgIH0pO1xuICAgIGFjYy5wdXNoLmFwcGx5KGFjYywgX3RvQ29uc3VtYWJsZUFycmF5KGVudHJpZXMpKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSkpO1xuXG4gIGFsbEVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBlbnRyeU9iamVjdCA9IG1ha2VFbnRyeU9iamVjdChpdGVtLCBvcHRpb25zLml0ZW1FbnRyeVBvaW50cyk7XG5cbiAgICBPYmplY3QuYXNzaWduKGl0ZW0sIHdhbGtNdXRhdGUoZW50cnlPYmplY3QsIGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gaXNMaW5rKHgpIHx8IGlzUmVzb3VyY2VMaW5rKHgpO1xuICAgIH0sIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplTGluayhlbnRpdHlNYXAsIGxpbmssIG9wdGlvbnMucmVtb3ZlVW5yZXNvbHZlZCk7XG4gICAgfSwgb3B0aW9ucy5yZW1vdmVVbnJlc29sdmVkKSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXNwb25zZUNsb25lLml0ZW1zO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVJlc3BvbnNlOyIsImltcG9ydCBjb3B5IGZyb20gJ2Zhc3QtY29weSc7XG5pbXBvcnQgeyB0b1BsYWluT2JqZWN0LCBmcmVlemVTeXMgfSBmcm9tICdjb250ZW50ZnVsLXNkay1jb3JlJztcbmltcG9ydCBtaXhpblN0cmluZ2lmeVNhZmUgZnJvbSAnLi4vbWl4aW5zL3N0cmluZ2lmeS1zYWZlJztcbmltcG9ydCByZXNvbHZlUmVzcG9uc2UgZnJvbSAnY29udGVudGZ1bC1yZXNvbHZlLXJlc3BvbnNlJztcbi8qKlxuICogVHlwZXMgb2YgZmllbGRzIGZvdW5kIGluIGFuIEVudHJ5XG4gKiBAbmFtZXNwYWNlIEVudHJ5RmllbGRzXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50cnlGaWVsZHNcbiAqIEB0eXBlZGVmIFN5bWJvbFxuICogQHR5cGUgc3RyaW5nXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50cnlGaWVsZHNcbiAqIEB0eXBlZGVmIFRleHRcbiAqIEB0eXBlIHN0cmluZ1xuICovXG5cbi8qKlxuICogQG1lbWJlcm9mIEVudHJ5RmllbGRzXG4gKiBAdHlwZWRlZiBJbnRlZ2VyXG4gKiBAdHlwZSBudW1iZXJcbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgTnVtYmVyXG4gKiBAdHlwZSBudW1iZXJcbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgRGF0ZVxuICogQHR5cGUgc3RyaW5nXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50cnlGaWVsZHNcbiAqIEB0eXBlZGVmIEJvb2xlYW5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgTG9jYXRpb25cbiAqIEBwcm9wIHtzdHJpbmd9IGxhdCAtIGxhdGl0dWRlXG4gKiBAcHJvcCB7c3RyaW5nfSBsb24gLSBsb25naXR1ZGVcbiAqL1xuXG4vKipcbiAqIEEgRmllbGQgaW4gYW4gRW50cnkgY2FuIGhhdmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdHlwZXMgdGhhdCBjYW4gYmUgZGVmaW5lZCBpbiBDb250ZW50ZnVsLiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9yZWZlcmVuY2VzL2ZpZWxkLXR5cGUvXCI+RmllbGQgVHlwZXM8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEZpZWxkXG4gKiBAdHlwZSBFbnRyeUZpZWxkcy5TeW1ib2wgfCBFbnRyeUZpZWxkcy5UZXh0IHwgRW50cnlGaWVsZHMuSW50ZWdlciB8IEVudHJ5RmllbGRzLk51bWJlciB8IEVudHJ5RmllbGRzLkRhdGUgfCBFbnRyeUZpZWxkcy5Cb29sZWFuIHwgRW50cnlGaWVsZHMuTG9jYXRpb24gfCBFbnRpdGllcy5MaW5rIHwgQXJyYXk8RW50cnlGaWVsZHMuU3ltYm9sfEVudGl0aWVzLkxpbms+IHwgT2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEVudHJ5XG4gKiBAcHJvcCB7RW50aXRpZXMuU3lzfSBzeXMgLSBTdGFuZGFyZCBzeXN0ZW0gbWV0YWRhdGEgd2l0aCBhZGRpdGlvbmFsIGVudHJ5IHNwZWNpZmljIHByb3BlcnRpZXNcbiAqIEBwcm9wIHtFbnRpdGllcy5MaW5rfSBzeXMuY29udGVudFR5cGUgLSBDb250ZW50IFR5cGUgdXNlZCBieSB0aGlzIEVudHJ5XG4gKiBAcHJvcCB7c3RyaW5nPX0gc3lzLmxvY2FsZSAtIElmIHByZXNlbnQsIGluZGljYXRlcyB0aGUgbG9jYWxlIHdoaWNoIHRoaXMgZW50cnkgdXNlc1xuICogQHByb3Age09iamVjdDxFbnRyeUZpZWxkcy5GaWVsZD59IGZpZWxkcyAtIE9iamVjdCB3aXRoIGNvbnRlbnQgZm9yIGVhY2ggZmllbGRcbiAqIEBwcm9wIHtmdW5jdGlvbigpOiBPYmplY3R9IHRvUGxhaW5PYmplY3QoKSAtIFJldHVybnMgdGhpcyBFbnRyeSBhcyBhIHBsYWluIEpTIG9iamVjdFxuICovXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gUmF3IGVudHJ5IGRhdGFcbiAqIEByZXR1cm4ge0VudHJ5fSBXcmFwcGVkIGVudHJ5IGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcEVudHJ5KGRhdGEpIHtcbiAgcmV0dXJuIGZyZWV6ZVN5cyh0b1BsYWluT2JqZWN0KGNvcHkoZGF0YSkpKTtcbn1cbi8qKlxuICogQG1lbWJlcm9mIEVudGl0aWVzXG4gKiBAdHlwZWRlZiBFbnRyeUNvbGxlY3Rpb25cbiAqIEBwcm9wIHtudW1iZXJ9IHRvdGFsXG4gKiBAcHJvcCB7bnVtYmVyfSBza2lwXG4gKiBAcHJvcCB7bnVtYmVyfSBsaW1pdFxuICogQHByb3Age0FycmF5PEVudGl0aWVzLkVudHJ5Pn0gaXRlbXNcbiAqIEBwcm9wIHtBcnJheTxPYmplY3Q+PX0gZXJyb3JzIC0gQXJyYXkgb2YgZXJyb3JzIHRoYXQgbWlnaHQgb2NjdXIgd2hlbiByZXRyaWV2aW5nIGVudHJpZXMuXG4gKiBAcHJvcCB7T2JqZWN0PEFycmF5Pj19IGluY2x1ZGVzIC0gT2JqZWN0IHdpdGggYXJyYXlzIG9mIGluY2x1ZGVzIGZvciBFbnRyaWVzIGFuZCBBc3NldHMuIFRoaXMgd2lsbCBiZSBwcmVzZW50IGlmIHJlc29sdmVMaW5rcyBpcyBvbiwgYW5kIGFueSBsaW5rZWQgZW50cmllcyBvciBhc3NldHMgZXhpc3QuIFRob3NlIGxpbmtzIHdpbGwgYmUgcmVzb2x2ZWQgaW4gdGhlIEVudHJpZXMgcHJlc2VudCBpbiB0aGUgaXRlbXMgYXJyYXksIGJ1dCB0aGV5IGFyZSBhbHNvIHByZXNlbnQgaGVyZSBpbiByYXcgZm9ybS5cbiAqIEBwcm9wIHtmdW5jdGlvbigpOiBPYmplY3R9IHRvUGxhaW5PYmplY3QoKSAtIFJldHVybnMgdGhpcyBFbnRyeSBjb2xsZWN0aW9uIGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKiBAcHJvcCB7ZnVuY3Rpb24oP2Z1bmN0aW9uPSwgc3BhY2U9KTogT2JqZWN0fSBzdHJpbmdpZnlTYWZlKHJlcGxhY2VyLHNwYWNlKSAtIFN0cmluZ2lmaWVzIHRoZSBlbnRyeSBjb2xsZWN0aW9uLCBhY2NvdW50aW5nIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLiBDaXJjdWxhciByZWZlcmVuY2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBqdXN0IGEgTGluayBvYmplY3QsIHdpdGggYSA8Y29kZT5jaXJjdWxhcjwvY29kZT4gcHJvcGVydHkgc2V0IHRvIDxjb2RlPnRydWU8L2NvZGU+LiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0pTT04vc3RyaW5naWZ5XCI+TUROPC9hPiBhbmQgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2pzb24tc3RyaW5naWZ5LXNhZmVcIj5qc29uLXN0cmluZ2lmeS1zYWZlPC9hPiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoZSBhcmd1bWVudHMgdGhpcyBtZXRob2QgY2FuIHRha2UuXG4gKi9cblxuLyoqXG4gKiBEYXRhIGlzIGFsc28gbWl4ZWQgaW4gd2l0aCBsaW5rIGdldHRlcnMgaWYgbGlua3MgZXhpc3QgYW5kIGluY2x1ZGVzIHdlcmUgcmVxdWVzdGVkXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSYXcgZW50cnkgY29sbGVjdGlvbiBkYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHdyYXBwZXIgb3B0aW9uc1xuICogQHJldHVybiB7RW50cnlDb2xsZWN0aW9ufSBXcmFwcGVkIGVudHJ5IGNvbGxlY3Rpb24gZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwRW50cnlDb2xsZWN0aW9uKGRhdGEsIF9yZWYpIHtcbiAgdmFyIHJlc29sdmVMaW5rcyA9IF9yZWYucmVzb2x2ZUxpbmtzLFxuICAgICAgcmVtb3ZlVW5yZXNvbHZlZCA9IF9yZWYucmVtb3ZlVW5yZXNvbHZlZDtcbiAgdmFyIHdyYXBwZWREYXRhID0gbWl4aW5TdHJpbmdpZnlTYWZlKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xuXG4gIGlmIChyZXNvbHZlTGlua3MpIHtcbiAgICB3cmFwcGVkRGF0YS5pdGVtcyA9IHJlc29sdmVSZXNwb25zZSh3cmFwcGVkRGF0YSwge1xuICAgICAgcmVtb3ZlVW5yZXNvbHZlZDogcmVtb3ZlVW5yZXNvbHZlZCxcbiAgICAgIGl0ZW1FbnRyeVBvaW50czogWydmaWVsZHMnXVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZyZWV6ZVN5cyh3cmFwcGVkRGF0YSk7XG59IiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEFzc2V0XG4gKiBAcHJvcCB7RW50aXRpZXMuU3lzfSBzeXMgLSBTdGFuZGFyZCBzeXN0ZW0gbWV0YWRhdGEgd2l0aCBhZGRpdGlvbmFsIGVudHJ5IHNwZWNpZmljIHByb3BlcnRpZXNcbiAqIEBwcm9wIHtzdHJpbmc9fSBzeXMubG9jYWxlIC0gSWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoZSBsb2NhbGUgd2hpY2ggdGhpcyBhc3NldCB1c2VzXG4gKiBAcHJvcCB7T2JqZWN0fSBmaWVsZHMgLSBPYmplY3Qgd2l0aCBjb250ZW50IGZvciBlYWNoIGZpZWxkXG4gKiBAcHJvcCB7c3RyaW5nfSBmaWVsZHMudGl0bGUgLSBUaXRsZSBmb3IgdGhpcyBhc3NldFxuICogQHByb3Age3N0cmluZ30gZmllbGRzLmRlc2NyaXB0aW9uIC0gRGVzY3JpcHRpb24gZm9yIHRoaXMgYXNzZXRcbiAqIEBwcm9wIHtPYmplY3R9IGZpZWxkcy5maWxlIC0gRmlsZSBvYmplY3QgZm9yIHRoaXMgYXNzZXRcbiAqIEBwcm9wIHtzdHJpbmd9IGZpZWxkcy5maWxlLmZpbGVOYW1lIC0gTmFtZSBmb3IgdGhlIGZpbGVcbiAqIEBwcm9wIHtzdHJpbmd9IGZpZWxkcy5maWxlLmNvbnRlbnRUeXBlIC0gTWltZSB0eXBlIGZvciB0aGUgZmlsZVxuICogQHByb3Age3N0cmluZ30gZmllbGRzLmZpbGUudXJsIC0gVXJsIHdoZXJlIHRoZSBmaWxlIGlzIGF2YWlsYWJsZSBhdC5cbiAqIEBwcm9wIHtPYmplY3R9IGZpZWxkcy5maWxlLmRldGFpbHMgLSBEZXRhaWxzIGZvciB0aGUgZmlsZSwgZGVwZW5kaW5nIG9uIGZpbGUgdHlwZSAoZXhhbXBsZTogaW1hZ2Ugc2l6ZSBpbiBieXRlcywgZXRjKVxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIEFzc2V0IGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSYXcgYXNzZXQgZGF0YVxuICogQHJldHVybiB7QXNzZXR9IFdyYXBwZWQgYXNzZXQgZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQXNzZXQoZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufVxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEFzc2V0Q29sbGVjdGlvblxuICogQHByb3Age251bWJlcn0gdG90YWxcbiAqIEBwcm9wIHtudW1iZXJ9IHNraXBcbiAqIEBwcm9wIHtudW1iZXJ9IGxpbWl0XG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuQXNzZXQ+fSBpdGVtc1xuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIEFzc2V0IGNvbGxlY3Rpb24gYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBhc3NldCBjb2xsZWN0aW9uIGRhdGFcbiAqIEByZXR1cm4ge0Fzc2V0Q29sbGVjdGlvbn0gV3JhcHBlZCBhc3NldCBjb2xsZWN0aW9uIGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcEFzc2V0Q29sbGVjdGlvbihkYXRhKSB7XG4gIHJldHVybiBmcmVlemVTeXModG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG59IiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIENvbnRlbnRUeXBlXG4gKiBAcHJvcCB7RW50aXRpZXMuU3lzfSBzeXMgLSBTeXN0ZW0gbWV0YWRhdGFcbiAqIEBwcm9wIHtzdHJpbmd9IG5hbWVcbiAqIEBwcm9wIHtzdHJpbmd9IGRlc2NyaXB0aW9uXG4gKiBAcHJvcCB7c3RyaW5nfSBkaXNwbGF5RmllbGQgLSBGaWVsZCB1c2VkIGFzIHRoZSBtYWluIGRpc3BsYXkgZmllbGQgZm9yIEVudHJpZXNcbiAqIEBwcm9wIHtzdHJpbmd9IEFycmF5PEZpZWxkPiAtIEFsbCB0aGUgZmllbGRzIGNvbnRhaW5lZCBpbiB0aGlzIENvbnRlbnQgVHlwZVxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIENvbnRlbnQgVHlwZSBhcyBhIHBsYWluIEpTIG9iamVjdFxuICovXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gUmF3IGNvbnRlbnQgdHlwZSBkYXRhXG4gKiBAcmV0dXJuIHtDb250ZW50VHlwZX0gV3JhcHBlZCBjb250ZW50IHR5cGUgZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQ29udGVudFR5cGUoZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufVxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIENvbnRlbnRUeXBlQ29sbGVjdGlvblxuICogQHByb3Age251bWJlcn0gdG90YWxcbiAqIEBwcm9wIHtudW1iZXJ9IHNraXBcbiAqIEBwcm9wIHtudW1iZXJ9IGxpbWl0XG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuQ29udGVudFR5cGU+fSBpdGVtc1xuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIENvbnRlbnQgVHlwZSBjb2xsZWN0aW9uIGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSYXcgY29udGVudCB0eXBlIGNvbGxlY3Rpb24gZGF0YVxuICogQHJldHVybiB7Q29udGVudFR5cGVDb2xsZWN0aW9ufSBXcmFwcGVkIGNvbnRlbnQgdHlwZSBjb2xsZWN0aW9uIGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcENvbnRlbnRUeXBlQ29sbGVjdGlvbihkYXRhKSB7XG4gIHJldHVybiBmcmVlemVTeXModG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG59IiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIExvY2FsZVxuICogQHByb3Age0VudGl0aWVzLlN5c30gc3lzIC0gU3RhbmRhcmQgc3lzdGVtIG1ldGFkYXRhIHdpdGggYWRkaXRpb25hbCBlbnRyeSBzcGVjaWZpYyBwcm9wZXJ0aWVzXG4gKiBAcHJvcCB7c3RyaW5nfSBuYW1lIC0gbG9jYWxlIG5hbWUgKGV4YW1wbGU6IEVuZ2xpc2gpXG4gKiBAcHJvcCB7c3RyaW5nfSBjb2RlIC0gbG9jYWxlIGNvZGUgKGV4YW1wbGU6IGVuLVVTKVxuICogQHByb3Age3N0cmluZ30gZmFsbGJhY2tDb2RlIC0gdGhlIGxvY2FsZSBjb2RlIHRvIGZhbGxiYWNrIHRvIHdoZW4gdGhlcmUgaXMgbm90IGNvbnRlbnQgZm9yIHRoZSBjdXJyZW50IGxvY2FsZVxuICogQHByb3Age2Jvb2xlYW59IGRlZmF1bHQgLSBJZiB0aGlzIGlzIHRoZSBkZWZhdWx0IGxvY2FsZVxuICogQHByb3Age2Jvb2xlYW59IG9wdGlvbmFsIC0gSWYgdGhlIGxvY2FsZSBuZWVkcyB0byBiZSBmaWxsZWQgaW4gb24gZW50cmllcyBvciBub3RcbiAqIEBwcm9wIHtmdW5jdGlvbigpOiBPYmplY3R9IHRvUGxhaW5PYmplY3QoKSAtIFJldHVybnMgdGhpcyBMb2NhbGUgYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBsb2NhbGUgZGF0YVxuICogQHJldHVybiB7TG9jYWxlfSBXcmFwcGVkIGxvY2FsZSBkYXRhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBMb2NhbGUoZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufVxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIExvY2FsZUNvbGxlY3Rpb25cbiAqIEBwcm9wIHtudW1iZXJ9IHRvdGFsXG4gKiBAcHJvcCB7bnVtYmVyfSBza2lwXG4gKiBAcHJvcCB7bnVtYmVyfSBsaW1pdFxuICogQHByb3Age0FycmF5PEVudGl0aWVzLkxvY2FsZT59IGl0ZW1zXG4gKiBAcHJvcCB7ZnVuY3Rpb24oKTogT2JqZWN0fSB0b1BsYWluT2JqZWN0KCkgLSBSZXR1cm5zIHRoaXMgTG9jYWxlIGNvbGxlY3Rpb24gYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBsb2NhbGUgY29sbGVjdGlvbiBkYXRhXG4gKiBAcmV0dXJuIHtMb2NhbGVDb2xsZWN0aW9ufSBXcmFwcGVkIGxvY2FsZSBjb2xsZWN0aW9uIGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcExvY2FsZUNvbGxlY3Rpb24oZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufSIsImltcG9ydCAqIGFzIHNwYWNlIGZyb20gJy4vc3BhY2UnO1xuaW1wb3J0ICogYXMgZW50cnkgZnJvbSAnLi9lbnRyeSc7XG5pbXBvcnQgKiBhcyBhc3NldCBmcm9tICcuL2Fzc2V0JztcbmltcG9ydCAqIGFzIGNvbnRlbnRUeXBlIGZyb20gJy4vY29udGVudC10eXBlJztcbmltcG9ydCAqIGFzIGxvY2FsZSBmcm9tICcuL2xvY2FsZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNwYWNlOiBzcGFjZSxcbiAgZW50cnk6IGVudHJ5LFxuICBhc3NldDogYXNzZXQsXG4gIGNvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcbiAgbG9jYWxlOiBsb2NhbGVcbn07IiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8qKlxuICogU2VlIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvY29uY2VwdHMvc3luYy9cIj5TeW5jaHJvbml6YXRpb248L2E+IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogQG5hbWVzcGFjZSBTeW5jXG4gKi9cbmltcG9ydCB7IGNyZWF0ZVJlcXVlc3RDb25maWcsIGZyZWV6ZVN5cywgdG9QbGFpbk9iamVjdCB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuaW1wb3J0IHJlc29sdmVSZXNwb25zZSBmcm9tICdjb250ZW50ZnVsLXJlc29sdmUtcmVzcG9uc2UnO1xuaW1wb3J0IG1peGluU3RyaW5naWZ5U2FmZSBmcm9tICcuL21peGlucy9zdHJpbmdpZnktc2FmZSc7XG4vKipcbiAqIEBtZW1iZXJvZiBTeW5jXG4gKiBAdHlwZWRlZiBTeW5jQ29sbGVjdGlvblxuICogQHByb3Age0FycmF5PEVudGl0aWVzLkVudHJ5Pn0gZW50cmllcyAtIEFsbCBleGlzdGluZyBlbnRyaWVzIG9uIGZpcnN0IHN5bmMuIE5ldyBhbmQgdXBkYXRlZCBlbnRyaWVzIG9uIHN1YnNlcXVlbnQgc3luY3MuXG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuQXNzZXQ+fSBhc3NldHMgLSBBbGwgZXhpc3RpbmcgYXNzZXRzIG9uIGZpcnN0IHN5bmMuIE5ldyBhbmQgdXBkYXRlZCBhc3NldHMgb24gc3Vic2VxdWVudCBzeW5jcy5cbiAqIEBwcm9wIHtBcnJheTxTeW5jLkRlbGV0ZWRFbnRyeT59IGRlbGV0ZWRFbnRyaWVzIC0gTGlzdCBvZiBkZWxldGVkIEVudHJpZXMgc2luY2UgbGFzdCBzeW5jXG4gKiBAcHJvcCB7QXJyYXk8U3luYy5EZWxldGVkQXNzZXQ+fSBkZWxldGVkQXNzZXRzIC0gTGlzdCBvZiBkZWxldGVkIEFzc2V0cyBzaW5jZSBsYXN0IHN5bmNcbiAqIEBwcm9wIHtzdHJpbmd9IG5leHRTeW5jVG9rZW4gLSBUb2tlbiB0byBiZSBzZW50IHRvIHRoZSBuZXh0IHN5bmMgY2FsbFxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIFN5bmMgY29sbGVjdGlvbiBhcyBhIHBsYWluIEpTIG9iamVjdFxuICogQHByb3Age2Z1bmN0aW9uKD9mdW5jdGlvbj0sIHNwYWNlPSk6IE9iamVjdH0gc3RyaW5naWZ5U2FmZShyZXBsYWNlcixzcGFjZSkgLSBTdHJpbmdpZmllcyB0aGUgU3luYyBjb2xsZWN0aW9uLCBhY2NvdW50aW5nIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLiBDaXJjdWxhciByZWZlcmVuY2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBqdXN0IGEgTGluayBvYmplY3QsIHdpdGggYSA8Y29kZT5jaXJjdWxhcjwvY29kZT4gcHJvcGVydHkgc2V0IHRvIDxjb2RlPnRydWU8L2NvZGU+LiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0pTT04vc3RyaW5naWZ5XCI+TUROPC9hPiBhbmQgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2pzb24tc3RyaW5naWZ5LXNhZmVcIj5qc29uLXN0cmluZ2lmeS1zYWZlPC9hPiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoZSBhcmd1bWVudHMgdGhpcyBtZXRob2QgY2FuIHRha2UuXG4gKi9cblxuLyoqXG4gKiBEZWxldGVkIEVudHJpZXMgYXJlIHRoZSBzYW1lIGFzIEVudHJpZXMsIGJ1dCBvbmx5IGFwcGVhciBvbiB0aGUgc3luYyBBUEkuXG4gKiBAbWVtYmVyb2YgU3luY1xuICogQHR5cGVkZWYgRGVsZXRlZEVudHJ5XG4gKiBAdHlwZSBFbnRpdGllcy5FbnRyeVxuICovXG5cbi8qKlxuICogRGVsZXRlZCBBc3NldHMgYXJlIHRoZSBzYW1lIGFzIEFzc2V0cywgYnV0IG9ubHkgYXBwZWFyIG9uIHRoZSBzeW5jIEFQSS5cbiAqIEBtZW1iZXJvZiBTeW5jXG4gKiBAdHlwZWRlZiBEZWxldGVkQXNzZXRcbiAqIEB0eXBlIEVudGl0aWVzLkFzc2V0XG4gKi9cblxuLyoqXG4gKiBUaGlzIG1vZHVsZSByZXRyaWV2ZXMgYWxsIHRoZSBhdmFpbGFibGUgcGFnZXMgZm9yIGEgc3luYyBvcGVyYXRpb25cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaHR0cCAtIEhUVFAgY2xpZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcXVlcnkgLSBRdWVyeSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gU3luYyBvcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZXNvbHZlTGlua3MgPSB0cnVlXSAtIElmIGxpbmtzIHNob3VsZCBiZSByZXNvbHZlZFxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZW1vdmVVbnJlc29sdmVkID0gZmFsc2VdIC0gSWYgdW5yZXNvbHZhYmxlIGxpbmtzIHNob3VsZCBnZXQgcmVtb3ZlZFxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wYWdpbmF0ZSA9IHRydWVdIC0gSWYgZnVydGhlciBzeW5jIHBhZ2VzIHNob3VsZCBhdXRvbWF0aWNhbGx5IGJlIGNyYXdsZWRcbiAqIEByZXR1cm4ge1Byb21pc2U8U3luY0NvbGxlY3Rpb24+fVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhZ2VkU3luYyhodHRwLCBxdWVyeSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgaWYgKCFxdWVyeSB8fCAhcXVlcnkuaW5pdGlhbCAmJiAhcXVlcnkubmV4dFN5bmNUb2tlbiAmJiAhcXVlcnkubmV4dFBhZ2VUb2tlbikge1xuICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgb25lIG9mIGBpbml0aWFsYCwgYG5leHRTeW5jVG9rZW5gIG9yIGBuZXh0UGFnZVRva2VuYCBwYXJhbWV0ZXJzIGZvciBzeW5jaW5nJyk7XG4gIH1cblxuICBpZiAocXVlcnkgJiYgcXVlcnkuY29udGVudF90eXBlICYmICFxdWVyeS50eXBlKSB7XG4gICAgcXVlcnkudHlwZSA9ICdFbnRyeSc7XG4gIH0gZWxzZSBpZiAocXVlcnkgJiYgcXVlcnkuY29udGVudF90eXBlICYmIHF1ZXJ5LnR5cGUgJiYgcXVlcnkudHlwZSAhPT0gJ0VudHJ5Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignV2hlbiB1c2luZyB0aGUgYGNvbnRlbnRfdHlwZWAgZmlsdGVyIHlvdXIgYHR5cGVgIHBhcmFtZXRlciBjYW5ub3QgYmUgZGlmZmVyZW50IGZyb20gYEVudHJ5YC4nKTtcbiAgfVxuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICByZXNvbHZlTGlua3M6IHRydWUsXG4gICAgcmVtb3ZlVW5yZXNvbHZlZDogZmFsc2UsXG4gICAgcGFnaW5hdGU6IHRydWVcbiAgfTtcblxuICB2YXIgX2RlZmF1bHRPcHRpb25zJG9wdGlvID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0T3B0aW9ucyksIG9wdGlvbnMpLFxuICAgICAgcmVzb2x2ZUxpbmtzID0gX2RlZmF1bHRPcHRpb25zJG9wdGlvLnJlc29sdmVMaW5rcyxcbiAgICAgIHJlbW92ZVVucmVzb2x2ZWQgPSBfZGVmYXVsdE9wdGlvbnMkb3B0aW8ucmVtb3ZlVW5yZXNvbHZlZCxcbiAgICAgIHBhZ2luYXRlID0gX2RlZmF1bHRPcHRpb25zJG9wdGlvLnBhZ2luYXRlO1xuXG4gIHZhciBzeW5jT3B0aW9ucyA9IHtcbiAgICBwYWdpbmF0ZTogcGFnaW5hdGVcbiAgfTtcbiAgcmV0dXJuIGdldFN5bmNQYWdlKGh0dHAsIFtdLCBxdWVyeSwgc3luY09wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgLy8gY2xvbmVzIHJlc3BvbnNlLml0ZW1zIHVzZWQgaW4gaW5jbHVkZXMgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRoZXNlIHRvIGJlIG11dGF0ZWRcbiAgICBpZiAocmVzb2x2ZUxpbmtzKSB7XG4gICAgICByZXNwb25zZS5pdGVtcyA9IHJlc29sdmVSZXNwb25zZShyZXNwb25zZSwge1xuICAgICAgICByZW1vdmVVbnJlc29sdmVkOiByZW1vdmVVbnJlc29sdmVkLFxuICAgICAgICBpdGVtRW50cnlQb2ludHM6IFsnZmllbGRzJ11cbiAgICAgIH0pO1xuICAgIH0gLy8gbWFwcyByZXNwb25zZSBpdGVtcyBhZ2FpbiBhZnRlciBnZXR0ZXJzIGFyZSBhdHRhY2hlZFxuXG5cbiAgICB2YXIgbWFwcGVkUmVzcG9uc2VJdGVtcyA9IG1hcFJlc3BvbnNlSXRlbXMocmVzcG9uc2UuaXRlbXMpO1xuXG4gICAgaWYgKHJlc3BvbnNlLm5leHRTeW5jVG9rZW4pIHtcbiAgICAgIG1hcHBlZFJlc3BvbnNlSXRlbXMubmV4dFN5bmNUb2tlbiA9IHJlc3BvbnNlLm5leHRTeW5jVG9rZW47XG4gICAgfVxuXG4gICAgaWYgKHJlc3BvbnNlLm5leHRQYWdlVG9rZW4pIHtcbiAgICAgIG1hcHBlZFJlc3BvbnNlSXRlbXMubmV4dFBhZ2VUb2tlbiA9IHJlc3BvbnNlLm5leHRQYWdlVG9rZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyZWV6ZVN5cyhtaXhpblN0cmluZ2lmeVNhZmUodG9QbGFpbk9iamVjdChtYXBwZWRSZXNwb25zZUl0ZW1zKSkpO1xuICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PEVudGl0aWVzLkVudHJ5fEVudGl0aWVzLkFycmF5fFN5bmMuRGVsZXRlZEVudHJ5fFN5bmMuRGVsZXRlZEFzc2V0Pn0gaXRlbXNcbiAqIEByZXR1cm4ge09iamVjdH0gRW50aXRpZXMgbWFwcGVkIHRvIGFuIG9iamVjdCBmb3IgZWFjaCBlbnRpdHkgdHlwZVxuICovXG5cbmZ1bmN0aW9uIG1hcFJlc3BvbnNlSXRlbXMoaXRlbXMpIHtcbiAgdmFyIHJlZHVjZXIgPSBmdW5jdGlvbiByZWR1Y2VyKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjY3VtdWxhdGVkLCBpdGVtKSB7XG4gICAgICBpZiAoaXRlbS5zeXMudHlwZSA9PT0gdHlwZSkge1xuICAgICAgICBhY2N1bXVsYXRlZC5wdXNoKHRvUGxhaW5PYmplY3QoaXRlbSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWQ7XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGVudHJpZXM6IGl0ZW1zLnJlZHVjZShyZWR1Y2VyKCdFbnRyeScpLCBbXSksXG4gICAgYXNzZXRzOiBpdGVtcy5yZWR1Y2UocmVkdWNlcignQXNzZXQnKSwgW10pLFxuICAgIGRlbGV0ZWRFbnRyaWVzOiBpdGVtcy5yZWR1Y2UocmVkdWNlcignRGVsZXRlZEVudHJ5JyksIFtdKSxcbiAgICBkZWxldGVkQXNzZXRzOiBpdGVtcy5yZWR1Y2UocmVkdWNlcignRGVsZXRlZEFzc2V0JyksIFtdKVxuICB9O1xufVxuLyoqXG4gKiBJZiB0aGUgcmVzcG9uc2UgY29udGFpbnMgYSBuZXh0UGFnZVVybCwgZXh0cmFjdHMgdGhlIHN5bmMgdG9rZW4gdG8gZ2V0IHRoZVxuICogbmV4dCBwYWdlIGFuZCBjYWxscyBpdHNlbGYgYWdhaW4gd2l0aCB0aGF0IHRva2VuLlxuICogT3RoZXJ3aXNlLCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbnMgYSBuZXh0U3luY1VybCwgZXh0cmFjdHMgdGhlIHN5bmMgdG9rZW5cbiAqIGFuZCByZXR1cm5zIGl0LlxuICogT24gZWFjaCBjYWxsIG9mIHRoaXMgZnVuY3Rpb24sIGFueSByZXRyaWV2ZWQgaXRlbXMgYXJlIGNvbGxlY3RlZCBpbiB0aGVcbiAqIHN1cHBsaWVkIGl0ZW1zIGFycmF5LCB3aGljaCBnZXRzIHJldHVybmVkIGluIHRoZSBlbmRcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaHR0cFxuICogQHBhcmFtIHtBcnJheTxFbnRpdGllcy5FbnRyeXxFbnRpdGllcy5BcnJheXxTeW5jLkRlbGV0ZWRFbnRyeXxTeW5jLkRlbGV0ZWRBc3NldD59IGl0ZW1zXG4gKiBAcGFyYW0ge09iamVjdH0gcXVlcnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gU3luYyBwYWdlIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnBhZ2luYXRlID0gdHJ1ZV0gLSBJZiBmdXJ0aGVyIHN5bmMgcGFnZXMgc2hvdWxkIGF1dG9tYXRpY2FsbHkgYmUgY3Jhd2xlZFxuICogQHJldHVybiB7UHJvbWlzZTx7aXRlbXM6IEFycmF5LCBuZXh0U3luY1Rva2VuOiBzdHJpbmd9Pn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFN5bmNQYWdlKGh0dHAsIGl0ZW1zLCBxdWVyeSwgX3JlZikge1xuICB2YXIgcGFnaW5hdGUgPSBfcmVmLnBhZ2luYXRlO1xuXG4gIGlmIChxdWVyeS5uZXh0U3luY1Rva2VuKSB7XG4gICAgcXVlcnkuc3luY190b2tlbiA9IHF1ZXJ5Lm5leHRTeW5jVG9rZW47XG4gICAgZGVsZXRlIHF1ZXJ5Lm5leHRTeW5jVG9rZW47XG4gIH1cblxuICBpZiAocXVlcnkubmV4dFBhZ2VUb2tlbikge1xuICAgIHF1ZXJ5LnN5bmNfdG9rZW4gPSBxdWVyeS5uZXh0UGFnZVRva2VuO1xuICAgIGRlbGV0ZSBxdWVyeS5uZXh0UGFnZVRva2VuO1xuICB9XG5cbiAgaWYgKHF1ZXJ5LnN5bmNfdG9rZW4pIHtcbiAgICBkZWxldGUgcXVlcnkuaW5pdGlhbDtcbiAgICBkZWxldGUgcXVlcnkudHlwZTtcbiAgICBkZWxldGUgcXVlcnkuY29udGVudF90eXBlO1xuICAgIGRlbGV0ZSBxdWVyeS5saW1pdDtcbiAgfVxuXG4gIHJldHVybiBodHRwLmdldCgnc3luYycsIGNyZWF0ZVJlcXVlc3RDb25maWcoe1xuICAgIHF1ZXJ5OiBxdWVyeVxuICB9KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwge307XG4gICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoZGF0YS5pdGVtcyB8fCBbXSk7XG5cbiAgICBpZiAoZGF0YS5uZXh0UGFnZVVybCkge1xuICAgICAgaWYgKHBhZ2luYXRlKSB7XG4gICAgICAgIGRlbGV0ZSBxdWVyeS5pbml0aWFsO1xuICAgICAgICBxdWVyeS5zeW5jX3Rva2VuID0gZ2V0VG9rZW4oZGF0YS5uZXh0UGFnZVVybCk7XG4gICAgICAgIHJldHVybiBnZXRTeW5jUGFnZShodHRwLCBpdGVtcywgcXVlcnksIHtcbiAgICAgICAgICBwYWdpbmF0ZTogcGFnaW5hdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgbmV4dFBhZ2VUb2tlbjogZ2V0VG9rZW4oZGF0YS5uZXh0UGFnZVVybClcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkYXRhLm5leHRTeW5jVXJsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgIG5leHRTeW5jVG9rZW46IGdldFRva2VuKGRhdGEubmV4dFN5bmNVcmwpXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogW11cbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogRXh0cmFjdHMgdG9rZW4gb3V0IG9mIGFuIHVybFxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRva2VuKHVybCkge1xuICB2YXIgdXJsUGFydHMgPSB1cmwuc3BsaXQoJz8nKTtcbiAgcmV0dXJuIHVybFBhcnRzLmxlbmd0aCA+IDAgPyB1cmxQYXJ0c1sxXS5yZXBsYWNlKCdzeW5jX3Rva2VuPScsICcnKSA6ICcnO1xufSIsImZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuLypcbiogc2RrIHJlbGllcyBoZWF2aWx5IG9uIHN5cyBtZXRhZGF0YVxuKiBzbyB3ZSBjYW5ub3Qgb21pdCB0aGUgc3lzIHByb3BlcnR5IG9uIHNkayBsZXZlbCBlbnRpcmVseVxuKiBhbmQgd2UgaGF2ZSB0byBlbnN1cmUgdGhhdCBhdCBsZWFzdCBgaWRgIGFuZCBgdHlwZWAgYXJlIHByZXNlbnRcbiogKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZVNlbGVjdChxdWVyeSkge1xuICBpZiAoIXF1ZXJ5LnNlbGVjdCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBUaGUgc2VsZWN0aW9uIG9mIGZpZWxkcyBmb3IgdGhlIHF1ZXJ5IGlzIGxpbWl0ZWRcbiAgLy8gR2V0IHRoZSBkaWZmZXJlbnQgcGFydHMgdGhhdCBhcmUgbGlzdGVkIGZvciBzZWxlY3Rpb25cblxuXG4gIHZhciBhbGxTZWxlY3RzID0gcXVlcnkuc2VsZWN0LnNwbGl0KCcsJyk7IC8vIE1vdmUgdGhlIHBhcnRzIGludG8gYSBzZXQgZm9yIGVhc3kgYWNjZXNzIGFuZCBkZWR1cGxpY2F0aW9uXG5cbiAgdmFyIHNlbGVjdGVkU2V0ID0gbmV3IFNldChhbGxTZWxlY3RzKTsgLy8gSWYgd2UgYWxyZWFkeSBzZWxlY3QgYWxsIG9mIGBzeXNgIHdlIGNhbiBqdXN0IHJldHVyblxuICAvLyBzaW5jZSB3ZSdyZSBhbnl3YXkgZmV0Y2hpbmcgZXZlcnl0aGluZyB0aGF0IGlzIG5lZWRlZFxuXG4gIGlmIChzZWxlY3RlZFNldC5oYXMoJ3N5cycpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdlIGRvbid0IHNlbGVjdCBgc3lzYCBzbyB3ZSBuZWVkIHRvIGVuc3VyZSB0aGUgbWluaW11bSBzZXRcblxuXG4gIHNlbGVjdGVkU2V0LmFkZCgnc3lzLmlkJyk7XG4gIHNlbGVjdGVkU2V0LmFkZCgnc3lzLnR5cGUnKTsgLy8gUmVhc3NpZ24gdGhlIG5vcm1hbGl6ZWQgc3lzIHByb3BlcnRpZXNcblxuICBxdWVyeS5zZWxlY3QgPSBfdG9Db25zdW1hYmxlQXJyYXkoc2VsZWN0ZWRTZXQpLmpvaW4oJywnKTtcbn0iLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBDb250ZW50ZnVsIERlbGl2ZXJ5IEFQSSBDbGllbnQuIENvbnRhaW5zIG1ldGhvZHMgd2hpY2ggYWxsb3cgYWNjZXNzIHRvIHRoZVxuICogZGlmZmVyZW50IGtpbmRzIG9mIGVudGl0aWVzIHByZXNlbnQgaW4gQ29udGVudGZ1bCAoRW50cmllcywgQXNzZXRzLCBldGMpLlxuICogQG5hbWVzcGFjZSBDb250ZW50ZnVsQ2xpZW50QVBJXG4gKiBAc2VlIEVudGl0aWVzXG4gKi9cblxuLyoqXG4gKiBUaGUgZGlmZmVyZW50IGtpbmRzIG9mIHRvcCBsZXZlbCBlbnRpdGllcyB5b3UgY2FuIGZpbmQgaW4gQ29udGVudGZ1bFxuICogQG5hbWVzcGFjZSBFbnRpdGllc1xuICovXG5cbi8qKlxuICogU3lzdGVtIG1ldGFkYXRhLiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9yZWZlcmVuY2VzL2NvbnRlbnQtZGVsaXZlcnktYXBpLyMvaW50cm9kdWN0aW9uL2NvbW1vbi1yZXNvdXJjZS1hdHRyaWJ1dGVzXCI+Q29tbW9uIFJlc291cmNlIEF0dHJpYnV0ZXM8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIFN5c1xuICogQHByb3Age3N0cmluZ30gdHlwZVxuICogQHByb3Age3N0cmluZ30gaWRcbiAqIEBwcm9wIHtFbnRpdGllcy5MaW5rfSBzcGFjZVxuICogQHByb3Age3N0cmluZ30gY3JlYXRlZEF0XG4gKiBAcHJvcCB7c3RyaW5nfSB1cGRhdGVkQXRcbiAqIEBwcm9wIHtudW1iZXJ9IHJldmlzaW9uXG4gKi9cblxuLyoqXG4gKiBMaW5rIHRvIGFub3RoZXIgZW50aXR5LiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9jb25jZXB0cy9saW5rcy9cIj5MaW5rczwvYT4gZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgTGlua1xuICogQHByb3Age3N0cmluZ30gdHlwZSAtIHR5cGUgb2YgdGhpcyBlbnRpdHkuIEFsd2F5cyBsaW5rLlxuICogQHByb3Age3N0cmluZ30gaWRcbiAqIEBwcm9wIHtzdHJpbmd9IGxpbmtUeXBlIC0gdHlwZSBvZiB0aGlzIGxpbmsuIElmIGRlZmluZWQsIGVpdGhlciBFbnRyeSBvciBBc3NldFxuICovXG5cbi8qKlxuICogQG1lbWJlcm9mIENvbnRlbnRmdWxDbGllbnRBUElcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENsaWVudEFQSVxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRTcGFjZVxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRDb250ZW50VHlwZVxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRDb250ZW50VHlwZXNcbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2V0RW50cnlcbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2V0RW50cmllc1xuICogQHByb3Age2Z1bmN0aW9ufSBnZXRBc3NldFxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRBc3NldHNcbiAqIEBwcm9wIHtmdW5jdGlvbn0gcGFyc2VFbnRyaWVzXG4gKiBAcHJvcCB7ZnVuY3Rpb259IHN5bmNcbiAqL1xuaW1wb3J0IHsgY3JlYXRlUmVxdWVzdENvbmZpZyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuaW1wb3J0IGVudGl0aWVzIGZyb20gJy4vZW50aXRpZXMnO1xuaW1wb3J0IHBhZ2VkU3luYyBmcm9tICcuL3BhZ2VkLXN5bmMnO1xuaW1wb3J0IG5vcm1hbGl6ZVNlbGVjdCBmcm9tICcuL3V0aWxzL25vcm1hbGl6ZS1zZWxlY3QnO1xuLyoqXG4gKiBDcmVhdGVzIEFQSSBvYmplY3Qgd2l0aCBtZXRob2RzIHRvIGFjY2VzcyBmdW5jdGlvbmFsaXR5IGZyb20gQ29udGVudGZ1bCdzXG4gKiBEZWxpdmVyeSBBUElcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gQVBJIGluaXRpYWxpemF0aW9uIHBhcmFtc1xuICogQHByb3Age09iamVjdH0gaHR0cCAtIEhUVFAgY2xpZW50IGluc3RhbmNlXG4gKiBAcHJvcCB7T2JqZWN0fSBlbnRpdGllcyAtIE9iamVjdCB3aXRoIHdyYXBwZXIgbWV0aG9kcyBmb3IgZWFjaCBraW5kIG9mIGVudGl0eVxuICogQHByb3Age0Z1bmN0aW9ufSBnZXRHbG9iYWxPcHRpb25zIC0gTGluayByZXNvbHZlciBwcmVjb25maWd1cmVkIHdpdGggZ2xvYmFsIHNldHRpbmdcbiAqIEByZXR1cm4ge0NsaWVudEFQSX1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDb250ZW50ZnVsQXBpKF9yZWYpIHtcbiAgdmFyIGh0dHAgPSBfcmVmLmh0dHAsXG4gICAgICBnZXRHbG9iYWxPcHRpb25zID0gX3JlZi5nZXRHbG9iYWxPcHRpb25zO1xuICB2YXIgd3JhcFNwYWNlID0gZW50aXRpZXMuc3BhY2Uud3JhcFNwYWNlO1xuICB2YXIgX2VudGl0aWVzJGNvbnRlbnRUeXBlID0gZW50aXRpZXMuY29udGVudFR5cGUsXG4gICAgICB3cmFwQ29udGVudFR5cGUgPSBfZW50aXRpZXMkY29udGVudFR5cGUud3JhcENvbnRlbnRUeXBlLFxuICAgICAgd3JhcENvbnRlbnRUeXBlQ29sbGVjdGlvbiA9IF9lbnRpdGllcyRjb250ZW50VHlwZS53cmFwQ29udGVudFR5cGVDb2xsZWN0aW9uO1xuICB2YXIgX2VudGl0aWVzJGVudHJ5ID0gZW50aXRpZXMuZW50cnksXG4gICAgICB3cmFwRW50cnkgPSBfZW50aXRpZXMkZW50cnkud3JhcEVudHJ5LFxuICAgICAgd3JhcEVudHJ5Q29sbGVjdGlvbiA9IF9lbnRpdGllcyRlbnRyeS53cmFwRW50cnlDb2xsZWN0aW9uO1xuICB2YXIgX2VudGl0aWVzJGFzc2V0ID0gZW50aXRpZXMuYXNzZXQsXG4gICAgICB3cmFwQXNzZXQgPSBfZW50aXRpZXMkYXNzZXQud3JhcEFzc2V0LFxuICAgICAgd3JhcEFzc2V0Q29sbGVjdGlvbiA9IF9lbnRpdGllcyRhc3NldC53cmFwQXNzZXRDb2xsZWN0aW9uO1xuICB2YXIgd3JhcExvY2FsZUNvbGxlY3Rpb24gPSBlbnRpdGllcy5sb2NhbGUud3JhcExvY2FsZUNvbGxlY3Rpb247XG5cbiAgdmFyIG5vdEZvdW5kRXJyb3IgPSBmdW5jdGlvbiBub3RGb3VuZEVycm9yKGlkKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdUaGUgcmVzb3VyY2UgY291bGQgbm90IGJlIGZvdW5kLicpO1xuICAgIGVycm9yLnN5cyA9IHtcbiAgICAgIHR5cGU6ICdFcnJvcicsXG4gICAgICBpZDogJ05vdEZvdW5kJ1xuICAgIH07XG4gICAgZXJyb3IuZGV0YWlscyA9IHtcbiAgICAgIHR5cGU6ICdFbnRyeScsXG4gICAgICBpZDogaWQsXG4gICAgICBlbnZpcm9ubWVudDogZ2V0R2xvYmFsT3B0aW9ucygpLmVudmlyb25tZW50LFxuICAgICAgc3BhY2U6IGdldEdsb2JhbE9wdGlvbnMoKS5zcGFjZVxuICAgIH07XG4gICAgcmV0dXJuIGVycm9yO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnJvcikge1xuICAgIGlmIChlcnJvci5kYXRhKSB7XG4gICAgICB0aHJvdyBlcnJvci5kYXRhO1xuICAgIH1cblxuICAgIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhKSB7XG4gICAgICB0aHJvdyBlcnJvci5yZXNwb25zZS5kYXRhO1xuICAgIH1cblxuICAgIHRocm93IGVycm9yO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBTcGFjZSB3aGljaCB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBjb25maWd1cmVkIHRvIHVzZVxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEVudGl0aWVzLlNwYWNlPn0gUHJvbWlzZSBmb3IgYSBTcGFjZVxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqIC8vIHJldHVybnMgdGhlIHNwYWNlIG9iamVjdCB3aXRoIHRoZSBhYm92ZSA8c3BhY2UtaWQ+XG4gICAqIGNsaWVudC5nZXRTcGFjZSgpXG4gICAqIC50aGVuKChzcGFjZSkgPT4gY29uc29sZS5sb2coc3BhY2UpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTcGFjZSgpIHtcbiAgICBzd2l0Y2hUb1NwYWNlKGh0dHApO1xuICAgIHJldHVybiBodHRwLmdldCgnJykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiB3cmFwU3BhY2UocmVzcG9uc2UuZGF0YSk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIENvbnRlbnQgVHlwZVxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGlkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuQ29udGVudFR5cGU+fSBQcm9taXNlIGZvciBhIENvbnRlbnQgVHlwZVxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRDb250ZW50VHlwZSgnPGNvbnRlbnRfdHlwZV9pZD4nKVxuICAgKiAudGhlbigoY29udGVudFR5cGUpID0+IGNvbnNvbGUubG9nKGNvbnRlbnRUeXBlKSlcbiAgICogLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0Q29udGVudFR5cGUoaWQpIHtcbiAgICBzd2l0Y2hUb0Vudmlyb25tZW50KGh0dHApO1xuICAgIHJldHVybiBodHRwLmdldCgnY29udGVudF90eXBlcy8nICsgaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gd3JhcENvbnRlbnRUeXBlKHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYSBjb2xsZWN0aW9uIG9mIENvbnRlbnQgVHlwZXNcbiAgICogQG1lbWJlcm9mIENvbnRlbnRmdWxDbGllbnRBUElcbiAgICogQHBhcmFtICB7T2JqZWN0PX0gcXVlcnkgLSBPYmplY3Qgd2l0aCBzZWFyY2ggcGFyYW1ldGVycy4gQ2hlY2sgdGhlIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvamF2YXNjcmlwdC90dXRvcmlhbHMvdXNpbmctanMtY2RhLXNkay8jcmV0cmlldmluZy1lbnRyaWVzLXdpdGgtc2VhcmNoLXBhcmFtZXRlcnNcIj5KUyBTREsgdHV0b3JpYWw8L2E+IGFuZCB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9yZWZlcmVuY2VzL2NvbnRlbnQtZGVsaXZlcnktYXBpLyMvcmVmZXJlbmNlL3NlYXJjaC1wYXJhbWV0ZXJzXCI+UkVTVCBBUEkgcmVmZXJlbmNlPC9hPiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEVudGl0aWVzLkNvbnRlbnRUeXBlQ29sbGVjdGlvbj59IFByb21pc2UgZm9yIGEgY29sbGVjdGlvbiBvZiBDb250ZW50IFR5cGVzXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAgICpcbiAgICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICAgKiAgIHNwYWNlOiAnPHNwYWNlX2lkPicsXG4gICAqICAgYWNjZXNzVG9rZW46ICc8Y29udGVudF9kZWxpdmVyeV9hcGlfa2V5PidcbiAgICogfSlcbiAgICpcbiAgICogY2xpZW50LmdldENvbnRlbnRUeXBlcygpXG4gICAqIC50aGVuKChyZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzcG9uc2UuaXRlbXMpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRDb250ZW50VHlwZXMoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBzd2l0Y2hUb0Vudmlyb25tZW50KGh0dHApO1xuICAgIHJldHVybiBodHRwLmdldCgnY29udGVudF90eXBlcycsIGNyZWF0ZVJlcXVlc3RDb25maWcoe1xuICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gd3JhcENvbnRlbnRUeXBlQ29sbGVjdGlvbihyZXNwb25zZS5kYXRhKTtcbiAgICB9LCBlcnJvckhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuIEVudHJ5XG4gICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICAqIEBwYXJhbSAge3N0cmluZ30gaWRcbiAgICogQHBhcmFtICB7T2JqZWN0PX0gcXVlcnkgLSBPYmplY3Qgd2l0aCBzZWFyY2ggcGFyYW1ldGVycy4gSW4gdGhpcyBtZXRob2QgaXQncyBvbmx5IHVzZWZ1bCBmb3IgYGxvY2FsZWAuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuRW50cnk+fSBQcm9taXNlIGZvciBhbiBFbnRyeVxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRFbnRyeSgnPGVudHJ5X2lkPicpXG4gICAqIC50aGVuKChlbnRyeSkgPT4gY29uc29sZS5sb2coZW50cnkpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRFbnRyeShpZCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qobm90Rm91bmRFcnJvcihpZCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldEVudHJpZXMoX29iamVjdFNwcmVhZCh7XG4gICAgICAnc3lzLmlkJzogaWRcbiAgICB9LCBxdWVyeSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2UuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gd3JhcEVudHJ5KHJlc3BvbnNlLml0ZW1zWzBdKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbm90Rm91bmRFcnJvcihpZCk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIGNvbGxlY3Rpb24gb2YgRW50cmllc1xuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtPYmplY3Q9fSBxdWVyeSAtIE9iamVjdCB3aXRoIHNlYXJjaCBwYXJhbWV0ZXJzLiBDaGVjayB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9qYXZhc2NyaXB0L3R1dG9yaWFscy91c2luZy1qcy1jZGEtc2RrLyNyZXRyaWV2aW5nLWVudHJpZXMtd2l0aC1zZWFyY2gtcGFyYW1ldGVyc1wiPkpTIFNESyB0dXRvcmlhbDwvYT4gYW5kIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvY29udGVudC1kZWxpdmVyeS1hcGkvIy9yZWZlcmVuY2Uvc2VhcmNoLXBhcmFtZXRlcnNcIj5SRVNUIEFQSSByZWZlcmVuY2U8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuRW50cnlDb2xsZWN0aW9uPn0gUHJvbWlzZSBmb3IgYSBjb2xsZWN0aW9uIG9mIEVudHJpZXNcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICAgKlxuICAgKiBjb25zdCBjbGllbnQgPSBjb250ZW50ZnVsLmNyZWF0ZUNsaWVudCh7XG4gICAqICAgc3BhY2U6ICc8c3BhY2VfaWQ+JyxcbiAgICogICBhY2Nlc3NUb2tlbjogJzxjb250ZW50X2RlbGl2ZXJ5X2FwaV9rZXk+J1xuICAgKiB9KVxuICAgKlxuICAgKiBjbGllbnQuZ2V0RW50cmllcygpXG4gICAqIC50aGVuKChyZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzcG9uc2UuaXRlbXMpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRFbnRyaWVzKCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcblxuICAgIHZhciBfZ2V0R2xvYmFsT3B0aW9ucyA9IGdldEdsb2JhbE9wdGlvbnMocXVlcnkpLFxuICAgICAgICByZXNvbHZlTGlua3MgPSBfZ2V0R2xvYmFsT3B0aW9ucy5yZXNvbHZlTGlua3MsXG4gICAgICAgIHJlbW92ZVVucmVzb2x2ZWQgPSBfZ2V0R2xvYmFsT3B0aW9ucy5yZW1vdmVVbnJlc29sdmVkO1xuXG4gICAgbm9ybWFsaXplU2VsZWN0KHF1ZXJ5KTtcbiAgICByZXR1cm4gaHR0cC5nZXQoJ2VudHJpZXMnLCBjcmVhdGVSZXF1ZXN0Q29uZmlnKHtcbiAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHdyYXBFbnRyeUNvbGxlY3Rpb24ocmVzcG9uc2UuZGF0YSwge1xuICAgICAgICByZXNvbHZlTGlua3M6IHJlc29sdmVMaW5rcyxcbiAgICAgICAgcmVtb3ZlVW5yZXNvbHZlZDogcmVtb3ZlVW5yZXNvbHZlZFxuICAgICAgfSk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhbiBBc3NldFxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGlkXG4gICAqIEBwYXJhbSAge09iamVjdD19IHF1ZXJ5IC0gT2JqZWN0IHdpdGggc2VhcmNoIHBhcmFtZXRlcnMuIEluIHRoaXMgbWV0aG9kIGl0J3Mgb25seSB1c2VmdWwgZm9yIGBsb2NhbGVgLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEVudGl0aWVzLkFzc2V0Pn0gUHJvbWlzZSBmb3IgYW4gQXNzZXRcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICAgKlxuICAgKiBjb25zdCBjbGllbnQgPSBjb250ZW50ZnVsLmNyZWF0ZUNsaWVudCh7XG4gICAqICAgc3BhY2U6ICc8c3BhY2VfaWQ+JyxcbiAgICogICBhY2Nlc3NUb2tlbjogJzxjb250ZW50X2RlbGl2ZXJ5X2FwaV9rZXk+J1xuICAgKiB9KVxuICAgKlxuICAgKiBjbGllbnQuZ2V0QXNzZXQoJzxhc3NldF9pZD4nKVxuICAgKiAudGhlbigoYXNzZXQpID0+IGNvbnNvbGUubG9nKGFzc2V0KSlcbiAgICogLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0QXNzZXQoaWQpIHtcbiAgICB2YXIgcXVlcnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHN3aXRjaFRvRW52aXJvbm1lbnQoaHR0cCk7XG4gICAgbm9ybWFsaXplU2VsZWN0KHF1ZXJ5KTtcbiAgICByZXR1cm4gaHR0cC5nZXQoJ2Fzc2V0cy8nICsgaWQsIGNyZWF0ZVJlcXVlc3RDb25maWcoe1xuICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gd3JhcEFzc2V0KHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYSBjb2xsZWN0aW9uIG9mIEFzc2V0c1xuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtPYmplY3Q9fSBxdWVyeSAtIE9iamVjdCB3aXRoIHNlYXJjaCBwYXJhbWV0ZXJzLiBDaGVjayB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9qYXZhc2NyaXB0L3R1dG9yaWFscy91c2luZy1qcy1jZGEtc2RrLyNyZXRyaWV2aW5nLWVudHJpZXMtd2l0aC1zZWFyY2gtcGFyYW1ldGVyc1wiPkpTIFNESyB0dXRvcmlhbDwvYT4gYW5kIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvY29udGVudC1kZWxpdmVyeS1hcGkvIy9yZWZlcmVuY2Uvc2VhcmNoLXBhcmFtZXRlcnNcIj5SRVNUIEFQSSByZWZlcmVuY2U8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuQXNzZXRDb2xsZWN0aW9uPn0gUHJvbWlzZSBmb3IgYSBjb2xsZWN0aW9uIG9mIEFzc2V0c1xuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRBc3NldHMoKVxuICAgKiAudGhlbigocmVzcG9uc2UpID0+IGNvbnNvbGUubG9nKHJlc3BvbnNlLml0ZW1zKSlcbiAgICogLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0QXNzZXRzKCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcbiAgICBub3JtYWxpemVTZWxlY3QocXVlcnkpO1xuICAgIHJldHVybiBodHRwLmdldCgnYXNzZXRzJywgY3JlYXRlUmVxdWVzdENvbmZpZyh7XG4gICAgICBxdWVyeTogcXVlcnlcbiAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiB3cmFwQXNzZXRDb2xsZWN0aW9uKHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYSBjb2xsZWN0aW9uIG9mIExvY2FsZVxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtPYmplY3Q9fSBxdWVyeSAtIE9iamVjdCB3aXRoIHNlYXJjaCBwYXJhbWV0ZXJzLiBDaGVjayB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9qYXZhc2NyaXB0L3R1dG9yaWFscy91c2luZy1qcy1jZGEtc2RrLyNyZXRyaWV2aW5nLWVudHJpZXMtd2l0aC1zZWFyY2gtcGFyYW1ldGVyc1wiPkpTIFNESyB0dXRvcmlhbDwvYT4gYW5kIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvY29udGVudC1kZWxpdmVyeS1hcGkvIy9yZWZlcmVuY2Uvc2VhcmNoLXBhcmFtZXRlcnNcIj5SRVNUIEFQSSByZWZlcmVuY2U8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuTG9jYWxlQ29sbGVjdGlvbj59IFByb21pc2UgZm9yIGEgY29sbGVjdGlvbiBvZiBMb2NhbGVcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICAgKlxuICAgKiBjb25zdCBjbGllbnQgPSBjb250ZW50ZnVsLmNyZWF0ZUNsaWVudCh7XG4gICAqICAgc3BhY2U6ICc8c3BhY2VfaWQ+JyxcbiAgICogICBhY2Nlc3NUb2tlbjogJzxjb250ZW50X2RlbGl2ZXJ5X2FwaV9rZXk+J1xuICAgKiB9KVxuICAgKlxuICAgKiBjbGllbnQuZ2V0TG9jYWxlcygpXG4gICAqIC50aGVuKChyZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzcG9uc2UuaXRlbXMpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRMb2NhbGVzKCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcbiAgICByZXR1cm4gaHR0cC5nZXQoJ2xvY2FsZXMnLCBjcmVhdGVSZXF1ZXN0Q29uZmlnKHtcbiAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHdyYXBMb2NhbGVDb2xsZWN0aW9uKHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIFN5bmNocm9uaXplcyBlaXRoZXIgYWxsIHRoZSBjb250ZW50IG9yIG9ubHkgbmV3IGNvbnRlbnQgc2luY2UgbGFzdCBzeW5jXG4gICAqIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL2NvbmNlcHRzL3N5bmMvXCI+U3luY2hyb25pemF0aW9uPC9hPiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogPHN0cm9uZz4gSW1wb3J0YW50IG5vdGU6IDwvc3Ryb25nPiBUaGUgdGhlIHN5bmMgYXBpIGVuZHBvaW50IGRvZXMgbm90IHN1cHBvcnQgaW5jbHVkZSBvciBsaW5rIHJlc29sdXRpb24uXG4gICAqIEhvd2V2ZXIgY29udGVudGZ1bC5qcyBpcyBkb2luZyBsaW5rIHJlc29sdXRpb24gY2xpZW50IHNpZGUgaWYgeW91IG9ubHkgbWFrZSBhbiBpbml0aWFsIHN5bmMuXG4gICAqIEZvciB0aGUgZGVsdGEgc3luYyAodXNpbmcgbmV4dFN5bmNUb2tlbikgaXQgaXMgbm90IHBvc3NpYmxlIHNpbmNlIHRoZSBzZGsgd29udCBoYXZlIGFjY2VzcyB0byBhbGwgdGhlIGRhdGEgdG8gbWFrZSBzdWNoIGFuIG9wZXJhdGlvbi5cbiAgICogQG1lbWJlcm9mIENvbnRlbnRmdWxDbGllbnRBUElcbiAgICogQHBhcmFtICB7T2JqZWN0fSBxdWVyeSAtIFF1ZXJ5IG9iamVjdCBmb3IgdGhlIHN5bmMgY2FsbC4gT25lIG9mIGluaXRpYWwgb3IgbmV4dFN5bmNUb2tlbiBhbHdheXMgbmVlZHMgdG8gYmUgc3BlY2lmaWVkLCBidXQgbm90IGJvdGguXG4gICAqIEBwYXJhbSAge2Jvb2xlYW4/fSBxdWVyeS5pbml0aWFsIC0gSW5kaWNhdGVzIGlmIHRoaXMgaXMgdGhlIGZpcnN0IHN5bmMuIFVzZSBpdCBpZiB5b3UgZG9uJ3QgaGF2ZSBhIHN5bmMgdG9rZW4uXG4gICAqIEBwYXJhbSAge3N0cmluZz99IHF1ZXJ5Lm5leHRTeW5jVG9rZW4gLSBUaGUgdG9rZW4geW91IGdvdCB0aGUgbGFzdCB0aW1lIHlvdSB1c2VkIHRoaXMgbWV0aG9kLiBFbnN1cmVzIHlvdSBvbmx5IGdldCBjaGFuZ2VkIGNvbnRlbnQuXG4gICAqIEBwYXJhbSAge3N0cmluZz19IHF1ZXJ5LnR5cGUgLSBGaWx0ZXIgYnkgdGhpcyB0eXBlIChhbGwgKGRlZmF1bHQpLCBFbnRyeSwgQXNzZXQsIERlbGV0aW9uLCBEZWxldGVkQXNzZXQgb3IgRGVsZXRlZEVudHJ5KVxuICAgKiBAcGFyYW0gIHtzdHJpbmc9fSBxdWVyeS5jb250ZW50X3R5cGUgLSBGaWx0ZXIgYnkgdGhpcyBjb250ZW50IHR5cGUgaWRcbiAgICogQHBhcmFtICB7Ym9vbGVhbj19IHF1ZXJ5LnJlc29sdmVMaW5rcyAtIFdoZW4gdHJ1ZSwgbGlua3MgdG8gb3RoZXIgRW50cmllcyBvciBBc3NldHMgYXJlIHJlc29sdmVkLiBEZWZhdWx0OiB0cnVlLlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtICB7Ym9vbGVhbj19IFtvcHRpb25zLnBhZ2luYXRlID0gdHJ1ZV0gLSBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBwYWdpbmF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8U3luYy5TeW5jQ29sbGVjdGlvbj59IFByb21pc2UgZm9yIHRoZSBjb2xsZWN0aW9uIHJlc3VsdGluZyBvZiBhIHN5bmMgb3BlcmF0aW9uXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAgICpcbiAgICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICAgKiAgIHNwYWNlOiAnPHNwYWNlX2lkPicsXG4gICAqICAgYWNjZXNzVG9rZW46ICc8Y29udGVudF9kZWxpdmVyeV9hcGlfa2V5PidcbiAgICogfSlcbiAgICpcbiAgICogY2xpZW50LnN5bmMoe1xuICAgKiAgIGluaXRpYWw6IHRydWVcbiAgICogfSlcbiAgICogLnRoZW4oKHJlc3BvbnNlKSA9PiBjb25zb2xlLmxvZyh7XG4gICAqICAgZW50cmllczogcmVzcG9uc2UuZW50cmllcyxcbiAgICogICBhc3NldHM6IHJlc3BvbnNlLmFzc2V0cyxcbiAgICogICBuZXh0U3luY1Rva2VuOiByZXNwb25zZS5uZXh0U3luY1Rva2VuXG4gICAqIH0pKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBzeW5jKCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIHBhZ2luYXRlOiB0cnVlXG4gICAgfTtcblxuICAgIHZhciBfZ2V0R2xvYmFsT3B0aW9uczIgPSBnZXRHbG9iYWxPcHRpb25zKHF1ZXJ5KSxcbiAgICAgICAgcmVzb2x2ZUxpbmtzID0gX2dldEdsb2JhbE9wdGlvbnMyLnJlc29sdmVMaW5rcyxcbiAgICAgICAgcmVtb3ZlVW5yZXNvbHZlZCA9IF9nZXRHbG9iYWxPcHRpb25zMi5yZW1vdmVVbnJlc29sdmVkO1xuXG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcbiAgICByZXR1cm4gcGFnZWRTeW5jKGh0dHAsIHF1ZXJ5LCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHJlc29sdmVMaW5rczogcmVzb2x2ZUxpbmtzLFxuICAgICAgcmVtb3ZlVW5yZXNvbHZlZDogcmVtb3ZlVW5yZXNvbHZlZFxuICAgIH0sIG9wdGlvbnMpKTtcbiAgfVxuICAvKipcbiAgKiBQYXJzZSByYXcganNvbiBkYXRhIGludG8gY29sbGVjdGlvbiBvZiBlbnRyeSBvYmplY3RzLkxpbmtzIHdpbGwgYmUgcmVzb2x2ZWQgYWxzb1xuICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICogQHBhcmFtIHtPYmplY3R9IHJhdyBqc29uIGRhdGFcbiAgKiBAZXhhbXBsZVxuICAqIGxldCBkYXRhID0ge2l0ZW1zOiBbXG4gICogICAge1xuICAqICAgIHN5czoge3R5cGU6ICdFbnRyeScsIGxvY2FsZTogJ2VuLVVTJ30sXG4gICogICAgZmllbGRzOiB7XG4gICogICAgICBhbmltYWw6IHtzeXM6IHt0eXBlOiAnTGluaycsIGxpbmtUeXBlOiAnQW5pbWFsJywgaWQ6ICdvaW5rJ319LFxuICAqICAgICAgYW5vdGhlcmFuaW1hbDoge3N5czoge3R5cGU6ICdMaW5rJywgbGlua1R5cGU6ICdBbmltYWwnLCBpZDogJ21pZGRsZS1wYXJyb3QnfX1cbiAgKiAgICB9XG4gICogIH1cbiAgKiBdLFxuICAqIGluY2x1ZGVzOiB7XG4gICogIEFuaW1hbDogW1xuICAqICAgIHtcbiAgKiAgICAgIHN5czoge3R5cGU6ICdBbmltYWwnLCBpZDogJ29pbmsnLCBsb2NhbGU6ICdlbi1VUyd9LFxuICAqICAgICAgZmllbGRzOiB7XG4gICogICAgICAgIG5hbWU6ICdQaWcnLFxuICAqICAgICAgICBmcmllbmQ6IHtzeXM6IHt0eXBlOiAnTGluaycsIGxpbmtUeXBlOiAnQW5pbWFsJywgaWQ6ICdncm91bmRob2cnfX1cbiAgKiAgICAgIH1cbiAgKiAgICB9XG4gICogICBdXG4gICogIH1cbiAgKiB9XG4gICogY29uc29sZS5sb2coIGRhdGEuaXRlbXNbMF0uZmllbGRzLmZvbyApOyAvLyB1bmRlZmluZWRcbiAgKiBsZXQgcGFyc2VkRGF0YSA9IGNsaWVudC5wYXJzZUVudHJpZXMoZGF0YSk7XG4gICogY29uc29sZS5sb2coIHBhcnNlZERhdGEuaXRlbXNbMF0uZmllbGRzLmZvbyApOyAvLyBmb29cbiAgKi9cblxuXG4gIGZ1bmN0aW9uIHBhcnNlRW50cmllcyhkYXRhKSB7XG4gICAgdmFyIF9nZXRHbG9iYWxPcHRpb25zMyA9IGdldEdsb2JhbE9wdGlvbnMoe30pLFxuICAgICAgICByZXNvbHZlTGlua3MgPSBfZ2V0R2xvYmFsT3B0aW9uczMucmVzb2x2ZUxpbmtzLFxuICAgICAgICByZW1vdmVVbnJlc29sdmVkID0gX2dldEdsb2JhbE9wdGlvbnMzLnJlbW92ZVVucmVzb2x2ZWQ7XG5cbiAgICByZXR1cm4gd3JhcEVudHJ5Q29sbGVjdGlvbihkYXRhLCB7XG4gICAgICByZXNvbHZlTGlua3M6IHJlc29sdmVMaW5rcyxcbiAgICAgIHJlbW92ZVVucmVzb2x2ZWQ6IHJlbW92ZVVucmVzb2x2ZWRcbiAgICB9KTtcbiAgfVxuICAvKlxuICAgKiBTd2l0Y2hlcyBCYXNlVVJMIHRvIHVzZSAvZW52aXJvbm1lbnRzIHBhdGhcbiAgICogKi9cblxuXG4gIGZ1bmN0aW9uIHN3aXRjaFRvRW52aXJvbm1lbnQoaHR0cCkge1xuICAgIGh0dHAuZGVmYXVsdHMuYmFzZVVSTCA9IGdldEdsb2JhbE9wdGlvbnMoKS5lbnZpcm9ubWVudEJhc2VVcmw7XG4gIH1cbiAgLypcbiAgICogU3dpdGNoZXMgQmFzZVVSTCB0byB1c2UgL3NwYWNlcyBwYXRoXG4gICAqICovXG5cblxuICBmdW5jdGlvbiBzd2l0Y2hUb1NwYWNlKGh0dHApIHtcbiAgICBodHRwLmRlZmF1bHRzLmJhc2VVUkwgPSBnZXRHbG9iYWxPcHRpb25zKCkuc3BhY2VCYXNlVXJsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRTcGFjZTogZ2V0U3BhY2UsXG4gICAgZ2V0Q29udGVudFR5cGU6IGdldENvbnRlbnRUeXBlLFxuICAgIGdldENvbnRlbnRUeXBlczogZ2V0Q29udGVudFR5cGVzLFxuICAgIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgICBnZXRFbnRyaWVzOiBnZXRFbnRyaWVzLFxuICAgIGdldEFzc2V0OiBnZXRBc3NldCxcbiAgICBnZXRBc3NldHM6IGdldEFzc2V0cyxcbiAgICBnZXRMb2NhbGVzOiBnZXRMb2NhbGVzLFxuICAgIHBhcnNlRW50cmllczogcGFyc2VFbnRyaWVzLFxuICAgIHN5bmM6IHN5bmNcbiAgfTtcbn0iLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBDb250ZW50ZnVsIERlbGl2ZXJ5IEFQSSBTREsuIEFsbG93cyB5b3UgdG8gY3JlYXRlIGluc3RhbmNlcyBvZiBhIGNsaWVudFxuICogd2l0aCBhY2Nlc3MgdG8gdGhlIENvbnRlbnRmdWwgQ29udGVudCBEZWxpdmVyeSBBUEkuXG4gKiBAbmFtZXNwYWNlIGNvbnRlbnRmdWxcbiAqIEBzZWUgQ29udGVudGZ1bENsaWVudEFQSVxuICovXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgY3JlYXRlSHR0cENsaWVudCwgZ2V0VXNlckFnZW50SGVhZGVyIH0gZnJvbSAnY29udGVudGZ1bC1zZGstY29yZSc7XG5pbXBvcnQgY3JlYXRlQ29udGVudGZ1bEFwaSBmcm9tICcuL2NyZWF0ZS1jb250ZW50ZnVsLWFwaSc7XG5pbXBvcnQgY3JlYXRlR2xvYmFsT3B0aW9ucyBmcm9tICcuL2NyZWF0ZS1nbG9iYWwtb3B0aW9ucyc7XG4vKipcbiAqIENyZWF0ZSBhIGNsaWVudCBpbnN0YW5jZVxuICogQGZ1bmNcbiAqIEBuYW1lIGNyZWF0ZUNsaWVudFxuICogQG1lbWJlcm9mIGNvbnRlbnRmdWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBDbGllbnQgaW5pdGlhbGl6YXRpb24gcGFyYW1ldGVyc1xuICogQHByb3Age3N0cmluZ30gcGFyYW1zLnNwYWNlIC0gU3BhY2UgSURcbiAqIEBwcm9wIHtzdHJpbmd9IHBhcmFtcy5hY2Nlc3NUb2tlbiAtIENvbnRlbnRmdWwgQ0RBIEFjY2VzcyBUb2tlblxuICogQHByb3Age3N0cmluZ30gW3BhcmFtcy5lbnZpcm9ubWVudD1cIm1hc3RlclwiXSAtIENvbnRlbnRmdWwgRW52aXJvbm1lbnQgSURcbiAqIEBwcm9wIHtib29sZWFuPX0gcGFyYW1zLmluc2VjdXJlIC0gUmVxdWVzdHMgd2lsbCBiZSBtYWRlIG92ZXIgaHR0cCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGh0dHBzIChkZWZhdWx0OiB0cnVlKVxuICogQHByb3Age3N0cmluZz19IHBhcmFtcy5ob3N0IC0gQVBJIGhvc3QgKGRlZmF1bHQ6IGNkbi5jb250ZW50ZnVsLmNvbSkuIEFsc28gdXNhYmxlIHdpdGggcHJldmlldy5jb250ZW50ZnVsLmNvbS5cbiAqIEBwcm9wIHtzdHJpbmc9fSBwYXJhbXMuYmFzZVBhdGggLSBQYXRoIGFwcGVuZGVkIHRvIHRoZSBob3N0IHRvIHN1cHBvcnQgZ2F0ZXdheXMvcHJveGllcyB3aXRoIGN1c3RvbSB1cmxzLlxuICogQHByb3Age09iamVjdD19IHBhcmFtcy5odHRwQWdlbnQgLSBPcHRpb25hbCBOb2RlLmpzIEhUVFAgYWdlbnQgZm9yIHByb3h5aW5nIChzZWUgPGEgaHJlZj1cImh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfY2xhc3NfaHR0cF9hZ2VudFwiPk5vZGUuanMgZG9jczwvYT4gYW5kIDxhIGhyZWY9XCJodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9odHRwcy1wcm94eS1hZ2VudFwiPmh0dHBzLXByb3h5LWFnZW50PC9hPilcbiAqIEBwcm9wIHtPYmplY3Q9fSBwYXJhbXMuaHR0cHNBZ2VudCAtIE9wdGlvbmFsIE5vZGUuanMgSFRUUCBhZ2VudCBmb3IgcHJveHlpbmcgKHNlZSA8YSBocmVmPVwiaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9jbGFzc19odHRwX2FnZW50XCI+Tm9kZS5qcyBkb2NzPC9hPiBhbmQgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2h0dHBzLXByb3h5LWFnZW50XCI+aHR0cHMtcHJveHktYWdlbnQ8L2E+KVxuICogQHByb3Age09iamVjdD19IHBhcmFtcy5wcm94eSAtIE9wdGlvbmFsIEF4aW9zIHByb3h5IChzZWUgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL2F4aW9zI3JlcXVlc3QtY29uZmlnXCI+IGF4aW9zIGRvY3MgPC9hPilcbiAqIEBwcm9wIHtPYmplY3Q9fSBwYXJhbXMuaGVhZGVycyAtIE9wdGlvbmFsIGFkZGl0aW9uYWwgaGVhZGVyc1xuICogQHByb3Age2Z1bmN0aW9uPX0gcGFyYW1zLmFkYXB0ZXIgLSBPcHRpb25hbCBheGlvcyByZXF1ZXN0IGFkYXB0ZXIgKHNlZSA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL216YWJyaXNraWUvYXhpb3MjcmVxdWVzdC1jb25maWdcIj4gYXhpb3MgZG9jcyA8L2E+KVxuICogQHByb3Age2Jvb2xlYW49P30gcGFyYW1zLnJlc29sdmVMaW5rcyAtIElmIHdlIHNob3VsZCByZXNvbHZlIGxpbmtzIGJldHdlZW4gZW50cmllcyAoZGVmYXVsdDogdHJ1ZSlcbiAqIEBwcm9wIHtib29sZWFuPT99IHBhcmFtcy5yZW1vdmVVbnJlc29sdmVkIC0gSWYgd2Ugc2hvdWxkIHJlbW92ZSBsaW5rcyB0byBlbnRyaWVzIHdoaWNoIGNvdWxkIG5vdCBiZSByZXNvbHZlZCAoZGVmYXVsdDogZmFsc2UpXG4gKiBAcHJvcCB7Ym9vbGVhbj0/fSBwYXJhbXMucmV0cnlPbkVycm9yIC0gSWYgd2Ugc2hvdWxkIHJldHJ5IG9uIGVycm9ycyBhbmQgNDI5IHJhdGUgbGltaXQgZXhjZXB0aW9ucyAoZGVmYXVsdDogdHJ1ZSlcbiAqIEBwcm9wIHtmdW5jdGlvbj19IHBhcmFtcy5sb2dIYW5kbGVyIC0gQSBsb2cgaGFuZGxlciBmdW5jdGlvbiB0byBwcm9jZXNzIGdpdmVuIGxvZyBtZXNzYWdlcyAmIGVycm9ycy4gUmVjZWl2ZXMgdGhlIGxvZyBsZXZlbCAoZXJyb3IsIHdhcm5pbmcgJiBpbmZvKSBhbmQgdGhlIGFjdHVhbCBsb2cgZGF0YSAoRXJyb3Igb2JqZWN0IG9yIHN0cmluZykuIChUaGUgZGVmYXVsdCBjYW4gYmUgZm91bmQgYXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9jb250ZW50ZnVsL2NvbnRlbnRmdWwtc2RrLWNvcmUvYmxvYi9tYXN0ZXIvbGliL2NyZWF0ZS1odHRwLWNsaWVudC5qcylcbiAqIEBwcm9wIHtzdHJpbmc9P30gcGFyYW1zLmFwcGxpY2F0aW9uIC0gQXBwbGljYXRpb24gbmFtZSBhbmQgdmVyc2lvbiBlLmcgbXlBcHAvdmVyc2lvblxuICogQHByb3Age3N0cmluZz0/fSBwYXJhbXMuaW50ZWdyYXRpb24gLSBJbnRlZ3JhdGlvbiBuYW1lIGFuZCB2ZXJzaW9uIGUuZyByZWFjdC92ZXJzaW9uXG4gKiBAcHJvcCB7bnVtYmVyPX0gcGFyYW1zLnRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIC0gY29ubmVjdGlvbiB0aW1lb3V0IChkZWZhdWx0OjMwMDAwKVxuICogQHByb3Age251bWJlcj19IHBhcmFtcy5yZXRyeUxpbWl0IC0gT3B0aW9uYWwgbnVtYmVyIG9mIHJldHJpZXMgYmVmb3JlIGZhaWx1cmUuIERlZmF1bHQgaXMgNVxuICogQHJldHVybnMge0NvbnRlbnRmdWxDbGllbnRBUEkuQ2xpZW50QVBJfVxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAqICBhY2Nlc3NUb2tlbjogJ215QWNjZXNzVG9rZW4nLFxuICogIHNwYWNlOiAnbXlTcGFjZUlkJ1xuICogfSlcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpZW50KHBhcmFtcykge1xuICBpZiAoIXBhcmFtcy5hY2Nlc3NUb2tlbikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHBhcmFtZXRlciBhY2Nlc3NUb2tlbicpO1xuICB9XG5cbiAgaWYgKCFwYXJhbXMuc3BhY2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBwYXJhbWV0ZXIgc3BhY2UnKTtcbiAgfVxuXG4gIHZhciBkZWZhdWx0Q29uZmlnID0ge1xuICAgIHJlc29sdmVMaW5rczogdHJ1ZSxcbiAgICByZW1vdmVVbnJlc29sdmVkOiBmYWxzZSxcbiAgICBkZWZhdWx0SG9zdG5hbWU6ICdjZG4uY29udGVudGZ1bC5jb20nLFxuICAgIGVudmlyb25tZW50OiAnbWFzdGVyJ1xuICB9O1xuXG4gIHZhciBjb25maWcgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRDb25maWcpLCBwYXJhbXMpO1xuXG4gIHZhciB1c2VyQWdlbnRIZWFkZXIgPSBnZXRVc2VyQWdlbnRIZWFkZXIoXCJjb250ZW50ZnVsLmpzL1wiLmNvbmNhdChcIjAuMC4wLWRldGVybWluZWQtYnktc2VtYW50aWMtcmVsZWFzZVwiKSwgY29uZmlnLmFwcGxpY2F0aW9uLCBjb25maWcuaW50ZWdyYXRpb24pO1xuICBjb25maWcuaGVhZGVycyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29uZmlnLmhlYWRlcnMpLCB7fSwge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vdm5kLmNvbnRlbnRmdWwuZGVsaXZlcnkudjEranNvbicsXG4gICAgJ1gtQ29udGVudGZ1bC1Vc2VyLUFnZW50JzogdXNlckFnZW50SGVhZGVyXG4gIH0pO1xuICB2YXIgaHR0cCA9IGNyZWF0ZUh0dHBDbGllbnQoYXhpb3MsIGNvbmZpZyk7XG4gIHZhciBnZXRHbG9iYWxPcHRpb25zID0gY3JlYXRlR2xvYmFsT3B0aW9ucyh7XG4gICAgcmVzb2x2ZUxpbmtzOiBjb25maWcucmVzb2x2ZUxpbmtzLFxuICAgIGVudmlyb25tZW50OiBjb25maWcuZW52aXJvbm1lbnQsXG4gICAgcmVtb3ZlVW5yZXNvbHZlZDogY29uZmlnLnJlbW92ZVVucmVzb2x2ZWQsXG4gICAgc3BhY2VCYXNlVXJsOiBodHRwLmRlZmF1bHRzLmJhc2VVUkwsXG4gICAgZW52aXJvbm1lbnRCYXNlVXJsOiBcIlwiLmNvbmNhdChodHRwLmRlZmF1bHRzLmJhc2VVUkwsIFwiZW52aXJvbm1lbnRzL1wiKS5jb25jYXQoY29uZmlnLmVudmlyb25tZW50KVxuICB9KTsgLy8gQXBwZW5kIGVudmlyb25tZW50IHRvIGJhc2VVUkxcblxuICBodHRwLmRlZmF1bHRzLmJhc2VVUkwgPSBnZXRHbG9iYWxPcHRpb25zKCkuZW52aXJvbm1lbnRCYXNlVXJsOyAvLyBJbnRlcmNlcHRzIHJlc3BvbnNlIGFuZCBvYnNjdXJlIHRoZSB0b2tlblxuXG4gIG9ic2N1cmVBdXRoVG9rZW5JblJlc3BvbnNlKGh0dHApO1xuICByZXR1cm4gY3JlYXRlQ29udGVudGZ1bEFwaSh7XG4gICAgaHR0cDogaHR0cCxcbiAgICBnZXRHbG9iYWxPcHRpb25zOiBnZXRHbG9iYWxPcHRpb25zXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvYnNjdXJlQXV0aFRva2VuSW5SZXNwb25zZShodHRwKSB7XG4gIGh0dHAuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5jb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uKSB7XG4gICAgICB2YXIgdG9rZW4gPSBlcnJvci5yZXNwb25zZS5jb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uO1xuICAgICAgZXJyb3IucmVzcG9uc2UuY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGVycm9yLnJlc3BvbnNlLmNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24ucmVwbGFjZSh0b2tlbiwgXCJCZWFyZXIuLi5cIi5jb25jYXQodG9rZW4uc3Vic3RyKC01KSkpO1xuXG4gICAgICBpZiAoZXJyb3IucmVzcG9uc2UucmVxdWVzdC5faGVhZGVycyAmJiBlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXJzLmF1dGhvcml6YXRpb24pIHtcbiAgICAgICAgZXJyb3IucmVzcG9uc2UucmVxdWVzdC5faGVhZGVycy5hdXRob3JpemF0aW9uID0gZXJyb3IucmVzcG9uc2UucmVxdWVzdC5faGVhZGVycy5hdXRob3JpemF0aW9uLnJlcGxhY2UodG9rZW4sIFwiQmVhcmVyLi4uXCIuY29uY2F0KHRva2VuLnN1YnN0cigtNSkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLnJlcXVlc3QuX2hlYWRlcikge1xuICAgICAgICBlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXIgPSBlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXIucmVwbGFjZSh0b2tlbiwgXCJCZWFyZXIuLi5cIi5jb25jYXQodG9rZW4uc3Vic3RyKC01KSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH0pO1xufSIsImltcG9ydCB7Y3JlYXRlQ2xpZW50fSBmcm9tICdjb250ZW50ZnVsJ1xuY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHtcbiAgLy8gVGhpcyBpcyB0aGUgc3BhY2UgSUQuIEEgc3BhY2UgaXMgbGlrZSBhIHByb2plY3QgZm9sZGVyIGluIENvbnRlbnRmdWwgdGVybXNcbiAgc3BhY2U6IHByb2Nlc3MuZW52LlNQQUNFX0lELFxuICAvLyBUaGlzIGlzIHRoZSBhY2Nlc3MgdG9rZW4gZm9yIHRoaXMgc3BhY2UuIE5vcm1hbGx5IHlvdSBnZXQgYm90aCBJRCBhbmQgdGhlIHRva2VuIGluIHRoZSBDb250ZW50ZnVsIHdlYiBhcHBcbiAgYWNjZXNzVG9rZW46IHByb2Nlc3MuZW52LkFQSV9ERUxJVkVSWV9LRVlcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjbGllbnQiLCIvKipcbiAqIExpbmsgcmVzb2x1dGlvbiBjYW4gYmUgc2V0IGdsb2JhbGx5LCBvciBpdCBjYW4gYmUgdHVybmVkIG9mZiBmb3IgdGhlIG1ldGhvZHNcbiAqIHdoaWNoIG1ha2UgdXNlIG9mIGl0LiBUaGUgbG9jYWwgc2V0dGluZyBhbHdheXMgb3ZlcnJpZGVzIHRoZSBnbG9iYWwgc2V0dGluZy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGdsb2JhbFNldHRpbmcgLSBHbG9iYWwgbGlicmFyeSBzZXR0aW5nIGZvciBsaW5rIHJlc29sdXRpb25cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gTGluayByZXNvbHZlciBtZXRob2QgcHJlY29uZmlndXJlZCB3aXRoIGdsb2JhbCBzZXR0aW5nXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdsb2JhbE9wdGlvbnMoZ2xvYmFsU2V0dGluZ3MpIHtcbiAgLyoqXG4gICAqIExpbmsgcmVzb2x2ZXIgbWV0aG9kXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSAtIHJlZ3VsYXIgcXVlcnkgb2JqZWN0IHVzZWQgZm9yIGNvbGxlY3Rpb24gZW5kcG9pbnRzXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0R2xvYmFsT3B0aW9ucyhxdWVyeSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnbG9iYWxTZXR0aW5ncywgcXVlcnkpO1xuICB9O1xufSIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBCbG9nQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoW3t9LCAoKSA9PiB7fV0pXG5cbmNvbnN0IEJsb2dQcm92aWRlciA9IChwcm9wcykgPT4ge1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBlbnRyeTogbnVsbCxcbiAgICBlbnRyeUxpc3Q6IFtdLFxuICAgIHBhZ2U6IDEsXG4gICAgdG90YWxQYWdlczogMVxuICB9KTtcbiAgcmV0dXJuIChcbiAgICA8QmxvZ0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e1tzdGF0ZSwgc2V0U3RhdGVdfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L0Jsb2dDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG5leHBvcnQgeyBCbG9nQ29udGV4dCwgQmxvZ1Byb3ZpZGVyIH0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBCbG9nQ29udGV4dCB9IGZyb20gJy4vYmxvZ0NvbnRleHQnXG5cbi8qKlxuICogSGVscGVyIHdpdGggc3RhdGUgdmFsdWVzIGFuZCB0byBzZXQgc3RhdGVcbiAqL1xuY29uc3QgdXNlQmxvZyA9ICgpID0+IHtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VDb250ZXh0KEJsb2dDb250ZXh0KVxuXG4gIGZ1bmN0aW9uIHNldFBhZ2UocGFnZSkge1xuICAgIGlmIChwYWdlIDwgMSlcbiAgICAgIHRocm93ICdJbnZhbGlkIHBhZ2UgbnVtYmVyJ1xuXG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHsuLi5zdGF0ZSwgcGFnZSB9ICkpXG4gIH1cblxuICBmdW5jdGlvbiBzZXRFbnRyeShlbnRyeSkge1xuICAgIHNldFN0YXRlKHN0YXRlID0+ICh7IC4uLnN0YXRlLCBlbnRyeSB9KSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UGFnZSxcbiAgICB0b3RhbFBhZ2VzOiBzdGF0ZS50b3RhbFBhZ2VzLFxuICAgIGVudHJ5OiBzdGF0ZS5lbnRyeSxcbiAgICBzZXRFbnRyeSxcbiAgICBlbnRyeUxpc3Q6IHN0YXRlLmVudHJ5TGlzdCxcbiAgICBzdGF0ZSxcbiAgICBzZXRTdGF0ZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUJsb2ciLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gIGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCBQYWdpbmF0b3IgZnJvbSAnLi9wYWdpbmF0b3InXG5pbXBvcnQgY2xpZW50IGZyb20gXCIuLi8uLi9hcGlcIlxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuLi9wYWxldHRlJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB1c2VCbG9nIGZyb20gJy4vdXNlQmxvZydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmxvZyh7IHNlYXJjaFBhcmFtcyB9KSB7XG5cbiAgY29uc3QgRW50cnlMaXN0ID0gc3R5bGVkLmRpdmBcbiAgICAjZW50cnktY29udGFpbmVyIHtcbiAgICAgIGxpIHtcbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICAgICAgICBoMSB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcbiAgICAgICAgICAgIG1hcmdpbjogNXB4IDAgMTVweCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5kYXRlIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBhcmlhbFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICBjb2xvcjogJHtwYWxldHRlLnN1YkhlYWRpbmd9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBgXG5cbiAgY29uc3QgeyBzZXRTdGF0ZSwgZW50cnlMaXN0LCB0b3RhbFBhZ2VzIH0gPSB1c2VCbG9nKClcblxuICAvLyBwYWdpbmcgcGFyYW1zXG4gIGNvbnN0IHAgPSBzZWFyY2hQYXJhbXMuZ2V0KCdwJykgfHwgMVxuICBjb25zdCBycHAgPSBzZWFyY2hQYXJhbXMuZ2V0KCdycHAnKSB8fCAxMFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcSA9IHtcbiAgICAgICAgY29udGVudF90eXBlOiAncG9zdCcsXG4gICAgICAgIHNraXA6IChwIC0gMSkgKiBycHAsXG4gICAgICAgIGxpbWl0OiBycHBcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5nZXRFbnRyaWVzKHEpXG4gICAgICBjb25zb2xlLmxvZygnZW50cmllcyByZXMnLCByZXMpXG4gICAgICAvLyBkbyB3aXRoIG9uZSBjYWxsLCBhdm9pZCByZS1yZW5kZXJzXG4gICAgICBzZXRTdGF0ZShzdGF0ZSA9PiAoe1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZW50cnlMaXN0OiByZXMuaXRlbXMsXG4gICAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbChyZXMudG90YWwvcnBwKVxuICAgICAgfSkpXG4gICAgfVxuICAgIGZldGNoRGF0YSgpXG4gIH0sIFtdKVxuXG4gIHJldHVybiAoXG4gICAgPEVudHJ5TGlzdD5cbiAgICAgIHtcbiAgICAgICAgIWVudHJ5TGlzdC5sZW5ndGhcbiAgICAgICAgICA/IDxlbT5Mb2FkaW5nLi4uPC9lbT5cbiAgICAgICAgICA6IDxkaXYgaWQ9XCJlbnRyeS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIHtlbnRyeUxpc3QubWFwKGl0ZW0gPT4gKFxuICAgICAgICAgICAgICAgICAgPGxpIGtleT17aXRlbS5maWVsZHMuc2x1Z30+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17Jy9wb3N0LycraXRlbS5zeXMuaWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPntpdGVtLmZpZWxkcy50aXRsZX08L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRhdGVcIj57bW9tZW50KGl0ZW0uc3lzLmNyZWF0ZWRBdCkuZm9ybWF0KCdNTU1NIERvIFlZWVksIGg6bW0gYScpfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmZpZWxkcy50aHVtYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e2l0ZW0uZmllbGRzLnRodW1iLmZpZWxkcy5maWxlLnVybH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XCI1NjBweFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8UGFnaW5hdG9yIHRvdGFsUGFnZXM9e3RvdGFsUGFnZXN9IHA9e3B9IHJwcD17cnBwfS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgIH1cbiAgICA8L0VudHJ5TGlzdD5cbiAgKVxufSIsImltcG9ydCBSZWFjdCwge3VzZUVmZmVjdH0gIGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgUmVhY3RNYXJrZG93biBmcm9tICdyZWFjdC1tYXJrZG93bidcbmltcG9ydCBjbGllbnQgZnJvbSAnLi4vLi4vYXBpJ1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuLi9wYWxldHRlJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB1c2VCbG9nIGZyb20gJy4vdXNlQmxvZydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUG9zdChwcm9wcykge1xuXG4gIGNvbnN0IEJsb2dQb3N0ID0gc3R5bGVkLmRpdmBcbiAgICAjcG9zdC1jb250YWluZXIge1xuICAgICAgbWFyZ2luOiAyMHB4IDAgMjBweCAwO1xuXG4gICAgICBoMSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgIH1cblxuICAgICAgI2RhdGUge1xuICAgICAgICBmb250LWZhbWlseTogYXJpYWxcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgY29sb3I6ICR7cGFsZXR0ZS5zdWJIZWFkaW5nfTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgICB9XG5cbiAgICAgICNwb3N0LWJvZHkge1xuICAgICAgICBmb250LWZhbWlseTogZ2VvcmdpYTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDI1cHg7XG5cbiAgICAgICAgdWwge1xuICAgICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICN0YWctbGFiZWwge1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgY29sb3I6ICR7cGFsZXR0ZS5zdWJIZWFkaW5nfTtcbiAgICAgIH1cblxuICAgICAgLnRhZyB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgICAgYmFja2dyb3VuZDogJHtwYWxldHRlLmJhY2tncm91bmR9O1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkICR7cGFsZXR0ZS5pbWFnZUJvcmRlcn07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6NXB4O1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246bm9uZTtcbiAgICAgICAgcGFkZGluZzo4cHg7XG4gICAgICAgIG1hcmdpbjozcHg7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtcbiAgICAgIH1cblxuICAgICAgLnRhZzpob3ZlciB7XG4gICAgICAgIGNvbG9yOiAke3BhbGV0dGUuYmFja2dyb3VuZH07XG4gICAgICAgIGJhY2tncm91bmQ6ICR7cGFsZXR0ZS5zdWJIZWFkaW5nfTtcbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICBjb25zdCB7IGVudHJ5LCBzZXRFbnRyeSB9ID0gdXNlQmxvZygpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZ2V0RW50cnkocHJvcHMuaWQpXG4gICAgICBjb25zb2xlLmxvZygncmVzJywgcmVzKVxuICAgICAgc2V0RW50cnkocmVzKVxuICAgIH1cbiAgICBmZXRjaERhdGEoKVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDxCbG9nUG9zdD5cbiAgICA8ZGl2IGlkPVwicG9zdC1jb250YWluZXJcIj5cbiAgICAgIHtcbiAgICAgICAgIWVudHJ5XG4gICAgICAgICAgPyA8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPjxlbT5Mb2FkaW5nLi4uPC9lbT48L2Rpdj5cbiAgICAgICAgICA6IDxkaXY+XG4gICAgICAgICAgICAgIDxoMT57ZW50cnkuZmllbGRzLnRpdGxlfTwvaDE+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJkYXRlXCI+e21vbWVudChlbnRyeS5zeXMuY3JlYXRlZEF0KS5mb3JtYXQoJ01NTU0gRG8gWVlZWSwgaDptbSBhJyl9PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJwb3N0LWJvZHlcIj48UmVhY3RNYXJrZG93blxuICAgICAgICAgICAgICAgIGVzY2FwZUh0bWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuPXtlbnRyeS5maWVsZHMuYm9keX1cbiAgICAgICAgICAgICAgLz48L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJ0YWctbGFiZWxcIj57IGVudHJ5Lm1ldGFkYXRhLnRhZ3MgPyAnVGFnczonIDogJycgfTwvZGl2PlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGVudHJ5Lm1ldGFkYXRhLnRhZ3MgJiYgZW50cnkubWV0YWRhdGEudGFncy5tYXAodGFnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxhIGhyZWY9e2AvdGFncy8ke3RhZy5zeXMuaWR9YH0gY2xhc3M9XCJ0YWdcIiBrZXk9e3RhZy5zeXMuaWR9Pnt0YWcuc3lzLmlkfTwvYT5cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgIDwvZGl2PlxuICAgIDwvQmxvZ1Bvc3Q+XG4gIClcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gIGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgY2xpZW50IGZyb20gXCIuLi8uLi9hcGlcIlxuaW1wb3J0IHVzZUJsb2cgZnJvbSAnLi91c2VCbG9nJ1xuaW1wb3J0IFBhZ2luYXRvciBmcm9tICcuL3BhZ2luYXRvcidcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL3BhbGV0dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRhZyh7IGlkLCBzZWFyY2hQYXJhbXMgfSkge1xuXG4gIGNvbnN0IEVudHJ5TGlzdCA9IHN0eWxlZC5kaXZgXG4gICAgI2VudHJ5LWNvbnRhaW5lciB7XG4gICAgICBsaSB7XG4gICAgICAgIGRpdiB7XG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgIGltZyB7XG4gICAgICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7cGFsZXR0ZS5pbWFnZUJvcmRlcn07XG4gICAgICAgICAgICBtYXJnaW46IDVweCAwIDEwcHggMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICBjb25zdCBTZWxlY3RlZFRhZyA9IHN0eWxlZC5kaXZgXG4gICAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1CZWJhcytOZXVlJmRpc3BsYXk9c3dhcCcpO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcblxuICAgICNzZWxlY3RlZC10YWctY29udGFpbmVyIHtcbiAgICAgIGNvbG9yOiAke3BhbGV0dGUudGV4dH07XG4gICAgICB3aWR0aDogNTYwcHg7XG4gICAgICBtYXJnaW4tdG9wOiA1MHB4O1xuICAgICAgcGFkZGluZy1ib3R0b206IDE1cHg7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkICR7cGFsZXR0ZS5pbWFnZUJvcmRlcn07XG5cbiAgICAgIC50YWcge1xuICAgICAgICBmb250LWZhbWlseTogXCJCZWJhcyBOZXVlXCI7XG5cbiAgICAgICAgZm9udC1zaXplOiA2NHB4O1xuICAgICAgICBjb2xvcjogJHtwYWxldHRlLnN1YkhlYWRpbmd9O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3BhbGV0dGUuYmFja2dyb3VuZH07XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICBjb25zdCB7IHNldFN0YXRlLCBlbnRyeUxpc3QsIHRvdGFsUGFnZXMgfSA9IHVzZUJsb2coKVxuXG4gIC8vIHBhZ2luZyBwYXJhbXNcbiAgY29uc3QgcCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3AnKSB8fCAxXG4gIGNvbnN0IHJwcCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3JwcCcpIHx8IDEwXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBxID0ge1xuICAgICAgICAnbWV0YWRhdGEudGFncy5zeXMuaWRbaW5dJzogaWQsXG4gICAgICAgIGNvbnRlbnRfdHlwZTogJ3Bvc3QnLFxuICAgICAgICBza2lwOiAocCAtIDEpICogcnBwLFxuICAgICAgICBsaW1pdDogcnBwXG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZ2V0RW50cmllcyhxKVxuICAgICAgY29uc29sZS5sb2coJ2VudHJpZXMgcmVzJywgcmVzKVxuICAgICAgLy8gZG8gd2l0aCBvbmUgY2FsbCwgYXZvaWQgcmUtcmVuZGVyc1xuICAgICAgc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGVudHJ5TGlzdDogcmVzLml0ZW1zLFxuICAgICAgICB0b3RhbFBhZ2VzOiBNYXRoLmNlaWwocmVzLnRvdGFsL3JwcClcbiAgICAgIH0pKVxuICAgIH1cbiAgICBmZXRjaERhdGEoKVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgPFNlbGVjdGVkVGFnPlxuICAgICAgPGRpdiBpZD1cInNlbGVjdGVkLXRhZy1jb250YWluZXJcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwidGFnXCI+e2lkfTwvc3Bhbj4gcG9zdHNcbiAgICAgIDwvZGl2PlxuICAgIDwvU2VsZWN0ZWRUYWc+XG4gICAgPEVudHJ5TGlzdD5cbiAgICAgIDxkaXY+XG4gICAgICB7XG4gICAgICAgICFlbnRyeUxpc3QubGVuZ3RoXG4gICAgICAgICAgPyA8ZW0+TG9hZGluZy4uLjwvZW0+XG4gICAgICAgICAgOiA8ZGl2IGlkPVwiZW50cnktY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICB7ZW50cnlMaXN0Lm1hcChpdGVtID0+IChcbiAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2l0ZW0uZmllbGRzLnNsdWd9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXsnL3Bvc3QvJytpdGVtLnN5cy5pZH0+XG4gICAgICAgICAgICAgICAgICAgICAgPGgxPntpdGVtLmZpZWxkcy50aXRsZX08L2gxPlxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZmllbGRzLnRodW1iXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtpdGVtLmZpZWxkcy50aHVtYi5maWVsZHMuZmlsZS51cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjU2MHB4XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIDxQYWdpbmF0b3IgdG90YWxQYWdlcz17dG90YWxQYWdlc30gcD17cH0gcnBwPXtycHB9Lz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgPC9FbnRyeUxpc3Q+XG4gICAgPC9kaXY+XG4gIClcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gIGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHBhbGV0dGUgZnJvbSAnLi9wYWxldHRlJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xuXG4gIGNvbnN0IEhvbWVQYWdlID0gc3R5bGVkLmRpdmBcbiAgICAjaG9tZS1jb250YWluZXIge1xuICAgICAgbWFyZ2luLXRvcDogNTBweDtcbiAgICAgIHdpZHRoOiA1NjBweDtcbiAgICAgIGNvbG9yOiAke3BhbGV0dGUudGV4dH07XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgICAgIGltZyB7XG4gICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7cGFsZXR0ZS5pbWFnZUJvcmRlcn07XG4gICAgICAgIHdpZHRoOiA1NjBweDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDtcbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICByZXR1cm4gKFxuICAgIDxIb21lUGFnZT5cbiAgICAgIDxkaXYgaWQ9XCJob21lLWNvbnRhaW5lclwiPlxuICAgICAgICA8aW1nIHNyYz1cImh0dHBzOi8vaW1hZ2VzLmN0ZmFzc2V0cy5uZXQvOWl0a29xMDFzNzdqLzJNRVRXeE5VZ2dtbjZiZnFpSGhwS3UvMjIxNWEwYmQ3NWFkMTNjZDRlYmE5OTQwMDhlYjhkNjgvUGhpbF9BdmVyeV9vbl9JbnN0YWdyYW1fX19fX1lldF9hbm90aGVyX3JhbWVuX3BsYWNlX2luX255Y19fbm90X2NvbXBsYWluaW5nX3Rob3VnaF9fX3JhbWVuX19ueWNfX18ucG5nXCIgLz5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBKdXN0IGEgcGljdHVyZSBvZiBzb21lIHl1bW15IHJhbWVuIEkgYXRlIG9uY2UuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9Ib21lUGFnZT5cbiAgKVxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFdvcmsgZnJvbSBcIi4vd29ya1wiXG5pbXBvcnQgTmF2aWdhdGlvbiBmcm9tIFwiLi9uYXZcIlxuaW1wb3J0IEJsb2cgZnJvbSBcIi4vYmxvZ1wiXG5pbXBvcnQgUG9zdCBmcm9tIFwiLi9ibG9nL3Bvc3RcIlxuaW1wb3J0IFRhZyBmcm9tIFwiLi9ibG9nL3RhZ1wiXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi9ob21lXCJcbmltcG9ydCB7IEJsb2dQcm92aWRlciB9IGZyb20gXCIuL2Jsb2cvYmxvZ0NvbnRleHRcIlxuaW1wb3J0IHsgcGFyc2VVcmwgfSBmcm9tICcuLi91dGlscydcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB7IGNyZWF0ZUdsb2JhbFN0eWxlIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSdcblxuY29uc3QgR2xvYmFsU3R5bGUgPSBjcmVhdGVHbG9iYWxTdHlsZWBcbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtwYWxldHRlLmJhY2tncm91bmR9O1xuICB9XG4gIC5tYWluLXNpdGUge1xuICAgIHdpZHRoOiA1NjBweDtcbiAgICBtYXJnaW46IGF1dG87XG4gIH1cbmA7XG5cbmNvbnN0IE1haW4gPSBzdHlsZWQuZGl2YFxuICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90byZkaXNwbGF5PXN3YXAnKTtcblxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgY29sb3I6ICR7cGFsZXR0ZS50ZXh0fTtcblxuICBoMSB7XG4gICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xuICAgIGNvbG9yOiAke3BhbGV0dGUuaGVhZGluZ307XG4gIH1cblxuICB1bCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG5cbiAgYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICY6bGluaywgJjp2aXNpdGVkIHtcbiAgICAgIGNvbG9yOiAke3BhbGV0dGUudGV4dH07XG4gICAgfVxuICAgICY6aG92ZXIge1xuICAgICAgY29sb3I6ICR7cGFsZXR0ZS50ZXh0fTtcbiAgICB9XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgbWFyZ2luLXRvcDogNTBweDtcbiAgfVxuYFxuXG5jbGFzcyBNYWluQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHJlcyA9IFtdXG4gICAgY29uc3Qge3BhcnRzLCBzZWFyY2hQYXJhbXN9ID0gcGFyc2VVcmwoKVxuICAgIGNvbnN0IHNlY3Rpb24gPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJ1xuICAgIGNvbnN0IHRhZ09yUG9zdElkID0gcGFydHNbMV1cblxuICAgIGxldCBtaWRkbGUgPSBudWxsXG4gICAgc3dpdGNoKHNlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3dvcmsnOlxuICAgICAgICBtaWRkbGUgPSA8V29yayBrZXk9XCJ3b3JrXCIvPlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncG9zdCc6XG4gICAgICAgIG1pZGRsZSA9IDxQb3N0IGtleT1cInBvc3RcIiBpZD17dGFnT3JQb3N0SWR9IC8+XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdibG9nJzpcbiAgICAgICAgbWlkZGxlID0gPEJsb2cga2V5PVwiYmxvZ1wiIHNlYXJjaFBhcmFtcz17c2VhcmNoUGFyYW1zfSAvPlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAndGFncyc6XG4gICAgICAgIG1pZGRsZSA9IDxUYWcga2V5PVwidGFnXCIgaWQ9e3RhZ09yUG9zdElkfSBzZWFyY2hQYXJhbXM9e3NlYXJjaFBhcmFtc30gLz5cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1pZGRsZSA9IDxIb21lIGtleT1cImhvbWVcIiAvPlxuICAgIH1cbiAgICByZXMucHVzaChtaWRkbGUpXG5cbiAgICByZXR1cm4gKFxuXG4gICAgICA8QmxvZ1Byb3ZpZGVyPlxuICAgICAgICA8R2xvYmFsU3R5bGUgLz5cbiAgICAgICAgPE1haW4+XG4gICAgICAgICAgPE5hdmlnYXRpb24ga2V5PVwibmF2XCIgc2VjdGlvbj17c2VjdGlvbn0gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFpbi1zaXRlXCI+e3Jlc308L2Rpdj5cbiAgICAgICAgPC9NYWluPlxuICAgICAgPC9CbG9nUHJvdmlkZXI+XG4gICAgKVxuICB9XG5cbn1cbmV4cG9ydCBkZWZhdWx0IE1haW5Db250YWluZXIiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCBNYWluQ29udGFpbmVyIGZyb20gJy4vY29tcG9uZW50cy9tYWluJ1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIlxuXG5jb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYWluLXNpdGVcIilcbndyYXBwZXIgPyBSZWFjdERPTS5yZW5kZXIoPE1haW5Db250YWluZXIgLz4sIHdyYXBwZXIpIDogZmFsc2UiXSwic291cmNlUm9vdCI6IiJ9