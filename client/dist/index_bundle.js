!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=365)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(s(e,t))return!1;return!0}function l(e){return void 0===e}function d(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function f(e,t){var n,r=[],a=e.length;for(n=0;n<a;++n)r.push(t(e[n],n));return r}function m(e,t){for(var n in t)s(t,n)&&(e[n]=t[n]);return s(t,"toString")&&(e.toString=t.toString),s(t,"valueOf")&&(e.valueOf=t.valueOf),e}function _(e,t,n,r){return Yt(e,t,n,r,!0).utc()}function p(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function h(e){var t=null,n=!1,a=e._d&&!isNaN(e._d.getTime());return a&&(t=p(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n),e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)),null!=Object.isFrozen&&Object.isFrozen(e)?a:(e._isValid=a,e._isValid)}function y(e){var t=_(NaN);return null!=e?m(p(t),e):p(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var g=a.momentProperties=[],M=!1;function v(e,t){var n,r,a,i=g.length;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=p(t)),l(t._locale)||(e._locale=t._locale),i>0)for(n=0;n<i;n++)l(a=t[r=g[n]])||(e[r]=a);return e}function b(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,a.updateOffset(this),M=!1)}function L(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function k(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function w(e,t){var n=!0;return m((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,i,o,u=[],l=arguments.length;for(i=0;i<l;i++){if(r="","object"==typeof arguments[i]){for(o in r+="\n["+i+"] ",arguments[0])s(arguments[0],o)&&(r+=o+": "+arguments[0][o]+", ");r=r.slice(0,-2)}else r=arguments[i];u.push(r)}k(e+"\nArguments: "+Array.prototype.slice.call(u).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var Y,T={};function D(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),T[e]||(k(t),T[e]=!0)}function S(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,r=m({},e);for(n in t)s(t,n)&&(o(e[n])&&o(t[n])?(r[n]={},m(r[n],e[n]),m(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)s(e,n)&&!s(t,n)&&o(e[n])&&(r[n]=m({},r[n]));return r}function j(e){null!=e&&this.set(e)}function O(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,Y=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)s(e,t)&&n.push(t);return n};var E=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,P=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,H={},A={};function C(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(A[e]=a),t&&(A[t[0]]=function(){return O(a.apply(this,arguments),t[1],t[2])}),n&&(A[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function N(e,t){return e.isValid()?(t=F(t,e.localeData()),H[t]=H[t]||function(e){var t,n,r,a=e.match(E);for(t=0,n=a.length;t<n;t++)A[a[t]]?a[t]=A[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=S(a[r])?a[r].call(t,e):a[r];return i}}(t),H[t](e)):e.localeData().invalidDate()}function F(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(P.lastIndex=0;n>=0&&P.test(e);)e=e.replace(P,r),P.lastIndex=0,n-=1;return e}var W={D:"date",dates:"date",date:"date",d:"day",days:"day",day:"day",e:"weekday",weekdays:"weekday",weekday:"weekday",E:"isoWeekday",isoweekdays:"isoWeekday",isoweekday:"isoWeekday",DDD:"dayOfYear",dayofyears:"dayOfYear",dayofyear:"dayOfYear",h:"hour",hours:"hour",hour:"hour",ms:"millisecond",milliseconds:"millisecond",millisecond:"millisecond",m:"minute",minutes:"minute",minute:"minute",M:"month",months:"month",month:"month",Q:"quarter",quarters:"quarter",quarter:"quarter",s:"second",seconds:"second",second:"second",gg:"weekYear",weekyears:"weekYear",weekyear:"weekYear",GG:"isoWeekYear",isoweekyears:"isoWeekYear",isoweekyear:"isoWeekYear",w:"week",weeks:"week",week:"week",W:"isoWeek",isoweeks:"isoWeek",isoweek:"isoWeek",y:"year",years:"year",year:"year"};function I(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function z(e){var t,n,r={};for(n in e)s(e,n)&&(t=I(n))&&(r[t]=e[n]);return r}var R,U={date:9,day:11,weekday:11,isoWeekday:11,dayOfYear:4,hour:13,millisecond:16,minute:14,month:8,quarter:7,second:15,weekYear:1,isoWeekYear:1,week:5,isoWeek:5,year:1},B=/\d/,J=/\d\d/,$=/\d{3}/,V=/\d{4}/,q=/[+-]?\d{6}/,G=/\d\d?/,K=/\d\d\d\d?/,Q=/\d\d\d\d\d\d?/,Z=/\d{1,3}/,X=/\d{1,4}/,ee=/[+-]?\d{1,6}/,te=/\d+/,ne=/[+-]?\d+/,re=/Z|[+-]\d\d:?\d\d/gi,ae=/Z|[+-]\d\d(?::?\d\d)?/gi,ie=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,oe=/^[1-9]\d?/,se=/^([1-9]\d|\d)/;function ue(e,t,n){R[e]=S(t)?t:function(e,r){return e&&n?n:t}}function le(e,t){return s(R,e)?R[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ce(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function fe(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=ce(t)),n}R={};var me={};function _e(e,t){var n,r,a=t;for("string"==typeof e&&(e=[e]),d(t)&&(a=function(e,n){n[t]=fe(e)}),r=e.length,n=0;n<r;n++)me[e[n]]=a}function pe(e,t){_e(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function he(e,t,n){null!=t&&s(me,e)&&me[e](t,n._a,n,e)}function ye(e){return e%4==0&&e%100!=0||e%400==0}function ge(e){return ye(e)?366:365}C("Y",0,0,(function(){var e=this.year();return e<=9999?O(e,4):"+"+e})),C(0,["YY",2],0,(function(){return this.year()%100})),C(0,["YYYY",4],0,"year"),C(0,["YYYYY",5],0,"year"),C(0,["YYYYYY",6,!0],0,"year"),ue("Y",ne),ue("YY",G,J),ue("YYYY",X,V),ue("YYYYY",ee,q),ue("YYYYYY",ee,q),_e(["YYYYY","YYYYYY"],0),_e("YYYY",(function(e,t){t[0]=2===e.length?a.parseTwoDigitYear(e):fe(e)})),_e("YY",(function(e,t){t[0]=a.parseTwoDigitYear(e)})),_e("Y",(function(e,t){t[0]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return fe(e)+(fe(e)>68?1900:2e3)};var Me,ve=be("FullYear",!0);function be(e,t){return function(n){return null!=n?(ke(this,e,n),a.updateOffset(this,t),this):Le(this,e)}}function Le(e,t){if(!e.isValid())return NaN;var n=e._d,r=e._isUTC;switch(t){case"Milliseconds":return r?n.getUTCMilliseconds():n.getMilliseconds();case"Seconds":return r?n.getUTCSeconds():n.getSeconds();case"Minutes":return r?n.getUTCMinutes():n.getMinutes();case"Hours":return r?n.getUTCHours():n.getHours();case"Date":return r?n.getUTCDate():n.getDate();case"Day":return r?n.getUTCDay():n.getDay();case"Month":return r?n.getUTCMonth():n.getMonth();case"FullYear":return r?n.getUTCFullYear():n.getFullYear();default:return NaN}}function ke(e,t,n){var r,a,i,o,s;if(e.isValid()&&!isNaN(n)){switch(r=e._d,a=e._isUTC,t){case"Milliseconds":return void(a?r.setUTCMilliseconds(n):r.setMilliseconds(n));case"Seconds":return void(a?r.setUTCSeconds(n):r.setSeconds(n));case"Minutes":return void(a?r.setUTCMinutes(n):r.setMinutes(n));case"Hours":return void(a?r.setUTCHours(n):r.setHours(n));case"Date":return void(a?r.setUTCDate(n):r.setDate(n));case"FullYear":break;default:return}i=n,o=e.month(),s=29!==(s=e.date())||1!==o||ye(i)?s:28,a?r.setUTCFullYear(i,o,s):r.setFullYear(i,o,s)}}function we(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?ye(e)?29:28:31-r%7%2}Me=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},C("M",["MM",2],"Mo",(function(){return this.month()+1})),C("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),C("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),ue("M",G,oe),ue("MM",G,J),ue("MMM",(function(e,t){return t.monthsShortRegex(e)})),ue("MMMM",(function(e,t){return t.monthsRegex(e)})),_e(["M","MM"],(function(e,t){t[1]=fe(e)-1})),_e(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:p(n).invalidMonth=e}));var Ye="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Te="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),De=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Se=ie,xe=ie;function je(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=_([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Me.call(this._shortMonthsParse,o))?a:null:-1!==(a=Me.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Me.call(this._shortMonthsParse,o))||-1!==(a=Me.call(this._longMonthsParse,o))?a:null:-1!==(a=Me.call(this._longMonthsParse,o))||-1!==(a=Me.call(this._shortMonthsParse,o))?a:null}function Oe(e,t){if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=fe(t);else if(!d(t=e.localeData().monthsParse(t)))return e;var n=t,r=e.date();return r=r<29?r:Math.min(r,we(e.year(),n)),e._isUTC?e._d.setUTCMonth(n,r):e._d.setMonth(n,r),e}function Ee(e){return null!=e?(Oe(this,e),a.updateOffset(this,!0),this):Le(this,"Month")}function Pe(){function e(e,t){return t.length-e.length}var t,n,r,a,i=[],o=[],s=[];for(t=0;t<12;t++)n=_([2e3,t]),r=de(this.monthsShort(n,"")),a=de(this.months(n,"")),i.push(r),o.push(a),s.push(a),s.push(r);i.sort(e),o.sort(e),s.sort(e),this._monthsRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function He(e,t,n,r,a,i,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,i,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,i,o),s}function Ae(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Ce(e,t,n){var r=7+t-n;return-(7+Ae(e,0,r).getUTCDay()-t)%7+r-1}function Ne(e,t,n,r,a){var i,o,s=1+7*(t-1)+(7+n-r)%7+Ce(e,r,a);return s<=0?o=ge(i=e-1)+s:s>ge(e)?(i=e+1,o=s-ge(e)):(i=e,o=s),{year:i,dayOfYear:o}}function Fe(e,t,n){var r,a,i=Ce(e.year(),t,n),o=Math.floor((e.dayOfYear()-i-1)/7)+1;return o<1?r=o+We(a=e.year()-1,t,n):o>We(e.year(),t,n)?(r=o-We(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function We(e,t,n){var r=Ce(e,t,n),a=Ce(e+1,t,n);return(ge(e)-r+a)/7}function Ie(e,t){return e.slice(t,7).concat(e.slice(0,t))}C("w",["ww",2],"wo","week"),C("W",["WW",2],"Wo","isoWeek"),ue("w",G,oe),ue("ww",G,J),ue("W",G,oe),ue("WW",G,J),pe(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=fe(e)})),C("d",0,"do","day"),C("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),C("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),C("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),C("e",0,0,"weekday"),C("E",0,0,"isoWeekday"),ue("d",G),ue("e",G),ue("E",G),ue("dd",(function(e,t){return t.weekdaysMinRegex(e)})),ue("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),ue("dddd",(function(e,t){return t.weekdaysRegex(e)})),pe(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:p(n).invalidWeekday=e})),pe(["d","e","E"],(function(e,t,n,r){t[r]=fe(e)}));var ze="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Re="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ue="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Be=ie,Je=ie,$e=ie;function Ve(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=_([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Me.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Me.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._shortWeekdaysParse,o))||-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Me.call(this._shortWeekdaysParse,o))||-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Me.call(this._minWeekdaysParse,o))||-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._shortWeekdaysParse,o))?a:null}function qe(){function e(e,t){return t.length-e.length}var t,n,r,a,i,o=[],s=[],u=[],l=[];for(t=0;t<7;t++)n=_([2e3,1]).day(t),r=de(this.weekdaysMin(n,"")),a=de(this.weekdaysShort(n,"")),i=de(this.weekdays(n,"")),o.push(r),s.push(a),u.push(i),l.push(r),l.push(a),l.push(i);o.sort(e),s.sort(e),u.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function Ge(){return this.hours()%12||12}function Ke(e,t){C(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}C("H",["HH",2],0,"hour"),C("h",["hh",2],0,Ge),C("k",["kk",2],0,(function(){return this.hours()||24})),C("hmm",0,0,(function(){return""+Ge.apply(this)+O(this.minutes(),2)})),C("hmmss",0,0,(function(){return""+Ge.apply(this)+O(this.minutes(),2)+O(this.seconds(),2)})),C("Hmm",0,0,(function(){return""+this.hours()+O(this.minutes(),2)})),C("Hmmss",0,0,(function(){return""+this.hours()+O(this.minutes(),2)+O(this.seconds(),2)})),Ke("a",!0),Ke("A",!1),ue("a",Qe),ue("A",Qe),ue("H",G,se),ue("h",G,oe),ue("k",G,oe),ue("HH",G,J),ue("hh",G,J),ue("kk",G,J),ue("hmm",K),ue("hmmss",Q),ue("Hmm",K),ue("Hmmss",Q),_e(["H","HH"],3),_e(["k","kk"],(function(e,t,n){var r=fe(e);t[3]=24===r?0:r})),_e(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),_e(["h","hh"],(function(e,t,n){t[3]=fe(e),p(n).bigHour=!0})),_e("hmm",(function(e,t,n){var r=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r)),p(n).bigHour=!0})),_e("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r,2)),t[5]=fe(e.substr(a)),p(n).bigHour=!0})),_e("Hmm",(function(e,t,n){var r=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r))})),_e("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r,2)),t[5]=fe(e.substr(a))}));var Ze,Xe=be("Hours",!0),et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ye,monthsShort:Te,week:{dow:0,doy:6},weekdays:ze,weekdaysMin:Ue,weekdaysShort:Re,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function rt(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function at(e){return e?e.toLowerCase().replace("_","-"):e}function it(t){var r=null;if(void 0===tt[t]&&void 0!==e&&e&&e.exports&&function(e){return!(!e||!e.match("^[^/\\\\]*$"))}(t))try{r=Ze._abbr,n(275)("./"+t),ot(r)}catch(e){tt[t]=null}return tt[t]}function ot(e,t){var n;return e&&((n=l(t)?ut(e):st(e,t))?Ze=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ze._abbr}function st(e,t){if(null!==t){var n,r=et;if(t.abbr=e,null!=tt[e])D("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])r=tt[t.parentLocale]._config;else{if(null==(n=it(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return tt[e]=new j(x(r,t)),nt[e]&&nt[e].forEach((function(e){st(e.name,e.config)})),ot(e),tt[e]}return delete tt[e],null}function ut(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ze;if(!i(e)){if(t=it(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=at(e[i]).split("-")).length,n=(n=at(e[i+1]))?n.split("-"):null;t>0;){if(r=it(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&rt(a,n)>=t-1)break;t--}i++}return Ze}(e)}function lt(e){var t,n=e._a;return n&&-2===p(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>we(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,p(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),p(e)._overflowWeeks&&-1===t&&(t=7),p(e)._overflowWeekday&&-1===t&&(t=8),p(e).overflow=t),e}var dt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ft=/Z|[+-]\d\d(?::?\d\d)?/,mt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],_t=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((-?\d+)/i,ht=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,yt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function gt(e){var t,n,r,a,i,o,s=e._i,u=dt.exec(s)||ct.exec(s),l=mt.length,d=_t.length;if(u){for(p(e).iso=!0,t=0,n=l;t<n;t++)if(mt[t][1].exec(u[1])){a=mt[t][0],r=!1!==mt[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=d;t<n;t++)if(_t[t][1].exec(u[3])){i=(u[2]||" ")+_t[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(u[4]){if(!ft.exec(u[4]))return void(e._isValid=!1);o="Z"}e._f=a+(i||"")+(o||""),kt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function vt(e){var t,n,r,a,i,o,s,u,l=ht.exec(e._i.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],r=l[3],a=l[2],i=l[5],o=l[6],s=l[7],u=[Mt(n),Te.indexOf(r),parseInt(a,10),parseInt(i,10),parseInt(o,10)],s&&u.push(parseInt(s,10)),t=u,!function(e,t,n){return!e||Re.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(p(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return yt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(l[8],l[9],l[10]),e._d=Ae.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),p(e).rfc2822=!0}else e._isValid=!1}function bt(e,t,n){return null!=e?e:null!=t?t:n}function Lt(e){var t,n,r,i,o,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,i,o,s,u,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,o=4,n=bt(t.GG,e._a[0],Fe(Tt(),1,4).year),r=bt(t.W,1),((a=bt(t.E,1))<1||a>7)&&(u=!0)):(i=e._locale._week.dow,o=e._locale._week.doy,l=Fe(Tt(),i,o),n=bt(t.gg,e._a[0],l.year),r=bt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(u=!0)):a=i),r<1||r>We(n,i,o)?p(e)._overflowWeeks=!0:null!=u?p(e)._overflowWeekday=!0:(s=Ne(n,r,a,i,o),e._a[0]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=bt(e._a[0],r[0]),(e._dayOfYear>ge(o)||0===e._dayOfYear)&&(p(e)._overflowDayOfYear=!0),n=Ae(o,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ae:He).apply(null,s),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(p(e).weekdayMismatch=!0)}}function kt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],p(e).empty=!0;var t,n,r,i,o,s,u,l=""+e._i,d=l.length,c=0;for(u=(r=F(e._f,e._locale).match(E)||[]).length,t=0;t<u;t++)i=r[t],(n=(l.match(le(i,e))||[])[0])&&((o=l.substr(0,l.indexOf(n))).length>0&&p(e).unusedInput.push(o),l=l.slice(l.indexOf(n)+n.length),c+=n.length),A[i]?(n?p(e).empty=!1:p(e).unusedTokens.push(i),he(i,n,e)):e._strict&&!n&&p(e).unusedTokens.push(i);p(e).charsLeftOver=d-c,l.length>0&&p(e).unusedInput.push(l),e._a[3]<=12&&!0===p(e).bigHour&&e._a[3]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(s=p(e).era)&&(e._a[0]=e._locale.erasConvertYear(s,e._a[0])),Lt(e),lt(e)}else vt(e);else gt(e)}function wt(e){var t=e._i,n=e._f;return e._locale=e._locale||ut(e._l),null===t||void 0===n&&""===t?y({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),L(t)?new b(lt(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,r,a,i,o,s=!1,u=e._f.length;if(0===u)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<u;a++)i=0,o=!1,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],kt(t),h(t)&&(o=!0),i+=p(t).charsLeftOver,i+=10*p(t).unusedTokens.length,p(t).score=i,s?i<r&&(r=i,n=t):(null==r||i<r||o)&&(r=i,n=t,o&&(s=!0));m(e,n||t)}(e):n?kt(e):function(e){var t=e._i;l(t)?e._d=new Date(a.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=pt.exec(e._i);null===t?(gt(e),!1===e._isValid&&(delete e._isValid,vt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=f(t.slice(0),(function(e){return parseInt(e,10)})),Lt(e)):o(t)?function(e){if(!e._d){var t=z(e._i),n=void 0===t.day?t.date:t.day;e._a=f([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),Lt(e)}}(e):d(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),h(e)||(e._d=null),e))}function Yt(e,t,n,r,a){var s,l={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(o(e)&&u(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=n,l._i=e,l._f=t,l._strict=r,(s=new b(lt(wt(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Tt(e,t,n,r){return Yt(e,t,n,r,!1)}a.createFromInputFallback=w("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Dt=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:y()})),St=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:y()}));function xt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Tt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var jt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ot(e){var t=z(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,o=t.day||0,u=t.hour||0,l=t.minute||0,d=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,r=!1,a=jt.length;for(t in e)if(s(e,t)&&(-1===Me.call(jt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<a;++n)if(e[jt[n]]){if(r)return!1;parseFloat(e[jt[n]])!==fe(e[jt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*d+6e4*l+1e3*u*60*60,this._days=+o+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=ut(),this._bubble()}function Et(e){return e instanceof Ot}function Pt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ht(e,t){C(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+O(~~(e/60),2)+t+O(~~e%60,2)}))}Ht("Z",":"),Ht("ZZ",""),ue("Z",ae),ue("ZZ",ae),_e(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Ct(ae,e)}));var At=/([\+\-]|\d\d)/gi;function Ct(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(At)||["-",0,0])[1]+fe(n[2]))?0:"+"===n[0]?r:-r}function Nt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(L(e)||c(e)?e.valueOf():Tt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Tt(e).local()}function Ft(e){return-Math.round(e._d.getTimezoneOffset())}function Wt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var It=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,zt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Rt(e,t){var n,r,a,i,o,u,l=e,c=null;return Et(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:d(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=It.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:fe(c[2])*n,h:fe(c[3])*n,m:fe(c[4])*n,s:fe(c[5])*n,ms:fe(Pt(1e3*c[6]))*n}):(c=zt.exec(e))?(n="-"===c[1]?-1:1,l={y:Ut(c[2],n),M:Ut(c[3],n),w:Ut(c[4],n),d:Ut(c[5],n),h:Ut(c[6],n),m:Ut(c[7],n),s:Ut(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(i=Tt(l.from),o=Tt(l.to),a=i.isValid()&&o.isValid()?(o=Nt(o,i),i.isBefore(o)?u=Bt(i,o):((u=Bt(o,i)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new Ot(l),Et(e)&&s(e,"_locale")&&(r._locale=e._locale),Et(e)&&s(e,"_isValid")&&(r._isValid=e._isValid),r}function Ut(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Bt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Jt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(D(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),$t(this,Rt(n,r),e),this}}function $t(e,t,n,r){var i=t._milliseconds,o=Pt(t._days),s=Pt(t._months);e.isValid()&&(r=null==r||r,s&&Oe(e,Le(e,"Month")+s*n),o&&ke(e,"Date",Le(e,"Date")+o*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,o||s))}Rt.fn=Ot.prototype,Rt.invalid=function(){return Rt(NaN)};var Vt=Jt(1,"add"),qt=Jt(-1,"subtract");function Gt(e){return"string"==typeof e||e instanceof String}function Kt(e){return L(e)||c(e)||Gt(e)||d(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!d(t)&&Gt(e)})).length),t&&n}(e)||function(e){var t,n,r=o(e)&&!u(e),a=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],l=i.length;for(t=0;t<l;t+=1)n=i[t],a=a||s(e,n);return r&&a}(e)||null==e}function Qt(e){var t,n=o(e)&&!u(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||s(e,a[t]);return n&&r}function Zt(e,t){if(e.date()<t.date())return-Zt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ut(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}function nn(e,t){return(e%t+t)%t}function rn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-126227808e5:new Date(e,t,n).valueOf()}function an(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-126227808e5:Date.UTC(e,t,n)}function on(e,t){return t.erasAbbrRegex(e)}function sn(){var e,t,n,r,a,i=[],o=[],s=[],u=[],l=this.eras();for(e=0,t=l.length;e<t;++e)n=de(l[e].name),r=de(l[e].abbr),a=de(l[e].narrow),o.push(n),i.push(r),s.push(a),u.push(n),u.push(r),u.push(a);this._erasRegex=new RegExp("^("+u.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+o.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+s.join("|")+")","i")}function un(e,t){C(0,[e,e.length],0,t)}function ln(e,t,n,r,a){var i;return null==e?Fe(this,r,a).year:(t>(i=We(e,r,a))&&(t=i),dn.call(this,e,t,n,r,a))}function dn(e,t,n,r,a){var i=Ne(e,t,n,r,a),o=Ae(i.year,0,i.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}C("N",0,0,"eraAbbr"),C("NN",0,0,"eraAbbr"),C("NNN",0,0,"eraAbbr"),C("NNNN",0,0,"eraName"),C("NNNNN",0,0,"eraNarrow"),C("y",["y",1],"yo","eraYear"),C("y",["yy",2],0,"eraYear"),C("y",["yyy",3],0,"eraYear"),C("y",["yyyy",4],0,"eraYear"),ue("N",on),ue("NN",on),ue("NNN",on),ue("NNNN",(function(e,t){return t.erasNameRegex(e)})),ue("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),_e(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?p(n).era=a:p(n).invalidEra=e})),ue("y",te),ue("yy",te),ue("yyy",te),ue("yyyy",te),ue("yo",(function(e,t){return t._eraYearOrdinalRegex||te})),_e(["y","yy","yyy","yyyy"],0),_e(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,a):t[0]=parseInt(e,10)})),C(0,["gg",2],0,(function(){return this.weekYear()%100})),C(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),un("gggg","weekYear"),un("ggggg","weekYear"),un("GGGG","isoWeekYear"),un("GGGGG","isoWeekYear"),ue("G",ne),ue("g",ne),ue("GG",G,J),ue("gg",G,J),ue("GGGG",X,V),ue("gggg",X,V),ue("GGGGG",ee,q),ue("ggggg",ee,q),pe(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=fe(e)})),pe(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),C("Q",0,"Qo","quarter"),ue("Q",B),_e("Q",(function(e,t){t[1]=3*(fe(e)-1)})),C("D",["DD",2],"Do","date"),ue("D",G,oe),ue("DD",G,J),ue("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),_e(["D","DD"],2),_e("Do",(function(e,t){t[2]=fe(e.match(G)[0])}));var cn=be("Date",!0);C("DDD",["DDDD",3],"DDDo","dayOfYear"),ue("DDD",Z),ue("DDDD",$),_e(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=fe(e)})),C("m",["mm",2],0,"minute"),ue("m",G,se),ue("mm",G,J),_e(["m","mm"],4);var fn=be("Minutes",!1);C("s",["ss",2],0,"second"),ue("s",G,se),ue("ss",G,J),_e(["s","ss"],5);var mn,_n,pn=be("Seconds",!1);for(C("S",0,0,(function(){return~~(this.millisecond()/100)})),C(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),C(0,["SSS",3],0,"millisecond"),C(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),C(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),C(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),C(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),C(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),C(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),ue("S",Z,B),ue("SS",Z,J),ue("SSS",Z,$),mn="SSSS";mn.length<=9;mn+="S")ue(mn,te);function hn(e,t){t[6]=fe(1e3*("0."+e))}for(mn="S";mn.length<=9;mn+="S")_e(mn,hn);_n=be("Milliseconds",!1),C("z",0,0,"zoneAbbr"),C("zz",0,0,"zoneName");var yn=b.prototype;function gn(e){return e}yn.add=Vt,yn.calendar=function(e,t){1===arguments.length&&(arguments[0]?Kt(arguments[0])?(e=arguments[0],t=void 0):Qt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Tt(),r=Nt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",o=t&&(S(t[i])?t[i].call(this,n):t[i]);return this.format(o||this.localeData().calendar(i,this,Tt(n)))},yn.clone=function(){return new b(this)},yn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=Nt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=I(t)){case"year":i=Zt(this,r)/12;break;case"month":i=Zt(this,r);break;case"quarter":i=Zt(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:ce(i)},yn.endOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?an:rn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-nn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-nn(t,1e3)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},yn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=N(this,e);return this.localeData().postformat(t)},yn.from=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||Tt(e).isValid())?Rt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yn.fromNow=function(e){return this.from(Tt(),e)},yn.to=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||Tt(e).isValid())?Rt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yn.toNow=function(e){return this.to(Tt(),e)},yn.get=function(e){return S(this[e=I(e)])?this[e]():this},yn.invalidAt=function(){return p(this).overflow},yn.isAfter=function(e,t){var n=L(e)?e:Tt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},yn.isBefore=function(e,t){var n=L(e)?e:Tt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},yn.isBetween=function(e,t,n,r){var a=L(e)?e:Tt(e),i=L(t)?t:Tt(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&(("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n)))},yn.isSame=function(e,t){var n,r=L(e)?e:Tt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},yn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},yn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},yn.isValid=function(){return h(this)},yn.lang=en,yn.locale=Xt,yn.localeData=tn,yn.max=St,yn.min=Dt,yn.parsingFlags=function(){return m({},p(this))},yn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)s(e,t)&&n.push({unit:t,priority:U[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=z(e)),a=r.length;for(n=0;n<a;n++)this[r[n].unit](e[r[n].unit])}else if(S(this[e=I(e)]))return this[e](t);return this},yn.startOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?an:rn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=nn(t,6e4);break;case"second":t=this._d.valueOf(),t-=nn(t,1e3)}return this._d.setTime(t),a.updateOffset(this,!0),this},yn.subtract=qt,yn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},yn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},yn.toDate=function(){return new Date(this.valueOf())},yn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?N(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):S(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",N(n,"Z")):N(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},yn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(yn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),yn.toJSON=function(){return this.isValid()?this.toISOString():null},yn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},yn.unix=function(){return Math.floor(this.valueOf()/1e3)},yn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},yn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},yn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},yn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},yn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},yn.eraYear=function(){var e,t,n,r,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,r=this.clone().startOf("day").valueOf(),i[e].since<=r&&r<=i[e].until||i[e].until<=r&&r<=i[e].since)return(this.year()-a(i[e].since).year())*n+i[e].offset;return this.year()},yn.year=ve,yn.isLeapYear=function(){return ye(this.year())},yn.weekYear=function(e){return ln.call(this,e,this.week(),this.weekday()+this.localeData()._week.dow,this.localeData()._week.dow,this.localeData()._week.doy)},yn.isoWeekYear=function(e){return ln.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},yn.quarter=yn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},yn.month=Ee,yn.daysInMonth=function(){return we(this.year(),this.month())},yn.week=yn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},yn.isoWeek=yn.isoWeeks=function(e){var t=Fe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},yn.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},yn.weeksInWeekYear=function(){var e=this.localeData()._week;return We(this.weekYear(),e.dow,e.doy)},yn.isoWeeksInYear=function(){return We(this.year(),1,4)},yn.isoWeeksInISOWeekYear=function(){return We(this.isoWeekYear(),1,4)},yn.date=cn,yn.day=yn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=Le(this,"Day");return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},yn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},yn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},yn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},yn.hour=yn.hours=Xe,yn.minute=yn.minutes=fn,yn.second=yn.seconds=pn,yn.millisecond=yn.milliseconds=_n,yn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ct(ae,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Ft(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?$t(this,Rt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Ft(this)},yn.utc=function(e){return this.utcOffset(0,e)},yn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ft(this),"m")),this},yn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ct(re,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},yn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Tt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},yn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},yn.isLocal=function(){return!!this.isValid()&&!this._isUTC},yn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},yn.isUtc=Wt,yn.isUTC=Wt,yn.zoneAbbr=function(){return this._isUTC?"UTC":""},yn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},yn.dates=w("dates accessor is deprecated. Use date instead.",cn),yn.months=w("months accessor is deprecated. Use month instead",Ee),yn.years=w("years accessor is deprecated. Use year instead",ve),yn.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),yn.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return v(t,this),(t=wt(t))._a?(e=t._isUTC?_(t._a):Tt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&fe(e[r])!==fe(t[r]))&&o++;return o+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var Mn=j.prototype;function vn(e,t,n,r){var a=ut(),i=_().set(r,t);return a[n](i,e)}function bn(e,t,n){if(d(e)&&(t=e,e=void 0),e=e||"",null!=t)return vn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=vn(e,r,n,"month");return a}function Ln(e,t,n,r){"boolean"==typeof e?(d(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,d(t)&&(n=t,t=void 0),t=t||"");var a,i=ut(),o=e?i._week.dow:0,s=[];if(null!=n)return vn(t,(n+o)%7,r,"day");for(a=0;a<7;a++)s[a]=vn(t,(a+o)%7,r,"day");return s}Mn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return S(r)?r.call(t,n):r},Mn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(E).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},Mn.invalidDate=function(){return this._invalidDate},Mn.ordinal=function(e){return this._ordinal.replace("%d",e)},Mn.preparse=gn,Mn.postformat=gn,Mn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return S(a)?a(e,t,n,r):a.replace(/%d/i,e)},Mn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)},Mn.set=function(e){var t,n;for(n in e)s(e,n)&&(S(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Mn.eras=function(e,t){var n,r,i,o=this._eras||ut("en")._eras;for(n=0,r=o.length;n<r;++n){switch(typeof o[n].since){case"string":i=a(o[n].since).startOf("day"),o[n].since=i.valueOf()}switch(typeof o[n].until){case"undefined":o[n].until=1/0;break;case"string":i=a(o[n].until).startOf("day").valueOf(),o[n].until=i.valueOf()}}return o},Mn.erasParse=function(e,t,n){var r,a,i,o,s,u=this.eras();for(e=e.toUpperCase(),r=0,a=u.length;r<a;++r)if(i=u[r].name.toUpperCase(),o=u[r].abbr.toUpperCase(),s=u[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(o===e)return u[r];break;case"NNNN":if(i===e)return u[r];break;case"NNNNN":if(s===e)return u[r]}else if([i,o,s].indexOf(e)>=0)return u[r]},Mn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},Mn.erasAbbrRegex=function(e){return s(this,"_erasAbbrRegex")||sn.call(this),e?this._erasAbbrRegex:this._erasRegex},Mn.erasNameRegex=function(e){return s(this,"_erasNameRegex")||sn.call(this),e?this._erasNameRegex:this._erasRegex},Mn.erasNarrowRegex=function(e){return s(this,"_erasNarrowRegex")||sn.call(this),e?this._erasNarrowRegex:this._erasRegex},Mn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||De).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},Mn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[De.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Mn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return je.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=_([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},Mn.monthsRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||Pe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(s(this,"_monthsRegex")||(this._monthsRegex=xe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Mn.monthsShortRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||Pe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(s(this,"_monthsShortRegex")||(this._monthsShortRegex=Se),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Mn.week=function(e){return Fe(e,this._week.dow,this._week.doy).week},Mn.firstDayOfYear=function(){return this._week.doy},Mn.firstDayOfWeek=function(){return this._week.dow},Mn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ie(n,this._week.dow):e?n[e.day()]:n},Mn.weekdaysMin=function(e){return!0===e?Ie(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Mn.weekdaysShort=function(e){return!0===e?Ie(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Mn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return Ve.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=_([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},Mn.weekdaysRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(s(this,"_weekdaysRegex")||(this._weekdaysRegex=Be),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Mn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(s(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Mn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(s(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=$e),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Mn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Mn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ot("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===fe(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=w("moment.lang is deprecated. Use moment.locale instead.",ot),a.langData=w("moment.langData is deprecated. Use moment.localeData instead.",ut);var kn=Math.abs;function wn(e,t,n,r){var a=Rt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Yn(e){return e<0?Math.floor(e):Math.ceil(e)}function Tn(e){return 4800*e/146097}function Dn(e){return 146097*e/4800}function Sn(e){return function(){return this.as(e)}}var xn=Sn("ms"),jn=Sn("s"),On=Sn("m"),En=Sn("h"),Pn=Sn("d"),Hn=Sn("w"),An=Sn("M"),Cn=Sn("Q"),Nn=Sn("y"),Fn=xn;function Wn(e){return function(){return this.isValid()?this._data[e]:NaN}}var In=Wn("milliseconds"),zn=Wn("seconds"),Rn=Wn("minutes"),Un=Wn("hours"),Bn=Wn("days"),Jn=Wn("months"),$n=Wn("years"),Vn=Math.round,qn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Gn(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Kn=Math.abs;function Qn(e){return(e>0)-(e<0)||+e}function Zn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,i,o,s,u=Kn(this._milliseconds)/1e3,l=Kn(this._days),d=Kn(this._months),c=this.asSeconds();return c?(e=ce(u/60),t=ce(e/60),u%=60,e%=60,n=ce(d/12),d%=12,r=u?u.toFixed(3).replace(/\.?0+$/,""):"",a=c<0?"-":"",i=Qn(this._months)!==Qn(c)?"-":"",o=Qn(this._days)!==Qn(c)?"-":"",s=Qn(this._milliseconds)!==Qn(c)?"-":"",a+"P"+(n?i+n+"Y":"")+(d?i+d+"M":"")+(l?o+l+"D":"")+(t||e||u?"T":"")+(t?s+t+"H":"")+(e?s+e+"M":"")+(u?s+r+"S":"")):"P0D"}var Xn=Ot.prototype;return Xn.isValid=function(){return this._isValid},Xn.abs=function(){var e=this._data;return this._milliseconds=kn(this._milliseconds),this._days=kn(this._days),this._months=kn(this._months),e.milliseconds=kn(e.milliseconds),e.seconds=kn(e.seconds),e.minutes=kn(e.minutes),e.hours=kn(e.hours),e.months=kn(e.months),e.years=kn(e.years),this},Xn.add=function(e,t){return wn(this,e,t,1)},Xn.subtract=function(e,t){return wn(this,e,t,-1)},Xn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=I(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Tn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Dn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Xn.asMilliseconds=xn,Xn.asSeconds=jn,Xn.asMinutes=On,Xn.asHours=En,Xn.asDays=Pn,Xn.asWeeks=Hn,Xn.asMonths=An,Xn.asQuarters=Cn,Xn.asYears=Nn,Xn.valueOf=Fn,Xn._bubble=function(){var e,t,n,r,a,i=this._milliseconds,o=this._days,s=this._months,u=this._data;return i>=0&&o>=0&&s>=0||i<=0&&o<=0&&s<=0||(i+=864e5*Yn(Dn(s)+o),o=0,s=0),u.milliseconds=i%1e3,e=ce(i/1e3),u.seconds=e%60,t=ce(e/60),u.minutes=t%60,n=ce(t/60),u.hours=n%24,o+=ce(n/24),a=ce(Tn(o)),s+=a,o-=Yn(Dn(a)),r=ce(s/12),s%=12,u.days=o,u.months=s,u.years=r,this},Xn.clone=function(){return Rt(this)},Xn.get=function(e){return e=I(e),this.isValid()?this[e+"s"]():NaN},Xn.milliseconds=In,Xn.seconds=zn,Xn.minutes=Rn,Xn.hours=Un,Xn.days=Bn,Xn.weeks=function(){return ce(this.days()/7)},Xn.months=Jn,Xn.years=$n,Xn.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,i=qn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(i=Object.assign({},qn,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),n=this.localeData(),r=function(e,t,n,r){var a=Rt(e).abs(),i=Vn(a.as("s")),o=Vn(a.as("m")),s=Vn(a.as("h")),u=Vn(a.as("d")),l=Vn(a.as("M")),d=Vn(a.as("w")),c=Vn(a.as("y")),f=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||o<=1&&["m"]||o<n.m&&["mm",o]||s<=1&&["h"]||s<n.h&&["hh",s]||u<=1&&["d"]||u<n.d&&["dd",u];return null!=n.w&&(f=f||d<=1&&["w"]||d<n.w&&["ww",d]),(f=f||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,f[3]=+e>0,f[4]=r,Gn.apply(null,f)}(this,!a,i,n),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},Xn.toISOString=Zn,Xn.toString=Zn,Xn.toJSON=Zn,Xn.locale=Xt,Xn.localeData=tn,Xn.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Zn),Xn.lang=en,C("X",0,0,"unix"),C("x",0,0,"valueOf"),ue("x",ne),ue("X",/[+-]?\d+(\.\d{1,3})?/),_e("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),_e("x",(function(e,t,n){n._d=new Date(fe(e))})),
//! moment.js
a.version="2.30.1",t=Tt,a.fn=yn,a.min=function(){var e=[].slice.call(arguments,0);return xt("isBefore",e)},a.max=function(){var e=[].slice.call(arguments,0);return xt("isAfter",e)},a.now=function(){return Date.now?Date.now():+new Date},a.utc=_,a.unix=function(e){return Tt(1e3*e)},a.months=function(e,t){return bn(e,t,"months")},a.isDate=c,a.locale=ot,a.invalid=y,a.duration=Rt,a.isMoment=L,a.weekdays=function(e,t,n){return Ln(e,t,n,"weekdays")},a.parseZone=function(){return Tt.apply(null,arguments).parseZone()},a.localeData=ut,a.isDuration=Et,a.monthsShort=function(e,t){return bn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return Ln(e,t,n,"weekdaysMin")},a.defineLocale=st,a.updateLocale=function(e,t){if(null!=t){var n,r,a=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(x(tt[e]._config,t)):(null!=(r=it(e))&&(a=r._config),t=x(a,t),null==r&&(t.abbr=e),(n=new j(t)).parentLocale=tt[e],tt[e]=n),ot(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===ot()&&ot(e)):null!=tt[e]&&delete tt[e]);return tt[e]},a.locales=function(){return Y(tt)},a.weekdaysShort=function(e,t,n){return Ln(e,t,n,"weekdaysShort")},a.normalizeUnits=I,a.relativeTimeRounding=function(e){return void 0===e?Vn:"function"==typeof e&&(Vn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==qn[e]&&(void 0===t?qn[e]:(qn[e]=t,"s"===e&&(qn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=yn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(274)(e))},function(e,t,n){"use strict";e.exports=n(219)},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return j})),n.d(t,"b",(function(){return O})),n.d(t,"c",(function(){return P})),n.d(t,"d",(function(){return A})),n.d(t,"e",(function(){return C}));var r=n(4),a=n.n(r),i=n(212),o=n.n(i),s=n(33),u=n.n(s),l=n(211),d=n.n(l);n(14);function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(){_=function(e,t){return new n(e,void 0,t)};var e=RegExp.prototype,t=new WeakMap;function n(e,r,a){var i=new RegExp(e,r);return t.set(i,a||t.get(e)),y(i,n.prototype)}function r(e,n){var r=t.get(n);return Object.keys(r).reduce((function(t,n){return t[n]=e[r[n]],t}),Object.create(null))}return h(n,RegExp),n.prototype.exec=function(t){var n=e.exec.call(this,t);return n&&(n.groups=r(n,this)),n},n.prototype[Symbol.replace]=function(n,a){if("string"==typeof a){var i=t.get(this);return e[Symbol.replace].call(this,n,a.replace(/\$<([^>]+)>/g,(function(e,t){return"$"+i[t]})))}if("function"==typeof a){var o=this;return e[Symbol.replace].call(this,n,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(r(e,o)),a.apply(this,e)}))}return e[Symbol.replace].call(this,n,a)},_.apply(this,arguments)}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&y(e,t)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,a,i=[],o=!0,s=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(s)throw a}}return i}(e,t)||M(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function b(){return void 0!==e&&!e.browser}function L(){return e.versions&&e.versions.node?"v".concat(e.versions.node):e.version}function k(){}var w=_(/([0-9]+)(%)/,{value:1});function Y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:7,n=t;if(w.test(e)){var r,a=null===(r=e.match(w))||void 0===r?void 0:r.groups;if(a&&a.value){var i=parseInt(a.value)/100;n=Math.round(t*i)}}return Math.min(30,Math.max(1,n))}function T(e,t){return t("info","Throttle request to ".concat(e,"/s")),d()({limit:e,interval:1e3,strict:!1})}var D=function(e){return new Promise((function(t){setTimeout(t,e)}))},S=function(e){return Math.pow(Math.SQRT2,e)};var x=/^(?!\w+:\/\/)([^\s:]+\.?[^\s:]+)(?::(\d+))?(?!:)$/;function j(e,t){var n=f(f({},{insecure:!1,retryOnError:!0,logHandler:function(e,t){if("error"===e&&t){var n=[t.name,t.message].filter((function(e){return e})).join(" - ");return console.error("[error] ".concat(n)),void console.error(t)}console.log("[".concat(e,"] ").concat(t))},headers:{},httpAgent:!1,httpsAgent:!1,timeout:3e4,throttle:0,proxy:!1,basePath:"",adapter:void 0,maxContentLength:1073741824,maxBodyLength:1073741824}),t);if(!n.accessToken){var r=new TypeError("Expected parameter accessToken");throw n.logHandler("error",r),r}var i=n.insecure?"http":"https",s=n.space?"".concat(n.space,"/"):"",l=n.defaultHostname,d=n.insecure?80:443;if(n.host&&x.test(n.host)){var c=n.host.split(":");if(2===c.length){var m=g(c,2);l=m[0],d=m[1]}else l=c[0]}n.basePath&&(n.basePath="/".concat(n.basePath.split("/").filter(Boolean).join("/")));var _=t.baseURL||"".concat(i,"://").concat(l,":").concat(d).concat(n.basePath,"/spaces/").concat(s);n.headers.Authorization||"function"==typeof n.accessToken||(n.headers.Authorization="Bearer "+n.accessToken),b()&&(n.headers["user-agent"]="node.js/"+L(),n.headers["Accept-Encoding"]="gzip");var p={baseURL:_,headers:n.headers,httpAgent:n.httpAgent,httpsAgent:n.httpsAgent,paramsSerializer:o.a.stringify,proxy:n.proxy,timeout:n.timeout,adapter:n.adapter,maxContentLength:n.maxContentLength,maxBodyLength:n.maxBodyLength,logHandler:n.logHandler,responseLogger:n.responseLogger,requestLogger:n.requestLogger,retryOnError:n.retryOnError},h=e.create(p);return h.httpClientParams=t,h.cloneWithNewParams=function(n){return j(e,f(f({},a()(t)),n))},n.onBeforeRequest&&h.interceptors.request.use(n.onBeforeRequest),"function"==typeof n.accessToken&&function(e,t){e.interceptors.request.use((function(e){return t().then((function(t){return e.headers=f(f({},e.headers),{},{Authorization:"Bearer ".concat(t)}),e}))}))}(h,n.accessToken),n.throttle&&function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"auto",n=e.defaults.logHandler,r=void 0===n?k:n,a=u()(t)?Y(t):Y("auto",t),i=T(a,r),o=!1,s=e.interceptors.request.use((function(e){return i((function(){return e}))()}),(function(e){return Promise.reject(e)})),l=e.interceptors.response.use((function(n){if(!o&&u()(t)&&("auto"===t||w.test(t))&&n.headers&&n.headers["x-contentful-ratelimit-second-limit"]){var l=parseInt(n.headers["x-contentful-ratelimit-second-limit"]),d=Y(t,l);d!==a&&(s&&e.interceptors.request.eject(s),a=d,i=T(d,r),s=e.interceptors.request.use((function(e){return i((function(){return e}))()}),(function(e){return Promise.reject(e)}))),o=!0}return n}),(function(e){return Promise.reject(e)}))}(h,n.throttle),function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,n=e.defaults,r=n.responseLogger,a=void 0===r?k:r,i=n.requestLogger,o=void 0===i?k:i;e.interceptors.request.use((function(e){return o(e),e}),(function(e){return o(e),Promise.reject(e)})),e.interceptors.response.use((function(e){return a(e),e}),(function(n){var r=n.response,i=n.config;if(a(n),!i||!e.defaults.retryOnError)return Promise.reject(n);var o=i.attempts||1;if(o>t)return n.attempts=i.attempts,Promise.reject(n);var s=null,u=S(o);return r?r.status>=500&&r.status<600?s="Server ".concat(r.status):429===r.status&&(s="Rate limit",r.headers&&n.response.headers["x-contentful-ratelimit-reset"]&&(u=r.headers["x-contentful-ratelimit-reset"])):s="Connection",s?(u=Math.floor(1e3*u+200*Math.random()+500),e.defaults.logHandler("warning","".concat(s," error occurred. Waiting for ").concat(u," ms before retrying...")),i.attempts=o+1,delete i.httpAgent,delete i.httpsAgent,D(u).then((function(){return e(i)}))):Promise.reject(n)}))}(h,n.retryLimit),n.onError&&h.interceptors.response.use((function(e){return e}),n.onError),h}function O(e){var t=e.query,n={};return delete t.resolveLinks,n.params=a()(t),n}function E(e){var t,n=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=M(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw i}}}}(Object.getOwnPropertyNames(e));try{for(n.s();!(t=n.n()).done;){var r=e[t.value];r&&"object"===m(r)&&E(r)}}catch(e){n.e(e)}finally{n.f()}return Object.freeze(e)}function P(e){return E(e.sys||{}),e}function H(){var e=window;if(!e)return null;var t=e.navigator.userAgent,n=e.navigator.platform;return-1!==["Macintosh","MacIntel","MacPPC","Mac68K"].indexOf(n)?"macOS":-1!==["iPhone","iPad","iPod"].indexOf(n)?"iOS":-1!==["Win32","Win64","Windows","WinCE"].indexOf(n)?"Windows":/Android/.test(t)?"Android":/Linux/.test(n)?"Linux":null}function A(t,n,r,a){var i=[];n&&i.push("app ".concat(n)),r&&i.push("integration ".concat(r)),a&&i.push("feature "+a),i.push("sdk ".concat(t));var o=null;try{"undefined"!=typeof window&&"navigator"in window&&"product"in window.navigator&&"ReactNative"===window.navigator.product?(o=H(),i.push("platform ReactNative")):b()?(o=function(){var t=e.platform||"linux",n=e.version||"0.0.0",r={android:"Android",aix:"Linux",darwin:"macOS",freebsd:"Linux",linux:"Linux",openbsd:"Linux",sunos:"Linux",win32:"Windows"};return t in r?"".concat(r[t]||"Linux","/").concat(n):null}(),i.push("platform node.js/".concat(L()))):(o=H(),i.push("platform browser"))}catch(e){o=null}return o&&i.push("os ".concat(o)),"".concat(i.filter((function(e){return""!==e})).join("; "),";")}function C(e){return Object.defineProperty(e,"toPlainObject",{enumerable:!1,configurable:!1,writable:!1,value:function(){return a()(this)}})}}).call(this,n(13))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return et}));var r=n(31),a=n.n(r),i=n(208),o=n.n(i),s=n(1),u=n.n(s),l=n(209),d=n(20),c=n(32),f=n(217),m=n(218),_=function(e,t){for(var n=[e[0]],r=0,a=t.length;r<a;r+=1)n.push(t[r],e[r+1]);return n},p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},v=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},b=function(e){return"object"===(void 0===e?"undefined":p(e))&&e.constructor===Object},L=Object.freeze([]),k=Object.freeze({});function w(e){return"function"==typeof e}function Y(e){return e.displayName||e.name||"Component"}function T(e){return e&&"string"==typeof e.styledComponentId}var D=void 0!==e&&(e.env.REACT_APP_SC_ATTR||e.env.SC_ATTR)||"data-styled",S="undefined"!=typeof window&&"HTMLElement"in window,x="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||void 0!==e&&(e.env.REACT_APP_SC_DISABLE_SPEEDY||e.env.SC_DISABLE_SPEEDY)||!1,j={};var O=function(e){function t(n){h(this,t);for(var r=arguments.length,a=Array(r>1?r-1:0),i=1;i<r;i++)a[i-1]=arguments[i];var o=v(this,e.call(this,"An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#"+n+" for more information."+(a.length>0?" Additional arguments: "+a.join(", "):"")));return v(o)}return M(t,e),t}(Error),E=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,P=function(e){var t=""+(e||""),n=[];return t.replace(E,(function(e,t,r){return n.push({componentId:t,matchIndex:r}),e})),n.map((function(e,r){var a=e.componentId,i=e.matchIndex,o=n[r+1];return{componentId:a,cssFromDOM:o?t.slice(i,o.matchIndex):t.slice(i)}}))},H=/^\s*\/\/.*$/gm,A=new a.a({global:!1,cascade:!0,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),C=new a.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),N=[],F=function(e){if(-2===e){var t=N;return N=[],t}},W=o()((function(e){N.push(e)})),I=void 0,z=void 0,R=void 0,U=function(e,t,n){return t>0&&-1!==n.slice(0,t).indexOf(z)&&n.slice(t-z.length,t)!==z?"."+I:e};C.use([function(e,t,n){2===e&&n.length&&n[0].lastIndexOf(z)>0&&(n[0]=n[0].replace(R,U))},W,F]),A.use([W,F]);var B=function(e){return A("",e)};function J(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"&",a=e.join("").replace(H,""),i=t&&n?n+" "+t+" { "+a+" }":a;return I=r,z=t,R=new RegExp("\\"+z+"\\b","g"),C(n||!t?"":t,i)}var $=function(){return n.nc},V=function(e,t,n){n&&((e[t]||(e[t]=Object.create(null)))[n]=!0)},q=function(e,t){e[t]=Object.create(null)},G=function(e){return function(t,n){return void 0!==e[t]&&e[t][n]}},K=function(e){var t="";for(var n in e)t+=Object.keys(e[n]).join(" ")+" ";return t.trim()},Q=function(e){if(e.sheet)return e.sheet;for(var t=e.ownerDocument.styleSheets.length,n=0;n<t;n+=1){var r=e.ownerDocument.styleSheets[n];if(r.ownerNode===e)return r}throw new O(10)},Z=function(e,t,n){if(!t)return!1;var r=e.cssRules.length;try{e.insertRule(t,n<=r?n:r)}catch(e){return!1}return!0},X=function(e){return"\n/* sc-component-id: "+e+" */\n"},ee=function(e,t){for(var n=0,r=0;r<=t;r+=1)n+=e[r];return n},te=function(e,t){return function(n){var r=$();return"<style "+[r&&'nonce="'+r+'"',D+'="'+K(t)+'"','data-styled-version="4.4.1"',n].filter(Boolean).join(" ")+">"+e()+"</style>"}},ne=function(e,t){return function(){var n,r=((n={})[D]=K(t),n["data-styled-version"]="4.4.1",n),a=$();return a&&(r.nonce=a),u.a.createElement("style",g({},r,{dangerouslySetInnerHTML:{__html:e()}}))}},re=function(e){return function(){return Object.keys(e)}},ae=function(e,t){return e.createTextNode(X(t))},ie=function e(t,n){var r=void 0===t?Object.create(null):t,a=void 0===n?Object.create(null):n,i=function(e){var t=a[e];return void 0!==t?t:a[e]=[""]},o=function(){var e="";for(var t in a){var n=a[t][0];n&&(e+=X(t)+n)}return e};return{clone:function(){var t=function(e){var t=Object.create(null);for(var n in e)t[n]=g({},e[n]);return t}(r),n=Object.create(null);for(var i in a)n[i]=[a[i][0]];return e(t,n)},css:o,getIds:re(a),hasNameForId:G(r),insertMarker:i,insertRules:function(e,t,n){i(e)[0]+=t.join(" "),V(r,e,n)},removeRules:function(e){var t=a[e];void 0!==t&&(t[0]="",q(r,e))},sealed:!1,styleTag:null,toElement:ne(o,r),toHTML:te(o,r)}},oe=function(e,t,n,r,a){if(S&&!n){var i=function(e,t,n){var r=document;e?r=e.ownerDocument:t&&(r=t.ownerDocument);var a=r.createElement("style");a.setAttribute(D,""),a.setAttribute("data-styled-version","4.4.1");var i=$();if(i&&a.setAttribute("nonce",i),a.appendChild(r.createTextNode("")),e&&!t)e.appendChild(a);else{if(!t||!e||!t.parentNode)throw new O(6);t.parentNode.insertBefore(a,n?t:t.nextSibling)}return a}(e,t,r);return x?function(e,t){var n=Object.create(null),r=Object.create(null),a=void 0!==t,i=!1,o=function(t){var a=r[t];return void 0!==a?a:(r[t]=ae(e.ownerDocument,t),e.appendChild(r[t]),n[t]=Object.create(null),r[t])},s=function(){var e="";for(var t in r)e+=r[t].data;return e};return{clone:function(){throw new O(5)},css:s,getIds:re(r),hasNameForId:G(n),insertMarker:o,insertRules:function(e,r,s){for(var u=o(e),l=[],d=r.length,c=0;c<d;c+=1){var f=r[c],m=a;if(m&&-1!==f.indexOf("@import"))l.push(f);else{m=!1;var _=c===d-1?"":" ";u.appendData(""+f+_)}}V(n,e,s),a&&l.length>0&&(i=!0,t().insertRules(e+"-import",l))},removeRules:function(o){var s=r[o];if(void 0!==s){var u=ae(e.ownerDocument,o);e.replaceChild(u,s),r[o]=u,q(n,o),a&&i&&t().removeRules(o+"-import")}},sealed:!1,styleTag:e,toElement:ne(s,n),toHTML:te(s,n)}}(i,a):function(e,t){var n=Object.create(null),r=Object.create(null),a=[],i=void 0!==t,o=!1,s=function(e){var t=r[e];return void 0!==t?t:(r[e]=a.length,a.push(0),q(n,e),r[e])},u=function(){var t=Q(e).cssRules,n="";for(var i in r){n+=X(i);for(var o=r[i],s=ee(a,o),u=s-a[o];u<s;u+=1){var l=t[u];void 0!==l&&(n+=l.cssText)}}return n};return{clone:function(){throw new O(5)},css:u,getIds:re(r),hasNameForId:G(n),insertMarker:s,insertRules:function(r,u,l){for(var d=s(r),c=Q(e),f=ee(a,d),m=0,_=[],p=u.length,h=0;h<p;h+=1){var y=u[h],g=i;g&&-1!==y.indexOf("@import")?_.push(y):Z(c,y,f+m)&&(g=!1,m+=1)}i&&_.length>0&&(o=!0,t().insertRules(r+"-import",_)),a[d]+=m,V(n,r,l)},removeRules:function(s){var u=r[s];if(void 0!==u&&!1!==e.isConnected){var l=a[u];!function(e,t,n){for(var r=t-n,a=t;a>r;a-=1)e.deleteRule(a)}(Q(e),ee(a,u)-1,l),a[u]=0,q(n,s),i&&o&&t().removeRules(s+"-import")}},sealed:!1,styleTag:e,toElement:ne(u,n),toHTML:te(u,n)}}(i,a)}return ie()},se=/\s+/,ue=void 0;ue=S?x?40:1e3:-1;var le=0,de=void 0,ce=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:S?document.head:null,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];h(this,e),this.getImportRuleTag=function(){var e=t.importRuleTag;if(void 0!==e)return e;var n=t.tags[0];return t.importRuleTag=oe(t.target,n?n.styleTag:null,t.forceServer,!0)},le+=1,this.id=le,this.forceServer=r,this.target=r?null:n,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!S||this.forceServer)return this;var e=[],t=[],n=!1,r=document.querySelectorAll("style["+D+'][data-styled-version="4.4.1"]'),a=r.length;if(!a)return this;for(var i=0;i<a;i+=1){var o=r[i];n||(n=!!o.getAttribute("data-styled-streamed"));for(var s,u=(o.getAttribute(D)||"").trim().split(se),l=u.length,d=0;d<l;d+=1)s=u[d],this.rehydratedNames[s]=!0;t.push.apply(t,P(o.textContent)),e.push(o)}var c=t.length;if(!c)return this;var f=this.makeTag(null);!function(e,t,n){for(var r=0,a=n.length;r<a;r+=1){var i=n[r],o=i.componentId,s=i.cssFromDOM,u=B(s);e.insertRules(o,u)}for(var l=0,d=t.length;l<d;l+=1){var c=t[l];c.parentNode&&c.parentNode.removeChild(c)}}(f,e,t),this.capacity=Math.max(1,ue-c),this.tags.push(f);for(var m=0;m<c;m+=1)this.tagMap[t[m].componentId]=f;return this},e.reset=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];de=new e(void 0,t).rehydrate()},e.prototype.clone=function(){var t=new e(this.target,this.forceServer);return this.clones.push(t),t.tags=this.tags.map((function(e){for(var n=e.getIds(),r=e.clone(),a=0;a<n.length;a+=1)t.tagMap[n[a]]=r;return r})),t.rehydratedNames=g({},this.rehydratedNames),t.deferred=g({},this.deferred),t},e.prototype.sealAllTags=function(){this.capacity=1,this.tags.forEach((function(e){e.sealed=!0}))},e.prototype.makeTag=function(e){var t=e?e.styleTag:null;return oe(this.target,t,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var t=this.tagMap[e];if(void 0!==t&&!t.sealed)return t;var n=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=ue,n=this.makeTag(n),this.tags.push(n)),this.tagMap[e]=n},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,t){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[t])return!0;var n=this.tagMap[e];return void 0!==n&&n.hasNameForId(e,t)},e.prototype.deferredInject=function(e,t){if(void 0===this.tagMap[e]){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].deferredInject(e,t);this.getTagForId(e).insertMarker(e),this.deferred[e]=t}},e.prototype.inject=function(e,t,n){for(var r=this.clones,a=0;a<r.length;a+=1)r[a].inject(e,t,n);var i=this.getTagForId(e);if(void 0!==this.deferred[e]){var o=this.deferred[e].concat(t);i.insertRules(e,o,n),this.deferred[e]=void 0}else i.insertRules(e,t,n)},e.prototype.remove=function(e){var t=this.tagMap[e];if(void 0!==t){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].remove(e);t.removeRules(e),this.ignoreRehydratedNames[e]=!0,this.deferred[e]=void 0}},e.prototype.toHTML=function(){return this.tags.map((function(e){return e.toHTML()})).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map((function(t,n){var r="sc-"+e+"-"+n;return Object(s.cloneElement)(t.toElement(),{key:r})}))},y(e,null,[{key:"master",get:function(){return de||(de=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),fe=function(){function e(t,n){var r=this;h(this,e),this.inject=function(e){e.hasNameForId(r.id,r.name)||e.inject(r.id,r.rules,r.name)},this.toString=function(){throw new O(12,String(r.name))},this.name=t,this.rules=n,this.id="sc-keyframes-"+t}return e.prototype.getName=function(){return this.name},e}(),me=/([A-Z])/g,_e=/^ms-/;function pe(e){return e.replace(me,"-$1").toLowerCase().replace(_e,"-ms-")}var he=function(e){return null==e||!1===e||""===e},ye=function e(t,n){var r=[];return Object.keys(t).forEach((function(n){if(!he(t[n])){if(b(t[n]))return r.push.apply(r,e(t[n],n)),r;if(w(t[n]))return r.push(pe(n)+":",t[n],";"),r;r.push(pe(n)+": "+(a=n,(null==(i=t[n])||"boolean"==typeof i||""===i?"":"number"!=typeof i||0===i||a in l.a?String(i).trim():i+"px")+";"))}var a,i;return r})),n?[n+" {"].concat(r,["}"]):r};function ge(e,t,n){if(Array.isArray(e)){for(var r,a=[],i=0,o=e.length;i<o;i+=1)null!==(r=ge(e[i],t,n))&&(Array.isArray(r)?a.push.apply(a,r):a.push(r));return a}return he(e)?null:T(e)?"."+e.styledComponentId:w(e)?"function"!=typeof(s=e)||s.prototype&&s.prototype.isReactComponent||!t?e:ge(e(t),t,n):e instanceof fe?n?(e.inject(n),e.getName()):e:b(e)?ye(e):e.toString();var s}function Me(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return w(e)||b(e)?ge(_(L,[e].concat(n))):ge(_(e,n))}function ve(e){for(var t,n=0|e.length,r=0|n,a=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(a)|(255&e.charCodeAt(++a))<<8|(255&e.charCodeAt(++a))<<16|(255&e.charCodeAt(++a))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++a;switch(n){case 3:r^=(255&e.charCodeAt(a+2))<<16;case 2:r^=(255&e.charCodeAt(a+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(a)))+((1540483477*(r>>>16)&65535)<<16)}return((r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16))^r>>>15)>>>0}var be=function(e){return String.fromCharCode(e+(e>25?39:97))};function Le(e){var t="",n=void 0;for(n=e;n>52;n=Math.floor(n/52))t=be(n%52)+t;return be(n%52)+t}function ke(e,t){for(var n=0;n<e.length;n+=1){var r=e[n];if(Array.isArray(r)&&!ke(r,t))return!1;if(w(r)&&!T(r))return!1}return!t.some((function(e){return w(e)||function(e){for(var t in e)if(w(e[t]))return!0;return!1}(e)}))}var we,Ye=function(e){return Le(ve(e))},Te=function(){function e(t,n,r){h(this,e),this.rules=t,this.isStatic=ke(t,n),this.componentId=r,ce.master.hasId(r)||ce.master.deferredInject(r,[])}return e.prototype.generateAndInjectStyles=function(e,t){var n=this.isStatic,r=this.componentId,a=this.lastClassName;if(S&&n&&"string"==typeof a&&t.hasNameForId(r,a))return a;var i=ge(this.rules,e,t),o=Ye(this.componentId+i.join(""));return t.hasNameForId(r,o)||t.inject(this.componentId,J(i,"."+o,void 0,r),o),this.lastClassName=o,o},e.generateName=function(e){return Ye(e)},e}(),De=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k,r=!!n&&e.theme===n.theme,a=e.theme&&!r?e.theme:t||n.theme;return a},Se=/[[\].#*$><+~=|^:(),"'`-]+/g,xe=/(^-|-$)/g;function je(e){return e.replace(Se,"-").replace(xe,"")}function Oe(e){return"string"==typeof e&&!0}var Ee={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDerivedStateFromProps:!0,propTypes:!0,type:!0},Pe={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},He=((we={})[d.ForwardRef]={$$typeof:!0,render:!0},we),Ae=Object.defineProperty,Ce=Object.getOwnPropertyNames,Ne=Object.getOwnPropertySymbols,Fe=void 0===Ne?function(){return[]}:Ne,We=Object.getOwnPropertyDescriptor,Ie=Object.getPrototypeOf,ze=Object.prototype,Re=Array.prototype;function Ue(e,t,n){if("string"!=typeof t){var r=Ie(t);r&&r!==ze&&Ue(e,r,n);for(var a=Re.concat(Ce(t),Fe(t)),i=He[e.$$typeof]||Ee,o=He[t.$$typeof]||Ee,s=a.length,u=void 0,l=void 0;s--;)if(l=a[s],!(Pe[l]||n&&n[l]||o&&o[l]||i&&i[l])&&(u=We(t,l)))try{Ae(e,l,u)}catch(e){}return e}return e}var Be=Object(s.createContext)(),Je=Be.Consumer,$e=(function(e){function t(n){h(this,t);var r=v(this,e.call(this,n));return r.getContext=Object(c.a)(r.getContext.bind(r)),r.renderInner=r.renderInner.bind(r),r}M(t,e),t.prototype.render=function(){return this.props.children?u.a.createElement(Be.Consumer,null,this.renderInner):null},t.prototype.renderInner=function(e){var t=this.getContext(this.props.theme,e);return u.a.createElement(Be.Provider,{value:t},this.props.children)},t.prototype.getTheme=function(e,t){if(w(e))return e(t);if(null===e||Array.isArray(e)||"object"!==(void 0===e?"undefined":p(e)))throw new O(8);return g({},t,e)},t.prototype.getContext=function(e,t){return this.getTheme(e,t)}}(s.Component),function(){function e(){h(this,e),this.masterSheet=ce.master,this.instance=this.masterSheet.clone(),this.sealed=!1}e.prototype.seal=function(){if(!this.sealed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.sealed=!0}},e.prototype.collectStyles=function(e){if(this.sealed)throw new O(2);return u.a.createElement(qe,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.seal(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.seal(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new O(3)}}(),Object(s.createContext)()),Ve=$e.Consumer,qe=function(e){function t(n){h(this,t);var r=v(this,e.call(this,n));return r.getContext=Object(c.a)(r.getContext),r}return M(t,e),t.prototype.getContext=function(e,t){if(e)return e;if(t)return new ce(t);throw new O(4)},t.prototype.render=function(){var e=this.props,t=e.children,n=e.sheet,r=e.target;return u.a.createElement($e.Provider,{value:this.getContext(n,r)},t)},t}(s.Component),Ge={};var Ke=function(e){function t(){h(this,t);var n=v(this,e.call(this));return n.attrs={},n.renderOuter=n.renderOuter.bind(n),n.renderInner=n.renderInner.bind(n),n}return M(t,e),t.prototype.render=function(){return u.a.createElement(Ve,null,this.renderOuter)},t.prototype.renderOuter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ce.master;return this.styleSheet=e,this.props.forwardedComponent.componentStyle.isStatic?this.renderInner():u.a.createElement(Je,null,this.renderInner)},t.prototype.renderInner=function(e){var t=this.props.forwardedComponent,n=t.componentStyle,r=t.defaultProps,a=(t.displayName,t.foldedComponentIds),i=t.styledComponentId,o=t.target,u=void 0;u=n.isStatic?this.generateAndInjectStyles(k,this.props):this.generateAndInjectStyles(De(this.props,e,r)||k,this.props);var l=this.props.as||this.attrs.as||o,d=Oe(l),c={},m=g({},this.props,this.attrs),_=void 0;for(_ in m)"forwardedComponent"!==_&&"as"!==_&&("forwardedRef"===_?c.ref=m[_]:"forwardedAs"===_?c.as=m[_]:d&&!Object(f.a)(_)||(c[_]=m[_]));return this.props.style&&this.attrs.style&&(c.style=g({},this.attrs.style,this.props.style)),c.className=Array.prototype.concat(a,i,u!==i?u:null,this.props.className,this.attrs.className).filter(Boolean).join(" "),Object(s.createElement)(l,c)},t.prototype.buildExecutionContext=function(e,t,n){var r=this,a=g({},t,{theme:e});return n.length?(this.attrs={},n.forEach((function(e){var t,n=e,i=!1,o=void 0,s=void 0;for(s in w(n)&&(n=n(a),i=!0),n)o=n[s],i||!w(o)||(t=o)&&t.prototype&&t.prototype.isReactComponent||T(o)||(o=o(a)),r.attrs[s]=o,a[s]=o})),a):a},t.prototype.generateAndInjectStyles=function(e,t){var n=t.forwardedComponent,r=n.attrs,a=n.componentStyle;n.warnTooManyClasses;return a.isStatic&&!r.length?a.generateAndInjectStyles(k,this.styleSheet):a.generateAndInjectStyles(this.buildExecutionContext(e,t,r),this.styleSheet)},t}(s.Component);function Qe(e,t,n){var r=T(e),a=!Oe(e),i=t.displayName,o=void 0===i?function(e){return Oe(e)?"styled."+e:"Styled("+Y(e)+")"}(e):i,s=t.componentId,l=void 0===s?function(e,t,n){var r="string"!=typeof t?"sc":je(t),a=(Ge[r]||0)+1;Ge[r]=a;var i=r+"-"+e.generateName(r+a);return n?n+"-"+i:i}(Te,t.displayName,t.parentComponentId):s,d=t.ParentComponent,c=void 0===d?Ke:d,f=t.attrs,_=void 0===f?L:f,p=t.displayName&&t.componentId?je(t.displayName)+"-"+t.componentId:t.componentId||l,h=r&&e.attrs?Array.prototype.concat(e.attrs,_).filter(Boolean):_,y=new Te(r?e.componentStyle.rules.concat(n):n,h,p),M=void 0,v=function(e,t){return u.a.createElement(c,g({},e,{forwardedComponent:M,forwardedRef:t}))};return v.displayName=o,(M=u.a.forwardRef(v)).displayName=o,M.attrs=h,M.componentStyle=y,M.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):L,M.styledComponentId=p,M.target=r?e.target:e,M.withComponent=function(e){var r=t.componentId,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["componentId"]),i=r&&r+"-"+(Oe(e)?e:je(Y(e)));return Qe(e,g({},a,{attrs:h,componentId:i,ParentComponent:c}),n)},Object.defineProperty(M,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?Object(m.a)(e.defaultProps,t):t}}),M.toString=function(){return"."+M.styledComponentId},a&&Ue(M,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,styledComponentId:!0,target:!0,withComponent:!0}),M}var Ze=function(e){return function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k;if(!Object(d.isValidElementType)(n))throw new O(1,String(n));var a=function(){return t(n,r,Me.apply(void 0,arguments))};return a.withConfig=function(a){return e(t,n,g({},r,a))},a.attrs=function(a){return e(t,n,g({},r,{attrs:Array.prototype.concat(r.attrs,a).filter(Boolean)}))},a}(Qe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Ze[e]=Ze(e)}));var Xe=function(){function e(t,n){h(this,e),this.rules=t,this.componentId=n,this.isStatic=ke(t,L),ce.master.hasId(n)||ce.master.deferredInject(n,[])}return e.prototype.createStyles=function(e,t){var n=J(ge(this.rules,e,t),"");t.inject(this.componentId,n)},e.prototype.removeStyles=function(e){var t=this.componentId;e.hasId(t)&&e.remove(t)},e.prototype.renderStyles=function(e,t){this.removeStyles(t),this.createStyles(e,t)},e}();function et(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var a=Me.apply(void 0,[e].concat(n)),i="sc-global-"+ve(JSON.stringify(a)),o=new Xe(a,i),s=function(e){function t(n){h(this,t);var r=v(this,e.call(this,n)),a=r.constructor,i=a.globalStyle,o=a.styledComponentId;return S&&(window.scCGSHMRCache[o]=(window.scCGSHMRCache[o]||0)+1),r.state={globalStyle:i,styledComponentId:o},r}return M(t,e),t.prototype.componentWillUnmount=function(){window.scCGSHMRCache[this.state.styledComponentId]&&(window.scCGSHMRCache[this.state.styledComponentId]-=1),0===window.scCGSHMRCache[this.state.styledComponentId]&&this.state.globalStyle.removeStyles(this.styleSheet)},t.prototype.render=function(){var e=this;return u.a.createElement(Ve,null,(function(t){e.styleSheet=t||ce.master;var n=e.state.globalStyle;return n.isStatic?(n.renderStyles(j,e.styleSheet),null):u.a.createElement(Je,null,(function(t){var r=e.constructor.defaultProps,a=g({},e.props);return void 0!==t&&(a.theme=De(e.props,t,r)),n.renderStyles(a,e.styleSheet),null}))}))},t}(u.a.Component);return s.globalStyle=o,s.styledComponentId=i,s}S&&(window.scCGSHMRCache={});t.b=Ze}).call(this,n(13))},function(e,t,n){(function(t){var n;n=function(){"use strict";var e=Function.prototype.toString,n=Object.create,r=Object.defineProperty,a=Object.getOwnPropertyDescriptor,i=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,s=Object.getPrototypeOf,u=Object.prototype,l=u.hasOwnProperty,d=u.propertyIsEnumerable,c="function"==typeof o,f="function"==typeof WeakMap,m=function(){if(f)return function(){return new WeakMap};var e=function(){function e(){this._keys=[],this._values=[]}return e.prototype.has=function(e){return!!~this._keys.indexOf(e)},e.prototype.get=function(e){return this._values[this._keys.indexOf(e)]},e.prototype.set=function(e,t){this._keys.push(e),this._values.push(t)},e}();return function(){return new e}}(),_=function(t,r){var a=t.__proto__||s(t);if(!a)return n(null);var i=a.constructor;if(i===r.Object)return a===r.Object.prototype?{}:n(a);if(~e.call(i).indexOf("[native code]"))try{return new i}catch(e){}return n(a)},p=function(e,t,n,r){var a=_(e,t);for(var i in r.set(e,a),e)l.call(e,i)&&(a[i]=n(e[i],r));if(c)for(var s=o(e),u=0,f=s.length,m=void 0;u<f;++u)m=s[u],d.call(e,m)&&(a[m]=n(e[m],r));return a},h=function(e,t,n,s){var u=_(e,t);s.set(e,u);for(var l=c?i(e).concat(o(e)):i(e),d=0,f=l.length,m=void 0,p=void 0;d<f;++d)if("callee"!==(m=l[d])&&"caller"!==m)if(p=a(e,m)){p.get||p.set||(p.value=n(e[m],s));try{r(u,m,p)}catch(e){u[m]=p.value}}else u[m]=n(e[m],s);return u},y=Array.isArray,g=Object.getPrototypeOf,M=function(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:(console&&console.error&&console.error('Unable to locate global object, returning "this".'),this)}();function v(e,t){var n=!(!t||!t.isStrict),r=t&&t.realm||M,a=n?h:p,i=function(e,t){if(!e||"object"!=typeof e)return e;if(t.has(e))return t.get(e);var o,s,u,l=e.__proto__||g(e),d=l&&l.constructor;if(!d||d===r.Object)return a(e,r,i,t);if(y(e)){if(n)return h(e,r,i,t);o=new d,t.set(e,o);for(var c=0,f=e.length;c<f;++c)o[c]=i(e[c],t);return o}if(e instanceof r.Date)return new d(e.getTime());if(e instanceof r.RegExp)return(o=new d(e.source,e.flags||(u="",(s=e).global&&(u+="g"),s.ignoreCase&&(u+="i"),s.multiline&&(u+="m"),s.unicode&&(u+="u"),s.sticky&&(u+="y"),u))).lastIndex=e.lastIndex,o;if(r.Map&&e instanceof r.Map)return o=new d,t.set(e,o),e.forEach((function(e,n){o.set(n,i(e,t))})),o;if(r.Set&&e instanceof r.Set)return o=new d,t.set(e,o),e.forEach((function(e){o.add(i(e,t))})),o;if(r.Blob&&e instanceof r.Blob)return e.slice(0,e.size,e.type);if(r.Buffer&&r.Buffer.isBuffer(e))return o=r.Buffer.allocUnsafe?r.Buffer.allocUnsafe(e.length):new d(e.length),t.set(e,o),e.copy(o),o;if(r.ArrayBuffer){if(r.ArrayBuffer.isView(e))return o=new d(e.buffer.slice(0)),t.set(e,o),o;if(e instanceof r.ArrayBuffer)return o=e.slice(0),t.set(e,o),o}return"function"==typeof e.then||e instanceof Error||r.WeakMap&&e instanceof r.WeakMap||r.WeakSet&&e instanceof r.WeakSet?e:a(e,r,i,t)};return i(e,m())}return v.default=v,v.strict=function(e,t){return v(e,{isStrict:!0,realm:t?t.realm:void 0})},v},e.exports=n()}).call(this,n(49))},function(e,t,n){"use strict";var r=n(41),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function o(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==a.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function l(e){return"[object Function]"===a.call(e)}function d(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!o(e)&&null!==e.constructor&&!o(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:u,isUndefined:o,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:l,isStream:function(e){return s(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:d,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,a=arguments.length;r<a;r++)d(arguments[r],n);return t},extend:function(e,t,n){return d(t,(function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";e.exports=function(e){return a.test("number"==typeof e?r(e):e.charAt(0))};var r=String.fromCharCode,a=/\s/},function(e,t,n){var r=n(224)();e.exports=r;try{regeneratorRuntime=r}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(e,t){e.exports=function(){for(var e={},t=0;t<arguments.length;t++){var r=arguments[t];for(var a in r)n.call(r,a)&&(e[a]=r[a])}return e};var n=Object.prototype.hasOwnProperty},function(e,t,n){var r=n(35);e.exports=function(e,t,n){return(t=r(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(e,t,n,r,a,i,o){try{var s=e[i](o),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,a)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(a,i){var o=e.apply(t,r);function s(e){n(o,a,i,s,u,"next",e)}function u(e){n(o,a,i,s,u,"throw",e)}s(void 0)}))}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";e.exports=TypeError},function(e,t){(t=e.exports=function(e){return e.replace(/^\s*|\s*$/g,"")}).left=function(e){return e.replace(/^\s*/,"")},t.right=function(e){return e.replace(/\s*$/,"")}},function(e,t){var n,r,a=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var u,l=[],d=!1,c=-1;function f(){d&&u&&(d=!1,u.length?l=u.concat(l):c=-1,l.length&&m())}function m(){if(!d){var e=s(f);d=!0;for(var t=l.length;t;){for(u=l,l=[];++c<t;)u&&u[c].run();c=-1,t=l.length}u=null,d=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function _(e,t){this.fun=e,this.array=t}function p(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new _(e,t)),1!==l.length||d||s(m)},_.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=p,a.addListener=p,a.once=p,a.off=p,a.removeListener=p,a.removeAllListeners=p,a.emit=p,a.prependListener=p,a.prependOnceListener=p,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t){var n,r,a=Function.prototype,i=Object.prototype,o=a.toString,s=i.hasOwnProperty,u=o.call(Object),l=i.toString,d=(n=Object.getPrototypeOf,r=Object,function(e){return n(r(e))});e.exports=function(e){if(!function(e){return!!e&&"object"==typeof e}(e)||"[object Object]"!=l.call(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e))return!1;var t=d(e);if(null===t)return!0;var n=s.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&o.call(n)==u}},function(e,t){function n(t){return e.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){(function(t){var r="function"==typeof Map&&Map.prototype,a=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=r&&a&&"function"==typeof a.get?a.get:null,o=r&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,u=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,l=s&&u&&"function"==typeof u.get?u.get:null,d=s&&Set.prototype.forEach,c="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,f="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,m="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,_=Boolean.prototype.valueOf,p=Object.prototype.toString,h=Function.prototype.toString,y=String.prototype.match,g=String.prototype.slice,M=String.prototype.replace,v=String.prototype.toUpperCase,b=String.prototype.toLowerCase,L=RegExp.prototype.test,k=Array.prototype.concat,w=Array.prototype.join,Y=Array.prototype.slice,T=Math.floor,D="function"==typeof BigInt?BigInt.prototype.valueOf:null,S=Object.getOwnPropertySymbols,x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,j="function"==typeof Symbol&&"object"==typeof Symbol.iterator,O="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===j||"symbol")?Symbol.toStringTag:null,E=Object.prototype.propertyIsEnumerable,P=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function H(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||L.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-T(-e):T(e);if(r!==e){var a=String(r),i=g.call(t,a.length+1);return M.call(a,n,"$&_")+"."+M.call(M.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return M.call(t,n,"$&_")}var A=n(246),C=A.custom,N=J(C)?C:null,F={__proto__:null,double:'"',single:"'"},W={__proto__:null,double:/(["\\])/g,single:/(['\\])/g};function I(e,t,n){var r=n.quoteStyle||t,a=F[r];return a+e+a}function z(e){return M.call(String(e),/"/g,"&quot;")}function R(e){return!O||!("object"==typeof e&&(O in e||void 0!==e[O]))}function U(e){return"[object Array]"===q(e)&&R(e)}function B(e){return"[object RegExp]"===q(e)&&R(e)}function J(e){if(j)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!x)return!1;try{return x.call(e),!0}catch(e){}return!1}e.exports=function e(n,r,a,s){var u=r||{};if(V(u,"quoteStyle")&&!V(F,u.quoteStyle))throw new TypeError('option "quoteStyle" must be "single" or "double"');if(V(u,"maxStringLength")&&("number"==typeof u.maxStringLength?u.maxStringLength<0&&u.maxStringLength!==1/0:null!==u.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var p=!V(u,"customInspect")||u.customInspect;if("boolean"!=typeof p&&"symbol"!==p)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(V(u,"indent")&&null!==u.indent&&"\t"!==u.indent&&!(parseInt(u.indent,10)===u.indent&&u.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(V(u,"numericSeparator")&&"boolean"!=typeof u.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var v=u.numericSeparator;if(void 0===n)return"undefined";if(null===n)return"null";if("boolean"==typeof n)return n?"true":"false";if("string"==typeof n)return function e(t,n){if(t.length>n.maxStringLength){var r=t.length-n.maxStringLength,a="... "+r+" more character"+(r>1?"s":"");return e(g.call(t,0,n.maxStringLength),n)+a}var i=W[n.quoteStyle||"single"];return i.lastIndex=0,I(M.call(M.call(t,i,"\\$1"),/[\x00-\x1f]/g,K),"single",n)}(n,u);if("number"==typeof n){if(0===n)return 1/0/n>0?"0":"-0";var L=String(n);return v?H(n,L):L}if("bigint"==typeof n){var T=String(n)+"n";return v?H(n,T):T}var S=void 0===u.depth?5:u.depth;if(void 0===a&&(a=0),a>=S&&S>0&&"object"==typeof n)return U(n)?"[Array]":"[Object]";var C=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=w.call(Array(e.indent+1)," ")}return{base:n,prev:w.call(Array(t+1),n)}}(u,a);if(void 0===s)s=[];else if(G(s,n)>=0)return"[Circular]";function $(t,n,r){if(n&&(s=Y.call(s)).push(n),r){var i={depth:u.depth};return V(u,"quoteStyle")&&(i.quoteStyle=u.quoteStyle),e(t,i,a+1,s)}return e(t,u,a+1,s)}if("function"==typeof n&&!B(n)){var ne=function(e){if(e.name)return e.name;var t=y.call(h.call(e),/^function\s*([\w$]+)/);if(t)return t[1];return null}(n),re=te(n,$);return"[Function"+(ne?": "+ne:" (anonymous)")+"]"+(re.length>0?" { "+w.call(re,", ")+" }":"")}if(J(n)){var ae=j?M.call(String(n),/^(Symbol\(.*\))_[^)]*$/,"$1"):x.call(n);return"object"!=typeof n||j?ae:Q(ae)}if(function(e){if(!e||"object"!=typeof e)return!1;if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement)return!0;return"string"==typeof e.nodeName&&"function"==typeof e.getAttribute}(n)){for(var ie="<"+b.call(String(n.nodeName)),oe=n.attributes||[],se=0;se<oe.length;se++)ie+=" "+oe[se].name+"="+I(z(oe[se].value),"double",u);return ie+=">",n.childNodes&&n.childNodes.length&&(ie+="..."),ie+="</"+b.call(String(n.nodeName))+">"}if(U(n)){if(0===n.length)return"[]";var ue=te(n,$);return C&&!function(e){for(var t=0;t<e.length;t++)if(G(e[t],"\n")>=0)return!1;return!0}(ue)?"["+ee(ue,C)+"]":"[ "+w.call(ue,", ")+" ]"}if(function(e){return"[object Error]"===q(e)&&R(e)}(n)){var le=te(n,$);return"cause"in Error.prototype||!("cause"in n)||E.call(n,"cause")?0===le.length?"["+String(n)+"]":"{ ["+String(n)+"] "+w.call(le,", ")+" }":"{ ["+String(n)+"] "+w.call(k.call("[cause]: "+$(n.cause),le),", ")+" }"}if("object"==typeof n&&p){if(N&&"function"==typeof n[N]&&A)return A(n,{depth:S-a});if("symbol"!==p&&"function"==typeof n.inspect)return n.inspect()}if(function(e){if(!i||!e||"object"!=typeof e)return!1;try{i.call(e);try{l.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(n)){var de=[];return o&&o.call(n,(function(e,t){de.push($(t,n,!0)+" => "+$(e,n))})),X("Map",i.call(n),de,C)}if(function(e){if(!l||!e||"object"!=typeof e)return!1;try{l.call(e);try{i.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(n)){var ce=[];return d&&d.call(n,(function(e){ce.push($(e,n))})),X("Set",l.call(n),ce,C)}if(function(e){if(!c||!e||"object"!=typeof e)return!1;try{c.call(e,c);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(n))return Z("WeakMap");if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{c.call(e,c)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(n))return Z("WeakSet");if(function(e){if(!m||!e||"object"!=typeof e)return!1;try{return m.call(e),!0}catch(e){}return!1}(n))return Z("WeakRef");if(function(e){return"[object Number]"===q(e)&&R(e)}(n))return Q($(Number(n)));if(function(e){if(!e||"object"!=typeof e||!D)return!1;try{return D.call(e),!0}catch(e){}return!1}(n))return Q($(D.call(n)));if(function(e){return"[object Boolean]"===q(e)&&R(e)}(n))return Q(_.call(n));if(function(e){return"[object String]"===q(e)&&R(e)}(n))return Q($(String(n)));if("undefined"!=typeof window&&n===window)return"{ [object Window] }";if("undefined"!=typeof globalThis&&n===globalThis||void 0!==t&&n===t)return"{ [object globalThis] }";if(!function(e){return"[object Date]"===q(e)&&R(e)}(n)&&!B(n)){var fe=te(n,$),me=P?P(n)===Object.prototype:n instanceof Object||n.constructor===Object,_e=n instanceof Object?"":"null prototype",pe=!me&&O&&Object(n)===n&&O in n?g.call(q(n),8,-1):_e?"Object":"",he=(me||"function"!=typeof n.constructor?"":n.constructor.name?n.constructor.name+" ":"")+(pe||_e?"["+w.call(k.call([],pe||[],_e||[]),": ")+"] ":"");return 0===fe.length?he+"{}":C?he+"{"+ee(fe,C)+"}":he+"{ "+w.call(fe,", ")+" }"}return String(n)};var $=Object.prototype.hasOwnProperty||function(e){return e in this};function V(e,t){return $.call(e,t)}function q(e){return p.call(e)}function G(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function K(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+v.call(t.toString(16))}function Q(e){return"Object("+e+")"}function Z(e){return e+" { ? }"}function X(e,t,n,r){return e+" ("+t+") {"+(r?ee(n,r):w.call(n,", "))+"}"}function ee(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+w.call(e,","+n)+"\n"+t.prev}function te(e,t){var n=U(e),r=[];if(n){r.length=e.length;for(var a=0;a<e.length;a++)r[a]=V(e,a)?t(e[a],e):""}var i,o="function"==typeof S?S(e):[];if(j){i={};for(var s=0;s<o.length;s++)i["$"+o[s]]=o[s]}for(var u in e)V(e,u)&&(n&&String(Number(u))===u&&u<e.length||j&&i["$"+u]instanceof Symbol||(L.call(/[^\w$]/,u)?r.push(t(u,e)+": "+t(e[u],e)):r.push(u+": "+t(e[u],e))));if("function"==typeof S)for(var l=0;l<o.length;l++)E.call(e,o[l])&&r.push("["+t(o[l])+"]: "+t(e[o[l]],e));return r}}).call(this,n(49))},function(e,t,n){"use strict";var r=n(268);e.exports=Function.prototype.bind||r},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=48&&t<=57}},function(e,t,n){"use strict";e.exports=s;var r=n(313),a=r.CONTINUE,i=r.SKIP,o=r.EXIT;function s(e,t,n,a){"function"==typeof t&&"function"!=typeof n&&(a=n,n=t,t=null),r(e,t,(function(e,t){var r=t[t.length-1],a=r?r.children.indexOf(e):null;return n(e,a,r)}),a)}s.CONTINUE=a,s.SKIP=i,s.EXIT=o},function(e,t,n){"use strict";e.exports=n(223)},function(e,t,n){var r=n(276),a=n(277),i=n(278),o=n(280);e.exports=function(e,t){return r(e)||a(e,t)||i(e,t)||o()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(51),a=n(248),i=n(249),o=n(250),s=n(251),u=n(252),l=n(11),d=n(253),c=n(254),f=n(255),m=n(256),_=n(257),p=n(258),h=n(259),y=n(260),g=Function,M=function(e){try{return g('"use strict"; return ('+e+").constructor;")()}catch(e){}},v=n(52),b=n(263),L=function(){throw new l},k=v?function(){try{return L}catch(e){try{return v(arguments,"callee").get}catch(e){return L}}}():L,w=n(264)(),Y=n(266),T=n(54),D=n(53),S=n(56),x=n(23),j={},O="undefined"!=typeof Uint8Array&&Y?Y(Uint8Array):void 0,E={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":w&&Y?Y([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":j,"%AsyncGenerator%":j,"%AsyncGeneratorFunction%":j,"%AsyncIteratorPrototype%":j,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?void 0:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":a,"%eval%":eval,"%EvalError%":i,"%Float16Array%":"undefined"==typeof Float16Array?void 0:Float16Array,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":g,"%GeneratorFunction%":j,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":w&&Y?Y(Y([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&w&&Y?Y((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":r,"%Object.getOwnPropertyDescriptor%":v,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":o,"%ReferenceError%":s,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&w&&Y?Y((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":w&&Y?Y(""[Symbol.iterator]()):void 0,"%Symbol%":w?Symbol:void 0,"%SyntaxError%":u,"%ThrowTypeError%":k,"%TypedArray%":O,"%TypeError%":l,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":d,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%Function.prototype.call%":x,"%Function.prototype.apply%":S,"%Object.defineProperty%":b,"%Object.getPrototypeOf%":T,"%Math.abs%":c,"%Math.floor%":f,"%Math.max%":m,"%Math.min%":_,"%Math.pow%":p,"%Math.round%":h,"%Math.sign%":y,"%Reflect.getPrototypeOf%":D};if(Y)try{null.error}catch(e){var P=Y(Y(e));E["%Error.prototype%"]=P}var H={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},A=n(17),C=n(271),N=A.call(x,Array.prototype.concat),F=A.call(S,Array.prototype.splice),W=A.call(x,String.prototype.replace),I=A.call(x,String.prototype.slice),z=A.call(x,RegExp.prototype.exec),R=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,U=/\\(\\)?/g,B=function(e){var t=I(e,0,1),n=I(e,-1);if("%"===t&&"%"!==n)throw new u("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new u("invalid intrinsic syntax, expected opening `%`");var r=[];return W(e,R,(function(e,t,n,a){r[r.length]=n?W(a,U,"$1"):t||e})),r},J=function(e,t){var n,r=e;if(C(H,r)&&(r="%"+(n=H[r])[0]+"%"),C(E,r)){var a=E[r];if(a===j&&(a=function e(t){var n;if("%AsyncFunction%"===t)n=M("async function () {}");else if("%GeneratorFunction%"===t)n=M("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=M("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var a=e("%AsyncGenerator%");a&&Y&&(n=Y(a.prototype))}return E[t]=n,n}(r)),void 0===a&&!t)throw new l("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:a}}throw new u("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new l("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new l('"allowMissing" argument must be a boolean');if(null===z(/^%?[^%]*%?$/,e))throw new u("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=B(e),r=n.length>0?n[0]:"",a=J("%"+r+"%",t),i=a.name,o=a.value,s=!1,d=a.alias;d&&(r=d[0],F(n,N([0,1],d)));for(var c=1,f=!0;c<n.length;c+=1){var m=n[c],_=I(m,0,1),p=I(m,-1);if(('"'===_||"'"===_||"`"===_||'"'===p||"'"===p||"`"===p)&&_!==p)throw new u("property names with quotes must have matching quotes");if("constructor"!==m&&f||(s=!0),C(E,i="%"+(r+="."+m)+"%"))o=E[i];else if(null!=o){if(!(m in o)){if(!t)throw new l("base intrinsic for "+e+" exists, but the property is not available.");return}if(v&&c+1>=n.length){var h=v(o,m);o=(f=!!h)&&"get"in h&&!("originalValue"in h.get)?h.get:o[m]}else f=C(o,m),o=o[m];f&&!s&&(E[i]=o)}}return o}},function(e,t,n){"use strict";e.exports=Function.prototype.call},function(e,t,n){"use strict";var r=String.prototype.replace,a=/%20/g,i="RFC1738",o="RFC3986";e.exports={default:o,formatters:{RFC1738:function(e){return r.call(e,a,"+")},RFC3986:function(e){return String(e)}},RFC1738:i,RFC3986:o}},function(e,t,n){"use strict";var r=n(302),a=n(303),i=n(18),o=n(304),s=n(305),u=n(306);e.exports=function(e,t){var n,i,o={};t||(t={});for(i in f)n=t[i],o[i]=null==n?f[i]:n;(o.position.indent||o.position.start)&&(o.indent=o.position.indent||[],o.position=o.position.start);return function(e,t){var n,i,o,f,M,v,b,L,k,w,Y,T,D,S,x,j,O,E,P,H=t.additional,A=t.nonTerminated,C=t.text,N=t.reference,F=t.warning,W=t.textContext,I=t.referenceContext,z=t.warningContext,R=t.position,U=t.indent||[],B=e.length,J=0,$=-1,V=R.column||1,q=R.line||1,G="",K=[];"string"==typeof H&&(H=H.charCodeAt(0));j=Z(),L=F?function(e,t){var n=Z();n.column+=t,n.offset+=t,F.call(z,y[e],n,e)}:c,J--,B++;for(;++J<B;)if(10===M&&(V=U[$]||1),38===(M=e.charCodeAt(J))){if(9===(b=e.charCodeAt(J+1))||10===b||12===b||32===b||38===b||60===b||b!=b||H&&b===H){G+=d(M),V++;continue}for(T=D=J+1,P=D,35===b?(P=++T,88===(b=e.charCodeAt(P))||120===b?(S=_,P=++T):S="decimal"):S=m,n="",Y="",f="",x=h[S],P--;++P<B&&(b=e.charCodeAt(P),x(b));)f+=d(b),S===m&&l.call(r,f)&&(n=f,Y=r[f]);(o=59===e.charCodeAt(P))&&(P++,(i=S===m&&u(f))&&(n=f,Y=i)),E=1+P-D,(o||A)&&(f?S===m?(o&&!Y?L(5,1):(n!==f&&(P=T+n.length,E=1+P-T,o=!1),o||(k=n?1:3,t.attribute?61===(b=e.charCodeAt(P))?(L(k,E),Y=null):s(b)?Y=null:L(k,E):L(k,E))),v=Y):(o||L(2,E),v=parseInt(f,p[S]),(Q=v)>=55296&&Q<=57343||Q>1114111?(L(7,E),v=d(65533)):v in a?(L(6,E),v=a[v]):(w="",g(v)&&L(6,E),v>65535&&(w+=d((v-=65536)>>>10|55296),v=56320|1023&v),v=w+d(v))):S!==m&&L(4,E)),v?(X(),j=Z(),J=P-1,V+=P-D+1,K.push(v),(O=Z()).offset++,N&&N.call(I,v,{start:j,end:O},e.slice(D-1,P)),j=O):(f=e.slice(D-1,P),G+=f,V+=f.length,J=P-1)}else 10===M&&(q++,$++,V=0),M==M?(G+=d(M),V++):X();var Q;return K.join("");function Z(){return{line:q,column:V,offset:J+(R.offset||0)}}function X(){G&&(K.push(G),C&&C.call(W,G,{start:j,end:Z()}),G="")}}(e,o)};var l={}.hasOwnProperty,d=String.fromCharCode,c=Function.prototype,f={warning:null,reference:null,text:null,warningContext:null,referenceContext:null,textContext:null,position:{},additional:null,attribute:!1,nonTerminated:!0},m="named",_="hexadecimal",p={hexadecimal:16,decimal:10},h={};h[m]=s,h.decimal=i,h[_]=o;var y={};function g(e){return e>=1&&e<=8||11===e||e>=13&&e<=31||e>=127&&e<=159||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)}y[1]="Named character references must be terminated by a semicolon",y[2]="Numeric character references must be terminated by a semicolon",y[3]="Named character references cannot be empty",y[4]="Numeric character references cannot be empty",y[5]="Named character references must be known",y[6]="Numeric character references cannot be disallowed",y[7]="Numeric character references cannot be outside the permissible Unicode range"},function(e,t,n){"use strict";
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var r,a="";e.exports=function(e,t){if("string"!=typeof e)throw new TypeError("expected a string");if(1===t)return e;if(2===t)return e+e;var n=e.length*t;if(r!==e||void 0===r)r=e,a="";else if(a.length>=n)return a.substr(0,n);for(;n>a.length&&t>1;)1&t&&(a+=e),t>>=1,e+=e;return a=(a+=e).substr(0,n)}},function(e,t,n){"use strict";e.exports=function(e){return String(e).replace(/\n+$/,"")}},function(e,t,n){"use strict";e.exports=function(e,t,n,r){var a,i,o,s,u,l,d=["pedantic","commonmark"],c=d.length,f=e.length,m=-1;for(;++m<f;){for(a=e[m],i=a[1]||{},o=a[0],s=-1,l=!1;++s<c;)if(void 0!==i[u=d[s]]&&i[u]!==n.options[u]){l=!0;break}if(!l&&t[o].apply(n,r))return!0}return!1}},function(e,t,n){"use strict";var r=n(326);e.exports=function(e){return r(e).toLowerCase()}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){e.exports=function e(t){"use strict";var n=/^\0+/g,r=/[\0\r\f]/g,a=/: */g,i=/zoo|gra/,o=/([,: ])(transform)/g,s=/,+\s*(?![^(]*[)])/g,u=/ +\s*(?![^(]*[)])/g,l=/ *[\0] */g,d=/,\r+?/g,c=/([\t\r\n ])*\f?&/g,f=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,m=/\W+/g,_=/@(k\w+)\s*(\S*)\s*/,p=/::(place)/g,h=/:(read-only)/g,y=/\s+(?=[{\];=:>])/g,g=/([[}=:>])\s+/g,M=/(\{[^{]+?);(?=\})/g,v=/\s{2,}/g,b=/([^\(])(:+) */g,L=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,Y=/-self|flex-/g,T=/[^]*?(:[rp][el]a[\w-]+)[^]*/,D=/stretch|:\s*\w+\-(?:conte|avail)/,S=/([^-])(image-set\()/,x="-webkit-",j="-moz-",O="-ms-",E=59,P=125,H=123,A=40,C=41,N=10,F=13,W=32,I=45,z=42,R=44,U=58,B=47,J=1,$=1,V=0,q=1,G=1,K=1,Q=0,Z=0,X=0,ee=[],te=[],ne=0,re=null,ae=0,ie=1,oe="",se="",ue="";function le(e,t,a,i,o){for(var s,u,d=0,c=0,f=0,m=0,y=0,g=0,M=0,v=0,L=0,w=0,Y=0,T=0,D=0,S=0,j=0,O=0,Q=0,te=0,re=0,ce=a.length,ye=ce-1,ge="",Me="",ve="",be="",Le="",ke="";j<ce;){if(M=a.charCodeAt(j),j===ye&&c+m+f+d!==0&&(0!==c&&(M=c===B?N:B),m=f=d=0,ce++,ye++),c+m+f+d===0){if(j===ye&&(O>0&&(Me=Me.replace(r,"")),Me.trim().length>0)){switch(M){case W:case 9:case E:case F:case N:break;default:Me+=a.charAt(j)}M=E}if(1===Q)switch(M){case H:case P:case E:case 34:case 39:case A:case C:case R:Q=0;case 9:case F:case N:case W:break;default:for(Q=0,re=j,y=M,j--,M=E;re<ce;)switch(a.charCodeAt(re++)){case N:case F:case E:++j,M=y,re=ce;break;case U:O>0&&(++j,M=y);case H:re=ce}}switch(M){case H:for(y=(Me=Me.trim()).charCodeAt(0),Y=1,re=++j;j<ce;){switch(M=a.charCodeAt(j)){case H:Y++;break;case P:Y--;break;case B:switch(g=a.charCodeAt(j+1)){case z:case B:j=he(g,j,ye,a)}break;case 91:M++;case A:M++;case 34:case 39:for(;j++<ye&&a.charCodeAt(j)!==M;);}if(0===Y)break;j++}switch(ve=a.substring(re,j),0===y&&(y=(Me=Me.replace(n,"").trim()).charCodeAt(0)),y){case 64:switch(O>0&&(Me=Me.replace(r,"")),g=Me.charCodeAt(1)){case 100:case 109:case 115:case I:s=t;break;default:s=ee}if(re=(ve=le(t,s,ve,g,o+1)).length,X>0&&0===re&&(re=Me.length),ne>0&&(u=pe(3,ve,s=de(ee,Me,te),t,$,J,re,g,o,i),Me=s.join(""),void 0!==u&&0===(re=(ve=u.trim()).length)&&(g=0,ve="")),re>0)switch(g){case 115:Me=Me.replace(k,_e);case 100:case 109:case I:ve=Me+"{"+ve+"}";break;case 107:ve=(Me=Me.replace(_,"$1 $2"+(ie>0?oe:"")))+"{"+ve+"}",ve=1===G||2===G&&me("@"+ve,3)?"@"+x+ve+"@"+ve:"@"+ve;break;default:ve=Me+ve,112===i&&(be+=ve,ve="")}else ve="";break;default:ve=le(t,de(t,Me,te),ve,i,o+1)}Le+=ve,T=0,Q=0,S=0,O=0,te=0,D=0,Me="",ve="",M=a.charCodeAt(++j);break;case P:case E:if((re=(Me=(O>0?Me.replace(r,""):Me).trim()).length)>1)switch(0===S&&((y=Me.charCodeAt(0))===I||y>96&&y<123)&&(re=(Me=Me.replace(" ",":")).length),ne>0&&void 0!==(u=pe(1,Me,t,e,$,J,be.length,i,o,i))&&0===(re=(Me=u.trim()).length)&&(Me="\0\0"),y=Me.charCodeAt(0),g=Me.charCodeAt(1),y){case 0:break;case 64:if(105===g||99===g){ke+=Me+a.charAt(j);break}default:if(Me.charCodeAt(re-1)===U)break;be+=fe(Me,y,g,Me.charCodeAt(2))}T=0,Q=0,S=0,O=0,te=0,Me="",M=a.charCodeAt(++j)}}switch(M){case F:case N:if(c+m+f+d+Z===0)switch(w){case C:case 39:case 34:case 64:case 126:case 62:case z:case 43:case B:case I:case U:case R:case E:case H:case P:break;default:S>0&&(Q=1)}c===B?c=0:q+T===0&&107!==i&&Me.length>0&&(O=1,Me+="\0"),ne*ae>0&&pe(0,Me,t,e,$,J,be.length,i,o,i),J=1,$++;break;case E:case P:if(c+m+f+d===0){J++;break}default:switch(J++,ge=a.charAt(j),M){case 9:case W:if(m+d+c===0)switch(v){case R:case U:case 9:case W:ge="";break;default:M!==W&&(ge=" ")}break;case 0:ge="\\0";break;case 12:ge="\\f";break;case 11:ge="\\v";break;case 38:m+c+d===0&&q>0&&(te=1,O=1,ge="\f"+ge);break;case 108:if(m+c+d+V===0&&S>0)switch(j-S){case 2:112===v&&a.charCodeAt(j-3)===U&&(V=v);case 8:111===L&&(V=L)}break;case U:m+c+d===0&&(S=j);break;case R:c+f+m+d===0&&(O=1,ge+="\r");break;case 34:case 39:0===c&&(m=m===M?0:0===m?M:m);break;case 91:m+c+f===0&&d++;break;case 93:m+c+f===0&&d--;break;case C:m+c+d===0&&f--;break;case A:if(m+c+d===0){if(0===T)switch(2*v+3*L){case 533:break;default:Y=0,T=1}f++}break;case 64:c+f+m+d+S+D===0&&(D=1);break;case z:case B:if(m+d+f>0)break;switch(c){case 0:switch(2*M+3*a.charCodeAt(j+1)){case 235:c=B;break;case 220:re=j,c=z}break;case z:M===B&&v===z&&re+2!==j&&(33===a.charCodeAt(re+2)&&(be+=a.substring(re,j+1)),ge="",c=0)}}if(0===c){if(q+m+d+D===0&&107!==i&&M!==E)switch(M){case R:case 126:case 62:case 43:case C:case A:if(0===T){switch(v){case 9:case W:case N:case F:ge+="\0";break;default:ge="\0"+ge+(M===R?"":"\0")}O=1}else switch(M){case A:S+7===j&&108===v&&(S=0),T=++Y;break;case C:0==(T=--Y)&&(O=1,ge+="\0")}break;case 9:case W:switch(v){case 0:case H:case P:case E:case R:case 12:case 9:case W:case N:case F:break;default:0===T&&(O=1,ge+="\0")}}Me+=ge,M!==W&&9!==M&&(w=M)}}L=v,v=M,j++}if(re=be.length,X>0&&0===re&&0===Le.length&&0===t[0].length==0&&(109!==i||1===t.length&&(q>0?se:ue)===t[0])&&(re=t.join(",").length+2),re>0){if(s=0===q&&107!==i?function(e){for(var t,n,a=0,i=e.length,o=Array(i);a<i;++a){for(var s=e[a].split(l),u="",d=0,c=0,f=0,m=0,_=s.length;d<_;++d)if(!(0===(c=(n=s[d]).length)&&_>1)){if(f=u.charCodeAt(u.length-1),m=n.charCodeAt(0),t="",0!==d)switch(f){case z:case 126:case 62:case 43:case W:case A:break;default:t=" "}switch(m){case 38:n=t+se;case 126:case 62:case 43:case W:case C:case A:break;case 91:n=t+n+se;break;case U:switch(2*n.charCodeAt(1)+3*n.charCodeAt(2)){case 530:if(K>0){n=t+n.substring(8,c-1);break}default:(d<1||s[d-1].length<1)&&(n=t+se+n)}break;case R:t="";default:n=c>1&&n.indexOf(":")>0?t+n.replace(b,"$1"+se+"$2"):t+n+se}u+=n}o[a]=u.replace(r,"").trim()}return o}(t):t,ne>0&&void 0!==(u=pe(2,be,s,e,$,J,re,i,o,i))&&0===(be=u).length)return ke+be+Le;if(be=s.join(",")+"{"+be+"}",G*V!=0){switch(2!==G||me(be,2)||(V=0),V){case 111:be=be.replace(h,":-moz-$1")+be;break;case 112:be=be.replace(p,"::"+x+"input-$1")+be.replace(p,"::-moz-$1")+be.replace(p,":-ms-input-$1")+be}V=0}}return ke+be+Le}function de(e,t,n){var r=t.trim().split(d),a=r,i=r.length,o=e.length;switch(o){case 0:case 1:for(var s=0,u=0===o?"":e[0]+" ";s<i;++s)a[s]=ce(u,a[s],n,o).trim();break;default:s=0;var l=0;for(a=[];s<i;++s)for(var c=0;c<o;++c)a[l++]=ce(e[c]+" ",r[s],n,o).trim()}return a}function ce(e,t,n,r){var a=t,i=a.charCodeAt(0);switch(i<33&&(i=(a=a.trim()).charCodeAt(0)),i){case 38:switch(q+r){case 0:case 1:if(0===e.trim().length)break;default:return a.replace(c,"$1"+e.trim())}break;case U:switch(a.charCodeAt(1)){case 103:if(K>0&&q>0)return a.replace(f,"$1").replace(c,"$1"+ue);break;default:return e.trim()+a.replace(c,"$1"+e.trim())}default:if(n*q>0&&a.indexOf("\f")>0)return a.replace(c,(e.charCodeAt(0)===U?"":"$1")+e.trim())}return e+a}function fe(e,t,n,r){var l,d=0,c=e+";",f=2*t+3*n+4*r;if(944===f)return function(e){var t=e.length,n=e.indexOf(":",9)+1,r=e.substring(0,n).trim(),a=e.substring(n,t-1).trim();switch(e.charCodeAt(9)*ie){case 0:break;case I:if(110!==e.charCodeAt(10))break;default:var i=a.split((a="",s)),o=0;for(n=0,t=i.length;o<t;n=0,++o){for(var l=i[o],d=l.split(u);l=d[n];){var c=l.charCodeAt(0);if(1===ie&&(c>64&&c<90||c>96&&c<123||95===c||c===I&&l.charCodeAt(1)!==I))switch(isNaN(parseFloat(l))+(-1!==l.indexOf("("))){case 1:switch(l){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:l+=oe}}d[n++]=l}a+=(0===o?"":",")+d.join(" ")}}return a=r+a+";",1===G||2===G&&me(a,1)?x+a+a:a}(c);if(0===G||2===G&&!me(c,1))return c;switch(f){case 1015:return 97===c.charCodeAt(10)?x+c+c:c;case 951:return 116===c.charCodeAt(3)?x+c+c:c;case 963:return 110===c.charCodeAt(5)?x+c+c:c;case 1009:if(100!==c.charCodeAt(4))break;case 969:case 942:return x+c+c;case 978:return x+c+j+c+c;case 1019:case 983:return x+c+j+c+O+c+c;case 883:return c.charCodeAt(8)===I?x+c+c:c.indexOf("image-set(",11)>0?c.replace(S,"$1"+x+"$2")+c:c;case 932:if(c.charCodeAt(4)===I)switch(c.charCodeAt(5)){case 103:return x+"box-"+c.replace("-grow","")+x+c+O+c.replace("grow","positive")+c;case 115:return x+c+O+c.replace("shrink","negative")+c;case 98:return x+c+O+c.replace("basis","preferred-size")+c}return x+c+O+c+c;case 964:return x+c+O+"flex-"+c+c;case 1023:if(99!==c.charCodeAt(8))break;return l=c.substring(c.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),x+"box-pack"+l+x+c+O+"flex-pack"+l+c;case 1005:return i.test(c)?c.replace(a,":"+x)+c.replace(a,":"+j)+c:c;case 1e3:switch(d=(l=c.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(d)){case 226:l=c.replace(L,"tb");break;case 232:l=c.replace(L,"tb-rl");break;case 220:l=c.replace(L,"lr");break;default:return c}return x+c+O+l+c;case 1017:if(-1===c.indexOf("sticky",9))return c;case 975:switch(d=(c=e).length-10,f=(l=(33===c.charCodeAt(d)?c.substring(0,d):c).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(l.charCodeAt(8)<111)break;case 115:c=c.replace(l,x+l)+";"+c;break;case 207:case 102:c=c.replace(l,x+(f>102?"inline-":"")+"box")+";"+c.replace(l,x+l)+";"+c.replace(l,O+l+"box")+";"+c}return c+";";case 938:if(c.charCodeAt(5)===I)switch(c.charCodeAt(6)){case 105:return l=c.replace("-items",""),x+c+x+"box-"+l+O+"flex-"+l+c;case 115:return x+c+O+"flex-item-"+c.replace(Y,"")+c;default:return x+c+O+"flex-line-pack"+c.replace("align-content","").replace(Y,"")+c}break;case 973:case 989:if(c.charCodeAt(3)!==I||122===c.charCodeAt(4))break;case 931:case 953:if(!0===D.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?fe(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):c.replace(l,x+l)+c.replace(l,j+l.replace("fill-",""))+c;break;case 962:if(c=x+c+(102===c.charCodeAt(5)?O+c:"")+c,n+r===211&&105===c.charCodeAt(13)&&c.indexOf("transform",10)>0)return c.substring(0,c.indexOf(";",27)+1).replace(o,"$1"+x+"$2")+c}return c}function me(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10),a=e.substring(n+1,e.length-1);return re(2!==t?r:r.replace(T,"$1"),a,t)}function _e(e,t){var n=fe(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(w," or ($1)").substring(4):"("+t+")"}function pe(e,t,n,r,a,i,o,s,u,l){for(var d,c=0,f=t;c<ne;++c)switch(d=te[c].call(ge,e,f,n,r,a,i,o,s,u,l)){case void 0:case!1:case!0:case null:break;default:f=d}if(f!==t)return f}function he(e,t,n,r){for(var a=t+1;a<n;++a)switch(r.charCodeAt(a)){case B:if(e===z&&r.charCodeAt(a-1)===z&&t+2!==a)return a+1;break;case N:if(e===B)return a+1}return a}function ye(e){for(var t in e){var n=e[t];switch(t){case"keyframe":ie=0|n;break;case"global":K=0|n;break;case"cascade":q=0|n;break;case"compress":Q=0|n;break;case"semicolon":Z=0|n;break;case"preserve":X=0|n;break;case"prefix":re=null,n?"function"!=typeof n?G=1:(G=2,re=n):G=0}}return ye}function ge(t,n){if(void 0!==this&&this.constructor===ge)return e(t);var a=t,i=a.charCodeAt(0);i<33&&(i=(a=a.trim()).charCodeAt(0)),ie>0&&(oe=a.replace(m,91===i?"":"-")),i=1,1===q?ue=a:se=a;var o,s=[ue];ne>0&&void 0!==(o=pe(-1,n,s,s,$,J,0,0,0,0))&&"string"==typeof o&&(n=o);var u=le(ee,s,n,0,0);return ne>0&&void 0!==(o=pe(-2,u,s,s,$,J,u.length,0,0,0))&&"string"!=typeof(u=o)&&(i=0),oe="",ue="",se="",V=0,$=1,J=1,Q*i==0?u:u.replace(r,"").replace(y,"").replace(g,"$1").replace(M,"$1").replace(v," ")}return ge.use=function e(t){switch(t){case void 0:case null:ne=te.length=0;break;default:if("function"==typeof t)te[ne++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else ae=0|!!t}return e},ge.set=ye,void 0!==t&&ye(t),ge}(null)},function(e,t,n){"use strict";var r=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function a(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(a=e[n],i=t[n],!(a===i||r(a)&&r(i)))return!1;var a,i;return!0}t.a=function(e,t){var n;void 0===t&&(t=a);var r,i=[],o=!1;return function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];return o&&n===this&&t(a,i)||(r=e.apply(this,a),o=!0,n=this,i=a),r}}},function(e,t){var n=Object.prototype.toString,r=Array.isArray;e.exports=function(e){return"string"==typeof e||!r(e)&&function(e){return!!e&&"object"==typeof e}(e)&&"[object String]"==n.call(e)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=o(e),l=1;l<arguments.length;l++){for(var d in n=Object(arguments[l]))a.call(n,d)&&(u[d]=n[d]);if(r){s=r(n);for(var c=0;c<s.length;c++)i.call(n,s[c])&&(u[s[c]]=n[s[c]])}}return u}},function(e,t,n){var r=n(15).default,a=n(220);e.exports=function(e){var t=a(e,"string");return"symbol"==r(t)?t:t+""},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){this.v=e,this.k=t},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(38);function a(){
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
var t,n,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.toStringTag||"@@toStringTag";function u(e,a,i,o){var s=a&&a.prototype instanceof d?a:d,u=Object.create(s.prototype);return r(u,"_invoke",function(e,r,a){var i,o,s,u=0,d=a||[],c=!1,f={p:0,n:0,v:t,a:m,f:m.bind(t,4),d:function(e,n){return i=e,o=0,s=t,f.n=n,l}};function m(e,r){for(o=e,s=r,n=0;!c&&u&&!a&&n<d.length;n++){var a,i=d[n],m=f.p,_=i[2];e>3?(a=_===r)&&(s=i[(o=i[4])?5:(o=3,3)],i[4]=i[5]=t):i[0]<=m&&((a=e<2&&m<i[1])?(o=0,f.v=r,f.n=i[1]):m<_&&(a=e<3||i[0]>r||r>_)&&(i[4]=e,i[5]=r,f.n=_,o=0))}if(a||e>1)return l;throw c=!0,r}return function(a,d,_){if(u>1)throw TypeError("Generator is already running");for(c&&1===d&&m(d,_),o=d,s=_;(n=o<2?t:s)||!c;){i||(o?o<3?(o>1&&(f.n=-1),m(o,s)):f.n=s:f.v=s);try{if(u=2,i){if(o||(a="next"),n=i[a]){if(!(n=n.call(i,s)))throw TypeError("iterator result is not an object");if(!n.done)return n;s=n.value,o<2&&(o=0)}else 1===o&&(n=i.return)&&n.call(i),o<2&&(s=TypeError("The iterator does not provide a '"+a+"' method"),o=1);i=t}else if((n=(c=f.n<0)?s:e.call(r,f))!==l)break}catch(e){i=t,o=1,s=e}finally{u=1}}return{value:n,done:c}}}(e,i,o),!0),u}var l={};function d(){}function c(){}function f(){}n=Object.getPrototypeOf;var m=[][o]?n(n([][o]())):(r(n={},o,(function(){return this})),n),_=f.prototype=d.prototype=Object.create(m);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,f):(e.__proto__=f,r(e,s,"GeneratorFunction")),e.prototype=Object.create(_),e}return c.prototype=f,r(_,"constructor",f),r(f,"constructor",c),c.displayName="GeneratorFunction",r(f,s,"GeneratorFunction"),r(_),r(_,s,"Generator"),r(_,o,(function(){return this})),r(_,"toString",(function(){return"[object Generator]"})),(e.exports=a=function(){return{w:u,m:p}},e.exports.__esModule=!0,e.exports.default=e.exports)()}e.exports=a,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t,r,a,i){var o=Object.defineProperty;try{o({},"",{})}catch(t){o=0}e.exports=n=function(e,t,r,a){function i(t,r){n(e,t,(function(e){return this._invoke(t,r,e)}))}t?o?o(e,t,{value:r,enumerable:!a,configurable:!a,writable:!a}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},e.exports.__esModule=!0,e.exports.default=e.exports,n(t,r,a,i)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(37),a=n(40);e.exports=function(e,t,n,i,o){return new a(r().w(e,t,n,i),o||Promise)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(36),a=n(38);e.exports=function e(t,n){function i(e,a,o,s){try{var u=t[e](a),l=u.value;return l instanceof r?n.resolve(l.v).then((function(e){i("next",e,o,s)}),(function(e){i("throw",e,o,s)})):n.resolve(l).then((function(e){u.value=e,o(u)}),(function(e){return i("throw",e,o,s)}))}catch(e){s(e)}}var o;this.next||(a(e.prototype),a(e.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),a(this,"_invoke",(function(e,t,r){function a(){return new n((function(t,n){i(e,r,t,n)}))}return o=o?o.then(a,a):a()}),!0)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(5);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var o=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),o.push(a(t)+"="+a(e))})))})),i=o.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(5),a=n(233),i={"Content-Type":"application/x-www-form-urlencoded"};function o(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=n(45)),s),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(o(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(o(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(i)})),e.exports=u}).call(this,n(13))},function(e,t,n){"use strict";var r=n(5),a=n(234),i=n(236),o=n(42),s=n(237),u=n(240),l=n(241),d=n(46);e.exports=function(e){return new Promise((function(t,n){var c=e.data,f=e.headers;r.isFormData(c)&&delete f["Content-Type"],(r.isBlob(c)||r.isFile(c))&&c.type&&delete f["Content-Type"];var m=new XMLHttpRequest;if(e.auth){var _=e.auth.username||"",p=unescape(encodeURIComponent(e.auth.password))||"";f.Authorization="Basic "+btoa(_+":"+p)}var h=s(e.baseURL,e.url);if(m.open(e.method.toUpperCase(),o(h,e.params,e.paramsSerializer),!0),m.timeout=e.timeout,m.onreadystatechange=function(){if(m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in m?u(m.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:r,config:e,request:m};a(t,n,i),m=null}},m.onabort=function(){m&&(n(d("Request aborted",e,"ECONNABORTED",m)),m=null)},m.onerror=function(){n(d("Network Error",e,null,m)),m=null},m.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(d(t,e,"ECONNABORTED",m)),m=null},r.isStandardBrowserEnv()){var y=(e.withCredentials||l(h))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;y&&(f[e.xsrfHeaderName]=y)}if("setRequestHeader"in m&&r.forEach(f,(function(e,t){void 0===c&&"content-type"===t.toLowerCase()?delete f[t]:m.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(m.withCredentials=!!e.withCredentials),e.responseType)try{m.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&m.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){m&&(m.abort(),n(e),m=null)})),c||(c=null),m.send(c)}))}},function(e,t,n){"use strict";var r=n(235);e.exports=function(e,t,n,a,i){var o=new Error(e);return r(o,t,n,a,i)}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){t=t||{};var n={},a=["url","method","data"],i=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function l(a){r.isUndefined(t[a])?r.isUndefined(e[a])||(n[a]=u(void 0,e[a])):n[a]=u(e[a],t[a])}r.forEach(a,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(i,l),r.forEach(o,(function(a){r.isUndefined(t[a])?r.isUndefined(e[a])||(n[a]=u(void 0,e[a])):n[a]=u(void 0,t[a])})),r.forEach(s,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var d=a.concat(i).concat(o).concat(s),c=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===d.indexOf(e)}));return r.forEach(c,l),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(22),a=n(57),i=n(16),o=n(11),s=r("%Map%",!0),u=a("Map.prototype.get",!0),l=a("Map.prototype.set",!0),d=a("Map.prototype.has",!0),c=a("Map.prototype.delete",!0),f=a("Map.prototype.size",!0);e.exports=!!s&&function(){var e,t={assert:function(e){if(!t.has(e))throw new o("Side channel does not contain "+i(e))},delete:function(t){if(e){var n=c(e,t);return 0===f(e)&&(e=void 0),n}return!1},get:function(t){if(e)return u(e,t)},has:function(t){return!!e&&d(e,t)},set:function(t,n){e||(e=new s),l(e,t,n)}};return t}},function(e,t,n){"use strict";e.exports=Object},function(e,t,n){"use strict";var r=n(262);if(r)try{r([],"length")}catch(e){r=null}e.exports=r},function(e,t,n){"use strict";e.exports="undefined"!=typeof Reflect&&Reflect.getPrototypeOf||null},function(e,t,n){"use strict";var r=n(51);e.exports=r.getPrototypeOf||null},function(e,t,n){"use strict";var r=n(17),a=n(11),i=n(23),o=n(269);e.exports=function(e){if(e.length<1||"function"!=typeof e[0])throw new a("a function is required");return o(r,i,e)}},function(e,t,n){"use strict";e.exports=Function.prototype.apply},function(e,t,n){"use strict";var r=n(22),a=n(55),i=a([r("%String.prototype.indexOf%")]);e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?a([n]):n}},function(e,t,n){"use strict";var r=n(24),a=Object.prototype.hasOwnProperty,i=Array.isArray,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),s=function(e,t){for(var n=t&&t.plainObjects?{__proto__:null}:{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:s,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var a=t[r],o=a.obj[a.prop],s=Object.keys(o),u=0;u<s.length;++u){var l=s[u],d=o[l];"object"==typeof d&&null!==d&&-1===n.indexOf(d)&&(t.push({obj:o,prop:l}),n.push(d))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],a=0;a<n.length;++a)void 0!==n[a]&&r.push(n[a]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,a,i){if(0===e.length)return e;var s=e;if("symbol"==typeof e?s=Symbol.prototype.toString.call(e):"string"!=typeof e&&(s=String(e)),"iso-8859-1"===n)return escape(s).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var u="",l=0;l<s.length;l+=1024){for(var d=s.length>=1024?s.slice(l,l+1024):s,c=[],f=0;f<d.length;++f){var m=d.charCodeAt(f);45===m||46===m||95===m||126===m||m>=48&&m<=57||m>=65&&m<=90||m>=97&&m<=122||i===r.RFC1738&&(40===m||41===m)?c[c.length]=d.charAt(f):m<128?c[c.length]=o[m]:m<2048?c[c.length]=o[192|m>>6]+o[128|63&m]:m<55296||m>=57344?c[c.length]=o[224|m>>12]+o[128|m>>6&63]+o[128|63&m]:(f+=1,m=65536+((1023&m)<<10|1023&d.charCodeAt(f)),c[c.length]=o[240|m>>18]+o[128|m>>12&63]+o[128|m>>6&63]+o[128|63&m])}u+=c.join("")}return u},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(i(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n&&"function"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!a.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var o=t;return i(t)&&!i(n)&&(o=s(t,r)),i(t)&&i(n)?(n.forEach((function(n,i){if(a.call(t,i)){var o=t[i];o&&"object"==typeof o&&n&&"object"==typeof n?t[i]=e(o,n,r):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var o=n[i];return a.call(t,i)?t[i]=e(t[i],o,r):t[i]=o,t}),o)}}},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,o){var s=r(t),u=a[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,i,o){var s=t(r),u=n[e][t(r)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,o){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-ps",{months:"كانون الثاني_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_تشري الأوّل_تشرين الثاني_كانون الأوّل".split("_"),monthsShort:"ك٢_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_ت١_ت٢_ك١".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).split("").reverse().join("").replace(/[١٢](?![\u062a\u0643])/g,(function(e){return n[e]})).split("").reverse().join("").replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}var n=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],r=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,a=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:a,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:a,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return"jedan sat";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:function(e,t,n,r){switch(n){case"m":return t?"jedna minuta":r?"jednu minutu":"jedne minute"}},mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={standalone:"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),format:"ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince".split("_"),isFormat:/DD?[o.]?(\[[^\[\]]*\]|\s)+MMMM/},n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function o(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:o,ss:o,m:o,mm:o,h:o,hh:o,d:o,dd:o,M:o,MM:o,y:o,yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var o="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":o=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":o=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":o=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":o=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":o=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":o=i?"vuoden":"vuotta"}return o=function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+o}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["çend sanîye","çend sanîyeyan"],ss:[e+" sanîye",e+" sanîyeyan"],m:["deqîqeyek","deqîqeyekê"],mm:[e+" deqîqe",e+" deqîqeyan"],h:["saetek","saetekê"],hh:[e+" saet",e+" saetan"],d:["rojek","rojekê"],dd:[e+" roj",e+" rojan"],w:["hefteyek","hefteyekê"],ww:[e+" hefte",e+" hefteyan"],M:["mehek","mehekê"],MM:[e+" meh",e+" mehan"],y:["salek","salekê"],yy:[e+" sal",e+" salan"]};return t?a[n][0]:a[n][1]}e.defineLocale("ku-kmr",{months:"Rêbendan_Sibat_Adar_Nîsan_Gulan_Hezîran_Tîrmeh_Tebax_Îlon_Cotmeh_Mijdar_Berfanbar".split("_"),monthsShort:"Rêb_Sib_Ada_Nîs_Gul_Hez_Tîr_Teb_Îlo_Cot_Mij_Ber".split("_"),monthsParseExact:!0,weekdays:"Yekşem_Duşem_Sêşem_Çarşem_Pêncşem_În_Şemî".split("_"),weekdaysShort:"Yek_Du_Sê_Çar_Pên_În_Şem".split("_"),weekdaysMin:"Ye_Du_Sê_Ça_Pê_În_Şe".split("_"),meridiem:function(e,t,n){return e<12?n?"bn":"BN":n?"pn":"PN"},meridiemParse:/bn|BN|pn|PN/,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM[a] YYYY[an]",LLL:"Do MMMM[a] YYYY[an] HH:mm",LLLL:"dddd, Do MMMM[a] YYYY[an] HH:mm",ll:"Do MMM[.] YYYY[an]",lll:"Do MMM[.] YYYY[an] HH:mm",llll:"ddd[.], Do MMM[.] YYYY[an] HH:mm"},calendar:{sameDay:"[Îro di saet] LT [de]",nextDay:"[Sibê di saet] LT [de]",nextWeek:"dddd [di saet] LT [de]",lastDay:"[Duh di saet] LT [de]",lastWeek:"dddd[a borî di saet] LT [de]",sameElse:"L"},relativeTime:{future:"di %s de",past:"berî %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,w:t,ww:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(?:yê|ê|\.)/,ordinal:function(e,t){var n=t.toLowerCase();return n.includes("w")||n.includes("m")?e+".":e+function(e){var t=(e=""+e).substring(e.length-1),n=e.length>1?e.substring(e.length-2):"";return 12==n||13==n||"2"!=t&&"3"!=t&&"50"!=n&&"70"!=t&&"80"!=t?"ê":"yê"}(e)},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,o){var s=e+" ";return 1===e?s+n(0,t,i[0],o):t?s+(r(e)?a(i)[1]:a(i)[0]):o?s+a(i)[1]:s+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"én time",hh:"%d timer",d:"én dag",dd:"%d dager",w:"én uke",ww:"%d uker",M:"én måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^(maart|mrt\.?)$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^(maart|mrt\.?)$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],d:["jedan dan","jednog dana"],dd:["dan","dana","dana"],M:["jedan mesec","jednog meseca"],MM:["mesec","meseca","meseci"],y:["jednu godinu","jedne godine"],yy:["godinu","godine","godina"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,o=t.words[r];return 1===r.length?"y"===r&&n?"jedna godina":a||n?o[0]:o[1]:(i=t.correctGrammaticalCase(e,o),"yy"===r&&n&&"godinu"===i?e+" godina":e+" "+i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једног минута"],mm:["минут","минута","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],d:["један дан","једног дана"],dd:["дан","дана","дана"],M:["један месец","једног месеца"],MM:["месец","месеца","месеци"],y:["једну годину","једне године"],yy:["годину","године","година"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,o=t.words[r];return 1===r.length?"y"===r&&n?"једна година":a||n?o[0]:o[1]:(i=t.correctGrammaticalCase(e,o),"yy"===r&&n&&"годину"===i?e+" година":e+" "+i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pzt_Sal_Çar_Per_Cum_Cmt".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){(function(e){function n(e,t){for(var n=0,r=e.length-1;r>=0;r--){var a=e[r];"."===a?e.splice(r,1):".."===a?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}t.resolve=function(){for(var t="",a=!1,i=arguments.length-1;i>=-1&&!a;i--){var o=i>=0?arguments[i]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(t=o+"/"+t,a="/"===o.charAt(0))}return(a?"/":"")+(t=n(r(t.split("/"),(function(e){return!!e})),!a).join("/"))||"."},t.normalize=function(e){var i=t.isAbsolute(e),o="/"===a(e,-1);return(e=n(r(e.split("/"),(function(e){return!!e})),!i).join("/"))||i||(e="."),e&&o&&(e+="/"),(i?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(r(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},t.relative=function(e,n){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var a=r(e.split("/")),i=r(n.split("/")),o=Math.min(a.length,i.length),s=o,u=0;u<o;u++)if(a[u]!==i[u]){s=u;break}var l=[];for(u=s;u<a.length;u++)l.push("..");return(l=l.concat(i.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,r=-1,a=!0,i=e.length-1;i>=1;--i)if(47===(t=e.charCodeAt(i))){if(!a){r=i;break}}else a=!1;return-1===r?n?"/":".":n&&1===r?"/":e.slice(0,r)},t.basename=function(e,t){var n=function(e){"string"!=typeof e&&(e+="");var t,n=0,r=-1,a=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!a){n=t+1;break}}else-1===r&&(a=!1,r=t+1);return-1===r?"":e.slice(n,r)}(e);return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,n=0,r=-1,a=!0,i=0,o=e.length-1;o>=0;--o){var s=e.charCodeAt(o);if(47!==s)-1===r&&(a=!1,r=o+1),46===s?-1===t?t=o:1!==i&&(i=1):-1!==t&&(i=-1);else if(!a){n=o+1;break}}return-1===t||-1===r||0===i||1===i&&t===r-1&&t===n+1?"":e.slice(t,r)};var a="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(13))},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=97&&t<=122||t>=65&&t<=90}},function(e,t,n){"use strict";e.exports={position:!0,gfm:!0,commonmark:!1,footnotes:!1,pedantic:!1,blocks:n(310)}},function(e,t,n){"use strict";e.exports=function(e){var t,n=0,a=0,i=e.charAt(n),o={};for(;i in r;)a+=t=r[i],t>1&&(a=Math.floor(a/t)*t),o[a]=n,i=e.charAt(++n);return{indent:a,stops:o}};var r={" ":1,"\t":4}},function(e,t,n){"use strict";var r="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\u0000-\\u0020]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",a="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";t.openCloseTag=new RegExp("^(?:"+r+"|"+a+")"),t.tag=new RegExp("^(?:"+r+"|"+a+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Za-z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)")},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("<",t)}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("[",t),r=e.indexOf("![",t);if(-1===r)return n;return n<r?n:r}},function(e,t,n){e.exports=n(350)()},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(35);function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,r(a.key),a)}}e.exports=function(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(15).default,a=n(221);e.exports=function(e,t){if(t&&("object"==r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return a(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(222);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&r(e,t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,a,i,o,s,u,l,d,c){switch(n){case 1:if(0===d&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===l)return r+"/*|*/";break;case 3:switch(l){case 102:case 112:return e(a[0]+r),"";default:return r+(0===c?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";t.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},function(e,t,n){e.exports=n(228)},function(e,t,n){"use strict";class r extends Error{constructor(){super("Throttled function aborted"),this.name="AbortError"}}e.exports=({limit:e,interval:t,strict:n})=>{if(!Number.isFinite(e))throw new TypeError("Expected `limit` to be a finite number");if(!Number.isFinite(t))throw new TypeError("Expected `interval` to be a finite number");const a=new Map;let i=0,o=0;const s=[];const u=n?function(){const n=Date.now();if(s.length<e)return s.push(n),0;const r=s.shift()+t;return n>=r?(s.push(n),0):(s.push(r),r-n)}:function(){const n=Date.now();return n-i>t?(o=1,i=n,0):(o<e?o++:(i+=t,o=1),i-n)};return e=>{const t=function(...n){if(!t.isEnabled)return(async()=>e.apply(this,n))();let r;return new Promise((t,i)=>{r=setTimeout(()=>{t(e.apply(this,n)),a.delete(r)},u()),a.set(r,i)})};return t.abort=()=>{for(const e of a.keys())clearTimeout(e),a.get(e)(new r);a.clear(),s.splice(0,s.length)},t.isEnabled=!0,t}},e.exports.AbortError=r},function(e,t,n){"use strict";var r=n(244),a=n(273),i=n(24);e.exports={formats:i,parse:a,stringify:r}},function(e,t){function n(e,t){var n=[],r=[];return null==t&&(t=function(e,t){return n[0]===t?"[Circular ~]":"[Circular ~."+r.slice(0,n.indexOf(t)).join(".")+"]"}),function(a,i){if(n.length>0){var o=n.indexOf(this);~o?n.splice(o+1):n.push(this),~o?r.splice(o,1/0,a):r.push(a),~n.indexOf(i)&&(i=t.call(this,a,i))}else n.push(i);return null==e?i:e.call(this,a,i)}}(e.exports=function(e,t,r,a){return JSON.stringify(e,n(t,a),r)}).getSerialize=n},function(e,t,n){!function(e){"use strict";var t=Function.prototype.toString,n=Object.create,r=Object.prototype.toString,a=function(){function e(){this._keys=[],this._values=[]}return e.prototype.has=function(e){return!!~this._keys.indexOf(e)},e.prototype.get=function(e){return this._values[this._keys.indexOf(e)]},e.prototype.set=function(e,t){this._keys.push(e),this._values.push(t)},e}(),i="undefined"!=typeof WeakMap?function(){return new WeakMap}:function(){return new a};function o(e){if(!e)return n(null);var r=e.constructor;if(r===Object)return e===Object.prototype?{}:n(e);if(r&&~t.call(r).indexOf("[native code]"))try{return new r}catch(e){}return n(e)}var s="g"===/test/g.flags?function(e){return e.flags}:function(e){var t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t};function u(e){var t=r.call(e);return t.substring(8,t.length-1)}var l="undefined"!=typeof Symbol?function(e){return e[Symbol.toStringTag]||u(e)}:u,d=Object.defineProperty,c=Object.getOwnPropertyDescriptor,f=Object.getOwnPropertyNames,m=Object.getOwnPropertySymbols,_=Object.prototype,p=_.hasOwnProperty,h=_.propertyIsEnumerable,y="function"==typeof m,g=y?function(e){return f(e).concat(m(e))}:f;function M(e,t,n){for(var r=g(e),a=0,i=r.length,o=void 0,s=void 0;a<i;++a)if("callee"!==(o=r[a])&&"caller"!==o)if(s=c(e,o)){s.get||s.set||(s.value=n.copier(s.value,n));try{d(t,o,s)}catch(e){t[o]=s.value}}else t[o]=n.copier(e[o],n);return t}function v(e,t){return e.slice(0)}function b(e,t){var n=new t.Constructor;return t.cache.set(e,n),e.forEach((function(e,r){n.set(r,t.copier(e,t))})),n}var L=y?function(e,t){var n=o(t.prototype);for(var r in t.cache.set(e,n),e)p.call(e,r)&&(n[r]=t.copier(e[r],t));for(var a=m(e),i=0,s=a.length,u=void 0;i<s;++i)u=a[i],h.call(e,u)&&(n[u]=t.copier(e[u],t));return n}:function(e,t){var n=o(t.prototype);for(var r in t.cache.set(e,n),e)p.call(e,r)&&(n[r]=t.copier(e[r],t));return n};function k(e,t){return new t.Constructor(e.valueOf())}function w(e,t){return e}function Y(e,t){var n=new t.Constructor;return t.cache.set(e,n),e.forEach((function(e){n.add(t.copier(e,t))})),n}var T=Array.isArray,D=Object.assign,S=Object.getPrototypeOf||function(e){return e.__proto__},x={array:function(e,t){var n=new t.Constructor;t.cache.set(e,n);for(var r=0,a=e.length;r<a;++r)n[r]=t.copier(e[r],t);return n},arrayBuffer:v,blob:function(e,t){return e.slice(0,e.size,e.type)},dataView:function(e,t){return new t.Constructor(v(e.buffer))},date:function(e,t){return new t.Constructor(e.getTime())},error:w,map:b,object:L,regExp:function(e,t){var n=new t.Constructor(e.source,s(e));return n.lastIndex=e.lastIndex,n},set:Y},j=D({},x,{array:function(e,t){var n=new t.Constructor;return t.cache.set(e,n),M(e,n,t)},map:function(e,t){return M(e,b(e,t),t)},object:function(e,t){var n=o(t.prototype);return t.cache.set(e,n),M(e,n,t)},set:function(e,t){return M(e,Y(e,t),t)}});function O(e){var t=function(e){return{Arguments:e.object,Array:e.array,ArrayBuffer:e.arrayBuffer,Blob:e.blob,Boolean:k,DataView:e.dataView,Date:e.date,Error:e.error,Float32Array:e.arrayBuffer,Float64Array:e.arrayBuffer,Int8Array:e.arrayBuffer,Int16Array:e.arrayBuffer,Int32Array:e.arrayBuffer,Map:e.map,Number:k,Object:e.object,Promise:w,RegExp:e.regExp,Set:e.set,String:k,WeakMap:w,WeakSet:w,Uint8Array:e.arrayBuffer,Uint8ClampedArray:e.arrayBuffer,Uint16Array:e.arrayBuffer,Uint32Array:e.arrayBuffer,Uint64Array:e.arrayBuffer}}(D({},x,e)),n=t.Array,r=t.Object;function a(e,a){if(a.prototype=a.Constructor=void 0,!e||"object"!=typeof e)return e;if(a.cache.has(e))return a.cache.get(e);if(a.prototype=S(e),a.Constructor=a.prototype&&a.prototype.constructor,!a.Constructor||a.Constructor===Object)return r(e,a);if(T(e))return n(e,a);var i=t[l(e)];return i?i(e,a):"function"==typeof e.then?e:r(e,a)}return function(e){return a(e,{Constructor:void 0,cache:i(),copier:a,prototype:void 0})}}function E(e){return O(D({},j,e))}var P=E({}),H=O({});e.copyStrict=P,e.createCopier=O,e.createStrictCopier=E,e.default=H,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var a=n(8),i=n(281),o=n(294),s=n(203),u=n(352),l=n(354),d=n(355),c=n(356),f=n(357),m=n(358),_=n(359),p=n(360),h=n(361),y=Object.keys(p),g=function(e){var t=e.source||e.children||"",n=e.parserOptions;if(e.allowedTypes&&e.disallowedTypes)throw new Error("Only one of `allowedTypes` and `disallowedTypes` should be defined");var r=a(p,e.renderers),s=[[o,n]].concat(e.plugins||[]).reduce(M,i()),_=s.parse(t),g=a(e,{renderers:r,definitions:m(_)}),v=function(e){var t=[f,u()],n=e.disallowedTypes;e.allowedTypes&&(n=y.filter((function(t){return"root"!==t&&-1===e.allowedTypes.indexOf(t)})));var r=e.unwrapDisallowed?"unwrap":"remove";n&&n.length>0&&t.push(d.ofType(n,r));e.allowNode&&t.push(d.ifNotMatch(e.allowNode,r));var a=!e.escapeHtml&&!e.skipHtml,i=(e.astPlugins||[]).some((function(e){return(Array.isArray(e)?e[0]:e).identity===h.HtmlParser}));a&&!i&&t.push(l);return e.astPlugins?t.concat(e.astPlugins):t}(e),b=s.runSync(_),L=v.reduce((function(e,t){return t(e,g)}),b);return c(L,g)};function M(e,t){return Array.isArray(t)?e.use.apply(e,r(t)):e.use(t)}g.defaultProps={renderers:{},escapeHtml:!0,skipHtml:!1,sourcePos:!1,rawSourcePos:!1,transformLinkUri:_,astPlugins:[],plugins:[],parserOptions:{}},g.propTypes={className:s.string,source:s.string,children:s.string,sourcePos:s.bool,rawSourcePos:s.bool,escapeHtml:s.bool,skipHtml:s.bool,allowNode:s.func,allowedTypes:s.arrayOf(s.oneOf(y)),disallowedTypes:s.arrayOf(s.oneOf(y)),transformLinkUri:s.oneOfType([s.func,s.bool]),linkTarget:s.oneOfType([s.func,s.string]),transformImageUri:s.func,astPlugins:s.arrayOf(s.func),unwrapDisallowed:s.bool,renderers:s.object,plugins:s.array,parserOptions:s.object},g.types=y,g.renderers=p,g.uriTransformer=_,e.exports=g},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(362)},function(e,t,n){"use strict";var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,a=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));t.a=a},function(e,t,n){"use strict";function r(e){return Object.prototype.toString.call(e).slice(8,-1)}function a(e){return"Undefined"===r(e)}function i(e){return"Null"===r(e)}function o(e){return"Object"===r(e)&&(e.constructor===Object&&Object.getPrototypeOf(e)===Object.prototype)}function s(e){return"Array"===r(e)}function u(e){return"Symbol"===r(e)}var l,d,c,f,m;l=i,d=a;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function _(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var i=arguments[t],o=0,s=i.length;o<s;o++,a++)r[a]=i[o];return r}function p(e,t,n,r){var a=r.propertyIsEnumerable(t)?"enumerable":"nonenumerable";"enumerable"===a&&(e[t]=n),"nonenumerable"===a&&Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0,configurable:!0})}function h(e,t,n){if(!o(t))return n&&s(n)&&n.forEach((function(n){t=n(e,t)})),t;var r={};o(e)&&(r=_(Object.getOwnPropertyNames(e),Object.getOwnPropertySymbols(e)).reduce((function(n,r){var a=e[r];return(!u(r)&&!Object.getOwnPropertyNames(t).includes(r)||u(r)&&!Object.getOwnPropertySymbols(t).includes(r))&&p(n,r,a,e),n}),{}));return _(Object.getOwnPropertyNames(t),Object.getOwnPropertySymbols(t)).reduce((function(r,a){var i=t[a],u=o(e)?e[a]:void 0;return n&&s(n)&&n.forEach((function(e){i=e(u,i)})),void 0!==u&&o(i)&&(i=h(u,i,n)),p(r,a,i,t),r}),r)}t.a=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=null,a=e;return o(e)&&e.extensions&&1===Object.keys(e).length&&(a={},r=e.extensions),t.reduce((function(e,t){return h(e,t,r)}),a)}},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(34),a="function"==typeof Symbol&&Symbol.for,i=a?Symbol.for("react.element"):60103,o=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,l=a?Symbol.for("react.profiler"):60114,d=a?Symbol.for("react.provider"):60109,c=a?Symbol.for("react.context"):60110,f=a?Symbol.for("react.forward_ref"):60112,m=a?Symbol.for("react.suspense"):60113,_=a?Symbol.for("react.memo"):60115,p=a?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},M={};function v(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||g}function b(){}function L(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||g}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var k=L.prototype=new b;k.constructor=L,r(k,v.prototype),k.isPureReactComponent=!0;var w={current:null},Y=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function D(e,t,n){var r,a={},o=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)Y.call(t,r)&&!T.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var l=Array(u),d=0;d<u;d++)l[d]=arguments[d+2];a.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:i,type:e,key:o,ref:s,props:a,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var x=/\/+/g,j=[];function O(e,t,n,r){if(j.length){var a=j.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function E(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function P(e,t,n){return null==e?0:function e(t,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case o:u=!0}}if(u)return r(a,t,""===n?"."+H(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var d=n+H(s=t[l],l);u+=e(s,d,r,a)}else if(null===t||"object"!=typeof t?d=null:d="function"==typeof(d=h&&t[h]||t["@@iterator"])?d:null,"function"==typeof d)for(t=d.call(t),l=0;!(s=t.next()).done;)u+=e(s=s.value,d=n+H(s,l++),r,a);else if("object"===s)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function H(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function C(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,(function(e){return e})):null!=e&&(S(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(x,"$&/")+"/")+n)),r.push(e))}function N(e,t,n,r,a){var i="";null!=n&&(i=(""+n).replace(x,"$&/")+"/"),P(e,C,t=O(t,i,r,a)),E(t)}var F={current:null};function W(){var e=F.current;if(null===e)throw Error(y(321));return e}var I={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;P(e,A,t=O(null,null,t,n)),E(t)},count:function(e){return P(e,(function(){return null}),null)},toArray:function(e){var t=[];return N(e,t,null,(function(e){return e})),t},only:function(e){if(!S(e))throw Error(y(143));return e}},t.Component=v,t.Fragment=s,t.Profiler=l,t.PureComponent=L,t.StrictMode=u,t.Suspense=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var a=r({},e.props),o=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=w.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(d in t)Y.call(t,d)&&!T.hasOwnProperty(d)&&(a[d]=void 0===t[d]&&void 0!==l?l[d]:t[d])}var d=arguments.length-2;if(1===d)a.children=n;else if(1<d){l=Array(d);for(var c=0;c<d;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:i,type:e.type,key:o,ref:s,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},t.createElement=D,t.createFactory=function(e){var t=D.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:_,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return W().useCallback(e,t)},t.useContext=function(e,t){return W().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return W().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return W().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return W().useLayoutEffect(e,t)},t.useMemo=function(e,t){return W().useMemo(e,t)},t.useReducer=function(e,t,n){return W().useReducer(e,t,n)},t.useRef=function(e){return W().useRef(e)},t.useState=function(e){return W().useState(e)},t.version="16.14.0"},function(e,t,n){var r=n(15).default;e.exports=function(e,t){if("object"!=r(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,t||"default");if("object"!=r(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t,r)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,d=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,m=r?Symbol.for("react.forward_ref"):60112,_=r?Symbol.for("react.suspense"):60113,p=r?Symbol.for("react.suspense_list"):60120,h=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,M=r?Symbol.for("react.fundamental"):60117,v=r?Symbol.for("react.responder"):60118,b=r?Symbol.for("react.scope"):60119;function L(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case c:case f:case o:case u:case s:case _:return e;default:switch(e=e&&e.$$typeof){case d:case m:case y:case h:case l:return e;default:return t}}case i:return t}}}function k(e){return L(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=d,t.ContextProvider=l,t.Element=a,t.ForwardRef=m,t.Fragment=o,t.Lazy=y,t.Memo=h,t.Portal=i,t.Profiler=u,t.StrictMode=s,t.Suspense=_,t.isAsyncMode=function(e){return k(e)||L(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return L(e)===d},t.isContextProvider=function(e){return L(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return L(e)===m},t.isFragment=function(e){return L(e)===o},t.isLazy=function(e){return L(e)===y},t.isMemo=function(e){return L(e)===h},t.isPortal=function(e){return L(e)===i},t.isProfiler=function(e){return L(e)===u},t.isStrictMode=function(e){return L(e)===s},t.isSuspense=function(e){return L(e)===_},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===u||e===s||e===_||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===h||e.$$typeof===l||e.$$typeof===d||e.$$typeof===m||e.$$typeof===M||e.$$typeof===v||e.$$typeof===b||e.$$typeof===g)},t.typeOf=L},function(e,t,n){var r=n(36),a=n(37),i=n(225),o=n(39),s=n(40),u=n(226),l=n(227);function d(){"use strict";var t=a(),n=t.m(d),c=(Object.getPrototypeOf?Object.getPrototypeOf(n):n.__proto__).constructor;function f(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===c||"GeneratorFunction"===(t.displayName||t.name))}var m={throw:1,return:2,break:3,continue:3};function _(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,m[e],t)},delegateYield:function(e,a,i){return t.resultName=a,n(r.d,l(e),i)},finish:function(e){return n(r.f,e)}},n=function(e,n,a){r.p=t.prev,r.n=t.next;try{return e(n,a)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(e.exports=d=function(){return{wrap:function(e,n,r,a){return t.w(_(e),n,r,a&&a.reverse())},isGeneratorFunction:f,mark:t.m,awrap:function(e,t){return new r(e,t)},AsyncIterator:s,async:function(e,t,n,r,a){return(f(t)?o:i)(_(e),t,n,r,a)},keys:u,values:l}},e.exports.__esModule=!0,e.exports.default=e.exports)()}e.exports=d,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(39);e.exports=function(e,t,n,a,i){var o=r(e,t,n,a,i);return o.next().then((function(e){return e.done?e.value:o.next()}))},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(15).default;e.exports=function(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(r(e)+" is not iterable")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(5),a=n(41),i=n(229),o=n(47);function s(e){var t=new i(e),n=a(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=s(n(44));u.Axios=i,u.create=function(e){return s(o(u.defaults,e))},u.Cancel=n(48),u.CancelToken=n(242),u.isCancel=n(43),u.all=function(e){return Promise.all(e)},u.spread=n(243),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(5),a=n(42),i=n(230),o=n(231),s=n(47);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[o,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=s(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(5);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},function(e,t,n){"use strict";var r=n(5),a=n(232),i=n(43),o=n(44);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||o.adapter)(e).then((function(t){return s(e),t.data=a(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(46);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,i,o){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(a)&&s.push("path="+a),r.isString(i)&&s.push("domain="+i),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(238),a=n(239);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(5),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,o={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(o[t]&&a.indexOf(t)>=0)return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([n]):o[t]?o[t]+", "+n:n}})),o):o}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(48);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(245),a=n(58),i=n(24),o=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},u=Array.isArray,l=Array.prototype.push,d=function(e,t){l.apply(e,u(t)?t:[t])},c=Date.prototype.toISOString,f=i.default,m={addQueryPrefix:!1,allowDots:!1,allowEmptyArrays:!1,arrayFormat:"indices",charset:"utf-8",charsetSentinel:!1,commaRoundTrip:!1,delimiter:"&",encode:!0,encodeDotInKeys:!1,encoder:a.encode,encodeValuesOnly:!1,filter:void 0,format:f,formatter:i.formatters[f],indices:!1,serializeDate:function(e){return c.call(e)},skipNulls:!1,strictNullHandling:!1},_={},p=function e(t,n,i,o,s,l,c,f,p,h,y,g,M,v,b,L,k,w){for(var Y,T=t,D=w,S=0,x=!1;void 0!==(D=D.get(_))&&!x;){var j=D.get(t);if(S+=1,void 0!==j){if(j===S)throw new RangeError("Cyclic object value");x=!0}void 0===D.get(_)&&(S=0)}if("function"==typeof h?T=h(n,T):T instanceof Date?T=M(T):"comma"===i&&u(T)&&(T=a.maybeMap(T,(function(e){return e instanceof Date?M(e):e}))),null===T){if(l)return p&&!L?p(n,m.encoder,k,"key",v):n;T=""}if("string"==typeof(Y=T)||"number"==typeof Y||"boolean"==typeof Y||"symbol"==typeof Y||"bigint"==typeof Y||a.isBuffer(T))return p?[b(L?n:p(n,m.encoder,k,"key",v))+"="+b(p(T,m.encoder,k,"value",v))]:[b(n)+"="+b(String(T))];var O,E=[];if(void 0===T)return E;if("comma"===i&&u(T))L&&p&&(T=a.maybeMap(T,p)),O=[{value:T.length>0?T.join(",")||null:void 0}];else if(u(h))O=h;else{var P=Object.keys(T);O=y?P.sort(y):P}var H=f?String(n).replace(/\./g,"%2E"):String(n),A=o&&u(T)&&1===T.length?H+"[]":H;if(s&&u(T)&&0===T.length)return A+"[]";for(var C=0;C<O.length;++C){var N=O[C],F="object"==typeof N&&N&&void 0!==N.value?N.value:T[N];if(!c||null!==F){var W=g&&f?String(N).replace(/\./g,"%2E"):String(N),I=u(T)?"function"==typeof i?i(A,W):A:A+(g?"."+W:"["+W+"]");w.set(t,S);var z=r();z.set(_,w),d(E,e(F,I,i,o,s,l,c,f,"comma"===i&&L&&u(T)?null:p,h,y,g,M,v,b,L,k,z))}}return E};e.exports=function(e,t){var n,a=e,l=function(e){if(!e)return m;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.encodeDotInKeys&&"boolean"!=typeof e.encodeDotInKeys)throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||m.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!o.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r,a=i.formatters[n],l=m.filter;if(("function"==typeof e.filter||u(e.filter))&&(l=e.filter),r=e.arrayFormat in s?e.arrayFormat:"indices"in e?e.indices?"indices":"repeat":m.arrayFormat,"commaRoundTrip"in e&&"boolean"!=typeof e.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var d=void 0===e.allowDots?!0===e.encodeDotInKeys||m.allowDots:!!e.allowDots;return{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:m.addQueryPrefix,allowDots:d,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:m.allowEmptyArrays,arrayFormat:r,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:m.charsetSentinel,commaRoundTrip:!!e.commaRoundTrip,delimiter:void 0===e.delimiter?m.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:m.encode,encodeDotInKeys:"boolean"==typeof e.encodeDotInKeys?e.encodeDotInKeys:m.encodeDotInKeys,encoder:"function"==typeof e.encoder?e.encoder:m.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:m.encodeValuesOnly,filter:l,format:n,formatter:a,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:m.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:m.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:m.strictNullHandling}}(t);"function"==typeof l.filter?a=(0,l.filter)("",a):u(l.filter)&&(n=l.filter);var c=[];if("object"!=typeof a||null===a)return"";var f=s[l.arrayFormat],_="comma"===f&&l.commaRoundTrip;n||(n=Object.keys(a)),l.sort&&n.sort(l.sort);for(var h=r(),y=0;y<n.length;++y){var g=n[y],M=a[g];l.skipNulls&&null===M||d(c,p(M,g,f,_,l.allowEmptyArrays,l.strictNullHandling,l.skipNulls,l.encodeDotInKeys,l.encode?l.encoder:null,l.filter,l.sort,l.allowDots,l.serializeDate,l.format,l.formatter,l.encodeValuesOnly,l.charset,h))}var v=c.join(l.delimiter),b=!0===l.addQueryPrefix?"?":"";return l.charsetSentinel&&("iso-8859-1"===l.charset?b+="utf8=%26%2310003%3B&":b+="utf8=%E2%9C%93&"),v.length>0?b+v:""}},function(e,t,n){"use strict";var r=n(11),a=n(16),i=n(247),o=n(50),s=n(272)||o||i;e.exports=function(){var e,t={assert:function(e){if(!t.has(e))throw new r("Side channel does not contain "+a(e))},delete:function(t){return!!e&&e.delete(t)},get:function(t){return e&&e.get(t)},has:function(t){return!!e&&e.has(t)},set:function(t,n){e||(e=s()),e.set(t,n)}};return t}},function(e,t){},function(e,t,n){"use strict";var r=n(16),a=n(11),i=function(e,t,n){for(var r,a=e;null!=(r=a.next);a=r)if(r.key===t)return a.next=r.next,n||(r.next=e.next,e.next=r),r};e.exports=function(){var e,t={assert:function(e){if(!t.has(e))throw new a("Side channel does not contain "+r(e))},delete:function(t){var n=e&&e.next,r=function(e,t){if(e)return i(e,t,!0)}(e,t);return r&&n&&n===r&&(e=void 0),!!r},get:function(t){return function(e,t){if(e){var n=i(e,t);return n&&n.value}}(e,t)},has:function(t){return function(e,t){return!!e&&!!i(e,t)}(e,t)},set:function(t,n){e||(e={next:void 0}),function(e,t,n){var r=i(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(e,t,n)}};return t}},function(e,t,n){"use strict";e.exports=Error},function(e,t,n){"use strict";e.exports=EvalError},function(e,t,n){"use strict";e.exports=RangeError},function(e,t,n){"use strict";e.exports=ReferenceError},function(e,t,n){"use strict";e.exports=SyntaxError},function(e,t,n){"use strict";e.exports=URIError},function(e,t,n){"use strict";e.exports=Math.abs},function(e,t,n){"use strict";e.exports=Math.floor},function(e,t,n){"use strict";e.exports=Math.max},function(e,t,n){"use strict";e.exports=Math.min},function(e,t,n){"use strict";e.exports=Math.pow},function(e,t,n){"use strict";e.exports=Math.round},function(e,t,n){"use strict";var r=n(261);e.exports=function(e){return r(e)||0===e?e:e<0?-1:1}},function(e,t,n){"use strict";e.exports=Number.isNaN||function(e){return e!=e}},function(e,t,n){"use strict";e.exports=Object.getOwnPropertyDescriptor},function(e,t,n){"use strict";var r=Object.defineProperty||!1;if(r)try{r({},"a",{value:1})}catch(e){r=!1}e.exports=r},function(e,t,n){"use strict";var r="undefined"!=typeof Symbol&&Symbol,a=n(265);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&a())))}},function(e,t,n){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(var r in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var a=Object.getOwnPropertySymbols(e);if(1!==a.length||a[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,t);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},function(e,t,n){"use strict";var r=n(53),a=n(54),i=n(267);e.exports=r?function(e){return r(e)}:a?function(e){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("getProto: not an object");return a(e)}:i?function(e){return i(e)}:null},function(e,t,n){"use strict";var r,a=n(55),i=n(52);try{r=[].__proto__===Array.prototype}catch(e){if(!e||"object"!=typeof e||!("code"in e)||"ERR_PROTO_ACCESS"!==e.code)throw e}var o=!!r&&i&&i(Object.prototype,"__proto__"),s=Object,u=s.getPrototypeOf;e.exports=o&&"function"==typeof o.get?a([o.get]):"function"==typeof u&&function(e){return u(null==e?e:s(e))}},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",a=Object.prototype.toString,i=Math.max,o=function(e,t){for(var n=[],r=0;r<e.length;r+=1)n[r]=e[r];for(var a=0;a<t.length;a+=1)n[a+e.length]=t[a];return n},s=function(e,t){for(var n=[],r=t||0,a=0;r<e.length;r+=1,a+=1)n[a]=e[r];return n},u=function(e,t){for(var n="",r=0;r<e.length;r+=1)n+=e[r],r+1<e.length&&(n+=t);return n};e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==a.apply(t))throw new TypeError(r+t);for(var n,l=s(arguments,1),d=function(){if(this instanceof n){var r=t.apply(this,o(l,arguments));return Object(r)===r?r:this}return t.apply(e,o(l,arguments))},c=i(0,t.length-l.length),f=[],m=0;m<c;m++)f[m]="$"+m;if(n=Function("binder","return function ("+u(f,",")+"){ return binder.apply(this,arguments); }")(d),t.prototype){var _=function(){};_.prototype=t.prototype,n.prototype=new _,_.prototype=null}return n}},function(e,t,n){"use strict";var r=n(17),a=n(56),i=n(23),o=n(270);e.exports=o||r.call(i,a)},function(e,t,n){"use strict";e.exports="undefined"!=typeof Reflect&&Reflect&&Reflect.apply},function(e,t,n){"use strict";var r=Function.prototype.call,a=Object.prototype.hasOwnProperty,i=n(17);e.exports=i.call(r,a)},function(e,t,n){"use strict";var r=n(22),a=n(57),i=n(16),o=n(50),s=n(11),u=r("%WeakMap%",!0),l=a("WeakMap.prototype.get",!0),d=a("WeakMap.prototype.set",!0),c=a("WeakMap.prototype.has",!0),f=a("WeakMap.prototype.delete",!0);e.exports=u?function(){var e,t,n={assert:function(e){if(!n.has(e))throw new s("Side channel does not contain "+i(e))},delete:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(e)return f(e,n)}else if(o&&t)return t.delete(n);return!1},get:function(n){return u&&n&&("object"==typeof n||"function"==typeof n)&&e?l(e,n):t&&t.get(n)},has:function(n){return u&&n&&("object"==typeof n||"function"==typeof n)&&e?c(e,n):!!t&&t.has(n)},set:function(n,r){u&&n&&("object"==typeof n||"function"==typeof n)?(e||(e=new u),d(e,n,r)):o&&(t||(t=o()),t.set(n,r))}};return n}:o},function(e,t,n){"use strict";var r=n(58),a=Object.prototype.hasOwnProperty,i=Array.isArray,o={allowDots:!1,allowEmptyArrays:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decodeDotInKeys:!1,decoder:r.decode,delimiter:"&",depth:5,duplicates:"combine",ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictDepth:!1,strictNullHandling:!1,throwOnLimitExceeded:!1},s=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},u=function(e,t,n){if(e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1)return e.split(",");if(t.throwOnLimitExceeded&&n>=t.arrayLimit)throw new RangeError("Array limit exceeded. Only "+t.arrayLimit+" element"+(1===t.arrayLimit?"":"s")+" allowed in an array.");return e},l=function(e,t,n,i){if(e){var o=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,l=n.depth>0&&/(\[[^[\]]*])/.exec(o),d=l?o.slice(0,l.index):o,c=[];if(d){if(!n.plainObjects&&a.call(Object.prototype,d)&&!n.allowPrototypes)return;c.push(d)}for(var f=0;n.depth>0&&null!==(l=s.exec(o))&&f<n.depth;){if(f+=1,!n.plainObjects&&a.call(Object.prototype,l[1].slice(1,-1))&&!n.allowPrototypes)return;c.push(l[1])}if(l){if(!0===n.strictDepth)throw new RangeError("Input depth exceeded depth option of "+n.depth+" and strictDepth is true");c.push("["+o.slice(l.index)+"]")}return function(e,t,n,a){var i=0;if(e.length>0&&"[]"===e[e.length-1]){var o=e.slice(0,-1).join("");i=Array.isArray(t)&&t[o]?t[o].length:0}for(var s=a?t:u(t,n,i),l=e.length-1;l>=0;--l){var d,c=e[l];if("[]"===c&&n.parseArrays)d=n.allowEmptyArrays&&(""===s||n.strictNullHandling&&null===s)?[]:r.combine([],s);else{d=n.plainObjects?{__proto__:null}:{};var f="["===c.charAt(0)&&"]"===c.charAt(c.length-1)?c.slice(1,-1):c,m=n.decodeDotInKeys?f.replace(/%2E/g,"."):f,_=parseInt(m,10);n.parseArrays||""!==m?!isNaN(_)&&c!==m&&String(_)===m&&_>=0&&n.parseArrays&&_<=n.arrayLimit?(d=[])[_]=s:"__proto__"!==m&&(d[m]=s):d={0:s}}s=d}return s}(c,t,n,i)}};e.exports=function(e,t){var n=function(e){if(!e)return o;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.decodeDotInKeys&&"boolean"!=typeof e.decodeDotInKeys)throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0!==e.throwOnLimitExceeded&&"boolean"!=typeof e.throwOnLimitExceeded)throw new TypeError("`throwOnLimitExceeded` option must be a boolean");var t=void 0===e.charset?o.charset:e.charset,n=void 0===e.duplicates?o.duplicates:e.duplicates;if("combine"!==n&&"first"!==n&&"last"!==n)throw new TypeError("The duplicates option must be either combine, first, or last");return{allowDots:void 0===e.allowDots?!0===e.decodeDotInKeys||o.allowDots:!!e.allowDots,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:o.allowEmptyArrays,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:o.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:o.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:o.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:o.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:o.comma,decodeDotInKeys:"boolean"==typeof e.decodeDotInKeys?e.decodeDotInKeys:o.decodeDotInKeys,decoder:"function"==typeof e.decoder?e.decoder:o.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:o.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:o.depth,duplicates:n,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:o.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:o.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:o.plainObjects,strictDepth:"boolean"==typeof e.strictDepth?!!e.strictDepth:o.strictDepth,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:o.strictNullHandling,throwOnLimitExceeded:"boolean"==typeof e.throwOnLimitExceeded&&e.throwOnLimitExceeded}}(t);if(""===e||null==e)return n.plainObjects?{__proto__:null}:{};for(var d="string"==typeof e?function(e,t){var n={__proto__:null},l=t.ignoreQueryPrefix?e.replace(/^\?/,""):e;l=l.replace(/%5B/gi,"[").replace(/%5D/gi,"]");var d=t.parameterLimit===1/0?void 0:t.parameterLimit,c=l.split(t.delimiter,t.throwOnLimitExceeded?d+1:d);if(t.throwOnLimitExceeded&&c.length>d)throw new RangeError("Parameter limit exceeded. Only "+d+" parameter"+(1===d?"":"s")+" allowed.");var f,m=-1,_=t.charset;if(t.charsetSentinel)for(f=0;f<c.length;++f)0===c[f].indexOf("utf8=")&&("utf8=%E2%9C%93"===c[f]?_="utf-8":"utf8=%26%2310003%3B"===c[f]&&(_="iso-8859-1"),m=f,f=c.length);for(f=0;f<c.length;++f)if(f!==m){var p,h,y=c[f],g=y.indexOf("]="),M=-1===g?y.indexOf("="):g+1;-1===M?(p=t.decoder(y,o.decoder,_,"key"),h=t.strictNullHandling?null:""):(p=t.decoder(y.slice(0,M),o.decoder,_,"key"),h=r.maybeMap(u(y.slice(M+1),t,i(n[p])?n[p].length:0),(function(e){return t.decoder(e,o.decoder,_,"value")}))),h&&t.interpretNumericEntities&&"iso-8859-1"===_&&(h=s(String(h))),y.indexOf("[]=")>-1&&(h=i(h)?[h]:h);var v=a.call(n,p);v&&"combine"===t.duplicates?n[p]=r.combine(n[p],h):v&&"last"!==t.duplicates||(n[p]=h)}return n}(e,n):e,c=n.plainObjects?{__proto__:null}:{},f=Object.keys(d),m=0;m<f.length;++m){var _=f[m],p=l(_,d[_],n,"string"==typeof e);c=r.merge(c,p,n)}return!0===n.allowSparse?c:r.compact(c)}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./af":59,"./af.js":59,"./ar":60,"./ar-dz":61,"./ar-dz.js":61,"./ar-kw":62,"./ar-kw.js":62,"./ar-ly":63,"./ar-ly.js":63,"./ar-ma":64,"./ar-ma.js":64,"./ar-ps":65,"./ar-ps.js":65,"./ar-sa":66,"./ar-sa.js":66,"./ar-tn":67,"./ar-tn.js":67,"./ar.js":60,"./az":68,"./az.js":68,"./be":69,"./be.js":69,"./bg":70,"./bg.js":70,"./bm":71,"./bm.js":71,"./bn":72,"./bn-bd":73,"./bn-bd.js":73,"./bn.js":72,"./bo":74,"./bo.js":74,"./br":75,"./br.js":75,"./bs":76,"./bs.js":76,"./ca":77,"./ca.js":77,"./cs":78,"./cs.js":78,"./cv":79,"./cv.js":79,"./cy":80,"./cy.js":80,"./da":81,"./da.js":81,"./de":82,"./de-at":83,"./de-at.js":83,"./de-ch":84,"./de-ch.js":84,"./de.js":82,"./dv":85,"./dv.js":85,"./el":86,"./el.js":86,"./en-au":87,"./en-au.js":87,"./en-ca":88,"./en-ca.js":88,"./en-gb":89,"./en-gb.js":89,"./en-ie":90,"./en-ie.js":90,"./en-il":91,"./en-il.js":91,"./en-in":92,"./en-in.js":92,"./en-nz":93,"./en-nz.js":93,"./en-sg":94,"./en-sg.js":94,"./eo":95,"./eo.js":95,"./es":96,"./es-do":97,"./es-do.js":97,"./es-mx":98,"./es-mx.js":98,"./es-us":99,"./es-us.js":99,"./es.js":96,"./et":100,"./et.js":100,"./eu":101,"./eu.js":101,"./fa":102,"./fa.js":102,"./fi":103,"./fi.js":103,"./fil":104,"./fil.js":104,"./fo":105,"./fo.js":105,"./fr":106,"./fr-ca":107,"./fr-ca.js":107,"./fr-ch":108,"./fr-ch.js":108,"./fr.js":106,"./fy":109,"./fy.js":109,"./ga":110,"./ga.js":110,"./gd":111,"./gd.js":111,"./gl":112,"./gl.js":112,"./gom-deva":113,"./gom-deva.js":113,"./gom-latn":114,"./gom-latn.js":114,"./gu":115,"./gu.js":115,"./he":116,"./he.js":116,"./hi":117,"./hi.js":117,"./hr":118,"./hr.js":118,"./hu":119,"./hu.js":119,"./hy-am":120,"./hy-am.js":120,"./id":121,"./id.js":121,"./is":122,"./is.js":122,"./it":123,"./it-ch":124,"./it-ch.js":124,"./it.js":123,"./ja":125,"./ja.js":125,"./jv":126,"./jv.js":126,"./ka":127,"./ka.js":127,"./kk":128,"./kk.js":128,"./km":129,"./km.js":129,"./kn":130,"./kn.js":130,"./ko":131,"./ko.js":131,"./ku":132,"./ku-kmr":133,"./ku-kmr.js":133,"./ku.js":132,"./ky":134,"./ky.js":134,"./lb":135,"./lb.js":135,"./lo":136,"./lo.js":136,"./lt":137,"./lt.js":137,"./lv":138,"./lv.js":138,"./me":139,"./me.js":139,"./mi":140,"./mi.js":140,"./mk":141,"./mk.js":141,"./ml":142,"./ml.js":142,"./mn":143,"./mn.js":143,"./mr":144,"./mr.js":144,"./ms":145,"./ms-my":146,"./ms-my.js":146,"./ms.js":145,"./mt":147,"./mt.js":147,"./my":148,"./my.js":148,"./nb":149,"./nb.js":149,"./ne":150,"./ne.js":150,"./nl":151,"./nl-be":152,"./nl-be.js":152,"./nl.js":151,"./nn":153,"./nn.js":153,"./oc-lnc":154,"./oc-lnc.js":154,"./pa-in":155,"./pa-in.js":155,"./pl":156,"./pl.js":156,"./pt":157,"./pt-br":158,"./pt-br.js":158,"./pt.js":157,"./ro":159,"./ro.js":159,"./ru":160,"./ru.js":160,"./sd":161,"./sd.js":161,"./se":162,"./se.js":162,"./si":163,"./si.js":163,"./sk":164,"./sk.js":164,"./sl":165,"./sl.js":165,"./sq":166,"./sq.js":166,"./sr":167,"./sr-cyrl":168,"./sr-cyrl.js":168,"./sr.js":167,"./ss":169,"./ss.js":169,"./sv":170,"./sv.js":170,"./sw":171,"./sw.js":171,"./ta":172,"./ta.js":172,"./te":173,"./te.js":173,"./tet":174,"./tet.js":174,"./tg":175,"./tg.js":175,"./th":176,"./th.js":176,"./tk":177,"./tk.js":177,"./tl-ph":178,"./tl-ph.js":178,"./tlh":179,"./tlh.js":179,"./tr":180,"./tr.js":180,"./tzl":181,"./tzl.js":181,"./tzm":182,"./tzm-latn":183,"./tzm-latn.js":183,"./tzm.js":182,"./ug-cn":184,"./ug-cn.js":184,"./uk":185,"./uk.js":185,"./ur":186,"./ur.js":186,"./uz":187,"./uz-latn":188,"./uz-latn.js":188,"./uz.js":187,"./vi":189,"./vi.js":189,"./x-pseudo":190,"./x-pseudo.js":190,"./yo":191,"./yo.js":191,"./zh-cn":192,"./zh-cn.js":192,"./zh-hk":193,"./zh-hk.js":193,"./zh-mo":194,"./zh-mo.js":194,"./zh-tw":195,"./zh-tw.js":195};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=275},function(e,t){e.exports=function(e){if(Array.isArray(e))return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,i,o,s=[],u=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(e){l=!0,a=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(l)throw a}}return s}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(279);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(282),a=n(283),i=n(284),o=n(290),s=n(292),u=n(293);e.exports=function e(){var t=[],n=o(),g={},M=!1,v=-1;return b.data=function(e,t){if(s(e))return 2===arguments.length?(p("data",M),g[e]=t,b):d.call(g,e)&&g[e]||null;if(e)return p("data",M),g=e,b;return g},b.freeze=L,b.attachers=t,b.use=function(e){var n;if(p("use",M),null==e);else if("function"==typeof e)s.apply(null,arguments);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?o(e):a(e)}n&&(g.settings=r(g.settings||{},n));return b;function a(e){o(e.plugins),e.settings&&(n=r(n||{},e.settings))}function i(e){if("function"==typeof e)s(e);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?s.apply(null,e):a(e)}}function o(e){var t,n;if(null==e);else{if("object"!=typeof e||!("length"in e))throw new Error("Expected a list of plugins, not `"+e+"`");for(t=e.length,n=-1;++n<t;)i(e[n])}}function s(e,n){var a=k(e);a?(u(a[1])&&u(n)&&(n=r(a[1],n)),a[1]=n):t.push(l.call(arguments))}},b.parse=function(e){var t,n=i(e);if(L(),m("parse",t=b.Parser),f(t))return new t(String(n),n).parse();return t(String(n),n)},b.stringify=function(e,t){var n,r=i(t);if(L(),_("stringify",n=b.Compiler),h(e),f(n))return new n(e,r).compile();return n(e,r)},b.run=w,b.runSync=function(e,t){var n,r=!1;return w(e,t,(function(e,t){r=!0,a(e),n=t})),y("runSync","run",r),n},b.process=Y,b.processSync=function(e){var t,n=!1;return L(),m("processSync",b.Parser),_("processSync",b.Compiler),Y(t=i(e),(function(e){n=!0,a(e)})),y("processSync","process",n),t},b;function b(){for(var n=e(),a=t.length,i=-1;++i<a;)n.use.apply(null,t[i]);return n.data(r(!0,{},g)),n}function L(){var e,r,a,i;if(M)return b;for(;++v<t.length;)r=(e=t[v])[0],null,!1!==(a=e[1])&&(!0===a&&(e[1]=void 0),"function"==typeof(i=r.apply(b,e.slice(1)))&&n.use(i));return M=!0,v=1/0,b}function k(e){for(var n,r=t.length,a=-1;++a<r;)if((n=t[a])[0]===e)return n}function w(e,t,r){if(h(e),L(),r||"function"!=typeof t||(r=t,t=null),!r)return new Promise(a);function a(a,o){n.run(e,i(t),(function(t,n,i){n=n||e,t?o(t):a?a(n):r(null,n,i)}))}a(null,r)}function Y(e,t){if(L(),m("process",b.Parser),_("process",b.Compiler),!t)return new Promise(n);function n(n,r){var a=i(e);c.run(b,{file:a},(function(e){e?r(e):n?n(a):t(null,a)}))}n(null,t)}}().freeze();var l=[].slice,d={}.hasOwnProperty,c=o().use((function(e,t){t.tree=e.parse(t.file)})).use((function(e,t,n){e.run(t.tree,t.file,(function(e,r,a){e?n(e):(t.tree=r,t.file=a,n())}))})).use((function(e,t){t.file.contents=e.stringify(t.tree,t.file)}));function f(e){return"function"==typeof e&&function(e){var t;for(t in e)return!0;return!1}(e.prototype)}function m(e,t){if("function"!=typeof t)throw new Error("Cannot `"+e+"` without `Parser`")}function _(e,t){if("function"!=typeof t)throw new Error("Cannot `"+e+"` without `Compiler`")}function p(e,t){if(t)throw new Error(["Cannot invoke `"+e+"` on a frozen processor.\nCreate a new ","processor first, by invoking it: use `processor()` instead of ","`processor`."].join(""))}function h(e){if(!e||!s(e.type))throw new Error("Expected node, got `"+e+"`")}function y(e,t,n){if(!n)throw new Error("`"+e+"` finished async. Use `"+t+"` instead")}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=Object.defineProperty,o=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===a.call(e)},u=function(e){if(!e||"[object Object]"!==a.call(e))return!1;var t,n=r.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&r.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!n&&!i)return!1;for(t in e);return void 0===t||r.call(e,t)},l=function(e,t){i&&"__proto__"===t.name?i(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},d=function(e,t){if("__proto__"===t){if(!r.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var t,n,r,a,i,o,c=arguments[0],f=1,m=arguments.length,_=!1;for("boolean"==typeof c&&(_=c,c=arguments[1]||{},f=2),(null==c||"object"!=typeof c&&"function"!=typeof c)&&(c={});f<m;++f)if(null!=(t=arguments[f]))for(n in t)r=d(c,n),c!==(a=d(t,n))&&(_&&a&&(u(a)||(i=s(a)))?(i?(i=!1,o=r&&s(r)?r:[]):o=r&&u(r)?r:{},l(c,{name:n,newValue:e(_,o,a)})):void 0!==a&&l(c,{name:n,newValue:a}));return c}},function(e,t,n){"use strict";e.exports=function(e){if(e)throw e}},function(e,t,n){"use strict";var r=n(285),a=n(287);e.exports=a;var i=a.prototype;function o(e,t,n){var a=this.path,i=new r(e,t,n);return a&&(i.name=a+":"+i.name,i.file=a),i.fatal=!1,this.messages.push(i),i}i.message=o,i.info=function(){var e=this.message.apply(this,arguments);return e.fatal=null,e},i.fail=function(){var e=this.message.apply(this,arguments);throw e.fatal=!0,e},i.warn=o},function(e,t,n){"use strict";var r=n(286);function a(){}e.exports=o,a.prototype=Error.prototype,o.prototype=new a;var i=o.prototype;function o(e,t,n){var a,i,o;"string"==typeof t&&(n=t,t=null),a=function(e){var t,n=[null,null];"string"==typeof e&&(-1===(t=e.indexOf(":"))?n[1]=e:(n[0]=e.slice(0,t),n[1]=e.slice(t+1)));return n}(n),i=r(t)||"1:1",o={start:{line:null,column:null},end:{line:null,column:null}},t&&t.position&&(t=t.position),t&&(t.start?(o=t,t=t.start):o.start=t),e.stack&&(this.stack=e.stack,e=e.message),this.message=e,this.name=i,this.reason=e,this.line=t?t.line:null,this.column=t?t.column:null,this.location=o,this.source=a[0],this.ruleId=a[1]}i.file="",i.name="",i.reason="",i.message="",i.stack="",i.fatal=null,i.column=null,i.line=null},function(e,t,n){"use strict";var r={}.hasOwnProperty;function a(e){return e&&"object"==typeof e||(e={}),o(e.line)+":"+o(e.column)}function i(e){return e&&"object"==typeof e||(e={}),a(e.start)+"-"+a(e.end)}function o(e){return e&&"number"==typeof e?e:1}e.exports=function(e){if(!e||"object"!=typeof e)return null;if(r.call(e,"position")||r.call(e,"type"))return i(e.position);if(r.call(e,"start")||r.call(e,"end"))return i(e);if(r.call(e,"line")||r.call(e,"column"))return a(e);return null}},function(e,t,n){"use strict";(function(t){var r=n(196),a=n(288),i=n(289);e.exports=l;var o={}.hasOwnProperty,s=l.prototype;s.toString=function(e){var t=this.contents||"";return i(t)?t.toString(e):String(t)};var u=["history","path","basename","stem","extname","dirname"];function l(e){var n,r,a;if(e){if("string"==typeof e||i(e))e={contents:e};else if("message"in e&&"messages"in e)return e}else e={};if(!(this instanceof l))return new l(e);for(this.data={},this.messages=[],this.history=[],this.cwd=t.cwd(),r=-1,a=u.length;++r<a;)n=u[r],o.call(e,n)&&(this[n]=e[n]);for(n in e)-1===u.indexOf(n)&&(this[n]=e[n])}function d(e,t){if(-1!==e.indexOf(r.sep))throw new Error("`"+t+"` cannot be a path: did not expect `"+r.sep+"`")}function c(e,t){if(!e)throw new Error("`"+t+"` cannot be empty")}function f(e,t){if(!e)throw new Error("Setting `"+t+"` requires `path` to be set too")}Object.defineProperty(s,"path",{get:function(){return this.history[this.history.length-1]},set:function(e){c(e,"path"),e!==this.path&&this.history.push(e)}}),Object.defineProperty(s,"dirname",{get:function(){return"string"==typeof this.path?r.dirname(this.path):void 0},set:function(e){f(this.path,"dirname"),this.path=r.join(e||"",this.basename)}}),Object.defineProperty(s,"basename",{get:function(){return"string"==typeof this.path?r.basename(this.path):void 0},set:function(e){c(e,"basename"),d(e,"basename"),this.path=r.join(this.dirname||"",e)}}),Object.defineProperty(s,"extname",{get:function(){return"string"==typeof this.path?r.extname(this.path):void 0},set:function(e){var t=e||"";if(d(t,"extname"),f(this.path,"extname"),t){if("."!==t.charAt(0))throw new Error("`extname` must start with `.`");if(-1!==t.indexOf(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=a(this.path,t)}}),Object.defineProperty(s,"stem",{get:function(){return"string"==typeof this.path?r.basename(this.path,this.extname):void 0},set:function(e){c(e,"stem"),d(e,"stem"),this.path=r.join(this.dirname||"",e+(this.extname||""))}})}).call(this,n(13))},function(e,t,n){"use strict";var r=n(196);e.exports=function(e,t){if("string"!=typeof e)return e;if(0===e.length)return e;var n=r.basename(e,r.extname(e))+t;return r.join(r.dirname(e),n)}},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(291);e.exports=i,i.wrap=r;var a=[].slice;function i(){var e=[],t={run:function(){var t=-1,n=a.call(arguments,0,-1),i=arguments[arguments.length-1];if("function"!=typeof i)throw new Error("Expected function as last argument, not "+i);function o(s){var u=e[++t],l=a.call(arguments,0),d=l.slice(1),c=n.length,f=-1;if(s)i(s);else{for(;++f<c;)null!==d[f]&&void 0!==d[f]||(d[f]=n[f]);n=d,u?r(u,o).apply(null,n):i.apply(null,[null].concat(n))}}o.apply(null,[null].concat(n))},use:function(n){if("function"!=typeof n)throw new Error("Expected `fn` to be a function, not "+n);return e.push(n),t}};return t}},function(e,t,n){"use strict";var r=[].slice;e.exports=function(e,t){var n;return function(){var t,o=r.call(arguments,0),s=e.length>o.length;s&&o.push(a);try{t=e.apply(null,o)}catch(e){if(s&&n)throw e;return a(e)}s||(t&&"function"==typeof t.then?t.then(i,a):t instanceof Error?a(t):i(t))};function a(){n||(n=!0,t.apply(null,arguments))}function i(e){a(null,e)}}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return"[object String]"===n.call(e)}},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){var t;return"[object Object]"===r.call(e)&&(null===(t=Object.getPrototypeOf(e))||t===Object.getPrototypeOf({}))}},function(e,t,n){"use strict";var r=n(295),a=n(8),i=n(297);function o(e){var t=r(i);t.prototype.options=a(t.prototype.options,this.data("settings"),e),this.Parser=t}e.exports=o,o.Parser=i},function(e,t,n){"use strict";var r=n(8),a=n(296);e.exports=function(e){var t,n,i;for(n in a(s,e),a(o,s),t=s.prototype)(i=t[n])&&"object"==typeof i&&(t[n]="concat"in i?i.concat():r(i));return s;function o(t){return e.apply(this,t)}function s(){return this instanceof s?e.apply(this,arguments):new o(arguments)}}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},function(e,t,n){"use strict";var r=n(8),a=n(298),i=n(299),o=n(300),s=n(301),u=n(307);function l(e,t){this.file=t,this.offset={},this.options=r(this.options),this.setOptions({}),this.inList=!1,this.inBlock=!1,this.inLink=!1,this.atStart=!0,this.toOffset=i(t).toOffset,this.unescape=o(this,"escape"),this.decode=s(this)}e.exports=l;var d=l.prototype;function c(e){var t,n=[];for(t in e)n.push(t);return n}d.setOptions=n(308),d.parse=n(311),d.options=n(198),d.exitStart=a("atStart",!0),d.enterList=a("inList",!1),d.enterLink=a("inLink",!1),d.enterBlock=a("inBlock",!1),d.interruptParagraph=[["thematicBreak"],["atxHeading"],["fencedCode"],["blockquote"],["html"],["setextHeading",{commonmark:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.interruptList=[["atxHeading",{pedantic:!1}],["fencedCode",{pedantic:!1}],["thematicBreak",{pedantic:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.interruptBlockquote=[["indentedCode",{commonmark:!0}],["fencedCode",{commonmark:!0}],["atxHeading",{commonmark:!0}],["setextHeading",{commonmark:!0}],["thematicBreak",{commonmark:!0}],["html",{commonmark:!0}],["list",{commonmark:!0}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.blockTokenizers={newline:n(315),indentedCode:n(316),fencedCode:n(317),blockquote:n(318),atxHeading:n(319),thematicBreak:n(320),list:n(321),setextHeading:n(323),html:n(324),footnote:n(325),definition:n(327),table:n(328),paragraph:n(329)},d.inlineTokenizers={escape:n(330),autoLink:n(332),url:n(333),html:n(335),link:n(336),reference:n(337),strong:n(338),emphasis:n(340),deletion:n(343),code:n(345),break:n(347),text:n(349)},d.blockMethods=c(d.blockTokenizers),d.inlineMethods=c(d.inlineTokenizers),d.tokenizeBlock=u("block"),d.tokenizeInline=u("inline"),d.tokenizeFactory=u},function(e,t,n){"use strict";e.exports=function(e,t,n){return function(){var r=n||this,a=r[e];return r[e]=!t,function(){r[e]=a}}}},function(e,t,n){"use strict";function r(e){return function(t){var n=-1,r=e.length;if(t<0)return{};for(;++n<r;)if(e[n]>t)return{line:n+1,column:t-(e[n-1]||0)+1,offset:t};return{}}}function a(e){return function(t){var n=t&&t.line,r=t&&t.column;if(!isNaN(n)&&!isNaN(r)&&n-1 in e)return(e[n-2]||0)+r-1||0;return-1}}e.exports=function(e){var t=function(e){var t=[],n=e.indexOf("\n");for(;-1!==n;)t.push(n+1),n=e.indexOf("\n",n+1);return t.push(e.length+1),t}(String(e));return{toPosition:r(t),toOffset:a(t)}}},function(e,t,n){"use strict";e.exports=function(e,t){return function(n){var r,a=0,i=n.indexOf("\\"),o=e[t],s=[];for(;-1!==i;)s.push(n.slice(a,i)),a=i+1,(r=n.charAt(a))&&-1!==o.indexOf(r)||s.push("\\"),i=n.indexOf("\\",a);return s.push(n.slice(a)),s.join("")}}},function(e,t,n){"use strict";var r=n(8),a=n(25);e.exports=function(e){return i.raw=function(e,i,o){return a(e,r(o,{position:t(i),warning:n}))},i;function t(t){for(var n=e.offset,r=t.line,a=[];++r&&r in n;)a.push((n[r]||0)+1);return{start:t,indent:a}}function n(t,n,r){3!==r&&e.file.message(t,n)}function i(r,i,o){a(r,{position:t(i),warning:n,text:o,reference:o,textContext:e,referenceContext:e})}}},function(e){e.exports=JSON.parse('{"AElig":"Æ","AMP":"&","Aacute":"Á","Acirc":"Â","Agrave":"À","Aring":"Å","Atilde":"Ã","Auml":"Ä","COPY":"©","Ccedil":"Ç","ETH":"Ð","Eacute":"É","Ecirc":"Ê","Egrave":"È","Euml":"Ë","GT":">","Iacute":"Í","Icirc":"Î","Igrave":"Ì","Iuml":"Ï","LT":"<","Ntilde":"Ñ","Oacute":"Ó","Ocirc":"Ô","Ograve":"Ò","Oslash":"Ø","Otilde":"Õ","Ouml":"Ö","QUOT":"\\"","REG":"®","THORN":"Þ","Uacute":"Ú","Ucirc":"Û","Ugrave":"Ù","Uuml":"Ü","Yacute":"Ý","aacute":"á","acirc":"â","acute":"´","aelig":"æ","agrave":"à","amp":"&","aring":"å","atilde":"ã","auml":"ä","brvbar":"¦","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","curren":"¤","deg":"°","divide":"÷","eacute":"é","ecirc":"ê","egrave":"è","eth":"ð","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","iacute":"í","icirc":"î","iexcl":"¡","igrave":"ì","iquest":"¿","iuml":"ï","laquo":"«","lt":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","ntilde":"ñ","oacute":"ó","ocirc":"ô","ograve":"ò","ordf":"ª","ordm":"º","oslash":"ø","otilde":"õ","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","raquo":"»","reg":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","thorn":"þ","times":"×","uacute":"ú","ucirc":"û","ugrave":"ù","uml":"¨","uuml":"ü","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e){e.exports=JSON.parse('{"0":"�","128":"€","130":"‚","131":"ƒ","132":"„","133":"…","134":"†","135":"‡","136":"ˆ","137":"‰","138":"Š","139":"‹","140":"Œ","142":"Ž","145":"‘","146":"’","147":"“","148":"”","149":"•","150":"–","151":"—","152":"˜","153":"™","154":"š","155":"›","156":"œ","158":"ž","159":"Ÿ"}')},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=97&&t<=102||t>=65&&t<=70||t>=48&&t<=57}},function(e,t,n){"use strict";var r=n(197),a=n(18);e.exports=function(e){return r(e)||a(e)}},function(e,t,n){"use strict";var r;e.exports=function(e){var t,n="&"+e+";";if((r=r||document.createElement("i")).innerHTML=n,59===(t=r.textContent).charCodeAt(t.length-1)&&"semi"!==e)return!1;return t!==n&&t}},function(e,t,n){"use strict";e.exports=function(e){return function(t,n){var i,o,s,u,l,d,c=this,f=c.offset,m=[],_=c[e+"Methods"],p=c[e+"Tokenizers"],h=n.line,y=n.column;if(!t)return m;b.now=M,b.file=c.file,g("");for(;t;){for(i=-1,o=_.length,l=!1;++i<o&&(u=_[i],!(s=p[u])||s.onlyAtStart&&!c.atStart||s.notInList&&c.inList||s.notInBlock&&c.inBlock||s.notInLink&&c.inLink||(d=t.length,s.apply(c,[b,t]),!(l=d!==t.length))););l||c.file.fail(new Error("Infinite loop"),b.now())}return c.eof=M(),m;function g(e){for(var t=-1,n=e.indexOf("\n");-1!==n;)h++,t=n,n=e.indexOf("\n",n+1);-1===t?y+=e.length:y=e.length-t,h in f&&(-1!==t?y+=f[h]:y<=f[h]&&(y=f[h]+1))}function M(){var e={line:h,column:y};return e.offset=c.toOffset(e),e}function v(e){this.start=e,this.end=M()}function b(e){var n,i=function(){var e=[],t=h+1;return function(){for(var n=h+1;t<n;)e.push((f[t]||0)+1),t++;return e}}(),o=(n=M(),function(e,t){var r=e.position,a=r?r.start:n,i=[],o=r&&r.end.line,s=n.line;if(e.position=new v(a),r&&t&&r.indent){if(i=r.indent,o<s){for(;++o<s;)i.push((f[o]||0)+1);i.push(n.column)}t=i.concat(t)}return e.position.indent=t||[],e}),s=M();return function(e){t.substring(0,e.length)!==e&&c.file.fail(new Error("Incorrectly eaten value: please report this warning on http://git.io/vg5Ft"),M())}(e),u.reset=l,l.test=d,u.test=d,t=t.substring(e.length),g(e),i=i(),u;function u(e,t){return o(function(e,t){var n=t?t.children:m,i=n[n.length-1];return i&&e.type===i.type&&e.type in r&&a(i)&&a(e)&&(e=r[e.type].call(c,i,e)),e!==i&&n.push(e),c.atStart&&0!==m.length&&c.exitStart(),e}(o(e),t),i)}function l(){var n=u.apply(null,arguments);return h=s.line,y=s.column,t=e+t,n}function d(){var n=o({});return h=s.line,y=s.column,t=e+t,n.position}}}};var r={text:function(e,t){return e.value+=t.value,e},blockquote:function(e,t){if(this.options.commonmark)return t;return e.children=e.children.concat(t.children),e}};function a(e){var t,n;return"text"!==e.type||!e.position||(t=e.position.start,n=e.position.end,t.line!==n.line||n.column-t.column===e.value.length)}},function(e,t,n){"use strict";var r=n(8),a=n(309),i=n(198);e.exports=function(e){var t,n,o=this.options;if(null==e)e={};else{if("object"!=typeof e)throw new Error("Invalid value `"+e+"` for setting `options`");e=r(e)}for(t in i){if(null==(n=e[t])&&(n=o[t]),"blocks"!==t&&"boolean"!=typeof n||"blocks"===t&&"object"!=typeof n)throw new Error("Invalid value `"+n+"` for setting `options."+t+"`");e[t]=n}return this.options=e,this.escape=a(e),this}},function(e,t,n){"use strict";e.exports=o;var r=["\\","`","*","{","}","[","]","(",")","#","+","-",".","!","_",">"],a=r.concat(["~","|"]),i=a.concat(["\n",'"',"$","%","&","'",",","/",":",";","<","=","?","@","^"]);function o(e){var t=e||{};return t.commonmark?i:t.gfm?a:r}o.default=r,o.gfm=a,o.commonmark=i},function(e){e.exports=JSON.parse('["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","pre","section","source","title","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]')},function(e,t,n){"use strict";var r=n(8),a=n(312);e.exports=function(){var e,t=String(this.file),n={line:1,column:1,offset:0},o=r(n);65279===(t=t.replace(i,"\n")).charCodeAt(0)&&(t=t.slice(1),o.column++,o.offset++);e={type:"root",children:this.tokenizeBlock(t,o),position:{start:n,end:this.eof||r(n)}},this.options.position||a(e,!0);return e};var i=/\r\n|\r/g},function(e,t,n){"use strict";var r=n(19);function a(e){delete e.position}function i(e){e.position=void 0}e.exports=function(e,t){return r(e,t?a:i),e}},function(e,t,n){"use strict";e.exports=a;var r=n(314);function a(e,t,n,a){var o;function s(e,r,u){var l,d=[];return(t&&!o(e,r,u[u.length-1]||null)||!1!==(d=i(n(e,u)))[0])&&e.children&&"skip"!==d[0]&&!1===(l=i(function(e,t){var n,r=a?-1:1,i=(a?e.length:-1)+r;for(;i>-1&&i<e.length;){if(!1===(n=s(e[i],i,t))[0])return n;i="number"==typeof n[1]?n[1]:i+r}}(e.children,u.concat(e))))[0]?l:d}"function"==typeof t&&"function"!=typeof n&&(a=n,n=t,t=null),o=r(t),s(e,null,[])}function i(e){return null!==e&&"object"==typeof e&&"length"in e?e:"number"==typeof e?[!0,e]:[e]}a.CONTINUE=!0,a.SKIP="skip",a.EXIT=!1},function(e,t,n){"use strict";function r(e){if("string"==typeof e)return function(e){return function(t){return Boolean(t&&t.type===e)}}(e);if(null==e)return o;if("object"==typeof e)return("length"in e?i:a)(e);if("function"==typeof e)return e;throw new Error("Expected function, string, or object as test")}function a(e){return function(t){var n;for(n in e)if(t[n]!==e[n])return!1;return!0}}function i(e){var t=function(e){for(var t=[],n=e.length,a=-1;++a<n;)t[a]=r(e[a]);return t}(e),n=t.length;return function(){var e=-1;for(;++e<n;)if(t[e].apply(this,arguments))return!0;return!1}}function o(){return!0}e.exports=r},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var a,i,o,s,u=t.charAt(0);if("\n"!==u)return;if(n)return!0;s=1,a=t.length,i=u,o="";for(;s<a&&(u=t.charAt(s),r(u));)o+=u,"\n"===u&&(i+=o,o=""),s++;e(i)}},function(e,t,n){"use strict";var r=n(26),a=n(27);e.exports=function(e,t,n){var r,o,s,u=-1,l=t.length,d="",c="",f="",m="";for(;++u<l;)if(r=t.charAt(u),s)if(s=!1,d+=f,c+=m,f="",m="","\n"===r)f=r,m=r;else for(d+=r,c+=r;++u<l;){if(!(r=t.charAt(u))||"\n"===r){m=r,f=r;break}d+=r,c+=r}else if(" "===r&&t.charAt(u+1)===r&&t.charAt(u+2)===r&&t.charAt(u+3)===r)f+=i,u+=3,s=!0;else if("\t"===r)f+=r,s=!0;else{for(o="";"\t"===r||" "===r;)o+=r,r=t.charAt(++u);if("\n"!==r)break;f+=o+r,m+=r}if(c)return!!n||e(d)({type:"code",lang:null,value:a(c)})};var i=r(" ",4)},function(e,t,n){"use strict";var r=n(27);e.exports=function(e,t,n){var a,i,o,s,u,l,d,c,f,m,_,p=this.options,h=t.length+1,y=0,g="";if(!p.gfm)return;for(;y<h&&(" "===(o=t.charAt(y))||"\t"===o);)g+=o,y++;if(m=y,"~"!==(o=t.charAt(y))&&"`"!==o)return;y++,i=o,a=1,g+=o;for(;y<h&&(o=t.charAt(y))===i;)g+=o,a++,y++;if(a<3)return;for(;y<h&&(" "===(o=t.charAt(y))||"\t"===o);)g+=o,y++;s="",u="";for(;y<h&&"\n"!==(o=t.charAt(y))&&"~"!==o&&"`"!==o;)" "===o||"\t"===o?u+=o:(s+=u+o,u=""),y++;if((o=t.charAt(y))&&"\n"!==o)return;if(n)return!0;(_=e.now()).column+=g.length,_.offset+=g.length,g+=s,s=this.decode.raw(this.unescape(s),_),u&&(g+=u);u="",c="",f="",l="",d="";for(;y<h;)if(o=t.charAt(y),l+=c,d+=f,c="",f="","\n"===o){for(l?(c+=o,f+=o):g+=o,u="",y++;y<h&&" "===(o=t.charAt(y));)u+=o,y++;if(c+=u,f+=u.slice(m),!(u.length>=4)){for(u="";y<h&&(o=t.charAt(y))===i;)u+=o,y++;if(c+=u,f+=u,!(u.length<a)){for(u="";y<h&&(" "===(o=t.charAt(y))||"\t"===o);)c+=o,f+=o,y++;if(!o||"\n"===o)break}}}else l+=o,f+=o,y++;return e(g+=l+c)({type:"code",lang:s||null,value:r(d)})}},function(e,t,n){"use strict";var r=n(12),a=n(28);e.exports=function(e,t,n){var i,o,s,u,l,d,c,f,m,_=this.offset,p=this.blockTokenizers,h=this.interruptBlockquote,y=e.now(),g=y.line,M=t.length,v=[],b=[],L=[],k=0;for(;k<M&&(" "===(o=t.charAt(k))||"\t"===o);)k++;if(">"!==t.charAt(k))return;if(n)return!0;k=0;for(;k<M;){for(u=t.indexOf("\n",k),c=k,f=!1,-1===u&&(u=M);k<M&&(" "===(o=t.charAt(k))||"\t"===o);)k++;if(">"===t.charAt(k)?(k++,f=!0," "===t.charAt(k)&&k++):k=c,l=t.slice(k,u),!f&&!r(l)){k=c;break}if(!f&&(s=t.slice(k),a(h,p,this,[e,s,!0])))break;d=c===k?l:t.slice(c,u),L.push(k-c),v.push(d),b.push(l),k=u+1}k=-1,M=L.length,i=e(v.join("\n"));for(;++k<M;)_[g]=(_[g]||0)+L[k],g++;return m=this.enterBlock(),b=this.tokenizeBlock(b.join("\n"),y),m(),i({type:"blockquote",children:b})}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o=this.options,s=t.length+1,u=-1,l=e.now(),d="",c="";for(;++u<s;){if(" "!==(r=t.charAt(u))&&"\t"!==r){u--;break}d+=r}i=0;for(;++u<=s;){if("#"!==(r=t.charAt(u))){u--;break}d+=r,i++}if(i>6)return;if(!i||!o.pedantic&&"#"===t.charAt(u+1))return;s=t.length+1,a="";for(;++u<s;){if(" "!==(r=t.charAt(u))&&"\t"!==r){u--;break}a+=r}if(!o.pedantic&&0===a.length&&r&&"\n"!==r)return;if(n)return!0;d+=a,a="",c="";for(;++u<s&&(r=t.charAt(u))&&"\n"!==r;)if(" "===r||"\t"===r||"#"===r){for(;" "===r||"\t"===r;)a+=r,r=t.charAt(++u);for(;"#"===r;)a+=r,r=t.charAt(++u);for(;" "===r||"\t"===r;)a+=r,r=t.charAt(++u);u--}else c+=a+r,a="";return l.column+=d.length,l.offset+=d.length,e(d+=c+a)({type:"heading",depth:i,children:this.tokenizeInline(c,l)})}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o,s=-1,u=t.length+1,l="";for(;++s<u&&("\t"===(r=t.charAt(s))||" "===r);)l+=r;if("*"!==r&&"-"!==r&&"_"!==r)return;a=r,l+=r,i=1,o="";for(;++s<u;)if((r=t.charAt(s))===a)i++,l+=o+a,o="";else{if(" "!==r)return i>=3&&(!r||"\n"===r)?(l+=o,!!n||e(l)({type:"thematicBreak"})):void 0;o+=r}}},function(e,t,n){"use strict";var r=n(12),a=n(26),i=n(18),o=n(199),s=n(322),u=n(28);e.exports=function(e,t,n){var a,o,s,l,d,c,f,m,g,M,v,b,L,k,w,Y,T,D,S,x,j,O,E,P,H=this.options.commonmark,A=this.options.pedantic,C=this.blockTokenizers,N=this.interruptList,F=0,W=t.length,I=null,z=0;for(;F<W;){if("\t"===(l=t.charAt(F)))z+=4-z%4;else{if(" "!==l)break;z++}F++}if(z>=4)return;if(l=t.charAt(F),a=H?h:p,!0===_[l])d=l,s=!1;else{for(s=!0,o="";F<W&&(l=t.charAt(F),i(l));)o+=l,F++;if(l=t.charAt(F),!o||!0!==a[l])return;I=parseInt(o,10),d=l}if(" "!==(l=t.charAt(++F))&&"\t"!==l)return;if(n)return!0;F=0,k=[],w=[],Y=[];for(;F<W;){for(c=t.indexOf("\n",F),f=F,m=!1,P=!1,-1===c&&(c=W),E=F+4,z=0;F<W;){if("\t"===(l=t.charAt(F)))z+=4-z%4;else{if(" "!==l)break;z++}F++}if(z>=4&&(P=!0),T&&z>=T.indent&&(P=!0),l=t.charAt(F),g=null,!P){if(!0===_[l])g=l,F++,z++;else{for(o="";F<W&&(l=t.charAt(F),i(l));)o+=l,F++;l=t.charAt(F),F++,o&&!0===a[l]&&(g=l,z+=o.length+1)}if(g)if("\t"===(l=t.charAt(F)))z+=4-z%4,F++;else if(" "===l){for(E=F+4;F<E&&" "===t.charAt(F);)F++,z++;F===E&&" "===t.charAt(F)&&(F-=3,z-=3)}else"\n"!==l&&""!==l&&(g=null)}if(g){if(!A&&d!==g)break;m=!0}else H||P||" "!==t.charAt(f)?H&&T&&(P=z>=T.indent||z>4):P=!0,m=!1,F=f;if(v=t.slice(f,c),M=f===F?v:t.slice(F,c),("*"===g||"_"===g||"-"===g)&&C.thematicBreak.call(this,e,v,!0))break;if(b=L,L=!r(M).length,P&&T)T.value=T.value.concat(Y,v),w=w.concat(Y,v),Y=[];else if(m)0!==Y.length&&(T.value.push(""),T.trail=Y.concat()),T={value:[v],indent:z,trail:[]},k.push(T),w=w.concat(Y,v),Y=[];else if(L){if(b)break;Y.push(v)}else{if(b)break;if(u(N,C,this,[e,v,!0]))break;T.value=T.value.concat(Y,v),w=w.concat(Y,v),Y=[]}F=c+1}j=e(w.join("\n")).reset({type:"list",ordered:s,start:I,loose:null,children:[]}),D=this.enterList(),S=this.enterBlock(),x=!1,F=-1,W=k.length;for(;++F<W;)T=k[F].value.join("\n"),O=e.now(),(T=e(T)(y(this,T,O),j)).loose&&(x=!0),T=k[F].trail.join("\n"),F!==W-1&&(T+="\n"),e(T);return D(),S(),j.loose=x,j};var l=/\n\n(?!\s*$)/,d=/^\[([ \t]|x|X)][ \t]/,c=/^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/,f=/^([ \t]*)([*+-]|\d+[.)])([ \t]+)/,m=/^( {1,4}|\t)?/gm,_={"*":!0,"+":!0,"-":!0},p={".":!0},h={};function y(e,t,n){var r,a,i=e.offset,o=e.options.pedantic?g:M,s=null;return t=o.apply(null,arguments),e.options.gfm&&(r=t.match(d))&&(a=r[0].length,s="x"===r[1].toLowerCase(),i[n.line]+=a,t=t.slice(a)),{type:"listItem",loose:l.test(t)||"\n"===t.charAt(t.length-1),checked:s,children:e.tokenizeBlock(t,n)}}function g(e,t,n){var r=e.offset,a=n.line;return t=t.replace(f,i),a=n.line,t.replace(m,i);function i(e){return r[a]=(r[a]||0)+e.length,a++,""}}function M(e,t,n){var r,i,u,l,d,f,m,_=e.offset,p=n.line;for(l=(t=t.replace(c,(function(e,t,n,o,s){i=t+n+o,u=s,Number(n)<10&&i.length%2==1&&(n=" "+n);return(r=t+a(" ",n.length)+o)+u}))).split("\n"),(d=s(t,o(r).indent).split("\n"))[0]=u,_[p]=(_[p]||0)+i.length,p++,f=0,m=l.length;++f<m;)_[p]=(_[p]||0)+l[f].length-d[f].length,p++;return d.join("\n")}h["."]=!0,h[")"]=!0},function(e,t,n){"use strict";var r=n(12),a=n(26),i=n(199);e.exports=function(e,t){var n,o,s,u,l=e.split("\n"),d=l.length+1,c=1/0,f=[];l.unshift(a(" ",t)+"!");for(;d--;)if(o=i(l[d]),f[d]=o.stops,0!==r(l[d]).length){if(!o.indent){c=1/0;break}o.indent>0&&o.indent<c&&(c=o.indent)}if(c!==1/0)for(d=l.length;d--;){for(s=f[d],n=c;n&&!(n in s);)n--;u=0!==r(l[d]).length&&c&&n!==c?"\t":"",l[d]=u+l[d].slice(n in s?s[n]+1:0)}return l.shift(),l.join("\n")}},function(e,t,n){"use strict";e.exports=function(e,t,n){var a,i,o,s,u,l=e.now(),d=t.length,c=-1,f="";for(;++c<d;){if(" "!==(o=t.charAt(c))||c>=3){c--;break}f+=o}a="",i="";for(;++c<d;){if("\n"===(o=t.charAt(c))){c--;break}" "===o||"\t"===o?i+=o:(a+=i+o,i="")}if(l.column+=f.length,l.offset+=f.length,f+=a+i,o=t.charAt(++c),s=t.charAt(++c),"\n"!==o||!r[s])return;f+=o,i=s,u=r[s];for(;++c<d;){if((o=t.charAt(c))!==s){if("\n"!==o)return;c--;break}i+=o}if(n)return!0;return e(f+i)({type:"heading",depth:u,children:this.tokenizeInline(a,l)})};var r={};r["="]=1,r["-"]=2},function(e,t,n){"use strict";var r=n(200).openCloseTag;e.exports=function(e,t,n){var a,i,o,s,u,l,d,c=this.options.blocks,f=t.length,m=0,_=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Za-z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+c.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(r.source+"\\s*$"),/^$/,!1]];for(;m<f&&("\t"===(s=t.charAt(m))||" "===s);)m++;if("<"!==t.charAt(m))return;a=-1===(a=t.indexOf("\n",m+1))?f:a,i=t.slice(m,a),o=-1,u=_.length;for(;++o<u;)if(_[o][0].test(i)){l=_[o];break}if(!l)return;if(n)return l[2];if(m=a,!l[1].test(i))for(;m<f;){if(a=-1===(a=t.indexOf("\n",m+1))?f:a,i=t.slice(m+1,a),l[1].test(i)){i&&(m=a);break}m=a}return d=t.slice(0,m),e(d)({type:"html",value:d})}},function(e,t,n){"use strict";var r=n(6),a=n(29);e.exports=o,o.notInList=!0,o.notInBlock=!0;var i=/^( {4}|\t)?/gm;function o(e,t,n){var o,s,u,l,d,c,f,m,_,p,h,y,g=this.offset;if(this.options.footnotes){for(o=0,s=t.length,u="",l=e.now(),d=l.line;o<s&&(_=t.charAt(o),r(_));)u+=_,o++;if("["===t.charAt(o)&&"^"===t.charAt(o+1)){for(o=(u+="[^").length,f="";o<s&&"]"!==(_=t.charAt(o));)"\\"===_&&(f+=_,o++,_=t.charAt(o)),f+=_,o++;if(f&&"]"===t.charAt(o)&&":"===t.charAt(o+1)){if(n)return!0;for(p=a(f),o=(u+=f+"]:").length;o<s&&("\t"===(_=t.charAt(o))||" "===_);)u+=_,o++;for(l.column+=u.length,l.offset+=u.length,f="",c="",m="";o<s;){if("\n"===(_=t.charAt(o))){for(m=_,o++;o<s&&"\n"===(_=t.charAt(o));)m+=_,o++;for(f+=m,m="";o<s&&" "===(_=t.charAt(o));)m+=_,o++;if(0===m.length)break;f+=m}f&&(c+=f,f=""),c+=_,o++}return u+=c,c=c.replace(i,(function(e){return g[d]=(g[d]||0)+e.length,d++,""})),h=e(u),y=this.enterBlock(),c=this.tokenizeBlock(c,l),y(),h({type:"footnoteDefinition",identifier:p,children:c})}}}}},function(e,t,n){"use strict";e.exports=function(e){return String(e).replace(/\s+/g," ")}},function(e,t,n){"use strict";var r=n(6),a=n(29);e.exports=i,i.notInList=!0,i.notInBlock=!0;function i(e,t,n){for(var r,i,u,l,d,c,f,m,_=this.options.commonmark,p=0,h=t.length,y="";p<h&&(" "===(l=t.charAt(p))||"\t"===l);)y+=l,p++;if("["===(l=t.charAt(p))){for(p++,y+=l,u="";p<h&&"]"!==(l=t.charAt(p));)"\\"===l&&(u+=l,p++,l=t.charAt(p)),u+=l,p++;if(u&&"]"===t.charAt(p)&&":"===t.charAt(p+1)){for(c=u,p=(y+=u+"]:").length,u="";p<h&&("\t"===(l=t.charAt(p))||" "===l||"\n"===l);)y+=l,p++;if(u="",r=y,"<"===(l=t.charAt(p))){for(p++;p<h&&o(l=t.charAt(p));)u+=l,p++;if((l=t.charAt(p))===o.delimiter)y+="<"+u+l,p++;else{if(_)return;p-=u.length+1,u=""}}if(!u){for(;p<h&&s(l=t.charAt(p));)u+=l,p++;y+=u}if(u){for(f=u,u="";p<h&&("\t"===(l=t.charAt(p))||" "===l||"\n"===l);)u+=l,p++;if(d=null,'"'===(l=t.charAt(p))?d='"':"'"===l?d="'":"("===l&&(d=")"),d){if(!u)return;for(p=(y+=u+l).length,u="";p<h&&(l=t.charAt(p))!==d;){if("\n"===l){if(p++,"\n"===(l=t.charAt(p))||l===d)return;u+="\n"}u+=l,p++}if((l=t.charAt(p))!==d)return;i=y,y+=u+l,p++,m=u,u=""}else u="",p=y.length;for(;p<h&&("\t"===(l=t.charAt(p))||" "===l);)y+=l,p++;return(l=t.charAt(p))&&"\n"!==l?void 0:!!n||(r=e(r).test().end,f=this.decode.raw(this.unescape(f),r,{nonTerminated:!1}),m&&(i=e(i).test().end,m=this.decode.raw(this.unescape(m),i)),e(y)({type:"definition",identifier:a(c),title:m||null,url:f}))}}}}function o(e){return">"!==e&&"["!==e&&"]"!==e}function s(e){return"["!==e&&"]"!==e&&!r(e)}o.delimiter=">"},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var a,i,o,s,u,l,d,c,f,m,_,p,h,y,g,M,v,b,L,k,w,Y,T,D;if(!this.options.gfm)return;a=0,b=0,l=t.length+1,d=[];for(;a<l;){if(Y=t.indexOf("\n",a),T=t.indexOf("|",a+1),-1===Y&&(Y=t.length),-1===T||T>Y){if(b<2)return;break}d.push(t.slice(a,Y)),b++,a=Y+1}s=d.join("\n"),i=d.splice(1,1)[0]||[],a=0,l=i.length,b--,o=!1,_=[];for(;a<l;){if("|"===(f=i.charAt(a))){if(m=null,!1===o){if(!1===D)return}else _.push(o),o=!1;D=!1}else if("-"===f)m=!0,o=o||null;else if(":"===f)o="left"===o?"center":m&&null===o?"right":"left";else if(!r(f))return;a++}!1!==o&&_.push(o);if(_.length<1)return;if(n)return!0;v=-1,k=[],w=e(s).reset({type:"table",align:_,children:k});for(;++v<b;){for(L=d[v],u={type:"tableRow",children:[]},v&&e("\n"),e(L).reset(u,w),l=L.length+1,a=0,c="",p="",h=!0,y=null,g=null;a<l;)if("\t"!==(f=L.charAt(a))&&" "!==f){if(""===f||"|"===f)if(h)e(f);else{if(f&&g){c+=f,a++;continue}!p&&!f||h||(s=p,c.length>1&&(f?(s+=c.slice(0,c.length-1),c=c.charAt(c.length-1)):(s+=c,c="")),M=e.now(),e(s)({type:"tableCell",children:this.tokenizeInline(p,M)},u)),e(c+f),c="",p=""}else if(c&&(p+=c,c=""),p+=f,"\\"===f&&a!==l-2&&(p+=L.charAt(a+1),a++),"`"===f){for(y=1;L.charAt(a+1)===f;)p+=f,a++,y++;g?y>=g&&(g=0):g=y}h=!1,a++}else p?c+=f:e(f),a++;v||e("\n"+i)}return w}},function(e,t,n){"use strict";var r=n(12),a=n(18),i=n(27),o=n(28);e.exports=function(e,t,n){var s,u,l,d,c,f=this.options,m=f.commonmark,_=f.gfm,p=this.blockTokenizers,h=this.interruptParagraph,y=t.indexOf("\n"),g=t.length;for(;y<g;){if(-1===y){y=g;break}if("\n"===t.charAt(y+1))break;if(m){for(d=0,s=y+1;s<g;){if("\t"===(l=t.charAt(s))){d=4;break}if(" "!==l)break;d++,s++}if(d>=4){y=t.indexOf("\n",y+1);continue}}if(u=t.slice(y+1),o(h,p,this,[e,u,!0]))break;if(p.list.call(this,e,u,!0)&&(this.inList||m||_&&!a(r.left(u).charAt(0))))break;if(s=y,-1!==(y=t.indexOf("\n",y+1))&&""===r(t.slice(s,y))){y=s;break}}if(u=t.slice(0,y),""===r(u))return e(u),null;if(n)return!0;return c=e.now(),u=i(u),e(u)({type:"paragraph",children:this.tokenizeInline(u,c)})}},function(e,t,n){"use strict";var r=n(331);function a(e,t,n){var r,a;if("\\"===t.charAt(0)&&(r=t.charAt(1),-1!==this.escape.indexOf(r)))return!!n||(a="\n"===r?{type:"break"}:{type:"text",value:r},e("\\"+r)(a))}e.exports=a,a.locator=r},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("\\",t)}},function(e,t,n){"use strict";var r=n(6),a=n(25),i=n(201);e.exports=s,s.locator=i,s.notInLink=!0;var o="mailto:".length;function s(e,t,n){var i,s,u,l,d,c,f,m,_,p,h;if("<"===t.charAt(0)){for(this,i="",s=t.length,u=0,l="",c=!1,f="",u++,i="<";u<s&&(d=t.charAt(u),!(r(d)||">"===d||"@"===d||":"===d&&"/"===t.charAt(u+1)));)l+=d,u++;if(l){if(f+=l,l="",f+=d=t.charAt(u),u++,"@"===d)c=!0;else{if(":"!==d||"/"!==t.charAt(u+1))return;f+="/",u++}for(;u<s&&(d=t.charAt(u),!r(d)&&">"!==d);)l+=d,u++;if(d=t.charAt(u),l&&">"===d)return!!n||(_=f+=l,i+=f+d,(m=e.now()).column++,m.offset++,c&&("mailto:"===f.slice(0,o).toLowerCase()?(_=_.substr(o),m.column+=o,m.offset+=o):f="mailto:"+f),p=this.inlineTokenizers,this.inlineTokenizers={text:p.text},h=this.enterLink(),_=this.tokenizeInline(_,m),this.inlineTokenizers=p,h(),e(i)({type:"link",title:null,url:a(f,{nonTerminated:!1}),children:_}))}}}},function(e,t,n){"use strict";var r=n(25),a=n(6),i=n(334);e.exports=u,u.locator=i,u.notInLink=!0;var o=["http://","https://","mailto:"],s=o.length;function u(e,t,n){var i,u,l,d,c,f,m,_,p,h,y,g;if(this.options.gfm){for(i="",d=-1,_=s;++d<_;)if(f=o[d],(m=t.slice(0,f.length)).toLowerCase()===f){i=m;break}if(i){for(d=i.length,_=t.length,p="",h=0;d<_&&(l=t.charAt(d),!a(l)&&"<"!==l)&&("."!==l&&","!==l&&":"!==l&&";"!==l&&'"'!==l&&"'"!==l&&")"!==l&&"]"!==l||(y=t.charAt(d+1))&&!a(y))&&("("!==l&&"["!==l||h++,")"!==l&&"]"!==l||!(--h<0));)p+=l,d++;if(p){if(u=i+=p,"mailto:"===f){if(-1===(c=p.indexOf("@"))||c===_-1)return;u=u.substr("mailto:".length)}return!!n||(g=this.enterLink(),u=this.tokenizeInline(u,e.now()),g(),e(i)({type:"link",title:null,url:r(i,{nonTerminated:!1}),children:u}))}}}}},function(e,t,n){"use strict";e.exports=function(e,t){var n,a=r.length,i=-1,o=-1;if(!this.options.gfm)return-1;for(;++i<a;)-1!==(n=e.indexOf(r[i],t))&&(n<o||-1===o)&&(o=n);return o};var r=["https://","http://","mailto:"]},function(e,t,n){"use strict";var r=n(197),a=n(201),i=n(200).tag;e.exports=u,u.locator=a;var o=/^<a /i,s=/^<\/a>/i;function u(e,t,n){var a,u,l=t.length;if(!("<"!==t.charAt(0)||l<3)&&(a=t.charAt(1),(r(a)||"?"===a||"!"===a||"/"===a)&&(u=t.match(i))))return!!n||(u=u[0],!this.inLink&&o.test(u)?this.inLink=!0:this.inLink&&s.test(u)&&(this.inLink=!1),e(u)({type:"html",value:u}))}},function(e,t,n){"use strict";var r=n(6),a=n(202);e.exports=u,u.locator=a;var i={}.hasOwnProperty,o={'"':'"',"'":"'"},s={};function u(e,t,n){var a,u,l,d,c,f,m,_,p,h,y,g,M,v,b,L,k,w,Y,T="",D=0,S=t.charAt(0),x=this.options.pedantic,j=this.options.commonmark,O=this.options.gfm;if("!"===S&&(p=!0,T=S,S=t.charAt(++D)),"["===S&&(p||!this.inLink)){for(T+=S,b="",D++,g=t.length,v=0,(k=e.now()).column+=D,k.offset+=D;D<g;){if(f=S=t.charAt(D),"`"===S){for(u=1;"`"===t.charAt(D+1);)f+=S,D++,u++;l?u>=l&&(l=0):l=u}else if("\\"===S)D++,f+=t.charAt(D);else if(l&&!O||"["!==S){if((!l||O)&&"]"===S){if(!v){if(!x)for(;D<g&&(S=t.charAt(D+1),r(S));)f+=S,D++;if("("!==t.charAt(D+1))return;f+="(",a=!0,D++;break}v--}}else v++;b+=f,f="",D++}if(a){for(h=b,T+=b+f,D++;D<g&&(S=t.charAt(D),r(S));)T+=S,D++;if(S=t.charAt(D),_=j?s:o,b="",d=T,"<"===S){for(D++,d+="<";D<g&&">"!==(S=t.charAt(D));){if(j&&"\n"===S)return;b+=S,D++}if(">"!==t.charAt(D))return;T+="<"+b+">",L=b,D++}else{for(S=null,f="";D<g&&(S=t.charAt(D),!f||!i.call(_,S));){if(r(S)){if(!x)break;f+=S}else{if("("===S)v++;else if(")"===S){if(0===v)break;v--}b+=f,f="","\\"===S&&(b+="\\",S=t.charAt(++D)),b+=S}D++}L=b,D=(T+=b).length}for(b="";D<g&&(S=t.charAt(D),r(S));)b+=S,D++;if(S=t.charAt(D),T+=b,b&&i.call(_,S))if(D++,T+=S,b="",y=_[S],c=T,j){for(;D<g&&(S=t.charAt(D))!==y;)"\\"===S&&(b+="\\",S=t.charAt(++D)),D++,b+=S;if((S=t.charAt(D))!==y)return;for(M=b,T+=b+S,D++;D<g&&(S=t.charAt(D),r(S));)T+=S,D++}else for(f="";D<g;){if((S=t.charAt(D))===y)m&&(b+=y+f,f=""),m=!0;else if(m){if(")"===S){T+=b+y+f,M=b;break}r(S)?f+=S:(b+=y+f+S,f="",m=!1)}else b+=S;D++}if(")"===t.charAt(D))return!!n||(T+=")",L=this.decode.raw(this.unescape(L),e(d).test().end,{nonTerminated:!1}),M&&(c=e(c).test().end,M=this.decode.raw(this.unescape(M),c)),Y={type:p?"image":"link",title:M||null,url:L},p?Y.alt=this.decode.raw(this.unescape(h),k)||null:(w=this.enterLink(),Y.children=this.tokenizeInline(h,k),w()),e(T)(Y))}}}s['"']='"',s["'"]="'",s["("]=")"},function(e,t,n){"use strict";var r=n(6),a=n(202),i=n(29);e.exports=o,o.locator=a;function o(e,t,n){var a,o,s,u,l,d,c,f,m=t.charAt(0),_=0,p=t.length,h="",y="",g="link",M="shortcut";if("!"===m&&(g="image",y=m,m=t.charAt(++_)),"["===m){if(_++,y+=m,d="",this.options.footnotes&&"^"===t.charAt(_)){if("image"===g)return;y+="^",_++,g="footnote"}for(f=0;_<p;){if("["===(m=t.charAt(_)))c=!0,f++;else if("]"===m){if(!f)break;f--}"\\"===m&&(d+="\\",m=t.charAt(++_)),d+=m,_++}if(h=d,a=d,"]"===(m=t.charAt(_))){for(_++,h+=m,d="";_<p&&(m=t.charAt(_),r(m));)d+=m,_++;if(m=t.charAt(_),"footnote"!==g&&"["===m){for(o="",d+=m,_++;_<p&&"["!==(m=t.charAt(_))&&"]"!==m;)"\\"===m&&(o+="\\",m=t.charAt(++_)),o+=m,_++;"]"===(m=t.charAt(_))?(M=o?"full":"collapsed",d+=o+m,_++):o="",h+=d,d=""}else{if(!a)return;o=a}if("full"===M||!c)return h=y+h,"link"===g&&this.inLink?null:!!n||("footnote"===g&&-1!==a.indexOf(" ")?e(h)({type:"footnote",children:this.tokenizeInline(a,e.now())}):((s=e.now()).column+=y.length,s.offset+=y.length,u={type:g+"Reference",identifier:i(o="full"===M?o:a)},"link"!==g&&"image"!==g||(u.referenceType=M),"link"===g?(l=this.enterLink(),u.children=this.tokenizeInline(a,s),l()):"image"===g&&(u.alt=this.decode.raw(this.unescape(a),s)||null),e(h)(u)))}}}},function(e,t,n){"use strict";var r=n(12),a=n(6),i=n(339);e.exports=o,o.locator=i;function o(e,t,n){var i,o,s,u,l,d,c,f=0,m=t.charAt(f);if(!("*"!==m&&"_"!==m||t.charAt(++f)!==m||(o=this.options.pedantic,l=(s=m)+s,d=t.length,f++,u="",m="",o&&a(t.charAt(f)))))for(;f<d;){if(c=m,!((m=t.charAt(f))!==s||t.charAt(f+1)!==s||o&&a(c))&&(m=t.charAt(f+2))!==s){if(!r(u))return;return!!n||((i=e.now()).column+=2,i.offset+=2,e(l+u+l)({type:"strong",children:this.tokenizeInline(u,i)}))}o||"\\"!==m||(u+=m,m=t.charAt(++f)),u+=m,f++}}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("**",t),r=e.indexOf("__",t);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},function(e,t,n){"use strict";var r=n(12),a=n(341),i=n(6),o=n(342);e.exports=s,s.locator=o;function s(e,t,n){var o,s,u,l,d,c,f,m=0,_=t.charAt(m);if(!("*"!==_&&"_"!==_||(s=this.options.pedantic,d=_,u=_,c=t.length,m++,l="",_="",s&&i(t.charAt(m)))))for(;m<c;){if(f=_,!((_=t.charAt(m))!==u||s&&i(f))){if((_=t.charAt(++m))!==u){if(!r(l)||f===u)return;if(!s&&"_"===u&&a(_)){l+=u;continue}return!!n||((o=e.now()).column++,o.offset++,e(d+l+u)({type:"emphasis",children:this.tokenizeInline(l,o)}))}l+=u}s||"\\"!==_||(l+=_,_=t.charAt(++m)),l+=_,m++}}},function(e,t,n){"use strict";e.exports=function(e){return a.test("number"==typeof e?r(e):e.charAt(0))};var r=String.fromCharCode,a=/\w/},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("*",t),r=e.indexOf("_",t);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},function(e,t,n){"use strict";var r=n(6),a=n(344);e.exports=i,i.locator=a;function i(e,t,n){var a,i,o,s="",u="",l="",d="";if(this.options.gfm&&"~"===t.charAt(0)&&"~"===t.charAt(1)&&!r(t.charAt(2)))for(a=1,i=t.length,(o=e.now()).column+=2,o.offset+=2;++a<i;){if(!("~"!==(s=t.charAt(a))||"~"!==u||l&&r(l)))return!!n||e("~~"+d+"~~")({type:"delete",children:this.tokenizeInline(d,o)});d+=u,l=u,u=s}}},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("~~",t)}},function(e,t,n){"use strict";var r=n(6),a=n(346);e.exports=i,i.locator=a;function i(e,t,n){for(var a,i,o,s,u,l,d,c,f=t.length,m=0,_="",p="";m<f&&"`"===t.charAt(m);)_+="`",m++;if(_){for(u=_,s=m,_="",c=t.charAt(m),o=0;m<f;){if(l=c,c=t.charAt(m+1),"`"===l?(o++,p+=l):(o=0,_+=l),o&&"`"!==c){if(o===s){u+=_+p,d=!0;break}_+=p,p=""}m++}if(!d){if(s%2!=0)return;_=""}if(n)return!0;for(a="",i="",f=_.length,m=-1;++m<f;)l=_.charAt(m),r(l)?i+=l:(i&&(a&&(a+=i),i=""),a+=l);return e(u)({type:"inlineCode",value:a})}}},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("`",t)}},function(e,t,n){"use strict";var r=n(348);e.exports=a,a.locator=r;function a(e,t,n){for(var r,a=t.length,i=-1,o="";++i<a;){if("\n"===(r=t.charAt(i))){if(i<2)return;return!!n||e(o+=r)({type:"break"})}if(" "!==r)return;o+=r}}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("\n",t);for(;n>t&&" "===e.charAt(n-1);)n--;return n}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o,s,u,l,d,c,f;if(n)return!0;r=this.inlineMethods,o=r.length,a=this.inlineTokenizers,i=-1,c=t.length;for(;++i<o;)"text"!==(d=r[i])&&a[d]&&((l=a[d].locator)||e.file.fail("Missing locator: `"+d+"`"),-1!==(u=l.call(this,t,1))&&u<c&&(c=u));s=t.slice(0,c),f=e.now(),this.decode(s,f,(function(t,n,r){e(r||t)({type:"text",value:t})}))}},function(e,t,n){"use strict";var r=n(351);function a(){}function i(){}i.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,i,o){if(o!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(353);e.exports=function(){return function(e){return r(e,"list",(function(e,t){var n,r,a=0;for(n=0,r=t.length;n<r;n++)"list"===t[n].type&&(a+=1);for(n=0,r=e.children.length;n<r;n++){var i=e.children[n];i.index=n,i.ordered=e.ordered}e.depth=a})),e}}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r=[];"function"==typeof t&&(n=t,t=null);function a(e){var i;return t&&e.type!==t||(i=n(e,r.concat())),e.children&&!1!==i?function(e,t){var n,i=e.length,o=-1;r.push(t);for(;++o<i;)if((n=e[o])&&!1===a(n))return!1;return r.pop(),!0}(e.children,e):i}a(e)}},function(e,t,n){"use strict";var r=n(19),a=/^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i,i=/^<(\/?)([a-z]+)\s*>$/;e.exports=function(e){var t,n;return r(e,"html",(function(e,r,o){n!==o&&(t=[],n=o);var s=function(e){var t=e.value.match(a);return!!t&&t[1]}(e);if(s)return o.children.splice(r,1,{type:"virtualHtml",tag:s,position:e.position}),!0;var u=function(e,t){var n=e.value.match(i);return!!n&&{tag:n[2],opening:!n[1],node:e}}(e);if(!u)return!0;var l=function(e,t){var n=e.length;for(;n--;)if(e[n].tag===t)return e.splice(n,1)[0];return!1}(t,u.tag);return l?o.children.splice(r,0,function(e,t,n){var r=n.children.indexOf(e.node),a=n.children.indexOf(t.node),i=n.children.splice(r,a-r+1).slice(1,-1);return{type:"virtualHtml",children:i,tag:e.tag,position:{start:e.node.position.start,end:t.node.position.end,indent:[]}}}(u,l,o)):u.opening||t.push(u),!0}),!0),e}},function(e,t,n){"use strict";var r=n(19);function a(e,t,n,r){if("remove"===r)n.children.splice(t,1);else if("unwrap"===r){var a=[t,1];e.children&&(a=a.concat(e.children)),Array.prototype.splice.apply(n.children,a)}}t.ofType=function(e,t){return function(t){return e.forEach((function(e){return r(t,e,n,!0)})),t};function n(e,n,r){r&&a(e,n,r,t)}},t.ifNotMatch=function(e,t){return function(e){return r(e,n,!0),e};function n(n,r,i){i&&!e(n,r,i)&&a(n,r,i,t)}}},function(e,t,n){"use strict";var r=n(1),a=n(8),i=n(20),o={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function s(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,l=t.renderers[e.type];void 0===e.position&&(e.position=n.node&&n.node.position||o);var d=e.position.start,c=[e.type,d.line,d.column,a].join("-");if(!i.isValidElementType(l))throw new Error("Renderer for type `".concat(e.type,"` not defined or is not renderable"));var f=u(e,c,t,l,n,a);return r.createElement(l,f,f.children||m()||void 0);function m(){return e.children&&e.children.map((function(n,r){return s(n,t,{node:e,props:f},r)}))}}function u(e,t,n,i,o,u){var d,c={key:t},f="string"==typeof i;n.sourcePos&&e.position&&(c["data-sourcepos"]=[(d=e.position).start.line,":",d.start.column,"-",d.end.line,":",d.end.column].map(String).join("")),n.rawSourcePos&&!f&&(c.sourcePosition=e.position),n.includeNodeIndex&&o.node&&o.node.children&&!f&&(c.index=o.node.children.indexOf(e),c.parentChildCount=o.node.children.length);var m=null!==e.identifier&&void 0!==e.identifier?n.definitions[e.identifier]||{}:null;switch(e.type){case"root":l(c,{className:n.className});break;case"text":c.nodeKey=t,c.children=e.value;break;case"heading":c.level=e.depth;break;case"list":c.start=e.start,c.ordered=e.ordered,c.tight=!e.loose,c.depth=e.depth;break;case"listItem":c.checked=e.checked,c.tight=!e.loose,c.ordered=e.ordered,c.index=e.index,c.children=function(e,t){if(e.loose)return e.children;if(t.node&&e.index>0&&t.node.children[e.index-1].loose)return e.children;return function(e){return e.children.reduce((function(e,t){return e.concat("paragraph"===t.type?t.children||[]:[t])}),[])}(e)}(e,o).map((function(t,r){return s(t,n,{node:e,props:c},r)}));break;case"definition":l(c,{identifier:e.identifier,title:e.title,url:e.url});break;case"code":l(c,{language:e.lang&&e.lang.split(/\s/,1)[0]});break;case"inlineCode":c.children=e.value,c.inline=!0;break;case"link":l(c,{title:e.title||void 0,target:"function"==typeof n.linkTarget?n.linkTarget(e.url,e.children,e.title):n.linkTarget,href:n.transformLinkUri?n.transformLinkUri(e.url,e.children,e.title):e.url});break;case"image":l(c,{alt:e.alt||void 0,title:e.title||void 0,src:n.transformImageUri?n.transformImageUri(e.url,e.children,e.title,e.alt):e.url});break;case"linkReference":l(c,a(m,{href:n.transformLinkUri?n.transformLinkUri(m.href):m.href}));break;case"imageReference":l(c,{src:n.transformImageUri&&m.href?n.transformImageUri(m.href,e.children,m.title,e.alt):m.href,title:m.title||void 0,alt:e.alt||void 0});break;case"table":case"tableHead":case"tableBody":c.columnAlignment=e.align;break;case"tableRow":c.isHeader="tableHead"===o.node.type,c.columnAlignment=o.props.columnAlignment;break;case"tableCell":l(c,{isHeader:o.props.isHeader,align:o.props.columnAlignment[u]});break;case"virtualHtml":c.tag=e.tag;break;case"html":c.isBlock=e.position.start.line!==e.position.end.line,c.escapeHtml=n.escapeHtml,c.skipHtml=n.skipHtml;break;case"parsedHtml":var _;e.children&&(_=e.children.map((function(t,r){return s(t,n,{node:e,props:c},r)}))),c.escapeHtml=n.escapeHtml,c.skipHtml=n.skipHtml,c.element=function(e,t){var n=e.element;if(Array.isArray(n)){var a=r.Fragment||"div";return r.createElement(a,null,n)}if(n.props.children||t){var i=r.Children.toArray(n.props.children).concat(t);return r.cloneElement(n,null,i)}return r.cloneElement(n,null)}(e,_);break;default:l(c,a(e,{type:void 0,position:void 0,children:void 0}))}return!f&&e.value&&(c.value=e.value),c}function l(e,t){for(var n in t)void 0!==t[n]&&(e[n]=t[n])}e.exports=s},function(e,t,n){"use strict";var r=n(19);function a(e){var t=e.children;e.children=[{type:"tableHead",align:e.align,children:[t[0]],position:t[0].position}],t.length>1&&e.children.push({type:"tableBody",align:e.align,children:t.slice(1),position:{start:t[1].position.start,end:t[t.length-1].position.end}})}e.exports=function(e){return r(e,"table",a),e}},function(e,t,n){"use strict";e.exports=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t.children||[]).reduce((function(t,n){return"definition"===n.type&&(t[n.identifier]={href:n.url,title:n.title}),e(n,t)}),n)}},function(e,t,n){"use strict";var r=["http","https","mailto","tel"];e.exports=function(e){var t=(e||"").trim(),n=t.charAt(0);if("#"===n||"/"===n)return t;var a=t.indexOf(":");if(-1===a)return t;for(var i=r.length,o=-1;++o<i;){var s=r[o];if(a===s.length&&t.slice(0,s.length).toLowerCase()===s)return t}return-1!==(o=t.indexOf("?"))&&a>o||-1!==(o=t.indexOf("#"))&&a>o?t:"javascript:void(0)"}},function(e,t,n){"use strict";var r=n(8),a=n(1),i=parseInt((a.version||"16").slice(0,2),10)>=16,o=a.createElement;function s(e,t){return o(e,u(t),t.children)}function u(e){return e["data-sourcepos"]?{"data-sourcepos":e["data-sourcepos"]}:{}}e.exports={break:"br",paragraph:"p",emphasis:"em",strong:"strong",thematicBreak:"hr",blockquote:"blockquote",delete:"del",link:"a",image:"img",linkReference:"a",imageReference:"img",table:s.bind(null,"table"),tableHead:s.bind(null,"thead"),tableBody:s.bind(null,"tbody"),tableRow:s.bind(null,"tr"),tableCell:function(e){var t=e.align?{textAlign:e.align}:void 0,n=u(e);return o(e.isHeader?"th":"td",t?r({style:t},n):n,e.children)},root:function(e){var t=!e.className,n=t&&a.Fragment||"div";return o(n,t?null:e,e.children)},text:function(e){return i?e.children:o("span",null,e.children)},list:function(e){var t=u(e);null!==e.start&&1!==e.start&&void 0!==e.start&&(t.start=e.start.toString());return o(e.ordered?"ol":"ul",t,e.children)},listItem:function(e){var t=null;if(null!==e.checked&&void 0!==e.checked){var n=e.checked;t=o("input",{type:"checkbox",checked:n,readOnly:!0})}return o("li",u(e),t,e.children)},definition:function(){return null},heading:function(e){return o("h".concat(e.level),u(e),e.children)},inlineCode:function(e){return o("code",u(e),e.children)},code:function(e){var t=e.language&&"language-".concat(e.language),n=o("code",t?{className:t}:null,e.value);return o("pre",u(e),n)},html:function(e){if(e.skipHtml)return null;var t=e.isBlock?"div":"span";if(e.escapeHtml){var n=a.Fragment||t;return o(n,null,e.value)}var r={dangerouslySetInnerHTML:{__html:e.value}};return o(t,r)},virtualHtml:function(e){return o(e.tag,u(e),e.children)},parsedHtml:function(e){return e["data-sourcepos"]?a.cloneElement(e.element,{"data-sourcepos":e["data-sourcepos"]}):e.element}}},function(e,t,n){"use strict";t.HtmlParser="undefined"==typeof Symbol?"__RMD_HTML_PARSER__":Symbol("__RMD_HTML_PARSER__")},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),a=n(34),i=n(363);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));function s(e,t,n,r,a,i,o,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var u=!1,l=null,d=!1,c=null,f={onError:function(e){u=!0,l=e}};function m(e,t,n,r,a,i,o,d,c){u=!1,l=null,s.apply(f,arguments)}var _=null,p=null,h=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=h(n),function(e,t,n,r,a,i,s,f,_){if(m.apply(this,arguments),u){if(!u)throw Error(o(198));var p=l;u=!1,l=null,d||(d=!0,c=p)}}(r,t,void 0,e),e.currentTarget=null}var g=null,M={};function v(){if(g)for(var e in M){var t=M[e],n=g.indexOf(e);if(!(-1<n))throw Error(o(96,e));if(!L[n]){if(!t.extractEvents)throw Error(o(97,e));for(var r in L[n]=t,n=t.eventTypes){var a=void 0,i=n[r],s=t,u=r;if(k.hasOwnProperty(u))throw Error(o(99,u));k[u]=i;var l=i.phasedRegistrationNames;if(l){for(a in l)l.hasOwnProperty(a)&&b(l[a],s,u);a=!0}else i.registrationName?(b(i.registrationName,s,u),a=!0):a=!1;if(!a)throw Error(o(98,r,e))}}}}function b(e,t,n){if(w[e])throw Error(o(100,e));w[e]=t,Y[e]=t.eventTypes[n].dependencies}var L=[],k={},w={},Y={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!M.hasOwnProperty(t)||M[t]!==r){if(M[t])throw Error(o(102,t));M[t]=r,n=!0}}n&&v()}var D=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),S=null,x=null,j=null;function O(e){if(e=p(e)){if("function"!=typeof S)throw Error(o(280));var t=e.stateNode;t&&(t=_(t),S(e.stateNode,e.type,t))}}function E(e){x?j?j.push(e):j=[e]:x=e}function P(){if(x){var e=x,t=j;if(j=x=null,O(e),t)for(e=0;e<t.length;e++)O(t[e])}}function H(e,t){return e(t)}function A(e,t,n,r,a){return e(t,n,r,a)}function C(){}var N=H,F=!1,W=!1;function I(){null===x&&null===j||(C(),P())}function z(e,t,n){if(W)return e(t,n);W=!0;try{return N(e,t,n)}finally{W=!1,I()}}var R=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,U=Object.prototype.hasOwnProperty,B={},J={};function $(e,t,n,r,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var V={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){V[e]=new $(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];V[t]=new $(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){V[e]=new $(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){V[e]=new $(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){V[e]=new $(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){V[e]=new $(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){V[e]=new $(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){V[e]=new $(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){V[e]=new $(e,5,!1,e.toLowerCase(),null,!1)}));var q=/[\-:]([a-z])/g;function G(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){V[e]=new $(e,1,!1,e.toLowerCase(),null,!1)})),V.xlinkHref=new $("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){V[e]=new $(e,1,!1,e.toLowerCase(),null,!0)}));var K=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Q(e,t,n,r){var a=V.hasOwnProperty(t)?V[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!U.call(J,e)||!U.call(B,e)&&(R.test(e)?J[e]=!0:(B[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}K.hasOwnProperty("ReactCurrentDispatcher")||(K.ReactCurrentDispatcher={current:null}),K.hasOwnProperty("ReactCurrentBatchConfig")||(K.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,X="function"==typeof Symbol&&Symbol.for,ee=X?Symbol.for("react.element"):60103,te=X?Symbol.for("react.portal"):60106,ne=X?Symbol.for("react.fragment"):60107,re=X?Symbol.for("react.strict_mode"):60108,ae=X?Symbol.for("react.profiler"):60114,ie=X?Symbol.for("react.provider"):60109,oe=X?Symbol.for("react.context"):60110,se=X?Symbol.for("react.concurrent_mode"):60111,ue=X?Symbol.for("react.forward_ref"):60112,le=X?Symbol.for("react.suspense"):60113,de=X?Symbol.for("react.suspense_list"):60120,ce=X?Symbol.for("react.memo"):60115,fe=X?Symbol.for("react.lazy"):60116,me=X?Symbol.for("react.block"):60121,_e="function"==typeof Symbol&&Symbol.iterator;function pe(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=_e&&e[_e]||e["@@iterator"])?e:null}function he(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ae:return"Profiler";case re:return"StrictMode";case le:return"Suspense";case de:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case oe:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case ce:return he(e.type);case me:return he(e.render);case fe:if(e=1===e._status?e._result:null)return he(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,i=he(e.type);n=null,r&&(n=he(r.type)),r=i,i="",a?i=" (at "+a.fileName.replace(Z,"")+":"+a.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Me(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ve(e){e._valueTracker||(e._valueTracker=function(e){var t=Me(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Me(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Le(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function we(e,t){null!=(t=t.checked)&&Q(e,"checked",t,!1)}function Ye(e,t){we(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?De(e,t.type,n):t.hasOwnProperty("defaultValue")&&De(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function De(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Se(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function xe(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Ee(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Pe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var He="http://www.w3.org/1999/xhtml",Ae="http://www.w3.org/2000/svg";function Ce(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ne(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ce(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Fe,We=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ae||"innerHTML"in e)e.innerHTML=t;else{for((Fe=Fe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Fe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ie(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function ze(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Re={animationend:ze("Animation","AnimationEnd"),animationiteration:ze("Animation","AnimationIteration"),animationstart:ze("Animation","AnimationStart"),transitionend:ze("Transition","TransitionEnd")},Ue={},Be={};function Je(e){if(Ue[e])return Ue[e];if(!Re[e])return e;var t,n=Re[e];for(t in n)if(n.hasOwnProperty(t)&&t in Be)return Ue[e]=n[t];return e}D&&(Be=document.createElement("div").style,"AnimationEvent"in window||(delete Re.animationend.animation,delete Re.animationiteration.animation,delete Re.animationstart.animation),"TransitionEvent"in window||delete Re.transitionend.transition);var $e=Je("animationend"),Ve=Je("animationiteration"),qe=Je("animationstart"),Ge=Je("transitionend"),Ke="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Qe.get(e);return void 0===t&&(t=new Map,Qe.set(e,t)),t}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Xe(e)!==e)throw Error(o(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return tt(a),e;if(i===r)return tt(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var s=!1,u=a.child;u;){if(u===n){s=!0,n=a,r=i;break}if(u===r){s=!0,r=a,n=i;break}u=u.sibling}if(!s){for(u=i.child;u;){if(u===n){s=!0,n=i,r=a;break}if(u===r){s=!0,r=i,n=a;break}u=u.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(o(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function at(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function ot(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function st(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(at(e,ot),it)throw Error(o(95));if(d)throw e=c,d=!1,c=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!D)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var dt=[];function ct(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>dt.length&&dt.push(e)}function ft(e,t,n,r){if(dt.length){var a=dt.pop();return a.topLevelType=e,a.eventSystemFlags=r,a.nativeEvent=t,a.targetInst=n,a}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function mt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Dn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,o=e.eventSystemFlags;0===n&&(o|=64);for(var s=null,u=0;u<L.length;u++){var l=L[u];l&&(l=l.extractEvents(r,t,i,a,o))&&(s=rt(s,l))}st(s)}}function _t(e,t,n){if(!n.has(e)){switch(e){case"scroll":qt(t,"scroll",!0);break;case"focus":case"blur":qt(t,"focus",!0),qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ke.indexOf(e)&&Vt(e,t)}n.set(e,null)}}var pt,ht,yt,gt=!1,Mt=[],vt=null,bt=null,Lt=null,kt=new Map,wt=new Map,Yt=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Dt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function St(e,t,n,r,a){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:a,container:r}}function xt(e,t){switch(e){case"focus":case"blur":vt=null;break;case"dragenter":case"dragleave":bt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":wt.delete(t.pointerId)}}function jt(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e=St(t,n,r,a,i),null!==t&&(null!==(t=Sn(t))&&ht(t)),e):(e.eventSystemFlags|=r,e)}function Ot(e){var t=Dn(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Et(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Sn(t);return null!==n&&ht(n),e.blockedOn=t,!1}return!0}function Pt(e,t,n){Et(e)&&n.delete(t)}function Ht(){for(gt=!1;0<Mt.length;){var e=Mt[0];if(null!==e.blockedOn){null!==(e=Sn(e.blockedOn))&&pt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:Mt.shift()}null!==vt&&Et(vt)&&(vt=null),null!==bt&&Et(bt)&&(bt=null),null!==Lt&&Et(Lt)&&(Lt=null),kt.forEach(Pt),wt.forEach(Pt)}function At(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Ht)))}function Ct(e){function t(t){return At(t,e)}if(0<Mt.length){At(Mt[0],e);for(var n=1;n<Mt.length;n++){var r=Mt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==vt&&At(vt,e),null!==bt&&At(bt,e),null!==Lt&&At(Lt,e),kt.forEach(t),wt.forEach(t),n=0;n<Yt.length;n++)(r=Yt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Yt.length&&null===(n=Yt[0]).blockedOn;)Ot(n),null===n.blockedOn&&Yt.shift()}var Nt={},Ft=new Map,Wt=new Map,It=["abort","abort",$e,"animationEnd",Ve,"animationIteration",qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ge,"transitionEnd","waiting","waiting"];function zt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1],i="on"+(a[0].toUpperCase()+a.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Wt.set(r,t),Ft.set(r,i),Nt[a]=i}}zt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zt(It,2);for(var Rt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ut=0;Ut<Rt.length;Ut++)Wt.set(Rt[Ut],0);var Bt=i.unstable_UserBlockingPriority,Jt=i.unstable_runWithPriority,$t=!0;function Vt(e,t){qt(t,e,!1)}function qt(e,t,n){var r=Wt.get(t);switch(void 0===r?2:r){case 0:r=Gt.bind(null,t,1,e);break;case 1:r=Kt.bind(null,t,1,e);break;default:r=Qt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Gt(e,t,n,r){F||C();var a=Qt,i=F;F=!0;try{A(a,e,t,n,r)}finally{(F=i)||I()}}function Kt(e,t,n,r){Jt(Bt,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){if($t)if(0<Mt.length&&-1<Tt.indexOf(e))e=St(null,e,t,n,r),Mt.push(e);else{var a=Zt(e,t,n,r);if(null===a)xt(e,r);else if(-1<Tt.indexOf(e))e=St(a,e,t,n,r),Mt.push(e);else if(!function(e,t,n,r,a){switch(t){case"focus":return vt=jt(vt,e,t,n,r,a),!0;case"dragenter":return bt=jt(bt,e,t,n,r,a),!0;case"mouseover":return Lt=jt(Lt,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return kt.set(i,jt(kt.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,wt.set(i,jt(wt.get(i)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r)){xt(e,r),e=ft(e,r,null,t);try{z(mt,e)}finally{ct(e)}}}}function Zt(e,t,n,r){if(null!==(n=Dn(n=ut(r)))){var a=Xe(n);if(null===a)n=null;else{var i=a.tag;if(13===i){if(null!==(n=et(a)))return n;n=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;n=null}else a!==n&&(n=null)}}e=ft(e,r,n,t);try{z(mt,e)}finally{ct(e)}return null}var Xt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Xt.hasOwnProperty(e)&&Xt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(Xt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Xt[t]=Xt[e]}))}));var rn=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function an(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var sn=He;function un(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=Y[t];for(var r=0;r<t.length;r++)_t(t[r],e,n)}function ln(){}function dn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function cn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=cn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cn(r)}}function mn(){for(var e=window,t=dn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dn((e=t.contentWindow).document)}return t}function _n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pn=null,hn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Mn="function"==typeof setTimeout?setTimeout:void 0,vn="function"==typeof clearTimeout?clearTimeout:void 0;function bn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Ln(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),wn="__reactInternalInstance$"+kn,Yn="__reactEventHandlers$"+kn,Tn="__reactContainere$"+kn;function Dn(e){var t=e[wn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[wn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Ln(e);null!==e;){if(n=e[wn])return n;e=Ln(e)}return t}n=(e=n).parentNode}return null}function Sn(e){return!(e=e[wn]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function jn(e){return e[Yn]||null}function On(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function En(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}function Pn(e,t,n){(t=En(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Hn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=On(t);for(t=n.length;0<t--;)Pn(n[t],"captured",e);for(t=0;t<n.length;t++)Pn(n[t],"bubbled",e)}}function An(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=En(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Cn(e){e&&e.dispatchConfig.registrationName&&An(e._targetInst,null,e)}function Nn(e){at(e,Hn)}var Fn=null,Wn=null,In=null;function zn(){if(In)return In;var e,t,n=Wn,r=n.length,a="value"in Fn?Fn.value:Fn.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return In=a.slice(e,1<t?1-t:void 0)}function Rn(){return!0}function Un(){return!1}function Bn(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Rn:Un,this.isPropagationStopped=Un,this}function Jn(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function $n(e){if(!(e instanceof this))throw Error(o(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Vn(e){e.eventPool=[],e.getPooled=Jn,e.release=$n}a(Bn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Rn)},persist:function(){this.isPersistent=Rn},isPersistent:Un,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Un,this._dispatchInstances=this._dispatchListeners=null}}),Bn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Bn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return a(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,Vn(n),n},Vn(Bn);var qn=Bn.extend({data:null}),Gn=Bn.extend({data:null}),Kn=[9,13,27,32],Qn=D&&"CompositionEvent"in window,Zn=null;D&&"documentMode"in document&&(Zn=document.documentMode);var Xn=D&&"TextEvent"in window&&!Zn,er=D&&(!Qn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ar(e,t){switch(e){case"keyup":return-1!==Kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var or=!1;var sr={eventTypes:nr,extractEvents:function(e,t,n,r){var a;if(Qn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else or?ar(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(or||i!==nr.compositionStart?i===nr.compositionEnd&&or&&(a=zn()):(Wn="value"in(Fn=r)?Fn.value:Fn.textContent,or=!0)),i=qn.getPooled(i,t,n,r),a?i.data=a:null!==(a=ir(n))&&(i.data=a),Nn(i),a=i):a=null,(e=Xn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(or)return"compositionend"===e||!Qn&&ar(e,t)?(e=zn(),In=Wn=Fn=null,or=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Gn.getPooled(nr.beforeInput,t,n,r)).data=e,Nn(t)):t=null,null===a?t:null===t?a:[a,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function lr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var dr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function cr(e,t,n){return(e=Bn.getPooled(dr.change,e,t,n)).type="change",E(n),Nn(e),e}var fr=null,mr=null;function _r(e){st(e)}function pr(e){if(be(xn(e)))return e}function hr(e,t){if("change"===e)return t}var yr=!1;function gr(){fr&&(fr.detachEvent("onpropertychange",Mr),mr=fr=null)}function Mr(e){if("value"===e.propertyName&&pr(mr))if(e=cr(mr,e,ut(e)),F)st(e);else{F=!0;try{H(_r,e)}finally{F=!1,I()}}}function vr(e,t,n){"focus"===e?(gr(),mr=n,(fr=t).attachEvent("onpropertychange",Mr)):"blur"===e&&gr()}function br(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return pr(mr)}function Lr(e,t){if("click"===e)return pr(t)}function kr(e,t){if("input"===e||"change"===e)return pr(t)}D&&(yr=lt("input")&&(!document.documentMode||9<document.documentMode));var wr={eventTypes:dr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var a=t?xn(t):window,i=a.nodeName&&a.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===a.type)var o=hr;else if(lr(a))if(yr)o=kr;else{o=br;var s=vr}else(i=a.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(o=Lr);if(o&&(o=o(e,t)))return cr(o,n,r);s&&s(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&De(a,"number",a.value)}},Yr=Bn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Dr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Sr(){return Dr}var xr=0,jr=0,Or=!1,Er=!1,Pr=Yr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Sr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=xr;return xr=e.screenX,Or?"mousemove"===e.type?e.screenX-t:0:(Or=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=jr;return jr=e.screenY,Er?"mousemove"===e.type?e.screenY-t:0:(Er=!0,0)}}),Hr=Pr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ar={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Cr={eventTypes:Ar,extractEvents:function(e,t,n,r,a){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&0==(32&a)&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o)?(o=t,null!==(t=(t=n.relatedTarget||n.toElement)?Dn(t):null)&&(t!==Xe(t)||5!==t.tag&&6!==t.tag)&&(t=null)):o=null;if(o===t)return null;if("mouseout"===e||"mouseover"===e)var s=Pr,u=Ar.mouseLeave,l=Ar.mouseEnter,d="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=Hr,u=Ar.pointerLeave,l=Ar.pointerEnter,d="pointer");if(e=null==o?i:xn(o),i=null==t?i:xn(t),(u=s.getPooled(u,o,n,r)).type=d+"leave",u.target=e,u.relatedTarget=i,(n=s.getPooled(l,t,n,r)).type=d+"enter",n.target=i,n.relatedTarget=e,d=t,(r=o)&&d)e:{for(l=d,o=0,e=s=r;e;e=On(e))o++;for(e=0,t=l;t;t=On(t))e++;for(;0<o-e;)s=On(s),o--;for(;0<e-o;)l=On(l),e--;for(;o--;){if(s===l||s===l.alternate)break e;s=On(s),l=On(l)}s=null}else s=null;for(l=s,s=[];r&&r!==l&&(null===(o=r.alternate)||o!==l);)s.push(r),r=On(r);for(r=[];d&&d!==l&&(null===(o=d.alternate)||o!==l);)r.push(d),d=On(d);for(d=0;d<s.length;d++)An(s[d],"bubbled",u);for(d=r.length;0<d--;)An(r[d],"captured",n);return 0==(64&a)?[u]:[u,n]}};var Nr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Fr=Object.prototype.hasOwnProperty;function Wr(e,t){if(Nr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Fr.call(t,n[r])||!Nr(e[n[r]],t[n[r]]))return!1;return!0}var Ir=D&&"documentMode"in document&&11>=document.documentMode,zr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Rr=null,Ur=null,Br=null,Jr=!1;function $r(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Jr||null==Rr||Rr!==dn(n)?null:("selectionStart"in(n=Rr)&&_n(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Br&&Wr(Br,n)?null:(Br=n,(e=Bn.getPooled(zr.select,Ur,e,t)).type="select",e.target=Rr,Nn(e),e))}var Vr={eventTypes:zr,extractEvents:function(e,t,n,r,a,i){if(!(i=!(a=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{a=Ze(a),i=Y.onSelect;for(var o=0;o<i.length;o++)if(!a.has(i[o])){a=!1;break e}a=!0}i=!a}if(i)return null;switch(a=t?xn(t):window,e){case"focus":(lr(a)||"true"===a.contentEditable)&&(Rr=a,Ur=t,Br=null);break;case"blur":Br=Ur=Rr=null;break;case"mousedown":Jr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Jr=!1,$r(n,r);case"selectionchange":if(Ir)break;case"keydown":case"keyup":return $r(n,r)}return null}},qr=Bn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Gr=Bn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Kr=Yr.extend({relatedTarget:null});function Qr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ea=Yr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Qr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Xr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Sr,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ta=Pr.extend({dataTransfer:null}),na=Yr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Sr}),ra=Bn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),aa=Pr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ia={eventTypes:Nt,extractEvents:function(e,t,n,r){var a=Ft.get(e);if(!a)return null;switch(e){case"keypress":if(0===Qr(n))return null;case"keydown":case"keyup":e=ea;break;case"blur":case"focus":e=Kr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Pr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ta;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=na;break;case $e:case Ve:case qe:e=qr;break;case Ge:e=ra;break;case"scroll":e=Yr;break;case"wheel":e=aa;break;case"copy":case"cut":case"paste":e=Gr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Hr;break;default:e=Bn}return Nn(t=e.getPooled(a,t,n,r)),t}};if(g)throw Error(o(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),v(),_=jn,p=Sn,h=xn,T({SimpleEventPlugin:ia,EnterLeaveEventPlugin:Cr,ChangeEventPlugin:wr,SelectEventPlugin:Vr,BeforeInputEventPlugin:sr});var oa=[],sa=-1;function ua(e){0>sa||(e.current=oa[sa],oa[sa]=null,sa--)}function la(e,t){sa++,oa[sa]=e.current,e.current=t}var da={},ca={current:da},fa={current:!1},ma=da;function _a(e,t){var n=e.type.contextTypes;if(!n)return da;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function pa(e){return null!=(e=e.childContextTypes)}function ha(){ua(fa),ua(ca)}function ya(e,t,n){if(ca.current!==da)throw Error(o(168));la(ca,t),la(fa,n)}function ga(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(o(108,he(t)||"Unknown",i));return a({},n,{},r)}function Ma(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||da,ma=ca.current,la(ca,e),la(fa,fa.current),!0}function va(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=ga(e,t,ma),r.__reactInternalMemoizedMergedChildContext=e,ua(fa),ua(ca),la(ca,e)):ua(fa),la(fa,n)}var ba=i.unstable_runWithPriority,La=i.unstable_scheduleCallback,ka=i.unstable_cancelCallback,wa=i.unstable_requestPaint,Ya=i.unstable_now,Ta=i.unstable_getCurrentPriorityLevel,Da=i.unstable_ImmediatePriority,Sa=i.unstable_UserBlockingPriority,xa=i.unstable_NormalPriority,ja=i.unstable_LowPriority,Oa=i.unstable_IdlePriority,Ea={},Pa=i.unstable_shouldYield,Ha=void 0!==wa?wa:function(){},Aa=null,Ca=null,Na=!1,Fa=Ya(),Wa=1e4>Fa?Ya:function(){return Ya()-Fa};function Ia(){switch(Ta()){case Da:return 99;case Sa:return 98;case xa:return 97;case ja:return 96;case Oa:return 95;default:throw Error(o(332))}}function za(e){switch(e){case 99:return Da;case 98:return Sa;case 97:return xa;case 96:return ja;case 95:return Oa;default:throw Error(o(332))}}function Ra(e,t){return e=za(e),ba(e,t)}function Ua(e,t,n){return e=za(e),La(e,t,n)}function Ba(e){return null===Aa?(Aa=[e],Ca=La(Da,$a)):Aa.push(e),Ea}function Ja(){if(null!==Ca){var e=Ca;Ca=null,ka(e)}$a()}function $a(){if(!Na&&null!==Aa){Na=!0;var e=0;try{var t=Aa;Ra(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Aa=null}catch(t){throw null!==Aa&&(Aa=Aa.slice(e+1)),La(Da,Ja),t}finally{Na=!1}}}function Va(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function qa(e,t){if(e&&e.defaultProps)for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ga={current:null},Ka=null,Qa=null,Za=null;function Xa(){Za=Qa=Ka=null}function ei(e){var t=Ga.current;ua(Ga),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ni(e,t){Ka=e,Za=Qa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(jo=!0),e.firstContext=null)}function ri(e,t){if(Za!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Qa){if(null===Ka)throw Error(o(308));Qa=t,Ka.dependencies={expirationTime:0,firstContext:t,responders:null}}else Qa=Qa.next=t;return e._currentValue}var ai=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function oi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function si(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function li(e,t){var n=e.alternate;null!==n&&oi(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function di(e,t,n,r){var i=e.updateQueue;ai=!1;var o=i.baseQueue,s=i.shared.pending;if(null!==s){if(null!==o){var u=o.next;o.next=s.next,s.next=u}o=s,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=s))}if(null!==o){u=o.next;var l=i.baseState,d=0,c=null,f=null,m=null;if(null!==u)for(var _=u;;){if((s=_.expirationTime)<r){var p={expirationTime:_.expirationTime,suspenseConfig:_.suspenseConfig,tag:_.tag,payload:_.payload,callback:_.callback,next:null};null===m?(f=m=p,c=l):m=m.next=p,s>d&&(d=s)}else{null!==m&&(m=m.next={expirationTime:1073741823,suspenseConfig:_.suspenseConfig,tag:_.tag,payload:_.payload,callback:_.callback,next:null}),iu(s,_.suspenseConfig);e:{var h=e,y=_;switch(s=t,p=n,y.tag){case 1:if("function"==typeof(h=y.payload)){l=h.call(p,l,s);break e}l=h;break e;case 3:h.effectTag=-4097&h.effectTag|64;case 0:if(null==(s="function"==typeof(h=y.payload)?h.call(p,l,s):h))break e;l=a({},l,s);break e;case 2:ai=!0}}null!==_.callback&&(e.effectTag|=32,null===(s=i.effects)?i.effects=[_]:s.push(_))}if(null===(_=_.next)||_===u){if(null===(s=i.shared.pending))break;_=o.next=s.next,s.next=u,i.baseQueue=o=s,i.shared.pending=null}}null===m?c=l:m.next=f,i.baseState=c,i.baseQueue=m,ou(d),e.expirationTime=d,e.memoizedState=l}}function ci(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=a,a=n,"function"!=typeof r)throw Error(o(191,r));r.call(a)}}}var fi=K.ReactCurrentBatchConfig,mi=(new r.Component).refs;function _i(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var pi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=$s(),a=fi.suspense;(a=si(r=Vs(r,e,a),a)).payload=t,null!=n&&(a.callback=n),ui(e,a),qs(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=$s(),a=fi.suspense;(a=si(r=Vs(r,e,a),a)).tag=1,a.payload=t,null!=n&&(a.callback=n),ui(e,a),qs(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=$s(),r=fi.suspense;(r=si(n=Vs(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ui(e,r),qs(e,n)}};function hi(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!t.prototype||!t.prototype.isPureReactComponent||(!Wr(n,r)||!Wr(a,i))}function yi(e,t,n){var r=!1,a=da,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(a=pa(t)?ma:ca.current,i=(r=null!=(r=t.contextTypes))?_a(e,a):da),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function Mi(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=mi,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=ri(i):(i=pa(t)?ma:ca.current,a.context=_a(e,i)),di(e,n,a,r),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(_i(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&pi.enqueueReplaceState(a,a.state,null),di(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}var vi=Array.isArray;function bi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Li(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ki(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=xu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=bi(e,t,n),r.return=e,r):((r=Du(n.type,n.key,n.props,null,e.mode,r)).ref=bi(e,t,n),r.return=e,r)}function d(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ju(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function c(e,t,n,r,i){return null===t||7!==t.tag?((t=Su(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=xu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Du(t.type,t.key,t.props,null,e.mode,n)).ref=bi(e,null,t),n.return=e,n;case te:return(t=ju(t,e.mode,n)).return=e,t}if(vi(t)||pe(t))return(t=Su(t,e.mode,n,null)).return=e,t;Li(e,t)}return null}function m(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===a?n.type===ne?c(e,t,n.props.children,r,a):l(e,t,n,r):null;case te:return n.key===a?d(e,t,n,r):null}if(vi(n)||pe(n))return null!==a?null:c(e,t,n,r,null);Li(e,n)}return null}function _(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?c(t,e,r.props.children,a,r.key):l(t,e,r,a);case te:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(vi(r)||pe(r))return c(t,e=e.get(n)||null,r,a,null);Li(t,r)}return null}function p(a,o,s,u){for(var l=null,d=null,c=o,p=o=0,h=null;null!==c&&p<s.length;p++){c.index>p?(h=c,c=null):h=c.sibling;var y=m(a,c,s[p],u);if(null===y){null===c&&(c=h);break}e&&c&&null===y.alternate&&t(a,c),o=i(y,o,p),null===d?l=y:d.sibling=y,d=y,c=h}if(p===s.length)return n(a,c),l;if(null===c){for(;p<s.length;p++)null!==(c=f(a,s[p],u))&&(o=i(c,o,p),null===d?l=c:d.sibling=c,d=c);return l}for(c=r(a,c);p<s.length;p++)null!==(h=_(c,a,p,s[p],u))&&(e&&null!==h.alternate&&c.delete(null===h.key?p:h.key),o=i(h,o,p),null===d?l=h:d.sibling=h,d=h);return e&&c.forEach((function(e){return t(a,e)})),l}function h(a,s,u,l){var d=pe(u);if("function"!=typeof d)throw Error(o(150));if(null==(u=d.call(u)))throw Error(o(151));for(var c=d=null,p=s,h=s=0,y=null,g=u.next();null!==p&&!g.done;h++,g=u.next()){p.index>h?(y=p,p=null):y=p.sibling;var M=m(a,p,g.value,l);if(null===M){null===p&&(p=y);break}e&&p&&null===M.alternate&&t(a,p),s=i(M,s,h),null===c?d=M:c.sibling=M,c=M,p=y}if(g.done)return n(a,p),d;if(null===p){for(;!g.done;h++,g=u.next())null!==(g=f(a,g.value,l))&&(s=i(g,s,h),null===c?d=g:c.sibling=g,c=g);return d}for(p=r(a,p);!g.done;h++,g=u.next())null!==(g=_(p,a,h,g.value,l))&&(e&&null!==g.alternate&&p.delete(null===g.key?h:g.key),s=i(g,s,h),null===c?d=g:c.sibling=g,c=g);return e&&p.forEach((function(e){return t(a,e)})),d}return function(e,r,i,u){var l="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;l&&(i=i.props.children);var d="object"==typeof i&&null!==i;if(d)switch(i.$$typeof){case ee:e:{for(d=i.key,l=r;null!==l;){if(l.key===d){switch(l.tag){case 7:if(i.type===ne){n(e,l.sibling),(r=a(l,i.props.children)).return=e,e=r;break e}break;default:if(l.elementType===i.type){n(e,l.sibling),(r=a(l,i.props)).ref=bi(e,l,i),r.return=e,e=r;break e}}n(e,l);break}t(e,l),l=l.sibling}i.type===ne?((r=Su(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Du(i.type,i.key,i.props,null,e.mode,u)).ref=bi(e,r,i),u.return=e,e=u)}return s(e);case te:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ju(i,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i)).return=e,e=r):(n(e,r),(r=xu(i,e.mode,u)).return=e,e=r),s(e);if(vi(i))return p(e,r,i,u);if(pe(i))return h(e,r,i,u);if(d&&Li(e,i),void 0===i&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(o(152,e.displayName||e.name||"Component"))}return n(e,r)}}var wi=ki(!0),Yi=ki(!1),Ti={},Di={current:Ti},Si={current:Ti},xi={current:Ti};function ji(e){if(e===Ti)throw Error(o(174));return e}function Oi(e,t){switch(la(xi,t),la(Si,e),la(Di,Ti),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ne(null,"");break;default:t=Ne(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ua(Di),la(Di,t)}function Ei(){ua(Di),ua(Si),ua(xi)}function Pi(e){ji(xi.current);var t=ji(Di.current),n=Ne(t,e.type);t!==n&&(la(Si,e),la(Di,n))}function Hi(e){Si.current===e&&(ua(Di),ua(Si))}var Ai={current:0};function Ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ni(e,t){return{responder:e,props:t}}var Fi=K.ReactCurrentDispatcher,Wi=K.ReactCurrentBatchConfig,Ii=0,zi=null,Ri=null,Ui=null,Bi=!1;function Ji(){throw Error(o(321))}function $i(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Nr(e[n],t[n]))return!1;return!0}function Vi(e,t,n,r,a,i){if(Ii=i,zi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?yo:go,e=n(r,a),t.expirationTime===Ii){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(o(301));i+=1,Ui=Ri=null,t.updateQueue=null,Fi.current=Mo,e=n(r,a)}while(t.expirationTime===Ii)}if(Fi.current=ho,t=null!==Ri&&null!==Ri.next,Ii=0,Ui=Ri=zi=null,Bi=!1,t)throw Error(o(300));return e}function qi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ui?zi.memoizedState=Ui=e:Ui=Ui.next=e,Ui}function Gi(){if(null===Ri){var e=zi.alternate;e=null!==e?e.memoizedState:null}else e=Ri.next;var t=null===Ui?zi.memoizedState:Ui.next;if(null!==t)Ui=t,Ri=e;else{if(null===e)throw Error(o(310));e={memoizedState:(Ri=e).memoizedState,baseState:Ri.baseState,baseQueue:Ri.baseQueue,queue:Ri.queue,next:null},null===Ui?zi.memoizedState=Ui=e:Ui=Ui.next=e}return Ui}function Ki(e,t){return"function"==typeof t?t(e):t}function Qi(e){var t=Gi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=Ri,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var s=a.next;a.next=i.next,i.next=s}r.baseQueue=a=i,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=s=i=null,l=a;do{var d=l.expirationTime;if(d<Ii){var c={expirationTime:l.expirationTime,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(s=u=c,i=r):u=u.next=c,d>zi.expirationTime&&(zi.expirationTime=d,ou(d))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),iu(d,l.suspenseConfig),r=l.eagerReducer===e?l.eagerState:e(r,l.action);l=l.next}while(null!==l&&l!==a);null===u?i=r:u.next=s,Nr(r,t.memoizedState)||(jo=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zi(e){var t=Gi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var s=a=a.next;do{i=e(i,s.action),s=s.next}while(s!==a);Nr(i,t.memoizedState)||(jo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Xi(e){var t=qi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ki,lastRenderedState:e}).dispatch=po.bind(null,zi,e),[t.memoizedState,e]}function eo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=zi.updateQueue)?(t={lastEffect:null},zi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function to(){return Gi().memoizedState}function no(e,t,n,r){var a=qi();zi.effectTag|=e,a.memoizedState=eo(1|t,n,void 0,void 0===r?null:r)}function ro(e,t,n,r){var a=Gi();r=void 0===r?null:r;var i=void 0;if(null!==Ri){var o=Ri.memoizedState;if(i=o.destroy,null!==r&&$i(r,o.deps))return void eo(t,n,i,r)}zi.effectTag|=e,a.memoizedState=eo(1|t,n,i,r)}function ao(e,t){return no(516,4,e,t)}function io(e,t){return ro(516,4,e,t)}function oo(e,t){return ro(4,2,e,t)}function so(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function uo(e,t,n){return n=null!=n?n.concat([e]):null,ro(4,2,so.bind(null,t,e),n)}function lo(){}function co(e,t){return qi().memoizedState=[e,void 0===t?null:t],e}function fo(e,t){var n=Gi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function mo(e,t){var n=Gi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function _o(e,t,n){var r=Ia();Ra(98>r?98:r,(function(){e(!0)})),Ra(97<r?97:r,(function(){var r=Wi.suspense;Wi.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wi.suspense=r}}))}function po(e,t,n){var r=$s(),a=fi.suspense;a={expirationTime:r=Vs(r,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===zi||null!==i&&i===zi)Bi=!0,a.expirationTime=Ii,zi.expirationTime=Ii;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var o=t.lastRenderedState,s=i(o,n);if(a.eagerReducer=i,a.eagerState=s,Nr(s,o))return}catch(e){}qs(e,r)}}var ho={readContext:ri,useCallback:Ji,useContext:Ji,useEffect:Ji,useImperativeHandle:Ji,useLayoutEffect:Ji,useMemo:Ji,useReducer:Ji,useRef:Ji,useState:Ji,useDebugValue:Ji,useResponder:Ji,useDeferredValue:Ji,useTransition:Ji},yo={readContext:ri,useCallback:co,useContext:ri,useEffect:ao,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,no(4,2,so.bind(null,t,e),n)},useLayoutEffect:function(e,t){return no(4,2,e,t)},useMemo:function(e,t){var n=qi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=qi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=po.bind(null,zi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},qi().memoizedState=e},useState:Xi,useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Xi(e),r=n[0],a=n[1];return ao((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xi(!1),n=t[0];return t=t[1],[co(_o.bind(null,t,e),[t,e]),n]}},go={readContext:ri,useCallback:fo,useContext:ri,useEffect:io,useImperativeHandle:uo,useLayoutEffect:oo,useMemo:mo,useReducer:Qi,useRef:to,useState:function(){return Qi(Ki)},useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Qi(Ki),r=n[0],a=n[1];return io((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Qi(Ki),n=t[0];return t=t[1],[fo(_o.bind(null,t,e),[t,e]),n]}},Mo={readContext:ri,useCallback:fo,useContext:ri,useEffect:io,useImperativeHandle:uo,useLayoutEffect:oo,useMemo:mo,useReducer:Zi,useRef:to,useState:function(){return Zi(Ki)},useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Zi(Ki),r=n[0],a=n[1];return io((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Ki),n=t[0];return t=t[1],[fo(_o.bind(null,t,e),[t,e]),n]}},vo=null,bo=null,Lo=!1;function ko(e,t){var n=wu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function wo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Yo(e){if(Lo){var t=bo;if(t){var n=t;if(!wo(e,t)){if(!(t=bn(n.nextSibling))||!wo(e,t))return e.effectTag=-1025&e.effectTag|2,Lo=!1,void(vo=e);ko(vo,n)}vo=e,bo=bn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Lo=!1,vo=e}}function To(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;vo=e}function Do(e){if(e!==vo)return!1;if(!Lo)return To(e),Lo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=bo;t;)ko(e,t),t=bn(t.nextSibling);if(To(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){bo=bn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}bo=null}}else bo=vo?bn(e.stateNode.nextSibling):null;return!0}function So(){bo=vo=null,Lo=!1}var xo=K.ReactCurrentOwner,jo=!1;function Oo(e,t,n,r){t.child=null===e?Yi(t,null,n,r):wi(t,e.child,n,r)}function Eo(e,t,n,r,a){n=n.render;var i=t.ref;return ni(t,a),r=Vi(e,t,n,r,i,a),null===e||jo?(t.effectTag|=1,Oo(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),qo(e,t,a))}function Po(e,t,n,r,a,i){if(null===e){var o=n.type;return"function"!=typeof o||Yu(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Du(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ho(e,t,o,r,a,i))}return o=e.child,a<i&&(a=o.memoizedProps,(n=null!==(n=n.compare)?n:Wr)(a,r)&&e.ref===t.ref)?qo(e,t,i):(t.effectTag|=1,(e=Tu(o,r)).ref=t.ref,e.return=t,t.child=e)}function Ho(e,t,n,r,a,i){return null!==e&&Wr(e.memoizedProps,r)&&e.ref===t.ref&&(jo=!1,a<i)?(t.expirationTime=e.expirationTime,qo(e,t,i)):Co(e,t,n,r,i)}function Ao(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Co(e,t,n,r,a){var i=pa(n)?ma:ca.current;return i=_a(t,i),ni(t,a),n=Vi(e,t,n,r,i,a),null===e||jo?(t.effectTag|=1,Oo(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),qo(e,t,a))}function No(e,t,n,r,a){if(pa(n)){var i=!0;Ma(t)}else i=!1;if(ni(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yi(t,n,r),Mi(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var u=o.context,l=n.contextType;"object"==typeof l&&null!==l?l=ri(l):l=_a(t,l=pa(n)?ma:ca.current);var d=n.getDerivedStateFromProps,c="function"==typeof d||"function"==typeof o.getSnapshotBeforeUpdate;c||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||u!==l)&&gi(t,o,r,l),ai=!1;var f=t.memoizedState;o.state=f,di(t,r,o,a),u=t.memoizedState,s!==r||f!==u||fa.current||ai?("function"==typeof d&&(_i(t,n,d,r),u=t.memoizedState),(s=ai||hi(t,n,s,r,f,u,l))?(c||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=l,r=s):("function"==typeof o.componentDidMount&&(t.effectTag|=4),r=!1)}else o=t.stateNode,oi(e,t),s=t.memoizedProps,o.props=t.type===t.elementType?s:qa(t.type,s),u=o.context,"object"==typeof(l=n.contextType)&&null!==l?l=ri(l):l=_a(t,l=pa(n)?ma:ca.current),(c="function"==typeof(d=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||u!==l)&&gi(t,o,r,l),ai=!1,u=t.memoizedState,o.state=u,di(t,r,o,a),f=t.memoizedState,s!==r||u!==f||fa.current||ai?("function"==typeof d&&(_i(t,n,d,r),f=t.memoizedState),(d=ai||hi(t,n,s,r,u,f,l))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,f,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,f,l)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),o.props=r,o.state=f,o.context=l,r=d):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Fo(e,t,n,r,i,a)}function Fo(e,t,n,r,a,i){Ao(e,t);var o=0!=(64&t.effectTag);if(!r&&!o)return a&&va(t,n,!1),qo(e,t,i);r=t.stateNode,xo.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&o?(t.child=wi(t,e.child,null,i),t.child=wi(t,null,s,i)):Oo(e,t,s,i),t.memoizedState=r.state,a&&va(t,n,!0),t.child}function Wo(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),Oi(e,t.containerInfo)}var Io,zo,Ro,Uo={dehydrated:null,retryTime:0};function Bo(e,t,n){var r,a=t.mode,i=t.pendingProps,o=Ai.current,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&o)&&(null===e||null!==e.memoizedState)),r?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),la(Ai,1&o),null===e){if(void 0!==i.fallback&&Yo(t),s){if(s=i.fallback,(i=Su(null,a,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Su(s,a,n,null)).return=t,i.sibling=n,t.memoizedState=Uo,t.child=i,n}return a=i.children,t.memoizedState=null,t.child=Yi(t,null,a,n)}if(null!==e.memoizedState){if(a=(e=e.child).sibling,s){if(i=i.fallback,(n=Tu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(a=Tu(a,i)).return=t,n.sibling=a,n.childExpirationTime=0,t.memoizedState=Uo,t.child=n,a}return n=wi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=i.fallback,(i=Su(null,a,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Su(s,a,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Uo,t.child=i,n}return t.memoizedState=null,t.child=wi(t,e,i.children,n)}function Jo(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ti(e.return,t)}function $o(e,t,n,r,a,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:a,lastEffect:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=a,o.lastEffect=i)}function Vo(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Oo(e,t,r.children,n),0!=(2&(r=Ai.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Jo(e,n);else if(19===e.tag)Jo(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(la(Ai,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ci(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),$o(t,!1,a,n,i,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ci(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}$o(t,!0,n,null,i,t.lastEffect);break;case"together":$o(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function qo(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ou(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Go(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ko(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return pa(t.type)&&ha(),null;case 3:return Ei(),ua(fa),ua(ca),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Do(t)||(t.effectTag|=4),null;case 5:Hi(t),n=ji(xi.current);var i=t.type;if(null!==e&&null!=t.stateNode)zo(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=ji(Di.current),Do(t)){r=t.stateNode,i=t.type;var s=t.memoizedProps;switch(r[wn]=t,r[Yn]=s,i){case"iframe":case"object":case"embed":Vt("load",r);break;case"video":case"audio":for(e=0;e<Ke.length;e++)Vt(Ke[e],r);break;case"source":Vt("error",r);break;case"img":case"image":case"link":Vt("error",r),Vt("load",r);break;case"form":Vt("reset",r),Vt("submit",r);break;case"details":Vt("toggle",r);break;case"input":ke(r,s),Vt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Vt("invalid",r),un(n,"onChange");break;case"textarea":Oe(r,s),Vt("invalid",r),un(n,"onChange")}for(var u in an(i,s),e=null,s)if(s.hasOwnProperty(u)){var l=s[u];"children"===u?"string"==typeof l?r.textContent!==l&&(e=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(e=["children",""+l]):w.hasOwnProperty(u)&&null!=l&&un(n,u)}switch(i){case"input":ve(r),Te(r,s,!0);break;case"textarea":ve(r),Pe(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===sn&&(e=Ce(i)),e===sn?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[wn]=t,e[Yn]=r,Io(e,t),t.stateNode=e,u=on(i,r),i){case"iframe":case"object":case"embed":Vt("load",e),l=r;break;case"video":case"audio":for(l=0;l<Ke.length;l++)Vt(Ke[l],e);l=r;break;case"source":Vt("error",e),l=r;break;case"img":case"image":case"link":Vt("error",e),Vt("load",e),l=r;break;case"form":Vt("reset",e),Vt("submit",e),l=r;break;case"details":Vt("toggle",e),l=r;break;case"input":ke(e,r),l=Le(e,r),Vt("invalid",e),un(n,"onChange");break;case"option":l=Se(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=a({},r,{value:void 0}),Vt("invalid",e),un(n,"onChange");break;case"textarea":Oe(e,r),l=je(e,r),Vt("invalid",e),un(n,"onChange");break;default:l=r}an(i,l);var d=l;for(s in d)if(d.hasOwnProperty(s)){var c=d[s];"style"===s?nn(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&We(e,c):"children"===s?"string"==typeof c?("textarea"!==i||""!==c)&&Ie(e,c):"number"==typeof c&&Ie(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(w.hasOwnProperty(s)?null!=c&&un(n,s):null!=c&&Q(e,s,c,u))}switch(i){case"input":ve(e),Te(e,r,!1);break;case"textarea":ve(e),Pe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?xe(e,!!r.multiple,n,!1):null!=r.defaultValue&&xe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=ln)}yn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ro(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=ji(xi.current),ji(Di.current),Do(t)?(n=t.stateNode,r=t.memoizedProps,n[wn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[wn]=t,t.stateNode=n)}return null;case 13:return ua(Ai),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Do(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ai.current)?Ds===vs&&(Ds=bs):(Ds!==vs&&Ds!==bs||(Ds=Ls),0!==Es&&null!==ws&&(Pu(ws,Ts),Hu(ws,Es)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ei(),null;case 10:return ei(t),null;case 17:return pa(t.type)&&ha(),null;case 19:if(ua(Ai),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(s=r.rendering)){if(i)Go(r,!1);else if(Ds!==vs||null!==e&&0!=(64&e.effectTag))for(s=t.child;null!==s;){if(null!==(e=Ci(s))){for(t.effectTag|=64,Go(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)s=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=s,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,s=e.dependencies,i.dependencies=null===s?null:{expirationTime:s.expirationTime,firstContext:s.firstContext,responders:s.responders}),r=r.sibling;return la(Ai,1&Ai.current|2),t.child}s=s.sibling}}else{if(!i)if(null!==(e=Ci(s))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Go(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wa()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Go(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Wa()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wa(),n.sibling=null,t=Ai.current,la(Ai,i?1&t|2:1&t),n):null}throw Error(o(156,t.tag))}function Qo(e){switch(e.tag){case 1:pa(e.type)&&ha();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ei(),ua(fa),ua(ca),0!=(64&(t=e.effectTag)))throw Error(o(285));return e.effectTag=-4097&t|64,e;case 5:return Hi(e),null;case 13:return ua(Ai),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ua(Ai),null;case 4:return Ei(),null;case 10:return ei(e),null;default:return null}}function Zo(e,t){return{value:e,source:t,stack:ye(t)}}Io=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},zo=function(e,t,n,r,i){var o=e.memoizedProps;if(o!==r){var s,u,l=t.stateNode;switch(ji(Di.current),e=null,n){case"input":o=Le(l,o),r=Le(l,r),e=[];break;case"option":o=Se(l,o),r=Se(l,r),e=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),e=[];break;case"textarea":o=je(l,o),r=je(l,r),e=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(l.onclick=ln)}for(s in an(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s)for(u in l=o[s])l.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(w.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in r){var d=r[s];if(l=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&d!==l&&(null!=d||null!=l))if("style"===s)if(l){for(u in l)!l.hasOwnProperty(u)||d&&d.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in d)d.hasOwnProperty(u)&&l[u]!==d[u]&&(n||(n={}),n[u]=d[u])}else n||(e||(e=[]),e.push(s,n)),n=d;else"dangerouslySetInnerHTML"===s?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(e=e||[]).push(s,d)):"children"===s?l===d||"string"!=typeof d&&"number"!=typeof d||(e=e||[]).push(s,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(w.hasOwnProperty(s)?(null!=d&&un(i,s),e||l===d||(e=[])):(e=e||[]).push(s,d))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Ro=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Xo="function"==typeof WeakSet?WeakSet:Set;function es(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&he(n.type),t=t.value,null!==e&&1===e.tag&&he(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ts(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gu(e,t)}else t.current=null}function ns(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qa(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(o(163))}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function as(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function is(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void as(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:qa(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&ci(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ci(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ct(n)))));case 19:case 17:case 20:case 21:return}throw Error(o(163))}function os(e,t,n){switch("function"==typeof Lu&&Lu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ra(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var a=t;try{n()}catch(e){gu(a,e)}}e=e.next}while(e!==r)}))}break;case 1:ts(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gu(e,t)}}(t,n);break;case 5:ts(t);break;case 4:ds(e,t,n)}}function ss(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ss(t)}function us(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:{for(var t=e.return;null!==t;){if(us(t)){var n=t;break e}t=t.return}throw Error(o(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.effectTag&&(Ie(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||us(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var a=t.tag,i=5===a||6===a;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=ln));else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var a=t.tag,i=5===a||6===a;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function ds(e,t,n){for(var r,a,i=t,s=!1;;){if(!s){s=i.return;e:for(;;){if(null===s)throw Error(o(160));switch(r=s.stateNode,s.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}s=s.return}s=!0}if(5===i.tag||6===i.tag){e:for(var u=e,l=i,d=n,c=l;;)if(os(u,c,d),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}a?(u=r,l=i.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,a=!0,i.child.return=i,i=i.child;continue}}else if(os(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(s=!1)}i.sibling.return=i.return,i=i.sibling}}function cs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rs(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Yn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&we(n,r),on(e,a),t=on(e,r),a=0;a<i.length;a+=2){var s=i[a],u=i[a+1];"style"===s?nn(n,u):"dangerouslySetInnerHTML"===s?We(n,u):"children"===s?Ie(n,u):Q(n,s,u,t)}switch(e){case"input":Ye(n,r);break;case"textarea":Ee(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?xe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?xe(n,!!r.multiple,r.defaultValue,!0):xe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Ct(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Hs=Wa()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,a=null!=(a=e.memoizedProps.style)&&a.hasOwnProperty("display")?a.display:null,i.style.display=tn("display",a));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fs(t);case 19:return void fs(t);case 17:return}throw Error(o(163))}function fs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xo),t.forEach((function(t){var r=vu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var ms="function"==typeof WeakMap?WeakMap:Map;function _s(e,t,n){(n=si(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Cs||(Cs=!0,Ns=r),es(e,t)},n}function ps(e,t,n){(n=si(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return es(e,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Fs?Fs=new Set([this]):Fs.add(this),es(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var hs,ys=Math.ceil,gs=K.ReactCurrentDispatcher,Ms=K.ReactCurrentOwner,vs=0,bs=3,Ls=4,ks=0,ws=null,Ys=null,Ts=0,Ds=vs,Ss=null,xs=1073741823,js=1073741823,Os=null,Es=0,Ps=!1,Hs=0,As=null,Cs=!1,Ns=null,Fs=null,Ws=!1,Is=null,zs=90,Rs=null,Us=0,Bs=null,Js=0;function $s(){return 0!=(48&ks)?1073741821-(Wa()/10|0):0!==Js?Js:Js=1073741821-(Wa()/10|0)}function Vs(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ia();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&ks))return Ts;if(null!==n)e=Va(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Va(e,150,100);break;case 97:case 96:e=Va(e,5e3,250);break;case 95:e=2;break;default:throw Error(o(326))}return null!==ws&&e===Ts&&--e,e}function qs(e,t){if(50<Us)throw Us=0,Bs=null,Error(o(185));if(null!==(e=Gs(e,t))){var n=Ia();1073741823===t?0!=(8&ks)&&0==(48&ks)?Xs(e):(Qs(e),0===ks&&Ja()):Qs(e),0==(4&ks)||98!==n&&99!==n||(null===Rs?Rs=new Map([[e,t]]):(void 0===(n=Rs.get(e))||n>t)&&Rs.set(e,t))}}function Gs(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return null!==a&&(ws===a&&(ou(t),Ds===Ls&&Pu(a,Ts)),Hu(a,t)),a}function Ks(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Eu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Qs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ba(Xs.bind(null,e));else{var t=Ks(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=$s();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var a=e.callbackPriority;if(e.callbackExpirationTime===t&&a>=r)return;n!==Ea&&ka(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ba(Xs.bind(null,e)):Ua(r,Zs.bind(null,e),{timeout:10*(1073741821-t)-Wa()}),e.callbackNode=t}}}function Zs(e,t){if(Js=0,t)return Au(e,t=$s()),Qs(e),null;var n=Ks(e);if(0!==n){if(t=e.callbackNode,0!=(48&ks))throw Error(o(327));if(pu(),e===ws&&n===Ts||nu(e,n),null!==Ys){var r=ks;ks|=16;for(var a=au();;)try{uu();break}catch(t){ru(e,t)}if(Xa(),ks=r,gs.current=a,1===Ds)throw t=Ss,nu(e,n),Pu(e,n),Qs(e),t;if(null===Ys)switch(a=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ds,ws=null,r){case vs:case 1:throw Error(o(345));case 2:Au(e,2<n?2:n);break;case bs:if(Pu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(a)),1073741823===xs&&10<(a=Hs+500-Wa())){if(Ps){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Ks(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=Mn(fu.bind(null,e),a);break}fu(e);break;case Ls:if(Pu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(a)),Ps&&(0===(a=e.lastPingedTime)||a>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(a=Ks(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==js?r=10*(1073741821-js)-Wa():1073741823===xs?r=0:(r=10*(1073741821-xs)-5e3,0>(r=(a=Wa())-r)&&(r=0),(n=10*(1073741821-n)-a)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ys(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=Mn(fu.bind(null,e),r);break}fu(e);break;case 5:if(1073741823!==xs&&null!==Os){i=xs;var s=Os;if(0>=(r=0|s.busyMinDurationMs)?r=0:(a=0|s.busyDelayMs,r=(i=Wa()-(10*(1073741821-i)-(0|s.timeoutMs||5e3)))<=a?0:a+r-i),10<r){Pu(e,n),e.timeoutHandle=Mn(fu.bind(null,e),r);break}}fu(e);break;default:throw Error(o(329))}if(Qs(e),e.callbackNode===t)return Zs.bind(null,e)}}return null}function Xs(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&ks))throw Error(o(327));if(pu(),e===ws&&t===Ts||nu(e,t),null!==Ys){var n=ks;ks|=16;for(var r=au();;)try{su();break}catch(t){ru(e,t)}if(Xa(),ks=n,gs.current=r,1===Ds)throw n=Ss,nu(e,t),Pu(e,t),Qs(e),n;if(null!==Ys)throw Error(o(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,ws=null,fu(e),Qs(e)}return null}function eu(e,t){var n=ks;ks|=1;try{return e(t)}finally{0===(ks=n)&&Ja()}}function tu(e,t){var n=ks;ks&=-2,ks|=8;try{return e(t)}finally{0===(ks=n)&&Ja()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,vn(n)),null!==Ys)for(n=Ys.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ha();break;case 3:Ei(),ua(fa),ua(ca);break;case 5:Hi(r);break;case 4:Ei();break;case 13:case 19:ua(Ai);break;case 10:ei(r)}n=n.return}ws=e,Ys=Tu(e.current,null),Ts=t,Ds=vs,Ss=null,js=xs=1073741823,Os=null,Es=0,Ps=!1}function ru(e,t){for(;;){try{if(Xa(),Fi.current=ho,Bi)for(var n=zi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Ii=0,Ui=Ri=zi=null,Bi=!1,null===Ys||null===Ys.return)return Ds=1,Ss=t,Ys=null;e:{var a=e,i=Ys.return,o=Ys,s=t;if(t=Ts,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&o.mode)){var l=o.alternate;l?(o.updateQueue=l.updateQueue,o.memoizedState=l.memoizedState,o.expirationTime=l.expirationTime):(o.updateQueue=null,o.memoizedState=null)}var d=0!=(1&Ai.current),c=i;do{var f;if(f=13===c.tag){var m=c.memoizedState;if(null!==m)f=null!==m.dehydrated;else{var _=c.memoizedProps;f=void 0!==_.fallback&&(!0!==_.unstable_avoidThisFallback||!d)}}if(f){var p=c.updateQueue;if(null===p){var h=new Set;h.add(u),c.updateQueue=h}else p.add(u);if(0==(2&c.mode)){if(c.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var y=si(1073741823,null);y.tag=2,ui(o,y)}o.expirationTime=1073741823;break e}s=void 0,o=t;var g=a.pingCache;if(null===g?(g=a.pingCache=new ms,s=new Set,g.set(u,s)):void 0===(s=g.get(u))&&(s=new Set,g.set(u,s)),!s.has(o)){s.add(o);var M=Mu.bind(null,a,u,o);u.then(M,M)}c.effectTag|=4096,c.expirationTime=t;break e}c=c.return}while(null!==c);s=Error((he(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(o))}5!==Ds&&(Ds=2),s=Zo(s,o),c=i;do{switch(c.tag){case 3:u=s,c.effectTag|=4096,c.expirationTime=t,li(c,_s(c,u,t));break e;case 1:u=s;var v=c.type,b=c.stateNode;if(0==(64&c.effectTag)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Fs||!Fs.has(b)))){c.effectTag|=4096,c.expirationTime=t,li(c,ps(c,u,t));break e}}c=c.return}while(null!==c)}Ys=du(Ys)}catch(e){t=e;continue}break}}function au(){var e=gs.current;return gs.current=ho,null===e?ho:e}function iu(e,t){e<xs&&2<e&&(xs=e),null!==t&&e<js&&2<e&&(js=e,Os=t)}function ou(e){e>Es&&(Es=e)}function su(){for(;null!==Ys;)Ys=lu(Ys)}function uu(){for(;null!==Ys&&!Pa();)Ys=lu(Ys)}function lu(e){var t=hs(e.alternate,e,Ts);return e.memoizedProps=e.pendingProps,null===t&&(t=du(e)),Ms.current=null,t}function du(e){Ys=e;do{var t=Ys.alternate;if(e=Ys.return,0==(2048&Ys.effectTag)){if(t=Ko(t,Ys,Ts),1===Ts||1!==Ys.childExpirationTime){for(var n=0,r=Ys.child;null!==r;){var a=r.expirationTime,i=r.childExpirationTime;a>n&&(n=a),i>n&&(n=i),r=r.sibling}Ys.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ys.firstEffect),null!==Ys.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ys.firstEffect),e.lastEffect=Ys.lastEffect),1<Ys.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ys:e.firstEffect=Ys,e.lastEffect=Ys))}else{if(null!==(t=Qo(Ys)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ys.sibling))return t;Ys=e}while(null!==Ys);return Ds===vs&&(Ds=5),null}function cu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fu(e){var t=Ia();return Ra(99,mu.bind(null,e,t)),null}function mu(e,t){do{pu()}while(null!==Is);if(0!=(48&ks))throw Error(o(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var a=cu(n);if(e.firstPendingTime=a,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===ws&&(Ys=ws=null,Ts=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){var i=ks;ks|=32,Ms.current=null,pn=$t;var s=mn();if(_n(s)){if("selectionStart"in s)var u={start:s.selectionStart,end:s.selectionEnd};else e:{var l=(u=(u=s.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(l&&0!==l.rangeCount){u=l.anchorNode;var d=l.anchorOffset,c=l.focusNode;l=l.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,m=-1,_=-1,p=0,h=0,y=s,g=null;t:for(;;){for(var M;y!==u||0!==d&&3!==y.nodeType||(m=f+d),y!==c||0!==l&&3!==y.nodeType||(_=f+l),3===y.nodeType&&(f+=y.nodeValue.length),null!==(M=y.firstChild);)g=y,y=M;for(;;){if(y===s)break t;if(g===u&&++p===d&&(m=f),g===c&&++h===l&&(_=f),null!==(M=y.nextSibling))break;g=(y=g).parentNode}y=M}u=-1===m||-1===_?null:{start:m,end:_}}else u=null}u=u||{start:0,end:0}}else u=null;hn={activeElementDetached:null,focusedElem:s,selectionRange:u},$t=!1,As=a;do{try{_u()}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);As=a;do{try{for(s=e,u=t;null!==As;){var v=As.effectTag;if(16&v&&Ie(As.stateNode,""),128&v){var b=As.alternate;if(null!==b){var L=b.ref;null!==L&&("function"==typeof L?L(null):L.current=null)}}switch(1038&v){case 2:ls(As),As.effectTag&=-3;break;case 6:ls(As),As.effectTag&=-3,cs(As.alternate,As);break;case 1024:As.effectTag&=-1025;break;case 1028:As.effectTag&=-1025,cs(As.alternate,As);break;case 4:cs(As.alternate,As);break;case 8:ds(s,d=As,u),ss(d)}As=As.nextEffect}}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);if(L=hn,b=mn(),v=L.focusedElem,u=L.selectionRange,b!==v&&v&&v.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(v.ownerDocument.documentElement,v)){null!==u&&_n(v)&&(b=u.start,void 0===(L=u.end)&&(L=b),"selectionStart"in v?(v.selectionStart=b,v.selectionEnd=Math.min(L,v.value.length)):(L=(b=v.ownerDocument||document)&&b.defaultView||window).getSelection&&(L=L.getSelection(),d=v.textContent.length,s=Math.min(u.start,d),u=void 0===u.end?s:Math.min(u.end,d),!L.extend&&s>u&&(d=u,u=s,s=d),d=fn(v,s),c=fn(v,u),d&&c&&(1!==L.rangeCount||L.anchorNode!==d.node||L.anchorOffset!==d.offset||L.focusNode!==c.node||L.focusOffset!==c.offset)&&((b=b.createRange()).setStart(d.node,d.offset),L.removeAllRanges(),s>u?(L.addRange(b),L.extend(c.node,c.offset)):(b.setEnd(c.node,c.offset),L.addRange(b))))),b=[];for(L=v;L=L.parentNode;)1===L.nodeType&&b.push({element:L,left:L.scrollLeft,top:L.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<b.length;v++)(L=b[v]).element.scrollLeft=L.left,L.element.scrollTop=L.top}$t=!!pn,hn=pn=null,e.current=n,As=a;do{try{for(v=e;null!==As;){var k=As.effectTag;if(36&k&&is(v,As.alternate,As),128&k){b=void 0;var w=As.ref;if(null!==w){var Y=As.stateNode;switch(As.tag){case 5:b=Y;break;default:b=Y}"function"==typeof w?w(b):w.current=b}}As=As.nextEffect}}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);As=null,Ha(),ks=i}else e.current=n;if(Ws)Ws=!1,Is=e,zs=t;else for(As=a;null!==As;)t=As.nextEffect,As.nextEffect=null,As=t;if(0===(t=e.firstPendingTime)&&(Fs=null),1073741823===t?e===Bs?Us++:(Us=0,Bs=e):Us=0,"function"==typeof bu&&bu(n.stateNode,r),Qs(e),Cs)throw Cs=!1,e=Ns,Ns=null,e;return 0!=(8&ks)||Ja(),null}function _u(){for(;null!==As;){var e=As.effectTag;0!=(256&e)&&ns(As.alternate,As),0==(512&e)||Ws||(Ws=!0,Ua(97,(function(){return pu(),null}))),As=As.nextEffect}}function pu(){if(90!==zs){var e=97<zs?97:zs;return zs=90,Ra(e,hu)}}function hu(){if(null===Is)return!1;var e=Is;if(Is=null,0!=(48&ks))throw Error(o(331));var t=ks;for(ks|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rs(5,n),as(5,n)}}catch(t){if(null===e)throw Error(o(330));gu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return ks=t,Ja(),!0}function yu(e,t,n){ui(e,t=_s(e,t=Zo(n,t),1073741823)),null!==(e=Gs(e,1073741823))&&Qs(e)}function gu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Fs||!Fs.has(r))){ui(n,e=ps(n,e=Zo(t,e),1073741823)),null!==(n=Gs(n,1073741823))&&Qs(n);break}}n=n.return}}function Mu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ws===e&&Ts===n?Ds===Ls||Ds===bs&&1073741823===xs&&Wa()-Hs<500?nu(e,Ts):Ps=!0:Eu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Qs(e)))}function vu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Vs(t=$s(),e,null)),null!==(e=Gs(e,t))&&Qs(e)}hs=function(e,t,n){var r=t.expirationTime;if(null!==e){var a=t.pendingProps;if(e.memoizedProps!==a||fa.current)jo=!0;else{if(r<n){switch(jo=!1,t.tag){case 3:Wo(t),So();break;case 5:if(Pi(t),4&t.mode&&1!==n&&a.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:pa(t.type)&&Ma(t);break;case 4:Oi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,a=t.type._context,la(Ga,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Bo(e,t,n):(la(Ai,1&Ai.current),null!==(t=qo(e,t,n))?t.sibling:null);la(Ai,1&Ai.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Vo(e,t,n);t.effectTag|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null),la(Ai,Ai.current),!r)return null}return qo(e,t,n)}jo=!1}}else jo=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,a=_a(t,ca.current),ni(t,n),a=Vi(null,t,r,e,a,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,pa(r)){var i=!0;Ma(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ii(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&_i(t,r,s,e),a.updater=pi,t.stateNode=a,a._reactInternalFiber=t,Mi(t,r,e,n),t=Fo(null,t,r,!0,i,n)}else t.tag=0,Oo(null,t,a,n),t=t.child;return t;case 16:e:{if(a=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(a),1!==a._status)throw a._result;switch(a=a._result,t.type=a,i=t.tag=function(e){if("function"==typeof e)return Yu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===ce)return 14}return 2}(a),e=qa(a,e),i){case 0:t=Co(null,t,a,e,n);break e;case 1:t=No(null,t,a,e,n);break e;case 11:t=Eo(null,t,a,e,n);break e;case 14:t=Po(null,t,a,qa(a.type,e),r,n);break e}throw Error(o(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Co(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 1:return r=t.type,a=t.pendingProps,No(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 3:if(Wo(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,oi(e,t),di(t,r,null,n),(r=t.memoizedState.element)===a)So(),t=qo(e,t,n);else{if((a=t.stateNode.hydrate)&&(bo=bn(t.stateNode.containerInfo.firstChild),vo=t,a=Lo=!0),a)for(n=Yi(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Oo(e,t,r,n),So();t=t.child}return t;case 5:return Pi(t),null===e&&Yo(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,s=a.children,gn(r,a)?s=null:null!==i&&gn(r,i)&&(t.effectTag|=16),Ao(e,t),4&t.mode&&1!==n&&a.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Oo(e,t,s,n),t=t.child),t;case 6:return null===e&&Yo(t),null;case 13:return Bo(e,t,n);case 4:return Oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wi(t,null,r,n):Oo(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Eo(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 7:return Oo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Oo(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,s=t.memoizedProps,i=a.value;var u=t.type._context;if(la(Ga,u._currentValue),u._currentValue=i,null!==s)if(u=s.value,0===(i=Nr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(s.children===a.children&&!fa.current){t=qo(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var d=l.firstContext;null!==d;){if(d.context===r&&0!=(d.observedBits&i)){1===u.tag&&((d=si(n,null)).tag=2,ui(u,d)),u.expirationTime<n&&(u.expirationTime=n),null!==(d=u.alternate)&&d.expirationTime<n&&(d.expirationTime=n),ti(u.return,n),l.expirationTime<n&&(l.expirationTime=n);break}d=d.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Oo(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(a=ri(a,i.unstable_observedBits)),t.effectTag|=1,Oo(e,t,r,n),t.child;case 14:return i=qa(a=t.type,t.pendingProps),Po(e,t,a,i=qa(a.type,i),r,n);case 15:return Ho(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:qa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,pa(r)?(e=!0,Ma(t)):e=!1,ni(t,n),yi(t,r,a),Mi(t,r,a,n),Fo(null,t,r,!0,e,n);case 19:return Vo(e,t,n)}throw Error(o(156,t.tag))};var bu=null,Lu=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function wu(e,t,n,r){return new ku(e,t,n,r)}function Yu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=wu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Du(e,t,n,r,a,i){var s=2;if(r=e,"function"==typeof e)Yu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case ne:return Su(n.children,a,i,t);case se:s=8,a|=7;break;case re:s=8,a|=1;break;case ae:return(e=wu(12,n,t,8|a)).elementType=ae,e.type=ae,e.expirationTime=i,e;case le:return(e=wu(13,n,t,a)).type=le,e.elementType=le,e.expirationTime=i,e;case de:return(e=wu(19,n,t,a)).elementType=de,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:s=10;break e;case oe:s=9;break e;case ue:s=11;break e;case ce:s=14;break e;case fe:s=16,r=null;break e;case me:s=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=wu(s,n,t,a)).elementType=e,t.type=r,t.expirationTime=i,t}function Su(e,t,n,r){return(e=wu(7,e,r,t)).expirationTime=n,e}function xu(e,t,n){return(e=wu(6,e,null,t)).expirationTime=n,e}function ju(e,t,n){return(t=wu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ou(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Eu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Pu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Hu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Au(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Cu(e,t,n,r){var a=t.current,i=$s(),s=fi.suspense;i=Vs(i,a,s);e:if(n){t:{if(Xe(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(o(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(pa(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(o(171))}if(1===n.tag){var l=n.type;if(pa(l)){n=ga(n,l,u);break e}}n=u}else n=da;return null===t.context?t.context=n:t.pendingContext=n,(t=si(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(a,t),qs(a,i),i}function Nu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Wu(e,t){Fu(e,t),(e=e.alternate)&&Fu(e,t)}function Iu(e,t,n){var r=new Ou(e,t,n=null!=n&&!0===n.hydrate),a=wu(3,null,null,2===t?7:1===t?3:0);r.current=a,a.stateNode=r,ii(a),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Tt.forEach((function(e){_t(e,t,n)})),Dt.forEach((function(e){_t(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ru(e,t,n,r,a){var i=n._reactRootContainer;if(i){var o=i._internalRoot;if("function"==typeof a){var s=a;a=function(){var e=Nu(o);s.call(e)}}Cu(t,o,e,a)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Iu(e,0,t?{hydrate:!0}:void 0)}(n,r),o=i._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Nu(o);u.call(e)}}tu((function(){Cu(t,o,e,a)}))}return Nu(o)}function Uu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!zu(t))throw Error(o(200));return Uu(e,t,null,n)}Iu.prototype.render=function(e){Cu(e,this._internalRoot,null,null)},Iu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Cu(null,e,null,(function(){t[Tn]=null}))},pt=function(e){if(13===e.tag){var t=Va($s(),150,100);qs(e,t),Wu(e,t)}},ht=function(e){13===e.tag&&(qs(e,3),Wu(e,3))},yt=function(e){if(13===e.tag){var t=$s();qs(e,t=Vs(t,e,null)),Wu(e,t)}},S=function(e,t,n){switch(t){case"input":if(Ye(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=jn(r);if(!a)throw Error(o(90));be(r),Ye(r,a)}}}break;case"textarea":Ee(e,n);break;case"select":null!=(t=n.value)&&xe(e,!!n.multiple,t,!1)}},H=eu,A=function(e,t,n,r,a){var i=ks;ks|=4;try{return Ra(98,e.bind(null,t,n,r,a))}finally{0===(ks=i)&&Ja()}},C=function(){0==(49&ks)&&(function(){if(null!==Rs){var e=Rs;Rs=null,e.forEach((function(e,t){Au(t,e),Qs(t)})),Ja()}}(),pu())},N=function(e,t){var n=ks;ks|=2;try{return e(t)}finally{0===(ks=n)&&Ja()}};var Ju,$u,Vu={Events:[Sn,xn,jn,T,k,Nn,function(e){at(e,Cn)},E,P,Qt,st,pu,{current:!1}]};$u=(Ju={findFiberByHostInstance:Dn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);bu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Lu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(a({},Ju,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:K.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return $u?$u(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Vu,t.createPortal=Bu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&ks))throw Error(o(187));var n=ks;ks|=1;try{return Ra(99,e.bind(null,t))}finally{ks=n,Ja()}},t.hydrate=function(e,t,n){if(!zu(t))throw Error(o(200));return Ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!zu(t))throw Error(o(200));return Ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!zu(e))throw Error(o(40));return!!e._reactRootContainer&&(tu((function(){Ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Bu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!zu(n))throw Error(o(200));if(null==e||void 0===e._reactInternalFiber)throw Error(o(38));return Ru(e,t,n,!1,r)},t.version="16.14.0"},function(e,t,n){"use strict";e.exports=n(364)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,a,i,o,s;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}},c=Date.now();t.unstable_now=function(){return Date.now()-c},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(d,0))},a=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},o=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,m=window.Date,_=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var y=m.now();t.unstable_now=function(){return m.now()-y}}var g=!1,M=null,v=-1,b=5,L=0;o=function(){return t.unstable_now()>=L},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,w=k.port2;k.port1.onmessage=function(){if(null!==M){var e=t.unstable_now();L=e+b;try{M(!0,e)?w.postMessage(null):(g=!1,M=null)}catch(e){throw w.postMessage(null),e}}else g=!1},r=function(e){M=e,g||(g=!0,w.postMessage(null))},a=function(e,n){v=_((function(){e(t.unstable_now())}),n)},i=function(){p(v),v=-1}}function Y(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<S(a,t)))break e;e[r]=t,e[n]=a,n=r}}function T(e){return void 0===(e=e[0])?null:e}function D(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var i=2*(r+1)-1,o=e[i],s=i+1,u=e[s];if(void 0!==o&&0>S(o,n))void 0!==u&&0>S(u,o)?(e[r]=u,e[s]=n,r=s):(e[r]=o,e[i]=n,r=i);else{if(!(void 0!==u&&0>S(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var x=[],j=[],O=1,E=null,P=3,H=!1,A=!1,C=!1;function N(e){for(var t=T(j);null!==t;){if(null===t.callback)D(j);else{if(!(t.startTime<=e))break;D(j),t.sortIndex=t.expirationTime,Y(x,t)}t=T(j)}}function F(e){if(C=!1,N(e),!A)if(null!==T(x))A=!0,r(W);else{var t=T(j);null!==t&&a(F,t.startTime-e)}}function W(e,n){A=!1,C&&(C=!1,i()),H=!0;var r=P;try{for(N(n),E=T(x);null!==E&&(!(E.expirationTime>n)||e&&!o());){var s=E.callback;if(null!==s){E.callback=null,P=E.priorityLevel;var u=s(E.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?E.callback=u:E===T(x)&&D(x),N(n)}else D(x);E=T(x)}if(null!==E)var l=!0;else{var d=T(j);null!==d&&a(F,d.startTime-n),l=!1}return l}finally{E=null,P=r,H=!1}}function I(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var z=s;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||H||(A=!0,r(W))},t.unstable_getCurrentPriorityLevel=function(){return P},t.unstable_getFirstCallbackNode=function(){return T(x)},t.unstable_next=function(e){switch(P){case 1:case 2:case 3:var t=3;break;default:t=P}var n=P;P=t;try{return e()}finally{P=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=P;P=e;try{return t()}finally{P=n}},t.unstable_scheduleCallback=function(e,n,o){var s=t.unstable_now();if("object"==typeof o&&null!==o){var u=o.delay;u="number"==typeof u&&0<u?s+u:s,o="number"==typeof o.timeout?o.timeout:I(e)}else o=I(e),u=s;return e={id:O++,callback:n,priorityLevel:e,startTime:u,expirationTime:o=u+o,sortIndex:-1},u>s?(e.sortIndex=u,Y(j,e),null===T(x)&&e===T(j)&&(C?i():C=!0,a(F,u-s))):(e.sortIndex=o,Y(x,e),A||H||(A=!0,r(W))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();N(e);var n=T(x);return n!==E&&null!==E&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<E.expirationTime||o()},t.unstable_wrapCallback=function(e){var t=P;return function(){var n=P;P=t;try{return e.apply(this,arguments)}finally{P=n}}}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"wrapSpace",(function(){return R}));var a={};n.r(a),n.d(a,"wrapEntry",(function(){return ae})),n.d(a,"wrapEntryCollection",(function(){return ie}));var i={};n.r(i),n.d(i,"wrapAsset",(function(){return oe})),n.d(i,"wrapAssetCollection",(function(){return se}));var o={};n.r(o),n.d(o,"wrapContentType",(function(){return ue})),n.d(o,"wrapContentTypeCollection",(function(){return le}));var s={};n.r(s),n.d(s,"wrapLocale",(function(){return de})),n.d(s,"wrapLocaleCollection",(function(){return ce}));var u=n(1),l=n.n(u),d=n(204),c=n.n(d),f=n(205),m=n.n(f),_=n(206),p=n.n(_),h=n(30),y=n.n(h),g=n(207),M=n.n(g),v=function(){return l.a.createElement("div",null,"Ayyy! I'm workin hea!")},b="#022b3a",L="#ffffff",k="#e1e5f2",w="#de6e4b",Y="#de6e4b",T="#bfdbf7",D="#bfdbf7",S="#dddddd",x=n(3),j=x.b.div.withConfig({displayName:"nav__Nav",componentId:"sc-19hgxg7-0"})(["@import url('https://fonts.googleapis.com/css?family=Teko&display=swap');@import url('https://fonts.googleapis.com/css?family=Azeret+Mono&display=swap');font-family:'Teko',sans-serif;font-size:35px;color:",";#nav-container{a,strong{margin-right:20px;}a{text-decoration:none;}.selected{color:",";border-bottom:2px solid ","}margin-bottom:50px;#main-nav{width:720px;margin:auto;}#left-nav{#phil-avery{margin-bottom:10px;}#below-phil{font-size:12px;line-height:20px;}font-family:'Azeret Mono';font-size:17px;line-height:25px;float:left;border-right:1px solid ",";margin:17px 15px 0 10px;}}"],T,T,T,S),O=function(e){return l.a.createElement(j,null,l.a.createElement("div",{id:"nav-container"},l.a.createElement("div",{id:"left-nav"},l.a.createElement("div",{id:"phil-avery"},"Phil Avery"),l.a.createElement("div",{id:"below-phil"},l.a.createElement("a",{href:"https://www.linkedin.com/in/phillipavery/"},"LinkedIn"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://github.com/pill"},"Github"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://www.instagram.com/classique_phil/"},"@classique_phil"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://www.instagram.com/pill_moto/"},"@pill_moto"))),l.a.createElement("div",{id:"main-nav"},l.a.createElement("a",{class:[""].includes(e.section)?"selected":"",href:"/"},"home"),l.a.createElement("a",{class:["blog","tags","post"].includes(e.section)?"selected":"",href:"/blog"},"blog"),l.a.createElement("a",{class:["dev"].includes(e.section)?"selected":"",href:"/dev"},"dev"))))},E=n(9),P=n.n(E),H=n(10),A=n.n(H),C=n(7),N=n.n(C),F=function(e){var t=e.totalPages,n=e.p,r=e.rpp,a=e.basePath,i=void 0===a?"/blog":a,o=n-5>0?n-5:1,s=n+5<=t?n+5:t;return console.log(t,o,s),l.a.createElement("div",{id:"paginator"},function(e,t,n){if(void 0===t&&(t=e,e=0),void 0===n&&(n=1),n>0&&e>=t||n<0&&e<=t)return[];for(var r=[],a=e;n>0?a<t:a>t;a+=n)r.push(a);return r}(o,s+1,1).map((function(e){return l.a.createElement("a",{href:"".concat(i,"?p=").concat(e,"&rpp=").concat(r),key:e},e)})))},W=n(210),I=n.n(W),z=n(2);function R(e){return Object(z.c)(Object(z.e)(e))}var U=n(4),B=n.n(U),J=n(213),$=n.n(J);function V(e){return Object.defineProperty(e,"stringifySafe",{enumerable:!1,configurable:!1,writable:!1,value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return $()(this,e,t,(function(e,t){return{sys:{type:"Link",linkType:"Entry",id:t.sys.id,circular:!0}}}))}})}var q=n(214),G=n.n(q),K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Q=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{!r&&s.return&&s.return()}finally{if(a)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function Z(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var X={},ee=function(e,t){var n=t.entryId,r=t.linkType,a=t.spaceId,i=t.environmentId;return a&&i?e.get(a+"!"+i+"!"+r+"!"+n):e.get(r+"!"+n)},te=function(e,t){var n=t.sys,r=n.type,a=n.linkType;if("ResourceLink"===r){if(!a.startsWith("Contentful:"))return t;var i=function(e){var t=/.*:spaces\/([^/]+)(?:\/environments\/([^/]+))?\/entries\/([^/]+)$/;if(t.test(e)){var n=e.match(t),r=Q(n,4),a=(r[0],r[1]),i=r[2];return{spaceId:a,environmentId:void 0===i?"master":i,entryId:r[3]}}}(t.sys.urn),o=i.spaceId,s=i.environmentId,u=i.entryId,l=a.split(":")[1];return ee(e,{linkType:l,entryId:u,spaceId:o,environmentId:s})||X}var d=t.sys.id;return ee(e,{linkType:a,entryId:d})||X},ne=function e(t,n,r,a){if(n(t))return r(t);if(t&&"object"===(void 0===t?"undefined":K(t))){for(var i in t)t.hasOwnProperty(i)&&(t[i]=e(t[i],n,r,a));a&&(t=function(e){if(Array.isArray(e))return e.filter((function(e){return e!==X}));for(var t in e)e[t]===X&&delete e[t];return e}(t))}return t},re=function(e,t){if(t=t||{},!e.items)return[];var n=G()(e),r=Object.keys(n.includes||{}).reduce((function(t,n){return[].concat(Z(t),Z(e.includes[n]))}),[]),a=[].concat(Z(n.items),Z(r)).filter((function(e){return Boolean(e.sys)})),i=new Map(a.reduce((function(e,t){var n,r=(n=t.sys,n.space&&n.environment?[n.type+"!"+n.id,n.space.sys.id+"!"+n.environment.sys.id+"!"+n.type+"!"+n.id]:[n.type+"!"+n.id]).map((function(e){return[e,t]}));return e.push.apply(e,Z(r)),e}),[]));return a.forEach((function(e){var n=function(e,t){return Array.isArray(t)?Object.keys(e).filter((function(e){return-1!==t.indexOf(e)})).reduce((function(t,n){return t[n]=e[n],t}),{}):e}(e,t.itemEntryPoints);Object.assign(e,ne(n,(function(e){return(t=e)&&t.sys&&"Link"===t.sys.type||function(e){return e&&e.sys&&"ResourceLink"===e.sys.type}(e);var t}),(function(e){return function(e,t,n){var r=te(e,t);return r===X?n?r:t:r}(i,e,t.removeUnresolved)}),t.removeUnresolved))})),n.items};function ae(e){return Object(z.c)(Object(z.e)(B()(e)))}function ie(e,t){var n=t.resolveLinks,r=t.removeUnresolved,a=V(Object(z.e)(B()(e)));return n&&(a.items=re(a,{removeUnresolved:r,itemEntryPoints:["fields"]})),Object(z.c)(a)}function oe(e){return Object(z.c)(Object(z.e)(B()(e)))}function se(e){return Object(z.c)(Object(z.e)(B()(e)))}function ue(e){return Object(z.c)(Object(z.e)(B()(e)))}function le(e){return Object(z.c)(Object(z.e)(B()(e)))}function de(e){return Object(z.c)(Object(z.e)(B()(e)))}function ce(e){return Object(z.c)(Object(z.e)(B()(e)))}var fe={space:r,entry:a,asset:i,contentType:o,locale:s};function me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _e(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?me(Object(n),!0).forEach((function(t){pe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):me(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function pe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function he(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!t||!t.initial&&!t.nextSyncToken&&!t.nextPageToken)throw new Error("Please provide one of `initial`, `nextSyncToken` or `nextPageToken` parameters for syncing");if(t&&t.content_type&&!t.type)t.type="Entry";else if(t&&t.content_type&&t.type&&"Entry"!==t.type)throw new Error("When using the `content_type` filter your `type` parameter cannot be different from `Entry`.");var r={resolveLinks:!0,removeUnresolved:!1,paginate:!0},a=_e(_e({},r),n),i=a.resolveLinks,o=a.removeUnresolved,s=a.paginate,u={paginate:s};return ge(e,[],t,u).then((function(e){i&&(e.items=re(e,{removeUnresolved:o,itemEntryPoints:["fields"]}));var t=ye(e.items);return e.nextSyncToken&&(t.nextSyncToken=e.nextSyncToken),e.nextPageToken&&(t.nextPageToken=e.nextPageToken),Object(z.c)(V(Object(z.e)(t)))}),(function(e){throw e}))}function ye(e){var t=function(e){return function(t,n){return n.sys.type===e&&t.push(Object(z.e)(n)),t}};return{entries:e.reduce(t("Entry"),[]),assets:e.reduce(t("Asset"),[]),deletedEntries:e.reduce(t("DeletedEntry"),[]),deletedAssets:e.reduce(t("DeletedAsset"),[])}}function ge(e,t,n,r){var a=r.paginate;return n.nextSyncToken&&(n.sync_token=n.nextSyncToken,delete n.nextSyncToken),n.nextPageToken&&(n.sync_token=n.nextPageToken,delete n.nextPageToken),n.sync_token&&(delete n.initial,delete n.type,delete n.content_type,delete n.limit),e.get("sync",Object(z.b)({query:n})).then((function(r){var i=r.data||{};return t=t.concat(i.items||[]),i.nextPageUrl?a?(delete n.initial,n.sync_token=Me(i.nextPageUrl),ge(e,t,n,{paginate:a})):{items:t,nextPageToken:Me(i.nextPageUrl)}:i.nextSyncUrl?{items:t,nextSyncToken:Me(i.nextSyncUrl)}:{items:[]}}))}function Me(e){var t=e.split("?");return t.length>0?t[1].replace("sync_token=",""):""}function ve(e){return function(e){if(Array.isArray(e))return be(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return be(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return be(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function be(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Le(e){if(e.select){var t=e.select.split(","),n=new Set(t);n.has("sys")||(n.add("sys.id"),n.add("sys.type"),e.select=ve(n).join(","))}}function ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(n),!0).forEach((function(t){Ye(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ye(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Te(e){var t=e.http,n=e.getGlobalOptions,r=fe.space.wrapSpace,a=fe.contentType,i=a.wrapContentType,o=a.wrapContentTypeCollection,s=fe.entry,u=s.wrapEntry,l=s.wrapEntryCollection,d=fe.asset,c=d.wrapAsset,f=d.wrapAssetCollection,m=fe.locale.wrapLocaleCollection,_=function(e){var t=new Error("The resource could not be found.");return t.sys={type:"Error",id:"NotFound"},t.details={type:"Entry",id:e,environment:n().environment,space:n().space},t};function p(e){if(e.data)throw e.data;if(e.response&&e.response.data)throw e.response.data;throw e}function h(e){e.defaults.baseURL=n().environmentBaseUrl}return{getSpace:function(){return function(e){e.defaults.baseURL=n().spaceBaseUrl}(t),t.get("").then((function(e){return r(e.data)}),p)},getContentType:function(e){return h(t),t.get("content_types/"+e).then((function(e){return i(e.data)}),p)},getContentTypes:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),t.get("content_types",Object(z.b)({query:e})).then((function(e){return o(e.data)}),p)},getEntry:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e?this.getEntries(we({"sys.id":e},t)).then((function(t){if(t.items.length>0)return u(t.items[0]);throw _(e)}),p):Promise.reject(_(e))},getEntries:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h(t);var r=n(e),a=r.resolveLinks,i=r.removeUnresolved;return Le(e),t.get("entries",Object(z.b)({query:e})).then((function(e){return l(e.data,{resolveLinks:a,removeUnresolved:i})}),p)},getAsset:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return h(t),Le(n),t.get("assets/"+e,Object(z.b)({query:n})).then((function(e){return c(e.data)}),p)},getAssets:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),Le(e),t.get("assets",Object(z.b)({query:e})).then((function(e){return f(e.data)}),p)},getLocales:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),t.get("locales",Object(z.b)({query:e})).then((function(e){return m(e.data)}),p)},parseEntries:function(e){var t=n({}),r=t.resolveLinks,a=t.removeUnresolved;return l(e,{resolveLinks:r,removeUnresolved:a})},sync:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{paginate:!0},a=n(e),i=a.resolveLinks,o=a.removeUnresolved;return h(t),he(t,e,we({resolveLinks:i,removeUnresolved:o},r))}}}function De(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Se(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?De(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):De(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function xe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var je=function(e){if(!e.accessToken)throw new TypeError("Expected parameter accessToken");if(!e.space)throw new TypeError("Expected parameter space");var t=Se(Se({},{resolveLinks:!0,removeUnresolved:!1,defaultHostname:"cdn.contentful.com",environment:"master"}),e),n=Object(z.d)("contentful.js/".concat("0.0.0-determined-by-semantic-release"),t.application,t.integration);t.headers=Se(Se({},t.headers),{},{"Content-Type":"application/vnd.contentful.delivery.v1+json","X-Contentful-User-Agent":n});var r,a=Object(z.a)(I.a,t),i=(r={resolveLinks:t.resolveLinks,environment:t.environment,removeUnresolved:t.removeUnresolved,spaceBaseUrl:a.defaults.baseURL,environmentBaseUrl:"".concat(a.defaults.baseURL,"environments/").concat(t.environment)},function(e){return Object.assign({},r,e)});return a.defaults.baseURL=i().environmentBaseUrl,function(e){e.interceptors.response.use((function(e){return e}),(function(e){if(e.response&&e.response.config.headers.Authorization){var t=e.response.config.headers.Authorization;e.response.config.headers.Authorization=e.response.config.headers.Authorization.replace(t,"Bearer...".concat(t.substr(-5))),e.response.request._headers&&e.response.request._headers.authorization&&(e.response.request._headers.authorization=e.response.request._headers.authorization.replace(t,"Bearer...".concat(t.substr(-5)))),e.response.request._header&&(e.response.request._header=e.response.request._header.replace(t,"Bearer...".concat(t.substr(-5))))}return Promise.reject(e)}))}(a),Te({http:a,getGlobalOptions:i})}({space:"9itkoq01s77j",accessToken:"eTLRYpsJLr3mN3W5pRgIuHCvPvRi4hDtgRoOZcb0ndQ"}),Oe=n(0),Ee=n.n(Oe),Pe=n(21),He=n.n(Pe),Ae=l.a.createContext([{},function(){}]),Ce=function(e){var t=Object(u.useState)({entry:null,entryList:[],page:1,totalPages:1}),n=He()(t,2),r=n[0],a=n[1];return l.a.createElement(Ae.Provider,{value:[r,a]},e.children)};function Ne(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ne(Object(n),!0).forEach((function(t){P()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ne(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var We=function(){var e=Object(u.useContext)(Ae),t=He()(e,2),n=t[0],r=t[1];return{setPage:function(e){if(e<1)throw"Invalid page number";r((function(t){return Fe(Fe({},t),{},{page:e})}))},totalPages:n.totalPages,entry:n.entry,setEntry:function(e){r((function(t){return Fe(Fe({},t),{},{entry:e})}))},entryList:n.entryList,state:n,setState:r}};function Ie(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ze(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ie(Object(n),!0).forEach((function(t){P()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ie(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Re(e){var t=e.searchParams,n=x.b.div.withConfig({displayName:"blog__EntryList",componentId:"sc-fntq75-0"})(["#entry-container{li{div{display:inline-block;h1{margin-bottom:5px;}img{float:left;border:2px solid ",";margin:5px 0 15px 0;}.date{font-family:arial font-size:15px;font-weight:bold;color:",";line-height:30px;margin-bottom:10px;}}}}"],S,D),r=We(),a=r.setState,i=r.entryList,o=r.totalPages,s=t.get("p")||1,d=t.get("rpp")||10;return Object(u.useEffect)((function(){(function(){var e=A()(N.a.mark((function e(){var t,n;return N.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t={content_type:"post",skip:(s-1)*d,limit:d},e.next=1,je.getEntries(t);case 1:n=e.sent,console.log("entries res",n),a((function(e){return ze(ze({},e),{},{entryList:n.items,totalPages:Math.ceil(n.total/d)})}));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[]),l.a.createElement(n,null,i.length?l.a.createElement("div",{id:"entry-container"},l.a.createElement("ul",null,i.map((function(e){return l.a.createElement("li",{key:e.fields.slug},l.a.createElement("div",null,l.a.createElement("a",{href:"/post/"+e.sys.id},l.a.createElement("h1",null,e.fields.title),l.a.createElement("div",{class:"date"},Ee()(e.sys.createdAt).format("MMMM Do YYYY, h:mm a")),e.fields.thumb?l.a.createElement("img",{src:e.fields.thumb.fields.file.url,width:"560px"}):"")))}))),l.a.createElement(F,{totalPages:o,p:s,rpp:d})):l.a.createElement("em",null,"Loading..."))}var Ue=n(215),Be=n.n(Ue);function Je(e){var t=x.b.div.withConfig({displayName:"post__BlogPost",componentId:"sc-9jh1rj-0"})(["#post-container{margin:20px 0 20px 0;h1{margin-bottom:5px;}#date{font-family:arial font-size:15px;font-weight:bold;color:",";line-height:30px;margin-bottom:20px;}#post-body{font-family:georgia;line-height:25px;margin-bottom:25px;ul{list-style-type:circle;}}#tag-label{font-weight:bold;margin-bottom:20px;color:",";}.tag{font-size:13px;background:",";border:1px solid ",";border-radius:5px;text-decoration:none;padding:8px;margin:3px;text-transform:uppercase;}.tag:hover{color:",";background:",";}}"],D,D,b,S,b,D),n=We(),r=n.entry,a=n.setEntry;return Object(u.useEffect)((function(){(function(){var t=A()(N.a.mark((function t(){var n;return N.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=1,je.getEntry(e.id);case 1:n=t.sent,console.log("res",n),a(n);case 2:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}})()()}),[]),l.a.createElement(t,null,l.a.createElement("div",{id:"post-container"},r?l.a.createElement("div",null,l.a.createElement("h1",null,r.fields.title),l.a.createElement("div",{id:"date"},Ee()(r.sys.createdAt).format("MMMM Do YYYY, h:mm a")),l.a.createElement("div",{id:"post-body"},l.a.createElement(Be.a,{escapeHtml:!1,children:r.fields.body})),l.a.createElement("div",null,l.a.createElement("div",{id:"tag-label"},r.metadata.tags?"Tags:":""),r.metadata.tags&&r.metadata.tags.map((function(e){return l.a.createElement("a",{href:"/tags/".concat(e.sys.id),class:"tag",key:e.sys.id},e.sys.id)})))):l.a.createElement("div",{class:"loading"},l.a.createElement("em",null,"Loading..."))))}function $e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ve(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$e(Object(n),!0).forEach((function(t){P()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$e(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function qe(e){var t=e.id,n=e.searchParams,r=x.b.div.withConfig({displayName:"tag__EntryList",componentId:"sc-19j6k2a-0"})(["#entry-container{li{div{display:inline-block;img{float:left;border:2px solid ",";margin:5px 0 10px 0;}}}}"],S),a=x.b.div.withConfig({displayName:"tag__SelectedTag",componentId:"sc-19j6k2a-1"})(["@import url('https://fonts.googleapis.com/css?family=Bebas+Neue&display=swap');font-size:20px;#selected-tag-container{color:",";width:560px;margin-top:50px;padding-bottom:15px;border-bottom:1px dotted ",';.tag{font-family:"Bebas Neue";font-size:64px;color:',";background:",";text-transform:uppercase;margin-right:10px;}}"],k,S,D,b),i=We(),o=i.setState,s=i.entryList,d=i.totalPages,c=n.get("p")||1,f=n.get("rpp")||10;return Object(u.useEffect)((function(){(function(){var e=A()(N.a.mark((function e(){var n,r;return N.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={"metadata.tags.sys.id[in]":t,content_type:"post",skip:(c-1)*f,limit:f},e.next=1,je.getEntries(n);case 1:r=e.sent,console.log("entries res",r),o((function(e){return Ve(Ve({},e),{},{entryList:r.items,totalPages:Math.ceil(r.total/f)})}));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[]),l.a.createElement("div",null,l.a.createElement(a,null,l.a.createElement("div",{id:"selected-tag-container"},l.a.createElement("span",{class:"tag"},t)," posts")),l.a.createElement(r,null,l.a.createElement("div",null,s.length?l.a.createElement("div",{id:"entry-container"},l.a.createElement("ul",null,s.map((function(e){return l.a.createElement("li",{key:e.fields.slug},l.a.createElement("div",null,l.a.createElement("a",{href:"/post/"+e.sys.id},l.a.createElement("h1",null,e.fields.title),e.fields.thumb?l.a.createElement("img",{src:e.fields.thumb.fields.file.url,width:"560px"}):"")))}))),l.a.createElement(F,{totalPages:d,p:c,rpp:f,basePath:"/tags/".concat(t)})):l.a.createElement("em",null,"Loading..."))))}function Ge(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ke(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ge(Object(n),!0).forEach((function(t){P()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ge(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Qe(e){var t=e.searchParams,n=x.b.div.withConfig({displayName:"dev__EntryList",componentId:"sc-gnk0wp-0"})(["#entry-container{li{div{display:inline-block;h1{margin-bottom:5px;}img{float:left;border:2px solid ",";margin:5px 0 15px 0;}.date{font-family:arial font-size:15px;font-weight:bold;color:",";line-height:30px;margin-bottom:10px;}}}}"],S,D),r=We(),a=r.setState,i=r.entryList,o=r.totalPages,s=t.get("p")||1,d=t.get("rpp")||10;return Object(u.useEffect)((function(){(function(){var e=A()(N.a.mark((function e(){var t,n;return N.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t={"metadata.tags.sys.id[in]":"dev",content_type:"post",skip:(s-1)*d,limit:d},e.next=1,je.getEntries(t);case 1:n=e.sent,console.log("entries res",n),a((function(e){return Ke(Ke({},e),{},{entryList:n.items,totalPages:Math.ceil(n.total/d)})}));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[]),l.a.createElement(n,null,i.length?l.a.createElement("div",{id:"entry-container"},l.a.createElement("ul",null,i.map((function(e){return l.a.createElement("li",{key:e.fields.slug},l.a.createElement("div",null,l.a.createElement("a",{href:"/post/"+e.sys.id},l.a.createElement("h1",null,e.fields.title),l.a.createElement("div",{class:"date"},Ee()(e.sys.createdAt).format("MMMM Do YYYY, h:mm a")),e.fields.thumb?l.a.createElement("img",{src:e.fields.thumb.fields.file.url,width:"560px"}):"")))}))),l.a.createElement(F,{totalPages:o,p:s,rpp:d,basePath:"/dev"})):l.a.createElement("em",null,"Loading..."))}function Ze(){var e=x.b.div.withConfig({displayName:"home__HomePage",componentId:"sc-sb9dzz-0"})(["#home-container{margin-top:50px;width:560px;color:",";text-align:center;img{border:2px solid ",";width:560px;margin-bottom:15px;}}"],k,S);return l.a.createElement(e,null,l.a.createElement("div",{id:"home-container"},l.a.createElement("img",{src:"https://images.ctfassets.net/9itkoq01s77j/2METWxNUggmn6bfqiHhpKu/2215a0bd75ad13cd4eba994008eb8d68/Phil_Avery_on_Instagram_____Yet_another_ramen_place_in_nyc__not_complaining_though___ramen__nyc___.png"}),l.a.createElement("div",null,"Just a picture of some yummy ramen I ate once.")))}function Xe(e,t,n){return t=y()(t),p()(e,function(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return function(){return!!e}()}()?Reflect.construct(t,n||[],y()(e).constructor):t.apply(e,n))}var et=Object(x.a)(["body{background-color:",";}.main-site{width:560px;margin:auto;}"],b),tt=x.b.div.withConfig({displayName:"main__Main",componentId:"sc-msizxx-0"})(["@import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');font-family:sans-serif;color:",";h1{font-family:'Roboto',sans-serif;color:",";}ul{list-style:none;padding:0;}a{text-decoration:none;color:",";}#post-body a{&:link{color:",";}&:visited{color:",";}&:hover{color:",";}}.loading{margin-top:50px;}"],k,L,k,w,Y,k),nt=function(e){function t(){return c()(this,t),Xe(this,t,arguments)}return M()(t,e),m()(t,[{key:"render",value:function(){var e,t=[],n=(e=new URL(window.location.href),console.log("url",e),{parts:e.pathname.split("/").filter((function(e){return e.length>0})),searchParams:e.searchParams}),r=n.parts,a=n.searchParams,i=r.length>0?r[0]:"",o=r[1],s=null;switch(i){case"work":s=l.a.createElement(v,{key:"work"});break;case"post":s=l.a.createElement(Je,{key:"post",id:o});break;case"blog":s=l.a.createElement(Re,{key:"blog",searchParams:a});break;case"dev":s=l.a.createElement(Qe,{key:"dev",searchParams:a});break;case"tags":s=l.a.createElement(qe,{key:"tag",id:o,searchParams:a});break;default:s=l.a.createElement(Ze,{key:"home"})}return t.push(s),l.a.createElement(Ce,null,l.a.createElement(et,null),l.a.createElement(tt,null,l.a.createElement(O,{key:"nav",section:i}),l.a.createElement("div",{class:"main-site"},t)))}}])}(u.Component),rt=n(216),at=n.n(rt),it=document.getElementById("main-site");it&&at.a.render(l.a.createElement(nt,null),it)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsLXNkay1jb3JlL2Rpc3QvaW5kZXguZXMtbW9kdWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmFzdC1jb3B5L2Rpc3QvZmFzdC1jb3B5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWVycm9ycy90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmltL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc3BsYWlub2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWluc3BlY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC1hcHBseS1oZWxwZXJzL2Z1bmN0aW9uQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWVudGl0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXBlYXQtc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmltLXRyYWlsaW5nLWxpbmVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvbm9ybWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3R5bGlzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc3N0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL092ZXJsb2FkWWllbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3JEZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3JBc3luY0dlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9yZWdlbmVyYXRvckFzeW5jSXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsLW1hcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtb2JqZWN0LWF0b21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nb3BkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZXQtcHJvdG8vUmVmbGVjdC5nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LXByb3RvL09iamVjdC5nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC1hcHBseS1oZWxwZXJzL2Z1bmN0aW9uQXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbGwtYm91bmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1kei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1tYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci10bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi1iZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ici5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1jaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1hdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1nYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1uei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1zZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1kby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1teC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy11cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9maS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9maWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWRldmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWxhdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHktYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQtY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvamEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvanYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3Uta21yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21pLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLW15LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL210LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL215LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25iLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLWJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL29jLWxuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wYS1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC1ici5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9yby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ydS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci1jeXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bC1waC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHpsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0tbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91Zy1jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei1sYXRuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3ZpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3gtcHNldWRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3lvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWNuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWhrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLW1vLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLXR3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWFscGhhYmV0aWNhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL2dldC1pbmRlbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMtcnVsZS1zaGVldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3AtdGhyb3R0bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbi1zdHJpbmdpZnktc2FmZS9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwtcmVzb2x2ZS1yZXNwb25zZS9ub2RlX21vZHVsZXMvZmFzdC1jb3B5L2Rpc3QvdW1kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcmVhY3QtbWFya2Rvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy13aGF0L2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZXJnZS1hbnl0aGluZy9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlZ2VuZXJhdG9yUnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9yZWdlbmVyYXRvckFzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlZ2VuZXJhdG9yS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9yZWdlbmVyYXRvclZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaWRlLWNoYW5uZWwtbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvZXZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvcmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvc3ludGF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdXJpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRoLWludHJpbnNpY3MvYWJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRoLWludHJpbnNpY3MvZmxvb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9tYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9wb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aC1pbnRyaW5zaWNzL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9pc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29wZC9nT1BELmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1kZWZpbmUtcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LXByb3RvL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kdW5kZXItcHJvdG8vZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQtYXBwbHktaGVscGVycy9hY3R1YWxBcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvcmVmbGVjdEFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNvd24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC13ZWFrbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIF5cXC5cXC8uKiQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaWZpZWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmZpbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlLW1lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZmlsZS9jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXBsYWNlLWV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cm91Z2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Ryb3VnaC93cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94LWlzLXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdGF0ZS10b2dnbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlLWxvY2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3VuZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaGV4YWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWFscGhhbnVtZXJpY2FsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1lbnRpdGllcy9kZWNvZGUtZW50aXR5LmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3NldC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1lc2NhcGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXJlbW92ZS1wb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLWlzL2NvbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbmV3bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9jb2RlLWluZGVudGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtZmVuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Jsb2NrcXVvdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvaGVhZGluZy1hdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWJsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Zvb3Rub3RlLWRlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbGxhcHNlLXdoaXRlLXNwYWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvcGFyYWdyYXBoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2F1dG8tbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3VybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL3JlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3N0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9lbXBoYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtd29yZC1jaGFyYWN0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2VtcGhhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtaW5saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2xvY2F0ZS9jb2RlLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9icmVhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZGFzdC1hZGQtbGlzdC1tZXRhZGF0YS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcGx1Z2lucy9uYWl2ZS1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcGx1Z2lucy9kaXNhbGxvdy1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvYXN0LXRvLXJlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvd3JhcC10YWJsZS1yb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvZ2V0LWRlZmluaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvdXJpLXRyYW5zZm9ybWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcmVuZGVyZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29yay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wYWxldHRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL25hdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3BhZ2luYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL3NwYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9taXhpbnMvc3RyaW5naWZ5LXNhZmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwtcmVzb2x2ZS1yZXNwb25zZS9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvZW50aXRpZXMvZW50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL2Fzc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9lbnRpdGllcy9jb250ZW50LXR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvZW50aXRpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL3BhZ2VkLXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL3V0aWxzL25vcm1hbGl6ZS1zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2NyZWF0ZS1jb250ZW50ZnVsLWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvY29udGVudGZ1bC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9jcmVhdGUtZ2xvYmFsLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9ibG9nQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3VzZUJsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3Bvc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy90YWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9kZXYuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImhvb2tDYWxsYmFjayIsInNvbWUiLCJob29rcyIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNBcnJheSIsImlucHV0IiwiQXJyYXkiLCJ0b1N0cmluZyIsImlzT2JqZWN0IiwiaGFzT3duUHJvcCIsImEiLCJiIiwiaXNPYmplY3RFbXB0eSIsIm9iaiIsImdldE93blByb3BlcnR5TmFtZXMiLCJsZW5ndGgiLCJrIiwiaXNVbmRlZmluZWQiLCJpc051bWJlciIsImlzRGF0ZSIsIkRhdGUiLCJtYXAiLCJhcnIiLCJmbiIsInJlcyIsImFyckxlbiIsInB1c2giLCJleHRlbmQiLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwiZm9ybWF0IiwibG9jYWxlIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImdldFBhcnNpbmdGbGFncyIsIl9wZiIsImVtcHR5IiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJvdmVyZmxvdyIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkRXJhIiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsImVyYSIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImlzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsIl9kIiwiaXNOYU4iLCJnZXRUaW1lIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwidW5kZWZpbmVkIiwiYmlnSG91ciIsImlzRnJvemVuIiwiX2lzVmFsaWQiLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwiZnVuIiwidGhpcyIsImxlbiIsIm1vbWVudFByb3BlcnRpZXMiLCJ1cGRhdGVJblByb2dyZXNzIiwiY29weUNvbmZpZyIsInRvIiwiZnJvbSIsInByb3AiLCJ2YWwiLCJtb21lbnRQcm9wZXJ0aWVzTGVuIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsIk1vbWVudCIsImNvbmZpZyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50Iiwid2FybiIsIm1zZyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImNvbnNvbGUiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJhcmciLCJhcmdzIiwiYXJnTGVuIiwic2xpY2UiLCJqb2luIiwiRXJyb3IiLCJzdGFjayIsImtleXMiLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJpc0Z1bmN0aW9uIiwiRnVuY3Rpb24iLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsInNldCIsInplcm9GaWxsIiwibnVtYmVyIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiTWF0aCIsImFicyIsInplcm9zVG9GaWxsIiwicG93IiwibWF4Iiwic3Vic3RyIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJjYWxsYmFjayIsImZ1bmMiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwiYXJyYXkiLCJtYXRjaCIsInJlcGxhY2UiLCJtb20iLCJvdXRwdXQiLCJtYWtlRm9ybWF0RnVuY3Rpb24iLCJpbnZhbGlkRGF0ZSIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvbmdEYXRlRm9ybWF0IiwibGFzdEluZGV4IiwidGVzdCIsImFsaWFzZXMiLCJEIiwiZGF0ZXMiLCJkYXRlIiwiZGF5cyIsImRheSIsImUiLCJ3ZWVrZGF5cyIsIndlZWtkYXkiLCJFIiwiaXNvd2Vla2RheXMiLCJpc293ZWVrZGF5IiwiREREIiwiZGF5b2Z5ZWFycyIsImRheW9meWVhciIsImgiLCJob3VycyIsImhvdXIiLCJtcyIsIm1pbGxpc2Vjb25kcyIsIm1pbGxpc2Vjb25kIiwibWludXRlcyIsIm1pbnV0ZSIsIk0iLCJtb250aHMiLCJtb250aCIsIlEiLCJxdWFydGVycyIsInF1YXJ0ZXIiLCJzZWNvbmRzIiwic2Vjb25kIiwiZ2ciLCJ3ZWVreWVhcnMiLCJ3ZWVreWVhciIsIkdHIiwiaXNvd2Vla3llYXJzIiwiaXNvd2Vla3llYXIiLCJ3Iiwid2Vla3MiLCJ3ZWVrIiwiVyIsImlzb3dlZWtzIiwiaXNvd2VlayIsInkiLCJ5ZWFycyIsInllYXIiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJyZWdleGVzIiwicHJpb3JpdGllcyIsImlzb1dlZWtkYXkiLCJkYXlPZlllYXIiLCJ3ZWVrWWVhciIsImlzb1dlZWtZZWFyIiwiaXNvV2VlayIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsIm1hdGNoMXRvMk5vTGVhZGluZ1plcm8iLCJtYXRjaDF0bzJIYXNaZXJvIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsIlJlZ0V4cCIsInJlZ2V4RXNjYXBlIiwibWF0Y2hlZCIsInAxIiwicDIiLCJwMyIsInA0IiwiYWJzRmxvb3IiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwiaXNGaW5pdGUiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwidG9rZW5MZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsImlzTGVhcFllYXIiLCJkYXlzSW5ZZWFyIiwicGFyc2VUd29EaWdpdFllYXIiLCJwYXJzZUludCIsImluZGV4T2YiLCJnZXRTZXRZZWFyIiwibWFrZUdldFNldCIsInVuaXQiLCJrZWVwVGltZSIsInNldCQxIiwiaXNVVEMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJnZXRNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJnZXRIb3VycyIsImdldFVUQ0RhdGUiLCJnZXREYXRlIiwiZ2V0VVRDRGF5IiwiZ2V0RGF5IiwiZ2V0VVRDTW9udGgiLCJnZXRNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJzZXRVVENNaWxsaXNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJzZXRVVENTZWNvbmRzIiwic2V0U2Vjb25kcyIsInNldFVUQ01pbnV0ZXMiLCJzZXRNaW51dGVzIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsInNldFVUQ0RhdGUiLCJzZXREYXRlIiwic2V0VVRDRnVsbFllYXIiLCJzZXRGdWxsWWVhciIsImRheXNJbk1vbnRoIiwieCIsIm1vZE1vbnRoIiwibW9udGhzU2hvcnQiLCJtb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJtb250aHNQYXJzZSIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJzcGxpdCIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsIk1PTlRIU19JTl9GT1JNQVQiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsInNldE1vbnRoIiwibWluIiwic2V0VVRDTW9udGgiLCJnZXRTZXRNb250aCIsImNvbXB1dGVNb250aHNQYXJzZSIsImNtcExlblJldiIsInNob3J0UCIsImxvbmdQIiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJzb3J0IiwiX21vbnRoc1JlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRTdHJpY3RSZWdleCIsImNyZWF0ZURhdGUiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla09mZnNldCIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJzaGlmdFdlZWtkYXlzIiwid3MiLCJjb25jYXQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c01pblJlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNSZWdleCIsIndlZWtkYXlzUGFyc2UiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsIm1pblBpZWNlcyIsIl93ZWVrZGF5c1JlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblJlZ2V4IiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJoRm9ybWF0IiwibG93ZXJjYXNlIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaGgiLCJkZCIsInd3IiwiTU0iLCJ5eSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJjb21tb25QcmVmaXgiLCJhcnIxIiwiYXJyMiIsIm1pbmwiLCJub3JtYWxpemVMb2NhbGUiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiaXNMb2NhbGVOYW1lU2FuZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwidmFsdWVzIiwiZGF0YSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJfY29uZmlnIiwicGFyZW50TG9jYWxlIiwiZm9yRWFjaCIsIm5hbWVzIiwiaiIsIm5leHQiLCJjaG9vc2VMb2NhbGUiLCJjaGVja092ZXJmbG93IiwiX292ZXJmbG93RGF5T2ZZZWFyIiwiX292ZXJmbG93V2Vla3MiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsIm9ic09mZnNldHMiLCJVVCIsIkdNVCIsIkVEVCIsIkVTVCIsIkNEVCIsIkNTVCIsIk1EVCIsIk1TVCIsIlBEVCIsIlBTVCIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0Iiwic3RyaW5nIiwiZXhlYyIsImlzb0RhdGVzTGVuIiwiaXNvVGltZXNMZW4iLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwidW50cnVuY2F0ZVllYXIiLCJ5ZWFyU3RyIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsInJlc3VsdCIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsImNoZWNrV2Vla2RheSIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjYWxjdWxhdGVPZmZzZXQiLCJkZWZhdWx0cyIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwiZXhwZWN0ZWRXZWVrZGF5IiwieWVhclRvVXNlIiwibm93VmFsdWUiLCJub3ciLCJfdXNlVVRDIiwiY3VycmVudERhdGVBcnJheSIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJjdXJXZWVrIiwiY3JlYXRlTG9jYWwiLCJfd2VlayIsIl9kYXlPZlllYXIiLCJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCJfbmV4dERheSIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJtZXJpZGllbUZpeFdyYXAiLCJlcmFzQ29udmVydFllYXIiLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJ0ZW1wQ29uZmlnIiwiYmVzdE1vbWVudCIsInNjb3JlVG9CZWF0IiwiY3VycmVudFNjb3JlIiwidmFsaWRGb3JtYXRGb3VuZCIsImJlc3RGb3JtYXRJc1ZhbGlkIiwiY29uZmlnZkxlbiIsInNjb3JlIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJjb25maWdGcm9tU3RyaW5nIiwiZGF5T3JEYXRlIiwiY29uZmlnRnJvbU9iamVjdCIsImNvbmZpZ0Zyb21JbnB1dCIsImFkZCIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsInVuaXRIYXNEZWNpbWFsIiwib3JkZXJMZW4iLCJwYXJzZUZsb2F0IiwiaXNEdXJhdGlvblZhbGlkIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX21vbnRocyIsIl9kYXRhIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInJvdW5kIiwib2Zmc2V0Iiwic2VwYXJhdG9yIiwidXRjT2Zmc2V0Iiwic2lnbiIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJwYXJ0cyIsIm1hdGNoZXMiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsImRpZmYiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwicmV0IiwiZGlmZlJlcyIsImJhc2UiLCJwYXJzZUlzbyIsImlzQmVmb3JlIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImlucCIsImlzQWZ0ZXIiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsInRtcCIsImFkZFN1YnRyYWN0IiwiaXNBZGRpbmciLCJpbnZhbGlkIiwic3VidHJhY3QiLCJpc1N0cmluZyIsIlN0cmluZyIsImlzTW9tZW50SW5wdXQiLCJhcnJheVRlc3QiLCJkYXRhVHlwZVRlc3QiLCJmaWx0ZXIiLCJpdGVtIiwiaXNOdW1iZXJPclN0cmluZ0FycmF5Iiwib2JqZWN0VGVzdCIsInByb3BlcnR5VGVzdCIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eUxlbiIsImlzTW9tZW50SW5wdXRPYmplY3QiLCJpc0NhbGVuZGFyU3BlYyIsIm1vbnRoRGlmZiIsIndob2xlTW9udGhEaWZmIiwiYW5jaG9yIiwibmV3TG9jYWxlRGF0YSIsImRlZmF1bHRGb3JtYXQiLCJkZWZhdWx0Rm9ybWF0VXRjIiwibGFuZyIsIm1vZCQxIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibG9jYWxTdGFydE9mRGF0ZSIsInV0Y1N0YXJ0T2ZEYXRlIiwibWF0Y2hFcmFBYmJyIiwiZXJhc0FiYnJSZWdleCIsImNvbXB1dGVFcmFzUGFyc2UiLCJlcmFzTmFtZSIsImVyYXNBYmJyIiwiZXJhc05hcnJvdyIsImFiYnJQaWVjZXMiLCJuYW1lUGllY2VzIiwibmFycm93UGllY2VzIiwiZXJhcyIsIm5hcnJvdyIsIl9lcmFzUmVnZXgiLCJfZXJhc05hbWVSZWdleCIsIl9lcmFzQWJiclJlZ2V4IiwiX2VyYXNOYXJyb3dSZWdleCIsImFkZFdlZWtZZWFyRm9ybWF0VG9rZW4iLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJlcmFzTmFtZVJlZ2V4IiwiZXJhc05hcnJvd1JlZ2V4IiwiZXJhc1BhcnNlIiwiX2VyYVllYXJPcmRpbmFsUmVnZXgiLCJlcmFZZWFyT3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldE1pbnV0ZSIsImdldFNldE1pbGxpc2Vjb25kIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsInByb3RvIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwidGltZSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJhc0Zsb2F0IiwidGhhdCIsInpvbmVEZWx0YSIsImVuZE9mIiwic3RhcnRPZkRhdGUiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwicHJpb3JpdHkiLCJnZXRQcmlvcml0aXplZFVuaXRzIiwicHJpb3JpdGl6ZWRMZW4iLCJ0b0FycmF5IiwidG9PYmplY3QiLCJ0b0RhdGUiLCJ0b0lTT1N0cmluZyIsImtlZXBPZmZzZXQiLCJpbnNwZWN0IiwicHJlZml4Iiwic3VmZml4Iiwiem9uZSIsImlzTG9jYWwiLCJmb3IiLCJ0b0pTT04iLCJ1bml4IiwiY3JlYXRpb25EYXRhIiwiZXJhTmFtZSIsInNpbmNlIiwidW50aWwiLCJlcmFOYXJyb3ciLCJlcmFBYmJyIiwiZXJhWWVhciIsImRpciIsImlzb1dlZWtzIiwid2Vla0luZm8iLCJ3ZWVrc0luV2Vla1llYXIiLCJpc29XZWVrc0luWWVhciIsImlzb1dlZWtzSW5JU09XZWVrWWVhciIsInBhcnNlV2Vla2RheSIsInBhcnNlSXNvV2Vla2RheSIsImtlZXBMb2NhbFRpbWUiLCJrZWVwTWludXRlcyIsImxvY2FsQWRqdXN0IiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJwYXJzZVpvbmUiLCJ0Wm9uZSIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEU1QiLCJpc1V0Y09mZnNldCIsInpvbmVBYmJyIiwiem9uZU5hbWUiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJjb21wYXJlQXJyYXlzIiwicHJvdG8kMSIsImdldCQxIiwiaW5kZXgiLCJmaWVsZCIsInNldHRlciIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsInNoaWZ0IiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJ0b1VwcGVyQ2FzZSIsInRvayIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsInNvdXJjZSIsIl9lcmFzIiwiaXNGb3JtYXQiLCJfbW9udGhzU2hvcnQiLCJfbW9udGhzUGFyc2VFeGFjdCIsImZpcnN0RGF5T2ZZZWFyIiwiZmlyc3REYXlPZldlZWsiLCJfd2Vla2RheXMiLCJfd2Vla2RheXNNaW4iLCJfd2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJjaGFyQXQiLCJpc0xvd2VyIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFic0NlaWwiLCJkYXlzVG9Nb250aHMiLCJtb250aHNUb0RheXMiLCJtYWtlQXMiLCJhbGlhcyIsImFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNRdWFydGVycyIsImFzWWVhcnMiLCJ2YWx1ZU9mJDEiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsInN1YnN0aXR1dGVUaW1lQWdvIiwiYWJzJDEiLCJ0b0lTT1N0cmluZyQxIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwidG90YWwiLCJ0b0ZpeGVkIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwiYXJnV2l0aFN1ZmZpeCIsImFyZ1RocmVzaG9sZHMiLCJ3aXRoU3VmZml4IiwidGgiLCJhc3NpZ24iLCJwb3NOZWdEdXJhdGlvbiIsInJlbGF0aXZlVGltZSQxIiwidG9Jc29TdHJpbmciLCJ2ZXJzaW9uIiwidXBkYXRlTG9jYWxlIiwidG1wTG9jYWxlIiwicmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJteU1vbWVudCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiREFURSIsIlRJTUUiLCJUSU1FX1NFQ09ORFMiLCJUSU1FX01TIiwiV0VFSyIsIk1PTlRIIiwiZmFjdG9yeSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfd3JhcFJlZ0V4cCIsInJlIiwiZ3JvdXBzIiwiQmFiZWxSZWdFeHAiLCJfc3VwZXIiLCJfZ3JvdXBzIiwiV2Vha01hcCIsIl90aGlzIiwiX3NldFByb3RvdHlwZU9mIiwiYnVpbGRHcm91cHMiLCJnIiwicmVkdWNlIiwiX2luaGVyaXRzIiwic3RyIiwic3Vic3RpdHV0aW9uIiwiXyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiVHlwZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJkb25lIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiaXNOb2RlIiwicHJvY2VzcyIsImJyb3dzZXIiLCJnZXROb2RlVmVyc2lvbiIsInZlcnNpb25zIiwibm9kZSIsIm5vb3AiLCJQRVJDRU5UQUdFX1JFR0VYIiwiY2FsY3VsYXRlTGltaXQiLCJ0eXBlIiwiX3R5cGUkbWF0Y2giLCJwZXJjZW50YWdlIiwiY3JlYXRlVGhyb3R0bGUiLCJsb2dnZXIiLCJpbnRlcnZhbCIsImRlbGF5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZGVmYXVsdFdhaXQiLCJhdHRlbXB0cyIsIlNRUlQyIiwiSE9TVF9SRUdFWCIsImNyZWF0ZUh0dHBDbGllbnQiLCJheGlvcyIsIm9wdGlvbnMiLCJpbnNlY3VyZSIsInJldHJ5T25FcnJvciIsImxvZ0hhbmRsZXIiLCJsZXZlbCIsInRpdGxlIiwibWVzc2FnZSIsImVycm9yIiwibG9nIiwiaGVhZGVycyIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJ0aW1lb3V0IiwidGhyb3R0bGUiLCJwcm94eSIsImJhc2VQYXRoIiwiYWRhcHRlciIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwiYWNjZXNzVG9rZW4iLCJtaXNzaW5nQWNjZXNzVG9rZW5FcnJvciIsInByb3RvY29sIiwic3BhY2UiLCJob3N0bmFtZSIsImRlZmF1bHRIb3N0bmFtZSIsInBvcnQiLCJob3N0IiwicGFyc2VkIiwiX3BhcnNlZCIsIkJvb2xlYW4iLCJiYXNlVVJMIiwiQXV0aG9yaXphdGlvbiIsImF4aW9zT3B0aW9ucyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzdHJpbmdpZnkiLCJyZXNwb25zZUxvZ2dlciIsInJlcXVlc3RMb2dnZXIiLCJpbnN0YW5jZSIsImh0dHBDbGllbnRQYXJhbXMiLCJjbG9uZVdpdGhOZXdQYXJhbXMiLCJuZXdQYXJhbXMiLCJvbkJlZm9yZVJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0IiwidXNlIiwiZ2V0VG9rZW4iLCJ0aGVuIiwiYXN5bmNUb2tlbiIsImF4aW9zSW5zdGFuY2UiLCJfYXhpb3NJbnN0YW5jZSRkZWZhdWwiLCJpc0NhbGN1bGF0ZWQiLCJyZXF1ZXN0SW50ZXJjZXB0b3JJZCIsInJlamVjdCIsInJlc3BvbnNlSW50ZXJjZXB0b3JJZCIsInJlc3BvbnNlIiwicmF3TGltaXQiLCJuZXh0TGltaXQiLCJlamVjdCIsInJhdGVMaW1pdFRocm90dGxlIiwibWF4UmV0cnkiLCJfaW5zdGFuY2UkZGVmYXVsdHMiLCJfaW5zdGFuY2UkZGVmYXVsdHMkcmUiLCJfaW5zdGFuY2UkZGVmYXVsdHMkcmUyIiwiZG9uZUF0dGVtcHRzIiwicmV0cnlFcnJvclR5cGUiLCJ3YWl0Iiwic3RhdHVzIiwicmFuZG9tIiwicmF0ZUxpbWl0IiwicmV0cnlMaW1pdCIsIm9uRXJyb3IiLCJjcmVhdGVSZXF1ZXN0Q29uZmlnIiwiX3JlZiIsInF1ZXJ5IiwicmVzb2x2ZUxpbmtzIiwicGFyYW1zIiwiZGVlcEZyZWV6ZSIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIkYiLCJmIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsInN0ZXAiLCJyZXR1cm4iLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImZyZWV6ZSIsImZyZWV6ZVN5cyIsInN5cyIsImdldEJyb3dzZXJPUyIsIndpbiIsIndpbmRvdyIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwiZ2V0VXNlckFnZW50SGVhZGVyIiwic2RrIiwiYXBwbGljYXRpb24iLCJpbnRlZ3JhdGlvbiIsImZlYXR1cmUiLCJoZWFkZXJQYXJ0cyIsInByb2R1Y3QiLCJwbGF0Zm9ybU1hcCIsImFuZHJvaWQiLCJhaXgiLCJkYXJ3aW4iLCJmcmVlYnNkIiwibGludXgiLCJvcGVuYnNkIiwic3Vub3MiLCJ3aW4zMiIsImdldE5vZGVPUyIsInRvUGxhaW5PYmplY3QiLCJpbnRlcmxlYXZlIiwic3RyaW5ncyIsImludGVycG9sYXRpb25zIiwiY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsImNyZWF0ZUNsYXNzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJpbmhlcml0cyIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJpc1BsYWluT2JqZWN0IiwiRU1QVFlfQVJSQVkiLCJFTVBUWV9PQkpFQ1QiLCJnZXRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJpc1N0eWxlZENvbXBvbmVudCIsInN0eWxlZENvbXBvbmVudElkIiwiU0NfQVRUUiIsImVudiIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiSVNfQlJPV1NFUiIsIkRJU0FCTEVfU1BFRURZIiwiU0NfRElTQUJMRV9TUEVFRFkiLCJSRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkiLCJTVEFUSUNfRVhFQ1VUSU9OX0NPTlRFWFQiLCJTdHlsZWRDb21wb25lbnRzRXJyb3IiLCJfRXJyb3IiLCJjb2RlIiwiX2xlbiIsIl9rZXkiLCJTQ19DT01QT05FTlRfSUQiLCJleHRyYWN0Q29tcHMiLCJtYXliZUNTUyIsImNzcyIsImV4aXN0aW5nQ29tcG9uZW50cyIsImNvbXBvbmVudElkIiwibWF0Y2hJbmRleCIsIm5leHRDb21wIiwiY3NzRnJvbURPTSIsIkNPTU1FTlRfUkVHRVgiLCJzdHlsaXNTcGxpdHRlciIsImdsb2JhbCIsImNhc2NhZGUiLCJrZXlmcmFtZSIsImNvbXByZXNzIiwic2VtaWNvbG9uIiwic3R5bGlzIiwicGFyc2luZ1J1bGVzIiwicmV0dXJuUnVsZXNQbHVnaW4iLCJjb250ZXh0IiwicGFyc2VkUnVsZXMiLCJwYXJzZVJ1bGVzUGx1Z2luIiwicnVsZSIsIl9jb21wb25lbnRJZCIsIl9zZWxlY3RvciIsIl9zZWxlY3RvclJlZ2V4cCIsInNlbGZSZWZlcmVuY2VSZXBsYWNlciIsInNlbGVjdG9ycyIsImxhc3RJbmRleE9mIiwic3BsaXRCeVJ1bGVzIiwic3RyaW5naWZ5UnVsZXMiLCJydWxlcyIsInNlbGVjdG9yIiwiZmxhdENTUyIsImNzc1N0ciIsImdldE5vbmNlIiwiYWRkTmFtZUZvcklkIiwiaWQiLCJyZXNldElkTmFtZXMiLCJoYXNOYW1lRm9ySWQiLCJzdHJpbmdpZnlOYW1lcyIsInRyaW0iLCJzaGVldEZvclRhZyIsInRhZyIsInNoZWV0Iiwic2l6ZSIsIm93bmVyRG9jdW1lbnQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNhZmVJbnNlcnRSdWxlIiwiY3NzUnVsZSIsIm1heEluZGV4IiwiY3NzUnVsZXMiLCJpbnNlcnRSdWxlIiwibWFrZVRleHRNYXJrZXIiLCJhZGRVcFVudGlsSW5kZXgiLCJzaXplcyIsInRvdGFsVXBUb0luZGV4Iiwid3JhcEFzSHRtbFRhZyIsImFkZGl0aW9uYWxBdHRycyIsIm5vbmNlIiwiU0NfVkVSU0lPTl9BVFRSIiwid3JhcEFzRWxlbWVudCIsIl9wcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImdldElkc0Zyb21NYXJrZXJzRmFjdG9yeSIsIm1hcmtlcnMiLCJtYWtlVGV4dE5vZGUiLCJ0YXJnZXREb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwibWFrZVNlcnZlclRhZyIsIm5hbWVzQXJnIiwibWFya2Vyc0FyZyIsImluc2VydE1hcmtlciIsInByZXYiLCJjc3NGb3JJZCIsIm5hbWVzQ2xvbmUiLCJjbG9uZU5hbWVzIiwibWFya2Vyc0Nsb25lIiwiZ2V0SWRzIiwiaW5zZXJ0UnVsZXMiLCJyZW1vdmVSdWxlcyIsIm1hcmtlciIsInNlYWxlZCIsInN0eWxlVGFnIiwidG9FbGVtZW50IiwidG9IVE1MIiwibWFrZVRhZyIsInRhZ0VsIiwiZm9yY2VTZXJ2ZXIiLCJpbnNlcnRCZWZvcmUiLCJnZXRJbXBvcnRSdWxlVGFnIiwiZWwiLCJkb2N1bWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsIm5leHRTaWJsaW5nIiwibWFrZVN0eWxlVGFnIiwiZXh0cmFjdEltcG9ydCIsInVzZWRJbXBvcnRSdWxlVGFnIiwiaW1wb3J0UnVsZXMiLCJjc3NSdWxlc1NpemUiLCJtYXlIYXZlSW1wb3J0IiwiYXBwZW5kRGF0YSIsIm5ld01hcmtlciIsInJlcGxhY2VDaGlsZCIsIm1ha2VCcm93c2VyVGFnIiwiZW5kIiwiY3NzVGV4dCIsImluc2VydEluZGV4IiwiaW5qZWN0ZWRSdWxlcyIsImlzQ29ubmVjdGVkIiwicmVtb3ZhbEluZGV4IiwibG93ZXJCb3VuZCIsImRlbGV0ZVJ1bGUiLCJkZWxldGVSdWxlcyIsIm1ha2VTcGVlZHlUYWciLCJTUExJVF9SRUdFWCIsIk1BWF9TSVpFIiwic2hlZXRSdW5uaW5nSWQiLCJtYXN0ZXIiLCJTdHlsZVNoZWV0IiwiaGVhZCIsImltcG9ydFJ1bGVUYWciLCJmaXJzdFRhZyIsInRhZ3MiLCJ0YWdNYXAiLCJkZWZlcnJlZCIsInJlaHlkcmF0ZWROYW1lcyIsImlnbm9yZVJlaHlkcmF0ZWROYW1lcyIsImNhcGFjaXR5IiwiY2xvbmVzIiwicmVoeWRyYXRlIiwiZWxzIiwiZXh0cmFjdGVkIiwiaXNTdHJlYW1lZCIsIm5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGVzU2l6ZSIsImdldEF0dHJpYnV0ZSIsImVsTmFtZXMiLCJlbE5hbWVzU2l6ZSIsInRleHRDb250ZW50IiwiZXh0cmFjdGVkU2l6ZSIsIl9leHRyYWN0ZWQkaSIsInJlbW92ZUNoaWxkIiwiX2oiLCJyZXNldCIsImlkcyIsIm5ld1RhZyIsInNlYWxBbGxUYWdzIiwibGFzdEVsIiwiZ2V0VGFnRm9ySWQiLCJoYXNJZCIsImRlZmVycmVkSW5qZWN0IiwiaW5qZWN0IiwicmVtb3ZlIiwidG9SZWFjdEVsZW1lbnRzIiwiS2V5ZnJhbWVzIiwic3R5bGVTaGVldCIsImdldE5hbWUiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiaHlwaGVuYXRlU3R5bGVOYW1lIiwiaXNGYWxzaXNoIiwiY2h1bmsiLCJvYmpUb0Nzc0FycmF5IiwicHJldktleSIsImZsYXR0ZW4iLCJleGVjdXRpb25Db250ZXh0IiwicnVsZVNldCIsImlzUmVhY3RDb21wb25lbnQiLCJzdHlsZXMiLCJtdXJtdXJoYXNoIiwiY2hhckNvZGVBdCIsImdldEFscGhhYmV0aWNDaGFyIiwiZnJvbUNoYXJDb2RlIiwiZ2VuZXJhdGVBbHBoYWJldGljTmFtZSIsImlzU3RhdGljUnVsZXMiLCJhdHRycyIsImhhc0Z1bmN0aW9uT2JqZWN0S2V5IiwiX1RZUEVfU1RBVElDUyIsImhhc2hlciIsIkNvbXBvbmVudFN0eWxlIiwiaXNTdGF0aWMiLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsImxhc3RDbGFzc05hbWUiLCJnZW5lcmF0ZU5hbWUiLCJkZXRlcm1pbmVUaGVtZSIsImZhbGxiYWNrVGhlbWUiLCJkZWZhdWx0UHJvcHMiLCJpc0RlZmF1bHRUaGVtZSIsInRoZW1lIiwiZXNjYXBlUmVnZXgiLCJkYXNoZXNBdEVuZHMiLCJlc2NhcGUiLCJpc1RhZyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIlRZUEVfU1RBVElDUyIsIiQkdHlwZW9mIiwicmVuZGVyIiwiZGVmaW5lUHJvcGVydHkkMSIsIl9PYmplY3QkZ2V0T3duUHJvcGVydCIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiYXJyYXlQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiVGhlbWVDb250ZXh0IiwiVGhlbWVDb25zdW1lciIsIkNvbnN1bWVyIiwiU3R5bGVTaGVldENvbnRleHQiLCJfQ29tcG9uZW50IiwiVGhlbWVQcm92aWRlciIsImdldENvbnRleHQiLCJyZW5kZXJJbm5lciIsImNoaWxkcmVuIiwib3V0ZXJUaGVtZSIsIlByb3ZpZGVyIiwiZ2V0VGhlbWUiLCJTZXJ2ZXJTdHlsZVNoZWV0IiwibWFzdGVyU2hlZXQiLCJzZWFsIiwic3BsaWNlIiwiY29sbGVjdFN0eWxlcyIsIlN0eWxlU2hlZXRNYW5hZ2VyIiwiZ2V0U3R5bGVUYWdzIiwiZ2V0U3R5bGVFbGVtZW50IiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwicmVhZGFibGVTdHJlYW0iLCJTdHlsZVNoZWV0Q29uc3VtZXIiLCJpZGVudGlmaWVycyIsIlN0eWxlZENvbXBvbmVudCIsInJlbmRlck91dGVyIiwiZm9yd2FyZGVkQ29tcG9uZW50IiwiY29tcG9uZW50U3R5bGUiLCJfcHJvcHMkZm9yd2FyZGVkQ29tcG8iLCJmb2xkZWRDb21wb25lbnRJZHMiLCJnZW5lcmF0ZWRDbGFzc05hbWUiLCJlbGVtZW50VG9CZUNyZWF0ZWQiLCJpc1RhcmdldFRhZyIsInByb3BzRm9yRWxlbWVudCIsImNvbXB1dGVkUHJvcHMiLCJyZWYiLCJzdHlsZSIsImNsYXNzTmFtZSIsImJ1aWxkRXhlY3V0aW9uQ29udGV4dCIsIl90aGlzMiIsImF0dHJEZWYiLCJyZXNvbHZlZEF0dHJEZWYiLCJhdHRyRGVmV2FzRm4iLCJhdHRyIiwiX3Byb3BzJGZvcndhcmRlZENvbXBvMiIsIndhcm5Ub29NYW55Q2xhc3NlcyIsImNyZWF0ZVN0eWxlZENvbXBvbmVudCIsImlzVGFyZ2V0U3R5bGVkQ29tcCIsImlzQ2xhc3MiLCJfb3B0aW9ucyRkaXNwbGF5TmFtZSIsImdlbmVyYXRlRGlzcGxheU5hbWUiLCJfb3B0aW9ucyRjb21wb25lbnRJZCIsIl9Db21wb25lbnRTdHlsZSIsIl9kaXNwbGF5TmFtZSIsInBhcmVudENvbXBvbmVudElkIiwibnIiLCJnZW5lcmF0ZUlkIiwiX29wdGlvbnMkUGFyZW50Q29tcG9uIiwiUGFyZW50Q29tcG9uZW50IiwiX29wdGlvbnMkYXR0cnMiLCJmaW5hbEF0dHJzIiwiV3JhcHBlZFN0eWxlZENvbXBvbmVudCIsImZvcndhcmRSZWYiLCJmb3J3YXJkZWRSZWYiLCJ3aXRoQ29tcG9uZW50IiwicHJldmlvdXNDb21wb25lbnRJZCIsIm9wdGlvbnNUb0NvcHkiLCJvYmplY3RXaXRob3V0UHJvcGVydGllcyIsIm5ld0NvbXBvbmVudElkIiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsInN0eWxlZCIsImNvbnN0cnVjdFdpdGhPcHRpb25zIiwiY29tcG9uZW50Q29uc3RydWN0b3IiLCJ0ZW1wbGF0ZUZ1bmN0aW9uIiwid2l0aENvbmZpZyIsImRvbUVsZW1lbnQiLCJHbG9iYWxTdHlsZSIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsImNyZWF0ZUdsb2JhbFN0eWxlIiwiSlNPTiIsIkdsb2JhbFN0eWxlQ29tcG9uZW50IiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzJGNvbnN0cnVjdG9yIiwiZ2xvYmFsU3R5bGUiLCJzY0NHU0hNUkNhY2hlIiwic3RhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkNvbXBvbmVudCIsInRvU3RyaW5nRnVuY3Rpb24iLCJnZXRQcm90b3R5cGVPZiQxIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJTWU1CT0xfUFJPUEVSVElFUyIsIldFQUtfTUFQIiwiY3JlYXRlQ2FjaGUiLCJDYWNoZSIsIl9rZXlzIiwiX3ZhbHVlcyIsImhhcyIsImdldENsZWFuQ2xvbmUiLCJyZWFsbSIsImdldE9iamVjdENsb25lTG9vc2UiLCJoYW5kbGVDb3B5IiwiY2FjaGUiLCJsZW5ndGhfMSIsInN5bWJvbCIsImdldE9iamVjdENsb25lU3RyaWN0IiwibGVuZ3RoXzIiLCJHTE9CQUxfVEhJUyIsImdsb2JhbFRoaXMiLCJjb3B5IiwiZ2V0T2JqZWN0Q2xvbmUiLCJyZWdFeHAiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIk1hcCIsIlNldCIsIkJsb2IiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImFsbG9jVW5zYWZlIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJXZWFrU2V0IiwiZGVmYXVsdCIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwidGhpc0FyZyIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJhY3RlciIsImZyb21Db2RlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwidG9Qcm9wZXJ0eUtleSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9uZXh0IiwiX3Rocm93IiwibGVmdCIsInJpZ2h0IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImFyZ3YiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsInRyYW5zZm9ybSIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwiZ2V0UHJvdG90eXBlIiwiaXNPYmplY3RMaWtlIiwiaXNIb3N0T2JqZWN0IiwiQ3RvciIsIm1hcFNpemVEZXNjcmlwdG9yIiwiaGFzTWFwIiwibWFwU2l6ZSIsIm1hcEZvckVhY2giLCJoYXNTZXQiLCJzZXRTaXplRGVzY3JpcHRvciIsInNldFNpemUiLCJzZXRGb3JFYWNoIiwid2Vha01hcEhhcyIsIndlYWtTZXRIYXMiLCJ3ZWFrUmVmRGVyZWYiLCJXZWFrUmVmIiwiZGVyZWYiLCJib29sZWFuVmFsdWVPZiIsImZ1bmN0aW9uVG9TdHJpbmciLCIkbWF0Y2giLCIkc2xpY2UiLCIkcmVwbGFjZSIsIiR0b1VwcGVyQ2FzZSIsIiR0b0xvd2VyQ2FzZSIsIiR0ZXN0IiwiJGNvbmNhdCIsIiRqb2luIiwiJGFyclNsaWNlIiwiJGZsb29yIiwiYmlnSW50VmFsdWVPZiIsIkJpZ0ludCIsImdPUFMiLCJzeW1Ub1N0cmluZyIsImhhc1NoYW1tZWRTeW1ib2xzIiwiaXNFbnVtZXJhYmxlIiwiZ1BPIiwiUmVmbGVjdCIsIk8iLCJhZGROdW1lcmljU2VwYXJhdG9yIiwibnVtIiwiSW5maW5pdHkiLCJzZXBSZWdleCIsImludCIsImludFN0ciIsImRlYyIsInV0aWxJbnNwZWN0IiwiaW5zcGVjdEN1c3RvbSIsImN1c3RvbSIsImluc3BlY3RTeW1ib2wiLCJpc1N5bWJvbCIsInF1b3RlcyIsInNpbmdsZSIsInF1b3RlUkVzIiwid3JhcFF1b3RlcyIsImRlZmF1bHRTdHlsZSIsIm9wdHMiLCJxdW90ZVN0eWxlIiwicXVvdGVDaGFyIiwicXVvdGUiLCJjYW5UcnVzdFRvU3RyaW5nIiwidG9TdHIiLCJpc1JlZ0V4cCIsImluc3BlY3RfIiwiZGVwdGgiLCJzZWVuIiwibWF4U3RyaW5nTGVuZ3RoIiwiY3VzdG9tSW5zcGVjdCIsImluZGVudCIsIm51bWVyaWNTZXBhcmF0b3IiLCJpbnNwZWN0U3RyaW5nIiwicmVtYWluaW5nIiwidHJhaWxlciIsInF1b3RlUkUiLCJsb3dieXRlIiwiYmlnSW50U3RyIiwibWF4RGVwdGgiLCJiYXNlSW5kZW50IiwiZ2V0SW5kZW50Iiwibm9JbmRlbnQiLCJuZXdPcHRzIiwibmFtZU9mIiwiYXJyT2JqS2V5cyIsInN5bVN0cmluZyIsIm1hcmtCb3hlZCIsIkhUTUxFbGVtZW50Iiwibm9kZU5hbWUiLCJpc0VsZW1lbnQiLCJhdHRyaWJ1dGVzIiwiY2hpbGROb2RlcyIsInhzIiwic2luZ2xlTGluZVZhbHVlcyIsImluZGVudGVkSm9pbiIsImlzRXJyb3IiLCJjYXVzZSIsImlzTWFwIiwibWFwUGFydHMiLCJjb2xsZWN0aW9uT2YiLCJpc1NldCIsInNldFBhcnRzIiwiaXNXZWFrTWFwIiwid2Vha0NvbGxlY3Rpb25PZiIsImlzV2Vha1NldCIsImlzV2Vha1JlZiIsIk51bWJlciIsImlzQmlnSW50IiwiaXNCb29sZWFuIiwieXMiLCJwcm90b1RhZyIsInN0cmluZ1RhZyIsImhhc093biIsIjgiLCI5IiwiMTAiLCIxMiIsIjEzIiwiZW50cmllcyIsImxpbmVKb2luZXIiLCJpc0FyciIsInN5bU1hcCIsInN5bXMiLCJpbXBsZW1lbnRhdGlvbiIsInZpc2l0IiwidmlzaXRQYXJlbnRzIiwiQ09OVElOVUUiLCJTS0lQIiwiRVhJVCIsInRyZWUiLCJ2aXNpdG9yIiwicmV2ZXJzZSIsInBhcmVudHMiLCJwYXJlbnQiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0IiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCIkT2JqZWN0IiwiJEVycm9yIiwiJEV2YWxFcnJvciIsIiRSYW5nZUVycm9yIiwiJFJlZmVyZW5jZUVycm9yIiwiJFN5bnRheEVycm9yIiwiJFR5cGVFcnJvciIsIiRVUklFcnJvciIsIiRGdW5jdGlvbiIsImdldEV2YWxsZWRDb25zdHJ1Y3RvciIsImV4cHJlc3Npb25TeW50YXgiLCIkZ09QRCIsIiRkZWZpbmVQcm9wZXJ0eSIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWVUaHJvd3MiLCJnT1BEdGhyb3dzIiwiaGFzU3ltYm9scyIsImdldFByb3RvIiwiJE9iamVjdEdQTyIsIiRSZWZsZWN0R1BPIiwiJGFwcGx5IiwiJGNhbGwiLCJuZWVkc0V2YWwiLCJUeXBlZEFycmF5IiwiVWludDhBcnJheSIsIklOVFJJTlNJQ1MiLCJBZ2dyZWdhdGVFcnJvciIsIkF0b21pY3MiLCJCaWdJbnQ2NEFycmF5IiwiQmlnVWludDY0QXJyYXkiLCJEYXRhVmlldyIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsImV2YWwiLCJGbG9hdDE2QXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJGaW5hbGl6YXRpb25SZWdpc3RyeSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiUHJveHkiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsImVycm9yUHJvdG8iLCJMRUdBQ1lfQUxJQVNFUyIsIiRzcGxpY2VBcHBseSIsIiRzdHJTbGljZSIsIiRleGVjIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsImZpcnN0IiwibGFzdCIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJhbGxvd01pc3NpbmciLCJpbnRyaW5zaWNOYW1lIiwiZG9FdmFsIiwiZ2VuIiwiaW50cmluc2ljQmFzZU5hbWUiLCJpbnRyaW5zaWMiLCJpbnRyaW5zaWNSZWFsTmFtZSIsInNraXBGdXJ0aGVyQ2FjaGluZyIsImlzT3duIiwicGFydCIsImRlc2MiLCJwZXJjZW50VHdlbnRpZXMiLCJGb3JtYXQiLCJmb3JtYXR0ZXJzIiwiUkZDMTczOCIsIlJGQzM5ODYiLCJsZWdhY3kiLCJkZWNpbWFsIiwiaGV4YWRlY2ltYWwiLCJhbHBoYW51bWVyaWNhbCIsImRlY29kZUVudGl0eSIsIm9wdGlvbiIsInNldHRpbmdzIiwicG9zaXRpb24iLCJzdGFydCIsImVudGl0eUNoYXJhY3RlcnMiLCJuYW1lZEVudGl0eSIsInRlcm1pbmF0ZWQiLCJjaGFyYWN0ZXJzIiwicmVmZXJlbmNlIiwiZm9sbG93aW5nIiwid2FybmluZyIsInJlYXNvbiIsImVudGl0eSIsImJlZ2luIiwiYWRkaXRpb25hbCIsIm5vblRlcm1pbmF0ZWQiLCJoYW5kbGVUZXh0IiwidGV4dCIsImhhbmRsZVJlZmVyZW5jZSIsImhhbmRsZVdhcm5pbmciLCJ0ZXh0Q29udGV4dCIsInJlZmVyZW5jZUNvbnRleHQiLCJ3YXJuaW5nQ29udGV4dCIsImxpbmVzIiwiY29sdW1uIiwibGluZSIsIm1lc3NhZ2VzIiwiaGV4YSIsInRlc3RzIiwib3duIiwiYXR0cmlidXRlIiwiYmFzZXMiLCJkaXNhbGxvd2VkIiwiZmx1c2giLCJwYXJzZSIsImludGVycnVwdG9ycyIsInRva2VuaXplcnMiLCJjdHgiLCJpbnRlcnJ1cHRvciIsImJvb2wiLCJpZ25vcmUiLCJib29scyIsImNvdW50IiwiY29sbGFwc2VXaGl0ZVNwYWNlIiwiX2dldFByb3RvdHlwZU9mIiwiQSIsIkMiLCJ2IiwiJCIsInoiLCJOIiwiUyIsInEiLCJCIiwiSSIsIkoiLCJUIiwiVSIsIlYiLCJaIiwiYmUiLCJwZSIsImtlIiwiZ2UiLCJBZSIsIkNlIiwid2UiLCJ2ZSIsIm1lIiwieGUiLCIkZSIsInllIiwiT2UiLCJxZSIsIkJlIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJSIiwiamUiLCJ6ZSIsIkplIiwiUmUiLCJUZSIsIlVlIiwiVmUiLCJYZSIsIlllIiwiUWUiLCJzdWJzdHJpbmciLCJQZSIsIkllIiwiTWUiLCJMZSIsIktlIiwic2FmZUlzTmFOIiwiYXJlSW5wdXRzRXF1YWwiLCJuZXdJbnB1dHMiLCJsYXN0SW5wdXRzIiwicmVzdWx0Rm4iLCJpc0VxdWFsIiwibGFzdFRoaXMiLCJsYXN0UmVzdWx0IiwibGFzdEFyZ3MiLCJjYWxsZWRPbmNlIiwibmV3QXJncyIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0b1ByaW1pdGl2ZSIsInJlZ2VuZXJhdG9yRGVmaW5lIiwiX3JlZ2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiRyIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJfcmVnZW5lcmF0b3JEZWZpbmUiLCJfaW52b2tlIiwicmVnZW5lcmF0b3IiLCJyZWdlbmVyYXRvckFzeW5jSXRlcmF0b3IiLCJPdmVybG9hZFlpZWxkIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJ1dGlscyIsImVuY29kZSIsInVybCIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsIlhNTEh0dHBSZXF1ZXN0IiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwibWV0aG9kIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJidG9hIiwiZnVsbFBhdGgiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImRpcmVjdE1lcmdlS2V5cyIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIkNhbmNlbCIsIkdldEludHJpbnNpYyIsImNhbGxCb3VuZCIsIiRNYXAiLCIkbWFwR2V0IiwiJG1hcFNldCIsIiRtYXBIYXMiLCIkbWFwRGVsZXRlIiwiJG1hcFNpemUiLCIkbSIsImNoYW5uZWwiLCJhc3NlcnQiLCIkYWN0dWFsQXBwbHkiLCJjYWxsQmluZEJhc2ljIiwiJGluZGV4T2YiLCJoZXhUYWJsZSIsImFycmF5VG9PYmplY3QiLCJwbGFpbk9iamVjdHMiLCJhY2MiLCJjb21iaW5lIiwiY29tcGFjdCIsInJlZnMiLCJwb3AiLCJjb21wYWN0ZWQiLCJjb21wYWN0UXVldWUiLCJkZWNvZGUiLCJkZWZhdWx0RGVjb2RlciIsImNoYXJzZXQiLCJzdHJXaXRob3V0UGx1cyIsImRlZmF1bHRFbmNvZGVyIiwia2luZCIsIiQwIiwic2VnbWVudCIsIm1heWJlTWFwIiwibWFwcGVkIiwiYWxsb3dQcm90b3R5cGVzIiwibWVyZ2VUYXJnZXQiLCJ0YXJnZXRJdGVtIiwibW9tZW50Iiwic3ltYm9sTWFwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjAiLCJudW1iZXJNYXAiLCJwbHVyYWxGb3JtIiwicGx1cmFscyIsInBsdXJhbGl6ZSIsIndlZWtkYXlzUGFyc2VFeGFjdCIsInN1ZmZpeGVzIiwiNzAiLCI4MCIsIjIwIiwiNTAiLCIxMDAiLCIzMCIsIjYwIiwiOTAiLCJyZWxhdGl2ZVRpbWVXaXRoUGx1cmFsIiwiZm9ybXMiLCJzdGFuZGFsb25lIiwibGFzdERpZ2l0IiwibGFzdDJEaWdpdHMiLCJtb250aHNQYXJzZUV4YWN0IiwicmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uIiwibXV0YXRpb25UYWJsZSIsInNvZnRNdXRhdGlvbiIsIm11dGF0aW9uIiwibWluV2Vla2RheXNQYXJzZSIsImZ1bGxXZWVrZGF5c1BhcnNlIiwic2hvcnRXZWVrZGF5c1BhcnNlIiwibW9udGhzU3RyaWN0UmVnZXgiLCJtb250aHNTaG9ydFN0cmljdFJlZ2V4IiwibG9uZ01vbnRoc1BhcnNlIiwic2hvcnRNb250aHNQYXJzZSIsImxhc3ROdW1iZXIiLCJ0cmFuc2xhdGUiLCJsbCIsImxsbCIsImxsbGwiLCJwbHVyYWwiLCJwcm9jZXNzUmVsYXRpdmVUaW1lIiwibW9udGhzTm9taW5hdGl2ZUVsIiwibW9udGhzR2VuaXRpdmVFbCIsIm1vbWVudFRvRm9ybWF0IiwiX21vbnRoc0dlbml0aXZlRWwiLCJfbW9udGhzTm9taW5hdGl2ZUVsIiwiY2FsZW5kYXJFbCIsIl9jYWxlbmRhckVsIiwibW9udGhzU2hvcnREb3QiLCJudW1iZXJzUGFzdCIsIm51bWJlcnNGdXR1cmUiLCJ2ZXJiYWxOdW1iZXIiLCJtb250aHNTaG9ydFdpdGhEb3RzIiwibW9udGhzU2hvcnRXaXRob3V0RG90cyIsIndlZWtFbmRpbmdzIiwiZXJhWWVhck9yZGluYWxSZWdleCIsIiQxIiwiJDIiLCI0MCIsImlzVXBwZXIiLCJpbmNsdWRlcyIsImV6YWZlTnVtU3VmZml4IiwiZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyIiwidHJhbnNsYXRlU2luZ3VsYXIiLCJzcGVjaWFsIiwicmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyIiwidHJhbnNsYXRvciIsIndvcmRzIiwiY29ycmVjdEdyYW1tYXRpY2FsQ2FzZSIsIndvcmRLZXkiLCJyZWxhdGl2ZVRpbWVNciIsIm1vbnRoc05vbWluYXRpdmUiLCJtb250aHNTdWJqZWN0aXZlIiwid29yZCIsIm51bWJlcnNOb3VucyIsIm51bWJlck5vdW4iLCJodW5kcmVkIiwidGVuIiwib25lIiwibnVtYmVyQXNOb3VuIiwicHJvY2Vzc0hvdXJzRnVuY3Rpb24iLCJub21pbmF0aXZlIiwiYWNjdXNhdGl2ZSIsImdlbml0aXZlIiwibm9ybWFsaXplQXJyYXkiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwidW5zaGlmdCIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJwYXRoIiwibm9ybWFsaXplIiwiaXNBYnNvbHV0ZSIsInRyYWlsaW5nU2xhc2giLCJwYXRocyIsInJlbGF0aXZlIiwiZnJvbVBhcnRzIiwidG9QYXJ0cyIsInNhbWVQYXJ0c0xlbmd0aCIsIm91dHB1dFBhcnRzIiwic2VwIiwiZGVsaW1pdGVyIiwiZGlybmFtZSIsImhhc1Jvb3QiLCJtYXRjaGVkU2xhc2giLCJiYXNlbmFtZSIsImV4dCIsImV4dG5hbWUiLCJzdGFydERvdCIsInN0YXJ0UGFydCIsInByZURvdFN0YXRlIiwiZ2ZtIiwiY29tbW9ubWFyayIsImZvb3Rub3RlcyIsInBlZGFudGljIiwiYmxvY2tzIiwic3RvcHMiLCJvcGVuVGFnIiwiY2xvc2VUYWciLCJvcGVuQ2xvc2VUYWciLCJmcm9tSW5kZXgiLCJsaW5rIiwiaW1hZ2UiLCJfZGVmaW5lUHJvcGVydGllcyIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsInRvU2hlZXQiLCJibG9jayIsImF0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJXZWJraXRMaW5lQ2xhbXAiLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJBYm9ydEVycm9yIiwic3VwZXIiLCJjdXJyZW50VGljayIsImFjdGl2ZUNvdW50Iiwic3RyaWN0VGlja3MiLCJnZXREZWxheSIsImVhcmxpZXN0VGltZSIsImZ1bmN0aW9uXyIsInRocm90dGxlZCIsImlzRW5hYmxlZCIsImRlbGV0ZSIsImNsZWFyIiwic2VyaWFsaXplciIsInJlcGxhY2VyIiwiY3ljbGVSZXBsYWNlciIsInRoaXNQb3MiLCJzcGFjZXMiLCJnZXRTZXJpYWxpemUiLCJ0b1N0cmluZ09iamVjdCIsIkxlZ2FjeUNhY2hlIiwiZ2V0UmVnRXhwRmxhZ3MiLCJnZXRUYWdMZWdhY3kiLCJnZXRUYWciLCJTVVBQT1JUU19TWU1CT0wiLCJnZXRTdHJpY3RQcm9wZXJ0aWVzIiwiY29weU93blByb3BlcnRpZXNTdHJpY3QiLCJjb3BpZXIiLCJjb3B5QXJyYXlCdWZmZXIiLCJhcnJheUJ1ZmZlciIsIl9zdGF0ZSIsImNvcHlNYXBMb29zZSIsImNvcHlPYmplY3RMb29zZSIsImxlbmd0aF8zIiwiY29weVByaW1pdGl2ZVdyYXBwZXIiLCJwcmltaXRpdmVPYmplY3QiLCJjb3B5U2VsZiIsImNvcHlTZXRMb29zZSIsIkRFRkFVTFRfTE9PU0VfT1BUSU9OUyIsImJsb2IiLCJkYXRhVmlldyIsIkRFRkFVTFRfU1RSSUNUX09QVElPTlMiLCJjcmVhdGVDb3BpZXIiLCJ0YWdTcGVjaWZpY0NvcGllcnMiLCJBcmd1bWVudHMiLCJVaW50NjRBcnJheSIsImdldFRhZ1NwZWNpZmljQ29waWVycyIsInRhZ1NwZWNpZmljQ29waWVyIiwiY3JlYXRlU3RyaWN0Q29waWVyIiwiY29weVN0cmljdCIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwieHRlbmQiLCJ1bmlmaWVkIiwiUHJvcFR5cGVzIiwiYWRkTGlzdE1ldGFkYXRhIiwibmFpdmVIdG1sIiwiZGlzYWxsb3dOb2RlIiwiYXN0VG9SZWFjdCIsIndyYXBUYWJsZVJvd3MiLCJnZXREZWZpbml0aW9ucyIsInVyaVRyYW5zZm9ybWVyIiwiZGVmYXVsdFJlbmRlcmVycyIsImFsbFR5cGVzIiwiUmVhY3RNYXJrZG93biIsInNyYyIsInBhcnNlck9wdGlvbnMiLCJhbGxvd2VkVHlwZXMiLCJkaXNhbGxvd2VkVHlwZXMiLCJyZW5kZXJlcnMiLCJwYXJzZXIiLCJwbHVnaW5zIiwiYXBwbHlQYXJzZXJQbHVnaW4iLCJyYXdBc3QiLCJyZW5kZXJQcm9wcyIsImRlZmluaXRpb25zIiwiYXN0UGx1Z2lucyIsInJlbW92YWxNZXRob2QiLCJ1bndyYXBEaXNhbGxvd2VkIiwib2ZUeXBlIiwiYWxsb3dOb2RlIiwiaWZOb3RNYXRjaCIsInJlbmRlckh0bWwiLCJlc2NhcGVIdG1sIiwic2tpcEh0bWwiLCJoYXNIdG1sUGFyc2VyIiwiaWRlbnRpdHkiLCJIdG1sUGFyc2VyIiwiZGV0ZXJtaW5lQXN0UGx1Z2lucyIsInRyYW5zZm9ybWVkQXN0IiwicnVuU3luYyIsImFzdCIsInBsdWdpbiIsInNvdXJjZVBvcyIsInJhd1NvdXJjZVBvcyIsInRyYW5zZm9ybUxpbmtVcmkiLCJhcnJheU9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJsaW5rVGFyZ2V0IiwidHJhbnNmb3JtSW1hZ2VVcmkiLCJ0eXBlcyIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwicmVhY3RQcm9wc1JlZ2V4IiwiZ2V0VHlwZSIsInBheWxvYWQiLCJpc051bGwiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiamwiLCJhc3NpZ25Qcm9wIiwiY2FycnkiLCJuZXdWYWwiLCJvcmlnaW5hbE9iamVjdCIsInByb3BUeXBlIiwibWVyZ2VSZWN1cnNpdmVseSIsIm9yaWdpbiIsIm5ld0NvbWVyIiwiZXh0ZW5zaW9ucyIsIm5ld09iamVjdCIsInRhcmdldFZhbCIsIm5ld0NvbWVycyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJ1cGRhdGVyIiwiSCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImN1cnJlbnQiLCJLIiwiX19zZWxmIiwiX19zb3VyY2UiLCJfb3duZXIiLCJQIiwia2V5UHJlZml4IiwiYWEiLCJYIiwiWSIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsImNvbXBhcmUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzTWVtbyIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJyZWdlbmVyYXRvckFzeW5jIiwicmVnZW5lcmF0b3JBc3luY0dlbiIsInJlZ2VuZXJhdG9yS2V5cyIsInJlZ2VuZXJhdG9yVmFsdWVzIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsInN0b3AiLCJhYnJ1cHQiLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsImZpbmlzaCIsIl90Iiwic2VudCIsIndyYXAiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJjaGFpbiIsImludGVyY2VwdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJoYW5kbGVycyIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImZucyIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiaWdub3JlRHVwbGljYXRlT2YiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNlYXJjaCIsImhhc2giLCJwYXRobmFtZSIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJnZXRTaWRlQ2hhbm5lbCIsImFycmF5UHJlZml4R2VuZXJhdG9ycyIsImJyYWNrZXRzIiwiY29tbWEiLCJpbmRpY2VzIiwicmVwZWF0IiwicHVzaFRvQXJyYXkiLCJ2YWx1ZU9yQXJyYXkiLCJ0b0lTTyIsImFkZFF1ZXJ5UHJlZml4IiwiYWxsb3dEb3RzIiwiYWxsb3dFbXB0eUFycmF5cyIsImFycmF5Rm9ybWF0IiwiY2hhcnNldFNlbnRpbmVsIiwiY29tbWFSb3VuZFRyaXAiLCJlbmNvZGVEb3RJbktleXMiLCJlbmNvZGVyIiwiZW5jb2RlVmFsdWVzT25seSIsImZvcm1hdHRlciIsInNlcmlhbGl6ZURhdGUiLCJza2lwTnVsbHMiLCJzdHJpY3ROdWxsSGFuZGxpbmciLCJzZW50aW5lbCIsImdlbmVyYXRlQXJyYXlQcmVmaXgiLCJzaWRlQ2hhbm5lbCIsInRtcFNjIiwiZmluZEZsYWciLCJSYW5nZUVycm9yIiwib2JqS2V5cyIsImVuY29kZWRQcmVmaXgiLCJhZGp1c3RlZFByZWZpeCIsImVuY29kZWRLZXkiLCJ2YWx1ZVNpZGVDaGFubmVsIiwibm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyIsImpvaW5lZCIsImdldFNpZGVDaGFubmVsTGlzdCIsImdldFNpZGVDaGFubmVsTWFwIiwibWFrZUNoYW5uZWwiLCIkY2hhbm5lbERhdGEiLCJsaXN0R2V0Tm9kZSIsImxpc3QiLCJpc0RlbGV0ZSIsImN1cnIiLCIkbyIsInJvb3QiLCJkZWxldGVkTm9kZSIsIm9iamVjdHMiLCJsaXN0RGVsZXRlIiwibGlzdEdldCIsImxpc3RIYXMiLCJsaXN0U2V0IiwiRXZhbEVycm9yIiwiU3ludGF4RXJyb3IiLCJVUklFcnJvciIsIiRpc05hTiIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwic3ltT2JqIiwicmVmbGVjdEdldFByb3RvIiwib3JpZ2luYWxHZXRQcm90byIsImdldER1bmRlclByb3RvIiwiaGFzUHJvdG9BY2Nlc3NvciIsImNhbGxCaW5kIiwiZ09QRCIsIiRnZXRQcm90b3R5cGVPZiIsIkVSUk9SX01FU1NBR0UiLCJjb25jYXR0eSIsInNsaWN5IiwiYXJyTGlrZSIsImpvaW55Iiwiam9pbmVyIiwiYm91bmQiLCJiaW5kZXIiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsIkVtcHR5IiwiJHJlZmxlY3RBcHBseSIsIiRoYXNPd24iLCIkV2Vha01hcCIsIiR3ZWFrTWFwR2V0IiwiJHdlYWtNYXBTZXQiLCIkd2Vha01hcEhhcyIsIiR3ZWFrTWFwRGVsZXRlIiwiJHdtIiwiYWxsb3dTcGFyc2UiLCJhcnJheUxpbWl0IiwiZGVjb2RlRG90SW5LZXlzIiwiZGVjb2RlciIsImR1cGxpY2F0ZXMiLCJpZ25vcmVRdWVyeVByZWZpeCIsImludGVycHJldE51bWVyaWNFbnRpdGllcyIsInBhcmFtZXRlckxpbWl0IiwicGFyc2VBcnJheXMiLCJzdHJpY3REZXB0aCIsInRocm93T25MaW1pdEV4Y2VlZGVkIiwibnVtYmVyU3RyIiwicGFyc2VBcnJheVZhbHVlIiwiY3VycmVudEFycmF5TGVuZ3RoIiwicGFyc2VLZXlzIiwiZ2l2ZW5LZXkiLCJ2YWx1ZXNQYXJzZWQiLCJjaGlsZCIsInBhcmVudEtleSIsImxlYWYiLCJjbGVhblJvb3QiLCJkZWNvZGVkUm9vdCIsInBhcnNlT2JqZWN0Iiwibm9ybWFsaXplUGFyc2VPcHRpb25zIiwidGVtcE9iaiIsImNsZWFuU3RyIiwic2tpcEluZGV4IiwiYnJhY2tldEVxdWFsc1BvcyIsImVuY29kZWRWYWwiLCJleGlzdGluZyIsInBhcnNlVmFsdWVzIiwibmV3T2JqIiwid2VicGFja1BvbHlmaWxsIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJhcnJheUxpa2VUb0FycmF5IiwiYmFpbCIsInZmaWxlIiwidHJvdWdoIiwicGxhaW4iLCJhdHRhY2hlcnMiLCJ0cmFuc2Zvcm1lcnMiLCJuYW1lc3BhY2UiLCJmcm96ZW4iLCJmcmVlemVJbmRleCIsInByb2Nlc3NvciIsImFzc2VydFVuZnJvemVuIiwiYWRkUGx1Z2luIiwiYWRkTGlzdCIsImFkZFByZXNldCIsImVudHJ5IiwiZmluZCIsImRvYyIsIlBhcnNlciIsImZpbGUiLCJhc3NlcnRQYXJzZXIiLCJuZXdhYmxlIiwiQ29tcGlsZXIiLCJhc3NlcnRDb21waWxlciIsImFzc2VydE5vZGUiLCJjb21waWxlIiwiY29tcGxldGUiLCJhc3NlcnREb25lIiwicHJvY2Vzc1N5bmMiLCJkZXN0aW5hdGlvbiIsInRyYW5zZm9ybWVyIiwiY2IiLCJwaXBlbGluZSIsImNvbnRlbnRzIiwiYXN5bmNOYW1lIiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwic2V0UHJvcGVydHkiLCJuZXdWYWx1ZSIsImdldFByb3BlcnR5IiwiY29weUlzQXJyYXkiLCJkZWVwIiwiVk1lc3NhZ2UiLCJWRmlsZSIsImZpbGVQYXRoIiwiZmF0YWwiLCJpbmZvIiwiZmFpbCIsIlZNZXNzYWdlUHJvdG90eXBlIiwicmFuZ2UiLCJwYXJzZU9yaWdpbiIsInJ1bGVJZCIsInBvaW50IiwiZW5jb2RpbmciLCJoaXN0b3J5IiwiYXNzZXJ0UGFydCIsImFzc2VydE5vbkVtcHR5IiwiYXNzZXJ0UGF0aCIsInN0ZW0iLCJucGF0aCIsIm5GaWxlTmFtZSIsInJlYWRGbG9hdExFIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwibWlkZGxld2FyZSIsImludm9rZWQiLCJ1bmhlcml0IiwiTG9jYWwiLCJTdXBlciIsIk9mIiwiRnJvbSIsInBhcmFtZXRlcnMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJ0b2dnbGUiLCJ2ZmlsZUxvY2F0aW9uIiwidG9rZW5pemVyIiwic2V0T3B0aW9ucyIsImluTGlzdCIsImluQmxvY2siLCJpbkxpbmsiLCJhdFN0YXJ0IiwidG9PZmZzZXQiLCJleGl0U3RhcnQiLCJlbnRlckxpc3QiLCJlbnRlckxpbmsiLCJlbnRlckJsb2NrIiwiaW50ZXJydXB0UGFyYWdyYXBoIiwiaW50ZXJydXB0TGlzdCIsImludGVycnVwdEJsb2NrcXVvdGUiLCJibG9ja1Rva2VuaXplcnMiLCJuZXdsaW5lIiwiaW5kZW50ZWRDb2RlIiwiZmVuY2VkQ29kZSIsImJsb2NrcXVvdGUiLCJhdHhIZWFkaW5nIiwidGhlbWF0aWNCcmVhayIsInNldGV4dEhlYWRpbmciLCJodG1sIiwiZm9vdG5vdGUiLCJkZWZpbml0aW9uIiwidGFibGUiLCJwYXJhZ3JhcGgiLCJpbmxpbmVUb2tlbml6ZXJzIiwiYXV0b0xpbmsiLCJzdHJvbmciLCJlbXBoYXNpcyIsImRlbGV0aW9uIiwiYnJlYWsiLCJibG9ja01ldGhvZHMiLCJpbmxpbmVNZXRob2RzIiwidG9rZW5pemVCbG9jayIsInRva2VuaXplSW5saW5lIiwidG9rZW5pemVGYWN0b3J5Iiwib2Zmc2V0VG9Qb3NpdGlvbkZhY3RvcnkiLCJwb3NpdGlvblRvT2Zmc2V0RmFjdG9yeSIsInRvUG9zaXRpb24iLCJlbnRpdGllcyIsInJhdyIsIm9mZnNldHMiLCJoYW5kbGVyIiwiYWxwaGFiZXRpY2FsIiwiY2hhciIsImlubmVySFRNTCIsInZhbHVlTGVuZ3RoIiwibWV0aG9kcyIsImVhdCIsInVwZGF0ZVBvc2l0aW9uIiwib25seUF0U3RhcnQiLCJub3RJbkxpc3QiLCJub3RJbkJsb2NrIiwibm90SW5MaW5rIiwiZW9mIiwic3VidmFsdWUiLCJQb3NpdGlvbiIsImJlZm9yZSIsImluZGVudGF0aW9uIiwiZ2V0T2Zmc2V0IiwiY29tYmluZWQiLCJ2YWxpZGF0ZUVhdCIsIk1FUkdFQUJMRV9OT0RFUyIsIm1lcmdlYWJsZSIsImVzY2FwZXMiLCJyZW1vdmVQb3NpdGlvbiIsIkVYUFJFU1NJT05fTElORV9CUkVBS1MiLCJoYXJkIiwic29mdCIsImZvcmNlIiwiY29udmVydCIsImlzIiwic3VicmVzdWx0IiwidG9SZXN1bHQiLCJ0eXBlRmFjdG9yeSIsIm9rIiwiYW55RmFjdG9yeSIsIm1hdGNoZXNGYWN0b3J5IiwiY2hlY2tzIiwicmVzdWx0cyIsImNvbnZlcnRBbGwiLCJ3aGl0ZXNwYWNlIiwic2lsZW50IiwiYmxhbmtRdWV1ZSIsInN1YnZhbHVlUXVldWUiLCJjb250ZW50UXVldWUiLCJDT0RFX0lOREVOVCIsImZlbmNlQ291bnQiLCJmbGFnIiwiZXhkZW50ZWRDb250ZW50IiwiY2xvc2luZyIsImV4ZGVudGVkQ2xvc2luZyIsImludGVycnVwdCIsInJlc3QiLCJuZXh0SW5kZXgiLCJzdGFydEluZGV4IiwicHJlZml4ZWQiLCJleGl0IiwiY3VycmVudExpbmUiLCJpbmRlbnRzIiwibWFya2VyQ291bnQiLCJyZW1vdmVJbmRlbnQiLCJvcmRlcmVkIiwiY3VycmVudE1hcmtlciIsInByZXZFbXB0eSIsIml0ZW1zIiwiYWxsTGluZXMiLCJlbXB0eUxpbmVzIiwiZW50ZXJUb3AiLCJleGl0QmxvY2txdW90ZSIsImlzTG9vc2UiLCJpbmRlbnRlZCIsImludGVydXB0b3JzIiwiTElTVF9PUkRFUkVEX0NPTU1PTk1BUktfTUFSS0VSUyIsIkxJU1RfT1JERVJFRF9NQVJLRVJTIiwiTElTVF9VTk9SREVSRURfTUFSS0VSUyIsIlRBQl9TSVpFIiwidHJhaWwiLCJsb29zZSIsImxpc3RJdGVtIiwiRVhQUkVTU0lPTl9MT09TRV9MSVNUX0lURU0iLCJFWFBSRVNTSU9OX1RBU0tfSVRFTSIsIkVYUFJFU1NJT05fQlVMTEVUIiwiRVhQUkVTU0lPTl9QRURBTlRJQ19CVUxMRVQiLCJFWFBSRVNTSU9OX0lOSVRJQUxfSU5ERU5UIiwidGFzayIsInBlZGFudGljTGlzdEl0ZW0iLCJub3JtYWxMaXN0SXRlbSIsImNoZWNrZWQiLCJidWxsZXQiLCJ0cmltbWVkTGluZXMiLCIkMyIsIiQ0IiwibWF4aW11bSIsInBhZGRpbmciLCJtaW5JbmRlbnQiLCJtYXRyaXgiLCJTRVRFWFRfTUFSS0VSUyIsInNlcXVlbmNlIiwic2VxdWVuY2VzIiwiZm9vdG5vdGVEZWZpbml0aW9uIiwiRVhQUkVTU0lPTl9JTklUSUFMX1RBQiIsInN1YnF1ZXVlIiwiaWRlbnRpZmllciIsIkNfQlJBQ0tFVF9PUEVOIiwiYmVmb3JlVVJMIiwiYmVmb3JlVGl0bGUiLCJpc0VuY2xvc2VkVVJMQ2hhcmFjdGVyIiwiaXNVbmNsb3NlZFVSTENoYXJhY3RlciIsImFsaWdubWVudHMiLCJhbGlnbm1lbnQiLCJyb3ciLCJoYXNEYXNoIiwiYWxpZ24iLCJjZWxsIiwicHJlYW1ibGUiLCJvcGVuaW5nIiwibGluZUNvdW50Iiwicm93cyIsImxpbmVJbmRleCIsInBpcGVJbmRleCIsInRyaW1UcmFpbGluZ0xpbmVzIiwibG9jYXRlIiwibG9jYXRvciIsIk1BSUxUT19MRU5HVEgiLCJoYXNBdENoYXJhY3RlciIsIlBST1RPQ09MUyIsIlBST1RPQ09MU19MRU5HVEgiLCJwYXJlbkNvdW50IiwibmV4dENoYXJhY3RlciIsImlubGluZUhUTUwiLCJFWFBSRVNTSU9OX0hUTUxfTElOS19PUEVOIiwiRVhQUkVTU0lPTl9IVE1MX0xJTktfQ0xPU0UiLCJMSU5LX01BUktFUlMiLCJDT01NT05NQVJLX0xJTktfTUFSS0VSUyIsImNsb3NlZCIsImhhc01hcmtlciIsImlzSW1hZ2UiLCJhbHQiLCJicmFja2V0ZWQiLCJpbnRybyIsInJlZmVyZW5jZVR5cGUiLCJhc3RlcmlzayIsInVuZGVyc2NvcmUiLCJzdHJpa2V0aHJvdWdoIiwicHJldmlvdXMiLCJwcmVjZWRpbmciLCJpbmxpbmVDb2RlIiwib3BlbmluZ0NvdW50IiwiZm91bmQiLCJ0aWNrUXVldWUiLCJoYXJkQnJlYWsiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJpZ2ludCIsImFueSIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsInZpc2l0V2l0aFBhcmVudHMiLCJsaXN0Tm9kZSIsInNlbGZDbG9zaW5nUmUiLCJzaW1wbGVUYWdSZSIsImN1cnJlbnRQYXJlbnQiLCJzZWxmQ2xvc2luZyIsImdldFNlbGZDbG9zaW5nIiwiZ2V0U2ltcGxlVGFnIiwibWF0Y2hpbmciLCJtYXRjaGluZ1RhZyIsImZpbmRBbmRQdWxsIiwiZnJvbU5vZGUiLCJ0b05vZGUiLCJ0b0luZGV4IiwidmlydHVhbCIsInVudGFuZ2xlIiwiZGlzYWxsb3ciLCJSZWFjdCIsIlJlYWN0SXMiLCJkZWZhdWx0Tm9kZVBvc2l0aW9uIiwicmVuZGVyZXIiLCJub2RlUHJvcHMiLCJnZXROb2RlUHJvcHMiLCJyZXNvbHZlQ2hpbGRyZW4iLCJjaGlsZE5vZGUiLCJpc1RhZ1JlbmRlcmVyIiwic291cmNlUG9zaXRpb24iLCJpbmNsdWRlTm9kZUluZGV4IiwicGFyZW50Q2hpbGRDb3VudCIsImFzc2lnbkRlZmluZWQiLCJub2RlS2V5IiwidGlnaHQiLCJ1bndyYXBQYXJhZ3JhcGhzIiwiZ2V0TGlzdEl0ZW1DaGlsZHJlbiIsImxhbmd1YWdlIiwiaW5saW5lIiwiY29sdW1uQWxpZ25tZW50IiwiaXNIZWFkZXIiLCJpc0Jsb2NrIiwicGFyc2VkQ2hpbGRyZW4iLCJtZXJnZU5vZGVDaGlsZHJlbiIsImRlZnMiLCJwcm90b2NvbHMiLCJ1cmkiLCJjb2xvbiIsInN1cHBvcnRzU3RyaW5nUmVuZGVyIiwiU2ltcGxlUmVuZGVyZXIiLCJnZXRDb3JlUHJvcHMiLCJsaW5rUmVmZXJlbmNlIiwiaW1hZ2VSZWZlcmVuY2UiLCJ0YWJsZUhlYWQiLCJ0YWJsZUJvZHkiLCJ0YWJsZVJvdyIsInRhYmxlQ2VsbCIsInRleHRBbGlnbiIsImNvcmVQcm9wcyIsInVzZUZyYWdtZW50IiwiY2hlY2tib3giLCJyZWFkT25seSIsImhlYWRpbmciLCJjb21wIiwidmlydHVhbEh0bWwiLCJwYXJzZWRIdG1sIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJwYSIsInFhIiwicmEiLCJzYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwidGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInVhIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJkZXBlbmRlbmNpZXMiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiWGEiLCJTYSIsIlRhIiwiUmEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwicGIiLCJxYiIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwicmIiLCJzYiIsInhiIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiemIiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFiIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiZmlyc3RDaGlsZCIsIlJiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsInNpYmxpbmciLCJnYyIsImljIiwiamMiLCJrYyIsImxjIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwibWMiLCJuYyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsInJjIiwiZXZlbnRTeXN0ZW1GbGFncyIsInNjIiwiY29udGFpbmVySW5mbyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiS2MiLCJibG9ja2VkT24iLCJjb250YWluZXIiLCJMYyIsInBvaW50ZXJJZCIsIk1jIiwiTmMiLCJQYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiT2MiLCJqZCIsImdyaWRBcmVhIiwibGluZUNsYW1wIiwia2QiLCJsZCIsIm1kIiwibmQiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIm9kIiwicGQiLCJxZCIsInJkIiwic2QiLCJ0ZCIsImJvZHkiLCJ1ZCIsInZkIiwieGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJ5ZCIsImNvbnRlbnRFZGl0YWJsZSIsIkRkIiwiRWQiLCJGZCIsImF1dG9Gb2N1cyIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJwcmV2aW91c1NpYmxpbmciLCJMZCIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJkaXNwYXRjaENvbmZpZyIsIlVkIiwiX3RhcmdldEluc3QiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImNlIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsImhlIiwiaWUiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm5lIiwib2UiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwia2V5Q29kZSIsImRldGFpbCIsInNlIiwid2hpY2giLCJ0ZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwidWUiLCJjb2xvciIsImRhdGV0aW1lIiwiZW1haWwiLCJ0ZWwiLCJjaGFuZ2UiLCJGZSIsImRldGFjaEV2ZW50IiwiYXR0YWNoRXZlbnQiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiTmUiLCJ2aWV3IiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImdldE1vZGlmaWVyU3RhdGUiLCJTZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiV2UiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJrZiIsIm9uU2VsZWN0IiwibGYiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwibWYiLCJjbGlwYm9hcmREYXRhIiwibmYiLCJvZiIsImNoYXJDb2RlIiwicGYiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwicWYiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsImdldENoaWxkQ29udGV4dCIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlBmIiwiUWYiLCJSZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiU2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJUZiIsIlVmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJjb250ZXh0VHlwZSIsIk1nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIk9nIiwiUGciLCJfc3RyaW5nUmVmIiwiUWciLCJSZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJTZyIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJpaCIsInJlc3BvbmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJtaSIsInJpIiwic2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkZpIiwiRWkiLCJHaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiSGkiLCJJaSIsIkppIiwiZm9jdXMiLCJLaSIsIkxpIiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsImRpc3BsYXkiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjaiIsImRqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwidGltZW91dE1zIiwieGoiLCJ5aiIsInpqIiwibGFzdEV4cGlyZWRUaW1lIiwiQWoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsImxhc3RTdXNwZW5kZWRUaW1lIiwiSWoiLCJ0aW1lb3V0SGFuZGxlIiwiSmoiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwiS2oiLCJNaiIsIk5qIiwicGluZ0NhY2hlIiwiT2oiLCJ1YiIsIlBqIiwiWGMiLCJRaiIsIlNqIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIndiIiwiYWN0aXZlRWxlbWVudERldGFjaGVkIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIlRqIiwid2QiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsInZiIiwiVWoiLCJWaiIsIldqIiwiaGlkZGVuIiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJmb3JtIiwiTGoiLCJsayIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJZaiIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJOYXYiLCJkaXYiLCJwYWxldHRlIiwiY2xhc3MiLCJzZWN0aW9uIiwidG90YWxQYWdlcyIsInJwcCIsIl9yZWYkYmFzZVBhdGgiLCJtaXhpblN0cmluZ2lmeVNhZmUiLCJsaW5rVHlwZSIsImNpcmN1bGFyIiwic2xpY2VJdGVyYXRvciIsIlVOUkVTT0xWRURfTElOSyIsImxvb2t1cEluRW50aXR5TWFwIiwiZW50aXR5TWFwIiwibGlua0RhdGEiLCJlbnRyeUlkIiwic3BhY2VJZCIsImVudmlyb25tZW50SWQiLCJnZXRSZXNvbHZlZExpbmsiLCJfbGluayRzeXMiLCJzdGFydHNXaXRoIiwiX2dldElkc0Zyb21Vcm4iLCJ1cm4iLCJfdXJuJG1hdGNoIiwiX3VybiRtYXRjaDIiLCJfdXJuJG1hdGNoMiQiLCJnZXRJZHNGcm9tVXJuIiwiX2VudHJ5SWQiLCJleHRyYWN0ZWRMaW5rVHlwZSIsIndhbGtNdXRhdGUiLCJwcmVkaWNhdGUiLCJtdXRhdG9yIiwicmVtb3ZlVW5yZXNvbHZlZCIsImNsZWFuVXBMaW5rcyIsInJlc3BvbnNlQ2xvbmUiLCJhbGxJbmNsdWRlcyIsImFsbEVudHJpZXMiLCJlbnZpcm9ubWVudCIsImVudHJ5T2JqZWN0IiwiaXRlbUVudHJ5UG9pbnRzIiwib3duS2V5IiwiZW50cnlPYmoiLCJlbnRyeVBvaW50IiwibWFrZUVudHJ5T2JqZWN0IiwiaXNSZXNvdXJjZUxpbmsiLCJyZXNvbHZlZExpbmsiLCJub3JtYWxpemVMaW5rIiwid3JhcHBlZERhdGEiLCJ3cmFwTG9jYWxlIiwiYXNzZXQiLCJjb250ZW50VHlwZSIsIl9vYmplY3RTcHJlYWQiLCJwYWdlZFN5bmMiLCJodHRwIiwiaW5pdGlhbCIsIm5leHRTeW5jVG9rZW4iLCJuZXh0UGFnZVRva2VuIiwiY29udGVudF90eXBlIiwiZGVmYXVsdE9wdGlvbnMiLCJwYWdpbmF0ZSIsIl9kZWZhdWx0T3B0aW9ucyRvcHRpbyIsInN5bmNPcHRpb25zIiwiZ2V0U3luY1BhZ2UiLCJtYXBwZWRSZXNwb25zZUl0ZW1zIiwibWFwUmVzcG9uc2VJdGVtcyIsInJlZHVjZXIiLCJhY2N1bXVsYXRlZCIsImFzc2V0cyIsImRlbGV0ZWRFbnRyaWVzIiwiZGVsZXRlZEFzc2V0cyIsInN5bmNfdG9rZW4iLCJuZXh0UGFnZVVybCIsIm5leHRTeW5jVXJsIiwidXJsUGFydHMiLCJub3JtYWxpemVTZWxlY3QiLCJhbGxTZWxlY3RzIiwic2VsZWN0ZWRTZXQiLCJjcmVhdGVDb250ZW50ZnVsQXBpIiwiZ2V0R2xvYmFsT3B0aW9ucyIsIndyYXBTcGFjZSIsIl9lbnRpdGllcyRjb250ZW50VHlwZSIsIndyYXBDb250ZW50VHlwZSIsIndyYXBDb250ZW50VHlwZUNvbGxlY3Rpb24iLCJfZW50aXRpZXMkZW50cnkiLCJ3cmFwRW50cnkiLCJ3cmFwRW50cnlDb2xsZWN0aW9uIiwiX2VudGl0aWVzJGFzc2V0Iiwid3JhcEFzc2V0Iiwid3JhcEFzc2V0Q29sbGVjdGlvbiIsIndyYXBMb2NhbGVDb2xsZWN0aW9uIiwibm90Rm91bmRFcnJvciIsImRldGFpbHMiLCJlcnJvckhhbmRsZXIiLCJzd2l0Y2hUb0Vudmlyb25tZW50IiwiZW52aXJvbm1lbnRCYXNlVXJsIiwiZ2V0U3BhY2UiLCJzcGFjZUJhc2VVcmwiLCJzd2l0Y2hUb1NwYWNlIiwiZ2V0Q29udGVudFR5cGUiLCJnZXRDb250ZW50VHlwZXMiLCJnZXRFbnRyeSIsImdldEVudHJpZXMiLCJfZ2V0R2xvYmFsT3B0aW9ucyIsImdldEFzc2V0IiwiZ2V0QXNzZXRzIiwiZ2V0TG9jYWxlcyIsInBhcnNlRW50cmllcyIsIl9nZXRHbG9iYWxPcHRpb25zMyIsInN5bmMiLCJfZ2V0R2xvYmFsT3B0aW9uczIiLCJjbGllbnQiLCJ1c2VyQWdlbnRIZWFkZXIiLCJnbG9iYWxTZXR0aW5ncyIsIl9oZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsIl9oZWFkZXIiLCJvYnNjdXJlQXV0aFRva2VuSW5SZXNwb25zZSIsImNyZWF0ZUNsaWVudCIsIkJsb2dDb250ZXh0IiwiQmxvZ1Byb3ZpZGVyIiwiX3VzZVN0YXRlIiwiZW50cnlMaXN0IiwicGFnZSIsIl91c2VTdGF0ZTIiLCJ1c2VCbG9nIiwiX3VzZUNvbnRleHQiLCJfdXNlQ29udGV4dDIiLCJzZXRQYWdlIiwic2V0RW50cnkiLCJCbG9nIiwic2VhcmNoUGFyYW1zIiwiRW50cnlMaXN0IiwiX3VzZUJsb2ciLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX2NhbGxlZSIsInNraXAiLCJmZXRjaERhdGEiLCJmaWVsZHMiLCJzbHVnIiwiY3JlYXRlZEF0IiwidGh1bWIiLCJQYWdpbmF0b3IiLCJQb3N0IiwiQmxvZ1Bvc3QiLCJtZXRhZGF0YSIsIlRhZyIsIlNlbGVjdGVkVGFnIiwiRGV2IiwiSG9tZSIsIkhvbWVQYWdlIiwiTWFpbiIsIk1haW5Db250YWluZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY2FsbFN1cGVyIiwiX2NyZWF0ZUNsYXNzIiwicGFyc2VkVXJsIiwiX3BhcnNlVXJsIiwiVVJMIiwidGFnT3JQb3N0SWQiLCJtaWRkbGUiLCJXb3JrIiwiTmF2aWdhdGlvbiIsIndyYXBwZXIiLCJnZXRFbGVtZW50QnlJZCIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFT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Q1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsV0FBWSxJQUNaLGNBQWUsSUFDZixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLFdBQVksSUFDWixjQUFlLElBQ2YsVUFBVyxJQUNYLGFBQWMsSUFDZCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFlBQWEsSUFDYixlQUFnQixJQUNoQixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLFFBQVMsSUFDVCxXQUFZLElBQ1osT0FBUSxJQUNSLFVBQVcs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MHhILGFBQWNBLElBQ3RDLE1BQ0YsSUFBSyxPQUNIOEIsRUFBUzdqQyxJQUFBenBELGNBQUN3c0YsR0FBRyxDQUFDMXlILElBQUksTUFBTXVrQyxHQUFJZ3ZGLEVBQWE3QixhQUFjQSxJQUN2RCxNQUNGLFFBQ0U4QixFQUFTN2pDLElBQUF6cEQsY0FBQzJzRixHQUFJLENBQUM3eUgsSUFBSSxTQUl2QixPQUZBa0MsRUFBSUUsS0FBS294SCxHQUlQN2pDLElBQUF6cEQsY0FBQzZxRixHQUFZLEtBQ1hwaEMsSUFBQXpwRCxjQUFDNE8sR0FBVyxNQUNaNjZDLElBQUF6cEQsY0FBQzZzRixHQUFJLEtBQ0hwakMsSUFBQXpwRCxjQUFDd3RGLEVBQVUsQ0FBQzF6SCxJQUFJLE1BQU0ycEgsUUFBU0EsSUFDL0JoNkIsSUFBQXpwRCxjQUFBLE9BQUt3akYsTUFBTSxhQUFheG5ILFNBcENmLENBQVN5ekMsYSxxQkM3RHRCZytFLEdBQVUxckYsU0FBUzJyRixlQUFlLGFBQ3hDRCxJQUFVRSxLQUFTeGtGLE9BQU9zZ0QsSUFBQXpwRCxjQUFDOHNGLEdBQWEsTUFBS1ciLCJmaWxlIjoiaW5kZXhfYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzNjUpO1xuIiwiLy8hIG1vbWVudC5qc1xuLy8hIHZlcnNpb24gOiAyLjMwLjFcbi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzXG4vLyEgbGljZW5zZSA6IE1JVFxuLy8hIG1vbWVudGpzLmNvbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiBob29rcygpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4gICAgLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG4gICAgZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgICAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAgICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgIT0gbnVsbCAmJlxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXRlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcChhcnIsIGZuKSB7XG4gICAgICAgIHZhciByZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBhcnJMZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyTGVuOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0UGFyc2luZ0ZsYWdzKCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbXB0eTogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnM6IFtdLFxuICAgICAgICAgICAgdW51c2VkSW5wdXQ6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3c6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlcjogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkRXJhOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNvOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZERhdGVQYXJ0czogW10sXG4gICAgICAgICAgICBlcmE6IG51bGwsXG4gICAgICAgICAgICBtZXJpZGllbTogbnVsbCxcbiAgICAgICAgICAgIHJmYzI4MjI6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheU1pc21hdGNoOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIHZhciBzb21lO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgIGxlbiA9IHQubGVuZ3RoID4+PiAwLFxuICAgICAgICAgICAgICAgIGk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHQgJiYgZnVuLmNhbGwodGhpcywgdFtpXSwgaSwgdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgICAgIHZhciBmbGFncyA9IG51bGwsXG4gICAgICAgICAgICBwYXJzZWRQYXJ0cyA9IGZhbHNlLFxuICAgICAgICAgICAgaXNOb3dWYWxpZCA9IG0uX2QgJiYgIWlzTmFOKG0uX2QuZ2V0VGltZSgpKTtcbiAgICAgICAgaWYgKGlzTm93VmFsaWQpIHtcbiAgICAgICAgICAgIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICAgICAgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRXJhICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy53ZWVrZGF5TWlzbWF0Y2ggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MudXNlckludmFsaWRhdGVkICYmXG4gICAgICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcbiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID1cbiAgICAgICAgICAgICAgICAgICAgaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQoZmxhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuICAgIC8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG4gICAgdmFyIG1vbWVudFByb3BlcnRpZXMgPSAoaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdKSxcbiAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHByb3AsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBtb21lbnRQcm9wZXJ0aWVzTGVuID0gbW9tZW50UHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzTGVuID4gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1vbWVudFByb3BlcnRpZXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG5cbiAgICAvLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgICAgICAvLyBvYmplY3RzLlxuICAgICAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQob2JqKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBjb25zb2xlLndhcm5cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBhcmcsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgYXJnTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJnTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093blByb3AoYXJndW1lbnRzWzBdLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSBrZXkgKyAnOiAnICsgYXJndW1lbnRzWzBdW2tleV0gKyAnLCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgwLCAtMik7IC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYSBhbmQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAgICAgbXNnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG5Bcmd1bWVudHM6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncykuam9pbignJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEVycm9yKCkuc3RhY2tcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGZuKTtcbiAgICB9XG5cbiAgICB2YXIgZGVwcmVjYXRpb25zID0ge307XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG5hbWUsIG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbiAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHR5cGVvZiBGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbikgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBwcm9wLCBpO1xuICAgICAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjb25maWcsIGkpKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAgICAgLy8gbnVtYmVyICsgKHBvc3NpYmx5KSBzdHVmZiBjb21pbmcgZnJvbSBfZGF5T2ZNb250aE9yZGluYWxQYXJzZS5cbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAodGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZS5zb3VyY2UgfHwgdGhpcy5fb3JkaW5hbFBhcnNlLnNvdXJjZSkgK1xuICAgICAgICAgICAgICAgICd8JyArXG4gICAgICAgICAgICAgICAgL1xcZHsxLDJ9Ly5zb3VyY2VcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLFxuICAgICAgICAgICAgcHJvcDtcbiAgICAgICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGhhc093blByb3AocGFyZW50Q29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgIGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgZG9uJ3QgbW9kaWZ5IHBhcmVudCBjb25maWdcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyKGtleSwgbW9tLCBub3cpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArXG4gICAgICAgICAgICBhYnNOdW1iZXJcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9XG4gICAgICAgICAgICAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oW0hoXW1tKHNzKT98TW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98UW8/fE57MSw1fXxZWVlZWVl8WVlZWVl8WVlZWXxZWXx5ezIsNH18eW8/fGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fGtrP3xtbT98c3M/fFN7MSw5fXx4fFh8eno/fFpaP3wuKS9nLFxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nLFxuICAgICAgICBmb3JtYXRGdW5jdGlvbnMgPSB7fSxcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMgPSB7fTtcblxuICAgIC8vIHRva2VuOiAgICAnTSdcbiAgICAvLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4gICAgLy8gb3JkaW5hbDogICdNbydcbiAgICAvLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbiAgICBmdW5jdGlvbiBhZGRGb3JtYXRUb2tlbih0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnLFxuICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpXSlcbiAgICAgICAgICAgICAgICAgICAgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICA6IGFycmF5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbiAgICBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9XG4gICAgICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBpID0gNTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLFxuICAgICAgICAgICAgICAgIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vuc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgIEw6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb25nRGF0ZUZvcm1hdChrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlclxuICAgICAgICAgICAgLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh0b2spIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ01NTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ01NJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdERCcgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnZGRkZCdcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvay5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvaztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG4gICAgZnVuY3Rpb24gaW52YWxpZERhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnLFxuICAgICAgICBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgdzogJ2Egd2VlaycsXG4gICAgICAgIHd3OiAnJWQgd2Vla3MnLFxuICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KVxuICAgICAgICAgICAgPyBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKVxuICAgICAgICAgICAgOiBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXN0RnV0dXJlKGRpZmYsIG91dHB1dCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWxpYXNlcyA9IHtcbiAgICAgICAgRDogJ2RhdGUnLFxuICAgICAgICBkYXRlczogJ2RhdGUnLFxuICAgICAgICBkYXRlOiAnZGF0ZScsXG4gICAgICAgIGQ6ICdkYXknLFxuICAgICAgICBkYXlzOiAnZGF5JyxcbiAgICAgICAgZGF5OiAnZGF5JyxcbiAgICAgICAgZTogJ3dlZWtkYXknLFxuICAgICAgICB3ZWVrZGF5czogJ3dlZWtkYXknLFxuICAgICAgICB3ZWVrZGF5OiAnd2Vla2RheScsXG4gICAgICAgIEU6ICdpc29XZWVrZGF5JyxcbiAgICAgICAgaXNvd2Vla2RheXM6ICdpc29XZWVrZGF5JyxcbiAgICAgICAgaXNvd2Vla2RheTogJ2lzb1dlZWtkYXknLFxuICAgICAgICBEREQ6ICdkYXlPZlllYXInLFxuICAgICAgICBkYXlvZnllYXJzOiAnZGF5T2ZZZWFyJyxcbiAgICAgICAgZGF5b2Z5ZWFyOiAnZGF5T2ZZZWFyJyxcbiAgICAgICAgaDogJ2hvdXInLFxuICAgICAgICBob3VyczogJ2hvdXInLFxuICAgICAgICBob3VyOiAnaG91cicsXG4gICAgICAgIG1zOiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICBtaWxsaXNlY29uZHM6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgIG1pbGxpc2Vjb25kOiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICBtOiAnbWludXRlJyxcbiAgICAgICAgbWludXRlczogJ21pbnV0ZScsXG4gICAgICAgIG1pbnV0ZTogJ21pbnV0ZScsXG4gICAgICAgIE06ICdtb250aCcsXG4gICAgICAgIG1vbnRoczogJ21vbnRoJyxcbiAgICAgICAgbW9udGg6ICdtb250aCcsXG4gICAgICAgIFE6ICdxdWFydGVyJyxcbiAgICAgICAgcXVhcnRlcnM6ICdxdWFydGVyJyxcbiAgICAgICAgcXVhcnRlcjogJ3F1YXJ0ZXInLFxuICAgICAgICBzOiAnc2Vjb25kJyxcbiAgICAgICAgc2Vjb25kczogJ3NlY29uZCcsXG4gICAgICAgIHNlY29uZDogJ3NlY29uZCcsXG4gICAgICAgIGdnOiAnd2Vla1llYXInLFxuICAgICAgICB3ZWVreWVhcnM6ICd3ZWVrWWVhcicsXG4gICAgICAgIHdlZWt5ZWFyOiAnd2Vla1llYXInLFxuICAgICAgICBHRzogJ2lzb1dlZWtZZWFyJyxcbiAgICAgICAgaXNvd2Vla3llYXJzOiAnaXNvV2Vla1llYXInLFxuICAgICAgICBpc293ZWVreWVhcjogJ2lzb1dlZWtZZWFyJyxcbiAgICAgICAgdzogJ3dlZWsnLFxuICAgICAgICB3ZWVrczogJ3dlZWsnLFxuICAgICAgICB3ZWVrOiAnd2VlaycsXG4gICAgICAgIFc6ICdpc29XZWVrJyxcbiAgICAgICAgaXNvd2Vla3M6ICdpc29XZWVrJyxcbiAgICAgICAgaXNvd2VlazogJ2lzb1dlZWsnLFxuICAgICAgICB5OiAneWVhcicsXG4gICAgICAgIHllYXJzOiAneWVhcicsXG4gICAgICAgIHllYXI6ICd5ZWFyJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgdmFyIHByaW9yaXRpZXMgPSB7XG4gICAgICAgIGRhdGU6IDksXG4gICAgICAgIGRheTogMTEsXG4gICAgICAgIHdlZWtkYXk6IDExLFxuICAgICAgICBpc29XZWVrZGF5OiAxMSxcbiAgICAgICAgZGF5T2ZZZWFyOiA0LFxuICAgICAgICBob3VyOiAxMyxcbiAgICAgICAgbWlsbGlzZWNvbmQ6IDE2LFxuICAgICAgICBtaW51dGU6IDE0LFxuICAgICAgICBtb250aDogOCxcbiAgICAgICAgcXVhcnRlcjogNyxcbiAgICAgICAgc2Vjb25kOiAxNSxcbiAgICAgICAgd2Vla1llYXI6IDEsXG4gICAgICAgIGlzb1dlZWtZZWFyOiAxLFxuICAgICAgICB3ZWVrOiA1LFxuICAgICAgICBpc29XZWVrOiA1LFxuICAgICAgICB5ZWFyOiAxLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtdLFxuICAgICAgICAgICAgdTtcbiAgICAgICAgZm9yICh1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcCh1bml0c09iaiwgdSkpIHtcbiAgICAgICAgICAgICAgICB1bml0cy5wdXNoKHsgdW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVuaXRzO1xuICAgIH1cblxuICAgIHZhciBtYXRjaDEgPSAvXFxkLywgLy8gICAgICAgMCAtIDlcbiAgICAgICAgbWF0Y2gyID0gL1xcZFxcZC8sIC8vICAgICAgMDAgLSA5OVxuICAgICAgICBtYXRjaDMgPSAvXFxkezN9LywgLy8gICAgIDAwMCAtIDk5OVxuICAgICAgICBtYXRjaDQgPSAvXFxkezR9LywgLy8gICAgMDAwMCAtIDk5OTlcbiAgICAgICAgbWF0Y2g2ID0gL1srLV0/XFxkezZ9LywgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaDF0bzIgPSAvXFxkXFxkPy8sIC8vICAgICAgIDAgLSA5OVxuICAgICAgICBtYXRjaDN0bzQgPSAvXFxkXFxkXFxkXFxkPy8sIC8vICAgICA5OTkgLSA5OTk5XG4gICAgICAgIG1hdGNoNXRvNiA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LywgLy8gICA5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaDF0bzMgPSAvXFxkezEsM30vLCAvLyAgICAgICAwIC0gOTk5XG4gICAgICAgIG1hdGNoMXRvNCA9IC9cXGR7MSw0fS8sIC8vICAgICAgIDAgLSA5OTk5XG4gICAgICAgIG1hdGNoMXRvNiA9IC9bKy1dP1xcZHsxLDZ9LywgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgICAgICBtYXRjaFVuc2lnbmVkID0gL1xcZCsvLCAvLyAgICAgICAwIC0gaW5mXG4gICAgICAgIG1hdGNoU2lnbmVkID0gL1srLV0/XFxkKy8sIC8vICAgIC1pbmYgLSBpbmZcbiAgICAgICAgbWF0Y2hPZmZzZXQgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2ksIC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgICAgICBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2ksIC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgICAgIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LywgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcbiAgICAgICAgLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4gICAgICAgIC8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbiAgICAgICAgbWF0Y2hXb3JkID1cbiAgICAgICAgICAgIC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pLFxuICAgICAgICBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvID0gL15bMS05XVxcZD8vLCAvLyAgICAgICAgIDEtOTlcbiAgICAgICAgbWF0Y2gxdG8ySGFzWmVybyA9IC9eKFsxLTldXFxkfFxcZCkvLCAvLyAgICAgICAgICAgMC05OVxuICAgICAgICByZWdleGVzO1xuXG4gICAgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbih0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleClcbiAgICAgICAgICAgID8gcmVnZXhcbiAgICAgICAgICAgIDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXggPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcChyZWdleGVzLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhlc1t0b2tlbl0oY29uZmlnLl9zdHJpY3QsIGNvbmZpZy5fbG9jYWxlKTtcbiAgICB9XG5cbiAgICAvLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG4gICAgZnVuY3Rpb24gdW5lc2NhcGVGb3JtYXQocykge1xuICAgICAgICByZXR1cm4gcmVnZXhFc2NhcGUoXG4gICAgICAgICAgICBzXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1xcXFwnLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICAgICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgICAgIHZhbHVlID0gMDtcblxuICAgICAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGZ1bmMgPSBjYWxsYmFjayxcbiAgICAgICAgICAgIHRva2VuTGVuO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbkxlbiA9IHRva2VuLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuTGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDAsXG4gICAgICAgIE1PTlRIID0gMSxcbiAgICAgICAgREFURSA9IDIsXG4gICAgICAgIEhPVVIgPSAzLFxuICAgICAgICBNSU5VVEUgPSA0LFxuICAgICAgICBTRUNPTkQgPSA1LFxuICAgICAgICBNSUxMSVNFQ09ORCA9IDYsXG4gICAgICAgIFdFRUsgPSA3LFxuICAgICAgICBXRUVLREFZID0gODtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgICAgICByZXR1cm4geSA8PSA5OTk5ID8gemVyb0ZpbGwoeSwgNCkgOiAnKycgKyB5O1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsIDRdLCAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCA1XSwgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWScsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPVxuICAgICAgICAgICAgaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG4gICAgfTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIoKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0KHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0KG1vbSwgdW5pdCkge1xuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZCA9IG1vbS5fZCxcbiAgICAgICAgICAgIGlzVVRDID0gbW9tLl9pc1VUQztcblxuICAgICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ01pbGxpc2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENNaWxsaXNlY29uZHMoKSA6IGQuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICAgICAgICBjYXNlICdTZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ1NlY29uZHMoKSA6IGQuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgY2FzZSAnTWludXRlcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENNaW51dGVzKCkgOiBkLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgIGNhc2UgJ0hvdXJzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0hvdXJzKCkgOiBkLmdldEhvdXJzKCk7XG4gICAgICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0RhdGUoKSA6IGQuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgY2FzZSAnRGF5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ0RheSgpIDogZC5nZXREYXkoKTtcbiAgICAgICAgICAgIGNhc2UgJ01vbnRoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNVVEMgPyBkLmdldFVUQ01vbnRoKCkgOiBkLmdldE1vbnRoKCk7XG4gICAgICAgICAgICBjYXNlICdGdWxsWWVhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENGdWxsWWVhcigpIDogZC5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTmFOOyAvLyBKdXN0IGluIGNhc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCQxKG1vbSwgdW5pdCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGQsIGlzVVRDLCB5ZWFyLCBtb250aCwgZGF0ZTtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkID0gbW9tLl9kO1xuICAgICAgICBpc1VUQyA9IG1vbS5faXNVVEM7XG5cbiAgICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgICAgICBjYXNlICdNaWxsaXNlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQ1xuICAgICAgICAgICAgICAgICAgICA/IGQuc2V0VVRDTWlsbGlzZWNvbmRzKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IGQuc2V0TWlsbGlzZWNvbmRzKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdTZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ1NlY29uZHModmFsdWUpIDogZC5zZXRTZWNvbmRzKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdNaW51dGVzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ01pbnV0ZXModmFsdWUpIDogZC5zZXRNaW51dGVzKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdIb3Vycyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENIb3Vycyh2YWx1ZSkgOiBkLnNldEhvdXJzKHZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlICdEYXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ0RhdGUodmFsdWUpIDogZC5zZXREYXRlKHZhbHVlKSk7XG4gICAgICAgICAgICAvLyBjYXNlICdEYXknOiAvLyBOb3QgcmVhbFxuICAgICAgICAgICAgLy8gICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENEYXkodmFsdWUpIDogZC5zZXREYXkodmFsdWUpKTtcbiAgICAgICAgICAgIC8vIGNhc2UgJ01vbnRoJzogLy8gTm90IHVzZWQgYmVjYXVzZSB3ZSBuZWVkIHRvIHBhc3MgdHdvIHZhcmlhYmxlc1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDTW9udGgodmFsdWUpIDogZC5zZXRNb250aCh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnRnVsbFllYXInOlxuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBTZWUgYmVsb3cgLi4uXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gSnVzdCBpbiBjYXNlXG4gICAgICAgIH1cblxuICAgICAgICB5ZWFyID0gdmFsdWU7XG4gICAgICAgIG1vbnRoID0gbW9tLm1vbnRoKCk7XG4gICAgICAgIGRhdGUgPSBtb20uZGF0ZSgpO1xuICAgICAgICBkYXRlID0gZGF0ZSA9PT0gMjkgJiYgbW9udGggPT09IDEgJiYgIWlzTGVhcFllYXIoeWVhcikgPyAyOCA6IGRhdGU7XG4gICAgICAgIHZvaWQgKGlzVVRDXG4gICAgICAgICAgICA/IGQuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgsIGRhdGUpXG4gICAgICAgICAgICA6IGQuc2V0RnVsbFllYXIoeWVhciwgbW9udGgsIGRhdGUpKTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdHZXQodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RyaW5nU2V0KHVuaXRzLCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHByaW9yaXRpemVkTGVuID0gcHJpb3JpdGl6ZWQubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHByaW9yaXRpemVkTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb2QobiwgeCkge1xuICAgICAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4T2Y7XG5cbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgLy8gSSBrbm93XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgICAgIHJldHVybiBtb2RNb250aCA9PT0gMVxuICAgICAgICAgICAgPyBpc0xlYXBZZWFyKHllYXIpXG4gICAgICAgICAgICAgICAgPyAyOVxuICAgICAgICAgICAgICAgIDogMjhcbiAgICAgICAgICAgIDogMzEgLSAoKG1vZE1vbnRoICUgNykgJSAyKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ00nLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgICAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPVxuICAgICAgICAgICAgJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID1cbiAgICAgICAgICAgICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LyxcbiAgICAgICAgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRNb250aHNSZWdleCA9IG1hdGNoV29yZDtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyhtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV1cbiAgICAgICAgICAgIDogdGhpcy5fbW9udGhzW1xuICAgICAgICAgICAgICAgICAgKHRoaXMuX21vbnRocy5pc0Zvcm1hdCB8fCBNT05USFNfSU5fRk9STUFUKS50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KVxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV1cbiAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbXG4gICAgICAgICAgICAgICAgICBNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF1bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgaWksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAgICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdNTU1NJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdNTU0nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc2V0TW9udGgobW9tLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICgvXlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1vbS5sb2NhbGVEYXRhKCkubW9udGhzUGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbW9udGggPSB2YWx1ZSxcbiAgICAgICAgICAgIGRhdGUgPSBtb20uZGF0ZSgpO1xuXG4gICAgICAgIGRhdGUgPSBkYXRlIDwgMjkgPyBkYXRlIDogTWF0aC5taW4oZGF0ZSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgbW9udGgpKTtcbiAgICAgICAgdm9pZCAobW9tLl9pc1VUQ1xuICAgICAgICAgICAgPyBtb20uX2Quc2V0VVRDTW9udGgobW9udGgsIGRhdGUpXG4gICAgICAgICAgICA6IG1vbS5fZC5zZXRNb250aChtb250aCwgZGF0ZSkpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBzaG9ydFAsXG4gICAgICAgICAgICBsb25nUDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBzaG9ydFAgPSByZWdleEVzY2FwZSh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQID0gcmVnZXhFc2NhcGUodGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydFApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdQKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ1ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydFApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG5cbiAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSArIDQwMCwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUoeSkge1xuICAgICAgICB2YXIgZGF0ZSwgYXJncztcbiAgICAgICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGFyZ3NbMF0gPSB5ICsgNDAwO1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG4gICAgZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICAgICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgcmVzWWVhcixcbiAgICAgICAgICAgIHJlc0RheU9mWWVhcjtcblxuICAgICAgICBpZiAoZGF5T2ZZZWFyIDw9IDApIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyKSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgICAgICBkYXlPZlllYXI6IHJlc0RheU9mWWVhcixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgICAgIHJlc1dlZWssXG4gICAgICAgICAgICByZXNZZWFyO1xuXG4gICAgICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWtPZmZzZXROZXh0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIgKyAxLCBkb3csIGRveSk7XG4gICAgICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigndycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignVycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSxcbiAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vlayhtb20pIHtcbiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG95O1xuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWsoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayhpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlaztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignZCcsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignRScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuICAgIGZ1bmN0aW9uIHNoaWZ0V2Vla2RheXMod3MsIG4pIHtcbiAgICAgICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9XG4gICAgICAgICAgICAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyhtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0gaXNBcnJheSh0aGlzLl93ZWVrZGF5cylcbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNcbiAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNbXG4gICAgICAgICAgICAgICAgICBtICYmIG0gIT09IHRydWUgJiYgdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF07XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXMod2Vla2RheXMsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgID8gd2Vla2RheXNbbS5kYXkoKV1cbiAgICAgICAgICAgICAgOiB3ZWVrZGF5cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0KG0pIHtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c1Nob3J0LCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV1cbiAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluKG0pIHtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c01pbiwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXVxuICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzTWluO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgaWksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPVxuICAgICAgICAgICAgICAgICAgICAnXicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzKG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArXG4gICAgICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGQnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXkgPSBnZXQodGhpcywgJ0RheScpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUGllY2VzID0gW10sXG4gICAgICAgICAgICBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBtaW5wLFxuICAgICAgICAgICAgc2hvcnRwLFxuICAgICAgICAgICAgbG9uZ3A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgbWlucCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykpO1xuICAgICAgICAgICAgc2hvcnRwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5cyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgIGhGb3JtYXQuYXBwbHkodGhpcykgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgdGhpcy5ob3VycygpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbShcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzKCksXG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzKCksXG4gICAgICAgICAgICAgICAgbG93ZXJjYXNlXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXJpZGllbSgnYScsIHRydWUpO1xuICAgIG1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJIYXNaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdrJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNCxcbiAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaSxcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgICAgICAvLyB0aGlzIHJ1bGUuXG4gICAgICAgIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0oaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgICAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgICAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgICAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSxcbiAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge30sXG4gICAgICAgIGxvY2FsZUZhbWlsaWVzID0ge30sXG4gICAgICAgIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIGNvbW1vblByZWZpeChhcnIxLCBhcnIyKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbWlubCA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtaW5sOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbmw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4gICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbiAgICAvLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG4gICAgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgbmV4dCAmJlxuICAgICAgICAgICAgICAgICAgICBuZXh0Lmxlbmd0aCA+PSBqICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vblByZWZpeChzcGxpdCwgbmV4dCkgPj0gaiAtIDFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbGVOYW1lU2FuZShuYW1lKSB7XG4gICAgICAgIC8vIFByZXZlbnQgbmFtZXMgdGhhdCBsb29rIGxpa2UgZmlsZXN5c3RlbSBwYXRocywgaS5lIGNvbnRhaW4gJy8nIG9yICdcXCdcbiAgICAgICAgLy8gRW5zdXJlIG5hbWUgaXMgYXZhaWxhYmxlIGFuZCBmdW5jdGlvbiByZXR1cm5zIGJvb2xlYW5cbiAgICAgICAgcmV0dXJuICEhKG5hbWUgJiYgbmFtZS5tYXRjaCgnXlteL1xcXFxcXFxcXSokJykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbCxcbiAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlO1xuICAgICAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBtb2R1bGUgJiZcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzICYmXG4gICAgICAgICAgICBpc0xvY2FsZU5hbWVTYW5lKG5hbWUpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUgPSByZXF1aXJlO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlKCcuL2xvY2FsZS8nICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFyayBhcyBub3QgZm91bmQgdG8gYXZvaWQgcmVwZWF0aW5nIGV4cGVuc2l2ZSBmaWxlIHJlcXVpcmUgY2FsbCBjYXVzaW5nIGhpZ2ggQ1BVXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0cnlpbmcgdG8gZmluZCBlbi1VUywgZW5fVVMsIGVuLXVzIGZvciBldmVyeSBmb3JtYXQgY2FsbFxuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBudWxsOyAvLyBudWxsIG1lYW5zIG5vdCBmb3VuZFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBsb2FkIGxvY2FsZSBhbmQgdGhlbiBzZXQgdGhlIGdsb2JhbCBsb2NhbGUuICBJZlxuICAgIC8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4gICAgLy8gbG9jYWxlIGtleS5cbiAgICBmdW5jdGlvbiBnZXRTZXRHbG9iYWxMb2NhbGUoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgICAgICAgICAvL3dhcm4gdXNlciBpZiBhcmd1bWVudHMgYXJlIHBhc3NlZCBidXQgdGhlIGxvY2FsZSBjb3VsZCBub3QgYmUgc2V0XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICdMb2NhbGUgJyArIGtleSArICcgbm90IGZvdW5kLiBEaWQgeW91IGZvcmdldCB0byBsb2FkIGl0PydcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAgICAgJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FuIGV4aXN0aW5nIGxvY2FsZS4gbW9tZW50LmRlZmluZUxvY2FsZShsb2NhbGVOYW1lLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcpIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbbmFtZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsXG4gICAgICAgICAgICAgICAgdG1wTG9jYWxlLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwgJiYgbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBjaGlsZCBsb2NhbGUgaW4tcGxhY2UgdG8gYXZvaWQgbWVtb3J5LWxlYWtzXG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXS5zZXQobWVyZ2VDb25maWdzKGxvY2FsZXNbbmFtZV0uX2NvbmZpZywgY29uZmlnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE1FUkdFXG4gICAgICAgICAgICAgICAgdG1wTG9jYWxlID0gbG9hZExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgaWYgKHRtcExvY2FsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZUxvY2FsZSBpcyBjYWxsZWQgZm9yIGNyZWF0aW5nIGEgbmV3IGxvY2FsZVxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgYWJiciBzbyBpdCB3aWxsIGhhdmUgYSBuYW1lIChnZXR0ZXJzIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAvLyB1bmRlZmluZWQgb3RoZXJ3aXNlKS5cbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwYXNzIG51bGwgZm9yIGNvbmZpZyB0byB1bnVwZGF0ZSwgdXNlZnVsIGZvciB0ZXN0c1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGdldFNldEdsb2JhbExvY2FsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuICAgIGZ1bmN0aW9uIGdldExvY2FsZShrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiBrZXlzKGxvY2FsZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cobSkge1xuICAgICAgICB2YXIgb3ZlcmZsb3csXG4gICAgICAgICAgICBhID0gbS5fYTtcblxuICAgICAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgYVtNT05USF0gPCAwIHx8IGFbTU9OVEhdID4gMTFcbiAgICAgICAgICAgICAgICAgICAgPyBNT05USFxuICAgICAgICAgICAgICAgICAgICA6IGFbREFURV0gPCAxIHx8IGFbREFURV0gPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSlcbiAgICAgICAgICAgICAgICAgICAgICA/IERBVEVcbiAgICAgICAgICAgICAgICAgICAgICA6IGFbSE9VUl0gPCAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFbSE9VUl0gPiAyNCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhW01JTlVURV0gIT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW1NFQ09ORF0gIT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSAhPT0gMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IEhPVVJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYVtNSU5VVEVdIDwgMCB8fCBhW01JTlVURV0gPiA1OVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IE1JTlVURVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFbU0VDT05EXSA8IDAgfHwgYVtTRUNPTkRdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFNFQ09ORFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IE1JTExJU0VDT05EXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IC0xO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJlxuICAgICAgICAgICAgICAgIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIGlzbyA4NjAxIHJlZ2V4XG4gICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG4gICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPVxuICAgICAgICAgICAgL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoWystXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC8sXG4gICAgICAgIGJhc2ljSXNvUmVnZXggPVxuICAgICAgICAgICAgL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZHwpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LyxcbiAgICAgICAgaXNvRGF0ZXMgPSBbXG4gICAgICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICAgICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAgICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICAgICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVlEREQnLCAvXFxkezd9L10sXG4gICAgICAgICAgICBbJ1lZWVlNTScsIC9cXGR7Nn0vLCBmYWxzZV0sXG4gICAgICAgICAgICBbJ1lZWVknLCAvXFxkezR9LywgZmFsc2VdLFxuICAgICAgICBdLFxuICAgICAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgICAgIGlzb1RpbWVzID0gW1xuICAgICAgICAgICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICAgICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEgnLCAvXFxkXFxkL10sXG4gICAgICAgIF0sXG4gICAgICAgIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoLT9cXGQrKS9pLFxuICAgICAgICAvLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG4gICAgICAgIHJmYzI4MjIgPVxuICAgICAgICAgICAgL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLyxcbiAgICAgICAgb2JzT2Zmc2V0cyA9IHtcbiAgICAgICAgICAgIFVUOiAwLFxuICAgICAgICAgICAgR01UOiAwLFxuICAgICAgICAgICAgRURUOiAtNCAqIDYwLFxuICAgICAgICAgICAgRVNUOiAtNSAqIDYwLFxuICAgICAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICAgICAgQ1NUOiAtNiAqIDYwLFxuICAgICAgICAgICAgTURUOiAtNiAqIDYwLFxuICAgICAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICAgICAgUERUOiAtNyAqIDYwLFxuICAgICAgICAgICAgUFNUOiAtOCAqIDYwLFxuICAgICAgICB9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICAgICAgYWxsb3dUaW1lLFxuICAgICAgICAgICAgZGF0ZUZvcm1hdCxcbiAgICAgICAgICAgIHRpbWVGb3JtYXQsXG4gICAgICAgICAgICB0ekZvcm1hdCxcbiAgICAgICAgICAgIGlzb0RhdGVzTGVuID0gaXNvRGF0ZXMubGVuZ3RoLFxuICAgICAgICAgICAgaXNvVGltZXNMZW4gPSBpc29UaW1lcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzTGVuOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzTGVuOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgeWVhclN0cixcbiAgICAgICAgbW9udGhTdHIsXG4gICAgICAgIGRheVN0cixcbiAgICAgICAgaG91clN0cixcbiAgICAgICAgbWludXRlU3RyLFxuICAgICAgICBzZWNvbmRTdHJcbiAgICApIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICAgICAgcGFyc2VJbnQoZGF5U3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKSxcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWVhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwoW14oKV0qXFwpfFtcXG5cXHRdL2csICcgJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL15cXHNcXHMqLywgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVuZGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMF0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzFdLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsyXVxuICAgICAgICAgICAgICAgICkuZ2V0RGF5KCk7XG4gICAgICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgICAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICAgICAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyB0aGUgb25seSBhbGxvd2VkIG1pbGl0YXJ5IHR6IGlzIFpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCksXG4gICAgICAgICAgICAgICAgbSA9IGhtICUgMTAwLFxuICAgICAgICAgICAgICAgIGggPSAoaG0gLSBtKSAvIDEwMDtcbiAgICAgICAgICAgIHJldHVybiBoICogNjAgKyBtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2ggPSByZmMyODIyLmV4ZWMocHJlcHJvY2Vzc1JGQzI4MjIoY29uZmlnLl9pKSksXG4gICAgICAgICAgICBwYXJzZWRBcnJheTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBwYXJzZWRBcnJheSA9IGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoXG4gICAgICAgICAgICAgICAgbWF0Y2hbNF0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbM10sXG4gICAgICAgICAgICAgICAgbWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbNV0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbNl0sXG4gICAgICAgICAgICAgICAgbWF0Y2hbN11cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgICAgICBjb25maWcuX2QgPSBjcmVhdGVVVENEYXRlLmFwcGx5KG51bGwsIGNvbmZpZy5fYSk7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIDEpIEFTUC5ORVQsIDIpIElTTywgMykgUkZDIDI4MjIgZm9ybWF0cywgb3IgNCkgb3B0aW9uYWwgZmFsbGJhY2sgaWYgcGFyc2luZyBpc24ndCBzdHJpY3RcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSk7XG4gICAgICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSgrbWF0Y2hlZFsxXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9zdHJpY3QpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgICAgICAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAgICAgICAgICdkaXNjb3VyYWdlZC4gUGxlYXNlIHJlZmVyIHRvIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgICAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShjb25maWcuX2kgKyAoY29uZmlnLl91c2VVVEMgPyAnIFVUQycgOiAnJykpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbiAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbiAgICAvLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuICAgIC8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuICAgIC8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgaW5wdXQgPSBbXSxcbiAgICAgICAgICAgIGN1cnJlbnREYXRlLFxuICAgICAgICAgICAgZXhwZWN0ZWRXZWVrZGF5LFxuICAgICAgICAgICAgeWVhclRvVXNlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiBjb25maWcuX2FbREFURV0gPT0gbnVsbCAmJiBjb25maWcuX2FbTU9OVEhdID09IG51bGwpIHtcbiAgICAgICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9pZiB0aGUgZGF5IG9mIHRoZSB5ZWFyIGlzIHNldCwgZmlndXJlIG91dCB3aGF0IGl0IGlzXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID4gZGF5c0luWWVhcih5ZWFyVG9Vc2UpIHx8XG4gICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgICAgIC8vICogaWYgbm8geWVhciwgbW9udGgsIGRheSBvZiBtb250aCBhcmUgZ2l2ZW4sIGRlZmF1bHQgdG8gdG9kYXlcbiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAgICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAgICAgLy8gKiBpZiB5ZWFyIGlzIGdpdmVuLCBkb24ndCBkZWZhdWx0IGFueXRoaW5nXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICAgICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID1cbiAgICAgICAgICAgICAgICBjb25maWcuX2FbaV0gPT0gbnVsbCA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBpbnB1dFxuICAgICAgICApO1xuICAgICAgICBleHBlY3RlZFdlZWtkYXkgPSBjb25maWcuX3VzZVVUQ1xuICAgICAgICAgICAgPyBjb25maWcuX2QuZ2V0VVRDRGF5KClcbiAgICAgICAgICAgIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgICAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICAgICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX3cgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgICAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3csIGN1cldlZWs7XG5cbiAgICAgICAgdyA9IGNvbmZpZy5fdztcbiAgICAgICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZG93ID0gMTtcbiAgICAgICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyhcbiAgICAgICAgICAgICAgICB3LkdHLFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSxcbiAgICAgICAgICAgICAgICB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICAgICAgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuICAgIGhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuICAgIGhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2EgPSBbXTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwYXJzZWRJbnB1dCxcbiAgICAgICAgICAgIHRva2VucyxcbiAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgc2tpcHBlZCxcbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoID0gMCxcbiAgICAgICAgICAgIGVyYSxcbiAgICAgICAgICAgIHRva2VuTGVuO1xuXG4gICAgICAgIHRva2VucyA9XG4gICAgICAgICAgICBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG4gICAgICAgIHRva2VuTGVuID0gdG9rZW5zLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuTGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHxcbiAgICAgICAgICAgICAgICBbXSlbMF07XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgICAgIGlmIChza2lwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLnNsaWNlKFxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGhcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPVxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoXG4gICAgICAgICAgICBjb25maWcuX2xvY2FsZSxcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSxcbiAgICAgICAgICAgIGNvbmZpZy5fbWVyaWRpZW1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBoYW5kbGUgZXJhXG4gICAgICAgIGVyYSA9IGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVyYTtcbiAgICAgICAgaWYgKGVyYSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gY29uZmlnLl9sb2NhbGUuZXJhc0NvbnZlcnRZZWFyKGVyYSwgY29uZmlnLl9hW1lFQVJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICBjaGVja092ZXJmbG93KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW1GaXhXcmFwKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgdmFyIGlzUG07XG5cbiAgICAgICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubWVyaWRpZW1Ib3VyKGhvdXIsIG1lcmlkaWVtKTtcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICAgICAgaXNQbSA9IGxvY2FsZS5pc1BNKG1lcmlkaWVtKTtcbiAgICAgICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3Qgc3VwcG9zZWQgdG8gaGFwcGVuXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgdGVtcENvbmZpZyxcbiAgICAgICAgICAgIGJlc3RNb21lbnQsXG4gICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUsXG4gICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kLFxuICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ2ZMZW4gPSBjb25maWcuX2YubGVuZ3RoO1xuXG4gICAgICAgIGlmIChjb25maWdmTGVuID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnZkxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoIWJlc3RGb3JtYXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0IHx8XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRGb3JtYXRGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpLFxuICAgICAgICAgICAgZGF5T3JEYXRlID0gaS5kYXkgPT09IHVuZGVmaW5lZCA/IGkuZGF0ZSA6IGkuZGF5O1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoXG4gICAgICAgICAgICBbaS55ZWFyLCBpLm1vbnRoLCBkYXlPckRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHsgbnVsbElucHV0OiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IHRydWUgfHwgZm9ybWF0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWwoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArbmV3IERhdGUoKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yZGVyaW5nID0gW1xuICAgICAgICAneWVhcicsXG4gICAgICAgICdxdWFydGVyJyxcbiAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgJ3dlZWsnLFxuICAgICAgICAnZGF5JyxcbiAgICAgICAgJ2hvdXInLFxuICAgICAgICAnbWludXRlJyxcbiAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgICAgIHZhciBrZXksXG4gICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IGZhbHNlLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG9yZGVyTGVuID0gb3JkZXJpbmcubGVuZ3RoO1xuICAgICAgICBmb3IgKGtleSBpbiBtKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgaGFzT3duUHJvcChtLCBrZXkpICYmXG4gICAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9yZGVyTGVuOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgICAgIGlmICh1bml0SGFzRGVjaW1hbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9ubHkgYWxsb3cgbm9uLWludGVnZXJzIGZvciBzbWFsbGVzdCB1bml0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRHVyYXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgICAgIHF1YXJ0ZXJzID0gbm9ybWFsaXplZElucHV0LnF1YXJ0ZXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCBub3JtYWxpemVkSW5wdXQuaXNvV2VlayB8fCAwLFxuICAgICAgICAgICAgZGF5cyA9IG5vcm1hbGl6ZWRJbnB1dC5kYXkgfHwgMCxcbiAgICAgICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgICAgICBzZWNvbmRzID0gbm9ybWFsaXplZElucHV0LnNlY29uZCB8fCAwLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgICAgIC8vIHJlcHJlc2VudGF0aW9uIGZvciBkYXRlQWRkUmVtb3ZlXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9XG4gICAgICAgICAgICArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAgICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICAgICAgdGhpcy5fZGF5cyA9ICtkYXlzICsgd2Vla3MgKiA3O1xuICAgICAgICAvLyBJdCBpcyBpbXBvc3NpYmxlIHRvIHRyYW5zbGF0ZSBtb250aHMgaW50byBkYXlzIHdpdGhvdXQga25vd2luZ1xuICAgICAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgICAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgICAgICB0aGlzLl9tb250aHMgPSArbW9udGhzICsgcXVhcnRlcnMgKiAzICsgeWVhcnMgKiAxMjtcblxuICAgICAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICAgICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICAgICAgdGhpcy5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic1JvdW5kKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZGlmZnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlmZnMgKyBsZW5ndGhEaWZmO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGZ1bmN0aW9uIG9mZnNldCh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKSxcbiAgICAgICAgICAgICAgICBzaWduID0gJysnO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHNpZ24gK1xuICAgICAgICAgICAgICAgIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgK1xuICAgICAgICAgICAgICAgIHNlcGFyYXRvciArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwofn5vZmZzZXQgJSA2MCwgMilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCgnWicsICc6Jyk7XG4gICAgb2Zmc2V0KCdaWicsICcnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRSZWdleFRva2VuKCdaWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgICAgIGNvbmZpZy5fdHptID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyB0aW1lem9uZSBjaHVua2VyXG4gICAgLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4gICAgLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG4gICAgdmFyIGNodW5rT2Zmc2V0ID0gLyhbXFwrXFwtXXxcXGRcXGQpL2dpO1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKSxcbiAgICAgICAgICAgIGNodW5rLFxuICAgICAgICAgICAgcGFydHMsXG4gICAgICAgICAgICBtaW51dGVzO1xuXG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNodW5rID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgICAgICBwYXJ0cyA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgICAgIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgICAgIHJldHVybiBtaW51dGVzID09PSAwID8gMCA6IHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgICAgIHZhciByZXMsIGRpZmY7XG4gICAgICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICBkaWZmID1cbiAgICAgICAgICAgICAgICAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dClcbiAgICAgICAgICAgICAgICAgICAgPyBpbnB1dC52YWx1ZU9mKClcbiAgICAgICAgICAgICAgICAgICAgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldChtKSB7XG4gICAgICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MVxuICAgICAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciBhIG1vbWVudCBpcyBtdXRhdGVkLlxuICAgIC8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuICAgIGhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4gICAgLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbiAgICAvLyA1OjMxOjI2ICswMjAwIEl0IGlzIHBvc3NpYmxlIHRoYXQgNTozMToyNiBkb2Vzbid0IGV4aXN0IHdpdGggb2Zmc2V0XG4gICAgLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuICAgIC8vXG4gICAgLy8gS2VlcGluZyB0aGUgdGltZSBhY3R1YWxseSBhZGRzL3N1YnRyYWN0cyAob25lIGhvdXIpXG4gICAgLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4gICAgLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuICAgIC8vIF9jaGFuZ2VJblByb2dyZXNzID09IHRydWUgY2FzZSwgdGhlbiB3ZSBoYXZlIHRvIGFkanVzdCwgYmVjYXVzZVxuICAgIC8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG4gICAgZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBsb2NhbEFkanVzdDtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZShpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwoa2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgICAgIGlmICh0Wm9uZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDApLnV0Y09mZnNldCgpIHx8XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnV0Y09mZnNldCgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkKCkge1xuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYyA9IHt9LFxuICAgICAgICAgICAgb3RoZXI7XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIG90aGVyID0gYy5faXNVVEMgPyBjcmVhdGVVVEMoYy5fYSkgOiBjcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9XG4gICAgICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiYgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0Y09mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0YygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG4gICAgdmFyIGFzcE5ldFJlZ2V4ID0gL14oLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKTooXFxkKykoPzo6KFxcZCspKFxcLlxcZCopPyk/JC8sXG4gICAgICAgIC8vIGZyb20gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfZGF0ZV9kYXRlLmpzLnNvdXJjZS5odG1sXG4gICAgICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbiAgICAgICAgLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxuICAgICAgICBpc29SZWdleCA9XG4gICAgICAgICAgICAvXigtfFxcKyk/UCg/OihbLStdP1swLTksLl0qKVkpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVcpPyg/OihbLStdP1swLTksLl0qKUQpPyg/OlQoPzooWy0rXT9bMC05LC5dKilIKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilTKT8pPyQvO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIGQ6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE06IGlucHV0Ll9tb250aHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSB8fCAhaXNOYU4oK2lucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gK2lucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSAraW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgZDogdG9JbnQobWF0Y2hbREFURV0pICogc2lnbixcbiAgICAgICAgICAgICAgICBoOiB0b0ludChtYXRjaFtIT1VSXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIG06IHRvSW50KG1hdGNoW01JTlVURV0pICogc2lnbixcbiAgICAgICAgICAgICAgICBzOiB0b0ludChtYXRjaFtTRUNPTkRdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXM6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24sIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICgobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgICAgIHNpZ24gPSBtYXRjaFsxXSA9PT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeTogcGFyc2VJc28obWF0Y2hbMl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIE06IHBhcnNlSXNvKG1hdGNoWzNdLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3OiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZDogcGFyc2VJc28obWF0Y2hbNV0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGg6IHBhcnNlSXNvKG1hdGNoWzZdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgczogcGFyc2VJc28obWF0Y2hbOF0sIHNpZ24pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShcbiAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbChkdXJhdGlvbi50bylcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfaXNWYWxpZCcpKSB7XG4gICAgICAgICAgICByZXQuX2lzVmFsaWQgPSBpbnB1dC5faXNWYWxpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG4gICAgY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge307XG5cbiAgICAgICAgcmVzLm1vbnRocyA9XG4gICAgICAgICAgICBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICsgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gK2Jhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKTtcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICghKGJhc2UuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwIH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAnbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsO1xuICAgICAgICAgICAgICAgIHZhbCA9IHBlcmlvZDtcbiAgICAgICAgICAgICAgICBwZXJpb2QgPSB0bXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGR1ciA9IGNyZWF0ZUR1cmF0aW9uKHZhbCwgcGVyaW9kKTtcbiAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0KG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGQgPSBjcmVhdGVBZGRlcigxLCAnYWRkJyksXG4gICAgICAgIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgaW5wdXQgaW5zdGFuY2VvZiBTdHJpbmc7XG4gICAgfVxuXG4gICAgLy8gdHlwZSBNb21lbnRJbnB1dCA9IE1vbWVudCB8IERhdGUgfCBzdHJpbmcgfCBudW1iZXIgfCAobnVtYmVyIHwgc3RyaW5nKVtdIHwgTW9tZW50SW5wdXRPYmplY3QgfCB2b2lkOyAvLyBudWxsIHwgdW5kZWZpbmVkXG4gICAgZnVuY3Rpb24gaXNNb21lbnRJbnB1dChpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaXNNb21lbnQoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc0RhdGUoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc1N0cmluZyhpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTnVtYmVyKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB8fFxuICAgICAgICAgICAgaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkgfHxcbiAgICAgICAgICAgIGlucHV0ID09PSBudWxsIHx8XG4gICAgICAgICAgICBpbnB1dCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnRJbnB1dE9iamVjdChpbnB1dCkge1xuICAgICAgICB2YXIgb2JqZWN0VGVzdCA9IGlzT2JqZWN0KGlucHV0KSAmJiAhaXNPYmplY3RFbXB0eShpbnB1dCksXG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBmYWxzZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSBbXG4gICAgICAgICAgICAgICAgJ3llYXJzJyxcbiAgICAgICAgICAgICAgICAneWVhcicsXG4gICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICdtb250aHMnLFxuICAgICAgICAgICAgICAgICdtb250aCcsXG4gICAgICAgICAgICAgICAgJ00nLFxuICAgICAgICAgICAgICAgICdkYXlzJyxcbiAgICAgICAgICAgICAgICAnZGF5JyxcbiAgICAgICAgICAgICAgICAnZCcsXG4gICAgICAgICAgICAgICAgJ2RhdGVzJyxcbiAgICAgICAgICAgICAgICAnZGF0ZScsXG4gICAgICAgICAgICAgICAgJ0QnLFxuICAgICAgICAgICAgICAgICdob3VycycsXG4gICAgICAgICAgICAgICAgJ2hvdXInLFxuICAgICAgICAgICAgICAgICdoJyxcbiAgICAgICAgICAgICAgICAnbWludXRlcycsXG4gICAgICAgICAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICAgICAgICAgJ20nLFxuICAgICAgICAgICAgICAgICdzZWNvbmRzJyxcbiAgICAgICAgICAgICAgICAnc2Vjb25kJyxcbiAgICAgICAgICAgICAgICAncycsXG4gICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgICAgICAgICAnbXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAgIHByb3BlcnR5TGVuID0gcHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnR5TGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IHByb3BlcnR5VGVzdCB8fCBoYXNPd25Qcm9wKGlucHV0LCBwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB7XG4gICAgICAgIHZhciBhcnJheVRlc3QgPSBpc0FycmF5KGlucHV0KSxcbiAgICAgICAgICAgIGRhdGFUeXBlVGVzdCA9IGZhbHNlO1xuICAgICAgICBpZiAoYXJyYXlUZXN0KSB7XG4gICAgICAgICAgICBkYXRhVHlwZVRlc3QgPVxuICAgICAgICAgICAgICAgIGlucHV0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWlzTnVtYmVyKGl0ZW0pICYmIGlzU3RyaW5nKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5VGVzdCAmJiBkYXRhVHlwZVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNDYWxlbmRhclNwZWMoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICdzYW1lRGF5JyxcbiAgICAgICAgICAgICAgICAnbmV4dERheScsXG4gICAgICAgICAgICAgICAgJ2xhc3REYXknLFxuICAgICAgICAgICAgICAgICduZXh0V2VlaycsXG4gICAgICAgICAgICAgICAgJ2xhc3RXZWVrJyxcbiAgICAgICAgICAgICAgICAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcm9wZXJ0eTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkaWZmIDwgLTZcbiAgICAgICAgICAgID8gJ3NhbWVFbHNlJ1xuICAgICAgICAgICAgOiBkaWZmIDwgLTFcbiAgICAgICAgICAgICAgPyAnbGFzdFdlZWsnXG4gICAgICAgICAgICAgIDogZGlmZiA8IDBcbiAgICAgICAgICAgICAgICA/ICdsYXN0RGF5J1xuICAgICAgICAgICAgICAgIDogZGlmZiA8IDFcbiAgICAgICAgICAgICAgICAgID8gJ3NhbWVEYXknXG4gICAgICAgICAgICAgICAgICA6IGRpZmYgPCAyXG4gICAgICAgICAgICAgICAgICAgID8gJ25leHREYXknXG4gICAgICAgICAgICAgICAgICAgIDogZGlmZiA8IDdcbiAgICAgICAgICAgICAgICAgICAgICA/ICduZXh0V2VlaydcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzYW1lRWxzZSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIkMSh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIHNpbmdsZSBwYXJhbWV0ZXIsIGZvcm1hdHMgb25seSBvdmVybG9hZCB0byB0aGUgY2FsZW5kYXIgZnVuY3Rpb25cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01vbWVudElucHV0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2FsZW5kYXJTcGVjKGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJyxcbiAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgZm9ybWF0cyAmJlxuICAgICAgICAgICAgICAgIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSlcbiAgICAgICAgICAgICAgICAgICAgPyBmb3JtYXRzW2Zvcm1hdF0uY2FsbCh0aGlzLCBub3cpXG4gICAgICAgICAgICAgICAgICAgIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQoXG4gICAgICAgICAgICBvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JldHdlZW4oZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgICAgICB2YXIgbG9jYWxGcm9tID0gaXNNb21lbnQoZnJvbSkgPyBmcm9tIDogY3JlYXRlTG9jYWwoZnJvbSksXG4gICAgICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8pID8gdG8gOiBjcmVhdGVMb2NhbCh0byk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsRnJvbS5pc1ZhbGlkKCkgJiYgbG9jYWxUby5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzBdID09PSAnKCdcbiAgICAgICAgICAgICAgICA/IHRoaXMuaXNBZnRlcihsb2NhbEZyb20sIHVuaXRzKVxuICAgICAgICAgICAgICAgIDogIXRoaXMuaXNCZWZvcmUobG9jYWxGcm9tLCB1bml0cykpICYmXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5pc0JlZm9yZShsb2NhbFRvLCB1bml0cylcbiAgICAgICAgICAgICAgICA6ICF0aGlzLmlzQWZ0ZXIobG9jYWxUbywgdW5pdHMpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmXG4gICAgICAgICAgICAgICAgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZihpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgdmFyIHRoYXQsIHpvbmVEZWx0YSwgb3V0cHV0O1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzO1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwXG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmKGEsIGIpIHtcbiAgICAgICAgaWYgKGEuZGF0ZSgpIDwgYi5kYXRlKCkpIHtcbiAgICAgICAgICAgIC8vIGVuZC1vZi1tb250aCBjYWxjdWxhdGlvbnMgd29yayBjb3JyZWN0IHdoZW4gdGhlIHN0YXJ0IG1vbnRoIGhhcyBtb3JlXG4gICAgICAgICAgICAvLyBkYXlzIHRoYW4gdGhlIGVuZCBtb250aC5cbiAgICAgICAgICAgIHJldHVybiAtbW9udGhEaWZmKGIsIGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9IChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICAgIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG4gICAgfVxuXG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZSxcbiAgICAgICAgICAgIG0gPSB1dGMgPyB0aGlzLmNsb25lKCkudXRjKCkgOiB0aGlzO1xuICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgICAgICBtLFxuICAgICAgICAgICAgICAgIHV0Y1xuICAgICAgICAgICAgICAgICAgICA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nXG4gICAgICAgICAgICAgICAgICAgIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKVxuICAgICAgICAgICAgICAgICAgICAudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgbSxcbiAgICAgICAgICAgIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICAgICAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVuYyA9ICdtb21lbnQnLFxuICAgICAgICAgICAgem9uZSA9ICcnLFxuICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgeWVhcixcbiAgICAgICAgICAgIGRhdGV0aW1lLFxuICAgICAgICAgICAgc3VmZml4O1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgICAgIHpvbmUgPSAnWic7XG4gICAgICAgIH1cbiAgICAgICAgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICAgICAgeWVhciA9IDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgICAgICBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgICAgICBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKClcbiAgICAgICAgICAgICAgICA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGNcbiAgICAgICAgICAgICAgICA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgdG86IHRoaXMsIGZyb206IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbU5vdyh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8odGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHwgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IGZyb206IHRoaXMsIHRvOiB0aW1lIH0pXG4gICAgICAgICAgICAgICAgLmxvY2FsZSh0aGlzLmxvY2FsZSgpKVxuICAgICAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICB2YXIgTVNfUEVSX1NFQ09ORCA9IDEwMDAsXG4gICAgICAgIE1TX1BFUl9NSU5VVEUgPSA2MCAqIE1TX1BFUl9TRUNPTkQsXG4gICAgICAgIE1TX1BFUl9IT1VSID0gNjAgKiBNU19QRVJfTUlOVVRFLFxuICAgICAgICBNU19QRVJfNDAwX1lFQVJTID0gKDM2NSAqIDQwMCArIDk3KSAqIDI0ICogTVNfUEVSX0hPVVI7XG5cbiAgICAvLyBhY3R1YWwgbW9kdWxvIC0gaGFuZGxlcyBuZWdhdGl2ZSBudW1iZXJzIChmb3IgZGF0ZXMgYmVmb3JlIDE5NzApOlxuICAgIGZ1bmN0aW9uIG1vZCQxKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICAgIHJldHVybiAoKGRpdmlkZW5kICUgZGl2aXNvcikgKyBkaXZpc29yKSAlIGRpdmlzb3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHksIG0sIGQpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHV0Y1N0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gRGF0ZS5VVEMgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSwgbSwgZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMyksXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMShcbiAgICAgICAgICAgICAgICAgICAgdGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZE9mKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSArIDEsIDAsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpICsgMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkgKyA3XG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgN1xuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgKyAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPVxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUiAtXG4gICAgICAgICAgICAgICAgICAgIG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICAgICApIC1cbiAgICAgICAgICAgICAgICAgICAgMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbS55ZWFyKCksXG4gICAgICAgICAgICBtLm1vbnRoKCksXG4gICAgICAgICAgICBtLmRhdGUoKSxcbiAgICAgICAgICAgIG0uaG91cigpLFxuICAgICAgICAgICAgbS5taW51dGUoKSxcbiAgICAgICAgICAgIG0uc2Vjb25kKCksXG4gICAgICAgICAgICBtLm1pbGxpc2Vjb25kKCksXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDIoKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdOJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OJywgMCwgMCwgJ2VyYU5hbWUnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OTk4nLCAwLCAwLCAnZXJhTmFycm93Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneScsIDFdLCAneW8nLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eScsIDJdLCAwLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXknLCAzXSwgMCwgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXl5eScsIDRdLCAwLCAnZXJhWWVhcicpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk4nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OTicsIG1hdGNoRXJhTmFtZSk7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OTk4nLCBtYXRjaEVyYU5hcnJvdyk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFxuICAgICAgICBbJ04nLCAnTk4nLCAnTk5OJywgJ05OTk4nLCAnTk5OTk4nXSxcbiAgICAgICAgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgdmFyIGVyYSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgICAgIGlmIChlcmEpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmEgPSBlcmE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRFcmEgPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBhZGRSZWdleFRva2VuKCd5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eXl5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneW8nLCBtYXRjaEVyYVllYXJPcmRpbmFsKTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWyd5JywgJ3l5JywgJ3l5eScsICd5eXl5J10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWyd5byddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgaWYgKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KSB7XG4gICAgICAgICAgICBtYXRjaCA9IGlucHV0Lm1hdGNoKGNvbmZpZy5fbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX2xvY2FsZS5lcmFZZWFyT3JkaW5hbFBhcnNlKSB7XG4gICAgICAgICAgICBhcnJheVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UoaW5wdXQsIG1hdGNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhcyhtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZGF0ZSxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLl9lcmFzIHx8IGdldExvY2FsZSgnZW4nKS5fZXJhcztcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS5zaW5jZSkuc3RhcnRPZignZGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0uc2luY2UgPSBkYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gK0luZmluaXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBob29rcyhlcmFzW2ldLnVudGlsKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0udW50aWwgPSBkYXRlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVyYXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhc1BhcnNlKGVyYU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmVyYXMoKSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhYmJyLFxuICAgICAgICAgICAgbmFycm93O1xuICAgICAgICBlcmFOYW1lID0gZXJhTmFtZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgbmFtZSA9IGVyYXNbaV0ubmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgYWJiciA9IGVyYXNbaV0uYWJici50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgbmFycm93ID0gZXJhc1tpXS5uYXJyb3cudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJiciA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hcnJvdyA9PT0gZXJhTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChbbmFtZSwgYWJiciwgbmFycm93XS5pbmRleE9mKGVyYU5hbWUpID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXNDb252ZXJ0WWVhcihlcmEsIHllYXIpIHtcbiAgICAgICAgdmFyIGRpciA9IGVyYS5zaW5jZSA8PSBlcmEudW50aWwgPyArMSA6IC0xO1xuICAgICAgICBpZiAoeWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaG9va3MoZXJhLnNpbmNlKS55ZWFyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaG9va3MoZXJhLnNpbmNlKS55ZWFyKCkgKyAoeWVhciAtIGVyYS5vZmZzZXQpICogZGlyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhTmFtZSgpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFOYXJyb3coKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFycm93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYUFiYnIoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0uYWJicjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhWWVhcigpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZGlyLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBkaXIgPSBlcmFzW2ldLnNpbmNlIDw9IGVyYXNbaV0udW50aWwgPyArMSA6IC0xO1xuXG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB8fFxuICAgICAgICAgICAgICAgIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnllYXIoKSAtIGhvb2tzKGVyYXNbaV0uc2luY2UpLnllYXIoKSkgKiBkaXIgK1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLm9mZnNldFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc05hbWVSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzTmFtZVJlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzTmFtZVJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNBYmJyUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc0FiYnJSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc0FiYnJSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzTmFycm93UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hcnJvd1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzTmFycm93UmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFBYmJyKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzQWJiclJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYU5hbWUoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhTmFycm93KGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzTmFycm93UmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhWWVhck9yZGluYWwoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9lcmFZZWFyT3JkaW5hbFJlZ2V4IHx8IG1hdGNoVW5zaWduZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZUVyYXNQYXJzZSgpIHtcbiAgICAgICAgdmFyIGFiYnJQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG5hbWVQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG5hcnJvd1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZXJhc05hbWUsXG4gICAgICAgICAgICBlcmFzQWJicixcbiAgICAgICAgICAgIGVyYXNOYXJyb3csXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBlcmFzTmFtZSA9IHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFtZSk7XG4gICAgICAgICAgICBlcmFzQWJiciA9IHJlZ2V4RXNjYXBlKGVyYXNbaV0uYWJicik7XG4gICAgICAgICAgICBlcmFzTmFycm93ID0gcmVnZXhFc2NhcGUoZXJhc1tpXS5uYXJyb3cpO1xuXG4gICAgICAgICAgICBuYW1lUGllY2VzLnB1c2goZXJhc05hbWUpO1xuICAgICAgICAgICAgYWJiclBpZWNlcy5wdXNoKGVyYXNBYmJyKTtcbiAgICAgICAgICAgIG5hcnJvd1BpZWNlcy5wdXNoKGVyYXNOYXJyb3cpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChlcmFzTmFtZSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGVyYXNBYmJyKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goZXJhc05hcnJvdyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lcmFzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNOYW1lUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBuYW1lUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc0FiYnJSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGFiYnJQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzTmFycm93UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIG5hcnJvd1BpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1llYXJGb3JtYXRUb2tlbih0b2tlbiwgZ2V0dGVyKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKDAsIFt0b2tlbiwgdG9rZW4ubGVuZ3RoXSwgMCwgZ2V0dGVyKTtcbiAgICB9XG5cbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignZycsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdHRycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdnZycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2cnLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHR0cnLCBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihcbiAgICAgICAgWydnZ2dnJywgJ2dnZ2dnJywgJ0dHR0cnLCAnR0dHR0cnXSxcbiAgICAgICAgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCkgKyB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3lcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMuaXNvV2VlaygpLFxuICAgICAgICAgICAgdGhpcy5pc29XZWVrZGF5KCksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5JU09XZWVrWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMuaXNvV2Vla1llYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luV2Vla1llYXIoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy53ZWVrWWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbiAgICBhZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbFxuICAgICAgICAgICAgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMylcbiAgICAgICAgICAgIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyAodGhpcy5tb250aCgpICUgMykpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHJldHVybiBpc1N0cmljdFxuICAgICAgICAgICAgPyBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2VcbiAgICAgICAgICAgIDogbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignREREJywgbWF0Y2gxdG8zKTtcbiAgICBhZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnREREJywgJ0REREQnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPVxuICAgICAgICAgICAgTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAodGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpIC0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ3llYXInKSkgLyA4NjRlNVxuICAgICAgICAgICAgKSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoaW5wdXQgLSBkYXlPZlllYXIsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ20nLCBtYXRjaDF0bzIsIG1hdGNoMXRvMkhhc1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJIYXNaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTUycsIDRdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTUycsIDZdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTUycsIDddLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTUycsIDldLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xuICAgIH0pO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUycsIG1hdGNoMXRvMywgbWF0Y2gxKTtcbiAgICBhZGRSZWdleFRva2VuKCdTUycsIG1hdGNoMXRvMywgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdTU1MnLCBtYXRjaDF0bzMsIG1hdGNoMyk7XG5cbiAgICB2YXIgdG9rZW4sIGdldFNldE1pbGxpc2Vjb25kO1xuICAgIGZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmb3IgKHRva2VuID0gJ1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xuICAgIH1cblxuICAgIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAwLCAwLCAnem9uZUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFpvbmVBYmJyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnVVRDJyA6ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFpvbmVOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLmFkZCA9IGFkZDtcbiAgICBwcm90by5jYWxlbmRhciA9IGNhbGVuZGFyJDE7XG4gICAgcHJvdG8uY2xvbmUgPSBjbG9uZTtcbiAgICBwcm90by5kaWZmID0gZGlmZjtcbiAgICBwcm90by5lbmRPZiA9IGVuZE9mO1xuICAgIHByb3RvLmZvcm1hdCA9IGZvcm1hdDtcbiAgICBwcm90by5mcm9tID0gZnJvbTtcbiAgICBwcm90by5mcm9tTm93ID0gZnJvbU5vdztcbiAgICBwcm90by50byA9IHRvO1xuICAgIHByb3RvLnRvTm93ID0gdG9Ob3c7XG4gICAgcHJvdG8uZ2V0ID0gc3RyaW5nR2V0O1xuICAgIHByb3RvLmludmFsaWRBdCA9IGludmFsaWRBdDtcbiAgICBwcm90by5pc0FmdGVyID0gaXNBZnRlcjtcbiAgICBwcm90by5pc0JlZm9yZSA9IGlzQmVmb3JlO1xuICAgIHByb3RvLmlzQmV0d2VlbiA9IGlzQmV0d2VlbjtcbiAgICBwcm90by5pc1NhbWUgPSBpc1NhbWU7XG4gICAgcHJvdG8uaXNTYW1lT3JBZnRlciA9IGlzU2FtZU9yQWZ0ZXI7XG4gICAgcHJvdG8uaXNTYW1lT3JCZWZvcmUgPSBpc1NhbWVPckJlZm9yZTtcbiAgICBwcm90by5pc1ZhbGlkID0gaXNWYWxpZCQyO1xuICAgIHByb3RvLmxhbmcgPSBsYW5nO1xuICAgIHByb3RvLmxvY2FsZSA9IGxvY2FsZTtcbiAgICBwcm90by5sb2NhbGVEYXRhID0gbG9jYWxlRGF0YTtcbiAgICBwcm90by5tYXggPSBwcm90b3R5cGVNYXg7XG4gICAgcHJvdG8ubWluID0gcHJvdG90eXBlTWluO1xuICAgIHByb3RvLnBhcnNpbmdGbGFncyA9IHBhcnNpbmdGbGFncztcbiAgICBwcm90by5zZXQgPSBzdHJpbmdTZXQ7XG4gICAgcHJvdG8uc3RhcnRPZiA9IHN0YXJ0T2Y7XG4gICAgcHJvdG8uc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBwcm90by50b0FycmF5ID0gdG9BcnJheTtcbiAgICBwcm90by50b09iamVjdCA9IHRvT2JqZWN0O1xuICAgIHByb3RvLnRvRGF0ZSA9IHRvRGF0ZTtcbiAgICBwcm90by50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nO1xuICAgIHByb3RvLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuZm9yICE9IG51bGwpIHtcbiAgICAgICAgcHJvdG9bU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ01vbWVudDwnICsgdGhpcy5mb3JtYXQoKSArICc+JztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcHJvdG8udG9KU09OID0gdG9KU09OO1xuICAgIHByb3RvLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgcHJvdG8udW5peCA9IHVuaXg7XG4gICAgcHJvdG8udmFsdWVPZiA9IHZhbHVlT2Y7XG4gICAgcHJvdG8uY3JlYXRpb25EYXRhID0gY3JlYXRpb25EYXRhO1xuICAgIHByb3RvLmVyYU5hbWUgPSBnZXRFcmFOYW1lO1xuICAgIHByb3RvLmVyYU5hcnJvdyA9IGdldEVyYU5hcnJvdztcbiAgICBwcm90by5lcmFBYmJyID0gZ2V0RXJhQWJicjtcbiAgICBwcm90by5lcmFZZWFyID0gZ2V0RXJhWWVhcjtcbiAgICBwcm90by55ZWFyID0gZ2V0U2V0WWVhcjtcbiAgICBwcm90by5pc0xlYXBZZWFyID0gZ2V0SXNMZWFwWWVhcjtcbiAgICBwcm90by53ZWVrWWVhciA9IGdldFNldFdlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG4gICAgcHJvdG8ucXVhcnRlciA9IHByb3RvLnF1YXJ0ZXJzID0gZ2V0U2V0UXVhcnRlcjtcbiAgICBwcm90by5tb250aCA9IGdldFNldE1vbnRoO1xuICAgIHByb3RvLmRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGg7XG4gICAgcHJvdG8ud2VlayA9IHByb3RvLndlZWtzID0gZ2V0U2V0V2VlaztcbiAgICBwcm90by5pc29XZWVrID0gcHJvdG8uaXNvV2Vla3MgPSBnZXRTZXRJU09XZWVrO1xuICAgIHByb3RvLndlZWtzSW5ZZWFyID0gZ2V0V2Vla3NJblllYXI7XG4gICAgcHJvdG8ud2Vla3NJbldlZWtZZWFyID0gZ2V0V2Vla3NJbldlZWtZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJbklTT1dlZWtZZWFyID0gZ2V0SVNPV2Vla3NJbklTT1dlZWtZZWFyO1xuICAgIHByb3RvLmRhdGUgPSBnZXRTZXREYXlPZk1vbnRoO1xuICAgIHByb3RvLmRheSA9IHByb3RvLmRheXMgPSBnZXRTZXREYXlPZldlZWs7XG4gICAgcHJvdG8ud2Vla2RheSA9IGdldFNldExvY2FsZURheU9mV2VlaztcbiAgICBwcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xuICAgIHByb3RvLmRheU9mWWVhciA9IGdldFNldERheU9mWWVhcjtcbiAgICBwcm90by5ob3VyID0gcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuICAgIHByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG4gICAgcHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcbiAgICBwcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuICAgIHByb3RvLnV0Y09mZnNldCA9IGdldFNldE9mZnNldDtcbiAgICBwcm90by51dGMgPSBzZXRPZmZzZXRUb1VUQztcbiAgICBwcm90by5sb2NhbCA9IHNldE9mZnNldFRvTG9jYWw7XG4gICAgcHJvdG8ucGFyc2Vab25lID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgcHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbiAgICBwcm90by5pc0RTVCA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xuICAgIHByb3RvLmlzTG9jYWwgPSBpc0xvY2FsO1xuICAgIHByb3RvLmlzVXRjT2Zmc2V0ID0gaXNVdGNPZmZzZXQ7XG4gICAgcHJvdG8uaXNVdGMgPSBpc1V0YztcbiAgICBwcm90by5pc1VUQyA9IGlzVXRjO1xuICAgIHByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG4gICAgcHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcbiAgICBwcm90by5kYXRlcyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0U2V0RGF5T2ZNb250aFxuICAgICk7XG4gICAgcHJvdG8ubW9udGhzID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJyxcbiAgICAgICAgZ2V0U2V0TW9udGhcbiAgICApO1xuICAgIHByb3RvLnllYXJzID0gZGVwcmVjYXRlKFxuICAgICAgICAneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsXG4gICAgICAgIGdldFNldFllYXJcbiAgICApO1xuICAgIHByb3RvLnpvbmUgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lLycsXG4gICAgICAgIGdldFNldFpvbmVcbiAgICApO1xuICAgIHByb3RvLmlzRFNUU2hpZnRlZCA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLFxuICAgICAgICBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWRcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlVW5peChpbnB1dCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJblpvbmUoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZVBhcnNlUG9zdEZvcm1hdChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90byQxLmNhbGVuZGFyID0gY2FsZW5kYXI7XG4gICAgcHJvdG8kMS5sb25nRGF0ZUZvcm1hdCA9IGxvbmdEYXRlRm9ybWF0O1xuICAgIHByb3RvJDEuaW52YWxpZERhdGUgPSBpbnZhbGlkRGF0ZTtcbiAgICBwcm90byQxLm9yZGluYWwgPSBvcmRpbmFsO1xuICAgIHByb3RvJDEucHJlcGFyc2UgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5wb3N0Zm9ybWF0ID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucmVsYXRpdmVUaW1lID0gcmVsYXRpdmVUaW1lO1xuICAgIHByb3RvJDEucGFzdEZ1dHVyZSA9IHBhc3RGdXR1cmU7XG4gICAgcHJvdG8kMS5zZXQgPSBzZXQ7XG4gICAgcHJvdG8kMS5lcmFzID0gbG9jYWxlRXJhcztcbiAgICBwcm90byQxLmVyYXNQYXJzZSA9IGxvY2FsZUVyYXNQYXJzZTtcbiAgICBwcm90byQxLmVyYXNDb252ZXJ0WWVhciA9IGxvY2FsZUVyYXNDb252ZXJ0WWVhcjtcbiAgICBwcm90byQxLmVyYXNBYmJyUmVnZXggPSBlcmFzQWJiclJlZ2V4O1xuICAgIHByb3RvJDEuZXJhc05hbWVSZWdleCA9IGVyYXNOYW1lUmVnZXg7XG4gICAgcHJvdG8kMS5lcmFzTmFycm93UmVnZXggPSBlcmFzTmFycm93UmVnZXg7XG5cbiAgICBwcm90byQxLm1vbnRocyA9IGxvY2FsZU1vbnRocztcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0ID0gbG9jYWxlTW9udGhzU2hvcnQ7XG4gICAgcHJvdG8kMS5tb250aHNQYXJzZSA9IGxvY2FsZU1vbnRoc1BhcnNlO1xuICAgIHByb3RvJDEubW9udGhzUmVnZXggPSBtb250aHNSZWdleDtcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0UmVnZXggPSBtb250aHNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG4gICAgcHJvdG8kMS5maXJzdERheU9mWWVhciA9IGxvY2FsZUZpcnN0RGF5T2ZZZWFyO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2VlaztcblxuICAgIHByb3RvJDEud2Vla2RheXMgPSBsb2NhbGVXZWVrZGF5cztcbiAgICBwcm90byQxLndlZWtkYXlzTWluID0gbG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0ID0gbG9jYWxlV2Vla2RheXNTaG9ydDtcbiAgICBwcm90byQxLndlZWtkYXlzUGFyc2UgPSBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5c1JlZ2V4ID0gd2Vla2RheXNSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCA9IHdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzTWluUmVnZXggPSB3ZWVrZGF5c01pblJlZ2V4O1xuXG4gICAgcHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbiAgICBwcm90byQxLm1lcmlkaWVtID0gbG9jYWxlTWVyaWRpZW07XG5cbiAgICBmdW5jdGlvbiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8vICgpXG4gICAgLy8gKDUpXG4gICAgLy8gKGZtdCwgNSlcbiAgICAvLyAoZm10KVxuICAgIC8vICh0cnVlKVxuICAgIC8vICh0cnVlLCA1KVxuICAgIC8vICh0cnVlLCBmbXQsIDUpXG4gICAgLy8gKHRydWUsIGZtdClcbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgZmllbGQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICBzaGlmdCA9IGxvY2FsZVNvcnRlZCA/IGxvY2FsZS5fd2Vlay5kb3cgOiAwLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG91dCA9IFtdO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5cycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0KGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xuICAgIH1cblxuICAgIGdldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgICAgIGVyYXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDEtMDEtMDEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiArSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdBbm5vIERvbWluaScsXG4gICAgICAgICAgICAgICAgbmFycm93OiAnQUQnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdBRCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMDAwMC0xMi0zMScsXG4gICAgICAgICAgICAgICAgdW50aWw6IC1JbmZpbml0eSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0JlZm9yZSBDaHJpc3QnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0JDJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQkMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgdG9JbnQoKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIGhvb2tzLmxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsXG4gICAgICAgIGdldFNldEdsb2JhbExvY2FsZVxuICAgICk7XG4gICAgaG9va3MubGFuZ0RhdGEgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJyxcbiAgICAgICAgZ2V0TG9jYWxlXG4gICAgKTtcblxuICAgIHZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBhYnMoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgICAgICB0aGlzLl9tb250aHMgPSBtYXRoQWJzKHRoaXMuX21vbnRocyk7XG5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgPSBtYXRoQWJzKGRhdGEuaG91cnMpO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzID0gbWF0aEFicyhkYXRhLnllYXJzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCQxKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uX2RheXMgKz0gZGlyZWN0aW9uICogb3RoZXIuX2RheXM7XG4gICAgICAgIGR1cmF0aW9uLl9tb250aHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21vbnRocztcblxuICAgICAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIGFkZCgxLCAncycpIG9yIGFkZChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBhZGQkMShpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDEoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0NlaWwobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnViYmxlKCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMsXG4gICAgICAgICAgICBtb250aHMgPSB0aGlzLl9tb250aHMsXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fZGF0YSxcbiAgICAgICAgICAgIHNlY29uZHMsXG4gICAgICAgICAgICBtaW51dGVzLFxuICAgICAgICAgICAgaG91cnMsXG4gICAgICAgICAgICB5ZWFycyxcbiAgICAgICAgICAgIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAgICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgICAgIGRheXMgPSAwO1xuICAgICAgICAgICAgbW9udGhzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICAgICAgc2Vjb25kcyA9IGFic0Zsb29yKG1pbGxpc2Vjb25kcyAvIDEwMDApO1xuICAgICAgICBkYXRhLnNlY29uZHMgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgICAgbWludXRlcyA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGRhdGEubWludXRlcyA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgICBob3VycyA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIGRhdGEuaG91cnMgPSBob3VycyAlIDI0O1xuXG4gICAgICAgIGRheXMgKz0gYWJzRmxvb3IoaG91cnMgLyAyNCk7XG5cbiAgICAgICAgLy8gY29udmVydCBkYXlzIHRvIG1vbnRoc1xuICAgICAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgICAgIG1vbnRocyArPSBtb250aHNGcm9tRGF5cztcbiAgICAgICAgZGF5cyAtPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHNGcm9tRGF5cykpO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICBkYXRhLmRheXMgPSBkYXlzO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICAgICAgZGF0YS55ZWFycyA9IHllYXJzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNUb01vbnRocyhkYXlzKSB7XG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgICAgIHJldHVybiAoZGF5cyAqIDQ4MDApIC8gMTQ2MDk3O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyhtb250aHMpIHtcbiAgICAgICAgLy8gdGhlIHJldmVyc2Ugb2YgZGF5c1RvTW9udGhzXG4gICAgICAgIHJldHVybiAobW9udGhzICogMTQ2MDk3KSAvIDQ4MDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXModW5pdHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5cyxcbiAgICAgICAgICAgIG1vbnRocyxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBpZiAodW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICdxdWFydGVyJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocztcbiAgICAgICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRocyAvIDM7XG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHMgLyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtaWxsaXNlY29uZHMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChpc3N1ZSAjMTg2NylcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzIC8gNyArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDI0ICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAqIDE0NDAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlQXMoYWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyksXG4gICAgICAgIGFzU2Vjb25kcyA9IG1ha2VBcygncycpLFxuICAgICAgICBhc01pbnV0ZXMgPSBtYWtlQXMoJ20nKSxcbiAgICAgICAgYXNIb3VycyA9IG1ha2VBcygnaCcpLFxuICAgICAgICBhc0RheXMgPSBtYWtlQXMoJ2QnKSxcbiAgICAgICAgYXNXZWVrcyA9IG1ha2VBcygndycpLFxuICAgICAgICBhc01vbnRocyA9IG1ha2VBcygnTScpLFxuICAgICAgICBhc1F1YXJ0ZXJzID0gbWFrZUFzKCdRJyksXG4gICAgICAgIGFzWWVhcnMgPSBtYWtlQXMoJ3knKSxcbiAgICAgICAgdmFsdWVPZiQxID0gYXNNaWxsaXNlY29uZHM7XG5cbiAgICBmdW5jdGlvbiBjbG9uZSQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0JDIodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9kYXRhW25hbWVdIDogTmFOO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKSxcbiAgICAgICAgc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKSxcbiAgICAgICAgbWludXRlcyA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKSxcbiAgICAgICAgaG91cnMgPSBtYWtlR2V0dGVyKCdob3VycycpLFxuICAgICAgICBkYXlzID0gbWFrZUdldHRlcignZGF5cycpLFxuICAgICAgICBtb250aHMgPSBtYWtlR2V0dGVyKCdtb250aHMnKSxcbiAgICAgICAgeWVhcnMgPSBtYWtlR2V0dGVyKCd5ZWFycycpO1xuXG4gICAgZnVuY3Rpb24gd2Vla3MoKSB7XG4gICAgICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xuICAgIH1cblxuICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICAgIHRocmVzaG9sZHMgPSB7XG4gICAgICAgICAgICBzczogNDQsIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgICAgICAgICAgczogNDUsIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgICAgICBtOiA0NSwgLy8gbWludXRlcyB0byBob3VyXG4gICAgICAgICAgICBoOiAyMiwgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgICAgICBkOiAyNiwgLy8gZGF5cyB0byBtb250aC93ZWVrXG4gICAgICAgICAgICB3OiBudWxsLCAvLyB3ZWVrcyB0byBtb250aFxuICAgICAgICAgICAgTTogMTEsIC8vIG1vbnRocyB0byB5ZWFyXG4gICAgICAgIH07XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCB0aHJlc2hvbGRzLCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ocG9zTmVnRHVyYXRpb24pLmFicygpLFxuICAgICAgICAgICAgc2Vjb25kcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpLFxuICAgICAgICAgICAgbWludXRlcyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpLFxuICAgICAgICAgICAgaG91cnMgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKSxcbiAgICAgICAgICAgIGRheXMgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKSxcbiAgICAgICAgICAgIG1vbnRocyA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpLFxuICAgICAgICAgICAgd2Vla3MgPSByb3VuZChkdXJhdGlvbi5hcygndycpKSxcbiAgICAgICAgICAgIHllYXJzID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSksXG4gICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICAoc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdKSB8fFxuICAgICAgICAgICAgICAgIChzZWNvbmRzIDwgdGhyZXNob2xkcy5zICYmIFsnc3MnLCBzZWNvbmRzXSkgfHxcbiAgICAgICAgICAgICAgICAobWludXRlcyA8PSAxICYmIFsnbSddKSB8fFxuICAgICAgICAgICAgICAgIChtaW51dGVzIDwgdGhyZXNob2xkcy5tICYmIFsnbW0nLCBtaW51dGVzXSkgfHxcbiAgICAgICAgICAgICAgICAoaG91cnMgPD0gMSAmJiBbJ2gnXSkgfHxcbiAgICAgICAgICAgICAgICAoaG91cnMgPCB0aHJlc2hvbGRzLmggJiYgWydoaCcsIGhvdXJzXSkgfHxcbiAgICAgICAgICAgICAgICAoZGF5cyA8PSAxICYmIFsnZCddKSB8fFxuICAgICAgICAgICAgICAgIChkYXlzIDwgdGhyZXNob2xkcy5kICYmIFsnZGQnLCBkYXlzXSk7XG5cbiAgICAgICAgaWYgKHRocmVzaG9sZHMudyAhPSBudWxsKSB7XG4gICAgICAgICAgICBhID1cbiAgICAgICAgICAgICAgICBhIHx8XG4gICAgICAgICAgICAgICAgKHdlZWtzIDw9IDEgJiYgWyd3J10pIHx8XG4gICAgICAgICAgICAgICAgKHdlZWtzIDwgdGhyZXNob2xkcy53ICYmIFsnd3cnLCB3ZWVrc10pO1xuICAgICAgICB9XG4gICAgICAgIGEgPSBhIHx8XG4gICAgICAgICAgICAobW9udGhzIDw9IDEgJiYgWydNJ10pIHx8XG4gICAgICAgICAgICAobW9udGhzIDwgdGhyZXNob2xkcy5NICYmIFsnTU0nLCBtb250aHNdKSB8fFxuICAgICAgICAgICAgKHllYXJzIDw9IDEgJiYgWyd5J10pIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCB0aGUgcm91bmRpbmcgZnVuY3Rpb24gZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nKHJvdW5kaW5nRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygcm91bmRpbmdGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgICAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUoYXJnV2l0aFN1ZmZpeCwgYXJnVGhyZXNob2xkcykge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3aXRoU3VmZml4ID0gZmFsc2UsXG4gICAgICAgICAgICB0aCA9IHRocmVzaG9sZHMsXG4gICAgICAgICAgICBsb2NhbGUsXG4gICAgICAgICAgICBvdXRwdXQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdXaXRoU3VmZml4ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgYXJnVGhyZXNob2xkcyA9IGFyZ1dpdGhTdWZmaXg7XG4gICAgICAgICAgICBhcmdXaXRoU3VmZml4ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhcmdXaXRoU3VmZml4ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHdpdGhTdWZmaXggPSBhcmdXaXRoU3VmZml4O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYXJnVGhyZXNob2xkcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoID0gT2JqZWN0LmFzc2lnbih7fSwgdGhyZXNob2xkcywgYXJnVGhyZXNob2xkcyk7XG4gICAgICAgICAgICBpZiAoYXJnVGhyZXNob2xkcy5zICE9IG51bGwgJiYgYXJnVGhyZXNob2xkcy5zcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGguc3MgPSBhcmdUaHJlc2hvbGRzLnMgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCB0aCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIHNpZ24oeCkge1xuICAgICAgICByZXR1cm4gKHggPiAwKSAtICh4IDwgMCkgfHwgK3g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmckMSgpIHtcbiAgICAgICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAgICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgICAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAgICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMCxcbiAgICAgICAgICAgIGRheXMgPSBhYnMkMSh0aGlzLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFicyQxKHRoaXMuX21vbnRocyksXG4gICAgICAgICAgICBtaW51dGVzLFxuICAgICAgICAgICAgaG91cnMsXG4gICAgICAgICAgICB5ZWFycyxcbiAgICAgICAgICAgIHMsXG4gICAgICAgICAgICB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCksXG4gICAgICAgICAgICB0b3RhbFNpZ24sXG4gICAgICAgICAgICB5bVNpZ24sXG4gICAgICAgICAgICBkYXlzU2lnbixcbiAgICAgICAgICAgIGhtc1NpZ247XG5cbiAgICAgICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0aGUgc2FtZSBhcyBDIydzIChOb2RhKSBhbmQgcHl0aG9uIChpc29kYXRlKS4uLlxuICAgICAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMzYwMCBzZWNvbmRzIC0+IDYwIG1pbnV0ZXMgLT4gMSBob3VyXG4gICAgICAgIG1pbnV0ZXMgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBob3VycyA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIHNlY29uZHMgJT0gNjA7XG4gICAgICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgICAgIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcblxuICAgICAgICB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICAgICAgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRvdGFsU2lnbiArXG4gICAgICAgICAgICAnUCcgK1xuICAgICAgICAgICAgKHllYXJzID8geW1TaWduICsgeWVhcnMgKyAnWScgOiAnJykgK1xuICAgICAgICAgICAgKG1vbnRocyA/IHltU2lnbiArIG1vbnRocyArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoZGF5cyA/IGRheXNTaWduICsgZGF5cyArICdEJyA6ICcnKSArXG4gICAgICAgICAgICAoaG91cnMgfHwgbWludXRlcyB8fCBzZWNvbmRzID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgIChob3VycyA/IGhtc1NpZ24gKyBob3VycyArICdIJyA6ICcnKSArXG4gICAgICAgICAgICAobWludXRlcyA/IGhtc1NpZ24gKyBtaW51dGVzICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChzZWNvbmRzID8gaG1zU2lnbiArIHMgKyAnUycgOiAnJylcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDIuaXNWYWxpZCA9IGlzVmFsaWQkMTtcbiAgICBwcm90byQyLmFicyA9IGFicztcbiAgICBwcm90byQyLmFkZCA9IGFkZCQxO1xuICAgIHByb3RvJDIuc3VidHJhY3QgPSBzdWJ0cmFjdCQxO1xuICAgIHByb3RvJDIuYXMgPSBhcztcbiAgICBwcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5hc1NlY29uZHMgPSBhc1NlY29uZHM7XG4gICAgcHJvdG8kMi5hc01pbnV0ZXMgPSBhc01pbnV0ZXM7XG4gICAgcHJvdG8kMi5hc0hvdXJzID0gYXNIb3VycztcbiAgICBwcm90byQyLmFzRGF5cyA9IGFzRGF5cztcbiAgICBwcm90byQyLmFzV2Vla3MgPSBhc1dlZWtzO1xuICAgIHByb3RvJDIuYXNNb250aHMgPSBhc01vbnRocztcbiAgICBwcm90byQyLmFzUXVhcnRlcnMgPSBhc1F1YXJ0ZXJzO1xuICAgIHByb3RvJDIuYXNZZWFycyA9IGFzWWVhcnM7XG4gICAgcHJvdG8kMi52YWx1ZU9mID0gdmFsdWVPZiQxO1xuICAgIHByb3RvJDIuX2J1YmJsZSA9IGJ1YmJsZTtcbiAgICBwcm90byQyLmNsb25lID0gY2xvbmUkMTtcbiAgICBwcm90byQyLmdldCA9IGdldCQyO1xuICAgIHByb3RvJDIubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuc2Vjb25kcyA9IHNlY29uZHM7XG4gICAgcHJvdG8kMi5taW51dGVzID0gbWludXRlcztcbiAgICBwcm90byQyLmhvdXJzID0gaG91cnM7XG4gICAgcHJvdG8kMi5kYXlzID0gZGF5cztcbiAgICBwcm90byQyLndlZWtzID0gd2Vla3M7XG4gICAgcHJvdG8kMi5tb250aHMgPSBtb250aHM7XG4gICAgcHJvdG8kMi55ZWFycyA9IHllYXJzO1xuICAgIHByb3RvJDIuaHVtYW5pemUgPSBodW1hbml6ZTtcbiAgICBwcm90byQyLnRvSVNPU3RyaW5nID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvU3RyaW5nID0gdG9JU09TdHJpbmckMTtcbiAgICBwcm90byQyLnRvSlNPTiA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi5sb2NhbGUgPSBsb2NhbGU7XG4gICAgcHJvdG8kMi5sb2NhbGVEYXRhID0gbG9jYWxlRGF0YTtcblxuICAgIHByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsXG4gICAgICAgIHRvSVNPU3RyaW5nJDFcbiAgICApO1xuICAgIHByb3RvJDIubGFuZyA9IGxhbmc7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCkgKiAxMDAwKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG4gICAgfSk7XG5cbiAgICAvLyEgbW9tZW50LmpzXG5cbiAgICBob29rcy52ZXJzaW9uID0gJzIuMzAuMSc7XG5cbiAgICBzZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG4gICAgaG9va3MuZm4gPSBwcm90bztcbiAgICBob29rcy5taW4gPSBtaW47XG4gICAgaG9va3MubWF4ID0gbWF4O1xuICAgIGhvb2tzLm5vdyA9IG5vdztcbiAgICBob29rcy51dGMgPSBjcmVhdGVVVEM7XG4gICAgaG9va3MudW5peCA9IGNyZWF0ZVVuaXg7XG4gICAgaG9va3MubW9udGhzID0gbGlzdE1vbnRocztcbiAgICBob29rcy5pc0RhdGUgPSBpc0RhdGU7XG4gICAgaG9va3MubG9jYWxlID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuICAgIGhvb2tzLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkO1xuICAgIGhvb2tzLmR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb247XG4gICAgaG9va3MuaXNNb21lbnQgPSBpc01vbWVudDtcbiAgICBob29rcy53ZWVrZGF5cyA9IGxpc3RXZWVrZGF5cztcbiAgICBob29rcy5wYXJzZVpvbmUgPSBjcmVhdGVJblpvbmU7XG4gICAgaG9va3MubG9jYWxlRGF0YSA9IGdldExvY2FsZTtcbiAgICBob29rcy5pc0R1cmF0aW9uID0gaXNEdXJhdGlvbjtcbiAgICBob29rcy5tb250aHNTaG9ydCA9IGxpc3RNb250aHNTaG9ydDtcbiAgICBob29rcy53ZWVrZGF5c01pbiA9IGxpc3RXZWVrZGF5c01pbjtcbiAgICBob29rcy5kZWZpbmVMb2NhbGUgPSBkZWZpbmVMb2NhbGU7XG4gICAgaG9va3MudXBkYXRlTG9jYWxlID0gdXBkYXRlTG9jYWxlO1xuICAgIGhvb2tzLmxvY2FsZXMgPSBsaXN0TG9jYWxlcztcbiAgICBob29rcy53ZWVrZGF5c1Nob3J0ID0gbGlzdFdlZWtkYXlzU2hvcnQ7XG4gICAgaG9va3Mubm9ybWFsaXplVW5pdHMgPSBub3JtYWxpemVVbml0cztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyA9IGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nO1xuICAgIGhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbiAgICBob29rcy5jYWxlbmRhckZvcm1hdCA9IGdldENhbGVuZGFyRm9ybWF0O1xuICAgIGhvb2tzLnByb3RvdHlwZSA9IHByb3RvO1xuXG4gICAgLy8gY3VycmVudGx5IEhUTUw1IGlucHV0IHR5cGUgb25seSBzdXBwb3J0cyAyNC1ob3VyIGZvcm1hdHNcbiAgICBob29rcy5IVE1MNV9GTVQgPSB7XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMOiAnWVlZWS1NTS1ERFRISDptbScsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9TRUNPTkRTOiAnWVlZWS1NTS1ERFRISDptbTpzcycsIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgREFURTogJ1lZWVktTU0tREQnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICBUSU1FOiAnSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIxXCIgLz5cbiAgICAgICAgVElNRV9NUzogJ0hIOm1tOnNzLlNTUycsIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIFdFRUs6ICdHR0dHLVtXXVdXJywgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICAgICAgTU9OVEg6ICdZWVlZLU1NJywgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG4gICAgfTtcblxuICAgIHJldHVybiBob29rcztcblxufSkpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCBxcyBmcm9tICdxcyc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnbG9kYXNoLmlzc3RyaW5nJztcbmltcG9ydCBwVGhyb3R0bGUgZnJvbSAncC10aHJvdHRsZSc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICdsb2Rhc2guaXNwbGFpbm9iamVjdCc7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX3dyYXBSZWdFeHAoKSB7XG4gIF93cmFwUmVnRXhwID0gZnVuY3Rpb24gKHJlLCBncm91cHMpIHtcbiAgICByZXR1cm4gbmV3IEJhYmVsUmVnRXhwKHJlLCB2b2lkIDAsIGdyb3Vwcyk7XG4gIH07XG5cbiAgdmFyIF9zdXBlciA9IFJlZ0V4cC5wcm90b3R5cGUsXG4gICAgICBfZ3JvdXBzID0gbmV3IFdlYWtNYXAoKTtcblxuICBmdW5jdGlvbiBCYWJlbFJlZ0V4cChyZSwgZmxhZ3MsIGdyb3Vwcykge1xuICAgIHZhciBfdGhpcyA9IG5ldyBSZWdFeHAocmUsIGZsYWdzKTtcblxuICAgIHJldHVybiBfZ3JvdXBzLnNldChfdGhpcywgZ3JvdXBzIHx8IF9ncm91cHMuZ2V0KHJlKSksIF9zZXRQcm90b3R5cGVPZihfdGhpcywgQmFiZWxSZWdFeHAucHJvdG90eXBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkR3JvdXBzKHJlc3VsdCwgcmUpIHtcbiAgICB2YXIgZyA9IF9ncm91cHMuZ2V0KHJlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhnKS5yZWR1Y2UoZnVuY3Rpb24gKGdyb3VwcywgbmFtZSkge1xuICAgICAgcmV0dXJuIGdyb3Vwc1tuYW1lXSA9IHJlc3VsdFtnW25hbWVdXSwgZ3JvdXBzO1xuICAgIH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG5cbiAgcmV0dXJuIF9pbmhlcml0cyhCYWJlbFJlZ0V4cCwgUmVnRXhwKSwgQmFiZWxSZWdFeHAucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9zdXBlci5leGVjLmNhbGwodGhpcywgc3RyKTtcblxuICAgIHJldHVybiByZXN1bHQgJiYgKHJlc3VsdC5ncm91cHMgPSBidWlsZEdyb3VwcyhyZXN1bHQsIHRoaXMpKSwgcmVzdWx0O1xuICB9LCBCYWJlbFJlZ0V4cC5wcm90b3R5cGVbU3ltYm9sLnJlcGxhY2VdID0gZnVuY3Rpb24gKHN0ciwgc3Vic3RpdHV0aW9uKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHN1YnN0aXR1dGlvbikge1xuICAgICAgdmFyIGdyb3VwcyA9IF9ncm91cHMuZ2V0KHRoaXMpO1xuXG4gICAgICByZXR1cm4gX3N1cGVyW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsIHN0ciwgc3Vic3RpdHV0aW9uLnJlcGxhY2UoL1xcJDwoW14+XSspPi9nLCBmdW5jdGlvbiAoXywgbmFtZSkge1xuICAgICAgICByZXR1cm4gXCIkXCIgKyBncm91cHNbbmFtZV07XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygc3Vic3RpdHV0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gX3N1cGVyW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsIHN0ciwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgIT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSAmJiAoYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJncykpLnB1c2goYnVpbGRHcm91cHMoYXJncywgX3RoaXMpKSwgc3Vic3RpdHV0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIHN1YnN0aXR1dGlvbik7XG4gIH0sIF93cmFwUmVnRXhwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcblxuICBpZiAoIWl0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBvW2krK11cbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0sXG4gICAgICAgIGY6IEZcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xuICB9XG5cbiAgdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLFxuICAgICAgZGlkRXJyID0gZmFsc2UsXG4gICAgICBlcnI7XG4gIHJldHVybiB7XG4gICAgczogZnVuY3Rpb24gKCkge1xuICAgICAgaXQgPSBpdC5jYWxsKG8pO1xuICAgIH0sXG4gICAgbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7XG4gICAgICBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lO1xuICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgfSxcbiAgICBlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgZGlkRXJyID0gdHJ1ZTtcbiAgICAgIGVyciA9IGU7XG4gICAgfSxcbiAgICBmOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGRpZEVycikgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNOb2RlKCkge1xuICAvKipcbiAgICogUG9seWZpbGxzIG9mICdwcm9jZXNzJyBtaWdodCBzZXQgcHJvY2Vzcy5icm93c2VyID09PSB0cnVlXG4gICAqXG4gICAqIFNlZTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svbm9kZS1saWJzLWJyb3dzZXIvYmxvYi9tYXN0ZXIvbW9jay9wcm9jZXNzLmpzI0w4XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWZ1bmN0em9tYmllL25vZGUtcHJvY2Vzcy9ibG9iL21hc3Rlci9icm93c2VyLmpzI0wxNTZcbiAgICoqL1xuICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICFwcm9jZXNzLmJyb3dzZXI7XG59XG5mdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ25hdmlnYXRvcicgaW4gd2luZG93ICYmICdwcm9kdWN0JyBpbiB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJztcbn1cbmZ1bmN0aW9uIGdldE5vZGVWZXJzaW9uKCkge1xuICByZXR1cm4gcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgPyBcInZcIi5jb25jYXQocHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSA6IHByb2Nlc3MudmVyc2lvbjtcbn1cbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgcmV0dXJuIHdpbmRvdztcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbnZhciBQRVJDRU5UQUdFX1JFR0VYID0gLyojX19QVVJFX18qL193cmFwUmVnRXhwKC8oWzAtOV0rKSglKS8sIHtcbiAgdmFsdWU6IDFcbn0pO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVMaW1pdCh0eXBlKSB7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDc7XG4gIHZhciBsaW1pdCA9IG1heDtcblxuICBpZiAoUEVSQ0VOVEFHRV9SRUdFWC50ZXN0KHR5cGUpKSB7XG4gICAgdmFyIF90eXBlJG1hdGNoO1xuXG4gICAgdmFyIGdyb3VwcyA9IChfdHlwZSRtYXRjaCA9IHR5cGUubWF0Y2goUEVSQ0VOVEFHRV9SRUdFWCkpID09PSBudWxsIHx8IF90eXBlJG1hdGNoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdHlwZSRtYXRjaC5ncm91cHM7XG5cbiAgICBpZiAoZ3JvdXBzICYmIGdyb3Vwcy52YWx1ZSkge1xuICAgICAgdmFyIHBlcmNlbnRhZ2UgPSBwYXJzZUludChncm91cHMudmFsdWUpIC8gMTAwO1xuICAgICAgbGltaXQgPSBNYXRoLnJvdW5kKG1heCAqIHBlcmNlbnRhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBNYXRoLm1pbigzMCwgTWF0aC5tYXgoMSwgbGltaXQpKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGhyb3R0bGUobGltaXQsIGxvZ2dlcikge1xuICBsb2dnZXIoJ2luZm8nLCBcIlRocm90dGxlIHJlcXVlc3QgdG8gXCIuY29uY2F0KGxpbWl0LCBcIi9zXCIpKTtcbiAgcmV0dXJuIHBUaHJvdHRsZSh7XG4gICAgbGltaXQ6IGxpbWl0LFxuICAgIGludGVydmFsOiAxMDAwLFxuICAgIHN0cmljdDogZmFsc2VcbiAgfSk7XG59XG5cbnZhciByYXRlTGltaXRUaHJvdHRsZSA9IChmdW5jdGlvbiAoYXhpb3NJbnN0YW5jZSkge1xuICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2F1dG8nO1xuICB2YXIgX2F4aW9zSW5zdGFuY2UkZGVmYXVsID0gYXhpb3NJbnN0YW5jZS5kZWZhdWx0cy5sb2dIYW5kbGVyLFxuICAgICAgbG9nSGFuZGxlciA9IF9heGlvc0luc3RhbmNlJGRlZmF1bCA9PT0gdm9pZCAwID8gbm9vcCA6IF9heGlvc0luc3RhbmNlJGRlZmF1bDtcbiAgdmFyIGxpbWl0ID0gaXNTdHJpbmcodHlwZSkgPyBjYWxjdWxhdGVMaW1pdCh0eXBlKSA6IGNhbGN1bGF0ZUxpbWl0KCdhdXRvJywgdHlwZSk7XG4gIHZhciB0aHJvdHRsZSA9IGNyZWF0ZVRocm90dGxlKGxpbWl0LCBsb2dIYW5kbGVyKTtcbiAgdmFyIGlzQ2FsY3VsYXRlZCA9IGZhbHNlO1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9ySWQgPSBheGlvc0luc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfSkoKTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfSk7XG4gIHZhciByZXNwb25zZUludGVyY2VwdG9ySWQgPSBheGlvc0luc3RhbmNlLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgaWYgKCFpc0NhbGN1bGF0ZWQgJiYgaXNTdHJpbmcodHlwZSkgJiYgKHR5cGUgPT09ICdhdXRvJyB8fCBQRVJDRU5UQUdFX1JFR0VYLnRlc3QodHlwZSkpICYmIHJlc3BvbnNlLmhlYWRlcnMgJiYgcmVzcG9uc2UuaGVhZGVyc1sneC1jb250ZW50ZnVsLXJhdGVsaW1pdC1zZWNvbmQtbGltaXQnXSkge1xuICAgICAgdmFyIHJhd0xpbWl0ID0gcGFyc2VJbnQocmVzcG9uc2UuaGVhZGVyc1sneC1jb250ZW50ZnVsLXJhdGVsaW1pdC1zZWNvbmQtbGltaXQnXSk7XG4gICAgICB2YXIgbmV4dExpbWl0ID0gY2FsY3VsYXRlTGltaXQodHlwZSwgcmF3TGltaXQpO1xuXG4gICAgICBpZiAobmV4dExpbWl0ICE9PSBsaW1pdCkge1xuICAgICAgICBpZiAocmVxdWVzdEludGVyY2VwdG9ySWQpIHtcbiAgICAgICAgICBheGlvc0luc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LmVqZWN0KHJlcXVlc3RJbnRlcmNlcHRvcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbWl0ID0gbmV4dExpbWl0O1xuICAgICAgICB0aHJvdHRsZSA9IGNyZWF0ZVRocm90dGxlKG5leHRMaW1pdCwgbG9nSGFuZGxlcik7XG4gICAgICAgIHJlcXVlc3RJbnRlcmNlcHRvcklkID0gYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICAgIH0pKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpc0NhbGN1bGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC5lamVjdChyZXF1ZXN0SW50ZXJjZXB0b3JJZCk7XG4gICAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZWplY3QocmVzcG9uc2VJbnRlcmNlcHRvcklkKTtcbiAgfTtcbn0pO1xuXG52YXIgZGVsYXkgPSBmdW5jdGlvbiBkZWxheShtcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFdhaXQgPSBmdW5jdGlvbiBkZWZhdWx0V2FpdChhdHRlbXB0cykge1xuICByZXR1cm4gTWF0aC5wb3coTWF0aC5TUVJUMiwgYXR0ZW1wdHMpO1xufTtcblxuZnVuY3Rpb24gcmF0ZUxpbWl0KGluc3RhbmNlKSB7XG4gIHZhciBtYXhSZXRyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTtcbiAgdmFyIF9pbnN0YW5jZSRkZWZhdWx0cyA9IGluc3RhbmNlLmRlZmF1bHRzLFxuICAgICAgX2luc3RhbmNlJGRlZmF1bHRzJHJlID0gX2luc3RhbmNlJGRlZmF1bHRzLnJlc3BvbnNlTG9nZ2VyLFxuICAgICAgcmVzcG9uc2VMb2dnZXIgPSBfaW5zdGFuY2UkZGVmYXVsdHMkcmUgPT09IHZvaWQgMCA/IG5vb3AgOiBfaW5zdGFuY2UkZGVmYXVsdHMkcmUsXG4gICAgICBfaW5zdGFuY2UkZGVmYXVsdHMkcmUyID0gX2luc3RhbmNlJGRlZmF1bHRzLnJlcXVlc3RMb2dnZXIsXG4gICAgICByZXF1ZXN0TG9nZ2VyID0gX2luc3RhbmNlJGRlZmF1bHRzJHJlMiA9PT0gdm9pZCAwID8gbm9vcCA6IF9pbnN0YW5jZSRkZWZhdWx0cyRyZTI7XG4gIGluc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmVxdWVzdExvZ2dlcihjb25maWcpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJlcXVlc3RMb2dnZXIoZXJyb3IpO1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH0pO1xuICBpbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgaGVyZVxuICAgIHJlc3BvbnNlTG9nZ2VyKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHZhciByZXNwb25zZSA9IGVycm9yLnJlc3BvbnNlO1xuICAgIHZhciBjb25maWcgPSBlcnJvci5jb25maWc7XG4gICAgcmVzcG9uc2VMb2dnZXIoZXJyb3IpOyAvLyBEbyBub3QgcmV0cnkgaWYgaXQgaXMgZGlzYWJsZWQgb3Igbm8gcmVxdWVzdCBjb25maWcgZXhpc3RzIChub3QgYW4gYXhpb3MgZXJyb3IpXG5cbiAgICBpZiAoIWNvbmZpZyB8fCAhaW5zdGFuY2UuZGVmYXVsdHMucmV0cnlPbkVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH0gLy8gUmV0cmllZCBhbHJlYWR5IGZvciBtYXggYXR0ZW1wdHNcblxuXG4gICAgdmFyIGRvbmVBdHRlbXB0cyA9IGNvbmZpZy5hdHRlbXB0cyB8fCAxO1xuXG4gICAgaWYgKGRvbmVBdHRlbXB0cyA+IG1heFJldHJ5KSB7XG4gICAgICBlcnJvci5hdHRlbXB0cyA9IGNvbmZpZy5hdHRlbXB0cztcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgdmFyIHJldHJ5RXJyb3JUeXBlID0gbnVsbDtcbiAgICB2YXIgd2FpdCA9IGRlZmF1bHRXYWl0KGRvbmVBdHRlbXB0cyk7IC8vIEVycm9ycyB3aXRob3V0IHJlc3BvbnNlIGRpZCBub3QgcmVjZWl2ZSBhbnl0aGluZyBmcm9tIHRoZSBzZXJ2ZXJcblxuICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgIHJldHJ5RXJyb3JUeXBlID0gJ0Nvbm5lY3Rpb24nO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDUwMCAmJiByZXNwb25zZS5zdGF0dXMgPCA2MDApIHtcbiAgICAgIC8vIDUqKiBlcnJvcnMgYXJlIHNlcnZlciByZWxhdGVkXG4gICAgICByZXRyeUVycm9yVHlwZSA9IFwiU2VydmVyIFwiLmNvbmNhdChyZXNwb25zZS5zdGF0dXMpO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MjkpIHtcbiAgICAgIC8vIDQyOSBlcnJvcnMgYXJlIGV4Y2VlZGVkIHJhdGUgbGltaXQgZXhjZXB0aW9uc1xuICAgICAgcmV0cnlFcnJvclR5cGUgPSAnUmF0ZSBsaW1pdCc7IC8vIGFsbCBoZWFkZXJzIGFyZSBsb3dlcmNhc2VkIGJ5IGF4aW9zIGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL2F4aW9zL2lzc3Vlcy80MTNcblxuICAgICAgaWYgKHJlc3BvbnNlLmhlYWRlcnMgJiYgZXJyb3IucmVzcG9uc2UuaGVhZGVyc1sneC1jb250ZW50ZnVsLXJhdGVsaW1pdC1yZXNldCddKSB7XG4gICAgICAgIHdhaXQgPSByZXNwb25zZS5oZWFkZXJzWyd4LWNvbnRlbnRmdWwtcmF0ZWxpbWl0LXJlc2V0J107XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJldHJ5RXJyb3JUeXBlKSB7XG4gICAgICAvLyBjb252ZXJ0IHRvIG1zIGFuZCBhZGQgaml0dGVyXG4gICAgICB3YWl0ID0gTWF0aC5mbG9vcih3YWl0ICogMTAwMCArIE1hdGgucmFuZG9tKCkgKiAyMDAgKyA1MDApO1xuICAgICAgaW5zdGFuY2UuZGVmYXVsdHMubG9nSGFuZGxlcignd2FybmluZycsIFwiXCIuY29uY2F0KHJldHJ5RXJyb3JUeXBlLCBcIiBlcnJvciBvY2N1cnJlZC4gV2FpdGluZyBmb3IgXCIpLmNvbmNhdCh3YWl0LCBcIiBtcyBiZWZvcmUgcmV0cnlpbmcuLi5cIikpOyAvLyBpbmNyZWFzZSBhdHRlbXB0cyBjb3VudGVyXG5cbiAgICAgIGNvbmZpZy5hdHRlbXB0cyA9IGRvbmVBdHRlbXB0cyArIDE7XG4gICAgICAvKiBTb21laG93IGJldHdlZW4gdGhlIGludGVyY2VwdG9yIGFuZCByZXRyeWluZyB0aGUgcmVxdWVzdCB0aGUgaHR0cEFnZW50L2h0dHBzQWdlbnQgZ2V0cyB0cmFuc2Zvcm1lZCBmcm9tIGFuIEFnZW50LWxpa2Ugb2JqZWN0XG4gICAgICAgdG8gYSByZWd1bGFyIG9iamVjdCwgY2F1c2luZyBmYWlsdXJlcyBvbiByZXRyaWVzIGFmdGVyIHJhdGUgbGltaXRzLiBSZW1vdmluZyB0aGVzZSBwcm9wZXJ0aWVzIGhlcmUgZml4ZXMgdGhlIGVycm9yLCBidXQgcmV0cnlcbiAgICAgICByZXF1ZXN0cyBzdGlsbCB1c2UgdGhlIG9yaWdpbmFsIGh0dHAvaHR0cHNBZ2VudCBwcm9wZXJ0eSAqL1xuXG4gICAgICBkZWxldGUgY29uZmlnLmh0dHBBZ2VudDtcbiAgICAgIGRlbGV0ZSBjb25maWcuaHR0cHNBZ2VudDtcbiAgICAgIHJldHVybiBkZWxheSh3YWl0KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlKGNvbmZpZyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXN5bmNUb2tlbihpbnN0YW5jZSwgZ2V0VG9rZW4pIHtcbiAgaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICByZXR1cm4gZ2V0VG9rZW4oKS50aGVuKGZ1bmN0aW9uIChhY2Nlc3NUb2tlbikge1xuICAgICAgY29uZmlnLmhlYWRlcnMgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgY29uZmlnLmhlYWRlcnMpLCB7fSwge1xuICAgICAgICBBdXRob3JpemF0aW9uOiBcIkJlYXJlciBcIi5jb25jYXQoYWNjZXNzVG9rZW4pXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBBbHNvIGVuZm9yY2VzIHRvcGxldmVsIGRvbWFpbiBzcGVjaWZpZWQsIG5vIHNwYWNlcyBhbmQgbm8gcHJvdG9jb2xcblxudmFyIEhPU1RfUkVHRVggPSAvXig/IVxcdys6XFwvXFwvKShbXlxcczpdK1xcLj9bXlxcczpdKykoPzo6KFxcZCspKT8oPyE6KSQvO1xuLyoqXG4gKiBDcmVhdGUgcHJlIGNvbmZpZ3VyZWQgYXhpb3MgaW5zdGFuY2VcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0F4aW9zU3RhdGljfSBheGlvcyAtIEF4aW9zIGxpYnJhcnlcbiAqIEBwYXJhbSB7Q3JlYXRlSHR0cENsaWVudFBhcmFtc30gb3B0aW9ucyAtIEluaXRpYWxpemF0aW9uIHBhcmFtZXRlcnMgZm9yIHRoZSBIVFRQIGNsaWVudFxuICogQHJldHVybiB7Q29udGVudGZ1bEF4aW9zSW5zdGFuY2V9IEluaXRpYWxpemVkIGF4aW9zIGluc3RhbmNlXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlSHR0cENsaWVudChheGlvcywgb3B0aW9ucykge1xuICB2YXIgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBpbnNlY3VyZTogZmFsc2UsXG4gICAgcmV0cnlPbkVycm9yOiB0cnVlLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbG9nSGFuZGxlcjogZnVuY3Rpb24gbG9nSGFuZGxlcihsZXZlbCwgZGF0YSkge1xuICAgICAgaWYgKGxldmVsID09PSAnZXJyb3InICYmIGRhdGEpIHtcbiAgICAgICAgdmFyIHRpdGxlID0gW2RhdGEubmFtZSwgZGF0YS5tZXNzYWdlXS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfSkuam9pbignIC0gJyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbZXJyb3JdIFwiLmNvbmNhdCh0aXRsZSkpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKFwiW1wiLmNvbmNhdChsZXZlbCwgXCJdIFwiKS5jb25jYXQoZGF0YSkpO1xuICAgIH0sXG4gICAgLy8gUGFzc2VkIHRvIGF4aW9zXG4gICAgaGVhZGVyczoge30sXG4gICAgaHR0cEFnZW50OiBmYWxzZSxcbiAgICBodHRwc0FnZW50OiBmYWxzZSxcbiAgICB0aW1lb3V0OiAzMDAwMCxcbiAgICB0aHJvdHRsZTogMCxcbiAgICBwcm94eTogZmFsc2UsXG4gICAgYmFzZVBhdGg6ICcnLFxuICAgIGFkYXB0ZXI6IHVuZGVmaW5lZCxcbiAgICBtYXhDb250ZW50TGVuZ3RoOiAxMDczNzQxODI0LFxuICAgIC8vIDFHQlxuICAgIG1heEJvZHlMZW5ndGg6IDEwNzM3NDE4MjQgLy8gMUdCXG5cbiAgfTtcblxuICB2YXIgY29uZmlnID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGRlZmF1bHRDb25maWcpLCBvcHRpb25zKTtcblxuICBpZiAoIWNvbmZpZy5hY2Nlc3NUb2tlbikge1xuICAgIHZhciBtaXNzaW5nQWNjZXNzVG9rZW5FcnJvciA9IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHBhcmFtZXRlciBhY2Nlc3NUb2tlbicpO1xuICAgIGNvbmZpZy5sb2dIYW5kbGVyKCdlcnJvcicsIG1pc3NpbmdBY2Nlc3NUb2tlbkVycm9yKTtcbiAgICB0aHJvdyBtaXNzaW5nQWNjZXNzVG9rZW5FcnJvcjtcbiAgfSAvLyBDb25zdHJ1Y3QgYXhpb3MgYmFzZVVSTCBvcHRpb25cblxuXG4gIHZhciBwcm90b2NvbCA9IGNvbmZpZy5pbnNlY3VyZSA/ICdodHRwJyA6ICdodHRwcyc7XG4gIHZhciBzcGFjZSA9IGNvbmZpZy5zcGFjZSA/IFwiXCIuY29uY2F0KGNvbmZpZy5zcGFjZSwgXCIvXCIpIDogJyc7XG4gIHZhciBob3N0bmFtZSA9IGNvbmZpZy5kZWZhdWx0SG9zdG5hbWU7XG4gIHZhciBwb3J0ID0gY29uZmlnLmluc2VjdXJlID8gODAgOiA0NDM7XG5cbiAgaWYgKGNvbmZpZy5ob3N0ICYmIEhPU1RfUkVHRVgudGVzdChjb25maWcuaG9zdCkpIHtcbiAgICB2YXIgcGFyc2VkID0gY29uZmlnLmhvc3Quc3BsaXQoJzonKTtcblxuICAgIGlmIChwYXJzZWQubGVuZ3RoID09PSAyKSB7XG5cbiAgICAgIHZhciBfcGFyc2VkID0gX3NsaWNlZFRvQXJyYXkocGFyc2VkLCAyKTtcblxuICAgICAgaG9zdG5hbWUgPSBfcGFyc2VkWzBdO1xuICAgICAgcG9ydCA9IF9wYXJzZWRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGhvc3RuYW1lID0gcGFyc2VkWzBdO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhhdCBiYXNlUGF0aCBkb2VzIHN0YXJ0IGJ1dCBub3QgZW5kIHdpdGggYSBzbGFzaFxuXG5cbiAgaWYgKGNvbmZpZy5iYXNlUGF0aCkge1xuICAgIGNvbmZpZy5iYXNlUGF0aCA9IFwiL1wiLmNvbmNhdChjb25maWcuYmFzZVBhdGguc3BsaXQoJy8nKS5maWx0ZXIoQm9vbGVhbikuam9pbignLycpKTtcbiAgfVxuXG4gIHZhciBiYXNlVVJMID0gb3B0aW9ucy5iYXNlVVJMIHx8IFwiXCIuY29uY2F0KHByb3RvY29sLCBcIjovL1wiKS5jb25jYXQoaG9zdG5hbWUsIFwiOlwiKS5jb25jYXQocG9ydCkuY29uY2F0KGNvbmZpZy5iYXNlUGF0aCwgXCIvc3BhY2VzL1wiKS5jb25jYXQoc3BhY2UpO1xuXG4gIGlmICghY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiAmJiB0eXBlb2YgY29uZmlnLmFjY2Vzc1Rva2VuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCZWFyZXIgJyArIGNvbmZpZy5hY2Nlc3NUb2tlbjtcbiAgfSAvLyBTZXQgdGhlc2UgaGVhZGVycyBvbmx5IGZvciBub2RlIGJlY2F1c2UgYnJvd3NlcnMgZG9uJ3QgbGlrZSBpdCB3aGVuIHlvdVxuICAvLyBvdmVycmlkZSB1c2VyLWFnZW50IG9yIGFjY2VwdC1lbmNvZGluZy5cbiAgLy8gVGhlIFNES3Mgc2hvdWxkIHNldCB0aGVpciBvd24gWC1Db250ZW50ZnVsLVVzZXItQWdlbnQuXG5cblxuICBpZiAoaXNOb2RlKCkpIHtcbiAgICBjb25maWcuaGVhZGVyc1sndXNlci1hZ2VudCddID0gJ25vZGUuanMvJyArIGdldE5vZGVWZXJzaW9uKCk7XG4gICAgY29uZmlnLmhlYWRlcnNbJ0FjY2VwdC1FbmNvZGluZyddID0gJ2d6aXAnO1xuICB9XG5cbiAgdmFyIGF4aW9zT3B0aW9ucyA9IHtcbiAgICAvLyBBeGlvc1xuICAgIGJhc2VVUkw6IGJhc2VVUkwsXG4gICAgaGVhZGVyczogY29uZmlnLmhlYWRlcnMsXG4gICAgaHR0cEFnZW50OiBjb25maWcuaHR0cEFnZW50LFxuICAgIGh0dHBzQWdlbnQ6IGNvbmZpZy5odHRwc0FnZW50LFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IHFzLnN0cmluZ2lmeSxcbiAgICBwcm94eTogY29uZmlnLnByb3h5LFxuICAgIHRpbWVvdXQ6IGNvbmZpZy50aW1lb3V0LFxuICAgIGFkYXB0ZXI6IGNvbmZpZy5hZGFwdGVyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGNvbmZpZy5tYXhDb250ZW50TGVuZ3RoLFxuICAgIG1heEJvZHlMZW5ndGg6IGNvbmZpZy5tYXhCb2R5TGVuZ3RoLFxuICAgIC8vIENvbnRlbnRmdWxcbiAgICBsb2dIYW5kbGVyOiBjb25maWcubG9nSGFuZGxlcixcbiAgICByZXNwb25zZUxvZ2dlcjogY29uZmlnLnJlc3BvbnNlTG9nZ2VyLFxuICAgIHJlcXVlc3RMb2dnZXI6IGNvbmZpZy5yZXF1ZXN0TG9nZ2VyLFxuICAgIHJldHJ5T25FcnJvcjogY29uZmlnLnJldHJ5T25FcnJvclxuICB9O1xuICB2YXIgaW5zdGFuY2UgPSBheGlvcy5jcmVhdGUoYXhpb3NPcHRpb25zKTtcbiAgaW5zdGFuY2UuaHR0cENsaWVudFBhcmFtcyA9IG9wdGlvbnM7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGF4aW9zIGluc3RhbmNlIHdpdGggdGhlIHNhbWUgZGVmYXVsdCBiYXNlIHBhcmFtZXRlcnMgYXMgdGhlXG4gICAqIGN1cnJlbnQgb25lLCBhbmQgd2l0aCBhbnkgb3ZlcnJpZGVzIHBhc3NlZCB0byB0aGUgbmV3UGFyYW1zIG9iamVjdFxuICAgKiBUaGlzIGlzIHVzZWZ1bCBhcyB0aGUgU0RLcyB1c2UgZGVwZW5kZW5jeSBpbmplY3Rpb24gdG8gZ2V0IHRoZSBheGlvcyBsaWJyYXJ5XG4gICAqIGFuZCB0aGUgdmVyc2lvbiBvZiB0aGUgbGlicmFyeSBjb21lcyBmcm9tIGRpZmZlcmVudCBwbGFjZXMgZGVwZW5kaW5nXG4gICAqIG9uIHdoZXRoZXIgaXQncyBhIGJyb3dzZXIgYnVpbGQgb3IgYSBub2RlLmpzIGJ1aWxkLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0NyZWF0ZUh0dHBDbGllbnRQYXJhbXN9IGh0dHBDbGllbnRQYXJhbXMgLSBJbml0aWFsaXphdGlvbiBwYXJhbWV0ZXJzIGZvciB0aGUgSFRUUCBjbGllbnRcbiAgICogQHJldHVybiB7Q29udGVudGZ1bEF4aW9zSW5zdGFuY2V9IEluaXRpYWxpemVkIGF4aW9zIGluc3RhbmNlXG4gICAqL1xuXG4gIGluc3RhbmNlLmNsb25lV2l0aE5ld1BhcmFtcyA9IGZ1bmN0aW9uIChuZXdQYXJhbXMpIHtcbiAgICByZXR1cm4gY3JlYXRlSHR0cENsaWVudChheGlvcywgX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGNvcHkob3B0aW9ucykpLCBuZXdQYXJhbXMpKTtcbiAgfTtcbiAgLyoqXG4gICAqIEFwcGx5IGludGVyY2VwdG9ycy5cbiAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGUgb3JkZXIgb2YgaW50ZXJjZXB0b3JzIGlzIGltcG9ydGFudFxuICAgKi9cblxuXG4gIGlmIChjb25maWcub25CZWZvcmVSZXF1ZXN0KSB7XG4gICAgaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGNvbmZpZy5vbkJlZm9yZVJlcXVlc3QpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjb25maWcuYWNjZXNzVG9rZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICBhc3luY1Rva2VuKGluc3RhbmNlLCBjb25maWcuYWNjZXNzVG9rZW4pO1xuICB9XG5cbiAgaWYgKGNvbmZpZy50aHJvdHRsZSkge1xuICAgIHJhdGVMaW1pdFRocm90dGxlKGluc3RhbmNlLCBjb25maWcudGhyb3R0bGUpO1xuICB9XG5cbiAgcmF0ZUxpbWl0KGluc3RhbmNlLCBjb25maWcucmV0cnlMaW1pdCk7XG5cbiAgaWYgKGNvbmZpZy5vbkVycm9yKSB7XG4gICAgaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LCBjb25maWcub25FcnJvcik7XG4gIH1cblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqXG4gKiBDcmVhdGVzIHJlcXVlc3QgcGFyYW1ldGVycyBjb25maWd1cmF0aW9uIGJ5IHBhcnNpbmcgYW4gZXhpc3RpbmcgcXVlcnkgb2JqZWN0XG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5XG4gKiBAcmV0dXJuIHtPYmplY3R9IENvbmZpZyBvYmplY3Qgd2l0aCBgcGFyYW1zYCBwcm9wZXJ0eSwgcmVhZHkgdG8gYmUgdXNlZCBpbiBheGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0Q29uZmlnKF9yZWYpIHtcbiAgdmFyIHF1ZXJ5ID0gX3JlZi5xdWVyeTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuICBkZWxldGUgcXVlcnkucmVzb2x2ZUxpbmtzO1xuICBjb25maWcucGFyYW1zID0gY29weShxdWVyeSk7XG4gIHJldHVybiBjb25maWc7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBlbmZvcmNlT2JqUGF0aChvYmosIHBhdGgpIHtcbiAgaWYgKCEocGF0aCBpbiBvYmopKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpO1xuICAgIGVyci5uYW1lID0gJ1Byb3BlcnR5TWlzc2luZyc7XG4gICAgZXJyLm1lc3NhZ2UgPSBcIlJlcXVpcmVkIHByb3BlcnR5IFwiLmNvbmNhdChwYXRoLCBcIiBtaXNzaW5nIGZyb206XFxuXFxuXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShvYmopLCBcIlxcblxcblwiKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gY29waWVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2ZyZWV6ZVxuZnVuY3Rpb24gZGVlcEZyZWV6ZShvYmplY3QpIHtcbiAgdmFyIHByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XG5cbiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHByb3BOYW1lcyksXG4gICAgICBfc3RlcDtcblxuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgbmFtZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgJiYgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGRlZXBGcmVlemUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IuZigpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUob2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gZnJlZXplU3lzKG9iaikge1xuICBkZWVwRnJlZXplKG9iai5zeXMgfHwge30pO1xuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBnZXRCcm93c2VyT1MoKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coKTtcblxuICBpZiAoIXdpbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHVzZXJBZ2VudCA9IHdpbi5uYXZpZ2F0b3IudXNlckFnZW50OyAvLyBUT0RPOiBwbGF0Zm9ybSBpcyBkZXByZWNhdGVkLlxuXG4gIHZhciBwbGF0Zm9ybSA9IHdpbi5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIHZhciBtYWNvc1BsYXRmb3JtcyA9IFsnTWFjaW50b3NoJywgJ01hY0ludGVsJywgJ01hY1BQQycsICdNYWM2OEsnXTtcbiAgdmFyIHdpbmRvd3NQbGF0Zm9ybXMgPSBbJ1dpbjMyJywgJ1dpbjY0JywgJ1dpbmRvd3MnLCAnV2luQ0UnXTtcbiAgdmFyIGlvc1BsYXRmb3JtcyA9IFsnaVBob25lJywgJ2lQYWQnLCAnaVBvZCddO1xuXG4gIGlmIChtYWNvc1BsYXRmb3Jtcy5pbmRleE9mKHBsYXRmb3JtKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gJ21hY09TJztcbiAgfSBlbHNlIGlmIChpb3NQbGF0Zm9ybXMuaW5kZXhPZihwbGF0Zm9ybSkgIT09IC0xKSB7XG4gICAgcmV0dXJuICdpT1MnO1xuICB9IGVsc2UgaWYgKHdpbmRvd3NQbGF0Zm9ybXMuaW5kZXhPZihwbGF0Zm9ybSkgIT09IC0xKSB7XG4gICAgcmV0dXJuICdXaW5kb3dzJztcbiAgfSBlbHNlIGlmICgvQW5kcm9pZC8udGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgcmV0dXJuICdBbmRyb2lkJztcbiAgfSBlbHNlIGlmICgvTGludXgvLnRlc3QocGxhdGZvcm0pKSB7XG4gICAgcmV0dXJuICdMaW51eCc7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZU9TKCkge1xuICB2YXIgcGxhdGZvcm0gPSBwcm9jZXNzLnBsYXRmb3JtIHx8ICdsaW51eCc7XG4gIHZhciB2ZXJzaW9uID0gcHJvY2Vzcy52ZXJzaW9uIHx8ICcwLjAuMCc7XG4gIHZhciBwbGF0Zm9ybU1hcCA9IHtcbiAgICBhbmRyb2lkOiAnQW5kcm9pZCcsXG4gICAgYWl4OiAnTGludXgnLFxuICAgIGRhcndpbjogJ21hY09TJyxcbiAgICBmcmVlYnNkOiAnTGludXgnLFxuICAgIGxpbnV4OiAnTGludXgnLFxuICAgIG9wZW5ic2Q6ICdMaW51eCcsXG4gICAgc3Vub3M6ICdMaW51eCcsXG4gICAgd2luMzI6ICdXaW5kb3dzJ1xuICB9O1xuXG4gIGlmIChwbGF0Zm9ybSBpbiBwbGF0Zm9ybU1hcCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChwbGF0Zm9ybU1hcFtwbGF0Zm9ybV0gfHwgJ0xpbnV4JywgXCIvXCIpLmNvbmNhdCh2ZXJzaW9uKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRVc2VyQWdlbnRIZWFkZXIoc2RrLCBhcHBsaWNhdGlvbiwgaW50ZWdyYXRpb24sIGZlYXR1cmUpIHtcbiAgdmFyIGhlYWRlclBhcnRzID0gW107XG5cbiAgaWYgKGFwcGxpY2F0aW9uKSB7XG4gICAgaGVhZGVyUGFydHMucHVzaChcImFwcCBcIi5jb25jYXQoYXBwbGljYXRpb24pKTtcbiAgfVxuXG4gIGlmIChpbnRlZ3JhdGlvbikge1xuICAgIGhlYWRlclBhcnRzLnB1c2goXCJpbnRlZ3JhdGlvbiBcIi5jb25jYXQoaW50ZWdyYXRpb24pKTtcbiAgfVxuXG4gIGlmIChmZWF0dXJlKSB7XG4gICAgaGVhZGVyUGFydHMucHVzaCgnZmVhdHVyZSAnICsgZmVhdHVyZSk7XG4gIH1cblxuICBoZWFkZXJQYXJ0cy5wdXNoKFwic2RrIFwiLmNvbmNhdChzZGspKTtcbiAgdmFyIHBsYXRmb3JtID0gbnVsbDtcblxuICB0cnkge1xuICAgIGlmIChpc1JlYWN0TmF0aXZlKCkpIHtcbiAgICAgIHBsYXRmb3JtID0gZ2V0QnJvd3Nlck9TKCk7XG4gICAgICBoZWFkZXJQYXJ0cy5wdXNoKCdwbGF0Zm9ybSBSZWFjdE5hdGl2ZScpO1xuICAgIH0gZWxzZSBpZiAoaXNOb2RlKCkpIHtcbiAgICAgIHBsYXRmb3JtID0gZ2V0Tm9kZU9TKCk7XG4gICAgICBoZWFkZXJQYXJ0cy5wdXNoKFwicGxhdGZvcm0gbm9kZS5qcy9cIi5jb25jYXQoZ2V0Tm9kZVZlcnNpb24oKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGF0Zm9ybSA9IGdldEJyb3dzZXJPUygpO1xuICAgICAgaGVhZGVyUGFydHMucHVzaCgncGxhdGZvcm0gYnJvd3NlcicpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHBsYXRmb3JtID0gbnVsbDtcbiAgfVxuXG4gIGlmIChwbGF0Zm9ybSkge1xuICAgIGhlYWRlclBhcnRzLnB1c2goXCJvcyBcIi5jb25jYXQocGxhdGZvcm0pKTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChoZWFkZXJQYXJ0cy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbSAhPT0gJyc7XG4gIH0pLmpvaW4oJzsgJyksIFwiO1wiKTtcbn1cblxuLyoqXG4gKiBNaXhlcyBpbiBhIG1ldGhvZCB0byByZXR1cm4ganVzdCBhIHBsYWluIG9iamVjdCB3aXRoIG5vIGFkZGl0aW9uYWwgbWV0aG9kc1xuICogQHByaXZhdGVcbiAqIEBwYXJhbSBkYXRhIC0gQW55IHBsYWluIEpTT04gcmVzcG9uc2UgcmV0dXJuZWQgZnJvbSB0aGUgQVBJXG4gKiBAcmV0dXJuIEVuaGFuY2VkIG9iamVjdCB3aXRoIHRvUGxhaW5PYmplY3QgbWV0aG9kXG4gKi9cblxuZnVuY3Rpb24gdG9QbGFpbk9iamVjdChkYXRhKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwgJ3RvUGxhaW5PYmplY3QnLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgcmV0dXJuIGNvcHkodGhpcyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBIYW5kbGVzIGVycm9ycyByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIuIFBhcnNlcyB0aGUgZXJyb3IgaW50byBhIG1vcmUgdXNlZnVsXG4gKiBmb3JtYXQsIHBsYWNlcyBpdCBpbiBhbiBleGNlcHRpb24gYW5kIHRocm93cyBpdC5cbiAqIFNlZSBodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVmZXJlbmNlcy9lcnJvcnMvXG4gKiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoZSBkYXRhIHJlY2VpdmVkIG9uIHRoZSBlcnJvclJlc3BvbnNlLmRhdGEgcHJvcGVydHlcbiAqIGFuZCB0aGUgZXhwZWN0ZWQgZXJyb3IgY29kZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlcnJvckhhbmRsZXIoZXJyb3JSZXNwb25zZSkge1xuICB2YXIgY29uZmlnID0gZXJyb3JSZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZSA9IGVycm9yUmVzcG9uc2UucmVzcG9uc2U7XG4gIHZhciBlcnJvck5hbWU7IC8vIE9ic2N1cmUgdGhlIE1hbmFnZW1lbnQgdG9rZW5cblxuICBpZiAoY29uZmlnICYmIGNvbmZpZy5oZWFkZXJzICYmIGNvbmZpZy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10pIHtcbiAgICB2YXIgdG9rZW4gPSBcIi4uLlwiLmNvbmNhdChjb25maWcuaGVhZGVyc1snQXV0aG9yaXphdGlvbiddLnN1YnN0cigtNSkpO1xuICAgIGNvbmZpZy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBcIkJlYXJlciBcIi5jb25jYXQodG9rZW4pO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KHJlc3BvbnNlKSB8fCAhaXNQbGFpbk9iamVjdChjb25maWcpKSB7XG4gICAgdGhyb3cgZXJyb3JSZXNwb25zZTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLmRhdGE7XG4gIHZhciBlcnJvckRhdGEgPSB7XG4gICAgc3RhdHVzOiByZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2Uuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgIG1lc3NhZ2U6ICcnLFxuICAgIGRldGFpbHM6IHt9XG4gIH07XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QoY29uZmlnKSkge1xuICAgIGVycm9yRGF0YS5yZXF1ZXN0ID0ge1xuICAgICAgdXJsOiBjb25maWcudXJsLFxuICAgICAgaGVhZGVyczogY29uZmlnLmhlYWRlcnMsXG4gICAgICBtZXRob2Q6IGNvbmZpZy5tZXRob2QsXG4gICAgICBwYXlsb2FkRGF0YTogY29uZmlnLmRhdGFcbiAgICB9O1xuICB9XG5cbiAgaWYgKGRhdGEgJiYgaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGlmICgncmVxdWVzdElkJyBpbiBkYXRhKSB7XG4gICAgICBlcnJvckRhdGEucmVxdWVzdElkID0gZGF0YS5yZXF1ZXN0SWQgfHwgJ1VOS05PV04nO1xuICAgIH1cblxuICAgIGlmICgnbWVzc2FnZScgaW4gZGF0YSkge1xuICAgICAgZXJyb3JEYXRhLm1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2UgfHwgJyc7XG4gICAgfVxuXG4gICAgaWYgKCdkZXRhaWxzJyBpbiBkYXRhKSB7XG4gICAgICBlcnJvckRhdGEuZGV0YWlscyA9IGRhdGEuZGV0YWlscyB8fCB7fTtcbiAgICB9XG5cbiAgICBpZiAoJ3N5cycgaW4gZGF0YSkge1xuICAgICAgaWYgKCdpZCcgaW4gZGF0YS5zeXMpIHtcbiAgICAgICAgZXJyb3JOYW1lID0gZGF0YS5zeXMuaWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG4gIGVycm9yLm5hbWUgPSBlcnJvck5hbWUgJiYgZXJyb3JOYW1lICE9PSAnVW5rbm93bicgPyBlcnJvck5hbWUgOiBcIlwiLmNvbmNhdChyZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2Uuc3RhdHVzLCBcIiBcIikuY29uY2F0KHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5zdGF0dXNUZXh0KTtcblxuICB0cnkge1xuICAgIGVycm9yLm1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShlcnJvckRhdGEsIG51bGwsICcgICcpO1xuICB9IGNhdGNoIChfdW51c2VkKSB7XG4gICAgdmFyIF9lcnJvckRhdGEkbWVzc2FnZTtcblxuICAgIGVycm9yLm1lc3NhZ2UgPSAoX2Vycm9yRGF0YSRtZXNzYWdlID0gZXJyb3JEYXRhID09PSBudWxsIHx8IGVycm9yRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3JEYXRhLm1lc3NhZ2UpICE9PSBudWxsICYmIF9lcnJvckRhdGEkbWVzc2FnZSAhPT0gdm9pZCAwID8gX2Vycm9yRGF0YSRtZXNzYWdlIDogJyc7XG4gIH1cblxuICB0aHJvdyBlcnJvcjtcbn1cblxuZXhwb3J0IHsgY3JlYXRlSHR0cENsaWVudCwgY3JlYXRlUmVxdWVzdENvbmZpZywgZW5mb3JjZU9ialBhdGgsIGVycm9ySGFuZGxlciwgZnJlZXplU3lzLCBnZXRVc2VyQWdlbnRIZWFkZXIsIHRvUGxhaW5PYmplY3QgfTtcbiIsImltcG9ydCBTdHlsaXMgZnJvbSAnc3R5bGlzL3N0eWxpcy5taW4nO1xuaW1wb3J0IF9pbnNlcnRSdWxlUGx1Z2luIGZyb20gJ3N0eWxpcy1ydWxlLXNoZWV0JztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQsIGNyZWF0ZUNvbnRleHQsIENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzVmFsaWRFbGVtZW50VHlwZSwgRm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgdmFsaWRBdHRyIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ21lcmdlLWFueXRoaW5nJztcblxuLy8gXG5cbnZhciBpbnRlcmxlYXZlID0gKGZ1bmN0aW9uIChzdHJpbmdzLCBpbnRlcnBvbGF0aW9ucykge1xuICB2YXIgcmVzdWx0ID0gW3N0cmluZ3NbMF1dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBpbnRlcnBvbGF0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgIHJlc3VsdC5wdXNoKGludGVycG9sYXRpb25zW2ldLCBzdHJpbmdzW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxuLy8gXG52YXIgaXNQbGFpbk9iamVjdCA9IChmdW5jdGlvbiAoeCkge1xuICByZXR1cm4gKHR5cGVvZiB4ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih4KSkgPT09ICdvYmplY3QnICYmIHguY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn0pO1xuXG4vLyBcbnZhciBFTVBUWV9BUlJBWSA9IE9iamVjdC5mcmVlemUoW10pO1xudmFyIEVNUFRZX09CSkVDVCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBcbmZ1bmN0aW9uIGlzRnVuY3Rpb24odGVzdCkge1xuICByZXR1cm4gdHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbic7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKHRhcmdldCkge1xuICByZXR1cm4gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0YXJnZXQgOiBmYWxzZSkgfHwgdGFyZ2V0LmRpc3BsYXlOYW1lIHx8IHRhcmdldC5uYW1lIHx8ICdDb21wb25lbnQnO1xufVxuXG4vLyBcbmZ1bmN0aW9uIGlzU3RhdGVsZXNzRnVuY3Rpb24odGVzdCkge1xuICByZXR1cm4gdHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicgJiYgISh0ZXN0LnByb3RvdHlwZSAmJiB0ZXN0LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuLy8gXG5mdW5jdGlvbiBpc1N0eWxlZENvbXBvbmVudCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0LnN0eWxlZENvbXBvbmVudElkID09PSAnc3RyaW5nJztcbn1cblxuLy8gXG5cbnZhciBTQ19BVFRSID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIChwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfQVRUUiB8fCBwcm9jZXNzLmVudi5TQ19BVFRSKSB8fCAnZGF0YS1zdHlsZWQnO1xuXG52YXIgU0NfVkVSU0lPTl9BVFRSID0gJ2RhdGEtc3R5bGVkLXZlcnNpb24nO1xuXG52YXIgU0NfU1RSRUFNX0FUVFIgPSAnZGF0YS1zdHlsZWQtc3RyZWFtZWQnO1xuXG52YXIgSVNfQlJPV1NFUiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdIVE1MRWxlbWVudCcgaW4gd2luZG93O1xuXG52YXIgRElTQUJMRV9TUEVFRFkgPSB0eXBlb2YgU0NfRElTQUJMRV9TUEVFRFkgPT09ICdib29sZWFuJyAmJiBTQ19ESVNBQkxFX1NQRUVEWSB8fCB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSB8fCBwcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSkgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcblxuLy8gU2hhcmVkIGVtcHR5IGV4ZWN1dGlvbiBjb250ZXh0IHdoZW4gZ2VuZXJhdGluZyBzdGF0aWMgc3R5bGVzXG52YXIgU1RBVElDX0VYRUNVVElPTl9DT05URVhUID0ge307XG5cbi8vIFxuXG5cbi8qKlxuICogUGFyc2UgZXJyb3JzLm1kIGFuZCB0dXJuIGl0IGludG8gYSBzaW1wbGUgaGFzaCBvZiBjb2RlOiBtZXNzYWdlXG4gKi9cbnZhciBFUlJPUlMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBcIjFcIjogXCJDYW5ub3QgY3JlYXRlIHN0eWxlZC1jb21wb25lbnQgZm9yIGNvbXBvbmVudDogJXMuXFxuXFxuXCIsXG4gIFwiMlwiOiBcIkNhbid0IGNvbGxlY3Qgc3R5bGVzIG9uY2UgeW91J3ZlIGNvbnN1bWVkIGEgYFNlcnZlclN0eWxlU2hlZXRgJ3Mgc3R5bGVzISBgU2VydmVyU3R5bGVTaGVldGAgaXMgYSBvbmUgb2ZmIGluc3RhbmNlIGZvciBlYWNoIHNlcnZlci1zaWRlIHJlbmRlciBjeWNsZS5cXG5cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJldXNlIGl0IGFjcm9zcyByZW5kZXJzP1xcbi0gQXJlIHlvdSBhY2NpZGVudGFsbHkgY2FsbGluZyBjb2xsZWN0U3R5bGVzIHR3aWNlP1xcblxcblwiLFxuICBcIjNcIjogXCJTdHJlYW1pbmcgU1NSIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudDsgUGxlYXNlIGRvIG5vdCB0cnkgdG8gY2FsbCB0aGlzIG1ldGhvZCBpbiB0aGUgYnJvd3Nlci5cXG5cXG5cIixcbiAgXCI0XCI6IFwiVGhlIGBTdHlsZVNoZWV0TWFuYWdlcmAgZXhwZWN0cyBhIHZhbGlkIHRhcmdldCBvciBzaGVldCBwcm9wIVxcblxcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBjbGllbnQgYW5kIGlzIHlvdXIgdGFyZ2V0IGZhbHN5P1xcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBzZXJ2ZXIgYW5kIGlzIHRoZSBzaGVldCBmYWxzeT9cXG5cXG5cIixcbiAgXCI1XCI6IFwiVGhlIGNsb25lIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCBvbiB0aGUgY2xpZW50IVxcblxcbi0gQXJlIHlvdSBydW5uaW5nIGluIGEgY2xpZW50LWxpa2UgZW52aXJvbm1lbnQgb24gdGhlIHNlcnZlcj9cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJ1biBTU1Igb24gdGhlIGNsaWVudD9cXG5cXG5cIixcbiAgXCI2XCI6IFwiVHJ5aW5nIHRvIGluc2VydCBhIG5ldyBzdHlsZSB0YWcsIGJ1dCB0aGUgZ2l2ZW4gTm9kZSBpcyB1bm1vdW50ZWQhXFxuXFxuLSBBcmUgeW91IHVzaW5nIGEgY3VzdG9tIHRhcmdldCB0aGF0IGlzbid0IG1vdW50ZWQ/XFxuLSBEb2VzIHlvdXIgZG9jdW1lbnQgbm90IGhhdmUgYSB2YWxpZCBoZWFkIGVsZW1lbnQ/XFxuLSBIYXZlIHlvdSBhY2NpZGVudGFsbHkgcmVtb3ZlZCBhIHN0eWxlIHRhZyBtYW51YWxseT9cXG5cXG5cIixcbiAgXCI3XCI6IFwiVGhlbWVQcm92aWRlcjogUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIFxcXCJ0aGVtZVxcXCIgcHJvcCBmdW5jdGlvbiwgZS5nLlxcblxcbmBgYGpzXFxudGhlbWU9eygpID0+ICh7fSl9XFxuYGBgXFxuXFxuXCIsXG4gIFwiOFwiOiBcIlRoZW1lUHJvdmlkZXI6IFBsZWFzZSBtYWtlIHlvdXIgXFxcInRoZW1lXFxcIiBwcm9wIGFuIG9iamVjdC5cXG5cXG5cIixcbiAgXCI5XCI6IFwiTWlzc2luZyBkb2N1bWVudCBgPGhlYWQ+YFxcblxcblwiLFxuICBcIjEwXCI6IFwiQ2Fubm90IGZpbmQgYSBTdHlsZVNoZWV0IGluc3RhbmNlLiBVc3VhbGx5IHRoaXMgaGFwcGVucyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29waWVzIG9mIHN0eWxlZC1jb21wb25lbnRzIGxvYWRlZCBhdCBvbmNlLiBDaGVjayBvdXQgdGhpcyBpc3N1ZSBmb3IgaG93IHRvIHRyb3VibGVzaG9vdCBhbmQgZml4IHRoZSBjb21tb24gY2FzZXMgd2hlcmUgdGhpcyBzaXR1YXRpb24gY2FuIGhhcHBlbjogaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2lzc3Vlcy8xOTQxI2lzc3VlY29tbWVudC00MTc4NjIwMjFcXG5cXG5cIixcbiAgXCIxMVwiOiBcIl9UaGlzIGVycm9yIHdhcyByZXBsYWNlZCB3aXRoIGEgZGV2LXRpbWUgd2FybmluZywgaXQgd2lsbCBiZSBkZWxldGVkIGZvciB2NCBmaW5hbC5fIFtjcmVhdGVHbG9iYWxTdHlsZV0gcmVjZWl2ZWQgY2hpbGRyZW4gd2hpY2ggd2lsbCBub3QgYmUgcmVuZGVyZWQuIFBsZWFzZSB1c2UgdGhlIGNvbXBvbmVudCB3aXRob3V0IHBhc3NpbmcgY2hpbGRyZW4gZWxlbWVudHMuXFxuXFxuXCIsXG4gIFwiMTJcIjogXCJJdCBzZWVtcyB5b3UgYXJlIGludGVycG9sYXRpbmcgYSBrZXlmcmFtZSBkZWNsYXJhdGlvbiAoJXMpIGludG8gYW4gdW50YWdnZWQgc3RyaW5nLiBUaGlzIHdhcyBzdXBwb3J0ZWQgaW4gc3R5bGVkLWNvbXBvbmVudHMgdjMsIGJ1dCBpcyBub3QgbG9uZ2VyIHN1cHBvcnRlZCBpbiB2NCBhcyBrZXlmcmFtZXMgYXJlIG5vdyBpbmplY3RlZCBvbi1kZW1hbmQuIFBsZWFzZSB3cmFwIHlvdXIgc3RyaW5nIGluIHRoZSBjc3NcXFxcYFxcXFxgIGhlbHBlciB3aGljaCBlbnN1cmVzIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGNvcnJlY3RseS4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FwaSNjc3NcXG5cXG5cIixcbiAgXCIxM1wiOiBcIiVzIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cXG5cIlxufSA6IHt9O1xuXG4vKipcbiAqIHN1cGVyIGJhc2ljIHZlcnNpb24gb2Ygc3ByaW50ZlxuICovXG5mdW5jdGlvbiBmb3JtYXQoKSB7XG4gIHZhciBhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdO1xuICB2YXIgYiA9IFtdO1xuXG4gIGZvciAodmFyIGMgPSAxLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBjIDwgbGVuOyBjICs9IDEpIHtcbiAgICBiLnB1c2goYXJndW1lbnRzLmxlbmd0aCA8PSBjID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2NdKTtcbiAgfVxuXG4gIGIuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgIGEgPSBhLnJlcGxhY2UoLyVbYS16XS8sIGQpO1xuICB9KTtcblxuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gZXJyb3IgZmlsZSBvdXQgb2YgZXJyb3JzLm1kIGZvciBkZXZlbG9wbWVudCBhbmQgYSBzaW1wbGUgd2ViIGxpbmsgdG8gdGhlIGZ1bGwgZXJyb3JzXG4gKiBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gKi9cblxudmFyIFN0eWxlZENvbXBvbmVudHNFcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgaW5oZXJpdHMoU3R5bGVkQ29tcG9uZW50c0Vycm9yLCBfRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlZENvbXBvbmVudHNFcnJvcihjb2RlKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVkQ29tcG9uZW50c0Vycm9yKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXJyb3IuY2FsbCh0aGlzLCAnQW4gZXJyb3Igb2NjdXJyZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc3R5bGVkLWNvbXBvbmVudHMvc3R5bGVkLWNvbXBvbmVudHMvYmxvYi9tYXN0ZXIvcGFja2FnZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2Vycm9ycy5tZCMnICsgY29kZSArICcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyArIChpbnRlcnBvbGF0aW9ucy5sZW5ndGggPiAwID8gJyBBZGRpdGlvbmFsIGFyZ3VtZW50czogJyArIGludGVycG9sYXRpb25zLmpvaW4oJywgJykgOiAnJykpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXJyb3IuY2FsbCh0aGlzLCBmb3JtYXQuYXBwbHkodW5kZWZpbmVkLCBbRVJST1JTW2NvZGVdXS5jb25jYXQoaW50ZXJwb2xhdGlvbnMpKS50cmltKCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICB9XG5cbiAgcmV0dXJuIFN0eWxlZENvbXBvbmVudHNFcnJvcjtcbn0oRXJyb3IpO1xuXG4vLyBcbnZhciBTQ19DT01QT05FTlRfSUQgPSAvXlteXFxTXFxuXSo/XFwvXFwqIHNjLWNvbXBvbmVudC1pZDpcXHMqKFxcUyspXFxzK1xcKlxcLy9nbTtcblxudmFyIGV4dHJhY3RDb21wcyA9IChmdW5jdGlvbiAobWF5YmVDU1MpIHtcbiAgdmFyIGNzcyA9ICcnICsgKG1heWJlQ1NTIHx8ICcnKTsgLy8gRGVmaW5pdGVseSBhIHN0cmluZywgYW5kIGEgY2xvbmVcbiAgdmFyIGV4aXN0aW5nQ29tcG9uZW50cyA9IFtdO1xuICBjc3MucmVwbGFjZShTQ19DT01QT05FTlRfSUQsIGZ1bmN0aW9uIChtYXRjaCwgY29tcG9uZW50SWQsIG1hdGNoSW5kZXgpIHtcbiAgICBleGlzdGluZ0NvbXBvbmVudHMucHVzaCh7IGNvbXBvbmVudElkOiBjb21wb25lbnRJZCwgbWF0Y2hJbmRleDogbWF0Y2hJbmRleCB9KTtcbiAgICByZXR1cm4gbWF0Y2g7XG4gIH0pO1xuICByZXR1cm4gZXhpc3RpbmdDb21wb25lbnRzLm1hcChmdW5jdGlvbiAoX3JlZiwgaSkge1xuICAgIHZhciBjb21wb25lbnRJZCA9IF9yZWYuY29tcG9uZW50SWQsXG4gICAgICAgIG1hdGNoSW5kZXggPSBfcmVmLm1hdGNoSW5kZXg7XG5cbiAgICB2YXIgbmV4dENvbXAgPSBleGlzdGluZ0NvbXBvbmVudHNbaSArIDFdO1xuICAgIHZhciBjc3NGcm9tRE9NID0gbmV4dENvbXAgPyBjc3Muc2xpY2UobWF0Y2hJbmRleCwgbmV4dENvbXAubWF0Y2hJbmRleCkgOiBjc3Muc2xpY2UobWF0Y2hJbmRleCk7XG4gICAgcmV0dXJuIHsgY29tcG9uZW50SWQ6IGNvbXBvbmVudElkLCBjc3NGcm9tRE9NOiBjc3NGcm9tRE9NIH07XG4gIH0pO1xufSk7XG5cbi8vIFxuXG52YXIgQ09NTUVOVF9SRUdFWCA9IC9eXFxzKlxcL1xcLy4qJC9nbTtcblxuLy8gTk9URTogVGhpcyBzdHlsaXMgaW5zdGFuY2UgaXMgb25seSB1c2VkIHRvIHNwbGl0IHJ1bGVzIGZyb20gU1NSJ2Qgc3R5bGUgdGFnc1xudmFyIHN0eWxpc1NwbGl0dGVyID0gbmV3IFN0eWxpcyh7XG4gIGdsb2JhbDogZmFsc2UsXG4gIGNhc2NhZGU6IHRydWUsXG4gIGtleWZyYW1lOiBmYWxzZSxcbiAgcHJlZml4OiBmYWxzZSxcbiAgY29tcHJlc3M6IGZhbHNlLFxuICBzZW1pY29sb246IHRydWVcbn0pO1xuXG52YXIgc3R5bGlzID0gbmV3IFN0eWxpcyh7XG4gIGdsb2JhbDogZmFsc2UsXG4gIGNhc2NhZGU6IHRydWUsXG4gIGtleWZyYW1lOiBmYWxzZSxcbiAgcHJlZml4OiB0cnVlLFxuICBjb21wcmVzczogZmFsc2UsXG4gIHNlbWljb2xvbjogZmFsc2UgLy8gTk9URTogVGhpcyBtZWFucyBcImF1dG9jb21wbGV0ZSBtaXNzaW5nIHNlbWljb2xvbnNcIlxufSk7XG5cbi8vIFdyYXAgYGluc2VydFJ1bGVQbHVnaW4gdG8gYnVpbGQgYSBsaXN0IG9mIHJ1bGVzLFxuLy8gYW5kIHRoZW4gbWFrZSBvdXIgb3duIHBsdWdpbiB0byByZXR1cm4gdGhlIHJ1bGVzLiBUaGlzXG4vLyBtYWtlcyBpdCBlYXNpZXIgdG8gaG9vayBpbnRvIHRoZSBleGlzdGluZyBTU1IgYXJjaGl0ZWN0dXJlXG5cbnZhciBwYXJzaW5nUnVsZXMgPSBbXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG52YXIgcmV0dXJuUnVsZXNQbHVnaW4gPSBmdW5jdGlvbiByZXR1cm5SdWxlc1BsdWdpbihjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSAtMikge1xuICAgIHZhciBwYXJzZWRSdWxlcyA9IHBhcnNpbmdSdWxlcztcbiAgICBwYXJzaW5nUnVsZXMgPSBbXTtcbiAgICByZXR1cm4gcGFyc2VkUnVsZXM7XG4gIH1cbn07XG5cbnZhciBwYXJzZVJ1bGVzUGx1Z2luID0gX2luc2VydFJ1bGVQbHVnaW4oZnVuY3Rpb24gKHJ1bGUpIHtcbiAgcGFyc2luZ1J1bGVzLnB1c2gocnVsZSk7XG59KTtcblxudmFyIF9jb21wb25lbnRJZCA9IHZvaWQgMDtcbnZhciBfc2VsZWN0b3IgPSB2b2lkIDA7XG52YXIgX3NlbGVjdG9yUmVnZXhwID0gdm9pZCAwO1xuXG52YXIgc2VsZlJlZmVyZW5jZVJlcGxhY2VyID0gZnVuY3Rpb24gc2VsZlJlZmVyZW5jZVJlcGxhY2VyKG1hdGNoLCBvZmZzZXQsIHN0cmluZykge1xuICBpZiAoXG4gIC8vIHRoZSBmaXJzdCBzZWxmLXJlZiBpcyBhbHdheXMgdW50b3VjaGVkXG4gIG9mZnNldCA+IDAgJiZcbiAgLy8gdGhlcmUgc2hvdWxkIGJlIGF0IGxlYXN0IHR3byBzZWxmLXJlZnMgdG8gZG8gYSByZXBsYWNlbWVudCAoLmIgPiAuYilcbiAgc3RyaW5nLnNsaWNlKDAsIG9mZnNldCkuaW5kZXhPZihfc2VsZWN0b3IpICE9PSAtMSAmJlxuICAvLyBubyBjb25zZWN1dGl2ZSBzZWxmIHJlZnMgKC5iLmIpOyB0aGF0IGlzIGEgcHJlY2VkZW5jZSBib29zdCBhbmQgdHJlYXRlZCBkaWZmZXJlbnRseVxuICBzdHJpbmcuc2xpY2Uob2Zmc2V0IC0gX3NlbGVjdG9yLmxlbmd0aCwgb2Zmc2V0KSAhPT0gX3NlbGVjdG9yKSB7XG4gICAgcmV0dXJuICcuJyArIF9jb21wb25lbnRJZDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaDtcbn07XG5cbi8qKlxuICogV2hlbiB3cml0aW5nIGEgc3R5bGUgbGlrZVxuICpcbiAqICYgKyAmIHtcbiAqICAgY29sb3I6IHJlZDtcbiAqIH1cbiAqXG4gKiBUaGUgc2Vjb25kIGFtcGVyc2FuZCBzaG91bGQgYmUgYSByZWZlcmVuY2UgdG8gdGhlIHN0YXRpYyBjb21wb25lbnQgY2xhc3MuIHN0eWxpc1xuICogaGFzIG5vIGtub3dsZWRnZSBvZiBzdGF0aWMgY2xhc3Mgc28gd2UgaGF2ZSB0byBpbnRlbGxpZ2VudGx5IHJlcGxhY2UgdGhlIGJhc2Ugc2VsZWN0b3IuXG4gKi9cbnZhciBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4gPSBmdW5jdGlvbiBzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4oY29udGV4dCwgXywgc2VsZWN0b3JzKSB7XG4gIGlmIChjb250ZXh0ID09PSAyICYmIHNlbGVjdG9ycy5sZW5ndGggJiYgc2VsZWN0b3JzWzBdLmxhc3RJbmRleE9mKF9zZWxlY3RvcikgPiAwKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgc2VsZWN0b3JzWzBdID0gc2VsZWN0b3JzWzBdLnJlcGxhY2UoX3NlbGVjdG9yUmVnZXhwLCBzZWxmUmVmZXJlbmNlUmVwbGFjZXIpO1xuICB9XG59O1xuXG5zdHlsaXMudXNlKFtzZWxmUmVmZXJlbmNlUmVwbGFjZW1lbnRQbHVnaW4sIHBhcnNlUnVsZXNQbHVnaW4sIHJldHVyblJ1bGVzUGx1Z2luXSk7XG5zdHlsaXNTcGxpdHRlci51c2UoW3BhcnNlUnVsZXNQbHVnaW4sIHJldHVyblJ1bGVzUGx1Z2luXSk7XG5cbnZhciBzcGxpdEJ5UnVsZXMgPSBmdW5jdGlvbiBzcGxpdEJ5UnVsZXMoY3NzKSB7XG4gIHJldHVybiBzdHlsaXNTcGxpdHRlcignJywgY3NzKTtcbn07XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVJ1bGVzKHJ1bGVzLCBzZWxlY3RvciwgcHJlZml4KSB7XG4gIHZhciBjb21wb25lbnRJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJyYnO1xuXG4gIHZhciBmbGF0Q1NTID0gcnVsZXMuam9pbignJykucmVwbGFjZShDT01NRU5UX1JFR0VYLCAnJyk7IC8vIHJlcGxhY2UgSlMgY29tbWVudHNcblxuICB2YXIgY3NzU3RyID0gc2VsZWN0b3IgJiYgcHJlZml4ID8gcHJlZml4ICsgJyAnICsgc2VsZWN0b3IgKyAnIHsgJyArIGZsYXRDU1MgKyAnIH0nIDogZmxhdENTUztcblxuICAvLyBzdHlsaXMgaGFzIG5vIGNvbmNlcHQgb2Ygc3RhdGUgdG8gYmUgcGFzc2VkIHRvIHBsdWdpbnNcbiAgLy8gYnV0IHNpbmNlIEpTIGlzIHNpbmdsZT10aHJlYWRlZCwgd2UgY2FuIHJlbHkgb24gdGhhdCB0byBlbnN1cmVcbiAgLy8gdGhlc2UgcHJvcGVydGllcyBzdGF5IGluIHN5bmMgd2l0aCB0aGUgY3VycmVudCBzdHlsaXMgcnVuXG4gIF9jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuICBfc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgX3NlbGVjdG9yUmVnZXhwID0gbmV3IFJlZ0V4cCgnXFxcXCcgKyBfc2VsZWN0b3IgKyAnXFxcXGInLCAnZycpO1xuXG4gIHJldHVybiBzdHlsaXMocHJlZml4IHx8ICFzZWxlY3RvciA/ICcnIDogc2VsZWN0b3IsIGNzc1N0cik7XG59XG5cbi8vIFxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlLCBuby11bmRlZiAqL1xuXG52YXIgZ2V0Tm9uY2UgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbn0pO1xuXG4vLyBcbi8qIFRoZXNlIGFyZSBoZWxwZXJzIGZvciB0aGUgU3R5bGVUYWdzIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGluamVjdGVkXG4gKiBydWxlIG5hbWVzIGZvciBlYWNoIChjb21wb25lbnQpIElEIHRoYXQgdGhleSdyZSBrZWVwaW5nIHRyYWNrIG9mLlxuICogVGhleSdyZSBjcnVjaWFsIGZvciBkZXRlY3Rpbmcgd2hldGhlciBhIG5hbWUgaGFzIGFscmVhZHkgYmVlblxuICogaW5qZWN0ZWQuXG4gKiAoVGhpcyBleGNsdWRlcyByZWh5ZHJhdGVkIG5hbWVzKSAqL1xuXG4vKiBhZGRzIGEgbmV3IElEOm5hbWUgcGFpcmluZyB0byBhIG5hbWVzIGRpY3Rpb25hcnkgKi9cbnZhciBhZGROYW1lRm9ySWQgPSBmdW5jdGlvbiBhZGROYW1lRm9ySWQobmFtZXMsIGlkLCBuYW1lKSB7XG4gIGlmIChuYW1lKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdmFyIG5hbWVzRm9ySWQgPSBuYW1lc1tpZF0gfHwgKG5hbWVzW2lkXSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIG5hbWVzRm9ySWRbbmFtZV0gPSB0cnVlO1xuICB9XG59O1xuXG4vKiByZXNldHMgYW4gSUQgZW50aXJlbHkgYnkgb3ZlcndyaXRpbmcgaXQgaW4gdGhlIGRpY3Rpb25hcnkgKi9cbnZhciByZXNldElkTmFtZXMgPSBmdW5jdGlvbiByZXNldElkTmFtZXMobmFtZXMsIGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBuYW1lc1tpZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xufTtcblxuLyogZmFjdG9yeSBmb3IgYSBuYW1lcyBkaWN0aW9uYXJ5IGNoZWNraW5nIHRoZSBleGlzdGFuY2Ugb2YgYW4gSUQ6bmFtZSBwYWlyaW5nICovXG52YXIgaGFzTmFtZUZvcklkID0gZnVuY3Rpb24gaGFzTmFtZUZvcklkKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaWQsIG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZXNbaWRdICE9PSB1bmRlZmluZWQgJiYgbmFtZXNbaWRdW25hbWVdO1xuICB9O1xufTtcblxuLyogc3RyaW5naWZpZXMgbmFtZXMgZm9yIHRoZSBodG1sL2VsZW1lbnQgb3V0cHV0ICovXG52YXIgc3RyaW5naWZ5TmFtZXMgPSBmdW5jdGlvbiBzdHJpbmdpZnlOYW1lcyhuYW1lcykge1xuICB2YXIgc3RyID0gJyc7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yICh2YXIgaWQgaW4gbmFtZXMpIHtcbiAgICBzdHIgKz0gT2JqZWN0LmtleXMobmFtZXNbaWRdKS5qb2luKCcgJykgKyAnICc7XG4gIH1cbiAgcmV0dXJuIHN0ci50cmltKCk7XG59O1xuXG4vKiBjbG9uZXMgdGhlIG5lc3RlZCBuYW1lcyBkaWN0aW9uYXJ5ICovXG52YXIgY2xvbmVOYW1lcyA9IGZ1bmN0aW9uIGNsb25lTmFtZXMobmFtZXMpIHtcbiAgdmFyIGNsb25lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICBmb3IgKHZhciBpZCBpbiBuYW1lcykge1xuICAgIGNsb25lW2lkXSA9IF9leHRlbmRzKHt9LCBuYW1lc1tpZF0pO1xuICB9XG4gIHJldHVybiBjbG9uZTtcbn07XG5cbi8vIFxuXG4vKiBUaGVzZSBhcmUgaGVscGVycyB0aGF0IGRlYWwgd2l0aCB0aGUgaW5zZXJ0UnVsZSAoYWthIHNwZWVkeSkgQVBJXG4gKiBUaGV5IGFyZSB1c2VkIGluIHRoZSBTdHlsZVRhZ3MgYW5kIHNwZWNpZmljYWxseSB0aGUgc3BlZWR5IHRhZ1xuICovXG5cbi8qIHJldHJpZXZlIGEgc2hlZXQgZm9yIGEgZ2l2ZW4gc3R5bGUgdGFnICovXG52YXIgc2hlZXRGb3JUYWcgPSBmdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICBpZiAodGFnLnNoZWV0KSByZXR1cm4gdGFnLnNoZWV0O1xuXG4gIC8qIEZpcmVmb3ggcXVpcmsgcmVxdWlyZXMgdXMgdG8gc3RlcCB0aHJvdWdoIGFsbCBzdHlsZXNoZWV0cyB0byBmaW5kIG9uZSBvd25lZCBieSB0aGUgZ2l2ZW4gdGFnICovXG4gIHZhciBzaXplID0gdGFnLm93bmVyRG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkgKz0gMSkge1xuICAgIHZhciBzaGVldCA9IHRhZy5vd25lckRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoc2hlZXQub3duZXJOb2RlID09PSB0YWcpIHJldHVybiBzaGVldDtcbiAgfVxuXG4gIC8qIHdlIHNob3VsZCBhbHdheXMgYmUgYWJsZSB0byBmaW5kIGEgdGFnICovXG4gIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMTApO1xufTtcblxuLyogaW5zZXJ0IGEgcnVsZSBzYWZlbHkgYW5kIHJldHVybiB3aGV0aGVyIGl0IHdhcyBhY3R1YWxseSBpbmplY3RlZCAqL1xudmFyIHNhZmVJbnNlcnRSdWxlID0gZnVuY3Rpb24gc2FmZUluc2VydFJ1bGUoc2hlZXQsIGNzc1J1bGUsIGluZGV4KSB7XG4gIC8qIGFib3J0IGVhcmx5IGlmIGNzc1J1bGUgc3RyaW5nIGlzIGZhbHN5ICovXG4gIGlmICghY3NzUnVsZSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBtYXhJbmRleCA9IHNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcblxuICB0cnkge1xuICAgIC8qIHVzZSBpbnNlcnRSdWxlIGFuZCBjYXAgcGFzc2VkIGluZGV4IHdpdGggbWF4SW5kZXggKG5vIG9mIGNzc1J1bGVzKSAqL1xuICAgIHNoZWV0Lmluc2VydFJ1bGUoY3NzUnVsZSwgaW5kZXggPD0gbWF4SW5kZXggPyBpbmRleCA6IG1heEluZGV4KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLyogYW55IGVycm9yIGluZGljYXRlcyBhbiBpbnZhbGlkIHJ1bGUgKi9cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qIGRlbGV0ZXMgYHNpemVgIHJ1bGVzIHN0YXJ0aW5nIGZyb20gYHJlbW92YWxJbmRleGAgKi9cbnZhciBkZWxldGVSdWxlcyA9IGZ1bmN0aW9uIGRlbGV0ZVJ1bGVzKHNoZWV0LCByZW1vdmFsSW5kZXgsIHNpemUpIHtcbiAgdmFyIGxvd2VyQm91bmQgPSByZW1vdmFsSW5kZXggLSBzaXplO1xuICBmb3IgKHZhciBpID0gcmVtb3ZhbEluZGV4OyBpID4gbG93ZXJCb3VuZDsgaSAtPSAxKSB7XG4gICAgc2hlZXQuZGVsZXRlUnVsZShpKTtcbiAgfVxufTtcblxuLy8gXG5cbi8qIHRoaXMgbWFya2VyIHNlcGFyYXRlcyBjb21wb25lbnQgc3R5bGVzIGFuZCBpcyBpbXBvcnRhbnQgZm9yIHJlaHlkcmF0aW9uICovXG52YXIgbWFrZVRleHRNYXJrZXIgPSBmdW5jdGlvbiBtYWtlVGV4dE1hcmtlcihpZCkge1xuICByZXR1cm4gJ1xcbi8qIHNjLWNvbXBvbmVudC1pZDogJyArIGlkICsgJyAqL1xcbic7XG59O1xuXG4vKiBhZGQgdXAgYWxsIG51bWJlcnMgaW4gYXJyYXkgdXAgdW50aWwgYW5kIGluY2x1ZGluZyB0aGUgaW5kZXggKi9cbnZhciBhZGRVcFVudGlsSW5kZXggPSBmdW5jdGlvbiBhZGRVcFVudGlsSW5kZXgoc2l6ZXMsIGluZGV4KSB7XG4gIHZhciB0b3RhbFVwVG9JbmRleCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IGluZGV4OyBpICs9IDEpIHtcbiAgICB0b3RhbFVwVG9JbmRleCArPSBzaXplc1tpXTtcbiAgfVxuXG4gIHJldHVybiB0b3RhbFVwVG9JbmRleDtcbn07XG5cbi8qIGNyZWF0ZSBhIG5ldyBzdHlsZSB0YWcgYWZ0ZXIgbGFzdEVsICovXG52YXIgbWFrZVN0eWxlVGFnID0gZnVuY3Rpb24gbWFrZVN0eWxlVGFnKHRhcmdldCwgdGFnRWwsIGluc2VydEJlZm9yZSkge1xuICB2YXIgdGFyZ2V0RG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgaWYgKHRhcmdldCkgdGFyZ2V0RG9jdW1lbnQgPSB0YXJnZXQub3duZXJEb2N1bWVudDtlbHNlIGlmICh0YWdFbCkgdGFyZ2V0RG9jdW1lbnQgPSB0YWdFbC5vd25lckRvY3VtZW50O1xuXG4gIHZhciBlbCA9IHRhcmdldERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIGVsLnNldEF0dHJpYnV0ZShTQ19BVFRSLCAnJyk7XG4gIGVsLnNldEF0dHJpYnV0ZShTQ19WRVJTSU9OX0FUVFIsIFwiNC40LjFcIik7XG5cbiAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgaWYgKG5vbmNlKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdub25jZScsIG5vbmNlKTtcbiAgfVxuXG4gIC8qIFdvcmsgYXJvdW5kIGluc2VydFJ1bGUgcXVpcmsgaW4gRWRnZUhUTUwgKi9cbiAgZWwuYXBwZW5kQ2hpbGQodGFyZ2V0RG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcblxuICBpZiAodGFyZ2V0ICYmICF0YWdFbCkge1xuICAgIC8qIEFwcGVuZCB0byB0YXJnZXQgd2hlbiBubyBwcmV2aW91cyBlbGVtZW50IHdhcyBwYXNzZWQgKi9cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoZWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghdGFnRWwgfHwgIXRhcmdldCB8fCAhdGFnRWwucGFyZW50Tm9kZSkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig2KTtcbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgbmV3IHN0eWxlIHRhZyBhZnRlciB0aGUgcHJldmlvdXMgb25lICovXG4gICAgdGFnRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIGluc2VydEJlZm9yZSA/IHRhZ0VsIDogdGFnRWwubmV4dFNpYmxpbmcpO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufTtcblxuLyogdGFrZXMgYSBjc3MgZmFjdG9yeSBmdW5jdGlvbiBhbmQgb3V0cHV0cyBhbiBodG1sIHN0eWxlZCB0YWcgZmFjdG9yeSAqL1xudmFyIHdyYXBBc0h0bWxUYWcgPSBmdW5jdGlvbiB3cmFwQXNIdG1sVGFnKGNzcywgbmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhZGRpdGlvbmFsQXR0cnMpIHtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIHZhciBhdHRycyA9IFtub25jZSAmJiAnbm9uY2U9XCInICsgbm9uY2UgKyAnXCInLCBTQ19BVFRSICsgJz1cIicgKyBzdHJpbmdpZnlOYW1lcyhuYW1lcykgKyAnXCInLCBTQ19WRVJTSU9OX0FUVFIgKyAnPVwiJyArIFwiNC40LjFcIiArICdcIicsIGFkZGl0aW9uYWxBdHRyc107XG5cbiAgICB2YXIgaHRtbEF0dHIgPSBhdHRycy5maWx0ZXIoQm9vbGVhbikuam9pbignICcpO1xuICAgIHJldHVybiAnPHN0eWxlICcgKyBodG1sQXR0ciArICc+JyArIGNzcygpICsgJzwvc3R5bGU+JztcbiAgfTtcbn07XG5cbi8qIHRha2VzIGEgY3NzIGZhY3RvcnkgZnVuY3Rpb24gYW5kIG91dHB1dHMgYW4gZWxlbWVudCBmYWN0b3J5ICovXG52YXIgd3JhcEFzRWxlbWVudCA9IGZ1bmN0aW9uIHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvcHM7XG5cbiAgICB2YXIgcHJvcHMgPSAoX3Byb3BzID0ge30sIF9wcm9wc1tTQ19BVFRSXSA9IHN0cmluZ2lmeU5hbWVzKG5hbWVzKSwgX3Byb3BzW1NDX1ZFUlNJT05fQVRUUl0gPSBcIjQuNC4xXCIsIF9wcm9wcyk7XG5cbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcHJvcHMubm9uY2UgPSBub25jZTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogY3NzKCkgfSB9KSk7XG4gIH07XG59O1xuXG52YXIgZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5ID0gZnVuY3Rpb24gZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFya2Vycyk7XG4gIH07XG59O1xuXG4vKiBzcGVlZHkgdGFncyB1dGlsaXNlIGluc2VydFJ1bGUgKi9cbnZhciBtYWtlU3BlZWR5VGFnID0gZnVuY3Rpb24gbWFrZVNwZWVkeVRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICB2YXIgbmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbWFya2VycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzaXplcyA9IFtdO1xuXG4gIHZhciBleHRyYWN0SW1wb3J0ID0gZ2V0SW1wb3J0UnVsZVRhZyAhPT0gdW5kZWZpbmVkO1xuICAvKiBpbmRpY2F0ZXMgd2hldGhlciBnZXRJbXBvcnRSdWxlVGFnIHdhcyBjYWxsZWQgKi9cbiAgdmFyIHVzZWRJbXBvcnRSdWxlVGFnID0gZmFsc2U7XG5cbiAgdmFyIGluc2VydE1hcmtlciA9IGZ1bmN0aW9uIGluc2VydE1hcmtlcihpZCkge1xuICAgIHZhciBwcmV2ID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuXG4gICAgbWFya2Vyc1tpZF0gPSBzaXplcy5sZW5ndGg7XG4gICAgc2l6ZXMucHVzaCgwKTtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcblxuICAgIHJldHVybiBtYXJrZXJzW2lkXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyhlbCk7XG4gICAgdmFyIGluc2VydEluZGV4ID0gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBtYXJrZXIpO1xuXG4gICAgdmFyIGluamVjdGVkUnVsZXMgPSAwO1xuICAgIHZhciBpbXBvcnRSdWxlcyA9IFtdO1xuICAgIHZhciBjc3NSdWxlc1NpemUgPSBjc3NSdWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNzc1J1bGVzU2l6ZTsgaSArPSAxKSB7XG4gICAgICB2YXIgY3NzUnVsZSA9IGNzc1J1bGVzW2ldO1xuICAgICAgdmFyIG1heUhhdmVJbXBvcnQgPSBleHRyYWN0SW1wb3J0OyAvKiBAaW1wb3J0IHJ1bGVzIGFyZSByZW9yZGVyZWQgdG8gYXBwZWFyIGZpcnN0ICovXG4gICAgICBpZiAobWF5SGF2ZUltcG9ydCAmJiBjc3NSdWxlLmluZGV4T2YoJ0BpbXBvcnQnKSAhPT0gLTEpIHtcbiAgICAgICAgaW1wb3J0UnVsZXMucHVzaChjc3NSdWxlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2FmZUluc2VydFJ1bGUoc2hlZXQsIGNzc1J1bGUsIGluc2VydEluZGV4ICsgaW5qZWN0ZWRSdWxlcykpIHtcbiAgICAgICAgbWF5SGF2ZUltcG9ydCA9IGZhbHNlO1xuICAgICAgICBpbmplY3RlZFJ1bGVzICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4dHJhY3RJbXBvcnQgJiYgaW1wb3J0UnVsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdXNlZEltcG9ydFJ1bGVUYWcgPSB0cnVlO1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLmluc2VydFJ1bGVzKGlkICsgJy1pbXBvcnQnLCBpbXBvcnRSdWxlcyk7XG4gICAgfVxuXG4gICAgc2l6ZXNbbWFya2VyXSArPSBpbmplY3RlZFJ1bGVzOyAvKiBhZGQgdXAgbm8gb2YgaW5qZWN0ZWQgcnVsZXMgKi9cbiAgICBhZGROYW1lRm9ySWQobmFtZXMsIGlkLCBuYW1lKTtcbiAgfTtcblxuICB2YXIgcmVtb3ZlUnVsZXMgPSBmdW5jdGlvbiByZW1vdmVSdWxlcyhpZCkge1xuICAgIHZhciBtYXJrZXIgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAobWFya2VyID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKGVsLmlzQ29ubmVjdGVkID09PSBmYWxzZSkgcmV0dXJuO1xuXG4gICAgdmFyIHNpemUgPSBzaXplc1ttYXJrZXJdO1xuICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKGVsKTtcbiAgICB2YXIgcmVtb3ZhbEluZGV4ID0gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBtYXJrZXIpIC0gMTtcbiAgICBkZWxldGVSdWxlcyhzaGVldCwgcmVtb3ZhbEluZGV4LCBzaXplKTtcbiAgICBzaXplc1ttYXJrZXJdID0gMDtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIHVzZWRJbXBvcnRSdWxlVGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkucmVtb3ZlUnVsZXMoaWQgKyAnLWltcG9ydCcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBfc2hlZXRGb3JUYWcgPSBzaGVldEZvclRhZyhlbCksXG4gICAgICAgIGNzc1J1bGVzID0gX3NoZWV0Rm9yVGFnLmNzc1J1bGVzO1xuXG4gICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIHN0ciArPSBtYWtlVGV4dE1hcmtlcihpZCk7XG4gICAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgICB2YXIgZW5kID0gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBtYXJrZXIpO1xuICAgICAgdmFyIHNpemUgPSBzaXplc1ttYXJrZXJdO1xuICAgICAgZm9yICh2YXIgaSA9IGVuZCAtIHNpemU7IGkgPCBlbmQ7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcnVsZSA9IGNzc1J1bGVzW2ldO1xuICAgICAgICBpZiAocnVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyICs9IHJ1bGUuY3NzVGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDUpO1xuICAgIH0sXG5cbiAgICBjc3M6IGNzcyxcbiAgICBnZXRJZHM6IGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeShtYXJrZXJzKSxcbiAgICBoYXNOYW1lRm9ySWQ6IGhhc05hbWVGb3JJZChuYW1lcyksXG4gICAgaW5zZXJ0TWFya2VyOiBpbnNlcnRNYXJrZXIsXG4gICAgaW5zZXJ0UnVsZXM6IGluc2VydFJ1bGVzLFxuICAgIHJlbW92ZVJ1bGVzOiByZW1vdmVSdWxlcyxcbiAgICBzZWFsZWQ6IGZhbHNlLFxuICAgIHN0eWxlVGFnOiBlbCxcbiAgICB0b0VsZW1lbnQ6IHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcyksXG4gICAgdG9IVE1MOiB3cmFwQXNIdG1sVGFnKGNzcywgbmFtZXMpXG4gIH07XG59O1xuXG52YXIgbWFrZVRleHROb2RlID0gZnVuY3Rpb24gbWFrZVRleHROb2RlKHRhcmdldERvY3VtZW50LCBpZCkge1xuICByZXR1cm4gdGFyZ2V0RG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobWFrZVRleHRNYXJrZXIoaWQpKTtcbn07XG5cbnZhciBtYWtlQnJvd3NlclRhZyA9IGZ1bmN0aW9uIG1ha2VCcm93c2VyVGFnKGVsLCBnZXRJbXBvcnRSdWxlVGFnKSB7XG4gIHZhciBuYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBtYXJrZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICB2YXIgZXh0cmFjdEltcG9ydCA9IGdldEltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZDtcblxuICAvKiBpbmRpY2F0ZXMgd2hldGhlciBnZXRJbXBvcnRSdWxlVGFnIHdhcyBjYWxsZWQgKi9cbiAgdmFyIHVzZWRJbXBvcnRSdWxlVGFnID0gZmFsc2U7XG5cbiAgdmFyIGluc2VydE1hcmtlciA9IGZ1bmN0aW9uIGluc2VydE1hcmtlcihpZCkge1xuICAgIHZhciBwcmV2ID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuXG4gICAgbWFya2Vyc1tpZF0gPSBtYWtlVGV4dE5vZGUoZWwub3duZXJEb2N1bWVudCwgaWQpO1xuICAgIGVsLmFwcGVuZENoaWxkKG1hcmtlcnNbaWRdKTtcbiAgICBuYW1lc1tpZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgcmV0dXJuIG1hcmtlcnNbaWRdO1xuICB9O1xuXG4gIHZhciBpbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSkge1xuICAgIHZhciBtYXJrZXIgPSBpbnNlcnRNYXJrZXIoaWQpO1xuICAgIHZhciBpbXBvcnRSdWxlcyA9IFtdO1xuICAgIHZhciBjc3NSdWxlc1NpemUgPSBjc3NSdWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNzc1J1bGVzU2l6ZTsgaSArPSAxKSB7XG4gICAgICB2YXIgcnVsZSA9IGNzc1J1bGVzW2ldO1xuICAgICAgdmFyIG1heUhhdmVJbXBvcnQgPSBleHRyYWN0SW1wb3J0O1xuICAgICAgaWYgKG1heUhhdmVJbXBvcnQgJiYgcnVsZS5pbmRleE9mKCdAaW1wb3J0JykgIT09IC0xKSB7XG4gICAgICAgIGltcG9ydFJ1bGVzLnB1c2gocnVsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXlIYXZlSW1wb3J0ID0gZmFsc2U7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSBpID09PSBjc3NSdWxlc1NpemUgLSAxID8gJycgOiAnICc7XG4gICAgICAgIG1hcmtlci5hcHBlbmREYXRhKCcnICsgcnVsZSArIHNlcGFyYXRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSk7XG5cbiAgICBpZiAoZXh0cmFjdEltcG9ydCAmJiBpbXBvcnRSdWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB1c2VkSW1wb3J0UnVsZVRhZyA9IHRydWU7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkuaW5zZXJ0UnVsZXMoaWQgKyAnLWltcG9ydCcsIGltcG9ydFJ1bGVzKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJlbW92ZVJ1bGVzID0gZnVuY3Rpb24gcmVtb3ZlUnVsZXMoaWQpIHtcbiAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKG1hcmtlciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICAvKiBjcmVhdGUgbmV3IGVtcHR5IHRleHQgbm9kZSBhbmQgcmVwbGFjZSB0aGUgY3VycmVudCBvbmUgKi9cbiAgICB2YXIgbmV3TWFya2VyID0gbWFrZVRleHROb2RlKGVsLm93bmVyRG9jdW1lbnQsIGlkKTtcbiAgICBlbC5yZXBsYWNlQ2hpbGQobmV3TWFya2VyLCBtYXJrZXIpO1xuICAgIG1hcmtlcnNbaWRdID0gbmV3TWFya2VyO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuXG4gICAgaWYgKGV4dHJhY3RJbXBvcnQgJiYgdXNlZEltcG9ydFJ1bGVUYWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldEltcG9ydFJ1bGVUYWcoKS5yZW1vdmVSdWxlcyhpZCArICctaW1wb3J0Jyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIHN0ciArPSBtYXJrZXJzW2lkXS5kYXRhO1xuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDUpO1xuICAgIH0sXG5cbiAgICBjc3M6IGNzcyxcbiAgICBnZXRJZHM6IGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeShtYXJrZXJzKSxcbiAgICBoYXNOYW1lRm9ySWQ6IGhhc05hbWVGb3JJZChuYW1lcyksXG4gICAgaW5zZXJ0TWFya2VyOiBpbnNlcnRNYXJrZXIsXG4gICAgaW5zZXJ0UnVsZXM6IGluc2VydFJ1bGVzLFxuICAgIHJlbW92ZVJ1bGVzOiByZW1vdmVSdWxlcyxcbiAgICBzZWFsZWQ6IGZhbHNlLFxuICAgIHN0eWxlVGFnOiBlbCxcbiAgICB0b0VsZW1lbnQ6IHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcyksXG4gICAgdG9IVE1MOiB3cmFwQXNIdG1sVGFnKGNzcywgbmFtZXMpXG4gIH07XG59O1xuXG52YXIgbWFrZVNlcnZlclRhZyA9IGZ1bmN0aW9uIG1ha2VTZXJ2ZXJUYWcobmFtZXNBcmcsIG1hcmtlcnNBcmcpIHtcbiAgdmFyIG5hbWVzID0gbmFtZXNBcmcgPT09IHVuZGVmaW5lZCA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiBuYW1lc0FyZztcbiAgdmFyIG1hcmtlcnMgPSBtYXJrZXJzQXJnID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogbWFya2Vyc0FyZztcblxuICB2YXIgaW5zZXJ0TWFya2VyID0gZnVuY3Rpb24gaW5zZXJ0TWFya2VyKGlkKSB7XG4gICAgdmFyIHByZXYgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAocHJldiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFya2Vyc1tpZF0gPSBbJyddO1xuICB9O1xuXG4gIHZhciBpbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSkge1xuICAgIHZhciBtYXJrZXIgPSBpbnNlcnRNYXJrZXIoaWQpO1xuICAgIG1hcmtlclswXSArPSBjc3NSdWxlcy5qb2luKCcgJyk7XG4gICAgYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZVJ1bGVzID0gZnVuY3Rpb24gcmVtb3ZlUnVsZXMoaWQpIHtcbiAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKG1hcmtlciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgbWFya2VyWzBdID0gJyc7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG4gIH07XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIHZhciBjc3NGb3JJZCA9IG1hcmtlcnNbaWRdWzBdO1xuICAgICAgaWYgKGNzc0ZvcklkKSB7XG4gICAgICAgIHN0ciArPSBtYWtlVGV4dE1hcmtlcihpZCkgKyBjc3NGb3JJZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICB2YXIgY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgbmFtZXNDbG9uZSA9IGNsb25lTmFtZXMobmFtZXMpO1xuICAgIHZhciBtYXJrZXJzQ2xvbmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIG1hcmtlcnNDbG9uZVtpZF0gPSBbbWFya2Vyc1tpZF1bMF1dO1xuICAgIH1cblxuICAgIHJldHVybiBtYWtlU2VydmVyVGFnKG5hbWVzQ2xvbmUsIG1hcmtlcnNDbG9uZSk7XG4gIH07XG5cbiAgdmFyIHRhZyA9IHtcbiAgICBjbG9uZTogY2xvbmUsXG4gICAgY3NzOiBjc3MsXG4gICAgZ2V0SWRzOiBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkobWFya2VycyksXG4gICAgaGFzTmFtZUZvcklkOiBoYXNOYW1lRm9ySWQobmFtZXMpLFxuICAgIGluc2VydE1hcmtlcjogaW5zZXJ0TWFya2VyLFxuICAgIGluc2VydFJ1bGVzOiBpbnNlcnRSdWxlcyxcbiAgICByZW1vdmVSdWxlczogcmVtb3ZlUnVsZXMsXG4gICAgc2VhbGVkOiBmYWxzZSxcbiAgICBzdHlsZVRhZzogbnVsbCxcbiAgICB0b0VsZW1lbnQ6IHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcyksXG4gICAgdG9IVE1MOiB3cmFwQXNIdG1sVGFnKGNzcywgbmFtZXMpXG4gIH07XG5cbiAgcmV0dXJuIHRhZztcbn07XG5cbnZhciBtYWtlVGFnID0gZnVuY3Rpb24gbWFrZVRhZyh0YXJnZXQsIHRhZ0VsLCBmb3JjZVNlcnZlciwgaW5zZXJ0QmVmb3JlLCBnZXRJbXBvcnRSdWxlVGFnKSB7XG4gIGlmIChJU19CUk9XU0VSICYmICFmb3JjZVNlcnZlcikge1xuICAgIHZhciBlbCA9IG1ha2VTdHlsZVRhZyh0YXJnZXQsIHRhZ0VsLCBpbnNlcnRCZWZvcmUpO1xuXG4gICAgaWYgKERJU0FCTEVfU1BFRURZKSB7XG4gICAgICByZXR1cm4gbWFrZUJyb3dzZXJUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWFrZVNwZWVkeVRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VTZXJ2ZXJUYWcoKTtcbn07XG5cbnZhciByZWh5ZHJhdGUgPSBmdW5jdGlvbiByZWh5ZHJhdGUodGFnLCBlbHMsIGV4dHJhY3RlZCkge1xuICAvKiBhZGQgYWxsIGV4dHJhY3RlZCBjb21wb25lbnRzIHRvIHRoZSBuZXcgdGFnICovXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHRyYWN0ZWQubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICB2YXIgX2V4dHJhY3RlZCRpID0gZXh0cmFjdGVkW2ldLFxuICAgICAgICBjb21wb25lbnRJZCA9IF9leHRyYWN0ZWQkaS5jb21wb25lbnRJZCxcbiAgICAgICAgY3NzRnJvbURPTSA9IF9leHRyYWN0ZWQkaS5jc3NGcm9tRE9NO1xuXG4gICAgdmFyIGNzc1J1bGVzID0gc3BsaXRCeVJ1bGVzKGNzc0Zyb21ET00pO1xuICAgIHRhZy5pbnNlcnRSdWxlcyhjb21wb25lbnRJZCwgY3NzUnVsZXMpO1xuICB9XG5cbiAgLyogcmVtb3ZlIG9sZCBIVE1MU3R5bGVFbGVtZW50cywgc2luY2UgdGhleSBoYXZlIGJlZW4gcmVoeWRyYXRlZCAqL1xuICBmb3IgKHZhciBfaSA9IDAsIF9sZW4gPSBlbHMubGVuZ3RoOyBfaSA8IF9sZW47IF9pICs9IDEpIHtcbiAgICB2YXIgZWwgPSBlbHNbX2ldO1xuICAgIGlmIChlbC5wYXJlbnROb2RlKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIFxuXG52YXIgU1BMSVRfUkVHRVggPSAvXFxzKy87XG5cbi8qIGRldGVybWluZSB0aGUgbWF4aW11bSBudW1iZXIgb2YgY29tcG9uZW50cyBiZWZvcmUgdGFncyBhcmUgc2hhcmRlZCAqL1xudmFyIE1BWF9TSVpFID0gdm9pZCAwO1xuaWYgKElTX0JST1dTRVIpIHtcbiAgLyogaW4gc3BlZWR5IG1vZGUgd2UgY2FuIGtlZXAgYSBsb3QgbW9yZSBydWxlcyBpbiBhIHNoZWV0IGJlZm9yZSBhIHNsb3dkb3duIGNhbiBiZSBleHBlY3RlZCAqL1xuICBNQVhfU0laRSA9IERJU0FCTEVfU1BFRURZID8gNDAgOiAxMDAwO1xufSBlbHNlIHtcbiAgLyogZm9yIHNlcnZlcnMgd2UgZG8gbm90IG5lZWQgdG8gc2hhcmQgYXQgYWxsICovXG4gIE1BWF9TSVpFID0gLTE7XG59XG5cbnZhciBzaGVldFJ1bm5pbmdJZCA9IDA7XG52YXIgbWFzdGVyID0gdm9pZCAwO1xuXG52YXIgU3R5bGVTaGVldCA9IGZ1bmN0aW9uICgpIHtcblxuICAvKiBhIG1hcCBmcm9tIGlkcyB0byB0YWdzICovXG5cbiAgLyogZGVmZXJyZWQgcnVsZXMgZm9yIGEgZ2l2ZW4gaWQgKi9cblxuICAvKiB0aGlzIGlzIHVzZWQgZm9yIG5vdCByZWluamVjdGluZyBydWxlcyB2aWEgaGFzTmFtZUZvcklkKCkgKi9cblxuICAvKiB3aGVuIHJ1bGVzIGZvciBhbiBpZCBhcmUgcmVtb3ZlZCB1c2luZyByZW1vdmUoKSB3ZSBoYXZlIHRvIGlnbm9yZSByZWh5ZHJhdGVkTmFtZXMgZm9yIGl0ICovXG5cbiAgLyogYSBsaXN0IG9mIHRhZ3MgYmVsb25naW5nIHRvIHRoaXMgU3R5bGVTaGVldCAqL1xuXG4gIC8qIGEgdGFnIGZvciBpbXBvcnQgcnVsZXMgKi9cblxuICAvKiBjdXJyZW50IGNhcGFjaXR5IHVudGlsIGEgbmV3IHRhZyBtdXN0IGJlIGNyZWF0ZWQgKi9cblxuICAvKiBjaGlsZHJlbiAoYWthIGNsb25lcykgb2YgdGhpcyBTdHlsZVNoZWV0IGluaGVyaXRpbmcgYWxsIGFuZCBmdXR1cmUgaW5qZWN0aW9ucyAqL1xuXG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciB0YXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IElTX0JST1dTRVIgPyBkb2N1bWVudC5oZWFkIDogbnVsbDtcbiAgICB2YXIgZm9yY2VTZXJ2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlU2hlZXQpO1xuXG4gICAgdGhpcy5nZXRJbXBvcnRSdWxlVGFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGltcG9ydFJ1bGVUYWcgPSBfdGhpcy5pbXBvcnRSdWxlVGFnO1xuXG4gICAgICBpZiAoaW1wb3J0UnVsZVRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBpbXBvcnRSdWxlVGFnO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmlyc3RUYWcgPSBfdGhpcy50YWdzWzBdO1xuICAgICAgdmFyIGluc2VydEJlZm9yZSA9IHRydWU7XG5cbiAgICAgIHJldHVybiBfdGhpcy5pbXBvcnRSdWxlVGFnID0gbWFrZVRhZyhfdGhpcy50YXJnZXQsIGZpcnN0VGFnID8gZmlyc3RUYWcuc3R5bGVUYWcgOiBudWxsLCBfdGhpcy5mb3JjZVNlcnZlciwgaW5zZXJ0QmVmb3JlKTtcbiAgICB9O1xuXG4gICAgc2hlZXRSdW5uaW5nSWQgKz0gMTtcbiAgICB0aGlzLmlkID0gc2hlZXRSdW5uaW5nSWQ7XG4gICAgdGhpcy5mb3JjZVNlcnZlciA9IGZvcmNlU2VydmVyO1xuICAgIHRoaXMudGFyZ2V0ID0gZm9yY2VTZXJ2ZXIgPyBudWxsIDogdGFyZ2V0O1xuICAgIHRoaXMudGFnTWFwID0ge307XG4gICAgdGhpcy5kZWZlcnJlZCA9IHt9O1xuICAgIHRoaXMucmVoeWRyYXRlZE5hbWVzID0ge307XG4gICAgdGhpcy5pZ25vcmVSZWh5ZHJhdGVkTmFtZXMgPSB7fTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmNhcGFjaXR5ID0gMTtcbiAgICB0aGlzLmNsb25lcyA9IFtdO1xuICB9XG5cbiAgLyogcmVoeWRyYXRlIGFsbCBTU1InZCBzdHlsZSB0YWdzICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5yZWh5ZHJhdGUgPSBmdW5jdGlvbiByZWh5ZHJhdGUkJDEoKSB7XG4gICAgaWYgKCFJU19CUk9XU0VSIHx8IHRoaXMuZm9yY2VTZXJ2ZXIpIHJldHVybiB0aGlzO1xuXG4gICAgdmFyIGVscyA9IFtdO1xuICAgIHZhciBleHRyYWN0ZWQgPSBbXTtcbiAgICB2YXIgaXNTdHJlYW1lZCA9IGZhbHNlO1xuXG4gICAgLyogcmV0cmlldmUgYWxsIG9mIG91ciBTU1Igc3R5bGUgZWxlbWVudHMgZnJvbSB0aGUgRE9NICovXG4gICAgdmFyIG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbJyArIFNDX0FUVFIgKyAnXVsnICsgU0NfVkVSU0lPTl9BVFRSICsgJz1cIicgKyBcIjQuNC4xXCIgKyAnXCJdJyk7XG5cbiAgICB2YXIgbm9kZXNTaXplID0gbm9kZXMubGVuZ3RoO1xuXG4gICAgLyogYWJvcnQgcmVoeWRyYXRpb24gaWYgbm8gcHJldmlvdXMgc3R5bGUgdGFncyB3ZXJlIGZvdW5kICovXG4gICAgaWYgKCFub2Rlc1NpemUpIHJldHVybiB0aGlzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlc1NpemU7IGkgKz0gMSkge1xuICAgICAgdmFyIGVsID0gbm9kZXNbaV07XG5cbiAgICAgIC8qIGNoZWNrIGlmIHN0eWxlIHRhZyBpcyBhIHN0cmVhbWVkIHRhZyAqL1xuICAgICAgaWYgKCFpc1N0cmVhbWVkKSBpc1N0cmVhbWVkID0gISFlbC5nZXRBdHRyaWJ1dGUoU0NfU1RSRUFNX0FUVFIpO1xuXG4gICAgICAvKiByZXRyaWV2ZSBhbGwgY29tcG9uZW50IG5hbWVzICovXG4gICAgICB2YXIgZWxOYW1lcyA9IChlbC5nZXRBdHRyaWJ1dGUoU0NfQVRUUikgfHwgJycpLnRyaW0oKS5zcGxpdChTUExJVF9SRUdFWCk7XG4gICAgICB2YXIgZWxOYW1lc1NpemUgPSBlbE5hbWVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGogPSAwLCBuYW1lOyBqIDwgZWxOYW1lc1NpemU7IGogKz0gMSkge1xuICAgICAgICBuYW1lID0gZWxOYW1lc1tqXTtcbiAgICAgICAgLyogYWRkIHJlaHlkcmF0ZWQgbmFtZSB0byBzaGVldCB0byBhdm9pZCByZS1hZGRpbmcgc3R5bGVzICovXG4gICAgICAgIHRoaXMucmVoeWRyYXRlZE5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyogZXh0cmFjdCBhbGwgY29tcG9uZW50cyBhbmQgdGhlaXIgQ1NTICovXG4gICAgICBleHRyYWN0ZWQucHVzaC5hcHBseShleHRyYWN0ZWQsIGV4dHJhY3RDb21wcyhlbC50ZXh0Q29udGVudCkpO1xuXG4gICAgICAvKiBzdG9yZSBvcmlnaW5hbCBIVE1MU3R5bGVFbGVtZW50ICovXG4gICAgICBlbHMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgLyogYWJvcnQgcmVoeWRyYXRpb24gaWYgbm90aGluZyB3YXMgZXh0cmFjdGVkICovXG4gICAgdmFyIGV4dHJhY3RlZFNpemUgPSBleHRyYWN0ZWQubGVuZ3RoO1xuICAgIGlmICghZXh0cmFjdGVkU2l6ZSkgcmV0dXJuIHRoaXM7XG5cbiAgICAvKiBjcmVhdGUgYSB0YWcgdG8gYmUgdXNlZCBmb3IgcmVoeWRyYXRpb24gKi9cbiAgICB2YXIgdGFnID0gdGhpcy5tYWtlVGFnKG51bGwpO1xuXG4gICAgcmVoeWRyYXRlKHRhZywgZWxzLCBleHRyYWN0ZWQpO1xuXG4gICAgLyogcmVzZXQgY2FwYWNpdHkgYW5kIGFkanVzdCBNQVhfU0laRSBieSB0aGUgaW5pdGlhbCBzaXplIG9mIHRoZSByZWh5ZHJhdGlvbiAqL1xuICAgIHRoaXMuY2FwYWNpdHkgPSBNYXRoLm1heCgxLCBNQVhfU0laRSAtIGV4dHJhY3RlZFNpemUpO1xuICAgIHRoaXMudGFncy5wdXNoKHRhZyk7XG5cbiAgICAvKiByZXRyaWV2ZSBhbGwgY29tcG9uZW50IGlkcyAqL1xuICAgIGZvciAodmFyIF9qID0gMDsgX2ogPCBleHRyYWN0ZWRTaXplOyBfaiArPSAxKSB7XG4gICAgICB0aGlzLnRhZ01hcFtleHRyYWN0ZWRbX2pdLmNvbXBvbmVudElkXSA9IHRhZztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKiByZXRyaWV2ZSBhIFwibWFzdGVyXCIgaW5zdGFuY2Ugb2YgU3R5bGVTaGVldCB3aGljaCBpcyB0eXBpY2FsbHkgdXNlZCB3aGVuIG5vIG90aGVyIGlzIGF2YWlsYWJsZVxuICAgKiBUaGUgbWFzdGVyIFN0eWxlU2hlZXQgaXMgdGFyZ2V0ZWQgYnkgY3JlYXRlR2xvYmFsU3R5bGUsIGtleWZyYW1lcywgYW5kIGNvbXBvbmVudHMgb3V0c2lkZSBvZiBhbnlcbiAgICAqIFN0eWxlU2hlZXRNYW5hZ2VyJ3MgY29udGV4dCAqL1xuXG5cbiAgLyogcmVzZXQgdGhlIGludGVybmFsIFwibWFzdGVyXCIgaW5zdGFuY2UgKi9cbiAgU3R5bGVTaGVldC5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHZhciBmb3JjZVNlcnZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICBtYXN0ZXIgPSBuZXcgU3R5bGVTaGVldCh1bmRlZmluZWQsIGZvcmNlU2VydmVyKS5yZWh5ZHJhdGUoKTtcbiAgfTtcblxuICAvKiBhZGRzIFwiY2hpbGRyZW5cIiB0byB0aGUgU3R5bGVTaGVldCB0aGF0IGluaGVyaXQgYWxsIG9mIHRoZSBwYXJlbnRzJyBydWxlc1xuICAgKiB3aGlsZSB0aGVpciBvd24gcnVsZXMgZG8gbm90IGFmZmVjdCB0aGUgcGFyZW50ICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KHRoaXMudGFyZ2V0LCB0aGlzLmZvcmNlU2VydmVyKTtcblxuICAgIC8qIGFkZCB0byBjbG9uZSBhcnJheSAqL1xuICAgIHRoaXMuY2xvbmVzLnB1c2goc2hlZXQpO1xuXG4gICAgLyogY2xvbmUgYWxsIHRhZ3MgKi9cbiAgICBzaGVldC50YWdzID0gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgaWRzID0gdGFnLmdldElkcygpO1xuICAgICAgdmFyIG5ld1RhZyA9IHRhZy5jbG9uZSgpO1xuXG4gICAgICAvKiByZWNvbnN0cnVjdCB0YWdNYXAgKi9cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHNoZWV0LnRhZ01hcFtpZHNbaV1dID0gbmV3VGFnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3VGFnO1xuICAgIH0pO1xuXG4gICAgLyogY2xvbmUgb3RoZXIgbWFwcyAqL1xuICAgIHNoZWV0LnJlaHlkcmF0ZWROYW1lcyA9IF9leHRlbmRzKHt9LCB0aGlzLnJlaHlkcmF0ZWROYW1lcyk7XG4gICAgc2hlZXQuZGVmZXJyZWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy5kZWZlcnJlZCk7XG5cbiAgICByZXR1cm4gc2hlZXQ7XG4gIH07XG5cbiAgLyogZm9yY2UgU3R5bGVTaGVldCB0byBjcmVhdGUgYSBuZXcgdGFnIG9uIHRoZSBuZXh0IGluamVjdGlvbiAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuc2VhbEFsbFRhZ3MgPSBmdW5jdGlvbiBzZWFsQWxsVGFncygpIHtcbiAgICB0aGlzLmNhcGFjaXR5ID0gMTtcblxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgdGFnLnNlYWxlZCA9IHRydWU7XG4gICAgfSk7XG4gIH07XG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUubWFrZVRhZyA9IGZ1bmN0aW9uIG1ha2VUYWckJDEodGFnKSB7XG4gICAgdmFyIGxhc3RFbCA9IHRhZyA/IHRhZy5zdHlsZVRhZyA6IG51bGw7XG4gICAgdmFyIGluc2VydEJlZm9yZSA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIG1ha2VUYWcodGhpcy50YXJnZXQsIGxhc3RFbCwgdGhpcy5mb3JjZVNlcnZlciwgaW5zZXJ0QmVmb3JlLCB0aGlzLmdldEltcG9ydFJ1bGVUYWcpO1xuICB9O1xuXG4gIC8qIGdldCBhIHRhZyBmb3IgYSBnaXZlbiBjb21wb25lbnRJZCwgYXNzaWduIHRoZSBjb21wb25lbnRJZCB0byBvbmUsIG9yIHNoYXJkICovXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmdldFRhZ0ZvcklkID0gZnVuY3Rpb24gZ2V0VGFnRm9ySWQoaWQpIHtcbiAgICAvKiBzaW1wbHkgcmV0dXJuIGEgdGFnLCB3aGVuIHRoZSBjb21wb25lbnRJZCB3YXMgYWxyZWFkeSBhc3NpZ25lZCBvbmUgKi9cbiAgICB2YXIgcHJldiA9IHRoaXMudGFnTWFwW2lkXTtcbiAgICBpZiAocHJldiAhPT0gdW5kZWZpbmVkICYmICFwcmV2LnNlYWxlZCkge1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG5cbiAgICAvKiBzaGFyZCAoY3JlYXRlIGEgbmV3IHRhZykgaWYgdGhlIHRhZyBpcyBleGhhdXN0ZWQgKFNlZSBNQVhfU0laRSkgKi9cbiAgICB0aGlzLmNhcGFjaXR5IC09IDE7XG5cbiAgICBpZiAodGhpcy5jYXBhY2l0eSA9PT0gMCkge1xuICAgICAgdGhpcy5jYXBhY2l0eSA9IE1BWF9TSVpFO1xuICAgICAgdGFnID0gdGhpcy5tYWtlVGFnKHRhZyk7XG4gICAgICB0aGlzLnRhZ3MucHVzaCh0YWcpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRhZ01hcFtpZF0gPSB0YWc7XG4gIH07XG5cbiAgLyogbWFpbmx5IGZvciBjcmVhdGVHbG9iYWxTdHlsZSB0byBjaGVjayBmb3IgaXRzIGlkICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5oYXNJZCA9IGZ1bmN0aW9uIGhhc0lkKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMudGFnTWFwW2lkXSAhPT0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIC8qIGNhY2hpbmcgbGF5ZXIgY2hlY2tpbmcgaWQrbmFtZSB0byBhbHJlYWR5IGhhdmUgYSBjb3JyZXNwb25kaW5nIHRhZyBhbmQgaW5qZWN0ZWQgcnVsZXMgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmhhc05hbWVGb3JJZCA9IGZ1bmN0aW9uIGhhc05hbWVGb3JJZChpZCwgbmFtZSkge1xuICAgIC8qIGV4Y2VwdGlvbiBmb3IgcmVoeWRyYXRlZCBuYW1lcyB3aGljaCBhcmUgY2hlY2tlZCBzZXBhcmF0ZWx5ICovXG4gICAgaWYgKHRoaXMuaWdub3JlUmVoeWRyYXRlZE5hbWVzW2lkXSA9PT0gdW5kZWZpbmVkICYmIHRoaXMucmVoeWRyYXRlZE5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdNYXBbaWRdO1xuICAgIHJldHVybiB0YWcgIT09IHVuZGVmaW5lZCAmJiB0YWcuaGFzTmFtZUZvcklkKGlkLCBuYW1lKTtcbiAgfTtcblxuICAvKiByZWdpc3RlcnMgYSBjb21wb25lbnRJZCBhbmQgcmVnaXN0ZXJzIGl0IG9uIGl0cyB0YWcgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmRlZmVycmVkSW5qZWN0ID0gZnVuY3Rpb24gZGVmZXJyZWRJbmplY3QoaWQsIGNzc1J1bGVzKSB7XG4gICAgLyogZG9uJ3QgaW5qZWN0IHdoZW4gdGhlIGlkIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCAqL1xuICAgIGlmICh0aGlzLnRhZ01hcFtpZF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIGNsb25lcyA9IHRoaXMuY2xvbmVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNsb25lc1tpXS5kZWZlcnJlZEluamVjdChpZCwgY3NzUnVsZXMpO1xuICAgIH1cblxuICAgIHRoaXMuZ2V0VGFnRm9ySWQoaWQpLmluc2VydE1hcmtlcihpZCk7XG4gICAgdGhpcy5kZWZlcnJlZFtpZF0gPSBjc3NSdWxlcztcbiAgfTtcblxuICAvKiBpbmplY3RzIHJ1bGVzIGZvciBhIGdpdmVuIGlkIHdpdGggYSBuYW1lIHRoYXQgd2lsbCBuZWVkIHRvIGJlIGNhY2hlZCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuaW5qZWN0ID0gZnVuY3Rpb24gaW5qZWN0KGlkLCBjc3NSdWxlcywgbmFtZSkge1xuICAgIHZhciBjbG9uZXMgPSB0aGlzLmNsb25lcztcblxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNsb25lc1tpXS5pbmplY3QoaWQsIGNzc1J1bGVzLCBuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy5nZXRUYWdGb3JJZChpZCk7XG5cbiAgICAvKiBhZGQgZGVmZXJyZWQgcnVsZXMgZm9yIGNvbXBvbmVudCAqL1xuICAgIGlmICh0aGlzLmRlZmVycmVkW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBDb21iaW5lIHBhc3NlZCBjc3NSdWxlcyB3aXRoIHByZXZpb3VzbHkgZGVmZXJyZWQgQ1NTIHJ1bGVzXG4gICAgICAvLyBOT1RFOiBXZSBjYW5ub3QgbXV0YXRlIHRoZSBkZWZlcnJlZCBhcnJheSBpdHNlbGYgYXMgYWxsIGNsb25lc1xuICAgICAgLy8gZG8gdGhlIHNhbWUgKHNlZSBjbG9uZXNbaV0uaW5qZWN0KVxuICAgICAgdmFyIHJ1bGVzID0gdGhpcy5kZWZlcnJlZFtpZF0uY29uY2F0KGNzc1J1bGVzKTtcbiAgICAgIHRhZy5pbnNlcnRSdWxlcyhpZCwgcnVsZXMsIG5hbWUpO1xuXG4gICAgICB0aGlzLmRlZmVycmVkW2lkXSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qIHJlbW92ZXMgYWxsIHJ1bGVzIGZvciBhIGdpdmVuIGlkLCB3aGljaCBkb2Vzbid0IHJlbW92ZSBpdHMgbWFya2VyIGJ1dCByZXNldHMgaXQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShpZCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZ01hcFtpZF07XG4gICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICB2YXIgY2xvbmVzID0gdGhpcy5jbG9uZXM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY2xvbmVzW2ldLnJlbW92ZShpZCk7XG4gICAgfVxuXG4gICAgLyogcmVtb3ZlIGFsbCBydWxlcyBmcm9tIHRoZSB0YWcgKi9cbiAgICB0YWcucmVtb3ZlUnVsZXMoaWQpO1xuXG4gICAgLyogaWdub3JlIHBvc3NpYmxlIHJlaHlkcmF0ZWQgbmFtZXMgKi9cbiAgICB0aGlzLmlnbm9yZVJlaHlkcmF0ZWROYW1lc1tpZF0gPSB0cnVlO1xuXG4gICAgLyogZGVsZXRlIHBvc3NpYmxlIGRlZmVycmVkIHJ1bGVzICovXG4gICAgdGhpcy5kZWZlcnJlZFtpZF0gPSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gdG9IVE1MKCkge1xuICAgIHJldHVybiB0aGlzLnRhZ3MubWFwKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcudG9IVE1MKCk7XG4gICAgfSkuam9pbignJyk7XG4gIH07XG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUudG9SZWFjdEVsZW1lbnRzID0gZnVuY3Rpb24gdG9SZWFjdEVsZW1lbnRzKCkge1xuICAgIHZhciBpZCA9IHRoaXMuaWQ7XG5cblxuICAgIHJldHVybiB0aGlzLnRhZ3MubWFwKGZ1bmN0aW9uICh0YWcsIGkpIHtcbiAgICAgIHZhciBrZXkgPSAnc2MtJyArIGlkICsgJy0nICsgaTtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQodGFnLnRvRWxlbWVudCgpLCB7IGtleToga2V5IH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIGNyZWF0ZUNsYXNzKFN0eWxlU2hlZXQsIG51bGwsIFt7XG4gICAga2V5OiAnbWFzdGVyJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiBtYXN0ZXIgfHwgKG1hc3RlciA9IG5ldyBTdHlsZVNoZWV0KCkucmVoeWRyYXRlKCkpO1xuICAgIH1cblxuICAgIC8qIE5PVEU6IFRoaXMgaXMganVzdCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgd2l0aCBqZXN0LXN0eWxlZC1jb21wb25lbnRzICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luc3RhbmNlJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiBTdHlsZVNoZWV0Lm1hc3RlcjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbi8vIFxuXG52YXIgS2V5ZnJhbWVzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXMobmFtZSwgcnVsZXMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgS2V5ZnJhbWVzKTtcblxuICAgIHRoaXMuaW5qZWN0ID0gZnVuY3Rpb24gKHN0eWxlU2hlZXQpIHtcbiAgICAgIGlmICghc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoX3RoaXMuaWQsIF90aGlzLm5hbWUpKSB7XG4gICAgICAgIHN0eWxlU2hlZXQuaW5qZWN0KF90aGlzLmlkLCBfdGhpcy5ydWxlcywgX3RoaXMubmFtZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDEyLCBTdHJpbmcoX3RoaXMubmFtZSkpO1xuICAgIH07XG5cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucnVsZXMgPSBydWxlcztcblxuICAgIHRoaXMuaWQgPSAnc2Mta2V5ZnJhbWVzLScgKyBuYW1lO1xuICB9XG5cbiAgS2V5ZnJhbWVzLnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24gZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXM7XG59KCk7XG5cbi8vIFxuXG4vKipcbiAqIGlubGluZWQgdmVyc2lvbiBvZlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9tYXN0ZXIvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xuXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG4vLyBcblxuLy8gVGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iODdhYWJkZmUxYjc0NjFlNzMzMWFiYjM2MDFkOWU2YmIyNzU0NGJjL3BhY2thZ2VzL3JlYWN0LWRvbS9zcmMvc2hhcmVkL2Rhbmdlcm91c1N0eWxlVmFsdWUuanNcbmZ1bmN0aW9uIGFkZFVuaXRJZk5lZWRlZChuYW1lLCB2YWx1ZSkge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW1pbGFqYWNrL2VzbGludC1wbHVnaW4tZmxvd3R5cGUtZXJyb3JzL2lzc3Vlcy8xMzNcbiAgLy8gJEZsb3dGaXhNZVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCAmJiAhKG5hbWUgaW4gdW5pdGxlc3MpKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JzsgLy8gUHJlc3VtZXMgaW1wbGljaXQgJ3B4JyBzdWZmaXggZm9yIHVuaXRsZXNzIG51bWJlcnNcbiAgfVxuXG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnRyaW0oKTtcbn1cblxuLy8gXG5cbi8qKlxuICogSXQncyBmYWxzaXNoIG5vdCBmYWxzeSBiZWNhdXNlIDAgaXMgYWxsb3dlZC5cbiAqL1xudmFyIGlzRmFsc2lzaCA9IGZ1bmN0aW9uIGlzRmFsc2lzaChjaHVuaykge1xuICByZXR1cm4gY2h1bmsgPT09IHVuZGVmaW5lZCB8fCBjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gZmFsc2UgfHwgY2h1bmsgPT09ICcnO1xufTtcblxudmFyIG9ialRvQ3NzQXJyYXkgPSBmdW5jdGlvbiBvYmpUb0Nzc0FycmF5KG9iaiwgcHJldktleSkge1xuICB2YXIgcnVsZXMgPSBbXTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFpc0ZhbHNpc2gob2JqW2tleV0pKSB7XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChvYmpba2V5XSkpIHtcbiAgICAgICAgcnVsZXMucHVzaC5hcHBseShydWxlcywgb2JqVG9Dc3NBcnJheShvYmpba2V5XSwga2V5KSk7XG5cbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG9ialtrZXldKSkge1xuICAgICAgICBydWxlcy5wdXNoKGh5cGhlbmF0ZVN0eWxlTmFtZShrZXkpICsgJzonLCBvYmpba2V5XSwgJzsnKTtcblxuICAgICAgICByZXR1cm4gcnVsZXM7XG4gICAgICB9XG4gICAgICBydWxlcy5wdXNoKGh5cGhlbmF0ZVN0eWxlTmFtZShrZXkpICsgJzogJyArIGFkZFVuaXRJZk5lZWRlZChrZXksIG9ialtrZXldKSArICc7Jyk7XG4gICAgfVxuICAgIHJldHVybiBydWxlcztcbiAgfSk7XG5cbiAgcmV0dXJuIHByZXZLZXkgPyBbcHJldktleSArICcgeyddLmNvbmNhdChydWxlcywgWyd9J10pIDogcnVsZXM7XG59O1xuXG5mdW5jdGlvbiBmbGF0dGVuKGNodW5rLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNodW5rKSkge1xuICAgIHZhciBydWxlU2V0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoLCByZXN1bHQ7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgcmVzdWx0ID0gZmxhdHRlbihjaHVua1tpXSwgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGNvbnRpbnVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkgcnVsZVNldC5wdXNoLmFwcGx5KHJ1bGVTZXQsIHJlc3VsdCk7ZWxzZSBydWxlU2V0LnB1c2gocmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZVNldDtcbiAgfVxuXG4gIGlmIChpc0ZhbHNpc2goY2h1bmspKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiBIYW5kbGUgb3RoZXIgY29tcG9uZW50cyAqL1xuICBpZiAoaXNTdHlsZWRDb21wb25lbnQoY2h1bmspKSB7XG4gICAgcmV0dXJuICcuJyArIGNodW5rLnN0eWxlZENvbXBvbmVudElkO1xuICB9XG5cbiAgLyogRWl0aGVyIGV4ZWN1dGUgb3IgZGVmZXIgdGhlIGZ1bmN0aW9uICovXG4gIGlmIChpc0Z1bmN0aW9uKGNodW5rKSkge1xuICAgIGlmIChpc1N0YXRlbGVzc0Z1bmN0aW9uKGNodW5rKSAmJiBleGVjdXRpb25Db250ZXh0KSB7XG4gICAgICB2YXIgX3Jlc3VsdCA9IGNodW5rKGV4ZWN1dGlvbkNvbnRleHQpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0VsZW1lbnQoX3Jlc3VsdCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKGdldENvbXBvbmVudE5hbWUoY2h1bmspICsgJyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbGF0dGVuKF9yZXN1bHQsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICAgIH0gZWxzZSByZXR1cm4gY2h1bms7XG4gIH1cblxuICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBLZXlmcmFtZXMpIHtcbiAgICBpZiAoc3R5bGVTaGVldCkge1xuICAgICAgY2h1bmsuaW5qZWN0KHN0eWxlU2hlZXQpO1xuICAgICAgcmV0dXJuIGNodW5rLmdldE5hbWUoKTtcbiAgICB9IGVsc2UgcmV0dXJuIGNodW5rO1xuICB9XG5cbiAgLyogSGFuZGxlIG9iamVjdHMgKi9cbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QoY2h1bmspID8gb2JqVG9Dc3NBcnJheShjaHVuaykgOiBjaHVuay50b1N0cmluZygpO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gY3NzKHN0eWxlcykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGlzRnVuY3Rpb24oc3R5bGVzKSB8fCBpc1BsYWluT2JqZWN0KHN0eWxlcykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIGZsYXR0ZW4oaW50ZXJsZWF2ZShFTVBUWV9BUlJBWSwgW3N0eWxlc10uY29uY2F0KGludGVycG9sYXRpb25zKSkpO1xuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gZmxhdHRlbihpbnRlcmxlYXZlKHN0eWxlcywgaW50ZXJwb2xhdGlvbnMpKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IEVNUFRZX09CSkVDVDtcblxuICBpZiAoIWlzVmFsaWRFbGVtZW50VHlwZSh0YWcpKSB7XG4gICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigxLCBTdHJpbmcodGFnKSk7XG4gIH1cblxuICAvKiBUaGlzIGlzIGNhbGxhYmxlIGRpcmVjdGx5IGFzIGEgdGVtcGxhdGUgZnVuY3Rpb24gKi9cbiAgLy8gJEZsb3dGaXhNZTogTm90IHR5cGVkIHRvIGF2b2lkIGRlc3RydWN0dXJpbmcgYXJndW1lbnRzXG4gIHZhciB0ZW1wbGF0ZUZ1bmN0aW9uID0gZnVuY3Rpb24gdGVtcGxhdGVGdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29tcG9uZW50Q29uc3RydWN0b3IodGFnLCBvcHRpb25zLCBjc3MuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICAvKiBJZiBjb25maWcgbWV0aG9kcyBhcmUgY2FsbGVkLCB3cmFwIHVwIGEgbmV3IHRlbXBsYXRlIGZ1bmN0aW9uIGFuZCBtZXJnZSBvcHRpb25zICovXG4gIHRlbXBsYXRlRnVuY3Rpb24ud2l0aENvbmZpZyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY29tcG9uZW50Q29uc3RydWN0b3IsIHRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIGNvbmZpZykpO1xuICB9O1xuXG4gIC8qIE1vZGlmeS9pbmplY3QgbmV3IHByb3BzIGF0IHJ1bnRpbWUgKi9cbiAgdGVtcGxhdGVGdW5jdGlvbi5hdHRycyA9IGZ1bmN0aW9uIChhdHRycykge1xuICAgIHJldHVybiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgYXR0cnM6IEFycmF5LnByb3RvdHlwZS5jb25jYXQob3B0aW9ucy5hdHRycywgYXR0cnMpLmZpbHRlcihCb29sZWFuKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gdGVtcGxhdGVGdW5jdGlvbjtcbn1cblxuLy8gXG4vLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qcy9ibG9iL21hc3Rlci9tdXJtdXJoYXNoMl9nYy5qc1xuZnVuY3Rpb24gbXVybXVyaGFzaChjKSB7XG4gIGZvciAodmFyIGUgPSBjLmxlbmd0aCB8IDAsIGEgPSBlIHwgMCwgZCA9IDAsIGI7IGUgPj0gNDspIHtcbiAgICBiID0gYy5jaGFyQ29kZUF0KGQpICYgMjU1IHwgKGMuY2hhckNvZGVBdCgrK2QpICYgMjU1KSA8PCA4IHwgKGMuY2hhckNvZGVBdCgrK2QpICYgMjU1KSA8PCAxNiB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgMjQsIGIgPSAxNTQwNDgzNDc3ICogKGIgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYiA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KSwgYiBePSBiID4+PiAyNCwgYiA9IDE1NDA0ODM0NzcgKiAoYiAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChiID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpLCBhID0gMTU0MDQ4MzQ3NyAqIChhICYgNjU1MzUpICsgKCgxNTQwNDgzNDc3ICogKGEgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNikgXiBiLCBlIC09IDQsICsrZDtcbiAgfVxuICBzd2l0Y2ggKGUpIHtcbiAgICBjYXNlIDM6XG4gICAgICBhIF49IChjLmNoYXJDb2RlQXQoZCArIDIpICYgMjU1KSA8PCAxNjtcbiAgICBjYXNlIDI6XG4gICAgICBhIF49IChjLmNoYXJDb2RlQXQoZCArIDEpICYgMjU1KSA8PCA4O1xuICAgIGNhc2UgMTpcbiAgICAgIGEgXj0gYy5jaGFyQ29kZUF0KGQpICYgMjU1LCBhID0gMTU0MDQ4MzQ3NyAqIChhICYgNjU1MzUpICsgKCgxNTQwNDgzNDc3ICogKGEgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNik7XG4gIH1cbiAgYSBePSBhID4+PiAxMztcbiAgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpO1xuICByZXR1cm4gKGEgXiBhID4+PiAxNSkgPj4+IDA7XG59XG5cbi8vIFxuLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKiBUaGlzIGlzIHRoZSBcImNhcGFjaXR5XCIgb2Ygb3VyIGFscGhhYmV0IGkuZS4gMngyNiBmb3IgYWxsIGxldHRlcnMgcGx1cyB0aGVpciBjYXBpdGFsaXNlZFxuICogY291bnRlcnBhcnRzICovXG52YXIgY2hhcnNMZW5ndGggPSA1MjtcblxuLyogc3RhcnQgYXQgNzUgZm9yICdhJyB1bnRpbCAneicgKDI1KSBhbmQgdGhlbiBzdGFydCBhdCA2NSBmb3IgY2FwaXRhbGlzZWQgbGV0dGVycyAqL1xudmFyIGdldEFscGhhYmV0aWNDaGFyID0gZnVuY3Rpb24gZ2V0QWxwaGFiZXRpY0NoYXIoY29kZSkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlICsgKGNvZGUgPiAyNSA/IDM5IDogOTcpKTtcbn07XG5cbi8qIGlucHV0IGEgbnVtYmVyLCB1c3VhbGx5IGEgaGFzaCBhbmQgY29udmVydCBpdCB0byBiYXNlLTUyICovXG5mdW5jdGlvbiBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKGNvZGUpIHtcbiAgdmFyIG5hbWUgPSAnJztcbiAgdmFyIHggPSB2b2lkIDA7XG5cbiAgLyogZ2V0IGEgY2hhciBhbmQgZGl2aWRlIGJ5IGFscGhhYmV0LWxlbmd0aCAqL1xuICBmb3IgKHggPSBjb2RlOyB4ID4gY2hhcnNMZW5ndGg7IHggPSBNYXRoLmZsb29yKHggLyBjaGFyc0xlbmd0aCkpIHtcbiAgICBuYW1lID0gZ2V0QWxwaGFiZXRpY0NoYXIoeCAlIGNoYXJzTGVuZ3RoKSArIG5hbWU7XG4gIH1cblxuICByZXR1cm4gZ2V0QWxwaGFiZXRpY0NoYXIoeCAlIGNoYXJzTGVuZ3RoKSArIG5hbWU7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBoYXNGdW5jdGlvbk9iamVjdEtleShvYmopIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9ialtrZXldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1N0YXRpY1J1bGVzKHJ1bGVzLCBhdHRycykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIHJ1bGUgPSBydWxlc1tpXTtcblxuICAgIC8vIHJlY3Vyc2l2ZSBjYXNlXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocnVsZSkgJiYgIWlzU3RhdGljUnVsZXMocnVsZSwgYXR0cnMpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHJ1bGUpICYmICFpc1N0eWxlZENvbXBvbmVudChydWxlKSkge1xuICAgICAgLy8gZnVuY3Rpb25zIGFyZSBhbGxvd2VkIHRvIGJlIHN0YXRpYyBpZiB0aGV5J3JlIGp1c3QgYmVpbmdcbiAgICAgIC8vIHVzZWQgdG8gZ2V0IHRoZSBjbGFzc25hbWUgb2YgYSBuZXN0ZWQgc3R5bGVkIGNvbXBvbmVudFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhdHRycy5zb21lKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oeCkgfHwgaGFzRnVuY3Rpb25PYmplY3RLZXkoeCk7XG4gIH0pKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIFxuXG4vKiBjb21iaW5lcyBoYXNoU3RyIChtdXJtdXJoYXNoKSBhbmQgbmFtZUdlbmVyYXRvciBmb3IgY29udmVuaWVuY2UgKi9cbnZhciBoYXNoZXIgPSBmdW5jdGlvbiBoYXNoZXIoc3RyKSB7XG4gIHJldHVybiBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKG11cm11cmhhc2goc3RyKSk7XG59O1xuXG4vKlxuIENvbXBvbmVudFN0eWxlIGlzIGFsbCB0aGUgQ1NTLXNwZWNpZmljIHN0dWZmLCBub3RcbiB0aGUgUmVhY3Qtc3BlY2lmaWMgc3R1ZmYuXG4gKi9cblxudmFyIENvbXBvbmVudFN0eWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb21wb25lbnRTdHlsZShydWxlcywgYXR0cnMsIGNvbXBvbmVudElkKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcG9uZW50U3R5bGUpO1xuXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nICYmIGlzU3RhdGljUnVsZXMocnVsZXMsIGF0dHJzKTtcbiAgICB0aGlzLmNvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG5cbiAgICBpZiAoIVN0eWxlU2hlZXQubWFzdGVyLmhhc0lkKGNvbXBvbmVudElkKSkge1xuICAgICAgU3R5bGVTaGVldC5tYXN0ZXIuZGVmZXJyZWRJbmplY3QoY29tcG9uZW50SWQsIFtdKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiBGbGF0dGVucyBhIHJ1bGUgc2V0IGludG8gdmFsaWQgQ1NTXG4gICAqIEhhc2hlcyBpdCwgd3JhcHMgdGhlIHdob2xlIGNodW5rIGluIGEgLmhhc2gxMjM0IHt9XG4gICAqIFJldHVybnMgdGhlIGhhc2ggdG8gYmUgaW5qZWN0ZWQgb24gcmVuZGVyKClcbiAgICogKi9cblxuXG4gIENvbXBvbmVudFN0eWxlLnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgaXNTdGF0aWMgPSB0aGlzLmlzU3RhdGljLFxuICAgICAgICBjb21wb25lbnRJZCA9IHRoaXMuY29tcG9uZW50SWQsXG4gICAgICAgIGxhc3RDbGFzc05hbWUgPSB0aGlzLmxhc3RDbGFzc05hbWU7XG5cbiAgICBpZiAoSVNfQlJPV1NFUiAmJiBpc1N0YXRpYyAmJiB0eXBlb2YgbGFzdENsYXNzTmFtZSA9PT0gJ3N0cmluZycgJiYgc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIGxhc3RDbGFzc05hbWUpKSB7XG4gICAgICByZXR1cm4gbGFzdENsYXNzTmFtZTtcbiAgICB9XG5cbiAgICB2YXIgZmxhdENTUyA9IGZsYXR0ZW4odGhpcy5ydWxlcywgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCk7XG4gICAgdmFyIG5hbWUgPSBoYXNoZXIodGhpcy5jb21wb25lbnRJZCArIGZsYXRDU1Muam9pbignJykpO1xuICAgIGlmICghc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIG5hbWUpKSB7XG4gICAgICBzdHlsZVNoZWV0LmluamVjdCh0aGlzLmNvbXBvbmVudElkLCBzdHJpbmdpZnlSdWxlcyhmbGF0Q1NTLCAnLicgKyBuYW1lLCB1bmRlZmluZWQsIGNvbXBvbmVudElkKSwgbmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0Q2xhc3NOYW1lID0gbmFtZTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfTtcblxuICBDb21wb25lbnRTdHlsZS5nZW5lcmF0ZU5hbWUgPSBmdW5jdGlvbiBnZW5lcmF0ZU5hbWUoc3RyKSB7XG4gICAgcmV0dXJuIGhhc2hlcihzdHIpO1xuICB9O1xuXG4gIHJldHVybiBDb21wb25lbnRTdHlsZTtcbn0oKTtcblxuLy8gXG5cbnZhciBMSU1JVCA9IDIwMDtcblxudmFyIGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyA9IChmdW5jdGlvbiAoZGlzcGxheU5hbWUpIHtcbiAgdmFyIGdlbmVyYXRlZENsYXNzZXMgPSB7fTtcbiAgdmFyIHdhcm5pbmdTZWVuID0gZmFsc2U7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAoIXdhcm5pbmdTZWVuKSB7XG4gICAgICBnZW5lcmF0ZWRDbGFzc2VzW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKGdlbmVyYXRlZENsYXNzZXMpLmxlbmd0aCA+PSBMSU1JVCkge1xuICAgICAgICAvLyBVbmFibGUgdG8gZmluZCBsYXRlc3RSdWxlIGluIHRlc3QgZW52aXJvbm1lbnQuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUsIHByZWZlci10ZW1wbGF0ZSAqL1xuICAgICAgICBjb25zb2xlLndhcm4oJ092ZXIgJyArIExJTUlUICsgJyBjbGFzc2VzIHdlcmUgZ2VuZXJhdGVkIGZvciBjb21wb25lbnQgJyArIGRpc3BsYXlOYW1lICsgJy4gXFxuJyArICdDb25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbicgKyAnRXhhbXBsZTpcXG4nICsgJyAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyhwcm9wcyA9PiAoe1xcbicgKyAnICAgIHN0eWxlOiB7XFxuJyArICcgICAgICBiYWNrZ3JvdW5kOiBwcm9wcy5iYWNrZ3JvdW5kLFxcbicgKyAnICAgIH0sXFxuJyArICcgIH0pKWB3aWR0aDogMTAwJTtgXFxuXFxuJyArICcgIDxDb21wb25lbnQgLz4nKTtcbiAgICAgICAgd2FybmluZ1NlZW4gPSB0cnVlO1xuICAgICAgICBnZW5lcmF0ZWRDbGFzc2VzID0ge307XG4gICAgICB9XG4gICAgfVxuICB9O1xufSk7XG5cbi8vIFxuXG52YXIgZGV0ZXJtaW5lVGhlbWUgPSAoZnVuY3Rpb24gKHByb3BzLCBmYWxsYmFja1RoZW1lKSB7XG4gIHZhciBkZWZhdWx0UHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IEVNUFRZX09CSkVDVDtcblxuICAvLyBQcm9wcyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgVGhlbWVQcm92aWRlciwgd2hpY2ggc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyXG4gIC8vIGRlZmF1bHRQcm9wcywgYnV0IFJlYWN0IGF1dG9tYXRpY2FsbHkgcHV0cyBkZWZhdWx0UHJvcHMgb24gcHJvcHMuXG5cbiAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcywgZmxvd3R5cGUtZXJyb3JzL3Nob3ctZXJyb3JzICovXG4gIHZhciBpc0RlZmF1bHRUaGVtZSA9IGRlZmF1bHRQcm9wcyA/IHByb3BzLnRoZW1lID09PSBkZWZhdWx0UHJvcHMudGhlbWUgOiBmYWxzZTtcbiAgdmFyIHRoZW1lID0gcHJvcHMudGhlbWUgJiYgIWlzRGVmYXVsdFRoZW1lID8gcHJvcHMudGhlbWUgOiBmYWxsYmFja1RoZW1lIHx8IGRlZmF1bHRQcm9wcy50aGVtZTtcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gIHJldHVybiB0aGVtZTtcbn0pO1xuXG4vLyBcbnZhciBlc2NhcGVSZWdleCA9IC9bW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2AtXSsvZztcbnZhciBkYXNoZXNBdEVuZHMgPSAvKF4tfC0kKS9nO1xuXG4vKipcbiAqIFRPRE86IEV4cGxvcmUgdXNpbmcgQ1NTLmVzY2FwZSB3aGVuIGl0IGJlY29tZXMgbW9yZSBhdmFpbGFibGVcbiAqIGluIGV2ZXJncmVlbiBicm93c2Vycy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlKHN0cikge1xuICByZXR1cm4gc3RyXG4gIC8vIFJlcGxhY2UgYWxsIHBvc3NpYmxlIENTUyBzZWxlY3RvcnNcbiAgLnJlcGxhY2UoZXNjYXBlUmVnZXgsICctJylcblxuICAvLyBSZW1vdmUgZXh0cmFuZW91cyBoeXBoZW5zIGF0IHRoZSBzdGFydCBhbmQgZW5kXG4gIC5yZXBsYWNlKGRhc2hlc0F0RW5kcywgJycpO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gaXNUYWcodGFyZ2V0KSB7XG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHRhcmdldC5jaGFyQXQoMCkgPT09IHRhcmdldC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSA6IHRydWUpO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gaXNUYWcodGFyZ2V0KSA/ICdzdHlsZWQuJyArIHRhcmdldCA6ICdTdHlsZWQoJyArIGdldENvbXBvbmVudE5hbWUodGFyZ2V0KSArICcpJztcbn1cblxudmFyIF9UWVBFX1NUQVRJQ1M7XG5cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IChfVFlQRV9TVEFUSUNTID0ge30sIF9UWVBFX1NUQVRJQ1NbRm9yd2FyZFJlZl0gPSB7XG4gICQkdHlwZW9mOiB0cnVlLFxuICByZW5kZXI6IHRydWVcbn0sIF9UWVBFX1NUQVRJQ1MpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkkMSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG4gICAgX09iamVjdCRnZXRPd25Qcm9wZXJ0ID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBfT2JqZWN0JGdldE93blByb3BlcnQgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtdO1xufSA6IF9PYmplY3QkZ2V0T3duUHJvcGVydCxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgYXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGFycmF5UHJvdG90eXBlLmNvbmNhdChnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCksXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gVFlQRV9TVEFUSUNTW3RhcmdldENvbXBvbmVudC4kJHR5cGVvZl0gfHwgUkVBQ1RfU1RBVElDUztcblxuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gVFlQRV9TVEFUSUNTW3NvdXJjZUNvbXBvbmVudC4kJHR5cGVvZl0gfHwgUkVBQ1RfU1RBVElDUztcblxuICAgIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSB2b2lkIDA7XG4gICAgdmFyIGtleSA9IHZvaWQgMDtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmIChcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSQxKHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvKiBmYWlsIHNpbGVudGx5ICovXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbi8vIFxuZnVuY3Rpb24gaXNEZXJpdmVkUmVhY3RDb21wb25lbnQoZm4pIHtcbiAgcmV0dXJuICEhKGZuICYmIGZuLnByb3RvdHlwZSAmJiBmbi5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbi8vIFxuLy8gSGVscGVyIHRvIGNhbGwgYSBnaXZlbiBmdW5jdGlvbiwgb25seSBvbmNlXG52YXIgb25jZSA9IChmdW5jdGlvbiAoY2IpIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBjYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufSk7XG5cbi8vIFxuXG52YXIgVGhlbWVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuXG52YXIgVGhlbWVDb25zdW1lciA9IFRoZW1lQ29udGV4dC5Db25zdW1lcjtcblxuLyoqXG4gKiBQcm92aWRlIGEgdGhlbWUgdG8gYW4gZW50aXJlIHJlYWN0IGNvbXBvbmVudCB0cmVlIHZpYSBjb250ZXh0XG4gKi9cblxudmFyIFRoZW1lUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBpbmhlcml0cyhUaGVtZVByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgVGhlbWVQcm92aWRlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuZ2V0Q29udGV4dCA9IG1lbW9pemUoX3RoaXMuZ2V0Q29udGV4dC5iaW5kKF90aGlzKSk7XG4gICAgX3RoaXMucmVuZGVySW5uZXIgPSBfdGhpcy5yZW5kZXJJbm5lci5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLmNoaWxkcmVuKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb250ZXh0LkNvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVySW5uZXJcbiAgICApO1xuICB9O1xuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlcklubmVyID0gZnVuY3Rpb24gcmVuZGVySW5uZXIob3V0ZXJUaGVtZSkge1xuICAgIHZhciBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KHRoaXMucHJvcHMudGhlbWUsIG91dGVyVGhlbWUpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUaGVtZUNvbnRleHQuUHJvdmlkZXIsXG4gICAgICB7IHZhbHVlOiBjb250ZXh0IH0sXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSB0aGVtZSBmcm9tIHRoZSBwcm9wcywgc3VwcG9ydGluZyBib3RoIChvdXRlclRoZW1lKSA9PiB7fVxuICAgKiBhcyB3ZWxsIGFzIG9iamVjdCBub3RhdGlvblxuICAgKi9cblxuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLmdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUodGhlbWUsIG91dGVyVGhlbWUpIHtcbiAgICBpZiAoaXNGdW5jdGlvbih0aGVtZSkpIHtcbiAgICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAobWVyZ2VkVGhlbWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShtZXJnZWRUaGVtZSkgfHwgKHR5cGVvZiBtZXJnZWRUaGVtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobWVyZ2VkVGhlbWUpKSAhPT0gJ29iamVjdCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoNyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRUaGVtZTtcbiAgICB9XG5cbiAgICBpZiAodGhlbWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheSh0aGVtZSkgfHwgKHR5cGVvZiB0aGVtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodGhlbWUpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoOCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH07XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uIGdldENvbnRleHQodGhlbWUsIG91dGVyVGhlbWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaGVtZSh0aGVtZSwgb3V0ZXJUaGVtZSk7XG4gIH07XG5cbiAgcmV0dXJuIFRoZW1lUHJvdmlkZXI7XG59KENvbXBvbmVudCk7XG5cbi8vIFxuXG52YXIgQ0xPU0lOR19UQUdfUiA9IC9eXFxzKjxcXC9bYS16XS9pO1xuXG52YXIgU2VydmVyU3R5bGVTaGVldCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2VydmVyU3R5bGVTaGVldCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTZXJ2ZXJTdHlsZVNoZWV0KTtcblxuICAgIC8qIFRoZSBtYXN0ZXIgc2hlZXQgbWlnaHQgYmUgcmVzZXQsIHNvIGtlZXAgYSByZWZlcmVuY2UgaGVyZSAqL1xuICAgIHRoaXMubWFzdGVyU2hlZXQgPSBTdHlsZVNoZWV0Lm1hc3RlcjtcbiAgICB0aGlzLmluc3RhbmNlID0gdGhpcy5tYXN0ZXJTaGVldC5jbG9uZSgpO1xuICAgIHRoaXMuc2VhbGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogTWFyayB0aGUgU2VydmVyU3R5bGVTaGVldCBhcyBiZWluZyBmdWxseSBlbWl0dGVkIGFuZCBtYW51YWxseSBHQyBpdCBmcm9tIHRoZVxuICAgKiBTdHlsZVNoZWV0IHNpbmdsZXRvbi5cbiAgICovXG5cblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5zZWFsID0gZnVuY3Rpb24gc2VhbCgpIHtcbiAgICBpZiAoIXRoaXMuc2VhbGVkKSB7XG4gICAgICAvKiBSZW1vdmUgc2VhbGVkIFN0eWxlU2hlZXRzIGZyb20gdGhlIG1hc3RlciBzaGVldCAqL1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5tYXN0ZXJTaGVldC5jbG9uZXMuaW5kZXhPZih0aGlzLmluc3RhbmNlKTtcbiAgICAgIHRoaXMubWFzdGVyU2hlZXQuY2xvbmVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB0aGlzLnNlYWxlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmNvbGxlY3RTdHlsZXMgPSBmdW5jdGlvbiBjb2xsZWN0U3R5bGVzKGNoaWxkcmVuKSB7XG4gICAgaWYgKHRoaXMuc2VhbGVkKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDIpO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3R5bGVTaGVldE1hbmFnZXIsXG4gICAgICB7IHNoZWV0OiB0aGlzLmluc3RhbmNlIH0sXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuZ2V0U3R5bGVUYWdzID0gZnVuY3Rpb24gZ2V0U3R5bGVUYWdzKCkge1xuICAgIHRoaXMuc2VhbCgpO1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlLnRvSFRNTCgpO1xuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmdldFN0eWxlRWxlbWVudCA9IGZ1bmN0aW9uIGdldFN0eWxlRWxlbWVudCgpIHtcbiAgICB0aGlzLnNlYWwoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS50b1JlYWN0RWxlbWVudHMoKTtcbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5pbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0gPSBmdW5jdGlvbiBpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigzKTtcbiAgICB9XG5cbiAgICAvKiB0aGUgdGFnIGluZGV4IGtlZXBzIHRyYWNrIG9mIHdoaWNoIHRhZ3MgaGF2ZSBhbHJlYWR5IGJlZW4gZW1pdHRlZCAqL1xuICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2U7XG5cbiAgICB2YXIgaW5zdGFuY2VUYWdJbmRleCA9IDA7XG5cbiAgICB2YXIgc3RyZWFtQXR0ciA9IFNDX1NUUkVBTV9BVFRSICsgJz1cInRydWVcIic7XG5cbiAgICB2YXIgdHJhbnNmb3JtZXIgPSBuZXcgc3RyZWFtLlRyYW5zZm9ybSh7XG4gICAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIGFwcGVuZFN0eWxlQ2h1bmtzKGNodW5rLCAvKiBlbmNvZGluZyAqL18sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0YWdzID0gaW5zdGFuY2UudGFncztcblxuICAgICAgICB2YXIgaHRtbCA9ICcnO1xuXG4gICAgICAgIC8qIHJldHJpZXZlIGh0bWwgZm9yIGVhY2ggbmV3IHN0eWxlIHRhZyAqL1xuICAgICAgICBmb3IgKDsgaW5zdGFuY2VUYWdJbmRleCA8IHRhZ3MubGVuZ3RoOyBpbnN0YW5jZVRhZ0luZGV4ICs9IDEpIHtcbiAgICAgICAgICB2YXIgdGFnID0gdGFnc1tpbnN0YW5jZVRhZ0luZGV4XTtcbiAgICAgICAgICBodG1sICs9IHRhZy50b0hUTUwoc3RyZWFtQXR0cik7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBmb3JjZSBvdXIgU3R5bGVTaGVldHMgdG8gZW1pdCBlbnRpcmVseSBuZXcgdGFncyAqL1xuICAgICAgICBpbnN0YW5jZS5zZWFsQWxsVGFncygpO1xuXG4gICAgICAgIHZhciByZW5kZXJlZEh0bWwgPSBjaHVuay50b1N0cmluZygpO1xuXG4gICAgICAgIC8qIHByZXBlbmQgc3R5bGUgaHRtbCB0byBjaHVuaywgdW5sZXNzIHRoZSBzdGFydCBvZiB0aGUgY2h1bmsgaXMgYSBjbG9zaW5nIHRhZyBpbiB3aGljaCBjYXNlIGFwcGVuZCByaWdodCBhZnRlciB0aGF0ICovXG4gICAgICAgIGlmIChDTE9TSU5HX1RBR19SLnRlc3QocmVuZGVyZWRIdG1sKSkge1xuICAgICAgICAgIHZhciBlbmRPZkNsb3NpbmdUYWcgPSByZW5kZXJlZEh0bWwuaW5kZXhPZignPicpO1xuXG4gICAgICAgICAgdGhpcy5wdXNoKHJlbmRlcmVkSHRtbC5zbGljZSgwLCBlbmRPZkNsb3NpbmdUYWcgKyAxKSArIGh0bWwgKyByZW5kZXJlZEh0bWwuc2xpY2UoZW5kT2ZDbG9zaW5nVGFnICsgMSkpO1xuICAgICAgICB9IGVsc2UgdGhpcy5wdXNoKGh0bWwgKyByZW5kZXJlZEh0bWwpO1xuXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFkYWJsZVN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNlYWwoKTtcbiAgICB9KTtcblxuICAgIHJlYWRhYmxlU3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIF90aGlzLnNlYWwoKTtcblxuICAgICAgLy8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHRyYW5zZm9ybSBzdHJlYW1cbiAgICAgIHRyYW5zZm9ybWVyLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZWFkYWJsZVN0cmVhbS5waXBlKHRyYW5zZm9ybWVyKTtcbiAgfTtcblxuICByZXR1cm4gU2VydmVyU3R5bGVTaGVldDtcbn0oKTtcblxuLy8gXG5cbnZhciBTdHlsZVNoZWV0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbnZhciBTdHlsZVNoZWV0Q29uc3VtZXIgPSBTdHlsZVNoZWV0Q29udGV4dC5Db25zdW1lcjtcblxudmFyIFN0eWxlU2hlZXRNYW5hZ2VyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoU3R5bGVTaGVldE1hbmFnZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXRNYW5hZ2VyKHByb3BzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVTaGVldE1hbmFnZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmdldENvbnRleHQgPSBtZW1vaXplKF90aGlzLmdldENvbnRleHQpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN0eWxlU2hlZXRNYW5hZ2VyLnByb3RvdHlwZS5nZXRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q29udGV4dChzaGVldCwgdGFyZ2V0KSB7XG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfSBlbHNlIGlmICh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBuZXcgU3R5bGVTaGVldCh0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDQpO1xuICAgIH1cbiAgfTtcblxuICBTdHlsZVNoZWV0TWFuYWdlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgc2hlZXQgPSBfcHJvcHMuc2hlZXQsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcy50YXJnZXQ7XG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3R5bGVTaGVldENvbnRleHQuUHJvdmlkZXIsXG4gICAgICB7IHZhbHVlOiB0aGlzLmdldENvbnRleHQoc2hlZXQsIHRhcmdldCkgfSxcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldE1hbmFnZXI7XG59KENvbXBvbmVudCk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZVNoZWV0TWFuYWdlci5wcm9wVHlwZXMgPSB7XG4gIHNoZWV0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuaW5zdGFuY2VPZihTdHlsZVNoZWV0KSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoU2VydmVyU3R5bGVTaGVldCldKSxcblxuICB0YXJnZXQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZW5kQ2hpbGQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSlcbn0gOiB2b2lkIDA7XG5cbi8vIFxuXG52YXIgaWRlbnRpZmllcnMgPSB7fTtcblxuLyogV2UgZGVwZW5kIG9uIGNvbXBvbmVudHMgaGF2aW5nIHVuaXF1ZSBJRHMgKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSWQoX0NvbXBvbmVudFN0eWxlLCBfZGlzcGxheU5hbWUsIHBhcmVudENvbXBvbmVudElkKSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiBfZGlzcGxheU5hbWUgIT09ICdzdHJpbmcnID8gJ3NjJyA6IGVzY2FwZShfZGlzcGxheU5hbWUpO1xuXG4gIC8qKlxuICAgKiBUaGlzIGVuc3VyZXMgdW5pcXVlbmVzcyBpZiB0d28gY29tcG9uZW50cyBoYXBwZW4gdG8gc2hhcmVcbiAgICogdGhlIHNhbWUgZGlzcGxheU5hbWUuXG4gICAqL1xuICB2YXIgbnIgPSAoaWRlbnRpZmllcnNbZGlzcGxheU5hbWVdIHx8IDApICsgMTtcbiAgaWRlbnRpZmllcnNbZGlzcGxheU5hbWVdID0gbnI7XG5cbiAgdmFyIGNvbXBvbmVudElkID0gZGlzcGxheU5hbWUgKyAnLScgKyBfQ29tcG9uZW50U3R5bGUuZ2VuZXJhdGVOYW1lKGRpc3BsYXlOYW1lICsgbnIpO1xuXG4gIHJldHVybiBwYXJlbnRDb21wb25lbnRJZCA/IHBhcmVudENvbXBvbmVudElkICsgJy0nICsgY29tcG9uZW50SWQgOiBjb21wb25lbnRJZDtcbn1cblxuLy8gJEZsb3dGaXhNZVxuXG52YXIgU3R5bGVkQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoU3R5bGVkQ29tcG9uZW50LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdHlsZWRDb21wb25lbnQoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVkQ29tcG9uZW50KTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLmF0dHJzID0ge307XG5cbiAgICBfdGhpcy5yZW5kZXJPdXRlciA9IF90aGlzLnJlbmRlck91dGVyLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLnJlbmRlcklubmVyID0gX3RoaXMucmVuZGVySW5uZXIuYmluZChfdGhpcyk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgX3RoaXMud2FybklubmVyUmVmID0gb25jZShmdW5jdGlvbiAoZGlzcGxheU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignVGhlIFwiaW5uZXJSZWZcIiBBUEkgaGFzIGJlZW4gcmVtb3ZlZCBpbiBzdHlsZWQtY29tcG9uZW50cyB2NCBpbiBmYXZvciBvZiBSZWFjdCAxNiByZWYgZm9yd2FyZGluZywgdXNlIFwicmVmXCIgaW5zdGVhZCBsaWtlIGEgdHlwaWNhbCBjb21wb25lbnQuIFwiaW5uZXJSZWZcIiB3YXMgZGV0ZWN0ZWQgb24gY29tcG9uZW50IFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLicpXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMud2FybkF0dHJzRm5PYmplY3RLZXlEZXByZWNhdGVkID0gb25jZShmdW5jdGlvbiAoa2V5LCBkaXNwbGF5TmFtZSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKCdGdW5jdGlvbnMgYXMgb2JqZWN0LWZvcm0gYXR0cnMoe30pIGtleXMgYXJlIG5vdyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBzdHlsZWQtY29tcG9uZW50cy4gU3dpdGNoIHRvIHRoZSBuZXcgYXR0cnMocHJvcHMgPT4gKHt9KSkgc3ludGF4IGluc3RlYWQgZm9yIGVhc2llciBhbmQgbW9yZSBwb3dlcmZ1bCBjb21wb3NpdGlvbi4gVGhlIGF0dHJzIGtleSBpbiBxdWVzdGlvbiBpcyBcIicgKyBrZXkgKyAnXCIgb24gY29tcG9uZW50IFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLicsICdcXG4gJyArIG5ldyBFcnJvcigpLnN0YWNrKVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLndhcm5Ob25TdHlsZWRDb21wb25lbnRBdHRyc09iamVjdEtleSA9IG9uY2UoZnVuY3Rpb24gKGtleSwgZGlzcGxheU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignSXQgbG9va3MgbGlrZSB5b3VcXCd2ZSB1c2VkIGEgbm9uIHN0eWxlZC1jb21wb25lbnQgYXMgdGhlIHZhbHVlIGZvciB0aGUgXCInICsga2V5ICsgJ1wiIHByb3AgaW4gYW4gb2JqZWN0LWZvcm0gYXR0cnMgY29uc3RydWN0b3Igb2YgXCInICsgZGlzcGxheU5hbWUgKyAnXCIuXFxuJyArICdZb3Ugc2hvdWxkIHVzZSB0aGUgbmV3IGZ1bmN0aW9uLWZvcm0gYXR0cnMgY29uc3RydWN0b3Igd2hpY2ggYXZvaWRzIHRoaXMgaXNzdWU6IGF0dHJzKHByb3BzID0+ICh7IHlvdXJTdHVmZiB9KSlcXG4nICsgXCJUbyBjb250aW51ZSB1c2luZyB0aGUgZGVwcmVjYXRlZCBvYmplY3Qgc3ludGF4LCB5b3UnbGwgbmVlZCB0byB3cmFwIHlvdXIgY29tcG9uZW50IHByb3AgaW4gYSBmdW5jdGlvbiB0byBtYWtlIGl0IGF2YWlsYWJsZSBpbnNpZGUgdGhlIHN0eWxlZCBjb21wb25lbnQgKHlvdSdsbCBzdGlsbCBnZXQgdGhlIGRlcHJlY2F0aW9uIHdhcm5pbmcgdGhvdWdoLilcXG5cIiArICgnRm9yIGV4YW1wbGUsIHsgJyArIGtleSArICc6ICgpID0+IElubmVyQ29tcG9uZW50IH0gaW5zdGVhZCBvZiB7ICcgKyBrZXkgKyAnOiBJbm5lckNvbXBvbmVudCB9JykpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBTdHlsZVNoZWV0Q29uc3VtZXIsXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5yZW5kZXJPdXRlclxuICAgICk7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXJPdXRlciA9IGZ1bmN0aW9uIHJlbmRlck91dGVyKCkge1xuICAgIHZhciBzdHlsZVNoZWV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBTdHlsZVNoZWV0Lm1hc3RlcjtcblxuICAgIHRoaXMuc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XG5cbiAgICAvLyBObyBuZWVkIHRvIHN1YnNjcmliZSBhIHN0YXRpYyBjb21wb25lbnQgdG8gdGhlbWUgY2hhbmdlcywgaXQgd29uJ3QgY2hhbmdlIGFueXRoaW5nXG4gICAgaWYgKHRoaXMucHJvcHMuZm9yd2FyZGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlLmlzU3RhdGljKSByZXR1cm4gdGhpcy5yZW5kZXJJbm5lcigpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUaGVtZUNvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVySW5uZXJcbiAgICApO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVySW5uZXIgPSBmdW5jdGlvbiByZW5kZXJJbm5lcih0aGVtZSkge1xuICAgIHZhciBfcHJvcHMkZm9yd2FyZGVkQ29tcG8gPSB0aGlzLnByb3BzLmZvcndhcmRlZENvbXBvbmVudCxcbiAgICAgICAgY29tcG9uZW50U3R5bGUgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uY29tcG9uZW50U3R5bGUsXG4gICAgICAgIGRlZmF1bHRQcm9wcyA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby5kZWZhdWx0UHJvcHMsXG4gICAgICAgIGRpc3BsYXlOYW1lID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLmRpc3BsYXlOYW1lLFxuICAgICAgICBmb2xkZWRDb21wb25lbnRJZHMgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uZm9sZGVkQ29tcG9uZW50SWRzLFxuICAgICAgICBzdHlsZWRDb21wb25lbnRJZCA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby5zdHlsZWRDb21wb25lbnRJZCxcbiAgICAgICAgdGFyZ2V0ID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLnRhcmdldDtcblxuXG4gICAgdmFyIGdlbmVyYXRlZENsYXNzTmFtZSA9IHZvaWQgMDtcbiAgICBpZiAoY29tcG9uZW50U3R5bGUuaXNTdGF0aWMpIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoRU1QVFlfT0JKRUNULCB0aGlzLnByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuZXJhdGVkQ2xhc3NOYW1lID0gdGhpcy5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhkZXRlcm1pbmVUaGVtZSh0aGlzLnByb3BzLCB0aGVtZSwgZGVmYXVsdFByb3BzKSB8fCBFTVBUWV9PQkpFQ1QsIHRoaXMucHJvcHMpO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50VG9CZUNyZWF0ZWQgPSB0aGlzLnByb3BzLmFzIHx8IHRoaXMuYXR0cnMuYXMgfHwgdGFyZ2V0O1xuICAgIHZhciBpc1RhcmdldFRhZyA9IGlzVGFnKGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG5cbiAgICB2YXIgcHJvcHNGb3JFbGVtZW50ID0ge307XG4gICAgdmFyIGNvbXB1dGVkUHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5hdHRycyk7XG5cbiAgICB2YXIga2V5ID0gdm9pZCAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGtleSBpbiBjb21wdXRlZFByb3BzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgPT09ICdpbm5lclJlZicgJiYgaXNUYXJnZXRUYWcpIHtcbiAgICAgICAgdGhpcy53YXJuSW5uZXJSZWYoZGlzcGxheU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09PSAnZm9yd2FyZGVkQ29tcG9uZW50JyB8fCBrZXkgPT09ICdhcycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZFJlZicpIHByb3BzRm9yRWxlbWVudC5yZWYgPSBjb21wdXRlZFByb3BzW2tleV07ZWxzZSBpZiAoa2V5ID09PSAnZm9yd2FyZGVkQXMnKSBwcm9wc0ZvckVsZW1lbnQuYXMgPSBjb21wdXRlZFByb3BzW2tleV07ZWxzZSBpZiAoIWlzVGFyZ2V0VGFnIHx8IHZhbGlkQXR0cihrZXkpKSB7XG4gICAgICAgIC8vIERvbid0IHBhc3MgdGhyb3VnaCBub24gSFRNTCB0YWdzIHRocm91Z2ggdG8gSFRNTCBlbGVtZW50c1xuICAgICAgICBwcm9wc0ZvckVsZW1lbnRba2V5XSA9IGNvbXB1dGVkUHJvcHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zdHlsZSAmJiB0aGlzLmF0dHJzLnN0eWxlKSB7XG4gICAgICBwcm9wc0ZvckVsZW1lbnQuc3R5bGUgPSBfZXh0ZW5kcyh7fSwgdGhpcy5hdHRycy5zdHlsZSwgdGhpcy5wcm9wcy5zdHlsZSk7XG4gICAgfVxuXG4gICAgcHJvcHNGb3JFbGVtZW50LmNsYXNzTmFtZSA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQoZm9sZGVkQ29tcG9uZW50SWRzLCBzdHlsZWRDb21wb25lbnRJZCwgZ2VuZXJhdGVkQ2xhc3NOYW1lICE9PSBzdHlsZWRDb21wb25lbnRJZCA/IGdlbmVyYXRlZENsYXNzTmFtZSA6IG51bGwsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB0aGlzLmF0dHJzLmNsYXNzTmFtZSkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcblxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGVsZW1lbnRUb0JlQ3JlYXRlZCwgcHJvcHNGb3JFbGVtZW50KTtcbiAgfTtcblxuICBTdHlsZWRDb21wb25lbnQucHJvdG90eXBlLmJ1aWxkRXhlY3V0aW9uQ29udGV4dCA9IGZ1bmN0aW9uIGJ1aWxkRXhlY3V0aW9uQ29udGV4dCh0aGVtZSwgcHJvcHMsIGF0dHJzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgY29udGV4dCA9IF9leHRlbmRzKHt9LCBwcm9wcywgeyB0aGVtZTogdGhlbWUgfSk7XG5cbiAgICBpZiAoIWF0dHJzLmxlbmd0aCkgcmV0dXJuIGNvbnRleHQ7XG5cbiAgICB0aGlzLmF0dHJzID0ge307XG5cbiAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyRGVmKSB7XG4gICAgICB2YXIgcmVzb2x2ZWRBdHRyRGVmID0gYXR0ckRlZjtcbiAgICAgIHZhciBhdHRyRGVmV2FzRm4gPSBmYWxzZTtcbiAgICAgIHZhciBhdHRyID0gdm9pZCAwO1xuICAgICAgdmFyIGtleSA9IHZvaWQgMDtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ocmVzb2x2ZWRBdHRyRGVmKSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHJlc29sdmVkQXR0ckRlZiA9IHJlc29sdmVkQXR0ckRlZihjb250ZXh0KTtcbiAgICAgICAgYXR0ckRlZldhc0ZuID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBmb3IgKGtleSBpbiByZXNvbHZlZEF0dHJEZWYpIHtcbiAgICAgICAgYXR0ciA9IHJlc29sdmVkQXR0ckRlZltrZXldO1xuXG4gICAgICAgIGlmICghYXR0ckRlZldhc0ZuKSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXR0cikgJiYgIWlzRGVyaXZlZFJlYWN0Q29tcG9uZW50KGF0dHIpICYmICFpc1N0eWxlZENvbXBvbmVudChhdHRyKSkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLndhcm5BdHRyc0ZuT2JqZWN0S2V5RGVwcmVjYXRlZChrZXksIHByb3BzLmZvcndhcmRlZENvbXBvbmVudC5kaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF0dHIgPSBhdHRyKGNvbnRleHQpO1xuXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChhdHRyKSkge1xuICAgICAgICAgICAgICBfdGhpczIud2Fybk5vblN0eWxlZENvbXBvbmVudEF0dHJzT2JqZWN0S2V5KGtleSwgcHJvcHMuZm9yd2FyZGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIuYXR0cnNba2V5XSA9IGF0dHI7XG4gICAgICAgIGNvbnRleHRba2V5XSA9IGF0dHI7XG4gICAgICB9XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29udGV4dDtcbiAgfTtcblxuICBTdHlsZWRDb21wb25lbnQucHJvdG90eXBlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzID0gZnVuY3Rpb24gZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXModGhlbWUsIHByb3BzKSB7XG4gICAgdmFyIF9wcm9wcyRmb3J3YXJkZWRDb21wbzIgPSBwcm9wcy5mb3J3YXJkZWRDb21wb25lbnQsXG4gICAgICAgIGF0dHJzID0gX3Byb3BzJGZvcndhcmRlZENvbXBvMi5hdHRycyxcbiAgICAgICAgY29tcG9uZW50U3R5bGUgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8yLmNvbXBvbmVudFN0eWxlLFxuICAgICAgICB3YXJuVG9vTWFueUNsYXNzZXMgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8yLndhcm5Ub29NYW55Q2xhc3NlcztcblxuICAgIC8vIHN0YXRpY2FsbHkgc3R5bGVkLWNvbXBvbmVudHMgZG9uJ3QgbmVlZCB0byBidWlsZCBhbiBleGVjdXRpb24gY29udGV4dCBvYmplY3QsXG4gICAgLy8gYW5kIHNob3VsZG4ndCBiZSBpbmNyZWFzaW5nIHRoZSBudW1iZXIgb2YgY2xhc3MgbmFtZXNcblxuICAgIGlmIChjb21wb25lbnRTdHlsZS5pc1N0YXRpYyAmJiAhYXR0cnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50U3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoRU1QVFlfT0JKRUNULCB0aGlzLnN0eWxlU2hlZXQpO1xuICAgIH1cblxuICAgIHZhciBjbGFzc05hbWUgPSBjb21wb25lbnRTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyh0aGlzLmJ1aWxkRXhlY3V0aW9uQ29udGV4dCh0aGVtZSwgcHJvcHMsIGF0dHJzKSwgdGhpcy5zdHlsZVNoZWV0KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5Ub29NYW55Q2xhc3Nlcykgd2FyblRvb01hbnlDbGFzc2VzKGNsYXNzTmFtZSk7XG5cbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9O1xuXG4gIHJldHVybiBTdHlsZWRDb21wb25lbnQ7XG59KENvbXBvbmVudCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlZENvbXBvbmVudCh0YXJnZXQsIG9wdGlvbnMsIHJ1bGVzKSB7XG4gIHZhciBpc1RhcmdldFN0eWxlZENvbXAgPSBpc1N0eWxlZENvbXBvbmVudCh0YXJnZXQpO1xuICB2YXIgaXNDbGFzcyA9ICFpc1RhZyh0YXJnZXQpO1xuXG4gIHZhciBfb3B0aW9ucyRkaXNwbGF5TmFtZSA9IG9wdGlvbnMuZGlzcGxheU5hbWUsXG4gICAgICBkaXNwbGF5TmFtZSA9IF9vcHRpb25zJGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQgPyBnZW5lcmF0ZURpc3BsYXlOYW1lKHRhcmdldCkgOiBfb3B0aW9ucyRkaXNwbGF5TmFtZSxcbiAgICAgIF9vcHRpb25zJGNvbXBvbmVudElkID0gb3B0aW9ucy5jb21wb25lbnRJZCxcbiAgICAgIGNvbXBvbmVudElkID0gX29wdGlvbnMkY29tcG9uZW50SWQgPT09IHVuZGVmaW5lZCA/IGdlbmVyYXRlSWQoQ29tcG9uZW50U3R5bGUsIG9wdGlvbnMuZGlzcGxheU5hbWUsIG9wdGlvbnMucGFyZW50Q29tcG9uZW50SWQpIDogX29wdGlvbnMkY29tcG9uZW50SWQsXG4gICAgICBfb3B0aW9ucyRQYXJlbnRDb21wb24gPSBvcHRpb25zLlBhcmVudENvbXBvbmVudCxcbiAgICAgIFBhcmVudENvbXBvbmVudCA9IF9vcHRpb25zJFBhcmVudENvbXBvbiA9PT0gdW5kZWZpbmVkID8gU3R5bGVkQ29tcG9uZW50IDogX29wdGlvbnMkUGFyZW50Q29tcG9uLFxuICAgICAgX29wdGlvbnMkYXR0cnMgPSBvcHRpb25zLmF0dHJzLFxuICAgICAgYXR0cnMgPSBfb3B0aW9ucyRhdHRycyA9PT0gdW5kZWZpbmVkID8gRU1QVFlfQVJSQVkgOiBfb3B0aW9ucyRhdHRycztcblxuXG4gIHZhciBzdHlsZWRDb21wb25lbnRJZCA9IG9wdGlvbnMuZGlzcGxheU5hbWUgJiYgb3B0aW9ucy5jb21wb25lbnRJZCA/IGVzY2FwZShvcHRpb25zLmRpc3BsYXlOYW1lKSArICctJyArIG9wdGlvbnMuY29tcG9uZW50SWQgOiBvcHRpb25zLmNvbXBvbmVudElkIHx8IGNvbXBvbmVudElkO1xuXG4gIC8vIGZvbGQgdGhlIHVuZGVybHlpbmcgU3R5bGVkQ29tcG9uZW50IGF0dHJzIHVwIChpbXBsaWNpdCBleHRlbmQpXG4gIHZhciBmaW5hbEF0dHJzID1cbiAgLy8gJEZsb3dGaXhNZVxuICBpc1RhcmdldFN0eWxlZENvbXAgJiYgdGFyZ2V0LmF0dHJzID8gQXJyYXkucHJvdG90eXBlLmNvbmNhdCh0YXJnZXQuYXR0cnMsIGF0dHJzKS5maWx0ZXIoQm9vbGVhbikgOiBhdHRycztcblxuICB2YXIgY29tcG9uZW50U3R5bGUgPSBuZXcgQ29tcG9uZW50U3R5bGUoaXNUYXJnZXRTdHlsZWRDb21wID8gLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgcnVsZXMgdXAgKGltcGxpY2l0IGV4dGVuZClcbiAgLy8gJEZsb3dGaXhNZVxuICB0YXJnZXQuY29tcG9uZW50U3R5bGUucnVsZXMuY29uY2F0KHJ1bGVzKSA6IHJ1bGVzLCBmaW5hbEF0dHJzLCBzdHlsZWRDb21wb25lbnRJZCk7XG5cbiAgLyoqXG4gICAqIGZvcndhcmRSZWYgY3JlYXRlcyBhIG5ldyBpbnRlcmltIGNvbXBvbmVudCwgd2hpY2ggd2UnbGwgdGFrZSBhZHZhbnRhZ2Ugb2ZcbiAgICogaW5zdGVhZCBvZiBleHRlbmRpbmcgUGFyZW50Q29tcG9uZW50IHRvIGNyZWF0ZSBfYW5vdGhlcl8gaW50ZXJpbSBjbGFzc1xuICAgKi9cbiAgdmFyIFdyYXBwZWRTdHlsZWRDb21wb25lbnQgPSB2b2lkIDA7XG4gIHZhciBmb3J3YXJkUmVmID0gZnVuY3Rpb24gZm9yd2FyZFJlZihwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFyZW50Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgZm9yd2FyZGVkQ29tcG9uZW50OiBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LCBmb3J3YXJkZWRSZWY6IHJlZiB9KSk7XG4gIH07XG4gIGZvcndhcmRSZWYuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudCA9IFJlYWN0LmZvcndhcmRSZWYoZm9yd2FyZFJlZik7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuYXR0cnMgPSBmaW5hbEF0dHJzO1xuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuY29tcG9uZW50U3R5bGUgPSBjb21wb25lbnRTdHlsZTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuZm9sZGVkQ29tcG9uZW50SWRzID0gaXNUYXJnZXRTdHlsZWRDb21wID8gLy8gJEZsb3dGaXhNZVxuICBBcnJheS5wcm90b3R5cGUuY29uY2F0KHRhcmdldC5mb2xkZWRDb21wb25lbnRJZHMsIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCkgOiBFTVBUWV9BUlJBWTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQgPSBzdHlsZWRDb21wb25lbnRJZDtcblxuICAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCB0YXJnZXQgdXAgc2luY2Ugd2UgZm9sZGVkIHRoZSBzdHlsZXNcbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnRhcmdldCA9IGlzVGFyZ2V0U3R5bGVkQ29tcCA/IHRhcmdldC50YXJnZXQgOiB0YXJnZXQ7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiB3aXRoQ29tcG9uZW50KHRhZykge1xuICAgIHZhciBwcmV2aW91c0NvbXBvbmVudElkID0gb3B0aW9ucy5jb21wb25lbnRJZCxcbiAgICAgICAgb3B0aW9uc1RvQ29weSA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFsnY29tcG9uZW50SWQnXSk7XG5cblxuICAgIHZhciBuZXdDb21wb25lbnRJZCA9IHByZXZpb3VzQ29tcG9uZW50SWQgJiYgcHJldmlvdXNDb21wb25lbnRJZCArICctJyArIChpc1RhZyh0YWcpID8gdGFnIDogZXNjYXBlKGdldENvbXBvbmVudE5hbWUodGFnKSkpO1xuXG4gICAgdmFyIG5ld09wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9uc1RvQ29weSwge1xuICAgICAgYXR0cnM6IGZpbmFsQXR0cnMsXG4gICAgICBjb21wb25lbnRJZDogbmV3Q29tcG9uZW50SWQsXG4gICAgICBQYXJlbnRDb21wb25lbnQ6IFBhcmVudENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNyZWF0ZVN0eWxlZENvbXBvbmVudCh0YWcsIG5ld09wdGlvbnMsIHJ1bGVzKTtcbiAgfTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcmFwcGVkU3R5bGVkQ29tcG9uZW50LCAnZGVmYXVsdFByb3BzJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2ZvbGRlZERlZmF1bHRQcm9wcztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0JCQxKG9iaikge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzID0gaXNUYXJnZXRTdHlsZWRDb21wID8gbWVyZ2UodGFyZ2V0LmRlZmF1bHRQcm9wcywgb2JqKSA6IG9iajtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIFdyYXBwZWRTdHlsZWRDb21wb25lbnQud2FyblRvb01hbnlDbGFzc2VzID0gY3JlYXRlV2FyblRvb01hbnlDbGFzc2VzKGRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJy4nICsgV3JhcHBlZFN0eWxlZENvbXBvbmVudC5zdHlsZWRDb21wb25lbnRJZDtcbiAgfTtcblxuICBpZiAoaXNDbGFzcykge1xuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdyYXBwZWRTdHlsZWRDb21wb25lbnQsIHRhcmdldCwge1xuICAgICAgLy8gYWxsIFNDLXNwZWNpZmljIHRoaW5ncyBzaG91bGQgbm90IGJlIGhvaXN0ZWRcbiAgICAgIGF0dHJzOiB0cnVlLFxuICAgICAgY29tcG9uZW50U3R5bGU6IHRydWUsXG4gICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgIGZvbGRlZENvbXBvbmVudElkczogdHJ1ZSxcbiAgICAgIHN0eWxlZENvbXBvbmVudElkOiB0cnVlLFxuICAgICAgdGFyZ2V0OiB0cnVlLFxuICAgICAgd2l0aENvbXBvbmVudDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIFdyYXBwZWRTdHlsZWRDb21wb25lbnQ7XG59XG5cbi8vIFxuLy8gVGhhbmtzIHRvIFJlYWN0RE9NRmFjdG9yaWVzIGZvciB0aGlzIGhhbmR5IGxpc3QhXG5cbnZhciBkb21FbGVtZW50cyA9IFsnYScsICdhYmJyJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmFzZScsICdiZGknLCAnYmRvJywgJ2JpZycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJywgJ2NpdGUnLCAnY29kZScsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGF0YScsICdkYXRhbGlzdCcsICdkZCcsICdkZWwnLCAnZGV0YWlscycsICdkZm4nLCAnZGlhbG9nJywgJ2RpdicsICdkbCcsICdkdCcsICdlbScsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaW5zJywgJ2tiZCcsICdrZXlnZW4nLCAnbGFiZWwnLCAnbGVnZW5kJywgJ2xpJywgJ2xpbmsnLCAnbWFpbicsICdtYXAnLCAnbWFyaycsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICdtZXRlcicsICduYXYnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdvdXRwdXQnLCAncCcsICdwYXJhbScsICdwaWN0dXJlJywgJ3ByZScsICdwcm9ncmVzcycsICdxJywgJ3JwJywgJ3J0JywgJ3J1YnknLCAncycsICdzYW1wJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzbWFsbCcsICdzb3VyY2UnLCAnc3BhbicsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJyxcblxuLy8gU1ZHXG4nY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXJrZXInLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxuLy8gXG5cbnZhciBzdHlsZWQgPSBmdW5jdGlvbiBzdHlsZWQodGFnKSB7XG4gIHJldHVybiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjcmVhdGVTdHlsZWRDb21wb25lbnQsIHRhZyk7XG59O1xuXG4vLyBTaG9ydGhhbmRzIGZvciBhbGwgdmFsaWQgSFRNTCBFbGVtZW50c1xuZG9tRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZG9tRWxlbWVudCkge1xuICBzdHlsZWRbZG9tRWxlbWVudF0gPSBzdHlsZWQoZG9tRWxlbWVudCk7XG59KTtcblxuLy8gXG5cbnZhciBHbG9iYWxTdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2xvYmFsU3R5bGUocnVsZXMsIGNvbXBvbmVudElkKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xvYmFsU3R5bGUpO1xuXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICAgIHRoaXMuY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcbiAgICB0aGlzLmlzU3RhdGljID0gaXNTdGF0aWNSdWxlcyhydWxlcywgRU1QVFlfQVJSQVkpO1xuXG4gICAgaWYgKCFTdHlsZVNoZWV0Lm1hc3Rlci5oYXNJZChjb21wb25lbnRJZCkpIHtcbiAgICAgIFN0eWxlU2hlZXQubWFzdGVyLmRlZmVycmVkSW5qZWN0KGNvbXBvbmVudElkLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgR2xvYmFsU3R5bGUucHJvdG90eXBlLmNyZWF0ZVN0eWxlcyA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIGZsYXRDU1MgPSBmbGF0dGVuKHRoaXMucnVsZXMsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICAgIHZhciBjc3MgPSBzdHJpbmdpZnlSdWxlcyhmbGF0Q1NTLCAnJyk7XG5cbiAgICBzdHlsZVNoZWV0LmluamVjdCh0aGlzLmNvbXBvbmVudElkLCBjc3MpO1xuICB9O1xuXG4gIEdsb2JhbFN0eWxlLnByb3RvdHlwZS5yZW1vdmVTdHlsZXMgPSBmdW5jdGlvbiByZW1vdmVTdHlsZXMoc3R5bGVTaGVldCkge1xuICAgIHZhciBjb21wb25lbnRJZCA9IHRoaXMuY29tcG9uZW50SWQ7XG5cbiAgICBpZiAoc3R5bGVTaGVldC5oYXNJZChjb21wb25lbnRJZCkpIHtcbiAgICAgIHN0eWxlU2hlZXQucmVtb3ZlKGNvbXBvbmVudElkKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVE9ETzogb3ZlcndyaXRlIGluLXBsYWNlIGluc3RlYWQgb2YgcmVtb3ZlK2NyZWF0ZT9cblxuXG4gIEdsb2JhbFN0eWxlLnByb3RvdHlwZS5yZW5kZXJTdHlsZXMgPSBmdW5jdGlvbiByZW5kZXJTdHlsZXMoZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkge1xuICAgIHRoaXMucmVtb3ZlU3R5bGVzKHN0eWxlU2hlZXQpO1xuICAgIHRoaXMuY3JlYXRlU3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxTdHlsZTtcbn0oKTtcblxuLy8gXG5cbi8vIHBsYWNlIG91ciBjYWNoZSBpbnRvIHNoYXJlZCBjb250ZXh0IHNvIGl0J2xsIHBlcnNpc3QgYmV0d2VlbiBITVJzXG5pZiAoSVNfQlJPV1NFUikge1xuICB3aW5kb3cuc2NDR1NITVJDYWNoZSA9IHt9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVHbG9iYWxTdHlsZShzdHJpbmdzKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcnVsZXMgPSBjc3MuYXBwbHkodW5kZWZpbmVkLCBbc3RyaW5nc10uY29uY2F0KGludGVycG9sYXRpb25zKSk7XG4gIHZhciBpZCA9ICdzYy1nbG9iYWwtJyArIG11cm11cmhhc2goSlNPTi5zdHJpbmdpZnkocnVsZXMpKTtcbiAgdmFyIHN0eWxlID0gbmV3IEdsb2JhbFN0eWxlKHJ1bGVzLCBpZCk7XG5cbiAgdmFyIEdsb2JhbFN0eWxlQ29tcG9uZW50ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBpbmhlcml0cyhHbG9iYWxTdHlsZUNvbXBvbmVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBHbG9iYWxTdHlsZUNvbXBvbmVudChwcm9wcykge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xvYmFsU3R5bGVDb21wb25lbnQpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICB2YXIgX3RoaXMkY29uc3RydWN0b3IgPSBfdGhpcy5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBnbG9iYWxTdHlsZSA9IF90aGlzJGNvbnN0cnVjdG9yLmdsb2JhbFN0eWxlLFxuICAgICAgICAgIHN0eWxlZENvbXBvbmVudElkID0gX3RoaXMkY29uc3RydWN0b3Iuc3R5bGVkQ29tcG9uZW50SWQ7XG5cblxuICAgICAgaWYgKElTX0JST1dTRVIpIHtcbiAgICAgICAgd2luZG93LnNjQ0dTSE1SQ2FjaGVbc3R5bGVkQ29tcG9uZW50SWRdID0gKHdpbmRvdy5zY0NHU0hNUkNhY2hlW3N0eWxlZENvbXBvbmVudElkXSB8fCAwKSArIDE7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhpcyBmaXhlcyBITVIgY29tcGF0aWJpbGl0eS4gRG9uJ3QgYXNrIG1lIHdoeSwgYnV0IHRoaXMgY29tYmluYXRpb24gb2ZcbiAgICAgICAqIGNhY2hpbmcgdGhlIGNsb3N1cmUgdmFyaWFibGVzIHZpYSBzdGF0aWNzIGFuZCB0aGVuIHBlcnNpc3RpbmcgdGhlIHN0YXRpY3MgaW5cbiAgICAgICAqIHN0YXRlIHdvcmtzIGFjcm9zcyBITVIgd2hlcmUgbm8gb3RoZXIgY29tYmluYXRpb24gZGlkLiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgICovXG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgZ2xvYmFsU3R5bGU6IGdsb2JhbFN0eWxlLFxuICAgICAgICBzdHlsZWRDb21wb25lbnRJZDogc3R5bGVkQ29tcG9uZW50SWRcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgR2xvYmFsU3R5bGVDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAod2luZG93LnNjQ0dTSE1SQ2FjaGVbdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZF0pIHtcbiAgICAgICAgd2luZG93LnNjQ0dTSE1SQ2FjaGVbdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZF0gLT0gMTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogRGVwZW5kaW5nIG9uIHRoZSBvcmRlciBcInJlbmRlclwiIGlzIGNhbGxlZCB0aGlzIGNhbiBjYXVzZSB0aGUgc3R5bGVzIHRvIGJlIGxvc3RcbiAgICAgICAqIHVudGlsIHRoZSBuZXh0IHJlbmRlciBwYXNzIG9mIHRoZSByZW1haW5pbmcgaW5zdGFuY2UsIHdoaWNoIG1heVxuICAgICAgICogbm90IGJlIGltbWVkaWF0ZS5cbiAgICAgICAqL1xuICAgICAgaWYgKHdpbmRvdy5zY0NHU0hNUkNhY2hlW3RoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWRdID09PSAwKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuZ2xvYmFsU3R5bGUucmVtb3ZlU3R5bGVzKHRoaXMuc3R5bGVTaGVldCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEdsb2JhbFN0eWxlQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgUmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCAnICsgdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZCArICcgd2FzIGdpdmVuIGNoaWxkIEpTWC4gY3JlYXRlR2xvYmFsU3R5bGUgZG9lcyBub3QgcmVuZGVyIGNoaWxkcmVuLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgU3R5bGVTaGVldENvbnN1bWVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBmdW5jdGlvbiAoc3R5bGVTaGVldCkge1xuICAgICAgICAgIF90aGlzMi5zdHlsZVNoZWV0ID0gc3R5bGVTaGVldCB8fCBTdHlsZVNoZWV0Lm1hc3RlcjtcblxuICAgICAgICAgIHZhciBnbG9iYWxTdHlsZSA9IF90aGlzMi5zdGF0ZS5nbG9iYWxTdHlsZTtcblxuXG4gICAgICAgICAgaWYgKGdsb2JhbFN0eWxlLmlzU3RhdGljKSB7XG4gICAgICAgICAgICBnbG9iYWxTdHlsZS5yZW5kZXJTdHlsZXMoU1RBVElDX0VYRUNVVElPTl9DT05URVhULCBfdGhpczIuc3R5bGVTaGVldCk7XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0UHJvcHMgPSBfdGhpczIuY29uc3RydWN0b3IuZGVmYXVsdFByb3BzO1xuXG5cbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IF9leHRlbmRzKHt9LCBfdGhpczIucHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGVtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQudGhlbWUgPSBkZXRlcm1pbmVUaGVtZShfdGhpczIucHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGdsb2JhbFN0eWxlLnJlbmRlclN0eWxlcyhjb250ZXh0LCBfdGhpczIuc3R5bGVTaGVldCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiBHbG9iYWxTdHlsZUNvbXBvbmVudDtcbiAgfShSZWFjdC5Db21wb25lbnQpO1xuXG4gIEdsb2JhbFN0eWxlQ29tcG9uZW50Lmdsb2JhbFN0eWxlID0gc3R5bGU7XG4gIEdsb2JhbFN0eWxlQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gaWQ7XG5cblxuICByZXR1cm4gR2xvYmFsU3R5bGVDb21wb25lbnQ7XG59XG5cbi8vIFxuXG52YXIgcmVwbGFjZVdoaXRlc3BhY2UgPSBmdW5jdGlvbiByZXBsYWNlV2hpdGVzcGFjZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHN8XFxcXG4vZywgJycpO1xufTtcblxuZnVuY3Rpb24ga2V5ZnJhbWVzKHN0cmluZ3MpIHtcbiAgLyogV2FybmluZyBpZiB5b3UndmUgdXNlZCBrZXlmcmFtZXMgb24gUmVhY3QgTmF0aXZlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oJ2BrZXlmcmFtZXNgIGNhbm5vdCBiZSB1c2VkIG9uIFJlYWN0TmF0aXZlLCBvbmx5IG9uIHRoZSB3ZWIuIFRvIGRvIGFuaW1hdGlvbiBpbiBSZWFjdE5hdGl2ZSBwbGVhc2UgdXNlIEFuaW1hdGVkLicpO1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVycG9sYXRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBydWxlcyA9IGNzcy5hcHBseSh1bmRlZmluZWQsIFtzdHJpbmdzXS5jb25jYXQoaW50ZXJwb2xhdGlvbnMpKTtcblxuICB2YXIgbmFtZSA9IGdlbmVyYXRlQWxwaGFiZXRpY05hbWUobXVybXVyaGFzaChyZXBsYWNlV2hpdGVzcGFjZShKU09OLnN0cmluZ2lmeShydWxlcykpKSk7XG5cbiAgcmV0dXJuIG5ldyBLZXlmcmFtZXMobmFtZSwgc3RyaW5naWZ5UnVsZXMocnVsZXMsIG5hbWUsICdAa2V5ZnJhbWVzJykpO1xufVxuXG4vLyBcblxudmFyIHdpdGhUaGVtZSA9IChmdW5jdGlvbiAoQ29tcG9uZW50JCQxKSB7XG4gIHZhciBXaXRoVGhlbWUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUaGVtZUNvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHZhciBkZWZhdWx0UHJvcHMgPSBDb21wb25lbnQkJDEuZGVmYXVsdFByb3BzO1xuXG4gICAgICAgIHZhciB0aGVtZVByb3AgPSBkZXRlcm1pbmVUaGVtZShwcm9wcywgdGhlbWUsIGRlZmF1bHRQcm9wcyk7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhlbWVQcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignW3dpdGhUaGVtZV0gWW91IGFyZSBub3QgdXNpbmcgYSBUaGVtZVByb3ZpZGVyIG5vciBwYXNzaW5nIGEgdGhlbWUgcHJvcCBvciBhIHRoZW1lIGluIGRlZmF1bHRQcm9wcyBpbiBjb21wb25lbnQgY2xhc3MgXCInICsgZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQkJDEpICsgJ1wiJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQkJDEsIF9leHRlbmRzKHt9LCBwcm9wcywgeyB0aGVtZTogdGhlbWVQcm9wLCByZWY6IHJlZiB9KSk7XG4gICAgICB9XG4gICAgKTtcbiAgfSk7XG5cbiAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFRoZW1lLCBDb21wb25lbnQkJDEpO1xuXG4gIFdpdGhUaGVtZS5kaXNwbGF5TmFtZSA9ICdXaXRoVGhlbWUoJyArIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50JCQxKSArICcpJztcblxuICByZXR1cm4gV2l0aFRoZW1lO1xufSk7XG5cbi8vIFxuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9fRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9IQVVOVEVEX0JZX1NQT09LWV9HSE9TVFMgPSB7XG4gIFN0eWxlU2hlZXQ6IFN0eWxlU2hlZXRcbn07XG5cbi8vIFxuXG4vKiBXYXJuaW5nIGlmIHlvdSd2ZSBpbXBvcnRlZCB0aGlzIGZpbGUgb24gUmVhY3QgTmF0aXZlICovXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHlvdSd2ZSBpbXBvcnRlZCAnc3R5bGVkLWNvbXBvbmVudHMnIG9uIFJlYWN0IE5hdGl2ZS5cXG5cIiArIFwiUGVyaGFwcyB5b3UncmUgbG9va2luZyB0byBpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzL25hdGl2ZSc/XFxuXCIgKyAnUmVhZCBtb3JlIGFib3V0IHRoaXMgYXQgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYmFzaWNzI3JlYWN0LW5hdGl2ZScpO1xufVxuXG4vKiBXYXJuaW5nIGlmIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiBzdHlsZWQtY29tcG9uZW50cyAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yLnVzZXJBZ2VudCA9PT0gJ3N0cmluZycgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdOb2RlLmpzJykgPT09IC0xICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignanNkb20nKSA9PT0gLTEpIHtcbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddID0gd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddIHx8IDA7XG5cbiAgaWYgKHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSA9PT0gMSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2YgJ3N0eWxlZC1jb21wb25lbnRzJyBpbml0aWFsaXplZCBpbiB0aGlzIGFwcGxpY2F0aW9uLiBcIiArICdUaGlzIG1heSBjYXVzZSBkeW5hbWljIHN0eWxlcyBub3QgcmVuZGVyaW5nIHByb3Blcmx5LCBlcnJvcnMgaGFwcGVuaW5nIGR1cmluZyByZWh5ZHJhdGlvbiBwcm9jZXNzICcgKyAnYW5kIG1ha2VzIHlvdXIgYXBwbGljYXRpb24gYmlnZ2VyIHdpdGhvdXQgYSBnb29kIHJlYXNvbi5cXG5cXG4nICsgJ1NlZSBodHRwczovL3MtYy5zaC8yQkFYemVkIGZvciBtb3JlIGluZm8uJyk7XG4gIH1cblxuICB3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gKz0gMTtcbn1cblxuLy9cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVkO1xuZXhwb3J0IHsgY3JlYXRlR2xvYmFsU3R5bGUsIGNzcywgaXNTdHlsZWRDb21wb25lbnQsIGtleWZyYW1lcywgU2VydmVyU3R5bGVTaGVldCwgU3R5bGVTaGVldENvbnN1bWVyLCBTdHlsZVNoZWV0Q29udGV4dCwgU3R5bGVTaGVldE1hbmFnZXIsIFRoZW1lQ29uc3VtZXIsIFRoZW1lQ29udGV4dCwgVGhlbWVQcm92aWRlciwgd2l0aFRoZW1lLCBfX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfSEFVTlRFRF9CWV9TUE9PS1lfR0hPU1RTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcy5tYXBcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsW1wiZmFzdC1jb3B5XCJdID0gZmFjdG9yeSgpKTtcbn0pKHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciB0b1N0cmluZ0Z1bmN0aW9uID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlLCBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLCBnZXRQcm90b3R5cGVPZiQxID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBfYSA9IE9iamVjdC5wcm90b3R5cGUsIGhhc093blByb3BlcnR5ID0gX2EuaGFzT3duUHJvcGVydHksIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gX2EucHJvcGVydHlJc0VudW1lcmFibGU7XG4gICAgdmFyIFNZTUJPTF9QUk9QRVJUSUVTID0gdHlwZW9mIGdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJztcbiAgICB2YXIgV0VBS19NQVAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlQ2FjaGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGdldCBhIG5ldyBjYWNoZSBvYmplY3QgdG8gcHJldmVudCBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IGNhY2hlIG9iamVjdFxuICAgICAqL1xuICAgIHZhciBjcmVhdGVDYWNoZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChXRUFLX01BUCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBXZWFrTWFwKCk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIENhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gQ2FjaGUoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2FjaGUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISF+dGhpcy5fa2V5cy5pbmRleE9mKGtleSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgQ2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzW3RoaXMuX2tleXMuaW5kZXhPZihrZXkpXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBDYWNoZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIENhY2hlO1xuICAgICAgICB9KCkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IENhY2hlKCk7IH07XG4gICAgfSkoKTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gZ2V0Q2xlYW5DbG9uZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogZ2V0IGFuIGVtcHR5IHZlcnNpb24gb2YgdGhlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHByb3RvdHlwZSBpdCBoYXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgdGhlIG9iamVjdCB0byBidWlsZCBhIGNsZWFuIGNsb25lIGZyb21cbiAgICAgKiBAcGFyYW0gcmVhbG0gdGhlIHJlYWxtIHRoZSBvYmplY3QgcmVzaWRlcyBpblxuICAgICAqIEByZXR1cm5zIHRoZSBlbXB0eSBjbG9uZWQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGdldENsZWFuQ2xvbmUgPSBmdW5jdGlvbiAob2JqZWN0LCByZWFsbSkge1xuICAgICAgICB2YXIgcHJvdG90eXBlID0gb2JqZWN0Ll9fcHJvdG9fXyB8fCBnZXRQcm90b3R5cGVPZiQxKG9iamVjdCk7XG4gICAgICAgIGlmICghcHJvdG90eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSByZWFsbS5PYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm90b3R5cGUgPT09IHJlYWxtLk9iamVjdC5wcm90b3R5cGUgPyB7fSA6IGNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh+dG9TdHJpbmdGdW5jdGlvbi5jYWxsKENvbnN0cnVjdG9yKS5pbmRleE9mKCdbbmF0aXZlIGNvZGVdJykpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlKHByb3RvdHlwZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gZ2V0T2JqZWN0Q2xvbmVMb29zZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogZ2V0IGEgY29weSBvZiB0aGUgb2JqZWN0IGJhc2VkIG9uIGxvb3NlIHJ1bGVzLCBtZWFuaW5nIGFsbCBlbnVtZXJhYmxlIGtleXNcbiAgICAgKiBhbmQgc3ltYm9scyBhcmUgY29waWVkLCBidXQgcHJvcGVydHkgZGVzY3JpcHRvcnMgYXJlIG5vdCBjb25zaWRlcmVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0IHRoZSBvYmplY3QgdG8gY2xvbmVcbiAgICAgKiBAcGFyYW0gcmVhbG0gdGhlIHJlYWxtIHRoZSBvYmplY3QgcmVzaWRlcyBpblxuICAgICAqIEBwYXJhbSBoYW5kbGVDb3B5IHRoZSBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgY29weWluZyB0aGUgb2JqZWN0XG4gICAgICogQHJldHVybnMgdGhlIGNvcGllZCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgZ2V0T2JqZWN0Q2xvbmVMb29zZSA9IGZ1bmN0aW9uIChvYmplY3QsIHJlYWxtLCBoYW5kbGVDb3B5LCBjYWNoZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSBnZXRDbGVhbkNsb25lKG9iamVjdCwgcmVhbG0pO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBjYWNoZS5zZXQob2JqZWN0LCBjbG9uZSk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgIGNsb25lW2tleV0gPSBoYW5kbGVDb3B5KG9iamVjdFtrZXldLCBjYWNoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFNZTUJPTF9QUk9QRVJUSUVTKSB7XG4gICAgICAgICAgICB2YXIgc3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGhfMSA9IHN5bWJvbHMubGVuZ3RoLCBzeW1ib2wgPSB2b2lkIDA7IGluZGV4IDwgbGVuZ3RoXzE7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBzeW1ib2xzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVbc3ltYm9sXSA9IGhhbmRsZUNvcHkob2JqZWN0W3N5bWJvbF0sIGNhY2hlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uIGdldE9iamVjdENsb25lU3RyaWN0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBnZXQgYSBjb3B5IG9mIHRoZSBvYmplY3QgYmFzZWQgb24gc3RyaWN0IHJ1bGVzLCBtZWFuaW5nIGFsbCBrZXlzIGFuZCBzeW1ib2xzXG4gICAgICogYXJlIGNvcGllZCBiYXNlZCBvbiB0aGUgb3JpZ2luYWwgcHJvcGVydHkgZGVzY3JpcHRvcnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgdGhlIG9iamVjdCB0byBjbG9uZVxuICAgICAqIEBwYXJhbSByZWFsbSB0aGUgcmVhbG0gdGhlIG9iamVjdCByZXNpZGVzIGluXG4gICAgICogQHBhcmFtIGhhbmRsZUNvcHkgdGhlIGZ1bmN0aW9uIHRoYXQgaGFuZGxlcyBjb3B5aW5nIHRoZSBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB0aGUgY29waWVkIG9iamVjdFxuICAgICAqL1xuICAgIHZhciBnZXRPYmplY3RDbG9uZVN0cmljdCA9IGZ1bmN0aW9uIChvYmplY3QsIHJlYWxtLCBoYW5kbGVDb3B5LCBjYWNoZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSBnZXRDbGVhbkNsb25lKG9iamVjdCwgcmVhbG0pO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBjYWNoZS5zZXQob2JqZWN0LCBjbG9uZSk7XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gU1lNQk9MX1BST1BFUlRJRVNcbiAgICAgICAgICAgID8gZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSlcbiAgICAgICAgICAgIDogZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aF8yID0gcHJvcGVydGllcy5sZW5ndGgsIHByb3BlcnR5ID0gdm9pZCAwLCBkZXNjcmlwdG9yID0gdm9pZCAwOyBpbmRleCA8IGxlbmd0aF8yOyArK2luZGV4KSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSAnY2FsbGVlJyAmJiBwcm9wZXJ0eSAhPT0gJ2NhbGxlcicpIHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgY2xvbmUgdGhlIHZhbHVlIGlmIGFjdHVhbGx5IGEgdmFsdWUsIG5vdCBhIGdldHRlciAvIHNldHRlci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXNjcmlwdG9yLmdldCAmJiAhZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBoYW5kbGVDb3B5KG9iamVjdFtwcm9wZXJ0eV0sIGNhY2hlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkoY2xvbmUsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRlZSBhYm92ZSBjYW4gZmFpbCBvbiBub2RlIGluIGVkZ2UgY2FzZXMsIHNvIGZhbGwgYmFjayB0byB0aGUgbG9vc2UgYXNzaWdubWVudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lW3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluIGV4dHJhIGVkZ2UgY2FzZXMgd2hlcmUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgY2Fubm90IGJlIHJldHJpdmVkLCBmYWxsIGJhY2sgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGxvb3NlIGFzc2lnbm1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGNsb25lW3Byb3BlcnR5XSA9IGhhbmRsZUNvcHkob2JqZWN0W3Byb3BlcnR5XSwgY2FjaGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gZ2V0UmVnRXhwRmxhZ3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGdldCB0aGUgZmxhZ3MgdG8gYXBwbHkgdG8gdGhlIGNvcGllZCByZWdleHBcbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWdFeHAgdGhlIHJlZ2V4cCB0byBnZXQgdGhlIGZsYWdzIG9mXG4gICAgICogQHJldHVybnMgdGhlIGZsYWdzIGZvciB0aGUgcmVnZXhwXG4gICAgICovXG4gICAgdmFyIGdldFJlZ0V4cEZsYWdzID0gZnVuY3Rpb24gKHJlZ0V4cCkge1xuICAgICAgICB2YXIgZmxhZ3MgPSAnJztcbiAgICAgICAgaWYgKHJlZ0V4cC5nbG9iYWwpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnRXhwLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICdpJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnRXhwLm11bHRpbGluZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ20nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdFeHAudW5pY29kZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ3UnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdFeHAuc3RpY2t5KSB7XG4gICAgICAgICAgICBmbGFncyArPSAneSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZsYWdzO1xuICAgIH07XG5cbiAgICAvLyB1dGlsc1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIEdMT0JBTF9USElTID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QsIHJldHVybmluZyBcInRoaXNcIi4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9KSgpO1xuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvbiBjb3B5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBjb3B5IGFuIHZhbHVlIGRlZXBseSBhcyBtdWNoIGFzIHBvc3NpYmxlXG4gICAgICpcbiAgICAgKiBJZiBgc3RyaWN0YCBpcyBhcHBsaWVkLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIChpbmNsdWRpbmcgbm9uLWVudW1lcmFibGUgb25lcylcbiAgICAgKiBhcmUgY29waWVkIHdpdGggdGhlaXIgb3JpZ2luYWwgcHJvcGVydHkgZGVzY3JpcHRvcnMgb24gYm90aCBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBUaGUgdmFsdWUgaXMgY29tcGFyZWQgdG8gdGhlIGdsb2JhbCBjb25zdHJ1Y3RvcnMgaW4gdGhlIGByZWFsbWAgcHJvdmlkZWQsXG4gICAgICogYW5kIHRoZSBuYXRpdmUgY29uc3RydWN0b3IgaXMgYWx3YXlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgZXh0ZW5zaW9ucyBvZiBuYXRpdmVcbiAgICAgKiBvYmplY3RzIChhbGxvd3MgaW4gRVMyMDE1KykgYXJlIG1haW50YWluZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGNvcHlcbiAgICAgKiBAcGFyYW0gW29wdGlvbnNdIHRoZSBvcHRpb25zIGZvciBjb3B5aW5nIHdpdGhcbiAgICAgKiBAcGFyYW0gW29wdGlvbnMuaXNTdHJpY3RdIHNob3VsZCB0aGUgY29weSBiZSBzdHJpY3RcbiAgICAgKiBAcGFyYW0gW29wdGlvbnMucmVhbG1dIHRoZSByZWFsbSAodGhpcykgdmFsdWUgdGhlIHZhbHVlIGlzIGNvcGllZCBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIGNvcGllZCB2YWx1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHkodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbWFudWFsbHkgY29hbGVzY2VkIGluc3RlYWQgb2YgZGVmYXVsdCBwYXJhbWV0ZXJzIGZvciBwZXJmb3JtYW5jZVxuICAgICAgICB2YXIgaXNTdHJpY3QgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuaXNTdHJpY3QpO1xuICAgICAgICB2YXIgcmVhbG0gPSAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWxtKSB8fCBHTE9CQUxfVEhJUztcbiAgICAgICAgdmFyIGdldE9iamVjdENsb25lID0gaXNTdHJpY3QgPyBnZXRPYmplY3RDbG9uZVN0cmljdCA6IGdldE9iamVjdENsb25lTG9vc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZnVuY3Rpb24gaGFuZGxlQ29weVxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogY29weSB0aGUgdmFsdWUgcmVjdXJzaXZlbHkgYmFzZWQgb24gaXRzIHR5cGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBjb3B5XG4gICAgICAgICAqIEByZXR1cm5zIHRoZSBjb3BpZWQgdmFsdWVcbiAgICAgICAgICovXG4gICAgICAgIHZhciBoYW5kbGVDb3B5ID0gZnVuY3Rpb24gKHZhbHVlLCBjYWNoZSkge1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhY2hlLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSB2YWx1ZS5fX3Byb3RvX18gfHwgZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgICAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gcHJvdG90eXBlICYmIHByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIC8vIHBsYWluIG9iamVjdHNcbiAgICAgICAgICAgIGlmICghQ29uc3RydWN0b3IgfHwgQ29uc3RydWN0b3IgPT09IHJlYWxtLk9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRPYmplY3RDbG9uZSh2YWx1ZSwgcmVhbG0sIGhhbmRsZUNvcHksIGNhY2hlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjbG9uZTtcbiAgICAgICAgICAgIC8vIGFycmF5c1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgc3RyaWN0LCBpbmNsdWRlIG5vbi1zdGFuZGFyZCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRPYmplY3RDbG9uZVN0cmljdCh2YWx1ZSwgcmVhbG0sIGhhbmRsZUNvcHksIGNhY2hlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aF8xID0gdmFsdWUubGVuZ3RoOyBpbmRleCA8IGxlbmd0aF8xOyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lW2luZGV4XSA9IGhhbmRsZUNvcHkodmFsdWVbaW5kZXhdLCBjYWNoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRhdGVzXG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiByZWFsbS5EYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih2YWx1ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVnZXhwc1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uUmVnRXhwKSB7XG4gICAgICAgICAgICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3IodmFsdWUuc291cmNlLCB2YWx1ZS5mbGFncyB8fCBnZXRSZWdFeHBGbGFncyh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGNsb25lLmxhc3RJbmRleCA9IHZhbHVlLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtYXBzXG4gICAgICAgICAgICBpZiAocmVhbG0uTWFwICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uTWFwKSB7XG4gICAgICAgICAgICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnNldChrZXksIGhhbmRsZUNvcHkodmFsdWUsIGNhY2hlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2V0c1xuICAgICAgICAgICAgaWYgKHJlYWxtLlNldCAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLlNldCkge1xuICAgICAgICAgICAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KHZhbHVlLCBjbG9uZSk7XG4gICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuYWRkKGhhbmRsZUNvcHkodmFsdWUsIGNhY2hlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYmxvYnNcbiAgICAgICAgICAgIGlmIChyZWFsbS5CbG9iICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uQmxvYikge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zbGljZSgwLCB2YWx1ZS5zaXplLCB2YWx1ZS50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJ1ZmZlcnMgKG5vZGUtb25seSlcbiAgICAgICAgICAgIGlmIChyZWFsbS5CdWZmZXIgJiYgcmVhbG0uQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNsb25lID0gcmVhbG0uQnVmZmVyLmFsbG9jVW5zYWZlXG4gICAgICAgICAgICAgICAgICAgID8gcmVhbG0uQnVmZmVyLmFsbG9jVW5zYWZlKHZhbHVlLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgQ29uc3RydWN0b3IodmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5jb3B5KGNsb25lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhcnJheWJ1ZmZlcnMgLyBkYXRhdmlld3NcbiAgICAgICAgICAgIGlmIChyZWFsbS5BcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIC8vIGRhdGF2aWV3c1xuICAgICAgICAgICAgICAgIGlmIChyZWFsbS5BcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKHZhbHVlLmJ1ZmZlci5zbGljZSgwKSk7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldCh2YWx1ZSwgY2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGFycmF5YnVmZmVyc1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLkFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lID0gdmFsdWUuc2xpY2UoMCk7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldCh2YWx1ZSwgY2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgdGhlIHZhbHVlIGNhbm5vdCAvIHNob3VsZCBub3QgYmUgY2xvbmVkLCBkb24ndFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gcHJvbWlzZS1saWtlXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgIC8vIGVycm9yc1xuICAgICAgICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgRXJyb3IgfHxcbiAgICAgICAgICAgICAgICAvLyB3ZWFrbWFwc1xuICAgICAgICAgICAgICAgIChyZWFsbS5XZWFrTWFwICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uV2Vha01hcCkgfHxcbiAgICAgICAgICAgICAgICAvLyB3ZWFrc2V0c1xuICAgICAgICAgICAgICAgIChyZWFsbS5XZWFrU2V0ICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uV2Vha1NldCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhc3N1bWUgYW55dGhpbmcgbGVmdCBpcyBhIGN1c3RvbSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgcmV0dXJuIGdldE9iamVjdENsb25lKHZhbHVlLCByZWFsbSwgaGFuZGxlQ29weSwgY2FjaGUpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaGFuZGxlQ29weSh2YWx1ZSwgY3JlYXRlQ2FjaGUoKSk7XG4gICAgfVxuICAgIC8vIEFkZGluZyByZWZlcmVuY2UgdG8gYWxsb3cgdXNhZ2UgaW4gQ29tbW9uSlMgbGlicmFyaWVzIGNvbXBpbGVkIHVzaW5nIFRTQywgd2hpY2hcbiAgICAvLyBleHBlY3RzIHRoZXJlIHRvIGJlIGEgZGVmYXVsdCBwcm9wZXJ0eSBvbiB0aGUgZXhwb3J0ZWQgdmFsdWUuIFNlZVxuICAgIC8vIFsjMzddKGh0dHBzOi8vZ2l0aHViLmNvbS9wbGFudHRoZWlkZWEvZmFzdC1jb3B5L2lzc3Vlcy8zNykgZm9yIGRldGFpbHMuXG4gICAgY29weS5kZWZhdWx0ID0gY29weTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gc3RyaWN0Q29weVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogY29weSB0aGUgdmFsdWUgd2l0aCBgc3RyaWN0YCBvcHRpb24gcHJlLWFwcGxpZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gY29weVxuICAgICAqIEBwYXJhbSBbb3B0aW9uc10gdGhlIG9wdGlvbnMgZm9yIGNvcHlpbmcgd2l0aFxuICAgICAqIEBwYXJhbSBbb3B0aW9ucy5yZWFsbV0gdGhlIHJlYWxtICh0aGlzKSB2YWx1ZSB0aGUgdmFsdWUgaXMgY29waWVkIGZyb21cbiAgICAgKiBAcmV0dXJucyB0aGUgY29waWVkIHZhbHVlXG4gICAgICovXG4gICAgY29weS5zdHJpY3QgPSBmdW5jdGlvbiBzdHJpY3RDb3B5KHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBjb3B5KHZhbHVlLCB7XG4gICAgICAgICAgICBpc1N0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIHJlYWxtOiBvcHRpb25zID8gb3B0aW9ucy5yZWFsbSA6IHZvaWQgMCxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBjb3B5O1xuXG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYXN0LWNvcHkuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB3aGl0ZXNwYWNlXG5cbnZhciBmcm9tQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciByZSA9IC9cXHMvXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhIHdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuZnVuY3Rpb24gd2hpdGVzcGFjZShjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIHJlLnRlc3QoXG4gICAgdHlwZW9mIGNoYXJhY3RlciA9PT0gJ251bWJlcicgPyBmcm9tQ29kZShjaGFyYWN0ZXIpIDogY2hhcmFjdGVyLmNoYXJBdCgwKVxuICApXG59XG4iLCIvLyBUT0RPKEJhYmVsIDgpOiBSZW1vdmUgdGhpcyBmaWxlLlxuXG52YXIgcnVudGltZSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3JlZ2VuZXJhdG9yUnVudGltZVwiKSgpO1xubW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuXG4vLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvYmxvYi9tYWluL3BhY2thZ2VzL3J1bnRpbWUvcnVudGltZS5qcyNMNzM2PVxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGV4dGVuZFxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gICAgdmFyIHRhcmdldCA9IHt9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldXG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldFxufVxuIiwidmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKFwiLi90b1Byb3BlcnR5S2V5LmpzXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHtcbiAgcmV0dXJuIChyID0gdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7XG4gICAgdmFsdWU6IHQsXG4gICAgZW51bWVyYWJsZTogITAsXG4gICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICB3cml0YWJsZTogITBcbiAgfSkgOiBlW3JdID0gdCwgZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKG4sIHQsIGUsIHIsIG8sIGEsIGMpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaSA9IG5bYV0oYyksXG4gICAgICB1ID0gaS52YWx1ZTtcbiAgfSBjYXRjaCAobikge1xuICAgIHJldHVybiB2b2lkIGUobik7XG4gIH1cbiAgaS5kb25lID8gdCh1KSA6IFByb21pc2UucmVzb2x2ZSh1KS50aGVuKHIsIG8pO1xufVxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3Iobikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ID0gdGhpcyxcbiAgICAgIGUgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyLCBvKSB7XG4gICAgICB2YXIgYSA9IG4uYXBwbHkodCwgZSk7XG4gICAgICBmdW5jdGlvbiBfbmV4dChuKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChhLCByLCBvLCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgbik7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBfdGhyb3cobikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoYSwgciwgbywgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBuKTtcbiAgICAgIH1cbiAgICAgIF9uZXh0KHZvaWQgMCk7XG4gICAgfSk7XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi90eXBlJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFR5cGVFcnJvcjtcbiIsIlxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdHJpbTtcblxuZnVuY3Rpb24gdHJpbShzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxuZXhwb3J0cy5sZWZ0ID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbn07XG5cbmV4cG9ydHMucmlnaHQgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xccyokLywgJycpO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHxcbiAgICAgIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpICE9IG9iamVjdFRhZyB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiB0eXBlb2YgbztcbiAgfSA6IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgX3R5cGVvZihvKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBoYXNNYXAgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIE1hcC5wcm90b3R5cGU7XG52YXIgbWFwU2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc01hcCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTWFwLnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgbWFwU2l6ZSA9IGhhc01hcCAmJiBtYXBTaXplRGVzY3JpcHRvciAmJiB0eXBlb2YgbWFwU2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gbWFwU2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBtYXBGb3JFYWNoID0gaGFzTWFwICYmIE1hcC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIFNldC5wcm90b3R5cGU7XG52YXIgc2V0U2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc1NldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU2V0LnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgc2V0U2l6ZSA9IGhhc1NldCAmJiBzZXRTaXplRGVzY3JpcHRvciAmJiB0eXBlb2Ygc2V0U2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gc2V0U2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBzZXRGb3JFYWNoID0gaGFzU2V0ICYmIFNldC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgV2Vha01hcC5wcm90b3R5cGU7XG52YXIgd2Vha01hcEhhcyA9IGhhc1dlYWtNYXAgPyBXZWFrTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrU2V0LnByb3RvdHlwZTtcbnZhciB3ZWFrU2V0SGFzID0gaGFzV2Vha1NldCA/IFdlYWtTZXQucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgaGFzV2Vha1JlZiA9IHR5cGVvZiBXZWFrUmVmID09PSAnZnVuY3Rpb24nICYmIFdlYWtSZWYucHJvdG90eXBlO1xudmFyIHdlYWtSZWZEZXJlZiA9IGhhc1dlYWtSZWYgPyBXZWFrUmVmLnByb3RvdHlwZS5kZXJlZiA6IG51bGw7XG52YXIgYm9vbGVhblZhbHVlT2YgPSBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mO1xudmFyIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyICRtYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2g7XG52YXIgJHNsaWNlID0gU3RyaW5nLnByb3RvdHlwZS5zbGljZTtcbnZhciAkcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciAkdG9VcHBlckNhc2UgPSBTdHJpbmcucHJvdG90eXBlLnRvVXBwZXJDYXNlO1xudmFyICR0b0xvd2VyQ2FzZSA9IFN0cmluZy5wcm90b3R5cGUudG9Mb3dlckNhc2U7XG52YXIgJHRlc3QgPSBSZWdFeHAucHJvdG90eXBlLnRlc3Q7XG52YXIgJGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgJGpvaW4gPSBBcnJheS5wcm90b3R5cGUuam9pbjtcbnZhciAkYXJyU2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgJGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBiaWdJbnRWYWx1ZU9mID0gdHlwZW9mIEJpZ0ludCA9PT0gJ2Z1bmN0aW9uJyA/IEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZiA6IG51bGw7XG52YXIgZ09QUyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgc3ltVG9TdHJpbmcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnID8gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA6IG51bGw7XG52YXIgaGFzU2hhbW1lZFN5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdvYmplY3QnO1xuLy8gaWUsIGBoYXMtdG9zdHJpbmd0YWcvc2hhbXNcbnZhciB0b1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmICh0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSBoYXNTaGFtbWVkU3ltYm9scyA/ICdvYmplY3QnIDogJ3N5bWJvbCcpXG4gICAgPyBTeW1ib2wudG9TdHJpbmdUYWdcbiAgICA6IG51bGw7XG52YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxudmFyIGdQTyA9ICh0eXBlb2YgUmVmbGVjdCA9PT0gJ2Z1bmN0aW9uJyA/IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YgOiBPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHx8IChcbiAgICBbXS5fX3Byb3RvX18gPT09IEFycmF5LnByb3RvdHlwZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG4gICAgICAgID8gZnVuY3Rpb24gKE8pIHtcbiAgICAgICAgICAgIHJldHVybiBPLl9fcHJvdG9fXzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuICAgICAgICB9XG4gICAgICAgIDogbnVsbFxuKTtcblxuZnVuY3Rpb24gYWRkTnVtZXJpY1NlcGFyYXRvcihudW0sIHN0cikge1xuICAgIGlmIChcbiAgICAgICAgbnVtID09PSBJbmZpbml0eVxuICAgICAgICB8fCBudW0gPT09IC1JbmZpbml0eVxuICAgICAgICB8fCBudW0gIT09IG51bVxuICAgICAgICB8fCAobnVtICYmIG51bSA+IC0xMDAwICYmIG51bSA8IDEwMDApXG4gICAgICAgIHx8ICR0ZXN0LmNhbGwoL2UvLCBzdHIpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHZhciBzZXBSZWdleCA9IC9bMC05XSg/PSg/OlswLTldezN9KSsoPyFbMC05XSkpL2c7XG4gICAgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBpbnQgPSBudW0gPCAwID8gLSRmbG9vcigtbnVtKSA6ICRmbG9vcihudW0pOyAvLyB0cnVuYyhudW0pXG4gICAgICAgIGlmIChpbnQgIT09IG51bSkge1xuICAgICAgICAgICAgdmFyIGludFN0ciA9IFN0cmluZyhpbnQpO1xuICAgICAgICAgICAgdmFyIGRlYyA9ICRzbGljZS5jYWxsKHN0ciwgaW50U3RyLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoaW50U3RyLCBzZXBSZWdleCwgJyQmXycpICsgJy4nICsgJHJlcGxhY2UuY2FsbCgkcmVwbGFjZS5jYWxsKGRlYywgLyhbMC05XXszfSkvZywgJyQmXycpLCAvXyQvLCAnJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoc3RyLCBzZXBSZWdleCwgJyQmXycpO1xufVxuXG52YXIgdXRpbEluc3BlY3QgPSByZXF1aXJlKCcuL3V0aWwuaW5zcGVjdCcpO1xudmFyIGluc3BlY3RDdXN0b20gPSB1dGlsSW5zcGVjdC5jdXN0b207XG52YXIgaW5zcGVjdFN5bWJvbCA9IGlzU3ltYm9sKGluc3BlY3RDdXN0b20pID8gaW5zcGVjdEN1c3RvbSA6IG51bGw7XG5cbnZhciBxdW90ZXMgPSB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgICdkb3VibGUnOiAnXCInLFxuICAgIHNpbmdsZTogXCInXCJcbn07XG52YXIgcXVvdGVSRXMgPSB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgICdkb3VibGUnOiAvKFtcIlxcXFxdKS9nLFxuICAgIHNpbmdsZTogLyhbJ1xcXFxdKS9nXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluc3BlY3RfKG9iaiwgb3B0aW9ucywgZGVwdGgsIHNlZW4pIHtcbiAgICB2YXIgb3B0cyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBpZiAoaGFzKG9wdHMsICdxdW90ZVN0eWxlJykgJiYgIWhhcyhxdW90ZXMsIG9wdHMucXVvdGVTdHlsZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwicXVvdGVTdHlsZVwiIG11c3QgYmUgXCJzaW5nbGVcIiBvciBcImRvdWJsZVwiJyk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICAgaGFzKG9wdHMsICdtYXhTdHJpbmdMZW5ndGgnKSAmJiAodHlwZW9mIG9wdHMubWF4U3RyaW5nTGVuZ3RoID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBvcHRzLm1heFN0cmluZ0xlbmd0aCA8IDAgJiYgb3B0cy5tYXhTdHJpbmdMZW5ndGggIT09IEluZmluaXR5XG4gICAgICAgICAgICA6IG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBudWxsXG4gICAgICAgIClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwibWF4U3RyaW5nTGVuZ3RoXCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgSW5maW5pdHksIG9yIGBudWxsYCcpO1xuICAgIH1cbiAgICB2YXIgY3VzdG9tSW5zcGVjdCA9IGhhcyhvcHRzLCAnY3VzdG9tSW5zcGVjdCcpID8gb3B0cy5jdXN0b21JbnNwZWN0IDogdHJ1ZTtcbiAgICBpZiAodHlwZW9mIGN1c3RvbUluc3BlY3QgIT09ICdib29sZWFuJyAmJiBjdXN0b21JbnNwZWN0ICE9PSAnc3ltYm9sJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJjdXN0b21JbnNwZWN0XCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGB0cnVlYCwgYGZhbHNlYCwgb3IgYFxcJ3N5bWJvbFxcJ2AnKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnaW5kZW50JylcbiAgICAgICAgJiYgb3B0cy5pbmRlbnQgIT09IG51bGxcbiAgICAgICAgJiYgb3B0cy5pbmRlbnQgIT09ICdcXHQnXG4gICAgICAgICYmICEocGFyc2VJbnQob3B0cy5pbmRlbnQsIDEwKSA9PT0gb3B0cy5pbmRlbnQgJiYgb3B0cy5pbmRlbnQgPiAwKVxuICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJpbmRlbnRcIiBtdXN0IGJlIFwiXFxcXHRcIiwgYW4gaW50ZWdlciA+IDAsIG9yIGBudWxsYCcpO1xuICAgIH1cbiAgICBpZiAoaGFzKG9wdHMsICdudW1lcmljU2VwYXJhdG9yJykgJiYgdHlwZW9mIG9wdHMubnVtZXJpY1NlcGFyYXRvciAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm51bWVyaWNTZXBhcmF0b3JcIiwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYHRydWVgIG9yIGBmYWxzZWAnKTtcbiAgICB9XG4gICAgdmFyIG51bWVyaWNTZXBhcmF0b3IgPSBvcHRzLm51bWVyaWNTZXBhcmF0b3I7XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9iaiA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKG9iaiwgb3B0cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAob2JqID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHkgLyBvYmogPiAwID8gJzAnIDogJy0wJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyID0gU3RyaW5nKG9iaik7XG4gICAgICAgIHJldHVybiBudW1lcmljU2VwYXJhdG9yID8gYWRkTnVtZXJpY1NlcGFyYXRvcihvYmosIHN0cikgOiBzdHI7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYmlnaW50Jykge1xuICAgICAgICB2YXIgYmlnSW50U3RyID0gU3RyaW5nKG9iaikgKyAnbic7XG4gICAgICAgIHJldHVybiBudW1lcmljU2VwYXJhdG9yID8gYWRkTnVtZXJpY1NlcGFyYXRvcihvYmosIGJpZ0ludFN0cikgOiBiaWdJbnRTdHI7XG4gICAgfVxuXG4gICAgdmFyIG1heERlcHRoID0gdHlwZW9mIG9wdHMuZGVwdGggPT09ICd1bmRlZmluZWQnID8gNSA6IG9wdHMuZGVwdGg7XG4gICAgaWYgKHR5cGVvZiBkZXB0aCA9PT0gJ3VuZGVmaW5lZCcpIHsgZGVwdGggPSAwOyB9XG4gICAgaWYgKGRlcHRoID49IG1heERlcHRoICYmIG1heERlcHRoID4gMCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheShvYmopID8gJ1tBcnJheV0nIDogJ1tPYmplY3RdJztcbiAgICB9XG5cbiAgICB2YXIgaW5kZW50ID0gZ2V0SW5kZW50KG9wdHMsIGRlcHRoKTtcblxuICAgIGlmICh0eXBlb2Ygc2VlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VlbiA9IFtdO1xuICAgIH0gZWxzZSBpZiAoaW5kZXhPZihzZWVuLCBvYmopID49IDApIHtcbiAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNwZWN0KHZhbHVlLCBmcm9tLCBub0luZGVudCkge1xuICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgICAgc2VlbiA9ICRhcnJTbGljZS5jYWxsKHNlZW4pO1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub0luZGVudCkge1xuICAgICAgICAgICAgdmFyIG5ld09wdHMgPSB7XG4gICAgICAgICAgICAgICAgZGVwdGg6IG9wdHMuZGVwdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaGFzKG9wdHMsICdxdW90ZVN0eWxlJykpIHtcbiAgICAgICAgICAgICAgICBuZXdPcHRzLnF1b3RlU3R5bGUgPSBvcHRzLnF1b3RlU3R5bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5zcGVjdF8odmFsdWUsIG5ld09wdHMsIGRlcHRoICsgMSwgc2Vlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBvcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nICYmICFpc1JlZ0V4cChvYmopKSB7IC8vIGluIG9sZGVyIGVuZ2luZXMsIHJlZ2V4ZXMgYXJlIGNhbGxhYmxlXG4gICAgICAgIHZhciBuYW1lID0gbmFtZU9mKG9iaik7XG4gICAgICAgIHZhciBrZXlzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICByZXR1cm4gJ1tGdW5jdGlvbicgKyAobmFtZSA/ICc6ICcgKyBuYW1lIDogJyAoYW5vbnltb3VzKScpICsgJ10nICsgKGtleXMubGVuZ3RoID4gMCA/ICcgeyAnICsgJGpvaW4uY2FsbChrZXlzLCAnLCAnKSArICcgfScgOiAnJyk7XG4gICAgfVxuICAgIGlmIChpc1N5bWJvbChvYmopKSB7XG4gICAgICAgIHZhciBzeW1TdHJpbmcgPSBoYXNTaGFtbWVkU3ltYm9scyA/ICRyZXBsYWNlLmNhbGwoU3RyaW5nKG9iaiksIC9eKFN5bWJvbFxcKC4qXFwpKV9bXildKiQvLCAnJDEnKSA6IHN5bVRvU3RyaW5nLmNhbGwob2JqKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFoYXNTaGFtbWVkU3ltYm9scyA/IG1hcmtCb3hlZChzeW1TdHJpbmcpIDogc3ltU3RyaW5nO1xuICAgIH1cbiAgICBpZiAoaXNFbGVtZW50KG9iaikpIHtcbiAgICAgICAgdmFyIHMgPSAnPCcgKyAkdG9Mb3dlckNhc2UuY2FsbChTdHJpbmcob2JqLm5vZGVOYW1lKSk7XG4gICAgICAgIHZhciBhdHRycyA9IG9iai5hdHRyaWJ1dGVzIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzICs9ICcgJyArIGF0dHJzW2ldLm5hbWUgKyAnPScgKyB3cmFwUXVvdGVzKHF1b3RlKGF0dHJzW2ldLnZhbHVlKSwgJ2RvdWJsZScsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gJz4nO1xuICAgICAgICBpZiAob2JqLmNoaWxkTm9kZXMgJiYgb2JqLmNoaWxkTm9kZXMubGVuZ3RoKSB7IHMgKz0gJy4uLic7IH1cbiAgICAgICAgcyArPSAnPC8nICsgJHRvTG93ZXJDYXNlLmNhbGwoU3RyaW5nKG9iai5ub2RlTmFtZSkpICsgJz4nO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAob2JqLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1tdJzsgfVxuICAgICAgICB2YXIgeHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmIChpbmRlbnQgJiYgIXNpbmdsZUxpbmVWYWx1ZXMoeHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1snICsgaW5kZW50ZWRKb2luKHhzLCBpbmRlbnQpICsgJ10nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnWyAnICsgJGpvaW4uY2FsbCh4cywgJywgJykgKyAnIF0nO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcihvYmopKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKCEoJ2NhdXNlJyBpbiBFcnJvci5wcm90b3R5cGUpICYmICdjYXVzZScgaW4gb2JqICYmICFpc0VudW1lcmFibGUuY2FsbChvYmosICdjYXVzZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3sgWycgKyBTdHJpbmcob2JqKSArICddICcgKyAkam9pbi5jYWxsKCRjb25jYXQuY2FsbCgnW2NhdXNlXTogJyArIGluc3BlY3Qob2JqLmNhdXNlKSwgcGFydHMpLCAnLCAnKSArICcgfSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1snICsgU3RyaW5nKG9iaikgKyAnXSc7IH1cbiAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgJGpvaW4uY2FsbChwYXJ0cywgJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgY3VzdG9tSW5zcGVjdCkge1xuICAgICAgICBpZiAoaW5zcGVjdFN5bWJvbCAmJiB0eXBlb2Ygb2JqW2luc3BlY3RTeW1ib2xdID09PSAnZnVuY3Rpb24nICYmIHV0aWxJbnNwZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdXRpbEluc3BlY3Qob2JqLCB7IGRlcHRoOiBtYXhEZXB0aCAtIGRlcHRoIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbUluc3BlY3QgIT09ICdzeW1ib2wnICYmIHR5cGVvZiBvYmouaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5pbnNwZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTWFwKG9iaikpIHtcbiAgICAgICAgdmFyIG1hcFBhcnRzID0gW107XG4gICAgICAgIGlmIChtYXBGb3JFYWNoKSB7XG4gICAgICAgICAgICBtYXBGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgIG1hcFBhcnRzLnB1c2goaW5zcGVjdChrZXksIG9iaiwgdHJ1ZSkgKyAnID0+ICcgKyBpbnNwZWN0KHZhbHVlLCBvYmopKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uT2YoJ01hcCcsIG1hcFNpemUuY2FsbChvYmopLCBtYXBQYXJ0cywgaW5kZW50KTtcbiAgICB9XG4gICAgaWYgKGlzU2V0KG9iaikpIHtcbiAgICAgICAgdmFyIHNldFBhcnRzID0gW107XG4gICAgICAgIGlmIChzZXRGb3JFYWNoKSB7XG4gICAgICAgICAgICBzZXRGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZXRQYXJ0cy5wdXNoKGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignU2V0Jywgc2V0U2l6ZS5jYWxsKG9iaiksIHNldFBhcnRzLCBpbmRlbnQpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtNYXAnKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha1NldChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrU2V0Jyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtSZWYob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1JlZicpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoTnVtYmVyKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnSW50KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KGJpZ0ludFZhbHVlT2YuY2FsbChvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW4ob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGJvb2xlYW5WYWx1ZU9mLmNhbGwob2JqKSk7XG4gICAgfVxuICAgIGlmIChpc1N0cmluZyhvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChTdHJpbmcob2JqKSkpO1xuICAgIH1cbiAgICAvLyBub3RlOiBpbiBJRSA4LCBzb21ldGltZXMgYGdsb2JhbCAhPT0gd2luZG93YCBidXQgYm90aCBhcmUgdGhlIHByb3RvdHlwZXMgb2YgZWFjaCBvdGhlclxuICAgIC8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBvYmogPT09IHdpbmRvdykge1xuICAgICAgICByZXR1cm4gJ3sgW29iamVjdCBXaW5kb3ddIH0nO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSBnbG9iYWxUaGlzKVxuICAgICAgICB8fCAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSBnbG9iYWwpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiAneyBbb2JqZWN0IGdsb2JhbFRoaXNdIH0nO1xuICAgIH1cbiAgICBpZiAoIWlzRGF0ZShvYmopICYmICFpc1JlZ0V4cChvYmopKSB7XG4gICAgICAgIHZhciB5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgdmFyIGlzUGxhaW5PYmplY3QgPSBnUE8gPyBnUE8ob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZSA6IG9iaiBpbnN0YW5jZW9mIE9iamVjdCB8fCBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICAgICAgdmFyIHByb3RvVGFnID0gb2JqIGluc3RhbmNlb2YgT2JqZWN0ID8gJycgOiAnbnVsbCBwcm90b3R5cGUnO1xuICAgICAgICB2YXIgc3RyaW5nVGFnID0gIWlzUGxhaW5PYmplY3QgJiYgdG9TdHJpbmdUYWcgJiYgT2JqZWN0KG9iaikgPT09IG9iaiAmJiB0b1N0cmluZ1RhZyBpbiBvYmogPyAkc2xpY2UuY2FsbCh0b1N0cihvYmopLCA4LCAtMSkgOiBwcm90b1RhZyA/ICdPYmplY3QnIDogJyc7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvclRhZyA9IGlzUGxhaW5PYmplY3QgfHwgdHlwZW9mIG9iai5jb25zdHJ1Y3RvciAhPT0gJ2Z1bmN0aW9uJyA/ICcnIDogb2JqLmNvbnN0cnVjdG9yLm5hbWUgPyBvYmouY29uc3RydWN0b3IubmFtZSArICcgJyA6ICcnO1xuICAgICAgICB2YXIgdGFnID0gY29uc3RydWN0b3JUYWcgKyAoc3RyaW5nVGFnIHx8IHByb3RvVGFnID8gJ1snICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoW10sIHN0cmluZ1RhZyB8fCBbXSwgcHJvdG9UYWcgfHwgW10pLCAnOiAnKSArICddICcgOiAnJyk7XG4gICAgICAgIGlmICh5cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIHRhZyArICd7fSc7IH1cbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhZyArICd7JyArIGluZGVudGVkSm9pbih5cywgaW5kZW50KSArICd9JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFnICsgJ3sgJyArICRqb2luLmNhbGwoeXMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhvYmopO1xufTtcblxuZnVuY3Rpb24gd3JhcFF1b3RlcyhzLCBkZWZhdWx0U3R5bGUsIG9wdHMpIHtcbiAgICB2YXIgc3R5bGUgPSBvcHRzLnF1b3RlU3R5bGUgfHwgZGVmYXVsdFN0eWxlO1xuICAgIHZhciBxdW90ZUNoYXIgPSBxdW90ZXNbc3R5bGVdO1xuICAgIHJldHVybiBxdW90ZUNoYXIgKyBzICsgcXVvdGVDaGFyO1xufVxuXG5mdW5jdGlvbiBxdW90ZShzKSB7XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoU3RyaW5nKHMpLCAvXCIvZywgJyZxdW90OycpO1xufVxuXG5mdW5jdGlvbiBjYW5UcnVzdFRvU3RyaW5nKG9iaikge1xuICAgIHJldHVybiAhdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAodG9TdHJpbmdUYWcgaW4gb2JqIHx8IHR5cGVvZiBvYmpbdG9TdHJpbmdUYWddICE9PSAndW5kZWZpbmVkJykpO1xufVxuZnVuY3Rpb24gaXNBcnJheShvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XScgJiYgY2FuVHJ1c3RUb1N0cmluZyhvYmopOyB9XG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBEYXRlXScgJiYgY2FuVHJ1c3RUb1N0cmluZyhvYmopOyB9XG5mdW5jdGlvbiBpc1JlZ0V4cChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nICYmIGNhblRydXN0VG9TdHJpbmcob2JqKTsgfVxuZnVuY3Rpb24gaXNFcnJvcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEVycm9yXScgJiYgY2FuVHJ1c3RUb1N0cmluZyhvYmopOyB9XG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nICYmIGNhblRydXN0VG9TdHJpbmcob2JqKTsgfVxuZnVuY3Rpb24gaXNOdW1iZXIob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBOdW1iZXJdJyAmJiBjYW5UcnVzdFRvU3RyaW5nKG9iaik7IH1cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJyAmJiBjYW5UcnVzdFRvU3RyaW5nKG9iaik7IH1cblxuLy8gU3ltYm9sIGFuZCBCaWdJbnQgZG8gaGF2ZSBTeW1ib2wudG9TdHJpbmdUYWcgYnkgc3BlYywgc28gdGhhdCBjYW4ndCBiZSB1c2VkIHRvIGVsaW1pbmF0ZSBmYWxzZSBwb3NpdGl2ZXNcbmZ1bmN0aW9uIGlzU3ltYm9sKG9iaikge1xuICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scykge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiBpbnN0YW5jZW9mIFN5bWJvbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhc3ltVG9TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0JpZ0ludChvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhYmlnSW50VmFsdWVPZikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGJpZ0ludFZhbHVlT2YuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkgfHwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5IGluIHRoaXM7IH07XG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cihvYmopIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBuYW1lT2YoZikge1xuICAgIGlmIChmLm5hbWUpIHsgcmV0dXJuIGYubmFtZTsgfVxuICAgIHZhciBtID0gJG1hdGNoLmNhbGwoZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGYpLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrUmVmKHgpIHtcbiAgICBpZiAoIXdlYWtSZWZEZXJlZiB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrUmVmRGVyZWYuY2FsbCh4KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU2V0KHgpIHtcbiAgICBpZiAoIXNldFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFNldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha1NldCh4KSB7XG4gICAgaWYgKCF3ZWFrU2V0SGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KHgpIHtcbiAgICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHggaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB4Lm5vZGVOYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgeC5nZXRBdHRyaWJ1dGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3RTdHJpbmcoc3RyLCBvcHRzKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPiBvcHRzLm1heFN0cmluZ0xlbmd0aCkge1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gc3RyLmxlbmd0aCAtIG9wdHMubWF4U3RyaW5nTGVuZ3RoO1xuICAgICAgICB2YXIgdHJhaWxlciA9ICcuLi4gJyArIHJlbWFpbmluZyArICcgbW9yZSBjaGFyYWN0ZXInICsgKHJlbWFpbmluZyA+IDEgPyAncycgOiAnJyk7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKCRzbGljZS5jYWxsKHN0ciwgMCwgb3B0cy5tYXhTdHJpbmdMZW5ndGgpLCBvcHRzKSArIHRyYWlsZXI7XG4gICAgfVxuICAgIHZhciBxdW90ZVJFID0gcXVvdGVSRXNbb3B0cy5xdW90ZVN0eWxlIHx8ICdzaW5nbGUnXTtcbiAgICBxdW90ZVJFLmxhc3RJbmRleCA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgICB2YXIgcyA9ICRyZXBsYWNlLmNhbGwoJHJlcGxhY2UuY2FsbChzdHIsIHF1b3RlUkUsICdcXFxcJDEnKSwgL1tcXHgwMC1cXHgxZl0vZywgbG93Ynl0ZSk7XG4gICAgcmV0dXJuIHdyYXBRdW90ZXMocywgJ3NpbmdsZScsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBsb3dieXRlKGMpIHtcbiAgICB2YXIgbiA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgeCA9IHtcbiAgICAgICAgODogJ2InLFxuICAgICAgICA5OiAndCcsXG4gICAgICAgIDEwOiAnbicsXG4gICAgICAgIDEyOiAnZicsXG4gICAgICAgIDEzOiAncidcbiAgICB9W25dO1xuICAgIGlmICh4KSB7IHJldHVybiAnXFxcXCcgKyB4OyB9XG4gICAgcmV0dXJuICdcXFxceCcgKyAobiA8IDB4MTAgPyAnMCcgOiAnJykgKyAkdG9VcHBlckNhc2UuY2FsbChuLnRvU3RyaW5nKDE2KSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtCb3hlZChzdHIpIHtcbiAgICByZXR1cm4gJ09iamVjdCgnICsgc3RyICsgJyknO1xufVxuXG5mdW5jdGlvbiB3ZWFrQ29sbGVjdGlvbk9mKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSArICcgeyA/IH0nO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YodHlwZSwgc2l6ZSwgZW50cmllcywgaW5kZW50KSB7XG4gICAgdmFyIGpvaW5lZEVudHJpZXMgPSBpbmRlbnQgPyBpbmRlbnRlZEpvaW4oZW50cmllcywgaW5kZW50KSA6ICRqb2luLmNhbGwoZW50cmllcywgJywgJyk7XG4gICAgcmV0dXJuIHR5cGUgKyAnICgnICsgc2l6ZSArICcpIHsnICsgam9pbmVkRW50cmllcyArICd9Jztcbn1cblxuZnVuY3Rpb24gc2luZ2xlTGluZVZhbHVlcyh4cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluZGV4T2YoeHNbaV0sICdcXG4nKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEluZGVudChvcHRzLCBkZXB0aCkge1xuICAgIHZhciBiYXNlSW5kZW50O1xuICAgIGlmIChvcHRzLmluZGVudCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICdcXHQnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdHMuaW5kZW50ID09PSAnbnVtYmVyJyAmJiBvcHRzLmluZGVudCA+IDApIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICRqb2luLmNhbGwoQXJyYXkob3B0cy5pbmRlbnQgKyAxKSwgJyAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZTogYmFzZUluZGVudCxcbiAgICAgICAgcHJldjogJGpvaW4uY2FsbChBcnJheShkZXB0aCArIDEpLCBiYXNlSW5kZW50KVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGluZGVudGVkSm9pbih4cywgaW5kZW50KSB7XG4gICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJyc7IH1cbiAgICB2YXIgbGluZUpvaW5lciA9ICdcXG4nICsgaW5kZW50LnByZXYgKyBpbmRlbnQuYmFzZTtcbiAgICByZXR1cm4gbGluZUpvaW5lciArICRqb2luLmNhbGwoeHMsICcsJyArIGxpbmVKb2luZXIpICsgJ1xcbicgKyBpbmRlbnQucHJldjtcbn1cblxuZnVuY3Rpb24gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpIHtcbiAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iaik7XG4gICAgdmFyIHhzID0gW107XG4gICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHhzLmxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB4c1tpXSA9IGhhcyhvYmosIGkpID8gaW5zcGVjdChvYmpbaV0sIG9iaikgOiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3ltcyA9IHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nID8gZ09QUyhvYmopIDogW107XG4gICAgdmFyIHN5bU1hcDtcbiAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMpIHtcbiAgICAgICAgc3ltTWFwID0ge307XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc3ltcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgc3ltTWFwWyckJyArIHN5bXNba11dID0gc3ltc1trXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoIWhhcyhvYmosIGtleSkpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKGlzQXJyICYmIFN0cmluZyhOdW1iZXIoa2V5KSkgPT09IGtleSAmJiBrZXkgPCBvYmoubGVuZ3RoKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scyAmJiBzeW1NYXBbJyQnICsga2V5XSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0byBwcmV2ZW50IHNoYW1tZWQgU3ltYm9scywgd2hpY2ggYXJlIHN0b3JlZCBhcyBzdHJpbmdzLCBmcm9tIGJlaW5nIGluY2x1ZGVkIGluIHRoZSBzdHJpbmcga2V5IHNlY3Rpb25cbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKCR0ZXN0LmNhbGwoL1teXFx3JF0vLCBrZXkpKSB7XG4gICAgICAgICAgICB4cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeHMucHVzaChrZXkgKyAnOiAnICsgaW5zcGVjdChvYmpba2V5XSwgb2JqKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ltcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltc1tqXSkpIHtcbiAgICAgICAgICAgICAgICB4cy5wdXNoKCdbJyArIGluc3BlY3Qoc3ltc1tqXSkgKyAnXTogJyArIGluc3BlY3Qob2JqW3N5bXNbal1dLCBvYmopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geHM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY2ltYWxcblxuLy8gQ2hlY2sgaWYgdGhlIGdpdmVuIGNoYXJhY3RlciBjb2RlLCBvciB0aGUgY2hhcmFjdGVyIGNvZGUgYXQgdGhlIGZpcnN0XG4vLyBjaGFyYWN0ZXIsIGlzIGRlY2ltYWwuXG5mdW5jdGlvbiBkZWNpbWFsKGNoYXJhY3Rlcikge1xuICB2YXIgY29kZSA9IHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdzdHJpbmcnID8gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgOiBjaGFyYWN0ZXJcblxuICByZXR1cm4gY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3IC8qIDAtOSAqL1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRcblxudmFyIHZpc2l0UGFyZW50cyA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cycpXG5cbnZhciBDT05USU5VRSA9IHZpc2l0UGFyZW50cy5DT05USU5VRVxudmFyIFNLSVAgPSB2aXNpdFBhcmVudHMuU0tJUFxudmFyIEVYSVQgPSB2aXNpdFBhcmVudHMuRVhJVFxuXG52aXNpdC5DT05USU5VRSA9IENPTlRJTlVFXG52aXNpdC5TS0lQID0gU0tJUFxudmlzaXQuRVhJVCA9IEVYSVRcblxuZnVuY3Rpb24gdmlzaXQodHJlZSwgdGVzdCwgdmlzaXRvciwgcmV2ZXJzZSkge1xuICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZpc2l0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXZlcnNlID0gdmlzaXRvclxuICAgIHZpc2l0b3IgPSB0ZXN0XG4gICAgdGVzdCA9IG51bGxcbiAgfVxuXG4gIHZpc2l0UGFyZW50cyh0cmVlLCB0ZXN0LCBvdmVybG9hZCwgcmV2ZXJzZSlcblxuICBmdW5jdGlvbiBvdmVybG9hZChub2RlLCBwYXJlbnRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXVxuICAgIHZhciBpbmRleCA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKG5vZGUpIDogbnVsbFxuICAgIHJldHVybiB2aXNpdG9yKG5vZGUsIGluZGV4LCBwYXJlbnQpXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXMuanNcIik7XG52YXIgaXRlcmFibGVUb0FycmF5TGltaXQgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiKTtcbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCIpO1xudmFyIG5vbkl0ZXJhYmxlUmVzdCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiKTtcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KHIsIGUpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKHIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGUpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGUpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRPYmplY3QgPSByZXF1aXJlKCdlcy1vYmplY3QtYXRvbXMnKTtcblxudmFyICRFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycycpO1xudmFyICRFdmFsRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvZXZhbCcpO1xudmFyICRSYW5nZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3JhbmdlJyk7XG52YXIgJFJlZmVyZW5jZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3JlZicpO1xudmFyICRTeW50YXhFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9zeW50YXgnKTtcbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkVVJJRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdXJpJyk7XG5cbnZhciBhYnMgPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3MvYWJzJyk7XG52YXIgZmxvb3IgPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3MvZmxvb3InKTtcbnZhciBtYXggPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3MvbWF4Jyk7XG52YXIgbWluID0gcmVxdWlyZSgnbWF0aC1pbnRyaW5zaWNzL21pbicpO1xudmFyIHBvdyA9IHJlcXVpcmUoJ21hdGgtaW50cmluc2ljcy9wb3cnKTtcbnZhciByb3VuZCA9IHJlcXVpcmUoJ21hdGgtaW50cmluc2ljcy9yb3VuZCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3Mvc2lnbicpO1xuXG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJ2dldC1wcm90bycpO1xudmFyICRPYmplY3RHUE8gPSByZXF1aXJlKCdnZXQtcHJvdG8vT2JqZWN0LmdldFByb3RvdHlwZU9mJyk7XG52YXIgJFJlZmxlY3RHUE8gPSByZXF1aXJlKCdnZXQtcHJvdG8vUmVmbGVjdC5nZXRQcm90b3R5cGVPZicpO1xuXG52YXIgJGFwcGx5ID0gcmVxdWlyZSgnY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvZnVuY3Rpb25BcHBseScpO1xudmFyICRjYWxsID0gcmVxdWlyZSgnY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvZnVuY3Rpb25DYWxsJyk7XG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQmlnSW50NjRBcnJheSUnOiB0eXBlb2YgQmlnSW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQ2NEFycmF5LFxuXHQnJUJpZ1VpbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdVaW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdVaW50NjRBcnJheSxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6ICRFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiAkRXZhbEVycm9yLFxuXHQnJUZsb2F0MTZBcnJheSUnOiB0eXBlb2YgRmxvYXQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MTZBcnJheSxcblx0JyVGbG9hdDMyQXJyYXklJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXksXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZpbmFsaXphdGlvblJlZ2lzdHJ5JSc6IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGaW5hbGl6YXRpb25SZWdpc3RyeSxcblx0JyVGdW5jdGlvbiUnOiAkRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU9iamVjdCUnOiAkT2JqZWN0LFxuXHQnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJzogJGdPUEQsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiAkUmFuZ2VFcnJvcixcblx0JyVSZWZlcmVuY2VFcnJvciUnOiAkUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6ICRVUklFcnJvcixcblx0JyVXZWFrTWFwJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAsXG5cdCclV2Vha1JlZiUnOiB0eXBlb2YgV2Vha1JlZiA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrUmVmLFxuXHQnJVdlYWtTZXQlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldCxcblxuXHQnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJSc6ICRjYWxsLFxuXHQnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnOiAkYXBwbHksXG5cdCclT2JqZWN0LmRlZmluZVByb3BlcnR5JSc6ICRkZWZpbmVQcm9wZXJ0eSxcblx0JyVPYmplY3QuZ2V0UHJvdG90eXBlT2YlJzogJE9iamVjdEdQTyxcblx0JyVNYXRoLmFicyUnOiBhYnMsXG5cdCclTWF0aC5mbG9vciUnOiBmbG9vcixcblx0JyVNYXRoLm1heCUnOiBtYXgsXG5cdCclTWF0aC5taW4lJzogbWluLFxuXHQnJU1hdGgucG93JSc6IHBvdyxcblx0JyVNYXRoLnJvdW5kJSc6IHJvdW5kLFxuXHQnJU1hdGguc2lnbiUnOiBzaWduLFxuXHQnJVJlZmxlY3QuZ2V0UHJvdG90eXBlT2YlJzogJFJlZmxlY3RHUE9cbn07XG5cbmlmIChnZXRQcm90bykge1xuXHR0cnkge1xuXHRcdG51bGwuZXJyb3I7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zaGFkb3dyZWFsbS9wdWxsLzM4NCNpc3N1ZWNvbW1lbnQtMTM2NDI2NDIyOVxuXHRcdHZhciBlcnJvclByb3RvID0gZ2V0UHJvdG8oZ2V0UHJvdG8oZSkpO1xuXHRcdElOVFJJTlNJQ1NbJyVFcnJvci5wcm90b3R5cGUlJ10gPSBlcnJvclByb3RvO1xuXHR9XG59XG5cbnZhciBkb0V2YWwgPSBmdW5jdGlvbiBkb0V2YWwobmFtZSkge1xuXHR2YXIgdmFsdWU7XG5cdGlmIChuYW1lID09PSAnJUFzeW5jRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yJScpIHtcblx0XHR2YXIgZm4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpO1xuXHRcdGlmIChmbikge1xuXHRcdFx0dmFsdWUgPSBmbi5wcm90b3R5cGU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnKSB7XG5cdFx0dmFyIGdlbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yJScpO1xuXHRcdGlmIChnZW4gJiYgZ2V0UHJvdG8pIHtcblx0XHRcdHZhbHVlID0gZ2V0UHJvdG8oZ2VuLnByb3RvdHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0SU5UUklOU0lDU1tuYW1lXSA9IHZhbHVlO1xuXG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBMRUdBQ1lfQUxJQVNFUyA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHQnJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b3R5cGUlJzogWydBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvX2VudHJpZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZW50cmllcyddLFxuXHQnJUFycmF5UHJvdG9fZm9yRWFjaCUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdmb3JFYWNoJ10sXG5cdCclQXJyYXlQcm90b19rZXlzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2tleXMnXSxcblx0JyVBcnJheVByb3RvX3ZhbHVlcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICd2YWx1ZXMnXSxcblx0JyVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IFsnQXN5bmNGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3JQcm90b3R5cGUlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVCb29sZWFuUHJvdG90eXBlJSc6IFsnQm9vbGVhbicsICdwcm90b3R5cGUnXSxcblx0JyVEYXRhVmlld1Byb3RvdHlwZSUnOiBbJ0RhdGFWaWV3JywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGVQcm90b3R5cGUlJzogWydEYXRlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUVycm9yUHJvdG90eXBlJSc6IFsnRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRXZhbEVycm9yUHJvdG90eXBlJSc6IFsnRXZhbEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0MzJBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDY0QXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDY0QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRnVuY3Rpb25Qcm90b3R5cGUlJzogWydGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3IlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3JQcm90b3R5cGUlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclSW50OEFycmF5UHJvdG90eXBlJSc6IFsnSW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDE2QXJyYXlQcm90b3R5cGUlJzogWydJbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDMyQXJyYXlQcm90b3R5cGUlJzogWydJbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUpTT05QYXJzZSUnOiBbJ0pTT04nLCAncGFyc2UnXSxcblx0JyVKU09OU3RyaW5naWZ5JSc6IFsnSlNPTicsICdzdHJpbmdpZnknXSxcblx0JyVNYXBQcm90b3R5cGUlJzogWydNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclTnVtYmVyUHJvdG90eXBlJSc6IFsnTnVtYmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJU9iamVjdFByb3RvdHlwZSUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnXSxcblx0JyVPYmpQcm90b190b1N0cmluZyUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndG9TdHJpbmcnXSxcblx0JyVPYmpQcm90b192YWx1ZU9mJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd2YWx1ZU9mJ10sXG5cdCclUHJvbWlzZVByb3RvdHlwZSUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJ10sXG5cdCclUHJvbWlzZVByb3RvX3RoZW4lJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZScsICd0aGVuJ10sXG5cdCclUHJvbWlzZV9hbGwlJzogWydQcm9taXNlJywgJ2FsbCddLFxuXHQnJVByb21pc2VfcmVqZWN0JSc6IFsnUHJvbWlzZScsICdyZWplY3QnXSxcblx0JyVQcm9taXNlX3Jlc29sdmUlJzogWydQcm9taXNlJywgJ3Jlc29sdmUnXSxcblx0JyVSYW5nZUVycm9yUHJvdG90eXBlJSc6IFsnUmFuZ2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBbJ1JlZmVyZW5jZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZ0V4cFByb3RvdHlwZSUnOiBbJ1JlZ0V4cCcsICdwcm90b3R5cGUnXSxcblx0JyVTZXRQcm90b3R5cGUlJzogWydTZXQnLCAncHJvdG90eXBlJ10sXG5cdCclU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydTaGFyZWRBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVTdHJpbmdQcm90b3R5cGUlJzogWydTdHJpbmcnLCAncHJvdG90eXBlJ10sXG5cdCclU3ltYm9sUHJvdG90eXBlJSc6IFsnU3ltYm9sJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bnRheEVycm9yUHJvdG90eXBlJSc6IFsnU3ludGF4RXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZWRBcnJheVByb3RvdHlwZSUnOiBbJ1R5cGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZUVycm9yUHJvdG90eXBlJSc6IFsnVHlwZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4QXJyYXlQcm90b3R5cGUlJzogWydVaW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhDbGFtcGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDE2QXJyYXlQcm90b3R5cGUlJzogWydVaW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVSSUVycm9yUHJvdG90eXBlJSc6IFsnVVJJRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha01hcFByb3RvdHlwZSUnOiBbJ1dlYWtNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha1NldFByb3RvdHlwZSUnOiBbJ1dlYWtTZXQnLCAncHJvdG90eXBlJ11cbn07XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhc293bicpO1xudmFyICRjb25jYXQgPSBiaW5kLmNhbGwoJGNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbCgkYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKCRjYWxsLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyICRzdHJTbGljZSA9IGJpbmQuY2FsbCgkY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgJGV4ZWMgPSBiaW5kLmNhbGwoJGNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG5cdHZhciBsYXN0ID0gJHN0clNsaWNlKHN0cmluZywgLTEpO1xuXHRpZiAoZmlyc3QgPT09ICclJyAmJiBsYXN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgJyk7XG5cdH0gZWxzZSBpZiAobGFzdCA9PT0gJyUnICYmIGZpcnN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgJyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuXHRcdFx0dmFsdWUgPSBkb0V2YWwoaW50cmluc2ljTmFtZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGlhczogYWxpYXMsXG5cdFx0XHRuYW1lOiBpbnRyaW5zaWNOYW1lLFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fTtcblx0fVxuXG5cdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0aWYgKCRleGVjKC9eJT9bXiVdKiU/JC8sIG5hbWUpID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignYCVgIG1heSBub3QgYmUgcHJlc2VudCBhbnl3aGVyZSBidXQgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRoZSBpbnRyaW5zaWMgbmFtZScpO1xuXHR9XG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHBhcnQsIDAsIDEpO1xuXHRcdHZhciBsYXN0ID0gJHN0clNsaWNlKHBhcnQsIC0xKTtcblx0XHRpZiAoXG5cdFx0XHQoXG5cdFx0XHRcdChmaXJzdCA9PT0gJ1wiJyB8fCBmaXJzdCA9PT0gXCInXCIgfHwgZmlyc3QgPT09ICdgJylcblx0XHRcdFx0fHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gJ2AnKVxuXHRcdFx0KVxuXHRcdFx0JiYgZmlyc3QgIT09IGxhc3Rcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Byb3BlcnR5IG5hbWVzIHdpdGggcXVvdGVzIG11c3QgaGF2ZSBtYXRjaGluZyBxdW90ZXMnKTtcblx0XHR9XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdGlzT3duID0gISFkZXNjO1xuXG5cdFx0XHRcdC8vIEJ5IGNvbnZlbnRpb24sIHdoZW4gYSBkYXRhIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhbiBhY2Nlc3NvclxuXHRcdFx0XHQvLyBwcm9wZXJ0eSB0byBlbXVsYXRlIGEgZGF0YSBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tXG5cdFx0XHRcdC8vIHRoZSBvdmVycmlkZSBtaXN0YWtlLCB0aGF0IGFjY2Vzc29yJ3MgZ2V0dGVyIGlzIG1hcmtlZCB3aXRoXG5cdFx0XHRcdC8vIGFuIGBvcmlnaW5hbFZhbHVlYCBwcm9wZXJ0eS4gSGVyZSwgd2hlbiB3ZSBkZXRlY3QgdGhpcywgd2Vcblx0XHRcdFx0Ly8gdXBob2xkIHRoZSBpbGx1c2lvbiBieSBwcmV0ZW5kaW5nIHRvIHNlZSB0aGF0IG9yaWdpbmFsIGRhdGFcblx0XHRcdFx0Ly8gcHJvcGVydHksIGkuZS4sIHJldHVybmluZyB0aGUgdmFsdWUgcmF0aGVyIHRoYW4gdGhlIGdldHRlclxuXHRcdFx0XHQvLyBpdHNlbGYuXG5cdFx0XHRcdGlmIChpc093biAmJiAnZ2V0JyBpbiBkZXNjICYmICEoJ29yaWdpbmFsVmFsdWUnIGluIGRlc2MuZ2V0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZGVzYy5nZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXNPd24gPSBoYXNPd24odmFsdWUsIHBhcnQpO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuXHRcdFx0XHRJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9mdW5jdGlvbkNhbGwnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyIHBlcmNlbnRUd2VudGllcyA9IC8lMjAvZztcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnZGVmYXVsdCc6IEZvcm1hdC5SRkMzOTg2LFxuICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFJGQzE3Mzg6IEZvcm1hdC5SRkMxNzM4LFxuICAgIFJGQzM5ODY6IEZvcm1hdC5SRkMzOTg2XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBsZWdhY3kgPSByZXF1aXJlKCdjaGFyYWN0ZXItZW50aXRpZXMtbGVnYWN5JylcbnZhciBpbnZhbGlkID0gcmVxdWlyZSgnY2hhcmFjdGVyLXJlZmVyZW5jZS1pbnZhbGlkJylcbnZhciBkZWNpbWFsID0gcmVxdWlyZSgnaXMtZGVjaW1hbCcpXG52YXIgaGV4YWRlY2ltYWwgPSByZXF1aXJlKCdpcy1oZXhhZGVjaW1hbCcpXG52YXIgYWxwaGFudW1lcmljYWwgPSByZXF1aXJlKCdpcy1hbHBoYW51bWVyaWNhbCcpXG52YXIgZGVjb2RlRW50aXR5ID0gcmVxdWlyZSgnLi9kZWNvZGUtZW50aXR5JylcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUVudGl0aWVzXG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciBub29wID0gRnVuY3Rpb24ucHJvdG90eXBlXG5cbi8vIERlZmF1bHQgc2V0dGluZ3MuXG52YXIgZGVmYXVsdHMgPSB7XG4gIHdhcm5pbmc6IG51bGwsXG4gIHJlZmVyZW5jZTogbnVsbCxcbiAgdGV4dDogbnVsbCxcbiAgd2FybmluZ0NvbnRleHQ6IG51bGwsXG4gIHJlZmVyZW5jZUNvbnRleHQ6IG51bGwsXG4gIHRleHRDb250ZXh0OiBudWxsLFxuICBwb3NpdGlvbjoge30sXG4gIGFkZGl0aW9uYWw6IG51bGwsXG4gIGF0dHJpYnV0ZTogZmFsc2UsXG4gIG5vblRlcm1pbmF0ZWQ6IHRydWVcbn1cblxuLy8gQ2hhcmFjdGVycy5cbnZhciB0YWIgPSA5IC8vICdcXHQnXG52YXIgbGluZUZlZWQgPSAxMCAvLyAnXFxuJ1xudmFyIGZvcm1GZWVkID0gMTIgLy8gICdcXGYnXG52YXIgc3BhY2UgPSAzMiAvLyAnICdcbnZhciBhbXBlcnNhbmQgPSAzOCAvLyAgJyYnXG52YXIgc2VtaWNvbG9uID0gNTkgLy8gICc7J1xudmFyIGxlc3NUaGFuID0gNjAgLy8gICc8J1xudmFyIGVxdWFsc1RvID0gNjEgLy8gICc9J1xudmFyIG51bWJlclNpZ24gPSAzNSAvLyAgJyMnXG52YXIgdXBwZXJjYXNlWCA9IDg4IC8vICAnWCdcbnZhciBsb3dlcmNhc2VYID0gMTIwIC8vICAneCdcbnZhciByZXBsYWNlbWVudENoYXJhY3RlciA9IDY1NTMzIC8vICfvv70nXG5cbi8vIFJlZmVyZW5jZSB0eXBlcy5cbnZhciBuYW1lID0gJ25hbWVkJ1xudmFyIGhleGEgPSAnaGV4YWRlY2ltYWwnXG52YXIgZGVjaSA9ICdkZWNpbWFsJ1xuXG4vLyBNYXAgb2YgYmFzZXMuXG52YXIgYmFzZXMgPSB7fVxuXG5iYXNlc1toZXhhXSA9IDE2XG5iYXNlc1tkZWNpXSA9IDEwXG5cbi8vIE1hcCBvZiB0eXBlcyB0byB0ZXN0cy5cbi8vIEVhY2ggdHlwZSBvZiBjaGFyYWN0ZXIgcmVmZXJlbmNlIGFjY2VwdHMgZGlmZmVyZW50IGNoYXJhY3RlcnMuXG4vLyBUaGlzIHRlc3QgaXMgdXNlZCB0byBkZXRlY3Qgd2hldGhlciBhIHJlZmVyZW5jZSBoYXMgZW5kZWQgKGFzIHRoZSBzZW1pY29sb25cbi8vIGlzIG5vdCBzdHJpY3RseSBuZWVkZWQpLlxudmFyIHRlc3RzID0ge31cblxudGVzdHNbbmFtZV0gPSBhbHBoYW51bWVyaWNhbFxudGVzdHNbZGVjaV0gPSBkZWNpbWFsXG50ZXN0c1toZXhhXSA9IGhleGFkZWNpbWFsXG5cbi8vIFdhcm5pbmcgdHlwZXMuXG52YXIgbmFtZWROb3RUZXJtaW5hdGVkID0gMVxudmFyIG51bWVyaWNOb3RUZXJtaW5hdGVkID0gMlxudmFyIG5hbWVkRW1wdHkgPSAzXG52YXIgbnVtZXJpY0VtcHR5ID0gNFxudmFyIG5hbWVkVW5rbm93biA9IDVcbnZhciBudW1lcmljRGlzYWxsb3dlZCA9IDZcbnZhciBudW1lcmljUHJvaGliaXRlZCA9IDdcblxuLy8gV2FybmluZyBtZXNzYWdlcy5cbnZhciBtZXNzYWdlcyA9IHt9XG5cbm1lc3NhZ2VzW25hbWVkTm90VGVybWluYXRlZF0gPVxuICAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJ1xubWVzc2FnZXNbbnVtZXJpY05vdFRlcm1pbmF0ZWRdID1cbiAgJ051bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJ1xubWVzc2FnZXNbbmFtZWRFbXB0eV0gPSAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgY2Fubm90IGJlIGVtcHR5J1xubWVzc2FnZXNbbnVtZXJpY0VtcHR5XSA9ICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBlbXB0eSdcbm1lc3NhZ2VzW25hbWVkVW5rbm93bl0gPSAnTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZXMgbXVzdCBiZSBrbm93bidcbm1lc3NhZ2VzW251bWVyaWNEaXNhbGxvd2VkXSA9XG4gICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBkaXNhbGxvd2VkJ1xubWVzc2FnZXNbbnVtZXJpY1Byb2hpYml0ZWRdID1cbiAgJ051bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZXMgY2Fubm90IGJlIG91dHNpZGUgdGhlIHBlcm1pc3NpYmxlIFVuaWNvZGUgcmFuZ2UnXG5cbi8vIFdyYXAgdG8gZW5zdXJlIGNsZWFuIHBhcmFtZXRlcnMgYXJlIGdpdmVuIHRvIGBwYXJzZWAuXG5mdW5jdGlvbiBwYXJzZUVudGl0aWVzKHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IHt9XG4gIHZhciBvcHRpb25cbiAgdmFyIGtleVxuXG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBvcHRpb24gPSBvcHRpb25zW2tleV1cbiAgICBzZXR0aW5nc1trZXldID1cbiAgICAgIG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRzW2tleV0gOiBvcHRpb25cbiAgfVxuXG4gIGlmIChzZXR0aW5ncy5wb3NpdGlvbi5pbmRlbnQgfHwgc2V0dGluZ3MucG9zaXRpb24uc3RhcnQpIHtcbiAgICBzZXR0aW5ncy5pbmRlbnQgPSBzZXR0aW5ncy5wb3NpdGlvbi5pbmRlbnQgfHwgW11cbiAgICBzZXR0aW5ncy5wb3NpdGlvbiA9IHNldHRpbmdzLnBvc2l0aW9uLnN0YXJ0XG4gIH1cblxuICByZXR1cm4gcGFyc2UodmFsdWUsIHNldHRpbmdzKVxufVxuXG4vLyBQYXJzZSBlbnRpdGllcy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBwYXJzZSh2YWx1ZSwgc2V0dGluZ3MpIHtcbiAgdmFyIGFkZGl0aW9uYWwgPSBzZXR0aW5ncy5hZGRpdGlvbmFsXG4gIHZhciBub25UZXJtaW5hdGVkID0gc2V0dGluZ3Mubm9uVGVybWluYXRlZFxuICB2YXIgaGFuZGxlVGV4dCA9IHNldHRpbmdzLnRleHRcbiAgdmFyIGhhbmRsZVJlZmVyZW5jZSA9IHNldHRpbmdzLnJlZmVyZW5jZVxuICB2YXIgaGFuZGxlV2FybmluZyA9IHNldHRpbmdzLndhcm5pbmdcbiAgdmFyIHRleHRDb250ZXh0ID0gc2V0dGluZ3MudGV4dENvbnRleHRcbiAgdmFyIHJlZmVyZW5jZUNvbnRleHQgPSBzZXR0aW5ncy5yZWZlcmVuY2VDb250ZXh0XG4gIHZhciB3YXJuaW5nQ29udGV4dCA9IHNldHRpbmdzLndhcm5pbmdDb250ZXh0XG4gIHZhciBwb3MgPSBzZXR0aW5ncy5wb3NpdGlvblxuICB2YXIgaW5kZW50ID0gc2V0dGluZ3MuaW5kZW50IHx8IFtdXG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGhcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgbGluZXMgPSAtMVxuICB2YXIgY29sdW1uID0gcG9zLmNvbHVtbiB8fCAxXG4gIHZhciBsaW5lID0gcG9zLmxpbmUgfHwgMVxuICB2YXIgcXVldWUgPSAnJ1xuICB2YXIgcmVzdWx0ID0gW11cbiAgdmFyIGVudGl0eUNoYXJhY3RlcnNcbiAgdmFyIG5hbWVkRW50aXR5XG4gIHZhciB0ZXJtaW5hdGVkXG4gIHZhciBjaGFyYWN0ZXJzXG4gIHZhciBjaGFyYWN0ZXJcbiAgdmFyIHJlZmVyZW5jZVxuICB2YXIgZm9sbG93aW5nXG4gIHZhciB3YXJuaW5nXG4gIHZhciByZWFzb25cbiAgdmFyIG91dHB1dFxuICB2YXIgZW50aXR5XG4gIHZhciBiZWdpblxuICB2YXIgc3RhcnRcbiAgdmFyIHR5cGVcbiAgdmFyIHRlc3RcbiAgdmFyIHByZXZcbiAgdmFyIG5leHRcbiAgdmFyIGRpZmZcbiAgdmFyIGVuZFxuXG4gIGlmICh0eXBlb2YgYWRkaXRpb25hbCA9PT0gJ3N0cmluZycpIHtcbiAgICBhZGRpdGlvbmFsID0gYWRkaXRpb25hbC5jaGFyQ29kZUF0KDApXG4gIH1cblxuICAvLyBDYWNoZSB0aGUgY3VycmVudCBwb2ludC5cbiAgcHJldiA9IG5vdygpXG5cbiAgLy8gV3JhcCBgaGFuZGxlV2FybmluZ2AuXG4gIHdhcm5pbmcgPSBoYW5kbGVXYXJuaW5nID8gcGFyc2VFcnJvciA6IG5vb3BcblxuICAvLyBFbnN1cmUgdGhlIGFsZ29yaXRobSB3YWxrcyBvdmVyIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYW5kIHRoZSBlbmQgKGluY2x1c2l2ZSkuXG4gIGluZGV4LS1cbiAgbGVuZ3RoKytcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIC8vIElmIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgd2FzIGEgbmV3bGluZS5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBsaW5lRmVlZCkge1xuICAgICAgY29sdW1uID0gaW5kZW50W2xpbmVzXSB8fCAxXG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckNvZGVBdChpbmRleClcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IGFtcGVyc2FuZCkge1xuICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChpbmRleCArIDEpXG5cbiAgICAgIC8vIFRoZSBiZWhhdmlvdXIgZGVwZW5kcyBvbiB0aGUgaWRlbnRpdHkgb2YgdGhlIG5leHQgY2hhcmFjdGVyLlxuICAgICAgaWYgKFxuICAgICAgICBmb2xsb3dpbmcgPT09IHRhYiB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGxpbmVGZWVkIHx8XG4gICAgICAgIGZvbGxvd2luZyA9PT0gZm9ybUZlZWQgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBzcGFjZSB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGFtcGVyc2FuZCB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGxlc3NUaGFuIHx8XG4gICAgICAgIGZvbGxvd2luZyAhPT0gZm9sbG93aW5nIHx8XG4gICAgICAgIChhZGRpdGlvbmFsICYmIGZvbGxvd2luZyA9PT0gYWRkaXRpb25hbClcbiAgICAgICkge1xuICAgICAgICAvLyBOb3QgYSBjaGFyYWN0ZXIgcmVmZXJlbmNlLlxuICAgICAgICAvLyBObyBjaGFyYWN0ZXJzIGFyZSBjb25zdW1lZCwgYW5kIG5vdGhpbmcgaXMgcmV0dXJuZWQuXG4gICAgICAgIC8vIFRoaXMgaXMgbm90IGFuIGVycm9yLCBlaXRoZXIuXG4gICAgICAgIHF1ZXVlICs9IGZyb21DaGFyQ29kZShjaGFyYWN0ZXIpXG4gICAgICAgIGNvbHVtbisrXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc3RhcnQgPSBpbmRleCArIDFcbiAgICAgIGJlZ2luID0gc3RhcnRcbiAgICAgIGVuZCA9IHN0YXJ0XG5cbiAgICAgIGlmIChmb2xsb3dpbmcgPT09IG51bWJlclNpZ24pIHtcbiAgICAgICAgLy8gTnVtZXJpY2FsIGVudGl0eS5cbiAgICAgICAgZW5kID0gKytiZWdpblxuXG4gICAgICAgIC8vIFRoZSBiZWhhdmlvdXIgZnVydGhlciBkZXBlbmRzIG9uIHRoZSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChlbmQpXG5cbiAgICAgICAgaWYgKGZvbGxvd2luZyA9PT0gdXBwZXJjYXNlWCB8fCBmb2xsb3dpbmcgPT09IGxvd2VyY2FzZVgpIHtcbiAgICAgICAgICAvLyBBU0NJSSBoZXggZGlnaXRzLlxuICAgICAgICAgIHR5cGUgPSBoZXhhXG4gICAgICAgICAgZW5kID0gKytiZWdpblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEFTQ0lJIGRpZ2l0cy5cbiAgICAgICAgICB0eXBlID0gZGVjaVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOYW1lZCBlbnRpdHkuXG4gICAgICAgIHR5cGUgPSBuYW1lXG4gICAgICB9XG5cbiAgICAgIGVudGl0eUNoYXJhY3RlcnMgPSAnJ1xuICAgICAgZW50aXR5ID0gJydcbiAgICAgIGNoYXJhY3RlcnMgPSAnJ1xuICAgICAgdGVzdCA9IHRlc3RzW3R5cGVdXG4gICAgICBlbmQtLVxuXG4gICAgICB3aGlsZSAoKytlbmQgPCBsZW5ndGgpIHtcbiAgICAgICAgZm9sbG93aW5nID0gdmFsdWUuY2hhckNvZGVBdChlbmQpXG5cbiAgICAgICAgaWYgKCF0ZXN0KGZvbGxvd2luZykpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcmFjdGVycyArPSBmcm9tQ2hhckNvZGUoZm9sbG93aW5nKVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiBtYXRjaCBhIGxlZ2FjeSBuYW1lZCByZWZlcmVuY2UuXG4gICAgICAgIC8vIElmIHNvLCB3ZSBjYWNoZSB0aGF0IGFzIHRoZSBsYXN0IHZpYWJsZSBuYW1lZCByZWZlcmVuY2UuXG4gICAgICAgIC8vIFRoaXMgZW5zdXJlcyB3ZSBkbyBub3QgbmVlZCB0byB3YWxrIGJhY2t3YXJkcyBsYXRlci5cbiAgICAgICAgaWYgKHR5cGUgPT09IG5hbWUgJiYgb3duLmNhbGwobGVnYWN5LCBjaGFyYWN0ZXJzKSkge1xuICAgICAgICAgIGVudGl0eUNoYXJhY3RlcnMgPSBjaGFyYWN0ZXJzXG4gICAgICAgICAgZW50aXR5ID0gbGVnYWN5W2NoYXJhY3RlcnNdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGVybWluYXRlZCA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKSA9PT0gc2VtaWNvbG9uXG5cbiAgICAgIGlmICh0ZXJtaW5hdGVkKSB7XG4gICAgICAgIGVuZCsrXG5cbiAgICAgICAgbmFtZWRFbnRpdHkgPSB0eXBlID09PSBuYW1lID8gZGVjb2RlRW50aXR5KGNoYXJhY3RlcnMpIDogZmFsc2VcblxuICAgICAgICBpZiAobmFtZWRFbnRpdHkpIHtcbiAgICAgICAgICBlbnRpdHlDaGFyYWN0ZXJzID0gY2hhcmFjdGVyc1xuICAgICAgICAgIGVudGl0eSA9IG5hbWVkRW50aXR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGlmZiA9IDEgKyBlbmQgLSBzdGFydFxuXG4gICAgICBpZiAoIXRlcm1pbmF0ZWQgJiYgIW5vblRlcm1pbmF0ZWQpIHtcbiAgICAgICAgLy8gRW1wdHkuXG4gICAgICB9IGVsc2UgaWYgKCFjaGFyYWN0ZXJzKSB7XG4gICAgICAgIC8vIEFuIGVtcHR5IChwb3NzaWJsZSkgZW50aXR5IGlzIHZhbGlkLCB1bmxlc3MgaXTigJlzIG51bWVyaWMgKHRodXMgYW5cbiAgICAgICAgLy8gYW1wZXJzYW5kIGZvbGxvd2VkIGJ5IGFuIG9jdG90aG9ycCkuXG4gICAgICAgIGlmICh0eXBlICE9PSBuYW1lKSB7XG4gICAgICAgICAgd2FybmluZyhudW1lcmljRW1wdHksIGRpZmYpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gbmFtZSkge1xuICAgICAgICAvLyBBbiBhbXBlcnNhbmQgZm9sbG93ZWQgYnkgYW55dGhpbmcgdW5rbm93biwgYW5kIG5vdCB0ZXJtaW5hdGVkLCBpc1xuICAgICAgICAvLyBpbnZhbGlkLlxuICAgICAgICBpZiAodGVybWluYXRlZCAmJiAhZW50aXR5KSB7XG4gICAgICAgICAgd2FybmluZyhuYW1lZFVua25vd24sIDEpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmVzIHNvbWV0aGluZyBhZnRlciBhbiBlbnRpdHkgbmFtZSB3aGljaCBpcyBub3Qga25vd24sIGNhcFxuICAgICAgICAgIC8vIHRoZSByZWZlcmVuY2UuXG4gICAgICAgICAgaWYgKGVudGl0eUNoYXJhY3RlcnMgIT09IGNoYXJhY3RlcnMpIHtcbiAgICAgICAgICAgIGVuZCA9IGJlZ2luICsgZW50aXR5Q2hhcmFjdGVycy5sZW5ndGhcbiAgICAgICAgICAgIGRpZmYgPSAxICsgZW5kIC0gYmVnaW5cbiAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZSByZWZlcmVuY2UgaXMgbm90IHRlcm1pbmF0ZWQsIHdhcm4uXG4gICAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG4gICAgICAgICAgICByZWFzb24gPSBlbnRpdHlDaGFyYWN0ZXJzID8gbmFtZWROb3RUZXJtaW5hdGVkIDogbmFtZWRFbXB0eVxuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuYXR0cmlidXRlKSB7XG4gICAgICAgICAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKVxuXG4gICAgICAgICAgICAgIGlmIChmb2xsb3dpbmcgPT09IGVxdWFsc1RvKSB7XG4gICAgICAgICAgICAgICAgd2FybmluZyhyZWFzb24sIGRpZmYpXG4gICAgICAgICAgICAgICAgZW50aXR5ID0gbnVsbFxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFscGhhbnVtZXJpY2FsKGZvbGxvd2luZykpIHtcbiAgICAgICAgICAgICAgICBlbnRpdHkgPSBudWxsXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2FybmluZyhyZWFzb24sIGRpZmYpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdhcm5pbmcocmVhc29uLCBkaWZmKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlZmVyZW5jZSA9IGVudGl0eVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG4gICAgICAgICAgLy8gQWxsIG5vbi10ZXJtaW5hdGVkIG51bWVyaWMgZW50aXRpZXMgYXJlIG5vdCByZW5kZXJlZCwgYW5kIHRyaWdnZXIgYVxuICAgICAgICAgIC8vIHdhcm5pbmcuXG4gICAgICAgICAgd2FybmluZyhudW1lcmljTm90VGVybWluYXRlZCwgZGlmZilcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGVybWluYXRlZCBhbmQgbnVtYmVyLCBwYXJzZSBhcyBlaXRoZXIgaGV4YWRlY2ltYWwgb3IgZGVjaW1hbC5cbiAgICAgICAgcmVmZXJlbmNlID0gcGFyc2VJbnQoY2hhcmFjdGVycywgYmFzZXNbdHlwZV0pXG5cbiAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBpcyBwcm9oaWJpdGVkLCBhbmQgcmVwbGFjZVxuICAgICAgICAvLyB3aXRoIHJlcGxhY2VtZW50IGNoYXJhY3Rlci5cbiAgICAgICAgaWYgKHByb2hpYml0ZWQocmVmZXJlbmNlKSkge1xuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY1Byb2hpYml0ZWQsIGRpZmYpXG4gICAgICAgICAgcmVmZXJlbmNlID0gZnJvbUNoYXJDb2RlKHJlcGxhY2VtZW50Q2hhcmFjdGVyKVxuICAgICAgICB9IGVsc2UgaWYgKHJlZmVyZW5jZSBpbiBpbnZhbGlkKSB7XG4gICAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBpcyBkaXNhbGxvd2VkLCBhbmQgcmVwbGFjZVxuICAgICAgICAgIC8vIGJ5IGFuIGFsdGVybmF0aXZlLlxuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY0Rpc2FsbG93ZWQsIGRpZmYpXG4gICAgICAgICAgcmVmZXJlbmNlID0gaW52YWxpZFtyZWZlcmVuY2VdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUGFyc2UgdGhlIG51bWJlci5cbiAgICAgICAgICBvdXRwdXQgPSAnJ1xuXG4gICAgICAgICAgLy8gVHJpZ2dlciBhIHdhcm5pbmcgd2hlbiB0aGUgcGFyc2VkIG51bWJlciBzaG91bGQgbm90IGJlIHVzZWQuXG4gICAgICAgICAgaWYgKGRpc2FsbG93ZWQocmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgd2FybmluZyhudW1lcmljRGlzYWxsb3dlZCwgZGlmZilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTdHJpbmdpZnkgdGhlIG51bWJlci5cbiAgICAgICAgICBpZiAocmVmZXJlbmNlID4gMHhmZmZmKSB7XG4gICAgICAgICAgICByZWZlcmVuY2UgLT0gMHgxMDAwMFxuICAgICAgICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZSgocmVmZXJlbmNlID4+PiAoMTAgJiAweDNmZikpIHwgMHhkODAwKVxuICAgICAgICAgICAgcmVmZXJlbmNlID0gMHhkYzAwIHwgKHJlZmVyZW5jZSAmIDB4M2ZmKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlZmVyZW5jZSA9IG91dHB1dCArIGZyb21DaGFyQ29kZShyZWZlcmVuY2UpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRm91bmQgaXQhXG4gICAgICAvLyBGaXJzdCBlYXQgdGhlIHF1ZXVlZCBjaGFyYWN0ZXJzIGFzIG5vcm1hbCB0ZXh0LCB0aGVuIGVhdCBhbiBlbnRpdHkuXG4gICAgICBpZiAocmVmZXJlbmNlKSB7XG4gICAgICAgIGZsdXNoKClcblxuICAgICAgICBwcmV2ID0gbm93KClcbiAgICAgICAgaW5kZXggPSBlbmQgLSAxXG4gICAgICAgIGNvbHVtbiArPSBlbmQgLSBzdGFydCArIDFcbiAgICAgICAgcmVzdWx0LnB1c2gocmVmZXJlbmNlKVxuICAgICAgICBuZXh0ID0gbm93KClcbiAgICAgICAgbmV4dC5vZmZzZXQrK1xuXG4gICAgICAgIGlmIChoYW5kbGVSZWZlcmVuY2UpIHtcbiAgICAgICAgICBoYW5kbGVSZWZlcmVuY2UuY2FsbChcbiAgICAgICAgICAgIHJlZmVyZW5jZUNvbnRleHQsXG4gICAgICAgICAgICByZWZlcmVuY2UsXG4gICAgICAgICAgICB7c3RhcnQ6IHByZXYsIGVuZDogbmV4dH0sXG4gICAgICAgICAgICB2YWx1ZS5zbGljZShzdGFydCAtIDEsIGVuZClcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBwcmV2ID0gbmV4dFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgd2UgY291bGQgbm90IGZpbmQgYSByZWZlcmVuY2UsIHF1ZXVlIHRoZSBjaGVja2VkIGNoYXJhY3RlcnMgKGFzXG4gICAgICAgIC8vIG5vcm1hbCBjaGFyYWN0ZXJzKSwgYW5kIG1vdmUgdGhlIHBvaW50ZXIgdG8gdGhlaXIgZW5kLlxuICAgICAgICAvLyBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2Ugd2UgY2FuIGJlIGNlcnRhaW4gbmVpdGhlciBuZXdsaW5lcyBub3JcbiAgICAgICAgLy8gYW1wZXJzYW5kcyBhcmUgaW5jbHVkZWQuXG4gICAgICAgIGNoYXJhY3RlcnMgPSB2YWx1ZS5zbGljZShzdGFydCAtIDEsIGVuZClcbiAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyc1xuICAgICAgICBjb2x1bW4gKz0gY2hhcmFjdGVycy5sZW5ndGhcbiAgICAgICAgaW5kZXggPSBlbmQgLSAxXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhhbmRsZSBhbnl0aGluZyBvdGhlciB0aGFuIGFuIGFtcGVyc2FuZCwgaW5jbHVkaW5nIG5ld2xpbmVzIGFuZCBFT0YuXG4gICAgICBpZiAoXG4gICAgICAgIGNoYXJhY3RlciA9PT0gMTAgLy8gTGluZSBmZWVkXG4gICAgICApIHtcbiAgICAgICAgbGluZSsrXG4gICAgICAgIGxpbmVzKytcbiAgICAgICAgY29sdW1uID0gMFxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBjaGFyYWN0ZXIpIHtcbiAgICAgICAgcXVldWUgKz0gZnJvbUNoYXJDb2RlKGNoYXJhY3RlcilcbiAgICAgICAgY29sdW1uKytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZsdXNoKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIHJlZHVjZWQgbm9kZXMsIGFuZCBhbnkgcG9zc2libGUgd2FybmluZ3MuXG4gIHJldHVybiByZXN1bHQuam9pbignJylcblxuICAvLyBHZXQgY3VycmVudCBwb3NpdGlvbi5cbiAgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBsaW5lLFxuICAgICAgY29sdW1uOiBjb2x1bW4sXG4gICAgICBvZmZzZXQ6IGluZGV4ICsgKHBvcy5vZmZzZXQgfHwgMClcbiAgICB9XG4gIH1cblxuICAvLyDigJxUaHJvd+KAnSBhIHBhcnNlLWVycm9yOiBhIHdhcm5pbmcuXG4gIGZ1bmN0aW9uIHBhcnNlRXJyb3IoY29kZSwgb2Zmc2V0KSB7XG4gICAgdmFyIHBvc2l0aW9uID0gbm93KClcblxuICAgIHBvc2l0aW9uLmNvbHVtbiArPSBvZmZzZXRcbiAgICBwb3NpdGlvbi5vZmZzZXQgKz0gb2Zmc2V0XG5cbiAgICBoYW5kbGVXYXJuaW5nLmNhbGwod2FybmluZ0NvbnRleHQsIG1lc3NhZ2VzW2NvZGVdLCBwb3NpdGlvbiwgY29kZSlcbiAgfVxuXG4gIC8vIEZsdXNoIGBxdWV1ZWAgKG5vcm1hbCB0ZXh0KS5cbiAgLy8gTWFjcm8gaW52b2tlZCBiZWZvcmUgZWFjaCBlbnRpdHkgYW5kIGF0IHRoZSBlbmQgb2YgYHZhbHVlYC5cbiAgLy8gRG9lcyBub3RoaW5nIHdoZW4gYHF1ZXVlYCBpcyBlbXB0eS5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKHF1ZXVlKSB7XG4gICAgICByZXN1bHQucHVzaChxdWV1ZSlcblxuICAgICAgaWYgKGhhbmRsZVRleHQpIHtcbiAgICAgICAgaGFuZGxlVGV4dC5jYWxsKHRleHRDb250ZXh0LCBxdWV1ZSwge3N0YXJ0OiBwcmV2LCBlbmQ6IG5vdygpfSlcbiAgICAgIH1cblxuICAgICAgcXVldWUgPSAnJ1xuICAgIH1cbiAgfVxufVxuXG4vLyBDaGVjayBpZiBgY2hhcmFjdGVyYCBpcyBvdXRzaWRlIHRoZSBwZXJtaXNzaWJsZSB1bmljb2RlIHJhbmdlLlxuZnVuY3Rpb24gcHJvaGliaXRlZChjb2RlKSB7XG4gIHJldHVybiAoY29kZSA+PSAweGQ4MDAgJiYgY29kZSA8PSAweGRmZmYpIHx8IGNvZGUgPiAweDEwZmZmZlxufVxuXG4vLyBDaGVjayBpZiBgY2hhcmFjdGVyYCBpcyBkaXNhbGxvd2VkLlxuZnVuY3Rpb24gZGlzYWxsb3dlZChjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMHgwMDAxICYmIGNvZGUgPD0gMHgwMDA4KSB8fFxuICAgIGNvZGUgPT09IDB4MDAwYiB8fFxuICAgIChjb2RlID49IDB4MDAwZCAmJiBjb2RlIDw9IDB4MDAxZikgfHxcbiAgICAoY29kZSA+PSAweDAwN2YgJiYgY29kZSA8PSAweDAwOWYpIHx8XG4gICAgKGNvZGUgPj0gMHhmZGQwICYmIGNvZGUgPD0gMHhmZGVmKSB8fFxuICAgIChjb2RlICYgMHhmZmZmKSA9PT0gMHhmZmZmIHx8XG4gICAgKGNvZGUgJiAweGZmZmYpID09PSAweGZmZmVcbiAgKVxufVxuIiwiLyohXG4gKiByZXBlYXQtc3RyaW5nIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9yZXBlYXQtc3RyaW5nPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBKb24gU2NobGlua2VydC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVzdWx0cyBjYWNoZVxuICovXG5cbnZhciByZXMgPSAnJztcbnZhciBjYWNoZTtcblxuLyoqXG4gKiBFeHBvc2UgYHJlcGVhdGBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcGVhdDtcblxuLyoqXG4gKiBSZXBlYXQgdGhlIGdpdmVuIGBzdHJpbmdgIHRoZSBzcGVjaWZpZWQgYG51bWJlcmBcbiAqIG9mIHRpbWVzLlxuICpcbiAqICoqRXhhbXBsZToqKlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xuICogcmVwZWF0KCdBJywgNSk7XG4gKiAvLz0+IEFBQUFBXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYHN0cmluZ2AgVGhlIHN0cmluZyB0byByZXBlYXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBgbnVtYmVyYCBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlcGVhdGVkIHN0cmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiByZXBlYXQoc3RyLCBudW0pIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIC8vIGNvdmVyIGNvbW1vbiwgcXVpY2sgdXNlIGNhc2VzXG4gIGlmIChudW0gPT09IDEpIHJldHVybiBzdHI7XG4gIGlmIChudW0gPT09IDIpIHJldHVybiBzdHIgKyBzdHI7XG5cbiAgdmFyIG1heCA9IHN0ci5sZW5ndGggKiBudW07XG4gIGlmIChjYWNoZSAhPT0gc3RyIHx8IHR5cGVvZiBjYWNoZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYWNoZSA9IHN0cjtcbiAgICByZXMgPSAnJztcbiAgfSBlbHNlIGlmIChyZXMubGVuZ3RoID49IG1heCkge1xuICAgIHJldHVybiByZXMuc3Vic3RyKDAsIG1heCk7XG4gIH1cblxuICB3aGlsZSAobWF4ID4gcmVzLmxlbmd0aCAmJiBudW0gPiAxKSB7XG4gICAgaWYgKG51bSAmIDEpIHtcbiAgICAgIHJlcyArPSBzdHI7XG4gICAgfVxuXG4gICAgbnVtID4+PSAxO1xuICAgIHN0ciArPSBzdHI7XG4gIH1cblxuICByZXMgKz0gc3RyO1xuICByZXMgPSByZXMuc3Vic3RyKDAsIG1heCk7XG4gIHJldHVybiByZXM7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB0cmltVHJhaWxpbmdMaW5lc1xuXG4vLyBSZW1vdmUgZmluYWwgbmV3bGluZSBjaGFyYWN0ZXJzIGZyb20gYHZhbHVlYC5cbmZ1bmN0aW9uIHRyaW1UcmFpbGluZ0xpbmVzKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1xcbiskLywgJycpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJydXB0O1xuXG5mdW5jdGlvbiBpbnRlcnJ1cHQoaW50ZXJydXB0b3JzLCB0b2tlbml6ZXJzLCBjdHgsIHBhcmFtcykge1xuICB2YXIgYm9vbHMgPSBbJ3BlZGFudGljJywgJ2NvbW1vbm1hcmsnXTtcbiAgdmFyIGNvdW50ID0gYm9vbHMubGVuZ3RoO1xuICB2YXIgbGVuZ3RoID0gaW50ZXJydXB0b3JzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBpbnRlcnJ1cHRvcjtcbiAgdmFyIGNvbmZpZztcbiAgdmFyIGZuO1xuICB2YXIgb2Zmc2V0O1xuICB2YXIgYm9vbDtcbiAgdmFyIGlnbm9yZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGludGVycnVwdG9yID0gaW50ZXJydXB0b3JzW2luZGV4XTtcbiAgICBjb25maWcgPSBpbnRlcnJ1cHRvclsxXSB8fCB7fTtcbiAgICBmbiA9IGludGVycnVwdG9yWzBdO1xuICAgIG9mZnNldCA9IC0xO1xuICAgIGlnbm9yZSA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKCsrb2Zmc2V0IDwgY291bnQpIHtcbiAgICAgIGJvb2wgPSBib29sc1tvZmZzZXRdO1xuXG4gICAgICBpZiAoY29uZmlnW2Jvb2xdICE9PSB1bmRlZmluZWQgJiYgY29uZmlnW2Jvb2xdICE9PSBjdHgub3B0aW9uc1tib29sXSkge1xuICAgICAgICBpZ25vcmUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaWdub3JlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW5pemVyc1tmbl0uYXBwbHkoY3R4LCBwYXJhbXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb2xsYXBzZVdoaXRlU3BhY2UgPSByZXF1aXJlKCdjb2xsYXBzZS13aGl0ZS1zcGFjZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZTtcblxuLyogTm9ybWFsaXplIGFuIGlkZW50aWZpZXIuICBDb2xsYXBzZXMgbXVsdGlwbGUgd2hpdGUgc3BhY2VcbiAqIGNoYXJhY3RlcnMgaW50byBhIHNpbmdsZSBzcGFjZSwgYW5kIHJlbW92ZXMgY2FzaW5nLiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKHZhbHVlKSB7XG4gIHJldHVybiBjb2xsYXBzZVdoaXRlU3BhY2UodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG59XG4iLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkge1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIF9nZXRQcm90b3R5cGVPZih0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiIWZ1bmN0aW9uKGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUobnVsbCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKG51bGwpKTp3aW5kb3cuc3R5bGlzPWUobnVsbCl9KGZ1bmN0aW9uIGUoYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9L15cXDArL2csYz0vW1xcMFxcclxcZl0vZyxzPS86ICovZyx0PS96b298Z3JhLyxpPS8oWyw6IF0pKHRyYW5zZm9ybSkvZyxmPS8sK1xccyooPyFbXihdKlspXSkvZyxuPS8gK1xccyooPyFbXihdKlspXSkvZyxsPS8gKltcXDBdICovZyxvPS8sXFxyKz8vZyxoPS8oW1xcdFxcclxcbiBdKSpcXGY/Ji9nLHU9LzpnbG9iYWxcXCgoKD86W15cXChcXClcXFtcXF1dKnxcXFsuKlxcXXxcXChbXlxcKFxcKV0qXFwpKSopXFwpL2csZD0vXFxXKy9nLGI9L0Aoa1xcdyspXFxzKihcXFMqKVxccyovLHA9Lzo6KHBsYWNlKS9nLGs9LzoocmVhZC1vbmx5KS9nLGc9L1xccysoPz1be1xcXTs9Oj5dKS9nLEE9LyhbW309Oj5dKVxccysvZyxDPS8oXFx7W157XSs/KTsoPz1cXH0pL2csdz0vXFxzezIsfS9nLHY9LyhbXlxcKF0pKDorKSAqL2csbT0vW3N2aF1cXHcrLVt0YmxyXXsyfS8seD0vXFwoXFxzKiguKilcXHMqXFwpL2csJD0vKFtcXHNcXFNdKj8pOy9nLHk9Ly1zZWxmfGZsZXgtL2csTz0vW15dKj8oOltycF1bZWxdYVtcXHctXSspW15dKi8saj0vc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLHo9LyhbXi1dKShpbWFnZS1zZXRcXCgpLyxOPVwiLXdlYmtpdC1cIixTPVwiLW1vei1cIixGPVwiLW1zLVwiLFc9NTkscT0xMjUsQj0xMjMsRD00MCxFPTQxLEc9OTEsSD05MyxJPTEwLEo9MTMsSz05LEw9NjQsTT0zMixQPTM4LFE9NDUsUj05NSxUPTQyLFU9NDQsVj01OCxYPTM5LFk9MzQsWj00NyxfPTYyLGVlPTQzLGFlPTEyNixyZT0wLGNlPTEyLHNlPTExLHRlPTEwNyxpZT0xMDksZmU9MTE1LG5lPTExMixsZT0xMTEsb2U9MTA1LGhlPTk5LHVlPTEwMCxkZT0xMTIsYmU9MSxwZT0xLGtlPTAsZ2U9MSxBZT0xLENlPTEsd2U9MCx2ZT0wLG1lPTAseGU9W10sJGU9W10seWU9MCxPZT1udWxsLGplPS0yLHplPS0xLE5lPTAsU2U9MSxGZT0yLFdlPTMscWU9MCxCZT0xLERlPVwiXCIsRWU9XCJcIixHZT1cIlwiO2Z1bmN0aW9uIEhlKGUsYSxzLHQsaSl7Zm9yKHZhciBmLG4sbz0wLGg9MCx1PTAsZD0wLGc9MCxBPTAsQz0wLHc9MCxtPTAsJD0wLHk9MCxPPTAsaj0wLHo9MCxSPTAsd2U9MCwkZT0wLE9lPTAsamU9MCx6ZT1zLmxlbmd0aCxKZT16ZS0xLFJlPVwiXCIsVGU9XCJcIixVZT1cIlwiLFZlPVwiXCIsWGU9XCJcIixZZT1cIlwiO1I8emU7KXtpZihDPXMuY2hhckNvZGVBdChSKSxSPT09SmUpaWYoaCtkK3UrbyE9PTApe2lmKDAhPT1oKUM9aD09PVo/STpaO2Q9dT1vPTAsemUrKyxKZSsrfWlmKGgrZCt1K289PT0wKXtpZihSPT09SmUpe2lmKHdlPjApVGU9VGUucmVwbGFjZShjLFwiXCIpO2lmKFRlLnRyaW0oKS5sZW5ndGg+MCl7c3dpdGNoKEMpe2Nhc2UgTTpjYXNlIEs6Y2FzZSBXOmNhc2UgSjpjYXNlIEk6YnJlYWs7ZGVmYXVsdDpUZSs9cy5jaGFyQXQoUil9Qz1XfX1pZigxPT09JGUpc3dpdGNoKEMpe2Nhc2UgQjpjYXNlIHE6Y2FzZSBXOmNhc2UgWTpjYXNlIFg6Y2FzZSBEOmNhc2UgRTpjYXNlIFU6JGU9MDtjYXNlIEs6Y2FzZSBKOmNhc2UgSTpjYXNlIE06YnJlYWs7ZGVmYXVsdDpmb3IoJGU9MCxqZT1SLGc9QyxSLS0sQz1XO2plPHplOylzd2l0Y2gocy5jaGFyQ29kZUF0KGplKyspKXtjYXNlIEk6Y2FzZSBKOmNhc2UgVzorK1IsQz1nLGplPXplO2JyZWFrO2Nhc2UgVjppZih3ZT4wKSsrUixDPWc7Y2FzZSBCOmplPXplfX1zd2l0Y2goQyl7Y2FzZSBCOmZvcihnPShUZT1UZS50cmltKCkpLmNoYXJDb2RlQXQoMCkseT0xLGplPSsrUjtSPHplOyl7c3dpdGNoKEM9cy5jaGFyQ29kZUF0KFIpKXtjYXNlIEI6eSsrO2JyZWFrO2Nhc2UgcTp5LS07YnJlYWs7Y2FzZSBaOnN3aXRjaChBPXMuY2hhckNvZGVBdChSKzEpKXtjYXNlIFQ6Y2FzZSBaOlI9UWUoQSxSLEplLHMpfWJyZWFrO2Nhc2UgRzpDKys7Y2FzZSBEOkMrKztjYXNlIFk6Y2FzZSBYOmZvcig7UisrPEplJiZzLmNoYXJDb2RlQXQoUikhPT1DOyk7fWlmKDA9PT15KWJyZWFrO1IrK31pZihVZT1zLnN1YnN0cmluZyhqZSxSKSxnPT09cmUpZz0oVGU9VGUucmVwbGFjZShyLFwiXCIpLnRyaW0oKSkuY2hhckNvZGVBdCgwKTtzd2l0Y2goZyl7Y2FzZSBMOmlmKHdlPjApVGU9VGUucmVwbGFjZShjLFwiXCIpO3N3aXRjaChBPVRlLmNoYXJDb2RlQXQoMSkpe2Nhc2UgdWU6Y2FzZSBpZTpjYXNlIGZlOmNhc2UgUTpmPWE7YnJlYWs7ZGVmYXVsdDpmPXhlfWlmKGplPShVZT1IZShhLGYsVWUsQSxpKzEpKS5sZW5ndGgsbWU+MCYmMD09PWplKWplPVRlLmxlbmd0aDtpZih5ZT4wKWlmKGY9SWUoeGUsVGUsT2UpLG49UGUoV2UsVWUsZixhLHBlLGJlLGplLEEsaSx0KSxUZT1mLmpvaW4oXCJcIiksdm9pZCAwIT09bilpZigwPT09KGplPShVZT1uLnRyaW0oKSkubGVuZ3RoKSlBPTAsVWU9XCJcIjtpZihqZT4wKXN3aXRjaChBKXtjYXNlIGZlOlRlPVRlLnJlcGxhY2UoeCxNZSk7Y2FzZSB1ZTpjYXNlIGllOmNhc2UgUTpVZT1UZStcIntcIitVZStcIn1cIjticmVhaztjYXNlIHRlOmlmKFVlPShUZT1UZS5yZXBsYWNlKGIsXCIkMSAkMlwiKyhCZT4wP0RlOlwiXCIpKSkrXCJ7XCIrVWUrXCJ9XCIsMT09PUFlfHwyPT09QWUmJkxlKFwiQFwiK1VlLDMpKVVlPVwiQFwiK04rVWUrXCJAXCIrVWU7ZWxzZSBVZT1cIkBcIitVZTticmVhaztkZWZhdWx0OmlmKFVlPVRlK1VlLHQ9PT1kZSlWZSs9VWUsVWU9XCJcIn1lbHNlIFVlPVwiXCI7YnJlYWs7ZGVmYXVsdDpVZT1IZShhLEllKGEsVGUsT2UpLFVlLHQsaSsxKX1YZSs9VWUsTz0wLCRlPTAsej0wLHdlPTAsT2U9MCxqPTAsVGU9XCJcIixVZT1cIlwiLEM9cy5jaGFyQ29kZUF0KCsrUik7YnJlYWs7Y2FzZSBxOmNhc2UgVzppZigoamU9KFRlPSh3ZT4wP1RlLnJlcGxhY2UoYyxcIlwiKTpUZSkudHJpbSgpKS5sZW5ndGgpPjEpe2lmKDA9PT16KWlmKChnPVRlLmNoYXJDb2RlQXQoMCkpPT09UXx8Zz45NiYmZzwxMjMpamU9KFRlPVRlLnJlcGxhY2UoXCIgXCIsXCI6XCIpKS5sZW5ndGg7aWYoeWU+MClpZih2b2lkIDAhPT0obj1QZShTZSxUZSxhLGUscGUsYmUsVmUubGVuZ3RoLHQsaSx0KSkpaWYoMD09PShqZT0oVGU9bi50cmltKCkpLmxlbmd0aCkpVGU9XCJcXDBcXDBcIjtzd2l0Y2goZz1UZS5jaGFyQ29kZUF0KDApLEE9VGUuY2hhckNvZGVBdCgxKSxnKXtjYXNlIHJlOmJyZWFrO2Nhc2UgTDppZihBPT09b2V8fEE9PT1oZSl7WWUrPVRlK3MuY2hhckF0KFIpO2JyZWFrfWRlZmF1bHQ6aWYoVGUuY2hhckNvZGVBdChqZS0xKT09PVYpYnJlYWs7VmUrPUtlKFRlLGcsQSxUZS5jaGFyQ29kZUF0KDIpKX19Tz0wLCRlPTAsej0wLHdlPTAsT2U9MCxUZT1cIlwiLEM9cy5jaGFyQ29kZUF0KCsrUil9fXN3aXRjaChDKXtjYXNlIEo6Y2FzZSBJOmlmKGgrZCt1K28rdmU9PT0wKXN3aXRjaCgkKXtjYXNlIEU6Y2FzZSBYOmNhc2UgWTpjYXNlIEw6Y2FzZSBhZTpjYXNlIF86Y2FzZSBUOmNhc2UgZWU6Y2FzZSBaOmNhc2UgUTpjYXNlIFY6Y2FzZSBVOmNhc2UgVzpjYXNlIEI6Y2FzZSBxOmJyZWFrO2RlZmF1bHQ6aWYoej4wKSRlPTF9aWYoaD09PVopaD0wO2Vsc2UgaWYoZ2UrTz09PTAmJnQhPT10ZSYmVGUubGVuZ3RoPjApd2U9MSxUZSs9XCJcXDBcIjtpZih5ZSpxZT4wKVBlKE5lLFRlLGEsZSxwZSxiZSxWZS5sZW5ndGgsdCxpLHQpO2JlPTEscGUrKzticmVhaztjYXNlIFc6Y2FzZSBxOmlmKGgrZCt1K289PT0wKXtiZSsrO2JyZWFrfWRlZmF1bHQ6c3dpdGNoKGJlKyssUmU9cy5jaGFyQXQoUiksQyl7Y2FzZSBLOmNhc2UgTTppZihkK28raD09PTApc3dpdGNoKHcpe2Nhc2UgVTpjYXNlIFY6Y2FzZSBLOmNhc2UgTTpSZT1cIlwiO2JyZWFrO2RlZmF1bHQ6aWYoQyE9PU0pUmU9XCIgXCJ9YnJlYWs7Y2FzZSByZTpSZT1cIlxcXFwwXCI7YnJlYWs7Y2FzZSBjZTpSZT1cIlxcXFxmXCI7YnJlYWs7Y2FzZSBzZTpSZT1cIlxcXFx2XCI7YnJlYWs7Y2FzZSBQOmlmKGQraCtvPT09MCYmZ2U+MClPZT0xLHdlPTEsUmU9XCJcXGZcIitSZTticmVhaztjYXNlIDEwODppZihkK2grbytrZT09PTAmJno+MClzd2l0Y2goUi16KXtjYXNlIDI6aWYodz09PW5lJiZzLmNoYXJDb2RlQXQoUi0zKT09PVYpa2U9dztjYXNlIDg6aWYobT09PWxlKWtlPW19YnJlYWs7Y2FzZSBWOmlmKGQraCtvPT09MCl6PVI7YnJlYWs7Y2FzZSBVOmlmKGgrdStkK289PT0wKXdlPTEsUmUrPVwiXFxyXCI7YnJlYWs7Y2FzZSBZOmNhc2UgWDppZigwPT09aClkPWQ9PT1DPzA6MD09PWQ/QzpkO2JyZWFrO2Nhc2UgRzppZihkK2grdT09PTApbysrO2JyZWFrO2Nhc2UgSDppZihkK2grdT09PTApby0tO2JyZWFrO2Nhc2UgRTppZihkK2grbz09PTApdS0tO2JyZWFrO2Nhc2UgRDppZihkK2grbz09PTApe2lmKDA9PT1PKXN3aXRjaCgyKncrMyptKXtjYXNlIDUzMzpicmVhaztkZWZhdWx0Onk9MCxPPTF9dSsrfWJyZWFrO2Nhc2UgTDppZihoK3UrZCtvK3oraj09PTApaj0xO2JyZWFrO2Nhc2UgVDpjYXNlIFo6aWYoZCtvK3U+MClicmVhaztzd2l0Y2goaCl7Y2FzZSAwOnN3aXRjaCgyKkMrMypzLmNoYXJDb2RlQXQoUisxKSl7Y2FzZSAyMzU6aD1aO2JyZWFrO2Nhc2UgMjIwOmplPVIsaD1UfWJyZWFrO2Nhc2UgVDppZihDPT09WiYmdz09PVQmJmplKzIhPT1SKXtpZigzMz09PXMuY2hhckNvZGVBdChqZSsyKSlWZSs9cy5zdWJzdHJpbmcoamUsUisxKTtSZT1cIlwiLGg9MH19fWlmKDA9PT1oKXtpZihnZStkK28raj09PTAmJnQhPT10ZSYmQyE9PVcpc3dpdGNoKEMpe2Nhc2UgVTpjYXNlIGFlOmNhc2UgXzpjYXNlIGVlOmNhc2UgRTpjYXNlIEQ6aWYoMD09PU8pe3N3aXRjaCh3KXtjYXNlIEs6Y2FzZSBNOmNhc2UgSTpjYXNlIEo6UmUrPVwiXFwwXCI7YnJlYWs7ZGVmYXVsdDpSZT1cIlxcMFwiK1JlKyhDPT09VT9cIlwiOlwiXFwwXCIpfXdlPTF9ZWxzZSBzd2l0Y2goQyl7Y2FzZSBEOmlmKHorNz09PVImJjEwOD09PXcpej0wO089Kyt5O2JyZWFrO2Nhc2UgRTppZigwPT0oTz0tLXkpKXdlPTEsUmUrPVwiXFwwXCJ9YnJlYWs7Y2FzZSBLOmNhc2UgTTpzd2l0Y2godyl7Y2FzZSByZTpjYXNlIEI6Y2FzZSBxOmNhc2UgVzpjYXNlIFU6Y2FzZSBjZTpjYXNlIEs6Y2FzZSBNOmNhc2UgSTpjYXNlIEo6YnJlYWs7ZGVmYXVsdDppZigwPT09Tyl3ZT0xLFJlKz1cIlxcMFwifX1pZihUZSs9UmUsQyE9PU0mJkMhPT1LKSQ9Q319bT13LHc9QyxSKyt9aWYoamU9VmUubGVuZ3RoLG1lPjApaWYoMD09PWplJiYwPT09WGUubGVuZ3RoJiYwPT09YVswXS5sZW5ndGg9PWZhbHNlKWlmKHQhPT1pZXx8MT09PWEubGVuZ3RoJiYoZ2U+MD9FZTpHZSk9PT1hWzBdKWplPWEuam9pbihcIixcIikubGVuZ3RoKzI7aWYoamU+MCl7aWYoZj0wPT09Z2UmJnQhPT10ZT9mdW5jdGlvbihlKXtmb3IodmFyIGEscixzPTAsdD1lLmxlbmd0aCxpPUFycmF5KHQpO3M8dDsrK3Mpe2Zvcih2YXIgZj1lW3NdLnNwbGl0KGwpLG49XCJcIixvPTAsaD0wLHU9MCxkPTAsYj1mLmxlbmd0aDtvPGI7KytvKXtpZigwPT09KGg9KHI9ZltvXSkubGVuZ3RoKSYmYj4xKWNvbnRpbnVlO2lmKHU9bi5jaGFyQ29kZUF0KG4ubGVuZ3RoLTEpLGQ9ci5jaGFyQ29kZUF0KDApLGE9XCJcIiwwIT09bylzd2l0Y2godSl7Y2FzZSBUOmNhc2UgYWU6Y2FzZSBfOmNhc2UgZWU6Y2FzZSBNOmNhc2UgRDpicmVhaztkZWZhdWx0OmE9XCIgXCJ9c3dpdGNoKGQpe2Nhc2UgUDpyPWErRWU7Y2FzZSBhZTpjYXNlIF86Y2FzZSBlZTpjYXNlIE06Y2FzZSBFOmNhc2UgRDpicmVhaztjYXNlIEc6cj1hK3IrRWU7YnJlYWs7Y2FzZSBWOnN3aXRjaCgyKnIuY2hhckNvZGVBdCgxKSszKnIuY2hhckNvZGVBdCgyKSl7Y2FzZSA1MzA6aWYoQ2U+MCl7cj1hK3Iuc3Vic3RyaW5nKDgsaC0xKTticmVha31kZWZhdWx0OmlmKG88MXx8ZltvLTFdLmxlbmd0aDwxKXI9YStFZStyfWJyZWFrO2Nhc2UgVTphPVwiXCI7ZGVmYXVsdDppZihoPjEmJnIuaW5kZXhPZihcIjpcIik+MClyPWErci5yZXBsYWNlKHYsXCIkMVwiK0VlK1wiJDJcIik7ZWxzZSByPWErcitFZX1uKz1yfWlbc109bi5yZXBsYWNlKGMsXCJcIikudHJpbSgpfXJldHVybiBpfShhKTphLHllPjApaWYodm9pZCAwIT09KG49UGUoRmUsVmUsZixlLHBlLGJlLGplLHQsaSx0KSkmJjA9PT0oVmU9bikubGVuZ3RoKXJldHVybiBZZStWZStYZTtpZihWZT1mLmpvaW4oXCIsXCIpK1wie1wiK1ZlK1wifVwiLEFlKmtlIT0wKXtpZigyPT09QWUmJiFMZShWZSwyKSlrZT0wO3N3aXRjaChrZSl7Y2FzZSBsZTpWZT1WZS5yZXBsYWNlKGssXCI6XCIrUytcIiQxXCIpK1ZlO2JyZWFrO2Nhc2UgbmU6VmU9VmUucmVwbGFjZShwLFwiOjpcIitOK1wiaW5wdXQtJDFcIikrVmUucmVwbGFjZShwLFwiOjpcIitTK1wiJDFcIikrVmUucmVwbGFjZShwLFwiOlwiK0YrXCJpbnB1dC0kMVwiKStWZX1rZT0wfX1yZXR1cm4gWWUrVmUrWGV9ZnVuY3Rpb24gSWUoZSxhLHIpe3ZhciBjPWEudHJpbSgpLnNwbGl0KG8pLHM9Yyx0PWMubGVuZ3RoLGk9ZS5sZW5ndGg7c3dpdGNoKGkpe2Nhc2UgMDpjYXNlIDE6Zm9yKHZhciBmPTAsbj0wPT09aT9cIlwiOmVbMF0rXCIgXCI7Zjx0OysrZilzW2ZdPUplKG4sc1tmXSxyLGkpLnRyaW0oKTticmVhaztkZWZhdWx0OmY9MDt2YXIgbD0wO2ZvcihzPVtdO2Y8dDsrK2YpZm9yKHZhciBoPTA7aDxpOysraClzW2wrK109SmUoZVtoXStcIiBcIixjW2ZdLHIsaSkudHJpbSgpfXJldHVybiBzfWZ1bmN0aW9uIEplKGUsYSxyLGMpe3ZhciBzPWEsdD1zLmNoYXJDb2RlQXQoMCk7aWYodDwzMyl0PShzPXMudHJpbSgpKS5jaGFyQ29kZUF0KDApO3N3aXRjaCh0KXtjYXNlIFA6c3dpdGNoKGdlK2Mpe2Nhc2UgMDpjYXNlIDE6aWYoMD09PWUudHJpbSgpLmxlbmd0aClicmVhaztkZWZhdWx0OnJldHVybiBzLnJlcGxhY2UoaCxcIiQxXCIrZS50cmltKCkpfWJyZWFrO2Nhc2UgVjpzd2l0Y2gocy5jaGFyQ29kZUF0KDEpKXtjYXNlIDEwMzppZihDZT4wJiZnZT4wKXJldHVybiBzLnJlcGxhY2UodSxcIiQxXCIpLnJlcGxhY2UoaCxcIiQxXCIrR2UpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIGUudHJpbSgpK3MucmVwbGFjZShoLFwiJDFcIitlLnRyaW0oKSl9ZGVmYXVsdDppZihyKmdlPjAmJnMuaW5kZXhPZihcIlxcZlwiKT4wKXJldHVybiBzLnJlcGxhY2UoaCwoZS5jaGFyQ29kZUF0KDApPT09Vj9cIlwiOlwiJDFcIikrZS50cmltKCkpfXJldHVybiBlK3N9ZnVuY3Rpb24gS2UoZSxhLHIsYyl7dmFyIGwsbz0wLGg9ZStcIjtcIix1PTIqYSszKnIrNCpjO2lmKDk0ND09PXUpcmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBhPWUubGVuZ3RoLHI9ZS5pbmRleE9mKFwiOlwiLDkpKzEsYz1lLnN1YnN0cmluZygwLHIpLnRyaW0oKSxzPWUuc3Vic3RyaW5nKHIsYS0xKS50cmltKCk7c3dpdGNoKGUuY2hhckNvZGVBdCg5KSpCZSl7Y2FzZSAwOmJyZWFrO2Nhc2UgUTppZigxMTAhPT1lLmNoYXJDb2RlQXQoMTApKWJyZWFrO2RlZmF1bHQ6Zm9yKHZhciB0PXMuc3BsaXQoKHM9XCJcIixmKSksaT0wLHI9MCxhPXQubGVuZ3RoO2k8YTtyPTAsKytpKXtmb3IodmFyIGw9dFtpXSxvPWwuc3BsaXQobik7bD1vW3JdOyl7dmFyIGg9bC5jaGFyQ29kZUF0KDApO2lmKDE9PT1CZSYmKGg+TCYmaDw5MHx8aD45NiYmaDwxMjN8fGg9PT1SfHxoPT09USYmbC5jaGFyQ29kZUF0KDEpIT09USkpc3dpdGNoKGlzTmFOKHBhcnNlRmxvYXQobCkpKygtMSE9PWwuaW5kZXhPZihcIihcIikpKXtjYXNlIDE6c3dpdGNoKGwpe2Nhc2VcImluZmluaXRlXCI6Y2FzZVwiYWx0ZXJuYXRlXCI6Y2FzZVwiYmFja3dhcmRzXCI6Y2FzZVwicnVubmluZ1wiOmNhc2VcIm5vcm1hbFwiOmNhc2VcImZvcndhcmRzXCI6Y2FzZVwiYm90aFwiOmNhc2VcIm5vbmVcIjpjYXNlXCJsaW5lYXJcIjpjYXNlXCJlYXNlXCI6Y2FzZVwiZWFzZS1pblwiOmNhc2VcImVhc2Utb3V0XCI6Y2FzZVwiZWFzZS1pbi1vdXRcIjpjYXNlXCJwYXVzZWRcIjpjYXNlXCJyZXZlcnNlXCI6Y2FzZVwiYWx0ZXJuYXRlLXJldmVyc2VcIjpjYXNlXCJpbmhlcml0XCI6Y2FzZVwiaW5pdGlhbFwiOmNhc2VcInVuc2V0XCI6Y2FzZVwic3RlcC1zdGFydFwiOmNhc2VcInN0ZXAtZW5kXCI6YnJlYWs7ZGVmYXVsdDpsKz1EZX19b1tyKytdPWx9cys9KDA9PT1pP1wiXCI6XCIsXCIpK28uam9pbihcIiBcIil9fWlmKHM9YytzK1wiO1wiLDE9PT1BZXx8Mj09PUFlJiZMZShzLDEpKXJldHVybiBOK3MrcztyZXR1cm4gc30oaCk7ZWxzZSBpZigwPT09QWV8fDI9PT1BZSYmIUxlKGgsMSkpcmV0dXJuIGg7c3dpdGNoKHUpe2Nhc2UgMTAxNTpyZXR1cm4gOTc9PT1oLmNoYXJDb2RlQXQoMTApP04raCtoOmg7Y2FzZSA5NTE6cmV0dXJuIDExNj09PWguY2hhckNvZGVBdCgzKT9OK2graDpoO2Nhc2UgOTYzOnJldHVybiAxMTA9PT1oLmNoYXJDb2RlQXQoNSk/TitoK2g6aDtjYXNlIDEwMDk6aWYoMTAwIT09aC5jaGFyQ29kZUF0KDQpKWJyZWFrO2Nhc2UgOTY5OmNhc2UgOTQyOnJldHVybiBOK2graDtjYXNlIDk3ODpyZXR1cm4gTitoK1MraCtoO2Nhc2UgMTAxOTpjYXNlIDk4MzpyZXR1cm4gTitoK1MraCtGK2graDtjYXNlIDg4MzppZihoLmNoYXJDb2RlQXQoOCk9PT1RKXJldHVybiBOK2graDtpZihoLmluZGV4T2YoXCJpbWFnZS1zZXQoXCIsMTEpPjApcmV0dXJuIGgucmVwbGFjZSh6LFwiJDFcIitOK1wiJDJcIikraDtyZXR1cm4gaDtjYXNlIDkzMjppZihoLmNoYXJDb2RlQXQoNCk9PT1RKXN3aXRjaChoLmNoYXJDb2RlQXQoNSkpe2Nhc2UgMTAzOnJldHVybiBOK1wiYm94LVwiK2gucmVwbGFjZShcIi1ncm93XCIsXCJcIikrTitoK0YraC5yZXBsYWNlKFwiZ3Jvd1wiLFwicG9zaXRpdmVcIikraDtjYXNlIDExNTpyZXR1cm4gTitoK0YraC5yZXBsYWNlKFwic2hyaW5rXCIsXCJuZWdhdGl2ZVwiKStoO2Nhc2UgOTg6cmV0dXJuIE4raCtGK2gucmVwbGFjZShcImJhc2lzXCIsXCJwcmVmZXJyZWQtc2l6ZVwiKStofXJldHVybiBOK2grRitoK2g7Y2FzZSA5NjQ6cmV0dXJuIE4raCtGK1wiZmxleC1cIitoK2g7Y2FzZSAxMDIzOmlmKDk5IT09aC5jaGFyQ29kZUF0KDgpKWJyZWFrO3JldHVybiBsPWguc3Vic3RyaW5nKGguaW5kZXhPZihcIjpcIiwxNSkpLnJlcGxhY2UoXCJmbGV4LVwiLFwiXCIpLnJlcGxhY2UoXCJzcGFjZS1iZXR3ZWVuXCIsXCJqdXN0aWZ5XCIpLE4rXCJib3gtcGFja1wiK2wrTitoK0YrXCJmbGV4LXBhY2tcIitsK2g7Y2FzZSAxMDA1OnJldHVybiB0LnRlc3QoaCk/aC5yZXBsYWNlKHMsXCI6XCIrTikraC5yZXBsYWNlKHMsXCI6XCIrUykraDpoO2Nhc2UgMWUzOnN3aXRjaChvPShsPWguc3Vic3RyaW5nKDEzKS50cmltKCkpLmluZGV4T2YoXCItXCIpKzEsbC5jaGFyQ29kZUF0KDApK2wuY2hhckNvZGVBdChvKSl7Y2FzZSAyMjY6bD1oLnJlcGxhY2UobSxcInRiXCIpO2JyZWFrO2Nhc2UgMjMyOmw9aC5yZXBsYWNlKG0sXCJ0Yi1ybFwiKTticmVhaztjYXNlIDIyMDpsPWgucmVwbGFjZShtLFwibHJcIik7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gaH1yZXR1cm4gTitoK0YrbCtoO2Nhc2UgMTAxNzppZigtMT09PWguaW5kZXhPZihcInN0aWNreVwiLDkpKXJldHVybiBoO2Nhc2UgOTc1OnN3aXRjaChvPShoPWUpLmxlbmd0aC0xMCx1PShsPSgzMz09PWguY2hhckNvZGVBdChvKT9oLnN1YnN0cmluZygwLG8pOmgpLnN1YnN0cmluZyhlLmluZGV4T2YoXCI6XCIsNykrMSkudHJpbSgpKS5jaGFyQ29kZUF0KDApKygwfGwuY2hhckNvZGVBdCg3KSkpe2Nhc2UgMjAzOmlmKGwuY2hhckNvZGVBdCg4KTwxMTEpYnJlYWs7Y2FzZSAxMTU6aD1oLnJlcGxhY2UobCxOK2wpK1wiO1wiK2g7YnJlYWs7Y2FzZSAyMDc6Y2FzZSAxMDI6aD1oLnJlcGxhY2UobCxOKyh1PjEwMj9cImlubGluZS1cIjpcIlwiKStcImJveFwiKStcIjtcIitoLnJlcGxhY2UobCxOK2wpK1wiO1wiK2gucmVwbGFjZShsLEYrbCtcImJveFwiKStcIjtcIitofXJldHVybiBoK1wiO1wiO2Nhc2UgOTM4OmlmKGguY2hhckNvZGVBdCg1KT09PVEpc3dpdGNoKGguY2hhckNvZGVBdCg2KSl7Y2FzZSAxMDU6cmV0dXJuIGw9aC5yZXBsYWNlKFwiLWl0ZW1zXCIsXCJcIiksTitoK04rXCJib3gtXCIrbCtGK1wiZmxleC1cIitsK2g7Y2FzZSAxMTU6cmV0dXJuIE4raCtGK1wiZmxleC1pdGVtLVwiK2gucmVwbGFjZSh5LFwiXCIpK2g7ZGVmYXVsdDpyZXR1cm4gTitoK0YrXCJmbGV4LWxpbmUtcGFja1wiK2gucmVwbGFjZShcImFsaWduLWNvbnRlbnRcIixcIlwiKS5yZXBsYWNlKHksXCJcIikraH1icmVhaztjYXNlIDk3MzpjYXNlIDk4OTppZihoLmNoYXJDb2RlQXQoMykhPT1RfHwxMjI9PT1oLmNoYXJDb2RlQXQoNCkpYnJlYWs7Y2FzZSA5MzE6Y2FzZSA5NTM6aWYodHJ1ZT09PWoudGVzdChlKSlpZigxMTU9PT0obD1lLnN1YnN0cmluZyhlLmluZGV4T2YoXCI6XCIpKzEpKS5jaGFyQ29kZUF0KDApKXJldHVybiBLZShlLnJlcGxhY2UoXCJzdHJldGNoXCIsXCJmaWxsLWF2YWlsYWJsZVwiKSxhLHIsYykucmVwbGFjZShcIjpmaWxsLWF2YWlsYWJsZVwiLFwiOnN0cmV0Y2hcIik7ZWxzZSByZXR1cm4gaC5yZXBsYWNlKGwsTitsKStoLnJlcGxhY2UobCxTK2wucmVwbGFjZShcImZpbGwtXCIsXCJcIikpK2g7YnJlYWs7Y2FzZSA5NjI6aWYoaD1OK2grKDEwMj09PWguY2hhckNvZGVBdCg1KT9GK2g6XCJcIikraCxyK2M9PT0yMTEmJjEwNT09PWguY2hhckNvZGVBdCgxMykmJmguaW5kZXhPZihcInRyYW5zZm9ybVwiLDEwKT4wKXJldHVybiBoLnN1YnN0cmluZygwLGguaW5kZXhPZihcIjtcIiwyNykrMSkucmVwbGFjZShpLFwiJDFcIitOK1wiJDJcIikraH1yZXR1cm4gaH1mdW5jdGlvbiBMZShlLGEpe3ZhciByPWUuaW5kZXhPZigxPT09YT9cIjpcIjpcIntcIiksYz1lLnN1YnN0cmluZygwLDMhPT1hP3I6MTApLHM9ZS5zdWJzdHJpbmcocisxLGUubGVuZ3RoLTEpO3JldHVybiBPZSgyIT09YT9jOmMucmVwbGFjZShPLFwiJDFcIikscyxhKX1mdW5jdGlvbiBNZShlLGEpe3ZhciByPUtlKGEsYS5jaGFyQ29kZUF0KDApLGEuY2hhckNvZGVBdCgxKSxhLmNoYXJDb2RlQXQoMikpO3JldHVybiByIT09YStcIjtcIj9yLnJlcGxhY2UoJCxcIiBvciAoJDEpXCIpLnN1YnN0cmluZyg0KTpcIihcIithK1wiKVwifWZ1bmN0aW9uIFBlKGUsYSxyLGMscyx0LGksZixuLGwpe2Zvcih2YXIgbyxoPTAsdT1hO2g8eWU7KytoKXN3aXRjaChvPSRlW2hdLmNhbGwoVGUsZSx1LHIsYyxzLHQsaSxmLG4sbCkpe2Nhc2Ugdm9pZCAwOmNhc2UgZmFsc2U6Y2FzZSB0cnVlOmNhc2UgbnVsbDpicmVhaztkZWZhdWx0OnU9b31pZih1IT09YSlyZXR1cm4gdX1mdW5jdGlvbiBRZShlLGEscixjKXtmb3IodmFyIHM9YSsxO3M8cjsrK3Mpc3dpdGNoKGMuY2hhckNvZGVBdChzKSl7Y2FzZSBaOmlmKGU9PT1UKWlmKGMuY2hhckNvZGVBdChzLTEpPT09VCYmYSsyIT09cylyZXR1cm4gcysxO2JyZWFrO2Nhc2UgSTppZihlPT09WilyZXR1cm4gcysxfXJldHVybiBzfWZ1bmN0aW9uIFJlKGUpe2Zvcih2YXIgYSBpbiBlKXt2YXIgcj1lW2FdO3N3aXRjaChhKXtjYXNlXCJrZXlmcmFtZVwiOkJlPTB8cjticmVhaztjYXNlXCJnbG9iYWxcIjpDZT0wfHI7YnJlYWs7Y2FzZVwiY2FzY2FkZVwiOmdlPTB8cjticmVhaztjYXNlXCJjb21wcmVzc1wiOndlPTB8cjticmVhaztjYXNlXCJzZW1pY29sb25cIjp2ZT0wfHI7YnJlYWs7Y2FzZVwicHJlc2VydmVcIjptZT0wfHI7YnJlYWs7Y2FzZVwicHJlZml4XCI6aWYoT2U9bnVsbCwhcilBZT0wO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2YgcilBZT0xO2Vsc2UgQWU9MixPZT1yfX1yZXR1cm4gUmV9ZnVuY3Rpb24gVGUoYSxyKXtpZih2b2lkIDAhPT10aGlzJiZ0aGlzLmNvbnN0cnVjdG9yPT09VGUpcmV0dXJuIGUoYSk7dmFyIHM9YSx0PXMuY2hhckNvZGVBdCgwKTtpZih0PDMzKXQ9KHM9cy50cmltKCkpLmNoYXJDb2RlQXQoMCk7aWYoQmU+MClEZT1zLnJlcGxhY2UoZCx0PT09Rz9cIlwiOlwiLVwiKTtpZih0PTEsMT09PWdlKUdlPXM7ZWxzZSBFZT1zO3ZhciBpLGY9W0dlXTtpZih5ZT4wKWlmKHZvaWQgMCE9PShpPVBlKHplLHIsZixmLHBlLGJlLDAsMCwwLDApKSYmXCJzdHJpbmdcIj09dHlwZW9mIGkpcj1pO3ZhciBuPUhlKHhlLGYsciwwLDApO2lmKHllPjApaWYodm9pZCAwIT09KGk9UGUoamUsbixmLGYscGUsYmUsbi5sZW5ndGgsMCwwLDApKSYmXCJzdHJpbmdcIiE9dHlwZW9mKG49aSkpdD0wO3JldHVybiBEZT1cIlwiLEdlPVwiXCIsRWU9XCJcIixrZT0wLHBlPTEsYmU9MSx3ZSp0PT0wP246bi5yZXBsYWNlKGMsXCJcIikucmVwbGFjZShnLFwiXCIpLnJlcGxhY2UoQSxcIiQxXCIpLnJlcGxhY2UoQyxcIiQxXCIpLnJlcGxhY2UodyxcIiBcIil9aWYoVGUudXNlPWZ1bmN0aW9uIGUoYSl7c3dpdGNoKGEpe2Nhc2Ugdm9pZCAwOmNhc2UgbnVsbDp5ZT0kZS5sZW5ndGg9MDticmVhaztkZWZhdWx0OmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGEpJGVbeWUrK109YTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBhKWZvcih2YXIgcj0wLGM9YS5sZW5ndGg7cjxjOysrcillKGFbcl0pO2Vsc2UgcWU9MHwhIWF9cmV0dXJuIGV9LFRlLnNldD1SZSx2b2lkIDAhPT1hKVJlKGEpO3JldHVybiBUZX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGlzLm1pbi5qcy5tYXAiLCJ2YXIgc2FmZUlzTmFOID0gTnVtYmVyLmlzTmFOIHx8XG4gICAgZnVuY3Rpb24gcG9ueWZpbGwodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IHZhbHVlO1xuICAgIH07XG5mdW5jdGlvbiBpc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNhZmVJc05hTihmaXJzdCkgJiYgc2FmZUlzTmFOKHNlY29uZCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5ld0lucHV0cywgbGFzdElucHV0cykge1xuICAgIGlmIChuZXdJbnB1dHMubGVuZ3RoICE9PSBsYXN0SW5wdXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3SW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNFcXVhbChuZXdJbnB1dHNbaV0sIGxhc3RJbnB1dHNbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1lbW9pemVPbmUocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgICBpZiAoaXNFcXVhbCA9PT0gdm9pZCAwKSB7IGlzRXF1YWwgPSBhcmVJbnB1dHNFcXVhbDsgfVxuICAgIHZhciBsYXN0VGhpcztcbiAgICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgICB2YXIgbGFzdFJlc3VsdDtcbiAgICB2YXIgY2FsbGVkT25jZSA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgICAgICB2YXIgbmV3QXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgbmV3QXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsZWRPbmNlICYmIGxhc3RUaGlzID09PSB0aGlzICYmIGlzRXF1YWwobmV3QXJncywgbGFzdEFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UmVzdWx0ID0gcmVzdWx0Rm4uYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgICAgIGNhbGxlZE9uY2UgPSB0cnVlO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RBcmdzID0gbmV3QXJncztcbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBtZW1vaXplZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZU9uZTtcbiIsIi8qKlxuICogbG9kYXNoIDQuMC4xIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgMjAxMi0yMDE2IFRoZSBEb2pvIEZvdW5kYXRpb24gPGh0dHA6Ly9kb2pvZm91bmRhdGlvbi5vcmcvPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCAyMDA5LTIwMTYgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqIEF2YWlsYWJsZSB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKi9cblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEB0eXBlIEZ1bmN0aW9uXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGNvcnJlY3RseSBjbGFzc2lmaWVkLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTdHJpbmcoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN0cmluZ1RhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmc7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZShcIi4vdG9QcmltaXRpdmUuanNcIik7XG5mdW5jdGlvbiB0b1Byb3BlcnR5S2V5KHQpIHtcbiAgdmFyIGkgPSB0b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBpICsgXCJcIjtcbn1cbm1vZHVsZS5leHBvcnRzID0gdG9Qcm9wZXJ0eUtleSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9PdmVybG9hZFlpZWxkKGUsIGQpIHtcbiAgdGhpcy52ID0gZSwgdGhpcy5rID0gZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX092ZXJsb2FkWWllbGQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgcmVnZW5lcmF0b3JEZWZpbmUgPSByZXF1aXJlKFwiLi9yZWdlbmVyYXRvckRlZmluZS5qc1wiKTtcbmZ1bmN0aW9uIF9yZWdlbmVyYXRvcigpIHtcbiAgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9ibG9iL21haW4vcGFja2FnZXMvYmFiZWwtaGVscGVycy9MSUNFTlNFICovXG4gIHZhciBlLFxuICAgIHQsXG4gICAgciA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sID8gU3ltYm9sIDoge30sXG4gICAgbiA9IHIuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCIsXG4gICAgbyA9IHIudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG4gIGZ1bmN0aW9uIGkociwgbiwgbywgaSkge1xuICAgIHZhciBjID0gbiAmJiBuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG4gOiBHZW5lcmF0b3IsXG4gICAgICB1ID0gT2JqZWN0LmNyZWF0ZShjLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIHJlZ2VuZXJhdG9yRGVmaW5lKHUsIFwiX2ludm9rZVwiLCBmdW5jdGlvbiAociwgbiwgbykge1xuICAgICAgdmFyIGksXG4gICAgICAgIGMsXG4gICAgICAgIHUsXG4gICAgICAgIGYgPSAwLFxuICAgICAgICBwID0gbyB8fCBbXSxcbiAgICAgICAgeSA9ICExLFxuICAgICAgICBHID0ge1xuICAgICAgICAgIHA6IDAsXG4gICAgICAgICAgbjogMCxcbiAgICAgICAgICB2OiBlLFxuICAgICAgICAgIGE6IGQsXG4gICAgICAgICAgZjogZC5iaW5kKGUsIDQpLFxuICAgICAgICAgIGQ6IGZ1bmN0aW9uIGQodCwgcikge1xuICAgICAgICAgICAgcmV0dXJuIGkgPSB0LCBjID0gMCwgdSA9IGUsIEcubiA9IHIsIGE7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgZnVuY3Rpb24gZChyLCBuKSB7XG4gICAgICAgIGZvciAoYyA9IHIsIHUgPSBuLCB0ID0gMDsgIXkgJiYgZiAmJiAhbyAmJiB0IDwgcC5sZW5ndGg7IHQrKykge1xuICAgICAgICAgIHZhciBvLFxuICAgICAgICAgICAgaSA9IHBbdF0sXG4gICAgICAgICAgICBkID0gRy5wLFxuICAgICAgICAgICAgbCA9IGlbMl07XG4gICAgICAgICAgciA+IDMgPyAobyA9IGwgPT09IG4pICYmICh1ID0gaVsoYyA9IGlbNF0pID8gNSA6IChjID0gMywgMyldLCBpWzRdID0gaVs1XSA9IGUpIDogaVswXSA8PSBkICYmICgobyA9IHIgPCAyICYmIGQgPCBpWzFdKSA/IChjID0gMCwgRy52ID0gbiwgRy5uID0gaVsxXSkgOiBkIDwgbCAmJiAobyA9IHIgPCAzIHx8IGlbMF0gPiBuIHx8IG4gPiBsKSAmJiAoaVs0XSA9IHIsIGlbNV0gPSBuLCBHLm4gPSBsLCBjID0gMCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvIHx8IHIgPiAxKSByZXR1cm4gYTtcbiAgICAgICAgdGhyb3cgeSA9ICEwLCBuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvLCBwLCBsKSB7XG4gICAgICAgIGlmIChmID4gMSkgdGhyb3cgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgICAgZm9yICh5ICYmIDEgPT09IHAgJiYgZChwLCBsKSwgYyA9IHAsIHUgPSBsOyAodCA9IGMgPCAyID8gZSA6IHUpIHx8ICF5Oykge1xuICAgICAgICAgIGkgfHwgKGMgPyBjIDwgMyA/IChjID4gMSAmJiAoRy5uID0gLTEpLCBkKGMsIHUpKSA6IEcubiA9IHUgOiBHLnYgPSB1KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAyLCBpKSB7XG4gICAgICAgICAgICAgIGlmIChjIHx8IChvID0gXCJuZXh0XCIpLCB0ID0gaVtvXSkge1xuICAgICAgICAgICAgICAgIGlmICghKHQgPSB0LmNhbGwoaSwgdSkpKSB0aHJvdyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIXQuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgdSA9IHQudmFsdWUsIGMgPCAyICYmIChjID0gMCk7XG4gICAgICAgICAgICAgIH0gZWxzZSAxID09PSBjICYmICh0ID0gaVtcInJldHVyblwiXSkgJiYgdC5jYWxsKGkpLCBjIDwgMiAmJiAodSA9IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ1wiICsgbyArIFwiJyBtZXRob2RcIiksIGMgPSAxKTtcbiAgICAgICAgICAgICAgaSA9IGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCh0ID0gKHkgPSBHLm4gPCAwKSA/IHUgOiByLmNhbGwobiwgRykpICE9PSBhKSBicmVhaztcbiAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICBpID0gZSwgYyA9IDEsIHUgPSB0O1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBmID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogdCxcbiAgICAgICAgICBkb25lOiB5XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0ociwgbywgaSksICEwKSwgdTtcbiAgfVxuICB2YXIgYSA9IHt9O1xuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cbiAgdCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIGMgPSBbXVtuXSA/IHQodChbXVtuXSgpKSkgOiAocmVnZW5lcmF0b3JEZWZpbmUodCA9IHt9LCBuLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9KSwgdCksXG4gICAgdSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGMpO1xuICBmdW5jdGlvbiBmKGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKGUsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSA6IChlLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCByZWdlbmVyYXRvckRlZmluZShlLCBvLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSwgZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHUpLCBlO1xuICB9XG4gIHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgcmVnZW5lcmF0b3JEZWZpbmUodSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSksIHJlZ2VuZXJhdG9yRGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCIsIHJlZ2VuZXJhdG9yRGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBvLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLCByZWdlbmVyYXRvckRlZmluZSh1KSwgcmVnZW5lcmF0b3JEZWZpbmUodSwgbywgXCJHZW5lcmF0b3JcIiksIHJlZ2VuZXJhdG9yRGVmaW5lKHUsIG4sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIHJlZ2VuZXJhdG9yRGVmaW5lKHUsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KSwgKG1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3OiBpLFxuICAgICAgbTogZlxuICAgIH07XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cykoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX3JlZ2VuZXJhdG9yRGVmaW5lKGUsIHIsIG4sIHQpIHtcbiAgdmFyIGkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gIHRyeSB7XG4gICAgaSh7fSwgXCJcIiwge30pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBfcmVnZW5lcmF0b3JEZWZpbmUgPSBmdW5jdGlvbiByZWdlbmVyYXRvckRlZmluZShlLCByLCBuLCB0KSB7XG4gICAgZnVuY3Rpb24gbyhyLCBuKSB7XG4gICAgICBfcmVnZW5lcmF0b3JEZWZpbmUoZSwgciwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShyLCBuLCBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByID8gaSA/IGkoZSwgciwge1xuICAgICAgdmFsdWU6IG4sXG4gICAgICBlbnVtZXJhYmxlOiAhdCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogIXQsXG4gICAgICB3cml0YWJsZTogIXRcbiAgICB9KSA6IGVbcl0gPSBuIDogKG8oXCJuZXh0XCIsIDApLCBvKFwidGhyb3dcIiwgMSksIG8oXCJyZXR1cm5cIiwgMikpO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIF9yZWdlbmVyYXRvckRlZmluZShlLCByLCBuLCB0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yRGVmaW5lLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIHJlZ2VuZXJhdG9yID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3IuanNcIik7XG52YXIgcmVnZW5lcmF0b3JBc3luY0l0ZXJhdG9yID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JBc3luY0l0ZXJhdG9yLmpzXCIpO1xuZnVuY3Rpb24gX3JlZ2VuZXJhdG9yQXN5bmNHZW4ociwgZSwgdCwgbywgbikge1xuICByZXR1cm4gbmV3IHJlZ2VuZXJhdG9yQXN5bmNJdGVyYXRvcihyZWdlbmVyYXRvcigpLncociwgZSwgdCwgbyksIG4gfHwgUHJvbWlzZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvckFzeW5jR2VuLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIE92ZXJsb2FkWWllbGQgPSByZXF1aXJlKFwiLi9PdmVybG9hZFlpZWxkLmpzXCIpO1xudmFyIHJlZ2VuZXJhdG9yRGVmaW5lID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JEZWZpbmUuanNcIik7XG5mdW5jdGlvbiBBc3luY0l0ZXJhdG9yKHQsIGUpIHtcbiAgZnVuY3Rpb24gbihyLCBvLCBpLCBmKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBjID0gdFtyXShvKSxcbiAgICAgICAgdSA9IGMudmFsdWU7XG4gICAgICByZXR1cm4gdSBpbnN0YW5jZW9mIE92ZXJsb2FkWWllbGQgPyBlLnJlc29sdmUodS52KS50aGVuKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIG4oXCJuZXh0XCIsIHQsIGksIGYpO1xuICAgICAgfSwgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgbihcInRocm93XCIsIHQsIGksIGYpO1xuICAgICAgfSkgOiBlLnJlc29sdmUodSkudGhlbihmdW5jdGlvbiAodCkge1xuICAgICAgICBjLnZhbHVlID0gdCwgaShjKTtcbiAgICAgIH0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHJldHVybiBuKFwidGhyb3dcIiwgdCwgaSwgZik7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICBmKHQpO1xuICAgIH1cbiAgfVxuICB2YXIgcjtcbiAgdGhpcy5uZXh0IHx8IChyZWdlbmVyYXRvckRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIHJlZ2VuZXJhdG9yRGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBhc3luY0l0ZXJhdG9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSkpLCByZWdlbmVyYXRvckRlZmluZSh0aGlzLCBcIl9pbnZva2VcIiwgZnVuY3Rpb24gKHQsIG8sIGkpIHtcbiAgICBmdW5jdGlvbiBmKCkge1xuICAgICAgcmV0dXJuIG5ldyBlKGZ1bmN0aW9uIChlLCByKSB7XG4gICAgICAgIG4odCwgaSwgZSwgcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHIgPSByID8gci50aGVuKGYsIGYpIDogZigpO1xuICB9LCAhMCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEFzeW5jSXRlcmF0b3IsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgKHV0aWxzLmlzQmxvYihyZXF1ZXN0RGF0YSkgfHwgdXRpbHMuaXNGaWxlKHJlcXVlc3REYXRhKSkgJiZcbiAgICAgIHJlcXVlc3REYXRhLnR5cGVcbiAgICApIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYm91bmQnKTtcbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnb2JqZWN0LWluc3BlY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyICRNYXAgPSBHZXRJbnRyaW5zaWMoJyVNYXAlJywgdHJ1ZSk7XG5cbi8qKiBAdHlwZSB7PEssIFY+KHRoaXNBcmc6IE1hcDxLLCBWPiwga2V5OiBLKSA9PiBWfSAqL1xudmFyICRtYXBHZXQgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZ2V0JywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLLCBWPih0aGlzQXJnOiBNYXA8SywgVj4sIGtleTogSywgdmFsdWU6IFYpID0+IHZvaWR9ICovXG52YXIgJG1hcFNldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEssIFY+KHRoaXNBcmc6IE1hcDxLLCBWPiwga2V5OiBLKSA9PiBib29sZWFufSAqL1xudmFyICRtYXBIYXMgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLLCBWPih0aGlzQXJnOiBNYXA8SywgVj4sIGtleTogSykgPT4gYm9vbGVhbn0gKi9cbnZhciAkbWFwRGVsZXRlID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmRlbGV0ZScsIHRydWUpO1xuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+KSA9PiBudW1iZXJ9ICovXG52YXIgJG1hcFNpemUgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuc2l6ZScsIHRydWUpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSAhISRNYXAgJiYgLyoqIEB0eXBlIHtFeGNsdWRlPGltcG9ydCgnLicpLCBmYWxzZT59ICovIGZ1bmN0aW9uIGdldFNpZGVDaGFubmVsTWFwKCkge1xuXHQvKiogQHR5cGVkZWYge1JldHVyblR5cGU8dHlwZW9mIGdldFNpZGVDaGFubmVsTWFwPn0gQ2hhbm5lbCAqL1xuXHQvKiogQHR5cGVkZWYge1BhcmFtZXRlcnM8Q2hhbm5lbFsnZ2V0J10+WzBdfSBLICovXG5cdC8qKiBAdHlwZWRlZiB7UGFyYW1ldGVyczxDaGFubmVsWydzZXQnXT5bMV19IFYgKi9cblxuXHQvKiogQHR5cGUge01hcDxLLCBWPiB8IHVuZGVmaW5lZH0gKi8gdmFyICRtO1xuXG5cdC8qKiBAdHlwZSB7Q2hhbm5lbH0gKi9cblx0dmFyIGNoYW5uZWwgPSB7XG5cdFx0YXNzZXJ0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoIWNoYW5uZWwuaGFzKGtleSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1NpZGUgY2hhbm5lbCBkb2VzIG5vdCBjb250YWluICcgKyBpbnNwZWN0KGtleSkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0J2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gJG1hcERlbGV0ZSgkbSwga2V5KTtcblx0XHRcdFx0aWYgKCRtYXBTaXplKCRtKSA9PT0gMCkge1xuXHRcdFx0XHRcdCRtID0gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGdldDogZnVuY3Rpb24gKGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0cmV0dXJuICRtYXBHZXQoJG0sIGtleSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoYXM6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRyZXR1cm4gJG1hcEhhcygkbSwga2V5KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmICghJG0pIHtcblx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUUyBjYW4ndCBoYW5kbGUgbmFycm93aW5nIGEgdmFyaWFibGUgaW5zaWRlIGEgY2xvc3VyZVxuXHRcdFx0XHQkbSA9IG5ldyAkTWFwKCk7XG5cdFx0XHR9XG5cdFx0XHQkbWFwU2V0KCRtLCBrZXksIHZhbHVlKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBmaWd1cmUgb3V0IHdoeSBUUyBpcyBlcnJvcmluZyBoZXJlXG5cdHJldHVybiBjaGFubmVsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xudmFyICRnT1BEID0gcmVxdWlyZSgnLi9nT1BEJyk7XG5cbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL1JlZmxlY3QuZ2V0UHJvdG90eXBlT2YnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gKHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKSB8fCBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJ2VzLW9iamVjdC1hdG9tcycpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9PYmplY3QuZ2V0UHJvdG90eXBlT2YnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gJE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyICRjYWxsID0gcmVxdWlyZSgnLi9mdW5jdGlvbkNhbGwnKTtcbnZhciAkYWN0dWFsQXBwbHkgPSByZXF1aXJlKCcuL2FjdHVhbEFwcGx5Jyk7XG5cbi8qKiBAdHlwZSB7KGFyZ3M6IFtGdW5jdGlvbiwgdGhpc0FyZz86IHVua25vd24sIC4uLmFyZ3M6IHVua25vd25bXV0pID0+IEZ1bmN0aW9ufSBUT0RPIEZJWE1FLCBmaW5kIGEgd2F5IHRvIHVzZSBpbXBvcnQoJy4nKSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZEJhc2ljKGFyZ3MpIHtcblx0aWYgKGFyZ3MubGVuZ3RoIDwgMSB8fCB0eXBlb2YgYXJnc1swXSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdhIGZ1bmN0aW9uIGlzIHJlcXVpcmVkJyk7XG5cdH1cblx0cmV0dXJuICRhY3R1YWxBcHBseShiaW5kLCAkY2FsbCwgYXJncyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9mdW5jdGlvbkFwcGx5Jyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyIGNhbGxCaW5kQmFzaWMgPSByZXF1aXJlKCdjYWxsLWJpbmQtYXBwbHktaGVscGVycycpO1xuXG4vKiogQHR5cGUgeyh0aGlzQXJnOiBzdHJpbmcsIHNlYXJjaFN0cmluZzogc3RyaW5nLCBwb3NpdGlvbj86IG51bWJlcikgPT4gbnVtYmVyfSAqL1xudmFyICRpbmRleE9mID0gY2FsbEJpbmRCYXNpYyhbR2V0SW50cmluc2ljKCclU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJScpXSk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0LyogZXNsaW50IG5vLWV4dHJhLXBhcmVuczogMCAqL1xuXG5cdHZhciBpbnRyaW5zaWMgPSAvKiogQHR5cGUgeyh0aGlzOiB1bmtub3duLCAuLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd259ICovIChHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpKTtcblx0aWYgKHR5cGVvZiBpbnRyaW5zaWMgPT09ICdmdW5jdGlvbicgJiYgJGluZGV4T2YobmFtZSwgJy5wcm90b3R5cGUuJykgPiAtMSkge1xuXHRcdHJldHVybiBjYWxsQmluZEJhc2ljKC8qKiBAdHlwZSB7Y29uc3R9ICovIChbaW50cmluc2ljXSkpO1xuXHR9XG5cdHJldHVybiBpbnRyaW5zaWM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGhleFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgIGFycmF5LnB1c2goJyUnICsgKChpIDwgMTYgPyAnMCcgOiAnJykgKyBpLnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufSgpKTtcblxudmFyIGNvbXBhY3RRdWV1ZSA9IGZ1bmN0aW9uIGNvbXBhY3RRdWV1ZShxdWV1ZSkge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWUucG9wKCk7XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhciBjb21wYWN0ZWQgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9ialtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFjdGVkLnB1c2gob2JqW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0ub2JqW2l0ZW0ucHJvcF0gPSBjb21wYWN0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgYXJyYXlUb09iamVjdCA9IGZ1bmN0aW9uIGFycmF5VG9PYmplY3Qoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wbGFpbk9iamVjdHMgPyB7IF9fcHJvdG9fXzogbnVsbCB9IDoge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBvYmpbaV0gPSBzb3VyY2VbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIG1lcmdlID0gZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygc291cmNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKG9wdGlvbnMgJiYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSlcbiAgICAgICAgICAgICAgICB8fCAhaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc291cmNlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0YXJnZXQsIHNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0IHx8IHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoc291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgbWVyZ2VUYXJnZXQgPSB0YXJnZXQ7XG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiAhaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIG1lcmdlVGFyZ2V0ID0gYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoaGFzLmNhbGwodGFyZ2V0LCBpKSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRJdGVtID0gdGFyZ2V0W2ldO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJdGVtICYmIHR5cGVvZiB0YXJnZXRJdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBtZXJnZSh0YXJnZXRJdGVtLCBpdGVtLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICAgICAgaWYgKGhhcy5jYWxsKGFjYywga2V5KSkge1xuICAgICAgICAgICAgYWNjW2tleV0gPSBtZXJnZShhY2Nba2V5XSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG1lcmdlVGFyZ2V0KTtcbn07XG5cbnZhciBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ25TaW5nbGVTb3VyY2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdGFyZ2V0KTtcbn07XG5cbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAoc3RyLCBkZWZhdWx0RGVjb2RlciwgY2hhcnNldCkge1xuICAgIHZhciBzdHJXaXRob3V0UGx1cyA9IHN0ci5yZXBsYWNlKC9cXCsvZywgJyAnKTtcbiAgICBpZiAoY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIC8vIHVuZXNjYXBlIG5ldmVyIHRocm93cywgbm8gdHJ5Li4uY2F0Y2ggbmVlZGVkOlxuICAgICAgICByZXR1cm4gc3RyV2l0aG91dFBsdXMucmVwbGFjZSgvJVswLTlhLWZdezJ9L2dpLCB1bmVzY2FwZSk7XG4gICAgfVxuICAgIC8vIHV0Zi04XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHJXaXRob3V0UGx1cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gc3RyV2l0aG91dFBsdXM7XG4gICAgfVxufTtcblxudmFyIGxpbWl0ID0gMTAyNDtcblxuLyogZXNsaW50IG9wZXJhdG9yLWxpbmVicmVhazogWzIsIFwiYmVmb3JlXCJdICovXG5cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoc3RyLCBkZWZhdWx0RW5jb2RlciwgY2hhcnNldCwga2luZCwgZm9ybWF0KSB7XG4gICAgLy8gVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IHdyaXR0ZW4gYnkgQnJpYW4gV2hpdGUgKG1zY2RleCkgZm9yIHRoZSBpby5qcyBjb3JlIHF1ZXJ5c3RyaW5nIGxpYnJhcnkuXG4gICAgLy8gSXQgaGFzIGJlZW4gYWRhcHRlZCBoZXJlIGZvciBzdHJpY3RlciBhZGhlcmVuY2UgdG8gUkZDIDM5ODZcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHZhciBzdHJpbmcgPSBzdHI7XG4gICAgaWYgKHR5cGVvZiBzdHIgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHN0cmluZyA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzdHIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3RyaW5nID0gU3RyaW5nKHN0cik7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICByZXR1cm4gZXNjYXBlKHN0cmluZykucmVwbGFjZSgvJXVbMC05YS1mXXs0fS9naSwgZnVuY3Rpb24gKCQwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyUyNiUyMycgKyBwYXJzZUludCgkMC5zbGljZSgyKSwgMTYpICsgJyUzQic7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBvdXQgPSAnJztcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0cmluZy5sZW5ndGg7IGogKz0gbGltaXQpIHtcbiAgICAgICAgdmFyIHNlZ21lbnQgPSBzdHJpbmcubGVuZ3RoID49IGxpbWl0ID8gc3RyaW5nLnNsaWNlKGosIGogKyBsaW1pdCkgOiBzdHJpbmc7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjID0gc2VnbWVudC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGMgPT09IDB4MkQgLy8gLVxuICAgICAgICAgICAgICAgIHx8IGMgPT09IDB4MkUgLy8gLlxuICAgICAgICAgICAgICAgIHx8IGMgPT09IDB4NUYgLy8gX1xuICAgICAgICAgICAgICAgIHx8IGMgPT09IDB4N0UgLy8gflxuICAgICAgICAgICAgICAgIHx8IChjID49IDB4MzAgJiYgYyA8PSAweDM5KSAvLyAwLTlcbiAgICAgICAgICAgICAgICB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg1QSkgLy8gYS16XG4gICAgICAgICAgICAgICAgfHwgKGMgPj0gMHg2MSAmJiBjIDw9IDB4N0EpIC8vIEEtWlxuICAgICAgICAgICAgICAgIHx8IChmb3JtYXQgPT09IGZvcm1hdHMuUkZDMTczOCAmJiAoYyA9PT0gMHgyOCB8fCBjID09PSAweDI5KSkgLy8gKCApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aF0gPSBzZWdtZW50LmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4VGFibGVbY107XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aF0gPSBoZXhUYWJsZVsweEMwIHwgKGMgPj4gNildXG4gICAgICAgICAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYyA8IDB4RDgwMCB8fCBjID49IDB4RTAwMCkge1xuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoXSA9IGhleFRhYmxlWzB4RTAgfCAoYyA+PiAxMildXG4gICAgICAgICAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXVxuICAgICAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzRkYpIDw8IDEwKSB8IChzZWdtZW50LmNoYXJDb2RlQXQoaSkgJiAweDNGRikpO1xuXG4gICAgICAgICAgICBhcnJbYXJyLmxlbmd0aF0gPSBoZXhUYWJsZVsweEYwIHwgKGMgPj4gMTgpXVxuICAgICAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiAxMikgJiAweDNGKV1cbiAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV1cbiAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dCArPSBhcnIuam9pbignJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbnZhciBjb21wYWN0ID0gZnVuY3Rpb24gY29tcGFjdCh2YWx1ZSkge1xuICAgIHZhciBxdWV1ZSA9IFt7IG9iajogeyBvOiB2YWx1ZSB9LCBwcm9wOiAnbycgfV07XG4gICAgdmFyIHJlZnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZVtpXTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiByZWZzLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHsgb2JqOiBvYmosIHByb3A6IGtleSB9KTtcbiAgICAgICAgICAgICAgICByZWZzLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBhY3RRdWV1ZShxdWV1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgaXNSZWdFeHAgPSBmdW5jdGlvbiBpc1JlZ0V4cChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxudmFyIGlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIShvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKTtcbn07XG5cbnZhciBjb21iaW5lID0gZnVuY3Rpb24gY29tYmluZShhLCBiKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdChhLCBiKTtcbn07XG5cbnZhciBtYXliZU1hcCA9IGZ1bmN0aW9uIG1heWJlTWFwKHZhbCwgZm4pIHtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhciBtYXBwZWQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG1hcHBlZC5wdXNoKGZuKHZhbFtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgfVxuICAgIHJldHVybiBmbih2YWwpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgYXJyYXlUb09iamVjdDogYXJyYXlUb09iamVjdCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBjb21iaW5lOiBjb21iaW5lLFxuICAgIGNvbXBhY3Q6IGNvbXBhY3QsXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICAgIGlzUmVnRXhwOiBpc1JlZ0V4cCxcbiAgICBtYXliZU1hcDogbWF5YmVNYXAsXG4gICAgbWVyZ2U6IG1lcmdlXG59O1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFmcmlrYWFucyBbYWZdXG4vLyEgYXV0aG9yIDogV2VybmVyIE1vbGxlbnR6ZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZXJuZXJtXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYWYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhZicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyaWVfRmVicnVhcmllX01hYXJ0X0FwcmlsX01laV9KdW5pZV9KdWxpZV9BdWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01ydF9BcHJfTWVpX0p1bl9KdWxfQXVnX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTb25kYWdfTWFhbmRhZ19EaW5zZGFnX1dvZW5zZGFnX0RvbmRlcmRhZ19WcnlkYWdfU2F0ZXJkYWcnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTb25fTWFhX0Rpbl9Xb2VfRG9uX1ZyeV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU29fTWFfRGlfV29fRG9fVnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC92bXxubS9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXm5tJC9pLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3ZtJyA6ICdWTSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ25tJyA6ICdOTSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVmFuZGFnIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW03DtHJlIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0dpc3RlciBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFhc10gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb29yICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBnZWxlZGUnLFxuICAgICAgICAgICAgczogXCInbiBwYWFyIHNla29uZGVzXCIsXG4gICAgICAgICAgICBzczogJyVkIHNla29uZGVzJyxcbiAgICAgICAgICAgIG06IFwiJ24gbWludXV0XCIsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZScsXG4gICAgICAgICAgICBoOiBcIiduIHV1clwiLFxuICAgICAgICAgICAgaGg6ICclZCB1cmUnLFxuICAgICAgICAgICAgZDogXCInbiBkYWdcIixcbiAgICAgICAgICAgIGRkOiAnJWQgZGFlJyxcbiAgICAgICAgICAgIE06IFwiJ24gbWFhbmRcIixcbiAgICAgICAgICAgIE1NOiAnJWQgbWFhbmRlJyxcbiAgICAgICAgICAgIHk6IFwiJ24gamFhclwiLFxuICAgICAgICAgICAgeXk6ICclZCBqYWFyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIG51bWJlciArXG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwID8gJ3N0ZScgOiAnZGUnKVxuICAgICAgICAgICAgKTsgLy8gVGhhbmtzIHRvIEpvcmlzIFLDtmxpbmcgOiBodHRwczovL2dpdGh1Yi5jb20vamp1cGl0ZXJcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNYWFuZGFnIGlzIGRpZSBlZXJzdGUgZGFnIHZhbiBkaWUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gRGllIHdlZWsgd2F0IGRpZSA0ZGUgSmFudWFyaWUgYmV2YXQgaXMgZGllIGVlcnN0ZSB3ZWVrIHZhbiBkaWUgamFhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhZjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgW2FyXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcbi8vISBhdXRob3IgOiBBaG1lZCBFbGtoYXRpYlxuLy8hIGF1dGhvciA6IGZvcmFiaSBodHRwczovL2dpdGh1Yi5jb20vZm9yYWJpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ9mhJyxcbiAgICAgICAgICAgIDI6ICfZoicsXG4gICAgICAgICAgICAzOiAn2aMnLFxuICAgICAgICAgICAgNDogJ9mkJyxcbiAgICAgICAgICAgIDU6ICfZpScsXG4gICAgICAgICAgICA2OiAn2aYnLFxuICAgICAgICAgICAgNzogJ9mnJyxcbiAgICAgICAgICAgIDg6ICfZqCcsXG4gICAgICAgICAgICA5OiAn2aknLFxuICAgICAgICAgICAgMDogJ9mgJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ9mhJzogJzEnLFxuICAgICAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAgICAgJ9mkJzogJzQnLFxuICAgICAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAgICAgJ9mnJzogJzcnLFxuICAgICAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAgICAgJ9mgJzogJzAnLFxuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBuID09PSAwXG4gICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgOiBuID09PSAxXG4gICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgIDogbiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDMgJiYgbiAlIDEwMCA8PSAxMFxuICAgICAgICAgICAgICAgICAgICAgID8gM1xuICAgICAgICAgICAgICAgICAgICAgIDogbiAlIDEwMCA+PSAxMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyA0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IDU7XG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbHMgPSB7XG4gICAgICAgICAgICBzOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINir2KfZhtmK2KknLFxuICAgICAgICAgICAgICAgICfYq9in2YbZitipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KvZiNin2YYnLFxuICAgICAgICAgICAgICAgICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgICAgICAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgICAgICAn2K/ZgtmK2YLYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9iv2YLZitmC2KrYp9mGJywgJ9iv2YLZitmC2KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgICAgICAnJWQg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaDogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYs9in2LnYqScsXG4gICAgICAgICAgICAgICAgJ9iz2KfYudipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2LPYp9i52KrYp9mGJywgJ9iz2KfYudiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KknLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZDogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDZitmI2YUnLFxuICAgICAgICAgICAgICAgICfZitmI2YUg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgICAgICAnJWQg2YrZiNmF2YvYpycsXG4gICAgICAgICAgICAgICAgJyVkINmK2YjZhScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgTTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYtNmH2LEnLFxuICAgICAgICAgICAgICAgICfYtNmH2LEg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2LTZh9ix2KfZhicsICfYtNmH2LHZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgICAgICAnJWQg2LTZh9ix2KcnLFxuICAgICAgICAgICAgICAgICclZCDYtNmH2LEnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHk6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LnYp9mFJyxcbiAgICAgICAgICAgICAgICAn2LnYp9mFINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9i52KfZhdin2YYnLCAn2LnYp9mF2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9i52YjYp9mFJyxcbiAgICAgICAgICAgICAgICAnJWQg2LnYp9mF2YvYpycsXG4gICAgICAgICAgICAgICAgJyVkINi52KfZhScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxpemUgPSBmdW5jdGlvbiAodSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gcGx1cmFsc1t1XVtwbHVyYWxGb3JtKG51bWJlcildO1xuICAgICAgICAgICAgICAgIGlmIChmID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBtb250aHMgPSBbXG4gICAgICAgICAgICAn2YrZhtin2YrYsScsXG4gICAgICAgICAgICAn2YHYqNix2KfZitixJyxcbiAgICAgICAgICAgICfZhdin2LHYsycsXG4gICAgICAgICAgICAn2KPYqNix2YrZhCcsXG4gICAgICAgICAgICAn2YXYp9mK2YgnLFxuICAgICAgICAgICAgJ9mK2YjZhtmK2YgnLFxuICAgICAgICAgICAgJ9mK2YjZhNmK2YgnLFxuICAgICAgICAgICAgJ9ij2LrYs9i32LMnLFxuICAgICAgICAgICAgJ9iz2KjYqtmF2KjYsScsXG4gICAgICAgICAgICAn2KPZg9iq2YjYqNixJyxcbiAgICAgICAgICAgICfZhtmI2YHZhdio2LEnLFxuICAgICAgICAgICAgJ9iv2YrYs9mF2KjYsScsXG4gICAgICAgIF07XG5cbiAgICB2YXIgYXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhcicsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QvXFx1MjAwRk0vXFx1MjAwRllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9io2LnYryAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgc3M6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgbTogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBtbTogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBoOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGhoOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGQ6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgZGQ6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgTTogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICBNTTogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICB5OiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgICAgIHl5OiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChBbGdlcmlhKSBbYXItZHpdXG4vLyEgYXV0aG9yIDogQW1pbmUgUm91a2g6IGh0dHBzOi8vZ2l0aHViLmNvbS9BbWluZTI3XG4vLyEgYXV0aG9yIDogQWJkZWwgU2FpZDogaHR0cHM6Ly9naXRodWIuY29tL2FiZGVsc2FpZFxuLy8hIGF1dGhvciA6IEFobWVkIEVsa2hhdGliXG4vLyEgYXV0aG9yIDogZm9yYWJpIGh0dHBzOi8vZ2l0aHViLmNvbS9mb3JhYmlcbi8vISBhdXRob3IgOiBOb3VyZWRkaW5lIExPVUFIRURKIDogaHR0cHM6Ly9naXRodWIuY29tL25vdXJlZGRpbmVtXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgcGx1cmFsRm9ybSA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICByZXR1cm4gbiA9PT0gMFxuICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgIDogbiA9PT0gMVxuICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICA6IG4gPT09IDJcbiAgICAgICAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgICAgICAgIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTBcbiAgICAgICAgICAgICAgICAgICAgICA/IDNcbiAgICAgICAgICAgICAgICAgICAgICA6IG4gJSAxMDAgPj0gMTFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gNFxuICAgICAgICAgICAgICAgICAgICAgICAgOiA1O1xuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxzID0ge1xuICAgICAgICAgICAgczogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYq9in2YbZitipJyxcbiAgICAgICAgICAgICAgICAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9ir2KfZhtmK2KrYp9mGJywgJ9ir2KfZhtmK2KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINir2YjYp9mGJyxcbiAgICAgICAgICAgICAgICAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgICAgICAnJWQg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGg6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LPYp9i52KknLFxuICAgICAgICAgICAgICAgICfYs9in2LnYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGQ6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2YrZiNmFJyxcbiAgICAgICAgICAgICAgICAn2YrZiNmFINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9mK2YjZhdin2YYnLCAn2YrZiNmF2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINmK2YjZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIE06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LTZh9ixJyxcbiAgICAgICAgICAgICAgICAn2LTZh9ixINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsdinJyxcbiAgICAgICAgICAgICAgICAnJWQg2LTZh9ixJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB5OiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi52KfZhScsXG4gICAgICAgICAgICAgICAgJ9i52KfZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYudmI2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINi52KfZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBwbHVyYWxGb3JtKG51bWJlciksXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHJbd2l0aG91dFN1ZmZpeCA/IDAgOiAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzID0gW1xuICAgICAgICAgICAgJ9is2KfZhtmB2YonLFxuICAgICAgICAgICAgJ9mB2YrZgdix2YonLFxuICAgICAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgICAgICfYo9mB2LHZitmEJyxcbiAgICAgICAgICAgICfZhdin2YonLFxuICAgICAgICAgICAgJ9is2YjYp9mGJyxcbiAgICAgICAgICAgICfYrNmI2YrZhNmK2KknLFxuICAgICAgICAgICAgJ9ij2YjYqicsXG4gICAgICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgICAgICfYo9mD2KrZiNio2LEnLFxuICAgICAgICAgICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgICAgICAgICAn2K/Zitiz2YXYqNixJyxcbiAgICAgICAgXTtcblxuICAgIHZhciBhckR6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItZHonLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2YvYpyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfYqNi52K8gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIHNzOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIG06IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgbW06IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgaDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBoaDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBkOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIGRkOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIE06IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgTU06IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgeTogcGx1cmFsaXplKCd5JyksXG4gICAgICAgICAgICB5eTogcGx1cmFsaXplKCd5JyksXG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyRHo7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChLdXdhaXQpIFthci1rd11cbi8vISBhdXRob3IgOiBOdXNyZXQgUGFybGFrOiBodHRwczovL2dpdGh1Yi5jb20vbnVzcmV0cGFybGFrXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYXJLdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWt3Jywge1xuICAgICAgICBtb250aHM6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYqtmG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KfYrdivX9in2KrZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzczogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbTogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW06ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE06ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU06ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPZhtmI2KfYqicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyS3c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChMaWJ5YSkgW2FyLWx5XVxuLy8hIGF1dGhvciA6IEFsaSBIbWVyOiBodHRwczovL2dpdGh1Yi5jb20va2lrb2FuaXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAnMScsXG4gICAgICAgICAgICAyOiAnMicsXG4gICAgICAgICAgICAzOiAnMycsXG4gICAgICAgICAgICA0OiAnNCcsXG4gICAgICAgICAgICA1OiAnNScsXG4gICAgICAgICAgICA2OiAnNicsXG4gICAgICAgICAgICA3OiAnNycsXG4gICAgICAgICAgICA4OiAnOCcsXG4gICAgICAgICAgICA5OiAnOScsXG4gICAgICAgICAgICAwOiAnMCcsXG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbEZvcm0gPSBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgcmV0dXJuIG4gPT09IDBcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IG4gPT09IDFcbiAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgOiBuID09PSAyXG4gICAgICAgICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICAgICAgICA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwXG4gICAgICAgICAgICAgICAgICAgICAgPyAzXG4gICAgICAgICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDExXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogNTtcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFscyA9IHtcbiAgICAgICAgICAgIHM6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYq9mI2KfZhicsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgICAgICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLFxuICAgICAgICAgICAgICAgICfYr9mC2YrZgtipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2K/ZgtmK2YLYqtin2YYnLCAn2K/ZgtmK2YLYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBoOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAn2LPYp9i52Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYs9in2LnYqtin2YYnLCAn2LPYp9i52KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYqScsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINmK2YjZhScsXG4gICAgICAgICAgICAgICAgJ9mK2YjZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YXZi9inJyxcbiAgICAgICAgICAgICAgICAnJWQg2YrZiNmFJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBNOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi02YfYsScsXG4gICAgICAgICAgICAgICAgJ9i02YfYsSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYtNmH2LHYp9mGJywgJ9i02YfYsdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgICAgICclZCDYtNmH2LHYpycsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYudin2YUnLFxuICAgICAgICAgICAgICAgICfYudin2YUg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2LnYp9mF2KfZhicsICfYudin2YXZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2LnZiNin2YUnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YXZi9inJyxcbiAgICAgICAgICAgICAgICAnJWQg2LnYp9mFJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBwbHVyYWxzW3VdW3BsdXJhbEZvcm0obnVtYmVyKV07XG4gICAgICAgICAgICAgICAgaWYgKGYgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfZitmG2KfZitixJyxcbiAgICAgICAgICAgICfZgdio2LHYp9mK2LEnLFxuICAgICAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgICAgICfYo9io2LHZitmEJyxcbiAgICAgICAgICAgICfZhdin2YrZiCcsXG4gICAgICAgICAgICAn2YrZiNmG2YrZiCcsXG4gICAgICAgICAgICAn2YrZiNmE2YrZiCcsXG4gICAgICAgICAgICAn2KPYutiz2LfYsycsXG4gICAgICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgICAgICfYo9mD2KrZiNio2LEnLFxuICAgICAgICAgICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgICAgICAgICAn2K/Zitiz2YXYqNixJyxcbiAgICAgICAgXTtcblxuICAgIHZhciBhckx5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItbHknLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2YvYpyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfYqNi52K8gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIHNzOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIG06IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgbW06IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgaDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBoaDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBkOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIGRkOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIE06IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgTU06IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgeTogcGx1cmFsaXplKCd5JyksXG4gICAgICAgICAgICB5eTogcGx1cmFsaXplKCd5JyksXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyTHk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChNb3JvY2NvKSBbYXItbWFdXG4vLyEgYXV0aG9yIDogRWxGYWRpbGkgWWFzc2luZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9FbEZhZGlsaVlcbi8vISBhdXRob3IgOiBBYmRlbCBTYWlkIDogaHR0cHM6Ly9naXRodWIuY29tL2FiZGVsc2FpZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGFyTWEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1tYScsIHtcbiAgICAgICAgbW9udGhzOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9in2K3Yr1/Yp9ir2YbZitmGX9ir2YTYp9ir2KfYoV/Yp9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3M6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG06ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQ6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeTogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eTogJyVkINiz2YbZiNin2KonLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJNYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKFBhbGVzdGluZSkgW2FyLXBzXVxuLy8hIGF1dGhvciA6IE1hamQgQWwtU2hpaGFiaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYWpkYWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn2aEnLFxuICAgICAgICAgICAgMjogJ9miJyxcbiAgICAgICAgICAgIDM6ICfZoycsXG4gICAgICAgICAgICA0OiAn2aQnLFxuICAgICAgICAgICAgNTogJ9mlJyxcbiAgICAgICAgICAgIDY6ICfZpicsXG4gICAgICAgICAgICA3OiAn2acnLFxuICAgICAgICAgICAgODogJ9moJyxcbiAgICAgICAgICAgIDk6ICfZqScsXG4gICAgICAgICAgICAwOiAn2aAnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICAgICAn2aInOiAnMicsXG4gICAgICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICAgICAn2aUnOiAnNScsXG4gICAgICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICAgICAn2agnOiAnOCcsXG4gICAgICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICAgICAn2aAnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgYXJQcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXBzJywge1xuICAgICAgICBtb250aHM6ICfZg9in2YbZiNmGINin2YTYq9in2YbZil/YtNio2KfYt1/Yotiw2KfYsV/ZhtmK2LPYp9mGX9ij2YrZkdin2LFf2K3YstmK2LHYp9mGX9iq2YXZkdmI2LJf2KLYqF/Yo9mK2YTZiNmEX9iq2LTYsdmKINin2YTYo9mI2ZHZhF/Yqti02LHZitmGINin2YTYq9in2YbZil/Zg9in2YbZiNmGINin2YTYo9mI2ZHZhCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn2YPZol/YtNio2KfYt1/Yotiw2KfYsV/ZhtmK2LPYp9mGX9ij2YrZkdin2LFf2K3YstmK2LHYp9mGX9iq2YXZkdmI2LJf2KLYqF/Yo9mK2YTZiNmEX9iq2aFf2KrZol/Zg9mhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzczogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbTogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW06ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE06ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU06ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPZhtmI2KfYqicsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1vZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3BsaXQoJycpIC8vIHJldmVyc2VkIHNpbmNlIG5lZ2F0aXZlIGxvb2tiZWhpbmQgbm90IHN1cHBvcnRlZCBldmVyeXdoZXJlXG4gICAgICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgICAgIC5qb2luKCcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9b2aHZol0oPyFbXFx1MDYyYVxcdTA2NDNdKS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3BsaXQoJycpXG4gICAgICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgICAgIC5qb2luKCcnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyUHM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChTYXVkaSBBcmFiaWEpIFthci1zYV1cbi8vISBhdXRob3IgOiBTdWhhaWwgQWxrb3dhaWxlZXQgOiBodHRwczovL2dpdGh1Yi5jb20veHNvaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfZoScsXG4gICAgICAgICAgICAyOiAn2aInLFxuICAgICAgICAgICAgMzogJ9mjJyxcbiAgICAgICAgICAgIDQ6ICfZpCcsXG4gICAgICAgICAgICA1OiAn2aUnLFxuICAgICAgICAgICAgNjogJ9mmJyxcbiAgICAgICAgICAgIDc6ICfZpycsXG4gICAgICAgICAgICA4OiAn2agnLFxuICAgICAgICAgICAgOTogJ9mpJyxcbiAgICAgICAgICAgIDA6ICfZoCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgICAgICfZoic6ICcyJyxcbiAgICAgICAgICAgICfZoyc6ICczJyxcbiAgICAgICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgICAgICfZpSc6ICc1JyxcbiAgICAgICAgICAgICfZpic6ICc2JyxcbiAgICAgICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgICAgICfZqCc6ICc4JyxcbiAgICAgICAgICAgICfZqSc6ICc5JyxcbiAgICAgICAgICAgICfZoCc6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBhclNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItc2EnLCB7XG4gICAgICAgIG1vbnRoczogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mK2Yhf2YrZiNmG2YrZiF/ZitmI2YTZitmIX9ij2LrYs9i32LNf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZitmIX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiF/Yo9i62LPYt9izX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzczogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbTogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW06ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE06ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU06ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPZhtmI2KfYqicsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1vZodmi2aPZpNml2abZp9mo2anZoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJTYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgIDogIEFyYWJpYyAoVHVuaXNpYSkgW2FyLXRuXVxuLy8hIGF1dGhvciA6IE5hZGVyIFRvdWthYnJpIDogaHR0cHM6Ly9naXRodWIuY29tL25hZGVyaW9cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBhclRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItdG4nLCB7XG4gICAgICAgIG1vbnRoczogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzczogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbTogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW06ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE06ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU06ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPZhtmI2KfYqicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhclRuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEF6ZXJiYWlqYW5pIFthel1cbi8vISBhdXRob3IgOiB0b3BjaGl5ZXYgOiBodHRwczovL2dpdGh1Yi5jb20vdG9wY2hpeWV2XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDE6ICctaW5jaScsXG4gICAgICAgIDU6ICctaW5jaScsXG4gICAgICAgIDg6ICctaW5jaScsXG4gICAgICAgIDcwOiAnLWluY2knLFxuICAgICAgICA4MDogJy1pbmNpJyxcbiAgICAgICAgMjogJy1uY2knLFxuICAgICAgICA3OiAnLW5jaScsXG4gICAgICAgIDIwOiAnLW5jaScsXG4gICAgICAgIDUwOiAnLW5jaScsXG4gICAgICAgIDM6ICctw7xuY8O8JyxcbiAgICAgICAgNDogJy3DvG5jw7wnLFxuICAgICAgICAxMDA6ICctw7xuY8O8JyxcbiAgICAgICAgNjogJy1uY8SxJyxcbiAgICAgICAgOTogJy11bmN1JyxcbiAgICAgICAgMTA6ICctdW5jdScsXG4gICAgICAgIDMwOiAnLXVuY3UnLFxuICAgICAgICA2MDogJy3EsW5jxLEnLFxuICAgICAgICA5MDogJy3EsW5jxLEnLFxuICAgIH07XG5cbiAgICB2YXIgYXogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdheicsIHtcbiAgICAgICAgbW9udGhzOiAneWFudmFyX2ZldnJhbF9tYXJ0X2FwcmVsX21heV9peXVuX2l5dWxfYXZxdXN0X3NlbnR5YWJyX29rdHlhYnJfbm95YWJyX2Rla2Ficicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICd5YW5fZmV2X21hcl9hcHJfbWF5X2l5bl9peWxfYXZxX3Nlbl9va3Rfbm95X2Rlaycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnQmF6YXJfQmF6YXIgZXJ0yZlzaV/Dh8mZcsWfyZluYsmZIGF4xZ9hbcSxX8OHyZlyxZ/JmW5iyZlfQ8O8bcmZIGF4xZ9hbcSxX0PDvG3JmV/FnsmZbmLJmScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnQmF6X0J6RV/Dh0F4X8OHyZlyX0NBeF9Dw7xtX8WeyZluJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0J6X0JFX8OHQV/Dh8mZX0NBX0PDvF/FnsmZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbc2FiYWggc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbZ8mZbMmZbiBoyZlmdMmZXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2TDvG7JmW5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2tlw6fJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBzb25yYScsXG4gICAgICAgICAgICBwYXN0OiAnJXMgyZl2dsmZbCcsXG4gICAgICAgICAgICBzOiAnYmlyIG5lw6fJmSBzYW5pecmZJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2FuaXnJmScsXG4gICAgICAgICAgICBtOiAnYmlyIGTJmXFpccmZJyxcbiAgICAgICAgICAgIG1tOiAnJWQgZMmZcWlxyZknLFxuICAgICAgICAgICAgaDogJ2JpciBzYWF0JyxcbiAgICAgICAgICAgIGhoOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBkOiAnYmlyIGfDvG4nLFxuICAgICAgICAgICAgZGQ6ICclZCBnw7xuJyxcbiAgICAgICAgICAgIE06ICdiaXIgYXknLFxuICAgICAgICAgICAgTU06ICclZCBheScsXG4gICAgICAgICAgICB5OiAnYmlyIGlsJyxcbiAgICAgICAgICAgIHl5OiAnJWQgaWwnLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZ2VjyZl8c8mZaMmZcnxnw7xuZMO8enxheMWfYW0vLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXihnw7xuZMO8enxheMWfYW0pJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2dlY8mZJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzyZloyZlyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnw7xuZMO8eic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnYXjFn2FtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjEsW5jxLF8aW5jaXxuY2l8w7xuY8O8fG5jxLF8dW5jdSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICctxLFuY8SxJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IChudW1iZXIgJSAxMDApIC0gYSxcbiAgICAgICAgICAgICAgICBjID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdIHx8IHN1ZmZpeGVzW2NdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGF6O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJlbGFydXNpYW4gW2JlXVxuLy8hIGF1dGhvciA6IERtaXRyeSBEZW1pZG92IDogaHR0cHM6Ly9naXRodWIuY29tL2RlbWlkb3Y5MVxuLy8hIGF1dGhvcjogUHJhbGVza2E6IGh0dHA6Ly9wcmFsZXNrYS5wcm8vXG4vLyEgQXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMVxuICAgICAgICAgICAgPyBmb3Jtc1swXVxuICAgICAgICAgICAgOiBudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMClcbiAgICAgICAgICAgICAgPyBmb3Jtc1sxXVxuICAgICAgICAgICAgICA6IGZvcm1zWzJdO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzczogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtbTogd2l0aG91dFN1ZmZpeCA/ICfRhdCy0ZbQu9GW0L3QsF/RhdCy0ZbQu9GW0L3Ri1/RhdCy0ZbQu9GW0L0nIDogJ9GF0LLRltC70ZbQvdGDX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScsXG4gICAgICAgICAgICBoaDogd2l0aG91dFN1ZmZpeCA/ICfQs9Cw0LTQt9GW0L3QsF/Qs9Cw0LTQt9GW0L3Ri1/Qs9Cw0LTQt9GW0L0nIDogJ9Cz0LDQtNC30ZbQvdGDX9Cz0LDQtNC30ZbQvdGLX9Cz0LDQtNC30ZbQvScsXG4gICAgICAgICAgICBkZDogJ9C00LfQtdC90Yxf0LTQvdGWX9C00LfRkdC9JyxcbiAgICAgICAgICAgIE1NOiAn0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0Ytf0LzQtdGB0Y/RhtCw0Z4nLFxuICAgICAgICAgICAgeXk6ICfQs9C+0LRf0LPQsNC00Ytf0LPQsNC00L7RnicsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstGW0LvRltC90LAnIDogJ9GF0LLRltC70ZbQvdGDJztcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LAnIDogJ9Cz0LDQtNC30ZbQvdGDJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYmUnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0YHRgtGD0LTQt9C10L3Rj1/Qu9GO0YLQsNCz0LBf0YHQsNC60LDQstGW0LrQsF/QutGA0LDRgdCw0LLRltC60LBf0YLRgNCw0Z7QvdGPX9GH0Y3RgNCy0LXQvdGPX9C70ZbQv9C10L3Rj1/QttC90ZbRntC90Y9f0LLQtdGA0LDRgdC90Y9f0LrQsNGB0YLRgNGL0YfQvdGW0LrQsF/Qu9GW0YHRgtCw0L/QsNC00LBf0YHQvdC10LbQvdGPJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfRgdGC0YPQtNC30LXQvdGMX9C70Y7RgtGLX9GB0LDQutCw0LLRltC6X9C60YDQsNGB0LDQstGW0Lpf0YLRgNCw0LLQtdC90Yxf0YfRjdGA0LLQtdC90Yxf0LvRltC/0LXQvdGMX9C20L3RltCy0LXQvdGMX9Cy0LXRgNCw0YHQtdC90Yxf0LrQsNGB0YLRgNGL0YfQvdGW0Lpf0LvRltGB0YLQsNC/0LDQtF/RgdC90LXQttCw0L3RjCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9GB0YLRg9C0X9C70Y7Rgl/RgdCw0Lpf0LrRgNCw0YFf0YLRgNCw0LJf0YfRjdGA0LJf0LvRltC/X9C20L3RltCyX9Cy0LXRgF/QutCw0YHRgl/Qu9GW0YHRgl/RgdC90LXQticuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9C90Y/QtNC30LXQu9GOX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTRg1/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0YNf0YHRg9Cx0L7RgtGDJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfQvdGP0LTQt9C10LvRj1/Qv9Cw0L3Rj9C00LfQtdC70LDQul/QsNGe0YLQvtGA0LDQul/RgdC10YDQsNC00LBf0YfQsNGG0LLQtdGAX9C/0Y/RgtC90ZbRhtCwX9GB0YPQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9Cj0YPRnl0gPyg/OtC80ZbQvdGD0LvRg9GOfNC90LDRgdGC0YPQv9C90YPRjik/ID9cXF0gP2RkZGQvLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0L3QtF/Qv9C9X9Cw0YJf0YHRgF/Rh9GGX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvdC0X9C/0L1f0LDRgl/RgdGAX9GH0YZf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSDQsy4sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0KHRkdC90L3RjyDRnl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQl9Cw0Z7RgtGA0LAg0Z5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0KPRh9C+0YDQsCDRnl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1vQo10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQoyDQvNGW0L3Rg9C70YPRjl0gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRi10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQv9GA0LDQtyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg0YLQsNC80YMnLFxuICAgICAgICAgICAgczogJ9C90LXQutCw0LvRjNC60ZYg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQ6ICfQtNC30LXQvdGMJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTTogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5OiAn0LPQvtC0JyxcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0Yt80YDQsNC90ZbRhtGLfNC00L3Rj3zQstC10YfQsNGA0LAvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LDRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfRiyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YDQsNC90ZbRhtGLJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9Cw0YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0ZZ80Yt80LPQsCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChudW1iZXIgJSAxMCA9PT0gMiB8fCBudW1iZXIgJSAxMCA9PT0gMykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciAlIDEwMCAhPT0gMTIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciAlIDEwMCAhPT0gMTNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbnVtYmVyICsgJy3RlidcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVtYmVyICsgJy3Riyc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0LAnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBiZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCdWxnYXJpYW4gW2JnXVxuLy8hIGF1dGhvciA6IEtyYXNlbiBCb3Jpc292IDogaHR0cHM6Ly9naXRodWIuY29tL2tyYXpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBiZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JnJywge1xuICAgICAgICBtb250aHM6ICfRj9C90YPQsNGA0Lhf0YTQtdCy0YDRg9Cw0YDQuF/QvNCw0YDRgl/QsNC/0YDQuNC7X9C80LDQuV/RjtC90Lhf0Y7Qu9C4X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQstGA0Lhf0L7QutGC0L7QvNCy0YDQuF/QvdC+0LXQvNCy0YDQuF/QtNC10LrQtdC80LLRgNC4Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9GP0L3Rg1/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0Y7QvdC4X9GO0LvQuF/QsNCy0LNf0YHQtdC/X9C+0LrRgl/QvdC+0LVf0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9C90LXQtNC10LvRj1/Qv9C+0L3QtdC00LXQu9C90LjQul/QstGC0L7RgNC90LjQul/RgdGA0Y/QtNCwX9GH0LXRgtCy0YrRgNGC0YrQul/Qv9C10YLRitC6X9GB0YrQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LXQtF/Qv9C+0L1f0LLRgtC+X9GB0YDRj1/Rh9C10YJf0L/QtdGCX9GB0YrQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvdC0X9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQlNC90LXRgSDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQo9GC0YDQtSDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQktGH0LXRgNCwINCyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JzQuNC90LDQu9Cw0YLQsF0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JzQuNC90LDQu9C40Y9dIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0YHQu9C10LQgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9C/0YDQtdC00LggJXMnLFxuICAgICAgICAgICAgczogJ9C90Y/QutC+0LvQutC+INGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIHNzOiAnJWQg0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgbTogJ9C80LjQvdGD0YLQsCcsXG4gICAgICAgICAgICBtbTogJyVkINC80LjQvdGD0YLQuCcsXG4gICAgICAgICAgICBoOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YfQsNGB0LAnLFxuICAgICAgICAgICAgZDogJ9C00LXQvScsXG4gICAgICAgICAgICBkZDogJyVkINC00LXQvdCwJyxcbiAgICAgICAgICAgIHc6ICfRgdC10LTQvNC40YbQsCcsXG4gICAgICAgICAgICB3dzogJyVkINGB0LXQtNC80LjRhtC4JyxcbiAgICAgICAgICAgIE06ICfQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NOiAnJWQg0LzQtdGB0LXRhtCwJyxcbiAgICAgICAgICAgIHk6ICfQs9C+0LTQuNC90LAnLFxuICAgICAgICAgICAgeXk6ICclZCDQs9C+0LTQuNC90LgnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC10LJ80LXQvXzRgtC4fNCy0Lh80YDQuHzQvNC4KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdCyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdC9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPiAxMCAmJiBsYXN0MkRpZ2l0cyA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCy0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgNC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSA3IHx8IGxhc3REaWdpdCA9PT0gOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJnO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJhbWJhcmEgW2JtXVxuLy8hIGF1dGhvciA6IEVzdGVsbGUgQ29tbWVudCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9lc3RlbGxlY29tbWVudFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGJtID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm0nLCB7XG4gICAgICAgIG1vbnRoczogJ1phbnd1eWVrYWxvX0Zld3VydXlla2Fsb19NYXJpc2lrYWxvX0F3aXJpbGlrYWxvX03Jm2thbG9fWnV3yZtua2Fsb19adWx1eWVrYWxvX1V0aWthbG9fU8mbdGFuYnVydWthbG9fyZRrdXTJlGJ1cnVrYWxvX05vd2FuYnVydWthbG9fRGVzYW5idXJ1a2Fsbycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdaYW5fRmV3X01hcl9Bd2lfTcmbX1p1d19adWxfVXRpX1PJm3RfyZRrdV9Ob3dfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0thcmlfTnTJm27Jm25fVGFyYXRhX0FyYWJhX0FsYW1pc2FfSnVtYV9TaWJpcmknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdLYXJfTnTJm19UYXJfQXJhX0FsYV9KdW1fU2liJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0thX050X1RhX0FyX0FsX0p1X1NpJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ01NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVkgW2zJm3LJm10gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZIFtsyZtyyZtdIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQmkgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1NpbmkgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2RvbiBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS3VudSBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbdMmbbcmbbmVuIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBryZRuyZQnLFxuICAgICAgICAgICAgcGFzdDogJ2EgYsmbICVzIGLJlCcsXG4gICAgICAgICAgICBzOiAnc2FuZ2EgZGFtYSBkYW1hJyxcbiAgICAgICAgICAgIHNzOiAnc2Vrb25kaSAlZCcsXG4gICAgICAgICAgICBtOiAnbWluaXRpIGtlbGVuJyxcbiAgICAgICAgICAgIG1tOiAnbWluaXRpICVkJyxcbiAgICAgICAgICAgIGg6ICdsyZtyyZsga2VsZW4nLFxuICAgICAgICAgICAgaGg6ICdsyZtyyZsgJWQnLFxuICAgICAgICAgICAgZDogJ3RpbGUga2VsZW4nLFxuICAgICAgICAgICAgZGQ6ICd0aWxlICVkJyxcbiAgICAgICAgICAgIE06ICdrYWxvIGtlbGVuJyxcbiAgICAgICAgICAgIE1NOiAna2FsbyAlZCcsXG4gICAgICAgICAgICB5OiAnc2FuIGtlbGVuJyxcbiAgICAgICAgICAgIHl5OiAnc2FuICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJtO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJlbmdhbGkgW2JuXVxuLy8hIGF1dGhvciA6IEthdXNoaWsgR2FuZGhpIDogaHR0cHM6Ly9naXRodWIuY29tL2thdXNoaWtnYW5kaGlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4KenJyxcbiAgICAgICAgICAgIDI6ICfgp6gnLFxuICAgICAgICAgICAgMzogJ+CnqScsXG4gICAgICAgICAgICA0OiAn4KeqJyxcbiAgICAgICAgICAgIDU6ICfgp6snLFxuICAgICAgICAgICAgNjogJ+CnrCcsXG4gICAgICAgICAgICA3OiAn4KetJyxcbiAgICAgICAgICAgIDg6ICfgp64nLFxuICAgICAgICAgICAgOTogJ+CnrycsXG4gICAgICAgICAgICAwOiAn4KemJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Cnpyc6ICcxJyxcbiAgICAgICAgICAgICfgp6gnOiAnMicsXG4gICAgICAgICAgICAn4KepJzogJzMnLFxuICAgICAgICAgICAgJ+Cnqic6ICc0JyxcbiAgICAgICAgICAgICfgp6snOiAnNScsXG4gICAgICAgICAgICAn4KesJzogJzYnLFxuICAgICAgICAgICAgJ+CnrSc6ICc3JyxcbiAgICAgICAgICAgICfgp64nOiAnOCcsXG4gICAgICAgICAgICAn4KevJzogJzknLFxuICAgICAgICAgICAgJ+Cnpic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBibiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JuJywge1xuICAgICAgICBtb250aHM6ICfgppzgpr7gpqjgp4Hgp5/gpr7gprDgpr9f4Kar4KeH4Kas4KeN4Kaw4KeB4Kef4Ka+4Kaw4Ka/X+CmruCmvuCmsOCnjeCmml/gpo/gpqrgp43gprDgpr/gprJf4Kau4KeHX+CmnOCngeCmqF/gppzgp4HgprLgpr7gpodf4KaG4KaX4Ka44KeN4KafX+CmuOCnh+CmquCnjeCmn+Cnh+CmruCnjeCmrOCmsF/gpoXgppXgp43gpp/gp4vgpqzgprBf4Kao4Kat4KeH4Kau4KeN4Kas4KawX+CmoeCmv+CmuOCnh+CmruCnjeCmrOCmsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4Kac4Ka+4Kao4KeBX+Cmq+Cnh+CmrOCnjeCmsOCngV/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4Kaw4Ka/4KayX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4Kay4Ka+4KaHX+CmhuCml+CmuOCnjeCmn1/gprjgp4fgpqrgp43gpp9f4KaF4KaV4KeN4Kaf4KeLX+CmqOCmreCnh1/gpqHgpr/gprjgp4cnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfgprDgpqzgpr/gpqzgpr7gprBf4Ka44KeL4Kau4Kas4Ka+4KawX+CmruCmmeCnjeCml+CmsuCmrOCmvuCmsF/gpqzgp4Hgpqfgpqzgpr7gprBf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4Ka/4Kas4Ka+4KawX+CmtuCngeCmleCnjeCmsOCmrOCmvuCmsF/gprbgpqjgpr/gpqzgpr7gprAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml+Cmsl/gpqzgp4Hgpqdf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4Ka/X+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4Kaw4Kas4Ka/X+CmuOCni+Cmrl/gpq7gppngp43gppfgprJf4Kas4KeB4KanX+CmrOCng+CmuV/gprbgp4HgppXgp43gprBf4Ka24Kao4Ka/Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgprjgpq7gp58nLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgpobgppxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KaG4KaX4Ka+4Kau4KeA4KaV4Ka+4KayXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KaX4Kak4KaV4Ka+4KayXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgppfgpqRdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4Kaq4Kaw4KeHJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgpobgppfgp4cnLFxuICAgICAgICAgICAgczogJ+CmleCnn+Cnh+CmlSDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICAgICAgc3M6ICclZCDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICAgICAgbTogJ+Cmj+CmlSDgpq7gpr/gpqjgpr/gpp8nLFxuICAgICAgICAgICAgbW06ICclZCDgpq7gpr/gpqjgpr/gpp8nLFxuICAgICAgICAgICAgaDogJ+Cmj+CmlSDgppjgpqjgp43gpp/gpr4nLFxuICAgICAgICAgICAgaGg6ICclZCDgppjgpqjgp43gpp/gpr4nLFxuICAgICAgICAgICAgZDogJ+Cmj+CmlSDgpqbgpr/gpqgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgpqbgpr/gpqgnLFxuICAgICAgICAgICAgTTogJ+Cmj+CmlSDgpq7gpr7gprgnLFxuICAgICAgICAgICAgTU06ICclZCDgpq7gpr7gprgnLFxuICAgICAgICAgICAgeTogJ+Cmj+CmlSDgpqzgppvgprAnLFxuICAgICAgICAgICAgeXk6ICclZCDgpqzgppvgprAnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Ken4Keo4Kep4Keq4Ker4Kes4Ket4Keu4Kev4KemXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Kaw4Ka+4KakfOCmuOCmleCmvuCmsnzgpqbgp4Hgpqrgp4HgprB84Kas4Ka/4KaV4Ka+4KayfOCmsOCmvuCmpC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgprDgpr7gpqQnICYmIGhvdXIgPj0gNCkgfHxcbiAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgpqbgp4Hgpqrgp4HgprAnICYmIGhvdXIgPCA1KSB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4Kas4Ka/4KaV4Ka+4KayJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmsOCmvuCmpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ka44KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpqbgp4Hgpqrgp4HgprAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmrOCmv+CmleCmvuCmsic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJlbmdhbGkgKEJhbmdsYWRlc2gpIFtibi1iZF1cbi8vISBhdXRob3IgOiBBc3JhZiBIb3NzYWluIFBhdG9hcnkgOiBodHRwczovL2dpdGh1Yi5jb20vYXNod29vbGZvcmRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4KenJyxcbiAgICAgICAgICAgIDI6ICfgp6gnLFxuICAgICAgICAgICAgMzogJ+CnqScsXG4gICAgICAgICAgICA0OiAn4KeqJyxcbiAgICAgICAgICAgIDU6ICfgp6snLFxuICAgICAgICAgICAgNjogJ+CnrCcsXG4gICAgICAgICAgICA3OiAn4KetJyxcbiAgICAgICAgICAgIDg6ICfgp64nLFxuICAgICAgICAgICAgOTogJ+CnrycsXG4gICAgICAgICAgICAwOiAn4KemJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Cnpyc6ICcxJyxcbiAgICAgICAgICAgICfgp6gnOiAnMicsXG4gICAgICAgICAgICAn4KepJzogJzMnLFxuICAgICAgICAgICAgJ+Cnqic6ICc0JyxcbiAgICAgICAgICAgICfgp6snOiAnNScsXG4gICAgICAgICAgICAn4KesJzogJzYnLFxuICAgICAgICAgICAgJ+CnrSc6ICc3JyxcbiAgICAgICAgICAgICfgp64nOiAnOCcsXG4gICAgICAgICAgICAn4KevJzogJzknLFxuICAgICAgICAgICAgJ+Cnpic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBibkJkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm4tYmQnLCB7XG4gICAgICAgIG1vbnRoczogJ+CmnOCmvuCmqOCngeCnn+CmvuCmsOCmv1/gpqvgp4fgpqzgp43gprDgp4Hgp5/gpr7gprDgpr9f4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4Kaf4KeH4Kau4KeN4Kas4KawX+CmheCmleCnjeCmn+Cni+CmrOCmsF/gpqjgpq3gp4fgpq7gp43gpqzgprBf4Kah4Ka/4Ka44KeH4Kau4KeN4Kas4KawJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgppzgpr7gpqjgp4Ff4Kar4KeH4Kas4KeN4Kaw4KeBX+CmruCmvuCmsOCnjeCmml/gpo/gpqrgp43gprDgpr/gprJf4Kau4KeHX+CmnOCngeCmqF/gppzgp4HgprLgpr7gpodf4KaG4KaX4Ka44KeN4KafX+CmuOCnh+CmquCnjeCmn1/gpoXgppXgp43gpp/gp4tf4Kao4Kat4KeHX+CmoeCmv+CmuOCnhycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+CmsOCmrOCmv+CmrOCmvuCmsF/gprjgp4vgpq7gpqzgpr7gprBf4Kau4KaZ4KeN4KaX4Kay4Kas4Ka+4KawX+CmrOCngeCmp+CmrOCmvuCmsF/gpqzgp4Pgprngprjgp43gpqrgpqTgpr/gpqzgpr7gprBf4Ka24KeB4KaV4KeN4Kaw4Kas4Ka+4KawX+CmtuCmqOCmv+CmrOCmvuCmsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaX4KayX+CmrOCngeCmp1/gpqzgp4Pgprngprjgp43gpqrgpqTgpr9f4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml+Cmsl/gpqzgp4Hgpqdf4Kas4KeD4Ka5X+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgprjgpq7gp58nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CmhuCmnF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpobgppfgpr7gpq7gp4DgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgppfgpqTgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+Cml+CmpF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgpqrgprDgp4cnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCmhuCml+CnhycsXG4gICAgICAgICAgICBzOiAn4KaV4Kef4KeH4KaVIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBzczogJyVkIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBtOiAn4KaP4KaVIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBtbTogJyVkIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBoOiAn4KaP4KaVIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBoaDogJyVkIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBkOiAn4KaP4KaVIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBkZDogJyVkIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBNOiAn4KaP4KaVIOCmruCmvuCmuCcsXG4gICAgICAgICAgICBNTTogJyVkIOCmruCmvuCmuCcsXG4gICAgICAgICAgICB5OiAn4KaP4KaVIOCmrOCmm+CmsCcsXG4gICAgICAgICAgICB5eTogJyVkIOCmrOCmm+CmsCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgp6fgp6jgp6ngp6rgp6vgp6zgp63gp67gp6/gp6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CmsOCmvuCmpHzgpq3gp4vgprB84Ka44KaV4Ka+4KayfOCmpuCngeCmquCngeCmsHzgpqzgpr/gppXgpr7gprJ84Ka44Kao4KeN4Kan4KeN4Kav4Ka+fOCmsOCmvuCmpC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CmsOCmvuCmpCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CmreCni+CmsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgprjgppXgpr7gprInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kam4KeB4Kaq4KeB4KawJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDMgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CmrOCmv+CmleCmvuCmsicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CmuOCmqOCnjeCmp+CnjeCmr+CmvicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmsOCmvuCmpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCA2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpq3gp4vgprAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmuOCmleCmvuCmsic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kam4KeB4Kaq4KeB4KawJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpqzgpr/gppXgpr7gprInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmuOCmqOCnjeCmp+CnjeCmr+Cmvic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJuQmQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGliZXRhbiBbYm9dXG4vLyEgYXV0aG9yIDogVGh1cHRlbiBOLiBDaGFrcmlzaGFyIDogaHR0cHM6Ly9naXRodWIuY29tL3ZhanJhZG9nXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+C8oScsXG4gICAgICAgICAgICAyOiAn4LyiJyxcbiAgICAgICAgICAgIDM6ICfgvKMnLFxuICAgICAgICAgICAgNDogJ+C8pCcsXG4gICAgICAgICAgICA1OiAn4LylJyxcbiAgICAgICAgICAgIDY6ICfgvKYnLFxuICAgICAgICAgICAgNzogJ+C8pycsXG4gICAgICAgICAgICA4OiAn4LyoJyxcbiAgICAgICAgICAgIDk6ICfgvKknLFxuICAgICAgICAgICAgMDogJ+C8oCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgvKEnOiAnMScsXG4gICAgICAgICAgICAn4LyiJzogJzInLFxuICAgICAgICAgICAgJ+C8oyc6ICczJyxcbiAgICAgICAgICAgICfgvKQnOiAnNCcsXG4gICAgICAgICAgICAn4LylJzogJzUnLFxuICAgICAgICAgICAgJ+C8pic6ICc2JyxcbiAgICAgICAgICAgICfgvKcnOiAnNycsXG4gICAgICAgICAgICAn4LyoJzogJzgnLFxuICAgICAgICAgICAgJ+C8qSc6ICc5JyxcbiAgICAgICAgICAgICfgvKAnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgYm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibycsIHtcbiAgICAgICAgbW9udGhzOiAn4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZQnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+C9n+C+s+C8izFf4L2f4L6z4LyLMl/gvZ/gvrPgvIszX+C9n+C+s+C8izRf4L2f4L6z4LyLNV/gvZ/gvrPgvIs2X+C9n+C+s+C8izdf4L2f4L6z4LyLOF/gvZ/gvrPgvIs5X+C9n+C+s+C8izEwX+C9n+C+s+C8izExX+C9n+C+s+C8izEyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IC9eKOC9n+C+s+C8i1xcZHsxLDJ9KS8sXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ+C9guC9n+C9oOC8i+C9ieC9suC8i+C9mOC8i1/gvYLgvZ/gvaDgvIvgvZ/gvrPgvIvgvZbgvItf4L2C4L2f4L2g4LyL4L2Y4L2y4L2C4LyL4L2R4L2Y4L2i4LyLX+C9guC9n+C9oOC8i+C9o+C+t+C9guC8i+C9lOC8i1/gvYLgvZ/gvaDgvIvgvZXgvbTgvaLgvIvgvZbgvbRf4L2C4L2f4L2g4LyL4L2U4LyL4L2m4L2E4L2m4LyLX+C9guC9n+C9oOC8i+C9puC+pOC9uuC9k+C8i+C9lOC8iycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4L2J4L2y4LyL4L2Y4LyLX+C9n+C+s+C8i+C9luC8i1/gvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2j4L634L2C4LyL4L2U4LyLX+C9leC9tOC9ouC8i+C9luC9tF/gvZTgvIvgvabgvYTgvabgvItf4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+C9ieC9sl/gvZ/gvrNf4L2Y4L2y4L2CX+C9o+C+t+C9gl/gvZXgvbTgvaJf4L2m4L2E4L2mX+C9puC+pOC9uuC9kycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgvZHgvbLgvIvgvaLgvbLgvYRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4L2m4L2E4LyL4L2J4L2y4L2TXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vgvZbgvZHgvbTgvZPgvIvgvZXgvrLgvYLgvIvgvaLgvpfgvbrgvabgvIvgvZhdLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+C9geC8i+C9puC9hF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4L2W4L2R4L204L2T4LyL4L2V4L6y4L2C4LyL4L2Y4L2Q4L2g4LyL4L2YXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOC9o+C8iycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4L2m4L6U4L2T4LyL4L2jJyxcbiAgICAgICAgICAgIHM6ICfgvaPgvZjgvIvgvabgvYQnLFxuICAgICAgICAgICAgc3M6ICclZCDgvabgvpDgvaLgvIvgvYbgvI0nLFxuICAgICAgICAgICAgbTogJ+C9puC+kOC9ouC8i+C9mOC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBtbTogJyVkIOC9puC+kOC9ouC8i+C9mCcsXG4gICAgICAgICAgICBoOiAn4L2G4L204LyL4L2a4L284L2R4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4L2G4L204LyL4L2a4L284L2RJyxcbiAgICAgICAgICAgIGQ6ICfgvYngvbLgvZPgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgZGQ6ICclZCDgvYngvbLgvZPgvIsnLFxuICAgICAgICAgICAgTTogJ+C9n+C+s+C8i+C9luC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBNTTogJyVkIOC9n+C+s+C8i+C9licsXG4gICAgICAgICAgICB5OiAn4L2j4L284LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4L2j4L28JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+C8oeC8ouC8o+C8pOC8peC8puC8p+C8qOC8qeC8oF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C9mOC9muC9k+C8i+C9mOC9vHzgvZ7gvbzgvYLgvabgvIvgvYDgvaZ84L2J4L2y4L2T4LyL4L2C4L204L2EfOC9keC9guC9vOC9hOC8i+C9keC9gnzgvZjgvZrgvZPgvIvgvZjgvbwvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4L2Y4L2a4L2T4LyL4L2Y4L28JyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4L2J4L2y4L2T4LyL4L2C4L204L2EJyAmJiBob3VyIDwgNSkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C9keC9guC9vOC9hOC8i+C9keC9gidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9nuC9vOC9guC9puC8i+C9gOC9pic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2J4L2y4L2T4LyL4L2C4L204L2EJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9mOC9muC9k+C8i+C9mOC9vCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBibztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCcmV0b24gW2JyXVxuLy8hIGF1dGhvciA6IEplYW4tQmFwdGlzdGUgTGUgRHVpZ291IDogaHR0cHM6Ly9naXRodWIuY29tL2pibGVkdWlnb3VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgbW06ICdtdW51dGVubicsXG4gICAgICAgICAgICBNTTogJ21peicsXG4gICAgICAgICAgICBkZDogJ2RldmV6aCcsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBtdXRhdGlvbihmb3JtYXRba2V5XSwgbnVtYmVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3BlY2lhbE11dGF0aW9uRm9yWWVhcnMobnVtYmVyKSB7XG4gICAgICAgIHN3aXRjaCAobGFzdE51bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgYmxvYXonO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyB2bG9heic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbGFzdE51bWJlcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA+IDkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0TnVtYmVyKG51bWJlciAlIDEwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtdXRhdGlvbih0ZXh0LCBudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIHNvZnRNdXRhdGlvbih0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc29mdE11dGF0aW9uKHRleHQpIHtcbiAgICAgICAgdmFyIG11dGF0aW9uVGFibGUgPSB7XG4gICAgICAgICAgICBtOiAndicsXG4gICAgICAgICAgICBiOiAndicsXG4gICAgICAgICAgICBkOiAneicsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChtdXRhdGlvblRhYmxlW3RleHQuY2hhckF0KDApXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXV0YXRpb25UYWJsZVt0ZXh0LmNoYXJBdCgwKV0gKyB0ZXh0LnN1YnN0cmluZygxKTtcbiAgICB9XG5cbiAgICB2YXIgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmdlbi9pLFxuICAgICAgICAgICAgL15jW8q8XFwnXWh3ZS9pLFxuICAgICAgICAgICAgL15tZXUvaSxcbiAgICAgICAgICAgIC9eZWJyL2ksXG4gICAgICAgICAgICAvXm1hZS9pLFxuICAgICAgICAgICAgL14obWV6fGV2ZSkvaSxcbiAgICAgICAgICAgIC9eZ291L2ksXG4gICAgICAgICAgICAvXmVvcy9pLFxuICAgICAgICAgICAgL15nd2UvaSxcbiAgICAgICAgICAgIC9eaGVyL2ksXG4gICAgICAgICAgICAvXmR1L2ksXG4gICAgICAgICAgICAvXmtlci9pLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvXihnZW52ZXJ8Y1vKvFxcJ11od2V2cmVyfG1ldXJ6aHxlYnJlbHxtYWV8bWV6aGV2ZW58Z291ZXJlfGVvc3R8Z3dlbmdvbG98aGVyZXxkdXxrZXJ6dXxnZW58Y1vKvFxcJ11od2V8bWV1fGVicnxtYWV8ZXZlfGdvdXxlb3N8Z3dlfGhlcnxkdXxrZXIpL2ksXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4ID1cbiAgICAgICAgICAgIC9eKGdlbnZlcnxjW8q8XFwnXWh3ZXZyZXJ8bWV1cnpofGVicmVsfG1hZXxtZXpoZXZlbnxnb3VlcmV8ZW9zdHxnd2VuZ29sb3xoZXJlfGR1fGtlcnp1KS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4ID1cbiAgICAgICAgICAgIC9eKGdlbnxjW8q8XFwnXWh3ZXxtZXV8ZWJyfG1hZXxldmV8Z291fGVvc3xnd2V8aGVyfGR1fGtlcikvaSxcbiAgICAgICAgZnVsbFdlZWtkYXlzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXnN1bC9pLFxuICAgICAgICAgICAgL15sdW4vaSxcbiAgICAgICAgICAgIC9ebWV1cnpoL2ksXG4gICAgICAgICAgICAvXm1lcmNbyrxcXCddaGVyL2ksXG4gICAgICAgICAgICAvXnlhb3UvaSxcbiAgICAgICAgICAgIC9eZ3dlbmVyL2ksXG4gICAgICAgICAgICAvXnNhZG9ybi9pLFxuICAgICAgICBdLFxuICAgICAgICBzaG9ydFdlZWtkYXlzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXlN1bC9pLFxuICAgICAgICAgICAgL15MdW4vaSxcbiAgICAgICAgICAgIC9eTWV1L2ksXG4gICAgICAgICAgICAvXk1lci9pLFxuICAgICAgICAgICAgL15ZYW8vaSxcbiAgICAgICAgICAgIC9eR3dlL2ksXG4gICAgICAgICAgICAvXlNhZC9pLFxuICAgICAgICBdLFxuICAgICAgICBtaW5XZWVrZGF5c1BhcnNlID0gW1xuICAgICAgICAgICAgL15TdS9pLFxuICAgICAgICAgICAgL15MdS9pLFxuICAgICAgICAgICAgL15NZShbXnJdfCQpL2ksXG4gICAgICAgICAgICAvXk1lci9pLFxuICAgICAgICAgICAgL15ZYS9pLFxuICAgICAgICAgICAgL15Hdy9pLFxuICAgICAgICAgICAgL15TYS9pLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGJyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnInLCB7XG4gICAgICAgIG1vbnRoczogJ0dlbnZlcl9Dyrxod2V2cmVyX01ldXJ6aF9FYnJlbF9NYWVfTWV6aGV2ZW5fR291ZXJlX0Vvc3RfR3dlbmdvbG9fSGVyZV9EdV9LZXJ6dScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdHZW5fQ8q8aHdlX01ldV9FYnJfTWFlX0V2ZV9Hb3VfRW9zX0d3ZV9IZXJfRHVfS2VyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bF9MdW5fTWV1cnpoX01lcmPKvGhlcl9ZYW91X0d3ZW5lcl9TYWRvcm4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdWxfTHVuX01ldV9NZXJfWWFvX0d3ZV9TYWQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTHVfTWVfTWVyX1lhX0d3X1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlOiBtaW5XZWVrZGF5c1BhcnNlLFxuICAgICAgICBmdWxsV2Vla2RheXNQYXJzZTogZnVsbFdlZWtkYXlzUGFyc2UsXG4gICAgICAgIHNob3J0V2Vla2RheXNQYXJzZTogc2hvcnRXZWVrZGF5c1BhcnNlLFxuICAgICAgICBtaW5XZWVrZGF5c1BhcnNlOiBtaW5XZWVrZGF5c1BhcnNlLFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiBtb250aHNTdHJpY3RSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogbW9udGhzU2hvcnRTdHJpY3RSZWdleCxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcblxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2Egdml6XSBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbYSB2aXpdIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbYSB2aXpdIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hpeml2IGRhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1dhcmPKvGhvYXpoIGRhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2RhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0RlY8q8aCBkYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtwYXNldCBkYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdhLWJlbm4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMq8em8nLFxuICAgICAgICAgICAgczogJ3VuIG5lYmV1ZCBzZWdvbmRlbm5vw7knLFxuICAgICAgICAgICAgc3M6ICclZCBlaWxlbm4nLFxuICAgICAgICAgICAgbTogJ3VyIHZ1bnV0ZW5uJyxcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICBoOiAndW4gZXVyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgZXVyJyxcbiAgICAgICAgICAgIGQ6ICd1biBkZXZlemgnLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbixcbiAgICAgICAgICAgIE06ICd1ciBtaXonLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbixcbiAgICAgICAgICAgIHk6ICd1ciBibG9heicsXG4gICAgICAgICAgICB5eTogc3BlY2lhbE11dGF0aW9uRm9yWWVhcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShhw7F8dmV0KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgPT09IDEgPyAnYcOxJyA6ICd2ZXQnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvYS5tLnxnLm0uLywgLy8gZ291ZGUgbWVyZW5uIHwgYS1yYW9rIG1lcmVublxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbiA9PT0gJ2cubS4nO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAxMiA/ICdhLm0uJyA6ICdnLm0uJztcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBicjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCb3NuaWFuIFtic11cbi8vISBhdXRob3IgOiBOZWRpbSBDaG9saWNoIDogaHR0cHM6Ly9naXRodWIuY29tL2Zyb250eWFyZFxuLy8hIGF1dGhvciA6IFJhc2lkIFJlZHppYyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYXNpZHJlXG4vLyEgYmFzZWQgb24gKGhyKSB0cmFuc2xhdGlvbiBieSBCb2phbiBNYXJrb3ZpxIdcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeFxuICAgICAgICAgICAgICAgICAgICA/ICdqZWRuYSBtaW51dGEnXG4gICAgICAgICAgICAgICAgICAgIDogaXNGdXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICA/ICdqZWRudSBtaW51dHUnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnamVkbmUgbWludXRlJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRhbiBzYXQnIDogJ2plZGFuIHNhdCc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYnMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdicycsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iYXJfb2t0b2Jhcl9ub3ZlbWJhcl9kZWNlbWJhcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFuLl9mZWIuX21hci5fYXByLl9tYWouX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGldIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJpamUgJXMnLFxuICAgICAgICAgICAgczogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiAnZGFuJyxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYnM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2F0YWxhbiBbY2FdXG4vLyEgYXV0aG9yIDogSnVhbiBHLiBIdXJ0YWRvIDogaHR0cHM6Ly9naXRodWIuY29tL2p1YW5naHVydGFkb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY2EnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAnZ2VuZXJfZmVicmVyX21hcsOnX2FicmlsX21haWdfanVueV9qdWxpb2xfYWdvc3Rfc2V0ZW1icmVfb2N0dWJyZV9ub3ZlbWJyZV9kZXNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6IFwiZGUgZ2VuZXJfZGUgZmVicmVyX2RlIG1hcsOnX2QnYWJyaWxfZGUgbWFpZ19kZSBqdW55X2RlIGp1bGlvbF9kJ2Fnb3N0X2RlIHNldGVtYnJlX2Qnb2N0dWJyZV9kZSBub3ZlbWJyZV9kZSBkZXNlbWJyZVwiLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvRFtvRF0/KFxccykrTU1NTS8sXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2dlbi5fZmVici5fbWFyw6dfYWJyLl9tYWlnX2p1bnlfanVsLl9hZy5fc2V0Ll9vY3QuX25vdi5fZGVzLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdkaXVtZW5nZV9kaWxsdW5zX2RpbWFydHNfZGltZWNyZXNfZGlqb3VzX2RpdmVuZHJlc19kaXNzYWJ0ZScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZGcuX2RsLl9kdC5fZGMuX2RqLl9kdi5fZHMuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RnX2RsX2R0X2RjX2RqX2R2X2RzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgbGw6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVksIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFtkZV0gWVlZWSBbYSBsZXNdIEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCBEIE1NTSBZWVlZLCBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1thdnVpIGEgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tkZW3DoCBhICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2FoaXIgYSAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW2VsXSBkZGRkIFtwYXNzYXQgYSAnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdsZXMnIDogJ2xhJykgK1xuICAgICAgICAgICAgICAgICAgICAnXSBMVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiBcImQnYXF1w60gJXNcIixcbiAgICAgICAgICAgIHBhc3Q6ICdmYSAlcycsXG4gICAgICAgICAgICBzOiAndW5zIHNlZ29ucycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ29ucycsXG4gICAgICAgICAgICBtOiAndW4gbWludXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHMnLFxuICAgICAgICAgICAgaDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yZXMnLFxuICAgICAgICAgICAgZDogJ3VuIGRpYScsXG4gICAgICAgICAgICBkZDogJyVkIGRpZXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc29zJyxcbiAgICAgICAgICAgIHk6ICd1biBhbnknLFxuICAgICAgICAgICAgeXk6ICclZCBhbnlzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHJ8bnx0fMOofGEpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICBudW1iZXIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgPyAncidcbiAgICAgICAgICAgICAgICAgICAgOiBudW1iZXIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICA/ICduJ1xuICAgICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBudW1iZXIgPT09IDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAndCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnw6gnO1xuICAgICAgICAgICAgaWYgKHBlcmlvZCA9PT0gJ3cnIHx8IHBlcmlvZCA9PT0gJ1cnKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gJ2EnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEN6ZWNoIFtjc11cbi8vISBhdXRob3IgOiBwZXRyYmVsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRyYmVsYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRocyA9IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ2xlZGVuX8O6bm9yX2LFmWV6ZW5fZHViZW5fa3bEm3Rlbl/EjWVydmVuX8SNZXJ2ZW5lY19zcnBlbl96w6HFmcOtX8WZw61qZW5fbGlzdG9wYWRfcHJvc2luZWMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiAnbGVkbmFfw7pub3JhX2LFmWV6bmFfZHVibmFfa3bEm3RuYV/EjWVydm5hX8SNZXJ2ZW5jZV9zcnBuYV96w6HFmcOtX8WZw61qbmFfbGlzdG9wYWR1X3Byb3NpbmNlJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0REP1tvLl0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NLyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnbGVkX8O6bm9fYsWZZV9kdWJfa3bEm1/EjXZuX8SNdmNfc3JwX3rDocWZX8WZw61qX2xpc19wcm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15sZWQvaSxcbiAgICAgICAgICAgIC9ew7puby9pLFxuICAgICAgICAgICAgL15ixZllL2ksXG4gICAgICAgICAgICAvXmR1Yi9pLFxuICAgICAgICAgICAgL15rdsSbL2ksXG4gICAgICAgICAgICAvXijEjXZufMSNZXJ2ZW4kfMSNZXJ2bmEpL2ksXG4gICAgICAgICAgICAvXijEjXZjfMSNZXJ2ZW5lY3zEjWVydmVuY2UpL2ksXG4gICAgICAgICAgICAvXnNycC9pLFxuICAgICAgICAgICAgL156w6HFmS9pLFxuICAgICAgICAgICAgL17FmcOtai9pLFxuICAgICAgICAgICAgL15saXMvaSxcbiAgICAgICAgICAgIC9ecHJvL2ksXG4gICAgICAgIF0sXG4gICAgICAgIC8vIE5PVEU6ICfEjWVydmVuJyBpcyBzdWJzdHJpbmcgb2YgJ8SNZXJ2ZW5lYyc7IHRoZXJlZm9yZSAnxI1lcnZlbmVjJyBtdXN0IHByZWNlZGUgJ8SNZXJ2ZW4nIGluIHRoZSByZWdleCB0byBiZSBmdWxseSBtYXRjaGVkLlxuICAgICAgICAvLyBPdGhlcndpc2UgcGFyc2VyIG1hdGNoZXMgJzEuIMSNZXJ2ZW5lYycgYXMgJzEuIMSNZXJ2ZW4nICsgJ2VjJy5cbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgL14obGVkZW58w7pub3J8YsWZZXplbnxkdWJlbnxrdsSbdGVufMSNZXJ2ZW5lY3zEjWVydmVuY2V8xI1lcnZlbnzEjWVydm5hfHNycGVufHrDocWZw618xZnDrWplbnxsaXN0b3BhZHxwcm9zaW5lY3xsZWR8w7pub3xixZllfGR1YnxrdsSbfMSNdm58xI12Y3xzcnB8esOhxZl8xZnDrWp8bGlzfHBybykvaTtcblxuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiBuID4gMSAmJiBuIDwgNSAmJiB+fihuIC8gMTApICE9PSAxO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzogLy8gYSBmZXcgc2Vjb25kcyAvIGluIGEgZmV3IHNlY29uZHMgLyBhIGZldyBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3DDoXIgc2VrdW5kJyA6ICdww6FyIHNla3VuZGFtaSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6IC8vIDkgc2Vjb25kcyAvIGluIDkgc2Vjb25kcyAvIDkgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Nla3VuZHknIDogJ3Nla3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnc2VrdW5kYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdtJzogLy8gYSBtaW51dGUgLyBpbiBhIG1pbnV0ZSAvIGEgbWludXRlIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbnV0YScgOiBpc0Z1dHVyZSA/ICdtaW51dHUnIDogJ21pbnV0b3UnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOiAvLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW51dHknIDogJ21pbnV0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnaCc6IC8vIGFuIGhvdXIgLyBpbiBhbiBob3VyIC8gYW4gaG91ciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdob2RpbmEnIDogaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91JztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzogLy8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnaG9kaW55JyA6ICdob2RpbicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnaG9kaW5hbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2QnOiAvLyBhIGRheSAvIGluIGEgZGF5IC8gYSBkYXkgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZGVuJyA6ICdkbmVtJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzogLy8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZG55JyA6ICdkbsOtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkbnknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ00nOiAvLyBhIG1vbnRoIC8gaW4gYSBtb250aCAvIGEgbW9udGggYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbcSbc8OtYycgOiAnbcSbc8OtY2VtJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzogLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbcSbc8OtY2UnIDogJ23Em3PDrWPFrycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcSbc8OtY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3knOiAvLyBhIHllYXIgLyBpbiBhIHllYXIgLyBhIHllYXIgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAncm9rJyA6ICdyb2tlbSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6IC8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Jva3knIDogJ2xldCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbGV0eSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3MnLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzU2hvcnQsXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIC8vIE5PVEU6ICfEjWVydmVuJyBpcyBzdWJzdHJpbmcgb2YgJ8SNZXJ2ZW5lYyc7IHRoZXJlZm9yZSAnxI1lcnZlbmVjJyBtdXN0IHByZWNlZGUgJ8SNZXJ2ZW4nIGluIHRoZSByZWdleCB0byBiZSBmdWxseSBtYXRjaGVkLlxuICAgICAgICAvLyBPdGhlcndpc2UgcGFyc2VyIG1hdGNoZXMgJzEuIMSNZXJ2ZW5lYycgYXMgJzEuIMSNZXJ2ZW4nICsgJ2VjJy5cbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihsZWRlbnxsZWRuYXzDum5vcmF8w7pub3J8YsWZZXplbnxixZllem5hfGR1YmVufGR1Ym5hfGt2xJt0ZW58a3bEm3RuYXzEjWVydmVuZWN8xI1lcnZlbmNlfMSNZXJ2ZW58xI1lcnZuYXxzcnBlbnxzcnBuYXx6w6HFmcOtfMWZw61qZW58xZnDrWpuYXxsaXN0b3BhZHV8bGlzdG9wYWR8cHJvc2luZWN8cHJvc2luY2UpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihsZWR8w7pub3xixZllfGR1YnxrdsSbfMSNdm58xI12Y3xzcnB8esOhxZl8xZnDrWp8bGlzfHBybykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWTEm2xlX3BvbmTEm2zDrV/DunRlcsO9X3N0xZllZGFfxI10dnJ0ZWtfcMOhdGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lX3BvX8O6dF9zdF/EjXRfcMOhX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX8O6dF9zdF/EjXRfcMOhX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgbDogJ0QuIE0uIFlZWVknLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkbmVzIHZdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbesOtdHJhIHZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkxJtsaSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSBzdMWZZWR1IHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdmUgxI10dnJ0ZWsgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHDDoXRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgdl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMOpXSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc3TFmWVkdSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IHNvYm90dSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3DFmWVkICVzJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBjcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaHV2YXNoIFtjdl1cbi8vISBhdXRob3IgOiBBbmF0b2x5IE1pcm9ub3YgOiBodHRwczovL2dpdGh1Yi5jb20vbWlyb250b2xpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgY3YgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjdicsIHtcbiAgICAgICAgbW9udGhzOiAn0LrTkdGA0LvQsNGHX9C90LDRgNOR0YFf0L/Rg9GIX9Cw0LrQsF/QvNCw0Llf0qvTl9GA0YLQvNC1X9GD0YLTkV/Sq9GD0YDQu9CwX9Cw0LLTkdC9X9GO0L/QsF/Rh9Oz0Lpf0YDQsNGI0YLQsNCyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9C605HRgF/QvdCw0YBf0L/Rg9GIX9Cw0LrQsF/QvNCw0Llf0qvTl9GAX9GD0YLTkV/Sq9GD0YBf0LDQstC9X9GO0L/QsF/Rh9Oz0Lpf0YDQsNGIJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfQstGL0YDRgdCw0YDQvdC40LrRg9C9X9GC0YPQvdGC0LjQutGD0L1f0YvRgtC70LDRgNC40LrRg9C9X9GO0L3QutGD0L1f0LrTl9Kr0L3QtdGA0L3QuNC60YPQvV/RjdGA0L3QtdC60YPQvV/RiNOR0LzQsNGC0LrRg9C9Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQstGL0YBf0YLRg9C9X9GL0YLQu1/RjtC9X9C605fSq1/RjdGA0L1f0YjTkdC8Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9Cy0YBf0YLQvV/Ri9GCX9GO0L1f0LrSq1/RjdGAX9GI0LwnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10nLFxuICAgICAgICAgICAgTExMOiAnWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQn9Cw0Y/QvV0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Cr0YDQsNC9XSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb05bQvdC10YBdIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0qrQuNGC0LXRgV0gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9CY0YDRgtC905ddIGRkZGQgTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogZnVuY3Rpb24gKG91dHB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBhZmZpeCA9IC/RgdC10YXQtdGCJC9pLmV4ZWMob3V0cHV0KVxuICAgICAgICAgICAgICAgICAgICA/ICfRgNC10L0nXG4gICAgICAgICAgICAgICAgICAgIDogL9Kr0YPQuyQvaS5leGVjKG91dHB1dClcbiAgICAgICAgICAgICAgICAgICAgICA/ICfRgtCw0L0nXG4gICAgICAgICAgICAgICAgICAgICAgOiAn0YDQsNC9JztcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0ICsgYWZmaXg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdDogJyVzINC60LDRj9C70LvQsCcsXG4gICAgICAgICAgICBzOiAn0L/Tl9GALdC40Log0qvQtdC60LrRg9C90YInLFxuICAgICAgICAgICAgc3M6ICclZCDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBtOiAn0L/Tl9GAINC80LjQvdGD0YInLFxuICAgICAgICAgICAgbW06ICclZCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIGg6ICfQv9OX0YAg0YHQtdGF0LXRgicsXG4gICAgICAgICAgICBoaDogJyVkINGB0LXRhdC10YInLFxuICAgICAgICAgICAgZDogJ9C/05fRgCDQutGD0L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQutGD0L0nLFxuICAgICAgICAgICAgTTogJ9C/05fRgCDRg9C505HRhScsXG4gICAgICAgICAgICBNTTogJyVkINGD0LnTkdGFJyxcbiAgICAgICAgICAgIHk6ICfQv9OX0YAg0qvRg9C7JyxcbiAgICAgICAgICAgIHl5OiAnJWQg0qvRg9C7JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LdC805fRiC8sXG4gICAgICAgIG9yZGluYWw6ICclZC3QvNOX0YgnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3Y7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogV2Vsc2ggW2N5XVxuLy8hIGF1dGhvciA6IFJvYmVydCBBbGxlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JnYWxsZW5cbi8vISBhdXRob3IgOiBodHRwczovL2dpdGh1Yi5jb20vcnlhbmdyZWF2ZXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBjeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2N5Jywge1xuICAgICAgICBtb250aHM6ICdJb25hd3JfQ2h3ZWZyb3JfTWF3cnRoX0VicmlsbF9NYWlfTWVoZWZpbl9Hb3JmZmVubmFmX0F3c3RfTWVkaV9IeWRyZWZfVGFjaHdlZGRfUmhhZ2Z5cicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdJb25fQ2h3ZV9NYXdfRWJyX01haV9NZWhfR29yX0F3c19NZWRfSHlkX1RhY2hfUmhhZycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnRHlkZCBTdWxfRHlkZCBMbHVuX0R5ZGQgTWF3cnRoX0R5ZGQgTWVyY2hlcl9EeWRkIElhdV9EeWRkIEd3ZW5lcl9EeWRkIFNhZHdybicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VsX0xsdW5fTWF3X01lcl9JYXVfR3dlX1NhZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9MbF9NYV9NZV9JYV9Hd19TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICAvLyB0aW1lIGZvcm1hdHMgYXJlIHRoZSBzYW1lIGFzIGVuLWdiXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGVkZGl3IGFtXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1lmb3J5IGFtXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FtXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0Rkb2UgYW1dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZGl3ZXRoYWYgYW1dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnbWV3biAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgeW4gw7RsJyxcbiAgICAgICAgICAgIHM6ICd5Y2h5ZGlnIGVpbGlhZGF1JyxcbiAgICAgICAgICAgIHNzOiAnJWQgZWlsaWFkJyxcbiAgICAgICAgICAgIG06ICdtdW51ZCcsXG4gICAgICAgICAgICBtbTogJyVkIG11bnVkJyxcbiAgICAgICAgICAgIGg6ICdhd3InLFxuICAgICAgICAgICAgaGg6ICclZCBhd3InLFxuICAgICAgICAgICAgZDogJ2Rpd3Jub2QnLFxuICAgICAgICAgICAgZGQ6ICclZCBkaXdybm9kJyxcbiAgICAgICAgICAgIE06ICdtaXMnLFxuICAgICAgICAgICAgTU06ICclZCBtaXMnLFxuICAgICAgICAgICAgeTogJ2Jsd3lkZHluJyxcbiAgICAgICAgICAgIHl5OiAnJWQgZmx5bmVkZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShmZWR8YWlufGFmfGlsfHlkZHxlZHxlZykvLFxuICAgICAgICAvLyB0cmFkaXRpb25hbCBvcmRpbmFsIG51bWJlcnMgYWJvdmUgMzEgYXJlIG5vdCBjb21tb25seSB1c2VkIGluIGNvbGxvcXVpYWwgV2Vsc2hcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gJycsXG4gICAgICAgICAgICAgICAgbG9va3VwID0gW1xuICAgICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2FmJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lsJyxcbiAgICAgICAgICAgICAgICAgICAgJ3lkZCcsXG4gICAgICAgICAgICAgICAgICAgICd5ZGQnLFxuICAgICAgICAgICAgICAgICAgICAnZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLCAvLyAxYWYgdG8gMTBmZWRcbiAgICAgICAgICAgICAgICAgICAgJ2VnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZycsXG4gICAgICAgICAgICAgICAgICAgICdlZycsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZWcnLFxuICAgICAgICAgICAgICAgICAgICAnZWcnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsIC8vIDExZWcgdG8gMjBmZWRcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKGIgPiAyMCkge1xuICAgICAgICAgICAgICAgIGlmIChiID09PSA0MCB8fCBiID09PSA1MCB8fCBiID09PSA2MCB8fCBiID09PSA4MCB8fCBiID09PSAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ2ZlZCc7IC8vIG5vdCAzMGFpbiwgNzBhaW4gb3IgOTBhaW5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnYWluJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGIgPiAwKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbG9va3VwW2JdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGN5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IERhbmlzaCBbZGFdXG4vLyEgYXV0aG9yIDogVWxyaWsgTmllbHNlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmJhc2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBkYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RhJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJ0c19hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdzw7huZGFnX21hbmRhZ190aXJzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7hyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc8O4bl9tYW5fdGlyX29uc190b3JfZnJlX2zDuHInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc8O4X21hX3RpX29uX3RvX2ZyX2zDuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIFtkLl0gRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaSBkYWcga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2kgbW9yZ2VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdww6UgZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2kgZ8OlciBrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2ldIGRkZGRbcyBrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHNpZGVuJyxcbiAgICAgICAgICAgIHM6ICdmw6Ugc2VrdW5kZXInLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRlcicsXG4gICAgICAgICAgICBtOiAnZXQgbWludXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHRlcicsXG4gICAgICAgICAgICBoOiAnZW4gdGltZScsXG4gICAgICAgICAgICBoaDogJyVkIHRpbWVyJyxcbiAgICAgICAgICAgIGQ6ICdlbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdlJyxcbiAgICAgICAgICAgIE06ICdlbiBtw6VuZWQnLFxuICAgICAgICAgICAgTU06ICclZCBtw6VuZWRlcicsXG4gICAgICAgICAgICB5OiAnZXQgw6VyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw6VyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBkYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHZXJtYW4gW2RlXVxuLy8hIGF1dGhvciA6IGxsdWNocyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sbHVjaHNcbi8vISBhdXRob3I6IE1lbmVsaW9uIEVsZW5zw7psZTogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiBNaWtvbGFqIERhZGVsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWswMWFqXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgbTogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgICAgIGg6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICAgICBkOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgICAgIHc6IFsnZWluZSBXb2NoZScsICdlaW5lciBXb2NoZSddLFxuICAgICAgICAgICAgTTogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgICAgIHk6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBkZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnSmFuLl9GZWIuX03DpHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ1Nvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTby5fTW8uX0RpLl9NaS5fRG8uX0ZyLl9TYS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dlc3Rlcm4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ZvciAlcycsXG4gICAgICAgICAgICBzOiAnZWluIHBhYXIgU2VrdW5kZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06ICclZCBNaW51dGVuJyxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogJyVkIFN0dW5kZW4nLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgdzogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHd3OiAnJWQgV29jaGVuJyxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBkZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHZXJtYW4gKEF1c3RyaWEpIFtkZS1hdF1cbi8vISBhdXRob3IgOiBsbHVjaHMgOiBodHRwczovL2dpdGh1Yi5jb20vbGx1Y2hzXG4vLyEgYXV0aG9yOiBNZW5lbGlvbiBFbGVuc8O6bGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDogTWFydGluIEdyb2xsZXIgOiBodHRwczovL2dpdGh1Yi5jb20vTWFkTUdcbi8vISBhdXRob3IgOiBNaWtvbGFqIERhZGVsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWswMWFqXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgbTogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgICAgIGg6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICAgICBkOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgICAgIHc6IFsnZWluZSBXb2NoZScsICdlaW5lciBXb2NoZSddLFxuICAgICAgICAgICAgTTogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgICAgIHk6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBkZUF0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGUtYXQnLCB7XG4gICAgICAgIG1vbnRoczogJ0rDpG5uZXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnSsOkbi5fRmViLl9Nw6Ryel9BcHIuX01haV9KdW5pX0p1bGlfQXVnLl9TZXAuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU28uX01vLl9EaS5fTWkuX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGV1dGUgdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICd2b3IgJXMnLFxuICAgICAgICAgICAgczogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgU2VrdW5kZW4nLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiAnJWQgTWludXRlbicsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHc6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3dzogJyVkIFdvY2hlbicsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVBdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHZXJtYW4gKFN3aXR6ZXJsYW5kKSBbZGUtY2hdXG4vLyEgYXV0aG9yIDogc3NjaHVlbGxlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zc2NodWVsbGVyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgbTogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgICAgIGg6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICAgICBkOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgICAgIHc6IFsnZWluZSBXb2NoZScsICdlaW5lciBXb2NoZSddLFxuICAgICAgICAgICAgTTogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgICAgIHk6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBkZUNoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGUtY2gnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWcnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGV1dGUgdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICd2b3IgJXMnLFxuICAgICAgICAgICAgczogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgU2VrdW5kZW4nLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiAnJWQgTWludXRlbicsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHc6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3dzogJyVkIFdvY2hlbicsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVDaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxkaXZpYW4gW2R2XVxuLy8hIGF1dGhvciA6IEphd2lzaCBIYW1lZWQgOiBodHRwczovL2dpdGh1Yi5jb20vamF3aXNoXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAgICAgJ96W3qzegt6q3ofept6D3qknLFxuICAgICAgICAgICAgJ96K3qzehN6w3oPeqt6H3qbeg96pJyxcbiAgICAgICAgICAgICfeid6n3oPeqN6X3qonLFxuICAgICAgICAgICAgJ96H3q3eld6w3oPeqd6N3qonLFxuICAgICAgICAgICAgJ96J3q0nLFxuICAgICAgICAgICAgJ96W3qvegt6wJyxcbiAgICAgICAgICAgICfelt6q3o3ept6H3qgnLFxuICAgICAgICAgICAgJ96H3q/ejt6m3pDesN6T3qonLFxuICAgICAgICAgICAgJ96Q3qzeld6w3pPerN6J3rDehN6m3oPeqicsXG4gICAgICAgICAgICAn3ofert6G3rDek96v3oTept6D3qonLFxuICAgICAgICAgICAgJ96C3q7eiN6s3onesN6E3qbeg96qJyxcbiAgICAgICAgICAgICfekd6o3pDerN6J3rDehN6m3oPeqicsXG4gICAgICAgIF0sXG4gICAgICAgIHdlZWtkYXlzID0gW1xuICAgICAgICAgICAgJ96H3qfei96o3ofesN6M3qYnLFxuICAgICAgICAgICAgJ96A3q/eid6mJyxcbiAgICAgICAgICAgICfeh96m3oLesN6O3qfeg96mJyxcbiAgICAgICAgICAgICfehN6q3ovepicsXG4gICAgICAgICAgICAn3oTeqt6D3qfekN6w3orept6M3qgnLFxuICAgICAgICAgICAgJ96A3qreht6q3oPeqicsXG4gICAgICAgICAgICAn3oDert6C3qjegN6o3oPeqicsXG4gICAgICAgIF07XG5cbiAgICB2YXIgZHYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkdicsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiAn3ofep96L3qhf3oDer96J3qZf3ofept6C3rBf3oTeqt6L3qZf3oTeqt6D3qdf3oDeqt6G3qpf3oDert6C3qgnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdEL00vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL96J3oZ83oneii8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfeid6KJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfeid6GJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfeid6KJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb3oneqN6H3qbei96qXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW96J3qfei96m3onep10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb3ofeqN6H3rDelN6sXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1veit6n3ofeqN6M3qreiN6oXSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn3ozerN6D3q3ejt6m3ofeqCAlcycsXG4gICAgICAgICAgICBwYXN0OiAn3obeqt6D3qjegt6wICVzJyxcbiAgICAgICAgICAgIHM6ICfekN6o3obeqt6C3rDejN6q3obert6F3qzeh96wJyxcbiAgICAgICAgICAgIHNzOiAnZCUg3pDeqN6G3qregt6w3ozeqicsXG4gICAgICAgICAgICBtOiAn3oneqN6C3qjek96s3ofesCcsXG4gICAgICAgICAgICBtbTogJ96J3qjegt6o3pPeqiAlZCcsXG4gICAgICAgICAgICBoOiAn3o7ept6R3qjeh96o3oPerN6H3rAnLFxuICAgICAgICAgICAgaGg6ICfejt6m3pHeqN6H3qjeg96qICVkJyxcbiAgICAgICAgICAgIGQ6ICfei96q3ojept6A3qzeh96wJyxcbiAgICAgICAgICAgIGRkOiAn3oveqt6I3qbekN6wICVkJyxcbiAgICAgICAgICAgIE06ICfeid6m3oDerN6H3rAnLFxuICAgICAgICAgICAgTU06ICfeid6m3pDesCAlZCcsXG4gICAgICAgICAgICB5OiAn3ofept6A3qbeg96s3ofesCcsXG4gICAgICAgICAgICB5eTogJ96H3qbegN6m3oPeqiAlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiA3LCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZHY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR3JlZWsgW2VsXVxuLy8hIGF1dGhvciA6IEFnZ2Vsb3MgS2FyYWxpYXMgOiBodHRwczovL2dpdGh1Yi5jb20vbWVoaWVsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodHlwZW9mIEZ1bmN0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB8fFxuICAgICAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBlbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VsJywge1xuICAgICAgICBtb250aHNOb21pbmF0aXZlRWw6XG4gICAgICAgICAgICAnzpnOsc69zr/Phc6sz4HOuc6/z4JfzqbOtc6yz4HOv8+FzqzPgc65zr/Pgl/OnM6sz4HPhM65zr/Pgl/Okc+Az4HOr867zrnOv8+CX86czqzOuc6/z4JfzpnOv8+Nzr3Ouc6/z4JfzpnOv8+NzrvOuc6/z4JfzpHPjc6zzr/Phc+Dz4TOv8+CX86jzrXPgM+Ezq3OvM6yz4HOuc6/z4Jfzp/Ous+Ez47Oss+BzrnOv8+CX86dzr/Orc68zrLPgc65zr/Pgl/OlM61zrrOrc68zrLPgc65zr/Pgicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNHZW5pdGl2ZUVsOlxuICAgICAgICAgICAgJ86ZzrHOvc6/z4XOsc+Bzq/Ov8+FX86mzrXOss+Bzr/Phc6xz4HOr86/z4VfzpzOsc+Bz4TOr86/z4VfzpHPgM+BzrnOu86vzr/PhV/OnM6xzpDOv8+FX86Zzr/Phc69zq/Ov8+FX86Zzr/Phc67zq/Ov8+FX86Rz4XOs86/z43Pg8+Ezr/PhV/Oo861z4DPhM61zrzOss+Bzq/Ov8+FX86fzrrPhM+JzrLPgc6vzr/PhV/Onc6/zrXOvM6yz4HOr86/z4VfzpTOtc66zrXOvM6yz4HOr86/z4UnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzOiBmdW5jdGlvbiAobW9tZW50VG9Gb3JtYXQsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRUb0Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNOb21pbmF0aXZlRWw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgL0QvLnRlc3QoZm9ybWF0LnN1YnN0cmluZygwLCBmb3JtYXQuaW5kZXhPZignTU1NTScpKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGEgZGF5IG51bWJlciBiZWZvcmUgJ01NTU0nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc0dlbml0aXZlRWxbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNOb21pbmF0aXZlRWxbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnzpnOsc69X86mzrXOsl/OnM6xz4FfzpHPgM+BX86czrHPil/Omc6/z4XOvV/Omc6/z4XOu1/Okc+FzrNfzqPOtc+AX86fzrrPhF/Onc6/zrVfzpTOtc66Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ86az4XPgc65zrHOus6uX86UzrXPhc+Ezq3Pgc6xX86kz4HOr8+EzrdfzqTOtc+EzqzPgc+EzrdfzqDOrc68z4DPhM63X86gzrHPgc6xz4POus61z4XOrl/Oo86szrLOss6xz4TOvycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ86az4XPgV/OlM61z4VfzqTPgc65X86kzrXPhF/OoM61zrxfzqDOsc+BX86jzrHOsicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfOms+FX86UzrVfzqTPgV/OpM61X86gzrVfzqDOsV/Oo86xJy5zcGxpdCgnXycpLFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ868zrwnIDogJ86czpwnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfPgM68JyA6ICfOoM6cJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKClbMF0gPT09ICfOvCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9bzqDOnF1cXC4/zpw/XFwuPy9pLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhckVsOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW86jzq7OvM61z4HOsSB7fV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vOkc+Nz4HOuc6/IHt9XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3t9XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW86nzrjOtc+CIHt9XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vPhM6/IM+Az4HOv863zrPOv8+NzrzOtc69zr9dIGRkZGQgW3t9XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vPhM63zr0gz4DPgc6/zrfOs86/z43OvM61zr3Ot10gZGRkZCBbe31dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IGZ1bmN0aW9uIChrZXksIG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyRWxba2V5XSxcbiAgICAgICAgICAgICAgICBob3VycyA9IG1vbSAmJiBtb20uaG91cnMoKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG91dHB1dCkpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQuYXBwbHkobW9tKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQucmVwbGFjZSgne30nLCBob3VycyAlIDEyID09PSAxID8gJ8+Dz4TOtycgOiAnz4PPhM65z4InKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfPg861ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDPgM+BzrnOvScsXG4gICAgICAgICAgICBzOiAnzrvOr86zzrEgzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6xJyxcbiAgICAgICAgICAgIHNzOiAnJWQgzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6xJyxcbiAgICAgICAgICAgIG06ICfOrc69zrEgzrvOtc+Az4TPjCcsXG4gICAgICAgICAgICBtbTogJyVkIM67zrXPgM+EzqwnLFxuICAgICAgICAgICAgaDogJ868zq/OsSDPjs+BzrEnLFxuICAgICAgICAgICAgaGg6ICclZCDPjs+BzrXPgicsXG4gICAgICAgICAgICBkOiAnzrzOr86xIM68zq3Pgc6xJyxcbiAgICAgICAgICAgIGRkOiAnJWQgzrzOrc+BzrXPgicsXG4gICAgICAgICAgICBNOiAnzq3Ovc6xz4IgzrzOrs69zrHPgicsXG4gICAgICAgICAgICBNTTogJyVkIM68zq7Ovc61z4InLFxuICAgICAgICAgICAgeTogJ86tzr3Osc+CIM+Hz4HPjM69zr/PgicsXG4gICAgICAgICAgICB5eTogJyVkIM+Hz4HPjM69zrnOsScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfc63LyxcbiAgICAgICAgb3JkaW5hbDogJyVkzrcnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0c3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoQXVzdHJhbGlhKSBbZW4tYXVdXG4vLyEgYXV0aG9yIDogSmFyZWQgTW9yc2UgOiBodHRwczovL2dpdGh1Yi5jb20vamFyY29hbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuQXUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1hdScsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5BdTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChDYW5hZGEpIFtlbi1jYV1cbi8vISBhdXRob3IgOiBKb25hdGhhbiBBYm91cmJpaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb25iY2FcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbkNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tY2EnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbkNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKFVuaXRlZCBLaW5nZG9tKSBbZW4tZ2JdXG4vLyEgYXV0aG9yIDogQ2hyaXMgR2VkcmltIDogaHR0cHM6Ly9naXRodWIuY29tL2NocmlzZ2VkcmltXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5HYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWdiJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuR2I7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoSXJlbGFuZCkgW2VuLWllXVxuLy8hIGF1dGhvciA6IENocmlzIENhcnRsaWRnZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc2NhcnRsaWRnZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuSWUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1pZScsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuSWU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoSXNyYWVsKSBbZW4taWxdXG4vLyEgYXV0aG9yIDogQ2hyaXMgR2VkcmltIDogaHR0cHM6Ly9naXRodWIuY29tL2NocmlzZ2VkcmltXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5JbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWlsJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbklsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKEluZGlhKSBbZW4taW5dXG4vLyEgYXV0aG9yIDogSmF0aW4gQWdyYXdhbCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXRpbmFnMjJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbkluID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4taW4nLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuSW47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoTmV3IFplYWxhbmQpIFtlbi1uel1cbi8vISBhdXRob3IgOiBMdWtlIE1jR3JlZ29yIDogaHR0cHM6Ly9naXRodWIuY29tL2x1a2VtY2dyZWdvclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuTnogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1ueicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5OejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChTaW5nYXBvcmUpIFtlbi1zZ11cbi8vISBhdXRob3IgOiBNYXR0aGV3IENhc3RyaWxsb24tTWFkcmlnYWwgOiBodHRwczovL2dpdGh1Yi5jb20vdGVjaGRpbWVuc2lvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuU2cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1zZycsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlblNnO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVzcGVyYW50byBbZW9dXG4vLyEgYXV0aG9yIDogQ29saW4gRGVhbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jb2xpbmRlYW5cbi8vISBhdXRob3IgOiBNaWEgTm9yZGVudG9mdCBJbXBlcmF0b3JpIDogaHR0cHM6Ly9naXRodWIuY29tL21pZXN0YXNtaWFcbi8vISBjb21tZW50IDogbWllc3Rhc21pYSBjb3JyZWN0ZWQgdGhlIHRyYW5zbGF0aW9uIGJ5IGNvbGluZGVhblxuLy8hIGNvbW1lbnQgOiBWaXZha3ZvIGNvcnJlY3RlZCB0aGUgdHJhbnNsYXRpb24gYnkgY29saW5kZWFuIGFuZCBtaWVzdGFzbWlhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbycsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyb19mZWJydWFyb19tYXJ0b19hcHJpbG9fbWFqb19qdW5pb19qdWxpb19hxa1ndXN0b19zZXB0ZW1icm9fb2t0b2Jyb19ub3ZlbWJyb19kZWNlbWJybycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcnRfYXByX21hal9qdW5fanVsX2HFrWdfc2VwdF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdkaW1hbsSJb19sdW5kb19tYXJkb19tZXJrcmVkb1/EtWHFrWRvX3ZlbmRyZWRvX3NhYmF0bycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RpbV9sdW5fbWFyZF9tZXJrX8S1YcWtX3Zlbl9zYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZGlfbHVfbWFfbWVfxLVhX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1tsYV0gRFstYW4gZGVdIE1NTU0sIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnW2xhXSBEWy1hbiBkZV0gTU1NTSwgWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZFtuXSwgW2xhXSBEWy1hbiBkZV0gTU1NTSwgWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkLCBbbGFdIERbLWFuIGRlXSBNTU0sIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvW2FwXVxcLnRcXC5tL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpID09PSAncCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncC50Lm0uJyA6ICdQLlQuTS4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhLnQubS4nIDogJ0EuVC5NLic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hvZGlhxa0gamVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTW9yZ2HFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkW24gamVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSGllcmHFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbcGFzaW50YW5dIGRkZGRbbiBqZV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdwb3N0ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdhbnRhxa0gJXMnLFxuICAgICAgICAgICAgczogJ2tlbGthaiBzZWt1bmRvaicsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZG9qJyxcbiAgICAgICAgICAgIG06ICd1bnUgbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvaicsXG4gICAgICAgICAgICBoOiAndW51IGhvcm8nLFxuICAgICAgICAgICAgaGg6ICclZCBob3JvaicsXG4gICAgICAgICAgICBkOiAndW51IHRhZ28nLCAvL25lICdkaXVybm8nLCDEiWFyIGVzdGFzIHV6aXRhIHBvciBwcm9rc2ltdW1vXG4gICAgICAgICAgICBkZDogJyVkIHRhZ29qJyxcbiAgICAgICAgICAgIE06ICd1bnUgbW9uYXRvJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9uYXRvaicsXG4gICAgICAgICAgICB5OiAndW51IGphcm8nLFxuICAgICAgICAgICAgeXk6ICclZCBqYXJvaicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfWEvLFxuICAgICAgICBvcmRpbmFsOiAnJWRhJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNwYW5pc2ggW2VzXVxuLy8hIGF1dGhvciA6IEp1bGlvIE5hcHVyw60gOiBodHRwczovL2dpdGh1Yi5jb20vanVsaW9uY1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID1cbiAgICAgICAgICAgICdlbmUuX2ZlYi5fbWFyLl9hYnIuX21heS5fanVuLl9qdWwuX2Fnby5fc2VwLl9vY3QuX25vdi5fZGljLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmVuZS9pLFxuICAgICAgICAgICAgL15mZWIvaSxcbiAgICAgICAgICAgIC9ebWFyL2ksXG4gICAgICAgICAgICAvXmFici9pLFxuICAgICAgICAgICAgL15tYXkvaSxcbiAgICAgICAgICAgIC9eanVuL2ksXG4gICAgICAgICAgICAvXmp1bC9pLFxuICAgICAgICAgICAgL15hZ28vaSxcbiAgICAgICAgICAgIC9ec2VwL2ksXG4gICAgICAgICAgICAvXm9jdC9pLFxuICAgICAgICAgICAgL15ub3YvaSxcbiAgICAgICAgICAgIC9eZGljL2ksXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7XG5cbiAgICB2YXIgZXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcycsIHtcbiAgICAgICAgbW9udGhzOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5czogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbS5fbHVuLl9tYXIuX21pw6kuX2p1ZS5fdmllLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb19sdV9tYV9taV9qdV92aV9zw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHM6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkw61hcycsXG4gICAgICAgICAgICB3OiAndW5hIHNlbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFuYXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhw7FvJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYcOxb3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgICAgICBpbnZhbGlkRGF0ZTogJ0ZlY2hhIGludsOhbGlkYScsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCAoRG9taW5pY2FuIFJlcHVibGljKSBbZXMtZG9dXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPVxuICAgICAgICAgICAgJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZW5lL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9eYWJyL2ksXG4gICAgICAgICAgICAvXm1heS9pLFxuICAgICAgICAgICAgL15qdW4vaSxcbiAgICAgICAgICAgIC9eanVsL2ksXG4gICAgICAgICAgICAvXmFnby9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kaWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZXxlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaTtcblxuICAgIHZhciBlc0RvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMtZG8nLCB7XG4gICAgICAgIG1vbnRoczogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHM6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkw61hcycsXG4gICAgICAgICAgICB3OiAndW5hIHNlbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFuYXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhw7FvJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYcOxb3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzRG87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCAoTWV4aWNvKSBbZXMtbXhdXG4vLyEgYXV0aG9yIDogSkMgRnJhbmNvIDogaHR0cHM6Ly9naXRodWIuY29tL2pjZnJhbmNvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPVxuICAgICAgICAgICAgJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZW5lL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9eYWJyL2ksXG4gICAgICAgICAgICAvXm1heS9pLFxuICAgICAgICAgICAgL15qdW4vaSxcbiAgICAgICAgICAgIC9eanVsL2ksXG4gICAgICAgICAgICAvXmFnby9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kaWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZXxlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaTtcblxuICAgIHZhciBlc014ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMtbXgnLCB7XG4gICAgICAgIG1vbnRoczogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICddIExUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdlbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGg6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgdzogJ3VuYSBzZW1hbmEnLFxuICAgICAgICAgICAgd3c6ICclZCBzZW1hbmFzJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eTogJyVkIGHDsW9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZERhdGU6ICdGZWNoYSBpbnbDoWxpZGEnLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzTXg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCAoVW5pdGVkIFN0YXRlcykgW2VzLXVzXVxuLy8hIGF1dGhvciA6IGJ1c3R0YSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9idXN0dGFcbi8vISBhdXRob3IgOiBjaHJpc3JvZHogOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNyb2R6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPVxuICAgICAgICAgICAgJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZW5lL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9eYWJyL2ksXG4gICAgICAgICAgICAvXm1heS9pLFxuICAgICAgICAgICAgL15qdW4vaSxcbiAgICAgICAgICAgIC9eanVsL2ksXG4gICAgICAgICAgICAvXmFnby9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kaWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZXxlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaTtcblxuICAgIHZhciBlc1VzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMtdXMnLCB7XG4gICAgICAgIG1vbnRoczogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ01NL0REL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHM6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkw61hcycsXG4gICAgICAgICAgICB3OiAndW5hIHNlbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFuYXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhw7FvJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYcOxb3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzVXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRXN0b25pYW4gW2V0XVxuLy8hIGF1dGhvciA6IEhlbnJ5IEtlaGxtYW5uIDogaHR0cHM6Ly9naXRodWIuY29tL21hZGhlbnJ5XG4vLyEgaW1wcm92ZW1lbnRzIDogSWxsaW1hciBUYW1iZWsgOiBodHRwczovL2dpdGh1Yi5jb20vcmFndWxrYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHM6IFsnbcO1bmUgc2VrdW5kaScsICdtw7VuaSBzZWt1bmQnLCAncGFhciBzZWt1bmRpdCddLFxuICAgICAgICAgICAgc3M6IFtudW1iZXIgKyAnc2VrdW5kaScsIG51bWJlciArICdzZWt1bmRpdCddLFxuICAgICAgICAgICAgbTogWyfDvGhlIG1pbnV0aScsICfDvGtzIG1pbnV0J10sXG4gICAgICAgICAgICBtbTogW251bWJlciArICcgbWludXRpJywgbnVtYmVyICsgJyBtaW51dGl0J10sXG4gICAgICAgICAgICBoOiBbJ8O8aGUgdHVubmknLCAndHVuZCBhZWdhJywgJ8O8a3MgdHVuZCddLFxuICAgICAgICAgICAgaGg6IFtudW1iZXIgKyAnIHR1bm5pJywgbnVtYmVyICsgJyB0dW5kaSddLFxuICAgICAgICAgICAgZDogWyfDvGhlIHDDpGV2YScsICfDvGtzIHDDpGV2J10sXG4gICAgICAgICAgICBNOiBbJ2t1dSBhamEnLCAna3V1IGFlZ2EnLCAnw7xrcyBrdXUnXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyBrdXUnLCBudW1iZXIgKyAnIGt1dWQnXSxcbiAgICAgICAgICAgIHk6IFsnw7xoZSBhYXN0YScsICdhYXN0YScsICfDvGtzIGFhc3RhJ10sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcgYWFzdGEnLCBudW1iZXIgKyAnIGFhc3RhdCddLFxuICAgICAgICB9O1xuICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFtrZXldWzJdID8gZm9ybWF0W2tleV1bMl0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBldCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2V0Jywge1xuICAgICAgICBtb250aHM6ICdqYWFudWFyX3ZlZWJydWFyX23DpHJ0c19hcHJpbGxfbWFpX2p1dW5pX2p1dWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b29iZXJfbm92ZW1iZXJfZGV0c2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYWFuX3ZlZWJyX23DpHJ0c19hcHJfbWFpX2p1dW5pX2p1dWxpX2F1Z19zZXB0X29rdF9ub3ZfZGV0cycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAncMO8aGFww6Rldl9lc21hc3DDpGV2X3RlaXNpcMOkZXZfa29sbWFww6Rldl9uZWxqYXDDpGV2X3JlZWRlX2xhdXDDpGV2Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdQX0VfVF9LX05fUl9MJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1BfRV9UX0tfTl9SX0wnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUw6RuYSxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbSG9tbWUsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tKw6RyZ21pbmVdIGRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tFaWxlLF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbRWVsbWluZV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIHDDpHJhc3QnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHRhZ2FzaScsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6ICclZCBww6RldmEnLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJhc3F1ZSBbZXVdXG4vLyEgYXV0aG9yIDogRW5la28gSWxsYXJyYW1lbmRpIDogaHR0cHM6Ly9naXRodWIuY29tL2VpbGxhcnJhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZXUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdldScsIHtcbiAgICAgICAgbW9udGhzOiAndXJ0YXJyaWxhX290c2FpbGFfbWFydHhvYV9hcGlyaWxhX21haWF0emFfZWthaW5hX3V6dGFpbGFfYWJ1enR1YV9pcmFpbGFfdXJyaWFfYXphcm9hX2FiZW5kdWEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ3VydC5fb3RzLl9tYXIuX2FwaS5fbWFpLl9la2EuX3V6dC5fYWJ1Ll9pcmEuX3Vyci5fYXphLl9hYmUuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ2lnYW5kZWFfYXN0ZWxlaGVuYV9hc3RlYXJ0ZWFfYXN0ZWF6a2VuYV9vc3RlZ3VuYV9vc3RpcmFsYV9sYXJ1bmJhdGEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2lnLl9hbC5fYXIuX2F6Ll9vZy5fb2wuX2xyLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdpZ19hbF9hcl9hel9vZ19vbF9scicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVlba29dIE1NTU1bcmVuXSBEW2FdJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVlba29dIE1NTU1bcmVuXSBEW2FdIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbScsXG4gICAgICAgICAgICBsOiAnWVlZWS1NLUQnLFxuICAgICAgICAgICAgbGw6ICdZWVlZW2tvXSBNTU0gRFthXScsXG4gICAgICAgICAgICBsbGw6ICdZWVlZW2tvXSBNTU0gRFthXSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkLCBZWVlZW2tvXSBNTU0gRFthXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2dhdXJdIExUW2V0YW5dJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbYmloYXJdIExUW2V0YW5dJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVFtldGFuXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2F0em9dIExUW2V0YW5dJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2F1cnJla29dIGRkZGQgTFRbZXRhbl0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBiYXJydScsXG4gICAgICAgICAgICBwYXN0OiAnZHVlbGEgJXMnLFxuICAgICAgICAgICAgczogJ3NlZ3VuZG8gYmF0enVrJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kbycsXG4gICAgICAgICAgICBtOiAnbWludXR1IGJhdCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0dScsXG4gICAgICAgICAgICBoOiAnb3JkdSBiYXQnLFxuICAgICAgICAgICAgaGg6ICclZCBvcmR1JyxcbiAgICAgICAgICAgIGQ6ICdlZ3VuIGJhdCcsXG4gICAgICAgICAgICBkZDogJyVkIGVndW4nLFxuICAgICAgICAgICAgTTogJ2hpbGFiZXRlIGJhdCcsXG4gICAgICAgICAgICBNTTogJyVkIGhpbGFiZXRlJyxcbiAgICAgICAgICAgIHk6ICd1cnRlIGJhdCcsXG4gICAgICAgICAgICB5eTogJyVkIHVydGUnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBlcnNpYW4gW2ZhXVxuLy8hIGF1dGhvciA6IEVicmFoaW0gQnlhZ293aSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9lYnJhbWluaW9cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn27EnLFxuICAgICAgICAgICAgMjogJ9uyJyxcbiAgICAgICAgICAgIDM6ICfbsycsXG4gICAgICAgICAgICA0OiAn27QnLFxuICAgICAgICAgICAgNTogJ9u1JyxcbiAgICAgICAgICAgIDY6ICfbticsXG4gICAgICAgICAgICA3OiAn27cnLFxuICAgICAgICAgICAgODogJ9u4JyxcbiAgICAgICAgICAgIDk6ICfbuScsXG4gICAgICAgICAgICAwOiAn27AnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn27EnOiAnMScsXG4gICAgICAgICAgICAn27InOiAnMicsXG4gICAgICAgICAgICAn27MnOiAnMycsXG4gICAgICAgICAgICAn27QnOiAnNCcsXG4gICAgICAgICAgICAn27UnOiAnNScsXG4gICAgICAgICAgICAn27YnOiAnNicsXG4gICAgICAgICAgICAn27cnOiAnNycsXG4gICAgICAgICAgICAn27gnOiAnOCcsXG4gICAgICAgICAgICAn27knOiAnOScsXG4gICAgICAgICAgICAn27AnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgZmEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmYScsIHtcbiAgICAgICAgbW9udGhzOiAn2pjYp9mG2YjbjNmHX9mB2YjYsduM2Ydf2YXYp9ix2LNf2KLZiNix24zZhF/ZhdmHX9qY2YjYptmGX9qY2YjYptuM2Ydf2KfZiNiqX9iz2b7Yqtin2YXYqNixX9in2qnYqtio2LFf2YbZiNin2YXYqNixX9iv2LPYp9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn2pjYp9mG2YjbjNmHX9mB2YjYsduM2Ydf2YXYp9ix2LNf2KLZiNix24zZhF/ZhdmHX9qY2YjYptmGX9qY2YjYptuM2Ydf2KfZiNiqX9iz2b7Yqtin2YXYqNixX9in2qnYqtio2LFf2YbZiNin2YXYqNixX9iv2LPYp9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6XG4gICAgICAgICAgICAn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9uMX9ivX9izX9qGX9m+X9isX9i0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9mC2KjZhCDYp9iyINi42YfYsXzYqNi52K8g2KfYsiDYuNmH2LEvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAv2KjYudivINin2LIg2LjZh9ixLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mC2KjZhCDYp9iyINi42YfYsSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2KjYudivINin2LIg2LjZh9ixJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhdix2YjYsiDYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vZgdix2K/YpyDYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYr9uM2LHZiNiyINiz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9m+24zYtF0gW9iz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9iv2LEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzINm+24zYtCcsXG4gICAgICAgICAgICBzOiAn2obZhtivINir2KfZhtuM2YcnLFxuICAgICAgICAgICAgc3M6ICclZCDYq9in2YbbjNmHJyxcbiAgICAgICAgICAgIG06ICfbjNqpINiv2YLbjNmC2YcnLFxuICAgICAgICAgICAgbW06ICclZCDYr9mC24zZgtmHJyxcbiAgICAgICAgICAgIGg6ICfbjNqpINiz2KfYudiqJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KonLFxuICAgICAgICAgICAgZDogJ9uM2qkg2LHZiNiyJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2LHZiNiyJyxcbiAgICAgICAgICAgIE06ICfbjNqpINmF2KfZhycsXG4gICAgICAgICAgICBNTTogJyVkINmF2KfZhycsXG4gICAgICAgICAgICB5OiAn24zaqSDYs9in2YQnLFxuICAgICAgICAgICAgeXk6ICclZCDYs9in2YQnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9b27At27ldL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ92YUvLFxuICAgICAgICBvcmRpbmFsOiAnJWTZhScsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRmlubmlzaCBbZmldXG4vLyEgYXV0aG9yIDogVGFybW8gQWlkYW50YXVzdGEgOiBodHRwczovL2dpdGh1Yi5jb20vYmxlYWRvZlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG51bWJlcnNQYXN0ID1cbiAgICAgICAgICAgICdub2xsYSB5a3NpIGtha3NpIGtvbG1lIG5lbGrDpCB2aWlzaSBrdXVzaSBzZWl0c2Vtw6RuIGthaGRla3NhbiB5aGRla3PDpG4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICcgJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbnVtYmVyc0Z1dHVyZSA9IFtcbiAgICAgICAgICAgICdub2xsYScsXG4gICAgICAgICAgICAneWhkZW4nLFxuICAgICAgICAgICAgJ2thaGRlbicsXG4gICAgICAgICAgICAna29sbWVuJyxcbiAgICAgICAgICAgICduZWxqw6RuJyxcbiAgICAgICAgICAgICd2aWlkZW4nLFxuICAgICAgICAgICAgJ2t1dWRlbicsXG4gICAgICAgICAgICBudW1iZXJzUGFzdFs3XSxcbiAgICAgICAgICAgIG51bWJlcnNQYXN0WzhdLFxuICAgICAgICAgICAgbnVtYmVyc1Bhc3RbOV0sXG4gICAgICAgIF07XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbXV1dGFtYW4gc2VrdW5uaW4nIDogJ211dXRhbWEgc2VrdW50aSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAnc2VrdW5uaW4nIDogJ3Nla3VudGlhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGknO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ21pbnV1dGluJyA6ICdtaW51dXR0aWEnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3R1bm5pbicgOiAndHVudGknO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3R1bm5pbicgOiAndHVudGlhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdww6RpdsOkbicgOiAncMOkaXbDpCc7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6TDpCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAna3V1a2F1ZGVuJyA6ICdrdXVrYXVzaSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAna3V1a2F1ZGVuJyA6ICdrdXVrYXV0dGEnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3Z1b2RlbicgOiAndnVvc2knO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3Z1b2RlbicgOiAndnVvdHRhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB2ZXJiYWxOdW1iZXIobnVtYmVyLCBpc0Z1dHVyZSkgKyAnICcgKyByZXN1bHQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcmJhbE51bWJlcihudW1iZXIsIGlzRnV0dXJlKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgPCAxMFxuICAgICAgICAgICAgPyBpc0Z1dHVyZVxuICAgICAgICAgICAgICAgID8gbnVtYmVyc0Z1dHVyZVtudW1iZXJdXG4gICAgICAgICAgICAgICAgOiBudW1iZXJzUGFzdFtudW1iZXJdXG4gICAgICAgICAgICA6IG51bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZmkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmaScsIHtcbiAgICAgICAgbW9udGhzOiAndGFtbWlrdXVfaGVsbWlrdXVfbWFhbGlza3V1X2h1aHRpa3V1X3RvdWtva3V1X2tlc8Oka3V1X2hlaW7DpGt1dV9lbG9rdXVfc3l5c2t1dV9sb2tha3V1X21hcnJhc2t1dV9qb3VsdWt1dScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAndGFtbWlfaGVsbWlfbWFhbGlzX2h1aHRpX3RvdWtvX2tlc8OkX2hlaW7DpF9lbG9fc3l5c19sb2thX21hcnJhc19qb3VsdScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdzdW5udW50YWlfbWFhbmFudGFpX3RpaXN0YWlfa2Vza2l2aWlra29fdG9yc3RhaV9wZXJqYW50YWlfbGF1YW50YWknLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3N1X21hX3RpX2tlX3RvX3BlX2xhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3N1X21hX3RpX2tlX3RvX3BlX2xhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISC5tbScsXG4gICAgICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0RvIE1NTU1bdGFdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRG8gTU1NTVt0YV0gWVlZWSwgW2tsb10gSEgubW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIERvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIGw6ICdELk0uWVlZWScsXG4gICAgICAgICAgICBsbDogJ0RvIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIGxsbDogJ0RvIE1NTSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkLCBEbyBNTU0gWVlZWSwgW2tsb10gSEgubW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t0w6Ruw6TDpG5dIFtrbG9dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaHVvbWVubmFdIFtrbG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2xvXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2VpbGVuXSBba2xvXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1t2aWltZV0gZGRkZFtuYV0gW2tsb10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBww6TDpHN0w6QnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHNpdHRlbicsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZmk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRmlsaXBpbm8gW2ZpbF1cbi8vISBhdXRob3IgOiBEYW4gSGFnbWFuIDogaHR0cHM6Ly9naXRodWIuY29tL2hhZ21hbmRhblxuLy8hIGF1dGhvciA6IE1hdHRoZXcgQ28gOiBodHRwczovL2dpdGh1Yi5jb20vbWF0dGhld2RlZWNvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZmlsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmlsJywge1xuICAgICAgICBtb250aHM6ICdFbmVyb19QZWJyZXJvX01hcnNvX0FicmlsX01heW9fSHVueW9fSHVseW9fQWdvc3RvX1NldHllbWJyZV9Pa3R1YnJlX05vYnllbWJyZV9EaXN5ZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnRW5lX1BlYl9NYXJfQWJyX01heV9IdW5fSHVsX0Fnb19TZXRfT2t0X05vYl9EaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnTGluZ2dvX0x1bmVzX01hcnRlc19NaXllcmt1bGVzX0h1d2ViZXNfQml5ZXJuZXNfU2FiYWRvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnTGluX0x1bl9NYXJfTWl5X0h1d19CaXlfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0xpX0x1X01hX01pX0h1X0JpX1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ01NL0QvWVlZWScsXG4gICAgICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gREQsIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ0xUIFtuZ2F5b25nIGFyYXddJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQnVrYXMgbmddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnTFQgW3NhIHN1c3Vub2QgbmFdIGRkZGQnLFxuICAgICAgICAgICAgbGFzdERheTogJ0xUIFtrYWhhcG9uXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ0xUIFtub29uZyBuYWthcmFhbmddIGRkZGQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdzYSBsb29iIG5nICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhbmcgbmFrYWxpcGFzJyxcbiAgICAgICAgICAgIHM6ICdpbGFuZyBzZWd1bmRvJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kbycsXG4gICAgICAgICAgICBtOiAnaXNhbmcgbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvJyxcbiAgICAgICAgICAgIGg6ICdpc2FuZyBvcmFzJyxcbiAgICAgICAgICAgIGhoOiAnJWQgb3JhcycsXG4gICAgICAgICAgICBkOiAnaXNhbmcgYXJhdycsXG4gICAgICAgICAgICBkZDogJyVkIGFyYXcnLFxuICAgICAgICAgICAgTTogJ2lzYW5nIGJ1d2FuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnV3YW4nLFxuICAgICAgICAgICAgeTogJ2lzYW5nIHRhb24nLFxuICAgICAgICAgICAgeXk6ICclZCB0YW9uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZpbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGYXJvZXNlIFtmb11cbi8vISBhdXRob3IgOiBSYWduYXIgSm9oYW5uZXNlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWduYXIxMjNcbi8vISBhdXRob3IgOiBLcmlzdGlhbiBTYWthcmlzc29uIDogaHR0cHM6Ly9naXRodWIuY29tL3Nha2FyaXNzb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBmbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZvJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcsOtbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcl9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnc3VubnVkYWd1cl9tw6FuYWRhZ3VyX3TDvXNkYWd1cl9taWt1ZGFndXJfaMOzc2RhZ3VyX2Zyw61nZ2phZGFndXJfbGV5Z2FyZGFndXInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3N1bl9tw6FuX3TDvXNfbWlrX2jDs3NfZnLDrV9sZXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc3VfbcOhX3TDvV9taV9ow7NfZnJfbGUnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRC4gTU1NTSwgWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW8ONIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbw40gbW9yZ2luIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbw40gZ2rDoXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tzw63DsHN0dV0gZGRkZCBba2xdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAndW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHPDrcOwYW5pJyxcbiAgICAgICAgICAgIHM6ICdmw6Egc2VrdW5kJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kaXInLFxuICAgICAgICAgICAgbTogJ2VpbiBtaW51dHR1cicsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0dGlyJyxcbiAgICAgICAgICAgIGg6ICdlaW4gdMOtbWknLFxuICAgICAgICAgICAgaGg6ICclZCB0w61tYXInLFxuICAgICAgICAgICAgZDogJ2VpbiBkYWd1cicsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIE06ICdlaW4gbcOhbmHDsHVyJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOhbmHDsGlyJyxcbiAgICAgICAgICAgIHk6ICdlaXR0IMOhcicsXG4gICAgICAgICAgICB5eTogJyVkIMOhcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRnJlbmNoIFtmcl1cbi8vISBhdXRob3IgOiBKb2huIEZpc2NoZXIgOiBodHRwczovL2dpdGh1Yi5jb20vamZyb2ZmaWNlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU3RyaWN0UmVnZXggPVxuICAgICAgICAgICAgL14oamFudmllcnxmw6l2cmllcnxtYXJzfGF2cmlsfG1haXxqdWlufGp1aWxsZXR8YW/Du3R8c2VwdGVtYnJlfG9jdG9icmV8bm92ZW1icmV8ZMOpY2VtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4ID1cbiAgICAgICAgICAgIC8oamFudlxcLj98ZsOpdnJcXC4/fG1hcnN8YXZyXFwuP3xtYWl8anVpbnxqdWlsXFwuP3xhb8O7dHxzZXB0XFwuP3xvY3RcXC4/fG5vdlxcLj98ZMOpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC8oamFudlxcLj98ZsOpdnJcXC4/fG1hcnN8YXZyXFwuP3xtYWl8anVpbnxqdWlsXFwuP3xhb8O7dHxzZXB0XFwuP3xvY3RcXC4/fG5vdlxcLj98ZMOpY1xcLj98amFudmllcnxmw6l2cmllcnxtYXJzfGF2cmlsfG1haXxqdWlufGp1aWxsZXR8YW/Du3R8c2VwdGVtYnJlfG9jdG9icmV8bm92ZW1icmV8ZMOpY2VtYnJlKS9pLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eamFudi9pLFxuICAgICAgICAgICAgL15mw6l2ci9pLFxuICAgICAgICAgICAgL15tYXJzL2ksXG4gICAgICAgICAgICAvXmF2ci9pLFxuICAgICAgICAgICAgL15tYWkvaSxcbiAgICAgICAgICAgIC9eanVpbi9pLFxuICAgICAgICAgICAgL15qdWlsL2ksXG4gICAgICAgICAgICAvXmFvw7t0L2ksXG4gICAgICAgICAgICAvXnNlcHQvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kw6ljL2ksXG4gICAgICAgIF07XG5cbiAgICB2YXIgZnIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmcicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogbW9udGhzU3RyaWN0UmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IG1vbnRoc1Nob3J0U3RyaWN0UmVnZXgsXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzOiAnZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZGltLl9sdW4uX21hci5fbWVyLl9qZXUuX3Zlbi5fc2FtLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkaV9sdV9tYV9tZV9qZV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RhbnMgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2lsIHkgYSAlcycsXG4gICAgICAgICAgICBzOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRlcycsXG4gICAgICAgICAgICBtOiAndW5lIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ3VuZSBoZXVyZScsXG4gICAgICAgICAgICBoaDogJyVkIGhldXJlcycsXG4gICAgICAgICAgICBkOiAndW4gam91cicsXG4gICAgICAgICAgICBkZDogJyVkIGpvdXJzJyxcbiAgICAgICAgICAgIHc6ICd1bmUgc2VtYWluZScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFpbmVzJyxcbiAgICAgICAgICAgIE06ICd1biBtb2lzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9pcycsXG4gICAgICAgICAgICB5OiAndW4gYW4nLFxuICAgICAgICAgICAgeXk6ICclZCBhbnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXJ8KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBSZXR1cm4gJ2UnIHdoZW4gZGF5IG9mIG1vbnRoID4gMS4gTW92ZSB0aGlzIGNhc2UgaW5zaWRlXG4gICAgICAgICAgICAgICAgLy8gYmxvY2sgZm9yIG1hc2N1bGluZSB3b3JkcyBiZWxvdy5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzMzNzVcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJycpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRnJlbmNoIChDYW5hZGEpIFtmci1jYV1cbi8vISBhdXRob3IgOiBKb25hdGhhbiBBYm91cmJpaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb25iY2FcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBmckNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2EnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RpX2x1X21hX21lX2plX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFucyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaWwgeSBhICVzJyxcbiAgICAgICAgICAgIHM6ICdxdWVscXVlcyBzZWNvbmRlcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZGVzJyxcbiAgICAgICAgICAgIG06ICd1bmUgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAndW5lIGhldXJlJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgICAgIGQ6ICd1biBqb3VyJyxcbiAgICAgICAgICAgIGRkOiAnJWQgam91cnMnLFxuICAgICAgICAgICAgTTogJ3VuIG1vaXMnLFxuICAgICAgICAgICAgTU06ICclZCBtb2lzJyxcbiAgICAgICAgICAgIHk6ICd1biBhbicsXG4gICAgICAgICAgICB5eTogJyVkIGFucycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnJDYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBGcmVuY2ggKFN3aXR6ZXJsYW5kKSBbZnItY2hdXG4vLyEgYXV0aG9yIDogR2FzcGFyZCBCdWNoZXIgOiBodHRwczovL2dpdGh1Yi5jb20vZ2FzcGFyZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGZyQ2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmci1jaCcsIHtcbiAgICAgICAgbW9udGhzOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZGlfbHVfbWFfbWVfamVfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0F1am91cmTigJlodWkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRGVtYWluIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0hpZXIgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZGVybmllciDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYW5zICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdpbCB5IGEgJXMnLFxuICAgICAgICAgICAgczogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kZXMnLFxuICAgICAgICAgICAgbTogJ3VuZSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICd1bmUgaGV1cmUnLFxuICAgICAgICAgICAgaGg6ICclZCBoZXVyZXMnLFxuICAgICAgICAgICAgZDogJ3VuIGpvdXInLFxuICAgICAgICAgICAgZGQ6ICclZCBqb3VycycsXG4gICAgICAgICAgICBNOiAndW4gbW9pcycsXG4gICAgICAgICAgICBNTTogJyVkIG1vaXMnLFxuICAgICAgICAgICAgeTogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfGUpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyQ2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRnJpc2lhbiBbZnldXG4vLyEgYXV0aG9yIDogUm9iaW4gdmFuIGRlciBWbGlldCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JpbjB2YW4wZGVyMHZcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID1cbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21haV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZXMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydFdpdGhvdXREb3RzID1cbiAgICAgICAgICAgICdqYW5fZmViX21ydF9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2Rlcycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBmeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2Z5Jywge1xuICAgICAgICBtb250aHM6ICdqYW5uZXdhcmlzX2ZlYnJld2FyaXNfbWFhcnRfYXByaWxfbWFhaWVfanVueV9qdWx5X2F1Z3VzdHVzX3NlcHRpbWJlcl9va3RvYmVyX25vdmltYmVyX2Rlc2ltYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdzbmVpbl9tb2FuZGVpX3RpaXNkZWlfd29hbnNkZWlfdG9uZ2Vyc2RlaV9mcmVlZF9zbmVvbicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3NpLl9tby5fdGkuX3dvLl90by5fZnIuX3NvLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTaV9Nb19UaV9Xb19Ub19Gcl9Tbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGpvZWQgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9hcm4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanVzdGVyIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vDtGZyw7tuZV0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb2VyICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBseW4nLFxuICAgICAgICAgICAgczogJ2luIHBlYXIgc2Vrb25kZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBzZWtvbmRlbicsXG4gICAgICAgICAgICBtOiAnaWVuIG1pbsO6dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogJ2llbiBvZXJlJyxcbiAgICAgICAgICAgIGhoOiAnJWQgb2VyZW4nLFxuICAgICAgICAgICAgZDogJ2llbiBkZWknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdlbicsXG4gICAgICAgICAgICBNOiAnaWVuIG1vYW5uZScsXG4gICAgICAgICAgICBNTTogJyVkIG1vYW5uZW4nLFxuICAgICAgICAgICAgeTogJ2llbiBqaWVyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgamllcnJlbicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCA/ICdzdGUnIDogJ2RlJylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJcmlzaCBvciBJcmlzaCBHYWVsaWMgW2dhXVxuLy8hIGF1dGhvciA6IEFuZHLDqSBTaWx2YSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hc2twdFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgICAgICdFYW7DoWlyJyxcbiAgICAgICAgICAgICdGZWFiaHJhJyxcbiAgICAgICAgICAgICdNw6FydGEnLFxuICAgICAgICAgICAgJ0FpYnJlw6FuJyxcbiAgICAgICAgICAgICdCZWFsdGFpbmUnLFxuICAgICAgICAgICAgJ01laXRoZWFtaCcsXG4gICAgICAgICAgICAnScO6aWwnLFxuICAgICAgICAgICAgJ0zDum5hc2EnLFxuICAgICAgICAgICAgJ01lw6FuIEbDs21oYWlyJyxcbiAgICAgICAgICAgICdEZWlyZWFkaCBGw7NtaGFpcicsXG4gICAgICAgICAgICAnU2FtaGFpbicsXG4gICAgICAgICAgICAnTm9sbGFpZycsXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gW1xuICAgICAgICAgICAgJ0VhbicsXG4gICAgICAgICAgICAnRmVhYmgnLFxuICAgICAgICAgICAgJ03DoXJ0JyxcbiAgICAgICAgICAgICdBaWInLFxuICAgICAgICAgICAgJ0JlYWwnLFxuICAgICAgICAgICAgJ01laXRoJyxcbiAgICAgICAgICAgICdJw7ppbCcsXG4gICAgICAgICAgICAnTMO6bicsXG4gICAgICAgICAgICAnTS5GLicsXG4gICAgICAgICAgICAnRC5GLicsXG4gICAgICAgICAgICAnU2FtaCcsXG4gICAgICAgICAgICAnTm9sbCcsXG4gICAgICAgIF0sXG4gICAgICAgIHdlZWtkYXlzID0gW1xuICAgICAgICAgICAgJ0TDqSBEb21obmFpZ2gnLFxuICAgICAgICAgICAgJ0TDqSBMdWFpbicsXG4gICAgICAgICAgICAnRMOpIE3DoWlydCcsXG4gICAgICAgICAgICAnRMOpIEPDqWFkYW9pbicsXG4gICAgICAgICAgICAnRMOpYXJkYW9pbicsXG4gICAgICAgICAgICAnRMOpIGhBb2luZScsXG4gICAgICAgICAgICAnRMOpIFNhdGhhaXJuJyxcbiAgICAgICAgXSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA9IFsnRG9taCcsICdMdWFuJywgJ03DoWlydCcsICdDw6lhZCcsICdEw6lhcicsICdBb2luZScsICdTYXRoJ10sXG4gICAgICAgIHdlZWtkYXlzTWluID0gWydEbycsICdMdScsICdNw6EnLCAnQ8OpJywgJ0TDqScsICdBJywgJ1NhJ107XG5cbiAgICB2YXIgZ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnYScsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiB3ZWVrZGF5c1Nob3J0LFxuICAgICAgICB3ZWVrZGF5c01pbjogd2Vla2RheXNNaW4sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSW5uaXUgYWddIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW3DoXJhY2ggYWddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYWddIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSW5uw6kgYWddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbc2VvIGNhaXRlXSBbYWddIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgw7Mgc2hpbicsXG4gICAgICAgICAgICBzOiAnY8O6cGxhIHNvaWNpbmQnLFxuICAgICAgICAgICAgc3M6ICclZCBzb2ljaW5kJyxcbiAgICAgICAgICAgIG06ICduw7NpbcOpYWQnLFxuICAgICAgICAgICAgbW06ICclZCBuw7NpbcOpYWQnLFxuICAgICAgICAgICAgaDogJ3VhaXIgYW4gY2hsb2lnJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdWFpciBhbiBjaGxvaWcnLFxuICAgICAgICAgICAgZDogJ2zDoScsXG4gICAgICAgICAgICBkZDogJyVkIGzDoScsXG4gICAgICAgICAgICBNOiAnbcOtJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOtb25uYScsXG4gICAgICAgICAgICB5OiAnYmxpYWluJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYmxpYWluJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGR8bmF8bWgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IG51bWJlciA9PT0gMSA/ICdkJyA6IG51bWJlciAlIDEwID09PSAyID8gJ25hJyA6ICdtaCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2NvdHRpc2ggR2FlbGljIFtnZF1cbi8vISBhdXRob3IgOiBKb24gQXNoZG93biA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb25hc2hkb3duXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAgICAgJ0FtIEZhb2lsbGVhY2gnLFxuICAgICAgICAgICAgJ0FuIEdlYXJyYW4nLFxuICAgICAgICAgICAgJ0FtIE3DoHJ0JyxcbiAgICAgICAgICAgICdBbiBHaWJsZWFuJyxcbiAgICAgICAgICAgICdBbiBDw6hpdGVhbicsXG4gICAgICAgICAgICAnQW4gdC3DkmdtaGlvcycsXG4gICAgICAgICAgICAnQW4gdC1JdWNoYXInLFxuICAgICAgICAgICAgJ0FuIEzDuW5hc3RhbCcsXG4gICAgICAgICAgICAnQW4gdC1TdWx0YWluJyxcbiAgICAgICAgICAgICdBbiBEw6BtaGFpcicsXG4gICAgICAgICAgICAnQW4gdC1TYW1oYWluJyxcbiAgICAgICAgICAgICdBbiBEw7liaGxhY2hkJyxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSBbXG4gICAgICAgICAgICAnRmFvaScsXG4gICAgICAgICAgICAnR2VhcicsXG4gICAgICAgICAgICAnTcOgcnQnLFxuICAgICAgICAgICAgJ0dpYmwnLFxuICAgICAgICAgICAgJ0PDqGl0JyxcbiAgICAgICAgICAgICfDkmdtaCcsXG4gICAgICAgICAgICAnSXVjaCcsXG4gICAgICAgICAgICAnTMO5bicsXG4gICAgICAgICAgICAnU3VsdCcsXG4gICAgICAgICAgICAnRMOgbWgnLFxuICAgICAgICAgICAgJ1NhbWgnLFxuICAgICAgICAgICAgJ0TDuWJoJyxcbiAgICAgICAgXSxcbiAgICAgICAgd2Vla2RheXMgPSBbXG4gICAgICAgICAgICAnRGlkw7JtaG5haWNoJyxcbiAgICAgICAgICAgICdEaWx1YWluJyxcbiAgICAgICAgICAgICdEaW3DoGlydCcsXG4gICAgICAgICAgICAnRGljaWFkYWluJyxcbiAgICAgICAgICAgICdEaWFyZGFvaW4nLFxuICAgICAgICAgICAgJ0RpaGFvaW5lJyxcbiAgICAgICAgICAgICdEaXNhdGhhaXJuZScsXG4gICAgICAgIF0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgPSBbJ0RpZCcsICdEaWwnLCAnRGltJywgJ0RpYycsICdEaWEnLCAnRGloJywgJ0RpcyddLFxuICAgICAgICB3ZWVrZGF5c01pbiA9IFsnRMOyJywgJ0x1JywgJ03DoCcsICdDaScsICdBcicsICdIYScsICdTYSddO1xuXG4gICAgdmFyIGdkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ2QnLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzU2hvcnQsXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogd2Vla2RheXNTaG9ydCxcbiAgICAgICAgd2Vla2RheXNNaW46IHdlZWtkYXlzTWluLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0FuLWRpdWdoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBLW3DoGlyZWFjaCBhaWddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYWlnXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0FuLWTDqCBhaWddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbc2VvIGNoYWlkaF0gW2FpZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdhbm4gYW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2JobyBjaGlvbm4gJXMnLFxuICAgICAgICAgICAgczogJ2JlYWdhbiBkaW9nYW4nLFxuICAgICAgICAgICAgc3M6ICclZCBkaW9nYW4nLFxuICAgICAgICAgICAgbTogJ21pb25haWQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW9uYWlkZWFuJyxcbiAgICAgICAgICAgIGg6ICd1YWlyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdWFpcmVhbicsXG4gICAgICAgICAgICBkOiAnbGF0aGEnLFxuICAgICAgICAgICAgZGQ6ICclZCBsYXRoYScsXG4gICAgICAgICAgICBNOiAnbcOsb3MnLFxuICAgICAgICAgICAgTU06ICclZCBtw6xvc2FuJyxcbiAgICAgICAgICAgIHk6ICdibGlhZGhuYScsXG4gICAgICAgICAgICB5eTogJyVkIGJsaWFkaG5hJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGR8bmF8bWgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IG51bWJlciA9PT0gMSA/ICdkJyA6IG51bWJlciAlIDEwID09PSAyID8gJ25hJyA6ICdtaCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2Q7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2FsaWNpYW4gW2dsXVxuLy8hIGF1dGhvciA6IEp1YW4gRy4gSHVydGFkbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWFuZ2h1cnRhZG9cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBnbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dsJywge1xuICAgICAgICBtb250aHM6ICd4YW5laXJvX2ZlYnJlaXJvX21hcnpvX2FicmlsX21haW9feHXDsW9feHVsbG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGVjZW1icm8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ3hhbi5fZmViLl9tYXIuX2Fici5fbWFpLl94dcOxLl94dWwuX2Fnby5fc2V0Ll9vdXQuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2RvbWluZ29fbHVuc19tYXJ0ZXNfbcOpcmNvcmVzX3hvdmVzX3ZlbnJlc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tLl9sdW4uX21hci5fbcOpci5feG92Ll92ZW4uX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX23DqV94b192ZV9zw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG94ZSAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICfDoXMnIDogJ8OhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7HDoSAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICfDoXMnIDogJ8OhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgWycgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ8OhcycgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tvbnRlICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ8OhJyA6ICdhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW29dIGRkZGQgW3Bhc2FkbyAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICfDoXMnIDogJ2EnKSArICddIExUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmluZGV4T2YoJ3VuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICduJyArIHN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbiAnICsgc3RyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3Q6ICdoYWkgJXMnLFxuICAgICAgICAgICAgczogJ3VucyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGg6ICd1bmhhIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW4gYW5vJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5vcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2w7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS29ua2FuaSBEZXZhbmFnYXJpIHNjcmlwdCBbZ29tLWRldmFdXG4vLyEgYXV0aG9yIDogVGhlIERpc2NvdmVyZXIgOiBodHRwczovL2dpdGh1Yi5jb20vV2lraURpc2NvdmVyZXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzOiBbJ+CkpeCli+CkoeCkr+CkviDgpLjgpYXgpJXgpILgpKHgpL7gpILgpKjgpYAnLCAn4KSl4KWL4KSh4KWHIOCkuOClheCkleCkguCkoSddLFxuICAgICAgICAgICAgc3M6IFtudW1iZXIgKyAnIOCkuOClheCkleCkguCkoeCkvuCkguCkqOClgCcsIG51bWJlciArICcg4KS44KWF4KSV4KSC4KShJ10sXG4gICAgICAgICAgICBtOiBbJ+Ckj+CkleCkviDgpK7gpL/gpKPgpJ/gpL7gpKgnLCAn4KSP4KSVIOCkruCkv+CkqOClguCknyddLFxuICAgICAgICAgICAgbW06IFtudW1iZXIgKyAnIOCkruCkv+Cko+Ckn+CkvuCkguCkqOClgCcsIG51bWJlciArICcg4KSu4KS/4KSj4KSf4KS+4KSCJ10sXG4gICAgICAgICAgICBoOiBbJ+Ckj+CkleCkviDgpLXgpLDgpL7gpKgnLCAn4KSP4KSVIOCkteCksCddLFxuICAgICAgICAgICAgaGg6IFtudW1iZXIgKyAnIOCkteCksOCkvuCkguCkqOClgCcsIG51bWJlciArICcg4KS14KSw4KS+4KSCJ10sXG4gICAgICAgICAgICBkOiBbJ+Ckj+CkleCkviDgpKbgpL/gpLjgpL7gpKgnLCAn4KSP4KSVIOCkpuClgOCkuCddLFxuICAgICAgICAgICAgZGQ6IFtudW1iZXIgKyAnIOCkpuCkv+CkuOCkvuCkguCkqOClgCcsIG51bWJlciArICcg4KSm4KWA4KS4J10sXG4gICAgICAgICAgICBNOiBbJ+Ckj+CkleCkviDgpK7gpY3gpLngpK/gpKjgpY3gpK/gpL7gpKgnLCAn4KSP4KSVIOCkruCljeCkueCkr+CkqOCliyddLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIOCkruCljeCkueCkr+CkqOCljeCkr+CkvuCkqOClgCcsIG51bWJlciArICcg4KSu4KWN4KS54KSv4KSo4KWHJ10sXG4gICAgICAgICAgICB5OiBbJ+Ckj+CkleCkviDgpLXgpLDgpY3gpLjgpL7gpKgnLCAn4KSP4KSVIOCkteCksOCljeCkuCddLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIOCkteCksOCljeCkuOCkvuCkguCkqOClgCcsIG51bWJlciArICcg4KS14KSw4KWN4KS44KS+4KSCJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGdvbURldmEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnb20tZGV2YScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWAX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpYDgpLJf4KSu4KWHX+CknOClguCkqF/gpJzgpYHgpLLgpK9f4KSR4KSX4KS44KWN4KSfX+CkuOCkquCljeCkn+Clh+CkguCkrOCksF/gpJHgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSwX+CkoeCkv+CkuOClh+CkguCkrOCksCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6ICfgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYDgpJrgpY3gpK/gpL5f4KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWA4KSa4KWN4KSv4KS+X+CkruCkvuCksOCljeCkmuCkvuCkmuCljeCkr+Ckvl/gpI/gpKrgpY3gpLDgpYDgpLLgpL7gpJrgpY3gpK/gpL5f4KSu4KWH4KSv4KS+4KSa4KWN4KSv4KS+X+CknOClguCkqOCkvuCkmuCljeCkr+Ckvl/gpJzgpYHgpLLgpK/gpL7gpJrgpY3gpK/gpL5f4KSR4KSX4KS44KWN4KSf4KS+4KSa4KWN4KSv4KS+X+CkuOCkquCljeCkn+Clh+CkguCkrOCksOCkvuCkmuCljeCkr+Ckvl/gpJHgpJXgpY3gpJ/gpYvgpKzgpLDgpL7gpJrgpY3gpK/gpL5f4KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSw4KS+4KSa4KWN4KSv4KS+X+CkoeCkv+CkuOClh+CkguCkrOCksOCkvuCkmuCljeCkr+Ckvicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9NTU1NKFxccykrRFtvRF0/LyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4KSc4KS+4KSo4KWHLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpYAuX+CkruClh1/gpJzgpYLgpKhf4KSc4KWB4KSyLl/gpJHgpJcuX+CkuOCkquCljeCkn+Clh+Ckgi5f4KSR4KSV4KWN4KSf4KWLLl/gpKjgpYvgpLXgpY3gpLngpYfgpIIuX+CkoeCkv+CkuOClh+Ckgi4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfgpIbgpK/gpKTgpL7gpLBf4KS44KWL4KSu4KS+4KSwX+CkruCkguCkl+Cks+CkvuCksF/gpKzgpYHgpKfgpLXgpL7gpLBf4KSs4KS/4KSw4KWH4KS44KWN4KSk4KS+4KSwX+CkuOClgeCkleCljeCksOCkvuCksF/gpLbgpYfgpKjgpLXgpL7gpLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgpIbgpK/gpKQuX+CkuOCli+Ckri5f4KSu4KSC4KSX4KSzLl/gpKzgpYHgpKcuX+CkrOCljeCksOClh+CkuOCljeCkpC5f4KS44KWB4KSV4KWN4KSwLl/gpLbgpYfgpKguJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+Ckhl/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpKzgpY3gpLDgpYdf4KS44KWBX+CktuClhycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0gW+CkteCkvuCknOCkpOCkvuCkgl0nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIFvgpLXgpL7gpJzgpKTgpL7gpIJdJyxcbiAgICAgICAgICAgIEw6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgQSBoOm1tIFvgpLXgpL7gpJzgpKTgpL7gpIJdJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIERvLCBZWVlZLCBBIGg6bW0gW+CkteCkvuCknOCkpOCkvuCkgl0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRCBNTU0gWVlZWSwgQSBoOm1tIFvgpLXgpL7gpJzgpKTgpL7gpIJdJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KSG4KSv4KScXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+Ckq+CkvuCksuCljeCkr+CkvuCkgl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb4KSr4KWB4KSh4KSy4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KSV4KS+4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgpKvgpL7gpJ/gpLLgpYtdIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4KSG4KSm4KWA4KSCJyxcbiAgICAgICAgICAgIHM6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOCkteClh+CksCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG9yZGluYWwgJ+CkteClh+CksCcgb25seSBhcHBsaWVzIHRvIGRheSBvZiB0aGUgbW9udGhcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfgpLXgpYfgpLAnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vla1xuICAgICAgICAgICAgZG95OiAzLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIgKDcgKyAwIC0gNClcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CksOCkvuCkpOClgHzgpLjgpJXgpL7gpLPgpYDgpIJ84KSm4KSo4KSq4KS+4KSw4KS+4KSCfOCkuOCkvuCkguCknOClhy8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpOClgCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkleCkvuCks+ClgOCkgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKbgpKjgpKrgpL7gpLDgpL7gpIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPiAxMiA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KS+4KSC4KSc4KWHJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOClgCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KSV4KS+4KSz4KWA4KSCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKbgpKjgpKrgpL7gpLDgpL7gpIInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkvuCkguCknOClhyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KWAJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBnb21EZXZhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEtvbmthbmkgTGF0aW4gc2NyaXB0IFtnb20tbGF0bl1cbi8vISBhdXRob3IgOiBUaGUgRGlzY292ZXJlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9XaWtpRGlzY292ZXJlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHM6IFsndGhvZGRlYSBzZWtvbmRhbW5pJywgJ3Rob2RkZSBzZWtvbmQnXSxcbiAgICAgICAgICAgIHNzOiBbbnVtYmVyICsgJyBzZWtvbmRhbW5pJywgbnVtYmVyICsgJyBzZWtvbmQnXSxcbiAgICAgICAgICAgIG06IFsnZWthIG1pbnRhbicsICdlayBtaW51dCddLFxuICAgICAgICAgICAgbW06IFtudW1iZXIgKyAnIG1pbnRhbW5pJywgbnVtYmVyICsgJyBtaW50YW0nXSxcbiAgICAgICAgICAgIGg6IFsnZWthIHZvcmFuJywgJ2VrIHZvciddLFxuICAgICAgICAgICAgaGg6IFtudW1iZXIgKyAnIHZvcmFtbmknLCBudW1iZXIgKyAnIHZvcmFtJ10sXG4gICAgICAgICAgICBkOiBbJ2VrYSBkaXNhbicsICdlayBkaXMnXSxcbiAgICAgICAgICAgIGRkOiBbbnVtYmVyICsgJyBkaXNhbW5pJywgbnVtYmVyICsgJyBkaXMnXSxcbiAgICAgICAgICAgIE06IFsnZWthIG1ob2luZWFuJywgJ2VrIG1ob2lubyddLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIG1ob2luZWFtbmknLCBudW1iZXIgKyAnIG1ob2luZSddLFxuICAgICAgICAgICAgeTogWydla2Egdm9yc2FuJywgJ2VrIHZvcm9zJ10sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcgdm9yc2FtbmknLCBudW1iZXIgKyAnIHZvcnNhbSddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBnb21MYXRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ29tLWxhdG4nLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAnSmFuZXJfRmVicmVyX01hcnNfQWJyaWxfTWFpX0p1bl9KdWxhaV9BZ29zdF9TZXRlbWJyX090dWJyX05vdmVtYnJfRGV6ZW1icicuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6ICdKYW5lcmFjaGVhX0ZlYnJlcmFjaGVhX01hcnNhY2hlYV9BYnJpbGFjaGVhX01haWFjaGVhX0p1bmFjaGVhX0p1bGFpYWNoZWFfQWdvc3RhY2hlYV9TZXRlbWJyYWNoZWFfT3R1YnJhY2hlYV9Ob3ZlbWJyYWNoZWFfRGV6ZW1icmFjaGVhJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL01NTU0oXFxzKStEW29EXT8vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdKYW4uX0ZlYi5fTWFyc19BYnIuX01haV9KdW5fSnVsLl9BZ28uX1NldC5fT3R1Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiBcIkFpdGFyX1NvbWFyX01vbmdsbGFyX0J1ZGh2YXJfQmlyZXN0YXJfU3VrcmFyX1Nvbid2YXJcIi5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnQWl0Ll9Tb20uX01vbi5fQnVkLl9CcmUuX1N1ay5fU29uLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdBaV9TbV9Nb19CdV9Ccl9TdV9Tbicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0gW3ZhenRhXScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MgW3ZhenRhXScsXG4gICAgICAgICAgICBMOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIERvLCBZWVlZLCBBIGg6bW0gW3ZhenRhXScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkLCBEIE1NTSBZWVlZLCBBIGg6bW0gW3ZhenRhXScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0Fpel0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tGYWxlYW1dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW0Z1ZGRsb10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0thbF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbRmF0dGxvXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFkaW0nLFxuICAgICAgICAgICAgczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXIpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBvcmRpbmFsICdlcicgb25seSBhcHBsaWVzIHRvIGRheSBvZiB0aGUgbW9udGhcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICdlcic7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrXG4gICAgICAgICAgICBkb3k6IDMsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhciAoNyArIDAgLSA0KVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvcmF0aXxzb2thbGxpbXxkb25wYXJhbXxzYW5qZS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3JhdGknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb2thbGxpbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdkb25wYXJhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+IDEyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzYW5qZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyYXRpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb2thbGxpbSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG9ucGFyYW0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NhbmplJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyYXRpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBnb21MYXRuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEd1amFyYXRpIFtndV1cbi8vISBhdXRob3IgOiBLYXVzaGlrIFRoYW5raSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9LYXVzaGlrMTk4N1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgq6cnLFxuICAgICAgICAgICAgMjogJ+CrqCcsXG4gICAgICAgICAgICAzOiAn4KupJyxcbiAgICAgICAgICAgIDQ6ICfgq6onLFxuICAgICAgICAgICAgNTogJ+CrqycsXG4gICAgICAgICAgICA2OiAn4KusJyxcbiAgICAgICAgICAgIDc6ICfgq60nLFxuICAgICAgICAgICAgODogJ+CrricsXG4gICAgICAgICAgICA5OiAn4KuvJyxcbiAgICAgICAgICAgIDA6ICfgq6YnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KunJzogJzEnLFxuICAgICAgICAgICAgJ+CrqCc6ICcyJyxcbiAgICAgICAgICAgICfgq6knOiAnMycsXG4gICAgICAgICAgICAn4KuqJzogJzQnLFxuICAgICAgICAgICAgJ+Crqyc6ICc1JyxcbiAgICAgICAgICAgICfgq6wnOiAnNicsXG4gICAgICAgICAgICAn4KutJzogJzcnLFxuICAgICAgICAgICAgJ+Crric6ICc4JyxcbiAgICAgICAgICAgICfgq68nOiAnOScsXG4gICAgICAgICAgICAn4KumJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGd1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ3UnLCB7XG4gICAgICAgIG1vbnRoczogJ+CqnOCqvuCqqOCrjeCqr+CrgeCqhuCqsOCrgF/gqqvgq4fgqqzgq43gqrDgq4HgqobgqrDgq4Bf4Kqu4Kq+4Kqw4KuN4KqaX+Cqj+CqquCrjeCqsOCqv+Cqsl/gqq7gq4df4Kqc4KuC4KqoX+CqnOCrgeCqsuCqvuCqiF/gqpHgqpfgqrjgq43gqp9f4Kq44Kqq4KuN4Kqf4KuH4Kqu4KuN4Kqs4KqwX+CqkeCqleCrjeCqn+CrjeCqrOCqsF/gqqjgqrXgq4fgqq7gq43gqqzgqrBf4Kqh4Kq/4Kq44KuH4Kqu4KuN4Kqs4KqwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgqpzgqr7gqqjgq43gqq/gq4EuX+Cqq+Crh+CqrOCrjeCqsOCrgS5f4Kqu4Kq+4Kqw4KuN4KqaX+Cqj+CqquCrjeCqsOCqvy5f4Kqu4KuHX+CqnOCrguCqqF/gqpzgq4HgqrLgqr4uX+CqkeCqly5f4Kq44Kqq4KuN4Kqf4KuHLl/gqpHgqpXgq43gqp/gq40uX+CqqOCqteCrhy5f4Kqh4Kq/4Kq44KuHLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+CqsOCqteCqv+CqteCqvuCqsF/gqrjgq4vgqq7gqrXgqr7gqrBf4Kqu4KqC4KqX4Kqz4Kq14Kq+4KqwX+CqrOCrgeCqp+CrjeCqteCqvuCqsF/gqpfgq4HgqrDgq4HgqrXgqr7gqrBf4Kq24KuB4KqV4KuN4Kqw4Kq14Kq+4KqwX+CqtuCqqOCqv+CqteCqvuCqsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CqsOCqteCqv1/gqrjgq4vgqq5f4Kqu4KqC4KqX4KqzX+CqrOCrgeCqp+CrjV/gqpfgq4HgqrDgq4Ff4Kq24KuB4KqV4KuN4KqwX+CqtuCqqOCqvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgqrBf4Kq44KuLX+CqruCqgl/gqqzgq4Ff4KqX4KuBX+CqtuCrgV/gqrYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CqhuCqnF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgqpXgqr7gqrLgq4ddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgqpfgqofgqpXgqr7gqrLgq4ddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CqquCqvuCqm+CqsuCqvl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgqq7gqr4nLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCqquCqueCrh+CqsuCqvicsXG4gICAgICAgICAgICBzOiAn4KqF4Kqu4KuB4KqVIOCqquCqs+CriycsXG4gICAgICAgICAgICBzczogJyVkIOCquOCrh+CqleCqguCqoScsXG4gICAgICAgICAgICBtOiAn4KqP4KqVIOCqruCqv+CqqOCqv+CqnycsXG4gICAgICAgICAgICBtbTogJyVkIOCqruCqv+CqqOCqv+CqnycsXG4gICAgICAgICAgICBoOiAn4KqP4KqVIOCqleCqsuCqvuCqlScsXG4gICAgICAgICAgICBoaDogJyVkIOCqleCqsuCqvuCqlScsXG4gICAgICAgICAgICBkOiAn4KqP4KqVIOCqpuCqv+CqteCquCcsXG4gICAgICAgICAgICBkZDogJyVkIOCqpuCqv+CqteCquCcsXG4gICAgICAgICAgICBNOiAn4KqP4KqVIOCqruCqueCqv+CqqOCriycsXG4gICAgICAgICAgICBNTTogJyVkIOCqruCqueCqv+CqqOCriycsXG4gICAgICAgICAgICB5OiAn4KqP4KqVIOCqteCqsOCrjeCqtycsXG4gICAgICAgICAgICB5eTogJyVkIOCqteCqsOCrjeCqtycsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgq6fgq6jgq6ngq6rgq6vgq6zgq63gq67gq6/gq6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEd1amFyYXRpIG5vdGF0aW9uIGZvciBtZXJpZGllbXMgYXJlIHF1aXRlIGZ1enp5IGluIHByYWN0aWNlLiBXaGlsZSB0aGVyZSBleGlzdHNcbiAgICAgICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIEd1amFyYXRpLlxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Kqw4Kq+4KqkfOCqrOCqquCri+CqsHzgqrjgqrXgqr7gqrB84Kq44Kq+4KqC4KqcLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4Kqw4Kq+4KqkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kq44Kq14Kq+4KqwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CqrOCqquCri+CqsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kq44Kq+4KqC4KqcJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CqsOCqvuCqpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kq44Kq14Kq+4KqwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqqzgqqrgq4vgqrAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CquOCqvuCqguCqnCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kqw4Kq+4KqkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGd1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEhlYnJldyBbaGVdXG4vLyEgYXV0aG9yIDogVG9tZXIgQ29oZW4gOiBodHRwczovL2dpdGh1Yi5jb20vdG9tZXJcbi8vISBhdXRob3IgOiBNb3NoZSBTaW1hbnRvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZlbG9wbWVudElMXG4vLyEgYXV0aG9yIDogVGFsIEF0ZXIgOiBodHRwczovL2dpdGh1Yi5jb20vVGFsQXRlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGhlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaGUnLCB7XG4gICAgICAgIG1vbnRoczogJ9eZ16DXldeQ16hf16TXkdeo15XXkNeoX9ee16jXpV/XkNek16jXmdecX9ee15DXmV/XmdeV16DXmV/XmdeV15zXmV/XkNeV15LXldeh15hf16HXpNeY157XkdeoX9eQ15XXp9eY15XXkdeoX9eg15XXkdee15HXqF/Xk9em157XkdeoJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfXmdeg15XXs1/XpNeR16jXs1/Xnteo16Vf15DXpNeo17Nf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXktezX9eh16TXmNezX9eQ15XXp9ezX9eg15XXkdezX9eT16bXntezJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9eo15DXqdeV159f16nXoNeZX9ep15zXmdep15lf16jXkdeZ16LXmV/Xl9ee15nXqdeZX9ep15nXqdeZX9ep15HXqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9eQ17Nf15HXs1/XktezX9eT17Nf15TXs1/XldezX9ep17MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn15Bf15Ff15Jf15Nf15Rf15Vf16knLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBb15FdTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW9eRXU1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdEL00vWVlZWScsXG4gICAgICAgICAgICBsbDogJ0QgTU1NIFlZWVknLFxuICAgICAgICAgICAgbGxsOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkLCBEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb15TXmdeV150g15HWvl1MVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9ee15fXqCDXkda+XUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb15HXqdei15RdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb15DXqtee15XXnCDXkda+XUxUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9eR15nXldedXSBkZGRkIFvXlNeQ15fXqNeV158g15HXqdei15RdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn15HXoteV15MgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9ec16TXoNeZICVzJyxcbiAgICAgICAgICAgIHM6ICfXnteh16TXqCDXqdeg15nXldeqJyxcbiAgICAgICAgICAgIHNzOiAnJWQg16nXoNeZ15XXqicsXG4gICAgICAgICAgICBtOiAn15PXp9eUJyxcbiAgICAgICAgICAgIG1tOiAnJWQg15PXp9eV16onLFxuICAgICAgICAgICAgaDogJ9ep16LXlCcsXG4gICAgICAgICAgICBoaDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXqdei16rXmdeZ150nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdei15XXqic7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZDogJ9eZ15XXnScsXG4gICAgICAgICAgICBkZDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXmdeV157XmdeZ150nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXmdee15nXnSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgTTogJ9eX15XXk9epJyxcbiAgICAgICAgICAgIE1NOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9eX15XXk9ep15nXmdedJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg15fXldeT16nXmdedJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5OiAn16nXoNeUJyxcbiAgICAgICAgICAgIHl5OiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9ep16DXqteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgJSAxMCA9PT0gMCAmJiBudW1iZXIgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXlCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXmdedJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6XG4gICAgICAgICAgICAv15DXl9eUXCLXpnzXnNek16DXlFwi16Z815DXl9eo15kg15TXpteU16jXmdeZ151815zXpNeg15kg15TXpteU16jXmdeZ151815zXpNeg15XXqiDXkdeV16fXqHzXkdeR15XXp9eofNeR16LXqNeRL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNeQ15fXlFwi16Z815DXl9eo15kg15TXpteU16jXmdeZ151815HXoteo15EpJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9ec16TXoNeV16og15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfXnNek16DXlFwi16YnIDogJ9ec16TXoNeZINeU16bXlNeo15nXmdedJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn15DXl9eUXCLXpicgOiAn15DXl9eo15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR16LXqNeRJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBoZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBIaW5kaSBbaGldXG4vLyEgYXV0aG9yIDogTWF5YW5rIFNpbmdoYWwgOiBodHRwczovL2dpdGh1Yi5jb20vbWF5YW5rc2luZ2hhbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgpacnLFxuICAgICAgICAgICAgMjogJ+ClqCcsXG4gICAgICAgICAgICAzOiAn4KWpJyxcbiAgICAgICAgICAgIDQ6ICfgpaonLFxuICAgICAgICAgICAgNTogJ+ClqycsXG4gICAgICAgICAgICA2OiAn4KWsJyxcbiAgICAgICAgICAgIDc6ICfgpa0nLFxuICAgICAgICAgICAgODogJ+ClricsXG4gICAgICAgICAgICA5OiAn4KWvJyxcbiAgICAgICAgICAgIDA6ICfgpaYnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KWnJzogJzEnLFxuICAgICAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICAgICAn4KWqJzogJzQnLFxuICAgICAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICAgICAn4KWtJzogJzcnLFxuICAgICAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICAgICAn4KWmJzogJzAnLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9e4KSc4KSoL2ksXG4gICAgICAgICAgICAvXuCkq+CkvOCksHzgpKvgpLAvaSxcbiAgICAgICAgICAgIC9e4KSu4KS+4KSw4KWN4KSaL2ksXG4gICAgICAgICAgICAvXuCkheCkquCljeCksOCliC9pLFxuICAgICAgICAgICAgL17gpK7gpIgvaSxcbiAgICAgICAgICAgIC9e4KSc4KWC4KSoL2ksXG4gICAgICAgICAgICAvXuCknOClgeCksi9pLFxuICAgICAgICAgICAgL17gpIXgpJcvaSxcbiAgICAgICAgICAgIC9e4KS44KS/4KSk4KSCfOCkuOCkv+CkpC9pLFxuICAgICAgICAgICAgL17gpIXgpJXgpY3gpJ/gpYIvaSxcbiAgICAgICAgICAgIC9e4KSo4KS1fOCkqOCkteCkgi9pLFxuICAgICAgICAgICAgL17gpKbgpL/gpLjgpIJ84KSm4KS/4KS4L2ksXG4gICAgICAgIF0sXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXuCknOCkqC9pLFxuICAgICAgICAgICAgL17gpKvgpLzgpLAvaSxcbiAgICAgICAgICAgIC9e4KSu4KS+4KSw4KWN4KSaL2ksXG4gICAgICAgICAgICAvXuCkheCkquCljeCksOCliC9pLFxuICAgICAgICAgICAgL17gpK7gpIgvaSxcbiAgICAgICAgICAgIC9e4KSc4KWC4KSoL2ksXG4gICAgICAgICAgICAvXuCknOClgeCksi9pLFxuICAgICAgICAgICAgL17gpIXgpJcvaSxcbiAgICAgICAgICAgIC9e4KS44KS/4KSkL2ksXG4gICAgICAgICAgICAvXuCkheCkleCljeCkn+Clgi9pLFxuICAgICAgICAgICAgL17gpKjgpLUvaSxcbiAgICAgICAgICAgIC9e4KSm4KS/4KS4L2ksXG4gICAgICAgIF07XG5cbiAgICB2YXIgaGkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoaScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KS84KSw4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYjgpLJf4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS44KWN4KSkX+CkuOCkv+CkpOCkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYLgpKzgpLBf4KSo4KS14KSu4KWN4KSs4KSwX+CkpuCkv+CkuOCkruCljeCkrOCksCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn4KSc4KSo4KS14KSw4KWAX+Ckq+CksOCkteCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KWI4KSyX+CkruCkiF/gpJzgpYLgpKhf4KSc4KWB4KSy4KS+4KSIX+CkheCkl+CkuOCljeCkpF/gpLjgpL/gpKTgpILgpKzgpLBf4KSF4KSV4KWN4KSf4KWC4KSs4KSwX+CkqOCkteCkguCkrOCksF/gpKbgpL/gpLjgpILgpKzgpLAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgpJzgpKguX+Ckq+CkvOCksC5f4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliC5f4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLIuX+CkheCkly5f4KS44KS/4KSkLl/gpIXgpJXgpY3gpJ/gpYIuX+CkqOCktS5f4KSm4KS/4KS4Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfgpLDgpLXgpL/gpLXgpL7gpLBf4KS44KWL4KSu4KS14KS+4KSwX+CkruCkguCkl+CksuCkteCkvuCksF/gpKzgpYHgpKfgpLXgpL7gpLBf4KSX4KWB4KSw4KWC4KS14KS+4KSwX+CktuClgeCkleCljeCksOCkteCkvuCksF/gpLbgpKjgpL/gpLXgpL7gpLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgpLDgpLXgpL9f4KS44KWL4KSuX+CkruCkguCkl+Cksl/gpKzgpYHgpKdf4KSX4KWB4KSw4KWCX+CktuClgeCkleCljeCksF/gpLbgpKjgpL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KSwX+CkuOCli1/gpK7gpIJf4KSs4KWBX+Ckl+ClgV/gpLbgpYFf4KS2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCkrOCknOClhycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogc2hvcnRNb250aHNQYXJzZSxcblxuICAgICAgICBtb250aHNSZWdleDpcbiAgICAgICAgICAgIC9eKOCknOCkqOCkteCksOClgHzgpJzgpKhcXC4/fOCkq+CkvOCksOCkteCksOClgHzgpKvgpLDgpLXgpLDgpYB84KSr4KS84KSwXFwuP3zgpK7gpL7gpLDgpY3gpJo/fOCkheCkquCljeCksOCliOCksnzgpIXgpKrgpY3gpLDgpYhcXC4/fOCkruCkiD984KSc4KWC4KSoP3zgpJzgpYHgpLLgpL7gpIh84KSc4KWB4KSyXFwuP3zgpIXgpJfgpLjgpY3gpKR84KSF4KSXXFwuP3zgpLjgpL/gpKTgpK7gpY3gpKzgpLB84KS44KS/4KSk4KSC4KSs4KSwfOCkuOCkv+CkpFxcLj984KSF4KSV4KWN4KSf4KWC4KSs4KSwfOCkheCkleCljeCkn+ClglxcLj984KSo4KS14KSu4KWN4KSs4KSwfOCkqOCkteCkguCkrOCksHzgpKjgpLVcXC4/fOCkpuCkv+CkuOCkruCljeCkrOCksHzgpKbgpL/gpLjgpILgpKzgpLB84KSm4KS/4KS4XFwuPykvaSxcblxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OlxuICAgICAgICAgICAgL14o4KSc4KSo4KS14KSw4KWAfOCknOCkqFxcLj984KSr4KS84KSw4KS14KSw4KWAfOCkq+CksOCkteCksOClgHzgpKvgpLzgpLBcXC4/fOCkruCkvuCksOCljeCkmj984KSF4KSq4KWN4KSw4KWI4KSyfOCkheCkquCljeCksOCliFxcLj984KSu4KSIP3zgpJzgpYLgpKg/fOCknOClgeCksuCkvuCkiHzgpJzgpYHgpLJcXC4/fOCkheCkl+CkuOCljeCkpHzgpIXgpJdcXC4/fOCkuOCkv+CkpOCkruCljeCkrOCksHzgpLjgpL/gpKTgpILgpKzgpLB84KS44KS/4KSkXFwuP3zgpIXgpJXgpY3gpJ/gpYLgpKzgpLB84KSF4KSV4KWN4KSf4KWCXFwuP3zgpKjgpLXgpK7gpY3gpKzgpLB84KSo4KS14KSC4KSs4KSwfOCkqOCktVxcLj984KSm4KS/4KS44KSu4KWN4KSs4KSwfOCkpuCkv+CkuOCkguCkrOCksHzgpKbgpL/gpLhcXC4/KS9pLFxuXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14o4KSc4KSo4KS14KSw4KWAP3zgpKvgpLzgpLDgpLXgpLDgpYB84KSr4KSw4KS14KSw4KWAP3zgpK7gpL7gpLDgpY3gpJo/fOCkheCkquCljeCksOCliOCksj984KSu4KSIP3zgpJzgpYLgpKg/fOCknOClgeCksuCkvuCkiD984KSF4KSX4KS44KWN4KSkP3zgpLjgpL/gpKTgpK7gpY3gpKzgpLB84KS44KS/4KSk4KSC4KSs4KSwfOCkuOCkv+CkpD9cXC4/fOCkheCkleCljeCkn+ClguCkrOCksHzgpIXgpJXgpY3gpJ/gpYJcXC4/fOCkqOCkteCkruCljeCkrOCksHzgpKjgpLXgpILgpKzgpLA/fOCkpuCkv+CkuOCkruCljeCkrOCksHzgpKbgpL/gpLjgpILgpKzgpLA/KS9pLFxuXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXijgpJzgpKhcXC4/fOCkq+CkvOCksFxcLj984KSu4KS+4KSw4KWN4KSaP3zgpIXgpKrgpY3gpLDgpYhcXC4/fOCkruCkiD984KSc4KWC4KSoP3zgpJzgpYHgpLJcXC4/fOCkheCkl1xcLj984KS44KS/4KSkXFwuP3zgpIXgpJXgpY3gpJ/gpYJcXC4/fOCkqOCktVxcLj984KSm4KS/4KS4XFwuPykvaSxcblxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgpKrgpL/gpJvgpLLgpYddIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4KSu4KWH4KSCJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgpKrgpLngpLLgpYcnLFxuICAgICAgICAgICAgczogJ+CkleClgeCkmyDgpLngpYAg4KSV4KWN4KS34KSjJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4KS44KWH4KSV4KSC4KShJyxcbiAgICAgICAgICAgIG06ICfgpI/gpJUg4KSu4KS/4KSo4KSfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4KSu4KS/4KSo4KSfJyxcbiAgICAgICAgICAgIGg6ICfgpI/gpJUg4KSY4KSC4KSf4KS+JyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KSY4KSC4KSf4KWHJyxcbiAgICAgICAgICAgIGQ6ICfgpI/gpJUg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIE06ICfgpI/gpJUg4KSu4KS54KWA4KSo4KWHJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4KSu4KS54KWA4KSo4KWHJyxcbiAgICAgICAgICAgIHk6ICfgpI/gpJUg4KS14KSw4KWN4KS3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4KS14KSw4KWN4KS3JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSGluZGkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gSGluZGkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKR84KS44KWB4KSs4KS5fOCkpuCli+CkquCkueCksHzgpLbgpL7gpK4vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpYHgpKzgpLknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KWL4KSq4KS54KSwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLbgpL7gpK4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSkJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpYHgpKzgpLknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuCli+CkquCkueCksCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS24KS+4KSuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ3JvYXRpYW4gW2hyXVxuLy8hIGF1dGhvciA6IEJvamFuIE1hcmtvdmnEhyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ibWFya292aWNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZG5hIG1pbnV0YScgOiAnamVkbmUgbWludXRlJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRhbiBzYXQnIDogJ2plZG5vZyBzYXRhJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2RhbmEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWMnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBociA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hyJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3NpamXEjW5qYV92ZWxqYcSNZV9vxb51amthX3RyYXZuamFfc3ZpYm5qYV9saXBuamFfc3JwbmphX2tvbG92b3phX3J1am5hX2xpc3RvcGFkYV9zdHVkZW5vZ2FfcHJvc2luY2EnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ3NpamXEjWFual92ZWxqYcSNYV9vxb51amFrX3RyYXZhbmpfc3ZpYmFual9saXBhbmpfc3JwYW5qX2tvbG92b3pfcnVqYW5fbGlzdG9wYWRfc3R1ZGVuaV9wcm9zaW5hYycuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ3Npai5fdmVsai5fb8W+dS5fdHJhLl9zdmkuX2xpcC5fc3JwLl9rb2wuX3J1ai5fbGlzLl9zdHUuX3Byby4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0RvIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEbyBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRG8gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gW25lZGplbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBbc3JpamVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsaV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmlqZSAlcycsXG4gICAgICAgICAgICBzOiAncGFyIHNla3VuZGknLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogJ2RhbicsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogJ21qZXNlYycsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogJ2dvZGludScsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEh1bmdhcmlhbiBbaHVdXG4vLyEgYXV0aG9yIDogQWRhbSBCcnVubmVyIDogaHR0cHM6Ly9naXRodWIuY29tL2FkYW1icnVubmVyXG4vLyEgYXV0aG9yIDogUGV0ZXIgVmlzenQgIDogaHR0cHM6Ly9naXRodWIuY29tL3Bhc3NhdGd0XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgd2Vla0VuZGluZ3MgPVxuICAgICAgICAndmFzw6FybmFwIGjDqXRmxZFuIGtlZGRlbiBzemVyZMOhbiBjc8O8dMO2cnTDtmvDtm4gcMOpbnRla2VuIHN6b21iYXRvbicuc3BsaXQoJyAnKTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBudW0gPSBudW1iZXI7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeFxuICAgICAgICAgICAgICAgICAgICA/ICduw6low6FueSBtw6Fzb2RwZXJjJ1xuICAgICAgICAgICAgICAgICAgICA6ICduw6low6FueSBtw6Fzb2RwZXJjZSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4KVxuICAgICAgICAgICAgICAgICAgICA/ICcgbcOhc29kcGVyYydcbiAgICAgICAgICAgICAgICAgICAgOiAnIG3DoXNvZHBlcmNlJztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBwZXJjJyA6ICcgcGVyY2UnKTtcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIHBlcmMnIDogJyBwZXJjZScpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOzcmEnIDogJyDDs3LDoWphJyk7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDs3JhJyA6ICcgw7Nyw6FqYScpO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIG5hcCcgOiAnIG5hcGphJyk7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBuYXAnIDogJyBuYXBqYScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIGjDs25hcCcgOiAnIGjDs25hcGphJyk7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBow7NuYXAnIDogJyBow7NuYXBqYScpO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOpdicgOiAnIMOpdmUnKTtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOpdicgOiAnIMOpdmUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdlZWsoaXNGdXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChpc0Z1dHVyZSA/ICcnIDogJ1ttw7psdF0gJykgK1xuICAgICAgICAgICAgJ1snICtcbiAgICAgICAgICAgIHdlZWtFbmRpbmdzW3RoaXMuZGF5KCldICtcbiAgICAgICAgICAgICddIExUWy1rb3JdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBodSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h1Jywge1xuICAgICAgICBtb250aHM6ICdqYW51w6FyX2ZlYnJ1w6FyX23DoXJjaXVzX8OhcHJpbGlzX23DoWp1c19qw7puaXVzX2rDumxpdXNfYXVndXN6dHVzX3N6ZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbi5fZmViLl9tw6FyYy5fw6Fwci5fbcOhai5fasO6bi5fasO6bC5fYXVnLl9zemVwdC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICd2YXPDoXJuYXBfaMOpdGbFkV9rZWRkX3N6ZXJkYV9jc8O8dMO2cnTDtmtfcMOpbnRla19zem9tYmF0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAndmFzX2jDqXRfa2VkZF9zemVfY3PDvHRfcMOpbl9zem8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAndl9oX2tfc3plX2NzX3Bfc3pvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIExMOiAnWVlZWS4gTU1NTSBELicsXG4gICAgICAgICAgICBMTEw6ICdZWVlZLiBNTU1NIEQuIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVkuIE1NTU0gRC4sIGRkZGQgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9kZXxkdS9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMSkudG9Mb3dlckNhc2UoKSA9PT0gJ3UnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2RlJyA6ICdERSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2R1JyA6ICdEVSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW21hXSBMVFsta29yXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2hvbG5hcF0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2Vlay5jYWxsKHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbdGVnbmFwXSBMVFsta29yXScsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgbcO6bHZhJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcycsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaHU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJtZW5pYW4gW2h5LWFtXVxuLy8hIGF1dGhvciA6IEFybWVuZGFyYWJ5YW4gOiBodHRwczovL2dpdGh1Yi5jb20vYXJtZW5kYXJhYnlhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGh5QW0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoeS1hbScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfVsNW41oLVttW+1aHWgNWrX9aD1aXVv9aA1b7VodaA1atf1bTVodaA1b/Vq1/VodW61oDVq9Ws1atf1bTVodW11avVvdWrX9Ww1bjWgtW21avVvdWrX9Ww1bjWgtWs1avVvdWrX9aF1aPVuNW91b/VuNW91atf1b3VpdW61b/VpdW01aLVpdaA1atf1bDVuNWv1b/VpdW01aLVpdaA1atf1bbVuNW11aXVtNWi1aXWgNWrX9Wk1aXVr9W/1aXVtNWi1aXWgNWrJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfVsNW41oLVttW+1aHWgF/Wg9Wl1b/WgNW+1aHWgF/VtNWh1oDVv1/VodW61oDVq9WsX9W01aHVtdWr1b1f1bDVuNaC1bbVq9W9X9Ww1bjWgtWs1avVvV/WhdWj1bjVvdW/1bjVvV/VvdWl1brVv9Wl1bTVotWl1oBf1bDVuNWv1b/VpdW01aLVpdaAX9W21bjVtdWl1bTVotWl1oBf1aTVpdWv1b/VpdW01aLVpdaAJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfVsNW21b5f1oPVv9aAX9W01oDVv1/VodW61oBf1bTVtdW9X9Ww1bbVvV/VsNWs1b1f1oXVo9W9X9W91brVv1/VsNWv1b9f1bbVtNWiX9Wk1a/Vvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn1a/Vq9aA1aHVr9WrX9Wl1oDVr9W41oLVt9Wh1aLVqdWrX9Wl1oDVpdaE1bfVodWi1anVq1/VudW41oDVpdaE1bfVodWi1anVq1/VsNWr1bbVo9W31aHVotWp1atf1bjWgtaA1aLVodWpX9W31aHVotWh1aknLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9Wv1oDVr1/VpdaA1a9f1aXWgNaEX9W51oDWhF/VsNW21aNf1bjWgtaA1aJf1bfVotWpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9Wv1oDVr1/VpdaA1a9f1aXWgNaEX9W51oDWhF/VsNW21aNf1bjWgtaA1aJf1bfVotWpJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZINWpLicsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSDVqS4sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSDVqS4sIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb1aHVtdW91oXWgF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vVvtWh1bLVqF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vVpdaA1aXVr10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW9aF1oDVqCDVqtWh1bTVqF0gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdb1aHVttaB1aHVrl0gZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDVsNWl1b/VuCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMg1aHVvNWh1bsnLFxuICAgICAgICAgICAgczogJ9W01asg1oTVodW21asg1b7VodW11oDVr9W11aHVticsXG4gICAgICAgICAgICBzczogJyVkINW+1aHVtdaA1a/VtdWh1bYnLFxuICAgICAgICAgICAgbTogJ9aA1bjVutWlJyxcbiAgICAgICAgICAgIG1tOiAnJWQg1oDVuNW61aUnLFxuICAgICAgICAgICAgaDogJ9Wq1aHVtCcsXG4gICAgICAgICAgICBoaDogJyVkINWq1aHVtCcsXG4gICAgICAgICAgICBkOiAn1oXWgCcsXG4gICAgICAgICAgICBkZDogJyVkINaF1oAnLFxuICAgICAgICAgICAgTTogJ9Wh1bTVq9W9JyxcbiAgICAgICAgICAgIE1NOiAnJWQg1aHVtNWr1b0nLFxuICAgICAgICAgICAgeTogJ9W/1aHWgNWrJyxcbiAgICAgICAgICAgIHl5OiAnJWQg1b/VodaA1asnLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv1aPVq9W31aXWgNW+1aF81aHVvNWh1b7VuNW/1b7VoXzWgdWl1oDVpdWv1b7VoXzVpdaA1aXVr9W41bXVodW2LyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o1oHVpdaA1aXVr9W+1aF81aXWgNWl1a/VuNW11aHVtikkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Wj1avVt9Wl1oDVvtWhJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfVodW81aHVvtW41b/VvtWhJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfWgdWl1oDVpdWv1b7VoSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1aXWgNWl1a/VuNW11aHVtic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfXxcXGR7MSwyfS0o1avVtnzWgNWkKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERG8nOlxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Vq9W2JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3WgNWkJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaHlBbTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJbmRvbmVzaWFuIFtpZF1cbi8vISBhdXRob3IgOiBNb2hhbW1hZCBTYXRyaW8gVXRvbW8gOiBodHRwczovL2dpdGh1Yi5jb20vdHlva1xuLy8hIHJlZmVyZW5jZTogaHR0cDovL2lkLndpa2lzb3VyY2Uub3JnL3dpa2kvUGVkb21hbl9VbXVtX0VqYWFuX0JhaGFzYV9JbmRvbmVzaWFfeWFuZ19EaXNlbXB1cm5ha2FuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgaWQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpZCcsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyaV9GZWJydWFyaV9NYXJldF9BcHJpbF9NZWlfSnVuaV9KdWxpX0FndXN0dXNfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGVzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01laV9KdW5fSnVsX0FndF9TZXBfT2t0X05vdl9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnTWluZ2d1X1NlbmluX1NlbGFzYV9SYWJ1X0thbWlzX0p1bWF0X1NhYnR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnTWluX1Nlbl9TZWxfUmFiX0thbV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ01nX1NuX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISC5tbScsXG4gICAgICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXxzaWFuZ3xzb3JlfG1hbGFtLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncGFnaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzaWFuZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29yZScgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGFnaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NpYW5nJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29yZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbWFsYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIYXJpIGluaSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tCZXNvayBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tLZW1hcmluIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2xhbHUgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFsYW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHlhbmcgbGFsdScsXG4gICAgICAgICAgICBzOiAnYmViZXJhcGEgZGV0aWsnLFxuICAgICAgICAgICAgc3M6ICclZCBkZXRpaycsXG4gICAgICAgICAgICBtOiAnc2VtZW5pdCcsXG4gICAgICAgICAgICBtbTogJyVkIG1lbml0JyxcbiAgICAgICAgICAgIGg6ICdzZWphbScsXG4gICAgICAgICAgICBoaDogJyVkIGphbScsXG4gICAgICAgICAgICBkOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkOiAnJWQgaGFyaScsXG4gICAgICAgICAgICBNOiAnc2VidWxhbicsXG4gICAgICAgICAgICBNTTogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHk6ICdzZXRhaHVuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGFodW4nLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaWQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSWNlbGFuZGljIFtpc11cbi8vISBhdXRob3IgOiBIaW5yaWsgw5ZybiBTaWd1csOwc3NvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oaW5yaWtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIGlmIChuICUgMTAwID09PSAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobiAlIDEwID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlXG4gICAgICAgICAgICAgICAgICAgID8gJ25va2tyYXIgc2Vrw7puZHVyJ1xuICAgICAgICAgICAgICAgICAgICA6ICdub2trcnVtIHNla8O6bmR1bSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2Vrw7puZHVyJyA6ICdzZWvDum5kdW0nKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla8O6bmRhJztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ23DrW7DunRhJyA6ICdtw61uw7p0dSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtw61uw7p0dXInIDogJ23DrW7DunR1bScpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOtbsO6dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DrW7DunR1JztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArXG4gICAgICAgICAgICAgICAgICAgICAgICAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2tsdWtrdXN0dW5kaXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAna2x1a2t1c3R1bmR1bScpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAna2x1a2t1c3R1bmQnO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkYWd1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdkYWcnIDogJ2RlZ2knO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkYWdhcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdkYWdhJyA6ICdkw7ZndW0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkYWd1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJyk7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ23DoW51w7B1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdtw6FudcOwJyA6ICdtw6FudcOwaSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DoW51w7Bpcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdtw6FudcOwaScgOiAnbcOhbnXDsHVtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOhbnXDsHVyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdtw6FudcOwJyA6ICdtw6FudcOwaScpO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnw6FyJyA6ICfDoXJpJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FydW0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FyaScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGlzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXMnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbsO6YXJfZmVicsO6YXJfbWFyc19hcHLDrWxfbWHDrV9qw7puw61fasO6bMOtX8OhZ8O6c3Rfc2VwdGVtYmVyX29rdMOzYmVyX27Ds3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcl9hcHJfbWHDrV9qw7puX2rDumxfw6Fnw7pfc2VwX29rdF9uw7N2X2Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnc3VubnVkYWd1cl9tw6FudWRhZ3VyX8O+cmnDsGp1ZGFndXJfbWnDsHZpa3VkYWd1cl9maW1tdHVkYWd1cl9mw7ZzdHVkYWd1cl9sYXVnYXJkYWd1cicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc3VuX23DoW5fw75yaV9tacOwX2ZpbV9mw7ZzX2xhdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nw6Ffw55yX01pX0ZpX0bDtl9MYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgW2tsLl0gSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW8OtIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbw6EgbW9yZ3VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbw60gZ8OmciBrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW3PDrcOwYXN0YV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VmdGlyICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdmeXJpciAlcyBzw63DsGFuJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogJ2tsdWtrdXN0dW5kJyxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSXRhbGlhbiBbaXRdXG4vLyEgYXV0aG9yIDogTG9yZW56byA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbGllbVxuLy8hIGF1dGhvcjogTWF0dGlhIExhcmVudGlzOiBodHRwczovL2dpdGh1Yi5jb20vbm9zdGFsZ2lhelxuLy8hIGF1dGhvcjogTWFyY28gOiBodHRwczovL2dpdGh1Yi5jb20vTWFuZnJlOThcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBpdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2l0Jywge1xuICAgICAgICBtb250aHM6ICdnZW5uYWlvX2ZlYmJyYWlvX21hcnpvX2FwcmlsZV9tYWdnaW9fZ2l1Z25vX2x1Z2xpb19hZ29zdG9fc2V0dGVtYnJlX290dG9icmVfbm92ZW1icmVfZGljZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnZ2VuX2ZlYl9tYXJfYXByX21hZ19naXVfbHVnX2Fnb19zZXRfb3R0X25vdl9kaWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnZG9tZW5pY2FfbHVuZWTDrF9tYXJ0ZWTDrF9tZXJjb2xlZMOsX2dpb3ZlZMOsX3ZlbmVyZMOsX3NhYmF0bycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbV9sdW5fbWFyX21lcl9naW9fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb19sdV9tYV9tZV9naV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tPZ2dpIGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDEgPyAnbGxlICcgOiB0aGlzLmhvdXJzKCkgPT09IDAgPyAnICcgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tEb21hbmkgYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpID4gMSA/ICdsbGUgJyA6IHRoaXMuaG91cnMoKSA9PT0gMCA/ICcgJyA6IFwibGwnXCIpICtcbiAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ2RkZGQgW2EnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDEgPyAnbGxlICcgOiB0aGlzLmhvdXJzKCkgPT09IDAgPyAnICcgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tJZXJpIGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDEgPyAnbGxlICcgOiB0aGlzLmhvdXJzKCkgPT09IDAgPyAnICcgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbTGEgc2NvcnNhXSBkZGRkIFthJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbGxlICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmhvdXJzKCkgPT09IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICcgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJsbCdcIikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0xvIHNjb3Jzb10gZGRkZCBbYScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgPiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2xsZSAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5ob3VycygpID09PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwibGwnXCIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXUxUJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd0cmEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGZhJyxcbiAgICAgICAgICAgIHM6ICdhbGN1bmkgc2Vjb25kaScsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZGknLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0aScsXG4gICAgICAgICAgICBoOiBcInVuJ29yYVwiLFxuICAgICAgICAgICAgaGg6ICclZCBvcmUnLFxuICAgICAgICAgICAgZDogJ3VuIGdpb3JubycsXG4gICAgICAgICAgICBkZDogJyVkIGdpb3JuaScsXG4gICAgICAgICAgICB3OiAndW5hIHNldHRpbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNldHRpbWFuZScsXG4gICAgICAgICAgICBNOiAndW4gbWVzZScsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2knLFxuICAgICAgICAgICAgeTogJ3VuIGFubm8nLFxuICAgICAgICAgICAgeXk6ICclZCBhbm5pJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBpdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJdGFsaWFuIChTd2l0emVybGFuZCkgW2l0LWNoXVxuLy8hIGF1dGhvciA6IHhmaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS94ZmhcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBpdENoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXQtY2gnLCB7XG4gICAgICAgIG1vbnRoczogJ2dlbm5haW9fZmViYnJhaW9fbWFyem9fYXByaWxlX21hZ2dpb19naXVnbm9fbHVnbGlvX2Fnb3N0b19zZXR0ZW1icmVfb3R0b2JyZV9ub3ZlbWJyZV9kaWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdnZW5fZmViX21hcl9hcHJfbWFnX2dpdV9sdWdfYWdvX3NldF9vdHRfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21lbmljYV9sdW5lZMOsX21hcnRlZMOsX21lcmNvbGVkw6xfZ2lvdmVkw6xfdmVuZXJkw6xfc2FiYXRvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tX2x1bl9tYXJfbWVyX2dpb192ZW5fc2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX21lX2dpX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2dnaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RvbWFuaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FsbGVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWVyaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsYSBzY29yc2FdIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xvIHNjb3Jzb10gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKC9eWzAtOV0uKyQvLnRlc3QocykgPyAndHJhJyA6ICdpbicpICsgJyAnICsgcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0OiAnJXMgZmEnLFxuICAgICAgICAgICAgczogJ2FsY3VuaSBzZWNvbmRpJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kaScsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRpJyxcbiAgICAgICAgICAgIGg6IFwidW4nb3JhXCIsXG4gICAgICAgICAgICBoaDogJyVkIG9yZScsXG4gICAgICAgICAgICBkOiAndW4gZ2lvcm5vJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZ2lvcm5pJyxcbiAgICAgICAgICAgIE06ICd1biBtZXNlJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzaScsXG4gICAgICAgICAgICB5OiAndW4gYW5ubycsXG4gICAgICAgICAgICB5eTogJyVkIGFubmknLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGl0Q2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSmFwYW5lc2UgW2phXVxuLy8hIGF1dGhvciA6IExJIExvbmcgOiBodHRwczovL2dpdGh1Yi5jb20vYmFyeW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgamEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdqYScsIHtcbiAgICAgICAgZXJhczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMjAxOS0wNS0wMScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICfku6TlkownLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+OLvycsXG4gICAgICAgICAgICAgICAgYWJicjogJ1InLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzE5ODktMDEtMDgnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMjAxOS0wNC0zMCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICflubPmiJAnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+ONuycsXG4gICAgICAgICAgICAgICAgYWJicjogJ0gnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzE5MjYtMTItMjUnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMTk4OS0wMS0wNycsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICfmmK3lkownLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+ONvCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ1MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzE5MTItMDctMzAnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMTkyNi0xMi0yNCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICflpKfmraMnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+ONvScsXG4gICAgICAgICAgICAgICAgYWJicjogJ1QnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzE4NzMtMDEtMDEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMTkxMi0wNy0yOScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiA2LFxuICAgICAgICAgICAgICAgIG5hbWU6ICfmmI7msrsnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+ONvicsXG4gICAgICAgICAgICAgICAgYWJicjogJ00nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDEtMDEtMDEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMTg3My0xMi0zMScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICfopb/mmqYnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0FEJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQUQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDAtMTItMzEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICfntIDlhYPliY0nLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0JDJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQkMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZXJhWWVhck9yZGluYWxSZWdleDogLyjlhYN8XFxkKynlubQvLFxuICAgICAgICBlcmFZZWFyT3JkaW5hbFBhcnNlOiBmdW5jdGlvbiAoaW5wdXQsIG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hbMV0gPT09ICflhYMnID8gMSA6IHBhcnNlSW50KG1hdGNoWzFdIHx8IGlucHV0LCAxMCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoczogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+aXpeabnOaXpV/mnIjmm5zml6Vf54Gr5puc5pelX+awtOabnOaXpV/mnKjmm5zml6Vf6YeR5puc5pelX+Wcn+abnOaXpScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+aXpV/mnIhf54GrX+awtF/mnKhf6YeRX+Wcnycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfml6Vf5pyIX+eBq1/msLRf5pyoX+mHkV/lnJ8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWeW5tE3mnIhE5pelIGRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgbGw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdZWVlZ5bm0TeaciETml6UoZGRkKSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/ljYjliY185Y2I5b6ML2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn5Y2I5b6MJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WNiOWJjSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Y2I5b6MJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb5LuK5pelXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+aYjuaXpV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5p2l6YCxXWRkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb5pio5pelXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndlZWsoKSAhPT0gbm93LndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vlhYjpgLFdZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ95pelLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxID8gJ+WFg+W5tCcgOiBudW1iZXIgKyAn5bm0JztcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+W+jCcsXG4gICAgICAgICAgICBwYXN0OiAnJXPliY0nLFxuICAgICAgICAgICAgczogJ+aVsOenkicsXG4gICAgICAgICAgICBzczogJyVk56eSJyxcbiAgICAgICAgICAgIG06ICcx5YiGJyxcbiAgICAgICAgICAgIG1tOiAnJWTliIYnLFxuICAgICAgICAgICAgaDogJzHmmYLplpMnLFxuICAgICAgICAgICAgaGg6ICclZOaZgumWkycsXG4gICAgICAgICAgICBkOiAnMeaXpScsXG4gICAgICAgICAgICBkZDogJyVk5pelJyxcbiAgICAgICAgICAgIE06ICcx44O25pyIJyxcbiAgICAgICAgICAgIE1NOiAnJWTjg7bmnIgnLFxuICAgICAgICAgICAgeTogJzHlubQnLFxuICAgICAgICAgICAgeXk6ICclZOW5tCcsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gamE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSmF2YW5lc2UgW2p2XVxuLy8hIGF1dGhvciA6IFJvbnkgTGFudGlwIDogaHR0cHM6Ly9naXRodWIuY29tL2xhbnRpcFxuLy8hIHJlZmVyZW5jZTogaHR0cDovL2p2Lndpa2lwZWRpYS5vcmcvd2lraS9CYXNhX0phd2FcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBqdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2p2Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3BlbWJlcl9EZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWVpX0p1bl9KdWxfQWdzX1NlcF9Pa3RfTm9wX0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdNaW5nZ3VfU2VuZW5fU2Vsb3NvX1JlYnVfS2VtaXNfSmVtdXdhaF9TZXB0dScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ01pbl9TZW5fU2VsX1JlYl9LZW1fSmVtX1NlcCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdNZ19Tbl9TbF9SYl9LbV9KbV9TcCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2VuamluZ3xzaXlhbmd8c29udGVufG5kYWx1LyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAnZW5qaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpeWFuZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29udGVuJyB8fCBtZXJpZGllbSA9PT0gJ25kYWx1Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbmppbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzaXlhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb250ZW4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25kYWx1JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbRGludGVuIHB1bmlrbyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tNYmVuamFuZyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tLYWxhIHdpbmdpIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2tlcGVuZ2tlciBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd3b250ZW4gaW5nICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBpbmdrYW5nIGtlcGVuZ2tlcicsXG4gICAgICAgICAgICBzOiAnc2F3ZXRhd2lzIGRldGlrJyxcbiAgICAgICAgICAgIHNzOiAnJWQgZGV0aWsnLFxuICAgICAgICAgICAgbTogJ3NldHVuZ2dhbCBtZW5pdCcsXG4gICAgICAgICAgICBtbTogJyVkIG1lbml0JyxcbiAgICAgICAgICAgIGg6ICdzZXR1bmdnYWwgamFtJyxcbiAgICAgICAgICAgIGhoOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQ6ICdzZWRpbnRlbicsXG4gICAgICAgICAgICBkZDogJyVkIGRpbnRlbicsXG4gICAgICAgICAgICBNOiAnc2V3dWxhbicsXG4gICAgICAgICAgICBNTTogJyVkIHd1bGFuJyxcbiAgICAgICAgICAgIHk6ICdzZXRhdW4nLFxuICAgICAgICAgICAgeXk6ICclZCB0YXVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGp2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdlb3JnaWFuIFtrYV1cbi8vISBhdXRob3IgOiBJcmFrbGkgSmFuaWFzaHZpbGkgOiBodHRwczovL2dpdGh1Yi5jb20vSXJha2xpSmFuaVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGthID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2EnLCB7XG4gICAgICAgIG1vbnRoczogJ+GDmOGDkOGDnOGDleGDkOGDoOGDmF/hg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg5hf4YOb4YOQ4YOg4YOi4YOYX+GDkOGDnuGDoOGDmOGDmuGDmF/hg5vhg5Dhg5jhg6Hhg5hf4YOY4YOV4YOc4YOY4YOh4YOYX+GDmOGDleGDmuGDmOGDoeGDmF/hg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg51f4YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOYX+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDmF/hg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg5hf4YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOYJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+GDmOGDkOGDnF/hg5fhg5Thg5Ff4YOb4YOQ4YOgX+GDkOGDnuGDoF/hg5vhg5Dhg5hf4YOY4YOV4YOcX+GDmOGDleGDml/hg5Dhg5Lhg5Vf4YOh4YOU4YOlX+GDneGDpeGDol/hg5zhg53hg5Rf4YOT4YOU4YOZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn4YOZ4YOV4YOY4YOg4YOQX+GDneGDoOGDqOGDkOGDkeGDkOGDl+GDmF/hg6Hhg5Dhg5vhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOd4YOX4YOu4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDruGDo+GDl+GDqOGDkOGDkeGDkOGDl+GDmF/hg57hg5Dhg6Dhg5Dhg6Hhg5nhg5Thg5Xhg5hf4YOo4YOQ4YOR4YOQ4YOX4YOYJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ+GDmeGDleGDmOGDoOGDkOGDoV/hg53hg6Dhg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOh4YOQ4YOb4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDneGDl+GDruGDqOGDkOGDkeGDkOGDl+GDoV/hg67hg6Phg5fhg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOe4YOQ4YOg4YOQ4YOh4YOZ4YOU4YOV4YOhX+GDqOGDkOGDkeGDkOGDl+GDoScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC8o4YOs4YOY4YOc4YOQfOGDqOGDlOGDm+GDk+GDlOGDkikvLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4YOZ4YOV4YOYX+GDneGDoOGDqF/hg6Hhg5Dhg5tf4YOd4YOX4YOuX+GDruGDo+GDl1/hg57hg5Dhg6Bf4YOo4YOQ4YORJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+GDmeGDlV/hg53hg6Bf4YOh4YOQX+GDneGDl1/hg67hg6Nf4YOe4YOQX+GDqOGDkCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vhg5Phg6bhg5Thg6FdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4YOu4YOV4YOQ4YOaXSBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+GDkuGDo+GDqOGDmOGDnF0gTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb4YOo4YOU4YOb4YOT4YOU4YOSXSBkZGRkIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+GDrOGDmOGDnOGDkF0gZGRkZCBMVC3hg5bhg5QnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgLyjhg6zhg5Dhg5t84YOs4YOj4YOXfOGDoeGDkOGDkOGDl3zhg6zhg5Thg5p84YOT4YOmfOGDl+GDlSko4YOYfOGDlCkvLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJDAsICQxLCAkMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQyID09PSAn4YOYJyA/ICQxICsgJ+GDqOGDmCcgOiAkMSArICQyICsgJ+GDqOGDmCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3Q6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgaWYgKC8o4YOs4YOQ4YOb4YOYfOGDrOGDo+GDl+GDmHzhg6Hhg5Dhg5Dhg5fhg5h84YOT4YOm4YOUfOGDl+GDleGDlCkvLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvKOGDmHzhg5QpJC8sICfhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgv4YOs4YOU4YOa4YOYLy50ZXN0KHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoL+GDrOGDlOGDmuGDmCQvLCAn4YOs4YOa4YOY4YOhIOGDrOGDmOGDnCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzOiAn4YOg4YOQ4YOb4YOT4YOU4YOc4YOY4YOb4YOUIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgICAgICBzczogJyVkIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgICAgICBtOiAn4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgICAgIGg6ICfhg6Hhg5Dhg5Dhg5fhg5gnLFxuICAgICAgICAgICAgaGg6ICclZCDhg6Hhg5Dhg5Dhg5fhg5gnLFxuICAgICAgICAgICAgZDogJ+GDk+GDpuGDlCcsXG4gICAgICAgICAgICBkZDogJyVkIOGDk+GDpuGDlCcsXG4gICAgICAgICAgICBNOiAn4YOX4YOV4YOUJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4YOX4YOV4YOUJyxcbiAgICAgICAgICAgIHk6ICfhg6zhg5Thg5rhg5gnLFxuICAgICAgICAgICAgeXk6ICclZCDhg6zhg5Thg5rhg5gnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvMHwxLeGDmuGDmHzhg5vhg5QtXFxkezEsMn18XFxkezEsMn0t4YOULyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct4YOa4YOYJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBudW1iZXIgPCAyMCB8fFxuICAgICAgICAgICAgICAgIChudW1iZXIgPD0gMTAwICYmIG51bWJlciAlIDIwID09PSAwKSB8fFxuICAgICAgICAgICAgICAgIG51bWJlciAlIDEwMCA9PT0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfhg5vhg5QtJyArIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLeGDlCc7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSxcbiAgICAgICAgICAgIGRveTogNyxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBrYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLYXpha2ggW2trXVxuLy8hIGF1dGhvcnMgOiBOdXJsYW4gUmFraGltemhhbm92IDogaHR0cHM6Ly9naXRodWIuY29tL251cmxhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGI0ZYnLFxuICAgICAgICAxOiAnLdGI0ZYnLFxuICAgICAgICAyOiAnLdGI0ZYnLFxuICAgICAgICAzOiAnLdGI0ZYnLFxuICAgICAgICA0OiAnLdGI0ZYnLFxuICAgICAgICA1OiAnLdGI0ZYnLFxuICAgICAgICA2OiAnLdGI0YsnLFxuICAgICAgICA3OiAnLdGI0ZYnLFxuICAgICAgICA4OiAnLdGI0ZYnLFxuICAgICAgICA5OiAnLdGI0YsnLFxuICAgICAgICAxMDogJy3RiNGLJyxcbiAgICAgICAgMjA6ICct0YjRiycsXG4gICAgICAgIDMwOiAnLdGI0YsnLFxuICAgICAgICA0MDogJy3RiNGLJyxcbiAgICAgICAgNTA6ICct0YjRlicsXG4gICAgICAgIDYwOiAnLdGI0YsnLFxuICAgICAgICA3MDogJy3RiNGWJyxcbiAgICAgICAgODA6ICct0YjRlicsXG4gICAgICAgIDkwOiAnLdGI0YsnLFxuICAgICAgICAxMDA6ICct0YjRlicsXG4gICAgfTtcblxuICAgIHZhciBrayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2trJywge1xuICAgICAgICBtb250aHM6ICfSm9Cw0qPRgtCw0YBf0LDSm9C/0LDQvV/QvdCw0YPRgNGL0Ldf0YHTmdGD0ZbRgF/QvNCw0LzRi9GAX9C80LDRg9GB0YvQvF/RiNGW0LvQtNC1X9GC0LDQvNGL0Ldf0pvRi9GA0LrSr9C50LXQul/Sm9Cw0LfQsNC9X9Kb0LDRgNCw0YjQsF/QttC10LvRgtC+0pvRgdCw0L0nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0pvQsNKjX9Cw0pvQv1/QvdCw0YNf0YHTmdGDX9C80LDQvF/QvNCw0YNf0YjRltC7X9GC0LDQvF/Sm9GL0YBf0pvQsNC3X9Kb0LDRgF/QttC10LsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn0LbQtdC60YHQtdC90LHRll/QtNKv0LnRgdC10L3QsdGWX9GB0LXQudGB0LXQvdCx0ZZf0YHTmdGA0YHQtdC90LHRll/QsdC10LnRgdC10L3QsdGWX9C20rHQvNCwX9GB0LXQvdCx0ZYnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQttC10Lpf0LTSr9C5X9GB0LXQuV/RgdOZ0YBf0LHQtdC5X9C20rHQvF/RgdC10L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0LbQul/QtNC5X9GB0Llf0YHRgF/QsdC5X9C20Lxf0YHQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQkdKv0LPRltC9INGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0JXRgNGC0LXSoyDRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9GB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JrQtdGI0LUg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb06jRgtC60LXQvSDQsNC/0YLQsNC90YvSo10gZGRkZCBb0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDRltGI0ZbQvdC00LUnLFxuICAgICAgICAgICAgcGFzdDogJyVzINCx0rHRgNGL0L0nLFxuICAgICAgICAgICAgczogJ9Cx0ZbRgNC90LXRiNC1INGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzczogJyVkINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtOiAn0LHRltGAINC80LjQvdGD0YInLFxuICAgICAgICAgICAgbW06ICclZCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIGg6ICfQsdGW0YAg0YHQsNKT0LDRgicsXG4gICAgICAgICAgICBoaDogJyVkINGB0LDSk9Cw0YInLFxuICAgICAgICAgICAgZDogJ9Cx0ZbRgCDQutKv0L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQutKv0L0nLFxuICAgICAgICAgICAgTTogJ9Cx0ZbRgCDQsNC5JyxcbiAgICAgICAgICAgIE1NOiAnJWQg0LDQuScsXG4gICAgICAgICAgICB5OiAn0LHRltGAINC20YvQuycsXG4gICAgICAgICAgICB5eTogJyVkINC20YvQuycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YjRlnzRiNGLKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENhbWJvZGlhbiBba21dXG4vLyEgYXV0aG9yIDogS3J1eSBWYW5uYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rcnV5dmFubmFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4Z+hJyxcbiAgICAgICAgICAgIDI6ICfhn6InLFxuICAgICAgICAgICAgMzogJ+GfoycsXG4gICAgICAgICAgICA0OiAn4Z+kJyxcbiAgICAgICAgICAgIDU6ICfhn6UnLFxuICAgICAgICAgICAgNjogJ+GfpicsXG4gICAgICAgICAgICA3OiAn4Z+nJyxcbiAgICAgICAgICAgIDg6ICfhn6gnLFxuICAgICAgICAgICAgOTogJ+GfqScsXG4gICAgICAgICAgICAwOiAn4Z+gJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+GfoSc6ICcxJyxcbiAgICAgICAgICAgICfhn6InOiAnMicsXG4gICAgICAgICAgICAn4Z+jJzogJzMnLFxuICAgICAgICAgICAgJ+GfpCc6ICc0JyxcbiAgICAgICAgICAgICfhn6UnOiAnNScsXG4gICAgICAgICAgICAn4Z+mJzogJzYnLFxuICAgICAgICAgICAgJ+Gfpyc6ICc3JyxcbiAgICAgICAgICAgICfhn6gnOiAnOCcsXG4gICAgICAgICAgICAn4Z+pJzogJzknLFxuICAgICAgICAgICAgJ+GfoCc6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBrbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ttJywge1xuICAgICAgICBtb250aHM6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4Z6Y4Z6A4Z6a4Z62X+GegOGeu+GemOGfkuGel+GfiF/hnpjhnrjhnpPhnrZf4Z6Y4Z+B4Z6f4Z62X+Gep+Gen+Gel+Getl/hnpjhnrfhnpDhnrvhnpPhnrZf4Z6A4Z6A4Z+S4Z6A4Z6K4Z62X+Gen+GeuOGeoOGetl/hnoDhnonhn5LhnonhnrZf4Z6P4Z674Z6b4Z62X+GenOGet+GeheGfkuGehuGet+GegOGetl/hnpLhn5LhnpPhnrwnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn40nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhnqLhnrZf4Z6FX+Geol/hnpZf4Z6W4Z+S4Z6aX+Gen+Geu1/hnp8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4Z6i4Z62X+GehV/hnqJf4Z6WX+GeluGfkuGeml/hnp/hnrtf4Z6fJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+GeluGfkuGemuGeueGegHzhnpvhn5LhnoThnrbhnoUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+Gem+GfkuGehOGetuGehSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfhnpbhn5LhnprhnrnhnoAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+Gem+GfkuGehOGetuGehSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+GekOGfkuGehOGfg+Gek+GfgeGfhyDhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4Z6f4Z+S4Z6i4Z+C4Z6AIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4Z6Y4Z+S4Z6f4Z634Z6b4Z6Y4Z634Z6JIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvhnp/hnpThn5Lhno/hnrbhnqDhn43hnpjhnrvhnpNdIFvhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPhnpHhn4Dhno8nLFxuICAgICAgICAgICAgcGFzdDogJyVz4Z6Y4Z674Z6TJyxcbiAgICAgICAgICAgIHM6ICfhnpThn4nhnrvhnpPhn5LhnpjhnrbhnpPhnpzhnrfhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgc3M6ICclZCDhnpzhnrfhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgbTogJ+GemOGeveGemeGek+GetuGekeGeuCcsXG4gICAgICAgICAgICBtbTogJyVkIOGek+GetuGekeGeuCcsXG4gICAgICAgICAgICBoOiAn4Z6Y4Z694Z6Z4Z6Y4Z+J4Z+E4Z6EJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4Z6Y4Z+J4Z+E4Z6EJyxcbiAgICAgICAgICAgIGQ6ICfhnpjhnr3hnpnhnpDhn5LhnoThn4MnLFxuICAgICAgICAgICAgZGQ6ICclZCDhnpDhn5LhnoThn4MnLFxuICAgICAgICAgICAgTTogJ+GemOGeveGemeGegeGfgicsXG4gICAgICAgICAgICBNTTogJyVkIOGegeGfgicsXG4gICAgICAgICAgICB5OiAn4Z6Y4Z694Z6Z4Z6G4Z+S4Z6T4Z624Z+GJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Z6G4Z+S4Z6T4Z624Z+GJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL+GekeGeuFxcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogJ+GekeGeuCVkJyxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+GfoeGfouGfo+GfpOGfpeGfpuGfp+GfqOGfqeGfoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGttO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEthbm5hZGEgW2tuXVxuLy8hIGF1dGhvciA6IFJhamVldiBOYWlrIDogaHR0cHM6Ly9naXRodWIuY29tL3JhamVldm5haWt0ZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgs6cnLFxuICAgICAgICAgICAgMjogJ+CzqCcsXG4gICAgICAgICAgICAzOiAn4LOpJyxcbiAgICAgICAgICAgIDQ6ICfgs6onLFxuICAgICAgICAgICAgNTogJ+CzqycsXG4gICAgICAgICAgICA2OiAn4LOsJyxcbiAgICAgICAgICAgIDc6ICfgs60nLFxuICAgICAgICAgICAgODogJ+CzricsXG4gICAgICAgICAgICA5OiAn4LOvJyxcbiAgICAgICAgICAgIDA6ICfgs6YnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4LOnJzogJzEnLFxuICAgICAgICAgICAgJ+CzqCc6ICcyJyxcbiAgICAgICAgICAgICfgs6knOiAnMycsXG4gICAgICAgICAgICAn4LOqJzogJzQnLFxuICAgICAgICAgICAgJ+Czqyc6ICc1JyxcbiAgICAgICAgICAgICfgs6wnOiAnNicsXG4gICAgICAgICAgICAn4LOtJzogJzcnLFxuICAgICAgICAgICAgJ+Czric6ICc4JyxcbiAgICAgICAgICAgICfgs68nOiAnOScsXG4gICAgICAgICAgICAn4LOmJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGtuID0gbW9tZW50LmRlZmluZUxvY2FsZSgna24nLCB7XG4gICAgICAgIG1vbnRoczogJ+CynOCyqOCyteCysOCyv1/gsqvgs4bgsqzgs43gsrDgsrXgsrDgsr9f4LKu4LK+4LKw4LON4LKa4LONX+Cyj+CyquCzjeCysOCyv+CysuCzjV/gsq7gs4bgs5Vf4LKc4LOC4LKo4LONX+CynOCzgeCysuCzhuCzll/gsobgspfgsrjgs43gsp/gs41f4LK44LOG4LKq4LON4LKf4LOG4LKC4LKs4LKw4LONX+CyheCyleCzjeCyn+CzhuCzguCzleCyrOCysOCzjV/gsqjgsrXgs4bgsoLgsqzgsrDgs41f4LKh4LK/4LK44LOG4LKC4LKs4LKw4LONJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgspzgsqhf4LKr4LOG4LKs4LON4LKwX+CyruCyvuCysOCzjeCymuCzjV/gso/gsqrgs43gsrDgsr/gsrLgs41f4LKu4LOG4LOVX+CynOCzguCyqOCzjV/gspzgs4HgsrLgs4bgs5Zf4LKG4LKX4LK44LON4LKf4LONX+CyuOCzhuCyquCzjeCyn+CzhuCygl/gsoXgspXgs43gsp/gs4bgs4Lgs5Vf4LKo4LK14LOG4LKCX+CyoeCyv+CyuOCzhuCygicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+CyreCyvuCyqOCzgeCyteCyvuCysF/gsrjgs4bgs4Lgs5Xgsq7gsrXgsr7gsrBf4LKu4LKC4LKX4LKz4LK14LK+4LKwX+CyrOCzgeCyp+CyteCyvuCysF/gspfgs4HgsrDgs4HgsrXgsr7gsrBf4LK24LOB4LKV4LON4LKw4LK14LK+4LKwX+CytuCyqOCyv+CyteCyvuCysCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CyreCyvuCyqOCzgV/gsrjgs4bgs4Lgs5Xgsq5f4LKu4LKC4LKX4LKzX+CyrOCzgeCyp1/gspfgs4HgsrDgs4Ff4LK24LOB4LKV4LON4LKwX+CytuCyqOCyvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgsq3gsr5f4LK44LOG4LOC4LOVX+CyruCygl/gsqzgs4Ff4LKX4LOBX+CytuCzgV/gsrYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4LKH4LKC4LKm4LOBXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CyqOCyvuCys+Czhl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CyqOCyv+CyqOCzjeCyqOCzhl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4LKV4LOG4LOC4LKo4LOG4LKvXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCyqOCyguCypOCysCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4LK54LK/4LKC4LKm4LOGJyxcbiAgICAgICAgICAgIHM6ICfgspXgs4bgsrLgsrXgs4Eg4LKV4LON4LK34LKj4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4LK44LOG4LKV4LOG4LKC4LKh4LOB4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIG06ICfgspLgsoLgsqbgs4Eg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgICAgIGg6ICfgspLgsoLgsqbgs4Eg4LKX4LKC4LKf4LOGJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4LKX4LKC4LKf4LOGJyxcbiAgICAgICAgICAgIGQ6ICfgspLgsoLgsqbgs4Eg4LKm4LK/4LKoJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4LKm4LK/4LKoJyxcbiAgICAgICAgICAgIE06ICfgspLgsoLgsqbgs4Eg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHk6ICfgspLgsoLgsqbgs4Eg4LK14LKw4LON4LK3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4LK14LKw4LON4LK3JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Czp+CzqOCzqeCzquCzq+CzrOCzreCzruCzr+Czpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CysOCyvuCypOCzjeCysOCyv3zgsqzgs4bgsrPgsr/gspfgs43gspfgs4Z84LKu4LKn4LON4LKv4LK+4LK54LON4LKofOCyuOCyguCynOCzhi8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CysOCyvuCypOCzjeCysOCyvycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyrOCzhuCys+Cyv+Cyl+CzjeCyl+CzhicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsq7gsqfgs43gsq/gsr7gsrngs43gsqgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyuOCyguCynOCzhicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrDgsr7gsqTgs43gsrDgsr8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CyrOCzhuCys+Cyv+Cyl+CzjeCyl+Czhic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKu4LKn4LON4LKv4LK+4LK54LON4LKoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrjgsoLgspzgs4YnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjgsqjgs4bgs5UpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfgsqjgs4bgs5UnO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS29yZWFuIFtrb11cbi8vISBhdXRob3IgOiBLeXVuZ3dvb2ssIFBhcmsgOiBodHRwczovL2dpdGh1Yi5jb20va3l1bmd3MDBrXG4vLyEgYXV0aG9yIDogSmVlZXl1bCBMZWUgPGplZWV5dWxAZ21haWwuY29tPlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGtvID0gbW9tZW50LmRlZmluZUxvY2FsZSgna28nLCB7XG4gICAgICAgIG1vbnRoczogJzHsm5RfMuyblF8z7JuUXzTsm5RfNeyblF827JuUXzfsm5RfOOyblF857JuUXzEw7JuUXzEx7JuUXzEy7JuUJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJzHsm5RfMuyblF8z7JuUXzTsm5RfNeyblF827JuUXzfsm5RfOOyblF857JuUXzEw7JuUXzEx7JuUXzEy7JuUJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+ydvOyalOydvF/sm5TsmpTsnbxf7ZmU7JqU7J28X+yImOyalOydvF/rqqnsmpTsnbxf6riI7JqU7J28X+2GoOyalOydvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+ydvF/sm5Rf7ZmUX+yImF/rqqlf6riIX+2GoCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfsnbxf7JuUX+2ZlF/siJhf66qpX+q4iF/thqAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIExMOiAnWVlZWeuFhCBNTU1NIETsnbwnLFxuICAgICAgICAgICAgTExMOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZ64WEIE1NTU0gROydvCBkZGRkIEEgaDptbScsXG4gICAgICAgICAgICBsOiAnWVlZWS5NTS5ERC4nLFxuICAgICAgICAgICAgbGw6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBsbGw6ICdZWVlZ64WEIE1NTU0gROydvCBBIGg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ1lZWVnrhYQgTU1NTSBE7J28IGRkZGQgQSBoOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICfsmKTripggTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ+uCtOydvCBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ+yWtOygnCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ+yngOuCnOyjvCBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg7ZuEJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDsoIQnLFxuICAgICAgICAgICAgczogJ+uqhyDstIgnLFxuICAgICAgICAgICAgc3M6ICclZOy0iCcsXG4gICAgICAgICAgICBtOiAnMeu2hCcsXG4gICAgICAgICAgICBtbTogJyVk67aEJyxcbiAgICAgICAgICAgIGg6ICftlZwg7Iuc6rCEJyxcbiAgICAgICAgICAgIGhoOiAnJWTsi5zqsIQnLFxuICAgICAgICAgICAgZDogJ+2VmOujqCcsXG4gICAgICAgICAgICBkZDogJyVk7J28JyxcbiAgICAgICAgICAgIE06ICftlZwg64usJyxcbiAgICAgICAgICAgIE1NOiAnJWTri6wnLFxuICAgICAgICAgICAgeTogJ+ydvCDrhYQnLFxuICAgICAgICAgICAgeXk6ICclZOuFhCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjsnbx87JuUfOyjvCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfsnbwnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+yblCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7KO8JztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv7Jik7KCEfOyYpO2bhC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuID09PSAn7Jik7ZuEJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzVXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgMTIgPyAn7Jik7KCEJyA6ICfsmKTtm4QnO1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEt1cmRpc2ggW2t1XVxuLy8hIGF1dGhvciA6IFNoYWhyYW0gTWViYXNoYXIgOiBodHRwczovL2dpdGh1Yi5jb20vU2hhaHJhbU1lYmFzaGFyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ9mhJyxcbiAgICAgICAgICAgIDI6ICfZoicsXG4gICAgICAgICAgICAzOiAn2aMnLFxuICAgICAgICAgICAgNDogJ9mkJyxcbiAgICAgICAgICAgIDU6ICfZpScsXG4gICAgICAgICAgICA2OiAn2aYnLFxuICAgICAgICAgICAgNzogJ9mnJyxcbiAgICAgICAgICAgIDg6ICfZqCcsXG4gICAgICAgICAgICA5OiAn2aknLFxuICAgICAgICAgICAgMDogJ9mgJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ9mhJzogJzEnLFxuICAgICAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAgICAgJ9mkJzogJzQnLFxuICAgICAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAgICAgJ9mnJzogJzcnLFxuICAgICAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAgICAgJ9mgJzogJzAnLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHMgPSBbXG4gICAgICAgICAgICAn2qnYp9mG2YjZhtuMINiv2YjZiNuV2YUnLFxuICAgICAgICAgICAgJ9i02YjYqNin2KonLFxuICAgICAgICAgICAgJ9im2KfYstin2LEnLFxuICAgICAgICAgICAgJ9mG24zYs9in2YYnLFxuICAgICAgICAgICAgJ9im2KfbjNin2LEnLFxuICAgICAgICAgICAgJ9it2YjYstuV24zYsdin2YYnLFxuICAgICAgICAgICAgJ9iq25XZhdmF2YjYsicsXG4gICAgICAgICAgICAn2KbYp9ioJyxcbiAgICAgICAgICAgICfYptuV24zZhNmI2YjZhCcsXG4gICAgICAgICAgICAn2KrYtNix24zZhtuMINuM25XZg9uV2YUnLFxuICAgICAgICAgICAgJ9iq2LTYsduM2YbbjCDYr9mI2YjbldmFJyxcbiAgICAgICAgICAgICfZg9in2YbZiNmG24wg24zbldqp25XZhScsXG4gICAgICAgIF07XG5cbiAgICB2YXIga3UgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrdScsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ9uM2YfigIzZg9i02YfigIzZhdmF2YfigIxf2K/ZiNmI2LTZh+KAjNmF2YXZh+KAjF/Ys9uO2LTZh+KAjNmF2YXZh+KAjF/ahtmI2KfYsdi02YfigIzZhdmF2YfigIxf2b7bjtmG2KzYtNmH4oCM2YXZhdmH4oCMX9mH2YfigIzbjNmG24xf2LTZh+KAjNmF2YXZh+KAjCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OlxuICAgICAgICAgICAgJ9uM2YfigIzZg9i02YfigIzZhV/Yr9mI2YjYtNmH4oCM2YVf2LPbjti02YfigIzZhV/ahtmI2KfYsdi02YfigIzZhV/ZvtuO2YbYrNi02YfigIzZhV/Zh9mH4oCM24zZhtuMX9i02YfigIzZhdmF2YfigIwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn24xf2K9f2LNf2oZf2b5f2Ydf2LQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2KbbjtmI2KfYsdmH4oCMfNio2YfigIzbjNin2YbbjC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC/YptuO2YjYp9ix2YfigIwvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2KjZh+KAjNuM2KfZhtuMJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYptuO2YjYp9ix2YfigIwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYptmH4oCM2YXYsduGINmD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9io2YfigIzbjNin2YbbjCDZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYr9mI247ZhtuOINmD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9mD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mE2YfigIwgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzJyxcbiAgICAgICAgICAgIHM6ICfahtmH4oCM2YbYryDahtix2YPZh+KAjNuM2YfigIzZgycsXG4gICAgICAgICAgICBzczogJ9qG2LHZg9mH4oCMICVkJyxcbiAgICAgICAgICAgIG06ICfbjNmH4oCM2YMg2K7ZiNmE2YfigIzZgycsXG4gICAgICAgICAgICBtbTogJyVkINiu2YjZhNmH4oCM2YMnLFxuICAgICAgICAgICAgaDogJ9uM2YfigIzZgyDZg9in2KramNmF247YsScsXG4gICAgICAgICAgICBoaDogJyVkINmD2KfYqtqY2YXbjtixJyxcbiAgICAgICAgICAgIGQ6ICfbjNmH4oCM2YMg2pXbhtqYJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2pXbhtqYJyxcbiAgICAgICAgICAgIE06ICfbjNmH4oCM2YMg2YXYp9mG2q8nLFxuICAgICAgICAgICAgTU06ICclZCDZhdin2YbarycsXG4gICAgICAgICAgICB5OiAn24zZh+KAjNmDINiz2KfatScsXG4gICAgICAgICAgICB5eTogJyVkINiz2KfatScsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1vZodmi2aPZpNml2abZp9mo2anZoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGt1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE5vcnRoZXJuIEt1cmRpc2ggW2t1LWttcl1cbi8vISBhdXRob3JzIDogTWF6bHVtIMOWemRvZ2FuIDogaHR0cHM6Ly9naXRodWIuY29tL21lcmdlaGV6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bSwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgczogWyfDp2VuZCBzYW7DrnllJywgJ8OnZW5kIHNhbsOueWV5YW4nXSxcbiAgICAgICAgICAgIHNzOiBbbnVtICsgJyBzYW7DrnllJywgbnVtICsgJyBzYW7DrnlleWFuJ10sXG4gICAgICAgICAgICBtOiBbJ2RlccOucWV5ZWsnLCAnZGVxw65xZXlla8OqJ10sXG4gICAgICAgICAgICBtbTogW251bSArICcgZGVxw65xZScsIG51bSArICcgZGVxw65xZXlhbiddLFxuICAgICAgICAgICAgaDogWydzYWV0ZWsnLCAnc2FldGVrw6onXSxcbiAgICAgICAgICAgIGhoOiBbbnVtICsgJyBzYWV0JywgbnVtICsgJyBzYWV0YW4nXSxcbiAgICAgICAgICAgIGQ6IFsncm9qZWsnLCAncm9qZWvDqiddLFxuICAgICAgICAgICAgZGQ6IFtudW0gKyAnIHJvaicsIG51bSArICcgcm9qYW4nXSxcbiAgICAgICAgICAgIHc6IFsnaGVmdGV5ZWsnLCAnaGVmdGV5ZWvDqiddLFxuICAgICAgICAgICAgd3c6IFtudW0gKyAnIGhlZnRlJywgbnVtICsgJyBoZWZ0ZXlhbiddLFxuICAgICAgICAgICAgTTogWydtZWhlaycsICdtZWhla8OqJ10sXG4gICAgICAgICAgICBNTTogW251bSArICcgbWVoJywgbnVtICsgJyBtZWhhbiddLFxuICAgICAgICAgICAgeTogWydzYWxlaycsICdzYWxla8OqJ10sXG4gICAgICAgICAgICB5eTogW251bSArICcgc2FsJywgbnVtICsgJyBzYWxhbiddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuICAgIC8vIGZ1bmN0aW9uIG9ibGlxdWVOdW1TdWZmaXgobnVtKSB7XG4gICAgLy8gICAgIGlmKG51bS5pbmNsdWRlcygnOicpKVxuICAgIC8vICAgICAgICAgbnVtID0gcGFyc2VJbnQobnVtLnNwbGl0KCc6JylbMF0pO1xuICAgIC8vICAgICBlbHNlXG4gICAgLy8gICAgICAgICBudW0gPSBwYXJzZUludChudW0pO1xuICAgIC8vICAgICByZXR1cm4gbnVtID09IDAgfHwgbnVtICUgMTAgPT0gMSA/ICfDqidcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICA6IChudW0gPiAxMCAmJiBudW0gJSAxMCA9PSAwID8gJ8OuJyA6ICdhbicpO1xuICAgIC8vIH1cbiAgICBmdW5jdGlvbiBlemFmZU51bVN1ZmZpeChudW0pIHtcbiAgICAgICAgbnVtID0gJycgKyBudW07XG4gICAgICAgIHZhciBsID0gbnVtLnN1YnN0cmluZyhudW0ubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICBsbCA9IG51bS5sZW5ndGggPiAxID8gbnVtLnN1YnN0cmluZyhudW0ubGVuZ3RoIC0gMikgOiAnJztcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShsbCA9PSAxMiB8fCBsbCA9PSAxMykgJiZcbiAgICAgICAgICAgIChsID09ICcyJyB8fCBsID09ICczJyB8fCBsbCA9PSAnNTAnIHx8IGwgPT0gJzcwJyB8fCBsID09ICc4MCcpXG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiAnecOqJztcbiAgICAgICAgcmV0dXJuICfDqic7XG4gICAgfVxuXG4gICAgdmFyIGt1S21yID0gbW9tZW50LmRlZmluZUxvY2FsZSgna3Uta21yJywge1xuICAgICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIHNwZWxsaW5nIHJ1bGVzIGRlZmluZWQgYnkgdGhlIHdvcmsgZ3JvdXAgb2YgV2VxZmEgTWV6b3BvdGFteWF5w6ogKE1lc29wb3RhbWlhIEZvdW5kYXRpb24pXG4gICAgICAgIC8vIHRoaXMgc2hvdWxkIGJlOiAnS2Fuw7tuYSBQYcWfw65uX1NpYmF0X0FkYXJfTsOuc2FuX0d1bGFuX0hlesOucmFuX1TDrnJtZWhfVGViYXhfw45sb25fw4dpcsOueWEgUMOqxZ/Drm5fw4dpcsOueWEgUGHFn8Oubl9LYW7Du25hIFDDqsWfw65uJ1xuICAgICAgICAvLyBCdXQgdGhlIG5hbWVzIGJlbG93IGFyZSBtb3JlIHdlbGwga25vd24gYW5kIGhhbmR5XG4gICAgICAgIG1vbnRoczogJ1LDqmJlbmRhbl9TaWJhdF9BZGFyX07DrnNhbl9HdWxhbl9IZXrDrnJhbl9Uw65ybWVoX1RlYmF4X8OObG9uX0NvdG1laF9NaWpkYXJfQmVyZmFuYmFyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ1LDqmJfU2liX0FkYV9Ow65zX0d1bF9IZXpfVMOucl9UZWJfw45sb19Db3RfTWlqX0Jlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdZZWvFn2VtX0R1xZ9lbV9Tw6rFn2VtX8OHYXLFn2VtX1DDqm5jxZ9lbV/Djm5fxZ5lbcOuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnWWVrX0R1X1PDql/Dh2FyX1DDqm5fw45uX8WeZW0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnWWVfRHVfU8OqX8OHYV9Qw6pfw45uX8WeZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdibicgOiAnQk4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbicgOiAnUE4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvYm58Qk58cG58UE4vLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0RvIE1NTU1bYV0gWVlZWVthbl0nLFxuICAgICAgICAgICAgTExMOiAnRG8gTU1NTVthXSBZWVlZW2FuXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRG8gTU1NTVthXSBZWVlZW2FuXSBISDptbScsXG4gICAgICAgICAgICBsbDogJ0RvIE1NTVsuXSBZWVlZW2FuXScsXG4gICAgICAgICAgICBsbGw6ICdEbyBNTU1bLl0gWVlZWVthbl0gSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZFsuXSwgRG8gTU1NWy5dIFlZWVlbYW5dIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbw45ybyBkaSBzYWV0XSBMVCBbZGVdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbU2liw6ogZGkgc2FldF0gTFQgW2RlXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2RpIHNhZXRdIExUIFtkZV0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1tEdWggZGkgc2FldF0gTFQgW2RlXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGRbYSBib3LDriBkaSBzYWV0XSBMVCBbZGVdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGkgJXMgZGUnLFxuICAgICAgICAgICAgcGFzdDogJ2JlcsOuICVzJyxcbiAgICAgICAgICAgIHM6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHc6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3dzogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KD86ecOqfMOqfFxcLikvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBwID0gcGVyaW9kLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAocC5pbmNsdWRlcygndycpIHx8IHAuaW5jbHVkZXMoJ20nKSkgcmV0dXJuIG51bSArICcuJztcblxuICAgICAgICAgICAgcmV0dXJuIG51bSArIGV6YWZlTnVtU3VmZml4KG51bSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBrdUttcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLeXJneXogW2t5XVxuLy8hIGF1dGhvciA6IENoeW5neXogQXJ5c3RhbiB1dWx1IDogaHR0cHM6Ly9naXRodWIuY29tL2NoeW5neXpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMDogJy3Rh9KvJyxcbiAgICAgICAgMTogJy3Rh9C4JyxcbiAgICAgICAgMjogJy3Rh9C4JyxcbiAgICAgICAgMzogJy3Rh9KvJyxcbiAgICAgICAgNDogJy3Rh9KvJyxcbiAgICAgICAgNTogJy3Rh9C4JyxcbiAgICAgICAgNjogJy3Rh9GLJyxcbiAgICAgICAgNzogJy3Rh9C4JyxcbiAgICAgICAgODogJy3Rh9C4JyxcbiAgICAgICAgOTogJy3Rh9GDJyxcbiAgICAgICAgMTA6ICct0YfRgycsXG4gICAgICAgIDIwOiAnLdGH0YsnLFxuICAgICAgICAzMDogJy3Rh9GDJyxcbiAgICAgICAgNDA6ICct0YfRiycsXG4gICAgICAgIDUwOiAnLdGH0q8nLFxuICAgICAgICA2MDogJy3Rh9GLJyxcbiAgICAgICAgNzA6ICct0YfQuCcsXG4gICAgICAgIDgwOiAnLdGH0LgnLFxuICAgICAgICA5MDogJy3Rh9GDJyxcbiAgICAgICAgMTAwOiAnLdGH0q8nLFxuICAgIH07XG5cbiAgICB2YXIga3kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdreScsIHtcbiAgICAgICAgbW9udGhzOiAn0Y/QvdCy0LDRgNGMX9GE0LXQstGA0LDQu9GMX9C80LDRgNGCX9Cw0L/RgNC10LvRjF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGA0Yxf0L7QutGC0Y/QsdGA0Yxf0L3QvtGP0LHRgNGMX9C00LXQutCw0LHRgNGMJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGA0YJf0LDQv9GAX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9CW0LXQutGI0LXQvNCx0Lhf0JTSr9C50YjTqdC80LHSr1/QqNC10LnRiNC10LzQsdC4X9Co0LDRgNGI0LXQvNCx0Lhf0JHQtdC50YjQtdC80LHQuF/QltGD0LzQsF/QmNGI0LXQvNCx0LgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQltC10Lpf0JTSr9C5X9Co0LXQuV/QqNCw0YBf0JHQtdC5X9CW0YPQvF/QmNGI0LUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0JbQul/QlNC5X9Co0Llf0KjRgF/QkdC5X9CW0Lxf0JjRiCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQkdKv0LPSr9C9INGB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Ct0YDRgtC10qMg0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JrQtdGH0Y3RjSDRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb06jRgtC606nQvSDQsNC/0YLQsNC90YvQvV0gZGRkZCBb0LrSr9C90q9dIFvRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDQuNGH0LjQvdC00LUnLFxuICAgICAgICAgICAgcGFzdDogJyVzINC80YPRgNGD0L0nLFxuICAgICAgICAgICAgczogJ9Cx0LjRgNC90LXRh9C1INGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzczogJyVkINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtOiAn0LHQuNGAINC80q/QvdOp0YInLFxuICAgICAgICAgICAgbW06ICclZCDQvNKv0L3TqdGCJyxcbiAgICAgICAgICAgIGg6ICfQsdC40YAg0YHQsNCw0YInLFxuICAgICAgICAgICAgaGg6ICclZCDRgdCw0LDRgicsXG4gICAgICAgICAgICBkOiAn0LHQuNGAINC60q/QvScsXG4gICAgICAgICAgICBkZDogJyVkINC60q/QvScsXG4gICAgICAgICAgICBNOiAn0LHQuNGAINCw0LknLFxuICAgICAgICAgICAgTU06ICclZCDQsNC5JyxcbiAgICAgICAgICAgIHk6ICfQsdC40YAg0LbRi9C7JyxcbiAgICAgICAgICAgIHl5OiAnJWQg0LbRi9C7JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRh9C4fNGH0Yt80YfSr3zRh9GDKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGt5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEx1eGVtYm91cmdpc2ggW2xiXVxuLy8hIGF1dGhvciA6IG13ZWltZXJza2lyY2ggOiBodHRwczovL2dpdGh1Yi5jb20vbXdlaW1lcnNraXJjaFxuLy8hIGF1dGhvciA6IERhdmlkIFJhaXNvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rd2lzYXR6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgbTogWydlbmcgTWludXR0JywgJ2VuZ2VyIE1pbnV0dCddLFxuICAgICAgICAgICAgaDogWydlbmcgU3Rvbm4nLCAnZW5nZXIgU3Rvbm4nXSxcbiAgICAgICAgICAgIGQ6IFsnZWVuIERhZycsICdlbmdlbSBEYWcnXSxcbiAgICAgICAgICAgIE06IFsnZWUgTW91bnQnLCAnZW5nZW0gTW91bnQnXSxcbiAgICAgICAgICAgIHk6IFsnZWUgSm9lcicsICdlbmdlbSBKb2VyJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc0Z1dHVyZVRpbWUoc3RyaW5nKSB7XG4gICAgICAgIHZhciBudW1iZXIgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKCcgJykpO1xuICAgICAgICBpZiAoZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiAnYSAnICsgc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnYW4gJyArIHN0cmluZztcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc1Bhc3RUaW1lKHN0cmluZykge1xuICAgICAgICB2YXIgbnVtYmVyID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZignICcpKTtcbiAgICAgICAgaWYgKGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3ZpcnUgJyArIHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3ZpcnVuICcgKyBzdHJpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgd29yZCBiZWZvcmUgdGhlIGdpdmVuIG51bWJlciBsb3NlcyB0aGUgJy1uJyBlbmRpbmcuXG4gICAgICogZS5nLiAnYW4gMTAgRGVlZycgYnV0ICdhIDUgRGVlZydcbiAgICAgKlxuICAgICAqIEBwYXJhbSBudW1iZXIge2ludGVnZXJ9XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikge1xuICAgICAgICBudW1iZXIgPSBwYXJzZUludChudW1iZXIsIDEwKTtcbiAgICAgICAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gTmVnYXRpdmUgTnVtYmVyIC0tPiBhbHdheXMgdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTApIHtcbiAgICAgICAgICAgIC8vIE9ubHkgMSBkaWdpdFxuICAgICAgICAgICAgaWYgKDQgPD0gbnVtYmVyICYmIG51bWJlciA8PSA3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTAwKSB7XG4gICAgICAgICAgICAvLyAyIGRpZ2l0c1xuICAgICAgICAgICAgdmFyIGxhc3REaWdpdCA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGZpcnN0RGlnaXQgPSBudW1iZXIgLyAxMDtcbiAgICAgICAgICAgIGlmIChsYXN0RGlnaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKGZpcnN0RGlnaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihsYXN0RGlnaXQpO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMDAwKSB7XG4gICAgICAgICAgICAvLyAzIG9yIDQgZGlnaXRzIC0tPiByZWN1cnNpdmVseSBjaGVjayBmaXJzdCBkaWdpdFxuICAgICAgICAgICAgd2hpbGUgKG51bWJlciA+PSAxMCkge1xuICAgICAgICAgICAgICAgIG51bWJlciA9IG51bWJlciAvIDEwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQW55dGhpbmcgbGFyZ2VyIHRoYW4gNCBkaWdpdHM6IHJlY3Vyc2l2ZWx5IGNoZWNrIGZpcnN0IG4tMyBkaWdpdHNcbiAgICAgICAgICAgIG51bWJlciA9IG51bWJlciAvIDEwMDA7XG4gICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsYicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyX0ZlYnJ1YXJfTcOkZXJ6X0FicsOrbGxfTWVlX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ0phbi5fRmVici5fTXJ6Ll9BYnIuX01lZV9KdW4uX0p1bC5fQXVnLl9TZXB0Ll9Pa3QuX05vdi5fRGV6Licuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdTb25uZGVnX03DqWluZGVnX0TDq25zY2hkZWdfTcOrdHR3b2NoX0Rvbm5lc2NoZGVnX0ZyZWlkZWdfU2Ftc2NoZGVnJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTby5fTcOpLl9Ew6suX03Dqy5fRG8uX0ZyLl9TYS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU29fTcOpX0TDq19Nw6tfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbSBbQXVlcl0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcyBbQXVlcl0nLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0gW0F1ZXJdJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSBbQXVlcl0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIYXV0IHVtXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tNdWVyIHVtXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0fDq3NjaHRlciB1bV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBEaWZmZXJlbnQgZGF0ZSBzdHJpbmcgZm9yICdEw6tuc2NoZGVnJyAoVHVlc2RheSkgYW5kICdEb25uZXNjaGRlZycgKFRodXJzZGF5KSBkdWUgdG8gcGhvbm9sb2dpY2FsIHJ1bGVcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tMZXNjaHRlbl0gZGRkZCBbdW1dIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW0xlc2NodGVdIGRkZGQgW3VtXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IHByb2Nlc3NGdXR1cmVUaW1lLFxuICAgICAgICAgICAgcGFzdDogcHJvY2Vzc1Bhc3RUaW1lLFxuICAgICAgICAgICAgczogJ2UgcHVlciBTZWtvbm5lbicsXG4gICAgICAgICAgICBzczogJyVkIFNla29ubmVuJyxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogJyVkIE1pbnV0dGVuJyxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogJyVkIFN0b25uZW4nLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiAnJWQgRGVlZycsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06ICclZCBNw6lpbnQnLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiAnJWQgSm9lcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbGI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTGFvIFtsb11cbi8vISBhdXRob3IgOiBSeWFuIEhhcnQgOiBodHRwczovL2dpdGh1Yi5jb20vcnlhbmhhcnQyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsbycsIHtcbiAgICAgICAgbW9udGhzOiAn4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+C6oeC6seC6h+C6geC6reC6mV/guoHgurjguqHgup7gurJf4Lqh4Lq14LqZ4LqyX+C7gOC6oeC6quC6sl/gup7gurbgupTguqrgurDgup7gurJf4Lqh4Lq04LqW4Lq44LqZ4LqyX+C6geC7jeC6peC6sOC6geC6u+C6lF/guqrgurTguofguqvgurJf4LqB4Lqx4LqZ4LqN4LqyX+C6leC6uOC6peC6sl/gup7gurDguojgurTguoFf4LqX4Lqx4LqZ4Lqn4LqyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn4Lqt4Lqy4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+C6l1/guohf4Lqt4LqEX+C6nl/gup7guqtf4Lqq4LqBX+C6qicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICfguqfgurHguplkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C6leC6reC6meC7gOC6iuC6u+C7ieC6snzgupXguq3gupngu4HguqXguocvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C6leC6reC6meC7geC6peC6hyc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgupXguq3gupngu4Dguorgurvgu4ngurInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C6leC6reC6meC7geC6peC6hyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+C6oeC6t+C7ieC6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vguqHgurfgu4nguq3gurfgu4jgupngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+C6p+C6seC6mV1kZGRkW+C7nOC7ieC6suC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vguqHgurfgu4nguqfgurLgupngupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+C6p+C6seC6mV1kZGRkW+C7geC6peC7ieC6p+C6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfguq3gurXguoEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVz4Lqc4LuI4Lqy4LqZ4Lqh4LqyJyxcbiAgICAgICAgICAgIHM6ICfguprgu43gu4jgu4Dgupfgurvgu4jgurLgu4PgupTguqfgurTgupngurLgupfgurUnLFxuICAgICAgICAgICAgc3M6ICclZCDguqfgurTgupngurLgupfgurUnLFxuICAgICAgICAgICAgbTogJzEg4LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIGg6ICcxIOC6iuC6u+C7iOC6p+C7guC6oeC6hycsXG4gICAgICAgICAgICBoaDogJyVkIOC6iuC6u+C7iOC6p+C7guC6oeC6hycsXG4gICAgICAgICAgICBkOiAnMSDguqHgurfgu4knLFxuICAgICAgICAgICAgZGQ6ICclZCDguqHgurfgu4knLFxuICAgICAgICAgICAgTTogJzEg4LuA4LqU4Lq34Lqt4LqZJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4LuA4LqU4Lq34Lqt4LqZJyxcbiAgICAgICAgICAgIHk6ICcxIOC6m+C6tScsXG4gICAgICAgICAgICB5eTogJyVkIOC6m+C6tScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC8o4LqX4Lq14LuIKVxcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuICfgupfgurXgu4gnICsgbnVtYmVyO1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IExpdGh1YW5pYW4gW2x0XVxuLy8hIGF1dGhvciA6IE1pbmRhdWdhcyBNb3rFq3JhcyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tbW96dXJhc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHVuaXRzID0ge1xuICAgICAgICBzczogJ3Nla3VuZMSXX3Nla3VuZMW+acWzX3Nla3VuZGVzJyxcbiAgICAgICAgbTogJ21pbnV0xJdfbWludXTEl3NfbWludXTEmScsXG4gICAgICAgIG1tOiAnbWludXTEl3NfbWludcSNacWzX21pbnV0ZXMnLFxuICAgICAgICBoOiAndmFsYW5kYV92YWxhbmRvc192YWxhbmTEhScsXG4gICAgICAgIGhoOiAndmFsYW5kb3NfdmFsYW5kxbNfdmFsYW5kYXMnLFxuICAgICAgICBkOiAnZGllbmFfZGllbm9zX2RpZW7EhScsXG4gICAgICAgIGRkOiAnZGllbm9zX2RpZW7Fs19kaWVuYXMnLFxuICAgICAgICBNOiAnbcSXbnVvX23El25lc2lvX23El25lc8SvJyxcbiAgICAgICAgTU06ICdtxJduZXNpYWlfbcSXbmVzacWzX23El25lc2l1cycsXG4gICAgICAgIHk6ICdtZXRhaV9tZXTFs19tZXR1cycsXG4gICAgICAgIHl5OiAnbWV0YWlfbWV0xbNfbWV0dXMnLFxuICAgIH07XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlU2Vjb25kcyhudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiAna2VsaW9zIHNla3VuZMSXcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAna2VsacWzIHNla3VuZMW+acWzJyA6ICdrZWxpYXMgc2VrdW5kZXMnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeFxuICAgICAgICAgICAgPyBmb3JtcyhrZXkpWzBdXG4gICAgICAgICAgICA6IGlzRnV0dXJlXG4gICAgICAgICAgICAgID8gZm9ybXMoa2V5KVsxXVxuICAgICAgICAgICAgICA6IGZvcm1zKGtleSlbMl07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwZWNpYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMCB8fCAobnVtYmVyID4gMTAgJiYgbnVtYmVyIDwgMjApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIHVuaXRzW2tleV0uc3BsaXQoJ18nKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHJlc3VsdCArIHRyYW5zbGF0ZVNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5WzBdLCBpc0Z1dHVyZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChzcGVjaWFsKG51bWJlcikgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgZm9ybXMoa2V5KVsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChzcGVjaWFsKG51bWJlcikgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGx0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbHQnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2F1c2lvX3Zhc2FyaW9fa292b19iYWxhbmTFvmlvX2dlZ3XFvsSXc19iaXLFvmVsaW9fbGllcG9zX3J1Z3BqxavEjWlvX3J1Z3PEl2pvX3NwYWxpb19sYXBrcmnEjWlvX2dydW9kxb5pbycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAnc2F1c2lzX3Zhc2FyaXNfa292YXNfYmFsYW5kaXNfZ2VndcW+xJdfYmlyxb5lbGlzX2xpZXBhX3J1Z3Bqxat0aXNfcnVnc8SXamlzX3NwYWxpc19sYXBrcml0aXNfZ3J1b2Rpcycuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT98TU1NTT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK0Rbb0RdPy8sXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnc2F1X3Zhc19rb3ZfYmFsX2dlZ19iaXJfbGllX3JncF9yZ3Nfc3BhX2xhcF9ncmQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICdzZWttYWRpZW7Er19waXJtYWRpZW7Er19hbnRyYWRpZW7Er190cmXEjWlhZGllbsSvX2tldHZpcnRhZGllbsSvX3Blbmt0YWRpZW7Er1/FoWXFoXRhZGllbsSvJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICdzZWttYWRpZW5pc19waXJtYWRpZW5pc19hbnRyYWRpZW5pc190cmXEjWlhZGllbmlzX2tldHZpcnRhZGllbmlzX3Blbmt0YWRpZW5pc1/FoWXFoXRhZGllbmlzJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvZGRkZCBISDptbS8sXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTZWtfUGlyX0FudF9UcmVfS2V0X1Blbl/FoGXFoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTX1BfQV9UX0tfUG5fxaAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0nLFxuICAgICAgICAgICAgTExMOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBISDptbSBbdmFsLl0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkZCwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIGw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIGxsbGw6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIGRkZCwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbxaBpYW5kaWVuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1J5dG9qXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tWYWthcl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbUHJhxJdqdXPEr10gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3BvICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmllxaEgJXMnLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlU2Vjb25kcyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS1vamkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy1vamknO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbHQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTGF0dmlhbiBbbHZdXG4vLyEgYXV0aG9yIDogS3Jpc3RhcHMgS2FybHNvbnMgOiBodHRwczovL2dpdGh1Yi5jb20vc2tha3JpXG4vLyEgYXV0aG9yIDogSsSBbmlzIEVsbWVyaXMgOiBodHRwczovL2dpdGh1Yi5jb20vSmFuaXNFXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdW5pdHMgPSB7XG4gICAgICAgIHNzOiAnc2VrdW5kZXNfc2VrdW5kxJNtX3Nla3VuZGVfc2VrdW5kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIG06ICdtaW7Fq3Rlc19taW7Fq3TEk21fbWluxat0ZV9taW7Fq3Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW06ICdtaW7Fq3Rlc19taW7Fq3TEk21fbWluxat0ZV9taW7Fq3Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgaDogJ3N0dW5kYXNfc3R1bmTEgW1fc3R1bmRhX3N0dW5kYXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGhoOiAnc3R1bmRhc19zdHVuZMSBbV9zdHVuZGFfc3R1bmRhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgZDogJ2RpZW5hc19kaWVuxIFtX2RpZW5hX2RpZW5hcycuc3BsaXQoJ18nKSxcbiAgICAgICAgZGQ6ICdkaWVuYXNfZGllbsSBbV9kaWVuYV9kaWVuYXMnLnNwbGl0KCdfJyksXG4gICAgICAgIE06ICdtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpJy5zcGxpdCgnXycpLFxuICAgICAgICBNTTogJ23Ek25lxaFhX23Ek25lxaFpZW1fbcSTbmVzaXNfbcSTbmXFoWknLnNwbGl0KCdfJyksXG4gICAgICAgIHk6ICdnYWRhX2dhZGllbV9nYWRzX2dhZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHl5OiAnZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpJy5zcGxpdCgnXycpLFxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHdpdGhvdXRTdWZmaXggYm9vbGVhbiB0cnVlID0gYSBsZW5ndGggb2YgdGltZTsgZmFsc2UgPSBiZWZvcmUvYWZ0ZXIgYSBwZXJpb2Qgb2YgdGltZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JtYXQoZm9ybXMsIG51bWJlciwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgLy8gRS5nLiBcIjIxIG1pbsWrdGVcIiwgXCIzIG1pbsWrdGVzXCIuXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDEgJiYgbnVtYmVyICUgMTAwICE9PSAxMSA/IGZvcm1zWzJdIDogZm9ybXNbM107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBFLmcuIFwiMjEgbWluxat0ZXNcIiBhcyBpbiBcInDEk2MgMjEgbWluxat0ZXNcIi5cbiAgICAgICAgICAgIC8vIEUuZy4gXCIzIG1pbsWrdMSTbVwiIGFzIGluIFwicMSTYyAzIG1pbsWrdMSTbVwiLlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAxICYmIG51bWJlciAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IGZvcm1zWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIGZvcm1hdCh1bml0c1trZXldLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdCh1bml0c1trZXldLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVNlY29uZHMobnVtYmVyLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2Rhxb5hcyBzZWt1bmRlcycgOiAnZGHFvsSBbSBzZWt1bmTEk20nO1xuICAgIH1cblxuICAgIHZhciBsdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2x2Jywge1xuICAgICAgICBtb250aHM6ICdqYW52xIFyaXNfZmVicnXEgXJpc19tYXJ0c19hcHLEq2xpc19tYWlqc19qxatuaWpzX2rFq2xpanNfYXVndXN0c19zZXB0ZW1icmlzX29rdG9icmlzX25vdmVtYnJpc19kZWNlbWJyaXMnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2ZlYl9tYXJfYXByX21haV9qxatuX2rFq2xfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnc3bEk3RkaWVuYV9waXJtZGllbmFfb3RyZGllbmFfdHJlxaFkaWVuYV9jZXR1cnRkaWVuYV9waWVrdGRpZW5hX3Nlc3RkaWVuYScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3ZfUF9PX1RfQ19Qa19TJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N2X1BfT19UX0NfUGtfUycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWS4nLFxuICAgICAgICAgICAgTEw6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTSwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVkuIFtnYWRhXSBELiBNTU1NLCBkZGRkLCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW8Wgb2RpZW4gcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbUsSrdCBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tWYWthciBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbUGFnxIFqdcWhxIFdIGRkZGQgW3B1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3DEk2MgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3Bpcm1zICVzJyxcbiAgICAgICAgICAgIHM6IHJlbGF0aXZlU2Vjb25kcyxcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbTogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQ6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTTogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5OiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBsdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNb250ZW5lZ3JpbiBbbWVdXG4vLyEgYXV0aG9yIDogTWlvZHJhZyBOaWthxI0gPG1pb2RyYWdAcmVzdGFydGl0Lm1lPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taW9kcmFnbmlrYWNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0cmFuc2xhdG9yID0ge1xuICAgICAgICB3b3Jkczoge1xuICAgICAgICAgICAgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgICAgIHNzOiBbJ3Nla3VuZCcsICdzZWt1bmRhJywgJ3Nla3VuZGknXSxcbiAgICAgICAgICAgIG06IFsnamVkYW4gbWludXQnLCAnamVkbm9nIG1pbnV0YSddLFxuICAgICAgICAgICAgbW06IFsnbWludXQnLCAnbWludXRhJywgJ21pbnV0YSddLFxuICAgICAgICAgICAgaDogWydqZWRhbiBzYXQnLCAnamVkbm9nIHNhdGEnXSxcbiAgICAgICAgICAgIGhoOiBbJ3NhdCcsICdzYXRhJywgJ3NhdGknXSxcbiAgICAgICAgICAgIGRkOiBbJ2RhbicsICdkYW5hJywgJ2RhbmEnXSxcbiAgICAgICAgICAgIE1NOiBbJ21qZXNlYycsICdtamVzZWNhJywgJ21qZXNlY2knXSxcbiAgICAgICAgICAgIHl5OiBbJ2dvZGluYScsICdnb2RpbmUnLCAnZ29kaW5hJ10sXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDFcbiAgICAgICAgICAgICAgICA/IHdvcmRLZXlbMF1cbiAgICAgICAgICAgICAgICA6IG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0XG4gICAgICAgICAgICAgICAgICA/IHdvcmRLZXlbMV1cbiAgICAgICAgICAgICAgICAgIDogd29yZEtleVsyXTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBtZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21lJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5fanVsX2F2Z3VzdF9zZXB0ZW1iYXJfb2t0b2Jhcl9ub3ZlbWJhcl9kZWNlbWJhcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3V0X3NyX8SNZV9wZV9zdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzanV0cmEgdV0gTFQnLFxuXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanXEjWUgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtuZWRqZWxqZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3BvbmVkamVsamthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtzcmlqZWRlXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbxI1ldHZydGthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcGV0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJpamUgJXMnLFxuICAgICAgICAgICAgczogJ25la29saWtvIHNla3VuZGknLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6ICdkYW4nLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogJ21qZXNlYycsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYW9yaSBbbWldXG4vLyEgYXV0aG9yIDogSm9obiBDb3JyaWdhbiA8cm9iYmllY2xvc2V0QGdtYWlsLmNvbT4gOiBodHRwczovL2dpdGh1Yi5jb20vam9obmlkZWFsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbWkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtaScsIHtcbiAgICAgICAgbW9udGhzOiAnS29oaS10xIF0ZV9IdWktdGFuZ3VydV9Qb3V0xastdGUtcmFuZ2lfUGFlbmdhLXdoxIF3aMSBX0hhcmF0dWFfUGlwaXJpX0jFjW5nb2luZ29pX0hlcmUtdHVyaS1rxY1rxIFfTWFodXJ1X1doaXJpbmdhLcSBLW51a3VfV2hpcmluZ2EtxIEtcmFuZ2lfSGFraWhlYScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnS29oaV9IdWlfUG91X1BhZV9IYXJhX1BpcGlfSMWNbmdvaV9IZXJlX01haHVfV2hpLW51X1doaS1yYV9IYWtpJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1JlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDJ9L2ksXG4gICAgICAgIHdlZWtkYXlzOiAnUsSBdGFwdV9NYW5lX1TFq3JlaV9XZW5lcmVpX1TEgWl0ZV9QYXJhaXJlX0jEgXRhcmVpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnVGFfTWFfVMWrX1dlX1TEgWlfUGFfSMSBJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1RhX01hX1TFq19XZV9UxIFpX1BhX0jEgScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbaV0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtpXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2kgdGVpZSBtYWhhbmEsIGldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbYXBvcG8gaV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtpXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2luYW5haGkgaV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt3aGFrYW11dHVuZ2EgaV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpIHJvdG8gaSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgaSBtdWEnLFxuICAgICAgICAgICAgczogJ3RlIGjEk2tvbmEgcnVhcnVhJyxcbiAgICAgICAgICAgIHNzOiAnJWQgaMSTa29uYScsXG4gICAgICAgICAgICBtOiAnaGUgbWVuZXRpJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWVuZXRpJyxcbiAgICAgICAgICAgIGg6ICd0ZSBoYW9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhhb3JhJyxcbiAgICAgICAgICAgIGQ6ICdoZSByYScsXG4gICAgICAgICAgICBkZDogJyVkIHJhJyxcbiAgICAgICAgICAgIE06ICdoZSBtYXJhbWEnLFxuICAgICAgICAgICAgTU06ICclZCBtYXJhbWEnLFxuICAgICAgICAgICAgeTogJ2hlIHRhdScsXG4gICAgICAgICAgICB5eTogJyVkIHRhdScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFjZWRvbmlhbiBbbWtdXG4vLyEgYXV0aG9yIDogQm9yaXNsYXYgTWlja292IDogaHR0cHM6Ly9naXRodWIuY29tL0IwazBcbi8vISBhdXRob3IgOiBTYXNoa28gVG9kb3JvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ia3ljZWhcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21rJywge1xuICAgICAgICBtb250aHM6ICfRmNCw0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvdC4X9GY0YPQu9C4X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQstGA0Lhf0L7QutGC0L7QvNCy0YDQuF/QvdC+0LXQvNCy0YDQuF/QtNC10LrQtdC80LLRgNC4Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9GY0LDQvV/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LNf0YHQtdC/X9C+0LrRgl/QvdC+0LVf0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9C90LXQtNC10LvQsF/Qv9C+0L3QtdC00LXQu9C90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNCwX9GH0LXRgtCy0YDRgtC+0Lpf0L/QtdGC0L7Qul/RgdCw0LHQvtGC0LAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQvdC10LRf0L/QvtC9X9Cy0YLQvl/RgdGA0LVf0YfQtdGCX9C/0LXRgl/RgdCw0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0L1lX9C/b1/QstGCX9GB0YBf0YfQtV/Qv9C1X9GBYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0JTQtdC90LXRgSDQstC+XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Cj0YLRgNC1INCy0L5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW9CS0L5dIGRkZGQgW9Cy0L5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JLRh9C10YDQsCDQstC+XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JjQt9C80LjQvdCw0YLQsNGC0LBdIGRkZGQgW9Cy0L5dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JjQt9C80LjQvdCw0YLQuNC+0YJdIGRkZGQgW9Cy0L5dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfQv9GA0LXQtCAlcycsXG4gICAgICAgICAgICBzOiAn0L3QtdC60L7Qu9C60YMg0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3M6ICclZCDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBtOiAn0LXQtNC90LAg0LzQuNC90YPRgtCwJyxcbiAgICAgICAgICAgIG1tOiAnJWQg0LzQuNC90YPRgtC4JyxcbiAgICAgICAgICAgIGg6ICfQtdC00LXQvSDRh9Cw0YEnLFxuICAgICAgICAgICAgaGg6ICclZCDRh9Cw0YHQsCcsXG4gICAgICAgICAgICBkOiAn0LXQtNC10L0g0LTQtdC9JyxcbiAgICAgICAgICAgIGRkOiAnJWQg0LTQtdC90LAnLFxuICAgICAgICAgICAgTTogJ9C10LTQtdC9INC80LXRgdC10YYnLFxuICAgICAgICAgICAgTU06ICclZCDQvNC10YHQtdGG0LgnLFxuICAgICAgICAgICAgeTogJ9C10LTQvdCwINCz0L7QtNC40L3QsCcsXG4gICAgICAgICAgICB5eTogJyVkINCz0L7QtNC40L3QuCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGxhc3REaWdpdCA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGxhc3QyRGlnaXRzID0gbnVtYmVyICUgMTAwO1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10LInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10L0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA+IDEwICYmIGxhc3QyRGlnaXRzIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGA0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDcgfHwgbGFzdERpZ2l0ID09PSA4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LzQuCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFsYXlhbGFtIFttbF1cbi8vISBhdXRob3IgOiBGbG95ZCBQaW5rIDogaHR0cHM6Ly9naXRodWIuY29tL2Zsb3lkcGlua1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1sID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWwnLCB7XG4gICAgICAgIG1vbnRoczogJ+C0nOC0qOC1geC0teC0sOC0v1/gtKvgtYbgtKzgtY3gtLDgtYHgtLXgtLDgtL9f4LSu4LS+4LW84LSa4LWN4LSa4LWNX+C0j+C0quC1jeC0sOC0v+C1vV/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iF/gtJPgtJfgtLjgtY3gtLHgtY3gtLHgtY1f4LS44LWG4LSq4LWN4LSx4LWN4LSx4LSC4LSs4LW8X+C0kuC0leC1jeC0n+C1i+C0rOC1vF/gtKjgtLXgtILgtKzgtbxf4LSh4LS/4LS44LSC4LSs4LW8Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgtJzgtKjgtYEuX+C0q+C1huC0rOC1jeC0sOC1gS5f4LSu4LS+4LW8Ll/gtI/gtKrgtY3gtLDgtL8uX+C0ruC1h+C0r+C1jV/gtJzgtYLgtbpf4LSc4LWC4LSy4LWILl/gtJPgtJcuX+C0uOC1huC0quC1jeC0seC1jeC0sS5f4LSS4LSV4LWN4LSf4LWLLl/gtKjgtLXgtIIuX+C0oeC0v+C0uOC0gi4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn4LSe4LS+4LSv4LSx4LS+4LS04LWN4LSaX+C0pOC0v+C0meC1jeC0leC0s+C0vuC0tOC1jeC0ml/gtJrgtYrgtLXgtY3gtLXgtL7gtLTgtY3gtJpf4LSs4LWB4LSn4LSo4LS+4LS04LWN4LSaX+C0teC1jeC0r+C0vuC0tOC0vuC0tOC1jeC0ml/gtLXgtYbgtLPgtY3gtLPgtL/gtK/gtL7gtLTgtY3gtJpf4LS24LSo4LS/4LSv4LS+4LS04LWN4LSaJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgtJ7gtL7gtK/gtbxf4LSk4LS/4LSZ4LWN4LSV4LW+X+C0muC1iuC0teC1jeC0tV/gtKzgtYHgtKfgtbtf4LS14LWN4LSv4LS+4LS04LSCX+C0teC1huC0s+C1jeC0s+C0v1/gtLbgtKjgtL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4LSe4LS+X+C0pOC0v1/gtJrgtYpf4LSs4LWBX+C0teC1jeC0r+C0vl/gtLXgtYZf4LS2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0gLeC0qOC1gScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MgLeC0qOC1gScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0gLeC0qOC1gScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4LSH4LSo4LWN4LSo4LWNXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+C0qOC0vuC0s+C1hl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+C0h+C0qOC1jeC0qOC0suC1hl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4LSV4LS04LS/4LSe4LWN4LSeXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOC0leC0tOC0v+C0nuC1jeC0nuC1jScsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4LSu4LWB4LW74LSq4LWNJyxcbiAgICAgICAgICAgIHM6ICfgtIXgtb3gtKog4LSo4LS/4LSu4LS/4LS34LSZ4LWN4LSZ4LW+JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4LS44LWG4LSV4LWN4LSV4LW74LSh4LWNJyxcbiAgICAgICAgICAgIG06ICfgtJLgtLDgtYEg4LSu4LS/4LSo4LS/4LSx4LWN4LSx4LWNJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4LSu4LS/4LSo4LS/4LSx4LWN4LSx4LWNJyxcbiAgICAgICAgICAgIGg6ICfgtJLgtLDgtYEg4LSu4LSj4LS/4LSV4LWN4LSV4LWC4LW8JyxcbiAgICAgICAgICAgIGhoOiAnJWQg4LSu4LSj4LS/4LSV4LWN4LSV4LWC4LW8JyxcbiAgICAgICAgICAgIGQ6ICfgtJLgtLDgtYEg4LSm4LS/4LS14LS44LSCJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4LSm4LS/4LS14LS44LSCJyxcbiAgICAgICAgICAgIE06ICfgtJLgtLDgtYEg4LSu4LS+4LS44LSCJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4LSu4LS+4LS44LSCJyxcbiAgICAgICAgICAgIHk6ICfgtJLgtLDgtYEg4LS14LW84LS34LSCJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4LS14LW84LS34LSCJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C0sOC0vuC0pOC1jeC0sOC0v3zgtLDgtL7gtLXgtL/gtLLgtYZ84LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jXzgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIJ84LSw4LS+4LSk4LWN4LSw4LS/L2ksXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgtLDgtL7gtKTgtY3gtLDgtL8nICYmIGhvdXIgPj0gNCkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIInXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LSk4LWN4LSw4LS/JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtLXgtL/gtLLgtYYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LSk4LWN4LSw4LS/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNb25nb2xpYW4gW21uXVxuLy8hIGF1dGhvciA6IEphdmtobGFudHVncyBOeWFtZG9yaiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXZraGFhbmo3XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdGN0LTRhdGN0L0g0YHQtdC60YPQvdC0JyA6ICfRhdGN0LTRhdGN0L0g0YHQtdC60YPQvdC00YvQvSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDRgdC10LrRg9C90LQnIDogJyDRgdC10LrRg9C90LTRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINC80LjQvdGD0YInIDogJyDQvNC40L3Rg9GC0YvQvScpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDRhtCw0LMnIDogJyDRhtCw0LPQuNC50L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg06nQtNOp0YAnIDogJyDTqdC00YDQuNC50L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0YHQsNGAJyA6ICcg0YHQsNGA0YvQvScpO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDQttC40LsnIDogJyDQttC40LvQuNC50L0nKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21uJywge1xuICAgICAgICBtb250aHM6ICfQndGN0LPQtNKv0LPRjdGN0YAg0YHQsNGAX9Cl0L7RkdGA0LTRg9Cz0LDQsNGAINGB0LDRgF/Qk9GD0YDQsNCy0LTRg9Cz0LDQsNGAINGB0LDRgF/QlNOp0YDTqdCy0LTSr9Cz0Y3RjdGAINGB0LDRgF/QotCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CX0YPRgNCz0LDQtNGD0LPQsNCw0YAg0YHQsNGAX9CU0L7Qu9C00YPQs9Cw0LDRgCDRgdCw0YBf0J3QsNC50LzQtNGD0LPQsNCw0YAg0YHQsNGAX9CV0YHQtNKv0LPRjdGN0YAg0YHQsNGAX9CQ0YDQsNCy0LTRg9Cz0LDQsNGAINGB0LDRgF/QkNGA0LLQsNC9INC90Y3Qs9C00q/Qs9GN0Y3RgCDRgdCw0YBf0JDRgNCy0LDQvSDRhdC+0ZHRgNC00YPQs9Cw0LDRgCDRgdCw0YAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJzEg0YHQsNGAXzIg0YHQsNGAXzMg0YHQsNGAXzQg0YHQsNGAXzUg0YHQsNGAXzYg0YHQsNGAXzcg0YHQsNGAXzgg0YHQsNGAXzkg0YHQsNGAXzEwINGB0LDRgF8xMSDRgdCw0YBfMTIg0YHQsNGAJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn0J3Rj9C8X9CU0LDQstCw0LBf0JzRj9Cz0LzQsNGAX9Cb0YXQsNCz0LLQsF/Qn9Kv0YDRjdCyX9CR0LDQsNGB0LDQvV/QkdGP0LzQsdCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0J3Rj9C8X9CU0LDQsl/QnNGP0LNf0JvRhdCwX9Cf0q/RgF/QkdCw0LBf0JHRj9C8Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9Cd0Y9f0JTQsF/QnNGPX9Cb0YVf0J/Sr1/QkdCwX9CR0Y8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZINC+0L3RiyBNTU1N0YvQvSBEJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkg0L7QvdGLIE1NTU3Ri9C9IEQgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIFlZWVkg0L7QvdGLIE1NTU3Ri9C9IEQgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0q7TqHzSrtClL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn0q7QpSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfSrtOoJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfSrtClJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb06jQvdOp06nQtNOp0YBdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0JzQsNGA0LPQsNCw0YhdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW9CY0YDRjdGFXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb06jRh9C40LPQtNOp0YBdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9Oo0L3Qs9Op0YDRgdOp0L1dIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDQtNCw0YDQsNCwJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDTqdC80L3TqScsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSDTqdC006nRgC8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDTqdC006nRgCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYXJhdGhpIFttcl1cbi8vISBhdXRob3IgOiBIYXJzaGFkIEthbGUgOiBodHRwczovL2dpdGh1Yi5jb20va2FsZWh2XG4vLyEgYXV0aG9yIDogVml2ZWsgQXRoYWx5ZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS92bmF0aGFseWVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4KWnJyxcbiAgICAgICAgICAgIDI6ICfgpagnLFxuICAgICAgICAgICAgMzogJ+ClqScsXG4gICAgICAgICAgICA0OiAn4KWqJyxcbiAgICAgICAgICAgIDU6ICfgpasnLFxuICAgICAgICAgICAgNjogJ+ClrCcsXG4gICAgICAgICAgICA3OiAn4KWtJyxcbiAgICAgICAgICAgIDg6ICfgpa4nLFxuICAgICAgICAgICAgOTogJ+ClrycsXG4gICAgICAgICAgICAwOiAn4KWmJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Clpyc6ICcxJyxcbiAgICAgICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICAgICAn4KWpJzogJzMnLFxuICAgICAgICAgICAgJ+Clqic6ICc0JyxcbiAgICAgICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICAgICAn4KWsJzogJzYnLFxuICAgICAgICAgICAgJ+ClrSc6ICc3JyxcbiAgICAgICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICAgICAn4KWvJzogJzknLFxuICAgICAgICAgICAgJ+Clpic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZU1yKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkuOClh+CkleCkguCkpic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSVIOCkruCkv+CkqOCkv+Cknyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkruCkv+CkqOCkv+Ckn+Clhyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSVIOCkpOCkvuCkuCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkpOCkvuCkuCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSVIOCkpuCkv+CkteCkuCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkpuCkv+CkteCkuCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSVIOCkruCkueCkv+CkqOCkvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkruCkueCkv+CkqOClhyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSVIOCkteCksOCljeCktyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkteCksOCljeCkt+Clhyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+CkleCkvuCkueClgCDgpLjgpYfgpJXgpILgpKbgpL7gpIInO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpLjgpYfgpJXgpILgpKbgpL7gpIInO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CkleCkviDgpK7gpL/gpKjgpL/gpJ/gpL4nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpK7gpL/gpKjgpL/gpJ/gpL7gpIInO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CkleCkviDgpKTgpL7gpLjgpL4nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpKTgpL7gpLjgpL7gpIInO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CkleCkviDgpKbgpL/gpLXgpLjgpL4nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpKbgpL/gpLXgpLjgpL7gpIInO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CkleCkviDgpK7gpLngpL/gpKjgpY3gpK/gpL4nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpK7gpLngpL/gpKjgpY3gpK/gpL7gpIInO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CkleCkviDgpLXgpLDgpY3gpLfgpL4nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpLXgpLDgpY3gpLfgpL7gpIInO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIG1yID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXInLCB7XG4gICAgICAgIG1vbnRoczogJ+CknOCkvuCkqOClh+CkteCkvuCksOClgF/gpKvgpYfgpKzgpY3gpLDgpYHgpLXgpL7gpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+Ckj+CkquCljeCksOCkv+Cksl/gpK7gpYdf4KSc4KWC4KSoX+CknOClgeCksuCliF/gpJHgpJfgpLjgpY3gpJ9f4KS44KSq4KWN4KSf4KWH4KSC4KSs4KSwX+CkkeCkleCljeCkn+Cli+CkrOCksF/gpKjgpYvgpLXgpY3gpLngpYfgpILgpKzgpLBf4KSh4KS/4KS44KWH4KSC4KSs4KSwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgpJzgpL7gpKjgpYcuX+Ckq+Clh+CkrOCljeCksOClgS5f4KSu4KS+4KSw4KWN4KSaLl/gpI/gpKrgpY3gpLDgpL8uX+CkruClhy5f4KSc4KWC4KSoLl/gpJzgpYHgpLLgpYguX+CkkeCkly5f4KS44KSq4KWN4KSf4KWH4KSCLl/gpJHgpJXgpY3gpJ/gpYsuX+CkqOCli+CkteCljeCkueClh+Ckgi5f4KSh4KS/4KS44KWH4KSCLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSz4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CksOCkteCkv1/gpLjgpYvgpK5f4KSu4KSC4KSX4KSzX+CkrOClgeCkp1/gpJfgpYHgpLDgpYJf4KS24KWB4KSV4KWN4KSwX+CktuCkqOCkvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgpLBf4KS44KWLX+CkruCkgl/gpKzgpYFf4KSX4KWBX+CktuClgV/gpLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CkhuCknF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpIngpKbgpY3gpK/gpL5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgpJXgpL7gpLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CkruCkvuCkl+ClgOCksl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+CkruCkp+CljeCkr+ClhycsXG4gICAgICAgICAgICBwYXN0OiAnJXPgpKrgpYLgpLDgpY3gpLXgpYAnLFxuICAgICAgICAgICAgczogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBzczogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGg6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgZDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBNOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIHk6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4KSq4KS54KS+4KSf4KWHfOCkuOCkleCkvuCks+ClgHzgpKbgpYHgpKrgpL7gpLDgpYB84KS44KS+4KSv4KSC4KSV4KS+4KSz4KWAfOCksOCkvuCkpOCljeCksOClgC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CkquCkueCkvuCkn+ClhycgfHwgbWVyaWRpZW0gPT09ICfgpLjgpJXgpL7gpLPgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4KSm4KWB4KSq4KS+4KSw4KWAJyB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4KS44KS+4KSv4KSC4KSV4KS+4KSz4KWAJyB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4KSw4KS+4KSk4KWN4KSw4KWAJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPj0gMCAmJiBob3VyIDwgNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSq4KS54KS+4KSf4KWHJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpJXgpL7gpLPgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuClgeCkquCkvuCksOClgCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSv4KSC4KSV4KS+4KSz4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpY3gpLDgpYAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFsYXkgW21zXVxuLy8hIGF1dGhvciA6IFdlbGRhbiBKYW1pbGkgOiBodHRwczovL2dpdGh1Yi5jb20vd2VsZGFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcycsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyaV9GZWJydWFyaV9NYWNfQXByaWxfTWVpX0p1bl9KdWxhaV9PZ29zX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rpc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0FoYWRfSXNuaW5fU2VsYXNhX1JhYnVfS2hhbWlzX0p1bWFhdF9TYWJ0dScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0FoZF9Jc25fU2VsX1JhYl9LaGFfSnVtX1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAndGVuZ2FoYXJpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0ZW5nYWhhcmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwZXRhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRXNvayBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tLZWxtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtsZXBhcyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgeWFuZyBsZXBhcycsXG4gICAgICAgICAgICBzOiAnYmViZXJhcGEgc2FhdCcsXG4gICAgICAgICAgICBzczogJyVkIHNhYXQnLFxuICAgICAgICAgICAgbTogJ3NlbWluaXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW5pdCcsXG4gICAgICAgICAgICBoOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGg6ICclZCBqYW0nLFxuICAgICAgICAgICAgZDogJ3NlaGFyaScsXG4gICAgICAgICAgICBkZDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTTogJ3NlYnVsYW4nLFxuICAgICAgICAgICAgTU06ICclZCBidWxhbicsXG4gICAgICAgICAgICB5OiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eTogJyVkIHRhaHVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1zO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGF5IFttcy1teV1cbi8vISBub3RlIDogREVQUkVDQVRFRCwgdGhlIGNvcnJlY3Qgb25lIGlzIFttc11cbi8vISBhdXRob3IgOiBXZWxkYW4gSmFtaWxpIDogaHR0cHM6Ly9naXRodWIuY29tL3dlbGRhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1zTXkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcy1teScsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyaV9GZWJydWFyaV9NYWNfQXByaWxfTWVpX0p1bl9KdWxhaV9PZ29zX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rpc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0FoYWRfSXNuaW5fU2VsYXNhX1JhYnVfS2hhbWlzX0p1bWFhdF9TYWJ0dScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0FoZF9Jc25fU2VsX1JhYl9LaGFfSnVtX1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAndGVuZ2FoYXJpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0ZW5nYWhhcmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwZXRhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRXNvayBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tLZWxtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtsZXBhcyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgeWFuZyBsZXBhcycsXG4gICAgICAgICAgICBzOiAnYmViZXJhcGEgc2FhdCcsXG4gICAgICAgICAgICBzczogJyVkIHNhYXQnLFxuICAgICAgICAgICAgbTogJ3NlbWluaXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW5pdCcsXG4gICAgICAgICAgICBoOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGg6ICclZCBqYW0nLFxuICAgICAgICAgICAgZDogJ3NlaGFyaScsXG4gICAgICAgICAgICBkZDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTTogJ3NlYnVsYW4nLFxuICAgICAgICAgICAgTU06ICclZCBidWxhbicsXG4gICAgICAgICAgICB5OiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eTogJyVkIHRhaHVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1zTXk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFsdGVzZSAoTWFsdGEpIFttdF1cbi8vISBhdXRob3IgOiBBbGVzc2FuZHJvIE1hcnVjY2lhIDogaHR0cHM6Ly9naXRodWIuY29tL2FsZXNtYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG10ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXQnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbm5hcl9GcmFyX01hcnp1X0FwcmlsX01lamp1X8SgdW5qdV9MdWxqdV9Bd3dpc3N1X1NldHRlbWJydV9PdHR1YnJ1X05vdmVtYnJ1X0RpxItlbWJydScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRnJhX01hcl9BcHJfTWVqX8SgdW5fTHVsX0F3d19TZXRfT3R0X05vdl9EacSLJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdJbC3EpmFkZF9JdC1UbmVqbl9JdC1UbGlldGFfTC1FcmJnxKdhX0lsLcSmYW1pc19JbC3EoGltZ8SnYV9Jcy1TaWJ0Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfEpmFkX1RuZV9UbGlfRXJiX8SmYW1fxKBpbV9TaWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnxKZhX1RuX1RsX0VyX8SmYV/EoGlfU2knLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSWxsdW0gZmlsLV1MVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0fEp2FkYSBmaWwtXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbZmlsLV1MVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0lsLWJpZXJhxKcgZmlsLV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2xpIGfEp2FkZGFdIFtmaWwtXUxUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZuKAmSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgaWx1JyxcbiAgICAgICAgICAgIHM6ICdmdGl0IHNla29uZGknLFxuICAgICAgICAgICAgc3M6ICclZCBzZWtvbmRpJyxcbiAgICAgICAgICAgIG06ICdtaW51dGEnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaDogJ3NpZWfEp2EnLFxuICAgICAgICAgICAgaGg6ICclZCBzaWVnxKdhdCcsXG4gICAgICAgICAgICBkOiAnxKF1cm5hdGEnLFxuICAgICAgICAgICAgZGQ6ICclZCDEoXJhbmV0JyxcbiAgICAgICAgICAgIE06ICd4YWhhcicsXG4gICAgICAgICAgICBNTTogJyVkIHhodXInLFxuICAgICAgICAgICAgeTogJ3NlbmEnLFxuICAgICAgICAgICAgeXk6ICclZCBzbmknLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG10O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJ1cm1lc2UgW215XVxuLy8hIGF1dGhvciA6IFNxdWFyIHRlYW0sIG15c3F1YXIuY29tXG4vLyEgYXV0aG9yIDogRGF2aWQgUm9zc2VsbGF0IDogaHR0cHM6Ly9naXRodWIuY29tL2dob2xhZHJcbi8vISBhdXRob3IgOiBUaW4gQXVuZyBMaW4gOiBodHRwczovL2dpdGh1Yi5jb20vdGhhbnlhd3ppbm1pblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfhgYEnLFxuICAgICAgICAgICAgMjogJ+GBgicsXG4gICAgICAgICAgICAzOiAn4YGDJyxcbiAgICAgICAgICAgIDQ6ICfhgYQnLFxuICAgICAgICAgICAgNTogJ+GBhScsXG4gICAgICAgICAgICA2OiAn4YGGJyxcbiAgICAgICAgICAgIDc6ICfhgYcnLFxuICAgICAgICAgICAgODogJ+GBiCcsXG4gICAgICAgICAgICA5OiAn4YGJJyxcbiAgICAgICAgICAgIDA6ICfhgYAnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4YGBJzogJzEnLFxuICAgICAgICAgICAgJ+GBgic6ICcyJyxcbiAgICAgICAgICAgICfhgYMnOiAnMycsXG4gICAgICAgICAgICAn4YGEJzogJzQnLFxuICAgICAgICAgICAgJ+GBhSc6ICc1JyxcbiAgICAgICAgICAgICfhgYYnOiAnNicsXG4gICAgICAgICAgICAn4YGHJzogJzcnLFxuICAgICAgICAgICAgJ+GBiCc6ICc4JyxcbiAgICAgICAgICAgICfhgYknOiAnOScsXG4gICAgICAgICAgICAn4YGAJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIG15ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXknLCB7XG4gICAgICAgIG1vbnRoczogJ+GAh+GAlOGAuuGAlOGAneGAq+GAm+GArl/hgJbhgLHhgJbhgLHhgKzhgLrhgJ3hgKvhgJvhgK5f4YCZ4YCQ4YC6X+GAp+GAleGAvOGArl/hgJnhgLFf4YCH4YC94YCU4YC6X+GAh+GAsOGAnOGAreGAr+GAhOGAul/hgJ7hgLzhgILhgK/hgJDhgLpf4YCF4YCA4YC64YCQ4YCE4YC64YCY4YCsX+GAoeGAseGArOGAgOGAuuGAkOGAreGAr+GAmOGArF/hgJThgK3hgK/hgJ3hgIThgLrhgJjhgKxf4YCS4YCu4YCH4YCE4YC64YCY4YCsJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+GAh+GAlOGAul/hgJbhgLFf4YCZ4YCQ4YC6X+GAleGAvOGArl/hgJnhgLFf4YCH4YC94YCU4YC6X+GAnOGAreGAr+GAhOGAul/hgJ7hgLxf4YCF4YCA4YC6X+GAoeGAseGArOGAgOGAul/hgJThgK3hgK9f4YCS4YCuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ+GAkOGAlOGAhOGAuuGAueGAguGAlOGAveGAsV/hgJDhgJThgIThgLrhgLnhgJzhgKxf4YCh4YCE4YC64YC54YCC4YCrX+GAl+GAr+GAkuGAueGAk+GAn+GAsOGAuF/hgIDhgLzhgKzhgJ7hgJXhgJDhgLHhgLhf4YCe4YCx4YCs4YCA4YC84YCsX+GAheGAlOGAsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+GAlOGAveGAsV/hgJzhgKxf4YCC4YCrX+GAn+GAsOGAuF/hgIDhgLzhgKxf4YCe4YCx4YCsX+GAlOGAsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfhgJThgL3hgLFf4YCc4YCsX+GAguGAq1/hgJ/hgLDhgLhf4YCA4YC84YCsX+GAnuGAseGArF/hgJThgLEnLnNwbGl0KCdfJyksXG5cbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+GAmuGAlOGAsS5dIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4YCZ4YCU4YCA4YC64YCW4YC84YCU4YC6XSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1vhgJnhgJThgLEu4YCAXSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vhgJXhgLzhgK7hgLjhgIHhgLLhgLfhgJ7hgLHhgKxdIGRkZGQgTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfhgJzhgKzhgJnhgIrhgLrhgLcgJXMg4YCZ4YC+4YCsJyxcbiAgICAgICAgICAgIHBhc3Q6ICfhgJzhgL3hgJThgLrhgIHhgLLhgLfhgJ7hgLHhgKwgJXMg4YCAJyxcbiAgICAgICAgICAgIHM6ICfhgIXhgIDhgLnhgIDhgJThgLou4YCh4YCU4YCK4YC64YC44YCE4YCa4YC6JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4YCF4YCA4YC54YCA4YCU4YC34YC6JyxcbiAgICAgICAgICAgIG06ICfhgJDhgIXhgLrhgJnhgK3hgJThgIXhgLonLFxuICAgICAgICAgICAgbW06ICclZCDhgJnhgK3hgJThgIXhgLonLFxuICAgICAgICAgICAgaDogJ+GAkOGAheGAuuGAlOGArOGAm+GAricsXG4gICAgICAgICAgICBoaDogJyVkIOGAlOGArOGAm+GAricsXG4gICAgICAgICAgICBkOiAn4YCQ4YCF4YC64YCb4YCA4YC6JyxcbiAgICAgICAgICAgIGRkOiAnJWQg4YCb4YCA4YC6JyxcbiAgICAgICAgICAgIE06ICfhgJDhgIXhgLrhgJwnLFxuICAgICAgICAgICAgTU06ICclZCDhgJwnLFxuICAgICAgICAgICAgeTogJ+GAkOGAheGAuuGAlOGAvuGAheGAuicsXG4gICAgICAgICAgICB5eTogJyVkIOGAlOGAvuGAheGAuicsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vhgYHhgYLhgYPhgYThgYXhgYbhgYfhgYjhgYnhgYBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBteTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOb3J3ZWdpYW4gQm9rbcOlbCBbbmJdXG4vLyEgYXV0aG9ycyA6IEVzcGVuIEhvdmxhbmRzZGFsIDogaHR0cHM6Ly9naXRodWIuY29tL3JleHhhcnNcbi8vISAgICAgICAgICAgU2lndXJkIEdhcnRtYW5uIDogaHR0cHM6Ly9naXRodWIuY29tL3NpZ3VyZGdhXG4vLyEgICAgICAgICAgIFN0ZXBoZW4gUmFtdGh1biA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdGVwaGVucmFtdGh1blxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG5iID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmInLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbi5fZmViLl9tYXJzX2Fwci5fbWFpX2p1bmlfanVsaV9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnc8O4bmRhZ19tYW5kYWdfdGlyc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO4cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3PDuC5fbWEuX3RpLl9vbi5fdG8uX2ZyLl9sw7guJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3PDuF9tYV90aV9vbl90b19mcl9sw7gnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2kgZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tpIG1vcmdlbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2kgZ8OlciBrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2ZvcnJpZ2VdIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgc2lkZW4nLFxuICAgICAgICAgICAgczogJ25vZW4gc2VrdW5kZXInLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRlcicsXG4gICAgICAgICAgICBtOiAnZXR0IG1pbnV0dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0dGVyJyxcbiAgICAgICAgICAgIGg6ICfDqW4gdGltZScsXG4gICAgICAgICAgICBoaDogJyVkIHRpbWVyJyxcbiAgICAgICAgICAgIGQ6ICfDqW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnZXInLFxuICAgICAgICAgICAgdzogJ8OpbiB1a2UnLFxuICAgICAgICAgICAgd3c6ICclZCB1a2VyJyxcbiAgICAgICAgICAgIE06ICfDqW4gbcOlbmVkJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICAgICAgeTogJ2V0dCDDpXInLFxuICAgICAgICAgICAgeXk6ICclZCDDpXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5iO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE5lcGFsZXNlIFtuZV1cbi8vISBhdXRob3IgOiBzdXZhc2ggOiBodHRwczovL2dpdGh1Yi5jb20vc3V2YXNoXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+ClpycsXG4gICAgICAgICAgICAyOiAn4KWoJyxcbiAgICAgICAgICAgIDM6ICfgpaknLFxuICAgICAgICAgICAgNDogJ+ClqicsXG4gICAgICAgICAgICA1OiAn4KWrJyxcbiAgICAgICAgICAgIDY6ICfgpawnLFxuICAgICAgICAgICAgNzogJ+ClrScsXG4gICAgICAgICAgICA4OiAn4KWuJyxcbiAgICAgICAgICAgIDk6ICfgpa8nLFxuICAgICAgICAgICAgMDogJ+ClpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICAgICAn4KWoJzogJzInLFxuICAgICAgICAgICAgJ+ClqSc6ICczJyxcbiAgICAgICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICAgICAn4KWrJzogJzUnLFxuICAgICAgICAgICAgJ+ClrCc6ICc2JyxcbiAgICAgICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICAgICAn4KWuJzogJzgnLFxuICAgICAgICAgICAgJ+Clryc6ICc5JyxcbiAgICAgICAgICAgICfgpaYnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgbmUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCduZScsIHtcbiAgICAgICAgbW9udGhzOiAn4KSc4KSo4KS14KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KS/4KSyX+CkruCkiF/gpJzgpYHgpKhf4KSc4KWB4KSy4KS+4KSIX+CkheCkl+Ckt+CljeCkn1/gpLjgpYfgpKrgpY3gpJ/gpYfgpK7gpY3gpKzgpLBf4KSF4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkreClh+CkruCljeCkrOCksF/gpKHgpL/gpLjgpYfgpK7gpY3gpKzgpLAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CknOCkqC5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KS/Ll/gpK7gpIhf4KSc4KWB4KSoX+CknOClgeCksuCkvuCkiC5f4KSF4KSXLl/gpLjgpYfgpKrgpY3gpJ8uX+CkheCkleCljeCkn+Cliy5f4KSo4KWL4KSt4KWHLl/gpKHgpL/gpLjgpYcuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4KSG4KSH4KSk4KSs4KS+4KSwX+CkuOCli+CkruCkrOCkvuCksF/gpK7gpJngpY3gpJfgpLLgpKzgpL7gpLBf4KSs4KWB4KSn4KSs4KS+4KSwX+CkrOCkv+CkueCkv+CkrOCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpKzgpL7gpLBf4KS24KSo4KS/4KSs4KS+4KSwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KSG4KSH4KSkLl/gpLjgpYvgpK4uX+CkruCkmeCljeCkl+Cksi5f4KSs4KWB4KSnLl/gpKzgpL/gpLngpL8uX+CktuClgeCkleCljeCksC5f4KS24KSo4KS/Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgpIYuX+CkuOCliy5f4KSu4KSCLl/gpKzgpYEuX+CkrOCkvy5f4KS24KWBLl/gpLYuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0HgpJXgpYsgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTFRTOiAnQeCkleCliyBoOm1tOnNzIOCkrOCknOClhycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhycsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpL984KSs4KS/4KS54KS+4KSofOCkpuCkv+CkieCkgeCkuOCli3zgpLjgpL7gpIHgpJ0vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpL8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKzgpL/gpLngpL7gpKgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KS/4KSJ4KSB4KS44KWLJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpL7gpIHgpJ0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKzgpL/gpLngpL7gpKgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuCkv+CkieCkgeCkuOCliyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSB4KSdJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KSt4KWL4KSy4KS/XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vgpIbgpIngpIHgpKbgpYtdIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgpLngpL/gpJzgpYtdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+Ckl+Ckj+CkleCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4KSu4KS+JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgpIXgpJfgpL7gpKHgpL8nLFxuICAgICAgICAgICAgczogJ+CkleClh+CkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICAgICAgc3M6ICclZCDgpLjgpYfgpJXgpYfgpKPgpY3gpKEnLFxuICAgICAgICAgICAgbTogJ+Ckj+CklSDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICAgICAgbW06ICclZCDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICAgICAgaDogJ+Ckj+CklSDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICAgICAgaGg6ICclZCDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICAgICAgZDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgTTogJ+Ckj+CklSDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICAgICAgTU06ICclZCDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICAgICAgeTogJ+Ckj+CklSDgpKzgpLDgpY3gpLcnLFxuICAgICAgICAgICAgeXk6ICclZCDgpKzgpLDgpY3gpLcnLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRHV0Y2ggW25sXVxuLy8hIGF1dGhvciA6IEpvcmlzIFLDtmxpbmcgOiBodHRwczovL2dpdGh1Yi5jb20vam9yaXNyb2xpbmdcbi8vISBhdXRob3IgOiBKYWNvYiBNaWRkYWcgOiBodHRwczovL2dpdGh1Yi5jb20vbWlkZGFnalxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPVxuICAgICAgICAgICAgJ2phbi5fZmViLl9tcnQuX2Fwci5fbWVpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPVxuICAgICAgICAgICAgJ2phbl9mZWJfbXJ0X2Fwcl9tZWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eamFuL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL14obWFhcnR8bXJ0XFwuPykkL2ksXG4gICAgICAgICAgICAvXmFwci9pLFxuICAgICAgICAgICAgL15tZWkkL2ksXG4gICAgICAgICAgICAvXmp1bltpLl0/JC9pLFxuICAgICAgICAgICAgL15qdWxbaS5dPyQvaSxcbiAgICAgICAgICAgIC9eYXVnL2ksXG4gICAgICAgICAgICAvXnNlcC9pLFxuICAgICAgICAgICAgL15va3QvaSxcbiAgICAgICAgICAgIC9ebm92L2ksXG4gICAgICAgICAgICAvXmRlYy9pLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7XG5cbiAgICB2YXIgbmwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubCcsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyaV9mZWJydWFyaV9tYWFydF9hcHJpbF9tZWlfanVuaV9qdWxpX2F1Z3VzdHVzX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8YXByaWx8bWVpfGp1W25sXWl8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxcblxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ3pvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICd6by5fbWEuX2RpLl93by5fZG8uX3ZyLl96YS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnem9fbWFfZGlfd29fZG9fdnJfemEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW3ZhbmRhYWcgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dpc3RlcmVuIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1thZmdlbG9wZW5dIGRkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ292ZXIgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGdlbGVkZW4nLFxuICAgICAgICAgICAgczogJ2VlbiBwYWFyIHNlY29uZGVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kZW4nLFxuICAgICAgICAgICAgbTogJ8Opw6luIG1pbnV1dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogJ8Opw6luIHV1cicsXG4gICAgICAgICAgICBoaDogJyVkIHV1cicsXG4gICAgICAgICAgICBkOiAnw6nDqW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgdzogJ8Opw6luIHdlZWsnLFxuICAgICAgICAgICAgd3c6ICclZCB3ZWtlbicsXG4gICAgICAgICAgICBNOiAnw6nDqW4gbWFhbmQnLFxuICAgICAgICAgICAgTU06ICclZCBtYWFuZGVuJyxcbiAgICAgICAgICAgIHk6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgamFhcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCA/ICdzdGUnIDogJ2RlJylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBubDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBEdXRjaCAoQmVsZ2l1bSkgW25sLWJlXVxuLy8hIGF1dGhvciA6IEpvcmlzIFLDtmxpbmcgOiBodHRwczovL2dpdGh1Yi5jb20vam9yaXNyb2xpbmdcbi8vISBhdXRob3IgOiBKYWNvYiBNaWRkYWcgOiBodHRwczovL2dpdGh1Yi5jb20vbWlkZGFnalxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPVxuICAgICAgICAgICAgJ2phbi5fZmViLl9tcnQuX2Fwci5fbWVpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPVxuICAgICAgICAgICAgJ2phbl9mZWJfbXJ0X2Fwcl9tZWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eamFuL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL14obWFhcnR8bXJ0XFwuPykkL2ksXG4gICAgICAgICAgICAvXmFwci9pLFxuICAgICAgICAgICAgL15tZWkkL2ksXG4gICAgICAgICAgICAvXmp1bltpLl0/JC9pLFxuICAgICAgICAgICAgL15qdWxbaS5dPyQvaSxcbiAgICAgICAgICAgIC9eYXVnL2ksXG4gICAgICAgICAgICAvXnNlcC9pLFxuICAgICAgICAgICAgL15va3QvaSxcbiAgICAgICAgICAgIC9ebm92L2ksXG4gICAgICAgICAgICAvXmRlYy9pLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7XG5cbiAgICB2YXIgbmxCZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25sLWJlJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJpX2ZlYnJ1YXJpX21hYXJ0X2FwcmlsX21laV9qdW5pX2p1bGlfYXVndXN0dXNfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98bWVpfGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pLFxuXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnem9uZGFnX21hYW5kYWdfZGluc2RhZ193b2Vuc2RhZ19kb25kZXJkYWdfdnJpamRhZ196YXRlcmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3pvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICd6b19tYV9kaV93b19kb192cl96YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdmFuZGFhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2lzdGVyZW4gb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2FmZ2Vsb3Blbl0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb3ZlciAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgZ2VsZWRlbicsXG4gICAgICAgICAgICBzOiAnZWVuIHBhYXIgc2Vjb25kZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRlbicsXG4gICAgICAgICAgICBtOiAnw6nDqW4gbWludXV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoOiAnw6nDqW4gdXVyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdXVyJyxcbiAgICAgICAgICAgIGQ6ICfDqcOpbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdlbicsXG4gICAgICAgICAgICBNOiAnw6nDqW4gbWFhbmQnLFxuICAgICAgICAgICAgTU06ICclZCBtYWFuZGVuJyxcbiAgICAgICAgICAgIHk6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgamFhcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCA/ICdzdGUnIDogJ2RlJylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBubEJlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE55bm9yc2sgW25uXVxuLy8hIGF1dGhvcnMgOiBodHRwczovL2dpdGh1Yi5jb20vbWVjaHV3aW5kXG4vLyEgICAgICAgICAgIFN0ZXBoZW4gUmFtdGh1biA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdGVwaGVucmFtdGh1blxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG5uID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbm4nLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbi5fZmViLl9tYXJzX2Fwci5fbWFpX2p1bmlfanVsaV9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnc3VuZGFnX23DpW5kYWdfdHlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sYXVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc3UuX23DpS5fdHkuX29uLl90by5fZnIuX2xhdS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc3VfbcOlX3R5X29uX3RvX2ZyX2xhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0kgZGFnIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tJIG1vcmdvbiBrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2xva2thXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0kgZ8OlciBrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0bDuHJlZ8OlYW5kZV0gZGRkZCBba2xva2thXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBzaWRhbicsXG4gICAgICAgICAgICBzOiAnbm9rcmUgc2VrdW5kJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kJyxcbiAgICAgICAgICAgIG06ICdlaXQgbWludXR0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXR0JyxcbiAgICAgICAgICAgIGg6ICdlaW4gdGltZScsXG4gICAgICAgICAgICBoaDogJyVkIHRpbWFyJyxcbiAgICAgICAgICAgIGQ6ICdlaW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgdzogJ2VpIHZla2UnLFxuICAgICAgICAgICAgd3c6ICclZCB2ZWtlcicsXG4gICAgICAgICAgICBNOiAnZWluIG3DpW5hZCcsXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5hZGVyJyxcbiAgICAgICAgICAgIHk6ICdlaXQgw6VyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw6VyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBubjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBPY2NpdGFuLCBsZW5nYWRvY2lhbiBkaWFsZWN0ZSBbb2MtbG5jXVxuLy8hIGF1dGhvciA6IFF1ZW50aW4gUEFHw4hTIDogaHR0cHM6Ly9naXRodWIuY29tL1F1ZW50eTMxXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgb2NMbmMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdvYy1sbmMnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAnZ2VuacOocl9mZWJyacOocl9tYXLDp19hYnJpbF9tYWlfanVuaF9qdWxoZXRfYWdvc3Rfc2V0ZW1icmVfb2N0w7JicmVfbm92ZW1icmVfZGVjZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiBcImRlIGdlbmnDqHJfZGUgZmVicmnDqHJfZGUgbWFyw6dfZCdhYnJpbF9kZSBtYWlfZGUganVuaF9kZSBqdWxoZXRfZCdhZ29zdF9kZSBzZXRlbWJyZV9kJ29jdMOyYnJlX2RlIG5vdmVtYnJlX2RlIGRlY2VtYnJlXCIuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9EW29EXT8oXFxzKStNTU1NLyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnZ2VuLl9mZWJyLl9tYXLDp19hYnIuX21haV9qdW5oX2p1bGguX2Fnby5fc2V0Ll9vY3QuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2RpbWVuZ2VfZGlsdW5zX2RpbWFyc19kaW3DqGNyZXNfZGlqw7J1c19kaXZlbmRyZXNfZGlzc2FidGUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkZy5fZGwuX2RtLl9kYy5fZGouX2R2Ll9kcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZGdfZGxfZG1fZGNfZGpfZHZfZHMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBsbDogJ0QgTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFtkZV0gWVlZWSBbYV0gSDptbScsXG4gICAgICAgICAgICBsbGw6ICdEIE1NTSBZWVlZLCBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBbZGVdIFlZWVkgW2FdIEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCBEIE1NTSBZWVlZLCBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdcOoaSBhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2RlbWFuIGFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpw6hyIGFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbcGFzc2F0IGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiBcImQnYXF1w60gJXNcIixcbiAgICAgICAgICAgIHBhc3Q6ICdmYSAlcycsXG4gICAgICAgICAgICBzOiAndW5hcyBzZWdvbmRhcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ29uZGFzJyxcbiAgICAgICAgICAgIG06ICd1bmEgbWludXRhJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRhcycsXG4gICAgICAgICAgICBoOiAndW5hIG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VuIGpvcm4nLFxuICAgICAgICAgICAgZGQ6ICclZCBqb3JucycsXG4gICAgICAgICAgICBNOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHJ8bnx0fMOofGEpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICBudW1iZXIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgPyAncidcbiAgICAgICAgICAgICAgICAgICAgOiBudW1iZXIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICA/ICduJ1xuICAgICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBudW1iZXIgPT09IDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAndCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnw6gnO1xuICAgICAgICAgICAgaWYgKHBlcmlvZCA9PT0gJ3cnIHx8IHBlcmlvZCA9PT0gJ1cnKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gJ2EnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBvY0xuYztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQdW5qYWJpIChJbmRpYSkgW3BhLWluXVxuLy8hIGF1dGhvciA6IEhhcnByZWV0IFNpbmdoIDogaHR0cHM6Ly9naXRodWIuY29tL2hhcnByZWV0a2hhbHNhZ3RiaXRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4KmnJyxcbiAgICAgICAgICAgIDI6ICfgqagnLFxuICAgICAgICAgICAgMzogJ+CpqScsXG4gICAgICAgICAgICA0OiAn4KmqJyxcbiAgICAgICAgICAgIDU6ICfgqasnLFxuICAgICAgICAgICAgNjogJ+CprCcsXG4gICAgICAgICAgICA3OiAn4KmtJyxcbiAgICAgICAgICAgIDg6ICfgqa4nLFxuICAgICAgICAgICAgOTogJ+CprycsXG4gICAgICAgICAgICAwOiAn4KmmJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Cppyc6ICcxJyxcbiAgICAgICAgICAgICfgqagnOiAnMicsXG4gICAgICAgICAgICAn4KmpJzogJzMnLFxuICAgICAgICAgICAgJ+Cpqic6ICc0JyxcbiAgICAgICAgICAgICfgqasnOiAnNScsXG4gICAgICAgICAgICAn4KmsJzogJzYnLFxuICAgICAgICAgICAgJ+CprSc6ICc3JyxcbiAgICAgICAgICAgICfgqa4nOiAnOCcsXG4gICAgICAgICAgICAn4KmvJzogJzknLFxuICAgICAgICAgICAgJ+Cppic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBwYUluID0gbW9tZW50LmRlZmluZUxvY2FsZSgncGEtaW4nLCB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBtb250aHMgbmFtZSBhcyBwZXIgTmFuYWtzaGFoaSBDYWxlbmRhciBidXQgdGhleSBhcmUgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gUHVuamFiaS5cbiAgICAgICAgbW9udGhzOiAn4Kic4Kio4Ki14Kiw4KmAX+Coq+CovOCosOCoteCosOCpgF/gqK7gqL7gqLDgqJpf4KiF4Kiq4KmN4Kiw4KmI4KiyX+CoruCoiF/gqJzgqYLgqKhf4Kic4KmB4Kiy4Ki+4KiIX+CoheCol+CouOCopF/gqLjgqKTgqbDgqKzgqLBf4KiF4KiV4Kik4KmC4Kis4KiwX+CoqOCoteCpsOCorOCosF/gqKbgqLjgqbDgqKzgqLAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+ConOCoqOCoteCosOCpgF/gqKvgqLzgqLDgqLXgqLDgqYBf4Kiu4Ki+4Kiw4KiaX+CoheCoquCpjeCosOCpiOCosl/gqK7gqIhf4Kic4KmC4KioX+ConOCpgeCosuCovuCoiF/gqIXgqJfgqLjgqKRf4Ki44Kik4Kmw4Kis4KiwX+CoheColeCopOCpguCorOCosF/gqKjgqLXgqbDgqKzgqLBf4Kim4Ki44Kmw4Kis4KiwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn4KiQ4Kik4Ki14Ki+4KiwX+CouOCpi+CoruCoteCovuCosF/gqK7gqbDgqJfgqLLgqLXgqL7gqLBf4Kis4KmB4Kin4Ki14Ki+4KiwX+CoteCpgOCosOCoteCovuCosF/gqLjgqLzgqYHgqbHgqJXgqLDgqLXgqL7gqLBf4Ki44Ki84Kio4KmA4Kia4Kiw4Ki14Ki+4KiwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KiQ4KikX+CouOCpi+Corl/gqK7gqbDgqJfgqLJf4Kis4KmB4KinX+CoteCpgOCosF/gqLjgqLzgqYHgqJXgqLBf4Ki44Ki84Kio4KmAJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CokOCopF/gqLjgqYvgqK5f4Kiu4Kmw4KiX4KiyX+CorOCpgeCop1/gqLXgqYDgqLBf4Ki44Ki84KmB4KiV4KiwX+CouOCovOCoqOCpgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCoteConOCphycsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgqLXgqJzgqYcnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KiF4KicXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+ColeCosl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb4KiF4KiX4Kiy4Ki+XSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+ColeCosl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4Kiq4Ki/4Kib4Kiy4KmHXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCoteCov+CpseComicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4Kiq4Ki/4Kib4Kiy4KmHJyxcbiAgICAgICAgICAgIHM6ICfgqJXgqYHgqJ0g4Ki44KiV4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Ki44KiV4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIG06ICfgqIfgqJUg4Kiu4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Kiu4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIGg6ICfgqIfgqbHgqJUg4KiY4Kmw4Kif4Ki+JyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KiY4Kmw4Kif4KmHJyxcbiAgICAgICAgICAgIGQ6ICfgqIfgqbHgqJUg4Kim4Ki/4KioJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Kim4Ki/4KioJyxcbiAgICAgICAgICAgIE06ICfgqIfgqbHgqJUg4Kiu4Ki54KmA4Kio4Ki+JyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Kiu4Ki54KmA4Kio4KmHJyxcbiAgICAgICAgICAgIHk6ICfgqIfgqbHgqJUg4Ki44Ki+4KiyJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Ki44Ki+4KiyJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cpp+CpqOCpqeCpquCpq+CprOCpreCpruCpr+Cppl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUHVuamFiaSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBQdW5qYWJpLlxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Kiw4Ki+4KikfOCouOCoteCph+CosHzgqKbgqYHgqKrgqLngqL/gqLB84Ki44Ki84Ki+4KiuLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4Kiw4Ki+4KikJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ki44Ki14KmH4KiwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CopuCpgeCoquCoueCov+CosCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ki44Ki84Ki+4KiuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CosOCovuCopCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ki44Ki14KmH4KiwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqKbgqYHgqKrgqLngqL/gqLAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CouOCovOCovuCoric7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kiw4Ki+4KikJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhSW47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUG9saXNoIFtwbF1cbi8vISBhdXRob3IgOiBSYWZhbCBIaXJzeiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldm9MXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzTm9taW5hdGl2ZSA9XG4gICAgICAgICAgICAnc3R5Y3plxYRfbHV0eV9tYXJ6ZWNfa3dpZWNpZcWEX21hal9jemVyd2llY19saXBpZWNfc2llcnBpZcWEX3dyemVzaWXFhF9wYcW6ZHppZXJuaWtfbGlzdG9wYWRfZ3J1ZHppZcWEJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1N1YmplY3RpdmUgPVxuICAgICAgICAgICAgJ3N0eWN6bmlhX2x1dGVnb19tYXJjYV9rd2lldG5pYV9tYWphX2N6ZXJ3Y2FfbGlwY2Ffc2llcnBuaWFfd3J6ZcWbbmlhX3Bhxbpkemllcm5pa2FfbGlzdG9wYWRhX2dydWRuaWEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXnN0eS9pLFxuICAgICAgICAgICAgL15sdXQvaSxcbiAgICAgICAgICAgIC9ebWFyL2ksXG4gICAgICAgICAgICAvXmt3aS9pLFxuICAgICAgICAgICAgL15tYWovaSxcbiAgICAgICAgICAgIC9eY3plL2ksXG4gICAgICAgICAgICAvXmxpcC9pLFxuICAgICAgICAgICAgL15zaWUvaSxcbiAgICAgICAgICAgIC9ed3J6L2ksXG4gICAgICAgICAgICAvXnBhxbovaSxcbiAgICAgICAgICAgIC9ebGlzL2ksXG4gICAgICAgICAgICAvXmdydS9pLFxuICAgICAgICBdO1xuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiBuICUgMTAgPCA1ICYmIG4gJSAxMCA+IDEgJiYgfn4obiAvIDEwKSAlIDEwICE9PSAxO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Nla3VuZHknIDogJ3Nla3VuZCcpO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6ICdtaW51dMSZJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbnV0eScgOiAnbWludXQnKTtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2dvZHppbmEnIDogJ2dvZHppbsSZJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2dvZHppbnknIDogJ2dvZHppbicpO1xuICAgICAgICAgICAgY2FzZSAnd3cnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAndHlnb2RuaWUnIDogJ3R5Z29kbmknKTtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pZXNpxIVjZScgOiAnbWllc2nEmWN5Jyk7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdsYXRhJyA6ICdsYXQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3BsJywge1xuICAgICAgICBtb250aHM6IGZ1bmN0aW9uIChtb21lbnRUb0Zvcm1hdCwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudFRvRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc05vbWluYXRpdmU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9EIE1NTU0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTdWJqZWN0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzTm9taW5hdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdzdHlfbHV0X21hcl9rd2lfbWFqX2N6ZV9saXBfc2llX3dyel9wYcW6X2xpc19ncnUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ25pZWR6aWVsYV9wb25pZWR6aWHFgmVrX3d0b3Jla1/Fm3JvZGFfY3p3YXJ0ZWtfcGnEhXRla19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZHpfcG9uX3d0X8Wbcl9jendfcHRfc29iJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ05kX1BuX1d0X8Wacl9Del9QdF9Tbycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tEemnFmyBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0p1dHJvIG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgbmllZHppZWzEmSBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbV2Ugd3RvcmVrIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIMWbcm9kxJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgc29ib3TEmSBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1ddIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tXY3pvcmFqIG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgbmllZHppZWzEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgxZtyb2TEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgc29ib3TEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgnldIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgdGVtdScsXG4gICAgICAgICAgICBzOiAna2lsa2Egc2VrdW5kJyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6ICcxIGR6aWXFhCcsXG4gICAgICAgICAgICBkZDogJyVkIGRuaScsXG4gICAgICAgICAgICB3OiAndHlkemllxYQnLFxuICAgICAgICAgICAgd3c6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06ICdtaWVzacSFYycsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogJ3JvaycsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBvcnR1Z3Vlc2UgW3B0XVxuLy8hIGF1dGhvciA6IEplZmZlcnNvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYWxleDc5XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgcHQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwdCcsIHtcbiAgICAgICAgbW9udGhzOiAnamFuZWlyb19mZXZlcmVpcm9fbWFyw6dvX2FicmlsX21haW9fanVuaG9fanVsaG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGV6ZW1icm8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2Zldl9tYXJfYWJyX21haV9qdW5fanVsX2Fnb19zZXRfb3V0X25vdl9kZXonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ0RvbWluZ29fU2VndW5kYS1mZWlyYV9UZXLDp2EtZmVpcmFfUXVhcnRhLWZlaXJhX1F1aW50YS1mZWlyYV9TZXh0YS1mZWlyYV9Tw6FiYWRvJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0RvXzLCql8zwqpfNMKqXzXCql82wqpfU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSA9PT0gMCB8fCB0aGlzLmRheSgpID09PSA2XG4gICAgICAgICAgICAgICAgICAgID8gJ1vDmmx0aW1vXSBkZGRkIFvDoHNdIExUJyAvLyBTYXR1cmRheSArIFN1bmRheVxuICAgICAgICAgICAgICAgICAgICA6ICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2jDoSAlcycsXG4gICAgICAgICAgICBzOiAnc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW0gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW1hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW0gZGlhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGlhcycsXG4gICAgICAgICAgICB3OiAndW1hIHNlbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFuYXMnLFxuICAgICAgICAgICAgTTogJ3VtIG3DqnMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW0gYW5vJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5vcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUG9ydHVndWVzZSAoQnJhemlsKSBbcHQtYnJdXG4vLyEgYXV0aG9yIDogQ2FpbyBSaWJlaXJvIFBlcmVpcmEgOiBodHRwczovL2dpdGh1Yi5jb20vY2Fpby1yaWJlaXJvLXBlcmVpcmFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBwdEJyID0gbW9tZW50LmRlZmluZUxvY2FsZSgncHQtYnInLCB7XG4gICAgICAgIG1vbnRoczogJ2phbmVpcm9fZmV2ZXJlaXJvX21hcsOnb19hYnJpbF9tYWlvX2p1bmhvX2p1bGhvX2Fnb3N0b19zZXRlbWJyb19vdXR1YnJvX25vdmVtYnJvX2RlemVtYnJvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZXZfbWFyX2Ficl9tYWlfanVuX2p1bF9hZ29fc2V0X291dF9ub3ZfZGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdkb21pbmdvX3NlZ3VuZGEtZmVpcmFfdGVyw6dhLWZlaXJhX3F1YXJ0YS1mZWlyYV9xdWludGEtZmVpcmFfc2V4dGEtZmVpcmFfc8OhYmFkbycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tX3NlZ190ZXJfcXVhX3F1aV9zZXhfc8OhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb18ywqpfM8KqXzTCql81wqpfNsKqX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgW8Ogc10gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hvamUgw6BzXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0FtYW5ow6Mgw6BzXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8Ogc10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tPbnRlbSDDoHNdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNlxuICAgICAgICAgICAgICAgICAgICA/ICdbw5psdGltb10gZGRkZCBbw6BzXSBMVCcgLy8gU2F0dXJkYXkgKyBTdW5kYXlcbiAgICAgICAgICAgICAgICAgICAgOiAnW8OabHRpbWFdIGRkZGQgW8Ogc10gTFQnOyAvLyBNb25kYXkgLSBGcmlkYXlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VtICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdow6EgJXMnLFxuICAgICAgICAgICAgczogJ3BvdWNvcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG06ICd1bSBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGg6ICd1bWEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1bSBkaWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkaWFzJyxcbiAgICAgICAgICAgIE06ICd1bSBtw6pzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VtIGFubycsXG4gICAgICAgICAgICB5eTogJyVkIGFub3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgaW52YWxpZERhdGU6ICdEYXRhIGludsOhbGlkYScsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHRCcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBSb21hbmlhbiBbcm9dXG4vLyEgYXV0aG9yIDogVmxhZCBHdXJkaWdhIDogaHR0cHM6Ly9naXRodWIuY29tL2d1cmRpZ2Fcbi8vISBhdXRob3IgOiBWYWxlbnRpbiBBZ2FjaGkgOiBodHRwczovL2dpdGh1Yi5jb20vYXZhbHlcbi8vISBhdXRob3IgOiBFbWFudWVsIENlcG9pIDogaHR0cHM6Ly9naXRodWIuY29tL2NlcGVtXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAgICAgc3M6ICdzZWN1bmRlJyxcbiAgICAgICAgICAgICAgICBtbTogJ21pbnV0ZScsXG4gICAgICAgICAgICAgICAgaGg6ICdvcmUnLFxuICAgICAgICAgICAgICAgIGRkOiAnemlsZScsXG4gICAgICAgICAgICAgICAgd3c6ICdzxINwdMSDbcOibmknLFxuICAgICAgICAgICAgICAgIE1NOiAnbHVuaScsXG4gICAgICAgICAgICAgICAgeXk6ICdhbmknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlcGFyYXRvciA9ICcgJztcbiAgICAgICAgaWYgKG51bWJlciAlIDEwMCA+PSAyMCB8fCAobnVtYmVyID49IDEwMCAmJiBudW1iZXIgJSAxMDAgPT09IDApKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSAnIGRlICc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWJlciArIHNlcGFyYXRvciArIGZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBybyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3JvJywge1xuICAgICAgICBtb250aHM6ICdpYW51YXJpZV9mZWJydWFyaWVfbWFydGllX2FwcmlsaWVfbWFpX2l1bmllX2l1bGllX2F1Z3VzdF9zZXB0ZW1icmllX29jdG9tYnJpZV9ub2llbWJyaWVfZGVjZW1icmllJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdpYW4uX2ZlYi5fbWFydC5fYXByLl9tYWlfaXVuLl9pdWwuX2F1Zy5fc2VwdC5fb2N0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdkdW1pbmljxINfbHVuaV9tYXLIm2lfbWllcmN1cmlfam9pX3ZpbmVyaV9zw6JtYsSDdMSDJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnRHVtX0x1bl9NYXJfTWllX0pvaV9WaW5fU8OibScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdEdV9MdV9NYV9NaV9Kb19WaV9Tw6InLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1themkgbGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbcOiaW5lIGxhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2xhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2llcmkgbGFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2Zvc3RhXSBkZGRkIFtsYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdwZXN0ZSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgw65uIHVybcSDJyxcbiAgICAgICAgICAgIHM6ICdjw6J0ZXZhIHNlY3VuZGUnLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtOiAndW4gbWludXQnLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoOiAnbyBvcsSDJyxcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZDogJ28gemknLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB3OiAnbyBzxINwdMSDbcOibsSDJyxcbiAgICAgICAgICAgIHd3OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTTogJ28gbHVuxIMnLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5OiAndW4gYW4nLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBybztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBSdXNzaWFuIFtydV1cbi8vISBhdXRob3IgOiBWaWt0b3JtaW5hdG9yIDogaHR0cHM6Ly9naXRodWIuY29tL1Zpa3Rvcm1pbmF0b3Jcbi8vISBhdXRob3IgOiBNZW5lbGlvbiBFbGVuc8O6bGUgOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuLy8hIGF1dGhvciA6INCa0L7RgNC10L3QsdC10YDQsyDQnNCw0YDQuiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zb2NrZXRwYWlyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTFcbiAgICAgICAgICAgID8gZm9ybXNbMF1cbiAgICAgICAgICAgIDogbnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApXG4gICAgICAgICAgICAgID8gZm9ybXNbMV1cbiAgICAgICAgICAgICAgOiBmb3Jtc1syXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgc3M6IHdpdGhvdXRTdWZmaXggPyAn0YHQtdC60YPQvdC00LBf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyA6ICfRgdC10LrRg9C90LTRg1/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbW06IHdpdGhvdXRTdWZmaXggPyAn0LzQuNC90YPRgtCwX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyA6ICfQvNC40L3Rg9GC0YNf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInLFxuICAgICAgICAgICAgaGg6ICfRh9Cw0YFf0YfQsNGB0LBf0YfQsNGB0L7QsicsXG4gICAgICAgICAgICBkZDogJ9C00LXQvdGMX9C00L3Rj1/QtNC90LXQuScsXG4gICAgICAgICAgICB3dzogJ9C90LXQtNC10LvRj1/QvdC10LTQtdC70Lhf0L3QtdC00LXQu9GMJyxcbiAgICAgICAgICAgIE1NOiAn0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0LBf0LzQtdGB0Y/RhtC10LInLFxuICAgICAgICAgICAgeXk6ICfQs9C+0LRf0LPQvtC00LBf0LvQtdGCJyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQvNC40L3Rg9GC0LAnIDogJ9C80LjQvdGD0YLRgyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgIC9e0Y/QvdCyL2ksXG4gICAgICAgIC9e0YTQtdCyL2ksXG4gICAgICAgIC9e0LzQsNGAL2ksXG4gICAgICAgIC9e0LDQv9GAL2ksXG4gICAgICAgIC9e0LzQsFvQudGPXS9pLFxuICAgICAgICAvXtC40Y7QvS9pLFxuICAgICAgICAvXtC40Y7Quy9pLFxuICAgICAgICAvXtCw0LLQsy9pLFxuICAgICAgICAvXtGB0LXQvS9pLFxuICAgICAgICAvXtC+0LrRgi9pLFxuICAgICAgICAvXtC90L7Rjy9pLFxuICAgICAgICAvXtC00LXQui9pLFxuICAgIF07XG5cbiAgICAvLyBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9ydWxlcy8xMzktcHJvcCA6IMKnIDEwM1xuICAgIC8vINCh0L7QutGA0LDRidC10L3QuNGPINC80LXRgdGP0YbQtdCyOiBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9idXJvL3NlYXJjaC1hbnN3ZXI/cz0yNDI2MzdcbiAgICAvLyBDTERSIGRhdGE6ICAgICAgICAgIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMjgvc3VtbWFyeS9ydS5odG1sIzE3NTNcbiAgICB2YXIgcnUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdydScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfRj9C90LLQsNGA0Y9f0YTQtdCy0YDQsNC70Y9f0LzQsNGA0YLQsF/QsNC/0YDQtdC70Y9f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQs9GD0YHRgtCwX9GB0LXQvdGC0Y/QsdGA0Y9f0L7QutGC0Y/QsdGA0Y9f0L3QvtGP0LHRgNGPX9C00LXQutCw0LHRgNGPJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDoge1xuICAgICAgICAgICAgLy8g0L/QviBDTERSINC40LzQtdC90L3QviBcItC40Y7Quy5cIiDQuCBcItC40Y7QvS5cIiwg0L3QviDQutCw0LrQvtC5INGB0LzRi9GB0Lsg0LzQtdC90Y/RgtGMINCx0YPQutCy0YMg0L3QsCDRgtC+0YfQutGDP1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCyLl/RhNC10LLRgC5f0LzQsNGALl/QsNC/0YAuX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LMuX9GB0LXQvdGCLl/QvtC60YIuX9C90L7Rj9CxLl/QtNC10LouJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfRj9C90LIuX9GE0LXQstGALl/QvNCw0YDRgl/QsNC/0YAuX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LMuX9GB0LXQvdGCLl/QvtC60YIuX9C90L7Rj9CxLl/QtNC10LouJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXM6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LVf0L/QvtC90LXQtNC10LvRjNC90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNCwX9GH0LXRgtCy0LXRgNCzX9C/0Y/RgtC90LjRhtCwX9GB0YPQsdCx0L7RgtCwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LVf0L/QvtC90LXQtNC10LvRjNC90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNGDX9GH0LXRgtCy0LXRgNCzX9C/0Y/RgtC90LjRhtGDX9GB0YPQsdCx0L7RgtGDJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9CS0LJdID8oPzrQv9GA0L7RiNC70YPRjnzRgdC70LXQtNGD0Y7RidGD0Y580Y3RgtGDKT8gP10gP2RkZGQvLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LgsINC/0L4g0YLRgNC4INCx0YPQutCy0YssINC00LvRjyDQvdC10LrQvtGC0L7RgNGL0YUsINC/0L4gNCDQsdGD0LrQstGLLCDRgdC+0LrRgNCw0YnQtdC90LjRjyDRgSDRgtC+0YfQutC+0Lkg0Lgg0LHQtdC3INGC0L7Rh9C60LhcbiAgICAgICAgbW9udGhzUmVnZXg6XG4gICAgICAgICAgICAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgICAgICAvLyDQutC+0L/QuNGPINC/0YDQtdC00YvQtNGD0YnQtdCz0L5cbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDpcbiAgICAgICAgICAgIC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LhcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXijRj9C90LLQsNGAW9GP0YxdfNGE0LXQstGA0LDQu1vRj9GMXXzQvNCw0YDRgtCwP3zQsNC/0YDQtdC7W9GP0YxdfNC80LBb0Y/QuV180LjRjtC9W9GP0YxdfNC40Y7Qu1vRj9GMXXzQsNCy0LPRg9GB0YLQsD980YHQtdC90YLRj9Cx0YBb0Y/RjF180L7QutGC0Y/QsdGAW9GP0YxdfNC90L7Rj9Cx0YBb0Y/RjF180LTQtdC60LDQsdGAW9GP0YxdKS9pLFxuXG4gICAgICAgIC8vINCS0YvRgNCw0LbQtdC90LjQtSwg0LrQvtGC0L7RgNC+0LUg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXijRj9C90LJcXC580YTQtdCy0YA/XFwufNC80LDRgFvRgi5dfNCw0L/RgFxcLnzQvNCwW9GP0LldfNC40Y7QvVvRjNGPLl180LjRjtC7W9GM0Y8uXXzQsNCy0LNcXC580YHQtdC90YI/XFwufNC+0LrRglxcLnzQvdC+0Y/QsT9cXC580LTQtdC6XFwuKS9pLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWSDQsy4nLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkg0LMuLCBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQodC10LPQvtC00L3Rjywg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0JfQsNCy0YLRgNCwLCDQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQktGH0LXRgNCwLCDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnQtdC1XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC40LldIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JLQvl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9C+0LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRi9C5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JLQvl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfRh9C10YDQtdC3ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDQvdCw0LfQsNC0JyxcbiAgICAgICAgICAgIHM6ICfQvdC10YHQutC+0LvRjNC60L4g0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaDogJ9GH0LDRgScsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQ6ICfQtNC10L3RjCcsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHc6ICfQvdC10LTQtdC70Y8nLFxuICAgICAgICAgICAgd3c6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNOiAn0LzQtdGB0Y/RhicsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHk6ICfQs9C+0LQnLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfQuHzRg9GC0YDQsHzQtNC90Y980LLQtdGH0LXRgNCwL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNC00L3Rj3zQstC10YfQtdGA0LApJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C90L7Rh9C4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRg9GC0YDQsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LTQvdGPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQstC10YfQtdGA0LAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC5fNCz0L580Y8pLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC5JztcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQvic7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGPJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcnU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2luZGhpIFtzZF1cbi8vISBhdXRob3IgOiBOYXJhaW4gU2FnYXIgOiBodHRwczovL2dpdGh1Yi5jb20vbmFyYWluc2FnYXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICAgICAn2KzZhtmI2LHZiicsXG4gICAgICAgICAgICAn2YHZitio2LHZiNix2YonLFxuICAgICAgICAgICAgJ9mF2KfYsdqGJyxcbiAgICAgICAgICAgICfYp9m+2LHZitmEJyxcbiAgICAgICAgICAgICfZhdim2YonLFxuICAgICAgICAgICAgJ9is2YjZhicsXG4gICAgICAgICAgICAn2KzZiNmE2KfYodmQJyxcbiAgICAgICAgICAgICfYotqv2LPZvScsXG4gICAgICAgICAgICAn2LPZitm+2b3Zhdio2LEnLFxuICAgICAgICAgICAgJ9ii2qrZvdmI2KjYsScsXG4gICAgICAgICAgICAn2YbZiNmF2KjYsScsXG4gICAgICAgICAgICAn2orYs9mF2KjYsScsXG4gICAgICAgIF0sXG4gICAgICAgIGRheXMgPSBbJ9ii2obYsScsICfYs9mI2YXYsScsICfYp9qx2KfYsdmIJywgJ9in2LHYqNi5JywgJ9iu2YXZitizJywgJ9is2YXYuScsICfah9mG2ofYsSddO1xuXG4gICAgdmFyIHNkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2QnLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5czogZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRheXMsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGTYjCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Ytdio2K182LTYp9mFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9i02KfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LXYqNitJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJztcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfahF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYs9qA2Kfau9mKXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9in2rPZitmGINmH2YHYqtmKINiq2YpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2qrYp9mE2YfZh10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb2q/Ystix2YrZhCDZh9mB2KrZil0gZGRkZCBb2KrZil0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDZvtmI2KEnLFxuICAgICAgICAgICAgcGFzdDogJyVzINin2rMnLFxuICAgICAgICAgICAgczogJ9qG2YbYryDYs9mK2qrZhtqKJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2LPZitqq2YbaiicsXG4gICAgICAgICAgICBtOiAn2YfaqiDZhdmG2b0nLFxuICAgICAgICAgICAgbW06ICclZCDZhdmG2b0nLFxuICAgICAgICAgICAgaDogJ9mH2qog2qrZhNin2qonLFxuICAgICAgICAgICAgaGg6ICclZCDaqtmE2KfaqicsXG4gICAgICAgICAgICBkOiAn2YfaqiDaj9mK2YbZh9mGJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2o/ZitmG2YfZhicsXG4gICAgICAgICAgICBNOiAn2YfaqiDZhdmH2YrZhtmIJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2YXZh9mK2YbYpycsXG4gICAgICAgICAgICB5OiAn2YfaqiDYs9in2YQnLFxuICAgICAgICAgICAgeXk6ICclZCDYs9in2YQnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzZDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOb3J0aGVybiBTYW1pIFtzZV1cbi8vISBhdXRob3JzIDogQsOlcmQgUm9sc3RhZCBIZW5yaWtzZW4gOiBodHRwczovL2dpdGh1Yi5jb20va2FyYW1lbGxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NlJywge1xuICAgICAgICBtb250aHM6ICdvxJHEkWFqYWdlbcOhbm51X2d1b3Z2YW3DoW5udV9uanVrxI1hbcOhbm51X2N1b8WLb23DoW5udV9taWVzc2Vtw6FubnVfZ2Vhc3NlbcOhbm51X3N1b2lkbmVtw6FubnVfYm9yZ2Vtw6FubnVfxI1ha8SNYW3DoW5udV9nb2xnZ290bcOhbm51X3Nrw6FibWFtw6FubnVfanVvdmxhbcOhbm51Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdvxJHEkWpfZ3Vvdl9uanVrX2N1b19taWVzX2dlYXNfc3VvaV9ib3JnX8SNYWvEjV9nb2xnX3Nrw6FiX2p1b3YnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ3NvdG5hYmVhaXZpX3Z1b3Nzw6FyZ2FfbWHFi8WLZWLDoXJnYV9nYXNrYXZhaGtrdV9kdW9yYXN0YXRfYmVhcmphZGF0X2zDoXZ2YXJkYXQnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3NvdG5fdnVvc19tYcWLX2dhc2tfZHVvcl9iZWFyX2zDoXYnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc192X21fZ19kX2JfTCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdNTU1NIEQuIFtiLl0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIEQuIFtiLl0gWVlZWSBbdGkuXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tvdG5lIHRpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2lodHRpbiB0aV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt0aV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpa3RlIHRpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tvdmRkaXRdIGRkZGQgW3RpXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIGdlYcW+ZXMnLFxuICAgICAgICAgICAgcGFzdDogJ21hxYtpdCAlcycsXG4gICAgICAgICAgICBzOiAnbW9hZGRlIHNla3VuZGRhdCcsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGRhdCcsXG4gICAgICAgICAgICBtOiAnb2t0YSBtaW51aHRhJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludWh0YXQnLFxuICAgICAgICAgICAgaDogJ29rdGEgZGlpbW11JyxcbiAgICAgICAgICAgIGhoOiAnJWQgZGlpbW11dCcsXG4gICAgICAgICAgICBkOiAnb2t0YSBiZWFpdmknLFxuICAgICAgICAgICAgZGQ6ICclZCBiZWFpdnZpdCcsXG4gICAgICAgICAgICBNOiAnb2t0YSBtw6FubnUnLFxuICAgICAgICAgICAgTU06ICclZCBtw6FudXQnLFxuICAgICAgICAgICAgeTogJ29rdGEgamFoa2knLFxuICAgICAgICAgICAgeXk6ICclZCBqYWdpdCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2luaGFsZXNlIFtzaV1cbi8vISBhdXRob3IgOiBTYW1wYXRoIFNpdGluYW1hbHV3YSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zYW1wYXRoc3Jpc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgLypqc2hpbnQgLVcxMDAqL1xuICAgIHZhciBzaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NpJywge1xuICAgICAgICBtb250aHM6ICfgtqLgtrHgt4Dgt4/gtrvgt5Jf4La04LeZ4La24La74LeA4LeP4La74LeSX+C2uOC3j+C2u+C3iuC2reC3lF/gtoXgtrTgt4rigI3gtrvgt5rgtr3gt4pf4La44LeQ4La64LeSX+C2ouC3luC2seC3kl/gtqLgt5bgtr3gt5Jf4LaF4Lac4Led4LeD4LeK4Lat4LeUX+C3g+C3kOC2tOC3iuC2reC3kOC2uOC3iuC2tuC2u+C3il/gtpTgtprgt4rgtq3gt53gtrbgtrvgt4pf4Lax4Lec4LeA4LeQ4La44LeK4La24La74LeKX+C2r+C3meC3g+C3kOC2uOC3iuC2tuC2u+C3iicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfgtqLgtrFf4La04LeZ4La2X+C2uOC3j+C2u+C3il/gtoXgtrTgt4pf4La44LeQ4La64LeSX+C2ouC3luC2seC3kl/gtqLgt5bgtr3gt5Jf4LaF4Lac4LedX+C3g+C3kOC2tOC3il/gtpTgtprgt4pf4Lax4Lec4LeA4LeQX+C2r+C3meC3g+C3kCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn4LaJ4La74LeS4Lav4LePX+C3g+C2s+C3lOC2r+C3j1/gtoXgtp/gt4Tgtrvgt5Tgt4Dgt4/gtq/gt49f4La24Lav4LeP4Lav4LePX+C2tuC3iuKAjeC2u+C3hOC3g+C3iuC2tOC2reC3kuC2seC3iuC2r+C3j1/gt4Pgt5Lgtprgt5Tgtrvgt4/gtq/gt49f4LeD4LeZ4Lax4LeD4LeU4La74LeP4Lav4LePJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgtongtrvgt5Jf4LeD4Laz4LeUX+C2heC2n1/gtrbgtq/gt49f4La24LeK4oCN4La74LeEX+C3g+C3kuC2muC3lF/gt4Pgt5ngtrEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4LaJX+C3g1/gtoVf4La2X+C2tuC3iuKAjeC2u1/gt4Pgt5Jf4LeD4LeZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2EgaDptbScsXG4gICAgICAgICAgICBMVFM6ICdhIGg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZIE1NTU0gRCcsXG4gICAgICAgICAgICBMTEw6ICdZWVlZIE1NTU0gRCwgYSBoOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZIE1NTU0gRCBb4LeA4LeQ4Lax4LeSXSBkZGRkLCBhIGg6bW06c3MnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgtoXgtq9dIExUW+C2p10nLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgt4Tgt5ngtqddIExUW+C2p10nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUW+C2p10nLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgtorgtrrgt5pdIExUW+C2p10nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4La04LeD4LeU4Lac4LeS4La6XSBkZGRkIExUW+C2p10nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+C2muC3kuC2seC3iicsXG4gICAgICAgICAgICBwYXN0OiAnJXPgtprgtqcg4La04LeZ4La7JyxcbiAgICAgICAgICAgIHM6ICfgtq3gtq3gt4rgtrTgtrsg4Laa4LeS4LeE4LeS4La04La6JyxcbiAgICAgICAgICAgIHNzOiAn4Lat4Lat4LeK4La04La7ICVkJyxcbiAgICAgICAgICAgIG06ICfgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5Tgt4AnLFxuICAgICAgICAgICAgbW06ICfgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5QgJWQnLFxuICAgICAgICAgICAgaDogJ+C2tOC3kOC2uicsXG4gICAgICAgICAgICBoaDogJ+C2tOC3kOC2uiAlZCcsXG4gICAgICAgICAgICBkOiAn4Lav4LeS4Lax4La6JyxcbiAgICAgICAgICAgIGRkOiAn4Lav4LeS4LaxICVkJyxcbiAgICAgICAgICAgIE06ICfgtrjgt4/gt4PgtronLFxuICAgICAgICAgICAgTU06ICfgtrjgt4/gt4MgJWQnLFxuICAgICAgICAgICAgeTogJ+C3gOC3g+C2uycsXG4gICAgICAgICAgICB5eTogJ+C3gOC3g+C2uyAlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSDgt4Dgt5DgtrHgt5IvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDgt4Dgt5DgtrHgt5InO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4La04LeZ4La7IOC3gOC2u+C3lHzgtrTgt4Pgt4og4LeA4La74LeUfOC2tOC3mS7gt4B84La0LuC3gC4vLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C2tC7gt4AuJyB8fCBpbnB1dCA9PT0gJ+C2tOC3g+C3iiDgt4Dgtrvgt5QnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tC7gt4AuJyA6ICfgtrTgt4Pgt4og4LeA4La74LeUJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn4La04LeZLuC3gC4nIDogJ+C2tOC3meC2uyDgt4Dgtrvgt5QnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNsb3ZhayBbc2tdXG4vLyEgYXV0aG9yIDogTWFydGluIE1pbmthIDogaHR0cHM6Ly9naXRodWIuY29tL2syc1xuLy8hIGJhc2VkIG9uIHdvcmsgb2YgcGV0cmJlbGEgOiBodHRwczovL2dpdGh1Yi5jb20vcGV0cmJlbGFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPVxuICAgICAgICAgICAgJ2phbnXDoXJfZmVicnXDoXJfbWFyZWNfYXByw61sX23DoWpfasO6bl9qw7psX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnamFuX2ZlYl9tYXJfYXByX23DoWpfasO6bl9qw7psX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPiAxICYmIG4gPCA1O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzogLy8gYSBmZXcgc2Vjb25kcyAvIGluIGEgZmV3IHNlY29uZHMgLyBhIGZldyBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3DDoXIgc2Vrw7puZCcgOiAncMOhciBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOiAvLyA5IHNlY29uZHMgLyBpbiA5IHNlY29uZHMgLyA5IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdzZWt1bmR5JyA6ICdzZWvDum5kJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdzZWt1bmRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ20nOiAvLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWluw7p0YScgOiBpc0Z1dHVyZSA/ICdtaW7DunR1JyA6ICdtaW7DunRvdSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6IC8vIDkgbWludXRlcyAvIGluIDkgbWludXRlcyAvIDkgbWludXRlcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbsO6dHknIDogJ21pbsO6dCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWluw7p0YW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdoJzogLy8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2hvZGluYScgOiBpc0Z1dHVyZSA/ICdob2RpbnUnIDogJ2hvZGlub3UnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOiAvLyA5IGhvdXJzIC8gaW4gOSBob3VycyAvIDkgaG91cnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdob2RpbnknIDogJ2hvZMOtbicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnaG9kaW5hbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2QnOiAvLyBhIGRheSAvIGluIGEgZGF5IC8gYSBkYXkgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZGXFiCcgOiAnZMWIb20nO1xuICAgICAgICAgICAgY2FzZSAnZGQnOiAvLyA5IGRheXMgLyBpbiA5IGRheXMgLyA5IGRheXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdkbmknIDogJ2Ruw60nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2TFiGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnTSc6IC8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNpYWMnIDogJ21lc2lhY29tJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzogLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWVzaWFjZScgOiAnbWVzaWFjb3YnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21lc2lhY21pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICd5JzogLy8gYSB5ZWFyIC8gaW4gYSB5ZWFyIC8gYSB5ZWFyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3JvaycgOiAncm9rb20nO1xuICAgICAgICAgICAgY2FzZSAneXknOiAvLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdyb2t5JyA6ICdyb2tvdicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAncm9rbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NrJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRoc1Nob3J0LFxuICAgICAgICB3ZWVrZGF5czogJ25lZGXEvmFfcG9uZGVsb2tfdXRvcm9rX3N0cmVkYV/FoXR2cnRva19waWF0b2tfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVfcG9fdXRfc3RfxaF0X3BpX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3V0X3N0X8WhdF9waV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZG5lcyBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3phanRyYSBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IG5lZGXEvnUgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBzdHJlZHUgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2byDFoXR2cnRvayBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgcGlhdG9rIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBzb2JvdHUgb10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3bEjWVyYSBvXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IG5lZGXEvnUgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw71dIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBzdHJlZHUgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw71dIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBzb2JvdHUgb10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmVkICVzJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzaztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTbG92ZW5pYW4gW3NsXVxuLy8hIGF1dGhvciA6IFJvYmVydCBTZWRvdsWhZWsgOiBodHRwczovL2dpdGh1Yi5jb20vc2Vkb3ZzZWtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZVxuICAgICAgICAgICAgICAgICAgICA/ICduZWthaiBzZWt1bmQnXG4gICAgICAgICAgICAgICAgICAgIDogJ25la2FqIHNla3VuZGFtaSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICdzZWt1bmRvJyA6ICdzZWt1bmRpJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWt1bmRpJyA6ICdzZWt1bmRhaCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3Nla3VuZGUnIDogJ3Nla3VuZGFoJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdlbmEgbWludXRhJyA6ICdlbm8gbWludXRvJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ21pbnV0YScgOiAnbWludXRvJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dGknIDogJ21pbnV0YW1hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXRlJyA6ICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXQnIDogJ21pbnV0YW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2VuYSB1cmEnIDogJ2VubyB1cm8nO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAndXJhJyA6ICd1cm8nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3VyaScgOiAndXJhbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cmUnIDogJ3VyYW1pJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cicgOiAndXJhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZW4gZGFuJyA6ICdlbmltIGRuZW0nO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZGFuJyA6ICdkbmVtJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkbmknIDogJ2RuZXZvbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RuaScgOiAnZG5ldmknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZW4gbWVzZWMnIDogJ2VuaW0gbWVzZWNlbSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlYycgOiAnbWVzZWNlbSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNhJyA6ICdtZXNlY2VtYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjZScgOiAnbWVzZWNpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2V2JyA6ICdtZXNlY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZW5vIGxldG8nIDogJ2VuaW0gbGV0b20nO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0bycgOiAnbGV0b20nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldGknIDogJ2xldG9tYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldGEnIDogJ2xldGknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldCcgOiAnbGV0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2wgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzbCcsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFyZWNfYXByaWxfbWFqX2p1bmlqX2p1bGlqX2F2Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFuLl9mZWIuX21hci5fYXByLl9tYWouX2p1bi5fanVsLl9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRlbGphX3BvbmVkZWxqZWtfdG9yZWtfc3JlZGFfxI1ldHJ0ZWtfcGV0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3Rvci5fc3JlLl/EjWV0Ll9wZXQuX3NvYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdG9fc3JfxI1lX3BlX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuIE1NLiBZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RhbmVzIG9iXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2p1dHJpIG9iXSBMVCcsXG5cbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtuZWRlbGpvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW3NyZWRvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW3NvYm90b10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIGRkZGQgW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbdsSNZXJhaiBvYl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbbmVkZWxqb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW3NyZWRvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbc29ib3RvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmppXSBkZGRkIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ8SNZXogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ByZWQgJXMnLFxuICAgICAgICAgICAgczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFsYmFuaWFuIFtzcV1cbi8vISBhdXRob3IgOiBGbGFrw6tyaW0gSXNtYW5pIDogaHR0cHM6Ly9naXRodWIuY29tL2ZsYWtlcmltaVxuLy8hIGF1dGhvciA6IE1lbmVsaW9uIEVsZW5zw7psZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDogT2VyZCBDdWthbGxhIDogaHR0cHM6Ly9naXRodWIuY29tL29lcmRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzcSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NxJywge1xuICAgICAgICBtb250aHM6ICdKYW5hcl9TaGt1cnRfTWFyc19QcmlsbF9NYWpfUWVyc2hvcl9Lb3JyaWtfR3VzaHRfU2h0YXRvcl9UZXRvcl9Ow6tudG9yX0RoamV0b3InLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX1Noa19NYXJfUHJpX01hal9RZXJfS29yX0d1c19TaHRfVGV0X07Dq25fRGhqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0UgRGllbF9FIEjDq27Dq19FIE1hcnTDq19FIE3Dq3JrdXLDq19FIEVuanRlX0UgUHJlbXRlX0UgU2h0dW7Dqycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0RpZV9Iw6tuX01hcl9Nw6tyX0Vual9QcmVfU2h0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0RfSF9NYV9Nw6tfRV9QX1NoJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9QRHxNRC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgwKSA9PT0gJ00nO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91cnMgPCAxMiA/ICdQRCcgOiAnTUQnO1xuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1NvdCBuw6tdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTmVzw6tyIG7Dq10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtuw6tdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbRGplIG7Dq10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtlIGthbHVhciBuw6tdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnbsOrICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBtw6sgcGFyw6snLFxuICAgICAgICAgICAgczogJ2Rpc2Egc2Vrb25kYScsXG4gICAgICAgICAgICBzczogJyVkIHNla29uZGEnLFxuICAgICAgICAgICAgbTogJ25qw6sgbWludXTDqycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0YScsXG4gICAgICAgICAgICBoOiAnbmrDqyBvcsOrJyxcbiAgICAgICAgICAgIGhoOiAnJWQgb3LDqycsXG4gICAgICAgICAgICBkOiAnbmrDqyBkaXTDqycsXG4gICAgICAgICAgICBkZDogJyVkIGRpdMOrJyxcbiAgICAgICAgICAgIE06ICduasOrIG11YWonLFxuICAgICAgICAgICAgTU06ICclZCBtdWFqJyxcbiAgICAgICAgICAgIHk6ICduasOrIHZpdCcsXG4gICAgICAgICAgICB5eTogJyVkIHZpdGUnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNxO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNlcmJpYW4gW3NyXVxuLy8hIGF1dGhvciA6IE1pbGFuIEphbmHEjWtvdmnEhzxtaWxhbmphbmFja292aWNAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWxhbi1qXG4vLyEgYXV0aG9yIDogU3RlZmFuIENybmpha292acSHIDxzdGVmYW5AaG90bWFpbC5ycz4gOiBodHRwczovL2dpdGh1Yi5jb20vY3JuamFrb3ZpY1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7XG4gICAgICAgICAgICAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICAgICAgc3M6IFsnc2VrdW5kYScsICdzZWt1bmRlJywgJ3Nla3VuZGknXSxcbiAgICAgICAgICAgIG06IFsnamVkYW4gbWludXQnLCAnamVkbm9nIG1pbnV0YSddLFxuICAgICAgICAgICAgbW06IFsnbWludXQnLCAnbWludXRhJywgJ21pbnV0YSddLFxuICAgICAgICAgICAgaDogWydqZWRhbiBzYXQnLCAnamVkbm9nIHNhdGEnXSxcbiAgICAgICAgICAgIGhoOiBbJ3NhdCcsICdzYXRhJywgJ3NhdGknXSxcbiAgICAgICAgICAgIGQ6IFsnamVkYW4gZGFuJywgJ2plZG5vZyBkYW5hJ10sXG4gICAgICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgICAgICBNOiBbJ2plZGFuIG1lc2VjJywgJ2plZG5vZyBtZXNlY2EnXSxcbiAgICAgICAgICAgIE1NOiBbJ21lc2VjJywgJ21lc2VjYScsICdtZXNlY2knXSxcbiAgICAgICAgICAgIHk6IFsnamVkbnUgZ29kaW51JywgJ2plZG5lIGdvZGluZSddLFxuICAgICAgICAgICAgeXk6IFsnZ29kaW51JywgJ2dvZGluZScsICdnb2RpbmEnXSxcbiAgICAgICAgfSxcbiAgICAgICAgY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTogZnVuY3Rpb24gKG51bWJlciwgd29yZEtleSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG51bWJlciAlIDEwID49IDEgJiZcbiAgICAgICAgICAgICAgICBudW1iZXIgJSAxMCA8PSA0ICYmXG4gICAgICAgICAgICAgICAgKG51bWJlciAlIDEwMCA8IDEwIHx8IG51bWJlciAlIDEwMCA+PSAyMClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdvcmRLZXlbMl07XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV0sXG4gICAgICAgICAgICAgICAgd29yZDtcblxuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBOb21pbmF0aXZcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAneScgJiYgd2l0aG91dFN1ZmZpeCkgcmV0dXJuICdqZWRuYSBnb2RpbmEnO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdvcmQgPSB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIC8vIE5vbWluYXRpdlxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3l5JyAmJiB3aXRob3V0U3VmZml4ICYmIHdvcmQgPT09ICdnb2RpbnUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgZ29kaW5hJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHdvcmQ7XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBzciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NyJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5fanVsX2F2Z3VzdF9zZXB0ZW1iYXJfb2t0b2Jhcl9ub3ZlbWJhcl9kZWNlbWJhcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkZWxqYV9wb25lZGVsamFrX3V0b3Jha19zcmVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JlLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC4gTS4gWVlZWS4nLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVkuJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWS4gSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZLiBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzdXRyYSB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanXEjWUgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtuZWRlbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRlbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3V0b3JrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3JlZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmUgJXMnLFxuICAgICAgICAgICAgczogJ25la29saWtvIHNla3VuZGknLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTZXJiaWFuIEN5cmlsbGljIFtzci1jeXJsXVxuLy8hIGF1dGhvciA6IE1pbGFuIEphbmHEjWtvdmnEhzxtaWxhbmphbmFja292aWNAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWxhbi1qXG4vLyEgYXV0aG9yIDogU3RlZmFuIENybmpha292acSHIDxzdGVmYW5AaG90bWFpbC5ycz4gOiBodHRwczovL2dpdGh1Yi5jb20vY3JuamFrb3ZpY1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7XG4gICAgICAgICAgICAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICAgICAgc3M6IFsn0YHQtdC60YPQvdC00LAnLCAn0YHQtdC60YPQvdC00LUnLCAn0YHQtdC60YPQvdC00LgnXSxcbiAgICAgICAgICAgIG06IFsn0ZjQtdC00LDQvSDQvNC40L3Rg9GCJywgJ9GY0LXQtNC90L7QsyDQvNC40L3Rg9GC0LAnXSxcbiAgICAgICAgICAgIG1tOiBbJ9C80LjQvdGD0YInLCAn0LzQuNC90YPRgtCwJywgJ9C80LjQvdGD0YLQsCddLFxuICAgICAgICAgICAgaDogWyfRmNC10LTQsNC9INGB0LDRgicsICfRmNC10LTQvdC+0LMg0YHQsNGC0LAnXSxcbiAgICAgICAgICAgIGhoOiBbJ9GB0LDRgicsICfRgdCw0YLQsCcsICfRgdCw0YLQuCddLFxuICAgICAgICAgICAgZDogWyfRmNC10LTQsNC9INC00LDQvScsICfRmNC10LTQvdC+0LMg0LTQsNC90LAnXSxcbiAgICAgICAgICAgIGRkOiBbJ9C00LDQvScsICfQtNCw0L3QsCcsICfQtNCw0L3QsCddLFxuICAgICAgICAgICAgTTogWyfRmNC10LTQsNC9INC80LXRgdC10YYnLCAn0ZjQtdC00L3QvtCzINC80LXRgdC10YbQsCddLFxuICAgICAgICAgICAgTU06IFsn0LzQtdGB0LXRhicsICfQvNC10YHQtdGG0LAnLCAn0LzQtdGB0LXRhtC4J10sXG4gICAgICAgICAgICB5OiBbJ9GY0LXQtNC90YMg0LPQvtC00LjQvdGDJywgJ9GY0LXQtNC90LUg0LPQvtC00LjQvdC1J10sXG4gICAgICAgICAgICB5eTogWyfQs9C+0LTQuNC90YMnLCAn0LPQvtC00LjQvdC1JywgJ9Cz0L7QtNC40L3QsCddLFxuICAgICAgICB9LFxuICAgICAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbnVtYmVyICUgMTAgPj0gMSAmJlxuICAgICAgICAgICAgICAgIG51bWJlciAlIDEwIDw9IDQgJiZcbiAgICAgICAgICAgICAgICAobnVtYmVyICUgMTAwIDwgMTAgfHwgbnVtYmVyICUgMTAwID49IDIwKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAxID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd29yZEtleVsyXTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICB2YXIgd29yZEtleSA9IHRyYW5zbGF0b3Iud29yZHNba2V5XSxcbiAgICAgICAgICAgICAgICB3b3JkO1xuXG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIC8vIE5vbWluYXRpdlxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICd5JyAmJiB3aXRob3V0U3VmZml4KSByZXR1cm4gJ9GY0LXQtNC90LAg0LPQvtC00LjQvdCwJztcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3b3JkID0gdHJhbnNsYXRvci5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKG51bWJlciwgd29yZEtleSk7XG4gICAgICAgICAgICAvLyBOb21pbmF0aXZcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICd5eScgJiYgd2l0aG91dFN1ZmZpeCAmJiB3b3JkID09PSAn0LPQvtC00LjQvdGDJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINCz0L7QtNC40L3QsCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB3b3JkO1xuICAgICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgc3JDeXJsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3ItY3lybCcsIHtcbiAgICAgICAgbW9udGhzOiAn0ZjQsNC90YPQsNGAX9GE0LXQsdGA0YPQsNGAX9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCx0LDRgF/QvtC60YLQvtCx0LDRgF/QvdC+0LLQtdC80LHQsNGAX9C00LXRhtC10LzQsdCw0YAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9GY0LDQvS5f0YTQtdCxLl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCzLl/RgdC10L8uX9C+0LrRgi5f0L3QvtCyLl/QtNC10YYuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ9C90LXQtNC10ZnQsF/Qv9C+0L3QtdC00LXRmdCw0Lpf0YPRgtC+0YDQsNC6X9GB0YDQtdC00LBf0YfQtdGC0LLRgNGC0LDQul/Qv9C10YLQsNC6X9GB0YPQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LXQtC5f0L/QvtC9Ll/Rg9GC0L4uX9GB0YDQtS5f0YfQtdGCLl/Qv9C10YIuX9GB0YPQsS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0L3QtV/Qv9C+X9GD0YJf0YHRgF/Rh9C1X9C/0LVf0YHRgycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QuIE0uIFlZWVkuJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZLicsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkuIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWS4gSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9C00LDQvdCw0YEg0YNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0YHRg9GC0YDQsCDRg10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIFvQvdC10LTQtdGZ0YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9GB0YDQtdC00YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9GB0YPQsdC+0YLRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBkZGRkIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9GY0YPRh9C1INGDXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0L3QtdC00LXRmdC1XSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9C/0L7QvdC10LTQtdGZ0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvRg9GC0L7RgNC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9GB0YDQtdC00LVdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0YfQtdGC0LLRgNGC0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvQv9C10YLQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvRgdGD0LHQvtGC0LVdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9C30LAgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9C/0YDQtSAlcycsXG4gICAgICAgICAgICBzOiAn0L3QtdC60L7Qu9C40LrQviDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNyQ3lybDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBzaVN3YXRpIFtzc11cbi8vISBhdXRob3IgOiBOaWNvbGFpIERhdmllczxtYWlsQG5pY29sYWkuaW8+IDogaHR0cHM6Ly9naXRodWIuY29tL25pY29sYWlkYXZpZXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NzJywge1xuICAgICAgICBtb250aHM6IFwiQmhpbWJpZHZ3YW5lX0luZGxvdmFuYV9JbmRsb3YnbGVua2h1bHVfTWFiYXNhX0lua2h3ZWtod2V0aV9JbmhsYWJhX0tob2x3YW5lX0luZ2NpX0lueW9uaV9JbXBoYWxhX0x3ZXRpX0luZ29uZ29uaVwiLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnQmhpX0luYV9JbnVfTWFiX0lua19JbmhfS2hvX0lnY19JbnlfSW1wX0x3ZV9JZ28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ0xpc29udGZvX1Vtc29tYnVsdWtvX0xlc2liaWxpX0xlc2l0c2F0ZnVfTGVzaW5lX0xlc2lobGFudV9VbWdjaWJlbG8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0xpc19VbWJfTHNiX0xlc19Mc2lfTHNoX1VtZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdMaV9Vc19MYl9MdF9Mc19MaF9VZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tOYW11aGxhIG5nYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tLdXNhc2EgbmdhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW25nYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJdG9sbyBuZ2FdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGVsaXBoZWxpbGVdIFtuZ2FdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnbmdhICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICd3ZW50ZWthIG5nYSAlcycsXG4gICAgICAgICAgICBzOiAnZW1penV6d2FuYSBsb21jYW5lJyxcbiAgICAgICAgICAgIHNzOiAnJWQgbXp1endhbmEnLFxuICAgICAgICAgICAgbTogJ3VtenV6dScsXG4gICAgICAgICAgICBtbTogJyVkIGVtaXp1enUnLFxuICAgICAgICAgICAgaDogJ2xpaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGVtYWhvcmEnLFxuICAgICAgICAgICAgZDogJ2xpbGFuZ2EnLFxuICAgICAgICAgICAgZGQ6ICclZCBlbWFsYW5nYScsXG4gICAgICAgICAgICBNOiAnaW55YW5nYScsXG4gICAgICAgICAgICBNTTogJyVkIHRpbnlhbmdhJyxcbiAgICAgICAgICAgIHk6ICd1bW55YWthJyxcbiAgICAgICAgICAgIHl5OiAnJWQgaW1pbnlha2EnLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZWt1c2VuaXxlbWluaXxlbnRzYW1iYW1hfGVidXN1a3UvLFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZWt1c2VuaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VtaW5pJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZW50c2FtYmFtYSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZWJ1c3VrdSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ2VrdXNlbmknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZW1pbmknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2VudHNhbWJhbWEnIHx8IG1lcmlkaWVtID09PSAnZWJ1c3VrdScpIHtcbiAgICAgICAgICAgICAgICBpZiAoaG91ciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogJyVkJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFN3ZWRpc2ggW3N2XVxuLy8hIGF1dGhvciA6IEplbnMgQWxtIDogaHR0cHM6Ly9naXRodWIuY29tL3VsbXVzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3YgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzdicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyaV9mZWJydWFyaV9tYXJzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0aV9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdzw7ZuZGFnX23DpW5kYWdfdGlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7ZyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc8O2bl9tw6VuX3Rpc19vbnNfdG9yX2ZyZV9sw7ZyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3PDtl9tw6VfdGlfb25fdG9fZnJfbMO2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCBEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSWRhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tJbW9yZ29uXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0lnw6VyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tQw6VdIGRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbSV0gZGRkZFtzXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdmw7ZyICVzIHNlZGFuJyxcbiAgICAgICAgICAgIHM6ICduw6VncmEgc2VrdW5kZXInLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRlcicsXG4gICAgICAgICAgICBtOiAnZW4gbWludXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVyJyxcbiAgICAgICAgICAgIGg6ICdlbiB0aW1tZScsXG4gICAgICAgICAgICBoaDogJyVkIHRpbW1hcicsXG4gICAgICAgICAgICBkOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgTTogJ2VuIG3DpW5hZCcsXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5hZGVyJyxcbiAgICAgICAgICAgIHk6ICdldHQgw6VyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw6VyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KFxcOmV8XFw6YSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICc6ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICc6YSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnOmEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICc6ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJzplJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTd2FoaWxpIFtzd11cbi8vISBhdXRob3IgOiBGYWhhZCBLYXNzaW0gOiBodHRwczovL2dpdGh1Yi5jb20vZmFkc2VsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzdycsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyaV9GZWJydWFyaV9NYWNoaV9BcHJpbGlfTWVpX0p1bmlfSnVsYWlfQWdvc3RpX1NlcHRlbWJhX09rdG9iYV9Ob3ZlbWJhX0Rlc2VtYmEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX0Fnb19TZXBfT2t0X05vdl9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ0p1bWFwaWxpX0p1bWF0YXR1X0p1bWFubmVfSnVtYXRhbm9fQWxoYW1pc2lfSWp1bWFhX0p1bWFtb3NpJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdKcGxfSnRhdF9Kbm5lX0p0YW5fQWxoX0lqbV9KbW9zJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0oyX0ozX0o0X0o1X0FsX0lqX0oxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2hoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tsZW8gc2FhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2tlc2hvIHNhYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbd2lraSBpamF5b10gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tqYW5hXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1t3aWtpIGlsaXlvcGl0YV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBiYWFkYXllJyxcbiAgICAgICAgICAgIHBhc3Q6ICd0b2tlYSAlcycsXG4gICAgICAgICAgICBzOiAnaGl2aSBwdW5kZScsXG4gICAgICAgICAgICBzczogJ3Nla3VuZGUgJWQnLFxuICAgICAgICAgICAgbTogJ2Rha2lrYSBtb2phJyxcbiAgICAgICAgICAgIG1tOiAnZGFraWthICVkJyxcbiAgICAgICAgICAgIGg6ICdzYWEgbGltb2phJyxcbiAgICAgICAgICAgIGhoOiAnbWFzYWEgJWQnLFxuICAgICAgICAgICAgZDogJ3Npa3UgbW9qYScsXG4gICAgICAgICAgICBkZDogJ3Npa3UgJWQnLFxuICAgICAgICAgICAgTTogJ213ZXppIG1tb2phJyxcbiAgICAgICAgICAgIE1NOiAnbWllemkgJWQnLFxuICAgICAgICAgICAgeTogJ213YWthIG1tb2phJyxcbiAgICAgICAgICAgIHl5OiAnbWlha2EgJWQnLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGFtaWwgW3RhXVxuLy8hIGF1dGhvciA6IEFyanVua3VtYXIgS3Jpc2huYW1vb3J0aHkgOiBodHRwczovL2dpdGh1Yi5jb20vdGsxMjA0MDRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4K+nJyxcbiAgICAgICAgICAgIDI6ICfgr6gnLFxuICAgICAgICAgICAgMzogJ+CvqScsXG4gICAgICAgICAgICA0OiAn4K+qJyxcbiAgICAgICAgICAgIDU6ICfgr6snLFxuICAgICAgICAgICAgNjogJ+CvrCcsXG4gICAgICAgICAgICA3OiAn4K+tJyxcbiAgICAgICAgICAgIDg6ICfgr64nLFxuICAgICAgICAgICAgOTogJ+CvrycsXG4gICAgICAgICAgICAwOiAn4K+mJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Cvpyc6ICcxJyxcbiAgICAgICAgICAgICfgr6gnOiAnMicsXG4gICAgICAgICAgICAn4K+pJzogJzMnLFxuICAgICAgICAgICAgJ+Cvqic6ICc0JyxcbiAgICAgICAgICAgICfgr6snOiAnNScsXG4gICAgICAgICAgICAn4K+sJzogJzYnLFxuICAgICAgICAgICAgJ+CvrSc6ICc3JyxcbiAgICAgICAgICAgICfgr64nOiAnOCcsXG4gICAgICAgICAgICAn4K+vJzogJzknLFxuICAgICAgICAgICAgJ+Cvpic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciB0YSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RhJywge1xuICAgICAgICBtb250aHM6ICfgrpzgrqngrrXgrrDgrr9f4K6q4K6/4K6q4K+N4K6w4K614K6w4K6/X+CuruCuvuCusOCvjeCumuCvjV/gro/grqrgr43grrDgrrLgr41f4K6u4K+HX+CunOCvguCuqeCvjV/grpzgr4LgrrLgr4hf4K6G4K6V4K644K+N4K6f4K+NX+CumuCvhuCuquCvjeCun+CvhuCuruCvjeCuquCusOCvjV/groXgrpXgr43grp/gr4fgrr7grqrgrrDgr41f4K6o4K614K6u4K+N4K6q4K6w4K+NX+Cun+Cuv+CumuCuruCvjeCuquCusOCvjScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4K6c4K6p4K614K6w4K6/X+CuquCuv+CuquCvjeCusOCuteCusOCuv1/grq7grr7grrDgr43grprgr41f4K6P4K6q4K+N4K6w4K6y4K+NX+CuruCvh1/grpzgr4Lgrqngr41f4K6c4K+C4K6y4K+IX+CuhuCuleCuuOCvjeCun+CvjV/grprgr4bgrqrgr43grp/gr4bgrq7gr43grqrgrrDgr41f4K6F4K6V4K+N4K6f4K+H4K6+4K6q4K6w4K+NX+CuqOCuteCuruCvjeCuquCusOCvjV/grp/grr/grprgrq7gr43grqrgrrDgr40nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn4K6e4K6+4K6v4K6/4K6x4K+N4K6x4K+B4K6V4K+N4K6V4K6/4K604K6u4K+IX+CupOCuv+CumeCvjeCuleCun+CvjeCuleCuv+CutOCuruCviF/grprgr4bgrrXgr43grrXgrr7grq/gr43grpXgrr/grrTgrq7gr4hf4K6q4K+B4K6k4K6p4K+N4K6V4K6/4K604K6u4K+IX+CuteCuv+Cur+CuvuCutOCuleCvjeCuleCuv+CutOCuruCviF/grrXgr4bgrrPgr43grrPgrr/grpXgr43grpXgrr/grrTgrq7gr4hf4K6a4K6p4K6/4K6V4K+N4K6V4K6/4K604K6u4K+IJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgrp7grr7grq/grr/grrHgr4Ff4K6k4K6/4K6Z4K+N4K6V4K6z4K+NX+CumuCvhuCuteCvjeCuteCuvuCur+CvjV/grqrgr4HgrqTgrqngr41f4K614K6/4K6v4K6+4K604K6p4K+NX+CuteCvhuCus+CvjeCus+Cuv1/grprgrqngrr8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4K6e4K6+X+CupOCuv1/grprgr4Zf4K6q4K+BX+CuteCuv1/grrXgr4Zf4K6aJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4K6H4K6p4K+N4K6x4K+BXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CuqOCuvuCus+CviF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CuqOCvh+CuseCvjeCuseCvgV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4K6V4K6f4K6o4K+N4K6kIOCuteCuvuCusOCuruCvjV0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgrofgrrLgr40nLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCuruCvgeCuqeCvjScsXG4gICAgICAgICAgICBzOiAn4K6S4K6w4K+BIOCumuCuv+CusiDgrrXgrr/grqjgrr7grp/grr/grpXgrrPgr40nLFxuICAgICAgICAgICAgc3M6ICclZCDgrrXgrr/grqjgrr7grp/grr/grpXgrrPgr40nLFxuICAgICAgICAgICAgbTogJ+CukuCusOCvgSDgrqjgrr/grq7grr/grp/grq7gr40nLFxuICAgICAgICAgICAgbW06ICclZCDgrqjgrr/grq7grr/grp/grpngr43grpXgrrPgr40nLFxuICAgICAgICAgICAgaDogJ+CukuCusOCvgSDgrq7grqPgrr8g4K6o4K+H4K6w4K6u4K+NJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4K6u4K6j4K6/IOCuqOCvh+CusOCuruCvjScsXG4gICAgICAgICAgICBkOiAn4K6S4K6w4K+BIOCuqOCuvuCus+CvjScsXG4gICAgICAgICAgICBkZDogJyVkIOCuqOCuvuCun+CvjeCuleCus+CvjScsXG4gICAgICAgICAgICBNOiAn4K6S4K6w4K+BIOCuruCuvuCupOCuruCvjScsXG4gICAgICAgICAgICBNTTogJyVkIOCuruCuvuCupOCumeCvjeCuleCus+CvjScsXG4gICAgICAgICAgICB5OiAn4K6S4K6w4K+BIOCuteCusOCvgeCun+CuruCvjScsXG4gICAgICAgICAgICB5eTogJyVkIOCuhuCuo+CvjeCun+CvgeCuleCus+CvjScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfeCuteCupOCvgS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4K614K6k4K+BJztcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cvp+CvqOCvqeCvquCvq+CvrOCvreCvruCvr+Cvpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gcmVmZXIgaHR0cDovL3RhLndpa2lwZWRpYS5vcmcvcy8xZXIxXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/grq/grr7grq7grq7gr4184K614K+I4K6V4K6x4K+IfOCuleCuvuCusuCviHzgrqjgrqPgr43grqrgrpXgrrLgr4184K6O4K6x4K+N4K6q4K6+4K6f4K+BfOCuruCuvuCusuCviC8sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrq/grr7grq7grq7gr40nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuteCviOCuleCuseCviCc7IC8vIOCuteCviOCuleCuseCviFxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrpXgrr7grrLgr4gnOyAvLyDgrpXgrr7grrLgr4hcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6o4K6j4K+N4K6q4K6V4K6y4K+NJzsgLy8g4K6o4K6j4K+N4K6q4K6V4K6y4K+NXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCujuCuseCvjeCuquCuvuCun+CvgSc7IC8vIOCujuCuseCvjeCuquCuvuCun+CvgVxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrq7grr7grrLgr4gnOyAvLyDgrq7grr7grrLgr4hcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6v4K6+4K6u4K6u4K+NJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4K6v4K6+4K6u4K6u4K+NJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgMiA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4K614K+I4K6V4K6x4K+IJyB8fCBtZXJpZGllbSA9PT0gJ+CuleCuvuCusuCviCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgrqjgrqPgr43grqrgrpXgrrLgr40nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGVsdWd1IFt0ZV1cbi8vISBhdXRob3IgOiBLcmlzaG5hIENoYWl0YW55YSBUaG90YSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rY3Rob3RhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdGUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZScsIHtcbiAgICAgICAgbW9udGhzOiAn4LCc4LCo4LC14LCw4LC/X+Cwq+Cwv+CwrOCxjeCwsOCwteCwsOCwv1/gsK7gsL7gsLDgsY3gsJrgsL9f4LCP4LCq4LGN4LCw4LC/4LCy4LGNX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGB4LCy4LGIX+CwhuCwl+CwuOCxjeCwn+CxgV/gsLjgsYbgsKrgsY3gsJ/gsYbgsILgsKzgsLDgsY1f4LCF4LCV4LGN4LCf4LGL4LCs4LCw4LGNX+CwqOCwteCwguCwrOCwsOCxjV/gsKHgsL/gsLjgsYbgsILgsKzgsLDgsY0nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CwnOCwqC5f4LCr4LC/4LCs4LGN4LCwLl/gsK7gsL7gsLDgsY3gsJrgsL9f4LCP4LCq4LGN4LCw4LC/Ll/gsK7gsYdf4LCc4LGC4LCo4LGNX+CwnOCxgeCwsuCxiF/gsIbgsJcuX+CwuOCxhuCwquCxjS5f4LCF4LCV4LGN4LCf4LGLLl/gsKjgsLUuX+CwoeCwv+CwuOCxhi4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn4LCG4LCm4LC/4LC14LC+4LCw4LCCX+CwuOCxi+CwruCwteCwvuCwsOCwgl/gsK7gsILgsJfgsLPgsLXgsL7gsLDgsIJf4LCs4LGB4LCn4LC14LC+4LCw4LCCX+Cwl+CxgeCwsOCxgeCwteCwvuCwsOCwgl/gsLbgsYHgsJXgsY3gsLDgsLXgsL7gsLDgsIJf4LC24LCo4LC/4LC14LC+4LCw4LCCJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgsIbgsKbgsL9f4LC44LGL4LCuX+CwruCwguCwl+Cws1/gsKzgsYHgsKdf4LCX4LGB4LCw4LGBX+CwtuCxgeCwleCxjeCwsF/gsLbgsKjgsL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4LCGX+CwuOCxi1/gsK7gsIJf4LCs4LGBX+Cwl+CxgV/gsLbgsYFf4LC2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CwqOCxh+CwoeCxgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgsLDgsYfgsKrgsYFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgsKjgsL/gsKjgsY3gsKhdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+Cwl+CwpF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgsLLgsYsnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCwleCxjeCwsOCwv+CwpOCwgicsXG4gICAgICAgICAgICBzOiAn4LCV4LGK4LCo4LGN4LCo4LC/IOCwleCxjeCwt+Cwo+CwvuCwsuCxgScsXG4gICAgICAgICAgICBzczogJyVkIOCwuOCxhuCwleCwqOCxjeCwsuCxgScsXG4gICAgICAgICAgICBtOiAn4LCS4LCVIOCwqOCwv+CwruCwv+Cwt+CwgicsXG4gICAgICAgICAgICBtbTogJyVkIOCwqOCwv+CwruCwv+Cwt+CwvuCwsuCxgScsXG4gICAgICAgICAgICBoOiAn4LCS4LCVIOCwl+CwguCwnycsXG4gICAgICAgICAgICBoaDogJyVkIOCwl+CwguCwn+CwsuCxgScsXG4gICAgICAgICAgICBkOiAn4LCS4LCVIOCwsOCxi+CwnOCxgScsXG4gICAgICAgICAgICBkZDogJyVkIOCwsOCxi+CwnOCxgeCwsuCxgScsXG4gICAgICAgICAgICBNOiAn4LCS4LCVIOCwqOCxhuCwsicsXG4gICAgICAgICAgICBNTTogJyVkIOCwqOCxhuCwsuCwsuCxgScsXG4gICAgICAgICAgICB5OiAn4LCS4LCVIOCwuOCwguCwteCwpOCxjeCwuOCwsOCwgicsXG4gICAgICAgICAgICB5eTogJyVkIOCwuOCwguCwteCwpOCxjeCwuOCwsOCwvuCwsuCxgScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfeCwtS8sXG4gICAgICAgIG9yZGluYWw6ICclZOCwtScsXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gsLDgsL7gsKTgsY3gsLDgsL984LCJ4LCm4LCv4LCCfOCwruCwp+CxjeCwr+CwvuCwueCxjeCwqOCwgnzgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIIvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgsLDgsL7gsKTgsY3gsLDgsL8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsIngsKbgsK/gsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCw4LC+4LCk4LGN4LCw4LC/JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsIngsKbgsK/gsIInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwruCwp+CxjeCwr+CwvuCwueCxjeCwqOCwgic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsLDgsL7gsKTgsY3gsLDgsL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGV0dW4gRGlsaSAoRWFzdCBUaW1vcikgW3RldF1cbi8vISBhdXRob3IgOiBKb3NodWEgQnJvb2tzIDogaHR0cHM6Ly9naXRodWIuY29tL2pvc2hicm9va3Ncbi8vISBhdXRob3IgOiBPbm9yaW8gRGUgSi4gQWZvbnNvIDogaHR0cHM6Ly9naXRodWIuY29tL21hcm9ib1xuLy8hIGF1dGhvciA6IFNvbmlhIFNpbW9lcyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zb25pYXNpbW9lc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRldCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RldCcsIHtcbiAgICAgICAgbW9udGhzOiAnSmFuZWlydV9GZXZlcmVpcnVfTWFyc3VfQWJyaWxfTWFpdV9KdcOxdV9KdWxsdV9BZ3VzdHVfU2V0ZW1icnVfT3V0dWJydV9Ob3ZlbWJydV9EZXplbWJydScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmV2X01hcl9BYnJfTWFpX0p1bl9KdWxfQWdvX1NldF9PdXRfTm92X0Rleicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdEb21pbmd1X1NlZ3VuZGFfVGVyc2FfS3VhcnRhX0tpbnRhX1Nlc3RhX1NhYmFkdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0RvbV9TZWdfVGVyc19LdWFfS2ludF9TZXN0X1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdEb19TZWdfVGVfS3VfS2lfU2VzX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW09oaW4gaWhhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0FiYW4gaWhhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2loYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIb3Jpc2VpayBpaGFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbc2VtYW5hIGtvdHVrXSBbaWhhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2loYSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgbGl1YmEnLFxuICAgICAgICAgICAgczogJ3NlZ3VuZHUgYmFsdW4nLFxuICAgICAgICAgICAgc3M6ICdzZWd1bmR1ICVkJyxcbiAgICAgICAgICAgIG06ICdtaW51dHUgaWRhJyxcbiAgICAgICAgICAgIG1tOiAnbWludXR1ICVkJyxcbiAgICAgICAgICAgIGg6ICdvcmFzIGlkYScsXG4gICAgICAgICAgICBoaDogJ29yYXMgJWQnLFxuICAgICAgICAgICAgZDogJ2xvcm9uIGlkYScsXG4gICAgICAgICAgICBkZDogJ2xvcm9uICVkJyxcbiAgICAgICAgICAgIE06ICdmdWxhbiBpZGEnLFxuICAgICAgICAgICAgTU06ICdmdWxhbiAlZCcsXG4gICAgICAgICAgICB5OiAndGluYW4gaWRhJyxcbiAgICAgICAgICAgIHl5OiAndGluYW4gJWQnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGV0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRhamlrIFt0Z11cbi8vISBhdXRob3IgOiBPcmlmIE4uIEpyLiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcmlmLWpyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDA6ICct0YPQvCcsXG4gICAgICAgIDE6ICct0YPQvCcsXG4gICAgICAgIDI6ICct0Y7QvCcsXG4gICAgICAgIDM6ICct0Y7QvCcsXG4gICAgICAgIDQ6ICct0YPQvCcsXG4gICAgICAgIDU6ICct0YPQvCcsXG4gICAgICAgIDY6ICct0YPQvCcsXG4gICAgICAgIDc6ICct0YPQvCcsXG4gICAgICAgIDg6ICct0YPQvCcsXG4gICAgICAgIDk6ICct0YPQvCcsXG4gICAgICAgIDEwOiAnLdGD0LwnLFxuICAgICAgICAxMjogJy3Rg9C8JyxcbiAgICAgICAgMTM6ICct0YPQvCcsXG4gICAgICAgIDIwOiAnLdGD0LwnLFxuICAgICAgICAzMDogJy3RjtC8JyxcbiAgICAgICAgNDA6ICct0YPQvCcsXG4gICAgICAgIDUwOiAnLdGD0LwnLFxuICAgICAgICA2MDogJy3Rg9C8JyxcbiAgICAgICAgNzA6ICct0YPQvCcsXG4gICAgICAgIDgwOiAnLdGD0LwnLFxuICAgICAgICA5MDogJy3Rg9C8JyxcbiAgICAgICAgMTAwOiAnLdGD0LwnLFxuICAgIH07XG5cbiAgICB2YXIgdGcgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZycsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfRj9C90LLQsNGA0Lhf0YTQtdCy0YDQsNC70Lhf0LzQsNGA0YLQuF/QsNC/0YDQtdC70Lhf0LzQsNC50Lhf0LjRjtC90Lhf0LjRjtC70Lhf0LDQstCz0YPRgdGC0Lhf0YHQtdC90YLRj9Cx0YDQuF/QvtC60YLRj9Cx0YDQuF/QvdC+0Y/QsdGA0Lhf0LTQtdC60LDQsdGA0LgnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ9GP0L3QstCw0YBf0YTQtdCy0YDQsNC7X9C80LDRgNGCX9Cw0L/RgNC10Ltf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGAX9C+0LrRgtGP0LHRgF/QvdC+0Y/QsdGAX9C00LXQutCw0LHRgCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0Y/QvdCyX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn0Y/QutGI0LDQvdCx0LVf0LTRg9GI0LDQvdCx0LVf0YHQtdGI0LDQvdCx0LVf0YfQvtGA0YjQsNC90LHQtV/Qv9Cw0L3St9GI0LDQvdCx0LVf0rfRg9C80YrQsF/RiNCw0L3QsdC1Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0Y/RiNCxX9C00YjQsV/RgdGI0LFf0YfRiNCxX9C/0YjQsV/St9GD0Lxf0YjQvdCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9GP0Yhf0LTRiF/RgdGIX9GH0Yhf0L/RiF/St9C8X9GI0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0JjQvNGA06/QtyDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Ck0LDRgNC00L4g0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQlNC40YDTr9C3INGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZFvQuF0gW9Kz0LDRhNGC0LDQuCDQvtGP0L3QtNCwINGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZFvQuF0gW9Kz0LDRhNGC0LDQuCDQs9GD0LfQsNGI0YLQsCDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9Cx0LDRitC00LggJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzINC/0LXRiCcsXG4gICAgICAgICAgICBzOiAn0Y/QutGH0LDQvdC0INGB0L7QvdC40Y8nLFxuICAgICAgICAgICAgbTogJ9GP0Log0LTQsNKb0LjSm9CwJyxcbiAgICAgICAgICAgIG1tOiAnJWQg0LTQsNKb0LjSm9CwJyxcbiAgICAgICAgICAgIGg6ICfRj9C6INGB0L7QsNGCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICAgICAgZDogJ9GP0Log0YDTr9C3JyxcbiAgICAgICAgICAgIGRkOiAnJWQg0YDTr9C3JyxcbiAgICAgICAgICAgIE06ICfRj9C6INC80L7SsycsXG4gICAgICAgICAgICBNTTogJyVkINC80L7SsycsXG4gICAgICAgICAgICB5OiAn0Y/QuiDRgdC+0LsnLFxuICAgICAgICAgICAgeXk6ICclZCDRgdC+0LsnLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0YjQsNCxfNGB0YPQsdKzfNGA06/Qt3zQsdC10LPQvtKzLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn0YjQsNCxJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn0YHRg9Cx0rMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn0YDTr9C3Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfQsdC10LPQvtKzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GI0LDQsSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YHRg9Cx0rMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA06/Qtyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LHQtdCz0L7Ssyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YjQsNCxJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRg9C8fNGO0LwpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBiID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW251bWJlcl0gfHwgc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxdGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGc7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGhhaSBbdGhdXG4vLyEgYXV0aG9yIDogS3JpZHNhZGEgVGhhbmFidWxwb25nIDogaHR0cHM6Ly9naXRodWIuY29tL3Npcm5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0aCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RoJywge1xuICAgICAgICBtb250aHM6ICfguKHguIHguKPguLLguITguKFf4LiB4Li44Lih4Lig4Liy4Lie4Lix4LiZ4LiY4LmMX+C4oeC4teC4meC4suC4hOC4oV/guYDguKHguKnguLLguKLguJlf4Lie4Lik4Lip4Lig4Liy4LiE4LihX+C4oeC4tOC4luC4uOC4meC4suC4ouC4mV/guIHguKPguIHguI7guLLguITguKFf4Liq4Li04LiH4Lir4Liy4LiE4LihX+C4geC4seC4meC4ouC4suC4ouC4mV/guJXguLjguKXguLLguITguKFf4Lie4Lik4Lio4LiI4Li04LiB4Liy4Lii4LiZX+C4mOC4seC4meC4p+C4suC4hOC4oScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4LihLuC4hC5f4LiBLuC4ni5f4Lih4Li1LuC4hC5f4LmA4LihLuC4oi5f4LieLuC4hC5f4Lih4Li0LuC4oi5f4LiBLuC4hC5f4LiqLuC4hC5f4LiBLuC4oi5f4LiVLuC4hC5f4LieLuC4oi5f4LiYLuC4hC4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfguK3guLLguJfguLTguJXguKLguYxf4LiI4Lix4LiZ4LiX4Lij4LmMX+C4reC4seC4h+C4hOC4suC4o1/guJ7guLjguJhf4Lie4Lik4Lir4Lix4Liq4Lia4LiU4Li1X+C4qOC4uOC4geC4o+C5jF/guYDguKrguLLguKPguYwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfguK3guLLguJfguLTguJXguKLguYxf4LiI4Lix4LiZ4LiX4Lij4LmMX+C4reC4seC4h+C4hOC4suC4o1/guJ7guLjguJhf4Lie4Lik4Lir4Lix4LiqX+C4qOC4uOC4geC4o+C5jF/guYDguKrguLLguKPguYwnLnNwbGl0KCdfJyksIC8vIHllcywgdGhyZWUgY2hhcmFjdGVycyBkaWZmZXJlbmNlXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4Lit4LiyLl/guIguX+C4rS5f4LieLl/guJ7guKQuX+C4qC5f4LiqLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSDguYDguKfguKXguLIgSDptbScsXG4gICAgICAgICAgICBMTExMOiAn4Lin4Lix4LiZZGRkZOC4l+C4teC5iCBEIE1NTU0gWVlZWSDguYDguKfguKXguLIgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/guIHguYjguK3guJnguYDguJfguLXguYjguKLguId84Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vguKfguLHguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+C4nuC4o+C4uOC5iOC4h+C4meC4teC5iSDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZFvguKvguJnguYnguLIg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+C5gOC4oeC4t+C5iOC4reC4p+C4suC4meC4meC4teC5iSDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+C4p+C4seC4mV1kZGRkW+C4l+C4teC5iOC5geC4peC5ieC4pyDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn4Lit4Li14LiBICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+C4l+C4teC5iOC5geC4peC5ieC4pycsXG4gICAgICAgICAgICBzOiAn4LmE4Lih4LmI4LiB4Li14LmI4Lin4Li04LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Lin4Li04LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIG06ICcxIOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBtbTogJyVkIOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBoOiAnMSDguIrguLHguYjguKfguYLguKHguIcnLFxuICAgICAgICAgICAgaGg6ICclZCDguIrguLHguYjguKfguYLguKHguIcnLFxuICAgICAgICAgICAgZDogJzEg4Lin4Lix4LiZJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Lin4Lix4LiZJyxcbiAgICAgICAgICAgIHc6ICcxIOC4quC4seC4m+C4lOC4suC4q+C5jCcsXG4gICAgICAgICAgICB3dzogJyVkIOC4quC4seC4m+C4lOC4suC4q+C5jCcsXG4gICAgICAgICAgICBNOiAnMSDguYDguJTguLfguK3guJknLFxuICAgICAgICAgICAgTU06ICclZCDguYDguJTguLfguK3guJknLFxuICAgICAgICAgICAgeTogJzEg4Lib4Li1JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Lib4Li1JyxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUdXJrbWVuIFt0a11cbi8vISBhdXRob3IgOiBBdGFteXJhdCBBYmR5cmFobWFub3YgOiBodHRwczovL2dpdGh1Yi5jb20vYXRhbXlyYXRhYmR5XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDE6IFwiJ2luamlcIixcbiAgICAgICAgNTogXCInaW5qaVwiLFxuICAgICAgICA4OiBcIidpbmppXCIsXG4gICAgICAgIDcwOiBcIidpbmppXCIsXG4gICAgICAgIDgwOiBcIidpbmppXCIsXG4gICAgICAgIDI6IFwiJ25qaVwiLFxuICAgICAgICA3OiBcIiduamlcIixcbiAgICAgICAgMjA6IFwiJ25qaVwiLFxuICAgICAgICA1MDogXCInbmppXCIsXG4gICAgICAgIDM6IFwiJ8O8bmppXCIsXG4gICAgICAgIDQ6IFwiJ8O8bmppXCIsXG4gICAgICAgIDEwMDogXCInw7xuamlcIixcbiAgICAgICAgNjogXCInbmp5XCIsXG4gICAgICAgIDk6IFwiJ3VuanlcIixcbiAgICAgICAgMTA6IFwiJ3VuanlcIixcbiAgICAgICAgMzA6IFwiJ3VuanlcIixcbiAgICAgICAgNjA6IFwiJ3luanlcIixcbiAgICAgICAgOTA6IFwiJ3luanlcIixcbiAgICB9O1xuXG4gICAgdmFyIHRrID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGsnLCB7XG4gICAgICAgIG1vbnRoczogJ8OdYW53YXJfRmV3cmFsX01hcnRfQXByZWxfTWHDvV9Jw711bl9Jw711bF9Bd2d1c3RfU2VudMO9YWJyX09rdMO9YWJyX05vw71hYnJfRGVrYWJyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ8OdYW5fRmV3X01hcl9BcHJfTWHDvV9Jw71uX0nDvWxfQXdnX1Nlbl9Pa3RfTm/DvV9EZWsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnw51la8WfZW5iZV9EdcWfZW5iZV9TacWfZW5iZV/Dh2FyxZ9lbmJlX1BlbsWfZW5iZV9Bbm5hX8WeZW5iZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ8OdZWtfRHXFn19TacWfX8OHYXJfUGVuX0Fubl/FnmVuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ8Oda19ExZ9fU8WfX8OHcl9Qbl9Bbl/Fnm4nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYnVnw7xuIHNhZ2F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2VydGlyIHNhZ2F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tpbmRpa2ldIGRkZGQgW3NhZ2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2TDvMO9bl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbZ2XDp2VuXSBkZGRkIFtzYWdhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBzb8WIJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDtsWIJyxcbiAgICAgICAgICAgIHM6ICdiaXJuw6TDp2Ugc2VrdW50JyxcbiAgICAgICAgICAgIG06ICdiaXIgbWludXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dCcsXG4gICAgICAgICAgICBoOiAnYmlyIHNhZ2F0JyxcbiAgICAgICAgICAgIGhoOiAnJWQgc2FnYXQnLFxuICAgICAgICAgICAgZDogJ2JpciBnw7xuJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZ8O8bicsXG4gICAgICAgICAgICBNOiAnYmlyIGHDvScsXG4gICAgICAgICAgICBNTTogJyVkIGHDvScsXG4gICAgICAgICAgICB5OiAnYmlyIMO9eWwnLFxuICAgICAgICAgICAgeXk6ICclZCDDvXlsJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RvJzpcbiAgICAgICAgICAgICAgICBjYXNlICdERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgXCIndW5qeVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gKG51bWJlciAlIDEwMCkgLSBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdIHx8IHN1ZmZpeGVzW2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRhZ2Fsb2cgKFBoaWxpcHBpbmVzKSBbdGwtcGhdXG4vLyEgYXV0aG9yIDogRGFuIEhhZ21hbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oYWdtYW5kYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0bFBoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGwtcGgnLCB7XG4gICAgICAgIG1vbnRoczogJ0VuZXJvX1BlYnJlcm9fTWFyc29fQWJyaWxfTWF5b19IdW55b19IdWx5b19BZ29zdG9fU2V0eWVtYnJlX09rdHVicmVfTm9ieWVtYnJlX0Rpc3llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdFbmVfUGViX01hcl9BYnJfTWF5X0h1bl9IdWxfQWdvX1NldF9Pa3RfTm9iX0Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdMaW5nZ29fTHVuZXNfTWFydGVzX01peWVya3VsZXNfSHV3ZWJlc19CaXllcm5lc19TYWJhZG8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdMaW5fTHVuX01hcl9NaXlfSHV3X0JpeV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnTGlfTHVfTWFfTWlfSHVfQmlfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnTU0vRC9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBERCwgWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnTFQgW25nYXlvbmcgYXJhd10nLFxuICAgICAgICAgICAgbmV4dERheTogJ1tCdWthcyBuZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdMVCBbc2Egc3VzdW5vZCBuYV0gZGRkZCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnTFQgW2thaGFwb25dJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnTFQgW25vb25nIG5ha2FyYWFuZ10gZGRkZCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3NhIGxvb2IgbmcgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFuZyBuYWthbGlwYXMnLFxuICAgICAgICAgICAgczogJ2lsYW5nIHNlZ3VuZG8nLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvJyxcbiAgICAgICAgICAgIG06ICdpc2FuZyBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG8nLFxuICAgICAgICAgICAgaDogJ2lzYW5nIG9yYXMnLFxuICAgICAgICAgICAgaGg6ICclZCBvcmFzJyxcbiAgICAgICAgICAgIGQ6ICdpc2FuZyBhcmF3JyxcbiAgICAgICAgICAgIGRkOiAnJWQgYXJhdycsXG4gICAgICAgICAgICBNOiAnaXNhbmcgYnV3YW4nLFxuICAgICAgICAgICAgTU06ICclZCBidXdhbicsXG4gICAgICAgICAgICB5OiAnaXNhbmcgdGFvbicsXG4gICAgICAgICAgICB5eTogJyVkIHRhb24nLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGxQaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLbGluZ29uIFt0bGhdXG4vLyEgYXV0aG9yIDogRG9taW5pa2EgS3J1ayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbWFyYW50aHJvc2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBudW1iZXJzTm91bnMgPSAncGFnaF93YeKAmV9jaGHigJlfd2VqX2xvU192YWdoX2phdl9Tb2NoX2Nob3JnaF9IdXQnLnNwbGl0KCdfJyk7XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVGdXR1cmUob3V0cHV0KSB7XG4gICAgICAgIHZhciB0aW1lID0gb3V0cHV0O1xuICAgICAgICB0aW1lID1cbiAgICAgICAgICAgIG91dHB1dC5pbmRleE9mKCdqYWonKSAhPT0gLTFcbiAgICAgICAgICAgICAgICA/IHRpbWUuc2xpY2UoMCwgLTMpICsgJ2xlUydcbiAgICAgICAgICAgICAgICA6IG91dHB1dC5pbmRleE9mKCdqYXInKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAgID8gdGltZS5zbGljZSgwLCAtMykgKyAnd2FRJ1xuICAgICAgICAgICAgICAgICAgOiBvdXRwdXQuaW5kZXhPZignRElTJykgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgID8gdGltZS5zbGljZSgwLCAtMykgKyAnbmVtJ1xuICAgICAgICAgICAgICAgICAgICA6IHRpbWUgKyAnIHBJcSc7XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVBhc3Qob3V0cHV0KSB7XG4gICAgICAgIHZhciB0aW1lID0gb3V0cHV0O1xuICAgICAgICB0aW1lID1cbiAgICAgICAgICAgIG91dHB1dC5pbmRleE9mKCdqYWonKSAhPT0gLTFcbiAgICAgICAgICAgICAgICA/IHRpbWUuc2xpY2UoMCwgLTMpICsgJ0h14oCZJ1xuICAgICAgICAgICAgICAgIDogb3V0cHV0LmluZGV4T2YoJ2phcicpICE9PSAtMVxuICAgICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICd3ZW4nXG4gICAgICAgICAgICAgICAgICA6IG91dHB1dC5pbmRleE9mKCdESVMnKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICdiZW4nXG4gICAgICAgICAgICAgICAgICAgIDogdGltZSArICcgcmV0JztcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgbnVtYmVyTm91biA9IG51bWJlckFzTm91bihudW1iZXIpO1xuICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBsdXAnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyB0dXAnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyByZXAnO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBqYWonO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBqYXInO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBESVMnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbnVtYmVyQXNOb3VuKG51bWJlcikge1xuICAgICAgICB2YXIgaHVuZHJlZCA9IE1hdGguZmxvb3IoKG51bWJlciAlIDEwMDApIC8gMTAwKSxcbiAgICAgICAgICAgIHRlbiA9IE1hdGguZmxvb3IoKG51bWJlciAlIDEwMCkgLyAxMCksXG4gICAgICAgICAgICBvbmUgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgIHdvcmQgPSAnJztcbiAgICAgICAgaWYgKGh1bmRyZWQgPiAwKSB7XG4gICAgICAgICAgICB3b3JkICs9IG51bWJlcnNOb3Vuc1todW5kcmVkXSArICd2YXRsaCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRlbiA+IDApIHtcbiAgICAgICAgICAgIHdvcmQgKz0gKHdvcmQgIT09ICcnID8gJyAnIDogJycpICsgbnVtYmVyc05vdW5zW3Rlbl0gKyAnbWFIJztcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSAod29yZCAhPT0gJycgPyAnICcgOiAnJykgKyBudW1iZXJzTm91bnNbb25lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd29yZCA9PT0gJycgPyAncGFnaCcgOiB3b3JkO1xuICAgIH1cblxuICAgIHZhciB0bGggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0bGgnLCB7XG4gICAgICAgIG1vbnRoczogJ3RlcmHigJkgamFyIHdh4oCZX3RlcmHigJkgamFyIGNoYeKAmV90ZXJh4oCZIGphciB3ZWpfdGVyYeKAmSBqYXIgbG9TX3RlcmHigJkgamFyIHZhZ2hfdGVyYeKAmSBqYXIgamF2X3RlcmHigJkgamFyIFNvY2hfdGVyYeKAmSBqYXIgY2hvcmdoX3RlcmHigJkgamFyIEh1dF90ZXJh4oCZIGphciB3YeKAmW1hSF90ZXJh4oCZIGphciB3YeKAmW1hSCB3YeKAmV90ZXJh4oCZIGphciB3YeKAmW1hSCBjaGHigJknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phciB3YeKAmV9qYXIgY2hh4oCZX2phciB3ZWpfamFyIGxvU19qYXIgdmFnaF9qYXIgamF2X2phciBTb2NoX2phciBjaG9yZ2hfamFyIEh1dF9qYXIgd2HigJltYUhfamFyIHdh4oCZbWFIIHdh4oCZX2phciB3YeKAmW1hSCBjaGHigJknLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDpcbiAgICAgICAgICAgICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46XG4gICAgICAgICAgICAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbRGFIamFqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3dh4oCZbGVTXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ0xMTCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3dh4oCZSHXigJldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnTExMJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiB0cmFuc2xhdGVGdXR1cmUsXG4gICAgICAgICAgICBwYXN0OiB0cmFuc2xhdGVQYXN0LFxuICAgICAgICAgICAgczogJ3B1UyBsdXAnLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06ICd3YeKAmSB0dXAnLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6ICd3YeKAmSByZXAnLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6ICd3YeKAmSBqYWonLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06ICd3YeKAmSBqYXInLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICd3YeKAmSBESVMnLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0bGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVHVya2lzaCBbdHJdXG4vLyEgYXV0aG9ycyA6IEVyaGFuIEd1bmRvZ2FuIDogaHR0cHM6Ly9naXRodWIuY29tL2VyaGFuZ3VuZG9nYW4sXG4vLyEgICAgICAgICAgIEJ1cmFrIFlpxJ9pdCBLYXlhOiBodHRwczovL2dpdGh1Yi5jb20vQllLXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDE6IFwiJ2luY2lcIixcbiAgICAgICAgNTogXCInaW5jaVwiLFxuICAgICAgICA4OiBcIidpbmNpXCIsXG4gICAgICAgIDcwOiBcIidpbmNpXCIsXG4gICAgICAgIDgwOiBcIidpbmNpXCIsXG4gICAgICAgIDI6IFwiJ25jaVwiLFxuICAgICAgICA3OiBcIiduY2lcIixcbiAgICAgICAgMjA6IFwiJ25jaVwiLFxuICAgICAgICA1MDogXCInbmNpXCIsXG4gICAgICAgIDM6IFwiJ8O8bmPDvFwiLFxuICAgICAgICA0OiBcIifDvG5jw7xcIixcbiAgICAgICAgMTAwOiBcIifDvG5jw7xcIixcbiAgICAgICAgNjogXCInbmPEsVwiLFxuICAgICAgICA5OiBcIid1bmN1XCIsXG4gICAgICAgIDEwOiBcIid1bmN1XCIsXG4gICAgICAgIDMwOiBcIid1bmN1XCIsXG4gICAgICAgIDYwOiBcIifEsW5jxLFcIixcbiAgICAgICAgOTA6IFwiJ8SxbmPEsVwiLFxuICAgIH07XG5cbiAgICB2YXIgdHIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0cicsIHtcbiAgICAgICAgbW9udGhzOiAnT2Nha1/FnnViYXRfTWFydF9OaXNhbl9NYXnEsXNfSGF6aXJhbl9UZW1tdXpfQcSfdXN0b3NfRXlsw7xsX0VraW1fS2FzxLFtX0FyYWzEsWsnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnT2NhX8WedWJfTWFyX05pc19NYXlfSGF6X1RlbV9BxJ91X0V5bF9Fa2lfS2FzX0FyYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdQYXphcl9QYXphcnRlc2lfU2FsxLFfw4dhcsWfYW1iYV9QZXLFn2VtYmVfQ3VtYV9DdW1hcnRlc2knLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdQYXpfUHp0X1NhbF/Dh2FyX1Blcl9DdW1fQ210Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1B6X1B0X1NhX8OHYV9QZV9DdV9DdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfDtsO2JyA6ICfDlsOWJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnw7ZzJyA6ICfDllMnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvw7bDtnzDlsOWfMO2c3zDllMvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ8O2cycgfHwgaW5wdXQgPT09ICfDllMnO1xuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2J1Z8O8biBzYWF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3lhcsSxbiBzYWF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tnZWxlY2VrXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2TDvG5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2dlw6dlbl0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBzb25yYScsXG4gICAgICAgICAgICBwYXN0OiAnJXMgw7ZuY2UnLFxuICAgICAgICAgICAgczogJ2Jpcmthw6cgc2FuaXllJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2FuaXllJyxcbiAgICAgICAgICAgIG06ICdiaXIgZGFraWthJyxcbiAgICAgICAgICAgIG1tOiAnJWQgZGFraWthJyxcbiAgICAgICAgICAgIGg6ICdiaXIgc2FhdCcsXG4gICAgICAgICAgICBoaDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgZDogJ2JpciBnw7xuJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZ8O8bicsXG4gICAgICAgICAgICB3OiAnYmlyIGhhZnRhJyxcbiAgICAgICAgICAgIHd3OiAnJWQgaGFmdGEnLFxuICAgICAgICAgICAgTTogJ2JpciBheScsXG4gICAgICAgICAgICBNTTogJyVkIGF5JyxcbiAgICAgICAgICAgIHk6ICdiaXIgecSxbCcsXG4gICAgICAgICAgICB5eTogJyVkIHnEsWwnLFxuICAgICAgICB9LFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRG8nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0REJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIHplcm9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBcIifEsW5jxLFcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IChudW1iZXIgJSAxMDApIC0gYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0cjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUYWxvc3NhbiBbdHpsXVxuLy8hIGF1dGhvciA6IFJvYmluIHZhbiBkZXIgVmxpZXQgOiBodHRwczovL2dpdGh1Yi5jb20vcm9iaW4wdmFuMGRlcjB2XG4vLyEgYXV0aG9yIDogSXVzdMOsIENhbnVuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICAvLyBBZnRlciB0aGUgeWVhciB0aGVyZSBzaG91bGQgYmUgYSBzbGFzaCBhbmQgdGhlIGFtb3VudCBvZiB5ZWFycyBzaW5jZSBEZWNlbWJlciAyNiwgMTk3OSBpbiBSb21hbiBudW1lcmFscy5cbiAgICAvLyBUaGlzIGlzIGN1cnJlbnRseSB0b28gZGlmZmljdWx0IChtYXliZSBldmVuIGltcG9zc2libGUpIHRvIGFkZC5cbiAgICB2YXIgdHpsID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHpsJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJfRmV2cmFnbGhfTWFyw6dfQXZyw691X01haV9Hw7xuX0p1bGlhX0d1c2NodF9TZXRlbXZhcl9MaXN0b3DDpHRzX05vZW12YXJfWmVjZW12YXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0Zldl9NYXJfQXZyX01haV9Hw7xuX0p1bF9HdXNfU2V0X0xpc19Ob2VfWmVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1PDumxhZGlfTMO6bmXDp2lfTWFpdHppX03DoXJjdXJpX1how7phZGlfVmnDqW5lcsOnaV9Tw6F0dXJpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU8O6bF9Mw7puX01haV9Nw6FyX1how7pfVmnDqV9Tw6F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1PDul9Mw7pfTWFfTcOhX1hoX1ZpX1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFtkYWxsYXNdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBbZGFsbGFzXSBZWVlZIEhILm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBbbGldIEQuIE1NTU0gW2RhbGxhc10gWVlZWSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9kXFwnb3xkXFwnYS9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBcImQnb1wiID09PSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gXCJkJ29cIiA6IFwiRCdPXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gXCJkJ2FcIiA6IFwiRCdBXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW294aGkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbZGVtw6Agw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaWVpcmkgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW3PDvHIgZWxdIGRkZGQgW2xhc3RldSDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvc3ByZWkgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2phJXMnLFxuICAgICAgICAgICAgczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHM6IFsndmllbnNhcyBzZWN1bmRzJywgXCInaWVuc2FzIHNlY3VuZHNcIl0sXG4gICAgICAgICAgICBzczogW251bWJlciArICcgc2VjdW5kcycsICcnICsgbnVtYmVyICsgJyBzZWN1bmRzJ10sXG4gICAgICAgICAgICBtOiBbXCInbiBtw611dFwiLCBcIidpZW5zIG3DrXV0XCJdLFxuICAgICAgICAgICAgbW06IFtudW1iZXIgKyAnIG3DrXV0cycsICcnICsgbnVtYmVyICsgJyBtw611dHMnXSxcbiAgICAgICAgICAgIGg6IFtcIiduIMO+b3JhXCIsIFwiJ2llbnNhIMO+b3JhXCJdLFxuICAgICAgICAgICAgaGg6IFtudW1iZXIgKyAnIMO+b3JhcycsICcnICsgbnVtYmVyICsgJyDDvm9yYXMnXSxcbiAgICAgICAgICAgIGQ6IFtcIiduIHppdWFcIiwgXCInaWVuc2Egeml1YVwiXSxcbiAgICAgICAgICAgIGRkOiBbbnVtYmVyICsgJyB6aXVhcycsICcnICsgbnVtYmVyICsgJyB6aXVhcyddLFxuICAgICAgICAgICAgTTogW1wiJ24gbWVzXCIsIFwiJ2llbnMgbWVzXCJdLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIG1lc2VuJywgJycgKyBudW1iZXIgKyAnIG1lc2VuJ10sXG4gICAgICAgICAgICB5OiBbXCInbiBhclwiLCBcIidpZW5zIGFyXCJdLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIGFycycsICcnICsgbnVtYmVyICsgJyBhcnMnXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlXG4gICAgICAgICAgICA/IGZvcm1hdFtrZXldWzBdXG4gICAgICAgICAgICA6IHdpdGhvdXRTdWZmaXhcbiAgICAgICAgICAgICAgPyBmb3JtYXRba2V5XVswXVxuICAgICAgICAgICAgICA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHJldHVybiB0emw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2VudHJhbCBBdGxhcyBUYW1hemlnaHQgW3R6bV1cbi8vISBhdXRob3IgOiBBYmRlbCBTYWlkIDogaHR0cHM6Ly9naXRodWIuY29tL2FiZGVsc2FpZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHR6bSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bScsIHtcbiAgICAgICAgbW9udGhzOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+K1ieK1j+K1j+K0sOK1ouK1lF/itLHitZXitLDitaLitZVf4rWO4rSw4rWV4rWaX+K1ieK0seK1lOK1ieK1lF/itY7itLDitaLitaLitZNf4rWi4rWT4rWP4rWi4rWTX+K1ouK1k+K1jeK1ouK1k+K1o1/itZbitZPitZvitZxf4rWb4rWT4rWc4rSw4rWP4rSx4rWJ4rWUX+K0veK1n+K1k+K0seK1lV/itY/itZPitaHitLDitY/itLHitYnitZRf4rS34rWT4rWK4rWP4rSx4rWJ4rWUJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+K0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+K0sOK1meK0t+K1hSDitLRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4rSw4rWZ4rS94rSwIOK0tF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvitLRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4rSw4rWa4rSw4rWP4rWcIOK0tF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvitLRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn4rS34rSw4rS34rWFIOK1mSDitaLitLDitY8gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ+K1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBzOiAn4rWJ4rWO4rWJ4rS9JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4rWJ4rWO4rWJ4rS9JyxcbiAgICAgICAgICAgIG06ICfitY7itYnitY/itZPitLonLFxuICAgICAgICAgICAgbW06ICclZCDitY7itYnitY/itZPitLonLFxuICAgICAgICAgICAgaDogJ+K1meK0sOK1hOK0sCcsXG4gICAgICAgICAgICBoaDogJyVkIOK1nOK0sOK1meK1meK0sOK1hOK1ieK1jycsXG4gICAgICAgICAgICBkOiAn4rSw4rWZ4rWZJyxcbiAgICAgICAgICAgIGRkOiAnJWQgb+K1meK1meK0sOK1jycsXG4gICAgICAgICAgICBNOiAn4rSw4rWib+K1k+K1lCcsXG4gICAgICAgICAgICBNTTogJyVkIOK1ieK1ouK1ouK1ieK1lOK1jycsXG4gICAgICAgICAgICB5OiAn4rSw4rWZ4rSz4rSw4rWZJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4rWJ4rWZ4rSz4rSw4rWZ4rWPJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0em07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2VudHJhbCBBdGxhcyBUYW1hemlnaHQgTGF0aW4gW3R6bS1sYXRuXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdHptTGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bS1sYXRuJywge1xuICAgICAgICBtb250aHM6ICdpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAnYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaeG4jXlhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaeG4jXlhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2FzZGtoIGddIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbYXNrYSBnXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ddIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbYXNzYW50IGddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYWRraCBzIHlhbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAneWFuICVzJyxcbiAgICAgICAgICAgIHM6ICdpbWlrJyxcbiAgICAgICAgICAgIHNzOiAnJWQgaW1paycsXG4gICAgICAgICAgICBtOiAnbWludeG4jScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnXhuI0nLFxuICAgICAgICAgICAgaDogJ3NhyZthJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdGFzc2HJm2luJyxcbiAgICAgICAgICAgIGQ6ICdhc3MnLFxuICAgICAgICAgICAgZGQ6ICclZCBvc3NhbicsXG4gICAgICAgICAgICBNOiAnYXlvd3InLFxuICAgICAgICAgICAgTU06ICclZCBpeXlpcm4nLFxuICAgICAgICAgICAgeTogJ2FzZ2FzJyxcbiAgICAgICAgICAgIHl5OiAnJWQgaXNnYXNuJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0em1MYXRuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFV5Z2h1ciAoQ2hpbmEpIFt1Zy1jbl1cbi8vISBhdXRob3I6IGJveWFxIDogaHR0cHM6Ly9naXRodWIuY29tL2JveWFxXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdWdDbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3VnLWNuJywge1xuICAgICAgICBtb250aHM6ICfZitin2Ybbi9in2LFf2YHbkNuL2LHYp9mEX9mF2KfYsdiqX9im2KfZvtix25DZhF/Zhdin2Ypf2KbZidmK24fZhl/YptmJ2Yrbh9mEX9im2Kfbi9i624fYs9iqX9iz25DZhtiq25XYqNmJ2LFf2KbbhtmD2Krbldio2YnYsV/ZhtmI2YrYp9io2YnYsV/Yr9uQ2YPYp9io2YnYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn2YrYp9mG24vYp9ixX9mB25Dbi9ix2KfZhF/Zhdin2LHYql/Yptin2b7YsduQ2YRf2YXYp9mKX9im2YnZituH2YZf2KbZidmK24fZhF/Yptin24vYutuH2LPYql/Ys9uQ2YbYqtuV2KjZidixX9im24bZg9iq25XYqNmJ2LFf2YbZiNmK2KfYqNmJ2LFf2K/bkNmD2KfYqNmJ2LEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfZituV2YPYtNuV2YbYqNuVX9iv24jYtNuV2YbYqNuVX9iz25XZiti025XZhtio25Vf2obYp9ix2LTbldmG2KjblV/ZvtuV2YrYtNuV2YbYqNuVX9is24jZhduVX9i025XZhtio25UnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfZituVX9iv24hf2LPblV/ahtinX9m+25Vf2KzbiF/YtNuVJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9mK25Vf2K/biF/Ys9uVX9qG2Kdf2b7blV/YrNuIX9i025UnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZiScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZLdmK2YnZhNmJTS3Yptin2YrZhtmJ2q1ELdmD24jZhtmJ2IwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGTYjCBZWVlZLdmK2YnZhNmJTS3Yptin2YrZhtmJ2q1ELdmD24jZhtmJ2IwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2YrbkNix2YnZhSDZg9uQ2obblXzYs9uV2r7bldixfNqG24jYtNiq2YnZhiDYqNuH2LHbh9mGfNqG24jYtHzahtuI2LTYqtmJ2YYg2YPbkNmK2YnZhnzZg9uV2oYvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfZituQ2LHZidmFINmD25DahtuVJyB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn2LPbldq+25XYsScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ9qG24jYtNiq2YnZhiDYqNuH2LHbh9mGJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn2obbiNi02KrZidmGINmD25DZitmJ2YYnIHx8IG1lcmlkaWVtID09PSAn2YPbldqGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mK25DYsdmJ2YUg2YPbkNqG25UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LPbldq+25XYsSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2obbiNi02KrZidmGINio24fYsduH2YYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2obbiNi02KrZidmGINmD25DZitmJ2YYnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mD25Xahic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9io24jar9uI2YYg2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYptuV2KrblSDYs9in2KbbldiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vZg9uQ2YTbldix2YPZiV0gZGRkZCBb2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYqtuG2YbbiNqv24jZhl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb2KbYp9mE2K/ZidmG2YLZiV0gZGRkZCBb2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDZg9uQ2YrZidmGJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDYqNuH2LHbh9mGJyxcbiAgICAgICAgICAgIHM6ICfZhtuV2obahtuVINiz25DZg9mI2YbYqicsXG4gICAgICAgICAgICBzczogJyVkINiz25DZg9mI2YbYqicsXG4gICAgICAgICAgICBtOiAn2KjZidixINmF2YnZhtuH2KonLFxuICAgICAgICAgICAgbW06ICclZCDZhdmJ2Ybbh9iqJyxcbiAgICAgICAgICAgIGg6ICfYqNmJ2LEg2LPYp9im25XYqicsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYptuV2KonLFxuICAgICAgICAgICAgZDogJ9io2YnYsSDZg9uI2YYnLFxuICAgICAgICAgICAgZGQ6ICclZCDZg9uI2YYnLFxuICAgICAgICAgICAgTTogJ9io2YnYsSDYptin2YonLFxuICAgICAgICAgICAgTU06ICclZCDYptin2YonLFxuICAgICAgICAgICAgeTogJ9io2YnYsSDZitmJ2YQnLFxuICAgICAgICAgICAgeXk6ICclZCDZitmJ2YQnLFxuICAgICAgICB9LFxuXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSgt2YPbiNmG2Yl8Ldim2KfZinwt2r7bldm+2KrblSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct2YPbiNmG2YknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3avtuV2b7YqtuVJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIC8vIEdCL1QgNzQwOC0xOTk044CK5pWw5o2u5YWD5ZKM5Lqk5o2i5qC85byPwrfkv6Hmga/kuqTmjaLCt+aXpeacn+WSjOaXtumXtOihqOekuuazleOAi+S4jklTTyA4NjAxOjE5ODjnrYnmlYhcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB1Z0NuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFVrcmFpbmlhbiBbdWtdXG4vLyEgYXV0aG9yIDogemVtbGFuaW4gOiBodHRwczovL2dpdGh1Yi5jb20vemVtbGFuaW5cbi8vISBBdXRob3IgOiBNZW5lbGlvbiBFbGVuc8O6bGUgOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgICAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExXG4gICAgICAgICAgICA/IGZvcm1zWzBdXG4gICAgICAgICAgICA6IG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKVxuICAgICAgICAgICAgICA/IGZvcm1zWzFdXG4gICAgICAgICAgICAgIDogZm9ybXNbMl07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHNzOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNC4X9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Lhf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG1tOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLQuNC70LjQvdCwX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvScgOiAn0YXQstC40LvQuNC90YNf0YXQstC40LvQuNC90Lhf0YXQstC40LvQuNC9JyxcbiAgICAgICAgICAgIGhoOiB3aXRob3V0U3VmZml4ID8gJ9Cz0L7QtNC40L3QsF/Qs9C+0LTQuNC90Lhf0LPQvtC00LjQvScgOiAn0LPQvtC00LjQvdGDX9Cz0L7QtNC40L3QuF/Qs9C+0LTQuNC9JyxcbiAgICAgICAgICAgIGRkOiAn0LTQtdC90Yxf0LTQvdGWX9C00L3RltCyJyxcbiAgICAgICAgICAgIE1NOiAn0LzRltGB0Y/RhtGMX9C80ZbRgdGP0YbRll/QvNGW0YHRj9GG0ZbQsicsXG4gICAgICAgICAgICB5eTogJ9GA0ZbQul/RgNC+0LrQuF/RgNC+0LrRltCyJyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdCy0LjQu9C40L3QsCcgOiAn0YXQstC40LvQuNC90YMnO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2gnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LAnIDogJ9Cz0L7QtNC40L3Rgyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c0Nhc2VSZXBsYWNlKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSB7XG4gICAgICAgICAgICAgICAgbm9taW5hdGl2ZTpcbiAgICAgICAgICAgICAgICAgICAgJ9C90LXQtNGW0LvRj1/Qv9C+0L3QtdC00ZbQu9C+0Lpf0LLRltCy0YLQvtGA0L7Qul/RgdC10YDQtdC00LBf0YfQtdGC0LLQtdGAX9C/4oCZ0Y/RgtC90LjRhtGPX9GB0YPQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBhY2N1c2F0aXZlOlxuICAgICAgICAgICAgICAgICAgICAn0L3QtdC00ZbQu9GOX9C/0L7QvdC10LTRltC70L7Qul/QstGW0LLRgtC+0YDQvtC6X9GB0LXRgNC10LTRg1/Rh9C10YLQstC10YBf0L/igJnRj9GC0L3QuNGG0Y5f0YHRg9Cx0L7RgtGDJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGdlbml0aXZlOlxuICAgICAgICAgICAgICAgICAgICAn0L3QtdC00ZbQu9GWX9C/0L7QvdC10LTRltC70LrQsF/QstGW0LLRgtC+0YDQutCwX9GB0LXRgNC10LTQuF/Rh9C10YLQstC10YDQs9CwX9C/4oCZ0Y/RgtC90LjRhtGWX9GB0YPQsdC+0YLQuCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBub3VuQ2FzZTtcblxuICAgICAgICBpZiAobSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ11cbiAgICAgICAgICAgICAgICAuc2xpY2UoMSwgNylcbiAgICAgICAgICAgICAgICAuY29uY2F0KHdlZWtkYXlzWydub21pbmF0aXZlJ10uc2xpY2UoMCwgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ107XG4gICAgICAgIH1cblxuICAgICAgICBub3VuQ2FzZSA9IC8oXFxbW9CS0LLQo9GDXVxcXSkgP2RkZGQvLnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgPyAnYWNjdXNhdGl2ZSdcbiAgICAgICAgICAgIDogL1xcWz8oPzrQvNC40L3Rg9C70L7Rl3zQvdCw0YHRgtGD0L/QvdC+0ZcpPyA/XFxdID9kZGRkLy50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgPyAnZ2VuaXRpdmUnXG4gICAgICAgICAgICAgIDogJ25vbWluYXRpdmUnO1xuICAgICAgICByZXR1cm4gd2Vla2RheXNbbm91bkNhc2VdW20uZGF5KCldO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzSG91cnNGdW5jdGlvbihzdHIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIgKyAn0L4nICsgKHRoaXMuaG91cnMoKSA9PT0gMTEgPyAn0LEnIDogJycpICsgJ10gTFQnO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciB1ayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3VrJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GB0ZbRh9C90Y9f0LvRjtGC0L7Qs9C+X9Cx0LXRgNC10LfQvdGPX9C60LLRltGC0L3Rj1/RgtGA0LDQstC90Y9f0YfQtdGA0LLQvdGPX9C70LjQv9C90Y9f0YHQtdGA0L/QvdGPX9Cy0LXRgNC10YHQvdGPX9C20L7QstGC0L3Rj1/Qu9C40YHRgtC+0L/QsNC00LBf0LPRgNGD0LTQvdGPJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfRgdGW0YfQtdC90Yxf0LvRjtGC0LjQuV/QsdC10YDQtdC30LXQvdGMX9C60LLRltGC0LXQvdGMX9GC0YDQsNCy0LXQvdGMX9GH0LXRgNCy0LXQvdGMX9C70LjQv9C10L3RjF/RgdC10YDQv9C10L3RjF/QstC10YDQtdGB0LXQvdGMX9C20L7QstGC0LXQvdGMX9C70LjRgdGC0L7Qv9Cw0LRf0LPRgNGD0LTQtdC90YwnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ9GB0ZbRh1/Qu9GO0YJf0LHQtdGAX9C60LLRltGCX9GC0YDQsNCyX9GH0LXRgNCyX9C70LjQv1/RgdC10YDQv1/QstC10YBf0LbQvtCy0YJf0LvQuNGB0YJf0LPRgNGD0LQnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiB3ZWVrZGF5c0Nhc2VSZXBsYWNlLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvdC0X9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZINGALicsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSDRgC4sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSDRgC4sIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KHRjNC+0LPQvtC00L3RliAnKSxcbiAgICAgICAgICAgIG5leHREYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JfQsNCy0YLRgNCwICcpLFxuICAgICAgICAgICAgbGFzdERheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQktGH0L7RgNCwICcpLFxuICAgICAgICAgICAgbmV4dFdlZWs6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KNdIGRkZGQgWycpLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JzQuNC90YPQu9C+0ZddIGRkZGQgWycpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQnNC40L3Rg9C70L7Qs9C+XSBkZGRkIFsnKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9C30LAgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzINGC0L7QvNGDJyxcbiAgICAgICAgICAgIHM6ICfQtNC10LrRltC70YzQutCwINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzczogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGg6ICfQs9C+0LTQuNC90YMnLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkOiAn0LTQtdC90YwnLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNOiAn0LzRltGB0Y/RhtGMJyxcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogJ9GA0ZbQuicsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gTS4gRS46IHRob3NlIHR3byBhcmUgdmlydHVhbGx5IHVudXNlZCBidXQgYSB1c2VyIG1pZ2h0IHdhbnQgdG8gaW1wbGVtZW50IHRoZW0gZm9yIGhpcy9oZXIgd2Vic2l0ZSBmb3Igc29tZSByZWFzb25cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9GWfNGA0LDQvdC60YN80LTQvdGPfNCy0LXRh9C+0YDQsC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNC00L3Rj3zQstC10YfQvtGA0LApJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C90L7Rh9GWJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgNCw0L3QutGDJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C+0YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvikvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9C+JztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdWs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVXJkdSBbdXJdXG4vLyEgYXV0aG9yIDogU2F3b29kIEFsYW0gOiBodHRwczovL2dpdGh1Yi5jb20vaWJuZXNheWVlZFxuLy8hIGF1dGhvciA6IFphY2sgOiBodHRwczovL2dpdGh1Yi5jb20vWmFja1Zpc2lvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfYrNmG2YjYsduMJyxcbiAgICAgICAgICAgICfZgdix2YjYsduMJyxcbiAgICAgICAgICAgICfZhdin2LHahicsXG4gICAgICAgICAgICAn2KfZvtix24zZhCcsXG4gICAgICAgICAgICAn2YXYptuMJyxcbiAgICAgICAgICAgICfYrNmI2YYnLFxuICAgICAgICAgICAgJ9is2YjZhNin2KbbjCcsXG4gICAgICAgICAgICAn2Kfar9iz2KonLFxuICAgICAgICAgICAgJ9iz2KrZhdio2LEnLFxuICAgICAgICAgICAgJ9in2qnYqtmI2KjYsScsXG4gICAgICAgICAgICAn2YbZiNmF2KjYsScsXG4gICAgICAgICAgICAn2K/Ys9mF2KjYsScsXG4gICAgICAgIF0sXG4gICAgICAgIGRheXMgPSBbJ9in2KrZiNin2LEnLCAn2b7bjNixJywgJ9mF2Ybar9mEJywgJ9io2K/avicsICfYrNmF2LnYsdin2KonLCAn2KzZhdi524EnLCAn24HZgdiq24EnXTtcblxuICAgIHZhciB1ciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3VyJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6IGRheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkYXlzLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRk2IwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LXYqNitfNi02KfZhS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i12KjYrSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ9i02KfZhSc7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9ii2Kwg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2qnZhCDYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1var9iw2LTYqtuBINix2YjYsiDYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb2q/YsNi02KrbgV0gZGRkZCBb2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg2KjYudivJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDZgtio2YQnLFxuICAgICAgICAgICAgczogJ9qG2YbYryDYs9uM2qnZhtqIJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2LPbjNqp2YbaiCcsXG4gICAgICAgICAgICBtOiAn2KfbjNqpINmF2YbZuScsXG4gICAgICAgICAgICBtbTogJyVkINmF2YbZuScsXG4gICAgICAgICAgICBoOiAn2KfbjNqpINqv2r7Zhtm524EnLFxuICAgICAgICAgICAgaGg6ICclZCDar9q+2YbZuduSJyxcbiAgICAgICAgICAgIGQ6ICfYp9uM2qkg2K/ZhicsXG4gICAgICAgICAgICBkZDogJyVkINiv2YYnLFxuICAgICAgICAgICAgTTogJ9in24zaqSDZhdin24EnLFxuICAgICAgICAgICAgTU06ICclZCDZhdin24EnLFxuICAgICAgICAgICAgeTogJ9in24zaqSDYs9in2YQnLFxuICAgICAgICAgICAgeXk6ICclZCDYs9in2YQnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB1cjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVemJlayBbdXpdXG4vLyEgYXV0aG9yIDogU2FyZG9yIE11bWlub3YgOiBodHRwczovL2dpdGh1Yi5jb20vbXVtaW5vZmZcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB1eiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3V6Jywge1xuICAgICAgICBtb250aHM6ICfRj9C90LLQsNGAX9GE0LXQstGA0LDQu1/QvNCw0YDRgl/QsNC/0YDQtdC7X9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgF/QvtC60YLRj9Cx0YBf0L3QvtGP0LHRgF/QtNC10LrQsNCx0YAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0Y/QvdCyX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn0K/QutGI0LDQvdCx0LBf0JTRg9GI0LDQvdCx0LBf0KHQtdGI0LDQvdCx0LBf0KfQvtGA0YjQsNC90LHQsF/Qn9Cw0LnRiNCw0L3QsdCwX9CW0YPQvNCwX9Co0LDQvdCx0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQr9C60Yhf0JTRg9GIX9Ch0LXRiF/Qp9C+0YBf0J/QsNC5X9CW0YPQvF/QqNCw0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0K/Qul/QlNGDX9Ch0LVf0KfQvl/Qn9CwX9CW0YNf0KjQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnRCBNTU1NIFlZWVksIGRkZGQgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQkdGD0LPRg9C9INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQrdGA0YLQsNCz0LBdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9C60YPQvdC4INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQmtC10YfQsCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9Cj0YLQs9Cw0L1dIGRkZGQgW9C60YPQvdC4INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQr9C60LjQvSAlcyDQuNGH0LjQtNCwJyxcbiAgICAgICAgICAgIHBhc3Q6ICfQkdC40YAg0L3QtdGH0LAgJXMg0L7Qu9C00LjQvScsXG4gICAgICAgICAgICBzOiAn0YTRg9GA0YHQsNGCJyxcbiAgICAgICAgICAgIHNzOiAnJWQg0YTRg9GA0YHQsNGCJyxcbiAgICAgICAgICAgIG06ICfQsdC40YAg0LTQsNC60LjQutCwJyxcbiAgICAgICAgICAgIG1tOiAnJWQg0LTQsNC60LjQutCwJyxcbiAgICAgICAgICAgIGg6ICfQsdC40YAg0YHQvtCw0YInLFxuICAgICAgICAgICAgaGg6ICclZCDRgdC+0LDRgicsXG4gICAgICAgICAgICBkOiAn0LHQuNGAINC60YPQvScsXG4gICAgICAgICAgICBkZDogJyVkINC60YPQvScsXG4gICAgICAgICAgICBNOiAn0LHQuNGAINC+0LknLFxuICAgICAgICAgICAgTU06ICclZCDQvtC5JyxcbiAgICAgICAgICAgIHk6ICfQsdC40YAg0LnQuNC7JyxcbiAgICAgICAgICAgIHl5OiAnJWQg0LnQuNC7JyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHV6O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFV6YmVrIExhdGluIFt1ei1sYXRuXVxuLy8hIGF1dGhvciA6IFJhc3VsYmVrIE1pcnpheWV2IDogZ2l0aHViLmNvbS9SYXN1bGJlZWVrXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdXpMYXRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXotbGF0bicsIHtcbiAgICAgICAgbW9udGhzOiAnWWFudmFyX0ZldnJhbF9NYXJ0X0FwcmVsX01heV9JeXVuX0l5dWxfQXZndXN0X1NlbnRhYnJfT2t0YWJyX05veWFicl9EZWthYnInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnWWFuX0Zldl9NYXJfQXByX01heV9JeXVuX0l5dWxfQXZnX1Nlbl9Pa3RfTm95X0Rlaycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnWWFrc2hhbmJhX0R1c2hhbmJhX1Nlc2hhbmJhX0Nob3JzaGFuYmFfUGF5c2hhbmJhX0p1bWFfU2hhbmJhJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdZYWtfRHVzaF9TZXNoX0Nob3JfUGF5X0p1bV9TaGFuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1lhX0R1X1NlX0Nob19QYV9KdV9TaGEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ0QgTU1NTSBZWVlZLCBkZGRkIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQnVndW4gc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0VydGFnYV0gTFQgW2RhXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2t1bmkgc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0tlY2hhIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6IFwiW08ndGdhbl0gZGRkZCBba3VuaSBzb2F0XSBMVCBbZGFdXCIsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ1lhcWluICVzIGljaGlkYScsXG4gICAgICAgICAgICBwYXN0OiAnQmlyIG5lY2hhICVzIG9sZGluJyxcbiAgICAgICAgICAgIHM6ICdzb25peWEnLFxuICAgICAgICAgICAgc3M6ICclZCBzb25peWEnLFxuICAgICAgICAgICAgbTogJ2JpciBkYXFpcWEnLFxuICAgICAgICAgICAgbW06ICclZCBkYXFpcWEnLFxuICAgICAgICAgICAgaDogJ2JpciBzb2F0JyxcbiAgICAgICAgICAgIGhoOiAnJWQgc29hdCcsXG4gICAgICAgICAgICBkOiAnYmlyIGt1bicsXG4gICAgICAgICAgICBkZDogJyVkIGt1bicsXG4gICAgICAgICAgICBNOiAnYmlyIG95JyxcbiAgICAgICAgICAgIE1NOiAnJWQgb3knLFxuICAgICAgICAgICAgeTogJ2JpciB5aWwnLFxuICAgICAgICAgICAgeXk6ICclZCB5aWwnLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXpMYXRuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFZpZXRuYW1lc2UgW3ZpXVxuLy8hIGF1dGhvciA6IEJhbmcgTmd1eWVuIDogaHR0cHM6Ly9naXRodWIuY29tL2Jhbmdua1xuLy8hIGF1dGhvciA6IENoaWVuIEtpcmEgOiBodHRwczovL2dpdGh1Yi5jb20vY2hpZW5raXJhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdmkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd2aScsIHtcbiAgICAgICAgbW9udGhzOiAndGjDoW5nIDFfdGjDoW5nIDJfdGjDoW5nIDNfdGjDoW5nIDRfdGjDoW5nIDVfdGjDoW5nIDZfdGjDoW5nIDdfdGjDoW5nIDhfdGjDoW5nIDlfdGjDoW5nIDEwX3Row6FuZyAxMV90aMOhbmcgMTInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ1RoZyAwMV9UaGcgMDJfVGhnIDAzX1RoZyAwNF9UaGcgMDVfVGhnIDA2X1RoZyAwN19UaGcgMDhfVGhnIDA5X1RoZyAxMF9UaGcgMTFfVGhnIDEyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnY2jhu6cgbmjhuq10X3Ro4bupIGhhaV90aOG7qSBiYV90aOG7qSB0xrBfdGjhu6kgbsSDbV90aOG7qSBzw6F1X3Ro4bupIGLhuqN5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnQ05fVDJfVDNfVDRfVDVfVDZfVDcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnQ05fVDJfVDNfVDRfVDVfVDZfVDcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3NhfGNoL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eY2gkL2kudGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnc2EnIDogJ1NBJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnY2gnIDogJ0NIJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gW27Eg21dIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFtuxINtXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ0REL00vWVlZWScsXG4gICAgICAgICAgICBsbDogJ0QgTU1NIFlZWVknLFxuICAgICAgICAgICAgbGxsOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkLCBEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSMO0bSBuYXkgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tOZ8OgeSBtYWkgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt0deG6p24gdOG7m2kgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIw7RtIHF1YSBsw7pjXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3R14bqnbiB0csaw4bubYyBsw7pjXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIHThu5tpJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB0csaw4bubYycsXG4gICAgICAgICAgICBzOiAndsOgaSBnacOieScsXG4gICAgICAgICAgICBzczogJyVkIGdpw6J5JyxcbiAgICAgICAgICAgIG06ICdt4buZdCBwaMO6dCcsXG4gICAgICAgICAgICBtbTogJyVkIHBow7p0JyxcbiAgICAgICAgICAgIGg6ICdt4buZdCBnaeG7nScsXG4gICAgICAgICAgICBoaDogJyVkIGdp4budJyxcbiAgICAgICAgICAgIGQ6ICdt4buZdCBuZ8OgeScsXG4gICAgICAgICAgICBkZDogJyVkIG5nw6B5JyxcbiAgICAgICAgICAgIHc6ICdt4buZdCB0deG6p24nLFxuICAgICAgICAgICAgd3c6ICclZCB0deG6p24nLFxuICAgICAgICAgICAgTTogJ23hu5l0IHRow6FuZycsXG4gICAgICAgICAgICBNTTogJyVkIHRow6FuZycsXG4gICAgICAgICAgICB5OiAnbeG7mXQgbsSDbScsXG4gICAgICAgICAgICB5eTogJyVkIG7Eg20nLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUHNldWRvIFt4LXBzZXVkb11cbi8vISBhdXRob3IgOiBBbmRyZXcgSG9vZCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRyZXdob29kMTI1XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgeFBzZXVkbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3gtcHNldWRvJywge1xuICAgICAgICBtb250aHM6ICdKfsOhw7HDusOhfnLDvV9GfsOpYnLDun7DoXLDvV9+TcOhcmN+aF/DgXB+csOtbF9+TcOhw71ffkrDusOxw6l+X0rDumx+w71fw4HDun5nw7pzdH5fU8OpcH50w6ltYn7DqXJfw5N+Y3TDs2J+w6lyX8ORfsOzdsOpbX5iw6lyX35Ew6ljw6l+bWLDqXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ0p+w6HDsV9+RsOpYl9+TcOhcl9+w4Fwcl9+TcOhw71ffkrDusOxX35Kw7psX37DgcO6Z19+U8OpcF9+w5NjdF9+w5HDs3ZffkTDqWMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnU37DusOxZMOhfsO9X03Ds37DsWTDocO9fl9Uw7rDqX5zZMOhw71+X1fDqWR+w7HDqXNkfsOhw71fVH5ow7pyc35kw6HDvV9+RnLDrWR+w6HDvV9TfsOhdMO6cn5kw6HDvScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU37DusOxX35Nw7PDsV9+VMO6w6lfflfDqWRfflRow7pffkZyw61fflPDoXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU37Dul9Nw7N+X1TDul9+V8OpX1R+aF9Gcn5fU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVH7Ds2TDoX7DvSDDoXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVH7Ds23Ds35ycsOzfncgw6F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8OhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vDnX7DqXN0fsOpcmTDoX7DvSDDoXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0x+w6FzdF0gZGRkZCBbw6F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ8OtfsOxICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDoX5nw7MnLFxuICAgICAgICAgICAgczogJ8OhIH5mw6l3IH5zw6ljw7N+w7FkcycsXG4gICAgICAgICAgICBzczogJyVkIHN+w6ljw7PDsX5kcycsXG4gICAgICAgICAgICBtOiAnw6Egfm3DrcOxfsO6dMOpJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbX7DrcOxw7p+dMOpcycsXG4gICAgICAgICAgICBoOiAnw6F+w7EgaMOzfsO6cicsXG4gICAgICAgICAgICBoaDogJyVkIGh+w7PDunJzJyxcbiAgICAgICAgICAgIGQ6ICfDoSB+ZMOhw70nLFxuICAgICAgICAgICAgZGQ6ICclZCBkfsOhw71zJyxcbiAgICAgICAgICAgIE06ICfDoSB+bcOzw7F+dGgnLFxuICAgICAgICAgICAgTU06ICclZCBtfsOzw7F0fmhzJyxcbiAgICAgICAgICAgIHk6ICfDoSB+w73DqcOhcicsXG4gICAgICAgICAgICB5eTogJyVkIMO9fsOpw6FycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB4UHNldWRvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFlvcnViYSBOaWdlcmlhIFt5b11cbi8vISBhdXRob3IgOiBBdG9sYWdiZSBBYmlzb3llIDogaHR0cHM6Ly9naXRodWIuY29tL2FuZGVsYS1iYXRvbGFnYmVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB5byA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3lvJywge1xuICAgICAgICBtb250aHM6ICdT4bq5zIFy4bq5zIFfRcyAcmXMgGxlzIBf4bq4cuG6ucyAbmHMgF9JzIBnYmXMgV9FzIBiaWJpX0/MgGt1zIBkdV9BZ+G6uW1vX0/MgGd1zIFuX093ZXdlX+G7jMyAd2HMgHJhzIBfQmXMgWx1zIFf4buMzIBw4bq5zIDMgCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdT4bq5zIFyX0XMgHJsX+G6uHJuX0nMgGdiX0XMgGJpX0/MgGt1zIBfQWfhurlfT8yAZ3XMgV9Pd2Vf4buMzIB3YcyAX0JlzIFsX+G7jMyAcOG6ucyAzIAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnQcyAacyAa3XMgV9BamXMgV9JzIBz4bq5zIFndW5f4buMauG7jcyBcnXMgV/hu4xq4buNzIFi4buNX+G6uHRpzIBfQcyAYmHMgW3hurnMgXRhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnQcyAacyAa19BamXMgV9JzIBz4bq5zIFf4buManJf4buMamJf4bq4dGnMgF9BzIBiYcyBJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0HMgGnMgF9Bal9JzIBzX+G7jHJf4buMYl/hurh0X0HMgGInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0/MgG5pzIAgbmldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4buMzIBsYSBuaV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IFwiZGRkZCBb4buMc+G6ucyAIHRvzIFuJ2Lhu41dIFtuaV0gTFRcIixcbiAgICAgICAgICAgIGxhc3REYXk6ICdbQcyAbmEgbmldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4buMc+G6ucyAIHRvzIFs4buNzIFdIFtuaV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICduacyBICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBr4buNamHMgScsXG4gICAgICAgICAgICBzOiAnacyAc+G6uWp1zIEgYWF5YcyBIGRpZScsXG4gICAgICAgICAgICBzczogJ2FheWHMgSAlZCcsXG4gICAgICAgICAgICBtOiAnacyAc+G6uWp1zIEga2FuJyxcbiAgICAgICAgICAgIG1tOiAnacyAc+G6uWp1zIEgJWQnLFxuICAgICAgICAgICAgaDogJ3dhzIFrYXRpIGthbicsXG4gICAgICAgICAgICBoaDogJ3dhzIFrYXRpICVkJyxcbiAgICAgICAgICAgIGQ6ICfhu41q4buNzIEga2FuJyxcbiAgICAgICAgICAgIGRkOiAn4buNauG7jcyBICVkJyxcbiAgICAgICAgICAgIE06ICdvc3XMgCBrYW4nLFxuICAgICAgICAgICAgTU06ICdvc3XMgCAlZCcsXG4gICAgICAgICAgICB5OiAn4buNZHXMgW4ga2FuJyxcbiAgICAgICAgICAgIHl5OiAn4buNZHXMgW4gJWQnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAv4buNauG7jcyBXFxzXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsOiAn4buNauG7jcyBICVkJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHlvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENoaW5lc2UgKENoaW5hKSBbemgtY25dXG4vLyEgYXV0aG9yIDogc3V1cGljIDogaHR0cHM6Ly9naXRodWIuY29tL3N1dXBpY1xuLy8hIGF1dGhvciA6IFplbm8gWmVuZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5vemVuZ1xuLy8hIGF1dGhvciA6IHV1MTA5IDogaHR0cHM6Ly9naXRodWIuY29tL3V1MTA5XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgemhDbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLWNuJywge1xuICAgICAgICBtb250aHM6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICflkajml6Vf5ZGo5LiAX+WRqOS6jF/lkajkuIlf5ZGo5ZubX+WRqOS6lF/lkajlha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ5bm0TeaciETml6VBaOeCuW1t5YiGJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZ5bm0TeaciETml6VkZGRkQWjngrltbeWIhicsXG4gICAgICAgICAgICBsOiAnWVlZWS9NL0QnLFxuICAgICAgICAgICAgbGw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHwgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAn5Lit5Y2IJ1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WHjOaZqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgOTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfml6nkuIonO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4iuWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Lit5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxODAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIvljYgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aZmuS4iic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+S7iuWkqV1MVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+aYjuWkqV1MVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vkuItdZGRkTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW+acrF1kZGRMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb5pio5aSpXUxUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2VlaygpICE9PSBub3cud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW+S4il1kZGRMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5pysXWRkZExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh85ZGoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICflkagnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPlkI4nLFxuICAgICAgICAgICAgcGFzdDogJyVz5YmNJyxcbiAgICAgICAgICAgIHM6ICflh6Dnp5InLFxuICAgICAgICAgICAgc3M6ICclZCDnp5InLFxuICAgICAgICAgICAgbTogJzEg5YiG6ZKfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg5YiG6ZKfJyxcbiAgICAgICAgICAgIGg6ICcxIOWwj+aXticsXG4gICAgICAgICAgICBoaDogJyVkIOWwj+aXticsXG4gICAgICAgICAgICBkOiAnMSDlpKknLFxuICAgICAgICAgICAgZGQ6ICclZCDlpKknLFxuICAgICAgICAgICAgdzogJzEg5ZGoJyxcbiAgICAgICAgICAgIHd3OiAnJWQg5ZGoJyxcbiAgICAgICAgICAgIE06ICcxIOS4quaciCcsXG4gICAgICAgICAgICBNTTogJyVkIOS4quaciCcsXG4gICAgICAgICAgICB5OiAnMSDlubQnLFxuICAgICAgICAgICAgeXk6ICclZCDlubQnLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICAvLyBHQi9UIDc0MDgtMTk5NOOAiuaVsOaNruWFg+WSjOS6pOaNouagvOW8j8K35L+h5oGv5Lqk5o2iwrfml6XmnJ/lkozml7bpl7TooajnpLrms5XjgIvkuI5JU08gODYwMToxOTg4562J5pWIXG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhDbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaGluZXNlIChIb25nIEtvbmcpIFt6aC1oa11cbi8vISBhdXRob3IgOiBCZW4gOiBodHRwczovL2dpdGh1Yi5jb20vYmVuLWxpblxuLy8hIGF1dGhvciA6IENocmlzIExhbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oZWhhY2hyaXNcbi8vISBhdXRob3IgOiBLb25zdGFudGluIDogaHR0cHM6Ly9naXRodWIuY29tL3NrZmRcbi8vISBhdXRob3IgOiBBbnRob255IDogaHR0cHM6Ly9naXRodWIuY29tL2FudGhvbnlsYXVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB6aEhrID0gbW9tZW50LmRlZmluZUxvY2FsZSgnemgtaGsnLCB7XG4gICAgICAgIG1vbnRoczogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+aYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+mAseaXpV/pgLHkuIBf6YCx5LqMX+mAseS4iV/pgLHlm5tf6YCx5LqUX+mAseWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgICAgICBsOiAnWVlZWS9NL0QnLFxuICAgICAgICAgICAgbGw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHwgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5Lit5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuIvljYgnIHx8IG1lcmlkaWVtID09PSAn5pma5LiKJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA9PT0gMTIwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Lit5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxODAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIvljYgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aZmuS4iic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+S7iuWkqV1MVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+aYjuWkqV1MVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb5pio5aSpXUxUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+S4il1kZGRkTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh86YCxKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfpgLEnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPlvownLFxuICAgICAgICAgICAgcGFzdDogJyVz5YmNJyxcbiAgICAgICAgICAgIHM6ICflub7np5InLFxuICAgICAgICAgICAgc3M6ICclZCDnp5InLFxuICAgICAgICAgICAgbTogJzEg5YiG6ZCYJyxcbiAgICAgICAgICAgIG1tOiAnJWQg5YiG6ZCYJyxcbiAgICAgICAgICAgIGg6ICcxIOWwj+aZgicsXG4gICAgICAgICAgICBoaDogJyVkIOWwj+aZgicsXG4gICAgICAgICAgICBkOiAnMSDlpKknLFxuICAgICAgICAgICAgZGQ6ICclZCDlpKknLFxuICAgICAgICAgICAgTTogJzEg5YCL5pyIJyxcbiAgICAgICAgICAgIE1NOiAnJWQg5YCL5pyIJyxcbiAgICAgICAgICAgIHk6ICcxIOW5tCcsXG4gICAgICAgICAgICB5eTogJyVkIOW5tCcsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhIaztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaGluZXNlIChNYWNhdSkgW3poLW1vXVxuLy8hIGF1dGhvciA6IEJlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZW4tbGluXG4vLyEgYXV0aG9yIDogQ2hyaXMgTGFtIDogaHR0cHM6Ly9naXRodWIuY29tL2hlaGFjaHJpc1xuLy8hIGF1dGhvciA6IFRhbiBZdWFuaG9uZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sZTB0YW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB6aE1vID0gbW9tZW50LmRlZmluZUxvY2FsZSgnemgtbW8nLCB7XG4gICAgICAgIG1vbnRoczogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+aYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+mAseaXpV/pgLHkuIBf6YCx5LqMX+mAseS4iV/pgLHlm5tf6YCx5LqUX+mAseWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgICAgICBsOiAnRC9NL1lZWVknLFxuICAgICAgICAgICAgbGw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHwgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5Lit5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuIvljYgnIHx8IG1lcmlkaWVtID09PSAn5pma5LiKJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vku4rlpKldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb5piO5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vkuItdZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+aYqOWkqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb5LiKXWRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh86YCxKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfpgLEnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPlhacnLFxuICAgICAgICAgICAgcGFzdDogJyVz5YmNJyxcbiAgICAgICAgICAgIHM6ICflub7np5InLFxuICAgICAgICAgICAgc3M6ICclZCDnp5InLFxuICAgICAgICAgICAgbTogJzEg5YiG6ZCYJyxcbiAgICAgICAgICAgIG1tOiAnJWQg5YiG6ZCYJyxcbiAgICAgICAgICAgIGg6ICcxIOWwj+aZgicsXG4gICAgICAgICAgICBoaDogJyVkIOWwj+aZgicsXG4gICAgICAgICAgICBkOiAnMSDlpKknLFxuICAgICAgICAgICAgZGQ6ICclZCDlpKknLFxuICAgICAgICAgICAgTTogJzEg5YCL5pyIJyxcbiAgICAgICAgICAgIE1NOiAnJWQg5YCL5pyIJyxcbiAgICAgICAgICAgIHk6ICcxIOW5tCcsXG4gICAgICAgICAgICB5eTogJyVkIOW5tCcsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhNbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaGluZXNlIChUYWl3YW4pIFt6aC10d11cbi8vISBhdXRob3IgOiBCZW4gOiBodHRwczovL2dpdGh1Yi5jb20vYmVuLWxpblxuLy8hIGF1dGhvciA6IENocmlzIExhbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oZWhhY2hyaXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB6aFR3ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnemgtdHcnLCB7XG4gICAgICAgIG1vbnRoczogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+aYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+mAseaXpV/pgLHkuIBf6YCx5LqMX+mAseS4iV/pgLHlm5tf6YCx5LqUX+mAseWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgICAgICBsOiAnWVlZWS9NL0QnLFxuICAgICAgICAgICAgbGw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHwgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5Lit5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuIvljYgnIHx8IG1lcmlkaWVtID09PSAn5pma5LiKJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vku4rlpKldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb5piO5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vkuItdZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+aYqOWkqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb5LiKXWRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh86YCxKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfpgLEnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPlvownLFxuICAgICAgICAgICAgcGFzdDogJyVz5YmNJyxcbiAgICAgICAgICAgIHM6ICflub7np5InLFxuICAgICAgICAgICAgc3M6ICclZCDnp5InLFxuICAgICAgICAgICAgbTogJzEg5YiG6ZCYJyxcbiAgICAgICAgICAgIG1tOiAnJWQg5YiG6ZCYJyxcbiAgICAgICAgICAgIGg6ICcxIOWwj+aZgicsXG4gICAgICAgICAgICBoaDogJyVkIOWwj+aZgicsXG4gICAgICAgICAgICBkOiAnMSDlpKknLFxuICAgICAgICAgICAgZGQ6ICclZCDlpKknLFxuICAgICAgICAgICAgTTogJzEg5YCL5pyIJyxcbiAgICAgICAgICAgIE1NOiAnJWQg5YCL5pyIJyxcbiAgICAgICAgICAgIHk6ICcxIOW5tCcsXG4gICAgICAgICAgICB5eTogJyVkIOW5tCcsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhUdztcblxufSkpKTtcbiIsIi8vIC5kaXJuYW1lLCAuYmFzZW5hbWUsIGFuZCAuZXh0bmFtZSBtZXRob2RzIGFyZSBleHRyYWN0ZWQgZnJvbSBOb2RlLmpzIHY4LjExLjEsXG4vLyBiYWNrcG9ydGVkIGFuZCB0cmFuc3BsaXRlZCB3aXRoIEJhYmVsLCB3aXRoIGJhY2t3YXJkcy1jb21wYXQgZml4ZXNcblxuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gcGF0aC5yZXNvbHZlKFtmcm9tIC4uLl0sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZXNvbHZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNvbHZlZFBhdGggPSAnJyxcbiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gLTEgJiYgIXJlc29sdmVkQWJzb2x1dGU7IGktLSkge1xuICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpO1xuXG4gICAgLy8gU2tpcCBlbXB0eSBhbmQgaW52YWxpZCBlbnRyaWVzXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgIHJlc29sdmVkQWJzb2x1dGUgPSBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAvLyBoYW5kbGUgcmVsYXRpdmUgcGF0aHMgdG8gYmUgc2FmZSAobWlnaHQgaGFwcGVuIHdoZW4gcHJvY2Vzcy5jd2QoKSBmYWlscylcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFyZXNvbHZlZEFic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nO1xufTtcblxuLy8gcGF0aC5ub3JtYWxpemUocGF0aClcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMubm9ybWFsaXplID0gZnVuY3Rpb24ocGF0aCkge1xuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7XG5cbiAgaWYgKCFwYXRoICYmICFpc0Fic29sdXRlKSB7XG4gICAgcGF0aCA9ICcuJztcbiAgfVxuICBpZiAocGF0aCAmJiB0cmFpbGluZ1NsYXNoKSB7XG4gICAgcGF0aCArPSAnLyc7XG4gIH1cblxuICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcGF0aHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICByZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufTtcblxuXG4vLyBwYXRoLnJlbGF0aXZlKGZyb20sIHRvKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5yZWxhdGl2ZSA9IGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gIGZyb20gPSBleHBvcnRzLnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO1xuXG4gIGZ1bmN0aW9uIHRyaW0oYXJyKSB7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBmb3IgKDsgc3RhcnQgPCBhcnIubGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoYXJyW3N0YXJ0XSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBlbmQgPSBhcnIubGVuZ3RoIC0gMTtcbiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7XG4gICAgICBpZiAoYXJyW2VuZF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gYXJyLnNsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCArIDEpO1xuICB9XG5cbiAgdmFyIGZyb21QYXJ0cyA9IHRyaW0oZnJvbS5zcGxpdCgnLycpKTtcbiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpO1xuXG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLCB0b1BhcnRzLmxlbmd0aCk7XG4gIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICBzYW1lUGFydHNMZW5ndGggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG91dHB1dFBhcnRzID0gW107XG4gIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpO1xuICB9XG5cbiAgb3V0cHV0UGFydHMgPSBvdXRwdXRQYXJ0cy5jb25jYXQodG9QYXJ0cy5zbGljZShzYW1lUGFydHNMZW5ndGgpKTtcblxuICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpO1xufTtcblxuZXhwb3J0cy5zZXAgPSAnLyc7XG5leHBvcnRzLmRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gJy4nO1xuICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdCgwKTtcbiAgdmFyIGhhc1Jvb3QgPSBjb2RlID09PSA0NyAvKi8qLztcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyAtLWkpIHtcbiAgICBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvclxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiBoYXNSb290ID8gJy8nIDogJy4nO1xuICBpZiAoaGFzUm9vdCAmJiBlbmQgPT09IDEpIHtcbiAgICAvLyByZXR1cm4gJy8vJztcbiAgICAvLyBCYWNrd2FyZHMtY29tcGF0IGZpeDpcbiAgICByZXR1cm4gJy8nO1xuICB9XG4gIHJldHVybiBwYXRoLnNsaWNlKDAsIGVuZCk7XG59O1xuXG5mdW5jdGlvbiBiYXNlbmFtZShwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHBhdGggPSBwYXRoICsgJyc7XG5cbiAgdmFyIHN0YXJ0ID0gMDtcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgdmFyIGk7XG5cbiAgZm9yIChpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZW5kID09PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgLy8gcGF0aCBjb21wb25lbnRcbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgZW5kID0gaSArIDE7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiAnJztcbiAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG59XG5cbi8vIFVzZXMgYSBtaXhlZCBhcHByb2FjaCBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHksIGFzIGV4dCBiZWhhdmlvciBjaGFuZ2VkXG4vLyBpbiBuZXcgTm9kZS5qcyB2ZXJzaW9ucywgc28gb25seSBiYXNlbmFtZSgpIGFib3ZlIGlzIGJhY2twb3J0ZWQgaGVyZVxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uIChwYXRoLCBleHQpIHtcbiAgdmFyIGYgPSBiYXNlbmFtZShwYXRoKTtcbiAgaWYgKGV4dCAmJiBmLnN1YnN0cigtMSAqIGV4dC5sZW5ndGgpID09PSBleHQpIHtcbiAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZjtcbn07XG5cbmV4cG9ydHMuZXh0bmFtZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHBhdGggPSBwYXRoICsgJyc7XG4gIHZhciBzdGFydERvdCA9IC0xO1xuICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgdmFyIGVuZCA9IC0xO1xuICB2YXIgbWF0Y2hlZFNsYXNoID0gdHJ1ZTtcbiAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAvLyBhZnRlciBhbnkgcGF0aCBzZXBhcmF0b3Igd2UgZmluZFxuICB2YXIgcHJlRG90U3RhdGUgPSAwO1xuICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgLy8gZXh0ZW5zaW9uXG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgIGVuZCA9IGkgKyAxO1xuICAgIH1cbiAgICBpZiAoY29kZSA9PT0gNDYgLyouKi8pIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgIGlmIChzdGFydERvdCA9PT0gLTEpXG4gICAgICAgICAgc3RhcnREb3QgPSBpO1xuICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSlcbiAgICAgICAgICBwcmVEb3RTdGF0ZSA9IDE7XG4gICAgfSBlbHNlIGlmIChzdGFydERvdCAhPT0gLTEpIHtcbiAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAvLyBoYXZlIGEgZ29vZCBjaGFuY2UgYXQgaGF2aW5nIGEgbm9uLWVtcHR5IGV4dGVuc2lvblxuICAgICAgcHJlRG90U3RhdGUgPSAtMTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhcnREb3QgPT09IC0xIHx8IGVuZCA9PT0gLTEgfHxcbiAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XG4gICAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgICAgLy8gVGhlIChyaWdodC1tb3N0KSB0cmltbWVkIHBhdGggY29tcG9uZW50IGlzIGV4YWN0bHkgJy4uJ1xuICAgICAgcHJlRG90U3RhdGUgPT09IDEgJiYgc3RhcnREb3QgPT09IGVuZCAtIDEgJiYgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhbHBoYWJldGljYWxcblxuLy8gQ2hlY2sgaWYgdGhlIGdpdmVuIGNoYXJhY3RlciBjb2RlLCBvciB0aGUgY2hhcmFjdGVyIGNvZGUgYXQgdGhlIGZpcnN0XG4vLyBjaGFyYWN0ZXIsIGlzIGFscGhhYmV0aWNhbC5cbmZ1bmN0aW9uIGFscGhhYmV0aWNhbChjaGFyYWN0ZXIpIHtcbiAgdmFyIGNvZGUgPSB0eXBlb2YgY2hhcmFjdGVyID09PSAnc3RyaW5nJyA/IGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApIDogY2hhcmFjdGVyXG5cbiAgcmV0dXJuIChcbiAgICAoY29kZSA+PSA5NyAmJiBjb2RlIDw9IDEyMikgLyogYS16ICovIHx8XG4gICAgKGNvZGUgPj0gNjUgJiYgY29kZSA8PSA5MCkgLyogQS1aICovXG4gIClcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBvc2l0aW9uOiB0cnVlLFxuICBnZm06IHRydWUsXG4gIGNvbW1vbm1hcms6IGZhbHNlLFxuICBmb290bm90ZXM6IGZhbHNlLFxuICBwZWRhbnRpYzogZmFsc2UsXG4gIGJsb2NrczogcmVxdWlyZSgnLi9ibG9jay1lbGVtZW50cy5qc29uJylcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZW50YXRpb247XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzLCBhbmQgdGhlaXIgY29sdW1uIGxlbmd0aCxcbiAqIHdoaWNoIGNhbiBiZSB1c2VkIGFzIGluZGVudGF0aW9uLiAqL1xudmFyIGNoYXJhY3RlcnMgPSB7JyAnOiAxLCAnXFx0JzogNH07XG5cbi8qIEdldHMgaW5kZW50YXRpb24gaW5mb3JtYXRpb24gZm9yIGEgbGluZS4gKi9cbmZ1bmN0aW9uIGluZGVudGF0aW9uKHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBpbmRlbnQgPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgdmFyIHN0b3BzID0ge307XG4gIHZhciBzaXplO1xuXG4gIHdoaWxlIChjaGFyYWN0ZXIgaW4gY2hhcmFjdGVycykge1xuICAgIHNpemUgPSBjaGFyYWN0ZXJzW2NoYXJhY3Rlcl07XG5cbiAgICBpbmRlbnQgKz0gc2l6ZTtcblxuICAgIGlmIChzaXplID4gMSkge1xuICAgICAgaW5kZW50ID0gTWF0aC5mbG9vcihpbmRlbnQgLyBzaXplKSAqIHNpemU7XG4gICAgfVxuXG4gICAgc3RvcHNbaW5kZW50XSA9IGluZGV4O1xuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtpbmRlbnQ6IGluZGVudCwgc3RvcHM6IHN0b3BzfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGF0dHJpYnV0ZU5hbWUgPSAnW2EtekEtWl86XVthLXpBLVowLTk6Ll8tXSonO1xudmFyIHVucXVvdGVkID0gJ1teXCJcXCc9PD5gXFxcXHUwMDAwLVxcXFx1MDAyMF0rJztcbnZhciBzaW5nbGVRdW90ZWQgPSAnXFwnW15cXCddKlxcJyc7XG52YXIgZG91YmxlUXVvdGVkID0gJ1wiW15cIl0qXCInO1xudmFyIGF0dHJpYnV0ZVZhbHVlID0gJyg/OicgKyB1bnF1b3RlZCArICd8JyArIHNpbmdsZVF1b3RlZCArICd8JyArIGRvdWJsZVF1b3RlZCArICcpJztcbnZhciBhdHRyaWJ1dGUgPSAnKD86XFxcXHMrJyArIGF0dHJpYnV0ZU5hbWUgKyAnKD86XFxcXHMqPVxcXFxzKicgKyBhdHRyaWJ1dGVWYWx1ZSArICcpPyknO1xudmFyIG9wZW5UYWcgPSAnPFtBLVphLXpdW0EtWmEtejAtOVxcXFwtXSonICsgYXR0cmlidXRlICsgJypcXFxccypcXFxcLz8+JztcbnZhciBjbG9zZVRhZyA9ICc8XFxcXC9bQS1aYS16XVtBLVphLXowLTlcXFxcLV0qXFxcXHMqPic7XG52YXIgY29tbWVudCA9ICc8IS0tLS0+fDwhLS0oPzotP1tePi1dKSg/Oi0/W14tXSkqLS0+JztcbnZhciBwcm9jZXNzaW5nID0gJzxbP10uKj9bP10+JztcbnZhciBkZWNsYXJhdGlvbiA9ICc8IVtBLVphLXpdK1xcXFxzK1tePl0qPic7XG52YXIgY2RhdGEgPSAnPCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+JztcblxuZXhwb3J0cy5vcGVuQ2xvc2VUYWcgPSBuZXcgUmVnRXhwKCdeKD86JyArIG9wZW5UYWcgKyAnfCcgKyBjbG9zZVRhZyArICcpJyk7XG5cbmV4cG9ydHMudGFnID0gbmV3IFJlZ0V4cCgnXig/OicgK1xuICBvcGVuVGFnICsgJ3wnICtcbiAgY2xvc2VUYWcgKyAnfCcgK1xuICBjb21tZW50ICsgJ3wnICtcbiAgcHJvY2Vzc2luZyArICd8JyArXG4gIGRlY2xhcmF0aW9uICsgJ3wnICtcbiAgY2RhdGEgK1xuJyknKTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHJldHVybiB2YWx1ZS5pbmRleE9mKCc8JywgZnJvbUluZGV4KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBsaW5rID0gdmFsdWUuaW5kZXhPZignWycsIGZyb21JbmRleCk7XG4gIHZhciBpbWFnZSA9IHZhbHVlLmluZGV4T2YoJyFbJywgZnJvbUluZGV4KTtcblxuICBpZiAoaW1hZ2UgPT09IC0xKSB7XG4gICAgcmV0dXJuIGxpbms7XG4gIH1cblxuICAvKiBMaW5rIGNhbiBuZXZlciBiZSBgLTFgIGlmIGFuIGltYWdlIGlzIGZvdW5kLCBzbyB3ZSBkb27igJl0IG5lZWRcbiAgICogdG8gY2hlY2sgZm9yIHRoYXQgOikgKi9cbiAgcmV0dXJuIGxpbmsgPCBpbWFnZSA/IGxpbmsgOiBpbWFnZTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhhLCBuKSB7XG4gIGlmICghKGEgaW5zdGFuY2VvZiBuKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKFwiLi90b1Byb3BlcnR5S2V5LmpzXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMoZSwgcikge1xuICBmb3IgKHZhciB0ID0gMDsgdCA8IHIubGVuZ3RoOyB0KyspIHtcbiAgICB2YXIgbyA9IHJbdF07XG4gICAgby5lbnVtZXJhYmxlID0gby5lbnVtZXJhYmxlIHx8ICExLCBvLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gbyAmJiAoby53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHRvUHJvcGVydHlLZXkoby5rZXkpLCBvKTtcbiAgfVxufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHtcbiAgcmV0dXJuIHIgJiYgX2RlZmluZVByb3BlcnRpZXMoZS5wcm90b3R5cGUsIHIpLCB0ICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHQpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiAhMVxuICB9KSwgZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qc1wiKTtcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHtcbiAgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gX3R5cGVvZihlKSB8fCBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUpKSByZXR1cm4gZTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHQpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mLmpzXCIpO1xuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiB0LFxuICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH1cbiAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlICYmIHNldFByb3RvdHlwZU9mKHQsIGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gKG1vZHVsZVsnZXhwb3J0cyddID0gZmFjdG9yeSgpKSA6XG5cdFx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddID8gZGVmaW5lKGZhY3RvcnkoKSkgOlxuXHRcdFx0KHdpbmRvd1snc3R5bGlzUnVsZVNoZWV0J10gPSBmYWN0b3J5KCkpXG59KGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCdcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluc2VydFJ1bGUpIHtcblx0XHR2YXIgZGVsaW1pdGVyID0gJy8qfCovJ1xuXHRcdHZhciBuZWVkbGUgPSBkZWxpbWl0ZXIrJ30nXG5cblx0XHRmdW5jdGlvbiB0b1NoZWV0IChibG9jaykge1xuXHRcdFx0aWYgKGJsb2NrKVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGluc2VydFJ1bGUoYmxvY2sgKyAnfScpXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJ1bGVTaGVldCAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzLCBwYXJlbnRzLCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgbnMsIGRlcHRoLCBhdCkge1xuXHRcdFx0c3dpdGNoIChjb250ZXh0KSB7XG5cdFx0XHRcdC8vIHByb3BlcnR5XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHQvLyBAaW1wb3J0XG5cdFx0XHRcdFx0aWYgKGRlcHRoID09PSAwICYmIGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gNjQpXG5cdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShjb250ZW50Kyc7JyksICcnXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gc2VsZWN0b3Jcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdGlmIChucyA9PT0gMClcblx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgZGVsaW1pdGVyXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gYXQtcnVsZVxuXHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0c3dpdGNoIChucykge1xuXHRcdFx0XHRcdFx0Ly8gQGZvbnQtZmFjZSwgQHBhZ2Vcblx0XHRcdFx0XHRcdGNhc2UgMTAyOlxuXHRcdFx0XHRcdFx0Y2FzZSAxMTI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnNlcnRSdWxlKHNlbGVjdG9yc1swXStjb250ZW50KSwgJydcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlIC0yOlxuXHRcdFx0XHRcdGNvbnRlbnQuc3BsaXQobmVlZGxlKS5mb3JFYWNoKHRvU2hlZXQpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KSlcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBBYm9ydEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcignVGhyb3R0bGVkIGZ1bmN0aW9uIGFib3J0ZWQnKTtcblx0XHR0aGlzLm5hbWUgPSAnQWJvcnRFcnJvcic7XG5cdH1cbn1cblxuY29uc3QgcFRocm90dGxlID0gKHtsaW1pdCwgaW50ZXJ2YWwsIHN0cmljdH0pID0+IHtcblx0aWYgKCFOdW1iZXIuaXNGaW5pdGUobGltaXQpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGxpbWl0YCB0byBiZSBhIGZpbml0ZSBudW1iZXInKTtcblx0fVxuXG5cdGlmICghTnVtYmVyLmlzRmluaXRlKGludGVydmFsKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGBpbnRlcnZhbGAgdG8gYmUgYSBmaW5pdGUgbnVtYmVyJyk7XG5cdH1cblxuXHRjb25zdCBxdWV1ZSA9IG5ldyBNYXAoKTtcblxuXHRsZXQgY3VycmVudFRpY2sgPSAwO1xuXHRsZXQgYWN0aXZlQ291bnQgPSAwO1xuXG5cdGZ1bmN0aW9uIHdpbmRvd2VkRGVsYXkoKSB7XG5cdFx0Y29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuXHRcdGlmICgobm93IC0gY3VycmVudFRpY2spID4gaW50ZXJ2YWwpIHtcblx0XHRcdGFjdGl2ZUNvdW50ID0gMTtcblx0XHRcdGN1cnJlbnRUaWNrID0gbm93O1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0aWYgKGFjdGl2ZUNvdW50IDwgbGltaXQpIHtcblx0XHRcdGFjdGl2ZUNvdW50Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnJlbnRUaWNrICs9IGludGVydmFsO1xuXHRcdFx0YWN0aXZlQ291bnQgPSAxO1xuXHRcdH1cblxuXHRcdHJldHVybiBjdXJyZW50VGljayAtIG5vdztcblx0fVxuXG5cdGNvbnN0IHN0cmljdFRpY2tzID0gW107XG5cblx0ZnVuY3Rpb24gc3RyaWN0RGVsYXkoKSB7XG5cdFx0Y29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuXHRcdGlmIChzdHJpY3RUaWNrcy5sZW5ndGggPCBsaW1pdCkge1xuXHRcdFx0c3RyaWN0VGlja3MucHVzaChub3cpO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZWFybGllc3RUaW1lID0gc3RyaWN0VGlja3Muc2hpZnQoKSArIGludGVydmFsO1xuXG5cdFx0aWYgKG5vdyA+PSBlYXJsaWVzdFRpbWUpIHtcblx0XHRcdHN0cmljdFRpY2tzLnB1c2gobm93KTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHN0cmljdFRpY2tzLnB1c2goZWFybGllc3RUaW1lKTtcblx0XHRyZXR1cm4gZWFybGllc3RUaW1lIC0gbm93O1xuXHR9XG5cblx0Y29uc3QgZ2V0RGVsYXkgPSBzdHJpY3QgPyBzdHJpY3REZWxheSA6IHdpbmRvd2VkRGVsYXk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uXyA9PiB7XG5cdFx0Y29uc3QgdGhyb3R0bGVkID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHRcdGlmICghdGhyb3R0bGVkLmlzRW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm4gKGFzeW5jICgpID0+IGZ1bmN0aW9uXy5hcHBseSh0aGlzLCBhcmdzKSkoKTtcblx0XHRcdH1cblxuXHRcdFx0bGV0IHRpbWVvdXQ7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0XHRjb25zdCBleGVjdXRlID0gKCkgPT4ge1xuXHRcdFx0XHRcdHJlc29sdmUoZnVuY3Rpb25fLmFwcGx5KHRoaXMsIGFyZ3MpKTtcblx0XHRcdFx0XHRxdWV1ZS5kZWxldGUodGltZW91dCk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGltZW91dCA9IHNldFRpbWVvdXQoZXhlY3V0ZSwgZ2V0RGVsYXkoKSk7XG5cblx0XHRcdFx0cXVldWUuc2V0KHRpbWVvdXQsIHJlamVjdCk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0dGhyb3R0bGVkLmFib3J0ID0gKCkgPT4ge1xuXHRcdFx0Zm9yIChjb25zdCB0aW1lb3V0IG9mIHF1ZXVlLmtleXMoKSkge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0XHRcdHF1ZXVlLmdldCh0aW1lb3V0KShuZXcgQWJvcnRFcnJvcigpKTtcblx0XHRcdH1cblxuXHRcdFx0cXVldWUuY2xlYXIoKTtcblx0XHRcdHN0cmljdFRpY2tzLnNwbGljZSgwLCBzdHJpY3RUaWNrcy5sZW5ndGgpO1xuXHRcdH07XG5cblx0XHR0aHJvdHRsZWQuaXNFbmFibGVkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aHJvdHRsZWQ7XG5cdH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBUaHJvdHRsZTtcbm1vZHVsZS5leHBvcnRzLkFib3J0RXJyb3IgPSBBYm9ydEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3RyaW5naWZ5XG5leHBvcnRzLmdldFNlcmlhbGl6ZSA9IHNlcmlhbGl6ZXJcblxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgcmVwbGFjZXIsIHNwYWNlcywgY3ljbGVSZXBsYWNlcikge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBzZXJpYWxpemVyKHJlcGxhY2VyLCBjeWNsZVJlcGxhY2VyKSwgc3BhY2VzKVxufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVyKHJlcGxhY2VyLCBjeWNsZVJlcGxhY2VyKSB7XG4gIHZhciBzdGFjayA9IFtdLCBrZXlzID0gW11cblxuICBpZiAoY3ljbGVSZXBsYWNlciA9PSBudWxsKSBjeWNsZVJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGlmIChzdGFja1swXSA9PT0gdmFsdWUpIHJldHVybiBcIltDaXJjdWxhciB+XVwiXG4gICAgcmV0dXJuIFwiW0NpcmN1bGFyIH4uXCIgKyBrZXlzLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YodmFsdWUpKS5qb2luKFwiLlwiKSArIFwiXVwiXG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdGhpc1BvcyA9IHN0YWNrLmluZGV4T2YodGhpcylcbiAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcylcbiAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KVxuICAgICAgaWYgKH5zdGFjay5pbmRleE9mKHZhbHVlKSkgdmFsdWUgPSBjeWNsZVJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSlcbiAgICB9XG4gICAgZWxzZSBzdGFjay5wdXNoKHZhbHVlKVxuXG4gICAgcmV0dXJuIHJlcGxhY2VyID09IG51bGwgPyB2YWx1ZSA6IHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSlcbiAgfVxufVxuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbFtcImZhc3QtY29weVwiXSA9IHt9KSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHRvU3RyaW5nRnVuY3Rpb24gPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgdmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG4gICAgdmFyIHRvU3RyaW5nT2JqZWN0ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgICAvKipcbiAgICAgKiBAY2xhc3NkZXNjIEZhbGxiYWNrIGNhY2hlIGZvciB3aGVuIFdlYWtNYXAgaXMgbm90IG5hdGl2ZWx5IHN1cHBvcnRlZFxuICAgICAqL1xuICAgIHZhciBMZWdhY3lDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gTGVnYWN5Q2FjaGUoKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlzID0gW107XG4gICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBMZWdhY3lDYWNoZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuICEhfnRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuICAgICAgICB9O1xuICAgICAgICBMZWdhY3lDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlc1t0aGlzLl9rZXlzLmluZGV4T2Yoa2V5KV07XG4gICAgICAgIH07XG4gICAgICAgIExlZ2FjeUNhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBMZWdhY3lDYWNoZTtcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhY2hlTGVnYWN5KCkge1xuICAgICAgICByZXR1cm4gbmV3IExlZ2FjeUNhY2hlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhY2hlTW9kZXJuKCkge1xuICAgICAgICByZXR1cm4gbmV3IFdlYWtNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgbmV3IGNhY2hlIG9iamVjdCB0byBwcmV2ZW50IGNpcmN1bGFyIHJlZmVyZW5jZXMuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZUNhY2hlID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnID8gY3JlYXRlQ2FjaGVNb2Rlcm4gOiBjcmVhdGVDYWNoZUxlZ2FjeTtcbiAgICAvKipcbiAgICAgKiBHZXQgYW4gZW1wdHkgdmVyc2lvbiBvZiB0aGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgcHJvdG90eXBlIGl0IGhhcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDbGVhbkNsb25lKHByb3RvdHlwZSkge1xuICAgICAgICBpZiAoIXByb3RvdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBwcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlID8ge30gOiBjcmVhdGUocHJvdG90eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQ29uc3RydWN0b3IgJiZcbiAgICAgICAgICAgIH50b1N0cmluZ0Z1bmN0aW9uLmNhbGwoQ29uc3RydWN0b3IpLmluZGV4T2YoJ1tuYXRpdmUgY29kZV0nKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGUocHJvdG90eXBlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UmVnRXhwRmxhZ3NMZWdhY3kocmVnRXhwKSB7XG4gICAgICAgIHZhciBmbGFncyA9ICcnO1xuICAgICAgICBpZiAocmVnRXhwLmdsb2JhbCkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdFeHAuaWdub3JlQ2FzZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ2knO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdFeHAubXVsdGlsaW5lKSB7XG4gICAgICAgICAgICBmbGFncyArPSAnbSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZ0V4cC51bmljb2RlKSB7XG4gICAgICAgICAgICBmbGFncyArPSAndSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZ0V4cC5zdGlja3kpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICd5JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmxhZ3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFJlZ0V4cEZsYWdzTW9kZXJuKHJlZ0V4cCkge1xuICAgICAgICByZXR1cm4gcmVnRXhwLmZsYWdzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZsYWdzIHRvIGFwcGx5IHRvIHRoZSBjb3BpZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIHZhciBnZXRSZWdFeHBGbGFncyA9IC90ZXN0L2cuZmxhZ3MgPT09ICdnJyA/IGdldFJlZ0V4cEZsYWdzTW9kZXJuIDogZ2V0UmVnRXhwRmxhZ3NMZWdhY3k7XG4gICAgZnVuY3Rpb24gZ2V0VGFnTGVnYWN5KHZhbHVlKSB7XG4gICAgICAgIHZhciB0eXBlID0gdG9TdHJpbmdPYmplY3QuY2FsbCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0eXBlLnN1YnN0cmluZyg4LCB0eXBlLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRUYWdNb2Rlcm4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gfHwgZ2V0VGFnTGVnYWN5KHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0YWcgb2YgdGhlIHZhbHVlIHBhc3NlZCwgc28gdGhhdCB0aGUgY29ycmVjdCBjb3BpZXIgY2FuIGJlIHVzZWQuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gZ2V0VGFnTW9kZXJuIDogZ2V0VGFnTGVnYWN5O1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLCBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIF9hID0gT2JqZWN0LnByb3RvdHlwZSwgaGFzT3duUHJvcGVydHkgPSBfYS5oYXNPd25Qcm9wZXJ0eSwgcHJvcGVydHlJc0VudW1lcmFibGUgPSBfYS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgICB2YXIgU1VQUE9SVFNfU1lNQk9MID0gdHlwZW9mIGdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJztcbiAgICBmdW5jdGlvbiBnZXRTdHJpY3RQcm9wZXJ0aWVzTW9kZXJuKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcHJvcGVyaXRlcyB1c2VkIHdoZW4gY29weWluZyBvYmplY3RzIHN0cmljdGx5LiBUaGlzIGluY2x1ZGVzIGJvdGgga2V5cyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3RyaWN0UHJvcGVydGllcyA9IFNVUFBPUlRTX1NZTUJPTFxuICAgICAgICA/IGdldFN0cmljdFByb3BlcnRpZXNNb2Rlcm5cbiAgICAgICAgOiBnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgIC8qKlxuICAgICAqIFN0cmljbHR5IGNvcHkgYWxsIHByb3BlcnRpZXMgY29udGFpbmVkIG9uIHRoZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU93blByb3BlcnRpZXNTdHJpY3QodmFsdWUsIGNsb25lLCBzdGF0ZSkge1xuICAgICAgICB2YXIgcHJvcGVydGllcyA9IGdldFN0cmljdFByb3BlcnRpZXModmFsdWUpO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aF8xID0gcHJvcGVydGllcy5sZW5ndGgsIHByb3BlcnR5ID0gdm9pZCAwLCBkZXNjcmlwdG9yID0gdm9pZCAwOyBpbmRleCA8IGxlbmd0aF8xOyArK2luZGV4KSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSAnY2FsbGVlJyB8fCBwcm9wZXJ0eSA9PT0gJ2NhbGxlcicpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIHByb3BlcnR5KTtcbiAgICAgICAgICAgIGlmICghZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgIC8vIEluIGV4dHJhIGVkZ2UgY2FzZXMgd2hlcmUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgY2Fubm90IGJlIHJldHJpdmVkLCBmYWxsIGJhY2sgdG9cbiAgICAgICAgICAgICAgICAvLyB0aGUgbG9vc2UgYXNzaWdubWVudC5cbiAgICAgICAgICAgICAgICBjbG9uZVtwcm9wZXJ0eV0gPSBzdGF0ZS5jb3BpZXIodmFsdWVbcHJvcGVydHldLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPbmx5IGNsb25lIHRoZSB2YWx1ZSBpZiBhY3R1YWxseSBhIHZhbHVlLCBub3QgYSBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAgICAgICAgICBpZiAoIWRlc2NyaXB0b3IuZ2V0ICYmICFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBzdGF0ZS5jb3BpZXIoZGVzY3JpcHRvci52YWx1ZSwgc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShjbG9uZSwgcHJvcGVydHksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gVGVlIGFib3ZlIGNhbiBmYWlsIG9uIG5vZGUgaW4gZWRnZSBjYXNlcywgc28gZmFsbCBiYWNrIHRvIHRoZSBsb29zZSBhc3NpZ25tZW50LlxuICAgICAgICAgICAgICAgIGNsb25lW3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWVwbHkgY29weSB0aGUgaW5kZXhlZCB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheUxvb3NlKGFycmF5LCBzdGF0ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSBuZXcgc3RhdGUuQ29uc3RydWN0b3IoKTtcbiAgICAgICAgLy8gc2V0IGluIHRoZSBjYWNoZSBpbW1lZGlhdGVseSB0byBiZSBhYmxlIHRvIHJldXNlIHRoZSBvYmplY3QgcmVjdXJzaXZlbHlcbiAgICAgICAgc3RhdGUuY2FjaGUuc2V0KGFycmF5LCBjbG9uZSk7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoXzIgPSBhcnJheS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoXzI7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIGNsb25lW2luZGV4XSA9IHN0YXRlLmNvcGllcihhcnJheVtpbmRleF0sIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZXBseSBjb3B5IHRoZSBpbmRleGVkIHZhbHVlcyBpbiB0aGUgYXJyYXksIGFzIHdlbGwgYXMgYW55IGN1c3RvbSBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheVN0cmljdChhcnJheSwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gbmV3IHN0YXRlLkNvbnN0cnVjdG9yKCk7XG4gICAgICAgIC8vIHNldCBpbiB0aGUgY2FjaGUgaW1tZWRpYXRlbHkgdG8gYmUgYWJsZSB0byByZXVzZSB0aGUgb2JqZWN0IHJlY3Vyc2l2ZWx5XG4gICAgICAgIHN0YXRlLmNhY2hlLnNldChhcnJheSwgY2xvbmUpO1xuICAgICAgICByZXR1cm4gY29weU93blByb3BlcnRpZXNTdHJpY3QoYXJyYXksIGNsb25lLCBzdGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIGNvbnRlbnRzIG9mIHRoZSBBcnJheUJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIsIF9zdGF0ZSkge1xuICAgICAgICByZXR1cm4gYXJyYXlCdWZmZXIuc2xpY2UoMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBCbG9iIHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QmxvYihibG9iLCBfc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGJsb2Iuc2xpY2UoMCwgYmxvYi5zaXplLCBibG9iLnR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgRGF0YVZpZXcgd2l0aCB0aGUgY29udGVudHMgb2YgdGhlIG9yaWdpbmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlEYXRhVmlldyhkYXRhVmlldywgc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzdGF0ZS5Db25zdHJ1Y3Rvcihjb3B5QXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBEYXRlIGJhc2VkIG9uIHRoZSB0aW1lIG9mIHRoZSBvcmlnaW5hbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5RGF0ZShkYXRlLCBzdGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IHN0YXRlLkNvbnN0cnVjdG9yKGRhdGUuZ2V0VGltZSgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVlcGx5IGNvcHkgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiB0aGUgb3JpZ2luYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU1hcExvb3NlKG1hcCwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gbmV3IHN0YXRlLkNvbnN0cnVjdG9yKCk7XG4gICAgICAgIC8vIHNldCBpbiB0aGUgY2FjaGUgaW1tZWRpYXRlbHkgdG8gYmUgYWJsZSB0byByZXVzZSB0aGUgb2JqZWN0IHJlY3Vyc2l2ZWx5XG4gICAgICAgIHN0YXRlLmNhY2hlLnNldChtYXAsIGNsb25lKTtcbiAgICAgICAgbWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGNsb25lLnNldChrZXksIHN0YXRlLmNvcGllcih2YWx1ZSwgc3RhdGUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVlcGx5IGNvcHkgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiB0aGUgb3JpZ2luYWwsIGFzIHdlbGwgYXMgYW55IGN1c3RvbSBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlNYXBTdHJpY3QobWFwLCBzdGF0ZSkge1xuICAgICAgICByZXR1cm4gY29weU93blByb3BlcnRpZXNTdHJpY3QobWFwLCBjb3B5TWFwTG9vc2UobWFwLCBzdGF0ZSksIHN0YXRlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29weU9iamVjdExvb3NlTGVnYWN5KG9iamVjdCwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gZ2V0Q2xlYW5DbG9uZShzdGF0ZS5wcm90b3R5cGUpO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBzdGF0ZS5jYWNoZS5zZXQob2JqZWN0LCBjbG9uZSk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgIGNsb25lW2tleV0gPSBzdGF0ZS5jb3BpZXIob2JqZWN0W2tleV0sIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3RMb29zZU1vZGVybihvYmplY3QsIHN0YXRlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IGdldENsZWFuQ2xvbmUoc3RhdGUucHJvdG90eXBlKTtcbiAgICAgICAgLy8gc2V0IGluIHRoZSBjYWNoZSBpbW1lZGlhdGVseSB0byBiZSBhYmxlIHRvIHJldXNlIHRoZSBvYmplY3QgcmVjdXJzaXZlbHlcbiAgICAgICAgc3RhdGUuY2FjaGUuc2V0KG9iamVjdCwgY2xvbmUpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBjbG9uZVtrZXldID0gc3RhdGUuY29waWVyKG9iamVjdFtrZXldLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGhfMyA9IHN5bWJvbHMubGVuZ3RoLCBzeW1ib2wgPSB2b2lkIDA7IGluZGV4IDwgbGVuZ3RoXzM7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIHN5bWJvbCA9IHN5bWJvbHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVbc3ltYm9sXSA9IHN0YXRlLmNvcGllcihvYmplY3Rbc3ltYm9sXSwgc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVlcGx5IGNvcHkgdGhlIHByb3BlcnRpZXMgKGtleXMgYW5kIHN5bWJvbHMpIGFuZCB2YWx1ZXMgb2YgdGhlIG9yaWdpbmFsLlxuICAgICAqL1xuICAgIHZhciBjb3B5T2JqZWN0TG9vc2UgPSBTVVBQT1JUU19TWU1CT0xcbiAgICAgICAgPyBjb3B5T2JqZWN0TG9vc2VNb2Rlcm5cbiAgICAgICAgOiBjb3B5T2JqZWN0TG9vc2VMZWdhY3k7XG4gICAgLyoqXG4gICAgICogRGVlcGx5IGNvcHkgdGhlIHByb3BlcnRpZXMgKGtleXMgYW5kIHN5bWJvbHMpIGFuZCB2YWx1ZXMgb2YgdGhlIG9yaWdpbmFsLCBhcyB3ZWxsXG4gICAgICogYXMgYW55IGhpZGRlbiBvciBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3RTdHJpY3Qob2JqZWN0LCBzdGF0ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSBnZXRDbGVhbkNsb25lKHN0YXRlLnByb3RvdHlwZSk7XG4gICAgICAgIC8vIHNldCBpbiB0aGUgY2FjaGUgaW1tZWRpYXRlbHkgdG8gYmUgYWJsZSB0byByZXVzZSB0aGUgb2JqZWN0IHJlY3Vyc2l2ZWx5XG4gICAgICAgIHN0YXRlLmNhY2hlLnNldChvYmplY3QsIGNsb25lKTtcbiAgICAgICAgcmV0dXJuIGNvcHlPd25Qcm9wZXJ0aWVzU3RyaWN0KG9iamVjdCwgY2xvbmUsIHN0YXRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHByaW1pdGl2ZSB3cmFwcGVyIGZyb20gdGhlIHZhbHVlIG9mIHRoZSBvcmlnaW5hbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5UHJpbWl0aXZlV3JhcHBlcihwcmltaXRpdmVPYmplY3QsIHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgc3RhdGUuQ29uc3RydWN0b3IocHJpbWl0aXZlT2JqZWN0LnZhbHVlT2YoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBSZWdFeHAgYmFzZWQgb24gdGhlIHZhbHVlIGFuZCBmbGFncyBvZiB0aGUgb3JpZ2luYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVJlZ0V4cChyZWdFeHAsIHN0YXRlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBzdGF0ZS5Db25zdHJ1Y3RvcihyZWdFeHAuc291cmNlLCBnZXRSZWdFeHBGbGFncyhyZWdFeHApKTtcbiAgICAgICAgY2xvbmUubGFzdEluZGV4ID0gcmVnRXhwLmxhc3RJbmRleDtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIG9yaWdpbmFsIHZhbHVlIChhbiBpZGVudGl0eSBmdW5jdGlvbikuXG4gICAgICpcbiAgICAgKiBAbm90ZVxuICAgICAqIFRIaXMgaXMgdXNlZCBmb3Igb2JqZWN0cyB0aGF0IGNhbm5vdCBiZSBjb3BpZWQsIHN1Y2ggYXMgV2Vha01hcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U2VsZih2YWx1ZSwgX3N0YXRlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVlcGx5IGNvcHkgdGhlIHZhbHVlcyBvZiB0aGUgb3JpZ2luYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVNldExvb3NlKHNldCwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gbmV3IHN0YXRlLkNvbnN0cnVjdG9yKCk7XG4gICAgICAgIC8vIHNldCBpbiB0aGUgY2FjaGUgaW1tZWRpYXRlbHkgdG8gYmUgYWJsZSB0byByZXVzZSB0aGUgb2JqZWN0IHJlY3Vyc2l2ZWx5XG4gICAgICAgIHN0YXRlLmNhY2hlLnNldChzZXQsIGNsb25lKTtcbiAgICAgICAgc2V0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjbG9uZS5hZGQoc3RhdGUuY29waWVyKHZhbHVlLCBzdGF0ZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWVwbHkgY29weSB0aGUgdmFsdWVzIG9mIHRoZSBvcmlnaW5hbCwgYXMgd2VsbCBhcyBhbnkgY3VzdG9tIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVNldFN0cmljdChzZXQsIHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBjb3B5T3duUHJvcGVydGllc1N0cmljdChzZXQsIGNvcHlTZXRMb29zZShzZXQsIHN0YXRlKSwgc3RhdGUpO1xuICAgIH1cblxuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbiAgICB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iai5fX3Byb3RvX187IH0pO1xuICAgIHZhciBERUZBVUxUX0xPT1NFX09QVElPTlMgPSB7XG4gICAgICAgIGFycmF5OiBjb3B5QXJyYXlMb29zZSxcbiAgICAgICAgYXJyYXlCdWZmZXI6IGNvcHlBcnJheUJ1ZmZlcixcbiAgICAgICAgYmxvYjogY29weUJsb2IsXG4gICAgICAgIGRhdGFWaWV3OiBjb3B5RGF0YVZpZXcsXG4gICAgICAgIGRhdGU6IGNvcHlEYXRlLFxuICAgICAgICBlcnJvcjogY29weVNlbGYsXG4gICAgICAgIG1hcDogY29weU1hcExvb3NlLFxuICAgICAgICBvYmplY3Q6IGNvcHlPYmplY3RMb29zZSxcbiAgICAgICAgcmVnRXhwOiBjb3B5UmVnRXhwLFxuICAgICAgICBzZXQ6IGNvcHlTZXRMb29zZSxcbiAgICB9O1xuICAgIHZhciBERUZBVUxUX1NUUklDVF9PUFRJT05TID0gYXNzaWduKHt9LCBERUZBVUxUX0xPT1NFX09QVElPTlMsIHtcbiAgICAgICAgYXJyYXk6IGNvcHlBcnJheVN0cmljdCxcbiAgICAgICAgbWFwOiBjb3B5TWFwU3RyaWN0LFxuICAgICAgICBvYmplY3Q6IGNvcHlPYmplY3RTdHJpY3QsXG4gICAgICAgIHNldDogY29weVNldFN0cmljdCxcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvcGllcnMgdXNlZCBmb3IgZWFjaCBzcGVjaWZpYyBvYmplY3QgdGFnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRhZ1NwZWNpZmljQ29waWVycyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBBcmd1bWVudHM6IG9wdGlvbnMub2JqZWN0LFxuICAgICAgICAgICAgQXJyYXk6IG9wdGlvbnMuYXJyYXksXG4gICAgICAgICAgICBBcnJheUJ1ZmZlcjogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIEJsb2I6IG9wdGlvbnMuYmxvYixcbiAgICAgICAgICAgIEJvb2xlYW46IGNvcHlQcmltaXRpdmVXcmFwcGVyLFxuICAgICAgICAgICAgRGF0YVZpZXc6IG9wdGlvbnMuZGF0YVZpZXcsXG4gICAgICAgICAgICBEYXRlOiBvcHRpb25zLmRhdGUsXG4gICAgICAgICAgICBFcnJvcjogb3B0aW9ucy5lcnJvcixcbiAgICAgICAgICAgIEZsb2F0MzJBcnJheTogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIEZsb2F0NjRBcnJheTogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIEludDhBcnJheTogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIEludDE2QXJyYXk6IG9wdGlvbnMuYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBJbnQzMkFycmF5OiBvcHRpb25zLmFycmF5QnVmZmVyLFxuICAgICAgICAgICAgTWFwOiBvcHRpb25zLm1hcCxcbiAgICAgICAgICAgIE51bWJlcjogY29weVByaW1pdGl2ZVdyYXBwZXIsXG4gICAgICAgICAgICBPYmplY3Q6IG9wdGlvbnMub2JqZWN0LFxuICAgICAgICAgICAgUHJvbWlzZTogY29weVNlbGYsXG4gICAgICAgICAgICBSZWdFeHA6IG9wdGlvbnMucmVnRXhwLFxuICAgICAgICAgICAgU2V0OiBvcHRpb25zLnNldCxcbiAgICAgICAgICAgIFN0cmluZzogY29weVByaW1pdGl2ZVdyYXBwZXIsXG4gICAgICAgICAgICBXZWFrTWFwOiBjb3B5U2VsZixcbiAgICAgICAgICAgIFdlYWtTZXQ6IGNvcHlTZWxmLFxuICAgICAgICAgICAgVWludDhBcnJheTogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIFVpbnQ4Q2xhbXBlZEFycmF5OiBvcHRpb25zLmFycmF5QnVmZmVyLFxuICAgICAgICAgICAgVWludDE2QXJyYXk6IG9wdGlvbnMuYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBVaW50MzJBcnJheTogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIFVpbnQ2NEFycmF5OiBvcHRpb25zLmFycmF5QnVmZmVyLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjdXN0b20gY29waWVyIGJhc2VkIG9uIHRoZSBvYmplY3Qtc3BlY2lmaWMgY29weSBtZXRob2RzIHBhc3NlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb3BpZXIob3B0aW9ucykge1xuICAgICAgICB2YXIgbm9ybWFsaXplZE9wdGlvbnMgPSBhc3NpZ24oe30sIERFRkFVTFRfTE9PU0VfT1BUSU9OUywgb3B0aW9ucyk7XG4gICAgICAgIHZhciB0YWdTcGVjaWZpY0NvcGllcnMgPSBnZXRUYWdTcGVjaWZpY0NvcGllcnMobm9ybWFsaXplZE9wdGlvbnMpO1xuICAgICAgICB2YXIgYXJyYXkgPSB0YWdTcGVjaWZpY0NvcGllcnMuQXJyYXksIG9iamVjdCA9IHRhZ1NwZWNpZmljQ29waWVycy5PYmplY3Q7XG4gICAgICAgIGZ1bmN0aW9uIGNvcGllcih2YWx1ZSwgc3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlLnByb3RvdHlwZSA9IHN0YXRlLkNvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmNhY2hlLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUuY2FjaGUuZ2V0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlLnByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICAgICAgICAgIHN0YXRlLkNvbnN0cnVjdG9yID0gc3RhdGUucHJvdG90eXBlICYmIHN0YXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIC8vIHBsYWluIG9iamVjdHNcbiAgICAgICAgICAgIGlmICghc3RhdGUuQ29uc3RydWN0b3IgfHwgc3RhdGUuQ29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3QodmFsdWUsIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFycmF5c1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5KHZhbHVlLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGFnU3BlY2lmaWNDb3BpZXIgPSB0YWdTcGVjaWZpY0NvcGllcnNbZ2V0VGFnKHZhbHVlKV07XG4gICAgICAgICAgICBpZiAodGFnU3BlY2lmaWNDb3BpZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFnU3BlY2lmaWNDb3BpZXIodmFsdWUsIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogb2JqZWN0KHZhbHVlLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNvcHkodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBjb3BpZXIodmFsdWUsIHtcbiAgICAgICAgICAgICAgICBDb25zdHJ1Y3RvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNhY2hlOiBjcmVhdGVDYWNoZSgpLFxuICAgICAgICAgICAgICAgIGNvcGllcjogY29waWVyLFxuICAgICAgICAgICAgICAgIHByb3RvdHlwZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGN1c3RvbSBjb3BpZXIgYmFzZWQgb24gdGhlIG9iamVjdC1zcGVjaWZpYyBjb3B5IG1ldGhvZHMgcGFzc2VkLCBkZWZhdWx0aW5nIHRvIHRoZVxuICAgICAqIHNhbWUgaW50ZXJuYWxzIGFzIGBjb3B5U3RyaWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVTdHJpY3RDb3BpZXIob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gY3JlYXRlQ29waWVyKGFzc2lnbih7fSwgREVGQVVMVF9TVFJJQ1RfT1BUSU9OUywgb3B0aW9ucykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IGFuIHZhbHVlIGRlZXBseSBhcyBtdWNoIGFzIHBvc3NpYmxlLCB3aGVyZSBzdHJpY3QgcmVjcmVhdGlvbiBvZiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtYWludGFpbmVkLiBBbGwgcHJvcGVydGllcyAoaW5jbHVkaW5nIG5vbi1lbnVtZXJhYmxlIG9uZXMpIGFyZSBjb3BpZWQgd2l0aCB0aGVpclxuICAgICAqIG9yaWdpbmFsIHByb3BlcnR5IGRlc2NyaXB0b3JzIG9uIGJvdGggb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgICAqL1xuICAgIHZhciBjb3B5U3RyaWN0ID0gY3JlYXRlU3RyaWN0Q29waWVyKHt9KTtcbiAgICAvKipcbiAgICAgKiBDb3B5IGFuIHZhbHVlIGRlZXBseSBhcyBtdWNoIGFzIHBvc3NpYmxlLlxuICAgICAqL1xuICAgIHZhciBpbmRleCA9IGNyZWF0ZUNvcGllcih7fSk7XG5cbiAgICBleHBvcnRzLmNvcHlTdHJpY3QgPSBjb3B5U3RyaWN0O1xuICAgIGV4cG9ydHMuY3JlYXRlQ29waWVyID0gY3JlYXRlQ29waWVyO1xuICAgIGV4cG9ydHMuY3JlYXRlU3RyaWN0Q29waWVyID0gY3JlYXRlU3RyaWN0Q29waWVyO1xuICAgIGV4cG9ydHMuZGVmYXVsdCA9IGluZGV4O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG5cbnZhciB1bmlmaWVkID0gcmVxdWlyZSgndW5pZmllZCcpO1xuXG52YXIgcGFyc2UgPSByZXF1aXJlKCdyZW1hcmstcGFyc2UnKTtcblxudmFyIFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIGFkZExpc3RNZXRhZGF0YSA9IHJlcXVpcmUoJ21kYXN0LWFkZC1saXN0LW1ldGFkYXRhJyk7XG5cbnZhciBuYWl2ZUh0bWwgPSByZXF1aXJlKCcuL3BsdWdpbnMvbmFpdmUtaHRtbCcpO1xuXG52YXIgZGlzYWxsb3dOb2RlID0gcmVxdWlyZSgnLi9wbHVnaW5zL2Rpc2FsbG93LW5vZGUnKTtcblxudmFyIGFzdFRvUmVhY3QgPSByZXF1aXJlKCcuL2FzdC10by1yZWFjdCcpO1xuXG52YXIgd3JhcFRhYmxlUm93cyA9IHJlcXVpcmUoJy4vd3JhcC10YWJsZS1yb3dzJyk7XG5cbnZhciBnZXREZWZpbml0aW9ucyA9IHJlcXVpcmUoJy4vZ2V0LWRlZmluaXRpb25zJyk7XG5cbnZhciB1cmlUcmFuc2Zvcm1lciA9IHJlcXVpcmUoJy4vdXJpLXRyYW5zZm9ybWVyJyk7XG5cbnZhciBkZWZhdWx0UmVuZGVyZXJzID0gcmVxdWlyZSgnLi9yZW5kZXJlcnMnKTtcblxudmFyIHN5bWJvbHMgPSByZXF1aXJlKCcuL3N5bWJvbHMnKTtcblxudmFyIGFsbFR5cGVzID0gT2JqZWN0LmtleXMoZGVmYXVsdFJlbmRlcmVycyk7XG5cbnZhciBSZWFjdE1hcmtkb3duID0gZnVuY3Rpb24gUmVhY3RNYXJrZG93bihwcm9wcykge1xuICB2YXIgc3JjID0gcHJvcHMuc291cmNlIHx8IHByb3BzLmNoaWxkcmVuIHx8ICcnO1xuICB2YXIgcGFyc2VyT3B0aW9ucyA9IHByb3BzLnBhcnNlck9wdGlvbnM7XG5cbiAgaWYgKHByb3BzLmFsbG93ZWRUeXBlcyAmJiBwcm9wcy5kaXNhbGxvd2VkVHlwZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgb25lIG9mIGBhbGxvd2VkVHlwZXNgIGFuZCBgZGlzYWxsb3dlZFR5cGVzYCBzaG91bGQgYmUgZGVmaW5lZCcpO1xuICB9XG5cbiAgdmFyIHJlbmRlcmVycyA9IHh0ZW5kKGRlZmF1bHRSZW5kZXJlcnMsIHByb3BzLnJlbmRlcmVycyk7XG4gIHZhciBwbHVnaW5zID0gW1twYXJzZSwgcGFyc2VyT3B0aW9uc11dLmNvbmNhdChwcm9wcy5wbHVnaW5zIHx8IFtdKTtcbiAgdmFyIHBhcnNlciA9IHBsdWdpbnMucmVkdWNlKGFwcGx5UGFyc2VyUGx1Z2luLCB1bmlmaWVkKCkpO1xuICB2YXIgcmF3QXN0ID0gcGFyc2VyLnBhcnNlKHNyYyk7XG4gIHZhciByZW5kZXJQcm9wcyA9IHh0ZW5kKHByb3BzLCB7XG4gICAgcmVuZGVyZXJzOiByZW5kZXJlcnMsXG4gICAgZGVmaW5pdGlvbnM6IGdldERlZmluaXRpb25zKHJhd0FzdClcbiAgfSk7XG4gIHZhciBhc3RQbHVnaW5zID0gZGV0ZXJtaW5lQXN0UGx1Z2lucyhwcm9wcyk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zeW5jXG5cbiAgdmFyIHRyYW5zZm9ybWVkQXN0ID0gcGFyc2VyLnJ1blN5bmMocmF3QXN0KTtcbiAgdmFyIGFzdCA9IGFzdFBsdWdpbnMucmVkdWNlKGZ1bmN0aW9uIChub2RlLCBwbHVnaW4pIHtcbiAgICByZXR1cm4gcGx1Z2luKG5vZGUsIHJlbmRlclByb3BzKTtcbiAgfSwgdHJhbnNmb3JtZWRBc3QpO1xuICByZXR1cm4gYXN0VG9SZWFjdChhc3QsIHJlbmRlclByb3BzKTtcbn07XG5cbmZ1bmN0aW9uIGFwcGx5UGFyc2VyUGx1Z2luKHBhcnNlciwgcGx1Z2luKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHBsdWdpbikgPyBwYXJzZXIudXNlLmFwcGx5KHBhcnNlciwgX3RvQ29uc3VtYWJsZUFycmF5KHBsdWdpbikpIDogcGFyc2VyLnVzZShwbHVnaW4pO1xufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVBc3RQbHVnaW5zKHByb3BzKSB7XG4gIHZhciBwbHVnaW5zID0gW3dyYXBUYWJsZVJvd3MsIGFkZExpc3RNZXRhZGF0YSgpXTtcbiAgdmFyIGRpc2FsbG93ZWRUeXBlcyA9IHByb3BzLmRpc2FsbG93ZWRUeXBlcztcblxuICBpZiAocHJvcHMuYWxsb3dlZFR5cGVzKSB7XG4gICAgZGlzYWxsb3dlZFR5cGVzID0gYWxsVHlwZXMuZmlsdGVyKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gdHlwZSAhPT0gJ3Jvb3QnICYmIHByb3BzLmFsbG93ZWRUeXBlcy5pbmRleE9mKHR5cGUpID09PSAtMTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciByZW1vdmFsTWV0aG9kID0gcHJvcHMudW53cmFwRGlzYWxsb3dlZCA/ICd1bndyYXAnIDogJ3JlbW92ZSc7XG5cbiAgaWYgKGRpc2FsbG93ZWRUeXBlcyAmJiBkaXNhbGxvd2VkVHlwZXMubGVuZ3RoID4gMCkge1xuICAgIHBsdWdpbnMucHVzaChkaXNhbGxvd05vZGUub2ZUeXBlKGRpc2FsbG93ZWRUeXBlcywgcmVtb3ZhbE1ldGhvZCkpO1xuICB9XG5cbiAgaWYgKHByb3BzLmFsbG93Tm9kZSkge1xuICAgIHBsdWdpbnMucHVzaChkaXNhbGxvd05vZGUuaWZOb3RNYXRjaChwcm9wcy5hbGxvd05vZGUsIHJlbW92YWxNZXRob2QpKTtcbiAgfVxuXG4gIHZhciByZW5kZXJIdG1sID0gIXByb3BzLmVzY2FwZUh0bWwgJiYgIXByb3BzLnNraXBIdG1sO1xuICB2YXIgaGFzSHRtbFBhcnNlciA9IChwcm9wcy5hc3RQbHVnaW5zIHx8IFtdKS5zb21lKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIHBsdWdpbiA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyBpdGVtWzBdIDogaXRlbTtcbiAgICByZXR1cm4gcGx1Z2luLmlkZW50aXR5ID09PSBzeW1ib2xzLkh0bWxQYXJzZXI7XG4gIH0pO1xuXG4gIGlmIChyZW5kZXJIdG1sICYmICFoYXNIdG1sUGFyc2VyKSB7XG4gICAgcGx1Z2lucy5wdXNoKG5haXZlSHRtbCk7XG4gIH1cblxuICByZXR1cm4gcHJvcHMuYXN0UGx1Z2lucyA/IHBsdWdpbnMuY29uY2F0KHByb3BzLmFzdFBsdWdpbnMpIDogcGx1Z2lucztcbn1cblxuUmVhY3RNYXJrZG93bi5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlbmRlcmVyczoge30sXG4gIGVzY2FwZUh0bWw6IHRydWUsXG4gIHNraXBIdG1sOiBmYWxzZSxcbiAgc291cmNlUG9zOiBmYWxzZSxcbiAgcmF3U291cmNlUG9zOiBmYWxzZSxcbiAgdHJhbnNmb3JtTGlua1VyaTogdXJpVHJhbnNmb3JtZXIsXG4gIGFzdFBsdWdpbnM6IFtdLFxuICBwbHVnaW5zOiBbXSxcbiAgcGFyc2VyT3B0aW9uczoge31cbn07XG5SZWFjdE1hcmtkb3duLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzb3VyY2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzb3VyY2VQb3M6IFByb3BUeXBlcy5ib29sLFxuICByYXdTb3VyY2VQb3M6IFByb3BUeXBlcy5ib29sLFxuICBlc2NhcGVIdG1sOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2tpcEh0bWw6IFByb3BUeXBlcy5ib29sLFxuICBhbGxvd05vZGU6IFByb3BUeXBlcy5mdW5jLFxuICBhbGxvd2VkVHlwZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihhbGxUeXBlcykpLFxuICBkaXNhbGxvd2VkVHlwZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihhbGxUeXBlcykpLFxuICB0cmFuc2Zvcm1MaW5rVXJpOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgbGlua1RhcmdldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgdHJhbnNmb3JtSW1hZ2VVcmk6IFByb3BUeXBlcy5mdW5jLFxuICBhc3RQbHVnaW5zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuZnVuYyksXG4gIHVud3JhcERpc2FsbG93ZWQ6IFByb3BUeXBlcy5ib29sLFxuICByZW5kZXJlcnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIHBsdWdpbnM6IFByb3BUeXBlcy5hcnJheSxcbiAgcGFyc2VyT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdFxufTtcblJlYWN0TWFya2Rvd24udHlwZXMgPSBhbGxUeXBlcztcblJlYWN0TWFya2Rvd24ucmVuZGVyZXJzID0gZGVmYXVsdFJlbmRlcmVycztcblJlYWN0TWFya2Rvd24udXJpVHJhbnNmb3JtZXIgPSB1cmlUcmFuc2Zvcm1lcjtcbm1vZHVsZS5leHBvcnRzID0gUmVhY3RNYXJrZG93bjsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsIi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBvYmplY3QgdHlwZSBvZiB0aGUgZ2l2ZW4gcGF5bG9hZFxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGdldFR5cGUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXlsb2FkKS5zbGljZSg4LCAtMSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyB1bmRlZmluZWRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHVuZGVmaW5lZH1cclxuICovXHJcbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnVW5kZWZpbmVkJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIG51bGxcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIG51bGx9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc051bGwocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdOdWxsJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgKGV4Y2x1ZGluZyBzcGVjaWFsIGNsYXNzZXMgb3Igb2JqZWN0cyB3aXRoIG90aGVyIHByb3RvdHlwZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBQbGFpbk9iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QocGF5bG9hZCkge1xyXG4gICAgaWYgKGdldFR5cGUocGF5bG9hZCkgIT09ICdPYmplY3QnKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiBwYXlsb2FkLmNvbnN0cnVjdG9yID09PSBPYmplY3QgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHBheWxvYWQpID09PSBPYmplY3QucHJvdG90eXBlO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdCAoZXhjbHVkaW5nIHNwZWNpYWwgY2xhc3NlcyBvciBvYmplY3RzIHdpdGggb3RoZXIgcHJvdG90eXBlcylcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFBsYWluT2JqZWN0fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNPYmplY3QocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIGFuIGVtcHR5IG9iamVjdCAoZXhjbHVkaW5nIHNwZWNpYWwgY2xhc3NlcyBvciBvYmplY3RzIHdpdGggb3RoZXIgcHJvdG90eXBlcylcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHsgW0sgaW4gYW55XTogbmV2ZXIgfX1cclxuICovXHJcbmZ1bmN0aW9uIGlzRW1wdHlPYmplY3QocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QocGF5bG9hZCkgJiYgT2JqZWN0LmtleXMocGF5bG9hZCkubGVuZ3RoID09PSAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBhbiBlbXB0eSBvYmplY3QgKGV4Y2x1ZGluZyBzcGVjaWFsIGNsYXNzZXMgb3Igb2JqZWN0cyB3aXRoIG90aGVyIHByb3RvdHlwZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBQbGFpbk9iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGlzRnVsbE9iamVjdChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdChwYXlsb2FkKSAmJiBPYmplY3Qua2V5cyhwYXlsb2FkKS5sZW5ndGggPiAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gYW55IGtpbmQgb2Ygb2JqZWN0IChpbmNsdWRpbmcgc3BlY2lhbCBjbGFzc2VzIG9yIG9iamVjdHMgd2l0aCBkaWZmZXJlbnQgcHJvdG90eXBlcylcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFBsYWluT2JqZWN0fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNBbnlPYmplY3QocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdPYmplY3QnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gb2JqZWN0IGxpa2UgYSB0eXBlIHBhc3NlZCBpbiA8ID5cclxuICpcclxuICogVXNhZ2U6IGlzT2JqZWN0TGlrZTx7aWQ6IGFueX0+KHBheWxvYWQpIC8vIHdpbGwgbWFrZSBzdXJlIGl0J3MgYW4gb2JqZWN0IGFuZCBoYXMgYW4gYGlkYCBwcm9wLlxyXG4gKlxyXG4gKiBAdGVtcGxhdGUgVCB0aGlzIG11c3QgYmUgcGFzc2VkIGluIDwgPlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgVH1cclxuICovXHJcbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gaXNBbnlPYmplY3QocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIGZ1bmN0aW9uIChyZWd1bGFyIG9yIGFzeW5jKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgQW55RnVuY3Rpb259XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgIHJldHVybiB0eXBlb2YgcGF5bG9hZCA9PT0gJ2Z1bmN0aW9uJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGFycmF5XHJcbiAqXHJcbiAqIEBwYXJhbSB7YW55fSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIGFueVtdfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNBcnJheShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ0FycmF5JztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCAxIGl0ZW1cclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIGFueVtdfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNGdWxsQXJyYXkocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzQXJyYXkocGF5bG9hZCkgJiYgcGF5bG9hZC5sZW5ndGggPiAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBhbiBlbXB0eSBhcnJheVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgW119XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VtcHR5QXJyYXkocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzQXJyYXkocGF5bG9hZCkgJiYgcGF5bG9hZC5sZW5ndGggPT09IDA7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIHN0cmluZ1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgc3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTdHJpbmcocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdTdHJpbmcnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBzdHJpbmcsIEJVVCByZXR1cm5zIGZhbHNlIGZvciAnJ1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgc3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNGdWxsU3RyaW5nKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBpc1N0cmluZyhwYXlsb2FkKSAmJiBwYXlsb2FkICE9PSAnJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzICcnXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBzdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VtcHR5U3RyaW5nKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBwYXlsb2FkID09PSAnJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgbnVtYmVyIChidXQgbm90IE5hTilcclxuICpcclxuICogVGhpcyB3aWxsIHJldHVybiBgZmFsc2VgIGZvciBgTmFOYCEhXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc051bWJlcihwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ051bWJlcicgJiYgIWlzTmFOKHBheWxvYWQpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBib29sZWFuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBib29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNCb29sZWFuKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnQm9vbGVhbic7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiAoUmVnRXhwKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgUmVnRXhwfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNSZWdFeHAocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdSZWdFeHAnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBNYXBcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIE1hcDxhbnksIGFueT59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc01hcChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ01hcCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIFdlYWtNYXBcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFdlYWtNYXA8YW55LCBhbnk+fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNXZWFrTWFwKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnV2Vha01hcCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIFNldFxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgU2V0PGFueT59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1NldChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ1NldCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIFdlYWtTZXRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFdlYWtTZXQ8YW55Pn1cclxuICovXHJcbmZ1bmN0aW9uIGlzV2Vha1NldChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ1dlYWtTZXQnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBTeW1ib2xcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHN5bWJvbH1cclxuICovXHJcbmZ1bmN0aW9uIGlzU3ltYm9sKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnU3ltYm9sJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgRGF0ZSwgYW5kIHRoYXQgdGhlIGRhdGUgaXMgdmFsaWRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIERhdGV9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0RhdGUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdEYXRlJyAmJiAhaXNOYU4ocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIEJsb2JcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIEJsb2J9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Jsb2IocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdCbG9iJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgRmlsZVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgRmlsZX1cclxuICovXHJcbmZ1bmN0aW9uIGlzRmlsZShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ0ZpbGUnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBQcm9taXNlXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBQcm9taXNlPGFueT59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1Byb21pc2UocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdQcm9taXNlJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIEVycm9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBFcnJvcn1cclxuICovXHJcbmZ1bmN0aW9uIGlzRXJyb3IocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdFcnJvcic7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBsaXRlcmFsbHkgdGhlIHZhbHVlIGBOYU5gIChpdCdzIGBOYU5gIGFuZCBhbHNvIGEgYG51bWJlcmApXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyB0eXBlb2YgTmFOfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNOYU5WYWx1ZShwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ051bWJlcicgJiYgaXNOYU4ocGF5bG9hZCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIHByaW1pdGl2ZSB0eXBlIChlZy4gQm9vbGVhbiB8IE51bGwgfCBVbmRlZmluZWQgfCBOdW1iZXIgfCBTdHJpbmcgfCBTeW1ib2wpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7KHBheWxvYWQgaXMgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQgfCBudW1iZXIgfCBzdHJpbmcgfCBzeW1ib2wpfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNQcmltaXRpdmUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIChpc0Jvb2xlYW4ocGF5bG9hZCkgfHxcclxuICAgICAgICBpc051bGwocGF5bG9hZCkgfHxcclxuICAgICAgICBpc1VuZGVmaW5lZChwYXlsb2FkKSB8fFxyXG4gICAgICAgIGlzTnVtYmVyKHBheWxvYWQpIHx8XHJcbiAgICAgICAgaXNTdHJpbmcocGF5bG9hZCkgfHxcclxuICAgICAgICBpc1N5bWJvbChwYXlsb2FkKSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIG51bGwgb3IgdW5kZWZpbmVkXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7KHBheWxvYWQgaXMgbnVsbCB8IHVuZGVmaW5lZCl9XHJcbiAqL1xyXG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSBpc09uZU9mKGlzTnVsbCwgaXNVbmRlZmluZWQpO1xyXG5mdW5jdGlvbiBpc09uZU9mKGEsIGIsIGMsIGQsIGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gYSh2YWx1ZSkgfHwgYih2YWx1ZSkgfHwgKCEhYyAmJiBjKHZhbHVlKSkgfHwgKCEhZCAmJiBkKHZhbHVlKSkgfHwgKCEhZSAmJiBlKHZhbHVlKSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBEb2VzIGEgZ2VuZXJpYyBjaGVjayB0byBjaGVjayB0aGF0IHRoZSBnaXZlbiBwYXlsb2FkIGlzIG9mIGEgZ2l2ZW4gdHlwZS5cclxuICogSW4gY2FzZXMgbGlrZSBOdW1iZXIsIGl0IHdpbGwgcmV0dXJuIHRydWUgZm9yIE5hTiBhcyBOYU4gaXMgYSBOdW1iZXIgKHRoYW5rcyBqYXZhc2NyaXB0ISk7XHJcbiAqIEl0IHdpbGwsIGhvd2V2ZXIsIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBvYmplY3QgYW5kIG51bGxcclxuICpcclxuICogQHRlbXBsYXRlIFRcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEBwYXJhbSB7VH0gdHlwZVxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IFdpbGwgdGhyb3cgdHlwZSBlcnJvciBpZiB0eXBlIGlzIGFuIGludmFsaWQgdHlwZVxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBUfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNUeXBlKHBheWxvYWQsIHR5cGUpIHtcclxuICAgIGlmICghKHR5cGUgaW5zdGFuY2VvZiBGdW5jdGlvbikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUeXBlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodHlwZSwgJ3Byb3RvdHlwZScpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVHlwZSBpcyBub3QgYSBjbGFzcycpO1xyXG4gICAgfVxyXG4gICAgLy8gQ2xhc3NlcyB1c3VhbGx5IGhhdmUgbmFtZXMgKGFzIGZ1bmN0aW9ucyB1c3VhbGx5IGhhdmUgbmFtZXMpXHJcbiAgICB2YXIgbmFtZSA9IHR5cGUubmFtZTtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSBuYW1lIHx8IEJvb2xlYW4ocGF5bG9hZCAmJiBwYXlsb2FkLmNvbnN0cnVjdG9yID09PSB0eXBlKTtcclxufVxuXG5leHBvcnQgeyBnZXRUeXBlLCBpc0FueU9iamVjdCwgaXNBcnJheSwgaXNCbG9iLCBpc0Jvb2xlYW4sIGlzRGF0ZSwgaXNFbXB0eUFycmF5LCBpc0VtcHR5T2JqZWN0LCBpc0VtcHR5U3RyaW5nLCBpc0Vycm9yLCBpc0ZpbGUsIGlzRnVsbEFycmF5LCBpc0Z1bGxPYmplY3QsIGlzRnVsbFN0cmluZywgaXNGdW5jdGlvbiwgaXNNYXAsIGlzTmFOVmFsdWUsIGlzTnVsbCwgaXNOdWxsT3JVbmRlZmluZWQsIGlzTnVtYmVyLCBpc09iamVjdCwgaXNPYmplY3RMaWtlLCBpc09uZU9mLCBpc1BsYWluT2JqZWN0LCBpc1ByaW1pdGl2ZSwgaXNQcm9taXNlLCBpc1JlZ0V4cCwgaXNTZXQsIGlzU3RyaW5nLCBpc1N5bWJvbCwgaXNUeXBlLCBpc1VuZGVmaW5lZCwgaXNXZWFrTWFwLCBpc1dlYWtTZXQgfTtcbiIsImltcG9ydCB7IGlzUGxhaW5PYmplY3QsIGlzQXJyYXksIGlzU3ltYm9sIH0gZnJvbSAnaXMtd2hhdCc7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XG5cbmZ1bmN0aW9uIGFzc2lnblByb3AoY2FycnksIGtleSwgbmV3VmFsLCBvcmlnaW5hbE9iamVjdCkge1xyXG4gICAgdmFyIHByb3BUeXBlID0gb3JpZ2luYWxPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUoa2V5KVxyXG4gICAgICAgID8gJ2VudW1lcmFibGUnXHJcbiAgICAgICAgOiAnbm9uZW51bWVyYWJsZSc7XHJcbiAgICBpZiAocHJvcFR5cGUgPT09ICdlbnVtZXJhYmxlJylcclxuICAgICAgICBjYXJyeVtrZXldID0gbmV3VmFsO1xyXG4gICAgaWYgKHByb3BUeXBlID09PSAnbm9uZW51bWVyYWJsZScpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FycnksIGtleSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogbmV3VmFsLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG1lcmdlUmVjdXJzaXZlbHkob3JpZ2luLCBuZXdDb21lciwgZXh0ZW5zaW9ucykge1xyXG4gICAgLy8gd29yayBkaXJlY3RseSBvbiBuZXdDb21lciBpZiBpdHMgbm90IGFuIG9iamVjdFxyXG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KG5ld0NvbWVyKSkge1xyXG4gICAgICAgIC8vIGV4dGVuZCBtZXJnZSBydWxlc1xyXG4gICAgICAgIGlmIChleHRlbnNpb25zICYmIGlzQXJyYXkoZXh0ZW5zaW9ucykpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChleHRlbmQpIHtcclxuICAgICAgICAgICAgICAgIG5ld0NvbWVyID0gZXh0ZW5kKG9yaWdpbiwgbmV3Q29tZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld0NvbWVyO1xyXG4gICAgfVxyXG4gICAgLy8gZGVmaW5lIG5ld09iamVjdCB0byBtZXJnZSBhbGwgdmFsdWVzIHVwb25cclxuICAgIHZhciBuZXdPYmplY3QgPSB7fTtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KG9yaWdpbikpIHtcclxuICAgICAgICB2YXIgcHJvcHNfMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9yaWdpbik7XHJcbiAgICAgICAgdmFyIHN5bWJvbHNfMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob3JpZ2luKTtcclxuICAgICAgICBuZXdPYmplY3QgPSBfX3NwcmVhZEFycmF5cyhwcm9wc18xLCBzeW1ib2xzXzEpLnJlZHVjZShmdW5jdGlvbiAoY2FycnksIGtleSkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHZhciB0YXJnZXRWYWwgPSBvcmlnaW5ba2V5XTtcclxuICAgICAgICAgICAgaWYgKCghaXNTeW1ib2woa2V5KSAmJiAhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobmV3Q29tZXIpLmluY2x1ZGVzKGtleSkpIHx8XHJcbiAgICAgICAgICAgICAgICAoaXNTeW1ib2woa2V5KSAmJiAhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuZXdDb21lcikuaW5jbHVkZXMoa2V5KSkpIHtcclxuICAgICAgICAgICAgICAgIGFzc2lnblByb3AoY2FycnksIGtleSwgdGFyZ2V0VmFsLCBvcmlnaW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjYXJyeTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICB9XHJcbiAgICB2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuZXdDb21lcik7XHJcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobmV3Q29tZXIpO1xyXG4gICAgdmFyIHJlc3VsdCA9IF9fc3ByZWFkQXJyYXlzKHByb3BzLCBzeW1ib2xzKS5yZWR1Y2UoZnVuY3Rpb24gKGNhcnJ5LCBrZXkpIHtcclxuICAgICAgICAvLyByZS1kZWZpbmUgdGhlIG9yaWdpbiBhbmQgbmV3Q29tZXIgYXMgdGFyZ2V0VmFsIGFuZCBuZXdWYWxcclxuICAgICAgICB2YXIgbmV3VmFsID0gbmV3Q29tZXJba2V5XTtcclxuICAgICAgICB2YXIgdGFyZ2V0VmFsID0gKGlzUGxhaW5PYmplY3Qob3JpZ2luKSlcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICA/IG9yaWdpbltrZXldXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIC8vIGV4dGVuZCBtZXJnZSBydWxlc1xyXG4gICAgICAgIGlmIChleHRlbnNpb25zICYmIGlzQXJyYXkoZXh0ZW5zaW9ucykpIHtcclxuICAgICAgICAgICAgZXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChleHRlbmQpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZhbCA9IGV4dGVuZCh0YXJnZXRWYWwsIG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBXaGVuIG5ld1ZhbCBpcyBhbiBvYmplY3QgZG8gdGhlIG1lcmdlIHJlY3Vyc2l2ZWx5XHJcbiAgICAgICAgaWYgKHRhcmdldFZhbCAhPT0gdW5kZWZpbmVkICYmIGlzUGxhaW5PYmplY3QobmV3VmFsKSkge1xyXG4gICAgICAgICAgICBuZXdWYWwgPSBtZXJnZVJlY3Vyc2l2ZWx5KHRhcmdldFZhbCwgbmV3VmFsLCBleHRlbnNpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzaWduUHJvcChjYXJyeSwga2V5LCBuZXdWYWwsIG5ld0NvbWVyKTtcclxuICAgICAgICByZXR1cm4gY2Fycnk7XHJcbiAgICB9LCBuZXdPYmplY3QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4vKipcclxuICogTWVyZ2UgYW55dGhpbmcgcmVjdXJzaXZlbHkuXHJcbiAqIE9iamVjdHMgZ2V0IG1lcmdlZCwgc3BlY2lhbCBvYmplY3RzIChjbGFzc2VzIGV0Yy4pIGFyZSByZS1hc3NpZ25lZCBcImFzIGlzXCIuXHJcbiAqIEJhc2ljIHR5cGVzIG92ZXJ3cml0ZSBvYmplY3RzIG9yIG90aGVyIGJhc2ljIHR5cGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0geyhJQ29uZmlnIHwgYW55KX0gb3JpZ2luXHJcbiAqIEBwYXJhbSB7Li4uYW55W119IG5ld0NvbWVyc1xyXG4gKiBAcmV0dXJucyB0aGUgcmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZShvcmlnaW4pIHtcclxuICAgIHZhciBuZXdDb21lcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbmV3Q29tZXJzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGV4dGVuc2lvbnMgPSBudWxsO1xyXG4gICAgdmFyIGJhc2UgPSBvcmlnaW47XHJcbiAgICBpZiAoaXNQbGFpbk9iamVjdChvcmlnaW4pICYmIG9yaWdpbi5leHRlbnNpb25zICYmIE9iamVjdC5rZXlzKG9yaWdpbikubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgYmFzZSA9IHt9O1xyXG4gICAgICAgIGV4dGVuc2lvbnMgPSBvcmlnaW4uZXh0ZW5zaW9ucztcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdDb21lcnMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIG5ld0NvbWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lcmdlUmVjdXJzaXZlbHkocmVzdWx0LCBuZXdDb21lciwgZXh0ZW5zaW9ucyk7XHJcbiAgICB9LCBiYXNlKTtcclxufVxuXG5mdW5jdGlvbiBjb25jYXRBcnJheXMob3JpZ2luVmFsLCBuZXdWYWwpIHtcclxuICAgIGlmIChpc0FycmF5KG9yaWdpblZhbCkgJiYgaXNBcnJheShuZXdWYWwpKSB7XHJcbiAgICAgICAgLy8gY29uY2F0IGxvZ2ljXHJcbiAgICAgICAgcmV0dXJuIG9yaWdpblZhbC5jb25jYXQobmV3VmFsKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdWYWw7IC8vIGFsd2F5cyByZXR1cm4gbmV3VmFsIGFzIGZhbGxiYWNrISFcclxufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTtcbmV4cG9ydCB7IGNvbmNhdEFycmF5cywgbWVyZ2UgfTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTQuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xNC4wXCI7XG4iLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5mdW5jdGlvbiB0b1ByaW1pdGl2ZSh0LCByKSB7XG4gIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpO1xufVxubW9kdWxlLmV4cG9ydHMgPSB0b1ByaW1pdGl2ZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkge1xuICBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIHJldHVybiBlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKHQsIGUpIHtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBfc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJ2YXIgT3ZlcmxvYWRZaWVsZCA9IHJlcXVpcmUoXCIuL092ZXJsb2FkWWllbGQuanNcIik7XG52YXIgcmVnZW5lcmF0b3IgPSByZXF1aXJlKFwiLi9yZWdlbmVyYXRvci5qc1wiKTtcbnZhciByZWdlbmVyYXRvckFzeW5jID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JBc3luYy5qc1wiKTtcbnZhciByZWdlbmVyYXRvckFzeW5jR2VuID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JBc3luY0dlbi5qc1wiKTtcbnZhciByZWdlbmVyYXRvckFzeW5jSXRlcmF0b3IgPSByZXF1aXJlKFwiLi9yZWdlbmVyYXRvckFzeW5jSXRlcmF0b3IuanNcIik7XG52YXIgcmVnZW5lcmF0b3JLZXlzID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JLZXlzLmpzXCIpO1xudmFyIHJlZ2VuZXJhdG9yVmFsdWVzID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JWYWx1ZXMuanNcIik7XG5mdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgciA9IHJlZ2VuZXJhdG9yKCksXG4gICAgZSA9IHIubShfcmVnZW5lcmF0b3JSdW50aW1lKSxcbiAgICB0ID0gKE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZihlKSA6IGUuX19wcm90b19fKS5jb25zdHJ1Y3RvcjtcbiAgZnVuY3Rpb24gbihyKSB7XG4gICAgdmFyIGUgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHIgJiYgci5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gISFlICYmIChlID09PSB0IHx8IFwiR2VuZXJhdG9yRnVuY3Rpb25cIiA9PT0gKGUuZGlzcGxheU5hbWUgfHwgZS5uYW1lKSk7XG4gIH1cbiAgdmFyIG8gPSB7XG4gICAgXCJ0aHJvd1wiOiAxLFxuICAgIFwicmV0dXJuXCI6IDIsXG4gICAgXCJicmVha1wiOiAzLFxuICAgIFwiY29udGludWVcIjogM1xuICB9O1xuICBmdW5jdGlvbiBhKHIpIHtcbiAgICB2YXIgZSwgdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG4pIHtcbiAgICAgIGUgfHwgKGUgPSB7XG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgICAgcmV0dXJuIHQobi5hLCAyKTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJjYXRjaFwiOiBmdW5jdGlvbiBfY2F0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIG4udjtcbiAgICAgICAgfSxcbiAgICAgICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQociwgZSkge1xuICAgICAgICAgIHJldHVybiB0KG4uYSwgb1tyXSwgZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQociwgbywgYSkge1xuICAgICAgICAgIHJldHVybiBlLnJlc3VsdE5hbWUgPSBvLCB0KG4uZCwgcmVnZW5lcmF0b3JWYWx1ZXMociksIGEpO1xuICAgICAgICB9LFxuICAgICAgICBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaChyKSB7XG4gICAgICAgICAgcmV0dXJuIHQobi5mLCByKTtcbiAgICAgICAgfVxuICAgICAgfSwgdCA9IGZ1bmN0aW9uIHQociwgX3QsIG8pIHtcbiAgICAgICAgbi5wID0gZS5wcmV2LCBuLm4gPSBlLm5leHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHIoX3QsIG8pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGUubmV4dCA9IG4ubjtcbiAgICAgICAgfVxuICAgICAgfSksIGUucmVzdWx0TmFtZSAmJiAoZVtlLnJlc3VsdE5hbWVdID0gbi52LCBlLnJlc3VsdE5hbWUgPSB2b2lkIDApLCBlLnNlbnQgPSBuLnYsIGUubmV4dCA9IG4ubjtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByLmNhbGwodGhpcywgZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBuLnAgPSBlLnByZXYsIG4ubiA9IGUubmV4dDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiAobW9kdWxlLmV4cG9ydHMgPSBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JhcDogZnVuY3Rpb24gd3JhcChlLCB0LCBuLCBvKSB7XG4gICAgICAgIHJldHVybiByLncoYShlKSwgdCwgbiwgbyAmJiBvLnJldmVyc2UoKSk7XG4gICAgICB9LFxuICAgICAgaXNHZW5lcmF0b3JGdW5jdGlvbjogbixcbiAgICAgIG1hcms6IHIubSxcbiAgICAgIGF3cmFwOiBmdW5jdGlvbiBhd3JhcChyLCBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT3ZlcmxvYWRZaWVsZChyLCBlKTtcbiAgICAgIH0sXG4gICAgICBBc3luY0l0ZXJhdG9yOiByZWdlbmVyYXRvckFzeW5jSXRlcmF0b3IsXG4gICAgICBhc3luYzogZnVuY3Rpb24gYXN5bmMociwgZSwgdCwgbywgdSkge1xuICAgICAgICByZXR1cm4gKG4oZSkgPyByZWdlbmVyYXRvckFzeW5jR2VuIDogcmVnZW5lcmF0b3JBc3luYykoYShyKSwgZSwgdCwgbywgdSk7XG4gICAgICB9LFxuICAgICAga2V5czogcmVnZW5lcmF0b3JLZXlzLFxuICAgICAgdmFsdWVzOiByZWdlbmVyYXRvclZhbHVlc1xuICAgIH07XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cykoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yUnVudGltZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciByZWdlbmVyYXRvckFzeW5jR2VuID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JBc3luY0dlbi5qc1wiKTtcbmZ1bmN0aW9uIF9yZWdlbmVyYXRvckFzeW5jKG4sIGUsIHIsIHQsIG8pIHtcbiAgdmFyIGEgPSByZWdlbmVyYXRvckFzeW5jR2VuKG4sIGUsIHIsIHQsIG8pO1xuICByZXR1cm4gYS5uZXh0KCkudGhlbihmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuLmRvbmUgPyBuLnZhbHVlIDogYS5uZXh0KCk7XG4gIH0pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfcmVnZW5lcmF0b3JBc3luYywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9yZWdlbmVyYXRvcktleXMoZSkge1xuICB2YXIgbiA9IE9iamVjdChlKSxcbiAgICByID0gW107XG4gIGZvciAodmFyIHQgaW4gbikgci51bnNoaWZ0KHQpO1xuICByZXR1cm4gZnVuY3Rpb24gZSgpIHtcbiAgICBmb3IgKDsgci5sZW5ndGg7KSBpZiAoKHQgPSByLnBvcCgpKSBpbiBuKSByZXR1cm4gZS52YWx1ZSA9IHQsIGUuZG9uZSA9ICExLCBlO1xuICAgIHJldHVybiBlLmRvbmUgPSAhMCwgZTtcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yS2V5cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4vdHlwZW9mLmpzXCIpW1wiZGVmYXVsdFwiXTtcbmZ1bmN0aW9uIF9yZWdlbmVyYXRvclZhbHVlcyhlKSB7XG4gIGlmIChudWxsICE9IGUpIHtcbiAgICB2YXIgdCA9IGVbXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiXSxcbiAgICAgIHIgPSAwO1xuICAgIGlmICh0KSByZXR1cm4gdC5jYWxsKGUpO1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUubmV4dCkgcmV0dXJuIGU7XG4gICAgaWYgKCFpc05hTihlLmxlbmd0aCkpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICByZXR1cm4gZSAmJiByID49IGUubGVuZ3RoICYmIChlID0gdm9pZCAwKSwge1xuICAgICAgICAgIHZhbHVlOiBlICYmIGVbcisrXSxcbiAgICAgICAgICBkb25lOiAhZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihfdHlwZW9mKGUpICsgXCIgaXMgbm90IGl0ZXJhYmxlXCIpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfcmVnZW5lcmF0b3JWYWx1ZXMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFNpZGVDaGFubmVsID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBhcnJheVByZWZpeEdlbmVyYXRvcnMgPSB7XG4gICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1tdJztcbiAgICB9LFxuICAgIGNvbW1hOiAnY29tbWEnLFxuICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMocHJlZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICB9LFxuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHByZWZpeCkge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0Rm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xudmFyIGRlZmF1bHRzID0ge1xuICAgIGFkZFF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGFsbG93RW1wdHlBcnJheXM6IGZhbHNlLFxuICAgIGFycmF5Rm9ybWF0OiAnaW5kaWNlcycsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGNvbW1hUm91bmRUcmlwOiBmYWxzZSxcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBlbmNvZGU6IHRydWUsXG4gICAgZW5jb2RlRG90SW5LZXlzOiBmYWxzZSxcbiAgICBlbmNvZGVyOiB1dGlscy5lbmNvZGUsXG4gICAgZW5jb2RlVmFsdWVzT25seTogZmFsc2UsXG4gICAgZmlsdGVyOiB2b2lkIHVuZGVmaW5lZCxcbiAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgZm9ybWF0dGVyOiBmb3JtYXRzLmZvcm1hdHRlcnNbZGVmYXVsdEZvcm1hdF0sXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGluZGljZXM6IGZhbHNlLFxuICAgIHNlcmlhbGl6ZURhdGU6IGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gdG9JU08uY2FsbChkYXRlKTtcbiAgICB9LFxuICAgIHNraXBOdWxsczogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ251bWJlcidcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdib29sZWFuJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ3N5bWJvbCdcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdiaWdpbnQnO1xufTtcblxudmFyIHNlbnRpbmVsID0ge307XG5cbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkoXG4gICAgb2JqZWN0LFxuICAgIHByZWZpeCxcbiAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgIGNvbW1hUm91bmRUcmlwLFxuICAgIGFsbG93RW1wdHlBcnJheXMsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVEb3RJbktleXMsXG4gICAgZW5jb2RlcixcbiAgICBmaWx0ZXIsXG4gICAgc29ydCxcbiAgICBhbGxvd0RvdHMsXG4gICAgc2VyaWFsaXplRGF0ZSxcbiAgICBmb3JtYXQsXG4gICAgZm9ybWF0dGVyLFxuICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgY2hhcnNldCxcbiAgICBzaWRlQ2hhbm5lbFxuKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcblxuICAgIHZhciB0bXBTYyA9IHNpZGVDaGFubmVsO1xuICAgIHZhciBzdGVwID0gMDtcbiAgICB2YXIgZmluZEZsYWcgPSBmYWxzZTtcbiAgICB3aGlsZSAoKHRtcFNjID0gdG1wU2MuZ2V0KHNlbnRpbmVsKSkgIT09IHZvaWQgdW5kZWZpbmVkICYmICFmaW5kRmxhZykge1xuICAgICAgICAvLyBXaGVyZSBvYmplY3QgbGFzdCBhcHBlYXJlZCBpbiB0aGUgcmVmIHRyZWVcbiAgICAgICAgdmFyIHBvcyA9IHRtcFNjLmdldChvYmplY3QpO1xuICAgICAgICBzdGVwICs9IDE7XG4gICAgICAgIGlmICh0eXBlb2YgcG9zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHBvcyA9PT0gc3RlcCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdDeWNsaWMgb2JqZWN0IHZhbHVlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbmRGbGFnID0gdHJ1ZTsgLy8gQnJlYWsgd2hpbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRtcFNjLmdldChzZW50aW5lbCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzdGVwID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9iaiA9IGZpbHRlcihwcmVmaXgsIG9iaik7XG4gICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIG9iaiA9IHNlcmlhbGl6ZURhdGUob2JqKTtcbiAgICB9IGVsc2UgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNBcnJheShvYmopKSB7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1heWJlTWFwKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURhdGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3ROdWxsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVyICYmICFlbmNvZGVWYWx1ZXNPbmx5ID8gZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknLCBmb3JtYXQpIDogcHJlZml4O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGlzTm9uTnVsbGlzaFByaW1pdGl2ZShvYmopIHx8IHV0aWxzLmlzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgIHZhciBrZXlWYWx1ZSA9IGVuY29kZVZhbHVlc09ubHkgPyBwcmVmaXggOiBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScsIGZvcm1hdCk7XG4gICAgICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihrZXlWYWx1ZSkgKyAnPScgKyBmb3JtYXR0ZXIoZW5jb2RlcihvYmosIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICd2YWx1ZScsIGZvcm1hdCkpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNBcnJheShvYmopKSB7XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gam9pbiBlbGVtZW50cyBpblxuICAgICAgICBpZiAoZW5jb2RlVmFsdWVzT25seSAmJiBlbmNvZGVyKSB7XG4gICAgICAgICAgICBvYmogPSB1dGlscy5tYXliZU1hcChvYmosIGVuY29kZXIpO1xuICAgICAgICB9XG4gICAgICAgIG9iaktleXMgPSBbeyB2YWx1ZTogb2JqLmxlbmd0aCA+IDAgPyBvYmouam9pbignLCcpIHx8IG51bGwgOiB2b2lkIHVuZGVmaW5lZCB9XTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIHZhciBlbmNvZGVkUHJlZml4ID0gZW5jb2RlRG90SW5LZXlzID8gU3RyaW5nKHByZWZpeCkucmVwbGFjZSgvXFwuL2csICclMkUnKSA6IFN0cmluZyhwcmVmaXgpO1xuXG4gICAgdmFyIGFkanVzdGVkUHJlZml4ID0gY29tbWFSb3VuZFRyaXAgJiYgaXNBcnJheShvYmopICYmIG9iai5sZW5ndGggPT09IDEgPyBlbmNvZGVkUHJlZml4ICsgJ1tdJyA6IGVuY29kZWRQcmVmaXg7XG5cbiAgICBpZiAoYWxsb3dFbXB0eUFycmF5cyAmJiBpc0FycmF5KG9iaikgJiYgb2JqLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gYWRqdXN0ZWRQcmVmaXggKyAnW10nO1xuICAgIH1cblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqS2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tqXTtcbiAgICAgICAgdmFyIHZhbHVlID0gdHlwZW9mIGtleSA9PT0gJ29iamVjdCcgJiYga2V5ICYmIHR5cGVvZiBrZXkudmFsdWUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IGtleS52YWx1ZVxuICAgICAgICAgICAgOiBvYmpba2V5XTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbmNvZGVkS2V5ID0gYWxsb3dEb3RzICYmIGVuY29kZURvdEluS2V5cyA/IFN0cmluZyhrZXkpLnJlcGxhY2UoL1xcLi9nLCAnJTJFJykgOiBTdHJpbmcoa2V5KTtcbiAgICAgICAgdmFyIGtleVByZWZpeCA9IGlzQXJyYXkob2JqKVxuICAgICAgICAgICAgPyB0eXBlb2YgZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2Z1bmN0aW9uJyA/IGdlbmVyYXRlQXJyYXlQcmVmaXgoYWRqdXN0ZWRQcmVmaXgsIGVuY29kZWRLZXkpIDogYWRqdXN0ZWRQcmVmaXhcbiAgICAgICAgICAgIDogYWRqdXN0ZWRQcmVmaXggKyAoYWxsb3dEb3RzID8gJy4nICsgZW5jb2RlZEtleSA6ICdbJyArIGVuY29kZWRLZXkgKyAnXScpO1xuXG4gICAgICAgIHNpZGVDaGFubmVsLnNldChvYmplY3QsIHN0ZXApO1xuICAgICAgICB2YXIgdmFsdWVTaWRlQ2hhbm5lbCA9IGdldFNpZGVDaGFubmVsKCk7XG4gICAgICAgIHZhbHVlU2lkZUNoYW5uZWwuc2V0KHNlbnRpbmVsLCBzaWRlQ2hhbm5lbCk7XG4gICAgICAgIHB1c2hUb0FycmF5KHZhbHVlcywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBrZXlQcmVmaXgsXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgY29tbWFSb3VuZFRyaXAsXG4gICAgICAgICAgICBhbGxvd0VtcHR5QXJyYXlzLFxuICAgICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgZW5jb2RlRG90SW5LZXlzLFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBlbmNvZGVWYWx1ZXNPbmx5ICYmIGlzQXJyYXkob2JqKSA/IG51bGwgOiBlbmNvZGVyLFxuICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICBmb3JtYXQsXG4gICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgY2hhcnNldCxcbiAgICAgICAgICAgIHZhbHVlU2lkZUNoYW5uZWxcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcztcbn07XG5cbnZhciBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zID0gZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BhbGxvd0VtcHR5QXJyYXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuZW5jb2RlRG90SW5LZXlzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVEb3RJbktleXMgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgZW5jb2RlRG90SW5LZXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5lbmNvZGVyICE9PSBudWxsICYmIHR5cGVvZiBvcHRzLmVuY29kZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmVuY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRW5jb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgY2hhcnNldCA9IG9wdHMuY2hhcnNldCB8fCBkZWZhdWx0cy5jaGFyc2V0O1xuICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5mb3JtYXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICghaGFzLmNhbGwoZm9ybWF0cy5mb3JtYXR0ZXJzLCBvcHRzLmZvcm1hdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZm9ybWF0IG9wdGlvbiBwcm92aWRlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBmb3JtYXQgPSBvcHRzLmZvcm1hdDtcbiAgICB9XG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuXG4gICAgdmFyIGZpbHRlciA9IGRlZmF1bHRzLmZpbHRlcjtcbiAgICBpZiAodHlwZW9mIG9wdHMuZmlsdGVyID09PSAnZnVuY3Rpb24nIHx8IGlzQXJyYXkob3B0cy5maWx0ZXIpKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdHMuZmlsdGVyO1xuICAgIH1cblxuICAgIHZhciBhcnJheUZvcm1hdDtcbiAgICBpZiAob3B0cy5hcnJheUZvcm1hdCBpbiBhcnJheVByZWZpeEdlbmVyYXRvcnMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmFycmF5Rm9ybWF0O1xuICAgIH0gZWxzZSBpZiAoJ2luZGljZXMnIGluIG9wdHMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmluZGljZXMgPyAnaW5kaWNlcycgOiAncmVwZWF0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheUZvcm1hdCA9IGRlZmF1bHRzLmFycmF5Rm9ybWF0O1xuICAgIH1cblxuICAgIGlmICgnY29tbWFSb3VuZFRyaXAnIGluIG9wdHMgJiYgdHlwZW9mIG9wdHMuY29tbWFSb3VuZFRyaXAgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgY29tbWFSb3VuZFRyaXBgIG11c3QgYmUgYSBib29sZWFuLCBvciBhYnNlbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgYWxsb3dEb3RzID0gdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IG9wdHMuZW5jb2RlRG90SW5LZXlzID09PSB0cnVlID8gdHJ1ZSA6IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRRdWVyeVByZWZpeDogdHlwZW9mIG9wdHMuYWRkUXVlcnlQcmVmaXggPT09ICdib29sZWFuJyA/IG9wdHMuYWRkUXVlcnlQcmVmaXggOiBkZWZhdWx0cy5hZGRRdWVyeVByZWZpeCxcbiAgICAgICAgYWxsb3dEb3RzOiBhbGxvd0RvdHMsXG4gICAgICAgIGFsbG93RW1wdHlBcnJheXM6IHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgPT09ICdib29sZWFuJyA/ICEhb3B0cy5hbGxvd0VtcHR5QXJyYXlzIDogZGVmYXVsdHMuYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgYXJyYXlGb3JtYXQ6IGFycmF5Rm9ybWF0LFxuICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgICAgICBjaGFyc2V0U2VudGluZWw6IHR5cGVvZiBvcHRzLmNoYXJzZXRTZW50aW5lbCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jaGFyc2V0U2VudGluZWwgOiBkZWZhdWx0cy5jaGFyc2V0U2VudGluZWwsXG4gICAgICAgIGNvbW1hUm91bmRUcmlwOiAhIW9wdHMuY29tbWFSb3VuZFRyaXAsXG4gICAgICAgIGRlbGltaXRlcjogdHlwZW9mIG9wdHMuZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmRlbGltaXRlciA6IG9wdHMuZGVsaW1pdGVyLFxuICAgICAgICBlbmNvZGU6IHR5cGVvZiBvcHRzLmVuY29kZSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGUgOiBkZWZhdWx0cy5lbmNvZGUsXG4gICAgICAgIGVuY29kZURvdEluS2V5czogdHlwZW9mIG9wdHMuZW5jb2RlRG90SW5LZXlzID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZURvdEluS2V5cyA6IGRlZmF1bHRzLmVuY29kZURvdEluS2V5cyxcbiAgICAgICAgZW5jb2RlcjogdHlwZW9mIG9wdHMuZW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZW5jb2RlciA6IGRlZmF1bHRzLmVuY29kZXIsXG4gICAgICAgIGVuY29kZVZhbHVlc09ubHk6IHR5cGVvZiBvcHRzLmVuY29kZVZhbHVlc09ubHkgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlVmFsdWVzT25seSA6IGRlZmF1bHRzLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgICAgZm9ybWF0dGVyOiBmb3JtYXR0ZXIsXG4gICAgICAgIHNlcmlhbGl6ZURhdGU6IHR5cGVvZiBvcHRzLnNlcmlhbGl6ZURhdGUgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNlcmlhbGl6ZURhdGUgOiBkZWZhdWx0cy5zZXJpYWxpemVEYXRlLFxuICAgICAgICBza2lwTnVsbHM6IHR5cGVvZiBvcHRzLnNraXBOdWxscyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5za2lwTnVsbHMgOiBkZWZhdWx0cy5za2lwTnVsbHMsXG4gICAgICAgIHNvcnQ6IHR5cGVvZiBvcHRzLnNvcnQgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNvcnQgOiBudWxsLFxuICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmdcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBvcHRzKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cyk7XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICB2YXIgZmlsdGVyO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqID0gZmlsdGVyKCcnLCBvYmopO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvcHRpb25zLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHZhciBnZW5lcmF0ZUFycmF5UHJlZml4ID0gYXJyYXlQcmVmaXhHZW5lcmF0b3JzW29wdGlvbnMuYXJyYXlGb3JtYXRdO1xuICAgIHZhciBjb21tYVJvdW5kVHJpcCA9IGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgb3B0aW9ucy5jb21tYVJvdW5kVHJpcDtcblxuICAgIGlmICghb2JqS2V5cykge1xuICAgICAgICBvYmpLZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zb3J0KSB7XG4gICAgICAgIG9iaktleXMuc29ydChvcHRpb25zLnNvcnQpO1xuICAgIH1cblxuICAgIHZhciBzaWRlQ2hhbm5lbCA9IGdldFNpZGVDaGFubmVsKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpLZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2ldO1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgICBpZiAob3B0aW9ucy5za2lwTnVsbHMgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hUb0FycmF5KGtleXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIGNvbW1hUm91bmRUcmlwLFxuICAgICAgICAgICAgb3B0aW9ucy5hbGxvd0VtcHR5QXJyYXlzLFxuICAgICAgICAgICAgb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICBvcHRpb25zLnNraXBOdWxscyxcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlRG90SW5LZXlzLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGUgPyBvcHRpb25zLmVuY29kZXIgOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLnNvcnQsXG4gICAgICAgICAgICBvcHRpb25zLmFsbG93RG90cyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIG9wdGlvbnMuZm9ybWF0LFxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXR0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgICAgICBvcHRpb25zLmNoYXJzZXQsXG4gICAgICAgICAgICBzaWRlQ2hhbm5lbFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICB2YXIgam9pbmVkID0ga2V5cy5qb2luKG9wdGlvbnMuZGVsaW1pdGVyKTtcbiAgICB2YXIgcHJlZml4ID0gb3B0aW9ucy5hZGRRdWVyeVByZWZpeCA9PT0gdHJ1ZSA/ICc/JyA6ICcnO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpLCB0aGUgXCJudW1lcmljIGVudGl0eVwiIHJlcHJlc2VudGF0aW9uIG9mIGEgY2hlY2ttYXJrXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0ImJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lRTIlOUMlOTMmJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqb2luZWQubGVuZ3RoID4gMCA/IHByZWZpeCArIGpvaW5lZCA6ICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xudmFyIGdldFNpZGVDaGFubmVsTGlzdCA9IHJlcXVpcmUoJ3NpZGUtY2hhbm5lbC1saXN0Jyk7XG52YXIgZ2V0U2lkZUNoYW5uZWxNYXAgPSByZXF1aXJlKCdzaWRlLWNoYW5uZWwtbWFwJyk7XG52YXIgZ2V0U2lkZUNoYW5uZWxXZWFrTWFwID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsLXdlYWttYXAnKTtcblxudmFyIG1ha2VDaGFubmVsID0gZ2V0U2lkZUNoYW5uZWxXZWFrTWFwIHx8IGdldFNpZGVDaGFubmVsTWFwIHx8IGdldFNpZGVDaGFubmVsTGlzdDtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWwoKSB7XG5cdC8qKiBAdHlwZWRlZiB7UmV0dXJuVHlwZTx0eXBlb2YgZ2V0U2lkZUNoYW5uZWw+fSBDaGFubmVsICovXG5cblx0LyoqIEB0eXBlIHtDaGFubmVsIHwgdW5kZWZpbmVkfSAqLyB2YXIgJGNoYW5uZWxEYXRhO1xuXG5cdC8qKiBAdHlwZSB7Q2hhbm5lbH0gKi9cblx0dmFyIGNoYW5uZWwgPSB7XG5cdFx0YXNzZXJ0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoIWNoYW5uZWwuaGFzKGtleSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1NpZGUgY2hhbm5lbCBkb2VzIG5vdCBjb250YWluICcgKyBpbnNwZWN0KGtleSkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0J2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiAhISRjaGFubmVsRGF0YSAmJiAkY2hhbm5lbERhdGFbJ2RlbGV0ZSddKGtleSk7XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiAkY2hhbm5lbERhdGEgJiYgJGNoYW5uZWxEYXRhLmdldChrZXkpO1xuXHRcdH0sXG5cdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gISEkY2hhbm5lbERhdGEgJiYgJGNoYW5uZWxEYXRhLmhhcyhrZXkpO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCEkY2hhbm5lbERhdGEpIHtcblx0XHRcdFx0JGNoYW5uZWxEYXRhID0gbWFrZUNoYW5uZWwoKTtcblx0XHRcdH1cblxuXHRcdFx0JGNoYW5uZWxEYXRhLnNldChrZXksIHZhbHVlKTtcblx0XHR9XG5cdH07XG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETzogZmlndXJlIG91dCB3aHkgdGhpcyBpcyBlcnJvcmluZ1xuXHRyZXR1cm4gY2hhbm5lbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnb2JqZWN0LWluc3BlY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG4vKlxuKiBUaGlzIGZ1bmN0aW9uIHRyYXZlcnNlcyB0aGUgbGlzdCByZXR1cm5pbmcgdGhlIG5vZGUgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4ga2V5LlxuKlxuKiBUaGF0IG5vZGUgaXMgYWxzbyBtb3ZlZCB0byB0aGUgaGVhZCBvZiB0aGUgbGlzdCwgc28gdGhhdCBpZiBpdCdzIGFjY2Vzc2VkIGFnYWluIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2UgdGhlIHdob2xlIGxpc3QuXG4qIEJ5IGRvaW5nIHNvLCBhbGwgdGhlIHJlY2VudGx5IHVzZWQgbm9kZXMgY2FuIGJlIGFjY2Vzc2VkIHJlbGF0aXZlbHkgcXVpY2tseS5cbiovXG4vKiogQHR5cGUge2ltcG9ydCgnLi9saXN0LmQudHMnKS5saXN0R2V0Tm9kZX0gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGxpc3RHZXROb2RlID0gZnVuY3Rpb24gKGxpc3QsIGtleSwgaXNEZWxldGUpIHtcblx0LyoqIEB0eXBlIHt0eXBlb2YgbGlzdCB8IE5vbk51bGxhYmxlPCh0eXBlb2YgbGlzdClbJ25leHQnXT59ICovXG5cdHZhciBwcmV2ID0gbGlzdDtcblx0LyoqIEB0eXBlIHsodHlwZW9mIGxpc3QpWyduZXh0J119ICovXG5cdHZhciBjdXJyO1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGZvciAoOyAoY3VyciA9IHByZXYubmV4dCkgIT0gbnVsbDsgcHJldiA9IGN1cnIpIHtcblx0XHRpZiAoY3Vyci5rZXkgPT09IGtleSkge1xuXHRcdFx0cHJldi5uZXh0ID0gY3Vyci5uZXh0O1xuXHRcdFx0aWYgKCFpc0RlbGV0ZSkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG5cdFx0XHRcdGN1cnIubmV4dCA9IC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8dHlwZW9mIGxpc3QubmV4dD59ICovIChsaXN0Lm5leHQpO1xuXHRcdFx0XHRsaXN0Lm5leHQgPSBjdXJyOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY3Vycjtcblx0XHR9XG5cdH1cbn07XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2xpc3QuZC50cycpLmxpc3RHZXR9ICovXG52YXIgbGlzdEdldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHtcblx0aWYgKCFvYmplY3RzKSB7XG5cdFx0cmV0dXJuIHZvaWQgdW5kZWZpbmVkO1xuXHR9XG5cdHZhciBub2RlID0gbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcblx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZTtcbn07XG4vKiogQHR5cGUge2ltcG9ydCgnLi9saXN0LmQudHMnKS5saXN0U2V0fSAqL1xudmFyIGxpc3RTZXQgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5LCB2YWx1ZSkge1xuXHR2YXIgbm9kZSA9IGxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG5cdGlmIChub2RlKSB7XG5cdFx0bm9kZS52YWx1ZSA9IHZhbHVlO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFByZXBlbmQgdGhlIG5ldyBub2RlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3Rcblx0XHRvYmplY3RzLm5leHQgPSAvKiogQHR5cGUge2ltcG9ydCgnLi9saXN0LmQudHMnKS5MaXN0Tm9kZTx0eXBlb2YgdmFsdWUsIHR5cGVvZiBrZXk+fSAqLyAoeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduLCBuby1leHRyYS1wYXJlbnNcblx0XHRcdGtleToga2V5LFxuXHRcdFx0bmV4dDogb2JqZWN0cy5uZXh0LFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fSk7XG5cdH1cbn07XG4vKiogQHR5cGUge2ltcG9ydCgnLi9saXN0LmQudHMnKS5saXN0SGFzfSAqL1xudmFyIGxpc3RIYXMgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5KSB7XG5cdGlmICghb2JqZWN0cykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gISFsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xufTtcbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2xpc3QuZC50cycpLmxpc3REZWxldGV9ICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBsaXN0RGVsZXRlID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHRpZiAob2JqZWN0cykge1xuXHRcdHJldHVybiBsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXksIHRydWUpO1xuXHR9XG59O1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTaWRlQ2hhbm5lbExpc3QoKSB7XG5cdC8qKiBAdHlwZWRlZiB7UmV0dXJuVHlwZTx0eXBlb2YgZ2V0U2lkZUNoYW5uZWxMaXN0Pn0gQ2hhbm5lbCAqL1xuXHQvKiogQHR5cGVkZWYge1BhcmFtZXRlcnM8Q2hhbm5lbFsnZ2V0J10+WzBdfSBLICovXG5cdC8qKiBAdHlwZWRlZiB7UGFyYW1ldGVyczxDaGFubmVsWydzZXQnXT5bMV19IFYgKi9cblxuXHQvKiogQHR5cGUge2ltcG9ydCgnLi9saXN0LmQudHMnKS5Sb290Tm9kZTxWLCBLPiB8IHVuZGVmaW5lZH0gKi8gdmFyICRvO1xuXG5cdC8qKiBAdHlwZSB7Q2hhbm5lbH0gKi9cblx0dmFyIGNoYW5uZWwgPSB7XG5cdFx0YXNzZXJ0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoIWNoYW5uZWwuaGFzKGtleSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1NpZGUgY2hhbm5lbCBkb2VzIG5vdCBjb250YWluICcgKyBpbnNwZWN0KGtleSkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0J2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHZhciByb290ID0gJG8gJiYgJG8ubmV4dDtcblx0XHRcdHZhciBkZWxldGVkTm9kZSA9IGxpc3REZWxldGUoJG8sIGtleSk7XG5cdFx0XHRpZiAoZGVsZXRlZE5vZGUgJiYgcm9vdCAmJiByb290ID09PSBkZWxldGVkTm9kZSkge1xuXHRcdFx0XHQkbyA9IHZvaWQgdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICEhZGVsZXRlZE5vZGU7XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBsaXN0R2V0KCRvLCBrZXkpO1xuXHRcdH0sXG5cdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gbGlzdEhhcygkbywga2V5KTtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmICghJG8pIHtcblx0XHRcdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgbGlua2VkIGxpc3QgYXMgYW4gZW1wdHkgbm9kZSwgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIHNwZWNpYWwtY2FzZSBoYW5kbGluZyBvZiB0aGUgZmlyc3Qgbm9kZTogd2UgY2FuIGFsd2F5cyByZWZlciB0byBpdCBhcyAocHJldmlvdXMgbm9kZSkubmV4dCwgaW5zdGVhZCBvZiBzb21ldGhpbmcgbGlrZSAobGlzdCkuaGVhZFxuXHRcdFx0XHQkbyA9IHtcblx0XHRcdFx0XHRuZXh0OiB2b2lkIHVuZGVmaW5lZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xuXHRcdFx0bGlzdFNldCgvKiogQHR5cGUge05vbk51bGxhYmxlPHR5cGVvZiAkbz59ICovICgkbyksIGtleSwgdmFsdWUpO1xuXHRcdH1cblx0fTtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBmaWd1cmUgb3V0IHdoeSB0aGlzIGlzIGVycm9yaW5nXG5cdHJldHVybiBjaGFubmVsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2V2YWwnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRXZhbEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yYW5nZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBSYW5nZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yZWYnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gUmVmZXJlbmNlRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3N5bnRheCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBTeW50YXhFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vdXJpJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFVSSUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9hYnMnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5hYnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2Zsb29yJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZmxvb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL21heCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLm1heDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vbWluJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubWluO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9wb3cnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5wb3c7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3JvdW5kJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgucm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkaXNOYU4gPSByZXF1aXJlKCcuL2lzTmFOJyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3NpZ24nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2lnbihudW1iZXIpIHtcblx0aWYgKCRpc05hTihudW1iZXIpIHx8IG51bWJlciA9PT0gMCkge1xuXHRcdHJldHVybiBudW1iZXI7XG5cdH1cblx0cmV0dXJuIG51bWJlciA8IDAgPyAtMSA6ICsxO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vaXNOYU4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIGlzTmFOKGEpIHtcblx0cmV0dXJuIGEgIT09IGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9nT1BEJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZhbHNlO1xuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRkZWZpbmVQcm9wZXJ0eTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG9yaWdTeW1ib2wgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2w7XG52YXIgaGFzU3ltYm9sU2hhbSA9IHJlcXVpcmUoJy4vc2hhbXMnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3NoYW1zJyl9ICovXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdC8qKiBAdHlwZSB7eyBbayBpbiBzeW1ib2xdPzogdW5rbm93biB9fSAqL1xuXHR2YXIgb2JqID0ge307XG5cdHZhciBzeW0gPSBTeW1ib2woJ3Rlc3QnKTtcblx0dmFyIHN5bU9iaiA9IE9iamVjdChzeW0pO1xuXHRpZiAodHlwZW9mIHN5bSA9PT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW1PYmopICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL29iamVjdC5hc3NpZ24vaXNzdWVzLzE3XG5cdC8vIGlmIChzeW0gaW5zdGFuY2VvZiBTeW1ib2wpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uL2dldC1vd24tcHJvcGVydHktc3ltYm9scy9pc3N1ZXMvNFxuXHQvLyBpZiAoIShzeW1PYmogaW5zdGFuY2VvZiBTeW1ib2wpKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIGlmICh0eXBlb2YgU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gaWYgKFN0cmluZyhzeW0pICE9PSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltVmFsID0gNDI7XG5cdG9ialtzeW1dID0gc3ltVmFsO1xuXHRmb3IgKHZhciBfIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tdW5yZWFjaGFibGUtbG9vcFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnNcblx0XHR2YXIgZGVzY3JpcHRvciA9IC8qKiBAdHlwZSB7UHJvcGVydHlEZXNjcmlwdG9yfSAqLyAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSkpO1xuXHRcdGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSBzeW1WYWwgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlICE9PSB0cnVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVmbGVjdEdldFByb3RvID0gcmVxdWlyZSgnLi9SZWZsZWN0LmdldFByb3RvdHlwZU9mJyk7XG52YXIgb3JpZ2luYWxHZXRQcm90byA9IHJlcXVpcmUoJy4vT2JqZWN0LmdldFByb3RvdHlwZU9mJyk7XG5cbnZhciBnZXREdW5kZXJQcm90byA9IHJlcXVpcmUoJ2R1bmRlci1wcm90by9nZXQnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gcmVmbGVjdEdldFByb3RvXG5cdD8gZnVuY3Rpb24gZ2V0UHJvdG8oTykge1xuXHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgY2FuJ3QgbmFycm93IGluc2lkZSBhIGNsb3N1cmUsIGZvciBzb21lIHJlYXNvblxuXHRcdHJldHVybiByZWZsZWN0R2V0UHJvdG8oTyk7XG5cdH1cblx0OiBvcmlnaW5hbEdldFByb3RvXG5cdFx0PyBmdW5jdGlvbiBnZXRQcm90byhPKSB7XG5cdFx0XHRpZiAoIU8gfHwgKHR5cGVvZiBPICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgTyAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0UHJvdG86IG5vdCBhbiBvYmplY3QnKTtcblx0XHRcdH1cblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgY2FuJ3QgbmFycm93IGluc2lkZSBhIGNsb3N1cmUsIGZvciBzb21lIHJlYXNvblxuXHRcdFx0cmV0dXJuIG9yaWdpbmFsR2V0UHJvdG8oTyk7XG5cdFx0fVxuXHRcdDogZ2V0RHVuZGVyUHJvdG9cblx0XHRcdD8gZnVuY3Rpb24gZ2V0UHJvdG8oTykge1xuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGNhbid0IG5hcnJvdyBpbnNpZGUgYSBjbG9zdXJlLCBmb3Igc29tZSByZWFzb25cblx0XHRcdFx0cmV0dXJuIGdldER1bmRlclByb3RvKE8pO1xuXHRcdFx0fVxuXHRcdFx0OiBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQtYXBwbHktaGVscGVycycpO1xudmFyIGdPUEQgPSByZXF1aXJlKCdnb3BkJyk7XG5cbnZhciBoYXNQcm90b0FjY2Vzc29yO1xudHJ5IHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVucywgbm8tcHJvdG9cblx0aGFzUHJvdG9BY2Nlc3NvciA9IC8qKiBAdHlwZSB7eyBfX3Byb3RvX18/OiB0eXBlb2YgQXJyYXkucHJvdG90eXBlIH19ICovIChbXSkuX19wcm90b19fID09PSBBcnJheS5wcm90b3R5cGU7XG59IGNhdGNoIChlKSB7XG5cdGlmICghZSB8fCB0eXBlb2YgZSAhPT0gJ29iamVjdCcgfHwgISgnY29kZScgaW4gZSkgfHwgZS5jb2RlICE9PSAnRVJSX1BST1RPX0FDQ0VTUycpIHtcblx0XHR0aHJvdyBlO1xuXHR9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnNcbnZhciBkZXNjID0gISFoYXNQcm90b0FjY2Vzc29yICYmIGdPUEQgJiYgZ09QRChPYmplY3QucHJvdG90eXBlLCAvKiogQHR5cGUge2tleW9mIHR5cGVvZiBPYmplY3QucHJvdG90eXBlfSAqLyAoJ19fcHJvdG9fXycpKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgJGdldFByb3RvdHlwZU9mID0gJE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZ2V0Jyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGRlc2MgJiYgdHlwZW9mIGRlc2MuZ2V0ID09PSAnZnVuY3Rpb24nXG5cdD8gY2FsbEJpbmQoW2Rlc2MuZ2V0XSlcblx0OiB0eXBlb2YgJGdldFByb3RvdHlwZU9mID09PSAnZnVuY3Rpb24nXG5cdFx0PyAvKiogQHR5cGUge2ltcG9ydCgnLi9nZXQnKX0gKi8gZnVuY3Rpb24gZ2V0RHVuZGVyKHZhbHVlKSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRyZXR1cm4gJGdldFByb3RvdHlwZU9mKHZhbHVlID09IG51bGwgPyB2YWx1ZSA6ICRPYmplY3QodmFsdWUpKTtcblx0XHR9XG5cdFx0OiBmYWxzZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxudmFyIGNvbmNhdHR5ID0gZnVuY3Rpb24gY29uY2F0dHkoYSwgYikge1xuICAgIHZhciBhcnIgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJbaV0gPSBhW2ldO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYXJyW2ogKyBhLmxlbmd0aF0gPSBiW2pdO1xuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgc2xpY3kgPSBmdW5jdGlvbiBzbGljeShhcnJMaWtlLCBvZmZzZXQpIHtcbiAgICB2YXIgYXJyID0gW107XG4gICAgZm9yICh2YXIgaSA9IG9mZnNldCB8fCAwLCBqID0gMDsgaSA8IGFyckxpa2UubGVuZ3RoOyBpICs9IDEsIGogKz0gMSkge1xuICAgICAgICBhcnJbal0gPSBhcnJMaWtlW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufTtcblxudmFyIGpvaW55ID0gZnVuY3Rpb24gKGFyciwgam9pbmVyKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBhcnJbaV07XG4gICAgICAgIGlmIChpICsgMSA8IGFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0ciArPSBqb2luZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuYXBwbHkodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljeShhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICk7XG5cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gbWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3NbaV0gPSAnJCcgKyBpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBqb2lueShib3VuZEFyZ3MsICcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbnZhciAkYXBwbHkgPSByZXF1aXJlKCcuL2Z1bmN0aW9uQXBwbHknKTtcbnZhciAkY2FsbCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25DYWxsJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IHJlcXVpcmUoJy4vcmVmbGVjdEFwcGx5Jyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2FjdHVhbEFwcGx5Jyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9ICRyZWZsZWN0QXBwbHkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yZWZsZWN0QXBwbHknKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIFJlZmxlY3QgJiYgUmVmbGVjdC5hcHBseTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcbnZhciAkaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoY2FsbCwgJGhhc093bik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1ib3VuZCcpO1xudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xudmFyIGdldFNpZGVDaGFubmVsTWFwID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsLW1hcCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJFdlYWtNYXAgPSBHZXRJbnRyaW5zaWMoJyVXZWFrTWFwJScsIHRydWUpO1xuXG4vKiogQHR5cGUgezxLIGV4dGVuZHMgb2JqZWN0LCBWPih0aGlzQXJnOiBXZWFrTWFwPEssIFY+LCBrZXk6IEspID0+IFZ9ICovXG52YXIgJHdlYWtNYXBHZXQgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmdldCcsIHRydWUpO1xuLyoqIEB0eXBlIHs8SyBleHRlbmRzIG9iamVjdCwgVj4odGhpc0FyZzogV2Vha01hcDxLLCBWPiwga2V5OiBLLCB2YWx1ZTogVikgPT4gdm9pZH0gKi9cbnZhciAkd2Vha01hcFNldCA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuc2V0JywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLIGV4dGVuZHMgb2JqZWN0LCBWPih0aGlzQXJnOiBXZWFrTWFwPEssIFY+LCBrZXk6IEspID0+IGJvb2xlYW59ICovXG52YXIgJHdlYWtNYXBIYXMgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xuLyoqIEB0eXBlIHs8SyBleHRlbmRzIG9iamVjdCwgVj4odGhpc0FyZzogV2Vha01hcDxLLCBWPiwga2V5OiBLKSA9PiBib29sZWFufSAqL1xudmFyICR3ZWFrTWFwRGVsZXRlID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUnLCB0cnVlKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gJFdlYWtNYXBcblx0PyAvKiogQHR5cGUge0V4Y2x1ZGU8aW1wb3J0KCcuJyksIGZhbHNlPn0gKi8gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWxXZWFrTWFwKCkge1xuXHRcdC8qKiBAdHlwZWRlZiB7UmV0dXJuVHlwZTx0eXBlb2YgZ2V0U2lkZUNoYW5uZWxXZWFrTWFwPn0gQ2hhbm5lbCAqL1xuXHRcdC8qKiBAdHlwZWRlZiB7UGFyYW1ldGVyczxDaGFubmVsWydnZXQnXT5bMF19IEsgKi9cblx0XHQvKiogQHR5cGVkZWYge1BhcmFtZXRlcnM8Q2hhbm5lbFsnc2V0J10+WzFdfSBWICovXG5cblx0XHQvKiogQHR5cGUge1dlYWtNYXA8SyAmIG9iamVjdCwgVj4gfCB1bmRlZmluZWR9ICovIHZhciAkd207XG5cdFx0LyoqIEB0eXBlIHtDaGFubmVsIHwgdW5kZWZpbmVkfSAqLyB2YXIgJG07XG5cblx0XHQvKiogQHR5cGUge0NoYW5uZWx9ICovXG5cdFx0dmFyIGNoYW5uZWwgPSB7XG5cdFx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0aWYgKCFjaGFubmVsLmhhcyhrZXkpKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1NpZGUgY2hhbm5lbCBkb2VzIG5vdCBjb250YWluICcgKyBpbnNwZWN0KGtleSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0J2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJHdlYWtNYXBEZWxldGUoJHdtLCBrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChnZXRTaWRlQ2hhbm5lbE1hcCkge1xuXHRcdFx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICRtWydkZWxldGUnXShrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwR2V0KCR3bSwga2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICRtICYmICRtLmdldChrZXkpO1xuXHRcdFx0fSxcblx0XHRcdGhhczogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRcdGlmICgkd20pIHtcblx0XHRcdFx0XHRcdHJldHVybiAkd2Vha01hcEhhcygkd20sIGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAhISRtICYmICRtLmhhcyhrZXkpO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0XHRpZiAoISR3bSkge1xuXHRcdFx0XHRcdFx0JHdtID0gbmV3ICRXZWFrTWFwKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCR3ZWFrTWFwU2V0KCR3bSwga2V5LCB2YWx1ZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZ2V0U2lkZUNoYW5uZWxNYXApIHtcblx0XHRcdFx0XHRpZiAoISRtKSB7XG5cdFx0XHRcdFx0XHQkbSA9IGdldFNpZGVDaGFubmVsTWFwKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnNcblx0XHRcdFx0XHQvKiogQHR5cGUge05vbk51bGxhYmxlPHR5cGVvZiAkbT59ICovICgkbSkuc2V0KGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETzogZmlndXJlIG91dCB3aHkgdGhpcyBpcyBlcnJvcmluZ1xuXHRcdHJldHVybiBjaGFubmVsO1xuXHR9XG5cdDogZ2V0U2lkZUNoYW5uZWxNYXA7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGFsbG93RW1wdHlBcnJheXM6IGZhbHNlLFxuICAgIGFsbG93UHJvdG90eXBlczogZmFsc2UsXG4gICAgYWxsb3dTcGFyc2U6IGZhbHNlLFxuICAgIGFycmF5TGltaXQ6IDIwLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBjb21tYTogZmFsc2UsXG4gICAgZGVjb2RlRG90SW5LZXlzOiBmYWxzZSxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgZHVwbGljYXRlczogJ2NvbWJpbmUnLFxuICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IGZhbHNlLFxuICAgIHBhcmFtZXRlckxpbWl0OiAxMDAwLFxuICAgIHBhcnNlQXJyYXlzOiB0cnVlLFxuICAgIHBsYWluT2JqZWN0czogZmFsc2UsXG4gICAgc3RyaWN0RGVwdGg6IGZhbHNlLFxuICAgIHN0cmljdE51bGxIYW5kbGluZzogZmFsc2UsXG4gICAgdGhyb3dPbkxpbWl0RXhjZWVkZWQ6IGZhbHNlXG59O1xuXG52YXIgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiMoXFxkKyk7L2csIGZ1bmN0aW9uICgkMCwgbnVtYmVyU3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG51bWJlclN0ciwgMTApKTtcbiAgICB9KTtcbn07XG5cbnZhciBwYXJzZUFycmF5VmFsdWUgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zLCBjdXJyZW50QXJyYXlMZW5ndGgpIHtcbiAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIG9wdGlvbnMuY29tbWEgJiYgdmFsLmluZGV4T2YoJywnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB2YWwuc3BsaXQoJywnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50aHJvd09uTGltaXRFeGNlZWRlZCAmJiBjdXJyZW50QXJyYXlMZW5ndGggPj0gb3B0aW9ucy5hcnJheUxpbWl0KSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBcnJheSBsaW1pdCBleGNlZWRlZC4gT25seSAnICsgb3B0aW9ucy5hcnJheUxpbWl0ICsgJyBlbGVtZW50JyArIChvcHRpb25zLmFycmF5TGltaXQgPT09IDEgPyAnJyA6ICdzJykgKyAnIGFsbG93ZWQgaW4gYW4gYXJyYXkuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbn07XG5cbi8vIFRoaXMgaXMgd2hhdCBicm93c2VycyB3aWxsIHN1Ym1pdCB3aGVuIHRoZSDinJMgY2hhcmFjdGVyIG9jY3VycyBpbiBhblxuLy8gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIGJvZHkgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgcGFnZSBjb250YWluaW5nXG4vLyB0aGUgZm9ybSBpcyBpc28tODg1OS0xLCBvciB3aGVuIHRoZSBzdWJtaXR0ZWQgZm9ybSBoYXMgYW4gYWNjZXB0LWNoYXJzZXRcbi8vIGF0dHJpYnV0ZSBvZiBpc28tODg1OS0xLiBQcmVzdW1hYmx5IGFsc28gd2l0aCBvdGhlciBjaGFyc2V0cyB0aGF0IGRvIG5vdCBjb250YWluXG4vLyB0aGUg4pyTIGNoYXJhY3Rlciwgc3VjaCBhcyB1cy1hc2NpaS5cbnZhciBpc29TZW50aW5lbCA9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpXG5cbi8vIFRoZXNlIGFyZSB0aGUgcGVyY2VudC1lbmNvZGVkIHV0Zi04IG9jdGV0cyByZXByZXNlbnRpbmcgYSBjaGVja21hcmssIGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCBhY3R1YWxseSBpcyB1dGYtOCBlbmNvZGVkLlxudmFyIGNoYXJzZXRTZW50aW5lbCA9ICd1dGY4PSVFMiU5QyU5Myc7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcblxudmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0geyBfX3Byb3RvX186IG51bGwgfTtcblxuICAgIHZhciBjbGVhblN0ciA9IG9wdGlvbnMuaWdub3JlUXVlcnlQcmVmaXggPyBzdHIucmVwbGFjZSgvXlxcPy8sICcnKSA6IHN0cjtcbiAgICBjbGVhblN0ciA9IGNsZWFuU3RyLnJlcGxhY2UoLyU1Qi9naSwgJ1snKS5yZXBsYWNlKC8lNUQvZ2ksICddJyk7XG5cbiAgICB2YXIgbGltaXQgPSBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID09PSBJbmZpbml0eSA/IHVuZGVmaW5lZCA6IG9wdGlvbnMucGFyYW1ldGVyTGltaXQ7XG4gICAgdmFyIHBhcnRzID0gY2xlYW5TdHIuc3BsaXQoXG4gICAgICAgIG9wdGlvbnMuZGVsaW1pdGVyLFxuICAgICAgICBvcHRpb25zLnRocm93T25MaW1pdEV4Y2VlZGVkID8gbGltaXQgKyAxIDogbGltaXRcbiAgICApO1xuXG4gICAgaWYgKG9wdGlvbnMudGhyb3dPbkxpbWl0RXhjZWVkZWQgJiYgcGFydHMubGVuZ3RoID4gbGltaXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1BhcmFtZXRlciBsaW1pdCBleGNlZWRlZC4gT25seSAnICsgbGltaXQgKyAnIHBhcmFtZXRlcicgKyAobGltaXQgPT09IDEgPyAnJyA6ICdzJykgKyAnIGFsbG93ZWQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHNraXBJbmRleCA9IC0xOyAvLyBLZWVwIHRyYWNrIG9mIHdoZXJlIHRoZSB1dGY4IHNlbnRpbmVsIHdhcyBmb3VuZFxuICAgIHZhciBpO1xuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQ7XG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHBhcnRzW2ldLmluZGV4T2YoJ3V0Zjg9JykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbaV0gPT09IGNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ3V0Zi04JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBpc29TZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ2lzby04ODU5LTEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBza2lwSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGkgPSBwYXJ0cy5sZW5ndGg7IC8vIFRoZSBlc2xpbnQgc2V0dGluZ3MgZG8gbm90IGFsbG93IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpID09PSBza2lwSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG5cbiAgICAgICAgdmFyIGJyYWNrZXRFcXVhbHNQb3MgPSBwYXJ0LmluZGV4T2YoJ109Jyk7XG4gICAgICAgIHZhciBwb3MgPSBicmFja2V0RXF1YWxzUG9zID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogYnJhY2tldEVxdWFsc1BvcyArIDE7XG5cbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgdmFyIHZhbDtcbiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAna2V5Jyk7XG4gICAgICAgICAgICB2YWwgPSBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA/IG51bGwgOiAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LnNsaWNlKDAsIHBvcyksIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcblxuICAgICAgICAgICAgdmFsID0gdXRpbHMubWF5YmVNYXAoXG4gICAgICAgICAgICAgICAgcGFyc2VBcnJheVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICBwYXJ0LnNsaWNlKHBvcyArIDEpLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBpc0FycmF5KG9ialtrZXldKSA/IG9ialtrZXldLmxlbmd0aCA6IDBcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlbmNvZGVkVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRlY29kZXIoZW5jb2RlZFZhbCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgJiYgb3B0aW9ucy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgJiYgY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICB2YWwgPSBpbnRlcnByZXROdW1lcmljRW50aXRpZXMoU3RyaW5nKHZhbCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnQuaW5kZXhPZignW109JykgPiAtMSkge1xuICAgICAgICAgICAgdmFsID0gaXNBcnJheSh2YWwpID8gW3ZhbF0gOiB2YWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXhpc3RpbmcgPSBoYXMuY2FsbChvYmosIGtleSk7XG4gICAgICAgIGlmIChleGlzdGluZyAmJiBvcHRpb25zLmR1cGxpY2F0ZXMgPT09ICdjb21iaW5lJykge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB1dGlscy5jb21iaW5lKG9ialtrZXldLCB2YWwpO1xuICAgICAgICB9IGVsc2UgaWYgKCFleGlzdGluZyB8fCBvcHRpb25zLmR1cGxpY2F0ZXMgPT09ICdsYXN0Jykge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIHBhcnNlT2JqZWN0ID0gZnVuY3Rpb24gKGNoYWluLCB2YWwsIG9wdGlvbnMsIHZhbHVlc1BhcnNlZCkge1xuICAgIHZhciBjdXJyZW50QXJyYXlMZW5ndGggPSAwO1xuICAgIGlmIChjaGFpbi5sZW5ndGggPiAwICYmIGNoYWluW2NoYWluLmxlbmd0aCAtIDFdID09PSAnW10nKSB7XG4gICAgICAgIHZhciBwYXJlbnRLZXkgPSBjaGFpbi5zbGljZSgwLCAtMSkuam9pbignJyk7XG4gICAgICAgIGN1cnJlbnRBcnJheUxlbmd0aCA9IEFycmF5LmlzQXJyYXkodmFsKSAmJiB2YWxbcGFyZW50S2V5XSA/IHZhbFtwYXJlbnRLZXldLmxlbmd0aCA6IDA7XG4gICAgfVxuXG4gICAgdmFyIGxlYWYgPSB2YWx1ZXNQYXJzZWQgPyB2YWwgOiBwYXJzZUFycmF5VmFsdWUodmFsLCBvcHRpb25zLCBjdXJyZW50QXJyYXlMZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScgJiYgb3B0aW9ucy5wYXJzZUFycmF5cykge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5hbGxvd0VtcHR5QXJyYXlzICYmIChsZWFmID09PSAnJyB8fCAob3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgJiYgbGVhZiA9PT0gbnVsbCkpXG4gICAgICAgICAgICAgICAgPyBbXVxuICAgICAgICAgICAgICAgIDogdXRpbHMuY29tYmluZShbXSwgbGVhZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IHsgX19wcm90b19fOiBudWxsIH0gOiB7fTtcbiAgICAgICAgICAgIHZhciBjbGVhblJvb3QgPSByb290LmNoYXJBdCgwKSA9PT0gJ1snICYmIHJvb3QuY2hhckF0KHJvb3QubGVuZ3RoIC0gMSkgPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgLTEpIDogcm9vdDtcbiAgICAgICAgICAgIHZhciBkZWNvZGVkUm9vdCA9IG9wdGlvbnMuZGVjb2RlRG90SW5LZXlzID8gY2xlYW5Sb290LnJlcGxhY2UoLyUyRS9nLCAnLicpIDogY2xlYW5Sb290O1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoZGVjb2RlZFJvb3QsIDEwKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5wYXJzZUFycmF5cyAmJiBkZWNvZGVkUm9vdCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBvYmogPSB7IDA6IGxlYWYgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KVxuICAgICAgICAgICAgICAgICYmIHJvb3QgIT09IGRlY29kZWRSb290XG4gICAgICAgICAgICAgICAgJiYgU3RyaW5nKGluZGV4KSA9PT0gZGVjb2RlZFJvb3RcbiAgICAgICAgICAgICAgICAmJiBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgJiYgKG9wdGlvbnMucGFyc2VBcnJheXMgJiYgaW5kZXggPD0gb3B0aW9ucy5hcnJheUxpbWl0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICAgICAgb2JqW2luZGV4XSA9IGxlYWY7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlY29kZWRSb290ICE9PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgIG9ialtkZWNvZGVkUm9vdF0gPSBsZWFmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZiA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICBpZiAoIWdpdmVuS2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUcmFuc2Zvcm0gZG90IG5vdGF0aW9uIHRvIGJyYWNrZXQgbm90YXRpb25cbiAgICB2YXIga2V5ID0gb3B0aW9ucy5hbGxvd0RvdHMgPyBnaXZlbktleS5yZXBsYWNlKC9cXC4oW14uW10rKS9nLCAnWyQxXScpIDogZ2l2ZW5LZXk7XG5cbiAgICAvLyBUaGUgcmVnZXggY2h1bmtzXG5cbiAgICB2YXIgYnJhY2tldHMgPSAvKFxcW1teW1xcXV0qXSkvO1xuICAgIHZhciBjaGlsZCA9IC8oXFxbW15bXFxdXSpdKS9nO1xuXG4gICAgLy8gR2V0IHRoZSBwYXJlbnRcblxuICAgIHZhciBzZWdtZW50ID0gb3B0aW9ucy5kZXB0aCA+IDAgJiYgYnJhY2tldHMuZXhlYyhrZXkpO1xuICAgIHZhciBwYXJlbnQgPSBzZWdtZW50ID8ga2V5LnNsaWNlKDAsIHNlZ21lbnQuaW5kZXgpIDoga2V5O1xuXG4gICAgLy8gU3Rhc2ggdGhlIHBhcmVudCBpZiBpdCBleGlzdHNcblxuICAgIHZhciBrZXlzID0gW107XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmVuJ3QgdXNpbmcgcGxhaW4gb2JqZWN0cywgb3B0aW9uYWxseSBwcmVmaXgga2V5cyB0aGF0IHdvdWxkIG92ZXJ3cml0ZSBvYmplY3QgcHJvdG90eXBlIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBwYXJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAga2V5cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuXG4gICAgLy8gTG9vcCB0aHJvdWdoIGNoaWxkcmVuIGFwcGVuZGluZyB0byB0aGUgYXJyYXkgdW50aWwgd2UgaGl0IGRlcHRoXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKG9wdGlvbnMuZGVwdGggPiAwICYmIChzZWdtZW50ID0gY2hpbGQuZXhlYyhrZXkpKSAhPT0gbnVsbCAmJiBpIDwgb3B0aW9ucy5kZXB0aCkge1xuICAgICAgICBpICs9IDE7XG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc2VnbWVudFsxXS5zbGljZSgxLCAtMSkpKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtleXMucHVzaChzZWdtZW50WzFdKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSdzIGEgcmVtYWluZGVyLCBjaGVjayBzdHJpY3REZXB0aCBvcHRpb24gZm9yIHRocm93LCBlbHNlIGp1c3QgYWRkIHdoYXRldmVyIGlzIGxlZnRcblxuICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIGlmIChvcHRpb25zLnN0cmljdERlcHRoID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5wdXQgZGVwdGggZXhjZWVkZWQgZGVwdGggb3B0aW9uIG9mICcgKyBvcHRpb25zLmRlcHRoICsgJyBhbmQgc3RyaWN0RGVwdGggaXMgdHJ1ZScpO1xuICAgICAgICB9XG4gICAgICAgIGtleXMucHVzaCgnWycgKyBrZXkuc2xpY2Uoc2VnbWVudC5pbmRleCkgKyAnXScpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZU9iamVjdChrZXlzLCB2YWwsIG9wdGlvbnMsIHZhbHVlc1BhcnNlZCk7XG59O1xuXG52YXIgbm9ybWFsaXplUGFyc2VPcHRpb25zID0gZnVuY3Rpb24gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGFsbG93RW1wdHlBcnJheXNgIG9wdGlvbiBjYW4gb25seSBiZSBgdHJ1ZWAgb3IgYGZhbHNlYCwgd2hlbiBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5kZWNvZGVEb3RJbktleXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmRlY29kZURvdEluS2V5cyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BkZWNvZGVEb3RJbktleXNgIG9wdGlvbiBjYW4gb25seSBiZSBgdHJ1ZWAgb3IgYGZhbHNlYCwgd2hlbiBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmRlY29kZXIgIT09IG51bGwgJiYgdHlwZW9mIG9wdHMuZGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuZGVjb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEZWNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMudGhyb3dPbkxpbWl0RXhjZWVkZWQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLnRocm93T25MaW1pdEV4Y2VlZGVkICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYHRocm93T25MaW1pdEV4Y2VlZGVkYCBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4nKTtcbiAgICB9XG5cbiAgICB2YXIgY2hhcnNldCA9IHR5cGVvZiBvcHRzLmNoYXJzZXQgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuY2hhcnNldCA6IG9wdHMuY2hhcnNldDtcblxuICAgIHZhciBkdXBsaWNhdGVzID0gdHlwZW9mIG9wdHMuZHVwbGljYXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5kdXBsaWNhdGVzIDogb3B0cy5kdXBsaWNhdGVzO1xuXG4gICAgaWYgKGR1cGxpY2F0ZXMgIT09ICdjb21iaW5lJyAmJiBkdXBsaWNhdGVzICE9PSAnZmlyc3QnICYmIGR1cGxpY2F0ZXMgIT09ICdsYXN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgZHVwbGljYXRlcyBvcHRpb24gbXVzdCBiZSBlaXRoZXIgY29tYmluZSwgZmlyc3QsIG9yIGxhc3QnKTtcbiAgICB9XG5cbiAgICB2YXIgYWxsb3dEb3RzID0gdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IG9wdHMuZGVjb2RlRG90SW5LZXlzID09PSB0cnVlID8gdHJ1ZSA6IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxvd0RvdHM6IGFsbG93RG90cyxcbiAgICAgICAgYWxsb3dFbXB0eUFycmF5czogdHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyA9PT0gJ2Jvb2xlYW4nID8gISFvcHRzLmFsbG93RW1wdHlBcnJheXMgOiBkZWZhdWx0cy5hbGxvd0VtcHR5QXJyYXlzLFxuICAgICAgICBhbGxvd1Byb3RvdHlwZXM6IHR5cGVvZiBvcHRzLmFsbG93UHJvdG90eXBlcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hbGxvd1Byb3RvdHlwZXMgOiBkZWZhdWx0cy5hbGxvd1Byb3RvdHlwZXMsXG4gICAgICAgIGFsbG93U3BhcnNlOiB0eXBlb2Ygb3B0cy5hbGxvd1NwYXJzZSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hbGxvd1NwYXJzZSA6IGRlZmF1bHRzLmFsbG93U3BhcnNlLFxuICAgICAgICBhcnJheUxpbWl0OiB0eXBlb2Ygb3B0cy5hcnJheUxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdHMuYXJyYXlMaW1pdCA6IGRlZmF1bHRzLmFycmF5TGltaXQsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgY29tbWE6IHR5cGVvZiBvcHRzLmNvbW1hID09PSAnYm9vbGVhbicgPyBvcHRzLmNvbW1hIDogZGVmYXVsdHMuY29tbWEsXG4gICAgICAgIGRlY29kZURvdEluS2V5czogdHlwZW9mIG9wdHMuZGVjb2RlRG90SW5LZXlzID09PSAnYm9vbGVhbicgPyBvcHRzLmRlY29kZURvdEluS2V5cyA6IGRlZmF1bHRzLmRlY29kZURvdEluS2V5cyxcbiAgICAgICAgZGVjb2RlcjogdHlwZW9mIG9wdHMuZGVjb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZGVjb2RlciA6IGRlZmF1bHRzLmRlY29kZXIsXG4gICAgICAgIGRlbGltaXRlcjogdHlwZW9mIG9wdHMuZGVsaW1pdGVyID09PSAnc3RyaW5nJyB8fCB1dGlscy5pc1JlZ0V4cChvcHRzLmRlbGltaXRlcikgPyBvcHRzLmRlbGltaXRlciA6IGRlZmF1bHRzLmRlbGltaXRlcixcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWltcGxpY2l0LWNvZXJjaW9uLCBuby1leHRyYS1wYXJlbnNcbiAgICAgICAgZGVwdGg6ICh0eXBlb2Ygb3B0cy5kZXB0aCA9PT0gJ251bWJlcicgfHwgb3B0cy5kZXB0aCA9PT0gZmFsc2UpID8gK29wdHMuZGVwdGggOiBkZWZhdWx0cy5kZXB0aCxcbiAgICAgICAgZHVwbGljYXRlczogZHVwbGljYXRlcyxcbiAgICAgICAgaWdub3JlUXVlcnlQcmVmaXg6IG9wdHMuaWdub3JlUXVlcnlQcmVmaXggPT09IHRydWUsXG4gICAgICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogdHlwZW9mIG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID09PSAnYm9vbGVhbicgPyBvcHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyA6IGRlZmF1bHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyxcbiAgICAgICAgcGFyYW1ldGVyTGltaXQ6IHR5cGVvZiBvcHRzLnBhcmFtZXRlckxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdHMucGFyYW1ldGVyTGltaXQgOiBkZWZhdWx0cy5wYXJhbWV0ZXJMaW1pdCxcbiAgICAgICAgcGFyc2VBcnJheXM6IG9wdHMucGFyc2VBcnJheXMgIT09IGZhbHNlLFxuICAgICAgICBwbGFpbk9iamVjdHM6IHR5cGVvZiBvcHRzLnBsYWluT2JqZWN0cyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5wbGFpbk9iamVjdHMgOiBkZWZhdWx0cy5wbGFpbk9iamVjdHMsXG4gICAgICAgIHN0cmljdERlcHRoOiB0eXBlb2Ygb3B0cy5zdHJpY3REZXB0aCA9PT0gJ2Jvb2xlYW4nID8gISFvcHRzLnN0cmljdERlcHRoIDogZGVmYXVsdHMuc3RyaWN0RGVwdGgsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgdGhyb3dPbkxpbWl0RXhjZWVkZWQ6IHR5cGVvZiBvcHRzLnRocm93T25MaW1pdEV4Y2VlZGVkID09PSAnYm9vbGVhbicgPyBvcHRzLnRocm93T25MaW1pdEV4Y2VlZGVkIDogZmFsc2VcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBvcHRzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cyk7XG5cbiAgICBpZiAoc3RyID09PSAnJyB8fCBzdHIgPT09IG51bGwgfHwgdHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucGxhaW5PYmplY3RzID8geyBfX3Byb3RvX186IG51bGwgfSA6IHt9O1xuICAgIH1cblxuICAgIHZhciB0ZW1wT2JqID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBwYXJzZVZhbHVlcyhzdHIsIG9wdGlvbnMpIDogc3RyO1xuICAgIHZhciBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IHsgX19wcm90b19fOiBudWxsIH0gOiB7fTtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUga2V5cyBhbmQgc2V0dXAgdGhlIG5ldyBvYmplY3RcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGVtcE9iaik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgbmV3T2JqID0gcGFyc2VLZXlzKGtleSwgdGVtcE9ialtrZXldLCBvcHRpb25zLCB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyk7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hbGxvd1NwYXJzZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiB1dGlscy5jb21wYWN0KG9iaik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2FmXCI6IDU5LFxuXHRcIi4vYWYuanNcIjogNTksXG5cdFwiLi9hclwiOiA2MCxcblx0XCIuL2FyLWR6XCI6IDYxLFxuXHRcIi4vYXItZHouanNcIjogNjEsXG5cdFwiLi9hci1rd1wiOiA2Mixcblx0XCIuL2FyLWt3LmpzXCI6IDYyLFxuXHRcIi4vYXItbHlcIjogNjMsXG5cdFwiLi9hci1seS5qc1wiOiA2Myxcblx0XCIuL2FyLW1hXCI6IDY0LFxuXHRcIi4vYXItbWEuanNcIjogNjQsXG5cdFwiLi9hci1wc1wiOiA2NSxcblx0XCIuL2FyLXBzLmpzXCI6IDY1LFxuXHRcIi4vYXItc2FcIjogNjYsXG5cdFwiLi9hci1zYS5qc1wiOiA2Nixcblx0XCIuL2FyLXRuXCI6IDY3LFxuXHRcIi4vYXItdG4uanNcIjogNjcsXG5cdFwiLi9hci5qc1wiOiA2MCxcblx0XCIuL2F6XCI6IDY4LFxuXHRcIi4vYXouanNcIjogNjgsXG5cdFwiLi9iZVwiOiA2OSxcblx0XCIuL2JlLmpzXCI6IDY5LFxuXHRcIi4vYmdcIjogNzAsXG5cdFwiLi9iZy5qc1wiOiA3MCxcblx0XCIuL2JtXCI6IDcxLFxuXHRcIi4vYm0uanNcIjogNzEsXG5cdFwiLi9iblwiOiA3Mixcblx0XCIuL2JuLWJkXCI6IDczLFxuXHRcIi4vYm4tYmQuanNcIjogNzMsXG5cdFwiLi9ibi5qc1wiOiA3Mixcblx0XCIuL2JvXCI6IDc0LFxuXHRcIi4vYm8uanNcIjogNzQsXG5cdFwiLi9iclwiOiA3NSxcblx0XCIuL2JyLmpzXCI6IDc1LFxuXHRcIi4vYnNcIjogNzYsXG5cdFwiLi9icy5qc1wiOiA3Nixcblx0XCIuL2NhXCI6IDc3LFxuXHRcIi4vY2EuanNcIjogNzcsXG5cdFwiLi9jc1wiOiA3OCxcblx0XCIuL2NzLmpzXCI6IDc4LFxuXHRcIi4vY3ZcIjogNzksXG5cdFwiLi9jdi5qc1wiOiA3OSxcblx0XCIuL2N5XCI6IDgwLFxuXHRcIi4vY3kuanNcIjogODAsXG5cdFwiLi9kYVwiOiA4MSxcblx0XCIuL2RhLmpzXCI6IDgxLFxuXHRcIi4vZGVcIjogODIsXG5cdFwiLi9kZS1hdFwiOiA4Myxcblx0XCIuL2RlLWF0LmpzXCI6IDgzLFxuXHRcIi4vZGUtY2hcIjogODQsXG5cdFwiLi9kZS1jaC5qc1wiOiA4NCxcblx0XCIuL2RlLmpzXCI6IDgyLFxuXHRcIi4vZHZcIjogODUsXG5cdFwiLi9kdi5qc1wiOiA4NSxcblx0XCIuL2VsXCI6IDg2LFxuXHRcIi4vZWwuanNcIjogODYsXG5cdFwiLi9lbi1hdVwiOiA4Nyxcblx0XCIuL2VuLWF1LmpzXCI6IDg3LFxuXHRcIi4vZW4tY2FcIjogODgsXG5cdFwiLi9lbi1jYS5qc1wiOiA4OCxcblx0XCIuL2VuLWdiXCI6IDg5LFxuXHRcIi4vZW4tZ2IuanNcIjogODksXG5cdFwiLi9lbi1pZVwiOiA5MCxcblx0XCIuL2VuLWllLmpzXCI6IDkwLFxuXHRcIi4vZW4taWxcIjogOTEsXG5cdFwiLi9lbi1pbC5qc1wiOiA5MSxcblx0XCIuL2VuLWluXCI6IDkyLFxuXHRcIi4vZW4taW4uanNcIjogOTIsXG5cdFwiLi9lbi1uelwiOiA5Myxcblx0XCIuL2VuLW56LmpzXCI6IDkzLFxuXHRcIi4vZW4tc2dcIjogOTQsXG5cdFwiLi9lbi1zZy5qc1wiOiA5NCxcblx0XCIuL2VvXCI6IDk1LFxuXHRcIi4vZW8uanNcIjogOTUsXG5cdFwiLi9lc1wiOiA5Nixcblx0XCIuL2VzLWRvXCI6IDk3LFxuXHRcIi4vZXMtZG8uanNcIjogOTcsXG5cdFwiLi9lcy1teFwiOiA5OCxcblx0XCIuL2VzLW14LmpzXCI6IDk4LFxuXHRcIi4vZXMtdXNcIjogOTksXG5cdFwiLi9lcy11cy5qc1wiOiA5OSxcblx0XCIuL2VzLmpzXCI6IDk2LFxuXHRcIi4vZXRcIjogMTAwLFxuXHRcIi4vZXQuanNcIjogMTAwLFxuXHRcIi4vZXVcIjogMTAxLFxuXHRcIi4vZXUuanNcIjogMTAxLFxuXHRcIi4vZmFcIjogMTAyLFxuXHRcIi4vZmEuanNcIjogMTAyLFxuXHRcIi4vZmlcIjogMTAzLFxuXHRcIi4vZmkuanNcIjogMTAzLFxuXHRcIi4vZmlsXCI6IDEwNCxcblx0XCIuL2ZpbC5qc1wiOiAxMDQsXG5cdFwiLi9mb1wiOiAxMDUsXG5cdFwiLi9mby5qc1wiOiAxMDUsXG5cdFwiLi9mclwiOiAxMDYsXG5cdFwiLi9mci1jYVwiOiAxMDcsXG5cdFwiLi9mci1jYS5qc1wiOiAxMDcsXG5cdFwiLi9mci1jaFwiOiAxMDgsXG5cdFwiLi9mci1jaC5qc1wiOiAxMDgsXG5cdFwiLi9mci5qc1wiOiAxMDYsXG5cdFwiLi9meVwiOiAxMDksXG5cdFwiLi9meS5qc1wiOiAxMDksXG5cdFwiLi9nYVwiOiAxMTAsXG5cdFwiLi9nYS5qc1wiOiAxMTAsXG5cdFwiLi9nZFwiOiAxMTEsXG5cdFwiLi9nZC5qc1wiOiAxMTEsXG5cdFwiLi9nbFwiOiAxMTIsXG5cdFwiLi9nbC5qc1wiOiAxMTIsXG5cdFwiLi9nb20tZGV2YVwiOiAxMTMsXG5cdFwiLi9nb20tZGV2YS5qc1wiOiAxMTMsXG5cdFwiLi9nb20tbGF0blwiOiAxMTQsXG5cdFwiLi9nb20tbGF0bi5qc1wiOiAxMTQsXG5cdFwiLi9ndVwiOiAxMTUsXG5cdFwiLi9ndS5qc1wiOiAxMTUsXG5cdFwiLi9oZVwiOiAxMTYsXG5cdFwiLi9oZS5qc1wiOiAxMTYsXG5cdFwiLi9oaVwiOiAxMTcsXG5cdFwiLi9oaS5qc1wiOiAxMTcsXG5cdFwiLi9oclwiOiAxMTgsXG5cdFwiLi9oci5qc1wiOiAxMTgsXG5cdFwiLi9odVwiOiAxMTksXG5cdFwiLi9odS5qc1wiOiAxMTksXG5cdFwiLi9oeS1hbVwiOiAxMjAsXG5cdFwiLi9oeS1hbS5qc1wiOiAxMjAsXG5cdFwiLi9pZFwiOiAxMjEsXG5cdFwiLi9pZC5qc1wiOiAxMjEsXG5cdFwiLi9pc1wiOiAxMjIsXG5cdFwiLi9pcy5qc1wiOiAxMjIsXG5cdFwiLi9pdFwiOiAxMjMsXG5cdFwiLi9pdC1jaFwiOiAxMjQsXG5cdFwiLi9pdC1jaC5qc1wiOiAxMjQsXG5cdFwiLi9pdC5qc1wiOiAxMjMsXG5cdFwiLi9qYVwiOiAxMjUsXG5cdFwiLi9qYS5qc1wiOiAxMjUsXG5cdFwiLi9qdlwiOiAxMjYsXG5cdFwiLi9qdi5qc1wiOiAxMjYsXG5cdFwiLi9rYVwiOiAxMjcsXG5cdFwiLi9rYS5qc1wiOiAxMjcsXG5cdFwiLi9ra1wiOiAxMjgsXG5cdFwiLi9ray5qc1wiOiAxMjgsXG5cdFwiLi9rbVwiOiAxMjksXG5cdFwiLi9rbS5qc1wiOiAxMjksXG5cdFwiLi9rblwiOiAxMzAsXG5cdFwiLi9rbi5qc1wiOiAxMzAsXG5cdFwiLi9rb1wiOiAxMzEsXG5cdFwiLi9rby5qc1wiOiAxMzEsXG5cdFwiLi9rdVwiOiAxMzIsXG5cdFwiLi9rdS1rbXJcIjogMTMzLFxuXHRcIi4va3Uta21yLmpzXCI6IDEzMyxcblx0XCIuL2t1LmpzXCI6IDEzMixcblx0XCIuL2t5XCI6IDEzNCxcblx0XCIuL2t5LmpzXCI6IDEzNCxcblx0XCIuL2xiXCI6IDEzNSxcblx0XCIuL2xiLmpzXCI6IDEzNSxcblx0XCIuL2xvXCI6IDEzNixcblx0XCIuL2xvLmpzXCI6IDEzNixcblx0XCIuL2x0XCI6IDEzNyxcblx0XCIuL2x0LmpzXCI6IDEzNyxcblx0XCIuL2x2XCI6IDEzOCxcblx0XCIuL2x2LmpzXCI6IDEzOCxcblx0XCIuL21lXCI6IDEzOSxcblx0XCIuL21lLmpzXCI6IDEzOSxcblx0XCIuL21pXCI6IDE0MCxcblx0XCIuL21pLmpzXCI6IDE0MCxcblx0XCIuL21rXCI6IDE0MSxcblx0XCIuL21rLmpzXCI6IDE0MSxcblx0XCIuL21sXCI6IDE0Mixcblx0XCIuL21sLmpzXCI6IDE0Mixcblx0XCIuL21uXCI6IDE0Myxcblx0XCIuL21uLmpzXCI6IDE0Myxcblx0XCIuL21yXCI6IDE0NCxcblx0XCIuL21yLmpzXCI6IDE0NCxcblx0XCIuL21zXCI6IDE0NSxcblx0XCIuL21zLW15XCI6IDE0Nixcblx0XCIuL21zLW15LmpzXCI6IDE0Nixcblx0XCIuL21zLmpzXCI6IDE0NSxcblx0XCIuL210XCI6IDE0Nyxcblx0XCIuL210LmpzXCI6IDE0Nyxcblx0XCIuL215XCI6IDE0OCxcblx0XCIuL215LmpzXCI6IDE0OCxcblx0XCIuL25iXCI6IDE0OSxcblx0XCIuL25iLmpzXCI6IDE0OSxcblx0XCIuL25lXCI6IDE1MCxcblx0XCIuL25lLmpzXCI6IDE1MCxcblx0XCIuL25sXCI6IDE1MSxcblx0XCIuL25sLWJlXCI6IDE1Mixcblx0XCIuL25sLWJlLmpzXCI6IDE1Mixcblx0XCIuL25sLmpzXCI6IDE1MSxcblx0XCIuL25uXCI6IDE1Myxcblx0XCIuL25uLmpzXCI6IDE1Myxcblx0XCIuL29jLWxuY1wiOiAxNTQsXG5cdFwiLi9vYy1sbmMuanNcIjogMTU0LFxuXHRcIi4vcGEtaW5cIjogMTU1LFxuXHRcIi4vcGEtaW4uanNcIjogMTU1LFxuXHRcIi4vcGxcIjogMTU2LFxuXHRcIi4vcGwuanNcIjogMTU2LFxuXHRcIi4vcHRcIjogMTU3LFxuXHRcIi4vcHQtYnJcIjogMTU4LFxuXHRcIi4vcHQtYnIuanNcIjogMTU4LFxuXHRcIi4vcHQuanNcIjogMTU3LFxuXHRcIi4vcm9cIjogMTU5LFxuXHRcIi4vcm8uanNcIjogMTU5LFxuXHRcIi4vcnVcIjogMTYwLFxuXHRcIi4vcnUuanNcIjogMTYwLFxuXHRcIi4vc2RcIjogMTYxLFxuXHRcIi4vc2QuanNcIjogMTYxLFxuXHRcIi4vc2VcIjogMTYyLFxuXHRcIi4vc2UuanNcIjogMTYyLFxuXHRcIi4vc2lcIjogMTYzLFxuXHRcIi4vc2kuanNcIjogMTYzLFxuXHRcIi4vc2tcIjogMTY0LFxuXHRcIi4vc2suanNcIjogMTY0LFxuXHRcIi4vc2xcIjogMTY1LFxuXHRcIi4vc2wuanNcIjogMTY1LFxuXHRcIi4vc3FcIjogMTY2LFxuXHRcIi4vc3EuanNcIjogMTY2LFxuXHRcIi4vc3JcIjogMTY3LFxuXHRcIi4vc3ItY3lybFwiOiAxNjgsXG5cdFwiLi9zci1jeXJsLmpzXCI6IDE2OCxcblx0XCIuL3NyLmpzXCI6IDE2Nyxcblx0XCIuL3NzXCI6IDE2OSxcblx0XCIuL3NzLmpzXCI6IDE2OSxcblx0XCIuL3N2XCI6IDE3MCxcblx0XCIuL3N2LmpzXCI6IDE3MCxcblx0XCIuL3N3XCI6IDE3MSxcblx0XCIuL3N3LmpzXCI6IDE3MSxcblx0XCIuL3RhXCI6IDE3Mixcblx0XCIuL3RhLmpzXCI6IDE3Mixcblx0XCIuL3RlXCI6IDE3Myxcblx0XCIuL3RlLmpzXCI6IDE3Myxcblx0XCIuL3RldFwiOiAxNzQsXG5cdFwiLi90ZXQuanNcIjogMTc0LFxuXHRcIi4vdGdcIjogMTc1LFxuXHRcIi4vdGcuanNcIjogMTc1LFxuXHRcIi4vdGhcIjogMTc2LFxuXHRcIi4vdGguanNcIjogMTc2LFxuXHRcIi4vdGtcIjogMTc3LFxuXHRcIi4vdGsuanNcIjogMTc3LFxuXHRcIi4vdGwtcGhcIjogMTc4LFxuXHRcIi4vdGwtcGguanNcIjogMTc4LFxuXHRcIi4vdGxoXCI6IDE3OSxcblx0XCIuL3RsaC5qc1wiOiAxNzksXG5cdFwiLi90clwiOiAxODAsXG5cdFwiLi90ci5qc1wiOiAxODAsXG5cdFwiLi90emxcIjogMTgxLFxuXHRcIi4vdHpsLmpzXCI6IDE4MSxcblx0XCIuL3R6bVwiOiAxODIsXG5cdFwiLi90em0tbGF0blwiOiAxODMsXG5cdFwiLi90em0tbGF0bi5qc1wiOiAxODMsXG5cdFwiLi90em0uanNcIjogMTgyLFxuXHRcIi4vdWctY25cIjogMTg0LFxuXHRcIi4vdWctY24uanNcIjogMTg0LFxuXHRcIi4vdWtcIjogMTg1LFxuXHRcIi4vdWsuanNcIjogMTg1LFxuXHRcIi4vdXJcIjogMTg2LFxuXHRcIi4vdXIuanNcIjogMTg2LFxuXHRcIi4vdXpcIjogMTg3LFxuXHRcIi4vdXotbGF0blwiOiAxODgsXG5cdFwiLi91ei1sYXRuLmpzXCI6IDE4OCxcblx0XCIuL3V6LmpzXCI6IDE4Nyxcblx0XCIuL3ZpXCI6IDE4OSxcblx0XCIuL3ZpLmpzXCI6IDE4OSxcblx0XCIuL3gtcHNldWRvXCI6IDE5MCxcblx0XCIuL3gtcHNldWRvLmpzXCI6IDE5MCxcblx0XCIuL3lvXCI6IDE5MSxcblx0XCIuL3lvLmpzXCI6IDE5MSxcblx0XCIuL3poLWNuXCI6IDE5Mixcblx0XCIuL3poLWNuLmpzXCI6IDE5Mixcblx0XCIuL3poLWhrXCI6IDE5Myxcblx0XCIuL3poLWhrLmpzXCI6IDE5Myxcblx0XCIuL3poLW1vXCI6IDE5NCxcblx0XCIuL3poLW1vLmpzXCI6IDE5NCxcblx0XCIuL3poLXR3XCI6IDE5NSxcblx0XCIuL3poLXR3LmpzXCI6IDE5NVxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDI3NTsiLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMocikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyKSkgcmV0dXJuIHI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhIb2xlcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBsKSB7XG4gIHZhciB0ID0gbnVsbCA9PSByID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgcltcIkBAaXRlcmF0b3JcIl07XG4gIGlmIChudWxsICE9IHQpIHtcbiAgICB2YXIgZSxcbiAgICAgIG4sXG4gICAgICBpLFxuICAgICAgdSxcbiAgICAgIGEgPSBbXSxcbiAgICAgIGYgPSAhMCxcbiAgICAgIG8gPSAhMTtcbiAgICB0cnkge1xuICAgICAgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkge1xuICAgICAgICBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47XG4gICAgICAgIGYgPSAhMTtcbiAgICAgIH0gZWxzZSBmb3IgKDsgIShmID0gKGUgPSBpLmNhbGwodCkpLmRvbmUpICYmIChhLnB1c2goZS52YWx1ZSksIGEubGVuZ3RoICE9PSBsKTsgZiA9ICEwKTtcbiAgICB9IGNhdGNoIChyKSB7XG4gICAgICBvID0gITAsIG4gPSByO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWYgJiYgbnVsbCAhPSB0W1wicmV0dXJuXCJdICYmICh1ID0gdFtcInJldHVyblwiXSgpLCBPYmplY3QodSkgIT09IHUpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAobykgdGhyb3cgbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHtcbiAgaWYgKHIpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2YgcikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkociwgYSk7XG4gICAgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTtcbiAgICByZXR1cm4gXCJPYmplY3RcIiA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgXCJNYXBcIiA9PT0gdCB8fCBcIlNldFwiID09PSB0ID8gQXJyYXkuZnJvbShyKSA6IFwiQXJndW1lbnRzXCIgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBhcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHtcbiAgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpO1xuICBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTtcbiAgcmV0dXJuIG47XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheUxpa2VUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlUmVzdCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIid1c2Ugc3RyaWN0J1xuXG4vKiBEZXBlbmRlbmNpZXMuICovXG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJylcbnZhciBiYWlsID0gcmVxdWlyZSgnYmFpbCcpXG52YXIgdmZpbGUgPSByZXF1aXJlKCd2ZmlsZScpXG52YXIgdHJvdWdoID0gcmVxdWlyZSgndHJvdWdoJylcbnZhciBzdHJpbmcgPSByZXF1aXJlKCd4LWlzLXN0cmluZycpXG52YXIgcGxhaW4gPSByZXF1aXJlKCdpcy1wbGFpbi1vYmonKVxuXG4vKiBFeHBvc2UgYSBmcm96ZW4gcHJvY2Vzc29yLiAqL1xubW9kdWxlLmV4cG9ydHMgPSB1bmlmaWVkKCkuZnJlZXplKClcblxudmFyIHNsaWNlID0gW10uc2xpY2VcbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG4vKiBQcm9jZXNzIHBpcGVsaW5lLiAqL1xudmFyIHBpcGVsaW5lID0gdHJvdWdoKClcbiAgLnVzZShwaXBlbGluZVBhcnNlKVxuICAudXNlKHBpcGVsaW5lUnVuKVxuICAudXNlKHBpcGVsaW5lU3RyaW5naWZ5KVxuXG5mdW5jdGlvbiBwaXBlbGluZVBhcnNlKHAsIGN0eCkge1xuICBjdHgudHJlZSA9IHAucGFyc2UoY3R4LmZpbGUpXG59XG5cbmZ1bmN0aW9uIHBpcGVsaW5lUnVuKHAsIGN0eCwgbmV4dCkge1xuICBwLnJ1bihjdHgudHJlZSwgY3R4LmZpbGUsIGRvbmUpXG5cbiAgZnVuY3Rpb24gZG9uZShlcnIsIHRyZWUsIGZpbGUpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBuZXh0KGVycilcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LnRyZWUgPSB0cmVlXG4gICAgICBjdHguZmlsZSA9IGZpbGVcbiAgICAgIG5leHQoKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwaXBlbGluZVN0cmluZ2lmeShwLCBjdHgpIHtcbiAgY3R4LmZpbGUuY29udGVudHMgPSBwLnN0cmluZ2lmeShjdHgudHJlZSwgY3R4LmZpbGUpXG59XG5cbi8qIEZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZmlyc3QgcHJvY2Vzc29yLiAqL1xuZnVuY3Rpb24gdW5pZmllZCgpIHtcbiAgdmFyIGF0dGFjaGVycyA9IFtdXG4gIHZhciB0cmFuc2Zvcm1lcnMgPSB0cm91Z2goKVxuICB2YXIgbmFtZXNwYWNlID0ge31cbiAgdmFyIGZyb3plbiA9IGZhbHNlXG4gIHZhciBmcmVlemVJbmRleCA9IC0xXG5cbiAgLyogRGF0YSBtYW5hZ2VtZW50LiAqL1xuICBwcm9jZXNzb3IuZGF0YSA9IGRhdGFcblxuICAvKiBMb2NrLiAqL1xuICBwcm9jZXNzb3IuZnJlZXplID0gZnJlZXplXG5cbiAgLyogUGx1Zy1pbnMuICovXG4gIHByb2Nlc3Nvci5hdHRhY2hlcnMgPSBhdHRhY2hlcnNcbiAgcHJvY2Vzc29yLnVzZSA9IHVzZVxuXG4gIC8qIEFQSS4gKi9cbiAgcHJvY2Vzc29yLnBhcnNlID0gcGFyc2VcbiAgcHJvY2Vzc29yLnN0cmluZ2lmeSA9IHN0cmluZ2lmeVxuICBwcm9jZXNzb3IucnVuID0gcnVuXG4gIHByb2Nlc3Nvci5ydW5TeW5jID0gcnVuU3luY1xuICBwcm9jZXNzb3IucHJvY2VzcyA9IHByb2Nlc3NcbiAgcHJvY2Vzc29yLnByb2Nlc3NTeW5jID0gcHJvY2Vzc1N5bmNcblxuICAvKiBFeHBvc2UuICovXG4gIHJldHVybiBwcm9jZXNzb3JcblxuICAvKiBDcmVhdGUgYSBuZXcgcHJvY2Vzc29yIGJhc2VkIG9uIHRoZSBwcm9jZXNzb3JcbiAgICogaW4gdGhlIGN1cnJlbnQgc2NvcGUuICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NvcigpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB1bmlmaWVkKClcbiAgICB2YXIgbGVuZ3RoID0gYXR0YWNoZXJzLmxlbmd0aFxuICAgIHZhciBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgZGVzdGluYXRpb24udXNlLmFwcGx5KG51bGwsIGF0dGFjaGVyc1tpbmRleF0pXG4gICAgfVxuXG4gICAgZGVzdGluYXRpb24uZGF0YShleHRlbmQodHJ1ZSwge30sIG5hbWVzcGFjZSkpXG5cbiAgICByZXR1cm4gZGVzdGluYXRpb25cbiAgfVxuXG4gIC8qIEZyZWV6ZTogdXNlZCB0byBzaWduYWwgYSBwcm9jZXNzb3IgdGhhdCBoYXMgZmluaXNoZWRcbiAgICogY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIHRha2UgdW5pZmllZCBpdHNlbGYuICBJdOKAmXMgZnJvemVuLlxuICAgKiBQbHVnLWlucyBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGl0LiAgUmF0aGVyLCBpdCBzaG91bGRcbiAgICogYmUgZXh0ZW5kZWQsIGJ5IGludm9raW5nIGl0LCBiZWZvcmUgbW9kaWZ5aW5nIGl0LlxuICAgKlxuICAgKiBJbiBlc3NlbmNlLCBhbHdheXMgaW52b2tlIHRoaXMgd2hlbiBleHBvcnRpbmcgYVxuICAgKiBwcm9jZXNzb3IuICovXG4gIGZ1bmN0aW9uIGZyZWV6ZSgpIHtcbiAgICB2YXIgdmFsdWVzXG4gICAgdmFyIHBsdWdpblxuICAgIHZhciBvcHRpb25zXG4gICAgdmFyIHRyYW5zZm9ybWVyXG5cbiAgICBpZiAoZnJvemVuKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc29yXG4gICAgfVxuXG4gICAgd2hpbGUgKCsrZnJlZXplSW5kZXggPCBhdHRhY2hlcnMubGVuZ3RoKSB7XG4gICAgICB2YWx1ZXMgPSBhdHRhY2hlcnNbZnJlZXplSW5kZXhdXG4gICAgICBwbHVnaW4gPSB2YWx1ZXNbMF1cbiAgICAgIG9wdGlvbnMgPSB2YWx1ZXNbMV1cbiAgICAgIHRyYW5zZm9ybWVyID0gbnVsbFxuXG4gICAgICBpZiAob3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgdmFsdWVzWzFdID0gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIHRyYW5zZm9ybWVyID0gcGx1Z2luLmFwcGx5KHByb2Nlc3NvciwgdmFsdWVzLnNsaWNlKDEpKVxuXG4gICAgICBpZiAodHlwZW9mIHRyYW5zZm9ybWVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyYW5zZm9ybWVycy51c2UodHJhbnNmb3JtZXIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnJvemVuID0gdHJ1ZVxuICAgIGZyZWV6ZUluZGV4ID0gSW5maW5pdHlcblxuICAgIHJldHVybiBwcm9jZXNzb3JcbiAgfVxuXG4gIC8qIERhdGEgbWFuYWdlbWVudC5cbiAgICogR2V0dGVyIC8gc2V0dGVyIGZvciBwcm9jZXNzb3Itc3BlY2lmaWMgaW5mb3JtdGlvbi4gKi9cbiAgZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gICAgaWYgKHN0cmluZyhrZXkpKSB7XG4gICAgICAvKiBTZXQgYGtleWAuICovXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBhc3NlcnRVbmZyb3plbignZGF0YScsIGZyb3plbilcblxuICAgICAgICBuYW1lc3BhY2Vba2V5XSA9IHZhbHVlXG5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgICAgfVxuXG4gICAgICAvKiBHZXQgYGtleWAuICovXG4gICAgICByZXR1cm4gKG93bi5jYWxsKG5hbWVzcGFjZSwga2V5KSAmJiBuYW1lc3BhY2Vba2V5XSkgfHwgbnVsbFxuICAgIH1cblxuICAgIC8qIFNldCBzcGFjZS4gKi9cbiAgICBpZiAoa2V5KSB7XG4gICAgICBhc3NlcnRVbmZyb3plbignZGF0YScsIGZyb3plbilcbiAgICAgIG5hbWVzcGFjZSA9IGtleVxuICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgIH1cblxuICAgIC8qIEdldCBzcGFjZS4gKi9cbiAgICByZXR1cm4gbmFtZXNwYWNlXG4gIH1cblxuICAvKiBQbHVnLWluIG1hbmFnZW1lbnQuXG4gICAqXG4gICAqIFBhc3MgaXQ6XG4gICAqICogICBhbiBhdHRhY2hlciBhbmQgb3B0aW9ucyxcbiAgICogKiAgIGEgcHJlc2V0LFxuICAgKiAqICAgYSBsaXN0IG9mIHByZXNldHMsIGF0dGFjaGVycywgYW5kIGFyZ3VtZW50cyAobGlzdFxuICAgKiAgICAgb2YgYXR0YWNoZXJzIGFuZCBvcHRpb25zKS4gKi9cbiAgZnVuY3Rpb24gdXNlKHZhbHVlKSB7XG4gICAgdmFyIHNldHRpbmdzXG5cbiAgICBhc3NlcnRVbmZyb3plbigndXNlJywgZnJvemVuKVxuXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8qIEVtcHR5ICovXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFkZFBsdWdpbi5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoJ2xlbmd0aCcgaW4gdmFsdWUpIHtcbiAgICAgICAgYWRkTGlzdCh2YWx1ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZFByZXNldCh2YWx1ZSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB1c2FibGUgdmFsdWUsIG5vdCBgJyArIHZhbHVlICsgJ2AnKVxuICAgIH1cblxuICAgIGlmIChzZXR0aW5ncykge1xuICAgICAgbmFtZXNwYWNlLnNldHRpbmdzID0gZXh0ZW5kKG5hbWVzcGFjZS5zZXR0aW5ncyB8fCB7fSwgc2V0dGluZ3MpXG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NvclxuXG4gICAgZnVuY3Rpb24gYWRkUHJlc2V0KHJlc3VsdCkge1xuICAgICAgYWRkTGlzdChyZXN1bHQucGx1Z2lucylcblxuICAgICAgaWYgKHJlc3VsdC5zZXR0aW5ncykge1xuICAgICAgICBzZXR0aW5ncyA9IGV4dGVuZChzZXR0aW5ncyB8fCB7fSwgcmVzdWx0LnNldHRpbmdzKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBhZGRQbHVnaW4odmFsdWUpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKCdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgICAgICAgYWRkUGx1Z2luLmFwcGx5KG51bGwsIHZhbHVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZFByZXNldCh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB1c2FibGUgdmFsdWUsIG5vdCBgJyArIHZhbHVlICsgJ2AnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZExpc3QocGx1Z2lucykge1xuICAgICAgdmFyIGxlbmd0aFxuICAgICAgdmFyIGluZGV4XG5cbiAgICAgIGlmIChwbHVnaW5zID09PSBudWxsIHx8IHBsdWdpbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvKiBFbXB0eSAqL1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gcGx1Z2lucykge1xuICAgICAgICBsZW5ndGggPSBwbHVnaW5zLmxlbmd0aFxuICAgICAgICBpbmRleCA9IC0xXG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhZGQocGx1Z2luc1tpbmRleF0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYSBsaXN0IG9mIHBsdWdpbnMsIG5vdCBgJyArIHBsdWdpbnMgKyAnYCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkUGx1Z2luKHBsdWdpbiwgdmFsdWUpIHtcbiAgICAgIHZhciBlbnRyeSA9IGZpbmQocGx1Z2luKVxuXG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgaWYgKHBsYWluKGVudHJ5WzFdKSAmJiBwbGFpbih2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IGV4dGVuZChlbnRyeVsxXSwgdmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICBlbnRyeVsxXSA9IHZhbHVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdHRhY2hlcnMucHVzaChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZChwbHVnaW4pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXR0YWNoZXJzLmxlbmd0aFxuICAgIHZhciBpbmRleCA9IC0xXG4gICAgdmFyIGVudHJ5XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgZW50cnkgPSBhdHRhY2hlcnNbaW5kZXhdXG5cbiAgICAgIGlmIChlbnRyeVswXSA9PT0gcGx1Z2luKSB7XG4gICAgICAgIHJldHVybiBlbnRyeVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qIFBhcnNlIGEgZmlsZSAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKVxuICAgKiBpbnRvIGEgVW5pc3Qgbm9kZSB1c2luZyB0aGUgYFBhcnNlcmAgb24gdGhlXG4gICAqIHByb2Nlc3Nvci4gKi9cbiAgZnVuY3Rpb24gcGFyc2UoZG9jKSB7XG4gICAgdmFyIGZpbGUgPSB2ZmlsZShkb2MpXG4gICAgdmFyIFBhcnNlclxuXG4gICAgZnJlZXplKClcbiAgICBQYXJzZXIgPSBwcm9jZXNzb3IuUGFyc2VyXG4gICAgYXNzZXJ0UGFyc2VyKCdwYXJzZScsIFBhcnNlcilcblxuICAgIGlmIChuZXdhYmxlKFBhcnNlcikpIHtcbiAgICAgIHJldHVybiBuZXcgUGFyc2VyKFN0cmluZyhmaWxlKSwgZmlsZSkucGFyc2UoKVxuICAgIH1cblxuICAgIHJldHVybiBQYXJzZXIoU3RyaW5nKGZpbGUpLCBmaWxlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIC8qIFJ1biB0cmFuc2Zvcm1zIG9uIGEgVW5pc3Qgbm9kZSByZXByZXNlbnRhdGlvbiBvZiBhIGZpbGVcbiAgICogKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbiksIGFzeW5jLiAqL1xuICBmdW5jdGlvbiBydW4obm9kZSwgZmlsZSwgY2IpIHtcbiAgICBhc3NlcnROb2RlKG5vZGUpXG4gICAgZnJlZXplKClcblxuICAgIGlmICghY2IgJiYgdHlwZW9mIGZpbGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNiID0gZmlsZVxuICAgICAgZmlsZSA9IG51bGxcbiAgICB9XG5cbiAgICBpZiAoIWNiKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZXhlY3V0b3IpXG4gICAgfVxuXG4gICAgZXhlY3V0b3IobnVsbCwgY2IpXG5cbiAgICBmdW5jdGlvbiBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyYW5zZm9ybWVycy5ydW4obm9kZSwgdmZpbGUoZmlsZSksIGRvbmUpXG5cbiAgICAgIGZ1bmN0aW9uIGRvbmUoZXJyLCB0cmVlLCBmaWxlKSB7XG4gICAgICAgIHRyZWUgPSB0cmVlIHx8IG5vZGVcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUodHJlZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYihudWxsLCB0cmVlLCBmaWxlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogUnVuIHRyYW5zZm9ybXMgb24gYSBVbmlzdCBub2RlIHJlcHJlc2VudGF0aW9uIG9mIGEgZmlsZVxuICAgKiAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKSwgc3luYy4gKi9cbiAgZnVuY3Rpb24gcnVuU3luYyhub2RlLCBmaWxlKSB7XG4gICAgdmFyIGNvbXBsZXRlID0gZmFsc2VcbiAgICB2YXIgcmVzdWx0XG5cbiAgICBydW4obm9kZSwgZmlsZSwgZG9uZSlcblxuICAgIGFzc2VydERvbmUoJ3J1blN5bmMnLCAncnVuJywgY29tcGxldGUpXG5cbiAgICByZXR1cm4gcmVzdWx0XG5cbiAgICBmdW5jdGlvbiBkb25lKGVyciwgdHJlZSkge1xuICAgICAgY29tcGxldGUgPSB0cnVlXG4gICAgICBiYWlsKGVycilcbiAgICAgIHJlc3VsdCA9IHRyZWVcbiAgICB9XG4gIH1cblxuICAvKiBTdHJpbmdpZnkgYSBVbmlzdCBub2RlIHJlcHJlc2VudGF0aW9uIG9mIGEgZmlsZVxuICAgKiAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKSBpbnRvIGEgc3RyaW5nXG4gICAqIHVzaW5nIHRoZSBgQ29tcGlsZXJgIG9uIHRoZSBwcm9jZXNzb3IuICovXG4gIGZ1bmN0aW9uIHN0cmluZ2lmeShub2RlLCBkb2MpIHtcbiAgICB2YXIgZmlsZSA9IHZmaWxlKGRvYylcbiAgICB2YXIgQ29tcGlsZXJcblxuICAgIGZyZWV6ZSgpXG4gICAgQ29tcGlsZXIgPSBwcm9jZXNzb3IuQ29tcGlsZXJcbiAgICBhc3NlcnRDb21waWxlcignc3RyaW5naWZ5JywgQ29tcGlsZXIpXG4gICAgYXNzZXJ0Tm9kZShub2RlKVxuXG4gICAgaWYgKG5ld2FibGUoQ29tcGlsZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IENvbXBpbGVyKG5vZGUsIGZpbGUpLmNvbXBpbGUoKVxuICAgIH1cblxuICAgIHJldHVybiBDb21waWxlcihub2RlLCBmaWxlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIC8qIFBhcnNlIGEgZmlsZSAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKVxuICAgKiBpbnRvIGEgVW5pc3Qgbm9kZSB1c2luZyB0aGUgYFBhcnNlcmAgb24gdGhlIHByb2Nlc3NvcixcbiAgICogdGhlbiBydW4gdHJhbnNmb3JtcyBvbiB0aGF0IG5vZGUsIGFuZCBjb21waWxlIHRoZVxuICAgKiByZXN1bHRpbmcgbm9kZSB1c2luZyB0aGUgYENvbXBpbGVyYCBvbiB0aGUgcHJvY2Vzc29yLFxuICAgKiBhbmQgc3RvcmUgdGhhdCByZXN1bHQgb24gdGhlIFZGaWxlLiAqL1xuICBmdW5jdGlvbiBwcm9jZXNzKGRvYywgY2IpIHtcbiAgICBmcmVlemUoKVxuICAgIGFzc2VydFBhcnNlcigncHJvY2VzcycsIHByb2Nlc3Nvci5QYXJzZXIpXG4gICAgYXNzZXJ0Q29tcGlsZXIoJ3Byb2Nlc3MnLCBwcm9jZXNzb3IuQ29tcGlsZXIpXG5cbiAgICBpZiAoIWNiKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZXhlY3V0b3IpXG4gICAgfVxuXG4gICAgZXhlY3V0b3IobnVsbCwgY2IpXG5cbiAgICBmdW5jdGlvbiBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBmaWxlID0gdmZpbGUoZG9jKVxuXG4gICAgICBwaXBlbGluZS5ydW4ocHJvY2Vzc29yLCB7ZmlsZTogZmlsZX0sIGRvbmUpXG5cbiAgICAgIGZ1bmN0aW9uIGRvbmUoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKGZpbGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IobnVsbCwgZmlsZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qIFByb2Nlc3MgdGhlIGdpdmVuIGRvY3VtZW50IChpbiBzdHJpbmcgb3IgVkZpbGVcbiAgICogcmVwcmVzZW50YXRpb24pLCBzeW5jLiAqL1xuICBmdW5jdGlvbiBwcm9jZXNzU3luYyhkb2MpIHtcbiAgICB2YXIgY29tcGxldGUgPSBmYWxzZVxuICAgIHZhciBmaWxlXG5cbiAgICBmcmVlemUoKVxuICAgIGFzc2VydFBhcnNlcigncHJvY2Vzc1N5bmMnLCBwcm9jZXNzb3IuUGFyc2VyKVxuICAgIGFzc2VydENvbXBpbGVyKCdwcm9jZXNzU3luYycsIHByb2Nlc3Nvci5Db21waWxlcilcbiAgICBmaWxlID0gdmZpbGUoZG9jKVxuXG4gICAgcHJvY2VzcyhmaWxlLCBkb25lKVxuXG4gICAgYXNzZXJ0RG9uZSgncHJvY2Vzc1N5bmMnLCAncHJvY2VzcycsIGNvbXBsZXRlKVxuXG4gICAgcmV0dXJuIGZpbGVcblxuICAgIGZ1bmN0aW9uIGRvbmUoZXJyKSB7XG4gICAgICBjb21wbGV0ZSA9IHRydWVcbiAgICAgIGJhaWwoZXJyKVxuICAgIH1cbiAgfVxufVxuXG4vKiBDaGVjayBpZiBgZnVuY2AgaXMgYSBjb25zdHJ1Y3Rvci4gKi9cbmZ1bmN0aW9uIG5ld2FibGUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBrZXlzKHZhbHVlLnByb3RvdHlwZSlcbn1cblxuLyogQ2hlY2sgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3Qgd2l0aCBrZXlzLiAqL1xuZnVuY3Rpb24ga2V5cyh2YWx1ZSkge1xuICB2YXIga2V5XG4gIGZvciAoa2V5IGluIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogQXNzZXJ0IGEgcGFyc2VyIGlzIGF2YWlsYWJsZS4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnNlcihuYW1lLCBQYXJzZXIpIHtcbiAgaWYgKHR5cGVvZiBQYXJzZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBgJyArIG5hbWUgKyAnYCB3aXRob3V0IGBQYXJzZXJgJylcbiAgfVxufVxuXG4vKiBBc3NlcnQgYSBjb21waWxlciBpcyBhdmFpbGFibGUuICovXG5mdW5jdGlvbiBhc3NlcnRDb21waWxlcihuYW1lLCBDb21waWxlcikge1xuICBpZiAodHlwZW9mIENvbXBpbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYCcgKyBuYW1lICsgJ2Agd2l0aG91dCBgQ29tcGlsZXJgJylcbiAgfVxufVxuXG4vKiBBc3NlcnQgdGhlIHByb2Nlc3NvciBpcyBub3QgZnJvemVuLiAqL1xuZnVuY3Rpb24gYXNzZXJ0VW5mcm96ZW4obmFtZSwgZnJvemVuKSB7XG4gIGlmIChmcm96ZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBbXG4gICAgICAgICdDYW5ub3QgaW52b2tlIGAnICsgbmFtZSArICdgIG9uIGEgZnJvemVuIHByb2Nlc3Nvci5cXG5DcmVhdGUgYSBuZXcgJyxcbiAgICAgICAgJ3Byb2Nlc3NvciBmaXJzdCwgYnkgaW52b2tpbmcgaXQ6IHVzZSBgcHJvY2Vzc29yKClgIGluc3RlYWQgb2YgJyxcbiAgICAgICAgJ2Bwcm9jZXNzb3JgLidcbiAgICAgIF0uam9pbignJylcbiAgICApXG4gIH1cbn1cblxuLyogQXNzZXJ0IGBub2RlYCBpcyBhIFVuaXN0IG5vZGUuICovXG5mdW5jdGlvbiBhc3NlcnROb2RlKG5vZGUpIHtcbiAgaWYgKCFub2RlIHx8ICFzdHJpbmcobm9kZS50eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9kZSwgZ290IGAnICsgbm9kZSArICdgJylcbiAgfVxufVxuXG4vKiBBc3NlcnQgdGhhdCBgY29tcGxldGVgIGlzIGB0cnVlYC4gKi9cbmZ1bmN0aW9uIGFzc2VydERvbmUobmFtZSwgYXN5bmNOYW1lLCBjb21wbGV0ZSkge1xuICBpZiAoIWNvbXBsZXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2AnICsgbmFtZSArICdgIGZpbmlzaGVkIGFzeW5jLiBVc2UgYCcgKyBhc3luY05hbWUgKyAnYCBpbnN0ZWFkJ1xuICAgIClcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgeyAvKiovIH1cblxuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufTtcblxuLy8gSWYgbmFtZSBpcyAnX19wcm90b19fJywgYW5kIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBhdmFpbGFibGUsIGRlZmluZSBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5IG9uIHRhcmdldFxudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkodGFyZ2V0LCBvcHRpb25zKSB7XG5cdGlmIChkZWZpbmVQcm9wZXJ0eSAmJiBvcHRpb25zLm5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBvcHRpb25zLm5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogb3B0aW9ucy5uZXdWYWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0W29wdGlvbnMubmFtZV0gPSBvcHRpb25zLm5ld1ZhbHVlO1xuXHR9XG59O1xuXG4vLyBSZXR1cm4gdW5kZWZpbmVkIGluc3RlYWQgb2YgX19wcm90b19fIGlmICdfX3Byb3RvX18nIGlzIG5vdCBhbiBvd24gcHJvcGVydHlcbnZhciBnZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5KG9iaiwgbmFtZSkge1xuXHRpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRpZiAoIWhhc093bi5jYWxsKG9iaiwgbmFtZSkpIHtcblx0XHRcdHJldHVybiB2b2lkIDA7XG5cdFx0fSBlbHNlIGlmIChnT1BEKSB7XG5cdFx0XHQvLyBJbiBlYXJseSB2ZXJzaW9ucyBvZiBub2RlLCBvYmpbJ19fcHJvdG9fXyddIGlzIGJ1Z2d5IHdoZW4gb2JqIGhhc1xuXHRcdFx0Ly8gX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eS4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcigpIHdvcmtzLlxuXHRcdFx0cmV0dXJuIGdPUEQob2JqLCBuYW1lKS52YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb2JqW25hbWVdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQoKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZTtcblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblx0dmFyIGkgPSAxO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0aSA9IDI7XG5cdH1cblx0aWYgKHRhcmdldCA9PSBudWxsIHx8ICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Zm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmIChvcHRpb25zICE9IG51bGwpIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHNyYyA9IGdldFByb3BlcnR5KHRhcmdldCwgbmFtZSk7XG5cdFx0XHRcdGNvcHkgPSBnZXRQcm9wZXJ0eShvcHRpb25zLCBuYW1lKTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICh0YXJnZXQgIT09IGNvcHkpIHtcblx0XHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0XHRpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGlzQXJyYXkoY29weSkpKSkge1xuXHRcdFx0XHRcdFx0aWYgKGNvcHlJc0FycmF5KSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBleHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpIH0pO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGNvcHkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGNvcHkgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBiYWlsXG5cbmZ1bmN0aW9uIGJhaWwoZXJyKSB7XG4gIGlmIChlcnIpIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVk1lc3NhZ2UgPSByZXF1aXJlKCd2ZmlsZS1tZXNzYWdlJyk7XG52YXIgVkZpbGUgPSByZXF1aXJlKCcuL2NvcmUuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBWRmlsZTtcblxudmFyIHByb3RvID0gVkZpbGUucHJvdG90eXBlO1xuXG5wcm90by5tZXNzYWdlID0gbWVzc2FnZTtcbnByb3RvLmluZm8gPSBpbmZvO1xucHJvdG8uZmFpbCA9IGZhaWw7XG5cbi8qIFNsaWdodCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gIFJlbW92ZSBpbiB0aGUgZnV0dXJlLiAqL1xucHJvdG8ud2FybiA9IG1lc3NhZ2U7XG5cbi8qIENyZWF0ZSBhIG1lc3NhZ2Ugd2l0aCBgcmVhc29uYCBhdCBgcG9zaXRpb25gLlxuICogV2hlbiBhbiBlcnJvciBpcyBwYXNzZWQgaW4gYXMgYHJlYXNvbmAsIGNvcGllcyB0aGUgc3RhY2suICovXG5mdW5jdGlvbiBtZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24sIG9yaWdpbikge1xuICB2YXIgZmlsZVBhdGggPSB0aGlzLnBhdGg7XG4gIHZhciBtZXNzYWdlID0gbmV3IFZNZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24sIG9yaWdpbik7XG5cbiAgaWYgKGZpbGVQYXRoKSB7XG4gICAgbWVzc2FnZS5uYW1lID0gZmlsZVBhdGggKyAnOicgKyBtZXNzYWdlLm5hbWU7XG4gICAgbWVzc2FnZS5maWxlID0gZmlsZVBhdGg7XG4gIH1cblxuICBtZXNzYWdlLmZhdGFsID0gZmFsc2U7XG5cbiAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuXG4gIHJldHVybiBtZXNzYWdlO1xufVxuXG4vKiBGYWlsLiBDcmVhdGVzIGEgdm1lc3NhZ2UsIGFzc29jaWF0ZXMgaXQgd2l0aCB0aGUgZmlsZSxcbiAqIGFuZCB0aHJvd3MgaXQuICovXG5mdW5jdGlvbiBmYWlsKCkge1xuICB2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIG1lc3NhZ2UuZmF0YWwgPSB0cnVlO1xuXG4gIHRocm93IG1lc3NhZ2U7XG59XG5cbi8qIEluZm8uIENyZWF0ZXMgYSB2bWVzc2FnZSwgYXNzb2NpYXRlcyBpdCB3aXRoIHRoZSBmaWxlLFxuICogYW5kIG1hcmtzIHRoZSBmYXRhbGl0eSBhcyBudWxsLiAqL1xuZnVuY3Rpb24gaW5mbygpIHtcbiAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBtZXNzYWdlLmZhdGFsID0gbnVsbDtcblxuICByZXR1cm4gbWVzc2FnZTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgndW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZNZXNzYWdlXG5cbi8vIEluaGVyaXQgZnJvbSBgRXJyb3IjYC5cbmZ1bmN0aW9uIFZNZXNzYWdlUHJvdG90eXBlKCkge31cblZNZXNzYWdlUHJvdG90eXBlLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZVxuVk1lc3NhZ2UucHJvdG90eXBlID0gbmV3IFZNZXNzYWdlUHJvdG90eXBlKClcblxuLy8gTWVzc2FnZSBwcm9wZXJ0aWVzLlxudmFyIHByb3RvID0gVk1lc3NhZ2UucHJvdG90eXBlXG5cbnByb3RvLmZpbGUgPSAnJ1xucHJvdG8ubmFtZSA9ICcnXG5wcm90by5yZWFzb24gPSAnJ1xucHJvdG8ubWVzc2FnZSA9ICcnXG5wcm90by5zdGFjayA9ICcnXG5wcm90by5mYXRhbCA9IG51bGxcbnByb3RvLmNvbHVtbiA9IG51bGxcbnByb3RvLmxpbmUgPSBudWxsXG5cbi8vIENvbnN0cnVjdCBhIG5ldyBWTWVzc2FnZS5cbi8vXG4vLyBOb3RlOiBXZSBjYW5ub3QgaW52b2tlIGBFcnJvcmAgb24gdGhlIGNyZWF0ZWQgY29udGV4dCwgYXMgdGhhdCBhZGRzIHJlYWRvbmx5XG4vLyBgbGluZWAgYW5kIGBjb2x1bW5gIGF0dHJpYnV0ZXMgb24gU2FmYXJpIDksIHRodXMgdGhyb3dpbmcgYW5kIGZhaWxpbmcgdGhlXG4vLyBkYXRhLlxuZnVuY3Rpb24gVk1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbiwgb3JpZ2luKSB7XG4gIHZhciBwYXJ0c1xuICB2YXIgcmFuZ2VcbiAgdmFyIGxvY2F0aW9uXG5cbiAgaWYgKHR5cGVvZiBwb3NpdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBvcmlnaW4gPSBwb3NpdGlvblxuICAgIHBvc2l0aW9uID0gbnVsbFxuICB9XG5cbiAgcGFydHMgPSBwYXJzZU9yaWdpbihvcmlnaW4pXG4gIHJhbmdlID0gc3RyaW5naWZ5KHBvc2l0aW9uKSB8fCAnMToxJ1xuXG4gIGxvY2F0aW9uID0ge1xuICAgIHN0YXJ0OiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsfSxcbiAgICBlbmQ6IHtsaW5lOiBudWxsLCBjb2x1bW46IG51bGx9XG4gIH1cblxuICAvLyBOb2RlLlxuICBpZiAocG9zaXRpb24gJiYgcG9zaXRpb24ucG9zaXRpb24pIHtcbiAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLnBvc2l0aW9uXG4gIH1cblxuICBpZiAocG9zaXRpb24pIHtcbiAgICAvLyBQb3NpdGlvbi5cbiAgICBpZiAocG9zaXRpb24uc3RhcnQpIHtcbiAgICAgIGxvY2F0aW9uID0gcG9zaXRpb25cbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24uc3RhcnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUG9pbnQuXG4gICAgICBsb2NhdGlvbi5zdGFydCA9IHBvc2l0aW9uXG4gICAgfVxuICB9XG5cbiAgaWYgKHJlYXNvbi5zdGFjaykge1xuICAgIHRoaXMuc3RhY2sgPSByZWFzb24uc3RhY2tcbiAgICByZWFzb24gPSByZWFzb24ubWVzc2FnZVxuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gcmVhc29uXG4gIHRoaXMubmFtZSA9IHJhbmdlXG4gIHRoaXMucmVhc29uID0gcmVhc29uXG4gIHRoaXMubGluZSA9IHBvc2l0aW9uID8gcG9zaXRpb24ubGluZSA6IG51bGxcbiAgdGhpcy5jb2x1bW4gPSBwb3NpdGlvbiA/IHBvc2l0aW9uLmNvbHVtbiA6IG51bGxcbiAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uXG4gIHRoaXMuc291cmNlID0gcGFydHNbMF1cbiAgdGhpcy5ydWxlSWQgPSBwYXJ0c1sxXVxufVxuXG5mdW5jdGlvbiBwYXJzZU9yaWdpbihvcmlnaW4pIHtcbiAgdmFyIHJlc3VsdCA9IFtudWxsLCBudWxsXVxuICB2YXIgaW5kZXhcblxuICBpZiAodHlwZW9mIG9yaWdpbiA9PT0gJ3N0cmluZycpIHtcbiAgICBpbmRleCA9IG9yaWdpbi5pbmRleE9mKCc6JylcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHJlc3VsdFsxXSA9IG9yaWdpblxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbMF0gPSBvcmlnaW4uc2xpY2UoMCwgaW5kZXgpXG4gICAgICByZXN1bHRbMV0gPSBvcmlnaW4uc2xpY2UoaW5kZXggKyAxKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdpZnlcblxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlKSB7XG4gIC8qIE5vdGhpbmcuICovXG4gIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKiBOb2RlLiAqL1xuICBpZiAob3duLmNhbGwodmFsdWUsICdwb3NpdGlvbicpIHx8IG93bi5jYWxsKHZhbHVlLCAndHlwZScpKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uKHZhbHVlLnBvc2l0aW9uKVxuICB9XG5cbiAgLyogUG9zaXRpb24uICovXG4gIGlmIChvd24uY2FsbCh2YWx1ZSwgJ3N0YXJ0JykgfHwgb3duLmNhbGwodmFsdWUsICdlbmQnKSkge1xuICAgIHJldHVybiBwb3NpdGlvbih2YWx1ZSlcbiAgfVxuXG4gIC8qIFBvaW50LiAqL1xuICBpZiAob3duLmNhbGwodmFsdWUsICdsaW5lJykgfHwgb3duLmNhbGwodmFsdWUsICdjb2x1bW4nKSkge1xuICAgIHJldHVybiBwb2ludCh2YWx1ZSlcbiAgfVxuXG4gIC8qID8gKi9cbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gcG9pbnQocG9pbnQpIHtcbiAgaWYgKCFwb2ludCB8fCB0eXBlb2YgcG9pbnQgIT09ICdvYmplY3QnKSB7XG4gICAgcG9pbnQgPSB7fVxuICB9XG5cbiAgcmV0dXJuIGluZGV4KHBvaW50LmxpbmUpICsgJzonICsgaW5kZXgocG9pbnQuY29sdW1uKVxufVxuXG5mdW5jdGlvbiBwb3NpdGlvbihwb3MpIHtcbiAgaWYgKCFwb3MgfHwgdHlwZW9mIHBvcyAhPT0gJ29iamVjdCcpIHtcbiAgICBwb3MgPSB7fVxuICB9XG5cbiAgcmV0dXJuIHBvaW50KHBvcy5zdGFydCkgKyAnLScgKyBwb2ludChwb3MuZW5kKVxufVxuXG5mdW5jdGlvbiBpbmRleCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogMVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciByZXBsYWNlID0gcmVxdWlyZSgncmVwbGFjZS1leHQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBWRmlsZTtcblxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xudmFyIHByb3RvID0gVkZpbGUucHJvdG90eXBlO1xuXG5wcm90by50b1N0cmluZyA9IHRvU3RyaW5nO1xuXG4vKiBPcmRlciBvZiBzZXR0aW5nIChsZWFzdCBzcGVjaWZpYyB0byBtb3N0KSwgd2UgbmVlZCB0aGlzIGJlY2F1c2VcbiAqIG90aGVyd2lzZSBge3N0ZW06ICdhJywgcGF0aDogJ34vYi5qcyd9YCB3b3VsZCB0aHJvdywgYXMgYSBwYXRoXG4gKiBpcyBuZWVkZWQgYmVmb3JlIGEgc3RlbSBjYW4gYmUgc2V0LiAqL1xudmFyIG9yZGVyID0gW1xuICAnaGlzdG9yeScsXG4gICdwYXRoJyxcbiAgJ2Jhc2VuYW1lJyxcbiAgJ3N0ZW0nLFxuICAnZXh0bmFtZScsXG4gICdkaXJuYW1lJ1xuXTtcblxuLyogQ29uc3RydWN0IGEgbmV3IGZpbGUuICovXG5mdW5jdGlvbiBWRmlsZShvcHRpb25zKSB7XG4gIHZhciBwcm9wO1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG5cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyB8fCBidWZmZXIob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge2NvbnRlbnRzOiBvcHRpb25zfTtcbiAgfSBlbHNlIGlmICgnbWVzc2FnZScgaW4gb3B0aW9ucyAmJiAnbWVzc2FnZXMnIGluIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBWRmlsZSkpIHtcbiAgICByZXR1cm4gbmV3IFZGaWxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5kYXRhID0ge307XG4gIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgdGhpcy5oaXN0b3J5ID0gW107XG4gIHRoaXMuY3dkID0gcHJvY2Vzcy5jd2QoKTtcblxuICAvKiBTZXQgcGF0aCByZWxhdGVkIHByb3BlcnRpZXMgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuICovXG4gIGluZGV4ID0gLTE7XG4gIGxlbmd0aCA9IG9yZGVyLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHByb3AgPSBvcmRlcltpbmRleF07XG5cbiAgICBpZiAob3duLmNhbGwob3B0aW9ucywgcHJvcCkpIHtcbiAgICAgIHRoaXNbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIC8qIFNldCBub24tcGF0aCByZWxhdGVkIHByb3BlcnRpZXMuICovXG4gIGZvciAocHJvcCBpbiBvcHRpb25zKSB7XG4gICAgaWYgKG9yZGVyLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG4gIH1cbn1cblxuLyogQWNjZXNzIGZ1bGwgcGF0aCAoYH4vaW5kZXgubWluLmpzYCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdwYXRoJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5oaXN0b3J5W3RoaXMuaGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAocGF0aCkge1xuICAgIGFzc2VydE5vbkVtcHR5KHBhdGgsICdwYXRoJyk7XG5cbiAgICBpZiAocGF0aCAhPT0gdGhpcy5wYXRoKSB7XG4gICAgICB0aGlzLmhpc3RvcnkucHVzaChwYXRoKTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKiBBY2Nlc3MgcGFyZW50IHBhdGggKGB+YCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdkaXJuYW1lJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmRpcm5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoZGlybmFtZSkge1xuICAgIGFzc2VydFBhdGgodGhpcy5wYXRoLCAnZGlybmFtZScpO1xuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbihkaXJuYW1lIHx8ICcnLCB0aGlzLmJhc2VuYW1lKTtcbiAgfVxufSk7XG5cbi8qIEFjY2VzcyBiYXNlbmFtZSAoYGluZGV4Lm1pbi5qc2ApLiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnYmFzZW5hbWUnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguYmFzZW5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoYmFzZW5hbWUpIHtcbiAgICBhc3NlcnROb25FbXB0eShiYXNlbmFtZSwgJ2Jhc2VuYW1lJyk7XG4gICAgYXNzZXJ0UGFydChiYXNlbmFtZSwgJ2Jhc2VuYW1lJyk7XG4gICAgdGhpcy5wYXRoID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSB8fCAnJywgYmFzZW5hbWUpO1xuICB9XG59KTtcblxuLyogQWNjZXNzIGV4dG5hbWUgKGAuanNgKS4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ2V4dG5hbWUnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguZXh0bmFtZSh0aGlzLnBhdGgpIDogdW5kZWZpbmVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChleHRuYW1lKSB7XG4gICAgdmFyIGV4dCA9IGV4dG5hbWUgfHwgJyc7XG5cbiAgICBhc3NlcnRQYXJ0KGV4dCwgJ2V4dG5hbWUnKTtcbiAgICBhc3NlcnRQYXRoKHRoaXMucGF0aCwgJ2V4dG5hbWUnKTtcblxuICAgIGlmIChleHQpIHtcbiAgICAgIGlmIChleHQuY2hhckF0KDApICE9PSAnLicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZXh0bmFtZWAgbXVzdCBzdGFydCB3aXRoIGAuYCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXh0LmluZGV4T2YoJy4nLCAxKSAhPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZXh0bmFtZWAgY2Fubm90IGNvbnRhaW4gbXVsdGlwbGUgZG90cycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucGF0aCA9IHJlcGxhY2UodGhpcy5wYXRoLCBleHQpO1xuICB9XG59KTtcblxuLyogQWNjZXNzIHN0ZW0gKGBpbmRleC5taW5gKS4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ3N0ZW0nLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguYmFzZW5hbWUodGhpcy5wYXRoLCB0aGlzLmV4dG5hbWUpIDogdW5kZWZpbmVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChzdGVtKSB7XG4gICAgYXNzZXJ0Tm9uRW1wdHkoc3RlbSwgJ3N0ZW0nKTtcbiAgICBhc3NlcnRQYXJ0KHN0ZW0sICdzdGVtJyk7XG4gICAgdGhpcy5wYXRoID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSB8fCAnJywgc3RlbSArICh0aGlzLmV4dG5hbWUgfHwgJycpKTtcbiAgfVxufSk7XG5cbi8qIEdldCB0aGUgdmFsdWUgb2YgdGhlIGZpbGUuICovXG5mdW5jdGlvbiB0b1N0cmluZyhlbmNvZGluZykge1xuICB2YXIgdmFsdWUgPSB0aGlzLmNvbnRlbnRzIHx8ICcnO1xuICByZXR1cm4gYnVmZmVyKHZhbHVlKSA/IHZhbHVlLnRvU3RyaW5nKGVuY29kaW5nKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbi8qIEFzc2VydCB0aGF0IGBwYXJ0YCBpcyBub3QgYSBwYXRoIChpLmUuLCBkb2VzXG4gKiBub3QgY29udGFpbiBgcGF0aC5zZXBgKS4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnQocGFydCwgbmFtZSkge1xuICBpZiAocGFydC5pbmRleE9mKHBhdGguc2VwKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2AnICsgbmFtZSArICdgIGNhbm5vdCBiZSBhIHBhdGg6IGRpZCBub3QgZXhwZWN0IGAnICsgcGF0aC5zZXAgKyAnYCcpO1xuICB9XG59XG5cbi8qIEFzc2VydCB0aGF0IGBwYXJ0YCBpcyBub3QgZW1wdHkuICovXG5mdW5jdGlvbiBhc3NlcnROb25FbXB0eShwYXJ0LCBuYW1lKSB7XG4gIGlmICghcGFydCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYCcgKyBuYW1lICsgJ2AgY2Fubm90IGJlIGVtcHR5Jyk7XG4gIH1cbn1cblxuLyogQXNzZXJ0IGBwYXRoYCBleGlzdHMuICovXG5mdW5jdGlvbiBhc3NlcnRQYXRoKHBhdGgsIG5hbWUpIHtcbiAgaWYgKCFwYXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXR0aW5nIGAnICsgbmFtZSArICdgIHJlcXVpcmVzIGBwYXRoYCB0byBiZSBzZXQgdG9vJyk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmZ1bmN0aW9uIHJlcGxhY2VFeHQobnBhdGgsIGV4dCkge1xuICBpZiAodHlwZW9mIG5wYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBucGF0aDtcbiAgfVxuXG4gIGlmIChucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnBhdGg7XG4gIH1cblxuICB2YXIgbkZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShucGF0aCwgcGF0aC5leHRuYW1lKG5wYXRoKSkgKyBleHQ7XG4gIHJldHVybiBwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKG5wYXRoKSwgbkZpbGVOYW1lKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXBsYWNlRXh0O1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHdyYXAgPSByZXF1aXJlKCcuL3dyYXAuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyb3VnaFxuXG50cm91Z2gud3JhcCA9IHdyYXBcblxudmFyIHNsaWNlID0gW10uc2xpY2VcblxuLy8gQ3JlYXRlIG5ldyBtaWRkbGV3YXJlLlxuZnVuY3Rpb24gdHJvdWdoKCkge1xuICB2YXIgZm5zID0gW11cbiAgdmFyIG1pZGRsZXdhcmUgPSB7fVxuXG4gIG1pZGRsZXdhcmUucnVuID0gcnVuXG4gIG1pZGRsZXdhcmUudXNlID0gdXNlXG5cbiAgcmV0dXJuIG1pZGRsZXdhcmVcblxuICAvLyBSdW4gYGZuc2AuICBMYXN0IGFyZ3VtZW50IG11c3QgYmUgYSBjb21wbGV0aW9uIGhhbmRsZXIuXG4gIGZ1bmN0aW9uIHJ1bigpIHtcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBpbnB1dCA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCAtMSlcbiAgICB2YXIgZG9uZSA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV1cblxuICAgIGlmICh0eXBlb2YgZG9uZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbiBhcyBsYXN0IGFyZ3VtZW50LCBub3QgJyArIGRvbmUpXG4gICAgfVxuXG4gICAgbmV4dC5hcHBseShudWxsLCBbbnVsbF0uY29uY2F0KGlucHV0KSlcblxuICAgIC8vIFJ1biB0aGUgbmV4dCBgZm5gLCBpZiBhbnkuXG4gICAgZnVuY3Rpb24gbmV4dChlcnIpIHtcbiAgICAgIHZhciBmbiA9IGZuc1srK2luZGV4XVxuICAgICAgdmFyIHBhcmFtcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgICAgdmFyIHZhbHVlcyA9IHBhcmFtcy5zbGljZSgxKVxuICAgICAgdmFyIGxlbmd0aCA9IGlucHV0Lmxlbmd0aFxuICAgICAgdmFyIHBvcyA9IC0xXG5cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZG9uZShlcnIpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IG5vbi1udWxseSBpbnB1dCBpbnRvIHZhbHVlcy5cbiAgICAgIHdoaWxlICgrK3BvcyA8IGxlbmd0aCkge1xuICAgICAgICBpZiAodmFsdWVzW3Bvc10gPT09IG51bGwgfHwgdmFsdWVzW3Bvc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhbHVlc1twb3NdID0gaW5wdXRbcG9zXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlucHV0ID0gdmFsdWVzXG5cbiAgICAgIC8vIE5leHQgb3IgZG9uZS5cbiAgICAgIGlmIChmbikge1xuICAgICAgICB3cmFwKGZuLCBuZXh0KS5hcHBseShudWxsLCBpbnB1dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUuYXBwbHkobnVsbCwgW251bGxdLmNvbmNhdChpbnB1dCkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGBmbmAgdG8gdGhlIGxpc3QuXG4gIGZ1bmN0aW9uIHVzZShmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYGZuYCB0byBiZSBhIGZ1bmN0aW9uLCBub3QgJyArIGZuKVxuICAgIH1cblxuICAgIGZucy5wdXNoKGZuKVxuXG4gICAgcmV0dXJuIG1pZGRsZXdhcmVcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlXG5cbm1vZHVsZS5leHBvcnRzID0gd3JhcFxuXG4vLyBXcmFwIGBmbmAuXG4vLyBDYW4gYmUgc3luYyBvciBhc3luYzsgcmV0dXJuIGEgcHJvbWlzZSwgcmVjZWl2ZSBhIGNvbXBsZXRpb24gaGFuZGxlciwgcmV0dXJuXG4vLyBuZXcgdmFsdWVzIGFuZCBlcnJvcnMuXG5mdW5jdGlvbiB3cmFwKGZuLCBjYWxsYmFjaykge1xuICB2YXIgaW52b2tlZFxuXG4gIHJldHVybiB3cmFwcGVkXG5cbiAgZnVuY3Rpb24gd3JhcHBlZCgpIHtcbiAgICB2YXIgcGFyYW1zID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgdmFyIGNhbGxiYWNrID0gZm4ubGVuZ3RoID4gcGFyYW1zLmxlbmd0aFxuICAgIHZhciByZXN1bHRcblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgcGFyYW1zLnB1c2goZG9uZSlcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZm4uYXBwbHkobnVsbCwgcGFyYW1zKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBXZWxsLCB0aGlzIGlzIHF1aXRlIHRoZSBwaWNrbGUuXG4gICAgICAvLyBgZm5gIHJlY2VpdmVkIGEgY2FsbGJhY2sgYW5kIGludm9rZWQgaXQgKHRodXMgY29udGludWluZyB0aGUgcGlwZWxpbmUpLFxuICAgICAgLy8gYnV0IGxhdGVyIGFsc28gdGhyZXcgYW4gZXJyb3IuXG4gICAgICAvLyBXZeKAmXJlIG5vdCBhYm91dCB0byByZXN0YXJ0IHRoZSBwaXBlbGluZSBhZ2Fpbiwgc28gdGhlIG9ubHkgdGhpbmcgbGVmdFxuICAgICAgLy8gdG8gZG8gaXMgdG8gdGhyb3cgdGhlIHRoaW5nIGluc3RlYWQuXG4gICAgICBpZiAoY2FsbGJhY2sgJiYgaW52b2tlZCkge1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZG9uZShlcnJvcilcbiAgICB9XG5cbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXN1bHQudGhlbih0aGVuLCBkb25lKVxuICAgICAgfSBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBkb25lKHJlc3VsdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoZW4ocmVzdWx0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEludm9rZSBgbmV4dGAsIG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICBpZiAoIWludm9rZWQpIHtcbiAgICAgIGludm9rZWQgPSB0cnVlXG5cbiAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cblxuICAvLyBJbnZva2UgYGRvbmVgIHdpdGggb25lIHZhbHVlLlxuICAvLyBUcmFja3MgaWYgYW4gZXJyb3IgaXMgcGFzc2VkLCB0b28uXG4gIGZ1bmN0aW9uIHRoZW4odmFsdWUpIHtcbiAgICBkb25lKG51bGwsIHZhbHVlKVxuICB9XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmdcblxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIlxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeCkge1xuXHR2YXIgcHJvdG90eXBlO1xuXHRyZXR1cm4gdG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgKHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSwgcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdW5oZXJpdCA9IHJlcXVpcmUoJ3VuaGVyaXQnKTtcbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG52YXIgUGFyc2VyID0gcmVxdWlyZSgnLi9saWIvcGFyc2VyLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5wYXJzZS5QYXJzZXIgPSBQYXJzZXI7XG5cbmZ1bmN0aW9uIHBhcnNlKG9wdGlvbnMpIHtcbiAgdmFyIExvY2FsID0gdW5oZXJpdChQYXJzZXIpO1xuICBMb2NhbC5wcm90b3R5cGUub3B0aW9ucyA9IHh0ZW5kKExvY2FsLnByb3RvdHlwZS5vcHRpb25zLCB0aGlzLmRhdGEoJ3NldHRpbmdzJyksIG9wdGlvbnMpO1xuICB0aGlzLlBhcnNlciA9IExvY2FsO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxubW9kdWxlLmV4cG9ydHMgPSB1bmhlcml0XG5cbi8vIENyZWF0ZSBhIGN1c3RvbSBjb25zdHJ1Y3RvciB3aGljaCBjYW4gYmUgbW9kaWZpZWQgd2l0aG91dCBhZmZlY3RpbmcgdGhlXG4vLyBvcmlnaW5hbCBjbGFzcy5cbmZ1bmN0aW9uIHVuaGVyaXQoU3VwZXIpIHtcbiAgdmFyIHJlc3VsdFxuICB2YXIga2V5XG4gIHZhciB2YWx1ZVxuXG4gIGluaGVyaXRzKE9mLCBTdXBlcilcbiAgaW5oZXJpdHMoRnJvbSwgT2YpXG5cbiAgLy8gQ2xvbmUgdmFsdWVzLlxuICByZXN1bHQgPSBPZi5wcm90b3R5cGVcblxuICBmb3IgKGtleSBpbiByZXN1bHQpIHtcbiAgICB2YWx1ZSA9IHJlc3VsdFtrZXldXG5cbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSAnY29uY2F0JyBpbiB2YWx1ZSA/IHZhbHVlLmNvbmNhdCgpIDogeHRlbmQodmFsdWUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE9mXG5cbiAgLy8gQ29uc3RydWN0b3IgYWNjZXB0aW5nIGEgc2luZ2xlIGFyZ3VtZW50LCB3aGljaCBpdHNlbGYgaXMgYW4gYGFyZ3VtZW50c2BcbiAgLy8gb2JqZWN0LlxuICBmdW5jdGlvbiBGcm9tKHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gU3VwZXIuYXBwbHkodGhpcywgcGFyYW1ldGVycylcbiAgfVxuXG4gIC8vIENvbnN0cnVjdG9yIGFjY2VwdGluZyB2YXJpYWRpYyBhcmd1bWVudHMuXG4gIGZ1bmN0aW9uIE9mKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPZikpIHtcbiAgICAgIHJldHVybiBuZXcgRnJvbShhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIHRvZ2dsZSA9IHJlcXVpcmUoJ3N0YXRlLXRvZ2dsZScpO1xudmFyIHZmaWxlTG9jYXRpb24gPSByZXF1aXJlKCd2ZmlsZS1sb2NhdGlvbicpO1xudmFyIHVuZXNjYXBlID0gcmVxdWlyZSgnLi91bmVzY2FwZScpO1xudmFyIGRlY29kZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG52YXIgdG9rZW5pemVyID0gcmVxdWlyZSgnLi90b2tlbml6ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXI7XG5cbmZ1bmN0aW9uIFBhcnNlcihkb2MsIGZpbGUpIHtcbiAgdGhpcy5maWxlID0gZmlsZTtcbiAgdGhpcy5vZmZzZXQgPSB7fTtcbiAgdGhpcy5vcHRpb25zID0geHRlbmQodGhpcy5vcHRpb25zKTtcbiAgdGhpcy5zZXRPcHRpb25zKHt9KTtcblxuICB0aGlzLmluTGlzdCA9IGZhbHNlO1xuICB0aGlzLmluQmxvY2sgPSBmYWxzZTtcbiAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgdGhpcy5hdFN0YXJ0ID0gdHJ1ZTtcblxuICB0aGlzLnRvT2Zmc2V0ID0gdmZpbGVMb2NhdGlvbihmaWxlKS50b09mZnNldDtcbiAgdGhpcy51bmVzY2FwZSA9IHVuZXNjYXBlKHRoaXMsICdlc2NhcGUnKTtcbiAgdGhpcy5kZWNvZGUgPSBkZWNvZGUodGhpcyk7XG59XG5cbnZhciBwcm90byA9IFBhcnNlci5wcm90b3R5cGU7XG5cbi8qIEV4cG9zZSBjb3JlLiAqL1xucHJvdG8uc2V0T3B0aW9ucyA9IHJlcXVpcmUoJy4vc2V0LW9wdGlvbnMnKTtcbnByb3RvLnBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xuXG4vKiBFeHBvc2UgYGRlZmF1bHRzYC4gKi9cbnByb3RvLm9wdGlvbnMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qIEVudGVyIGFuZCBleGl0IGhlbHBlcnMuICovXG5wcm90by5leGl0U3RhcnQgPSB0b2dnbGUoJ2F0U3RhcnQnLCB0cnVlKTtcbnByb3RvLmVudGVyTGlzdCA9IHRvZ2dsZSgnaW5MaXN0JywgZmFsc2UpO1xucHJvdG8uZW50ZXJMaW5rID0gdG9nZ2xlKCdpbkxpbmsnLCBmYWxzZSk7XG5wcm90by5lbnRlckJsb2NrID0gdG9nZ2xlKCdpbkJsb2NrJywgZmFsc2UpO1xuXG4vKiBOb2RlcyB0aGF0IGNhbiBpbnRlcnVwdCBhIHBhcmFncmFwaDpcbiAqXG4gKiBgYGBtYXJrZG93blxuICogQSBwYXJhZ3JhcGgsIGZvbGxvd2VkIGJ5IGEgdGhlbWF0aWMgYnJlYWsuXG4gKiBfX19cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgdGhlbWF0aWMgYnJlYWsg4oCcaW50ZXJ1cHRz4oCdXG4gKiB0aGUgcGFyYWdyYXBoLiAqL1xucHJvdG8uaW50ZXJydXB0UGFyYWdyYXBoID0gW1xuICBbJ3RoZW1hdGljQnJlYWsnXSxcbiAgWydhdHhIZWFkaW5nJ10sXG4gIFsnZmVuY2VkQ29kZSddLFxuICBbJ2Jsb2NrcXVvdGUnXSxcbiAgWydodG1sJ10sXG4gIFsnc2V0ZXh0SGVhZGluZycsIHtjb21tb25tYXJrOiBmYWxzZX1dLFxuICBbJ2RlZmluaXRpb24nLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydmb290bm90ZScsIHtjb21tb25tYXJrOiBmYWxzZX1dXG5dO1xuXG4vKiBOb2RlcyB0aGF0IGNhbiBpbnRlcnVwdCBhIGxpc3Q6XG4gKlxuICogYGBgbWFya2Rvd25cbiAqIC0gT25lXG4gKiBfX19cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgdGhlbWF0aWMgYnJlYWsg4oCcaW50ZXJ1cHRz4oCdXG4gKiB0aGUgbGlzdC4gKi9cbnByb3RvLmludGVycnVwdExpc3QgPSBbXG4gIFsnYXR4SGVhZGluZycsIHtwZWRhbnRpYzogZmFsc2V9XSxcbiAgWydmZW5jZWRDb2RlJywge3BlZGFudGljOiBmYWxzZX1dLFxuICBbJ3RoZW1hdGljQnJlYWsnLCB7cGVkYW50aWM6IGZhbHNlfV0sXG4gIFsnZGVmaW5pdGlvbicsIHtjb21tb25tYXJrOiBmYWxzZX1dLFxuICBbJ2Zvb3Rub3RlJywge2NvbW1vbm1hcms6IGZhbHNlfV1cbl07XG5cbi8qIE5vZGVzIHRoYXQgY2FuIGludGVydXB0IGEgYmxvY2txdW90ZTpcbiAqXG4gKiBgYGBtYXJrZG93blxuICogPiBBIHBhcmFncmFwaC5cbiAqIF9fX1xuICogYGBgXG4gKlxuICogSW4gdGhlIGFib3ZlIGV4YW1wbGUsIHRoZSB0aGVtYXRpYyBicmVhayDigJxpbnRlcnVwdHPigJ1cbiAqIHRoZSBibG9ja3F1b3RlLiAqL1xucHJvdG8uaW50ZXJydXB0QmxvY2txdW90ZSA9IFtcbiAgWydpbmRlbnRlZENvZGUnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2ZlbmNlZENvZGUnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2F0eEhlYWRpbmcnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ3NldGV4dEhlYWRpbmcnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ3RoZW1hdGljQnJlYWsnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2h0bWwnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2xpc3QnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2RlZmluaXRpb24nLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydmb290bm90ZScsIHtjb21tb25tYXJrOiBmYWxzZX1dXG5dO1xuXG4vKiBIYW5kbGVycy4gKi9cbnByb3RvLmJsb2NrVG9rZW5pemVycyA9IHtcbiAgbmV3bGluZTogcmVxdWlyZSgnLi90b2tlbml6ZS9uZXdsaW5lJyksXG4gIGluZGVudGVkQ29kZTogcmVxdWlyZSgnLi90b2tlbml6ZS9jb2RlLWluZGVudGVkJyksXG4gIGZlbmNlZENvZGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvY29kZS1mZW5jZWQnKSxcbiAgYmxvY2txdW90ZTogcmVxdWlyZSgnLi90b2tlbml6ZS9ibG9ja3F1b3RlJyksXG4gIGF0eEhlYWRpbmc6IHJlcXVpcmUoJy4vdG9rZW5pemUvaGVhZGluZy1hdHgnKSxcbiAgdGhlbWF0aWNCcmVhazogcmVxdWlyZSgnLi90b2tlbml6ZS90aGVtYXRpYy1icmVhaycpLFxuICBsaXN0OiByZXF1aXJlKCcuL3Rva2VuaXplL2xpc3QnKSxcbiAgc2V0ZXh0SGVhZGluZzogcmVxdWlyZSgnLi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dCcpLFxuICBodG1sOiByZXF1aXJlKCcuL3Rva2VuaXplL2h0bWwtYmxvY2snKSxcbiAgZm9vdG5vdGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvZm9vdG5vdGUtZGVmaW5pdGlvbicpLFxuICBkZWZpbml0aW9uOiByZXF1aXJlKCcuL3Rva2VuaXplL2RlZmluaXRpb24nKSxcbiAgdGFibGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvdGFibGUnKSxcbiAgcGFyYWdyYXBoOiByZXF1aXJlKCcuL3Rva2VuaXplL3BhcmFncmFwaCcpXG59O1xuXG5wcm90by5pbmxpbmVUb2tlbml6ZXJzID0ge1xuICBlc2NhcGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvZXNjYXBlJyksXG4gIGF1dG9MaW5rOiByZXF1aXJlKCcuL3Rva2VuaXplL2F1dG8tbGluaycpLFxuICB1cmw6IHJlcXVpcmUoJy4vdG9rZW5pemUvdXJsJyksXG4gIGh0bWw6IHJlcXVpcmUoJy4vdG9rZW5pemUvaHRtbC1pbmxpbmUnKSxcbiAgbGluazogcmVxdWlyZSgnLi90b2tlbml6ZS9saW5rJyksXG4gIHJlZmVyZW5jZTogcmVxdWlyZSgnLi90b2tlbml6ZS9yZWZlcmVuY2UnKSxcbiAgc3Ryb25nOiByZXF1aXJlKCcuL3Rva2VuaXplL3N0cm9uZycpLFxuICBlbXBoYXNpczogcmVxdWlyZSgnLi90b2tlbml6ZS9lbXBoYXNpcycpLFxuICBkZWxldGlvbjogcmVxdWlyZSgnLi90b2tlbml6ZS9kZWxldGUnKSxcbiAgY29kZTogcmVxdWlyZSgnLi90b2tlbml6ZS9jb2RlLWlubGluZScpLFxuICBicmVhazogcmVxdWlyZSgnLi90b2tlbml6ZS9icmVhaycpLFxuICB0ZXh0OiByZXF1aXJlKCcuL3Rva2VuaXplL3RleHQnKVxufTtcblxuLyogRXhwb3NlIHByZWNlZGVuY2UuICovXG5wcm90by5ibG9ja01ldGhvZHMgPSBrZXlzKHByb3RvLmJsb2NrVG9rZW5pemVycyk7XG5wcm90by5pbmxpbmVNZXRob2RzID0ga2V5cyhwcm90by5pbmxpbmVUb2tlbml6ZXJzKTtcblxuLyogVG9rZW5pemVycy4gKi9cbnByb3RvLnRva2VuaXplQmxvY2sgPSB0b2tlbml6ZXIoJ2Jsb2NrJyk7XG5wcm90by50b2tlbml6ZUlubGluZSA9IHRva2VuaXplcignaW5saW5lJyk7XG5wcm90by50b2tlbml6ZUZhY3RvcnkgPSB0b2tlbml6ZXI7XG5cbi8qIEdldCBhbGwga2V5cyBpbiBgdmFsdWVgLiAqL1xuZnVuY3Rpb24ga2V5cyh2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG5cbiAgZm9yIChrZXkgaW4gdmFsdWUpIHtcbiAgICByZXN1bHQucHVzaChrZXkpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnlcblxuLy8gQ29uc3RydWN0IGEgc3RhdGUgYHRvZ2dsZXJgOiBhIGZ1bmN0aW9uIHdoaWNoIGludmVyc2VzIGBwcm9wZXJ0eWAgaW4gY29udGV4dFxuLy8gYmFzZWQgb24gaXRzIGN1cnJlbnQgdmFsdWUuXG4vLyBUaGUgYnkgYHRvZ2dsZXJgIHJldHVybmVkIGZ1bmN0aW9uIHJlc3RvcmVzIHRoYXQgdmFsdWUuXG5mdW5jdGlvbiBmYWN0b3J5KGtleSwgc3RhdGUsIGN0eCkge1xuICByZXR1cm4gZW50ZXJcblxuICBmdW5jdGlvbiBlbnRlcigpIHtcbiAgICB2YXIgY29udGV4dCA9IGN0eCB8fCB0aGlzXG4gICAgdmFyIGN1cnJlbnQgPSBjb250ZXh0W2tleV1cblxuICAgIGNvbnRleHRba2V5XSA9ICFzdGF0ZVxuXG4gICAgcmV0dXJuIGV4aXRcblxuICAgIGZ1bmN0aW9uIGV4aXQoKSB7XG4gICAgICBjb250ZXh0W2tleV0gPSBjdXJyZW50XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG5cbmZ1bmN0aW9uIGZhY3RvcnkoZmlsZSkge1xuICB2YXIgY29udGVudHMgPSBpbmRpY2VzKFN0cmluZyhmaWxlKSlcblxuICByZXR1cm4ge1xuICAgIHRvUG9zaXRpb246IG9mZnNldFRvUG9zaXRpb25GYWN0b3J5KGNvbnRlbnRzKSxcbiAgICB0b09mZnNldDogcG9zaXRpb25Ub09mZnNldEZhY3RvcnkoY29udGVudHMpXG4gIH1cbn1cblxuLy8gRmFjdG9yeSB0byBnZXQgdGhlIGxpbmUgYW5kIGNvbHVtbi1iYXNlZCBgcG9zaXRpb25gIGZvciBgb2Zmc2V0YCBpbiB0aGUgYm91bmRcbi8vIGluZGljZXMuXG5mdW5jdGlvbiBvZmZzZXRUb1Bvc2l0aW9uRmFjdG9yeShpbmRpY2VzKSB7XG4gIHJldHVybiBvZmZzZXRUb1Bvc2l0aW9uXG5cbiAgLy8gR2V0IHRoZSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBmb3IgYG9mZnNldGAgaW4gdGhlIGJvdW5kIGluZGljZXMuXG4gIGZ1bmN0aW9uIG9mZnNldFRvUG9zaXRpb24ob2Zmc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgbGVuZ3RoID0gaW5kaWNlcy5sZW5ndGhcblxuICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGluZGljZXNbaW5kZXhdID4gb2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGluZTogaW5kZXggKyAxLFxuICAgICAgICAgIGNvbHVtbjogb2Zmc2V0IC0gKGluZGljZXNbaW5kZXggLSAxXSB8fCAwKSArIDEsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7fVxuICB9XG59XG5cbi8vIEZhY3RvcnkgdG8gZ2V0IHRoZSBgb2Zmc2V0YCBmb3IgYSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBpbiB0aGVcbi8vIGJvdW5kIGluZGljZXMuXG5mdW5jdGlvbiBwb3NpdGlvblRvT2Zmc2V0RmFjdG9yeShpbmRpY2VzKSB7XG4gIHJldHVybiBwb3NpdGlvblRvT2Zmc2V0XG5cbiAgLy8gR2V0IHRoZSBgb2Zmc2V0YCBmb3IgYSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBpbiB0aGUgYm91bmRcbiAgLy8gaW5kaWNlcy5cbiAgZnVuY3Rpb24gcG9zaXRpb25Ub09mZnNldChwb3NpdGlvbikge1xuICAgIHZhciBsaW5lID0gcG9zaXRpb24gJiYgcG9zaXRpb24ubGluZVxuICAgIHZhciBjb2x1bW4gPSBwb3NpdGlvbiAmJiBwb3NpdGlvbi5jb2x1bW5cblxuICAgIGlmICghaXNOYU4obGluZSkgJiYgIWlzTmFOKGNvbHVtbikgJiYgbGluZSAtIDEgaW4gaW5kaWNlcykge1xuICAgICAgcmV0dXJuIChpbmRpY2VzW2xpbmUgLSAyXSB8fCAwKSArIGNvbHVtbiAtIDEgfHwgMFxuICAgIH1cblxuICAgIHJldHVybiAtMVxuICB9XG59XG5cbi8vIEdldCBpbmRpY2VzIG9mIGxpbmUtYnJlYWtzIGluIGB2YWx1ZWAuXG5mdW5jdGlvbiBpbmRpY2VzKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBbXVxuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nKVxuXG4gIHdoaWxlIChpbmRleCAhPT0gLTEpIHtcbiAgICByZXN1bHQucHVzaChpbmRleCArIDEpXG4gICAgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nLCBpbmRleCArIDEpXG4gIH1cblxuICByZXN1bHQucHVzaCh2YWx1ZS5sZW5ndGggKyAxKVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuXG4vKiBGYWN0b3J5IHRvIGRlLWVzY2FwZSBhIHZhbHVlLCBiYXNlZCBvbiBhIGxpc3QgYXQgYGtleWBcbiAqIGluIGBjdHhgLiAqL1xuZnVuY3Rpb24gZmFjdG9yeShjdHgsIGtleSkge1xuICByZXR1cm4gdW5lc2NhcGU7XG5cbiAgLyogRGUtZXNjYXBlIGEgc3RyaW5nIHVzaW5nIHRoZSBleHByZXNzaW9uIGF0IGBrZXlgXG4gICAqIGluIGBjdHhgLiAqL1xuICBmdW5jdGlvbiB1bmVzY2FwZSh2YWx1ZSkge1xuICAgIHZhciBwcmV2ID0gMDtcbiAgICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXFxcJyk7XG4gICAgdmFyIGVzY2FwZSA9IGN0eFtrZXldO1xuICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgIHZhciBjaGFyYWN0ZXI7XG5cbiAgICB3aGlsZSAoaW5kZXggIT09IC0xKSB7XG4gICAgICBxdWV1ZS5wdXNoKHZhbHVlLnNsaWNlKHByZXYsIGluZGV4KSk7XG4gICAgICBwcmV2ID0gaW5kZXggKyAxO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KHByZXYpO1xuXG4gICAgICAvKiBJZiB0aGUgZm9sbG93aW5nIGNoYXJhY3RlciBpcyBub3QgYSB2YWxpZCBlc2NhcGUsXG4gICAgICAgKiBhZGQgdGhlIHNsYXNoLiAqL1xuICAgICAgaWYgKCFjaGFyYWN0ZXIgfHwgZXNjYXBlLmluZGV4T2YoY2hhcmFjdGVyKSA9PT0gLTEpIHtcbiAgICAgICAgcXVldWUucHVzaCgnXFxcXCcpO1xuICAgICAgfVxuXG4gICAgICBpbmRleCA9IHZhbHVlLmluZGV4T2YoJ1xcXFwnLCBwcmV2KTtcbiAgICB9XG5cbiAgICBxdWV1ZS5wdXNoKHZhbHVlLnNsaWNlKHByZXYpKTtcblxuICAgIHJldHVybiBxdWV1ZS5qb2luKCcnKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIGVudGl0aWVzID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuXG4vKiBGYWN0b3J5IHRvIGNyZWF0ZSBhbiBlbnRpdHkgZGVjb2Rlci4gKi9cbmZ1bmN0aW9uIGZhY3RvcnkoY3R4KSB7XG4gIGRlY29kZXIucmF3ID0gZGVjb2RlUmF3O1xuXG4gIHJldHVybiBkZWNvZGVyO1xuXG4gIC8qIE5vcm1hbGl6ZSBgcG9zaXRpb25gIHRvIGFkZCBhbiBgaW5kZW50YC4gKi9cbiAgZnVuY3Rpb24gbm9ybWFsaXplKHBvc2l0aW9uKSB7XG4gICAgdmFyIG9mZnNldHMgPSBjdHgub2Zmc2V0O1xuICAgIHZhciBsaW5lID0gcG9zaXRpb24ubGluZTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytsaW5lKSB7XG4gICAgICBpZiAoIShsaW5lIGluIG9mZnNldHMpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQucHVzaCgob2Zmc2V0c1tsaW5lXSB8fCAwKSArIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogcG9zaXRpb24sXG4gICAgICBpbmRlbnQ6IHJlc3VsdFxuICAgIH07XG4gIH1cblxuICAvKiBIYW5kbGUgYSB3YXJuaW5nLlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3dvb29ybS9wYXJzZS1lbnRpdGllc1xuICAgKiBmb3IgdGhlIHdhcm5pbmdzLiAqL1xuICBmdW5jdGlvbiBoYW5kbGVXYXJuaW5nKHJlYXNvbiwgcG9zaXRpb24sIGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN0eC5maWxlLm1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbik7XG4gIH1cblxuICAvKiBEZWNvZGUgYHZhbHVlYCAoYXQgYHBvc2l0aW9uYCkgaW50byB0ZXh0LW5vZGVzLiAqL1xuICBmdW5jdGlvbiBkZWNvZGVyKHZhbHVlLCBwb3NpdGlvbiwgaGFuZGxlcikge1xuICAgIGVudGl0aWVzKHZhbHVlLCB7XG4gICAgICBwb3NpdGlvbjogbm9ybWFsaXplKHBvc2l0aW9uKSxcbiAgICAgIHdhcm5pbmc6IGhhbmRsZVdhcm5pbmcsXG4gICAgICB0ZXh0OiBoYW5kbGVyLFxuICAgICAgcmVmZXJlbmNlOiBoYW5kbGVyLFxuICAgICAgdGV4dENvbnRleHQ6IGN0eCxcbiAgICAgIHJlZmVyZW5jZUNvbnRleHQ6IGN0eFxuICAgIH0pO1xuICB9XG5cbiAgLyogRGVjb2RlIGB2YWx1ZWAgKGF0IGBwb3NpdGlvbmApIGludG8gYSBzdHJpbmcuICovXG4gIGZ1bmN0aW9uIGRlY29kZVJhdyh2YWx1ZSwgcG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZW50aXRpZXModmFsdWUsIHh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgIHBvc2l0aW9uOiBub3JtYWxpemUocG9zaXRpb24pLFxuICAgICAgd2FybmluZzogaGFuZGxlV2FybmluZ1xuICAgIH0pKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gaGV4YWRlY2ltYWxcblxuLy8gQ2hlY2sgaWYgdGhlIGdpdmVuIGNoYXJhY3RlciBjb2RlLCBvciB0aGUgY2hhcmFjdGVyIGNvZGUgYXQgdGhlIGZpcnN0XG4vLyBjaGFyYWN0ZXIsIGlzIGhleGFkZWNpbWFsLlxuZnVuY3Rpb24gaGV4YWRlY2ltYWwoY2hhcmFjdGVyKSB7XG4gIHZhciBjb2RlID0gdHlwZW9mIGNoYXJhY3RlciA9PT0gJ3N0cmluZycgPyBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSA6IGNoYXJhY3RlclxuXG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gOTcgLyogYSAqLyAmJiBjb2RlIDw9IDEwMikgLyogeiAqLyB8fFxuICAgIChjb2RlID49IDY1IC8qIEEgKi8gJiYgY29kZSA8PSA3MCkgLyogWiAqLyB8fFxuICAgIChjb2RlID49IDQ4IC8qIEEgKi8gJiYgY29kZSA8PSA1NykgLyogWiAqL1xuICApXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIGFscGhhYmV0aWNhbCA9IHJlcXVpcmUoJ2lzLWFscGhhYmV0aWNhbCcpXG52YXIgZGVjaW1hbCA9IHJlcXVpcmUoJ2lzLWRlY2ltYWwnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFscGhhbnVtZXJpY2FsXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhbHBoYW51bWVyaWNhbC5cbmZ1bmN0aW9uIGFscGhhbnVtZXJpY2FsKGNoYXJhY3Rlcikge1xuICByZXR1cm4gYWxwaGFiZXRpY2FsKGNoYXJhY3RlcikgfHwgZGVjaW1hbChjaGFyYWN0ZXIpXG59XG4iLCIndXNlIHN0cmljdCdcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbnZhciBlbFxuXG52YXIgc2VtaWNvbG9uID0gNTkgLy8gICc7J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZUVudGl0eVxuXG5mdW5jdGlvbiBkZWNvZGVFbnRpdHkoY2hhcmFjdGVycykge1xuICB2YXIgZW50aXR5ID0gJyYnICsgY2hhcmFjdGVycyArICc7J1xuICB2YXIgY2hhclxuXG4gIGVsID0gZWwgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpXG4gIGVsLmlubmVySFRNTCA9IGVudGl0eVxuICBjaGFyID0gZWwudGV4dENvbnRlbnRcblxuICAvLyBTb21lIGVudGl0aWVzIGRvIG5vdCByZXF1aXJlIHRoZSBjbG9zaW5nIHNlbWljb2xvbiAoYCZub3RgIC0gZm9yIGluc3RhbmNlKSxcbiAgLy8gd2hpY2ggbGVhZHMgdG8gc2l0dWF0aW9ucyB3aGVyZSBwYXJzaW5nIHRoZSBhc3N1bWVkIGVudGl0eSBvZiAmbm90aXQ7IHdpbGxcbiAgLy8gcmVzdWx0IGluIHRoZSBzdHJpbmcgYMKsaXQ7YC4gIFdoZW4gd2UgZW5jb3VudGVyIGEgdHJhaWxpbmcgc2VtaWNvbG9uIGFmdGVyXG4gIC8vIHBhcnNpbmcgYW5kIHRoZSBlbnRpdHkgdG8gZGVjb2RlIHdhcyBub3QgYSBzZW1pY29sb24gKGAmc2VtaTtgKSwgd2UgY2FuXG4gIC8vIGFzc3VtZSB0aGF0IHRoZSBtYXRjaGluZyB3YXMgaW5jb21wbGV0ZVxuICBpZiAoY2hhci5jaGFyQ29kZUF0KGNoYXIubGVuZ3RoIC0gMSkgPT09IHNlbWljb2xvbiAmJiBjaGFyYWN0ZXJzICE9PSAnc2VtaScpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIElmIHRoZSBkZWNvZGVkIHN0cmluZyBpcyBlcXVhbCB0byB0aGUgaW5wdXQsIHRoZSBlbnRpdHkgd2FzIG5vdCB2YWxpZFxuICByZXR1cm4gY2hhciA9PT0gZW50aXR5ID8gZmFsc2UgOiBjaGFyXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcblxudmFyIE1FUkdFQUJMRV9OT0RFUyA9IHtcbiAgdGV4dDogbWVyZ2VUZXh0LFxuICBibG9ja3F1b3RlOiBtZXJnZUJsb2NrcXVvdGVcbn07XG5cbi8qIENoZWNrIHdoZXRoZXIgYSBub2RlIGlzIG1lcmdlYWJsZSB3aXRoIGFkamFjZW50IG5vZGVzLiAqL1xuZnVuY3Rpb24gbWVyZ2VhYmxlKG5vZGUpIHtcbiAgdmFyIHN0YXJ0O1xuICB2YXIgZW5kO1xuXG4gIGlmIChub2RlLnR5cGUgIT09ICd0ZXh0JyB8fCAhbm9kZS5wb3NpdGlvbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3RhcnQgPSBub2RlLnBvc2l0aW9uLnN0YXJ0O1xuICBlbmQgPSBub2RlLnBvc2l0aW9uLmVuZDtcblxuICAvKiBPbmx5IG1lcmdlIG5vZGVzIHdoaWNoIG9jY3VweSB0aGUgc2FtZSBzaXplIGFzIHRoZWlyXG4gICAqIGB2YWx1ZWAuICovXG4gIHJldHVybiBzdGFydC5saW5lICE9PSBlbmQubGluZSB8fFxuICAgICAgZW5kLmNvbHVtbiAtIHN0YXJ0LmNvbHVtbiA9PT0gbm9kZS52YWx1ZS5sZW5ndGg7XG59XG5cbi8qIE1lcmdlIHR3byB0ZXh0IG5vZGVzOiBgbm9kZWAgaW50byBgcHJldmAuICovXG5mdW5jdGlvbiBtZXJnZVRleHQocHJldiwgbm9kZSkge1xuICBwcmV2LnZhbHVlICs9IG5vZGUudmFsdWU7XG5cbiAgcmV0dXJuIHByZXY7XG59XG5cbi8qIE1lcmdlIHR3byBibG9ja3F1b3RlczogYG5vZGVgIGludG8gYHByZXZgLCB1bmxlc3MgaW5cbiAqIENvbW1vbk1hcmsgbW9kZS4gKi9cbmZ1bmN0aW9uIG1lcmdlQmxvY2txdW90ZShwcmV2LCBub2RlKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuY29tbW9ubWFyaykge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcHJldi5jaGlsZHJlbiA9IHByZXYuY2hpbGRyZW4uY29uY2F0KG5vZGUuY2hpbGRyZW4pO1xuXG4gIHJldHVybiBwcmV2O1xufVxuXG4vKiBDb25zdHJ1Y3QgYSB0b2tlbml6ZXIuICBUaGlzIGNyZWF0ZXMgYm90aFxuICogYHRva2VuaXplSW5saW5lYCBhbmQgYHRva2VuaXplQmxvY2tgLiAqL1xuZnVuY3Rpb24gZmFjdG9yeSh0eXBlKSB7XG4gIHJldHVybiB0b2tlbml6ZTtcblxuICAvKiBUb2tlbml6ZXIgZm9yIGEgYm91bmQgYHR5cGVgLiAqL1xuICBmdW5jdGlvbiB0b2tlbml6ZSh2YWx1ZSwgbG9jYXRpb24pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG9mZnNldCA9IHNlbGYub2Zmc2V0O1xuICAgIHZhciB0b2tlbnMgPSBbXTtcbiAgICB2YXIgbWV0aG9kcyA9IHNlbGZbdHlwZSArICdNZXRob2RzJ107XG4gICAgdmFyIHRva2VuaXplcnMgPSBzZWxmW3R5cGUgKyAnVG9rZW5pemVycyddO1xuICAgIHZhciBsaW5lID0gbG9jYXRpb24ubGluZTtcbiAgICB2YXIgY29sdW1uID0gbG9jYXRpb24uY29sdW1uO1xuICAgIHZhciBpbmRleDtcbiAgICB2YXIgbGVuZ3RoO1xuICAgIHZhciBtZXRob2Q7XG4gICAgdmFyIG5hbWU7XG4gICAgdmFyIG1hdGNoZWQ7XG4gICAgdmFyIHZhbHVlTGVuZ3RoO1xuXG4gICAgLyogVHJpbSB3aGl0ZSBzcGFjZSBvbmx5IGxpbmVzLiAqL1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiB0b2tlbnM7XG4gICAgfVxuXG4gICAgLyogRXhwb3NlIG9uIGBlYXRgLiAqL1xuICAgIGVhdC5ub3cgPSBub3c7XG4gICAgZWF0LmZpbGUgPSBzZWxmLmZpbGU7XG5cbiAgICAvKiBTeW5jIGluaXRpYWwgb2Zmc2V0LiAqL1xuICAgIHVwZGF0ZVBvc2l0aW9uKCcnKTtcblxuICAgIC8qIEl0ZXJhdGUgb3ZlciBgdmFsdWVgLCBhbmQgaXRlcmF0ZSBvdmVyIGFsbFxuICAgICAqIHRva2VuaXplcnMuICBXaGVuIG9uZSBlYXRzIHNvbWV0aGluZywgcmUtaXRlcmF0ZVxuICAgICAqIHdpdGggdGhlIHJlbWFpbmluZyB2YWx1ZS4gIElmIG5vIHRva2VuaXplciBlYXRzLFxuICAgICAqIHNvbWV0aGluZyBmYWlsZWQgKHNob3VsZCBub3QgaGFwcGVuKSBhbmQgYW5cbiAgICAgKiBleGNlcHRpb24gaXMgdGhyb3duLiAqL1xuICAgIHdoaWxlICh2YWx1ZSkge1xuICAgICAgaW5kZXggPSAtMTtcbiAgICAgIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICAgICAgbWF0Y2hlZCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBuYW1lID0gbWV0aG9kc1tpbmRleF07XG4gICAgICAgIG1ldGhvZCA9IHRva2VuaXplcnNbbmFtZV07XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG1ldGhvZCAmJlxuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovICghbWV0aG9kLm9ubHlBdFN0YXJ0IHx8IHNlbGYuYXRTdGFydCkgJiZcbiAgICAgICAgICAoIW1ldGhvZC5ub3RJbkxpc3QgfHwgIXNlbGYuaW5MaXN0KSAmJlxuICAgICAgICAgICghbWV0aG9kLm5vdEluQmxvY2sgfHwgIXNlbGYuaW5CbG9jaykgJiZcbiAgICAgICAgICAoIW1ldGhvZC5ub3RJbkxpbmsgfHwgIXNlbGYuaW5MaW5rKVxuICAgICAgICApIHtcbiAgICAgICAgICB2YWx1ZUxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcblxuICAgICAgICAgIG1ldGhvZC5hcHBseShzZWxmLCBbZWF0LCB2YWx1ZV0pO1xuXG4gICAgICAgICAgbWF0Y2hlZCA9IHZhbHVlTGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFtYXRjaGVkKSB7XG4gICAgICAgIHNlbGYuZmlsZS5mYWlsKG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCcpLCBlYXQubm93KCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYuZW9mID0gbm93KCk7XG5cbiAgICByZXR1cm4gdG9rZW5zO1xuXG4gICAgLyogVXBkYXRlIGxpbmUsIGNvbHVtbiwgYW5kIG9mZnNldCBiYXNlZCBvblxuICAgICAqIGB2YWx1ZWAuICovXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oc3VidmFsdWUpIHtcbiAgICAgIHZhciBsYXN0SW5kZXggPSAtMTtcbiAgICAgIHZhciBpbmRleCA9IHN1YnZhbHVlLmluZGV4T2YoJ1xcbicpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGxpbmUrKztcbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgIGluZGV4ID0gc3VidmFsdWUuaW5kZXhPZignXFxuJywgaW5kZXggKyAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhc3RJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbHVtbiA9IHN1YnZhbHVlLmxlbmd0aCAtIGxhc3RJbmRleDtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpbmUgaW4gb2Zmc2V0KSB7XG4gICAgICAgIGlmIChsYXN0SW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgY29sdW1uICs9IG9mZnNldFtsaW5lXTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2x1bW4gPD0gb2Zmc2V0W2xpbmVdKSB7XG4gICAgICAgICAgY29sdW1uID0gb2Zmc2V0W2xpbmVdICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEdldCBvZmZzZXQuICBDYWxsZWQgYmVmb3JlIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXNcbiAgICAgKiBlYXRlbiB0byByZXRyaWV2ZSB0aGUgcmFuZ2UncyBvZmZzZXRzLiAqL1xuICAgIGZ1bmN0aW9uIGdldE9mZnNldCgpIHtcbiAgICAgIHZhciBpbmRlbnRhdGlvbiA9IFtdO1xuICAgICAgdmFyIHBvcyA9IGxpbmUgKyAxO1xuXG4gICAgICAvKiBEb25lLiAgQ2FsbGVkIHdoZW4gdGhlIGxhc3QgY2hhcmFjdGVyIGlzXG4gICAgICAgKiBlYXRlbiB0byByZXRyaWV2ZSB0aGUgcmFuZ2XigJlzIG9mZnNldHMuICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGFzdCA9IGxpbmUgKyAxO1xuXG4gICAgICAgIHdoaWxlIChwb3MgPCBsYXN0KSB7XG4gICAgICAgICAgaW5kZW50YXRpb24ucHVzaCgob2Zmc2V0W3Bvc10gfHwgMCkgKyAxKTtcblxuICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGVudGF0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKiBHZXQgdGhlIGN1cnJlbnQgcG9zaXRpb24uICovXG4gICAgZnVuY3Rpb24gbm93KCkge1xuICAgICAgdmFyIHBvcyA9IHtsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbn07XG5cbiAgICAgIHBvcy5vZmZzZXQgPSBzZWxmLnRvT2Zmc2V0KHBvcyk7XG5cbiAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuXG4gICAgLyogU3RvcmUgcG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIGEgbm9kZS4gKi9cbiAgICBmdW5jdGlvbiBQb3NpdGlvbihzdGFydCkge1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBub3coKTtcbiAgICB9XG5cbiAgICAvKiBUaHJvdyB3aGVuIGEgdmFsdWUgaXMgaW5jb3JyZWN0bHkgZWF0ZW4uXG4gICAgICogVGhpcyBzaG91bGRu4oCZdCBoYXBwZW4gYnV0IHdpbGwgdGhyb3cgb24gbmV3LFxuICAgICAqIGluY29ycmVjdCBydWxlcy4gKi9cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUVhdChzdWJ2YWx1ZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodmFsdWUuc3Vic3RyaW5nKDAsIHN1YnZhbHVlLmxlbmd0aCkgIT09IHN1YnZhbHVlKSB7XG4gICAgICAgIC8qIENhcHR1cmUgc3RhY2stdHJhY2UuICovXG4gICAgICAgIHNlbGYuZmlsZS5mYWlsKFxuICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICdJbmNvcnJlY3RseSBlYXRlbiB2YWx1ZTogcGxlYXNlIHJlcG9ydCB0aGlzICcgK1xuICAgICAgICAgICAgJ3dhcm5pbmcgb24gaHR0cDovL2dpdC5pby92ZzVGdCdcbiAgICAgICAgICApLFxuICAgICAgICAgIG5vdygpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogTWFyayBwb3NpdGlvbiBhbmQgcGF0Y2ggYG5vZGUucG9zaXRpb25gLiAqL1xuICAgIGZ1bmN0aW9uIHBvc2l0aW9uKCkge1xuICAgICAgdmFyIGJlZm9yZSA9IG5vdygpO1xuXG4gICAgICByZXR1cm4gdXBkYXRlO1xuXG4gICAgICAvKiBBZGQgdGhlIHBvc2l0aW9uIHRvIGEgbm9kZS4gKi9cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZShub2RlLCBpbmRlbnQpIHtcbiAgICAgICAgdmFyIHByZXYgPSBub2RlLnBvc2l0aW9uO1xuICAgICAgICB2YXIgc3RhcnQgPSBwcmV2ID8gcHJldi5zdGFydCA6IGJlZm9yZTtcbiAgICAgICAgdmFyIGNvbWJpbmVkID0gW107XG4gICAgICAgIHZhciBuID0gcHJldiAmJiBwcmV2LmVuZC5saW5lO1xuICAgICAgICB2YXIgbCA9IGJlZm9yZS5saW5lO1xuXG4gICAgICAgIG5vZGUucG9zaXRpb24gPSBuZXcgUG9zaXRpb24oc3RhcnQpO1xuXG4gICAgICAgIC8qIElmIHRoZXJlIHdhcyBhbHJlYWR5IGEgYHBvc2l0aW9uYCwgdGhpc1xuICAgICAgICAgKiBub2RlIHdhcyBtZXJnZWQuICBGaXhpbmcgYHN0YXJ0YCB3YXNu4oCZdFxuICAgICAgICAgKiBoYXJkLCBidXQgdGhlIGluZGVudCBpcyBkaWZmZXJlbnQuXG4gICAgICAgICAqIEVzcGVjaWFsbHkgYmVjYXVzZSBzb21lIGluZm9ybWF0aW9uLCB0aGVcbiAgICAgICAgICogaW5kZW50IGJldHdlZW4gYG5gIGFuZCBgbGAgd2FzbuKAmXRcbiAgICAgICAgICogdHJhY2tlZC4gIEx1Y2tpbHksIHRoYXQgc3BhY2UgaXNcbiAgICAgICAgICogKHNob3VsZCBiZT8pIGVtcHR5LCBzbyB3ZSBjYW4gc2FmZWx5XG4gICAgICAgICAqIGNoZWNrIGZvciBpdCBub3cuICovXG4gICAgICAgIGlmIChwcmV2ICYmIGluZGVudCAmJiBwcmV2LmluZGVudCkge1xuICAgICAgICAgIGNvbWJpbmVkID0gcHJldi5pbmRlbnQ7XG5cbiAgICAgICAgICBpZiAobiA8IGwpIHtcbiAgICAgICAgICAgIHdoaWxlICgrK24gPCBsKSB7XG4gICAgICAgICAgICAgIGNvbWJpbmVkLnB1c2goKG9mZnNldFtuXSB8fCAwKSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21iaW5lZC5wdXNoKGJlZm9yZS5jb2x1bW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluZGVudCA9IGNvbWJpbmVkLmNvbmNhdChpbmRlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5wb3NpdGlvbi5pbmRlbnQgPSBpbmRlbnQgfHwgW107XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogQWRkIGBub2RlYCB0byBgcGFyZW50YHMgY2hpbGRyZW4gb3IgdG8gYHRva2Vuc2AuXG4gICAgICogUGVyZm9ybXMgbWVyZ2VzIHdoZXJlIHBvc3NpYmxlLiAqL1xuICAgIGZ1bmN0aW9uIGFkZChub2RlLCBwYXJlbnQpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbiA6IHRva2VucztcbiAgICAgIHZhciBwcmV2ID0gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJldiAmJlxuICAgICAgICBub2RlLnR5cGUgPT09IHByZXYudHlwZSAmJlxuICAgICAgICBub2RlLnR5cGUgaW4gTUVSR0VBQkxFX05PREVTICYmXG4gICAgICAgIG1lcmdlYWJsZShwcmV2KSAmJlxuICAgICAgICBtZXJnZWFibGUobm9kZSlcbiAgICAgICkge1xuICAgICAgICBub2RlID0gTUVSR0VBQkxFX05PREVTW25vZGUudHlwZV0uY2FsbChzZWxmLCBwcmV2LCBub2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUgIT09IHByZXYpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuYXRTdGFydCAmJiB0b2tlbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHNlbGYuZXhpdFN0YXJ0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8qIFJlbW92ZSBgc3VidmFsdWVgIGZyb20gYHZhbHVlYC5cbiAgICAgKiBgc3VidmFsdWVgIG11c3QgYmUgYXQgdGhlIHN0YXJ0IG9mIGB2YWx1ZWAuICovXG4gICAgZnVuY3Rpb24gZWF0KHN1YnZhbHVlKSB7XG4gICAgICB2YXIgaW5kZW50ID0gZ2V0T2Zmc2V0KCk7XG4gICAgICB2YXIgcG9zID0gcG9zaXRpb24oKTtcbiAgICAgIHZhciBjdXJyZW50ID0gbm93KCk7XG5cbiAgICAgIHZhbGlkYXRlRWF0KHN1YnZhbHVlKTtcblxuICAgICAgYXBwbHkucmVzZXQgPSByZXNldDtcbiAgICAgIHJlc2V0LnRlc3QgPSB0ZXN0O1xuICAgICAgYXBwbHkudGVzdCA9IHRlc3Q7XG5cbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKHN1YnZhbHVlLmxlbmd0aCk7XG5cbiAgICAgIHVwZGF0ZVBvc2l0aW9uKHN1YnZhbHVlKTtcblxuICAgICAgaW5kZW50ID0gaW5kZW50KCk7XG5cbiAgICAgIHJldHVybiBhcHBseTtcblxuICAgICAgLyogQWRkIHRoZSBnaXZlbiBhcmd1bWVudHMsIGFkZCBgcG9zaXRpb25gIHRvXG4gICAgICAgKiB0aGUgcmV0dXJuZWQgbm9kZSwgYW5kIHJldHVybiB0aGUgbm9kZS4gKi9cbiAgICAgIGZ1bmN0aW9uIGFwcGx5KG5vZGUsIHBhcmVudCkge1xuICAgICAgICByZXR1cm4gcG9zKGFkZChwb3Mobm9kZSksIHBhcmVudCksIGluZGVudCk7XG4gICAgICB9XG5cbiAgICAgIC8qIEZ1bmN0aW9ucyBqdXN0IGxpa2UgYXBwbHksIGJ1dCByZXNldHMgdGhlXG4gICAgICAgKiBjb250ZW50OiAgdGhlIGxpbmUgYW5kIGNvbHVtbiBhcmUgcmV2ZXJzZWQsXG4gICAgICAgKiBhbmQgdGhlIGVhdGVuIHZhbHVlIGlzIHJlLWFkZGVkLlxuICAgICAgICogVGhpcyBpcyB1c2VmdWwgZm9yIG5vZGVzIHdpdGggYSBzaW5nbGVcbiAgICAgICAqIHR5cGUgb2YgY29udGVudCwgc3VjaCBhcyBsaXN0cyBhbmQgdGFibGVzLlxuICAgICAgICogU2VlIGBhcHBseWAgYWJvdmUgZm9yIHdoYXQgcGFyYW1ldGVycyBhcmVcbiAgICAgICAqIGV4cGVjdGVkLiAqL1xuICAgICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAgIHZhciBub2RlID0gYXBwbHkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblxuICAgICAgICBsaW5lID0gY3VycmVudC5saW5lO1xuICAgICAgICBjb2x1bW4gPSBjdXJyZW50LmNvbHVtbjtcbiAgICAgICAgdmFsdWUgPSBzdWJ2YWx1ZSArIHZhbHVlO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuXG4gICAgICAvKiBUZXN0IHRoZSBwb3NpdGlvbiwgYWZ0ZXIgZWF0aW5nLCBhbmQgcmV2ZXJzZVxuICAgICAgICogdG8gYSBub3QtZWF0ZW4gc3RhdGUuICovXG4gICAgICBmdW5jdGlvbiB0ZXN0KCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcG9zKHt9KTtcblxuICAgICAgICBsaW5lID0gY3VycmVudC5saW5lO1xuICAgICAgICBjb2x1bW4gPSBjdXJyZW50LmNvbHVtbjtcbiAgICAgICAgdmFsdWUgPSBzdWJ2YWx1ZSArIHZhbHVlO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQucG9zaXRpb247XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG52YXIgZXNjYXBlcyA9IHJlcXVpcmUoJ21hcmtkb3duLWVzY2FwZXMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRPcHRpb25zO1xuXG5mdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY3VycmVudCA9IHNlbGYub3B0aW9ucztcbiAgdmFyIGtleTtcbiAgdmFyIHZhbHVlO1xuXG4gIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IHh0ZW5kKG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdJbnZhbGlkIHZhbHVlIGAnICsgb3B0aW9ucyArICdgICcgK1xuICAgICAgJ2ZvciBzZXR0aW5nIGBvcHRpb25zYCdcbiAgICApO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcblxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB2YWx1ZSA9IGN1cnJlbnRba2V5XTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoa2V5ICE9PSAnYmxvY2tzJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykgfHxcbiAgICAgIChrZXkgPT09ICdibG9ja3MnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgYCcgKyB2YWx1ZSArICdgIGZvciBzZXR0aW5nIGBvcHRpb25zLicgKyBrZXkgKyAnYCcpO1xuICAgIH1cblxuICAgIG9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgc2VsZi5vcHRpb25zID0gb3B0aW9ucztcbiAgc2VsZi5lc2NhcGUgPSBlc2NhcGVzKG9wdGlvbnMpO1xuXG4gIHJldHVybiBzZWxmO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlc1xuXG52YXIgZGVmYXVsdHMgPSBbXG4gICdcXFxcJyxcbiAgJ2AnLFxuICAnKicsXG4gICd7JyxcbiAgJ30nLFxuICAnWycsXG4gICddJyxcbiAgJygnLFxuICAnKScsXG4gICcjJyxcbiAgJysnLFxuICAnLScsXG4gICcuJyxcbiAgJyEnLFxuICAnXycsXG4gICc+J1xuXVxuXG52YXIgZ2ZtID0gZGVmYXVsdHMuY29uY2F0KFsnficsICd8J10pXG5cbnZhciBjb21tb25tYXJrID0gZ2ZtLmNvbmNhdChbXG4gICdcXG4nLFxuICAnXCInLFxuICAnJCcsXG4gICclJyxcbiAgJyYnLFxuICBcIidcIixcbiAgJywnLFxuICAnLycsXG4gICc6JyxcbiAgJzsnLFxuICAnPCcsXG4gICc9JyxcbiAgJz8nLFxuICAnQCcsXG4gICdeJ1xuXSlcblxuZXNjYXBlcy5kZWZhdWx0ID0gZGVmYXVsdHNcbmVzY2FwZXMuZ2ZtID0gZ2ZtXG5lc2NhcGVzLmNvbW1vbm1hcmsgPSBjb21tb25tYXJrXG5cbi8vIEdldCBtYXJrZG93biBlc2NhcGVzLlxuZnVuY3Rpb24gZXNjYXBlcyhvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAoc2V0dGluZ3MuY29tbW9ubWFyaykge1xuICAgIHJldHVybiBjb21tb25tYXJrXG4gIH1cblxuICByZXR1cm4gc2V0dGluZ3MuZ2ZtID8gZ2ZtIDogZGVmYXVsdHNcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcbnZhciByZW1vdmVQb3NpdGlvbiA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtcmVtb3ZlLXBvc2l0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBFWFBSRVNTSU9OX0xJTkVfQlJFQUtTID0gL1xcclxcbnxcXHIvZztcblxuLyogUGFyc2UgdGhlIGJvdW5kIGZpbGUuICovXG5mdW5jdGlvbiBwYXJzZSgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdmFsdWUgPSBTdHJpbmcoc2VsZi5maWxlKTtcbiAgdmFyIHN0YXJ0ID0ge2xpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwfTtcbiAgdmFyIGNvbnRlbnQgPSB4dGVuZChzdGFydCk7XG4gIHZhciBub2RlO1xuXG4gIC8qIENsZWFuIG5vbi11bml4IG5ld2xpbmVzOiBgXFxyXFxuYCBhbmQgYFxccmAgYXJlIGFsbFxuICAgKiBjaGFuZ2VkIHRvIGBcXG5gLiAgVGhpcyBzaG91bGQgbm90IGFmZmVjdCBwb3NpdGlvbmFsXG4gICAqIGluZm9ybWF0aW9uLiAqL1xuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoRVhQUkVTU0lPTl9MSU5FX0JSRUFLUywgQ19ORVdMSU5FKTtcblxuICBpZiAodmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcblxuICAgIGNvbnRlbnQuY29sdW1uKys7XG4gICAgY29udGVudC5vZmZzZXQrKztcbiAgfVxuXG4gIG5vZGUgPSB7XG4gICAgdHlwZTogJ3Jvb3QnLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplQmxvY2sodmFsdWUsIGNvbnRlbnQpLFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IHNlbGYuZW9mIHx8IHh0ZW5kKHN0YXJ0KVxuICAgIH1cbiAgfTtcblxuICBpZiAoIXNlbGYub3B0aW9ucy5wb3NpdGlvbikge1xuICAgIHJlbW92ZVBvc2l0aW9uKG5vZGUsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gcmVtb3ZlUG9zaXRpb25cblxuZnVuY3Rpb24gcmVtb3ZlUG9zaXRpb24obm9kZSwgZm9yY2UpIHtcbiAgdmlzaXQobm9kZSwgZm9yY2UgPyBoYXJkIDogc29mdClcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gaGFyZChub2RlKSB7XG4gIGRlbGV0ZSBub2RlLnBvc2l0aW9uXG59XG5cbmZ1bmN0aW9uIHNvZnQobm9kZSkge1xuICBub2RlLnBvc2l0aW9uID0gdW5kZWZpbmVkXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB2aXNpdFBhcmVudHNcblxudmFyIGNvbnZlcnQgPSByZXF1aXJlKCd1bmlzdC11dGlsLWlzL2NvbnZlcnQnKVxuXG52YXIgQ09OVElOVUUgPSB0cnVlXG52YXIgU0tJUCA9ICdza2lwJ1xudmFyIEVYSVQgPSBmYWxzZVxuXG52aXNpdFBhcmVudHMuQ09OVElOVUUgPSBDT05USU5VRVxudmlzaXRQYXJlbnRzLlNLSVAgPSBTS0lQXG52aXNpdFBhcmVudHMuRVhJVCA9IEVYSVRcblxuZnVuY3Rpb24gdmlzaXRQYXJlbnRzKHRyZWUsIHRlc3QsIHZpc2l0b3IsIHJldmVyc2UpIHtcbiAgdmFyIGlzXG5cbiAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2aXNpdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV2ZXJzZSA9IHZpc2l0b3JcbiAgICB2aXNpdG9yID0gdGVzdFxuICAgIHRlc3QgPSBudWxsXG4gIH1cblxuICBpcyA9IGNvbnZlcnQodGVzdClcblxuICBvbmUodHJlZSwgbnVsbCwgW10pXG5cbiAgLy8gVmlzaXQgYSBzaW5nbGUgbm9kZS5cbiAgZnVuY3Rpb24gb25lKG5vZGUsIGluZGV4LCBwYXJlbnRzKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdXG4gICAgdmFyIHN1YnJlc3VsdFxuXG4gICAgaWYgKCF0ZXN0IHx8IGlzKG5vZGUsIGluZGV4LCBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV0gfHwgbnVsbCkpIHtcbiAgICAgIHJlc3VsdCA9IHRvUmVzdWx0KHZpc2l0b3Iobm9kZSwgcGFyZW50cykpXG5cbiAgICAgIGlmIChyZXN1bHRbMF0gPT09IEVYSVQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlLmNoaWxkcmVuICYmIHJlc3VsdFswXSAhPT0gU0tJUCkge1xuICAgICAgc3VicmVzdWx0ID0gdG9SZXN1bHQoYWxsKG5vZGUuY2hpbGRyZW4sIHBhcmVudHMuY29uY2F0KG5vZGUpKSlcbiAgICAgIHJldHVybiBzdWJyZXN1bHRbMF0gPT09IEVYSVQgPyBzdWJyZXN1bHQgOiByZXN1bHRcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvLyBWaXNpdCBjaGlsZHJlbiBpbiBgcGFyZW50YC5cbiAgZnVuY3Rpb24gYWxsKGNoaWxkcmVuLCBwYXJlbnRzKSB7XG4gICAgdmFyIG1pbiA9IC0xXG4gICAgdmFyIHN0ZXAgPSByZXZlcnNlID8gLTEgOiAxXG4gICAgdmFyIGluZGV4ID0gKHJldmVyc2UgPyBjaGlsZHJlbi5sZW5ndGggOiBtaW4pICsgc3RlcFxuICAgIHZhciByZXN1bHRcblxuICAgIHdoaWxlIChpbmRleCA+IG1pbiAmJiBpbmRleCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmVzdWx0ID0gb25lKGNoaWxkcmVuW2luZGV4XSwgaW5kZXgsIHBhcmVudHMpXG5cbiAgICAgIGlmIChyZXN1bHRbMF0gPT09IEVYSVQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuXG4gICAgICBpbmRleCA9IHR5cGVvZiByZXN1bHRbMV0gPT09ICdudW1iZXInID8gcmVzdWx0WzFdIDogaW5kZXggKyBzdGVwXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRvUmVzdWx0KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBbQ09OVElOVUUsIHZhbHVlXVxuICB9XG5cbiAgcmV0dXJuIFt2YWx1ZV1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnRcblxuZnVuY3Rpb24gY29udmVydCh0ZXN0KSB7XG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHlwZUZhY3RvcnkodGVzdClcbiAgfVxuXG4gIGlmICh0ZXN0ID09PSBudWxsIHx8IHRlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBva1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAoJ2xlbmd0aCcgaW4gdGVzdCA/IGFueUZhY3RvcnkgOiBtYXRjaGVzRmFjdG9yeSkodGVzdClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0ZXN0XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGZ1bmN0aW9uLCBzdHJpbmcsIG9yIG9iamVjdCBhcyB0ZXN0Jylcbn1cblxuZnVuY3Rpb24gY29udmVydEFsbCh0ZXN0cykge1xuICB2YXIgcmVzdWx0cyA9IFtdXG4gIHZhciBsZW5ndGggPSB0ZXN0cy5sZW5ndGhcbiAgdmFyIGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdHNbaW5kZXhdID0gY29udmVydCh0ZXN0c1tpbmRleF0pXG4gIH1cblxuICByZXR1cm4gcmVzdWx0c1xufVxuXG4vLyBVdGlsaXR5IGFzc2VydCBlYWNoIHByb3BlcnR5IGluIGB0ZXN0YCBpcyByZXByZXNlbnRlZCBpbiBgbm9kZWAsIGFuZCBlYWNoXG4vLyB2YWx1ZXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuZnVuY3Rpb24gbWF0Y2hlc0ZhY3RvcnkodGVzdCkge1xuICByZXR1cm4gbWF0Y2hlc1xuXG4gIGZ1bmN0aW9uIG1hdGNoZXMobm9kZSkge1xuICAgIHZhciBrZXlcblxuICAgIGZvciAoa2V5IGluIHRlc3QpIHtcbiAgICAgIGlmIChub2RlW2tleV0gIT09IHRlc3Rba2V5XSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGFueUZhY3RvcnkodGVzdHMpIHtcbiAgdmFyIGNoZWNrcyA9IGNvbnZlcnRBbGwodGVzdHMpXG4gIHZhciBsZW5ndGggPSBjaGVja3MubGVuZ3RoXG5cbiAgcmV0dXJuIG1hdGNoZXNcblxuICBmdW5jdGlvbiBtYXRjaGVzKCkge1xuICAgIHZhciBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNoZWNrc1tpbmRleF0uYXBwbHkodGhpcywgYXJndW1lbnRzKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8vIFV0aWxpdHkgdG8gY29udmVydCBhIHN0cmluZyBpbnRvIGEgZnVuY3Rpb24gd2hpY2ggY2hlY2tzIGEgZ2l2ZW4gbm9kZeKAmXMgdHlwZVxuLy8gZm9yIHNhaWQgc3RyaW5nLlxuZnVuY3Rpb24gdHlwZUZhY3RvcnkodGVzdCkge1xuICByZXR1cm4gdHlwZVxuXG4gIGZ1bmN0aW9uIHR5cGUobm9kZSkge1xuICAgIHJldHVybiBCb29sZWFuKG5vZGUgJiYgbm9kZS50eXBlID09PSB0ZXN0KVxuICB9XG59XG5cbi8vIFV0aWxpdHkgdG8gcmV0dXJuIHRydWUuXG5mdW5jdGlvbiBvaygpIHtcbiAgcmV0dXJuIHRydWVcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ld2xpbmU7XG5cbi8qIFRva2VuaXNlIG5ld2xpbmUuICovXG5mdW5jdGlvbiBuZXdsaW5lKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KDApO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGluZGV4O1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09ICdcXG4nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpbmRleCA9IDE7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgPSBjaGFyYWN0ZXI7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICghd2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBlYXQoc3VidmFsdWUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltLXRyYWlsaW5nLWxpbmVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZW50ZWRDb2RlO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xuXG52YXIgQ09ERV9JTkRFTlRfQ09VTlQgPSA0O1xudmFyIENPREVfSU5ERU5UID0gcmVwZWF0KENfU1BBQ0UsIENPREVfSU5ERU5UX0NPVU5UKTtcblxuLyogVG9rZW5pc2UgaW5kZW50ZWQgY29kZS4gKi9cbmZ1bmN0aW9uIGluZGVudGVkQ29kZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgY29udGVudCA9ICcnO1xuICB2YXIgc3VidmFsdWVRdWV1ZSA9ICcnO1xuICB2YXIgY29udGVudFF1ZXVlID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBibGFua1F1ZXVlO1xuICB2YXIgaW5kZW50O1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChpbmRlbnQpIHtcbiAgICAgIGluZGVudCA9IGZhbHNlO1xuXG4gICAgICBzdWJ2YWx1ZSArPSBzdWJ2YWx1ZVF1ZXVlO1xuICAgICAgY29udGVudCArPSBjb250ZW50UXVldWU7XG4gICAgICBzdWJ2YWx1ZVF1ZXVlID0gJyc7XG4gICAgICBjb250ZW50UXVldWUgPSAnJztcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICAgIHN1YnZhbHVlUXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICAgIGNvbnRlbnRRdWV1ZSA9IGNoYXJhY3RlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgY29udGVudCArPSBjaGFyYWN0ZXI7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgICAgaWYgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpIHtcbiAgICAgICAgICAgIGNvbnRlbnRRdWV1ZSA9IGNoYXJhY3RlcjtcbiAgICAgICAgICAgIHN1YnZhbHVlUXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgY29udGVudCArPSBjaGFyYWN0ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBDX1NQQUNFICYmXG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gY2hhcmFjdGVyICYmXG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAyKSA9PT0gY2hhcmFjdGVyICYmXG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAzKSA9PT0gY2hhcmFjdGVyXG4gICAgKSB7XG4gICAgICBzdWJ2YWx1ZVF1ZXVlICs9IENPREVfSU5ERU5UO1xuICAgICAgaW5kZXggKz0gMztcbiAgICAgIGluZGVudCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBzdWJ2YWx1ZVF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGVudCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJsYW5rUXVldWUgPSAnJztcblxuICAgICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19UQUIgfHwgY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICAgIGJsYW5rUXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgc3VidmFsdWVRdWV1ZSArPSBibGFua1F1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgY29udGVudFF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9XG4gIH1cblxuICBpZiAoY29udGVudCkge1xuICAgIGlmIChzaWxlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgIGxhbmc6IG51bGwsXG4gICAgICB2YWx1ZTogdHJpbShjb250ZW50KVxuICAgIH0pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbS10cmFpbGluZy1saW5lcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZlbmNlZENvZGU7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19USUxERSA9ICd+JztcbnZhciBDX1RJQ0sgPSAnYCc7XG5cbnZhciBNSU5fRkVOQ0VfQ09VTlQgPSAzO1xudmFyIENPREVfSU5ERU5UX0NPVU5UID0gNDtcblxuZnVuY3Rpb24gZmVuY2VkQ29kZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2V0dGluZ3MgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGggKyAxO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGZlbmNlQ291bnQ7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBmbGFnO1xuICB2YXIgcXVldWU7XG4gIHZhciBjb250ZW50O1xuICB2YXIgZXhkZW50ZWRDb250ZW50O1xuICB2YXIgY2xvc2luZztcbiAgdmFyIGV4ZGVudGVkQ2xvc2luZztcbiAgdmFyIGluZGVudDtcbiAgdmFyIG5vdztcblxuICBpZiAoIXNldHRpbmdzLmdmbSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEVhdCBpbml0aWFsIHNwYWNpbmcuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaW5kZW50ID0gaW5kZXg7XG5cbiAgLyogRWF0IHRoZSBmZW5jZS4gKi9cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX1RJTERFICYmIGNoYXJhY3RlciAhPT0gQ19USUNLKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgbWFya2VyID0gY2hhcmFjdGVyO1xuICBmZW5jZUNvdW50ID0gMTtcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBmZW5jZUNvdW50Kys7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmIChmZW5jZUNvdW50IDwgTUlOX0ZFTkNFX0NPVU5UKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogRWF0IHNwYWNpbmcgYmVmb3JlIGZsYWcuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgLyogRWF0IGZsYWcuICovXG4gIGZsYWcgPSAnJztcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBDX05FV0xJTkUgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19USUxERSB8fFxuICAgICAgY2hhcmFjdGVyID09PSBDX1RJQ0tcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UgfHwgY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBmbGFnICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoY2hhcmFjdGVyICYmIGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbm93ID0gZWF0Lm5vdygpO1xuICBub3cuY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBzdWJ2YWx1ZS5sZW5ndGg7XG5cbiAgc3VidmFsdWUgKz0gZmxhZztcbiAgZmxhZyA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKGZsYWcpLCBub3cpO1xuXG4gIGlmIChxdWV1ZSkge1xuICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICB9XG5cbiAgcXVldWUgPSAnJztcbiAgY2xvc2luZyA9ICcnO1xuICBleGRlbnRlZENsb3NpbmcgPSAnJztcbiAgY29udGVudCA9ICcnO1xuICBleGRlbnRlZENvbnRlbnQgPSAnJztcblxuICAvKiBFYXQgY29udGVudC4gKi9cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICBjb250ZW50ICs9IGNsb3Npbmc7XG4gICAgZXhkZW50ZWRDb250ZW50ICs9IGV4ZGVudGVkQ2xvc2luZztcbiAgICBjbG9zaW5nID0gJyc7XG4gICAgZXhkZW50ZWRDbG9zaW5nID0gJyc7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUpIHtcbiAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyO1xuICAgICAgZXhkZW50ZWRDbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKiBBZGQgdGhlIG5ld2xpbmUgdG8gYHN1YnZhbHVlYCBpZiBpdHMgdGhlIGZpcnN0XG4gICAgICogY2hhcmFjdGVyLiAgT3RoZXJ3aXNlLCBhZGQgaXQgdG8gdGhlIGBjbG9zaW5nYFxuICAgICAqIHF1ZXVlLiAqL1xuICAgIGlmIChjb250ZW50KSB7XG4gICAgICBjbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGV4ZGVudGVkQ2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBxdWV1ZSA9ICcnO1xuICAgIGluZGV4Kys7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgY2xvc2luZyArPSBxdWV1ZTtcbiAgICBleGRlbnRlZENsb3NpbmcgKz0gcXVldWUuc2xpY2UoaW5kZW50KTtcblxuICAgIGlmIChxdWV1ZS5sZW5ndGggPj0gQ09ERV9JTkRFTlRfQ09VTlQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IG1hcmtlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjbG9zaW5nICs9IHF1ZXVlO1xuICAgIGV4ZGVudGVkQ2xvc2luZyArPSBxdWV1ZTtcblxuICAgIGlmIChxdWV1ZS5sZW5ndGggPCBmZW5jZUNvdW50KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNsb3NpbmcgKz0gY2hhcmFjdGVyO1xuICAgICAgZXhkZW50ZWRDbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHN1YnZhbHVlICs9IGNvbnRlbnQgKyBjbG9zaW5nO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnY29kZScsXG4gICAgbGFuZzogZmxhZyB8fCBudWxsLFxuICAgIHZhbHVlOiB0cmltKGV4ZGVudGVkQ29udGVudClcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmxvY2txdW90ZTtcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0dUID0gJz4nO1xuXG4vKiBUb2tlbmlzZSBhIGJsb2NrcXVvdGUuICovXG5mdW5jdGlvbiBibG9ja3F1b3RlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBvZmZzZXRzID0gc2VsZi5vZmZzZXQ7XG4gIHZhciB0b2tlbml6ZXJzID0gc2VsZi5ibG9ja1Rva2VuaXplcnM7XG4gIHZhciBpbnRlcnJ1cHRvcnMgPSBzZWxmLmludGVycnVwdEJsb2NrcXVvdGU7XG4gIHZhciBub3cgPSBlYXQubm93KCk7XG4gIHZhciBjdXJyZW50TGluZSA9IG5vdy5saW5lO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgdmFsdWVzID0gW107XG4gIHZhciBjb250ZW50cyA9IFtdO1xuICB2YXIgaW5kZW50cyA9IFtdO1xuICB2YXIgYWRkO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgcmVzdDtcbiAgdmFyIG5leHRJbmRleDtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBsaW5lO1xuICB2YXIgc3RhcnRJbmRleDtcbiAgdmFyIHByZWZpeGVkO1xuICB2YXIgZXhpdDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfR1QpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpbmRleCA9IDA7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgbmV4dEluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4KTtcbiAgICBzdGFydEluZGV4ID0gaW5kZXg7XG4gICAgcHJlZml4ZWQgPSBmYWxzZTtcblxuICAgIGlmIChuZXh0SW5kZXggPT09IC0xKSB7XG4gICAgICBuZXh0SW5kZXggPSBsZW5ndGg7XG4gICAgfVxuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgPT09IENfR1QpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBwcmVmaXhlZCA9IHRydWU7XG5cbiAgICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpID09PSBDX1NQQUNFKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4ID0gc3RhcnRJbmRleDtcbiAgICB9XG5cbiAgICBjb250ZW50ID0gdmFsdWUuc2xpY2UoaW5kZXgsIG5leHRJbmRleCk7XG5cbiAgICBpZiAoIXByZWZpeGVkICYmICF0cmltKGNvbnRlbnQpKSB7XG4gICAgICBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoIXByZWZpeGVkKSB7XG4gICAgICByZXN0ID0gdmFsdWUuc2xpY2UoaW5kZXgpO1xuXG4gICAgICAvKiBDaGVjayBpZiB0aGUgZm9sbG93aW5nIGNvZGUgY29udGFpbnMgYSBwb3NzaWJsZVxuICAgICAgICogYmxvY2suICovXG4gICAgICBpZiAoaW50ZXJydXB0KGludGVycnVwdG9ycywgdG9rZW5pemVycywgc2VsZiwgW2VhdCwgcmVzdCwgdHJ1ZV0pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxpbmUgPSBzdGFydEluZGV4ID09PSBpbmRleCA/IGNvbnRlbnQgOiB2YWx1ZS5zbGljZShzdGFydEluZGV4LCBuZXh0SW5kZXgpO1xuXG4gICAgaW5kZW50cy5wdXNoKGluZGV4IC0gc3RhcnRJbmRleCk7XG4gICAgdmFsdWVzLnB1c2gobGluZSk7XG4gICAgY29udGVudHMucHVzaChjb250ZW50KTtcblxuICAgIGluZGV4ID0gbmV4dEluZGV4ICsgMTtcbiAgfVxuXG4gIGluZGV4ID0gLTE7XG4gIGxlbmd0aCA9IGluZGVudHMubGVuZ3RoO1xuICBhZGQgPSBlYXQodmFsdWVzLmpvaW4oQ19ORVdMSU5FKSk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBvZmZzZXRzW2N1cnJlbnRMaW5lXSA9IChvZmZzZXRzW2N1cnJlbnRMaW5lXSB8fCAwKSArIGluZGVudHNbaW5kZXhdO1xuICAgIGN1cnJlbnRMaW5lKys7XG4gIH1cblxuICBleGl0ID0gc2VsZi5lbnRlckJsb2NrKCk7XG4gIGNvbnRlbnRzID0gc2VsZi50b2tlbml6ZUJsb2NrKGNvbnRlbnRzLmpvaW4oQ19ORVdMSU5FKSwgbm93KTtcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBhZGQoe1xuICAgIHR5cGU6ICdibG9ja3F1b3RlJyxcbiAgICBjaGlsZHJlbjogY29udGVudHNcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gYXR4SGVhZGluZztcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0hBU0ggPSAnIyc7XG5cbnZhciBNQVhfQVRYX0NPVU5UID0gNjtcblxuZnVuY3Rpb24gYXR4SGVhZGluZyhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2V0dGluZ3MgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGggKyAxO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIG5vdyA9IGVhdC5ub3coKTtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBjb250ZW50ID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGRlcHRoO1xuXG4gIC8qIEVhdCBpbml0aWFsIHNwYWNpbmcuICovXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIC8qIEVhdCBoYXNoZXMuICovXG4gIGRlcHRoID0gMDtcblxuICB3aGlsZSAoKytpbmRleCA8PSBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19IQVNIKSB7XG4gICAgICBpbmRleC0tO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGRlcHRoKys7XG4gIH1cblxuICBpZiAoZGVwdGggPiBNQVhfQVRYX0NPVU5UKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKFxuICAgICFkZXB0aCB8fFxuICAgICghc2V0dGluZ3MucGVkYW50aWMgJiYgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IENfSEFTSClcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcblxuICAvKiBFYXQgaW50ZXJtZWRpYXRlIHdoaXRlLXNwYWNlLiAqL1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIC8qIEV4aXQgd2hlbiBub3QgaW4gcGVkYW50aWMgbW9kZSB3aXRob3V0IHNwYWNpbmcuICovXG4gIGlmIChcbiAgICAhc2V0dGluZ3MucGVkYW50aWMgJiZcbiAgICBxdWV1ZS5sZW5ndGggPT09IDAgJiZcbiAgICBjaGFyYWN0ZXIgJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfTkVXTElORVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiBFYXQgY29udGVudC4gKi9cbiAgc3VidmFsdWUgKz0gcXVldWU7XG4gIHF1ZXVlID0gJyc7XG4gIGNvbnRlbnQgPSAnJztcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIWNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfVEFCICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfSEFTSFxuICAgICkge1xuICAgICAgY29udGVudCArPSBxdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2hhcmFjdGVyID09PSBDX1NQQUNFIHx8IGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2hhcmFjdGVyID09PSBDX0hBU0gpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY2hhcmFjdGVyID09PSBDX1NQQUNFIHx8IGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICBpbmRleC0tO1xuICB9XG5cbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoO1xuICBzdWJ2YWx1ZSArPSBjb250ZW50ICsgcXVldWU7XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICBkZXB0aDogZGVwdGgsXG4gICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgbm93KVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB0aGVtYXRpY0JyZWFrO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfQVNURVJJU0sgPSAnKic7XG52YXIgQ19VTkRFUlNDT1JFID0gJ18nO1xudmFyIENfREFTSCA9ICctJztcblxudmFyIFRIRU1BVElDX0JSRUFLX01BUktFUl9DT1VOVCA9IDM7XG5cbmZ1bmN0aW9uIHRoZW1hdGljQnJlYWsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBtYXJrZXJDb3VudDtcbiAgdmFyIHF1ZXVlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfVEFCICYmIGNoYXJhY3RlciAhPT0gQ19TUEFDRSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICB9XG5cbiAgaWYgKFxuICAgIGNoYXJhY3RlciAhPT0gQ19BU1RFUklTSyAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19EQVNIICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX1VOREVSU0NPUkVcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbWFya2VyID0gY2hhcmFjdGVyO1xuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIG1hcmtlckNvdW50ID0gMTtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIpIHtcbiAgICAgIG1hcmtlckNvdW50Kys7XG4gICAgICBzdWJ2YWx1ZSArPSBxdWV1ZSArIG1hcmtlcjtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgbWFya2VyQ291bnQgPj0gVEhFTUFUSUNfQlJFQUtfTUFSS0VSX0NPVU5UICYmXG4gICAgICAoIWNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT09IENfTkVXTElORSlcbiAgICApIHtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuXG4gICAgICBpZiAoc2lsZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7dHlwZTogJ3RoZW1hdGljQnJlYWsnfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LXBhcmFtcyAqL1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG52YXIgZGVjaW1hbCA9IHJlcXVpcmUoJ2lzLWRlY2ltYWwnKTtcbnZhciBnZXRJbmRlbnQgPSByZXF1aXJlKCcuLi91dGlsL2dldC1pbmRlbnRhdGlvbicpO1xudmFyIHJlbW92ZUluZGVudCA9IHJlcXVpcmUoJy4uL3V0aWwvcmVtb3ZlLWluZGVudGF0aW9uJyk7XG52YXIgaW50ZXJydXB0ID0gcmVxdWlyZSgnLi4vdXRpbC9pbnRlcnJ1cHQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0O1xuXG52YXIgQ19BU1RFUklTSyA9ICcqJztcbnZhciBDX1VOREVSU0NPUkUgPSAnXyc7XG52YXIgQ19QTFVTID0gJysnO1xudmFyIENfREFTSCA9ICctJztcbnZhciBDX0RPVCA9ICcuJztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19QQVJFTl9DTE9TRSA9ICcpJztcbnZhciBDX1hfTE9XRVIgPSAneCc7XG5cbnZhciBUQUJfU0laRSA9IDQ7XG52YXIgRVhQUkVTU0lPTl9MT09TRV9MSVNUX0lURU0gPSAvXFxuXFxuKD8hXFxzKiQpLztcbnZhciBFWFBSRVNTSU9OX1RBU0tfSVRFTSA9IC9eXFxbKFsgXFx0XXx4fFgpXVsgXFx0XS87XG52YXIgRVhQUkVTU0lPTl9CVUxMRVQgPSAvXihbIFxcdF0qKShbKistXXxcXGQrWy4pXSkoIHsxLDR9KD8hICl8IHxcXHR8JHwoPz1cXG4pKShbXlxcbl0qKS87XG52YXIgRVhQUkVTU0lPTl9QRURBTlRJQ19CVUxMRVQgPSAvXihbIFxcdF0qKShbKistXXxcXGQrWy4pXSkoWyBcXHRdKykvO1xudmFyIEVYUFJFU1NJT05fSU5JVElBTF9JTkRFTlQgPSAvXiggezEsNH18XFx0KT8vZ207XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmtcbiAqIGxpc3QtaXRlbXMuICovXG52YXIgTElTVF9VTk9SREVSRURfTUFSS0VSUyA9IHt9O1xuXG5MSVNUX1VOT1JERVJFRF9NQVJLRVJTW0NfQVNURVJJU0tdID0gdHJ1ZTtcbkxJU1RfVU5PUkRFUkVEX01BUktFUlNbQ19QTFVTXSA9IHRydWU7XG5MSVNUX1VOT1JERVJFRF9NQVJLRVJTW0NfREFTSF0gPSB0cnVlO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrXG4gKiBsaXN0LWl0ZW1zIGFmdGVyIGEgZGlnaXQuICovXG52YXIgTElTVF9PUkRFUkVEX01BUktFUlMgPSB7fTtcblxuTElTVF9PUkRFUkVEX01BUktFUlNbQ19ET1RdID0gdHJ1ZTtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFya1xuICogbGlzdC1pdGVtcyBhZnRlciBhIGRpZ2l0LiAqL1xudmFyIExJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlMgPSB7fTtcblxuTElTVF9PUkRFUkVEX0NPTU1PTk1BUktfTUFSS0VSU1tDX0RPVF0gPSB0cnVlO1xuTElTVF9PUkRFUkVEX0NPTU1PTk1BUktfTUFSS0VSU1tDX1BBUkVOX0NMT1NFXSA9IHRydWU7XG5cbmZ1bmN0aW9uIGxpc3QoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNvbW1vbm1hcmsgPSBzZWxmLm9wdGlvbnMuY29tbW9ubWFyaztcbiAgdmFyIHBlZGFudGljID0gc2VsZi5vcHRpb25zLnBlZGFudGljO1xuICB2YXIgdG9rZW5pemVycyA9IHNlbGYuYmxvY2tUb2tlbml6ZXJzO1xuICB2YXIgaW50ZXJ1cHRvcnMgPSBzZWxmLmludGVycnVwdExpc3Q7XG4gIHZhciBtYXJrZXJzO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBudWxsO1xuICB2YXIgc2l6ZSA9IDA7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIG9yZGVyZWQ7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBuZXh0SW5kZXg7XG4gIHZhciBzdGFydEluZGV4O1xuICB2YXIgcHJlZml4ZWQ7XG4gIHZhciBjdXJyZW50TWFya2VyO1xuICB2YXIgY29udGVudDtcbiAgdmFyIGxpbmU7XG4gIHZhciBwcmV2RW1wdHk7XG4gIHZhciBlbXB0eTtcbiAgdmFyIGl0ZW1zO1xuICB2YXIgYWxsTGluZXM7XG4gIHZhciBlbXB0eUxpbmVzO1xuICB2YXIgaXRlbTtcbiAgdmFyIGVudGVyVG9wO1xuICB2YXIgZXhpdEJsb2NrcXVvdGU7XG4gIHZhciBpc0xvb3NlO1xuICB2YXIgbm9kZTtcbiAgdmFyIG5vdztcbiAgdmFyIGVuZDtcbiAgdmFyIGluZGVudGVkO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgc2l6ZSArPSBUQUJfU0laRSAtIChzaXplICUgVEFCX1NJWkUpO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICBzaXplKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoc2l6ZSA+PSBUQUJfU0laRSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgbWFya2VycyA9IGNvbW1vbm1hcmsgP1xuICAgIExJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlMgOlxuICAgIExJU1RfT1JERVJFRF9NQVJLRVJTO1xuXG4gIGlmIChMSVNUX1VOT1JERVJFRF9NQVJLRVJTW2NoYXJhY3Rlcl0gPT09IHRydWUpIHtcbiAgICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gICAgb3JkZXJlZCA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIG9yZGVyZWQgPSB0cnVlO1xuICAgIHF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmICghZGVjaW1hbChjaGFyYWN0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXF1ZXVlIHx8IG1hcmtlcnNbY2hhcmFjdGVyXSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0ID0gcGFyc2VJbnQocXVldWUsIDEwKTtcbiAgICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5kZXggPSAwO1xuICBpdGVtcyA9IFtdO1xuICBhbGxMaW5lcyA9IFtdO1xuICBlbXB0eUxpbmVzID0gW107XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgbmV4dEluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4KTtcbiAgICBzdGFydEluZGV4ID0gaW5kZXg7XG4gICAgcHJlZml4ZWQgPSBmYWxzZTtcbiAgICBpbmRlbnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKG5leHRJbmRleCA9PT0gLTEpIHtcbiAgICAgIG5leHRJbmRleCA9IGxlbmd0aDtcbiAgICB9XG5cbiAgICBlbmQgPSBpbmRleCArIFRBQl9TSVpFO1xuICAgIHNpemUgPSAwO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgICBzaXplICs9IFRBQl9TSVpFIC0gKHNpemUgJSBUQUJfU0laRSk7XG4gICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICBzaXplKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA+PSBUQUJfU0laRSkge1xuICAgICAgaW5kZW50ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpdGVtICYmIHNpemUgPj0gaXRlbS5pbmRlbnQpIHtcbiAgICAgIGluZGVudGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgIGN1cnJlbnRNYXJrZXIgPSBudWxsO1xuXG4gICAgaWYgKCFpbmRlbnRlZCkge1xuICAgICAgaWYgKExJU1RfVU5PUkRFUkVEX01BUktFUlNbY2hhcmFjdGVyXSA9PT0gdHJ1ZSkge1xuICAgICAgICBjdXJyZW50TWFya2VyID0gY2hhcmFjdGVyO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBzaXplKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZSA9ICcnO1xuXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgICBpZiAoIWRlY2ltYWwoY2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgIGlmIChxdWV1ZSAmJiBtYXJrZXJzW2NoYXJhY3Rlcl0gPT09IHRydWUpIHtcbiAgICAgICAgICBjdXJyZW50TWFya2VyID0gY2hhcmFjdGVyO1xuICAgICAgICAgIHNpemUgKz0gcXVldWUubGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudE1hcmtlcikge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICAgICAgc2l6ZSArPSBUQUJfU0laRSAtIChzaXplICUgVEFCX1NJWkUpO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICAgICAgZW5kID0gaW5kZXggKyBUQUJfU0laRTtcblxuICAgICAgICAgIHdoaWxlIChpbmRleCA8IGVuZCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfU1BBQ0UpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQgJiYgdmFsdWUuY2hhckF0KGluZGV4KSA9PT0gQ19TUEFDRSkge1xuICAgICAgICAgICAgaW5kZXggLT0gVEFCX1NJWkUgLSAxO1xuICAgICAgICAgICAgc2l6ZSAtPSBUQUJfU0laRSAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FICYmIGNoYXJhY3RlciAhPT0gJycpIHtcbiAgICAgICAgICBjdXJyZW50TWFya2VyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50TWFya2VyKSB7XG4gICAgICBpZiAoIXBlZGFudGljICYmIG1hcmtlciAhPT0gY3VycmVudE1hcmtlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcHJlZml4ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNvbW1vbm1hcmsgJiYgIWluZGVudGVkICYmIHZhbHVlLmNoYXJBdChzdGFydEluZGV4KSA9PT0gQ19TUEFDRSkge1xuICAgICAgICBpbmRlbnRlZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNvbW1vbm1hcmsgJiYgaXRlbSkge1xuICAgICAgICBpbmRlbnRlZCA9IHNpemUgPj0gaXRlbS5pbmRlbnQgfHwgc2l6ZSA+IFRBQl9TSVpFO1xuICAgICAgfVxuXG4gICAgICBwcmVmaXhlZCA9IGZhbHNlO1xuICAgICAgaW5kZXggPSBzdGFydEluZGV4O1xuICAgIH1cblxuICAgIGxpbmUgPSB2YWx1ZS5zbGljZShzdGFydEluZGV4LCBuZXh0SW5kZXgpO1xuICAgIGNvbnRlbnQgPSBzdGFydEluZGV4ID09PSBpbmRleCA/IGxpbmUgOiB2YWx1ZS5zbGljZShpbmRleCwgbmV4dEluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGN1cnJlbnRNYXJrZXIgPT09IENfQVNURVJJU0sgfHxcbiAgICAgIGN1cnJlbnRNYXJrZXIgPT09IENfVU5ERVJTQ09SRSB8fFxuICAgICAgY3VycmVudE1hcmtlciA9PT0gQ19EQVNIXG4gICAgKSB7XG4gICAgICBpZiAodG9rZW5pemVycy50aGVtYXRpY0JyZWFrLmNhbGwoc2VsZiwgZWF0LCBsaW5lLCB0cnVlKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2RW1wdHkgPSBlbXB0eTtcbiAgICBlbXB0eSA9ICF0cmltKGNvbnRlbnQpLmxlbmd0aDtcblxuICAgIGlmIChpbmRlbnRlZCAmJiBpdGVtKSB7XG4gICAgICBpdGVtLnZhbHVlID0gaXRlbS52YWx1ZS5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBhbGxMaW5lcyA9IGFsbExpbmVzLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKTtcbiAgICAgIGVtcHR5TGluZXMgPSBbXTtcbiAgICB9IGVsc2UgaWYgKHByZWZpeGVkKSB7XG4gICAgICBpZiAoZW1wdHlMaW5lcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgaXRlbS52YWx1ZS5wdXNoKCcnKTtcbiAgICAgICAgaXRlbS50cmFpbCA9IGVtcHR5TGluZXMuY29uY2F0KCk7XG4gICAgICB9XG5cbiAgICAgIGl0ZW0gPSB7XG4gICAgICAgIHZhbHVlOiBbbGluZV0sXG4gICAgICAgIGluZGVudDogc2l6ZSxcbiAgICAgICAgdHJhaWw6IFtdXG4gICAgICB9O1xuXG4gICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgYWxsTGluZXMgPSBhbGxMaW5lcy5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBlbXB0eUxpbmVzID0gW107XG4gICAgfSBlbHNlIGlmIChlbXB0eSkge1xuICAgICAgaWYgKHByZXZFbXB0eSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZW1wdHlMaW5lcy5wdXNoKGxpbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJldkVtcHR5KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW50ZXJydXB0KGludGVydXB0b3JzLCB0b2tlbml6ZXJzLCBzZWxmLCBbZWF0LCBsaW5lLCB0cnVlXSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGl0ZW0udmFsdWUgPSBpdGVtLnZhbHVlLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKTtcbiAgICAgIGFsbExpbmVzID0gYWxsTGluZXMuY29uY2F0KGVtcHR5TGluZXMsIGxpbmUpO1xuICAgICAgZW1wdHlMaW5lcyA9IFtdO1xuICAgIH1cblxuICAgIGluZGV4ID0gbmV4dEluZGV4ICsgMTtcbiAgfVxuXG4gIG5vZGUgPSBlYXQoYWxsTGluZXMuam9pbihDX05FV0xJTkUpKS5yZXNldCh7XG4gICAgdHlwZTogJ2xpc3QnLFxuICAgIG9yZGVyZWQ6IG9yZGVyZWQsXG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGxvb3NlOiBudWxsLFxuICAgIGNoaWxkcmVuOiBbXVxuICB9KTtcblxuICBlbnRlclRvcCA9IHNlbGYuZW50ZXJMaXN0KCk7XG4gIGV4aXRCbG9ja3F1b3RlID0gc2VsZi5lbnRlckJsb2NrKCk7XG4gIGlzTG9vc2UgPSBmYWxzZTtcbiAgaW5kZXggPSAtMTtcbiAgbGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaXRlbSA9IGl0ZW1zW2luZGV4XS52YWx1ZS5qb2luKENfTkVXTElORSk7XG4gICAgbm93ID0gZWF0Lm5vdygpO1xuXG4gICAgaXRlbSA9IGVhdChpdGVtKShsaXN0SXRlbShzZWxmLCBpdGVtLCBub3cpLCBub2RlKTtcblxuICAgIGlmIChpdGVtLmxvb3NlKSB7XG4gICAgICBpc0xvb3NlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpdGVtID0gaXRlbXNbaW5kZXhdLnRyYWlsLmpvaW4oQ19ORVdMSU5FKTtcblxuICAgIGlmIChpbmRleCAhPT0gbGVuZ3RoIC0gMSkge1xuICAgICAgaXRlbSArPSBDX05FV0xJTkU7XG4gICAgfVxuXG4gICAgZWF0KGl0ZW0pO1xuICB9XG5cbiAgZW50ZXJUb3AoKTtcbiAgZXhpdEJsb2NrcXVvdGUoKTtcblxuICBub2RlLmxvb3NlID0gaXNMb29zZTtcblxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gbGlzdEl0ZW0oY3R4LCB2YWx1ZSwgcG9zaXRpb24pIHtcbiAgdmFyIG9mZnNldHMgPSBjdHgub2Zmc2V0O1xuICB2YXIgZm4gPSBjdHgub3B0aW9ucy5wZWRhbnRpYyA/IHBlZGFudGljTGlzdEl0ZW0gOiBub3JtYWxMaXN0SXRlbTtcbiAgdmFyIGNoZWNrZWQgPSBudWxsO1xuICB2YXIgdGFzaztcbiAgdmFyIGluZGVudDtcblxuICB2YWx1ZSA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGN0eC5vcHRpb25zLmdmbSkge1xuICAgIHRhc2sgPSB2YWx1ZS5tYXRjaChFWFBSRVNTSU9OX1RBU0tfSVRFTSk7XG5cbiAgICBpZiAodGFzaykge1xuICAgICAgaW5kZW50ID0gdGFza1swXS5sZW5ndGg7XG4gICAgICBjaGVja2VkID0gdGFza1sxXS50b0xvd2VyQ2FzZSgpID09PSBDX1hfTE9XRVI7XG4gICAgICBvZmZzZXRzW3Bvc2l0aW9uLmxpbmVdICs9IGluZGVudDtcbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoaW5kZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdsaXN0SXRlbScsXG4gICAgbG9vc2U6IEVYUFJFU1NJT05fTE9PU0VfTElTVF9JVEVNLnRlc3QodmFsdWUpIHx8XG4gICAgICB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgPT09IENfTkVXTElORSxcbiAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgIGNoaWxkcmVuOiBjdHgudG9rZW5pemVCbG9jayh2YWx1ZSwgcG9zaXRpb24pXG4gIH07XG59XG5cbi8qIENyZWF0ZSBhIGxpc3QtaXRlbSB1c2luZyBvdmVybHkgc2ltcGxlIG1lY2hhbmljcy4gKi9cbmZ1bmN0aW9uIHBlZGFudGljTGlzdEl0ZW0oY3R4LCB2YWx1ZSwgcG9zaXRpb24pIHtcbiAgdmFyIG9mZnNldHMgPSBjdHgub2Zmc2V0O1xuICB2YXIgbGluZSA9IHBvc2l0aW9uLmxpbmU7XG5cbiAgLyogUmVtb3ZlIHRoZSBsaXN0LWl0ZW3igJlzIGJ1bGxldC4gKi9cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fUEVEQU5USUNfQlVMTEVULCByZXBsYWNlcik7XG5cbiAgLyogVGhlIGluaXRpYWwgbGluZSB3YXMgYWxzbyBtYXRjaGVkIGJ5IHRoZSBiZWxvdywgc29cbiAgICogd2UgcmVzZXQgdGhlIGBsaW5lYC4gKi9cbiAgbGluZSA9IHBvc2l0aW9uLmxpbmU7XG5cbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoRVhQUkVTU0lPTl9JTklUSUFMX0lOREVOVCwgcmVwbGFjZXIpO1xuXG4gIC8qIEEgc2ltcGxlIHJlcGxhY2VyIHdoaWNoIHJlbW92ZWQgYWxsIG1hdGNoZXMsXG4gICAqIGFuZCBhZGRzIHRoZWlyIGxlbmd0aCB0byBgb2Zmc2V0YC4gKi9cbiAgZnVuY3Rpb24gcmVwbGFjZXIoJDApIHtcbiAgICBvZmZzZXRzW2xpbmVdID0gKG9mZnNldHNbbGluZV0gfHwgMCkgKyAkMC5sZW5ndGg7XG4gICAgbGluZSsrO1xuXG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qIENyZWF0ZSBhIGxpc3QtaXRlbSB1c2luZyBzYW5lIG1lY2hhbmljcy4gKi9cbmZ1bmN0aW9uIG5vcm1hbExpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgdmFyIGxpbmUgPSBwb3NpdGlvbi5saW5lO1xuICB2YXIgbWF4O1xuICB2YXIgYnVsbGV0O1xuICB2YXIgcmVzdDtcbiAgdmFyIGxpbmVzO1xuICB2YXIgdHJpbW1lZExpbmVzO1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG5cbiAgLyogUmVtb3ZlIHRoZSBsaXN0LWl0ZW3igJlzIGJ1bGxldC4gKi9cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fQlVMTEVULCByZXBsYWNlcik7XG5cbiAgbGluZXMgPSB2YWx1ZS5zcGxpdChDX05FV0xJTkUpO1xuXG4gIHRyaW1tZWRMaW5lcyA9IHJlbW92ZUluZGVudCh2YWx1ZSwgZ2V0SW5kZW50KG1heCkuaW5kZW50KS5zcGxpdChDX05FV0xJTkUpO1xuXG4gIC8qIFdlIHJlcGxhY2VkIHRoZSBpbml0aWFsIGJ1bGxldCB3aXRoIHNvbWV0aGluZ1xuICAgKiBlbHNlIGFib3ZlLCB3aGljaCB3YXMgdXNlZCB0byB0cmlja1xuICAgKiBgcmVtb3ZlSW5kZW50YXRpb25gIGludG8gcmVtb3Zpbmcgc29tZSBtb3JlXG4gICAqIGNoYXJhY3RlcnMgd2hlbiBwb3NzaWJsZS4gIEhvd2V2ZXIsIHRoYXQgY291bGRcbiAgICogcmVzdWx0IGluIHRoZSBpbml0aWFsIGxpbmUgdG8gYmUgc3RyaXBwZWQgbW9yZVxuICAgKiB0aGFuIGl0IHNob3VsZCBiZS4gKi9cbiAgdHJpbW1lZExpbmVzWzBdID0gcmVzdDtcblxuICBvZmZzZXRzW2xpbmVdID0gKG9mZnNldHNbbGluZV0gfHwgMCkgKyBidWxsZXQubGVuZ3RoO1xuICBsaW5lKys7XG5cbiAgaW5kZXggPSAwO1xuICBsZW5ndGggPSBsaW5lcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBvZmZzZXRzW2xpbmVdID0gKG9mZnNldHNbbGluZV0gfHwgMCkgK1xuICAgICAgbGluZXNbaW5kZXhdLmxlbmd0aCAtIHRyaW1tZWRMaW5lc1tpbmRleF0ubGVuZ3RoO1xuICAgIGxpbmUrKztcbiAgfVxuXG4gIHJldHVybiB0cmltbWVkTGluZXMuam9pbihDX05FV0xJTkUpO1xuXG4gIGZ1bmN0aW9uIHJlcGxhY2VyKCQwLCAkMSwgJDIsICQzLCAkNCkge1xuICAgIGJ1bGxldCA9ICQxICsgJDIgKyAkMztcbiAgICByZXN0ID0gJDQ7XG5cbiAgICAvKiBNYWtlIHN1cmUgdGhhdCB0aGUgZmlyc3QgbmluZSBudW1iZXJlZCBsaXN0IGl0ZW1zXG4gICAgICogY2FuIGluZGVudCB3aXRoIGFuIGV4dHJhIHNwYWNlLiAgVGhhdCBpcywgd2hlblxuICAgICAqIHRoZSBidWxsZXQgZGlkIG5vdCByZWNlaXZlIGFuIGV4dHJhIGZpbmFsIHNwYWNlLiAqL1xuICAgIGlmIChOdW1iZXIoJDIpIDwgMTAgJiYgYnVsbGV0Lmxlbmd0aCAlIDIgPT09IDEpIHtcbiAgICAgICQyID0gQ19TUEFDRSArICQyO1xuICAgIH1cblxuICAgIG1heCA9ICQxICsgcmVwZWF0KENfU1BBQ0UsICQyLmxlbmd0aCkgKyAkMztcblxuICAgIHJldHVybiBtYXggKyByZXN0O1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKTtcbnZhciBnZXRJbmRlbnQgPSByZXF1aXJlKCcuL2dldC1pbmRlbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGVudGF0aW9uO1xuXG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xuXG4vKiBSZW1vdmUgdGhlIG1pbmltdW0gaW5kZW50IGZyb20gZXZlcnkgbGluZSBpbiBgdmFsdWVgLlxuICogU3VwcG9ydHMgYm90aCB0YWIsIHNwYWNlZCwgYW5kIG1peGVkIGluZGVudGF0aW9uIChhc1xuICogd2VsbCBhcyBwb3NzaWJsZSkuICovXG5mdW5jdGlvbiBpbmRlbnRhdGlvbih2YWx1ZSwgbWF4aW11bSkge1xuICB2YXIgdmFsdWVzID0gdmFsdWUuc3BsaXQoQ19ORVdMSU5FKTtcbiAgdmFyIHBvc2l0aW9uID0gdmFsdWVzLmxlbmd0aCArIDE7XG4gIHZhciBtaW5JbmRlbnQgPSBJbmZpbml0eTtcbiAgdmFyIG1hdHJpeCA9IFtdO1xuICB2YXIgaW5kZXg7XG4gIHZhciBpbmRlbnRhdGlvbjtcbiAgdmFyIHN0b3BzO1xuICB2YXIgcGFkZGluZztcblxuICB2YWx1ZXMudW5zaGlmdChyZXBlYXQoQ19TUEFDRSwgbWF4aW11bSkgKyAnIScpO1xuXG4gIHdoaWxlIChwb3NpdGlvbi0tKSB7XG4gICAgaW5kZW50YXRpb24gPSBnZXRJbmRlbnQodmFsdWVzW3Bvc2l0aW9uXSk7XG5cbiAgICBtYXRyaXhbcG9zaXRpb25dID0gaW5kZW50YXRpb24uc3RvcHM7XG5cbiAgICBpZiAodHJpbSh2YWx1ZXNbcG9zaXRpb25dKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChpbmRlbnRhdGlvbi5pbmRlbnQpIHtcbiAgICAgIGlmIChpbmRlbnRhdGlvbi5pbmRlbnQgPiAwICYmIGluZGVudGF0aW9uLmluZGVudCA8IG1pbkluZGVudCkge1xuICAgICAgICBtaW5JbmRlbnQgPSBpbmRlbnRhdGlvbi5pbmRlbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pbkluZGVudCA9IEluZmluaXR5O1xuXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAobWluSW5kZW50ICE9PSBJbmZpbml0eSkge1xuICAgIHBvc2l0aW9uID0gdmFsdWVzLmxlbmd0aDtcblxuICAgIHdoaWxlIChwb3NpdGlvbi0tKSB7XG4gICAgICBzdG9wcyA9IG1hdHJpeFtwb3NpdGlvbl07XG4gICAgICBpbmRleCA9IG1pbkluZGVudDtcblxuICAgICAgd2hpbGUgKGluZGV4ICYmICEoaW5kZXggaW4gc3RvcHMpKSB7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHJpbSh2YWx1ZXNbcG9zaXRpb25dKS5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgbWluSW5kZW50ICYmXG4gICAgICAgIGluZGV4ICE9PSBtaW5JbmRlbnRcbiAgICAgICkge1xuICAgICAgICBwYWRkaW5nID0gQ19UQUI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWRkaW5nID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlc1twb3NpdGlvbl0gPSBwYWRkaW5nICsgdmFsdWVzW3Bvc2l0aW9uXS5zbGljZShcbiAgICAgICAgaW5kZXggaW4gc3RvcHMgPyBzdG9wc1tpbmRleF0gKyAxIDogMFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB2YWx1ZXMuc2hpZnQoKTtcblxuICByZXR1cm4gdmFsdWVzLmpvaW4oQ19ORVdMSU5FKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRleHRIZWFkaW5nO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfRVFVQUxTID0gJz0nO1xudmFyIENfREFTSCA9ICctJztcblxudmFyIE1BWF9IRUFESU5HX0lOREVOVCA9IDM7XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmsgc2V0ZXh0XG4gKiBoZWFkZXJzLCBtYXBwaW5nIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgZGVwdGguICovXG52YXIgU0VURVhUX01BUktFUlMgPSB7fTtcblxuU0VURVhUX01BUktFUlNbQ19FUVVBTFNdID0gMTtcblNFVEVYVF9NQVJLRVJTW0NfREFTSF0gPSAyO1xuXG5mdW5jdGlvbiBzZXRleHRIZWFkaW5nKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBub3cgPSBlYXQubm93KCk7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIGRlcHRoO1xuXG4gIC8qIEVhdCBpbml0aWFsIGluZGVudGF0aW9uLiAqL1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFIHx8IGluZGV4ID49IE1BWF9IRUFESU5HX0lOREVOVCkge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIC8qIEVhdCBjb250ZW50LiAqL1xuICBjb250ZW50ID0gJyc7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBpbmRleC0tO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSB8fCBjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIG5vdy5jb2x1bW4gKz0gc3VidmFsdWUubGVuZ3RoO1xuICBub3cub2Zmc2V0ICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgKz0gY29udGVudCArIHF1ZXVlO1xuXG4gIC8qIEVuc3VyZSB0aGUgY29udGVudCBpcyBmb2xsb3dlZCBieSBhIG5ld2xpbmUgYW5kIGFcbiAgICogdmFsaWQgbWFya2VyLiAqL1xuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gIG1hcmtlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUgfHwgIVNFVEVYVF9NQVJLRVJTW21hcmtlcl0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG5cbiAgLyogRWF0IFNldGV4dC1saW5lLiAqL1xuICBxdWV1ZSA9IG1hcmtlcjtcbiAgZGVwdGggPSBTRVRFWFRfTUFSS0VSU1ttYXJrZXJdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IG1hcmtlcikge1xuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUgKyBxdWV1ZSkoe1xuICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICBkZXB0aDogZGVwdGgsXG4gICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgbm93KVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG9wZW5DbG9zZVRhZyA9IHJlcXVpcmUoJy4uL3V0aWwvaHRtbCcpLm9wZW5DbG9zZVRhZztcblxubW9kdWxlLmV4cG9ydHMgPSBibG9ja0hUTUw7XG5cbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19MVCA9ICc8JztcblxuZnVuY3Rpb24gYmxvY2tIVE1MKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBibG9ja3MgPSBzZWxmLm9wdGlvbnMuYmxvY2tzO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbmV4dDtcbiAgdmFyIGxpbmU7XG4gIHZhciBvZmZzZXQ7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBjb3VudDtcbiAgdmFyIHNlcXVlbmNlO1xuICB2YXIgc3VidmFsdWU7XG5cbiAgdmFyIHNlcXVlbmNlcyA9IFtcbiAgICBbL148KHNjcmlwdHxwcmV8c3R5bGUpKD89KFxcc3w+fCQpKS9pLCAvPFxcLyhzY3JpcHR8cHJlfHN0eWxlKT4vaSwgdHJ1ZV0sXG4gICAgWy9ePCEtLS8sIC8tLT4vLCB0cnVlXSxcbiAgICBbL148XFw/LywgL1xcPz4vLCB0cnVlXSxcbiAgICBbL148IVtBLVphLXpdLywgLz4vLCB0cnVlXSxcbiAgICBbL148IVxcW0NEQVRBXFxbLywgL1xcXVxcXT4vLCB0cnVlXSxcbiAgICBbbmV3IFJlZ0V4cCgnXjwvPygnICsgYmxvY2tzLmpvaW4oJ3wnKSArICcpKD89KFxcXFxzfC8/PnwkKSknLCAnaScpLCAvXiQvLCB0cnVlXSxcbiAgICBbbmV3IFJlZ0V4cChvcGVuQ2xvc2VUYWcuc291cmNlICsgJ1xcXFxzKiQnKSwgL14kLywgZmFsc2VdXG4gIF07XG5cbiAgLyogRWF0IGluaXRpYWwgc3BhY2luZy4gKi9cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfVEFCICYmIGNoYXJhY3RlciAhPT0gQ19TUEFDRSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX0xUKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbmV4dCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCArIDEpO1xuICBuZXh0ID0gbmV4dCA9PT0gLTEgPyBsZW5ndGggOiBuZXh0O1xuICBsaW5lID0gdmFsdWUuc2xpY2UoaW5kZXgsIG5leHQpO1xuICBvZmZzZXQgPSAtMTtcbiAgY291bnQgPSBzZXF1ZW5jZXMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK29mZnNldCA8IGNvdW50KSB7XG4gICAgaWYgKHNlcXVlbmNlc1tvZmZzZXRdWzBdLnRlc3QobGluZSkpIHtcbiAgICAgIHNlcXVlbmNlID0gc2VxdWVuY2VzW29mZnNldF07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXNlcXVlbmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiBzZXF1ZW5jZVsyXTtcbiAgfVxuXG4gIGluZGV4ID0gbmV4dDtcblxuICBpZiAoIXNlcXVlbmNlWzFdLnRlc3QobGluZSkpIHtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIG5leHQgPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXggKyAxKTtcbiAgICAgIG5leHQgPSBuZXh0ID09PSAtMSA/IGxlbmd0aCA6IG5leHQ7XG4gICAgICBsaW5lID0gdmFsdWUuc2xpY2UoaW5kZXggKyAxLCBuZXh0KTtcblxuICAgICAgaWYgKHNlcXVlbmNlWzFdLnRlc3QobGluZSkpIHtcbiAgICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgICBpbmRleCA9IG5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSBuZXh0O1xuICAgIH1cbiAgfVxuXG4gIHN1YnZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaW5kZXgpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHt0eXBlOiAnaHRtbCcsIHZhbHVlOiBzdWJ2YWx1ZX0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vdXRpbC9ub3JtYWxpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb290bm90ZURlZmluaXRpb247XG5mb290bm90ZURlZmluaXRpb24ubm90SW5MaXN0ID0gdHJ1ZTtcbmZvb3Rub3RlRGVmaW5pdGlvbi5ub3RJbkJsb2NrID0gdHJ1ZTtcblxudmFyIENfQkFDS1NMQVNIID0gJ1xcXFwnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0JSQUNLRVRfT1BFTiA9ICdbJztcbnZhciBDX0JSQUNLRVRfQ0xPU0UgPSAnXSc7XG52YXIgQ19DQVJFVCA9ICdeJztcbnZhciBDX0NPTE9OID0gJzonO1xuXG52YXIgRVhQUkVTU0lPTl9JTklUSUFMX1RBQiA9IC9eKCB7NH18XFx0KT8vZ207XG5cbmZ1bmN0aW9uIGZvb3Rub3RlRGVmaW5pdGlvbihlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgb2Zmc2V0cyA9IHNlbGYub2Zmc2V0O1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIG5vdztcbiAgdmFyIGN1cnJlbnRMaW5lO1xuICB2YXIgY29udGVudDtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgc3VicXVldWU7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBpZGVudGlmaWVyO1xuICB2YXIgYWRkO1xuICB2YXIgZXhpdDtcblxuICBpZiAoIXNlbGYub3B0aW9ucy5mb290bm90ZXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbmRleCA9IDA7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgPSAnJztcbiAgbm93ID0gZWF0Lm5vdygpO1xuICBjdXJyZW50TGluZSA9IG5vdy5saW5lO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoXG4gICAgdmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19CUkFDS0VUX09QRU4gfHxcbiAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSAhPT0gQ19DQVJFVFxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBDX0JSQUNLRVRfT1BFTiArIENfQ0FSRVQ7XG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoXG4gICAgIXF1ZXVlIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19CUkFDS0VUX0NMT1NFIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfQ09MT05cbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWRlbnRpZmllciA9IG5vcm1hbGl6ZShxdWV1ZSk7XG4gIHN1YnZhbHVlICs9IHF1ZXVlICsgQ19CUkFDS0VUX0NMT1NFICsgQ19DT0xPTjtcbiAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfVEFCICYmIGNoYXJhY3RlciAhPT0gQ19TUEFDRSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBub3cuY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIHF1ZXVlID0gJyc7XG4gIGNvbnRlbnQgPSAnJztcbiAgc3VicXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBzdWJxdWV1ZSA9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBzdWJxdWV1ZTtcbiAgICAgIHN1YnF1ZXVlID0gJyc7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgaWYgKHN1YnF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgfVxuXG4gICAgaWYgKHF1ZXVlKSB7XG4gICAgICBjb250ZW50ICs9IHF1ZXVlO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBjb250ZW50ICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgc3VidmFsdWUgKz0gY29udGVudDtcblxuICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKEVYUFJFU1NJT05fSU5JVElBTF9UQUIsIGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgb2Zmc2V0c1tjdXJyZW50TGluZV0gPSAob2Zmc2V0c1tjdXJyZW50TGluZV0gfHwgMCkgKyBsaW5lLmxlbmd0aDtcbiAgICBjdXJyZW50TGluZSsrO1xuXG4gICAgcmV0dXJuICcnO1xuICB9KTtcblxuICBhZGQgPSBlYXQoc3VidmFsdWUpO1xuXG4gIGV4aXQgPSBzZWxmLmVudGVyQmxvY2soKTtcbiAgY29udGVudCA9IHNlbGYudG9rZW5pemVCbG9jayhjb250ZW50LCBub3cpO1xuICBleGl0KCk7XG5cbiAgcmV0dXJuIGFkZCh7XG4gICAgdHlwZTogJ2Zvb3Rub3RlRGVmaW5pdGlvbicsXG4gICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICBjaGlsZHJlbjogY29udGVudFxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxhcHNlXG5cbi8vIGBjb2xsYXBzZSgnIFxcdFxcbmJhciBcXG5iYXpcXHQnKSAvLyAnIGJhciBiYXogJ2BcbmZ1bmN0aW9uIGNvbGxhcHNlKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1xccysvZywgJyAnKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vdXRpbC9ub3JtYWxpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uO1xuZGVmaW5pdGlvbi5ub3RJbkxpc3QgPSB0cnVlO1xuZGVmaW5pdGlvbi5ub3RJbkJsb2NrID0gdHJ1ZTtcblxudmFyIENfRE9VQkxFX1FVT1RFID0gJ1wiJztcbnZhciBDX1NJTkdMRV9RVU9URSA9ICdcXCcnO1xudmFyIENfQkFDS1NMQVNIID0gJ1xcXFwnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0JSQUNLRVRfT1BFTiA9ICdbJztcbnZhciBDX0JSQUNLRVRfQ0xPU0UgPSAnXSc7XG52YXIgQ19QQVJFTl9PUEVOID0gJygnO1xudmFyIENfUEFSRU5fQ0xPU0UgPSAnKSc7XG52YXIgQ19DT0xPTiA9ICc6JztcbnZhciBDX0xUID0gJzwnO1xudmFyIENfR1QgPSAnPic7XG5cbmZ1bmN0aW9uIGRlZmluaXRpb24oZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNvbW1vbm1hcmsgPSBzZWxmLm9wdGlvbnMuY29tbW9ubWFyaztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBiZWZvcmVVUkw7XG4gIHZhciBiZWZvcmVUaXRsZTtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgdGVzdDtcbiAgdmFyIGlkZW50aWZpZXI7XG4gIHZhciB1cmw7XG4gIHZhciB0aXRsZTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbmRleCsrO1xuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9DTE9TRSkge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmIChcbiAgICAhcXVldWUgfHxcbiAgICB2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX0JSQUNLRVRfQ0xPU0UgfHxcbiAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSAhPT0gQ19DT0xPTlxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZGVudGlmaWVyID0gcXVldWU7XG4gIHN1YnZhbHVlICs9IHF1ZXVlICsgQ19CUkFDS0VUX0NMT1NFICsgQ19DT0xPTjtcbiAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19UQUIgJiZcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX05FV0xJTkVcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgcXVldWUgPSAnJztcbiAgYmVmb3JlVVJMID0gc3VidmFsdWU7XG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gQ19MVCkge1xuICAgIGluZGV4Kys7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmICghaXNFbmNsb3NlZFVSTENoYXJhY3RlcihjaGFyYWN0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBpc0VuY2xvc2VkVVJMQ2hhcmFjdGVyLmRlbGltaXRlcikge1xuICAgICAgc3VidmFsdWUgKz0gQ19MVCArIHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNvbW1vbm1hcmspIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpbmRleCAtPSBxdWV1ZS5sZW5ndGggKyAxO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG4gIH1cblxuICBpZiAoIXF1ZXVlKSB7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoIWlzVW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgfVxuXG4gIGlmICghcXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB1cmwgPSBxdWV1ZTtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyICE9PSBDX1RBQiAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfTkVXTElORVxuICAgICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICB0ZXN0ID0gbnVsbDtcblxuICBpZiAoY2hhcmFjdGVyID09PSBDX0RPVUJMRV9RVU9URSkge1xuICAgIHRlc3QgPSBDX0RPVUJMRV9RVU9URTtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU0lOR0xFX1FVT1RFKSB7XG4gICAgdGVzdCA9IENfU0lOR0xFX1FVT1RFO1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9PUEVOKSB7XG4gICAgdGVzdCA9IENfUEFSRU5fQ0xPU0U7XG4gIH1cblxuICBpZiAoIXRlc3QpIHtcbiAgICBxdWV1ZSA9ICcnO1xuICAgIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICB9IGVsc2UgaWYgKHF1ZXVlKSB7XG4gICAgc3VidmFsdWUgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gICAgcXVldWUgPSAnJztcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gdGVzdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FIHx8IGNoYXJhY3RlciA9PT0gdGVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlICs9IENfTkVXTElORTtcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gdGVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGJlZm9yZVRpdGxlID0gc3VidmFsdWU7XG4gICAgc3VidmFsdWUgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgICB0aXRsZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfVEFCICYmIGNoYXJhY3RlciAhPT0gQ19TUEFDRSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIGlmICghY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgaWYgKHNpbGVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgYmVmb3JlVVJMID0gZWF0KGJlZm9yZVVSTCkudGVzdCgpLmVuZDtcbiAgICB1cmwgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZSh1cmwpLCBiZWZvcmVVUkwsIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pO1xuXG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICBiZWZvcmVUaXRsZSA9IGVhdChiZWZvcmVUaXRsZSkudGVzdCgpLmVuZDtcbiAgICAgIHRpdGxlID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodGl0bGUpLCBiZWZvcmVUaXRsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgICAgdHlwZTogJ2RlZmluaXRpb24nLFxuICAgICAgaWRlbnRpZmllcjogbm9ybWFsaXplKGlkZW50aWZpZXIpLFxuICAgICAgdGl0bGU6IHRpdGxlIHx8IG51bGwsXG4gICAgICB1cmw6IHVybFxuICAgIH0pO1xuICB9XG59XG5cbi8qIENoZWNrIGlmIGBjaGFyYWN0ZXJgIGNhbiBiZSBpbnNpZGUgYW4gZW5jbG9zZWQgVVJJLiAqL1xuZnVuY3Rpb24gaXNFbmNsb3NlZFVSTENoYXJhY3RlcihjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIGNoYXJhY3RlciAhPT0gQ19HVCAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX09QRU4gJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9DTE9TRTtcbn1cblxuaXNFbmNsb3NlZFVSTENoYXJhY3Rlci5kZWxpbWl0ZXIgPSBDX0dUO1xuXG4vKiBDaGVjayBpZiBgY2hhcmFjdGVyYCBjYW4gYmUgaW5zaWRlIGFuIHVuY2xvc2VkIFVSSS4gKi9cbmZ1bmN0aW9uIGlzVW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiBjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfQ0xPU0UgJiZcbiAgICAhd2hpdGVzcGFjZShjaGFyYWN0ZXIpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdGFibGU7XG5cbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX1RJQ0sgPSAnYCc7XG52YXIgQ19EQVNIID0gJy0nO1xudmFyIENfUElQRSA9ICd8JztcbnZhciBDX0NPTE9OID0gJzonO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcblxudmFyIE1JTl9UQUJMRV9DT0xVTU5TID0gMTtcbnZhciBNSU5fVEFCTEVfUk9XUyA9IDI7XG5cbnZhciBUQUJMRV9BTElHTl9MRUZUID0gJ2xlZnQnO1xudmFyIFRBQkxFX0FMSUdOX0NFTlRFUiA9ICdjZW50ZXInO1xudmFyIFRBQkxFX0FMSUdOX1JJR0hUID0gJ3JpZ2h0JztcbnZhciBUQUJMRV9BTElHTl9OT05FID0gbnVsbDtcblxuZnVuY3Rpb24gdGFibGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGluZGV4O1xuICB2YXIgYWxpZ25tZW50cztcbiAgdmFyIGFsaWdubWVudDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgcm93O1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgbGluZXM7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGhhc0Rhc2g7XG4gIHZhciBhbGlnbjtcbiAgdmFyIGNlbGw7XG4gIHZhciBwcmVhbWJsZTtcbiAgdmFyIGNvdW50O1xuICB2YXIgb3BlbmluZztcbiAgdmFyIG5vdztcbiAgdmFyIHBvc2l0aW9uO1xuICB2YXIgbGluZUNvdW50O1xuICB2YXIgbGluZTtcbiAgdmFyIHJvd3M7XG4gIHZhciB0YWJsZTtcbiAgdmFyIGxpbmVJbmRleDtcbiAgdmFyIHBpcGVJbmRleDtcbiAgdmFyIGZpcnN0O1xuXG4gIC8qIEV4aXQgd2hlbiBub3QgaW4gZ2ZtLW1vZGUuICovXG4gIGlmICghc2VsZi5vcHRpb25zLmdmbSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEdldCB0aGUgcm93cy5cbiAgICogRGV0ZWN0aW5nIHRhYmxlcyBzb29uIGlzIGhhcmQsIHNvIHRoZXJlIGFyZSBzb21lXG4gICAqIGNoZWNrcyBmb3IgcGVyZm9ybWFuY2UgaGVyZSwgc3VjaCBhcyB0aGUgbWluaW11bVxuICAgKiBudW1iZXIgb2Ygcm93cywgYW5kIGFsbG93ZWQgY2hhcmFjdGVycyBpbiB0aGVcbiAgICogYWxpZ25tZW50IHJvdy4gKi9cbiAgaW5kZXggPSAwO1xuICBsaW5lQ291bnQgPSAwO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGggKyAxO1xuICBsaW5lcyA9IFtdO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGxpbmVJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCk7XG4gICAgcGlwZUluZGV4ID0gdmFsdWUuaW5kZXhPZihDX1BJUEUsIGluZGV4ICsgMSk7XG5cbiAgICBpZiAobGluZUluZGV4ID09PSAtMSkge1xuICAgICAgbGluZUluZGV4ID0gdmFsdWUubGVuZ3RoO1xuICAgIH1cblxuICAgIGlmIChwaXBlSW5kZXggPT09IC0xIHx8IHBpcGVJbmRleCA+IGxpbmVJbmRleCkge1xuICAgICAgaWYgKGxpbmVDb3VudCA8IE1JTl9UQUJMRV9ST1dTKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGluZXMucHVzaCh2YWx1ZS5zbGljZShpbmRleCwgbGluZUluZGV4KSk7XG4gICAgbGluZUNvdW50Kys7XG4gICAgaW5kZXggPSBsaW5lSW5kZXggKyAxO1xuICB9XG5cbiAgLyogUGFyc2UgdGhlIGFsaWdubWVudCByb3cuICovXG4gIHN1YnZhbHVlID0gbGluZXMuam9pbihDX05FV0xJTkUpO1xuICBhbGlnbm1lbnRzID0gbGluZXMuc3BsaWNlKDEsIDEpWzBdIHx8IFtdO1xuICBpbmRleCA9IDA7XG4gIGxlbmd0aCA9IGFsaWdubWVudHMubGVuZ3RoO1xuICBsaW5lQ291bnQtLTtcbiAgYWxpZ25tZW50ID0gZmFsc2U7XG4gIGFsaWduID0gW107XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gYWxpZ25tZW50cy5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19QSVBFKSB7XG4gICAgICBoYXNEYXNoID0gbnVsbDtcblxuICAgICAgaWYgKGFsaWdubWVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGZpcnN0ID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ24ucHVzaChhbGlnbm1lbnQpO1xuICAgICAgICBhbGlnbm1lbnQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19EQVNIKSB7XG4gICAgICBoYXNEYXNoID0gdHJ1ZTtcbiAgICAgIGFsaWdubWVudCA9IGFsaWdubWVudCB8fCBUQUJMRV9BTElHTl9OT05FO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0NPTE9OKSB7XG4gICAgICBpZiAoYWxpZ25tZW50ID09PSBUQUJMRV9BTElHTl9MRUZUKSB7XG4gICAgICAgIGFsaWdubWVudCA9IFRBQkxFX0FMSUdOX0NFTlRFUjtcbiAgICAgIH0gZWxzZSBpZiAoaGFzRGFzaCAmJiBhbGlnbm1lbnQgPT09IFRBQkxFX0FMSUdOX05PTkUpIHtcbiAgICAgICAgYWxpZ25tZW50ID0gVEFCTEVfQUxJR05fUklHSFQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGlnbm1lbnQgPSBUQUJMRV9BTElHTl9MRUZUO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoYWxpZ25tZW50ICE9PSBmYWxzZSkge1xuICAgIGFsaWduLnB1c2goYWxpZ25tZW50KTtcbiAgfVxuXG4gIC8qIEV4aXQgd2hlbiB3aXRob3V0IGVub3VnaCBjb2x1bW5zLiAqL1xuICBpZiAoYWxpZ24ubGVuZ3RoIDwgTUlOX1RBQkxFX0NPTFVNTlMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qIFBhcnNlIHRoZSByb3dzLiAqL1xuICBwb3NpdGlvbiA9IC0xO1xuICByb3dzID0gW107XG5cbiAgdGFibGUgPSBlYXQoc3VidmFsdWUpLnJlc2V0KHtcbiAgICB0eXBlOiAndGFibGUnLFxuICAgIGFsaWduOiBhbGlnbixcbiAgICBjaGlsZHJlbjogcm93c1xuICB9KTtcblxuICB3aGlsZSAoKytwb3NpdGlvbiA8IGxpbmVDb3VudCkge1xuICAgIGxpbmUgPSBsaW5lc1twb3NpdGlvbl07XG4gICAgcm93ID0ge3R5cGU6ICd0YWJsZVJvdycsIGNoaWxkcmVuOiBbXX07XG5cbiAgICAvKiBFYXQgYSBuZXdsaW5lIGNoYXJhY3RlciB3aGVuIHRoaXMgaXMgbm90IHRoZVxuICAgICAqIGZpcnN0IHJvdy4gKi9cbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIGVhdChDX05FV0xJTkUpO1xuICAgIH1cblxuICAgIC8qIEVhdCB0aGUgcm93LiAqL1xuICAgIGVhdChsaW5lKS5yZXNldChyb3csIHRhYmxlKTtcblxuICAgIGxlbmd0aCA9IGxpbmUubGVuZ3RoICsgMTtcbiAgICBpbmRleCA9IDA7XG4gICAgcXVldWUgPSAnJztcbiAgICBjZWxsID0gJyc7XG4gICAgcHJlYW1ibGUgPSB0cnVlO1xuICAgIGNvdW50ID0gbnVsbDtcbiAgICBvcGVuaW5nID0gbnVsbDtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gbGluZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQiB8fCBjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWF0KGNoYXJhY3Rlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gJycgfHwgY2hhcmFjdGVyID09PSBDX1BJUEUpIHtcbiAgICAgICAgaWYgKHByZWFtYmxlKSB7XG4gICAgICAgICAgZWF0KGNoYXJhY3Rlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNoYXJhY3RlciAmJiBvcGVuaW5nKSB7XG4gICAgICAgICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKChjZWxsIHx8IGNoYXJhY3RlcikgJiYgIXByZWFtYmxlKSB7XG4gICAgICAgICAgICBzdWJ2YWx1ZSA9IGNlbGw7XG5cbiAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIGlmIChjaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZS5zbGljZSgwLCBxdWV1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICBxdWV1ZSA9IHF1ZXVlLmNoYXJBdChxdWV1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgICAgICAgICAgICAgICBxdWV1ZSA9ICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vdyA9IGVhdC5ub3coKTtcblxuICAgICAgICAgICAgZWF0KHN1YnZhbHVlKSh7XG4gICAgICAgICAgICAgIHR5cGU6ICd0YWJsZUNlbGwnLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShjZWxsLCBub3cpXG4gICAgICAgICAgICB9LCByb3cpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVhdChxdWV1ZSArIGNoYXJhY3Rlcik7XG5cbiAgICAgICAgICBxdWV1ZSA9ICcnO1xuICAgICAgICAgIGNlbGwgPSAnJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHF1ZXVlKSB7XG4gICAgICAgICAgY2VsbCArPSBxdWV1ZTtcbiAgICAgICAgICBxdWV1ZSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgY2VsbCArPSBjaGFyYWN0ZXI7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0ggJiYgaW5kZXggIT09IGxlbmd0aCAtIDIpIHtcbiAgICAgICAgICBjZWxsICs9IGxpbmUuY2hhckF0KGluZGV4ICsgMSk7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVElDSykge1xuICAgICAgICAgIGNvdW50ID0gMTtcblxuICAgICAgICAgIHdoaWxlIChsaW5lLmNoYXJBdChpbmRleCArIDEpID09PSBjaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgIGNlbGwgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFvcGVuaW5nKSB7XG4gICAgICAgICAgICBvcGVuaW5nID0gY291bnQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb3VudCA+PSBvcGVuaW5nKSB7XG4gICAgICAgICAgICBvcGVuaW5nID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHJlYW1ibGUgPSBmYWxzZTtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgLyogRWF0IHRoZSBhbGlnbm1lbnQgcm93LiAqL1xuICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgIGVhdChDX05FV0xJTkUgKyBhbGlnbm1lbnRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJyk7XG52YXIgdHJpbVRyYWlsaW5nTGluZXMgPSByZXF1aXJlKCd0cmltLXRyYWlsaW5nLWxpbmVzJyk7XG52YXIgaW50ZXJydXB0ID0gcmVxdWlyZSgnLi4vdXRpbC9pbnRlcnJ1cHQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJhZ3JhcGg7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG5cbnZhciBUQUJfU0laRSA9IDQ7XG5cbi8qIFRva2VuaXNlIHBhcmFncmFwaC4gKi9cbmZ1bmN0aW9uIHBhcmFncmFwaChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc2V0dGluZ3MgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBjb21tb25tYXJrID0gc2V0dGluZ3MuY29tbW9ubWFyaztcbiAgdmFyIGdmbSA9IHNldHRpbmdzLmdmbTtcbiAgdmFyIHRva2VuaXplcnMgPSBzZWxmLmJsb2NrVG9rZW5pemVycztcbiAgdmFyIGludGVycnVwdG9ycyA9IHNlbGYuaW50ZXJydXB0UGFyYWdyYXBoO1xuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSk7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBwb3NpdGlvbjtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgc2l6ZTtcbiAgdmFyIG5vdztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAvKiBFYXQgZXZlcnl0aGluZyBpZiB0aGVyZeKAmXMgbm8gZm9sbG93aW5nIG5ld2xpbmUuICovXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBTdG9wIGlmIHRoZSBuZXh0IGNoYXJhY3RlciBpcyBORVdMSU5FLiAqL1xuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBJbiBjb21tb25tYXJrLW1vZGUsIGZvbGxvd2luZyBpbmRlbnRlZCBsaW5lc1xuICAgICAqIGFyZSBwYXJ0IG9mIHRoZSBwYXJhZ3JhcGguICovXG4gICAgaWYgKGNvbW1vbm1hcmspIHtcbiAgICAgIHNpemUgPSAwO1xuICAgICAgcG9zaXRpb24gPSBpbmRleCArIDE7XG5cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQocG9zaXRpb24pO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICAgICAgc2l6ZSA9IFRBQl9TSVpFO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICAgIHNpemUrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uKys7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplID49IFRBQl9TSVpFKSB7XG4gICAgICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4ICsgMSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN1YnZhbHVlID0gdmFsdWUuc2xpY2UoaW5kZXggKyAxKTtcblxuICAgIC8qIENoZWNrIGlmIHRoZSBmb2xsb3dpbmcgY29kZSBjb250YWlucyBhIHBvc3NpYmxlXG4gICAgICogYmxvY2suICovXG4gICAgaWYgKGludGVycnVwdChpbnRlcnJ1cHRvcnMsIHRva2VuaXplcnMsIHNlbGYsIFtlYXQsIHN1YnZhbHVlLCB0cnVlXSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8qIEJyZWFrIGlmIHRoZSBmb2xsb3dpbmcgbGluZSBzdGFydHMgYSBsaXN0LCB3aGVuXG4gICAgICogYWxyZWFkeSBpbiBhIGxpc3QsIG9yIHdoZW4gaW4gY29tbW9ubWFyaywgb3Igd2hlblxuICAgICAqIGluIGdmbSBtb2RlIGFuZCB0aGUgYnVsbGV0IGlzICpub3QqIG51bWVyaWMuICovXG4gICAgaWYgKFxuICAgICAgdG9rZW5pemVycy5saXN0LmNhbGwoc2VsZiwgZWF0LCBzdWJ2YWx1ZSwgdHJ1ZSkgJiZcbiAgICAgIChcbiAgICAgICAgc2VsZi5pbkxpc3QgfHxcbiAgICAgICAgY29tbW9ubWFyayB8fFxuICAgICAgICAoZ2ZtICYmICFkZWNpbWFsKHRyaW0ubGVmdChzdWJ2YWx1ZSkuY2hhckF0KDApKSlcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHBvc2l0aW9uID0gaW5kZXg7XG4gICAgaW5kZXggPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXggKyAxKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEgJiYgdHJpbSh2YWx1ZS5zbGljZShwb3NpdGlvbiwgaW5kZXgpKSA9PT0gJycpIHtcbiAgICAgIGluZGV4ID0gcG9zaXRpb247XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGluZGV4KTtcblxuICBpZiAodHJpbShzdWJ2YWx1ZSkgPT09ICcnKSB7XG4gICAgZWF0KHN1YnZhbHVlKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBub3cgPSBlYXQubm93KCk7XG4gIHN1YnZhbHVlID0gdHJpbVRyYWlsaW5nTGluZXMoc3VidmFsdWUpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShzdWJ2YWx1ZSwgbm93KVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9lc2NhcGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGU7XG5lc2NhcGUubG9jYXRvciA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gZXNjYXBlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBub2RlO1xuXG4gIGlmICh2YWx1ZS5jaGFyQXQoMCkgPT09ICdcXFxcJykge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgxKTtcblxuICAgIGlmIChzZWxmLmVzY2FwZS5pbmRleE9mKGNoYXJhY3RlcikgIT09IC0xKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICBpZiAoc2lsZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgICBub2RlID0ge3R5cGU6ICdicmVhayd9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZSA9IHtcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgdmFsdWU6IGNoYXJhY3RlclxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWF0KCdcXFxcJyArIGNoYXJhY3Rlcikobm9kZSk7XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignXFxcXCcsIGZyb21JbmRleCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcbnZhciBkZWNvZGUgPSByZXF1aXJlKCdwYXJzZS1lbnRpdGllcycpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS90YWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhdXRvTGluaztcbmF1dG9MaW5rLmxvY2F0b3IgPSBsb2NhdGU7XG5hdXRvTGluay5ub3RJbkxpbmsgPSB0cnVlO1xuXG52YXIgQ19MVCA9ICc8JztcbnZhciBDX0dUID0gJz4nO1xudmFyIENfQVRfU0lHTiA9ICdAJztcbnZhciBDX1NMQVNIID0gJy8nO1xudmFyIE1BSUxUTyA9ICdtYWlsdG86JztcbnZhciBNQUlMVE9fTEVOR1RIID0gTUFJTFRPLmxlbmd0aDtcblxuLyogVG9rZW5pc2UgYSBsaW5rLiAqL1xuZnVuY3Rpb24gYXV0b0xpbmsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBpbmRleDtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgaGFzQXRDaGFyYWN0ZXI7XG4gIHZhciBsaW5rO1xuICB2YXIgbm93O1xuICB2YXIgY29udGVudDtcbiAgdmFyIHRva2VuaXplcnM7XG4gIHZhciBleGl0O1xuXG4gIGlmICh2YWx1ZS5jaGFyQXQoMCkgIT09IENfTFQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzZWxmID0gdGhpcztcbiAgc3VidmFsdWUgPSAnJztcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICBpbmRleCA9IDA7XG4gIHF1ZXVlID0gJyc7XG4gIGhhc0F0Q2hhcmFjdGVyID0gZmFsc2U7XG4gIGxpbmsgPSAnJztcblxuICBpbmRleCsrO1xuICBzdWJ2YWx1ZSA9IENfTFQ7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB8fFxuICAgICAgY2hhcmFjdGVyID09PSBDX0dUIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IENfQVRfU0lHTiB8fFxuICAgICAgKGNoYXJhY3RlciA9PT0gJzonICYmIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBDX1NMQVNIKVxuICAgICkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoIXF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGluayArPSBxdWV1ZTtcbiAgcXVldWUgPSAnJztcblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICBsaW5rICs9IGNoYXJhY3RlcjtcbiAgaW5kZXgrKztcblxuICBpZiAoY2hhcmFjdGVyID09PSBDX0FUX1NJR04pIHtcbiAgICBoYXNBdENoYXJhY3RlciA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyICE9PSAnOicgfHxcbiAgICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBDX1NMQVNIXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGluayArPSBDX1NMQVNIO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB8fCBjaGFyYWN0ZXIgPT09IENfR1QpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoIXF1ZXVlIHx8IGNoYXJhY3RlciAhPT0gQ19HVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbGluayArPSBxdWV1ZTtcbiAgY29udGVudCA9IGxpbms7XG4gIHN1YnZhbHVlICs9IGxpbmsgKyBjaGFyYWN0ZXI7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgbm93LmNvbHVtbisrO1xuICBub3cub2Zmc2V0Kys7XG5cbiAgaWYgKGhhc0F0Q2hhcmFjdGVyKSB7XG4gICAgaWYgKGxpbmsuc2xpY2UoMCwgTUFJTFRPX0xFTkdUSCkudG9Mb3dlckNhc2UoKSA9PT0gTUFJTFRPKSB7XG4gICAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHIoTUFJTFRPX0xFTkdUSCk7XG4gICAgICBub3cuY29sdW1uICs9IE1BSUxUT19MRU5HVEg7XG4gICAgICBub3cub2Zmc2V0ICs9IE1BSUxUT19MRU5HVEg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmsgPSBNQUlMVE8gKyBsaW5rO1xuICAgIH1cbiAgfVxuXG4gIC8qIFRlbXBvcmFyaWx5IHJlbW92ZSBhbGwgdG9rZW5pemVycyBleGNlcHQgdGV4dCBpbiBhdXRvbGlua3MuICovXG4gIHRva2VuaXplcnMgPSBzZWxmLmlubGluZVRva2VuaXplcnM7XG4gIHNlbGYuaW5saW5lVG9rZW5pemVycyA9IHt0ZXh0OiB0b2tlbml6ZXJzLnRleHR9O1xuXG4gIGV4aXQgPSBzZWxmLmVudGVyTGluaygpO1xuXG4gIGNvbnRlbnQgPSBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdyk7XG5cbiAgc2VsZi5pbmxpbmVUb2tlbml6ZXJzID0gdG9rZW5pemVycztcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdXJsOiBkZWNvZGUobGluaywge25vblRlcm1pbmF0ZWQ6IGZhbHNlfSksXG4gICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWNvZGUgPSByZXF1aXJlKCdwYXJzZS1lbnRpdGllcycpO1xudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS91cmwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG51cmwubG9jYXRvciA9IGxvY2F0ZTtcbnVybC5ub3RJbkxpbmsgPSB0cnVlO1xuXG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfUEFSRU5fT1BFTiA9ICcoJztcbnZhciBDX1BBUkVOX0NMT1NFID0gJyknO1xudmFyIENfTFQgPSAnPCc7XG52YXIgQ19BVF9TSUdOID0gJ0AnO1xuXG52YXIgSFRUUF9QUk9UT0NPTCA9ICdodHRwOi8vJztcbnZhciBIVFRQU19QUk9UT0NPTCA9ICdodHRwczovLyc7XG52YXIgTUFJTFRPX1BST1RPQ09MID0gJ21haWx0bzonO1xuXG52YXIgUFJPVE9DT0xTID0gW1xuICBIVFRQX1BST1RPQ09MLFxuICBIVFRQU19QUk9UT0NPTCxcbiAgTUFJTFRPX1BST1RPQ09MXG5dO1xuXG52YXIgUFJPVE9DT0xTX0xFTkdUSCA9IFBST1RPQ09MUy5sZW5ndGg7XG5cbmZ1bmN0aW9uIHVybChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBjb250ZW50O1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgaW5kZXg7XG4gIHZhciBwb3NpdGlvbjtcbiAgdmFyIHByb3RvY29sO1xuICB2YXIgbWF0Y2g7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHBhcmVuQ291bnQ7XG4gIHZhciBuZXh0Q2hhcmFjdGVyO1xuICB2YXIgZXhpdDtcblxuICBpZiAoIXNlbGYub3B0aW9ucy5nZm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSA9ICcnO1xuICBpbmRleCA9IC0xO1xuICBsZW5ndGggPSBQUk9UT0NPTFNfTEVOR1RIO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcHJvdG9jb2wgPSBQUk9UT0NPTFNbaW5kZXhdO1xuICAgIG1hdGNoID0gdmFsdWUuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKTtcblxuICAgIGlmIChtYXRjaC50b0xvd2VyQ2FzZSgpID09PSBwcm90b2NvbCkge1xuICAgICAgc3VidmFsdWUgPSBtYXRjaDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghc3VidmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbmRleCA9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuICBwYXJlbkNvdW50ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB8fCBjaGFyYWN0ZXIgPT09IENfTFQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gJy4nIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICcsJyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnOicgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJzsnIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICdcIicgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJ1xcJycgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJyknIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICddJ1xuICAgICkge1xuICAgICAgbmV4dENoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCArIDEpO1xuXG4gICAgICBpZiAoIW5leHRDaGFyYWN0ZXIgfHwgd2hpdGVzcGFjZShuZXh0Q2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX09QRU4gfHwgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgICAgcGFyZW5Db3VudCsrO1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fQ0xPU0UgfHwgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIHBhcmVuQ291bnQtLTtcblxuICAgICAgaWYgKHBhcmVuQ291bnQgPCAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlICs9IHF1ZXVlO1xuICBjb250ZW50ID0gc3VidmFsdWU7XG5cbiAgaWYgKHByb3RvY29sID09PSBNQUlMVE9fUFJPVE9DT0wpIHtcbiAgICBwb3NpdGlvbiA9IHF1ZXVlLmluZGV4T2YoQ19BVF9TSUdOKTtcblxuICAgIGlmIChwb3NpdGlvbiA9PT0gLTEgfHwgcG9zaXRpb24gPT09IGxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHIoTUFJTFRPX1BST1RPQ09MLmxlbmd0aCk7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGV4aXQgPSBzZWxmLmVudGVyTGluaygpO1xuICBjb250ZW50ID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBlYXQubm93KCkpO1xuICBleGl0KCk7XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgIHR5cGU6ICdsaW5rJyxcbiAgICB0aXRsZTogbnVsbCxcbiAgICB1cmw6IGRlY29kZShzdWJ2YWx1ZSwge25vblRlcm1pbmF0ZWQ6IGZhbHNlfSksXG4gICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG52YXIgUFJPVE9DT0xTID0gWydodHRwczovLycsICdodHRwOi8vJywgJ21haWx0bzonXTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGxlbmd0aCA9IFBST1RPQ09MUy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgbWluID0gLTE7XG4gIHZhciBwb3NpdGlvbjtcblxuICBpZiAoIXRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gdmFsdWUuaW5kZXhPZihQUk9UT0NPTFNbaW5kZXhdLCBmcm9tSW5kZXgpO1xuXG4gICAgaWYgKHBvc2l0aW9uICE9PSAtMSAmJiAocG9zaXRpb24gPCBtaW4gfHwgbWluID09PSAtMSkpIHtcbiAgICAgIG1pbiA9IHBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldGljYWwgPSByZXF1aXJlKCdpcy1hbHBoYWJldGljYWwnKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvdGFnJyk7XG52YXIgdGFnID0gcmVxdWlyZSgnLi4vdXRpbC9odG1sJykudGFnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlubGluZUhUTUw7XG5pbmxpbmVIVE1MLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBFWFBSRVNTSU9OX0hUTUxfTElOS19PUEVOID0gL148YSAvaTtcbnZhciBFWFBSRVNTSU9OX0hUTUxfTElOS19DTE9TRSA9IC9ePFxcL2E+L2k7XG5cbmZ1bmN0aW9uIGlubGluZUhUTUwoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHN1YnZhbHVlO1xuXG4gIGlmICh2YWx1ZS5jaGFyQXQoMCkgIT09ICc8JyB8fCBsZW5ndGggPCAzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KDEpO1xuXG4gIGlmIChcbiAgICAhYWxwaGFiZXRpY2FsKGNoYXJhY3RlcikgJiZcbiAgICBjaGFyYWN0ZXIgIT09ICc/JyAmJlxuICAgIGNoYXJhY3RlciAhPT0gJyEnICYmXG4gICAgY2hhcmFjdGVyICE9PSAnLydcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5tYXRjaCh0YWcpO1xuXG4gIGlmICghc3VidmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBub3QgdXNlZCB5ZXQuICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN1YnZhbHVlID0gc3VidmFsdWVbMF07XG5cbiAgaWYgKCFzZWxmLmluTGluayAmJiBFWFBSRVNTSU9OX0hUTUxfTElOS19PUEVOLnRlc3Qoc3VidmFsdWUpKSB7XG4gICAgc2VsZi5pbkxpbmsgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHNlbGYuaW5MaW5rICYmIEVYUFJFU1NJT05fSFRNTF9MSU5LX0NMT1NFLnRlc3Qoc3VidmFsdWUpKSB7XG4gICAgc2VsZi5pbkxpbmsgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHt0eXBlOiAnaHRtbCcsIHZhbHVlOiBzdWJ2YWx1ZX0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2xpbmsnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaW5rO1xubGluay5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX0JSQUNLRVRfT1BFTiA9ICdbJztcbnZhciBDX0JSQUNLRVRfQ0xPU0UgPSAnXSc7XG52YXIgQ19QQVJFTl9PUEVOID0gJygnO1xudmFyIENfUEFSRU5fQ0xPU0UgPSAnKSc7XG52YXIgQ19MVCA9ICc8JztcbnZhciBDX0dUID0gJz4nO1xudmFyIENfVElDSyA9ICdgJztcbnZhciBDX0RPVUJMRV9RVU9URSA9ICdcIic7XG52YXIgQ19TSU5HTEVfUVVPVEUgPSAnXFwnJztcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmsgbGlua1xuICogYW5kIGltYWdlIHRpdGxlcy4gKi9cbnZhciBMSU5LX01BUktFUlMgPSB7fTtcblxuTElOS19NQVJLRVJTW0NfRE9VQkxFX1FVT1RFXSA9IENfRE9VQkxFX1FVT1RFO1xuTElOS19NQVJLRVJTW0NfU0lOR0xFX1FVT1RFXSA9IENfU0lOR0xFX1FVT1RFO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycywgd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFyayBsaW5rXG4gKiBhbmQgaW1hZ2UgdGl0bGVzIGluIGNvbW1vbm1hcmstbW9kZS4gKi9cbnZhciBDT01NT05NQVJLX0xJTktfTUFSS0VSUyA9IHt9O1xuXG5DT01NT05NQVJLX0xJTktfTUFSS0VSU1tDX0RPVUJMRV9RVU9URV0gPSBDX0RPVUJMRV9RVU9URTtcbkNPTU1PTk1BUktfTElOS19NQVJLRVJTW0NfU0lOR0xFX1FVT1RFXSA9IENfU0lOR0xFX1FVT1RFO1xuQ09NTU9OTUFSS19MSU5LX01BUktFUlNbQ19QQVJFTl9PUEVOXSA9IENfUEFSRU5fQ0xPU0U7XG5cbmZ1bmN0aW9uIGxpbmsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMCk7XG4gIHZhciBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpYztcbiAgdmFyIGNvbW1vbm1hcmsgPSBzZWxmLm9wdGlvbnMuY29tbW9ubWFyaztcbiAgdmFyIGdmbSA9IHNlbGYub3B0aW9ucy5nZm07XG4gIHZhciBjbG9zZWQ7XG4gIHZhciBjb3VudDtcbiAgdmFyIG9wZW5pbmc7XG4gIHZhciBiZWZvcmVVUkw7XG4gIHZhciBiZWZvcmVUaXRsZTtcbiAgdmFyIHN1YnF1ZXVlO1xuICB2YXIgaGFzTWFya2VyO1xuICB2YXIgbWFya2VycztcbiAgdmFyIGlzSW1hZ2U7XG4gIHZhciBjb250ZW50O1xuICB2YXIgbWFya2VyO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgdGl0bGU7XG4gIHZhciBkZXB0aDtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgdXJsO1xuICB2YXIgbm93O1xuICB2YXIgZXhpdDtcbiAgdmFyIG5vZGU7XG5cbiAgLyogRGV0ZWN0IHdoZXRoZXIgdGhpcyBpcyBhbiBpbWFnZS4gKi9cbiAgaWYgKGNoYXJhY3RlciA9PT0gJyEnKSB7XG4gICAgaXNJbWFnZSA9IHRydWU7XG4gICAgc3VidmFsdWUgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICB9XG5cbiAgLyogRWF0IHRoZSBvcGVuaW5nLiAqL1xuICBpZiAoY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfT1BFTikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEV4aXQgd2hlbiB0aGlzIGlzIGEgbGluayBhbmQgd2XigJlyZSBhbHJlYWR5IGluc2lkZVxuICAgKiBhIGxpbmsuICovXG4gIGlmICghaXNJbWFnZSAmJiBzZWxmLmluTGluaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgcXVldWUgPSAnJztcbiAgaW5kZXgrKztcblxuICAvKiBFYXQgdGhlIGNvbnRlbnQuICovXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgbm93ID0gZWF0Lm5vdygpO1xuICBkZXB0aCA9IDA7XG5cbiAgbm93LmNvbHVtbiArPSBpbmRleDtcbiAgbm93Lm9mZnNldCArPSBpbmRleDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgIHN1YnF1ZXVlID0gY2hhcmFjdGVyO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19USUNLKSB7XG4gICAgICAvKiBJbmxpbmUtY29kZSBpbiBsaW5rIGNvbnRlbnQuICovXG4gICAgICBjb3VudCA9IDE7XG5cbiAgICAgIHdoaWxlICh2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gQ19USUNLKSB7XG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcGVuaW5nKSB7XG4gICAgICAgIG9wZW5pbmcgPSBjb3VudDtcbiAgICAgIH0gZWxzZSBpZiAoY291bnQgPj0gb3BlbmluZykge1xuICAgICAgICBvcGVuaW5nID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgIC8qIEFsbG93IGJyYWNrZXRzIHRvIGJlIGVzY2FwZWQuICovXG4gICAgICBpbmRleCsrO1xuICAgICAgc3VicXVldWUgKz0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICAvKiBJbiBHRk0gbW9kZSwgYnJhY2tldHMgaW4gY29kZSBzdGlsbCBjb3VudC5cbiAgICAgKiBJbiBhbGwgb3RoZXIgbW9kZXMsIHRoZXkgZG9u4oCZdC4gIFRoaXMgZW1wdHlcbiAgICAgKiBibG9jayBwcmV2ZW50cyB0aGUgbmV4dCBzdGF0ZW1lbnRzIGFyZVxuICAgICAqIGVudGVyZWQuICovXG4gICAgfSBlbHNlIGlmICgoIW9wZW5pbmcgfHwgZ2ZtKSAmJiBjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9PUEVOKSB7XG4gICAgICBkZXB0aCsrO1xuICAgIH0gZWxzZSBpZiAoKCFvcGVuaW5nIHx8IGdmbSkgJiYgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGlmIChkZXB0aCkge1xuICAgICAgICBkZXB0aC0tO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogQWxsb3cgd2hpdGUtc3BhY2UgYmV0d2VlbiBjb250ZW50IGFuZFxuICAgICAgICAgKiB1cmwgaW4gR0ZNIG1vZGUuICovXG4gICAgICAgIGlmICghcGVkYW50aWMpIHtcbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCArIDEpO1xuXG4gICAgICAgICAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfUEFSRU5fT1BFTikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IENfUEFSRU5fT1BFTjtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgaW5kZXgrKztcblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWV1ZSArPSBzdWJxdWV1ZTtcbiAgICBzdWJxdWV1ZSA9ICcnO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICAvKiBFYXQgdGhlIGNvbnRlbnQgY2xvc2luZy4gKi9cbiAgaWYgKCFjbG9zZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb250ZW50ID0gcXVldWU7XG4gIHN1YnZhbHVlICs9IHF1ZXVlICsgc3VicXVldWU7XG4gIGluZGV4Kys7XG5cbiAgLyogRWF0IHdoaXRlLXNwYWNlLiAqL1xuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgLyogRWF0IHRoZSBVUkwuICovXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIG1hcmtlcnMgPSBjb21tb25tYXJrID8gQ09NTU9OTUFSS19MSU5LX01BUktFUlMgOiBMSU5LX01BUktFUlM7XG4gIHF1ZXVlID0gJyc7XG4gIGJlZm9yZVVSTCA9IHN1YnZhbHVlO1xuXG4gIGlmIChjaGFyYWN0ZXIgPT09IENfTFQpIHtcbiAgICBpbmRleCsrO1xuICAgIGJlZm9yZVVSTCArPSBDX0xUO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX0dUKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29tbW9ubWFyayAmJiBjaGFyYWN0ZXIgPT09ICdcXG4nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19HVCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IENfTFQgKyBxdWV1ZSArIENfR1Q7XG4gICAgdXJsID0gcXVldWU7XG4gICAgaW5kZXgrKztcbiAgfSBlbHNlIHtcbiAgICBjaGFyYWN0ZXIgPSBudWxsO1xuICAgIHN1YnF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChzdWJxdWV1ZSAmJiBvd24uY2FsbChtYXJrZXJzLCBjaGFyYWN0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAod2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICAgIGlmICghcGVkYW50aWMpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fT1BFTikge1xuICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX0NMT1NFKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgICAgIHN1YnF1ZXVlID0gJyc7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgICAgICBxdWV1ZSArPSBDX0JBQ0tTTEFTSDtcbiAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICB9XG5cbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgdXJsID0gcXVldWU7XG4gICAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIH1cblxuICAvKiBFYXQgd2hpdGUtc3BhY2UuICovXG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICghd2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHN1YnZhbHVlICs9IHF1ZXVlO1xuXG4gIC8qIEVhdCB0aGUgdGl0bGUuICovXG4gIGlmIChxdWV1ZSAmJiBvd24uY2FsbChtYXJrZXJzLCBjaGFyYWN0ZXIpKSB7XG4gICAgaW5kZXgrKztcbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgcXVldWUgPSAnJztcbiAgICBtYXJrZXIgPSBtYXJrZXJzW2NoYXJhY3Rlcl07XG4gICAgYmVmb3JlVGl0bGUgPSBzdWJ2YWx1ZTtcblxuICAgIC8qIEluIGNvbW1vbm1hcmstbW9kZSwgdGhpbmdzIGFyZSBwcmV0dHkgZWFzeTogdGhlXG4gICAgICogbWFya2VyIGNhbm5vdCBvY2N1ciBpbnNpZGUgdGhlIHRpdGxlLlxuICAgICAqXG4gICAgICogTm9uLWNvbW1vbm1hcmsgZG9lcywgaG93ZXZlciwgc3VwcG9ydCBuZXN0ZWRcbiAgICAgKiBkZWxpbWl0ZXJzLiAqL1xuICAgIGlmIChjb21tb25tYXJrKSB7XG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAgICAgcXVldWUgKz0gQ19CQUNLU0xBU0g7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgfVxuXG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aXRsZSA9IHF1ZXVlO1xuICAgICAgc3VidmFsdWUgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIpIHtcbiAgICAgICAgICBpZiAoaGFzTWFya2VyKSB7XG4gICAgICAgICAgICBxdWV1ZSArPSBtYXJrZXIgKyBzdWJxdWV1ZTtcbiAgICAgICAgICAgIHN1YnF1ZXVlID0gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGFzTWFya2VyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICghaGFzTWFya2VyKSB7XG4gICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9DTE9TRSkge1xuICAgICAgICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgbWFya2VyICsgc3VicXVldWU7XG4gICAgICAgICAgdGl0bGUgPSBxdWV1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcXVldWUgKz0gbWFya2VyICsgc3VicXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICAgICAgc3VicXVldWUgPSAnJztcbiAgICAgICAgICBoYXNNYXJrZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfUEFSRU5fQ0xPU0UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN1YnZhbHVlICs9IENfUEFSRU5fQ0xPU0U7XG5cbiAgdXJsID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodXJsKSwgZWF0KGJlZm9yZVVSTCkudGVzdCgpLmVuZCwge25vblRlcm1pbmF0ZWQ6IGZhbHNlfSk7XG5cbiAgaWYgKHRpdGxlKSB7XG4gICAgYmVmb3JlVGl0bGUgPSBlYXQoYmVmb3JlVGl0bGUpLnRlc3QoKS5lbmQ7XG4gICAgdGl0bGUgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZSh0aXRsZSksIGJlZm9yZVRpdGxlKTtcbiAgfVxuXG4gIG5vZGUgPSB7XG4gICAgdHlwZTogaXNJbWFnZSA/ICdpbWFnZScgOiAnbGluaycsXG4gICAgdGl0bGU6IHRpdGxlIHx8IG51bGwsXG4gICAgdXJsOiB1cmxcbiAgfTtcblxuICBpZiAoaXNJbWFnZSkge1xuICAgIG5vZGUuYWx0ID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUoY29udGVudCksIG5vdykgfHwgbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcbiAgICBub2RlLmNoaWxkcmVuID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBub3cpO1xuICAgIGV4aXQoKTtcbiAgfVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKG5vZGUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2xpbmsnKTtcbnZhciBub3JtYWxpemUgPSByZXF1aXJlKCcuLi91dGlsL25vcm1hbGl6ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZmVyZW5jZTtcbnJlZmVyZW5jZS5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgVF9MSU5LID0gJ2xpbmsnO1xudmFyIFRfSU1BR0UgPSAnaW1hZ2UnO1xudmFyIFRfRk9PVE5PVEUgPSAnZm9vdG5vdGUnO1xudmFyIFJFRkVSRU5DRV9UWVBFX1NIT1JUQ1VUID0gJ3Nob3J0Y3V0JztcbnZhciBSRUZFUkVOQ0VfVFlQRV9DT0xMQVBTRUQgPSAnY29sbGFwc2VkJztcbnZhciBSRUZFUkVOQ0VfVFlQRV9GVUxMID0gJ2Z1bGwnO1xudmFyIENfQ0FSRVQgPSAnXic7XG52YXIgQ19CQUNLU0xBU0ggPSAnXFxcXCc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xuXG5mdW5jdGlvbiByZWZlcmVuY2UoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgwKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBpbnRybyA9ICcnO1xuICB2YXIgdHlwZSA9IFRfTElOSztcbiAgdmFyIHJlZmVyZW5jZVR5cGUgPSBSRUZFUkVOQ0VfVFlQRV9TSE9SVENVVDtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBpZGVudGlmaWVyO1xuICB2YXIgbm93O1xuICB2YXIgbm9kZTtcbiAgdmFyIGV4aXQ7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGJyYWNrZXRlZDtcbiAgdmFyIGRlcHRoO1xuXG4gIC8qIENoZWNrIHdoZXRoZXIgd2XigJlyZSBlYXRpbmcgYW4gaW1hZ2UuICovXG4gIGlmIChjaGFyYWN0ZXIgPT09ICchJykge1xuICAgIHR5cGUgPSBUX0lNQUdFO1xuICAgIGludHJvID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgfVxuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgaW50cm8gKz0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIC8qIENoZWNrIHdoZXRoZXIgd2XigJlyZSBlYXRpbmcgYSBmb290bm90ZS4gKi9cbiAgaWYgKHNlbGYub3B0aW9ucy5mb290bm90ZXMgJiYgdmFsdWUuY2hhckF0KGluZGV4KSA9PT0gQ19DQVJFVCkge1xuICAgIC8qIEV4aXQgaWYgYCFbXmAgaXMgZm91bmQsIHNvIHRoZSBgIWAgd2lsbCBiZSBzZWVuIGFzIHRleHQgYWZ0ZXIgdGhpcyxcbiAgICAgKiBhbmQgd2XigJlsbCBlbnRlciB0aGlzIGZ1bmN0aW9uIGFnYWluIHdoZW4gYFteYCBpcyBmb3VuZC4gKi9cbiAgICBpZiAodHlwZSA9PT0gVF9JTUFHRSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludHJvICs9IENfQ0FSRVQ7XG4gICAgaW5kZXgrKztcbiAgICB0eXBlID0gVF9GT09UTk9URTtcbiAgfVxuXG4gIC8qIEVhdCB0aGUgdGV4dC4gKi9cbiAgZGVwdGggPSAwO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgICAgYnJhY2tldGVkID0gdHJ1ZTtcbiAgICAgIGRlcHRoKys7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9DTE9TRSkge1xuICAgICAgaWYgKCFkZXB0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZGVwdGgtLTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgcXVldWUgKz0gQ19CQUNLU0xBU0g7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHF1ZXVlO1xuICBjb250ZW50ID0gcXVldWU7XG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIC8qIElubGluZSBmb290bm90ZXMgY2Fubm90IGhhdmUgYW4gaWRlbnRpZmllci4gKi9cbiAgaWYgKHR5cGUgIT09IFRfRk9PVE5PVEUgJiYgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgIGlkZW50aWZpZXIgPSAnJztcbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4gfHwgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAgIGlkZW50aWZpZXIgKz0gQ19CQUNLU0xBU0g7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICAgIH1cblxuICAgICAgaWRlbnRpZmllciArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIHJlZmVyZW5jZVR5cGUgPSBpZGVudGlmaWVyID8gUkVGRVJFTkNFX1RZUEVfRlVMTCA6IFJFRkVSRU5DRV9UWVBFX0NPTExBUFNFRDtcbiAgICAgIHF1ZXVlICs9IGlkZW50aWZpZXIgKyBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZGVudGlmaWVyID0gJyc7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgcXVldWUgPSAnJztcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVyID0gY29udGVudDtcbiAgfVxuXG4gIC8qIEJyYWNrZXRzIGNhbm5vdCBiZSBpbnNpZGUgdGhlIGlkZW50aWZpZXIuICovXG4gIGlmIChyZWZlcmVuY2VUeXBlICE9PSBSRUZFUkVOQ0VfVFlQRV9GVUxMICYmIGJyYWNrZXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlID0gaW50cm8gKyBzdWJ2YWx1ZTtcblxuICBpZiAodHlwZSA9PT0gVF9MSU5LICYmIHNlbGYuaW5MaW5rKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSBUX0ZPT1ROT1RFICYmIGNvbnRlbnQuaW5kZXhPZignICcpICE9PSAtMSkge1xuICAgIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICAgIHR5cGU6ICdmb290bm90ZScsXG4gICAgICBjaGlsZHJlbjogdGhpcy50b2tlbml6ZUlubGluZShjb250ZW50LCBlYXQubm93KCkpXG4gICAgfSk7XG4gIH1cblxuICBub3cgPSBlYXQubm93KCk7XG4gIG5vdy5jb2x1bW4gKz0gaW50cm8ubGVuZ3RoO1xuICBub3cub2Zmc2V0ICs9IGludHJvLmxlbmd0aDtcbiAgaWRlbnRpZmllciA9IHJlZmVyZW5jZVR5cGUgPT09IFJFRkVSRU5DRV9UWVBFX0ZVTEwgPyBpZGVudGlmaWVyIDogY29udGVudDtcblxuICBub2RlID0ge1xuICAgIHR5cGU6IHR5cGUgKyAnUmVmZXJlbmNlJyxcbiAgICBpZGVudGlmaWVyOiBub3JtYWxpemUoaWRlbnRpZmllcilcbiAgfTtcblxuICBpZiAodHlwZSA9PT0gVF9MSU5LIHx8IHR5cGUgPT09IFRfSU1BR0UpIHtcbiAgICBub2RlLnJlZmVyZW5jZVR5cGUgPSByZWZlcmVuY2VUeXBlO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09IFRfTElOSykge1xuICAgIGV4aXQgPSBzZWxmLmVudGVyTGluaygpO1xuICAgIG5vZGUuY2hpbGRyZW4gPSBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdyk7XG4gICAgZXhpdCgpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFRfSU1BR0UpIHtcbiAgICBub2RlLmFsdCA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKGNvbnRlbnQpLCBub3cpIHx8IG51bGw7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKShub2RlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL3N0cm9uZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cm9uZztcbnN0cm9uZy5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgQ19BU1RFUklTSyA9ICcqJztcbnZhciBDX1VOREVSU0NPUkUgPSAnXyc7XG5cbmZ1bmN0aW9uIHN0cm9uZyhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgdmFyIG5vdztcbiAgdmFyIHBlZGFudGljO1xuICB2YXIgbWFya2VyO1xuICB2YXIgcXVldWU7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHByZXY7XG5cbiAgaWYgKFxuICAgIChjaGFyYWN0ZXIgIT09IENfQVNURVJJU0sgJiYgY2hhcmFjdGVyICE9PSBDX1VOREVSU0NPUkUpIHx8XG4gICAgdmFsdWUuY2hhckF0KCsraW5kZXgpICE9PSBjaGFyYWN0ZXJcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWM7XG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgc3VidmFsdWUgPSBtYXJrZXIgKyBtYXJrZXI7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgaW5kZXgrKztcbiAgcXVldWUgPSAnJztcbiAgY2hhcmFjdGVyID0gJyc7XG5cbiAgaWYgKHBlZGFudGljICYmIHdoaXRlc3BhY2UodmFsdWUuY2hhckF0KGluZGV4KSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBwcmV2ID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgPT09IG1hcmtlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IG1hcmtlciAmJlxuICAgICAgKCFwZWRhbnRpYyB8fCAhd2hpdGVzcGFjZShwcmV2KSlcbiAgICApIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCArIDIpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgaWYgKCF0cmltKHF1ZXVlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbm93ID0gZWF0Lm5vdygpO1xuICAgICAgICBub3cuY29sdW1uICs9IDI7XG4gICAgICAgIG5vdy5vZmZzZXQgKz0gMjtcblxuICAgICAgICByZXR1cm4gZWF0KHN1YnZhbHVlICsgcXVldWUgKyBzdWJ2YWx1ZSkoe1xuICAgICAgICAgIHR5cGU6ICdzdHJvbmcnLFxuICAgICAgICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKHF1ZXVlLCBub3cpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGVkYW50aWMgJiYgY2hhcmFjdGVyID09PSAnXFxcXCcpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGFzdGVyaXNrID0gdmFsdWUuaW5kZXhPZignKionLCBmcm9tSW5kZXgpO1xuICB2YXIgdW5kZXJzY29yZSA9IHZhbHVlLmluZGV4T2YoJ19fJywgZnJvbUluZGV4KTtcblxuICBpZiAodW5kZXJzY29yZSA9PT0gLTEpIHtcbiAgICByZXR1cm4gYXN0ZXJpc2s7XG4gIH1cblxuICBpZiAoYXN0ZXJpc2sgPT09IC0xKSB7XG4gICAgcmV0dXJuIHVuZGVyc2NvcmU7XG4gIH1cblxuICByZXR1cm4gdW5kZXJzY29yZSA8IGFzdGVyaXNrID8gdW5kZXJzY29yZSA6IGFzdGVyaXNrO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciB3b3JkID0gcmVxdWlyZSgnaXMtd29yZC1jaGFyYWN0ZXInKTtcbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvZW1waGFzaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXBoYXNpcztcbmVtcGhhc2lzLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBDX0FTVEVSSVNLID0gJyonO1xudmFyIENfVU5ERVJTQ09SRSA9ICdfJztcblxuZnVuY3Rpb24gZW1waGFzaXMoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHZhciBub3c7XG4gIHZhciBwZWRhbnRpYztcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBwcmV2O1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQVNURVJJU0sgJiYgY2hhcmFjdGVyICE9PSBDX1VOREVSU0NPUkUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpYztcbiAgc3VidmFsdWUgPSBjaGFyYWN0ZXI7XG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICBpbmRleCsrO1xuICBxdWV1ZSA9ICcnO1xuICBjaGFyYWN0ZXIgPSAnJztcblxuICBpZiAocGVkYW50aWMgJiYgd2hpdGVzcGFjZSh2YWx1ZS5jaGFyQXQoaW5kZXgpKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIHByZXYgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IG1hcmtlciAmJiAoIXBlZGFudGljIHx8ICF3aGl0ZXNwYWNlKHByZXYpKSkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgaWYgKCF0cmltKHF1ZXVlKSB8fCBwcmV2ID09PSBtYXJrZXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBlZGFudGljICYmIG1hcmtlciA9PT0gQ19VTkRFUlNDT1JFICYmIHdvcmQoY2hhcmFjdGVyKSkge1xuICAgICAgICAgIHF1ZXVlICs9IG1hcmtlcjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbm93ID0gZWF0Lm5vdygpO1xuICAgICAgICBub3cuY29sdW1uKys7XG4gICAgICAgIG5vdy5vZmZzZXQrKztcblxuICAgICAgICByZXR1cm4gZWF0KHN1YnZhbHVlICsgcXVldWUgKyBtYXJrZXIpKHtcbiAgICAgICAgICB0eXBlOiAnZW1waGFzaXMnLFxuICAgICAgICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKHF1ZXVlLCBub3cpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBtYXJrZXI7XG4gICAgfVxuXG4gICAgaWYgKCFwZWRhbnRpYyAmJiBjaGFyYWN0ZXIgPT09ICdcXFxcJykge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB3b3JkQ2hhcmFjdGVyXG5cbnZhciBmcm9tQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciByZSA9IC9cXHcvXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhIHdvcmQgY2hhcmFjdGVyLlxuZnVuY3Rpb24gd29yZENoYXJhY3RlcihjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIHJlLnRlc3QoXG4gICAgdHlwZW9mIGNoYXJhY3RlciA9PT0gJ251bWJlcicgPyBmcm9tQ29kZShjaGFyYWN0ZXIpIDogY2hhcmFjdGVyLmNoYXJBdCgwKVxuICApXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgYXN0ZXJpc2sgPSB2YWx1ZS5pbmRleE9mKCcqJywgZnJvbUluZGV4KTtcbiAgdmFyIHVuZGVyc2NvcmUgPSB2YWx1ZS5pbmRleE9mKCdfJywgZnJvbUluZGV4KTtcblxuICBpZiAodW5kZXJzY29yZSA9PT0gLTEpIHtcbiAgICByZXR1cm4gYXN0ZXJpc2s7XG4gIH1cblxuICBpZiAoYXN0ZXJpc2sgPT09IC0xKSB7XG4gICAgcmV0dXJuIHVuZGVyc2NvcmU7XG4gIH1cblxuICByZXR1cm4gdW5kZXJzY29yZSA8IGFzdGVyaXNrID8gdW5kZXJzY29yZSA6IGFzdGVyaXNrO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2RlbGV0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmlrZXRocm91Z2g7XG5zdHJpa2V0aHJvdWdoLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBDX1RJTERFID0gJ34nO1xudmFyIERPVUJMRSA9ICd+fic7XG5cbmZ1bmN0aW9uIHN0cmlrZXRocm91Z2goZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGNoYXJhY3RlciA9ICcnO1xuICB2YXIgcHJldmlvdXMgPSAnJztcbiAgdmFyIHByZWNlZGluZyA9ICcnO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgbm93O1xuXG4gIGlmIChcbiAgICAhc2VsZi5vcHRpb25zLmdmbSB8fFxuICAgIHZhbHVlLmNoYXJBdCgwKSAhPT0gQ19USUxERSB8fFxuICAgIHZhbHVlLmNoYXJBdCgxKSAhPT0gQ19USUxERSB8fFxuICAgIHdoaXRlc3BhY2UodmFsdWUuY2hhckF0KDIpKVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbmRleCA9IDE7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgbm93ID0gZWF0Lm5vdygpO1xuICBub3cuY29sdW1uICs9IDI7XG4gIG5vdy5vZmZzZXQgKz0gMjtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgPT09IENfVElMREUgJiZcbiAgICAgIHByZXZpb3VzID09PSBDX1RJTERFICYmXG4gICAgICAoIXByZWNlZGluZyB8fCAhd2hpdGVzcGFjZShwcmVjZWRpbmcpKVxuICAgICkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdChET1VCTEUgKyBzdWJ2YWx1ZSArIERPVUJMRSkoe1xuICAgICAgICB0eXBlOiAnZGVsZXRlJyxcbiAgICAgICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoc3VidmFsdWUsIG5vdylcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IHByZXZpb3VzO1xuICAgIHByZWNlZGluZyA9IHByZXZpb3VzO1xuICAgIHByZXZpb3VzID0gY2hhcmFjdGVyO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignfn4nLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2NvZGUtaW5saW5lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5saW5lQ29kZTtcbmlubGluZUNvZGUubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIENfVElDSyA9ICdgJztcblxuLyogVG9rZW5pc2UgaW5saW5lIGNvZGUuICovXG5mdW5jdGlvbiBpbmxpbmVDb2RlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcXVldWUgPSAnJztcbiAgdmFyIHRpY2tRdWV1ZSA9ICcnO1xuICB2YXIgY29udGVudFF1ZXVlO1xuICB2YXIgc3VicXVldWU7XG4gIHZhciBjb3VudDtcbiAgdmFyIG9wZW5pbmdDb3VudDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgZm91bmQ7XG4gIHZhciBuZXh0O1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX1RJQ0spIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IENfVElDSztcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlID0gcXVldWU7XG4gIG9wZW5pbmdDb3VudCA9IGluZGV4O1xuICBxdWV1ZSA9ICcnO1xuICBuZXh0ID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgY291bnQgPSAwO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IG5leHQ7XG4gICAgbmV4dCA9IHZhbHVlLmNoYXJBdChpbmRleCArIDEpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19USUNLKSB7XG4gICAgICBjb3VudCsrO1xuICAgICAgdGlja1F1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIH1cblxuICAgIGlmIChjb3VudCAmJiBuZXh0ICE9PSBDX1RJQ0spIHtcbiAgICAgIGlmIChjb3VudCA9PT0gb3BlbmluZ0NvdW50KSB7XG4gICAgICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgdGlja1F1ZXVlO1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSB0aWNrUXVldWU7XG4gICAgICB0aWNrUXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFmb3VuZCkge1xuICAgIGlmIChvcGVuaW5nQ291bnQgJSAyICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcXVldWUgPSAnJztcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29udGVudFF1ZXVlID0gJyc7XG4gIHN1YnF1ZXVlID0gJyc7XG4gIGxlbmd0aCA9IHF1ZXVlLmxlbmd0aDtcbiAgaW5kZXggPSAtMTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHF1ZXVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAod2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3VicXVldWUpIHtcbiAgICAgIGlmIChjb250ZW50UXVldWUpIHtcbiAgICAgICAgY29udGVudFF1ZXVlICs9IHN1YnF1ZXVlO1xuICAgICAgfVxuXG4gICAgICBzdWJxdWV1ZSA9ICcnO1xuICAgIH1cblxuICAgIGNvbnRlbnRRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2lubGluZUNvZGUnLFxuICAgIHZhbHVlOiBjb250ZW50UXVldWVcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignYCcsIGZyb21JbmRleCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvYnJlYWsnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYXJkQnJlYWs7XG5oYXJkQnJlYWsubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIE1JTl9CUkVBS19MRU5HVEggPSAyO1xuXG5mdW5jdGlvbiBoYXJkQnJlYWsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgcXVldWUgPSAnJztcbiAgdmFyIGNoYXJhY3RlcjtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgaWYgKGluZGV4IDwgTUlOX0JSRUFLX0xFTkdUSCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcblxuICAgICAgcmV0dXJuIGVhdChxdWV1ZSkoe3R5cGU6ICdicmVhayd9KTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSAnICcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBpbmRleCA9IHZhbHVlLmluZGV4T2YoJ1xcbicsIGZyb21JbmRleCk7XG5cbiAgd2hpbGUgKGluZGV4ID4gZnJvbUluZGV4KSB7XG4gICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCAtIDEpICE9PSAnICcpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGluZGV4LS07XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gdGV4dDtcblxuZnVuY3Rpb24gdGV4dChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbWV0aG9kcztcbiAgdmFyIHRva2VuaXplcnM7XG4gIHZhciBpbmRleDtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgcG9zaXRpb247XG4gIHZhciB0b2tlbml6ZXI7XG4gIHZhciBuYW1lO1xuICB2YXIgbWluO1xuICB2YXIgbm93O1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbWV0aG9kcyA9IHNlbGYuaW5saW5lTWV0aG9kcztcbiAgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7XG4gIHRva2VuaXplcnMgPSBzZWxmLmlubGluZVRva2VuaXplcnM7XG4gIGluZGV4ID0gLTE7XG4gIG1pbiA9IHZhbHVlLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIG5hbWUgPSBtZXRob2RzW2luZGV4XTtcblxuICAgIGlmIChuYW1lID09PSAndGV4dCcgfHwgIXRva2VuaXplcnNbbmFtZV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRva2VuaXplciA9IHRva2VuaXplcnNbbmFtZV0ubG9jYXRvcjtcblxuICAgIGlmICghdG9rZW5pemVyKSB7XG4gICAgICBlYXQuZmlsZS5mYWlsKCdNaXNzaW5nIGxvY2F0b3I6IGAnICsgbmFtZSArICdgJyk7XG4gICAgfVxuXG4gICAgcG9zaXRpb24gPSB0b2tlbml6ZXIuY2FsbChzZWxmLCB2YWx1ZSwgMSk7XG5cbiAgICBpZiAocG9zaXRpb24gIT09IC0xICYmIHBvc2l0aW9uIDwgbWluKSB7XG4gICAgICBtaW4gPSBwb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIG1pbik7XG4gIG5vdyA9IGVhdC5ub3coKTtcblxuICBzZWxmLmRlY29kZShzdWJ2YWx1ZSwgbm93LCBmdW5jdGlvbiAoY29udGVudCwgcG9zaXRpb24sIHNvdXJjZSkge1xuICAgIGVhdChzb3VyY2UgfHwgY29udGVudCkoe1xuICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgdmFsdWU6IGNvbnRlbnRcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYmlnaW50OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsInZhciB2aXNpdFdpdGhQYXJlbnRzID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzJyk7XG5cbmZ1bmN0aW9uIGFkZExpc3RNZXRhZGF0YSgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhc3QpIHtcbiAgICB2aXNpdFdpdGhQYXJlbnRzKGFzdCwgJ2xpc3QnLCBmdW5jdGlvbiAobGlzdE5vZGUsIHBhcmVudHMpIHtcbiAgICAgIHZhciBkZXB0aCA9IDAsIGksIG47XG4gICAgICBmb3IgKGkgPSAwLCBuID0gcGFyZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKHBhcmVudHNbaV0udHlwZSA9PT0gJ2xpc3QnKSBkZXB0aCArPSAxO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMCwgbiA9IGxpc3ROb2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBsaXN0Tm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgY2hpbGQuaW5kZXggPSBpO1xuICAgICAgICBjaGlsZC5vcmRlcmVkID0gbGlzdE5vZGUub3JkZXJlZDtcbiAgICAgIH1cbiAgICAgIGxpc3ROb2RlLmRlcHRoID0gZGVwdGg7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFzdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGRMaXN0TWV0YWRhdGE7XG4iLCIndXNlIHN0cmljdCdcblxuLyogRXhwb3NlLiAqL1xubW9kdWxlLmV4cG9ydHMgPSB2aXNpdFBhcmVudHNcblxuLyogVmlzaXQuICovXG5mdW5jdGlvbiB2aXNpdFBhcmVudHModHJlZSwgdHlwZSwgdmlzaXRvcikge1xuICB2YXIgc3RhY2sgPSBbXVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZpc2l0b3IgPSB0eXBlXG4gICAgdHlwZSA9IG51bGxcbiAgfVxuXG4gIG9uZSh0cmVlKVxuXG4gIC8qIFZpc2l0IGEgc2luZ2xlIG5vZGUuICovXG4gIGZ1bmN0aW9uIG9uZShub2RlKSB7XG4gICAgdmFyIHJlc3VsdFxuXG4gICAgaWYgKCF0eXBlIHx8IG5vZGUudHlwZSA9PT0gdHlwZSkge1xuICAgICAgcmVzdWx0ID0gdmlzaXRvcihub2RlLCBzdGFjay5jb25jYXQoKSlcbiAgICB9XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiByZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gYWxsKG5vZGUuY2hpbGRyZW4sIG5vZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyogVmlzaXQgY2hpbGRyZW4gaW4gYHBhcmVudGAuICovXG4gIGZ1bmN0aW9uIGFsbChjaGlsZHJlbiwgcGFyZW50KSB7XG4gICAgdmFyIGxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aFxuICAgIHZhciBpbmRleCA9IC0xXG4gICAgdmFyIGNoaWxkXG5cbiAgICBzdGFjay5wdXNoKHBhcmVudClcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2luZGV4XVxuXG4gICAgICBpZiAoY2hpbGQgJiYgb25lKGNoaWxkKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhY2sucG9wKClcblxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIE5haXZlLCBzaW1wbGUgcGx1Z2luIHRvIG1hdGNoIGlubGluZSBub2RlcyB3aXRob3V0IGF0dHJpYnV0ZXNcbiAqIFRoaXMgYWxsb3dzIHNheSA8c3Ryb25nPmZvbzwvc3Ryb25nPiwgYnV0IG5vdCA8c3Ryb25nIGNsYXNzPVwidmVyeVwiPmZvbzwvc3Ryb25nPlxuICogRm9yIHByb3BlciBIVE1MIHN1cHBvcnQsIHlvdSdsbCB3YW50IGEgZGlmZmVyZW50IHBsdWdpblxuICoqL1xudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpO1xuXG52YXIgdHlwZSA9ICd2aXJ0dWFsSHRtbCc7XG52YXIgc2VsZkNsb3NpbmdSZSA9IC9ePChhcmVhfGJhc2V8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxrZXlnZW58bGlua3xtZXRhfHBhcmFtfHNvdXJjZXx0cmFja3x3YnIpXFxzKlxcLz8+JC9pO1xudmFyIHNpbXBsZVRhZ1JlID0gL148KFxcLz8pKFthLXpdKylcXHMqPiQvO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0cmVlKSB7XG4gIHZhciBvcGVuO1xuICB2YXIgY3VycmVudFBhcmVudDtcbiAgdmlzaXQodHJlZSwgJ2h0bWwnLCBmdW5jdGlvbiAobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgIGlmIChjdXJyZW50UGFyZW50ICE9PSBwYXJlbnQpIHtcbiAgICAgIG9wZW4gPSBbXTtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHNlbGZDbG9zaW5nID0gZ2V0U2VsZkNsb3Npbmcobm9kZSk7XG5cbiAgICBpZiAoc2VsZkNsb3NpbmcpIHtcbiAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEsIHtcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgdGFnOiBzZWxmQ2xvc2luZyxcbiAgICAgICAgcG9zaXRpb246IG5vZGUucG9zaXRpb25cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnQgPSBnZXRTaW1wbGVUYWcobm9kZSwgcGFyZW50KTtcblxuICAgIGlmICghY3VycmVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoaW5nID0gZmluZEFuZFB1bGwob3BlbiwgY3VycmVudC50YWcpO1xuXG4gICAgaWYgKG1hdGNoaW5nKSB7XG4gICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCB2aXJ0dWFsKGN1cnJlbnQsIG1hdGNoaW5nLCBwYXJlbnQpKTtcbiAgICB9IGVsc2UgaWYgKCFjdXJyZW50Lm9wZW5pbmcpIHtcbiAgICAgIG9wZW4ucHVzaChjdXJyZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgdHJ1ZSAvLyBJdGVyYXRlIGluIHJldmVyc2VcbiAgKTtcbiAgcmV0dXJuIHRyZWU7XG59O1xuXG5mdW5jdGlvbiBmaW5kQW5kUHVsbChvcGVuLCBtYXRjaGluZ1RhZykge1xuICB2YXIgaSA9IG9wZW4ubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAob3BlbltpXS50YWcgPT09IG1hdGNoaW5nVGFnKSB7XG4gICAgICByZXR1cm4gb3Blbi5zcGxpY2UoaSwgMSlbMF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRTaW1wbGVUYWcobm9kZSwgcGFyZW50KSB7XG4gIHZhciBtYXRjaCA9IG5vZGUudmFsdWUubWF0Y2goc2ltcGxlVGFnUmUpO1xuICByZXR1cm4gbWF0Y2ggPyB7XG4gICAgdGFnOiBtYXRjaFsyXSxcbiAgICBvcGVuaW5nOiAhbWF0Y2hbMV0sXG4gICAgbm9kZTogbm9kZVxuICB9IDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFNlbGZDbG9zaW5nKG5vZGUpIHtcbiAgdmFyIG1hdGNoID0gbm9kZS52YWx1ZS5tYXRjaChzZWxmQ2xvc2luZ1JlKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdmlydHVhbChmcm9tTm9kZSwgdG9Ob2RlLCBwYXJlbnQpIHtcbiAgdmFyIGZyb21JbmRleCA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKGZyb21Ob2RlLm5vZGUpO1xuICB2YXIgdG9JbmRleCA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRvTm9kZS5ub2RlKTtcbiAgdmFyIGV4dHJhY3RlZCA9IHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoZnJvbUluZGV4LCB0b0luZGV4IC0gZnJvbUluZGV4ICsgMSk7XG4gIHZhciBjaGlsZHJlbiA9IGV4dHJhY3RlZC5zbGljZSgxLCAtMSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdGFnOiBmcm9tTm9kZS50YWcsXG4gICAgcG9zaXRpb246IHtcbiAgICAgIHN0YXJ0OiBmcm9tTm9kZS5ub2RlLnBvc2l0aW9uLnN0YXJ0LFxuICAgICAgZW5kOiB0b05vZGUubm9kZS5wb3NpdGlvbi5lbmQsXG4gICAgICBpbmRlbnQ6IFtdXG4gICAgfVxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgdmlzaXQgPSByZXF1aXJlKCd1bmlzdC11dGlsLXZpc2l0Jyk7XG5cbmV4cG9ydHMub2ZUeXBlID0gZnVuY3Rpb24gKHR5cGVzLCBtb2RlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHJldHVybiB2aXNpdChub2RlLCB0eXBlLCBkaXNhbGxvdywgdHJ1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgZnVuY3Rpb24gZGlzYWxsb3cobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHVudGFuZ2xlKG5vZGUsIGluZGV4LCBwYXJlbnQsIG1vZGUpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5pZk5vdE1hdGNoID0gZnVuY3Rpb24gKGFsbG93Tm9kZSwgbW9kZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2aXNpdChub2RlLCBkaXNhbGxvdywgdHJ1ZSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgZnVuY3Rpb24gZGlzYWxsb3cobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQgJiYgIWFsbG93Tm9kZShub2RlLCBpbmRleCwgcGFyZW50KSkge1xuICAgICAgdW50YW5nbGUobm9kZSwgaW5kZXgsIHBhcmVudCwgbW9kZSk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiB1bnRhbmdsZShub2RlLCBpbmRleCwgcGFyZW50LCBtb2RlKSB7XG4gIGlmIChtb2RlID09PSAncmVtb3ZlJykge1xuICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09ICd1bndyYXAnKSB7XG4gICAgdmFyIGFyZ3MgPSBbaW5kZXgsIDFdO1xuXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChub2RlLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KHBhcmVudC5jaGlsZHJlbiwgYXJncyk7XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG5cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxudmFyIGRlZmF1bHROb2RlUG9zaXRpb24gPSB7XG4gIHN0YXJ0OiB7XG4gICAgbGluZTogMSxcbiAgICBjb2x1bW46IDEsXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG4gIGVuZDoge1xuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAxLFxuICAgIG9mZnNldDogMFxuICB9XG59O1xuXG5mdW5jdGlvbiBhc3RUb1JlYWN0KG5vZGUsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgdmFyIHJlbmRlcmVyID0gb3B0aW9ucy5yZW5kZXJlcnNbbm9kZS50eXBlXTsgLy8gbm9kZXMgZ2VuZXJhdGVkIGJ5IHBsdWdpbnMgbWF5IG5vdCBoYXZlIHBvc2l0aW9uIGRhdGFcbiAgLy8gbXVjaCBvZiB0aGUgY29kZSBhZnRlciB0aGlzIHBvaW50IHdpbGwgYXR0ZW1wdCB0byBhY2Nlc3MgcHJvcGVydGllcyBvZiB0aGUgbm9kZS5wb3NpdGlvblxuICAvLyB0aGlzIHdpbGwgc2V0IHRoZSBub2RlIHBvc2l0aW9uIHRvIHRoZSBwYXJlbnQgbm9kZSdzIHBvc2l0aW9uIHRvIHByZXZlbnQgZXJyb3JzXG5cbiAgaWYgKG5vZGUucG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgIG5vZGUucG9zaXRpb24gPSBwYXJlbnQubm9kZSAmJiBwYXJlbnQubm9kZS5wb3NpdGlvbiB8fCBkZWZhdWx0Tm9kZVBvc2l0aW9uO1xuICB9XG5cbiAgdmFyIHBvcyA9IG5vZGUucG9zaXRpb24uc3RhcnQ7XG4gIHZhciBrZXkgPSBbbm9kZS50eXBlLCBwb3MubGluZSwgcG9zLmNvbHVtbiwgaW5kZXhdLmpvaW4oJy0nKTtcblxuICBpZiAoIVJlYWN0SXMuaXNWYWxpZEVsZW1lbnRUeXBlKHJlbmRlcmVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlbmRlcmVyIGZvciB0eXBlIGBcIi5jb25jYXQobm9kZS50eXBlLCBcImAgbm90IGRlZmluZWQgb3IgaXMgbm90IHJlbmRlcmFibGVcIikpO1xuICB9XG5cbiAgdmFyIG5vZGVQcm9wcyA9IGdldE5vZGVQcm9wcyhub2RlLCBrZXksIG9wdGlvbnMsIHJlbmRlcmVyLCBwYXJlbnQsIGluZGV4KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQocmVuZGVyZXIsIG5vZGVQcm9wcywgbm9kZVByb3BzLmNoaWxkcmVuIHx8IHJlc29sdmVDaGlsZHJlbigpIHx8IHVuZGVmaW5lZCk7XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUNoaWxkcmVuKCkge1xuICAgIHJldHVybiBub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZE5vZGUsIGkpIHtcbiAgICAgIHJldHVybiBhc3RUb1JlYWN0KGNoaWxkTm9kZSwgb3B0aW9ucywge1xuICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICBwcm9wczogbm9kZVByb3BzXG4gICAgICB9LCBpKTtcbiAgICB9KTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtcywgY29tcGxleGl0eVxuXG5cbmZ1bmN0aW9uIGdldE5vZGVQcm9wcyhub2RlLCBrZXksIG9wdHMsIHJlbmRlcmVyLCBwYXJlbnQsIGluZGV4KSB7XG4gIHZhciBwcm9wcyA9IHtcbiAgICBrZXk6IGtleVxuICB9O1xuICB2YXIgaXNUYWdSZW5kZXJlciA9IHR5cGVvZiByZW5kZXJlciA9PT0gJ3N0cmluZyc7IC8vIGBzb3VyY2VQb3NgIGlzIHRydWUgaWYgdGhlIHVzZXIgd2FudHMgc291cmNlIGluZm9ybWF0aW9uIChsaW5lL2NvbHVtbiBpbmZvIGZyb20gbWFya2Rvd24gc291cmNlKVxuXG4gIGlmIChvcHRzLnNvdXJjZVBvcyAmJiBub2RlLnBvc2l0aW9uKSB7XG4gICAgcHJvcHNbJ2RhdGEtc291cmNlcG9zJ10gPSBmbGF0dGVuUG9zaXRpb24obm9kZS5wb3NpdGlvbik7XG4gIH1cblxuICBpZiAob3B0cy5yYXdTb3VyY2VQb3MgJiYgIWlzVGFnUmVuZGVyZXIpIHtcbiAgICBwcm9wcy5zb3VyY2VQb3NpdGlvbiA9IG5vZGUucG9zaXRpb247XG4gIH0gLy8gSWYgYGluY2x1ZGVOb2RlSW5kZXhgIGlzIHRydWUsIHBhc3Mgbm9kZSBpbmRleCBpbmZvIHRvIGFsbCBub24tdGFnIHJlbmRlcmVyc1xuXG5cbiAgaWYgKG9wdHMuaW5jbHVkZU5vZGVJbmRleCAmJiBwYXJlbnQubm9kZSAmJiBwYXJlbnQubm9kZS5jaGlsZHJlbiAmJiAhaXNUYWdSZW5kZXJlcikge1xuICAgIHByb3BzLmluZGV4ID0gcGFyZW50Lm5vZGUuY2hpbGRyZW4uaW5kZXhPZihub2RlKTtcbiAgICBwcm9wcy5wYXJlbnRDaGlsZENvdW50ID0gcGFyZW50Lm5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICB9XG5cbiAgdmFyIHJlZiA9IG5vZGUuaWRlbnRpZmllciAhPT0gbnVsbCAmJiBub2RlLmlkZW50aWZpZXIgIT09IHVuZGVmaW5lZCA/IG9wdHMuZGVmaW5pdGlvbnNbbm9kZS5pZGVudGlmaWVyXSB8fCB7fSA6IG51bGw7XG5cbiAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlICdyb290JzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBvcHRzLmNsYXNzTmFtZVxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RleHQnOlxuICAgICAgcHJvcHMubm9kZUtleSA9IGtleTtcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gbm9kZS52YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaGVhZGluZyc6XG4gICAgICBwcm9wcy5sZXZlbCA9IG5vZGUuZGVwdGg7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpc3QnOlxuICAgICAgcHJvcHMuc3RhcnQgPSBub2RlLnN0YXJ0O1xuICAgICAgcHJvcHMub3JkZXJlZCA9IG5vZGUub3JkZXJlZDtcbiAgICAgIHByb3BzLnRpZ2h0ID0gIW5vZGUubG9vc2U7XG4gICAgICBwcm9wcy5kZXB0aCA9IG5vZGUuZGVwdGg7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpc3RJdGVtJzpcbiAgICAgIHByb3BzLmNoZWNrZWQgPSBub2RlLmNoZWNrZWQ7XG4gICAgICBwcm9wcy50aWdodCA9ICFub2RlLmxvb3NlO1xuICAgICAgcHJvcHMub3JkZXJlZCA9IG5vZGUub3JkZXJlZDtcbiAgICAgIHByb3BzLmluZGV4ID0gbm9kZS5pbmRleDtcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gZ2V0TGlzdEl0ZW1DaGlsZHJlbihub2RlLCBwYXJlbnQpLm1hcChmdW5jdGlvbiAoY2hpbGROb2RlLCBpKSB7XG4gICAgICAgIHJldHVybiBhc3RUb1JlYWN0KGNoaWxkTm9kZSwgb3B0cywge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgIH0sIGkpO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2RlZmluaXRpb24nOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBpZGVudGlmaWVyOiBub2RlLmlkZW50aWZpZXIsXG4gICAgICAgIHRpdGxlOiBub2RlLnRpdGxlLFxuICAgICAgICB1cmw6IG5vZGUudXJsXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnY29kZSc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIGxhbmd1YWdlOiBub2RlLmxhbmcgJiYgbm9kZS5sYW5nLnNwbGl0KC9cXHMvLCAxKVswXVxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2lubGluZUNvZGUnOlxuICAgICAgcHJvcHMuY2hpbGRyZW4gPSBub2RlLnZhbHVlO1xuICAgICAgcHJvcHMuaW5saW5lID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbGluayc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIHRpdGxlOiBub2RlLnRpdGxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgdGFyZ2V0OiB0eXBlb2Ygb3B0cy5saW5rVGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gb3B0cy5saW5rVGFyZ2V0KG5vZGUudXJsLCBub2RlLmNoaWxkcmVuLCBub2RlLnRpdGxlKSA6IG9wdHMubGlua1RhcmdldCxcbiAgICAgICAgaHJlZjogb3B0cy50cmFuc2Zvcm1MaW5rVXJpID8gb3B0cy50cmFuc2Zvcm1MaW5rVXJpKG5vZGUudXJsLCBub2RlLmNoaWxkcmVuLCBub2RlLnRpdGxlKSA6IG5vZGUudXJsXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBhbHQ6IG5vZGUuYWx0IHx8IHVuZGVmaW5lZCxcbiAgICAgICAgdGl0bGU6IG5vZGUudGl0bGUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBzcmM6IG9wdHMudHJhbnNmb3JtSW1hZ2VVcmkgPyBvcHRzLnRyYW5zZm9ybUltYWdlVXJpKG5vZGUudXJsLCBub2RlLmNoaWxkcmVuLCBub2RlLnRpdGxlLCBub2RlLmFsdCkgOiBub2RlLnVybFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpbmtSZWZlcmVuY2UnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywgeHRlbmQocmVmLCB7XG4gICAgICAgIGhyZWY6IG9wdHMudHJhbnNmb3JtTGlua1VyaSA/IG9wdHMudHJhbnNmb3JtTGlua1VyaShyZWYuaHJlZikgOiByZWYuaHJlZlxuICAgICAgfSkpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbWFnZVJlZmVyZW5jZSc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIHNyYzogb3B0cy50cmFuc2Zvcm1JbWFnZVVyaSAmJiByZWYuaHJlZiA/IG9wdHMudHJhbnNmb3JtSW1hZ2VVcmkocmVmLmhyZWYsIG5vZGUuY2hpbGRyZW4sIHJlZi50aXRsZSwgbm9kZS5hbHQpIDogcmVmLmhyZWYsXG4gICAgICAgIHRpdGxlOiByZWYudGl0bGUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBhbHQ6IG5vZGUuYWx0IHx8IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RhYmxlJzpcbiAgICBjYXNlICd0YWJsZUhlYWQnOlxuICAgIGNhc2UgJ3RhYmxlQm9keSc6XG4gICAgICBwcm9wcy5jb2x1bW5BbGlnbm1lbnQgPSBub2RlLmFsaWduO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0YWJsZVJvdyc6XG4gICAgICBwcm9wcy5pc0hlYWRlciA9IHBhcmVudC5ub2RlLnR5cGUgPT09ICd0YWJsZUhlYWQnO1xuICAgICAgcHJvcHMuY29sdW1uQWxpZ25tZW50ID0gcGFyZW50LnByb3BzLmNvbHVtbkFsaWdubWVudDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGFibGVDZWxsJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgaXNIZWFkZXI6IHBhcmVudC5wcm9wcy5pc0hlYWRlcixcbiAgICAgICAgYWxpZ246IHBhcmVudC5wcm9wcy5jb2x1bW5BbGlnbm1lbnRbaW5kZXhdXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndmlydHVhbEh0bWwnOlxuICAgICAgcHJvcHMudGFnID0gbm9kZS50YWc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgLy8gQHRvZG8gZmluZCBhIGJldHRlciB3YXkgdGhhbiB0aGlzXG4gICAgICBwcm9wcy5pc0Jsb2NrID0gbm9kZS5wb3NpdGlvbi5zdGFydC5saW5lICE9PSBub2RlLnBvc2l0aW9uLmVuZC5saW5lO1xuICAgICAgcHJvcHMuZXNjYXBlSHRtbCA9IG9wdHMuZXNjYXBlSHRtbDtcbiAgICAgIHByb3BzLnNraXBIdG1sID0gb3B0cy5za2lwSHRtbDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncGFyc2VkSHRtbCc6XG4gICAgICB7XG4gICAgICAgIHZhciBwYXJzZWRDaGlsZHJlbjtcblxuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgIHBhcnNlZENoaWxkcmVuID0gbm9kZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXN0VG9SZWFjdChjaGlsZCwgb3B0cywge1xuICAgICAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgICAgICBwcm9wczogcHJvcHNcbiAgICAgICAgICAgIH0sIGkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvcHMuZXNjYXBlSHRtbCA9IG9wdHMuZXNjYXBlSHRtbDtcbiAgICAgICAgcHJvcHMuc2tpcEh0bWwgPSBvcHRzLnNraXBIdG1sO1xuICAgICAgICBwcm9wcy5lbGVtZW50ID0gbWVyZ2VOb2RlQ2hpbGRyZW4obm9kZSwgcGFyc2VkQ2hpbGRyZW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB4dGVuZChub2RlLCB7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9zaXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgY2hpbGRyZW46IHVuZGVmaW5lZFxuICAgICAgfSkpO1xuICB9XG5cbiAgaWYgKCFpc1RhZ1JlbmRlcmVyICYmIG5vZGUudmFsdWUpIHtcbiAgICBwcm9wcy52YWx1ZSA9IG5vZGUudmFsdWU7XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkRlZmluZWQodGFyZ2V0LCBhdHRycykge1xuICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICBpZiAodHlwZW9mIGF0dHJzW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGF0dHJzW2tleV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlTm9kZUNoaWxkcmVuKG5vZGUsIHBhcnNlZENoaWxkcmVuKSB7XG4gIHZhciBlbCA9IG5vZGUuZWxlbWVudDtcblxuICBpZiAoQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICB2YXIgRnJhZ21lbnQgPSBSZWFjdC5GcmFnbWVudCB8fCAnZGl2JztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgZWwpO1xuICB9XG5cbiAgaWYgKGVsLnByb3BzLmNoaWxkcmVuIHx8IHBhcnNlZENoaWxkcmVuKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShlbC5wcm9wcy5jaGlsZHJlbikuY29uY2F0KHBhcnNlZENoaWxkcmVuKTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGVsLCBudWxsLCBjaGlsZHJlbik7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGVsLCBudWxsKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlblBvc2l0aW9uKHBvcykge1xuICByZXR1cm4gW3Bvcy5zdGFydC5saW5lLCAnOicsIHBvcy5zdGFydC5jb2x1bW4sICctJywgcG9zLmVuZC5saW5lLCAnOicsIHBvcy5lbmQuY29sdW1uXS5tYXAoU3RyaW5nKS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0TGlzdEl0ZW1DaGlsZHJlbihub2RlLCBwYXJlbnQpIHtcbiAgaWYgKG5vZGUubG9vc2UpIHtcbiAgICByZXR1cm4gbm9kZS5jaGlsZHJlbjtcbiAgfVxuXG4gIGlmIChwYXJlbnQubm9kZSAmJiBub2RlLmluZGV4ID4gMCAmJiBwYXJlbnQubm9kZS5jaGlsZHJlbltub2RlLmluZGV4IC0gMV0ubG9vc2UpIHtcbiAgICByZXR1cm4gbm9kZS5jaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiB1bndyYXBQYXJhZ3JhcGhzKG5vZGUpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBQYXJhZ3JhcGhzKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uIChhcnJheSwgY2hpbGQpIHtcbiAgICByZXR1cm4gYXJyYXkuY29uY2F0KGNoaWxkLnR5cGUgPT09ICdwYXJhZ3JhcGgnID8gY2hpbGQuY2hpbGRyZW4gfHwgW10gOiBbY2hpbGRdKTtcbiAgfSwgW10pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzdFRvUmVhY3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmlzaXQgPSByZXF1aXJlKCd1bmlzdC11dGlsLXZpc2l0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmlzaXQobm9kZSwgJ3RhYmxlJywgd3JhcCk7XG4gIHJldHVybiBub2RlO1xufTtcblxuZnVuY3Rpb24gd3JhcCh0YWJsZSkge1xuICB2YXIgY2hpbGRyZW4gPSB0YWJsZS5jaGlsZHJlbjtcbiAgdGFibGUuY2hpbGRyZW4gPSBbe1xuICAgIHR5cGU6ICd0YWJsZUhlYWQnLFxuICAgIGFsaWduOiB0YWJsZS5hbGlnbixcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuWzBdXSxcbiAgICBwb3NpdGlvbjogY2hpbGRyZW5bMF0ucG9zaXRpb25cbiAgfV07XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICB0YWJsZS5jaGlsZHJlbi5wdXNoKHtcbiAgICAgIHR5cGU6ICd0YWJsZUJvZHknLFxuICAgICAgYWxpZ246IHRhYmxlLmFsaWduLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLnNsaWNlKDEpLFxuICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgc3RhcnQ6IGNoaWxkcmVuWzFdLnBvc2l0aW9uLnN0YXJ0LFxuICAgICAgICBlbmQ6IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnBvc2l0aW9uLmVuZFxuICAgICAgfVxuICAgIH0pO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldERlZmluaXRpb25zKG5vZGUpIHtcbiAgdmFyIGRlZnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gKG5vZGUuY2hpbGRyZW4gfHwgW10pLnJlZHVjZShmdW5jdGlvbiAoZGVmaW5pdGlvbnMsIGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09ICdkZWZpbml0aW9uJykge1xuICAgICAgZGVmaW5pdGlvbnNbY2hpbGQuaWRlbnRpZmllcl0gPSB7XG4gICAgICAgIGhyZWY6IGNoaWxkLnVybCxcbiAgICAgICAgdGl0bGU6IGNoaWxkLnRpdGxlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBnZXREZWZpbml0aW9ucyhjaGlsZCwgZGVmaW5pdGlvbnMpO1xuICB9LCBkZWZzKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwcm90b2NvbHMgPSBbJ2h0dHAnLCAnaHR0cHMnLCAnbWFpbHRvJywgJ3RlbCddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHVyaVRyYW5zZm9ybWVyKHVyaSkge1xuICB2YXIgdXJsID0gKHVyaSB8fCAnJykudHJpbSgpO1xuICB2YXIgZmlyc3QgPSB1cmwuY2hhckF0KDApO1xuXG4gIGlmIChmaXJzdCA9PT0gJyMnIHx8IGZpcnN0ID09PSAnLycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIGNvbG9uID0gdXJsLmluZGV4T2YoJzonKTtcblxuICBpZiAoY29sb24gPT09IC0xKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBwcm90b2NvbHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBwcm90b2NvbCA9IHByb3RvY29sc1tpbmRleF07XG5cbiAgICBpZiAoY29sb24gPT09IHByb3RvY29sLmxlbmd0aCAmJiB1cmwuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBwcm90b2NvbCkge1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH1cblxuICBpbmRleCA9IHVybC5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBjb2xvbiA+IGluZGV4KSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaW5kZXggIT09IC0xICYmIGNvbG9uID4gaW5kZXgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zY3JpcHQtdXJsXG5cblxuICByZXR1cm4gJ2phdmFzY3JpcHQ6dm9pZCgwKSc7XG59OyIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMsIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHN1cHBvcnRzU3RyaW5nUmVuZGVyID0gcGFyc2VJbnQoKFJlYWN0LnZlcnNpb24gfHwgJzE2Jykuc2xpY2UoMCwgMiksIDEwKSA+PSAxNjtcbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudDtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBicmVhazogJ2JyJyxcbiAgcGFyYWdyYXBoOiAncCcsXG4gIGVtcGhhc2lzOiAnZW0nLFxuICBzdHJvbmc6ICdzdHJvbmcnLFxuICB0aGVtYXRpY0JyZWFrOiAnaHInLFxuICBibG9ja3F1b3RlOiAnYmxvY2txdW90ZScsXG4gIGRlbGV0ZTogJ2RlbCcsXG4gIGxpbms6ICdhJyxcbiAgaW1hZ2U6ICdpbWcnLFxuICBsaW5rUmVmZXJlbmNlOiAnYScsXG4gIGltYWdlUmVmZXJlbmNlOiAnaW1nJyxcbiAgdGFibGU6IFNpbXBsZVJlbmRlcmVyLmJpbmQobnVsbCwgJ3RhYmxlJyksXG4gIHRhYmxlSGVhZDogU2ltcGxlUmVuZGVyZXIuYmluZChudWxsLCAndGhlYWQnKSxcbiAgdGFibGVCb2R5OiBTaW1wbGVSZW5kZXJlci5iaW5kKG51bGwsICd0Ym9keScpLFxuICB0YWJsZVJvdzogU2ltcGxlUmVuZGVyZXIuYmluZChudWxsLCAndHInKSxcbiAgdGFibGVDZWxsOiBUYWJsZUNlbGwsXG4gIHJvb3Q6IFJvb3QsXG4gIHRleHQ6IFRleHRSZW5kZXJlcixcbiAgbGlzdDogTGlzdCxcbiAgbGlzdEl0ZW06IExpc3RJdGVtLFxuICBkZWZpbml0aW9uOiBOdWxsUmVuZGVyZXIsXG4gIGhlYWRpbmc6IEhlYWRpbmcsXG4gIGlubGluZUNvZGU6IElubGluZUNvZGUsXG4gIGNvZGU6IENvZGVCbG9jayxcbiAgaHRtbDogSHRtbCxcbiAgdmlydHVhbEh0bWw6IFZpcnR1YWxIdG1sLFxuICBwYXJzZWRIdG1sOiBQYXJzZWRIdG1sXG59O1xuXG5mdW5jdGlvbiBUZXh0UmVuZGVyZXIocHJvcHMpIHtcbiAgcmV0dXJuIHN1cHBvcnRzU3RyaW5nUmVuZGVyID8gcHJvcHMuY2hpbGRyZW4gOiBjcmVhdGVFbGVtZW50KCdzcGFuJywgbnVsbCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBSb290KHByb3BzKSB7XG4gIHZhciB1c2VGcmFnbWVudCA9ICFwcm9wcy5jbGFzc05hbWU7XG4gIHZhciByb290ID0gdXNlRnJhZ21lbnQgPyBSZWFjdC5GcmFnbWVudCB8fCAnZGl2JyA6ICdkaXYnO1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChyb290LCB1c2VGcmFnbWVudCA/IG51bGwgOiBwcm9wcywgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBTaW1wbGVSZW5kZXJlcih0YWcsIHByb3BzKSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZywgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBUYWJsZUNlbGwocHJvcHMpIHtcbiAgdmFyIHN0eWxlID0gcHJvcHMuYWxpZ24gPyB7XG4gICAgdGV4dEFsaWduOiBwcm9wcy5hbGlnblxuICB9IDogdW5kZWZpbmVkO1xuICB2YXIgY29yZVByb3BzID0gZ2V0Q29yZVByb3BzKHByb3BzKTtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocHJvcHMuaXNIZWFkZXIgPyAndGgnIDogJ3RkJywgc3R5bGUgPyB4dGVuZCh7XG4gICAgc3R5bGU6IHN0eWxlXG4gIH0sIGNvcmVQcm9wcykgOiBjb3JlUHJvcHMsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gSGVhZGluZyhwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChcImhcIi5jb25jYXQocHJvcHMubGV2ZWwpLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIExpc3QocHJvcHMpIHtcbiAgdmFyIGF0dHJzID0gZ2V0Q29yZVByb3BzKHByb3BzKTtcblxuICBpZiAocHJvcHMuc3RhcnQgIT09IG51bGwgJiYgcHJvcHMuc3RhcnQgIT09IDEgJiYgcHJvcHMuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGF0dHJzLnN0YXJ0ID0gcHJvcHMuc3RhcnQudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzLm9yZGVyZWQgPyAnb2wnIDogJ3VsJywgYXR0cnMsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gTGlzdEl0ZW0ocHJvcHMpIHtcbiAgdmFyIGNoZWNrYm94ID0gbnVsbDtcblxuICBpZiAocHJvcHMuY2hlY2tlZCAhPT0gbnVsbCAmJiBwcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY2hlY2tlZCA9IHByb3BzLmNoZWNrZWQ7XG4gICAgY2hlY2tib3ggPSBjcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KCdsaScsIGdldENvcmVQcm9wcyhwcm9wcyksIGNoZWNrYm94LCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIENvZGVCbG9jayhwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMubGFuZ3VhZ2UgJiYgXCJsYW5ndWFnZS1cIi5jb25jYXQocHJvcHMubGFuZ3VhZ2UpO1xuICB2YXIgY29kZSA9IGNyZWF0ZUVsZW1lbnQoJ2NvZGUnLCBjbGFzc05hbWUgPyB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSA6IG51bGwsIHByb3BzLnZhbHVlKTtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ3ByZScsIGdldENvcmVQcm9wcyhwcm9wcyksIGNvZGUpO1xufVxuXG5mdW5jdGlvbiBJbmxpbmVDb2RlKHByb3BzKSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KCdjb2RlJywgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBIdG1sKHByb3BzKSB7XG4gIGlmIChwcm9wcy5za2lwSHRtbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHRhZyA9IHByb3BzLmlzQmxvY2sgPyAnZGl2JyA6ICdzcGFuJztcblxuICBpZiAocHJvcHMuZXNjYXBlSHRtbCkge1xuICAgIHZhciBjb21wID0gUmVhY3QuRnJhZ21lbnQgfHwgdGFnO1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGNvbXAsIG51bGwsIHByb3BzLnZhbHVlKTtcbiAgfVxuXG4gIHZhciBub2RlUHJvcHMgPSB7XG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgIF9faHRtbDogcHJvcHMudmFsdWVcbiAgICB9XG4gIH07XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZywgbm9kZVByb3BzKTtcbn1cblxuZnVuY3Rpb24gUGFyc2VkSHRtbChwcm9wcykge1xuICByZXR1cm4gcHJvcHNbJ2RhdGEtc291cmNlcG9zJ10gPyBSZWFjdC5jbG9uZUVsZW1lbnQocHJvcHMuZWxlbWVudCwge1xuICAgICdkYXRhLXNvdXJjZXBvcyc6IHByb3BzWydkYXRhLXNvdXJjZXBvcyddXG4gIH0pIDogcHJvcHMuZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gVmlydHVhbEh0bWwocHJvcHMpIHtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocHJvcHMudGFnLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIE51bGxSZW5kZXJlcigpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldENvcmVQcm9wcyhwcm9wcykge1xuICByZXR1cm4gcHJvcHNbJ2RhdGEtc291cmNlcG9zJ10gPyB7XG4gICAgJ2RhdGEtc291cmNlcG9zJzogcHJvcHNbJ2RhdGEtc291cmNlcG9zJ11cbiAgfSA6IHt9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgSHRtbFBhcnNlciA9ICdfX1JNRF9IVE1MX1BBUlNFUl9fJztcbmV4cG9ydHMuSHRtbFBhcnNlciA9IHR5cGVvZiBTeW1ib2wgPT09ICd1bmRlZmluZWQnID8gSHRtbFBhcnNlciA6IFN5bWJvbChIdG1sUGFyc2VyKTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjE0LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTtcbmZ1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxrKXtkYT0hMTtlYT1udWxsO2JhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBsPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO2ZhfHwoZmE9ITAsaGE9bCl9fXZhciBsYT1udWxsLG1hPW51bGwsbmE9bnVsbDtcbmZ1bmN0aW9uIG9hKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1uYShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfXZhciBwYT1udWxsLHFhPXt9O1xuZnVuY3Rpb24gcmEoKXtpZihwYSlmb3IodmFyIGEgaW4gcWEpe3ZhciBiPXFhW2FdLGM9cGEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IEVycm9yKHUoOTYsYSkpO2lmKCFzYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyBFcnJvcih1KDk3LGEpKTtzYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO2lmKHRhLmhhc093blByb3BlcnR5KGgpKXRocm93IEVycm9yKHUoOTksaCkpO3RhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnVhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh1YShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2lmKCFlKXRocm93IEVycm9yKHUoOTgsZCxhKSk7fX19fVxuZnVuY3Rpb24gdWEoYSxiLGMpe2lmKHZhW2FdKXRocm93IEVycm9yKHUoMTAwLGEpKTt2YVthXT1iO3dhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHNhPVtdLHRhPXt9LHZhPXt9LHdhPXt9O2Z1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFxYS5oYXNPd25Qcm9wZXJ0eShjKXx8cWFbY10hPT1kKXtpZihxYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7cWFbY109ZDtiPSEwfX1iJiZyYSgpfXZhciB5YT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksemE9bnVsbCxBYT1udWxsLEJhPW51bGw7XG5mdW5jdGlvbiBDYShhKXtpZihhPW1hKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgemEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1sYShiKSx6YShhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYShhKXtBYT9CYT9CYS5wdXNoKGEpOkJhPVthXTpBYT1hfWZ1bmN0aW9uIEVhKCl7aWYoQWEpe3ZhciBhPUFhLGI9QmE7QmE9QWE9bnVsbDtDYShhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQ2EoYlthXSl9fWZ1bmN0aW9uIEZhKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2EoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBIYSgpe312YXIgSWE9RmEsSmE9ITEsS2E9ITE7ZnVuY3Rpb24gTGEoKXtpZihudWxsIT09QWF8fG51bGwhPT1CYSlIYSgpLEVhKCl9XG5mdW5jdGlvbiBNYShhLGIsYyl7aWYoS2EpcmV0dXJuIGEoYixjKTtLYT0hMDt0cnl7cmV0dXJuIElhKGEsYixjKX1maW5hbGx5e0thPSExLExhKCl9fXZhciBOYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sT2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxQYT17fSxRYT17fTtcbmZ1bmN0aW9uIFJhKGEpe2lmKE9hLmNhbGwoUWEsYSkpcmV0dXJuITA7aWYoT2EuY2FsbChQYSxhKSlyZXR1cm4hMTtpZihOYS50ZXN0KGEpKXJldHVybiBRYVthXT0hMDtQYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBTYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFRhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fFNhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEM9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07Q1tiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIFVhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsXG5WYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5DLnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7dmFyIFdhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChXYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xuZnVuY3Rpb24gWGEoYSxiLGMsZCl7dmFyIGU9Qy5oYXNPd25Qcm9wZXJ0eShiKT9DW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoVGEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP1JhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgWWE9L14oLiopW1xcXFxcXC9dLyxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmE9RT9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2I9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGI9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2I9RT9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLGpiPUU/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsa2I9RT9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixsYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxtYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbmIoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPW1iJiZhW21iXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIG9iKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gcGIoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2I6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYjpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYjpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYjpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2I6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpiOnJldHVybiBwYihhLnR5cGUpO2Nhc2UgbGI6cmV0dXJuIHBiKGEucmVuZGVyKTtjYXNlIGtiOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gcGIoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcWIoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPXBiKGEudHlwZSk7Yz1udWxsO2QmJihjPXBiKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoWWEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHJiKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBzYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gdGIoYSl7dmFyIGI9c2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHhiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj10YihhKSl9ZnVuY3Rpb24geWIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXNiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gemIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9cmIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlhhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYihhLGIpe0JiKGEsYik7dmFyIGM9cmIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGIoYSxiLnR5cGUscmIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRGIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIEZiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdiKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3JiKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IodSg5MSkpO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHUoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih1KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6cmIoYyl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1yYihiLnZhbHVlKSxkPXJiKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTGIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgTWI9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGIsUWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TWIuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UGI9UGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gUmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBTYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYj17YW5pbWF0aW9uZW5kOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2IoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYj17fSxWYj17fTtcbnlhJiYoVmI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYihhKXtpZihVYlthXSlyZXR1cm4gVWJbYV07aWYoIVRiW2FdKXJldHVybiBhO3ZhciBiPVRiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZiKXJldHVybiBVYlthXT1iW2NdO3JldHVybiBhfVxudmFyIFhiPVdiKFwiYW5pbWF0aW9uZW5kXCIpLFliPVdiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFpiPVdiKFwiYW5pbWF0aW9uc3RhcnRcIiksJGI9V2IoXCJ0cmFuc2l0aW9uZW5kXCIpLGFjPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYz1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiBjYyhhKXt2YXIgYj1iYy5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IE1hcCxiYy5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBlYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGZjKGEpe2lmKGRjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGdjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWRjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGZjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGZjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGMoYSl7YT1nYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGljKGEsYil7aWYobnVsbD09Yil0aHJvdyBFcnJvcih1KDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIGpjKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBrYz1udWxsO1xuZnVuY3Rpb24gbGMoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKW9hKGEsYltkXSxjW2RdKTtlbHNlIGImJm9hKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBtYyhhKXtudWxsIT09YSYmKGtjPWljKGtjLGEpKTthPWtjO2tjPW51bGw7aWYoYSl7amMoYSxsYyk7aWYoa2MpdGhyb3cgRXJyb3IodSg5NSkpO2lmKGZhKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO319XG5mdW5jdGlvbiBuYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gb2MoYSl7aWYoIXlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBwYz1bXTtmdW5jdGlvbiBxYyhhKXthLnRvcExldmVsVHlwZT1udWxsO2EubmF0aXZlRXZlbnQ9bnVsbDthLnRhcmdldEluc3Q9bnVsbDthLmFuY2VzdG9ycy5sZW5ndGg9MDsxMD5wYy5sZW5ndGgmJnBjLnB1c2goYSl9XG5mdW5jdGlvbiByYyhhLGIsYyxkKXtpZihwYy5sZW5ndGgpe3ZhciBlPXBjLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWQ7ZS5uYXRpdmVFdmVudD1iO2UudGFyZ2V0SW5zdD1jO3JldHVybiBlfXJldHVybnt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfX1cbmZ1bmN0aW9uIHNjKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ9YztpZigzPT09ZC50YWcpZD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Vsc2V7Zm9yKDtkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm99aWYoIWQpYnJlYWs7Yj1jLnRhZzs1IT09YiYmNiE9PWJ8fGEuYW5jZXN0b3JzLnB1c2goYyk7Yz10YyhkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1uYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO3ZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3M7MD09PWMmJihnfD02NCk7Zm9yKHZhciBoPW51bGwsaz0wO2s8c2EubGVuZ3RoO2srKyl7dmFyIGw9c2Fba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD1cbmljKGgsbCkpfW1jKGgpfX1mdW5jdGlvbiB1YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOnZjKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjp2YyhiLFwiZm9jdXNcIiwhMCk7dmMoYixcImJsdXJcIiwhMCk7Yy5zZXQoXCJibHVyXCIsbnVsbCk7Yy5zZXQoXCJmb2N1c1wiLG51bGwpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpvYyhhKSYmdmMoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWMuaW5kZXhPZihhKSYmRihhLGIpfWMuc2V0KGEsbnVsbCl9fVxudmFyIHdjLHhjLHljLHpjPSExLEFjPVtdLEJjPW51bGwsQ2M9bnVsbCxEYz1udWxsLEVjPW5ldyBNYXAsRmM9bmV3IE1hcCxHYz1bXSxIYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNsb3NlIGNhbmNlbCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpLEljPVwiZm9jdXMgYmx1ciBkcmFnZW50ZXIgZHJhZ2xlYXZlIG1vdXNlb3ZlciBtb3VzZW91dCBwb2ludGVyb3ZlciBwb2ludGVyb3V0IGdvdHBvaW50ZXJjYXB0dXJlIGxvc3Rwb2ludGVyY2FwdHVyZVwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIEpjKGEsYil7dmFyIGM9Y2MoYik7SGMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KTtJYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pfWZ1bmN0aW9uIEtjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDplLGNvbnRhaW5lcjpkfX1cbmZ1bmN0aW9uIExjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6QmM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkNjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOkRjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpFYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpGYy5kZWxldGUoYi5wb2ludGVySWQpfX1mdW5jdGlvbiBNYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPUtjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPU5jKGIpLG51bGwhPT1iJiZ4YyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBPYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gQmM9TWMoQmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIENjPU1jKENjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBEYz1NYyhEYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO0VjLnNldChmLE1jKEVjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxGYy5zZXQoZixNYyhGYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBQYyhhKXt2YXIgYj10YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWRjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWVjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXt5YyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gUWMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9TmMoYik7bnVsbCE9PWMmJnhjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBTYyhhLGIsYyl7UWMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFRjKCl7Zm9yKHpjPSExOzA8QWMubGVuZ3RoOyl7dmFyIGE9QWNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPU5jKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmd2MoYSk7YnJlYWt9dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6QWMuc2hpZnQoKX1udWxsIT09QmMmJlFjKEJjKSYmKEJjPW51bGwpO251bGwhPT1DYyYmUWMoQ2MpJiYoQ2M9bnVsbCk7bnVsbCE9PURjJiZRYyhEYykmJihEYz1udWxsKTtFYy5mb3JFYWNoKFNjKTtGYy5mb3JFYWNoKFNjKX1mdW5jdGlvbiBVYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsemN8fCh6Yz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxUYykpKX1cbmZ1bmN0aW9uIFZjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIFVjKGIsYSl9aWYoMDxBYy5sZW5ndGgpe1VjKEFjWzBdLGEpO2Zvcih2YXIgYz0xO2M8QWMubGVuZ3RoO2MrKyl7dmFyIGQ9QWNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1CYyYmVWMoQmMsYSk7bnVsbCE9PUNjJiZVYyhDYyxhKTtudWxsIT09RGMmJlVjKERjLGEpO0VjLmZvckVhY2goYik7RmMuZm9yRWFjaChiKTtmb3IoYz0wO2M8R2MubGVuZ3RoO2MrKylkPUdjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxHYy5sZW5ndGgmJihjPUdjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVBjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmR2Muc2hpZnQoKX1cbnZhciBXYz17fSxZYz1uZXcgTWFwLFpjPW5ldyBNYXAsJGM9W1wiYWJvcnRcIixcImFib3J0XCIsWGIsXCJhbmltYXRpb25FbmRcIixZYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiLFpiLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFxuXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsJGIsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIGFkKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdLGY9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7Zj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZixjYXB0dXJlZDpmK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2RdLGV2ZW50UHJpb3JpdHk6Yn07WmMuc2V0KGQsYik7WWMuc2V0KGQsZik7V2NbZV09Zn19XG5hZChcImJsdXIgYmx1ciBjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1cyBmb2N1cyBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLDApO1xuYWQoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7YWQoJGMsMik7Zm9yKHZhciBiZD1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksY2Q9MDtjZDxiZC5sZW5ndGg7Y2QrKylaYy5zZXQoYmRbY2RdLDApO1xudmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gRihhLGIpe3ZjKGIsYSwhMSl9ZnVuY3Rpb24gdmMoYSxiLGMpe3ZhciBkPVpjLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZD8yOmQpe2Nhc2UgMDpkPWdkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7Y2FzZSAxOmQ9aGQuYmluZChudWxsLGIsMSxhKTticmVhaztkZWZhdWx0OmQ9aWQuYmluZChudWxsLGIsMSxhKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIGdkKGEsYixjLGQpe0phfHxIYSgpO3ZhciBlPWlkLGY9SmE7SmE9ITA7dHJ5e0dhKGUsYSxiLGMsZCl9ZmluYWxseXsoSmE9Zil8fExhKCl9fWZ1bmN0aW9uIGhkKGEsYixjLGQpe2VkKGRkLGlkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBpZChhLGIsYyxkKXtpZihmZClpZigwPEFjLmxlbmd0aCYmLTE8SGMuaW5kZXhPZihhKSlhPUtjKG51bGwsYSxiLGMsZCksQWMucHVzaChhKTtlbHNle3ZhciBlPVJjKGEsYixjLGQpO2lmKG51bGw9PT1lKUxjKGEsZCk7ZWxzZSBpZigtMTxIYy5pbmRleE9mKGEpKWE9S2MoZSxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2UgaWYoIU9jKGUsYSxiLGMsZCkpe0xjKGEsZCk7YT1yYyhhLGQsbnVsbCxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX19fX1cbmZ1bmN0aW9uIFJjKGEsYixjLGQpe2M9bmMoZCk7Yz10YyhjKTtpZihudWxsIT09Yyl7dmFyIGU9ZGMoYyk7aWYobnVsbD09PWUpYz1udWxsO2Vsc2V7dmFyIGY9ZS50YWc7aWYoMTM9PT1mKXtjPWVjKGUpO2lmKG51bGwhPT1jKXJldHVybiBjO2M9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihlLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZS50YWc/ZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2M9bnVsbH1lbHNlIGUhPT1jJiYoYz1udWxsKX19YT1yYyhhLGQsYyxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX1yZXR1cm4gbnVsbH1cbnZhciBqZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxrZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoamQpLmZvckVhY2goZnVuY3Rpb24oYSl7a2QuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtqZFtiXT1qZFthXX0pfSk7ZnVuY3Rpb24gbGQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGpkLmhhc093blByb3BlcnR5KGEpJiZqZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBtZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1sZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBuZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gb2QoYSxiKXtpZihiKXtpZihuZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIHBkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgcWQ9TWIuaHRtbDtmdW5jdGlvbiByZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1jYyhhKTtiPXdhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXVjKGJbZF0sYSxjKX1mdW5jdGlvbiBzZCgpe31cbmZ1bmN0aW9uIHRkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiB1ZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gdmQoYSxiKXt2YXIgYz11ZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz11ZChjKX19XG5mdW5jdGlvbiB3ZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP3dkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiB4ZCgpe2Zvcih2YXIgYT13aW5kb3csYj10ZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj10ZChhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIHlkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIHpkPVwiJFwiLEFkPVwiLyRcIixCZD1cIiQ/XCIsQ2Q9XCIkIVwiLERkPW51bGwsRWQ9bnVsbDtmdW5jdGlvbiBGZChhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBHZChhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIEhkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLElkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBKZChhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIEtkKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PXpkfHxjPT09Q2R8fGM9PT1CZCl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PUFkJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTGQ9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTWQ9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMZCxOZD1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xkLE9kPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrTGQ7XG5mdW5jdGlvbiB0YyhhKXt2YXIgYj1hW01kXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tPZF18fGNbTWRdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9S2QoYSk7bnVsbCE9PWE7KXtpZihjPWFbTWRdKXJldHVybiBjO2E9S2QoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIE5jKGEpe2E9YVtNZF18fGFbT2RdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBQZChhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiBRZChhKXtyZXR1cm4gYVtOZF18fG51bGx9XG5mdW5jdGlvbiBSZChhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gU2QoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1sYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgyMzEsXG5iLHR5cGVvZiBjKSk7cmV0dXJuIGN9ZnVuY3Rpb24gVGQoYSxiLGMpe2lmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBVZChhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPVJkKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylUZChjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKVRkKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gVmQoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBXZChhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZkKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBYZChhKXtqYyhhLFVkKX12YXIgWWQ9bnVsbCxaZD1udWxsLCRkPW51bGw7XG5mdW5jdGlvbiBhZSgpe2lmKCRkKXJldHVybiAkZDt2YXIgYSxiPVpkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuICRkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gYmUoKXtyZXR1cm4hMH1mdW5jdGlvbiBjZSgpe3JldHVybiExfVxuZnVuY3Rpb24gRyhhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/YmU6Y2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jZTtyZXR1cm4gdGhpc31cbm4oRy5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1iZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1iZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1iZX0saXNQZXJzaXN0ZW50OmNlLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWNlO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7Ry5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5HLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2RlKGMpO3JldHVybiBjfTtkZShHKTtmdW5jdGlvbiBlZShhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGZlKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGRlKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWVlO2EucmVsZWFzZT1mZX12YXIgZ2U9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGhlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxpZT1bOSwxMywyNywzMl0samU9eWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGtlPW51bGw7eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGtlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgbGU9eWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFrZSxtZT15YSYmKCFqZXx8a2UmJjg8a2UmJjExPj1rZSksbmU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksb2U9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0scGU9ITE7XG5mdW5jdGlvbiBxZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PWllLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gcmUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgc2U9ITE7ZnVuY3Rpb24gdGUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHJlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtwZT0hMDtyZXR1cm4gbmU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09bmUmJnBlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHVlKGEsYil7aWYoc2UpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWplJiZxZShhLGIpPyhhPWFlKCksJGQ9WmQ9WWQ9bnVsbCxzZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gbWUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHZlPXtldmVudFR5cGVzOm9lLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoamUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGY9b2UuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmY9b2UuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpmPW9lLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBzZT9xZShhLGMpJiYoZj1vZS5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPW9lLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KG1lJiZcImtvXCIhPT1jLmxvY2FsZSYmKHNlfHxmIT09b2UuY29tcG9zaXRpb25TdGFydD9mPT09b2UuY29tcG9zaXRpb25FbmQmJnNlJiYoZT1hZSgpKTooWWQ9ZCxaZD1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxzZT0hMCkpLGY9Z2UuZ2V0UG9vbGVkKGYsXG5iLGMsZCksZT9mLmRhdGE9ZTooZT1yZShjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksWGQoZiksZT1mKTplPW51bGw7KGE9bGU/dGUoYSxjKTp1ZShhLGMpKT8oYj1oZS5nZXRQb29sZWQob2UuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFhkKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1lP2I6bnVsbD09PWI/ZTpbZSxiXX19LHdlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIHhlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhd2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxudmFyIHllPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIHplKGEsYixjKXthPUcuZ2V0UG9vbGVkKHllLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RGEoYyk7WGQoYSk7cmV0dXJuIGF9dmFyIEFlPW51bGwsQmU9bnVsbDtmdW5jdGlvbiBDZShhKXttYyhhKX1mdW5jdGlvbiBEZShhKXt2YXIgYj1QZChhKTtpZih5YihiKSlyZXR1cm4gYX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBGZT0hMTt5YSYmKEZlPW9jKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO1xuZnVuY3Rpb24gR2UoKXtBZSYmKEFlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSxCZT1BZT1udWxsKX1mdW5jdGlvbiBIZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmRGUoQmUpKWlmKGE9emUoQmUsYSxuYyhhKSksSmEpbWMoYSk7ZWxzZXtKYT0hMDt0cnl7RmEoQ2UsYSl9ZmluYWxseXtKYT0hMSxMYSgpfX19ZnVuY3Rpb24gSWUoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEdlKCksQWU9YixCZT1jLEFlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSk6XCJibHVyXCI9PT1hJiZHZSgpfWZ1bmN0aW9uIEplKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIERlKEJlKX1mdW5jdGlvbiBLZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIERlKGIpfWZ1bmN0aW9uIExlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIERlKGIpfVxudmFyIE1lPXtldmVudFR5cGVzOnllLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6RmUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1BkKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9RWU7ZWxzZSBpZih4ZShlKSlpZihGZSlnPUxlO2Vsc2V7Zz1KZTt2YXIgaD1JZX1lbHNlKGY9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGc9S2UpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIHplKGcsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGIoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sTmU9Ry5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFxuT2U9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBlKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2VbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBRZSgpe3JldHVybiBQZX1cbnZhciBSZT0wLFNlPTAsVGU9ITEsVWU9ITEsVmU9TmUuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVJlO1JlPWEuc2NyZWVuWDtyZXR1cm4gVGU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihUZT0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVNlO1NlPWEuc2NyZWVuWTtyZXR1cm4gVWU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihVZT0hMCwwKX19KSxXZT1WZS5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksWGU9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LFllPXtldmVudFR5cGVzOlhlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGUmMzIpJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO2Y9ZC53aW5kb3c9PT1kP2Q6KGY9ZC5vd25lckRvY3VtZW50KT9mLmRlZmF1bHRWaWV3fHxmLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/dGMoYik6bnVsbCxudWxsIT09Yil7dmFyIGg9ZGMoYik7aWYoYiE9PWh8fDUhPT1iLnRhZyYmNiE9PWIudGFnKWI9bnVsbH19ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PVxuYSl7dmFyIGs9VmU7dmFyIGw9WGUubW91c2VMZWF2ZTt2YXIgbT1YZS5tb3VzZUVudGVyO3ZhciBwPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlrPVdlLGw9WGUucG9pbnRlckxlYXZlLG09WGUucG9pbnRlckVudGVyLHA9XCJwb2ludGVyXCI7YT1udWxsPT1nP2Y6UGQoZyk7Zj1udWxsPT1iP2Y6UGQoYik7bD1rLmdldFBvb2xlZChsLGcsYyxkKTtsLnR5cGU9cCtcImxlYXZlXCI7bC50YXJnZXQ9YTtsLnJlbGF0ZWRUYXJnZXQ9ZjtjPWsuZ2V0UG9vbGVkKG0sYixjLGQpO2MudHlwZT1wK1wiZW50ZXJcIjtjLnRhcmdldD1mO2MucmVsYXRlZFRhcmdldD1hO2Q9ZztwPWI7aWYoZCYmcClhOntrPWQ7bT1wO2c9MDtmb3IoYT1rO2E7YT1SZChhKSlnKys7YT0wO2ZvcihiPW07YjtiPVJkKGIpKWErKztmb3IoOzA8Zy1hOylrPVJkKGspLGctLTtmb3IoOzA8YS1nOyltPVJkKG0pLGEtLTtmb3IoO2ctLTspe2lmKGs9PT1tfHxrPT09bS5hbHRlcm5hdGUpYnJlYWsgYTtcbms9UmQoayk7bT1SZChtKX1rPW51bGx9ZWxzZSBrPW51bGw7bT1rO2ZvcihrPVtdO2QmJmQhPT1tOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ay5wdXNoKGQpO2Q9UmQoZCl9Zm9yKGQ9W107cCYmcCE9PW07KXtnPXAuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztkLnB1c2gocCk7cD1SZChwKX1mb3IocD0wO3A8ay5sZW5ndGg7cCsrKVZkKGtbcF0sXCJidWJibGVkXCIsbCk7Zm9yKHA9ZC5sZW5ndGg7MDxwLS07KVZkKGRbcF0sXCJjYXB0dXJlZFwiLGMpO3JldHVybiAwPT09KGUmNjQpP1tsXTpbbCxjXX19O2Z1bmN0aW9uIFplKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgJGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6WmUsYWY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGJmKGEsYil7aWYoJGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFhZi5jYWxsKGIsY1tkXSl8fCEkZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfVxudmFyIGNmPXlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGY9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVmPW51bGwsZmY9bnVsbCxnZj1udWxsLGhmPSExO1xuZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZnx8bnVsbD09ZWZ8fGVmIT09dGQoYykpcmV0dXJuIG51bGw7Yz1lZjtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZ5ZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZiYmYmYoZ2YsYyk/bnVsbDooZ2Y9YyxhPUcuZ2V0UG9vbGVkKGRmLnNlbGVjdCxmZixhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVmLFhkKGEpLGEpfVxudmFyIGtmPXtldmVudFR5cGVzOmRmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2U9Znx8KGQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KTtpZighKGY9IWUpKXthOntlPWNjKGUpO2Y9d2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspaWYoIWUuaGFzKGZbZ10pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1BkKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoeGUoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWY9ZSxmZj1iLGdmPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZj1mZj1lZj1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZj0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhmPSExLGpmKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNmKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gamYoYyxkKX1yZXR1cm4gbnVsbH19LGxmPUcuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxtZj1HLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLG5mPU5lLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gb2YoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcGY9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHFmPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxyZj1OZS5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cGZbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2YoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3FmW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZihhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZihhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHNmPVZlLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx0Zj1OZS5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZX0pLHVmPUcuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHZmPVZlLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksd2Y9e2V2ZW50VHlwZXM6V2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1ZYy5nZXQoYSk7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZihjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9cmY7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPW5mO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9XG5WZTticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPXNmO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dGY7YnJlYWs7Y2FzZSBYYjpjYXNlIFliOmNhc2UgWmI6YT1sZjticmVhaztjYXNlICRiOmE9dWY7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9TmU7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT12ZjticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW1mO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9XG5XZTticmVhaztkZWZhdWx0OmE9R31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1hkKGIpO3JldHVybiBifX07aWYocGEpdGhyb3cgRXJyb3IodSgxMDEpKTtwYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtyYSgpO3ZhciB4Zj1OYztsYT1RZDttYT14ZjtuYT1QZDt4YSh7U2ltcGxlRXZlbnRQbHVnaW46d2YsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOlllLENoYW5nZUV2ZW50UGx1Z2luOk1lLFNlbGVjdEV2ZW50UGx1Z2luOmtmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46dmV9KTt2YXIgeWY9W10semY9LTE7ZnVuY3Rpb24gSChhKXswPnpmfHwoYS5jdXJyZW50PXlmW3pmXSx5Zlt6Zl09bnVsbCx6Zi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXt6ZisrO3lmW3pmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEFmPXt9LEo9e2N1cnJlbnQ6QWZ9LEs9e2N1cnJlbnQ6ITF9LEJmPUFmO2Z1bmN0aW9uIENmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQWY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRGYoKXtIKEspO0goSil9ZnVuY3Rpb24gRWYoYSxiLGMpe2lmKEouY3VycmVudCE9PUFmKXRocm93IEVycm9yKHUoMTY4KSk7SShKLGIpO0koSyxjKX1mdW5jdGlvbiBGZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LHBiKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBHZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8QWY7QmY9Si5jdXJyZW50O0koSixhKTtJKEssSy5jdXJyZW50KTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEhmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih1KDE2OSkpO2M/KGE9RmYoYSxiLEJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChLKSxIKEopLEkoSixhKSk6SChLKTtJKEssYyl9XG52YXIgSWY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksSmY9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEtmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssTGY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsTWY9ci51bnN0YWJsZV9ub3csTmY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxPZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFBmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksUWY9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxSZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFNmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFRmPXt9LFVmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsVmY9dm9pZCAwIT09TGY/TGY6ZnVuY3Rpb24oKXt9LFdmPW51bGwsWGY9bnVsbCxZZj0hMSxaZj1NZigpLCRmPTFFND5aZj9NZjpmdW5jdGlvbigpe3JldHVybiBNZigpLVpmfTtcbmZ1bmN0aW9uIGFnKCl7c3dpdGNoKE5mKCkpe2Nhc2UgT2Y6cmV0dXJuIDk5O2Nhc2UgUGY6cmV0dXJuIDk4O2Nhc2UgUWY6cmV0dXJuIDk3O2Nhc2UgUmY6cmV0dXJuIDk2O2Nhc2UgU2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBPZjtjYXNlIDk4OnJldHVybiBQZjtjYXNlIDk3OnJldHVybiBRZjtjYXNlIDk2OnJldHVybiBSZjtjYXNlIDk1OnJldHVybiBTZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBjZyhhLGIpe2E9YmcoYSk7cmV0dXJuIElmKGEsYil9ZnVuY3Rpb24gZGcoYSxiLGMpe2E9YmcoYSk7cmV0dXJuIEpmKGEsYixjKX1mdW5jdGlvbiBlZyhhKXtudWxsPT09V2Y/KFdmPVthXSxYZj1KZihPZixmZykpOldmLnB1c2goYSk7cmV0dXJuIFRmfWZ1bmN0aW9uIGdnKCl7aWYobnVsbCE9PVhmKXt2YXIgYT1YZjtYZj1udWxsO0tmKGEpfWZnKCl9XG5mdW5jdGlvbiBmZygpe2lmKCFZZiYmbnVsbCE9PVdmKXtZZj0hMDt2YXIgYT0wO3RyeXt2YXIgYj1XZjtjZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7V2Y9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09V2YmJihXZj1XZi5zbGljZShhKzEpKSxKZihPZixnZyksYzt9ZmluYWxseXtZZj0hMX19fWZ1bmN0aW9uIGhnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIGlnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBqZz17Y3VycmVudDpudWxsfSxrZz1udWxsLGxnPW51bGwsbWc9bnVsbDtmdW5jdGlvbiBuZygpe21nPWxnPWtnPW51bGx9XG5mdW5jdGlvbiBvZyhhKXt2YXIgYj1qZy5jdXJyZW50O0goamcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gcWcoYSxiKXtrZz1hO21nPWxnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHJnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7aWYobWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKW1nPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1sZyl7aWYobnVsbD09PWtnKXRocm93IEVycm9yKHUoMzA4KSk7bGc9YjtrZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIGxnPWxnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB0Zz0hMTtmdW5jdGlvbiB1ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGJhc2VRdWV1ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gdmcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsYmFzZVF1ZXVlOmEuYmFzZVF1ZXVlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHdnKGEsYil7YT17ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH07cmV0dXJuIGEubmV4dD1hfWZ1bmN0aW9uIHhnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmdmcoYyxhKTthPWEudXBkYXRlUXVldWU7Yz1hLmJhc2VRdWV1ZTtudWxsPT09Yz8oYS5iYXNlUXVldWU9Yi5uZXh0PWIsYi5uZXh0PWIpOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKX1cbmZ1bmN0aW9uIHpnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7dGc9ITE7dmFyIGY9ZS5iYXNlUXVldWUsZz1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1nKXtpZihudWxsIT09Zil7dmFyIGg9Zi5uZXh0O2YubmV4dD1nLm5leHQ7Zy5uZXh0PWh9Zj1nO2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDtoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiYoaD1oLnVwZGF0ZVF1ZXVlLG51bGwhPT1oJiYoaC5iYXNlUXVldWU9ZykpfWlmKG51bGwhPT1mKXtoPWYubmV4dDt2YXIgaz1lLmJhc2VTdGF0ZSxsPTAsbT1udWxsLHA9bnVsbCx4PW51bGw7aWYobnVsbCE9PWgpe3ZhciB6PWg7ZG97Zz16LmV4cGlyYXRpb25UaW1lO2lmKGc8ZCl7dmFyIGNhPXtleHBpcmF0aW9uVGltZTp6LmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09eD8ocD14PVxuY2EsbT1rKTp4PXgubmV4dD1jYTtnPmwmJihsPWcpfWVsc2V7bnVsbCE9PXgmJih4PXgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH0pO0FnKGcsei5zdXNwZW5zZUNvbmZpZyk7YTp7dmFyIEQ9YSx0PXo7Zz1iO2NhPWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6RD10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEQpe2s9RC5jYWxsKGNhLGssZyk7YnJlYWsgYX1rPUQ7YnJlYWsgYTtjYXNlIDM6RC5lZmZlY3RUYWc9RC5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOkQ9dC5wYXlsb2FkO2c9XCJmdW5jdGlvblwiPT09dHlwZW9mIEQ/RC5jYWxsKGNhLGssZyk6RDtpZihudWxsPT09Z3x8dm9pZCAwPT09ZylicmVhayBhO2s9bih7fSxrLGcpO2JyZWFrIGE7Y2FzZSAyOnRnPSEwfX1udWxsIT09ei5jYWxsYmFjayYmXG4oYS5lZmZlY3RUYWd8PTMyLGc9ZS5lZmZlY3RzLG51bGw9PT1nP2UuZWZmZWN0cz1bel06Zy5wdXNoKHopKX16PXoubmV4dDtpZihudWxsPT09enx8ej09PWgpaWYoZz1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1nKWJyZWFrO2Vsc2Ugej1mLm5leHQ9Zy5uZXh0LGcubmV4dD1oLGUuYmFzZVF1ZXVlPWY9ZyxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSl9bnVsbD09PXg/bT1rOngubmV4dD1wO2UuYmFzZVN0YXRlPW07ZS5iYXNlUXVldWU9eDtCZyhsKTthLmV4cGlyYXRpb25UaW1lPWw7YS5tZW1vaXplZFN0YXRlPWt9fVxuZnVuY3Rpb24gQ2coYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1lO2U9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCl0aHJvdyBFcnJvcih1KDE5MSxkKSk7ZC5jYWxsKGUpfX19dmFyIERnPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEVnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIEZnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEuZXhwaXJhdGlvblRpbWUmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBKZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZGMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPUdnKCksZD1EZy5zdXNwZW5zZTtcbmM9SGcoYyxhLGQpO2Q9d2coYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTt4ZyhhLGQpO0lnKGEsYyl9fTtmdW5jdGlvbiBLZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFiZihjLGQpfHwhYmYoZSxmKTohMH1cbmZ1bmN0aW9uIExnKGEsYixjKXt2YXIgZD0hMSxlPUFmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXNnKGYpOihlPUwoYik/QmY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/Q2YoYSxlKTpBZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUpnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWc7dWcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1zZyhmKTooZj1MKGIpP0JmOkouY3VycmVudCxlLmNvbnRleHQ9Q2YoYSxmKSk7emcoYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHpnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgT2c9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFBnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1FZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUWcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uIFJnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVNnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVBnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1VZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1QZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVZnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1XZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVRnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjPVVnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVBnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYTpyZXR1cm4gYj1WZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoT2coYil8fFxubmIoYikpcmV0dXJuIGI9V2coYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE9nKGMpfHxuYihjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE9nKGQpfHxuYihkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBjYShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsbT1nLHk9Zz0wLEE9bnVsbDtudWxsIT09bSYmeTxoLmxlbmd0aDt5Kyspe20uaW5kZXg+eT8oQT1tLG09bnVsbCk6QT1tLnNpYmxpbmc7dmFyIHE9eChlLG0saFt5XSxrKTtpZihudWxsPT09cSl7bnVsbD09PW0mJihtPUEpO2JyZWFrfWEmJlxubSYmbnVsbD09PXEuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHEsZyx5KTtudWxsPT09dD9sPXE6dC5zaWJsaW5nPXE7dD1xO209QX1pZih5PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxsO2lmKG51bGw9PT1tKXtmb3IoO3k8aC5sZW5ndGg7eSsrKW09cChlLGhbeV0sayksbnVsbCE9PW0mJihnPWYobSxnLHkpLG51bGw9PT10P2w9bTp0LnNpYmxpbmc9bSx0PW0pO3JldHVybiBsfWZvcihtPWQoZSxtKTt5PGgubGVuZ3RoO3krKylBPXoobSxlLHksaFt5XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PUEua2V5P3k6QS5rZXkpLGc9ZihBLGcseSksbnVsbD09PXQ/bD1BOnQuc2libGluZz1BLHQ9QSk7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBEKGUsZyxoLGwpe3ZhciBrPW5iKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBrKXRocm93IEVycm9yKHUoMTUwKSk7aD1rLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWs9bnVsbCx0PWcseT1nPTAsQT1udWxsLHE9aC5uZXh0KCk7bnVsbCE9PXQmJiFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpe3QuaW5kZXg+eT8oQT10LHQ9bnVsbCk6QT10LnNpYmxpbmc7dmFyIEQ9eChlLHQscS52YWx1ZSxsKTtpZihudWxsPT09RCl7bnVsbD09PXQmJih0PUEpO2JyZWFrfWEmJnQmJm51bGw9PT1ELmFsdGVybmF0ZSYmYihlLHQpO2c9ZihELGcseSk7bnVsbD09PW0/az1EOm0uc2libGluZz1EO209RDt0PUF9aWYocS5kb25lKXJldHVybiBjKGUsdCksaztpZihudWxsPT09dCl7Zm9yKDshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9cChlLHEudmFsdWUsbCksbnVsbCE9PXEmJihnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO3JldHVybiBrfWZvcih0PWQoZSx0KTshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9eih0LGUseSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoYSYmbnVsbCE9PVxucS5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1xLmtleT95OnEua2V5KSxnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGt9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFphOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09YWIpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsXG5rLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMpO2QucmVmPVBnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YWI/KGQ9V2coZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVVnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVBnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1cbmQuc2libGluZ31kPVZnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVRnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE9nKGYpKXJldHVybiBjYShhLGQsZixoKTtpZihuYihmKSlyZXR1cm4gRChhLGQsZixoKTtsJiZRZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLEVycm9yKHUoMTUyLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWGc9UmcoITApLFlnPVJnKCExKSxaZz17fSwkZz17Y3VycmVudDpaZ30sYWg9e2N1cnJlbnQ6Wmd9LGJoPXtjdXJyZW50OlpnfTtcbmZ1bmN0aW9uIGNoKGEpe2lmKGE9PT1aZyl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGRoKGEsYil7SShiaCxiKTtJKGFoLGEpO0koJGcsWmcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6T2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPU9iKGIsYSl9SCgkZyk7SSgkZyxiKX1mdW5jdGlvbiBlaCgpe0goJGcpO0goYWgpO0goYmgpfWZ1bmN0aW9uIGZoKGEpe2NoKGJoLmN1cnJlbnQpO3ZhciBiPWNoKCRnLmN1cnJlbnQpO3ZhciBjPU9iKGIsYS50eXBlKTtiIT09YyYmKEkoYWgsYSksSSgkZyxjKSl9ZnVuY3Rpb24gZ2goYSl7YWguY3VycmVudD09PWEmJihIKCRnKSxIKGFoKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBoaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1CZHx8Yy5kYXRhPT09Q2QpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgamg9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixraD1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxsaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLG1oPSExO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcih1KDMyMSkpO31mdW5jdGlvbiBuaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCEkZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe2xoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmV4cGlyYXRpb25UaW1lPTA7amguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9waDpxaDthPWMoZCxlKTtpZihiLmV4cGlyYXRpb25UaW1lPT09bGgpe2Y9MDtkb3tiLmV4cGlyYXRpb25UaW1lPTA7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih1KDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2poLmN1cnJlbnQ9cmg7YT1jKGQsZSl9d2hpbGUoYi5leHBpcmF0aW9uVGltZT09PWxoKX1qaC5jdXJyZW50PXNoO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKGIpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIHVoKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiB2aChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmV4cGlyYXRpb25UaW1lO2lmKGw8bGgpe3ZhciBtPXtleHBpcmF0aW9uVGltZTprLmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bSxmPWQpOmg9aC5uZXh0PW07bD5OLmV4cGlyYXRpb25UaW1lJiZcbihOLmV4cGlyYXRpb25UaW1lPWwsQmcobCkpfWVsc2UgbnVsbCE9PWgmJihoPWgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksQWcobCxrLnN1c3BlbnNlQ29uZmlnKSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZzskZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geGgoYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpOyRlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiB5aChhKXt2YXIgYj10aCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjp2aCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1mdW5jdGlvbiBBaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBCaCgpe3JldHVybiB1aCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gQ2goYSxiLGMsZCl7dmFyIGU9dGgoKTtOLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBEaChhLGIsYyxkKXt2YXIgZT11aCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJm5oKGQsZy5kZXBzKSl7QWgoYixjLGYsZCk7cmV0dXJufX1OLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsZixkKX1mdW5jdGlvbiBFaChhLGIpe3JldHVybiBDaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEZoKGEsYil7cmV0dXJuIERoKDUxNiw0LGEsYil9ZnVuY3Rpb24gR2goYSxiKXtyZXR1cm4gRGgoNCwyLGEsYil9XG5mdW5jdGlvbiBIaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIEloKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gRGgoNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEpoKCl7fWZ1bmN0aW9uIEtoKGEsYil7dGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIE1oKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIE5oKGEsYixjKXt2YXIgZD1hZygpO2NnKDk4PmQ/OTg6ZCxmdW5jdGlvbigpe2EoITApfSk7Y2coOTc8ZD85NzpkLGZ1bmN0aW9uKCl7dmFyIGQ9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoITEpLGMoKX1maW5hbGx5e2toLnN1c3BlbnNlPWR9fSl9XG5mdW5jdGlvbiB6aChhLGIsYyl7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9e2V4cGlyYXRpb25UaW1lOmQsc3VzcGVuc2VDb25maWc6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZj1iLnBlbmRpbmc7bnVsbD09PWY/ZS5uZXh0PWU6KGUubmV4dD1mLm5leHQsZi5uZXh0PWUpO2IucGVuZGluZz1lO2Y9YS5hbHRlcm5hdGU7aWYoYT09PU58fG51bGwhPT1mJiZmPT09TiltaD0hMCxlLmV4cGlyYXRpb25UaW1lPWxoLE4uZXhwaXJhdGlvblRpbWU9bGg7ZWxzZXtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1mfHwwPT09Zi5leHBpcmF0aW9uVGltZSkmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5lYWdlclJlZHVjZXI9ZjtlLmVhZ2VyU3RhdGU9aDtpZigkZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9SWcoYSxcbmQpfX1cbnZhciBzaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0scGg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOktoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkVoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBDaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBDaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsXG5iXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9dGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6eWgsdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXloKGEpLGQ9Y1swXSxlPWNbMV07RWgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPVxuY319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj15aCghMSksYz1iWzBdO2I9YlsxXTtyZXR1cm5bS2goTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scWg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp3aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gd2godmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9d2godmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9XG53aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scmg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp4aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4geGgodmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eGgodmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eGgodmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxcbmIsYSksW2IsYV0pLGNdfX0sT2g9bnVsbCxQaD1udWxsLFFoPSExO2Z1bmN0aW9uIFJoKGEsYil7dmFyIGM9U2goNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFRoKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBVaChhKXtpZihRaCl7dmFyIGI9UGg7aWYoYil7dmFyIGM9YjtpZighVGgoYSxiKSl7Yj1KZChjLm5leHRTaWJsaW5nKTtpZighYnx8IVRoKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7UWg9ITE7T2g9YTtyZXR1cm59UmgoT2gsYyl9T2g9YTtQaD1KZChiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixRaD0hMSxPaD1hfX1mdW5jdGlvbiBWaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47T2g9YX1cbmZ1bmN0aW9uIFdoKGEpe2lmKGEhPT1PaClyZXR1cm4hMTtpZighUWgpcmV0dXJuIFZoKGEpLFFoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhR2QoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVBoO2I7KVJoKGEsYiksYj1KZChiLm5leHRTaWJsaW5nKTtWaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PUFkKXtpZigwPT09Yil7UGg9SmQoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09emQmJmMhPT1DZCYmYyE9PUJkfHxiKyt9YT1hLm5leHRTaWJsaW5nfVBoPW51bGx9fWVsc2UgUGg9T2g/SmQoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBYaCgpe1BoPU9oPW51bGw7UWg9ITF9dmFyIFloPVdhLlJlYWN0Q3VycmVudE93bmVyLHJnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9ZZyhiLG51bGwsYyxkKTpYZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBaaChhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7cWcoYixlKTtkPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWJpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGNpKGEsYixnLGQsZSxmKTthPVVnKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6YmYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gJGgoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9U2coZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZiZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihyZz0hMSxlPGYpPyhiLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsJGgoYSxiLGYpKTpkaShhLGIsYyxkLGYpfWZ1bmN0aW9uIGVpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZGkoYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0JmOkouY3VycmVudDtmPUNmKGIsZik7cWcoYixlKTtjPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtxZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksTGcoYixjLGQpLE5nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpO3RnPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXg7emcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHghPT1rfHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD10Z3x8S2coYixjLGgsZCx4LGssbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsdmcoYSxiKSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDppZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpLHRnPSExLGs9Yi5tZW1vaXplZFN0YXRlLGcuc3RhdGU9ayx6ZyhiLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSxoIT09ZHx8ayE9PXh8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCkseD1iLm1lbW9pemVkU3RhdGUpLChtPXRnfHxLZyhiLGMsaCxkLGsseCxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9bCxkPW0pOlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBnaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBnaShhLGIsYyxkLGUsZil7ZWkoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJkhmKGIsYywhMSksJGgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WWguY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WGcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1YZyhiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZIZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/RWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmRWYoYSxiLmNvbnRleHQsITEpO2RoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBpaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZTowfTtcbmZ1bmN0aW9uIGppKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU0uY3VycmVudCxnPSExLGg7KGg9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTSxmJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZVaChiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1ZZyhiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1TZyhkLGUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPVhnKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVxuY31hPWEuY2hpbGQ7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WGcoYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiBraShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7cGcoYS5yZXR1cm4sYil9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZraShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZylraShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWhoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7bGkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aGgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfWxpKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpsaShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGgoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7MCE9PWQmJkJnKGQpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih1KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9U2coYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgbmksb2kscGkscWk7XG5uaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07b2k9ZnVuY3Rpb24oKXt9O1xucGk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2NoKCRnLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YihnLGYpO2Q9emIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdiKGcsZik7ZD1HYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXNkKX1vZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsbCkpOlwiY2hpbGRyZW5cIj09PWg/Zz09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChoLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/KG51bGwhPWwmJnJkKGUsaCksYXx8Zz09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goaCxsKSl9YyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGMpO2U9YTtpZihiLnVwZGF0ZVF1ZXVlPWUpYi5lZmZlY3RUYWd8PTR9fTtcbnFpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5lZmZlY3RUYWd8PTQpfTtmdW5jdGlvbiByaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBzaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMzpyZXR1cm4gZWgoKSxIKEspLEgoSiksYz1iLnN0YXRlTm9kZSxjLnBlbmRpbmdDb250ZXh0JiYoYy5jb250ZXh0PWMucGVuZGluZ0NvbnRleHQsYy5wZW5kaW5nQ29udGV4dD1udWxsKSxudWxsIT09YSYmbnVsbCE9PWEuY2hpbGR8fCFXaChiKXx8KGIuZWZmZWN0VGFnfD00KSxvaShiKSxudWxsO2Nhc2UgNTpnaChiKTtjPWNoKGJoLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcGkoYSxiLGUsZCxjKSxhLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5yZXR1cm4gbnVsbH1hPWNoKCRnLmN1cnJlbnQpO2lmKFdoKGIpKXtkPWIuc3RhdGVOb2RlO2U9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW01kXT1iO2RbTmRdPWY7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8YWMubGVuZ3RoO2ErKylGKGFjW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixkKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsZCk7RihcInN1Ym1pdFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGQsZik7RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGQsZiksRihcImludmFsaWRcIixkKSxyZChjLFwib25DaGFuZ2VcIil9b2QoZSxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKGE9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOnZhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZyZChjLGcpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihkKTtFYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGQpO0xiKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiZcbihkLm9uY2xpY2s9c2QpfWM9YTtiLnVwZGF0ZVF1ZXVlPWM7bnVsbCE9PWMmJihiLmVmZmVjdFRhZ3w9NCl9ZWxzZXtnPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2E9PT1xZCYmKGE9TmIoZSkpO2E9PT1xZD9cInNjcmlwdFwiPT09ZT8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGUse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGUpO2FbTWRdPWI7YVtOZF09ZDtuaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz1wZChlLGQpO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5hKTtoPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFjLmxlbmd0aDtoKyspRihhY1toXSxhKTtoPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixhKTtGKFwibG9hZFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGEpO0YoXCJzdWJtaXRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGEsZCk7aD16YihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPUdiKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtoPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoYSxcbmQpO2g9SWIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9ZH1vZChlLGgpO3ZhciBrPWg7Zm9yKGYgaW4gaylpZihrLmhhc093blByb3BlcnR5KGYpKXt2YXIgbD1rW2ZdO1wic3R5bGVcIj09PWY/bWQoYSxsKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJlFiKGEsbCkpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsPyhcInRleHRhcmVhXCIhPT1lfHxcIlwiIT09bCkmJlJiKGEsbCk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZSYihhLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKHZhLmhhc093blByb3BlcnR5KGYpP251bGwhPWwmJnJkKGMsZik6bnVsbCE9bCYmWGEoYSxmLGwsZykpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihhKTtFYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoYSk7TGIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3JiKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Yz1kLnZhbHVlO251bGwhPWM/SGIoYSwhIWQubXVsdGlwbGUsYywhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJkhiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihhLm9uY2xpY2s9c2QpfUZkKGUsZCkmJihiLmVmZmVjdFRhZ3w9NCl9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXFpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xuYz1jaChiaC5jdXJyZW50KTtjaCgkZy5jdXJyZW50KTtXaChiKT8oYz1iLnN0YXRlTm9kZSxkPWIubWVtb2l6ZWRQcm9wcyxjW01kXT1iLGMubm9kZVZhbHVlIT09ZCYmKGIuZWZmZWN0VGFnfD00KSk6KGM9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxjW01kXT1iLGIuc3RhdGVOb2RlPWMpfXJldHVybiBudWxsO2Nhc2UgMTM6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1jLGI7Yz1udWxsIT09ZDtkPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmV2goYik6KGU9YS5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWUsY3x8bnVsbD09PWV8fChlPWEuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGY9Yi5maXJzdEVmZmVjdCxudWxsIT09Zj8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1mKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9XG5lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSkpO2lmKGMmJiFkJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oTS5jdXJyZW50JjEpKVM9PT10aSYmKFM9dWkpO2Vsc2V7aWYoUz09PXRpfHxTPT09dWkpUz12aTswIT09d2kmJm51bGwhPT1UJiYoeGkoVCxVKSx5aShULHdpKSl9aWYoY3x8ZCliLmVmZmVjdFRhZ3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksb2koYiksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMTk6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtlPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2Y9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWYpaWYoZSlyaShkLCExKTtlbHNle2lmKFMhPT10aXx8bnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmXG42NCkpZm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2E9aGgoZik7aWYobnVsbCE9PWEpe2IuZWZmZWN0VGFnfD02NDtyaShkLCExKTtlPWEudXBkYXRlUXVldWU7bnVsbCE9PWUmJihiLnVwZGF0ZVF1ZXVlPWUsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7Zm9yKGQ9Yi5jaGlsZDtudWxsIT09ZDspZT1kLGY9YyxlLmVmZmVjdFRhZyY9MixlLm5leHRFZmZlY3Q9bnVsbCxlLmZpcnN0RWZmZWN0PW51bGwsZS5sYXN0RWZmZWN0PW51bGwsYT1lLmFsdGVybmF0ZSxudWxsPT09YT8oZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZS5leHBpcmF0aW9uVGltZT1mLGUuY2hpbGQ9bnVsbCxlLm1lbW9pemVkUHJvcHM9bnVsbCxlLm1lbW9pemVkU3RhdGU9bnVsbCxlLnVwZGF0ZVF1ZXVlPW51bGwsZS5kZXBlbmRlbmNpZXM9bnVsbCk6KGUuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWUsXG5lLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsZS5jaGlsZD1hLmNoaWxkLGUubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHMsZS5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxlLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsZj1hLmRlcGVuZGVuY2llcyxlLmRlcGVuZGVuY2llcz1udWxsPT09Zj9udWxsOntleHBpcmF0aW9uVGltZTpmLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpmLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmYucmVzcG9uZGVyc30pLGQ9ZC5zaWJsaW5nO0koTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1mPWYuc2libGluZ319ZWxzZXtpZighZSlpZihhPWhoKGYpLG51bGwhPT1hKXtpZihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5lZmZlY3RUYWd8PTQpLHJpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZi5hbHRlcm5hdGUpcmV0dXJuIGI9XG5iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKiRmKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+ZC50YWlsRXhwaXJhdGlvbiYmMTxjJiYoYi5lZmZlY3RUYWd8PTY0LGU9ITAscmkoZCwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9Yy0xKTtkLmlzQmFja3dhcmRzPyhmLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWYpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZjpiLmNoaWxkPWYsZC5sYXN0PWYpfXJldHVybiBudWxsIT09ZC50YWlsPygwPT09ZC50YWlsRXhwaXJhdGlvbiYmKGQudGFpbEV4cGlyYXRpb249JGYoKSs1MDApLGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPSRmKCksYy5zaWJsaW5nPW51bGwsYj1NLmN1cnJlbnQsSShNLGU/YiYxfDI6YiYxKSxjKTpudWxsfXRocm93IEVycm9yKHUoMTU2LFxuYi50YWcpKTt9ZnVuY3Rpb24gemkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZEZigpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZWgoKTtIKEspO0goSik7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGdoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChNKSxiPWEuZWZmZWN0VGFnLGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIEFpKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6cWIoYil9fVxudmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIENpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9cWIoYykpO251bGwhPT1jJiZwYihjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZwYihhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBEaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7RWkoYSxjKX19ZnVuY3Rpb24gRmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7RWkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gR2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6aWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gSGkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5kZXN0cm95O2MuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZCYmZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gSWkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fVxuZnVuY3Rpb24gSmkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOklpKDMsYyk7cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6aWcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyk7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZDZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUNnKGMsYixhKX1yZXR1cm47XG5jYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmNCYmRmQoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZWYyhjKSkpKTtyZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBLaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIExpJiZMaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2NnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtFaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6RmkoYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmRGkoYixjKTticmVhaztjYXNlIDU6RmkoYik7YnJlYWs7Y2FzZSA0Ok1pKGEsYixjKX19XG5mdW5jdGlvbiBOaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7bnVsbCE9PWImJk5pKGIpfWZ1bmN0aW9uIE9pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gUGkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoT2koYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IEVycm9yKHUoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKFJiKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxPaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/UWkoYSxjLGIpOlJpKGEsYyxiKX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1zZCkpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihRaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVFpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFJpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUmkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylSaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBNaShhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHUoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKEtpKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWsgYTtmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKEtpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBTaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6SGkoMyxiKTtyZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbTmRdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkJiKGMsZCk7cGQoYSxlKTtiPXBkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9tZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/UWIoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1JiKGMsaCk6WGEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkNiKGMsZCk7YnJlYWs7XG5jYXNlIFwidGV4dGFyZWFcIjpLYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0hiKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9IYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SGIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpiPWIuc3RhdGVOb2RlO2IuaHlkcmF0ZSYmKGIuaHlkcmF0ZT0hMSxWYyhiLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9cbmQ9ITE6KGQ9ITAsYz1iLmNoaWxkLFRpPSRmKCkpO2lmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1sZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1cbmY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWs7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9VWkoYik7cmV0dXJuO2Nhc2UgMTk6VWkoYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fWZ1bmN0aW9uIFVpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEJpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG52YXIgV2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gWGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtZaXx8KFlpPSEwLFppPWQpO0NpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gJGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7Q2koYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWFqP2FqPW5ldyBTZXQoW3RoaXNdKTphai5hZGQodGhpcyksQ2koYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgYmo9TWF0aC5jZWlsLGNqPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZGo9V2EuUmVhY3RDdXJyZW50T3duZXIsVj0wLGVqPTgsZmo9MTYsZ2o9MzIsdGk9MCxoaj0xLGlqPTIsdWk9Myx2aT00LGpqPTUsVz1WLFQ9bnVsbCxYPW51bGwsVT0wLFM9dGksa2o9bnVsbCxsaj0xMDczNzQxODIzLG1qPTEwNzM3NDE4MjMsbmo9bnVsbCx3aT0wLG9qPSExLFRpPTAscGo9NTAwLFk9bnVsbCxZaT0hMSxaaT1udWxsLGFqPW51bGwscWo9ITEscmo9bnVsbCxzaj05MCx0aj1udWxsLHVqPTAsdmo9bnVsbCx3aj0wO2Z1bmN0aW9uIEdnKCl7cmV0dXJuKFcmKGZqfGdqKSkhPT1WPzEwNzM3NDE4MjEtKCRmKCkvMTB8MCk6MCE9PXdqP3dqOndqPTEwNzM3NDE4MjEtKCRmKCkvMTB8MCl9XG5mdW5jdGlvbiBIZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWFnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChXJmZqKSE9PVYpcmV0dXJuIFU7aWYobnVsbCE9PWMpYT1oZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1oZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWhnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VCYmYT09PVUmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIElnKGEsYil7aWYoNTA8dWopdGhyb3cgdWo9MCx2aj1udWxsLEVycm9yKHUoMTg1KSk7YT14aihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1hZygpOzEwNzM3NDE4MjM9PT1iPyhXJmVqKSE9PVYmJihXJihmanxnaikpPT09Vj95aihhKTooWihhKSxXPT09ViYmZ2coKSk6WihhKTsoVyY0KT09PVZ8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PXRqP3RqPW5ldyBNYXAoW1thLGJdXSk6KGM9dGouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZ0ai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIHhqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihUPT09ZSYmKEJnKGIpLFM9PT12aSYmeGkoZSxVKSkseWkoZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiB6aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighQWooYSxiKSlyZXR1cm4gYjt2YXIgYz1hLmxhc3RQaW5nZWRUaW1lO2E9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw7YT1jPmE/YzphO3JldHVybiAyPj1hJiZiIT09YT8wOmF9XG5mdW5jdGlvbiBaKGEpe2lmKDAhPT1hLmxhc3RFeHBpcmVkVGltZSlhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxhLmNhbGxiYWNrUHJpb3JpdHk9OTksYS5jYWxsYmFja05vZGU9ZWcoeWouYmluZChudWxsLGEpKTtlbHNle3ZhciBiPXpqKGEpLGM9YS5jYWxsYmFja05vZGU7aWYoMD09PWIpbnVsbCE9PWMmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wLGEuY2FsbGJhY2tQcmlvcml0eT05MCk7ZWxzZXt2YXIgZD1HZygpOzEwNzM3NDE4MjM9PT1iP2Q9OTk6MT09PWJ8fDI9PT1iP2Q9OTU6KGQ9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtZCksZD0wPj1kPzk5OjI1MD49ZD85ODo1MjUwPj1kPzk3Ojk1KTtpZihudWxsIT09Yyl7dmFyIGU9YS5jYWxsYmFja1ByaW9yaXR5O2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT09PWImJmU+PWQpcmV0dXJuO2MhPT1UZiYmS2YoYyl9YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPVxuYjthLmNhbGxiYWNrUHJpb3JpdHk9ZDtiPTEwNzM3NDE4MjM9PT1iP2VnKHlqLmJpbmQobnVsbCxhKSk6ZGcoZCxCai5iaW5kKG51bGwsYSkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYiktJGYoKX0pO2EuY2FsbGJhY2tOb2RlPWJ9fX1cbmZ1bmN0aW9uIEJqKGEsYil7d2o9MDtpZihiKXJldHVybiBiPUdnKCksQ2ooYSxiKSxaKGEpLG51bGw7dmFyIGM9emooYSk7aWYoMCE9PWMpe2I9YS5jYWxsYmFja05vZGU7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYz09PVV8fEVqKGEsYyk7aWYobnVsbCE9PVgpe3ZhciBkPVc7V3w9Zmo7dmFyIGU9RmooKTtkbyB0cnl7R2ooKTticmVha31jYXRjaChoKXtIaihhLGgpfXdoaWxlKDEpO25nKCk7Vz1kO2NqLmN1cnJlbnQ9ZTtpZihTPT09aGopdGhyb3cgYj1raixFaihhLGMpLHhpKGEsYyksWihhKSxiO2lmKG51bGw9PT1YKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1TLFQ9bnVsbCxkKXtjYXNlIHRpOmNhc2UgaGo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIGlqOkNqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB1aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKDEwNzM3NDE4MjM9PT1saiYmKGU9VGkrcGotJGYoKSwxMDxlKSl7aWYob2ope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfX1mPXpqKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGUpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugdmk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYob2omJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha31lPXpqKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT1taj9kPTEwKigxMDczNzQxODIxLW1qKS0kZigpOjEwNzM3NDE4MjM9PT1saj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEtbGopLTVFMyxlPSRmKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpiaihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSBqajppZigxMDczNzQxODIzIT09bGomJm51bGwhPT1uail7Zj1sajt2YXIgZz1uajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj0kZigpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe3hpKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxuSGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfX1KaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBCai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geWooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYj09PVV8fEVqKGEsYik7aWYobnVsbCE9PVgpe3ZhciBjPVc7V3w9Zmo7dmFyIGQ9RmooKTtkbyB0cnl7S2ooKTticmVha31jYXRjaChlKXtIaihhLGUpfXdoaWxlKDEpO25nKCk7Vz1jO2NqLmN1cnJlbnQ9ZDtpZihTPT09aGopdGhyb3cgYz1raixFaihhLGIpLHhpKGEsYiksWihhKSxjO2lmKG51bGwhPT1YKXRocm93IEVycm9yKHUoMjYxKSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtUPW51bGw7SmooYSk7WihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBMaigpe2lmKG51bGwhPT10ail7dmFyIGE9dGo7dGo9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtDaihjLGEpO1ooYyl9KTtnZygpfX1cbmZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19ZnVuY3Rpb24gTmooYSxiKXt2YXIgYz1XO1cmPS0yO1d8PWVqO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19XG5mdW5jdGlvbiBFaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxJZChjKSk7aWYobnVsbCE9PVgpZm9yKGM9WC5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZEZigpO2JyZWFrO2Nhc2UgMzplaCgpO0goSyk7SChKKTticmVhaztjYXNlIDU6Z2goZCk7YnJlYWs7Y2FzZSA0OmVoKCk7YnJlYWs7Y2FzZSAxMzpIKE0pO2JyZWFrO2Nhc2UgMTk6SChNKTticmVhaztjYXNlIDEwOm9nKGQpfWM9Yy5yZXR1cm59VD1hO1g9U2coYS5jdXJyZW50LG51bGwpO1U9YjtTPXRpO2tqPW51bGw7bWo9bGo9MTA3Mzc0MTgyMztuaj1udWxsO3dpPTA7b2o9ITF9XG5mdW5jdGlvbiBIaihhLGIpe2Rve3RyeXtuZygpO2poLmN1cnJlbnQ9c2g7aWYobWgpZm9yKHZhciBjPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09Yzspe3ZhciBkPWMucXVldWU7bnVsbCE9PWQmJihkLnBlbmRpbmc9bnVsbCk7Yz1jLm5leHR9bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKG51bGw9PT1YfHxudWxsPT09WC5yZXR1cm4pcmV0dXJuIFM9aGosa2o9YixYPW51bGw7YTp7dmFyIGU9YSxmPVgucmV0dXJuLGc9WCxoPWI7Yj1VO2cuZWZmZWN0VGFnfD0yMDQ4O2cuZmlyc3RFZmZlY3Q9Zy5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWgmJlwib2JqZWN0XCI9PT10eXBlb2YgaCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGgudGhlbil7dmFyIGs9aDtpZigwPT09KGcubW9kZSYyKSl7dmFyIGw9Zy5hbHRlcm5hdGU7bD8oZy51cGRhdGVRdWV1ZT1sLnVwZGF0ZVF1ZXVlLGcubWVtb2l6ZWRTdGF0ZT1sLm1lbW9pemVkU3RhdGUsZy5leHBpcmF0aW9uVGltZT1sLmV4cGlyYXRpb25UaW1lKTooZy51cGRhdGVRdWV1ZT1cbm51bGwsZy5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBtPTAhPT0oTS5jdXJyZW50JjEpLHA9Zjtkb3t2YXIgeDtpZih4PTEzPT09cC50YWcpe3ZhciB6PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eil4PW51bGwhPT16LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgY2E9cC5tZW1vaXplZFByb3BzO3g9dm9pZCAwPT09Y2EuZmFsbGJhY2s/ITE6ITAhPT1jYS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDptPyExOiEwfX1pZih4KXt2YXIgRD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1EKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO3AudXBkYXRlUXVldWU9dH1lbHNlIEQuYWRkKGspO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmVmZmVjdFRhZ3w9NjQ7Zy5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1nLnRhZylpZihudWxsPT09Zy5hbHRlcm5hdGUpZy50YWc9MTc7ZWxzZXt2YXIgeT13ZygxMDczNzQxODIzLG51bGwpO3kudGFnPTI7eGcoZyx5KX1nLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7XG5icmVhayBhfWg9dm9pZCAwO2c9Yjt2YXIgQT1lLnBpbmdDYWNoZTtudWxsPT09QT8oQT1lLnBpbmdDYWNoZT1uZXcgV2ksaD1uZXcgU2V0LEEuc2V0KGssaCkpOihoPUEuZ2V0KGspLHZvaWQgMD09PWgmJihoPW5ldyBTZXQsQS5zZXQoayxoKSkpO2lmKCFoLmhhcyhnKSl7aC5hZGQoZyk7dmFyIHE9T2ouYmluZChudWxsLGUsayxnKTtrLnRoZW4ocSxxKX1wLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtoPUVycm9yKChwYihnLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrcWIoZykpfVMhPT1cbmpqJiYoUz1paik7aD1BaShoLGcpO3A9Zjtkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzprPWg7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciBCPVhpKHAsayxiKTt5ZyhwLEIpO2JyZWFrIGE7Y2FzZSAxOms9aDt2YXIgdz1wLnR5cGUsdWI9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHViLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKHViKSkpKXtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIHZiPSRpKHAsayxiKTt5ZyhwLHZiKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1YPVBqKFgpfWNhdGNoKFhjKXtiPVhjO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gRmooKXt2YXIgYT1jai5jdXJyZW50O2NqLmN1cnJlbnQ9c2g7cmV0dXJuIG51bGw9PT1hP3NoOmF9ZnVuY3Rpb24gQWcoYSxiKXthPGxqJiYyPGEmJihsaj1hKTtudWxsIT09YiYmYTxtaiYmMjxhJiYobWo9YSxuaj1iKX1mdW5jdGlvbiBCZyhhKXthPndpJiYod2k9YSl9ZnVuY3Rpb24gS2ooKXtmb3IoO251bGwhPT1YOylYPVFqKFgpfWZ1bmN0aW9uIEdqKCl7Zm9yKDtudWxsIT09WCYmIVVmKCk7KVg9UWooWCl9ZnVuY3Rpb24gUWooYSl7dmFyIGI9UmooYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVBqKGEpKTtkai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQaihhKXtYPWE7ZG97dmFyIGI9WC5hbHRlcm5hdGU7YT1YLnJldHVybjtpZigwPT09KFguZWZmZWN0VGFnJjIwNDgpKXtiPXNpKGIsWCxVKTtpZigxPT09VXx8MSE9PVguY2hpbGRFeHBpcmF0aW9uVGltZSl7Zm9yKHZhciBjPTAsZD1YLmNoaWxkO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZSxmPWQuY2hpbGRFeHBpcmF0aW9uVGltZTtlPmMmJihjPWUpO2Y+YyYmKGM9Zik7ZD1kLnNpYmxpbmd9WC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9WC5maXJzdEVmZmVjdCksbnVsbCE9PVgubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9WC5sYXN0RWZmZWN0KSwxPFguZWZmZWN0VGFnJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVg6YS5maXJzdEVmZmVjdD1YLGEubGFzdEVmZmVjdD1YKSl9ZWxzZXtiPXppKFgpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1YLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7WD1hfXdoaWxlKG51bGwhPT1YKTtTPT09dGkmJihTPWpqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIEpqKGEpe3ZhciBiPWFnKCk7Y2coOTksU2ouYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2ooYSxiKXtkbyBEaigpO3doaWxlKG51bGwhPT1yaik7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1JaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1UJiYoWD1UPW51bGwsVT0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1XO1d8PWdqO2RqLmN1cnJlbnQ9bnVsbDtEZD1mZDt2YXIgZz14ZCgpO2lmKHlkKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2god2Ipe2g9bnVsbDticmVhayBhfXZhciBwPTAseD0tMSx6PS0xLGNhPTAsRD0wLHQ9Zyx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXt0IT09aHx8MCE9PWwmJjMhPT10Lm5vZGVUeXBlfHwoeD1wK2wpO3QhPT1tfHwwIT09ayYmMyE9PXQubm9kZVR5cGV8fCh6PXArayk7Mz09PXQubm9kZVR5cGUmJihwKz10Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT10LmZpcnN0Q2hpbGQpKWJyZWFrO3k9dDt0PUF9Zm9yKDs7KXtpZih0PT09ZylicmVhayBiO3k9PT1oJiYrK2NhPT09bCYmKHg9cCk7eT09PW0mJisrRD09PWsmJih6PXApO2lmKG51bGwhPT0oQT10Lm5leHRTaWJsaW5nKSlicmVhazt0PXk7eT10LnBhcmVudE5vZGV9dD1BfWg9LTE9PT14fHwtMT09PXo/bnVsbDp7c3RhcnQ6eCxlbmQ6en19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDtFZD17YWN0aXZlRWxlbWVudERldGFjaGVkOm51bGwsZm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtZPWU7ZG8gdHJ5e1RqKCl9Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcT1ZLmVmZmVjdFRhZztxJjE2JiZSYihZLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIEI9WS5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciB3PUIucmVmO251bGwhPT13JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHc/dyhudWxsKTp3LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjEwMzgpe2Nhc2UgMjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlBpKFkpO1kuZWZmZWN0VGFnJj0tMztTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9XG4tMTAyNTtTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxNaShnLGwsaCksTmkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt3PUVkO0I9eGQoKTtxPXcuZm9jdXNlZEVsZW07aD13LnNlbGVjdGlvblJhbmdlO2lmKEIhPT1xJiZxJiZxLm93bmVyRG9jdW1lbnQmJndkKHEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT1oJiZ5ZChxKSYmKEI9aC5zdGFydCx3PWguZW5kLHZvaWQgMD09PXcmJih3PUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9QixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih3LHEudmFsdWUubGVuZ3RoKSk6KHc9KEI9cS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyx3LmdldFNlbGVjdGlvbiYmXG4odz13LmdldFNlbGVjdGlvbigpLGw9cS50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdy5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPXZkKHEsZyksbT12ZChxLGgpLGwmJm0mJigxIT09dy5yYW5nZUNvdW50fHx3LmFuY2hvck5vZGUhPT1sLm5vZGV8fHcuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHcuZm9jdXNOb2RlIT09bS5ub2RlfHx3LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYoQj1CLmNyZWF0ZVJhbmdlKCksQi5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHcucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh3LmFkZFJhbmdlKEIpLHcuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOihCLnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHcuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2Zvcih3PXE7dz13LnBhcmVudE5vZGU7KTE9PT13Lm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6dyxsZWZ0Oncuc2Nyb2xsTGVmdCxcbnRvcDp3LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPEIubGVuZ3RoO3ErKyl3PUJbcV0sdy5lbGVtZW50LnNjcm9sbExlZnQ9dy5sZWZ0LHcuZWxlbWVudC5zY3JvbGxUb3A9dy50b3B9ZmQ9ISFEZDtFZD1EZD1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHE9YTtudWxsIT09WTspe3ZhciB1Yj1ZLmVmZmVjdFRhZzt1YiYzNiYmSmkocSxZLmFsdGVybmF0ZSxZKTtpZih1YiYxMjgpe0I9dm9pZCAwO3ZhciB2Yj1ZLnJlZjtpZihudWxsIT09dmIpe3ZhciBYYz1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTpCPVhjO2JyZWFrO2RlZmF1bHQ6Qj1YY31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdmI/dmIoQik6dmIuY3VycmVudD1CfX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9XG5udWxsO1ZmKCk7Vz1mfWVsc2UgYS5jdXJyZW50PWM7aWYocWopcWo9ITEscmo9YSxzaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoYWo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PXZqP3VqKys6KHVqPTAsdmo9YSk6dWo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWomJlVqKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoWWkpdGhyb3cgWWk9ITEsYT1aaSxaaT1udWxsLGE7aWYoKFcmZWopIT09VilyZXR1cm4gbnVsbDtnZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIFRqKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZHaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8cWp8fChxaj0hMCxkZyg5NyxmdW5jdGlvbigpe0RqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gRGooKXtpZig5MCE9PXNqKXt2YXIgYT05Nzxzaj85Nzpzajtzaj05MDtyZXR1cm4gY2coYSxWail9fWZ1bmN0aW9uIFZqKCl7aWYobnVsbD09PXJqKXJldHVybiExO3ZhciBhPXJqO3JqPW51bGw7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VztXfD1najtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SGkoNSxjKSxJaSg1LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVc9YjtnZygpO3JldHVybiEwfVxuZnVuY3Rpb24gV2ooYSxiLGMpe2I9QWkoYyxiKTtiPVhpKGEsYiwxMDczNzQxODIzKTt4ZyhhLGIpO2E9eGooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1mdW5jdGlvbiBFaShhLGIpe2lmKDM9PT1hLnRhZylXaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe1dqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKGQpKSl7YT1BaShiLGEpO2E9JGkoYyxhLDEwNzM3NDE4MjMpO3hnKGMsYSk7Yz14aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIE9qKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VD09PWEmJlU9PT1jP1M9PT12aXx8Uz09PXVpJiYxMDczNzQxODIzPT09bGomJiRmKCktVGk8cGo/RWooYSxVKTpvaj0hMDpBaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsWihhKSkpfWZ1bmN0aW9uIFZpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9R2coKSxiPUhnKGIsYSxudWxsKSk7YT14aihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBSajtcblJqPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpcmc9ITA7ZWxzZXtpZihkPGMpe3JnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOmhpKGIpO1hoKCk7YnJlYWs7Y2FzZSA1OmZoKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZHZihiKTticmVhaztjYXNlIDQ6ZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO2U9Yi50eXBlLl9jb250ZXh0O0koamcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuaWYoMCE9PWQmJmQ+PWMpcmV0dXJuIGppKGEsYixjKTtJKE0sTS5jdXJyZW50JjEpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIG1pKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50KTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gJGgoYSxiLGMpfXJnPSExfX1lbHNlIHJnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUNmKGIsSi5jdXJyZW50KTtxZyhiLGMpO2U9b2gobnVsbCxcbmIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihMKGQpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt1ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmRmcoYixkLGcsYSk7ZS51cGRhdGVyPUpnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7TmcoYixkLGEsYyk7Yj1naShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmE6e2U9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPVxubnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO29iKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O2U9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9WGooZSk7YT1pZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1kaShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaChudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFpKG51bGwsYixlLGlnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxkaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxmaShhLGIsZCxlLGMpO1xuY2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtkPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7dmcoYSxiKTt6ZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9SmQoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1ZZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksWGgoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBmaChiKSxudWxsPT09YSYmVWgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbm51bGwsZz1lLmNoaWxkcmVuLEdkKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZHZChkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxlaShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmVWgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBqaShhLGIsYyk7Y2FzZSA0OnJldHVybiBkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1YZyhiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxaaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0koamcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj0kZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1cbmspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXdnKGMsbnVsbCksbC50YWc9Mix4ZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7cGcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1cbmd9UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixxZyhiLGMpLGU9c2coZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWlnKGUsYi5wZW5kaW5nUHJvcHMpLGY9aWcoZS50eXBlLGYpLGFpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBjaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEdmKGIpKTphPSExLHFnKGIsYyksTGcoYixkLGUpLE5nKGIsZCxlLGMpLGdpKG51bGwsXG5iLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBVaj1udWxsLExpPW51bGw7ZnVuY3Rpb24gWWooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07TGk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaaihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgWmooYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFhqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2IpcmV0dXJuIDExO2lmKGE9PT1qYilyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFiOnJldHVybiBXZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZiOmc9ODtlfD03O2JyZWFrO2Nhc2UgYmI6Zz04O2V8PTE7YnJlYWs7Y2FzZSBjYjpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNiLGEudHlwZT1jYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhiOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9aGIsYS5lbGVtZW50VHlwZT1oYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGliOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWliLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYjpnPVxuMTA7YnJlYWsgYTtjYXNlIGViOmc9OTticmVhayBhO2Nhc2UgZ2I6Zz0xMTticmVhayBhO2Nhc2UgamI6Zz0xNDticmVhayBhO2Nhc2Uga2I6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIGxiOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gV2coYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVGcoYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVmcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gQWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiB5aShhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIENqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gYmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2coKSxnPURnLnN1c3BlbnNlO2Y9SGcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZGMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1GZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1BZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXdnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7eGcoZSxiKTtJZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIGNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIGVrKGEsYil7ZGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmRrKGEsYil9XG5mdW5jdGlvbiBmayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgYWsoYSxiLGMpLGU9U2goMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7dWcoZSk7YVtPZF09ZC5jdXJyZW50O2MmJjAhPT1iJiZKYyhhLDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH1may5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O2ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2JrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltPZF09bnVsbH0pfTtcbmZ1bmN0aW9uIGdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBoayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gaWsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtoLmNhbGwoYSl9fWJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9aGsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7ay5jYWxsKGEpfX1OaihmdW5jdGlvbigpe2JrKGIsZyxhLGUpfSl9cmV0dXJuIGNrKGcpfWZ1bmN0aW9uIGprKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG53Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1oZyhHZygpLDE1MCwxMDApO0lnKGEsYik7ZWsoYSxiKX19O3hjPWZ1bmN0aW9uKGEpezEzPT09YS50YWcmJihJZyhhLDMpLGVrKGEsMykpfTt5Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1HZygpO2I9SGcoYixhLG51bGwpO0lnKGEsYik7ZWsoYSxiKX19O1xuemE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWQoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3liKGQpO0NiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpLYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYT1NajtcbkdhPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9VztXfD00O3RyeXtyZXR1cm4gY2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7Vz1mLFc9PT1WJiZnZygpfX07SGE9ZnVuY3Rpb24oKXsoVyYoMXxmanxnaikpPT09ViYmKExqKCksRGooKSl9O0lhPWZ1bmN0aW9uKGEsYil7dmFyIGM9VztXfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19O2Z1bmN0aW9uIGtrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGprKGEsYixudWxsLGMpfXZhciBsaz17RXZlbnRzOltOYyxQZCxRZCx4YSx0YSxYZCxmdW5jdGlvbihhKXtqYyhhLFdkKX0sRGEsRWEsaWQsbWMsRGose2N1cnJlbnQ6ITF9XX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWoobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOldhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTQuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1saztleHBvcnRzLmNyZWF0ZVBvcnRhbD1raztleHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aGMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtcbmV4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gY2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7Vz1jLGdnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMCxjKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMSxjKX07XG5leHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhOaihmdW5jdGlvbigpe2lrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtPZF09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPU1qO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGtrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZ2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBpayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTQuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiXG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2PkF5eXkhIEknbSB3b3JraW4gaGVhITwvZGl2PlxuICApXG59IiwiLyogQ29vbG9ycyBFeHBvcnRlZCBQYWxldHRlIC0gY29vbG9ycy5jby80NGFmNjktZjgzMzNjLWZjYWIxMC0yYjllYjMtZGJkNWI1ICovXG5cbi8vIGNvbW1vbiBjb2xvcnMgYW5kIHdoYXQgbm90XG4vKlxud2hpdGUgICAgICAgI2ZmZmZmZlxuZGFyayBibHVlICAgIzAyMmIzYVxuYmx1ZSAgICAgICAgIzFmN2E4Y1xubGlnaHQgYmx1ZSAgI2JmZGJmN1xuZ3JheSAgICAgICAgI2UxZTVmMlxuXG4qL1xuZXhwb3J0IGRlZmF1bHQge1xuICBiYWNrZ3JvdW5kOiAnIzAyMmIzYScsXG4gIGhlYWRpbmc6ICcjZmZmZmZmJyxcbiAgdGV4dDogJyNlMWU1ZjInLFxuICBsaW5rOiAnI2RlNmU0YicsXG4gIHZpc2l0ZWRMaW5rOiAnI2RlNmU0YicsXG4gIG5hdjogJyNiZmRiZjcnLFxuICBzdWJIZWFkaW5nOiAnI2JmZGJmNycsXG4gIGltYWdlQm9yZGVyOiAnI2RkZGRkZCdcbn1cblxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuL3BhbGV0dGUnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5jb25zdCBOYXYgPSBzdHlsZWQuZGl2YFxuICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVRla28mZGlzcGxheT1zd2FwJyk7XG4gIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9QXplcmV0K01vbm8mZGlzcGxheT1zd2FwJyk7XG4gIGZvbnQtZmFtaWx5OiAnVGVrbycsIHNhbnMtc2VyaWY7XG5cbiAgZm9udC1zaXplOiAzNXB4O1xuICBjb2xvcjogJHtwYWxldHRlLm5hdn07XG5cbiAgI25hdi1jb250YWluZXIge1xuICAgIGEsIHN0cm9uZyB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gICAgfVxuXG4gICAgYSB7XG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgfVxuXG4gICAgLnNlbGVjdGVkIHtcbiAgICAgIGNvbG9yOiAke3BhbGV0dGUubmF2fTtcbiAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAke3BhbGV0dGUubmF2fVxuICAgIH1cblxuICAgIG1hcmdpbi1ib3R0b206IDUwcHg7XG4gICAgI21haW4tbmF2IHtcbiAgICAgIHdpZHRoOiA3MjBweDtcbiAgICAgIG1hcmdpbjogYXV0bztcbiAgICB9XG5cbiAgICAjbGVmdC1uYXYge1xuICAgICAgI3BoaWwtYXZlcnkge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgfVxuXG4gICAgICAjYmVsb3ctcGhpbCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICB9XG5cbiAgICAgIGZvbnQtZmFtaWx5OiAnQXplcmV0IE1vbm8nO1xuICAgICAgZm9udC1zaXplOiAxN3B4O1xuICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgICBmbG9hdDogbGVmdDtcbiAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICR7cGFsZXR0ZS5pbWFnZUJvcmRlcn07XG4gICAgICBtYXJnaW46IDE3cHggMTVweCAwIDEwcHg7XG4gICAgfVxuICB9XG5gXG5cbmV4cG9ydCBkZWZhdWx0IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxOYXY+XG4gICAgICA8ZGl2IGlkPVwibmF2LWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGlkPVwibGVmdC1uYXZcIj5cbiAgICAgICAgICA8ZGl2IGlkPSdwaGlsLWF2ZXJ5Jz5QaGlsIEF2ZXJ5PC9kaXY+XG4gICAgICAgICAgPGRpdiBpZD1cImJlbG93LXBoaWxcIj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vcGhpbGxpcGF2ZXJ5L1wiPkxpbmtlZEluPC9hPlxuICAgICAgICAgICAgPGJyLz48YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3BpbGxcIj5HaXRodWI8L2E+XG4gICAgICAgICAgICA8YnIvPjxhIGhyZWY9XCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2NsYXNzaXF1ZV9waGlsL1wiPkBjbGFzc2lxdWVfcGhpbDwvYT5cbiAgICAgICAgICAgIDxici8+PGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vcGlsbF9tb3RvL1wiPkBwaWxsX21vdG88L2E+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgaWQ9XCJtYWluLW5hdlwiPlxuICAgICAgICAgICAgICA8YSBjbGFzcz17IFsnJ10uaW5jbHVkZXMocHJvcHMuc2VjdGlvbikgPyAnc2VsZWN0ZWQnIDogJyd9XG4gICAgICAgICAgICAgICAgIGhyZWY9XCIvXCI+aG9tZTwvYT5cbiAgICAgICAgICAgICAgPGEgY2xhc3M9e1snYmxvZycsICd0YWdzJywgJ3Bvc3QnXS5pbmNsdWRlcyhwcm9wcy5zZWN0aW9uKSA/ICdzZWxlY3RlZCcgOiAnJ31cbiAgICAgICAgICAgICAgICAgaHJlZj0nL2Jsb2cnPmJsb2c8L2E+XG4gICAgICAgICAgICAgIDxhIGNsYXNzPXtbJ2RldiddLmluY2x1ZGVzKHByb3BzLnNlY3Rpb24pID8gJ3NlbGVjdGVkJyA6ICcnfVxuICAgICAgICAgICAgICAgICBocmVmPScvZGV2Jz5kZXY8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9OYXY+XG5cbiAgKVxufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHJhbmdlIH0gZnJvbSAnLi4vLi4vdXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0ICh7IHRvdGFsUGFnZXMsIHAsIHJwcCwgYmFzZVBhdGggPSAnL2Jsb2cnIH0pID0+IHtcbiAgY29uc3QgcGFkZGluZyA9IDVcbiAgY29uc3Qgc3RhcnQgPSAocCAtIHBhZGRpbmcpID4gMCA/IChwIC0gcGFkZGluZykgOiAxXG4gIGNvbnN0IGVuZCA9IChwICsgcGFkZGluZykgPD0gdG90YWxQYWdlcyA/IChwICsgcGFkZGluZykgOiB0b3RhbFBhZ2VzXG5cbiAgY29uc29sZS5sb2codG90YWxQYWdlcywgc3RhcnQsIGVuZClcblxuICByZXR1cm4gKFxuICAgIDxkaXYgaWQ9XCJwYWdpbmF0b3JcIj5cbiAgICB7XG4gICAgICByYW5nZShzdGFydCwgZW5kKzEsIDEpLm1hcChpID0+IHtcbiAgICAgICAgcmV0dXJuIDxhIGhyZWY9e2Ake2Jhc2VQYXRofT9wPSR7aX0mcnBwPSR7cnBwfWB9IGtleT17aX0+e2l9PC9hPlxuICAgICAgfSlcbiAgICB9XG4gICAgPC9kaXY+XG4gIClcbn0iLCIvKipcbiAqIFJldHVybiBwYXJ0cyBvZiB0aGUgcGF0aCBhbmQgc2VhcmNoIHBhcmFtc1xuICovXG5jb25zdCBwYXJzZVVybCA9ICgpID0+IHtcbiAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgY29uc29sZS5sb2coJ3VybCcsIHBhcnNlZFVybClcbiAgY29uc3QgcGFydHMgPSBwYXJzZWRVcmwucGF0aG5hbWUuc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwLmxlbmd0aCA+IDApXG4gIHJldHVybiB7XG4gICAgcGFydHMsXG4gICAgc2VhcmNoUGFyYW1zOiBwYXJzZWRVcmwuc2VhcmNoUGFyYW1zXG4gIH1cbn1cblxuLyoqXG4gKiBNaW1pYyBQeXRob24gcmFuZ2UgZnVuY3Rpb25cbiAqL1xuY29uc3QgcmFuZ2UgPSAoc3RhcnQsIHN0b3AsIHN0ZXApID0+IHtcbiAgaWYgKHR5cGVvZiBzdG9wID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBvbmUgcGFyYW0gZGVmaW5lZFxuICAgICAgc3RvcCA9IHN0YXJ0O1xuICAgICAgc3RhcnQgPSAwXG4gIH1cblxuICBpZiAodHlwZW9mIHN0ZXAgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN0ZXAgPSAxXG4gIH1cblxuICBpZiAoKHN0ZXAgPiAwICYmIHN0YXJ0ID49IHN0b3ApIHx8IChzdGVwIDwgMCAmJiBzdGFydCA8PSBzdG9wKSkge1xuICAgICAgcmV0dXJuIFtdXG4gIH1cblxuICB2YXIgcmVzdWx0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBzdGVwID4gMCA/IGkgPCBzdG9wIDogaSA+IHN0b3A7IGkgKz0gc3RlcCkge1xuICAgICAgcmVzdWx0LnB1c2goaSlcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IHtcbiAgcGFyc2VVcmwsXG4gIHJhbmdlXG59XG5cbiIsImltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIFNwYWNlXG4gKiBAcHJvcCB7T2JqZWN0fSBzeXMgLSBTeXN0ZW0gbWV0YWRhdGFcbiAqIEBwcm9wIHtzdHJpbmd9IHN5cy5pZCAtIFNwYWNlIGlkXG4gKiBAcHJvcCB7c3RyaW5nfSBzeXMudHlwZSAtIEVudGl0eSB0eXBlXG4gKiBAcHJvcCB7c3RyaW5nfSBuYW1lIC0gU3BhY2UgbmFtZVxuICogQHByb3Age0FycmF5PHN0cmluZz59IGxvY2FsZXMgLSBBcnJheSB3aXRoIGxvY2FsZSBjb2Rlc1xuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIFNwYWNlIGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIC0gQVBJIHJlc3BvbnNlIGZvciBhIFNwYWNlXG4gKiBAcmV0dXJuIHtTcGFjZX1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFNwYWNlKGRhdGEpIHtcbiAgcmV0dXJuIGZyZWV6ZVN5cyh0b1BsYWluT2JqZWN0KGRhdGEpKTtcbn0iLCJpbXBvcnQganNvblN0cmluZ2lmeVNhZmUgZnJvbSAnanNvbi1zdHJpbmdpZnktc2FmZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaXhpblN0cmluZ2lmeVNhZmUoZGF0YSkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsICdzdHJpbmdpZnlTYWZlJywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHZhciBzZXJpYWxpemVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuICAgICAgdmFyIGluZGVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gICAgICByZXR1cm4ganNvblN0cmluZ2lmeVNhZmUodGhpcywgc2VyaWFsaXplciwgaW5kZW50LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN5czoge1xuICAgICAgICAgICAgdHlwZTogJ0xpbmsnLFxuICAgICAgICAgICAgbGlua1R5cGU6ICdFbnRyeScsXG4gICAgICAgICAgICBpZDogdmFsdWUuc3lzLmlkLFxuICAgICAgICAgICAgY2lyY3VsYXI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufSIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcblxudmFyIFVOUkVTT0xWRURfTElOSyA9IHt9OyAvLyB1bmlxdWUgb2JqZWN0IHRvIGF2b2lkIHBvbHlmaWxsIGJsb2F0IHVzaW5nIFN5bWJvbCgpXG5cbi8qKlxuICogaXNMaW5rIEZ1bmN0aW9uXG4gKiBDaGVja3MgaWYgdGhlIG9iamVjdCBoYXMgc3lzLnR5cGUgXCJMaW5rXCJcbiAqIEBwYXJhbSBvYmplY3RcbiAqL1xudmFyIGlzTGluayA9IGZ1bmN0aW9uIGlzTGluayhvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3Quc3lzICYmIG9iamVjdC5zeXMudHlwZSA9PT0gJ0xpbmsnO1xufTtcblxuLyoqXG4gKiBpc1Jlc291cmNlTGluayBGdW5jdGlvblxuICogQ2hlY2tzIGlmIHRoZSBvYmplY3QgaGFzIHN5cy50eXBlIFwiUmVzb3VyY2VMaW5rXCJcbiAqIEBwYXJhbSBvYmplY3RcbiAqL1xudmFyIGlzUmVzb3VyY2VMaW5rID0gZnVuY3Rpb24gaXNSZXNvdXJjZUxpbmsob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgJiYgb2JqZWN0LnN5cyAmJiBvYmplY3Quc3lzLnR5cGUgPT09ICdSZXNvdXJjZUxpbmsnO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEga2V5IHdpdGggc3BhY2VJZCBhbmQgYSBrZXkgd2l0aG91dCBmb3IgZW50aXR5TWFwXG4gKlxuICogQHBhcmFtIHsqfSBzeXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBzeXMudHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IHN5cy5pZFxuICogQHBhcmFtIHsqfSBzeXMuc3BhY2VcbiAqIEBwYXJhbSB7Kn0gc3lzLnNwYWNlLnN5c1xuICogQHBhcmFtIHtTdHJpbmd9IHN5cy5zcGFjZS5pZFxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbnZhciBtYWtlRW50aXR5TWFwS2V5cyA9IGZ1bmN0aW9uIG1ha2VFbnRpdHlNYXBLZXlzKHN5cykge1xuICBpZiAoc3lzLnNwYWNlICYmIHN5cy5lbnZpcm9ubWVudCkge1xuICAgIHJldHVybiBbc3lzLnR5cGUgKyAnIScgKyBzeXMuaWQsIHN5cy5zcGFjZS5zeXMuaWQgKyAnIScgKyBzeXMuZW52aXJvbm1lbnQuc3lzLmlkICsgJyEnICsgc3lzLnR5cGUgKyAnIScgKyBzeXMuaWRdO1xuICB9XG5cbiAgcmV0dXJuIFtzeXMudHlwZSArICchJyArIHN5cy5pZF07XG59O1xuXG4vKipcbiAqIExvb2tzIHVwIGluIGVudGl0eU1hcFxuICpcbiAqIEBwYXJhbSBlbnRpdHlNYXBcbiAqIEBwYXJhbSB7Kn0gbGlua0RhdGFcbiAqIEBwYXJhbSB7U3RyaW5nfSBsaW5rRGF0YS50eXBlXG4gKiBAcGFyYW0ge1N0cmluZ30gbGlua0RhdGEubGlua1R5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBsaW5rRGF0YS5pZFxuICogQHBhcmFtIHtTdHJpbmd9IGxpbmtEYXRhLnVyblxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG52YXIgbG9va3VwSW5FbnRpdHlNYXAgPSBmdW5jdGlvbiBsb29rdXBJbkVudGl0eU1hcChlbnRpdHlNYXAsIGxpbmtEYXRhKSB7XG4gIHZhciBlbnRyeUlkID0gbGlua0RhdGEuZW50cnlJZCxcbiAgICAgIGxpbmtUeXBlID0gbGlua0RhdGEubGlua1R5cGUsXG4gICAgICBzcGFjZUlkID0gbGlua0RhdGEuc3BhY2VJZCxcbiAgICAgIGVudmlyb25tZW50SWQgPSBsaW5rRGF0YS5lbnZpcm9ubWVudElkO1xuXG5cbiAgaWYgKHNwYWNlSWQgJiYgZW52aXJvbm1lbnRJZCkge1xuICAgIHJldHVybiBlbnRpdHlNYXAuZ2V0KHNwYWNlSWQgKyAnIScgKyBlbnZpcm9ubWVudElkICsgJyEnICsgbGlua1R5cGUgKyAnIScgKyBlbnRyeUlkKTtcbiAgfVxuXG4gIHJldHVybiBlbnRpdHlNYXAuZ2V0KGxpbmtUeXBlICsgJyEnICsgZW50cnlJZCk7XG59O1xuXG52YXIgZ2V0SWRzRnJvbVVybiA9IGZ1bmN0aW9uIGdldElkc0Zyb21Vcm4odXJuKSB7XG4gIHZhciByZWdFeHAgPSAvLio6c3BhY2VzXFwvKFteL10rKSg/OlxcL2Vudmlyb25tZW50c1xcLyhbXi9dKykpP1xcL2VudHJpZXNcXC8oW14vXSspJC87XG5cbiAgaWYgKCFyZWdFeHAudGVzdCh1cm4pKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gIHZhciBfdXJuJG1hdGNoID0gdXJuLm1hdGNoKHJlZ0V4cCksXG4gICAgICBfdXJuJG1hdGNoMiA9IF9zbGljZWRUb0FycmF5KF91cm4kbWF0Y2gsIDQpLFxuICAgICAgXyA9IF91cm4kbWF0Y2gyWzBdLFxuICAgICAgc3BhY2VJZCA9IF91cm4kbWF0Y2gyWzFdLFxuICAgICAgX3VybiRtYXRjaDIkID0gX3VybiRtYXRjaDJbMl0sXG4gICAgICBlbnZpcm9ubWVudElkID0gX3VybiRtYXRjaDIkID09PSB1bmRlZmluZWQgPyAnbWFzdGVyJyA6IF91cm4kbWF0Y2gyJCxcbiAgICAgIGVudHJ5SWQgPSBfdXJuJG1hdGNoMlszXTtcblxuICByZXR1cm4geyBzcGFjZUlkOiBzcGFjZUlkLCBlbnZpcm9ubWVudElkOiBlbnZpcm9ubWVudElkLCBlbnRyeUlkOiBlbnRyeUlkIH07XG59O1xuXG4vKipcbiAqIGdldFJlc29sdmVkTGluayBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSBlbnRpdHlNYXBcbiAqIEBwYXJhbSBsaW5rXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gKi9cbnZhciBnZXRSZXNvbHZlZExpbmsgPSBmdW5jdGlvbiBnZXRSZXNvbHZlZExpbmsoZW50aXR5TWFwLCBsaW5rKSB7XG4gIHZhciBfbGluayRzeXMgPSBsaW5rLnN5cyxcbiAgICAgIHR5cGUgPSBfbGluayRzeXMudHlwZSxcbiAgICAgIGxpbmtUeXBlID0gX2xpbmskc3lzLmxpbmtUeXBlO1xuXG4gIGlmICh0eXBlID09PSAnUmVzb3VyY2VMaW5rJykge1xuICAgIGlmICghbGlua1R5cGUuc3RhcnRzV2l0aCgnQ29udGVudGZ1bDonKSkge1xuICAgICAgcmV0dXJuIGxpbms7XG4gICAgfVxuXG4gICAgdmFyIHVybiA9IGxpbmsuc3lzLnVybjtcblxuICAgIHZhciBfZ2V0SWRzRnJvbVVybiA9IGdldElkc0Zyb21Vcm4odXJuKSxcbiAgICAgICAgc3BhY2VJZCA9IF9nZXRJZHNGcm9tVXJuLnNwYWNlSWQsXG4gICAgICAgIGVudmlyb25tZW50SWQgPSBfZ2V0SWRzRnJvbVVybi5lbnZpcm9ubWVudElkLFxuICAgICAgICBfZW50cnlJZCA9IF9nZXRJZHNGcm9tVXJuLmVudHJ5SWQ7XG5cbiAgICB2YXIgZXh0cmFjdGVkTGlua1R5cGUgPSBsaW5rVHlwZS5zcGxpdCgnOicpWzFdO1xuXG4gICAgcmV0dXJuIGxvb2t1cEluRW50aXR5TWFwKGVudGl0eU1hcCwge1xuICAgICAgbGlua1R5cGU6IGV4dHJhY3RlZExpbmtUeXBlLFxuICAgICAgZW50cnlJZDogX2VudHJ5SWQsXG4gICAgICBzcGFjZUlkOiBzcGFjZUlkLFxuICAgICAgZW52aXJvbm1lbnRJZDogZW52aXJvbm1lbnRJZFxuICAgIH0pIHx8IFVOUkVTT0xWRURfTElOSztcbiAgfVxuXG4gIHZhciBlbnRyeUlkID0gbGluay5zeXMuaWQ7XG5cbiAgcmV0dXJuIGxvb2t1cEluRW50aXR5TWFwKGVudGl0eU1hcCwgeyBsaW5rVHlwZTogbGlua1R5cGUsIGVudHJ5SWQ6IGVudHJ5SWQgfSkgfHwgVU5SRVNPTFZFRF9MSU5LO1xufTtcblxuLyoqXG4gKiBjbGVhblVwTGlua3MgRnVuY3Rpb25cbiAqIC0gUmVtb3ZlcyB1bnJlc29sdmFibGUgbGlua3MgZnJvbSBBcnJheXMgYW5kIE9iamVjdHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdFtdfE9iamVjdH0gaW5wdXRcbiAqL1xudmFyIGNsZWFuVXBMaW5rcyA9IGZ1bmN0aW9uIGNsZWFuVXBMaW5rcyhpbnB1dCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICByZXR1cm4gaW5wdXQuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgIT09IFVOUkVTT0xWRURfTElOSztcbiAgICB9KTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gaW5wdXQpIHtcbiAgICBpZiAoaW5wdXRba2V5XSA9PT0gVU5SRVNPTFZFRF9MSU5LKSB7XG4gICAgICBkZWxldGUgaW5wdXRba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlucHV0O1xufTtcblxuLyoqXG4gKiB3YWxrTXV0YXRlIEZ1bmN0aW9uXG4gKiBAcGFyYW0gaW5wdXRcbiAqIEBwYXJhbSBwcmVkaWNhdGVcbiAqIEBwYXJhbSBtdXRhdG9yXG4gKiBAcGFyYW0gcmVtb3ZlVW5yZXNvbHZlZFxuICogQHJldHVybiB7Kn1cbiAqL1xudmFyIHdhbGtNdXRhdGUgPSBmdW5jdGlvbiB3YWxrTXV0YXRlKGlucHV0LCBwcmVkaWNhdGUsIG11dGF0b3IsIHJlbW92ZVVucmVzb2x2ZWQpIHtcbiAgaWYgKHByZWRpY2F0ZShpbnB1dCkpIHtcbiAgICByZXR1cm4gbXV0YXRvcihpbnB1dCk7XG4gIH1cblxuICBpZiAoaW5wdXQgJiYgKHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaW5wdXQpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5wdXQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIGlmIChpbnB1dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGlucHV0W2tleV0gPSB3YWxrTXV0YXRlKGlucHV0W2tleV0sIHByZWRpY2F0ZSwgbXV0YXRvciwgcmVtb3ZlVW5yZXNvbHZlZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZW1vdmVVbnJlc29sdmVkKSB7XG4gICAgICBpbnB1dCA9IGNsZWFuVXBMaW5rcyhpbnB1dCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbnB1dDtcbn07XG5cbnZhciBub3JtYWxpemVMaW5rID0gZnVuY3Rpb24gbm9ybWFsaXplTGluayhlbnRpdHlNYXAsIGxpbmssIHJlbW92ZVVucmVzb2x2ZWQpIHtcbiAgdmFyIHJlc29sdmVkTGluayA9IGdldFJlc29sdmVkTGluayhlbnRpdHlNYXAsIGxpbmspO1xuICBpZiAocmVzb2x2ZWRMaW5rID09PSBVTlJFU09MVkVEX0xJTkspIHtcbiAgICByZXR1cm4gcmVtb3ZlVW5yZXNvbHZlZCA/IHJlc29sdmVkTGluayA6IGxpbms7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkTGluaztcbn07XG5cbnZhciBtYWtlRW50cnlPYmplY3QgPSBmdW5jdGlvbiBtYWtlRW50cnlPYmplY3QoaXRlbSwgaXRlbUVudHJ5UG9pbnRzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShpdGVtRW50cnlQb2ludHMpKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICB2YXIgZW50cnlQb2ludHMgPSBPYmplY3Qua2V5cyhpdGVtKS5maWx0ZXIoZnVuY3Rpb24gKG93bktleSkge1xuICAgIHJldHVybiBpdGVtRW50cnlQb2ludHMuaW5kZXhPZihvd25LZXkpICE9PSAtMTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudHJ5UG9pbnRzLnJlZHVjZShmdW5jdGlvbiAoZW50cnlPYmosIGVudHJ5UG9pbnQpIHtcbiAgICBlbnRyeU9ialtlbnRyeVBvaW50XSA9IGl0ZW1bZW50cnlQb2ludF07XG4gICAgcmV0dXJuIGVudHJ5T2JqO1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIHJlc29sdmVSZXNwb25zZSBGdW5jdGlvblxuICogUmVzb2x2ZXMgY29udGVudGZ1bCByZXNwb25zZSB0byBub3JtYWxpemVkIGZvcm0uXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgQ29udGVudGZ1bCByZXNwb25zZVxuICogQHBhcmFtIHt7cmVtb3ZlVW5yZXNvbHZlZDogQm9vbGVhbiwgaXRlbUVudHJ5UG9pbnRzOiBBcnJheTxTdHJpbmc+fXx7fX0gb3B0aW9uc1xuICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnJlbW92ZVVucmVzb2x2ZWQgLSBSZW1vdmUgdW5yZXNvbHZlZCBsaW5rcyBkZWZhdWx0OmZhbHNlXG4gKiBAcGFyYW0ge0FycmF5PFN0cmluZz59IG9wdGlvbnMuaXRlbUVudHJ5UG9pbnRzIC0gUmVzb2x2ZSBsaW5rcyBvbmx5IGluIHRob3NlIGl0ZW0gcHJvcGVydGllc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgcmVzb2x2ZVJlc3BvbnNlID0gZnVuY3Rpb24gcmVzb2x2ZVJlc3BvbnNlKHJlc3BvbnNlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoIXJlc3BvbnNlLml0ZW1zKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciByZXNwb25zZUNsb25lID0gY29weShyZXNwb25zZSk7XG4gIHZhciBhbGxJbmNsdWRlcyA9IE9iamVjdC5rZXlzKHJlc3BvbnNlQ2xvbmUuaW5jbHVkZXMgfHwge30pLnJlZHVjZShmdW5jdGlvbiAoYWxsLCB0eXBlKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWxsKSwgX3RvQ29uc3VtYWJsZUFycmF5KHJlc3BvbnNlLmluY2x1ZGVzW3R5cGVdKSk7XG4gIH0sIFtdKTtcblxuICB2YXIgYWxsRW50cmllcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocmVzcG9uc2VDbG9uZS5pdGVtcyksIF90b0NvbnN1bWFibGVBcnJheShhbGxJbmNsdWRlcykpLmZpbHRlcihmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZW50aXR5LnN5cyk7XG4gIH0pO1xuXG4gIHZhciBlbnRpdHlNYXAgPSBuZXcgTWFwKGFsbEVudHJpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGVudGl0eSkge1xuICAgIHZhciBlbnRyaWVzID0gbWFrZUVudGl0eU1hcEtleXMoZW50aXR5LnN5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBlbnRpdHldO1xuICAgIH0pO1xuICAgIGFjYy5wdXNoLmFwcGx5KGFjYywgX3RvQ29uc3VtYWJsZUFycmF5KGVudHJpZXMpKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSkpO1xuXG4gIGFsbEVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBlbnRyeU9iamVjdCA9IG1ha2VFbnRyeU9iamVjdChpdGVtLCBvcHRpb25zLml0ZW1FbnRyeVBvaW50cyk7XG5cbiAgICBPYmplY3QuYXNzaWduKGl0ZW0sIHdhbGtNdXRhdGUoZW50cnlPYmplY3QsIGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gaXNMaW5rKHgpIHx8IGlzUmVzb3VyY2VMaW5rKHgpO1xuICAgIH0sIGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplTGluayhlbnRpdHlNYXAsIGxpbmssIG9wdGlvbnMucmVtb3ZlVW5yZXNvbHZlZCk7XG4gICAgfSwgb3B0aW9ucy5yZW1vdmVVbnJlc29sdmVkKSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXNwb25zZUNsb25lLml0ZW1zO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVJlc3BvbnNlOyIsImltcG9ydCBjb3B5IGZyb20gJ2Zhc3QtY29weSc7XG5pbXBvcnQgeyB0b1BsYWluT2JqZWN0LCBmcmVlemVTeXMgfSBmcm9tICdjb250ZW50ZnVsLXNkay1jb3JlJztcbmltcG9ydCBtaXhpblN0cmluZ2lmeVNhZmUgZnJvbSAnLi4vbWl4aW5zL3N0cmluZ2lmeS1zYWZlJztcbmltcG9ydCByZXNvbHZlUmVzcG9uc2UgZnJvbSAnY29udGVudGZ1bC1yZXNvbHZlLXJlc3BvbnNlJztcbi8qKlxuICogVHlwZXMgb2YgZmllbGRzIGZvdW5kIGluIGFuIEVudHJ5XG4gKiBAbmFtZXNwYWNlIEVudHJ5RmllbGRzXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50cnlGaWVsZHNcbiAqIEB0eXBlZGVmIFN5bWJvbFxuICogQHR5cGUgc3RyaW5nXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50cnlGaWVsZHNcbiAqIEB0eXBlZGVmIFRleHRcbiAqIEB0eXBlIHN0cmluZ1xuICovXG5cbi8qKlxuICogQG1lbWJlcm9mIEVudHJ5RmllbGRzXG4gKiBAdHlwZWRlZiBJbnRlZ2VyXG4gKiBAdHlwZSBudW1iZXJcbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgTnVtYmVyXG4gKiBAdHlwZSBudW1iZXJcbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgRGF0ZVxuICogQHR5cGUgc3RyaW5nXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50cnlGaWVsZHNcbiAqIEB0eXBlZGVmIEJvb2xlYW5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgTG9jYXRpb25cbiAqIEBwcm9wIHtzdHJpbmd9IGxhdCAtIGxhdGl0dWRlXG4gKiBAcHJvcCB7c3RyaW5nfSBsb24gLSBsb25naXR1ZGVcbiAqL1xuXG4vKipcbiAqIEEgRmllbGQgaW4gYW4gRW50cnkgY2FuIGhhdmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdHlwZXMgdGhhdCBjYW4gYmUgZGVmaW5lZCBpbiBDb250ZW50ZnVsLiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9yZWZlcmVuY2VzL2ZpZWxkLXR5cGUvXCI+RmllbGQgVHlwZXM8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEZpZWxkXG4gKiBAdHlwZSBFbnRyeUZpZWxkcy5TeW1ib2wgfCBFbnRyeUZpZWxkcy5UZXh0IHwgRW50cnlGaWVsZHMuSW50ZWdlciB8IEVudHJ5RmllbGRzLk51bWJlciB8IEVudHJ5RmllbGRzLkRhdGUgfCBFbnRyeUZpZWxkcy5Cb29sZWFuIHwgRW50cnlGaWVsZHMuTG9jYXRpb24gfCBFbnRpdGllcy5MaW5rIHwgQXJyYXk8RW50cnlGaWVsZHMuU3ltYm9sfEVudGl0aWVzLkxpbms+IHwgT2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEVudHJ5XG4gKiBAcHJvcCB7RW50aXRpZXMuU3lzfSBzeXMgLSBTdGFuZGFyZCBzeXN0ZW0gbWV0YWRhdGEgd2l0aCBhZGRpdGlvbmFsIGVudHJ5IHNwZWNpZmljIHByb3BlcnRpZXNcbiAqIEBwcm9wIHtFbnRpdGllcy5MaW5rfSBzeXMuY29udGVudFR5cGUgLSBDb250ZW50IFR5cGUgdXNlZCBieSB0aGlzIEVudHJ5XG4gKiBAcHJvcCB7c3RyaW5nPX0gc3lzLmxvY2FsZSAtIElmIHByZXNlbnQsIGluZGljYXRlcyB0aGUgbG9jYWxlIHdoaWNoIHRoaXMgZW50cnkgdXNlc1xuICogQHByb3Age09iamVjdDxFbnRyeUZpZWxkcy5GaWVsZD59IGZpZWxkcyAtIE9iamVjdCB3aXRoIGNvbnRlbnQgZm9yIGVhY2ggZmllbGRcbiAqIEBwcm9wIHtmdW5jdGlvbigpOiBPYmplY3R9IHRvUGxhaW5PYmplY3QoKSAtIFJldHVybnMgdGhpcyBFbnRyeSBhcyBhIHBsYWluIEpTIG9iamVjdFxuICovXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gUmF3IGVudHJ5IGRhdGFcbiAqIEByZXR1cm4ge0VudHJ5fSBXcmFwcGVkIGVudHJ5IGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcEVudHJ5KGRhdGEpIHtcbiAgcmV0dXJuIGZyZWV6ZVN5cyh0b1BsYWluT2JqZWN0KGNvcHkoZGF0YSkpKTtcbn1cbi8qKlxuICogQG1lbWJlcm9mIEVudGl0aWVzXG4gKiBAdHlwZWRlZiBFbnRyeUNvbGxlY3Rpb25cbiAqIEBwcm9wIHtudW1iZXJ9IHRvdGFsXG4gKiBAcHJvcCB7bnVtYmVyfSBza2lwXG4gKiBAcHJvcCB7bnVtYmVyfSBsaW1pdFxuICogQHByb3Age0FycmF5PEVudGl0aWVzLkVudHJ5Pn0gaXRlbXNcbiAqIEBwcm9wIHtBcnJheTxPYmplY3Q+PX0gZXJyb3JzIC0gQXJyYXkgb2YgZXJyb3JzIHRoYXQgbWlnaHQgb2NjdXIgd2hlbiByZXRyaWV2aW5nIGVudHJpZXMuXG4gKiBAcHJvcCB7T2JqZWN0PEFycmF5Pj19IGluY2x1ZGVzIC0gT2JqZWN0IHdpdGggYXJyYXlzIG9mIGluY2x1ZGVzIGZvciBFbnRyaWVzIGFuZCBBc3NldHMuIFRoaXMgd2lsbCBiZSBwcmVzZW50IGlmIHJlc29sdmVMaW5rcyBpcyBvbiwgYW5kIGFueSBsaW5rZWQgZW50cmllcyBvciBhc3NldHMgZXhpc3QuIFRob3NlIGxpbmtzIHdpbGwgYmUgcmVzb2x2ZWQgaW4gdGhlIEVudHJpZXMgcHJlc2VudCBpbiB0aGUgaXRlbXMgYXJyYXksIGJ1dCB0aGV5IGFyZSBhbHNvIHByZXNlbnQgaGVyZSBpbiByYXcgZm9ybS5cbiAqIEBwcm9wIHtmdW5jdGlvbigpOiBPYmplY3R9IHRvUGxhaW5PYmplY3QoKSAtIFJldHVybnMgdGhpcyBFbnRyeSBjb2xsZWN0aW9uIGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKiBAcHJvcCB7ZnVuY3Rpb24oP2Z1bmN0aW9uPSwgc3BhY2U9KTogT2JqZWN0fSBzdHJpbmdpZnlTYWZlKHJlcGxhY2VyLHNwYWNlKSAtIFN0cmluZ2lmaWVzIHRoZSBlbnRyeSBjb2xsZWN0aW9uLCBhY2NvdW50aW5nIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLiBDaXJjdWxhciByZWZlcmVuY2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBqdXN0IGEgTGluayBvYmplY3QsIHdpdGggYSA8Y29kZT5jaXJjdWxhcjwvY29kZT4gcHJvcGVydHkgc2V0IHRvIDxjb2RlPnRydWU8L2NvZGU+LiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0pTT04vc3RyaW5naWZ5XCI+TUROPC9hPiBhbmQgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2pzb24tc3RyaW5naWZ5LXNhZmVcIj5qc29uLXN0cmluZ2lmeS1zYWZlPC9hPiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoZSBhcmd1bWVudHMgdGhpcyBtZXRob2QgY2FuIHRha2UuXG4gKi9cblxuLyoqXG4gKiBEYXRhIGlzIGFsc28gbWl4ZWQgaW4gd2l0aCBsaW5rIGdldHRlcnMgaWYgbGlua3MgZXhpc3QgYW5kIGluY2x1ZGVzIHdlcmUgcmVxdWVzdGVkXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSYXcgZW50cnkgY29sbGVjdGlvbiBkYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHdyYXBwZXIgb3B0aW9uc1xuICogQHJldHVybiB7RW50cnlDb2xsZWN0aW9ufSBXcmFwcGVkIGVudHJ5IGNvbGxlY3Rpb24gZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwRW50cnlDb2xsZWN0aW9uKGRhdGEsIF9yZWYpIHtcbiAgdmFyIHJlc29sdmVMaW5rcyA9IF9yZWYucmVzb2x2ZUxpbmtzLFxuICAgICAgcmVtb3ZlVW5yZXNvbHZlZCA9IF9yZWYucmVtb3ZlVW5yZXNvbHZlZDtcbiAgdmFyIHdyYXBwZWREYXRhID0gbWl4aW5TdHJpbmdpZnlTYWZlKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xuXG4gIGlmIChyZXNvbHZlTGlua3MpIHtcbiAgICB3cmFwcGVkRGF0YS5pdGVtcyA9IHJlc29sdmVSZXNwb25zZSh3cmFwcGVkRGF0YSwge1xuICAgICAgcmVtb3ZlVW5yZXNvbHZlZDogcmVtb3ZlVW5yZXNvbHZlZCxcbiAgICAgIGl0ZW1FbnRyeVBvaW50czogWydmaWVsZHMnXVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZyZWV6ZVN5cyh3cmFwcGVkRGF0YSk7XG59IiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEFzc2V0XG4gKiBAcHJvcCB7RW50aXRpZXMuU3lzfSBzeXMgLSBTdGFuZGFyZCBzeXN0ZW0gbWV0YWRhdGEgd2l0aCBhZGRpdGlvbmFsIGVudHJ5IHNwZWNpZmljIHByb3BlcnRpZXNcbiAqIEBwcm9wIHtzdHJpbmc9fSBzeXMubG9jYWxlIC0gSWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoZSBsb2NhbGUgd2hpY2ggdGhpcyBhc3NldCB1c2VzXG4gKiBAcHJvcCB7T2JqZWN0fSBmaWVsZHMgLSBPYmplY3Qgd2l0aCBjb250ZW50IGZvciBlYWNoIGZpZWxkXG4gKiBAcHJvcCB7c3RyaW5nfSBmaWVsZHMudGl0bGUgLSBUaXRsZSBmb3IgdGhpcyBhc3NldFxuICogQHByb3Age3N0cmluZ30gZmllbGRzLmRlc2NyaXB0aW9uIC0gRGVzY3JpcHRpb24gZm9yIHRoaXMgYXNzZXRcbiAqIEBwcm9wIHtPYmplY3R9IGZpZWxkcy5maWxlIC0gRmlsZSBvYmplY3QgZm9yIHRoaXMgYXNzZXRcbiAqIEBwcm9wIHtzdHJpbmd9IGZpZWxkcy5maWxlLmZpbGVOYW1lIC0gTmFtZSBmb3IgdGhlIGZpbGVcbiAqIEBwcm9wIHtzdHJpbmd9IGZpZWxkcy5maWxlLmNvbnRlbnRUeXBlIC0gTWltZSB0eXBlIGZvciB0aGUgZmlsZVxuICogQHByb3Age3N0cmluZ30gZmllbGRzLmZpbGUudXJsIC0gVXJsIHdoZXJlIHRoZSBmaWxlIGlzIGF2YWlsYWJsZSBhdC5cbiAqIEBwcm9wIHtPYmplY3R9IGZpZWxkcy5maWxlLmRldGFpbHMgLSBEZXRhaWxzIGZvciB0aGUgZmlsZSwgZGVwZW5kaW5nIG9uIGZpbGUgdHlwZSAoZXhhbXBsZTogaW1hZ2Ugc2l6ZSBpbiBieXRlcywgZXRjKVxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIEFzc2V0IGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSYXcgYXNzZXQgZGF0YVxuICogQHJldHVybiB7QXNzZXR9IFdyYXBwZWQgYXNzZXQgZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQXNzZXQoZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufVxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEFzc2V0Q29sbGVjdGlvblxuICogQHByb3Age251bWJlcn0gdG90YWxcbiAqIEBwcm9wIHtudW1iZXJ9IHNraXBcbiAqIEBwcm9wIHtudW1iZXJ9IGxpbWl0XG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuQXNzZXQ+fSBpdGVtc1xuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIEFzc2V0IGNvbGxlY3Rpb24gYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBhc3NldCBjb2xsZWN0aW9uIGRhdGFcbiAqIEByZXR1cm4ge0Fzc2V0Q29sbGVjdGlvbn0gV3JhcHBlZCBhc3NldCBjb2xsZWN0aW9uIGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcEFzc2V0Q29sbGVjdGlvbihkYXRhKSB7XG4gIHJldHVybiBmcmVlemVTeXModG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG59IiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIENvbnRlbnRUeXBlXG4gKiBAcHJvcCB7RW50aXRpZXMuU3lzfSBzeXMgLSBTeXN0ZW0gbWV0YWRhdGFcbiAqIEBwcm9wIHtzdHJpbmd9IG5hbWVcbiAqIEBwcm9wIHtzdHJpbmd9IGRlc2NyaXB0aW9uXG4gKiBAcHJvcCB7c3RyaW5nfSBkaXNwbGF5RmllbGQgLSBGaWVsZCB1c2VkIGFzIHRoZSBtYWluIGRpc3BsYXkgZmllbGQgZm9yIEVudHJpZXNcbiAqIEBwcm9wIHtzdHJpbmd9IEFycmF5PEZpZWxkPiAtIEFsbCB0aGUgZmllbGRzIGNvbnRhaW5lZCBpbiB0aGlzIENvbnRlbnQgVHlwZVxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIENvbnRlbnQgVHlwZSBhcyBhIHBsYWluIEpTIG9iamVjdFxuICovXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gUmF3IGNvbnRlbnQgdHlwZSBkYXRhXG4gKiBAcmV0dXJuIHtDb250ZW50VHlwZX0gV3JhcHBlZCBjb250ZW50IHR5cGUgZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQ29udGVudFR5cGUoZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufVxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIENvbnRlbnRUeXBlQ29sbGVjdGlvblxuICogQHByb3Age251bWJlcn0gdG90YWxcbiAqIEBwcm9wIHtudW1iZXJ9IHNraXBcbiAqIEBwcm9wIHtudW1iZXJ9IGxpbWl0XG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuQ29udGVudFR5cGU+fSBpdGVtc1xuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIENvbnRlbnQgVHlwZSBjb2xsZWN0aW9uIGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSYXcgY29udGVudCB0eXBlIGNvbGxlY3Rpb24gZGF0YVxuICogQHJldHVybiB7Q29udGVudFR5cGVDb2xsZWN0aW9ufSBXcmFwcGVkIGNvbnRlbnQgdHlwZSBjb2xsZWN0aW9uIGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcENvbnRlbnRUeXBlQ29sbGVjdGlvbihkYXRhKSB7XG4gIHJldHVybiBmcmVlemVTeXModG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG59IiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIExvY2FsZVxuICogQHByb3Age0VudGl0aWVzLlN5c30gc3lzIC0gU3RhbmRhcmQgc3lzdGVtIG1ldGFkYXRhIHdpdGggYWRkaXRpb25hbCBlbnRyeSBzcGVjaWZpYyBwcm9wZXJ0aWVzXG4gKiBAcHJvcCB7c3RyaW5nfSBuYW1lIC0gbG9jYWxlIG5hbWUgKGV4YW1wbGU6IEVuZ2xpc2gpXG4gKiBAcHJvcCB7c3RyaW5nfSBjb2RlIC0gbG9jYWxlIGNvZGUgKGV4YW1wbGU6IGVuLVVTKVxuICogQHByb3Age3N0cmluZ30gZmFsbGJhY2tDb2RlIC0gdGhlIGxvY2FsZSBjb2RlIHRvIGZhbGxiYWNrIHRvIHdoZW4gdGhlcmUgaXMgbm90IGNvbnRlbnQgZm9yIHRoZSBjdXJyZW50IGxvY2FsZVxuICogQHByb3Age2Jvb2xlYW59IGRlZmF1bHQgLSBJZiB0aGlzIGlzIHRoZSBkZWZhdWx0IGxvY2FsZVxuICogQHByb3Age2Jvb2xlYW59IG9wdGlvbmFsIC0gSWYgdGhlIGxvY2FsZSBuZWVkcyB0byBiZSBmaWxsZWQgaW4gb24gZW50cmllcyBvciBub3RcbiAqIEBwcm9wIHtmdW5jdGlvbigpOiBPYmplY3R9IHRvUGxhaW5PYmplY3QoKSAtIFJldHVybnMgdGhpcyBMb2NhbGUgYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBsb2NhbGUgZGF0YVxuICogQHJldHVybiB7TG9jYWxlfSBXcmFwcGVkIGxvY2FsZSBkYXRhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBMb2NhbGUoZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufVxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIExvY2FsZUNvbGxlY3Rpb25cbiAqIEBwcm9wIHtudW1iZXJ9IHRvdGFsXG4gKiBAcHJvcCB7bnVtYmVyfSBza2lwXG4gKiBAcHJvcCB7bnVtYmVyfSBsaW1pdFxuICogQHByb3Age0FycmF5PEVudGl0aWVzLkxvY2FsZT59IGl0ZW1zXG4gKiBAcHJvcCB7ZnVuY3Rpb24oKTogT2JqZWN0fSB0b1BsYWluT2JqZWN0KCkgLSBSZXR1cm5zIHRoaXMgTG9jYWxlIGNvbGxlY3Rpb24gYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBsb2NhbGUgY29sbGVjdGlvbiBkYXRhXG4gKiBAcmV0dXJuIHtMb2NhbGVDb2xsZWN0aW9ufSBXcmFwcGVkIGxvY2FsZSBjb2xsZWN0aW9uIGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcExvY2FsZUNvbGxlY3Rpb24oZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufSIsImltcG9ydCAqIGFzIHNwYWNlIGZyb20gJy4vc3BhY2UnO1xuaW1wb3J0ICogYXMgZW50cnkgZnJvbSAnLi9lbnRyeSc7XG5pbXBvcnQgKiBhcyBhc3NldCBmcm9tICcuL2Fzc2V0JztcbmltcG9ydCAqIGFzIGNvbnRlbnRUeXBlIGZyb20gJy4vY29udGVudC10eXBlJztcbmltcG9ydCAqIGFzIGxvY2FsZSBmcm9tICcuL2xvY2FsZSc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNwYWNlOiBzcGFjZSxcbiAgZW50cnk6IGVudHJ5LFxuICBhc3NldDogYXNzZXQsXG4gIGNvbnRlbnRUeXBlOiBjb250ZW50VHlwZSxcbiAgbG9jYWxlOiBsb2NhbGVcbn07IiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8qKlxuICogU2VlIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvY29uY2VwdHMvc3luYy9cIj5TeW5jaHJvbml6YXRpb248L2E+IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICogQG5hbWVzcGFjZSBTeW5jXG4gKi9cbmltcG9ydCB7IGNyZWF0ZVJlcXVlc3RDb25maWcsIGZyZWV6ZVN5cywgdG9QbGFpbk9iamVjdCB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuaW1wb3J0IHJlc29sdmVSZXNwb25zZSBmcm9tICdjb250ZW50ZnVsLXJlc29sdmUtcmVzcG9uc2UnO1xuaW1wb3J0IG1peGluU3RyaW5naWZ5U2FmZSBmcm9tICcuL21peGlucy9zdHJpbmdpZnktc2FmZSc7XG4vKipcbiAqIEBtZW1iZXJvZiBTeW5jXG4gKiBAdHlwZWRlZiBTeW5jQ29sbGVjdGlvblxuICogQHByb3Age0FycmF5PEVudGl0aWVzLkVudHJ5Pn0gZW50cmllcyAtIEFsbCBleGlzdGluZyBlbnRyaWVzIG9uIGZpcnN0IHN5bmMuIE5ldyBhbmQgdXBkYXRlZCBlbnRyaWVzIG9uIHN1YnNlcXVlbnQgc3luY3MuXG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuQXNzZXQ+fSBhc3NldHMgLSBBbGwgZXhpc3RpbmcgYXNzZXRzIG9uIGZpcnN0IHN5bmMuIE5ldyBhbmQgdXBkYXRlZCBhc3NldHMgb24gc3Vic2VxdWVudCBzeW5jcy5cbiAqIEBwcm9wIHtBcnJheTxTeW5jLkRlbGV0ZWRFbnRyeT59IGRlbGV0ZWRFbnRyaWVzIC0gTGlzdCBvZiBkZWxldGVkIEVudHJpZXMgc2luY2UgbGFzdCBzeW5jXG4gKiBAcHJvcCB7QXJyYXk8U3luYy5EZWxldGVkQXNzZXQ+fSBkZWxldGVkQXNzZXRzIC0gTGlzdCBvZiBkZWxldGVkIEFzc2V0cyBzaW5jZSBsYXN0IHN5bmNcbiAqIEBwcm9wIHtzdHJpbmd9IG5leHRTeW5jVG9rZW4gLSBUb2tlbiB0byBiZSBzZW50IHRvIHRoZSBuZXh0IHN5bmMgY2FsbFxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIFN5bmMgY29sbGVjdGlvbiBhcyBhIHBsYWluIEpTIG9iamVjdFxuICogQHByb3Age2Z1bmN0aW9uKD9mdW5jdGlvbj0sIHNwYWNlPSk6IE9iamVjdH0gc3RyaW5naWZ5U2FmZShyZXBsYWNlcixzcGFjZSkgLSBTdHJpbmdpZmllcyB0aGUgU3luYyBjb2xsZWN0aW9uLCBhY2NvdW50aW5nIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLiBDaXJjdWxhciByZWZlcmVuY2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBqdXN0IGEgTGluayBvYmplY3QsIHdpdGggYSA8Y29kZT5jaXJjdWxhcjwvY29kZT4gcHJvcGVydHkgc2V0IHRvIDxjb2RlPnRydWU8L2NvZGU+LiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0pTT04vc3RyaW5naWZ5XCI+TUROPC9hPiBhbmQgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2pzb24tc3RyaW5naWZ5LXNhZmVcIj5qc29uLXN0cmluZ2lmeS1zYWZlPC9hPiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoZSBhcmd1bWVudHMgdGhpcyBtZXRob2QgY2FuIHRha2UuXG4gKi9cblxuLyoqXG4gKiBEZWxldGVkIEVudHJpZXMgYXJlIHRoZSBzYW1lIGFzIEVudHJpZXMsIGJ1dCBvbmx5IGFwcGVhciBvbiB0aGUgc3luYyBBUEkuXG4gKiBAbWVtYmVyb2YgU3luY1xuICogQHR5cGVkZWYgRGVsZXRlZEVudHJ5XG4gKiBAdHlwZSBFbnRpdGllcy5FbnRyeVxuICovXG5cbi8qKlxuICogRGVsZXRlZCBBc3NldHMgYXJlIHRoZSBzYW1lIGFzIEFzc2V0cywgYnV0IG9ubHkgYXBwZWFyIG9uIHRoZSBzeW5jIEFQSS5cbiAqIEBtZW1iZXJvZiBTeW5jXG4gKiBAdHlwZWRlZiBEZWxldGVkQXNzZXRcbiAqIEB0eXBlIEVudGl0aWVzLkFzc2V0XG4gKi9cblxuLyoqXG4gKiBUaGlzIG1vZHVsZSByZXRyaWV2ZXMgYWxsIHRoZSBhdmFpbGFibGUgcGFnZXMgZm9yIGEgc3luYyBvcGVyYXRpb25cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaHR0cCAtIEhUVFAgY2xpZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcXVlcnkgLSBRdWVyeSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gU3luYyBvcHRpb25zIG9iamVjdFxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZXNvbHZlTGlua3MgPSB0cnVlXSAtIElmIGxpbmtzIHNob3VsZCBiZSByZXNvbHZlZFxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZW1vdmVVbnJlc29sdmVkID0gZmFsc2VdIC0gSWYgdW5yZXNvbHZhYmxlIGxpbmtzIHNob3VsZCBnZXQgcmVtb3ZlZFxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wYWdpbmF0ZSA9IHRydWVdIC0gSWYgZnVydGhlciBzeW5jIHBhZ2VzIHNob3VsZCBhdXRvbWF0aWNhbGx5IGJlIGNyYXdsZWRcbiAqIEByZXR1cm4ge1Byb21pc2U8U3luY0NvbGxlY3Rpb24+fVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhZ2VkU3luYyhodHRwLCBxdWVyeSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgaWYgKCFxdWVyeSB8fCAhcXVlcnkuaW5pdGlhbCAmJiAhcXVlcnkubmV4dFN5bmNUb2tlbiAmJiAhcXVlcnkubmV4dFBhZ2VUb2tlbikge1xuICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgb25lIG9mIGBpbml0aWFsYCwgYG5leHRTeW5jVG9rZW5gIG9yIGBuZXh0UGFnZVRva2VuYCBwYXJhbWV0ZXJzIGZvciBzeW5jaW5nJyk7XG4gIH1cblxuICBpZiAocXVlcnkgJiYgcXVlcnkuY29udGVudF90eXBlICYmICFxdWVyeS50eXBlKSB7XG4gICAgcXVlcnkudHlwZSA9ICdFbnRyeSc7XG4gIH0gZWxzZSBpZiAocXVlcnkgJiYgcXVlcnkuY29udGVudF90eXBlICYmIHF1ZXJ5LnR5cGUgJiYgcXVlcnkudHlwZSAhPT0gJ0VudHJ5Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignV2hlbiB1c2luZyB0aGUgYGNvbnRlbnRfdHlwZWAgZmlsdGVyIHlvdXIgYHR5cGVgIHBhcmFtZXRlciBjYW5ub3QgYmUgZGlmZmVyZW50IGZyb20gYEVudHJ5YC4nKTtcbiAgfVxuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICByZXNvbHZlTGlua3M6IHRydWUsXG4gICAgcmVtb3ZlVW5yZXNvbHZlZDogZmFsc2UsXG4gICAgcGFnaW5hdGU6IHRydWVcbiAgfTtcblxuICB2YXIgX2RlZmF1bHRPcHRpb25zJG9wdGlvID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0T3B0aW9ucyksIG9wdGlvbnMpLFxuICAgICAgcmVzb2x2ZUxpbmtzID0gX2RlZmF1bHRPcHRpb25zJG9wdGlvLnJlc29sdmVMaW5rcyxcbiAgICAgIHJlbW92ZVVucmVzb2x2ZWQgPSBfZGVmYXVsdE9wdGlvbnMkb3B0aW8ucmVtb3ZlVW5yZXNvbHZlZCxcbiAgICAgIHBhZ2luYXRlID0gX2RlZmF1bHRPcHRpb25zJG9wdGlvLnBhZ2luYXRlO1xuXG4gIHZhciBzeW5jT3B0aW9ucyA9IHtcbiAgICBwYWdpbmF0ZTogcGFnaW5hdGVcbiAgfTtcbiAgcmV0dXJuIGdldFN5bmNQYWdlKGh0dHAsIFtdLCBxdWVyeSwgc3luY09wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgLy8gY2xvbmVzIHJlc3BvbnNlLml0ZW1zIHVzZWQgaW4gaW5jbHVkZXMgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRoZXNlIHRvIGJlIG11dGF0ZWRcbiAgICBpZiAocmVzb2x2ZUxpbmtzKSB7XG4gICAgICByZXNwb25zZS5pdGVtcyA9IHJlc29sdmVSZXNwb25zZShyZXNwb25zZSwge1xuICAgICAgICByZW1vdmVVbnJlc29sdmVkOiByZW1vdmVVbnJlc29sdmVkLFxuICAgICAgICBpdGVtRW50cnlQb2ludHM6IFsnZmllbGRzJ11cbiAgICAgIH0pO1xuICAgIH0gLy8gbWFwcyByZXNwb25zZSBpdGVtcyBhZ2FpbiBhZnRlciBnZXR0ZXJzIGFyZSBhdHRhY2hlZFxuXG5cbiAgICB2YXIgbWFwcGVkUmVzcG9uc2VJdGVtcyA9IG1hcFJlc3BvbnNlSXRlbXMocmVzcG9uc2UuaXRlbXMpO1xuXG4gICAgaWYgKHJlc3BvbnNlLm5leHRTeW5jVG9rZW4pIHtcbiAgICAgIG1hcHBlZFJlc3BvbnNlSXRlbXMubmV4dFN5bmNUb2tlbiA9IHJlc3BvbnNlLm5leHRTeW5jVG9rZW47XG4gICAgfVxuXG4gICAgaWYgKHJlc3BvbnNlLm5leHRQYWdlVG9rZW4pIHtcbiAgICAgIG1hcHBlZFJlc3BvbnNlSXRlbXMubmV4dFBhZ2VUb2tlbiA9IHJlc3BvbnNlLm5leHRQYWdlVG9rZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyZWV6ZVN5cyhtaXhpblN0cmluZ2lmeVNhZmUodG9QbGFpbk9iamVjdChtYXBwZWRSZXNwb25zZUl0ZW1zKSkpO1xuICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5PEVudGl0aWVzLkVudHJ5fEVudGl0aWVzLkFycmF5fFN5bmMuRGVsZXRlZEVudHJ5fFN5bmMuRGVsZXRlZEFzc2V0Pn0gaXRlbXNcbiAqIEByZXR1cm4ge09iamVjdH0gRW50aXRpZXMgbWFwcGVkIHRvIGFuIG9iamVjdCBmb3IgZWFjaCBlbnRpdHkgdHlwZVxuICovXG5cbmZ1bmN0aW9uIG1hcFJlc3BvbnNlSXRlbXMoaXRlbXMpIHtcbiAgdmFyIHJlZHVjZXIgPSBmdW5jdGlvbiByZWR1Y2VyKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjY3VtdWxhdGVkLCBpdGVtKSB7XG4gICAgICBpZiAoaXRlbS5zeXMudHlwZSA9PT0gdHlwZSkge1xuICAgICAgICBhY2N1bXVsYXRlZC5wdXNoKHRvUGxhaW5PYmplY3QoaXRlbSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWQ7XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGVudHJpZXM6IGl0ZW1zLnJlZHVjZShyZWR1Y2VyKCdFbnRyeScpLCBbXSksXG4gICAgYXNzZXRzOiBpdGVtcy5yZWR1Y2UocmVkdWNlcignQXNzZXQnKSwgW10pLFxuICAgIGRlbGV0ZWRFbnRyaWVzOiBpdGVtcy5yZWR1Y2UocmVkdWNlcignRGVsZXRlZEVudHJ5JyksIFtdKSxcbiAgICBkZWxldGVkQXNzZXRzOiBpdGVtcy5yZWR1Y2UocmVkdWNlcignRGVsZXRlZEFzc2V0JyksIFtdKVxuICB9O1xufVxuLyoqXG4gKiBJZiB0aGUgcmVzcG9uc2UgY29udGFpbnMgYSBuZXh0UGFnZVVybCwgZXh0cmFjdHMgdGhlIHN5bmMgdG9rZW4gdG8gZ2V0IHRoZVxuICogbmV4dCBwYWdlIGFuZCBjYWxscyBpdHNlbGYgYWdhaW4gd2l0aCB0aGF0IHRva2VuLlxuICogT3RoZXJ3aXNlLCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbnMgYSBuZXh0U3luY1VybCwgZXh0cmFjdHMgdGhlIHN5bmMgdG9rZW5cbiAqIGFuZCByZXR1cm5zIGl0LlxuICogT24gZWFjaCBjYWxsIG9mIHRoaXMgZnVuY3Rpb24sIGFueSByZXRyaWV2ZWQgaXRlbXMgYXJlIGNvbGxlY3RlZCBpbiB0aGVcbiAqIHN1cHBsaWVkIGl0ZW1zIGFycmF5LCB3aGljaCBnZXRzIHJldHVybmVkIGluIHRoZSBlbmRcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaHR0cFxuICogQHBhcmFtIHtBcnJheTxFbnRpdGllcy5FbnRyeXxFbnRpdGllcy5BcnJheXxTeW5jLkRlbGV0ZWRFbnRyeXxTeW5jLkRlbGV0ZWRBc3NldD59IGl0ZW1zXG4gKiBAcGFyYW0ge09iamVjdH0gcXVlcnlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gU3luYyBwYWdlIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnBhZ2luYXRlID0gdHJ1ZV0gLSBJZiBmdXJ0aGVyIHN5bmMgcGFnZXMgc2hvdWxkIGF1dG9tYXRpY2FsbHkgYmUgY3Jhd2xlZFxuICogQHJldHVybiB7UHJvbWlzZTx7aXRlbXM6IEFycmF5LCBuZXh0U3luY1Rva2VuOiBzdHJpbmd9Pn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFN5bmNQYWdlKGh0dHAsIGl0ZW1zLCBxdWVyeSwgX3JlZikge1xuICB2YXIgcGFnaW5hdGUgPSBfcmVmLnBhZ2luYXRlO1xuXG4gIGlmIChxdWVyeS5uZXh0U3luY1Rva2VuKSB7XG4gICAgcXVlcnkuc3luY190b2tlbiA9IHF1ZXJ5Lm5leHRTeW5jVG9rZW47XG4gICAgZGVsZXRlIHF1ZXJ5Lm5leHRTeW5jVG9rZW47XG4gIH1cblxuICBpZiAocXVlcnkubmV4dFBhZ2VUb2tlbikge1xuICAgIHF1ZXJ5LnN5bmNfdG9rZW4gPSBxdWVyeS5uZXh0UGFnZVRva2VuO1xuICAgIGRlbGV0ZSBxdWVyeS5uZXh0UGFnZVRva2VuO1xuICB9XG5cbiAgaWYgKHF1ZXJ5LnN5bmNfdG9rZW4pIHtcbiAgICBkZWxldGUgcXVlcnkuaW5pdGlhbDtcbiAgICBkZWxldGUgcXVlcnkudHlwZTtcbiAgICBkZWxldGUgcXVlcnkuY29udGVudF90eXBlO1xuICAgIGRlbGV0ZSBxdWVyeS5saW1pdDtcbiAgfVxuXG4gIHJldHVybiBodHRwLmdldCgnc3luYycsIGNyZWF0ZVJlcXVlc3RDb25maWcoe1xuICAgIHF1ZXJ5OiBxdWVyeVxuICB9KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwge307XG4gICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoZGF0YS5pdGVtcyB8fCBbXSk7XG5cbiAgICBpZiAoZGF0YS5uZXh0UGFnZVVybCkge1xuICAgICAgaWYgKHBhZ2luYXRlKSB7XG4gICAgICAgIGRlbGV0ZSBxdWVyeS5pbml0aWFsO1xuICAgICAgICBxdWVyeS5zeW5jX3Rva2VuID0gZ2V0VG9rZW4oZGF0YS5uZXh0UGFnZVVybCk7XG4gICAgICAgIHJldHVybiBnZXRTeW5jUGFnZShodHRwLCBpdGVtcywgcXVlcnksIHtcbiAgICAgICAgICBwYWdpbmF0ZTogcGFnaW5hdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgbmV4dFBhZ2VUb2tlbjogZ2V0VG9rZW4oZGF0YS5uZXh0UGFnZVVybClcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkYXRhLm5leHRTeW5jVXJsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgIG5leHRTeW5jVG9rZW46IGdldFRva2VuKGRhdGEubmV4dFN5bmNVcmwpXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogW11cbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogRXh0cmFjdHMgdG9rZW4gb3V0IG9mIGFuIHVybFxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRva2VuKHVybCkge1xuICB2YXIgdXJsUGFydHMgPSB1cmwuc3BsaXQoJz8nKTtcbiAgcmV0dXJuIHVybFBhcnRzLmxlbmd0aCA+IDAgPyB1cmxQYXJ0c1sxXS5yZXBsYWNlKCdzeW5jX3Rva2VuPScsICcnKSA6ICcnO1xufSIsImZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuLypcbiogc2RrIHJlbGllcyBoZWF2aWx5IG9uIHN5cyBtZXRhZGF0YVxuKiBzbyB3ZSBjYW5ub3Qgb21pdCB0aGUgc3lzIHByb3BlcnR5IG9uIHNkayBsZXZlbCBlbnRpcmVseVxuKiBhbmQgd2UgaGF2ZSB0byBlbnN1cmUgdGhhdCBhdCBsZWFzdCBgaWRgIGFuZCBgdHlwZWAgYXJlIHByZXNlbnRcbiogKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZVNlbGVjdChxdWVyeSkge1xuICBpZiAoIXF1ZXJ5LnNlbGVjdCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBUaGUgc2VsZWN0aW9uIG9mIGZpZWxkcyBmb3IgdGhlIHF1ZXJ5IGlzIGxpbWl0ZWRcbiAgLy8gR2V0IHRoZSBkaWZmZXJlbnQgcGFydHMgdGhhdCBhcmUgbGlzdGVkIGZvciBzZWxlY3Rpb25cblxuXG4gIHZhciBhbGxTZWxlY3RzID0gcXVlcnkuc2VsZWN0LnNwbGl0KCcsJyk7IC8vIE1vdmUgdGhlIHBhcnRzIGludG8gYSBzZXQgZm9yIGVhc3kgYWNjZXNzIGFuZCBkZWR1cGxpY2F0aW9uXG5cbiAgdmFyIHNlbGVjdGVkU2V0ID0gbmV3IFNldChhbGxTZWxlY3RzKTsgLy8gSWYgd2UgYWxyZWFkeSBzZWxlY3QgYWxsIG9mIGBzeXNgIHdlIGNhbiBqdXN0IHJldHVyblxuICAvLyBzaW5jZSB3ZSdyZSBhbnl3YXkgZmV0Y2hpbmcgZXZlcnl0aGluZyB0aGF0IGlzIG5lZWRlZFxuXG4gIGlmIChzZWxlY3RlZFNldC5oYXMoJ3N5cycpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFdlIGRvbid0IHNlbGVjdCBgc3lzYCBzbyB3ZSBuZWVkIHRvIGVuc3VyZSB0aGUgbWluaW11bSBzZXRcblxuXG4gIHNlbGVjdGVkU2V0LmFkZCgnc3lzLmlkJyk7XG4gIHNlbGVjdGVkU2V0LmFkZCgnc3lzLnR5cGUnKTsgLy8gUmVhc3NpZ24gdGhlIG5vcm1hbGl6ZWQgc3lzIHByb3BlcnRpZXNcblxuICBxdWVyeS5zZWxlY3QgPSBfdG9Db25zdW1hYmxlQXJyYXkoc2VsZWN0ZWRTZXQpLmpvaW4oJywnKTtcbn0iLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBDb250ZW50ZnVsIERlbGl2ZXJ5IEFQSSBDbGllbnQuIENvbnRhaW5zIG1ldGhvZHMgd2hpY2ggYWxsb3cgYWNjZXNzIHRvIHRoZVxuICogZGlmZmVyZW50IGtpbmRzIG9mIGVudGl0aWVzIHByZXNlbnQgaW4gQ29udGVudGZ1bCAoRW50cmllcywgQXNzZXRzLCBldGMpLlxuICogQG5hbWVzcGFjZSBDb250ZW50ZnVsQ2xpZW50QVBJXG4gKiBAc2VlIEVudGl0aWVzXG4gKi9cblxuLyoqXG4gKiBUaGUgZGlmZmVyZW50IGtpbmRzIG9mIHRvcCBsZXZlbCBlbnRpdGllcyB5b3UgY2FuIGZpbmQgaW4gQ29udGVudGZ1bFxuICogQG5hbWVzcGFjZSBFbnRpdGllc1xuICovXG5cbi8qKlxuICogU3lzdGVtIG1ldGFkYXRhLiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9yZWZlcmVuY2VzL2NvbnRlbnQtZGVsaXZlcnktYXBpLyMvaW50cm9kdWN0aW9uL2NvbW1vbi1yZXNvdXJjZS1hdHRyaWJ1dGVzXCI+Q29tbW9uIFJlc291cmNlIEF0dHJpYnV0ZXM8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIFN5c1xuICogQHByb3Age3N0cmluZ30gdHlwZVxuICogQHByb3Age3N0cmluZ30gaWRcbiAqIEBwcm9wIHtFbnRpdGllcy5MaW5rfSBzcGFjZVxuICogQHByb3Age3N0cmluZ30gY3JlYXRlZEF0XG4gKiBAcHJvcCB7c3RyaW5nfSB1cGRhdGVkQXRcbiAqIEBwcm9wIHtudW1iZXJ9IHJldmlzaW9uXG4gKi9cblxuLyoqXG4gKiBMaW5rIHRvIGFub3RoZXIgZW50aXR5LiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9jb25jZXB0cy9saW5rcy9cIj5MaW5rczwvYT4gZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgTGlua1xuICogQHByb3Age3N0cmluZ30gdHlwZSAtIHR5cGUgb2YgdGhpcyBlbnRpdHkuIEFsd2F5cyBsaW5rLlxuICogQHByb3Age3N0cmluZ30gaWRcbiAqIEBwcm9wIHtzdHJpbmd9IGxpbmtUeXBlIC0gdHlwZSBvZiB0aGlzIGxpbmsuIElmIGRlZmluZWQsIGVpdGhlciBFbnRyeSBvciBBc3NldFxuICovXG5cbi8qKlxuICogQG1lbWJlcm9mIENvbnRlbnRmdWxDbGllbnRBUElcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENsaWVudEFQSVxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRTcGFjZVxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRDb250ZW50VHlwZVxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRDb250ZW50VHlwZXNcbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2V0RW50cnlcbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2V0RW50cmllc1xuICogQHByb3Age2Z1bmN0aW9ufSBnZXRBc3NldFxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRBc3NldHNcbiAqIEBwcm9wIHtmdW5jdGlvbn0gcGFyc2VFbnRyaWVzXG4gKiBAcHJvcCB7ZnVuY3Rpb259IHN5bmNcbiAqL1xuaW1wb3J0IHsgY3JlYXRlUmVxdWVzdENvbmZpZyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuaW1wb3J0IGVudGl0aWVzIGZyb20gJy4vZW50aXRpZXMnO1xuaW1wb3J0IHBhZ2VkU3luYyBmcm9tICcuL3BhZ2VkLXN5bmMnO1xuaW1wb3J0IG5vcm1hbGl6ZVNlbGVjdCBmcm9tICcuL3V0aWxzL25vcm1hbGl6ZS1zZWxlY3QnO1xuLyoqXG4gKiBDcmVhdGVzIEFQSSBvYmplY3Qgd2l0aCBtZXRob2RzIHRvIGFjY2VzcyBmdW5jdGlvbmFsaXR5IGZyb20gQ29udGVudGZ1bCdzXG4gKiBEZWxpdmVyeSBBUElcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gQVBJIGluaXRpYWxpemF0aW9uIHBhcmFtc1xuICogQHByb3Age09iamVjdH0gaHR0cCAtIEhUVFAgY2xpZW50IGluc3RhbmNlXG4gKiBAcHJvcCB7T2JqZWN0fSBlbnRpdGllcyAtIE9iamVjdCB3aXRoIHdyYXBwZXIgbWV0aG9kcyBmb3IgZWFjaCBraW5kIG9mIGVudGl0eVxuICogQHByb3Age0Z1bmN0aW9ufSBnZXRHbG9iYWxPcHRpb25zIC0gTGluayByZXNvbHZlciBwcmVjb25maWd1cmVkIHdpdGggZ2xvYmFsIHNldHRpbmdcbiAqIEByZXR1cm4ge0NsaWVudEFQSX1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDb250ZW50ZnVsQXBpKF9yZWYpIHtcbiAgdmFyIGh0dHAgPSBfcmVmLmh0dHAsXG4gICAgICBnZXRHbG9iYWxPcHRpb25zID0gX3JlZi5nZXRHbG9iYWxPcHRpb25zO1xuICB2YXIgd3JhcFNwYWNlID0gZW50aXRpZXMuc3BhY2Uud3JhcFNwYWNlO1xuICB2YXIgX2VudGl0aWVzJGNvbnRlbnRUeXBlID0gZW50aXRpZXMuY29udGVudFR5cGUsXG4gICAgICB3cmFwQ29udGVudFR5cGUgPSBfZW50aXRpZXMkY29udGVudFR5cGUud3JhcENvbnRlbnRUeXBlLFxuICAgICAgd3JhcENvbnRlbnRUeXBlQ29sbGVjdGlvbiA9IF9lbnRpdGllcyRjb250ZW50VHlwZS53cmFwQ29udGVudFR5cGVDb2xsZWN0aW9uO1xuICB2YXIgX2VudGl0aWVzJGVudHJ5ID0gZW50aXRpZXMuZW50cnksXG4gICAgICB3cmFwRW50cnkgPSBfZW50aXRpZXMkZW50cnkud3JhcEVudHJ5LFxuICAgICAgd3JhcEVudHJ5Q29sbGVjdGlvbiA9IF9lbnRpdGllcyRlbnRyeS53cmFwRW50cnlDb2xsZWN0aW9uO1xuICB2YXIgX2VudGl0aWVzJGFzc2V0ID0gZW50aXRpZXMuYXNzZXQsXG4gICAgICB3cmFwQXNzZXQgPSBfZW50aXRpZXMkYXNzZXQud3JhcEFzc2V0LFxuICAgICAgd3JhcEFzc2V0Q29sbGVjdGlvbiA9IF9lbnRpdGllcyRhc3NldC53cmFwQXNzZXRDb2xsZWN0aW9uO1xuICB2YXIgd3JhcExvY2FsZUNvbGxlY3Rpb24gPSBlbnRpdGllcy5sb2NhbGUud3JhcExvY2FsZUNvbGxlY3Rpb247XG5cbiAgdmFyIG5vdEZvdW5kRXJyb3IgPSBmdW5jdGlvbiBub3RGb3VuZEVycm9yKGlkKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdUaGUgcmVzb3VyY2UgY291bGQgbm90IGJlIGZvdW5kLicpO1xuICAgIGVycm9yLnN5cyA9IHtcbiAgICAgIHR5cGU6ICdFcnJvcicsXG4gICAgICBpZDogJ05vdEZvdW5kJ1xuICAgIH07XG4gICAgZXJyb3IuZGV0YWlscyA9IHtcbiAgICAgIHR5cGU6ICdFbnRyeScsXG4gICAgICBpZDogaWQsXG4gICAgICBlbnZpcm9ubWVudDogZ2V0R2xvYmFsT3B0aW9ucygpLmVudmlyb25tZW50LFxuICAgICAgc3BhY2U6IGdldEdsb2JhbE9wdGlvbnMoKS5zcGFjZVxuICAgIH07XG4gICAgcmV0dXJuIGVycm9yO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnJvcikge1xuICAgIGlmIChlcnJvci5kYXRhKSB7XG4gICAgICB0aHJvdyBlcnJvci5kYXRhO1xuICAgIH1cblxuICAgIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhKSB7XG4gICAgICB0aHJvdyBlcnJvci5yZXNwb25zZS5kYXRhO1xuICAgIH1cblxuICAgIHRocm93IGVycm9yO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBTcGFjZSB3aGljaCB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBjb25maWd1cmVkIHRvIHVzZVxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEVudGl0aWVzLlNwYWNlPn0gUHJvbWlzZSBmb3IgYSBTcGFjZVxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqIC8vIHJldHVybnMgdGhlIHNwYWNlIG9iamVjdCB3aXRoIHRoZSBhYm92ZSA8c3BhY2UtaWQ+XG4gICAqIGNsaWVudC5nZXRTcGFjZSgpXG4gICAqIC50aGVuKChzcGFjZSkgPT4gY29uc29sZS5sb2coc3BhY2UpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTcGFjZSgpIHtcbiAgICBzd2l0Y2hUb1NwYWNlKGh0dHApO1xuICAgIHJldHVybiBodHRwLmdldCgnJykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiB3cmFwU3BhY2UocmVzcG9uc2UuZGF0YSk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIENvbnRlbnQgVHlwZVxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGlkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuQ29udGVudFR5cGU+fSBQcm9taXNlIGZvciBhIENvbnRlbnQgVHlwZVxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRDb250ZW50VHlwZSgnPGNvbnRlbnRfdHlwZV9pZD4nKVxuICAgKiAudGhlbigoY29udGVudFR5cGUpID0+IGNvbnNvbGUubG9nKGNvbnRlbnRUeXBlKSlcbiAgICogLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0Q29udGVudFR5cGUoaWQpIHtcbiAgICBzd2l0Y2hUb0Vudmlyb25tZW50KGh0dHApO1xuICAgIHJldHVybiBodHRwLmdldCgnY29udGVudF90eXBlcy8nICsgaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gd3JhcENvbnRlbnRUeXBlKHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYSBjb2xsZWN0aW9uIG9mIENvbnRlbnQgVHlwZXNcbiAgICogQG1lbWJlcm9mIENvbnRlbnRmdWxDbGllbnRBUElcbiAgICogQHBhcmFtICB7T2JqZWN0PX0gcXVlcnkgLSBPYmplY3Qgd2l0aCBzZWFyY2ggcGFyYW1ldGVycy4gQ2hlY2sgdGhlIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvamF2YXNjcmlwdC90dXRvcmlhbHMvdXNpbmctanMtY2RhLXNkay8jcmV0cmlldmluZy1lbnRyaWVzLXdpdGgtc2VhcmNoLXBhcmFtZXRlcnNcIj5KUyBTREsgdHV0b3JpYWw8L2E+IGFuZCB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9yZWZlcmVuY2VzL2NvbnRlbnQtZGVsaXZlcnktYXBpLyMvcmVmZXJlbmNlL3NlYXJjaC1wYXJhbWV0ZXJzXCI+UkVTVCBBUEkgcmVmZXJlbmNlPC9hPiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEVudGl0aWVzLkNvbnRlbnRUeXBlQ29sbGVjdGlvbj59IFByb21pc2UgZm9yIGEgY29sbGVjdGlvbiBvZiBDb250ZW50IFR5cGVzXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAgICpcbiAgICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICAgKiAgIHNwYWNlOiAnPHNwYWNlX2lkPicsXG4gICAqICAgYWNjZXNzVG9rZW46ICc8Y29udGVudF9kZWxpdmVyeV9hcGlfa2V5PidcbiAgICogfSlcbiAgICpcbiAgICogY2xpZW50LmdldENvbnRlbnRUeXBlcygpXG4gICAqIC50aGVuKChyZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzcG9uc2UuaXRlbXMpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRDb250ZW50VHlwZXMoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBzd2l0Y2hUb0Vudmlyb25tZW50KGh0dHApO1xuICAgIHJldHVybiBodHRwLmdldCgnY29udGVudF90eXBlcycsIGNyZWF0ZVJlcXVlc3RDb25maWcoe1xuICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gd3JhcENvbnRlbnRUeXBlQ29sbGVjdGlvbihyZXNwb25zZS5kYXRhKTtcbiAgICB9LCBlcnJvckhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuIEVudHJ5XG4gICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICAqIEBwYXJhbSAge3N0cmluZ30gaWRcbiAgICogQHBhcmFtICB7T2JqZWN0PX0gcXVlcnkgLSBPYmplY3Qgd2l0aCBzZWFyY2ggcGFyYW1ldGVycy4gSW4gdGhpcyBtZXRob2QgaXQncyBvbmx5IHVzZWZ1bCBmb3IgYGxvY2FsZWAuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuRW50cnk+fSBQcm9taXNlIGZvciBhbiBFbnRyeVxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRFbnRyeSgnPGVudHJ5X2lkPicpXG4gICAqIC50aGVuKChlbnRyeSkgPT4gY29uc29sZS5sb2coZW50cnkpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRFbnRyeShpZCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qobm90Rm91bmRFcnJvcihpZCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldEVudHJpZXMoX29iamVjdFNwcmVhZCh7XG4gICAgICAnc3lzLmlkJzogaWRcbiAgICB9LCBxdWVyeSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2UuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gd3JhcEVudHJ5KHJlc3BvbnNlLml0ZW1zWzBdKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbm90Rm91bmRFcnJvcihpZCk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIGNvbGxlY3Rpb24gb2YgRW50cmllc1xuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtPYmplY3Q9fSBxdWVyeSAtIE9iamVjdCB3aXRoIHNlYXJjaCBwYXJhbWV0ZXJzLiBDaGVjayB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9qYXZhc2NyaXB0L3R1dG9yaWFscy91c2luZy1qcy1jZGEtc2RrLyNyZXRyaWV2aW5nLWVudHJpZXMtd2l0aC1zZWFyY2gtcGFyYW1ldGVyc1wiPkpTIFNESyB0dXRvcmlhbDwvYT4gYW5kIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvY29udGVudC1kZWxpdmVyeS1hcGkvIy9yZWZlcmVuY2Uvc2VhcmNoLXBhcmFtZXRlcnNcIj5SRVNUIEFQSSByZWZlcmVuY2U8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuRW50cnlDb2xsZWN0aW9uPn0gUHJvbWlzZSBmb3IgYSBjb2xsZWN0aW9uIG9mIEVudHJpZXNcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICAgKlxuICAgKiBjb25zdCBjbGllbnQgPSBjb250ZW50ZnVsLmNyZWF0ZUNsaWVudCh7XG4gICAqICAgc3BhY2U6ICc8c3BhY2VfaWQ+JyxcbiAgICogICBhY2Nlc3NUb2tlbjogJzxjb250ZW50X2RlbGl2ZXJ5X2FwaV9rZXk+J1xuICAgKiB9KVxuICAgKlxuICAgKiBjbGllbnQuZ2V0RW50cmllcygpXG4gICAqIC50aGVuKChyZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzcG9uc2UuaXRlbXMpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRFbnRyaWVzKCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcblxuICAgIHZhciBfZ2V0R2xvYmFsT3B0aW9ucyA9IGdldEdsb2JhbE9wdGlvbnMocXVlcnkpLFxuICAgICAgICByZXNvbHZlTGlua3MgPSBfZ2V0R2xvYmFsT3B0aW9ucy5yZXNvbHZlTGlua3MsXG4gICAgICAgIHJlbW92ZVVucmVzb2x2ZWQgPSBfZ2V0R2xvYmFsT3B0aW9ucy5yZW1vdmVVbnJlc29sdmVkO1xuXG4gICAgbm9ybWFsaXplU2VsZWN0KHF1ZXJ5KTtcbiAgICByZXR1cm4gaHR0cC5nZXQoJ2VudHJpZXMnLCBjcmVhdGVSZXF1ZXN0Q29uZmlnKHtcbiAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHdyYXBFbnRyeUNvbGxlY3Rpb24ocmVzcG9uc2UuZGF0YSwge1xuICAgICAgICByZXNvbHZlTGlua3M6IHJlc29sdmVMaW5rcyxcbiAgICAgICAgcmVtb3ZlVW5yZXNvbHZlZDogcmVtb3ZlVW5yZXNvbHZlZFxuICAgICAgfSk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhbiBBc3NldFxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGlkXG4gICAqIEBwYXJhbSAge09iamVjdD19IHF1ZXJ5IC0gT2JqZWN0IHdpdGggc2VhcmNoIHBhcmFtZXRlcnMuIEluIHRoaXMgbWV0aG9kIGl0J3Mgb25seSB1c2VmdWwgZm9yIGBsb2NhbGVgLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEVudGl0aWVzLkFzc2V0Pn0gUHJvbWlzZSBmb3IgYW4gQXNzZXRcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICAgKlxuICAgKiBjb25zdCBjbGllbnQgPSBjb250ZW50ZnVsLmNyZWF0ZUNsaWVudCh7XG4gICAqICAgc3BhY2U6ICc8c3BhY2VfaWQ+JyxcbiAgICogICBhY2Nlc3NUb2tlbjogJzxjb250ZW50X2RlbGl2ZXJ5X2FwaV9rZXk+J1xuICAgKiB9KVxuICAgKlxuICAgKiBjbGllbnQuZ2V0QXNzZXQoJzxhc3NldF9pZD4nKVxuICAgKiAudGhlbigoYXNzZXQpID0+IGNvbnNvbGUubG9nKGFzc2V0KSlcbiAgICogLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0QXNzZXQoaWQpIHtcbiAgICB2YXIgcXVlcnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHN3aXRjaFRvRW52aXJvbm1lbnQoaHR0cCk7XG4gICAgbm9ybWFsaXplU2VsZWN0KHF1ZXJ5KTtcbiAgICByZXR1cm4gaHR0cC5nZXQoJ2Fzc2V0cy8nICsgaWQsIGNyZWF0ZVJlcXVlc3RDb25maWcoe1xuICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gd3JhcEFzc2V0KHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYSBjb2xsZWN0aW9uIG9mIEFzc2V0c1xuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtPYmplY3Q9fSBxdWVyeSAtIE9iamVjdCB3aXRoIHNlYXJjaCBwYXJhbWV0ZXJzLiBDaGVjayB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9qYXZhc2NyaXB0L3R1dG9yaWFscy91c2luZy1qcy1jZGEtc2RrLyNyZXRyaWV2aW5nLWVudHJpZXMtd2l0aC1zZWFyY2gtcGFyYW1ldGVyc1wiPkpTIFNESyB0dXRvcmlhbDwvYT4gYW5kIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvY29udGVudC1kZWxpdmVyeS1hcGkvIy9yZWZlcmVuY2Uvc2VhcmNoLXBhcmFtZXRlcnNcIj5SRVNUIEFQSSByZWZlcmVuY2U8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuQXNzZXRDb2xsZWN0aW9uPn0gUHJvbWlzZSBmb3IgYSBjb2xsZWN0aW9uIG9mIEFzc2V0c1xuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRBc3NldHMoKVxuICAgKiAudGhlbigocmVzcG9uc2UpID0+IGNvbnNvbGUubG9nKHJlc3BvbnNlLml0ZW1zKSlcbiAgICogLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0QXNzZXRzKCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcbiAgICBub3JtYWxpemVTZWxlY3QocXVlcnkpO1xuICAgIHJldHVybiBodHRwLmdldCgnYXNzZXRzJywgY3JlYXRlUmVxdWVzdENvbmZpZyh7XG4gICAgICBxdWVyeTogcXVlcnlcbiAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiB3cmFwQXNzZXRDb2xsZWN0aW9uKHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYSBjb2xsZWN0aW9uIG9mIExvY2FsZVxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtPYmplY3Q9fSBxdWVyeSAtIE9iamVjdCB3aXRoIHNlYXJjaCBwYXJhbWV0ZXJzLiBDaGVjayB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9qYXZhc2NyaXB0L3R1dG9yaWFscy91c2luZy1qcy1jZGEtc2RrLyNyZXRyaWV2aW5nLWVudHJpZXMtd2l0aC1zZWFyY2gtcGFyYW1ldGVyc1wiPkpTIFNESyB0dXRvcmlhbDwvYT4gYW5kIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvY29udGVudC1kZWxpdmVyeS1hcGkvIy9yZWZlcmVuY2Uvc2VhcmNoLXBhcmFtZXRlcnNcIj5SRVNUIEFQSSByZWZlcmVuY2U8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuTG9jYWxlQ29sbGVjdGlvbj59IFByb21pc2UgZm9yIGEgY29sbGVjdGlvbiBvZiBMb2NhbGVcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICAgKlxuICAgKiBjb25zdCBjbGllbnQgPSBjb250ZW50ZnVsLmNyZWF0ZUNsaWVudCh7XG4gICAqICAgc3BhY2U6ICc8c3BhY2VfaWQ+JyxcbiAgICogICBhY2Nlc3NUb2tlbjogJzxjb250ZW50X2RlbGl2ZXJ5X2FwaV9rZXk+J1xuICAgKiB9KVxuICAgKlxuICAgKiBjbGllbnQuZ2V0TG9jYWxlcygpXG4gICAqIC50aGVuKChyZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzcG9uc2UuaXRlbXMpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRMb2NhbGVzKCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcbiAgICByZXR1cm4gaHR0cC5nZXQoJ2xvY2FsZXMnLCBjcmVhdGVSZXF1ZXN0Q29uZmlnKHtcbiAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHdyYXBMb2NhbGVDb2xsZWN0aW9uKHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIFN5bmNocm9uaXplcyBlaXRoZXIgYWxsIHRoZSBjb250ZW50IG9yIG9ubHkgbmV3IGNvbnRlbnQgc2luY2UgbGFzdCBzeW5jXG4gICAqIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL2NvbmNlcHRzL3N5bmMvXCI+U3luY2hyb25pemF0aW9uPC9hPiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogPHN0cm9uZz4gSW1wb3J0YW50IG5vdGU6IDwvc3Ryb25nPiBUaGUgdGhlIHN5bmMgYXBpIGVuZHBvaW50IGRvZXMgbm90IHN1cHBvcnQgaW5jbHVkZSBvciBsaW5rIHJlc29sdXRpb24uXG4gICAqIEhvd2V2ZXIgY29udGVudGZ1bC5qcyBpcyBkb2luZyBsaW5rIHJlc29sdXRpb24gY2xpZW50IHNpZGUgaWYgeW91IG9ubHkgbWFrZSBhbiBpbml0aWFsIHN5bmMuXG4gICAqIEZvciB0aGUgZGVsdGEgc3luYyAodXNpbmcgbmV4dFN5bmNUb2tlbikgaXQgaXMgbm90IHBvc3NpYmxlIHNpbmNlIHRoZSBzZGsgd29udCBoYXZlIGFjY2VzcyB0byBhbGwgdGhlIGRhdGEgdG8gbWFrZSBzdWNoIGFuIG9wZXJhdGlvbi5cbiAgICogQG1lbWJlcm9mIENvbnRlbnRmdWxDbGllbnRBUElcbiAgICogQHBhcmFtICB7T2JqZWN0fSBxdWVyeSAtIFF1ZXJ5IG9iamVjdCBmb3IgdGhlIHN5bmMgY2FsbC4gT25lIG9mIGluaXRpYWwgb3IgbmV4dFN5bmNUb2tlbiBhbHdheXMgbmVlZHMgdG8gYmUgc3BlY2lmaWVkLCBidXQgbm90IGJvdGguXG4gICAqIEBwYXJhbSAge2Jvb2xlYW4/fSBxdWVyeS5pbml0aWFsIC0gSW5kaWNhdGVzIGlmIHRoaXMgaXMgdGhlIGZpcnN0IHN5bmMuIFVzZSBpdCBpZiB5b3UgZG9uJ3QgaGF2ZSBhIHN5bmMgdG9rZW4uXG4gICAqIEBwYXJhbSAge3N0cmluZz99IHF1ZXJ5Lm5leHRTeW5jVG9rZW4gLSBUaGUgdG9rZW4geW91IGdvdCB0aGUgbGFzdCB0aW1lIHlvdSB1c2VkIHRoaXMgbWV0aG9kLiBFbnN1cmVzIHlvdSBvbmx5IGdldCBjaGFuZ2VkIGNvbnRlbnQuXG4gICAqIEBwYXJhbSAge3N0cmluZz19IHF1ZXJ5LnR5cGUgLSBGaWx0ZXIgYnkgdGhpcyB0eXBlIChhbGwgKGRlZmF1bHQpLCBFbnRyeSwgQXNzZXQsIERlbGV0aW9uLCBEZWxldGVkQXNzZXQgb3IgRGVsZXRlZEVudHJ5KVxuICAgKiBAcGFyYW0gIHtzdHJpbmc9fSBxdWVyeS5jb250ZW50X3R5cGUgLSBGaWx0ZXIgYnkgdGhpcyBjb250ZW50IHR5cGUgaWRcbiAgICogQHBhcmFtICB7Ym9vbGVhbj19IHF1ZXJ5LnJlc29sdmVMaW5rcyAtIFdoZW4gdHJ1ZSwgbGlua3MgdG8gb3RoZXIgRW50cmllcyBvciBBc3NldHMgYXJlIHJlc29sdmVkLiBEZWZhdWx0OiB0cnVlLlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtICB7Ym9vbGVhbj19IFtvcHRpb25zLnBhZ2luYXRlID0gdHJ1ZV0gLSBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBwYWdpbmF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8U3luYy5TeW5jQ29sbGVjdGlvbj59IFByb21pc2UgZm9yIHRoZSBjb2xsZWN0aW9uIHJlc3VsdGluZyBvZiBhIHN5bmMgb3BlcmF0aW9uXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAgICpcbiAgICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICAgKiAgIHNwYWNlOiAnPHNwYWNlX2lkPicsXG4gICAqICAgYWNjZXNzVG9rZW46ICc8Y29udGVudF9kZWxpdmVyeV9hcGlfa2V5PidcbiAgICogfSlcbiAgICpcbiAgICogY2xpZW50LnN5bmMoe1xuICAgKiAgIGluaXRpYWw6IHRydWVcbiAgICogfSlcbiAgICogLnRoZW4oKHJlc3BvbnNlKSA9PiBjb25zb2xlLmxvZyh7XG4gICAqICAgZW50cmllczogcmVzcG9uc2UuZW50cmllcyxcbiAgICogICBhc3NldHM6IHJlc3BvbnNlLmFzc2V0cyxcbiAgICogICBuZXh0U3luY1Rva2VuOiByZXNwb25zZS5uZXh0U3luY1Rva2VuXG4gICAqIH0pKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBzeW5jKCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIHBhZ2luYXRlOiB0cnVlXG4gICAgfTtcblxuICAgIHZhciBfZ2V0R2xvYmFsT3B0aW9uczIgPSBnZXRHbG9iYWxPcHRpb25zKHF1ZXJ5KSxcbiAgICAgICAgcmVzb2x2ZUxpbmtzID0gX2dldEdsb2JhbE9wdGlvbnMyLnJlc29sdmVMaW5rcyxcbiAgICAgICAgcmVtb3ZlVW5yZXNvbHZlZCA9IF9nZXRHbG9iYWxPcHRpb25zMi5yZW1vdmVVbnJlc29sdmVkO1xuXG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcbiAgICByZXR1cm4gcGFnZWRTeW5jKGh0dHAsIHF1ZXJ5LCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHJlc29sdmVMaW5rczogcmVzb2x2ZUxpbmtzLFxuICAgICAgcmVtb3ZlVW5yZXNvbHZlZDogcmVtb3ZlVW5yZXNvbHZlZFxuICAgIH0sIG9wdGlvbnMpKTtcbiAgfVxuICAvKipcbiAgKiBQYXJzZSByYXcganNvbiBkYXRhIGludG8gY29sbGVjdGlvbiBvZiBlbnRyeSBvYmplY3RzLkxpbmtzIHdpbGwgYmUgcmVzb2x2ZWQgYWxzb1xuICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICogQHBhcmFtIHtPYmplY3R9IHJhdyBqc29uIGRhdGFcbiAgKiBAZXhhbXBsZVxuICAqIGxldCBkYXRhID0ge2l0ZW1zOiBbXG4gICogICAge1xuICAqICAgIHN5czoge3R5cGU6ICdFbnRyeScsIGxvY2FsZTogJ2VuLVVTJ30sXG4gICogICAgZmllbGRzOiB7XG4gICogICAgICBhbmltYWw6IHtzeXM6IHt0eXBlOiAnTGluaycsIGxpbmtUeXBlOiAnQW5pbWFsJywgaWQ6ICdvaW5rJ319LFxuICAqICAgICAgYW5vdGhlcmFuaW1hbDoge3N5czoge3R5cGU6ICdMaW5rJywgbGlua1R5cGU6ICdBbmltYWwnLCBpZDogJ21pZGRsZS1wYXJyb3QnfX1cbiAgKiAgICB9XG4gICogIH1cbiAgKiBdLFxuICAqIGluY2x1ZGVzOiB7XG4gICogIEFuaW1hbDogW1xuICAqICAgIHtcbiAgKiAgICAgIHN5czoge3R5cGU6ICdBbmltYWwnLCBpZDogJ29pbmsnLCBsb2NhbGU6ICdlbi1VUyd9LFxuICAqICAgICAgZmllbGRzOiB7XG4gICogICAgICAgIG5hbWU6ICdQaWcnLFxuICAqICAgICAgICBmcmllbmQ6IHtzeXM6IHt0eXBlOiAnTGluaycsIGxpbmtUeXBlOiAnQW5pbWFsJywgaWQ6ICdncm91bmRob2cnfX1cbiAgKiAgICAgIH1cbiAgKiAgICB9XG4gICogICBdXG4gICogIH1cbiAgKiB9XG4gICogY29uc29sZS5sb2coIGRhdGEuaXRlbXNbMF0uZmllbGRzLmZvbyApOyAvLyB1bmRlZmluZWRcbiAgKiBsZXQgcGFyc2VkRGF0YSA9IGNsaWVudC5wYXJzZUVudHJpZXMoZGF0YSk7XG4gICogY29uc29sZS5sb2coIHBhcnNlZERhdGEuaXRlbXNbMF0uZmllbGRzLmZvbyApOyAvLyBmb29cbiAgKi9cblxuXG4gIGZ1bmN0aW9uIHBhcnNlRW50cmllcyhkYXRhKSB7XG4gICAgdmFyIF9nZXRHbG9iYWxPcHRpb25zMyA9IGdldEdsb2JhbE9wdGlvbnMoe30pLFxuICAgICAgICByZXNvbHZlTGlua3MgPSBfZ2V0R2xvYmFsT3B0aW9uczMucmVzb2x2ZUxpbmtzLFxuICAgICAgICByZW1vdmVVbnJlc29sdmVkID0gX2dldEdsb2JhbE9wdGlvbnMzLnJlbW92ZVVucmVzb2x2ZWQ7XG5cbiAgICByZXR1cm4gd3JhcEVudHJ5Q29sbGVjdGlvbihkYXRhLCB7XG4gICAgICByZXNvbHZlTGlua3M6IHJlc29sdmVMaW5rcyxcbiAgICAgIHJlbW92ZVVucmVzb2x2ZWQ6IHJlbW92ZVVucmVzb2x2ZWRcbiAgICB9KTtcbiAgfVxuICAvKlxuICAgKiBTd2l0Y2hlcyBCYXNlVVJMIHRvIHVzZSAvZW52aXJvbm1lbnRzIHBhdGhcbiAgICogKi9cblxuXG4gIGZ1bmN0aW9uIHN3aXRjaFRvRW52aXJvbm1lbnQoaHR0cCkge1xuICAgIGh0dHAuZGVmYXVsdHMuYmFzZVVSTCA9IGdldEdsb2JhbE9wdGlvbnMoKS5lbnZpcm9ubWVudEJhc2VVcmw7XG4gIH1cbiAgLypcbiAgICogU3dpdGNoZXMgQmFzZVVSTCB0byB1c2UgL3NwYWNlcyBwYXRoXG4gICAqICovXG5cblxuICBmdW5jdGlvbiBzd2l0Y2hUb1NwYWNlKGh0dHApIHtcbiAgICBodHRwLmRlZmF1bHRzLmJhc2VVUkwgPSBnZXRHbG9iYWxPcHRpb25zKCkuc3BhY2VCYXNlVXJsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRTcGFjZTogZ2V0U3BhY2UsXG4gICAgZ2V0Q29udGVudFR5cGU6IGdldENvbnRlbnRUeXBlLFxuICAgIGdldENvbnRlbnRUeXBlczogZ2V0Q29udGVudFR5cGVzLFxuICAgIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgICBnZXRFbnRyaWVzOiBnZXRFbnRyaWVzLFxuICAgIGdldEFzc2V0OiBnZXRBc3NldCxcbiAgICBnZXRBc3NldHM6IGdldEFzc2V0cyxcbiAgICBnZXRMb2NhbGVzOiBnZXRMb2NhbGVzLFxuICAgIHBhcnNlRW50cmllczogcGFyc2VFbnRyaWVzLFxuICAgIHN5bmM6IHN5bmNcbiAgfTtcbn0iLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBDb250ZW50ZnVsIERlbGl2ZXJ5IEFQSSBTREsuIEFsbG93cyB5b3UgdG8gY3JlYXRlIGluc3RhbmNlcyBvZiBhIGNsaWVudFxuICogd2l0aCBhY2Nlc3MgdG8gdGhlIENvbnRlbnRmdWwgQ29udGVudCBEZWxpdmVyeSBBUEkuXG4gKiBAbmFtZXNwYWNlIGNvbnRlbnRmdWxcbiAqIEBzZWUgQ29udGVudGZ1bENsaWVudEFQSVxuICovXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgY3JlYXRlSHR0cENsaWVudCwgZ2V0VXNlckFnZW50SGVhZGVyIH0gZnJvbSAnY29udGVudGZ1bC1zZGstY29yZSc7XG5pbXBvcnQgY3JlYXRlQ29udGVudGZ1bEFwaSBmcm9tICcuL2NyZWF0ZS1jb250ZW50ZnVsLWFwaSc7XG5pbXBvcnQgY3JlYXRlR2xvYmFsT3B0aW9ucyBmcm9tICcuL2NyZWF0ZS1nbG9iYWwtb3B0aW9ucyc7XG4vKipcbiAqIENyZWF0ZSBhIGNsaWVudCBpbnN0YW5jZVxuICogQGZ1bmNcbiAqIEBuYW1lIGNyZWF0ZUNsaWVudFxuICogQG1lbWJlcm9mIGNvbnRlbnRmdWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBDbGllbnQgaW5pdGlhbGl6YXRpb24gcGFyYW1ldGVyc1xuICogQHByb3Age3N0cmluZ30gcGFyYW1zLnNwYWNlIC0gU3BhY2UgSURcbiAqIEBwcm9wIHtzdHJpbmd9IHBhcmFtcy5hY2Nlc3NUb2tlbiAtIENvbnRlbnRmdWwgQ0RBIEFjY2VzcyBUb2tlblxuICogQHByb3Age3N0cmluZ30gW3BhcmFtcy5lbnZpcm9ubWVudD1cIm1hc3RlclwiXSAtIENvbnRlbnRmdWwgRW52aXJvbm1lbnQgSURcbiAqIEBwcm9wIHtib29sZWFuPX0gcGFyYW1zLmluc2VjdXJlIC0gUmVxdWVzdHMgd2lsbCBiZSBtYWRlIG92ZXIgaHR0cCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGh0dHBzIChkZWZhdWx0OiB0cnVlKVxuICogQHByb3Age3N0cmluZz19IHBhcmFtcy5ob3N0IC0gQVBJIGhvc3QgKGRlZmF1bHQ6IGNkbi5jb250ZW50ZnVsLmNvbSkuIEFsc28gdXNhYmxlIHdpdGggcHJldmlldy5jb250ZW50ZnVsLmNvbS5cbiAqIEBwcm9wIHtzdHJpbmc9fSBwYXJhbXMuYmFzZVBhdGggLSBQYXRoIGFwcGVuZGVkIHRvIHRoZSBob3N0IHRvIHN1cHBvcnQgZ2F0ZXdheXMvcHJveGllcyB3aXRoIGN1c3RvbSB1cmxzLlxuICogQHByb3Age09iamVjdD19IHBhcmFtcy5odHRwQWdlbnQgLSBPcHRpb25hbCBOb2RlLmpzIEhUVFAgYWdlbnQgZm9yIHByb3h5aW5nIChzZWUgPGEgaHJlZj1cImh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfY2xhc3NfaHR0cF9hZ2VudFwiPk5vZGUuanMgZG9jczwvYT4gYW5kIDxhIGhyZWY9XCJodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9odHRwcy1wcm94eS1hZ2VudFwiPmh0dHBzLXByb3h5LWFnZW50PC9hPilcbiAqIEBwcm9wIHtPYmplY3Q9fSBwYXJhbXMuaHR0cHNBZ2VudCAtIE9wdGlvbmFsIE5vZGUuanMgSFRUUCBhZ2VudCBmb3IgcHJveHlpbmcgKHNlZSA8YSBocmVmPVwiaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9jbGFzc19odHRwX2FnZW50XCI+Tm9kZS5qcyBkb2NzPC9hPiBhbmQgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2h0dHBzLXByb3h5LWFnZW50XCI+aHR0cHMtcHJveHktYWdlbnQ8L2E+KVxuICogQHByb3Age09iamVjdD19IHBhcmFtcy5wcm94eSAtIE9wdGlvbmFsIEF4aW9zIHByb3h5IChzZWUgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL2F4aW9zI3JlcXVlc3QtY29uZmlnXCI+IGF4aW9zIGRvY3MgPC9hPilcbiAqIEBwcm9wIHtPYmplY3Q9fSBwYXJhbXMuaGVhZGVycyAtIE9wdGlvbmFsIGFkZGl0aW9uYWwgaGVhZGVyc1xuICogQHByb3Age2Z1bmN0aW9uPX0gcGFyYW1zLmFkYXB0ZXIgLSBPcHRpb25hbCBheGlvcyByZXF1ZXN0IGFkYXB0ZXIgKHNlZSA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL216YWJyaXNraWUvYXhpb3MjcmVxdWVzdC1jb25maWdcIj4gYXhpb3MgZG9jcyA8L2E+KVxuICogQHByb3Age2Jvb2xlYW49P30gcGFyYW1zLnJlc29sdmVMaW5rcyAtIElmIHdlIHNob3VsZCByZXNvbHZlIGxpbmtzIGJldHdlZW4gZW50cmllcyAoZGVmYXVsdDogdHJ1ZSlcbiAqIEBwcm9wIHtib29sZWFuPT99IHBhcmFtcy5yZW1vdmVVbnJlc29sdmVkIC0gSWYgd2Ugc2hvdWxkIHJlbW92ZSBsaW5rcyB0byBlbnRyaWVzIHdoaWNoIGNvdWxkIG5vdCBiZSByZXNvbHZlZCAoZGVmYXVsdDogZmFsc2UpXG4gKiBAcHJvcCB7Ym9vbGVhbj0/fSBwYXJhbXMucmV0cnlPbkVycm9yIC0gSWYgd2Ugc2hvdWxkIHJldHJ5IG9uIGVycm9ycyBhbmQgNDI5IHJhdGUgbGltaXQgZXhjZXB0aW9ucyAoZGVmYXVsdDogdHJ1ZSlcbiAqIEBwcm9wIHtmdW5jdGlvbj19IHBhcmFtcy5sb2dIYW5kbGVyIC0gQSBsb2cgaGFuZGxlciBmdW5jdGlvbiB0byBwcm9jZXNzIGdpdmVuIGxvZyBtZXNzYWdlcyAmIGVycm9ycy4gUmVjZWl2ZXMgdGhlIGxvZyBsZXZlbCAoZXJyb3IsIHdhcm5pbmcgJiBpbmZvKSBhbmQgdGhlIGFjdHVhbCBsb2cgZGF0YSAoRXJyb3Igb2JqZWN0IG9yIHN0cmluZykuIChUaGUgZGVmYXVsdCBjYW4gYmUgZm91bmQgYXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9jb250ZW50ZnVsL2NvbnRlbnRmdWwtc2RrLWNvcmUvYmxvYi9tYXN0ZXIvbGliL2NyZWF0ZS1odHRwLWNsaWVudC5qcylcbiAqIEBwcm9wIHtzdHJpbmc9P30gcGFyYW1zLmFwcGxpY2F0aW9uIC0gQXBwbGljYXRpb24gbmFtZSBhbmQgdmVyc2lvbiBlLmcgbXlBcHAvdmVyc2lvblxuICogQHByb3Age3N0cmluZz0/fSBwYXJhbXMuaW50ZWdyYXRpb24gLSBJbnRlZ3JhdGlvbiBuYW1lIGFuZCB2ZXJzaW9uIGUuZyByZWFjdC92ZXJzaW9uXG4gKiBAcHJvcCB7bnVtYmVyPX0gcGFyYW1zLnRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIC0gY29ubmVjdGlvbiB0aW1lb3V0IChkZWZhdWx0OjMwMDAwKVxuICogQHByb3Age251bWJlcj19IHBhcmFtcy5yZXRyeUxpbWl0IC0gT3B0aW9uYWwgbnVtYmVyIG9mIHJldHJpZXMgYmVmb3JlIGZhaWx1cmUuIERlZmF1bHQgaXMgNVxuICogQHJldHVybnMge0NvbnRlbnRmdWxDbGllbnRBUEkuQ2xpZW50QVBJfVxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAqICBhY2Nlc3NUb2tlbjogJ215QWNjZXNzVG9rZW4nLFxuICogIHNwYWNlOiAnbXlTcGFjZUlkJ1xuICogfSlcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpZW50KHBhcmFtcykge1xuICBpZiAoIXBhcmFtcy5hY2Nlc3NUb2tlbikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHBhcmFtZXRlciBhY2Nlc3NUb2tlbicpO1xuICB9XG5cbiAgaWYgKCFwYXJhbXMuc3BhY2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBwYXJhbWV0ZXIgc3BhY2UnKTtcbiAgfVxuXG4gIHZhciBkZWZhdWx0Q29uZmlnID0ge1xuICAgIHJlc29sdmVMaW5rczogdHJ1ZSxcbiAgICByZW1vdmVVbnJlc29sdmVkOiBmYWxzZSxcbiAgICBkZWZhdWx0SG9zdG5hbWU6ICdjZG4uY29udGVudGZ1bC5jb20nLFxuICAgIGVudmlyb25tZW50OiAnbWFzdGVyJ1xuICB9O1xuXG4gIHZhciBjb25maWcgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRDb25maWcpLCBwYXJhbXMpO1xuXG4gIHZhciB1c2VyQWdlbnRIZWFkZXIgPSBnZXRVc2VyQWdlbnRIZWFkZXIoXCJjb250ZW50ZnVsLmpzL1wiLmNvbmNhdChcIjAuMC4wLWRldGVybWluZWQtYnktc2VtYW50aWMtcmVsZWFzZVwiKSwgY29uZmlnLmFwcGxpY2F0aW9uLCBjb25maWcuaW50ZWdyYXRpb24pO1xuICBjb25maWcuaGVhZGVycyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29uZmlnLmhlYWRlcnMpLCB7fSwge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vdm5kLmNvbnRlbnRmdWwuZGVsaXZlcnkudjEranNvbicsXG4gICAgJ1gtQ29udGVudGZ1bC1Vc2VyLUFnZW50JzogdXNlckFnZW50SGVhZGVyXG4gIH0pO1xuICB2YXIgaHR0cCA9IGNyZWF0ZUh0dHBDbGllbnQoYXhpb3MsIGNvbmZpZyk7XG4gIHZhciBnZXRHbG9iYWxPcHRpb25zID0gY3JlYXRlR2xvYmFsT3B0aW9ucyh7XG4gICAgcmVzb2x2ZUxpbmtzOiBjb25maWcucmVzb2x2ZUxpbmtzLFxuICAgIGVudmlyb25tZW50OiBjb25maWcuZW52aXJvbm1lbnQsXG4gICAgcmVtb3ZlVW5yZXNvbHZlZDogY29uZmlnLnJlbW92ZVVucmVzb2x2ZWQsXG4gICAgc3BhY2VCYXNlVXJsOiBodHRwLmRlZmF1bHRzLmJhc2VVUkwsXG4gICAgZW52aXJvbm1lbnRCYXNlVXJsOiBcIlwiLmNvbmNhdChodHRwLmRlZmF1bHRzLmJhc2VVUkwsIFwiZW52aXJvbm1lbnRzL1wiKS5jb25jYXQoY29uZmlnLmVudmlyb25tZW50KVxuICB9KTsgLy8gQXBwZW5kIGVudmlyb25tZW50IHRvIGJhc2VVUkxcblxuICBodHRwLmRlZmF1bHRzLmJhc2VVUkwgPSBnZXRHbG9iYWxPcHRpb25zKCkuZW52aXJvbm1lbnRCYXNlVXJsOyAvLyBJbnRlcmNlcHRzIHJlc3BvbnNlIGFuZCBvYnNjdXJlIHRoZSB0b2tlblxuXG4gIG9ic2N1cmVBdXRoVG9rZW5JblJlc3BvbnNlKGh0dHApO1xuICByZXR1cm4gY3JlYXRlQ29udGVudGZ1bEFwaSh7XG4gICAgaHR0cDogaHR0cCxcbiAgICBnZXRHbG9iYWxPcHRpb25zOiBnZXRHbG9iYWxPcHRpb25zXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvYnNjdXJlQXV0aFRva2VuSW5SZXNwb25zZShodHRwKSB7XG4gIGh0dHAuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5jb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uKSB7XG4gICAgICB2YXIgdG9rZW4gPSBlcnJvci5yZXNwb25zZS5jb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uO1xuICAgICAgZXJyb3IucmVzcG9uc2UuY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGVycm9yLnJlc3BvbnNlLmNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24ucmVwbGFjZSh0b2tlbiwgXCJCZWFyZXIuLi5cIi5jb25jYXQodG9rZW4uc3Vic3RyKC01KSkpO1xuXG4gICAgICBpZiAoZXJyb3IucmVzcG9uc2UucmVxdWVzdC5faGVhZGVycyAmJiBlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXJzLmF1dGhvcml6YXRpb24pIHtcbiAgICAgICAgZXJyb3IucmVzcG9uc2UucmVxdWVzdC5faGVhZGVycy5hdXRob3JpemF0aW9uID0gZXJyb3IucmVzcG9uc2UucmVxdWVzdC5faGVhZGVycy5hdXRob3JpemF0aW9uLnJlcGxhY2UodG9rZW4sIFwiQmVhcmVyLi4uXCIuY29uY2F0KHRva2VuLnN1YnN0cigtNSkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLnJlcXVlc3QuX2hlYWRlcikge1xuICAgICAgICBlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXIgPSBlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXIucmVwbGFjZSh0b2tlbiwgXCJCZWFyZXIuLi5cIi5jb25jYXQodG9rZW4uc3Vic3RyKC01KSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH0pO1xufSIsImltcG9ydCB7Y3JlYXRlQ2xpZW50fSBmcm9tICdjb250ZW50ZnVsJ1xuY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHtcbiAgLy8gVGhpcyBpcyB0aGUgc3BhY2UgSUQuIEEgc3BhY2UgaXMgbGlrZSBhIHByb2plY3QgZm9sZGVyIGluIENvbnRlbnRmdWwgdGVybXNcbiAgc3BhY2U6IHByb2Nlc3MuZW52LlNQQUNFX0lELFxuICAvLyBUaGlzIGlzIHRoZSBhY2Nlc3MgdG9rZW4gZm9yIHRoaXMgc3BhY2UuIE5vcm1hbGx5IHlvdSBnZXQgYm90aCBJRCBhbmQgdGhlIHRva2VuIGluIHRoZSBDb250ZW50ZnVsIHdlYiBhcHBcbiAgYWNjZXNzVG9rZW46IHByb2Nlc3MuZW52LkFQSV9ERUxJVkVSWV9LRVlcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjbGllbnQiLCIvKipcbiAqIExpbmsgcmVzb2x1dGlvbiBjYW4gYmUgc2V0IGdsb2JhbGx5LCBvciBpdCBjYW4gYmUgdHVybmVkIG9mZiBmb3IgdGhlIG1ldGhvZHNcbiAqIHdoaWNoIG1ha2UgdXNlIG9mIGl0LiBUaGUgbG9jYWwgc2V0dGluZyBhbHdheXMgb3ZlcnJpZGVzIHRoZSBnbG9iYWwgc2V0dGluZy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGdsb2JhbFNldHRpbmcgLSBHbG9iYWwgbGlicmFyeSBzZXR0aW5nIGZvciBsaW5rIHJlc29sdXRpb25cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gTGluayByZXNvbHZlciBtZXRob2QgcHJlY29uZmlndXJlZCB3aXRoIGdsb2JhbCBzZXR0aW5nXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdsb2JhbE9wdGlvbnMoZ2xvYmFsU2V0dGluZ3MpIHtcbiAgLyoqXG4gICAqIExpbmsgcmVzb2x2ZXIgbWV0aG9kXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSAtIHJlZ3VsYXIgcXVlcnkgb2JqZWN0IHVzZWQgZm9yIGNvbGxlY3Rpb24gZW5kcG9pbnRzXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0R2xvYmFsT3B0aW9ucyhxdWVyeSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnbG9iYWxTZXR0aW5ncywgcXVlcnkpO1xuICB9O1xufSIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBCbG9nQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoW3t9LCAoKSA9PiB7fV0pXG5cbmNvbnN0IEJsb2dQcm92aWRlciA9IChwcm9wcykgPT4ge1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBlbnRyeTogbnVsbCxcbiAgICBlbnRyeUxpc3Q6IFtdLFxuICAgIHBhZ2U6IDEsXG4gICAgdG90YWxQYWdlczogMVxuICB9KTtcbiAgcmV0dXJuIChcbiAgICA8QmxvZ0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e1tzdGF0ZSwgc2V0U3RhdGVdfT5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L0Jsb2dDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG5leHBvcnQgeyBCbG9nQ29udGV4dCwgQmxvZ1Byb3ZpZGVyIH0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBCbG9nQ29udGV4dCB9IGZyb20gJy4vYmxvZ0NvbnRleHQnXG5cbi8qKlxuICogSGVscGVyIHdpdGggc3RhdGUgdmFsdWVzIGFuZCB0byBzZXQgc3RhdGVcbiAqL1xuY29uc3QgdXNlQmxvZyA9ICgpID0+IHtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VDb250ZXh0KEJsb2dDb250ZXh0KVxuXG4gIGZ1bmN0aW9uIHNldFBhZ2UocGFnZSkge1xuICAgIGlmIChwYWdlIDwgMSlcbiAgICAgIHRocm93ICdJbnZhbGlkIHBhZ2UgbnVtYmVyJ1xuXG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHsuLi5zdGF0ZSwgcGFnZSB9ICkpXG4gIH1cblxuICBmdW5jdGlvbiBzZXRFbnRyeShlbnRyeSkge1xuICAgIHNldFN0YXRlKHN0YXRlID0+ICh7IC4uLnN0YXRlLCBlbnRyeSB9KSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UGFnZSxcbiAgICB0b3RhbFBhZ2VzOiBzdGF0ZS50b3RhbFBhZ2VzLFxuICAgIGVudHJ5OiBzdGF0ZS5lbnRyeSxcbiAgICBzZXRFbnRyeSxcbiAgICBlbnRyeUxpc3Q6IHN0YXRlLmVudHJ5TGlzdCxcbiAgICBzdGF0ZSxcbiAgICBzZXRTdGF0ZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUJsb2ciLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gIGZyb20gXCJyZWFjdFwiXG5cbmltcG9ydCBQYWdpbmF0b3IgZnJvbSAnLi9wYWdpbmF0b3InXG5pbXBvcnQgY2xpZW50IGZyb20gXCIuLi8uLi9hcGlcIlxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuLi9wYWxldHRlJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB1c2VCbG9nIGZyb20gJy4vdXNlQmxvZydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmxvZyh7IHNlYXJjaFBhcmFtcyB9KSB7XG5cbiAgY29uc3QgRW50cnlMaXN0ID0gc3R5bGVkLmRpdmBcbiAgICAjZW50cnktY29udGFpbmVyIHtcbiAgICAgIGxpIHtcbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICAgICAgICBoMSB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcbiAgICAgICAgICAgIG1hcmdpbjogNXB4IDAgMTVweCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5kYXRlIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBhcmlhbFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICBjb2xvcjogJHtwYWxldHRlLnN1YkhlYWRpbmd9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBgXG5cbiAgY29uc3QgeyBzZXRTdGF0ZSwgZW50cnlMaXN0LCB0b3RhbFBhZ2VzIH0gPSB1c2VCbG9nKClcblxuICAvLyBwYWdpbmcgcGFyYW1zXG4gIGNvbnN0IHAgPSBzZWFyY2hQYXJhbXMuZ2V0KCdwJykgfHwgMVxuICBjb25zdCBycHAgPSBzZWFyY2hQYXJhbXMuZ2V0KCdycHAnKSB8fCAxMFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcSA9IHtcbiAgICAgICAgY29udGVudF90eXBlOiAncG9zdCcsXG4gICAgICAgIHNraXA6IChwIC0gMSkgKiBycHAsXG4gICAgICAgIGxpbWl0OiBycHBcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5nZXRFbnRyaWVzKHEpXG4gICAgICBjb25zb2xlLmxvZygnZW50cmllcyByZXMnLCByZXMpXG4gICAgICAvLyBkbyB3aXRoIG9uZSBjYWxsLCBhdm9pZCByZS1yZW5kZXJzXG4gICAgICBzZXRTdGF0ZShzdGF0ZSA9PiAoe1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZW50cnlMaXN0OiByZXMuaXRlbXMsXG4gICAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbChyZXMudG90YWwvcnBwKVxuICAgICAgfSkpXG4gICAgfVxuICAgIGZldGNoRGF0YSgpXG4gIH0sIFtdKVxuXG4gIHJldHVybiAoXG4gICAgPEVudHJ5TGlzdD5cbiAgICAgIHtcbiAgICAgICAgIWVudHJ5TGlzdC5sZW5ndGhcbiAgICAgICAgICA/IDxlbT5Mb2FkaW5nLi4uPC9lbT5cbiAgICAgICAgICA6IDxkaXYgaWQ9XCJlbnRyeS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIHtlbnRyeUxpc3QubWFwKGl0ZW0gPT4gKFxuICAgICAgICAgICAgICAgICAgPGxpIGtleT17aXRlbS5maWVsZHMuc2x1Z30+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17Jy9wb3N0LycraXRlbS5zeXMuaWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPntpdGVtLmZpZWxkcy50aXRsZX08L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRhdGVcIj57bW9tZW50KGl0ZW0uc3lzLmNyZWF0ZWRBdCkuZm9ybWF0KCdNTU1NIERvIFlZWVksIGg6bW0gYScpfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmZpZWxkcy50aHVtYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e2l0ZW0uZmllbGRzLnRodW1iLmZpZWxkcy5maWxlLnVybH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XCI1NjBweFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8UGFnaW5hdG9yIHRvdGFsUGFnZXM9e3RvdGFsUGFnZXN9IHA9e3B9IHJwcD17cnBwfS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgIH1cbiAgICA8L0VudHJ5TGlzdD5cbiAgKVxufSIsImltcG9ydCBSZWFjdCwge3VzZUVmZmVjdH0gIGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgUmVhY3RNYXJrZG93biBmcm9tICdyZWFjdC1tYXJrZG93bidcbmltcG9ydCBjbGllbnQgZnJvbSAnLi4vLi4vYXBpJ1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuLi9wYWxldHRlJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB1c2VCbG9nIGZyb20gJy4vdXNlQmxvZydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUG9zdChwcm9wcykge1xuXG4gIGNvbnN0IEJsb2dQb3N0ID0gc3R5bGVkLmRpdmBcbiAgICAjcG9zdC1jb250YWluZXIge1xuICAgICAgbWFyZ2luOiAyMHB4IDAgMjBweCAwO1xuXG4gICAgICBoMSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgIH1cblxuICAgICAgI2RhdGUge1xuICAgICAgICBmb250LWZhbWlseTogYXJpYWxcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgY29sb3I6ICR7cGFsZXR0ZS5zdWJIZWFkaW5nfTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgICB9XG5cbiAgICAgICNwb3N0LWJvZHkge1xuICAgICAgICBmb250LWZhbWlseTogZ2VvcmdpYTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDI1cHg7XG5cbiAgICAgICAgdWwge1xuICAgICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogY2lyY2xlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICN0YWctbGFiZWwge1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgY29sb3I6ICR7cGFsZXR0ZS5zdWJIZWFkaW5nfTtcbiAgICAgIH1cblxuICAgICAgLnRhZyB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICAgICAgYmFja2dyb3VuZDogJHtwYWxldHRlLmJhY2tncm91bmR9O1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkICR7cGFsZXR0ZS5pbWFnZUJvcmRlcn07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6NXB4O1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246bm9uZTtcbiAgICAgICAgcGFkZGluZzo4cHg7XG4gICAgICAgIG1hcmdpbjozcHg7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtcbiAgICAgIH1cblxuICAgICAgLnRhZzpob3ZlciB7XG4gICAgICAgIGNvbG9yOiAke3BhbGV0dGUuYmFja2dyb3VuZH07XG4gICAgICAgIGJhY2tncm91bmQ6ICR7cGFsZXR0ZS5zdWJIZWFkaW5nfTtcbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICBjb25zdCB7IGVudHJ5LCBzZXRFbnRyeSB9ID0gdXNlQmxvZygpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZ2V0RW50cnkocHJvcHMuaWQpXG4gICAgICBjb25zb2xlLmxvZygncmVzJywgcmVzKVxuICAgICAgc2V0RW50cnkocmVzKVxuICAgIH1cbiAgICBmZXRjaERhdGEoKVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDxCbG9nUG9zdD5cbiAgICA8ZGl2IGlkPVwicG9zdC1jb250YWluZXJcIj5cbiAgICAgIHtcbiAgICAgICAgIWVudHJ5XG4gICAgICAgICAgPyA8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPjxlbT5Mb2FkaW5nLi4uPC9lbT48L2Rpdj5cbiAgICAgICAgICA6IDxkaXY+XG4gICAgICAgICAgICAgIDxoMT57ZW50cnkuZmllbGRzLnRpdGxlfTwvaDE+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJkYXRlXCI+e21vbWVudChlbnRyeS5zeXMuY3JlYXRlZEF0KS5mb3JtYXQoJ01NTU0gRG8gWVlZWSwgaDptbSBhJyl9PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJwb3N0LWJvZHlcIj48UmVhY3RNYXJrZG93blxuICAgICAgICAgICAgICAgIGVzY2FwZUh0bWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuPXtlbnRyeS5maWVsZHMuYm9keX1cbiAgICAgICAgICAgICAgLz48L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJ0YWctbGFiZWxcIj57IGVudHJ5Lm1ldGFkYXRhLnRhZ3MgPyAnVGFnczonIDogJycgfTwvZGl2PlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGVudHJ5Lm1ldGFkYXRhLnRhZ3MgJiYgZW50cnkubWV0YWRhdGEudGFncy5tYXAodGFnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxhIGhyZWY9e2AvdGFncy8ke3RhZy5zeXMuaWR9YH0gY2xhc3M9XCJ0YWdcIiBrZXk9e3RhZy5zeXMuaWR9Pnt0YWcuc3lzLmlkfTwvYT5cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgIDwvZGl2PlxuICAgIDwvQmxvZ1Bvc3Q+XG4gIClcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gIGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgY2xpZW50IGZyb20gXCIuLi8uLi9hcGlcIlxuaW1wb3J0IHVzZUJsb2cgZnJvbSAnLi91c2VCbG9nJ1xuaW1wb3J0IFBhZ2luYXRvciBmcm9tICcuL3BhZ2luYXRvcidcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL3BhbGV0dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRhZyh7IGlkLCBzZWFyY2hQYXJhbXMgfSkge1xuXG4gIGNvbnN0IEVudHJ5TGlzdCA9IHN0eWxlZC5kaXZgXG4gICAgI2VudHJ5LWNvbnRhaW5lciB7XG4gICAgICBsaSB7XG4gICAgICAgIGRpdiB7XG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgIGltZyB7XG4gICAgICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7cGFsZXR0ZS5pbWFnZUJvcmRlcn07XG4gICAgICAgICAgICBtYXJnaW46IDVweCAwIDEwcHggMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICBjb25zdCBTZWxlY3RlZFRhZyA9IHN0eWxlZC5kaXZgXG4gICAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1CZWJhcytOZXVlJmRpc3BsYXk9c3dhcCcpO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcblxuICAgICNzZWxlY3RlZC10YWctY29udGFpbmVyIHtcbiAgICAgIGNvbG9yOiAke3BhbGV0dGUudGV4dH07XG4gICAgICB3aWR0aDogNTYwcHg7XG4gICAgICBtYXJnaW4tdG9wOiA1MHB4O1xuICAgICAgcGFkZGluZy1ib3R0b206IDE1cHg7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkICR7cGFsZXR0ZS5pbWFnZUJvcmRlcn07XG5cbiAgICAgIC50YWcge1xuICAgICAgICBmb250LWZhbWlseTogXCJCZWJhcyBOZXVlXCI7XG5cbiAgICAgICAgZm9udC1zaXplOiA2NHB4O1xuICAgICAgICBjb2xvcjogJHtwYWxldHRlLnN1YkhlYWRpbmd9O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3BhbGV0dGUuYmFja2dyb3VuZH07XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICBjb25zdCB7IHNldFN0YXRlLCBlbnRyeUxpc3QsIHRvdGFsUGFnZXMgfSA9IHVzZUJsb2coKVxuXG4gIC8vIHBhZ2luZyBwYXJhbXNcbiAgY29uc3QgcCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3AnKSB8fCAxXG4gIGNvbnN0IHJwcCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3JwcCcpIHx8IDEwXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBxID0ge1xuICAgICAgICAnbWV0YWRhdGEudGFncy5zeXMuaWRbaW5dJzogaWQsXG4gICAgICAgIGNvbnRlbnRfdHlwZTogJ3Bvc3QnLFxuICAgICAgICBza2lwOiAocCAtIDEpICogcnBwLFxuICAgICAgICBsaW1pdDogcnBwXG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZ2V0RW50cmllcyhxKVxuICAgICAgY29uc29sZS5sb2coJ2VudHJpZXMgcmVzJywgcmVzKVxuICAgICAgLy8gZG8gd2l0aCBvbmUgY2FsbCwgYXZvaWQgcmUtcmVuZGVyc1xuICAgICAgc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGVudHJ5TGlzdDogcmVzLml0ZW1zLFxuICAgICAgICB0b3RhbFBhZ2VzOiBNYXRoLmNlaWwocmVzLnRvdGFsL3JwcClcbiAgICAgIH0pKVxuICAgIH1cbiAgICBmZXRjaERhdGEoKVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgPFNlbGVjdGVkVGFnPlxuICAgICAgPGRpdiBpZD1cInNlbGVjdGVkLXRhZy1jb250YWluZXJcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwidGFnXCI+e2lkfTwvc3Bhbj4gcG9zdHNcbiAgICAgIDwvZGl2PlxuICAgIDwvU2VsZWN0ZWRUYWc+XG4gICAgPEVudHJ5TGlzdD5cbiAgICAgIDxkaXY+XG4gICAgICB7XG4gICAgICAgICFlbnRyeUxpc3QubGVuZ3RoXG4gICAgICAgICAgPyA8ZW0+TG9hZGluZy4uLjwvZW0+XG4gICAgICAgICAgOiA8ZGl2IGlkPVwiZW50cnktY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICB7ZW50cnlMaXN0Lm1hcChpdGVtID0+IChcbiAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2l0ZW0uZmllbGRzLnNsdWd9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXsnL3Bvc3QvJytpdGVtLnN5cy5pZH0+XG4gICAgICAgICAgICAgICAgICAgICAgPGgxPntpdGVtLmZpZWxkcy50aXRsZX08L2gxPlxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZmllbGRzLnRodW1iXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtpdGVtLmZpZWxkcy50aHVtYi5maWVsZHMuZmlsZS51cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjU2MHB4XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIDxQYWdpbmF0b3IgdG90YWxQYWdlcz17dG90YWxQYWdlc30gcD17cH0gcnBwPXtycHB9IGJhc2VQYXRoPXtgL3RhZ3MvJHtpZH1gfS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgIDwvRW50cnlMaXN0PlxuICAgIDwvZGl2PlxuICApXG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9ICBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IGNsaWVudCBmcm9tIFwiLi4vLi4vYXBpXCJcbmltcG9ydCB1c2VCbG9nIGZyb20gJy4vdXNlQmxvZydcbmltcG9ydCBQYWdpbmF0b3IgZnJvbSAnLi9wYWdpbmF0b3InXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCdcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL3BhbGV0dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERldih7IHNlYXJjaFBhcmFtcyB9KSB7XG5cbiAgY29uc3QgRW50cnlMaXN0ID0gc3R5bGVkLmRpdmBcbiAgICAjZW50cnktY29udGFpbmVyIHtcbiAgICAgIGxpIHtcbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgICAgICAgICBoMSB7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcbiAgICAgICAgICAgIG1hcmdpbjogNXB4IDAgMTVweCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5kYXRlIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBhcmlhbFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICBjb2xvcjogJHtwYWxldHRlLnN1YkhlYWRpbmd9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBgXG5cbiAgY29uc3QgeyBzZXRTdGF0ZSwgZW50cnlMaXN0LCB0b3RhbFBhZ2VzIH0gPSB1c2VCbG9nKClcblxuICAvLyBwYWdpbmcgcGFyYW1zXG4gIGNvbnN0IHAgPSBzZWFyY2hQYXJhbXMuZ2V0KCdwJykgfHwgMVxuICBjb25zdCBycHAgPSBzZWFyY2hQYXJhbXMuZ2V0KCdycHAnKSB8fCAxMFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcSA9IHtcbiAgICAgICAgJ21ldGFkYXRhLnRhZ3Muc3lzLmlkW2luXSc6ICdkZXYnLFxuICAgICAgICBjb250ZW50X3R5cGU6ICdwb3N0JyxcbiAgICAgICAgc2tpcDogKHAgLSAxKSAqIHJwcCxcbiAgICAgICAgbGltaXQ6IHJwcFxuICAgICAgfVxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgY2xpZW50LmdldEVudHJpZXMocSlcbiAgICAgIGNvbnNvbGUubG9nKCdlbnRyaWVzIHJlcycsIHJlcylcbiAgICAgIC8vIGRvIHdpdGggb25lIGNhbGwsIGF2b2lkIHJlLXJlbmRlcnNcbiAgICAgIHNldFN0YXRlKHN0YXRlID0+ICh7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBlbnRyeUxpc3Q6IHJlcy5pdGVtcyxcbiAgICAgICAgdG90YWxQYWdlczogTWF0aC5jZWlsKHJlcy50b3RhbC9ycHApXG4gICAgICB9KSlcbiAgICB9XG4gICAgZmV0Y2hEYXRhKClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8RW50cnlMaXN0PlxuICAgICAge1xuICAgICAgICAhZW50cnlMaXN0Lmxlbmd0aFxuICAgICAgICAgID8gPGVtPkxvYWRpbmcuLi48L2VtPlxuICAgICAgICAgIDogPGRpdiBpZD1cImVudHJ5LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAge2VudHJ5TGlzdC5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgICAgICAgICA8bGkga2V5PXtpdGVtLmZpZWxkcy5zbHVnfT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXsnL3Bvc3QvJytpdGVtLnN5cy5pZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+e2l0ZW0uZmllbGRzLnRpdGxlfTwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGF0ZVwiPnttb21lbnQoaXRlbS5zeXMuY3JlYXRlZEF0KS5mb3JtYXQoJ01NTU0gRG8gWVlZWSwgaDptbSBhJyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZmllbGRzLnRodW1iXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17aXRlbS5maWVsZHMudGh1bWIuZmllbGRzLmZpbGUudXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjU2MHB4XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIDxQYWdpbmF0b3IgdG90YWxQYWdlcz17dG90YWxQYWdlc30gcD17cH0gcnBwPXtycHB9IGJhc2VQYXRoPVwiL2RldlwiLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgIDwvRW50cnlMaXN0PlxuICApXG59XG5cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSAgZnJvbSBcInJlYWN0XCJcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuL3BhbGV0dGUnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoKSB7XG5cbiAgY29uc3QgSG9tZVBhZ2UgPSBzdHlsZWQuZGl2YFxuICAgICNob21lLWNvbnRhaW5lciB7XG4gICAgICBtYXJnaW4tdG9wOiA1MHB4O1xuICAgICAgd2lkdGg6IDU2MHB4O1xuICAgICAgY29sb3I6ICR7cGFsZXR0ZS50ZXh0fTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICAgaW1nIHtcbiAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcbiAgICAgICAgd2lkdGg6IDU2MHB4O1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgfVxuICAgIH1cbiAgYFxuXG4gIHJldHVybiAoXG4gICAgPEhvbWVQYWdlPlxuICAgICAgPGRpdiBpZD1cImhvbWUtY29udGFpbmVyXCI+XG4gICAgICAgIDxpbWcgc3JjPVwiaHR0cHM6Ly9pbWFnZXMuY3RmYXNzZXRzLm5ldC85aXRrb3EwMXM3N2ovMk1FVFd4TlVnZ21uNmJmcWlIaHBLdS8yMjE1YTBiZDc1YWQxM2NkNGViYTk5NDAwOGViOGQ2OC9QaGlsX0F2ZXJ5X29uX0luc3RhZ3JhbV9fX19fWWV0X2Fub3RoZXJfcmFtZW5fcGxhY2VfaW5fbnljX19ub3RfY29tcGxhaW5pbmdfdGhvdWdoX19fcmFtZW5fX255Y19fXy5wbmdcIiAvPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIEp1c3QgYSBwaWN0dXJlIG9mIHNvbWUgeXVtbXkgcmFtZW4gSSBhdGUgb25jZS5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L0hvbWVQYWdlPlxuICApXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgV29yayBmcm9tIFwiLi93b3JrXCJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gXCIuL25hdlwiXG5pbXBvcnQgQmxvZyBmcm9tIFwiLi9ibG9nXCJcbmltcG9ydCBQb3N0IGZyb20gXCIuL2Jsb2cvcG9zdFwiXG5pbXBvcnQgVGFnIGZyb20gXCIuL2Jsb2cvdGFnXCJcbmltcG9ydCBEZXYgZnJvbSBcIi4vYmxvZy9kZXZcIlxuaW1wb3J0IEhvbWUgZnJvbSBcIi4vaG9tZVwiXG5pbXBvcnQgeyBCbG9nUHJvdmlkZXIgfSBmcm9tIFwiLi9ibG9nL2Jsb2dDb250ZXh0XCJcbmltcG9ydCB7IHBhcnNlVXJsIH0gZnJvbSAnLi4vdXRpbHMnXG5cbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5pbXBvcnQgeyBjcmVhdGVHbG9iYWxTdHlsZSB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuXG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuL3BhbGV0dGUnXG5cbmNvbnN0IEdsb2JhbFN0eWxlID0gY3JlYXRlR2xvYmFsU3R5bGVgXG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5iYWNrZ3JvdW5kfTtcbiAgfVxuICAubWFpbi1zaXRlIHtcbiAgICB3aWR0aDogNTYwcHg7XG4gICAgbWFyZ2luOiBhdXRvO1xuICB9XG5gO1xuXG5jb25zdCBNYWluID0gc3R5bGVkLmRpdmBcbiAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG8mZGlzcGxheT1zd2FwJyk7XG5cbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIGNvbG9yOiAke3BhbGV0dGUudGV4dH07XG5cbiAgaDEge1xuICAgIGZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcbiAgICBjb2xvcjogJHtwYWxldHRlLmhlYWRpbmd9O1xuICB9XG5cbiAgdWwge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuXG4gIGEge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogJHtwYWxldHRlLnRleHR9O1xuICB9XG5cbiAgI3Bvc3QtYm9keSBhIHtcbiAgICAmOmxpbmsge1xuICAgICAgY29sb3I6ICR7cGFsZXR0ZS5saW5rfTtcbiAgICB9XG4gICAgJjp2aXNpdGVkIHtcbiAgICAgIGNvbG9yOiAke3BhbGV0dGUudmlzaXRlZExpbmt9O1xuICAgIH1cbiAgICAmOmhvdmVyIHtcbiAgICAgIGNvbG9yOiAke3BhbGV0dGUudGV4dH07XG4gICAgfVxuICB9XG5cblxuICAubG9hZGluZyB7XG4gICAgbWFyZ2luLXRvcDogNTBweDtcbiAgfVxuYFxuXG5jbGFzcyBNYWluQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHJlcyA9IFtdXG4gICAgY29uc3Qge3BhcnRzLCBzZWFyY2hQYXJhbXN9ID0gcGFyc2VVcmwoKVxuICAgIGNvbnN0IHNlY3Rpb24gPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJ1xuICAgIGNvbnN0IHRhZ09yUG9zdElkID0gcGFydHNbMV1cblxuICAgIGxldCBtaWRkbGUgPSBudWxsXG4gICAgc3dpdGNoKHNlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3dvcmsnOlxuICAgICAgICBtaWRkbGUgPSA8V29yayBrZXk9XCJ3b3JrXCIvPlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncG9zdCc6XG4gICAgICAgIG1pZGRsZSA9IDxQb3N0IGtleT1cInBvc3RcIiBpZD17dGFnT3JQb3N0SWR9IC8+XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdibG9nJzpcbiAgICAgICAgbWlkZGxlID0gPEJsb2cga2V5PVwiYmxvZ1wiIHNlYXJjaFBhcmFtcz17c2VhcmNoUGFyYW1zfSAvPlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZGV2JzpcbiAgICAgICAgbWlkZGxlID0gPERldiBrZXk9XCJkZXZcIiBzZWFyY2hQYXJhbXM9e3NlYXJjaFBhcmFtc30gLz5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3RhZ3MnOlxuICAgICAgICBtaWRkbGUgPSA8VGFnIGtleT1cInRhZ1wiIGlkPXt0YWdPclBvc3RJZH0gc2VhcmNoUGFyYW1zPXtzZWFyY2hQYXJhbXN9IC8+XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBtaWRkbGUgPSA8SG9tZSBrZXk9XCJob21lXCIgLz5cbiAgICB9XG4gICAgcmVzLnB1c2gobWlkZGxlKVxuXG4gICAgcmV0dXJuIChcblxuICAgICAgPEJsb2dQcm92aWRlcj5cbiAgICAgICAgPEdsb2JhbFN0eWxlIC8+XG4gICAgICAgIDxNYWluPlxuICAgICAgICAgIDxOYXZpZ2F0aW9uIGtleT1cIm5hdlwiIHNlY3Rpb249e3NlY3Rpb259IC8+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1haW4tc2l0ZVwiPntyZXN9PC9kaXY+XG4gICAgICAgIDwvTWFpbj5cbiAgICAgIDwvQmxvZ1Byb3ZpZGVyPlxuICAgIClcbiAgfVxuXG59XG5leHBvcnQgZGVmYXVsdCBNYWluQ29udGFpbmVyIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgTWFpbkNvbnRhaW5lciBmcm9tICcuL2NvbXBvbmVudHMvbWFpbidcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCJcblxuY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbi1zaXRlXCIpXG53cmFwcGVyID8gUmVhY3RET00ucmVuZGVyKDxNYWluQ29udGFpbmVyIC8+LCB3cmFwcGVyKSA6IGZhbHNlIl0sInNvdXJjZVJvb3QiOiIifQ==