!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=365)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(s(e,t))return!1;return!0}function l(e){return void 0===e}function d(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function f(e,t){var n,r=[],a=e.length;for(n=0;n<a;++n)r.push(t(e[n],n));return r}function m(e,t){for(var n in t)s(t,n)&&(e[n]=t[n]);return s(t,"toString")&&(e.toString=t.toString),s(t,"valueOf")&&(e.valueOf=t.valueOf),e}function _(e,t,n,r){return Yt(e,t,n,r,!0).utc()}function p(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function h(e){var t=null,n=!1,a=e._d&&!isNaN(e._d.getTime());return a&&(t=p(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n),e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)),null!=Object.isFrozen&&Object.isFrozen(e)?a:(e._isValid=a,e._isValid)}function y(e){var t=_(NaN);return null!=e?m(p(t),e):p(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var g=a.momentProperties=[],M=!1;function v(e,t){var n,r,a,i=g.length;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=p(t)),l(t._locale)||(e._locale=t._locale),i>0)for(n=0;n<i;n++)l(a=t[r=g[n]])||(e[r]=a);return e}function b(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,a.updateOffset(this),M=!1)}function L(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function k(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function w(e,t){var n=!0;return m((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,i,o,u=[],l=arguments.length;for(i=0;i<l;i++){if(r="","object"==typeof arguments[i]){for(o in r+="\n["+i+"] ",arguments[0])s(arguments[0],o)&&(r+=o+": "+arguments[0][o]+", ");r=r.slice(0,-2)}else r=arguments[i];u.push(r)}k(e+"\nArguments: "+Array.prototype.slice.call(u).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var Y,T={};function D(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),T[e]||(k(t),T[e]=!0)}function S(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,r=m({},e);for(n in t)s(t,n)&&(o(e[n])&&o(t[n])?(r[n]={},m(r[n],e[n]),m(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)s(e,n)&&!s(t,n)&&o(e[n])&&(r[n]=m({},r[n]));return r}function j(e){null!=e&&this.set(e)}function O(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,Y=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)s(e,t)&&n.push(t);return n};var E=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,P=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,H={},A={};function C(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(A[e]=a),t&&(A[t[0]]=function(){return O(a.apply(this,arguments),t[1],t[2])}),n&&(A[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function N(e,t){return e.isValid()?(t=F(t,e.localeData()),H[t]=H[t]||function(e){var t,n,r,a=e.match(E);for(t=0,n=a.length;t<n;t++)A[a[t]]?a[t]=A[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=S(a[r])?a[r].call(t,e):a[r];return i}}(t),H[t](e)):e.localeData().invalidDate()}function F(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(P.lastIndex=0;n>=0&&P.test(e);)e=e.replace(P,r),P.lastIndex=0,n-=1;return e}var W={D:"date",dates:"date",date:"date",d:"day",days:"day",day:"day",e:"weekday",weekdays:"weekday",weekday:"weekday",E:"isoWeekday",isoweekdays:"isoWeekday",isoweekday:"isoWeekday",DDD:"dayOfYear",dayofyears:"dayOfYear",dayofyear:"dayOfYear",h:"hour",hours:"hour",hour:"hour",ms:"millisecond",milliseconds:"millisecond",millisecond:"millisecond",m:"minute",minutes:"minute",minute:"minute",M:"month",months:"month",month:"month",Q:"quarter",quarters:"quarter",quarter:"quarter",s:"second",seconds:"second",second:"second",gg:"weekYear",weekyears:"weekYear",weekyear:"weekYear",GG:"isoWeekYear",isoweekyears:"isoWeekYear",isoweekyear:"isoWeekYear",w:"week",weeks:"week",week:"week",W:"isoWeek",isoweeks:"isoWeek",isoweek:"isoWeek",y:"year",years:"year",year:"year"};function I(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function z(e){var t,n,r={};for(n in e)s(e,n)&&(t=I(n))&&(r[t]=e[n]);return r}var R,U={date:9,day:11,weekday:11,isoWeekday:11,dayOfYear:4,hour:13,millisecond:16,minute:14,month:8,quarter:7,second:15,weekYear:1,isoWeekYear:1,week:5,isoWeek:5,year:1},B=/\d/,J=/\d\d/,$=/\d{3}/,V=/\d{4}/,q=/[+-]?\d{6}/,G=/\d\d?/,K=/\d\d\d\d?/,Q=/\d\d\d\d\d\d?/,Z=/\d{1,3}/,X=/\d{1,4}/,ee=/[+-]?\d{1,6}/,te=/\d+/,ne=/[+-]?\d+/,re=/Z|[+-]\d\d:?\d\d/gi,ae=/Z|[+-]\d\d(?::?\d\d)?/gi,ie=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,oe=/^[1-9]\d?/,se=/^([1-9]\d|\d)/;function ue(e,t,n){R[e]=S(t)?t:function(e,r){return e&&n?n:t}}function le(e,t){return s(R,e)?R[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ce(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function fe(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=ce(t)),n}R={};var me={};function _e(e,t){var n,r,a=t;for("string"==typeof e&&(e=[e]),d(t)&&(a=function(e,n){n[t]=fe(e)}),r=e.length,n=0;n<r;n++)me[e[n]]=a}function pe(e,t){_e(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function he(e,t,n){null!=t&&s(me,e)&&me[e](t,n._a,n,e)}function ye(e){return e%4==0&&e%100!=0||e%400==0}function ge(e){return ye(e)?366:365}C("Y",0,0,(function(){var e=this.year();return e<=9999?O(e,4):"+"+e})),C(0,["YY",2],0,(function(){return this.year()%100})),C(0,["YYYY",4],0,"year"),C(0,["YYYYY",5],0,"year"),C(0,["YYYYYY",6,!0],0,"year"),ue("Y",ne),ue("YY",G,J),ue("YYYY",X,V),ue("YYYYY",ee,q),ue("YYYYYY",ee,q),_e(["YYYYY","YYYYYY"],0),_e("YYYY",(function(e,t){t[0]=2===e.length?a.parseTwoDigitYear(e):fe(e)})),_e("YY",(function(e,t){t[0]=a.parseTwoDigitYear(e)})),_e("Y",(function(e,t){t[0]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return fe(e)+(fe(e)>68?1900:2e3)};var Me,ve=be("FullYear",!0);function be(e,t){return function(n){return null!=n?(ke(this,e,n),a.updateOffset(this,t),this):Le(this,e)}}function Le(e,t){if(!e.isValid())return NaN;var n=e._d,r=e._isUTC;switch(t){case"Milliseconds":return r?n.getUTCMilliseconds():n.getMilliseconds();case"Seconds":return r?n.getUTCSeconds():n.getSeconds();case"Minutes":return r?n.getUTCMinutes():n.getMinutes();case"Hours":return r?n.getUTCHours():n.getHours();case"Date":return r?n.getUTCDate():n.getDate();case"Day":return r?n.getUTCDay():n.getDay();case"Month":return r?n.getUTCMonth():n.getMonth();case"FullYear":return r?n.getUTCFullYear():n.getFullYear();default:return NaN}}function ke(e,t,n){var r,a,i,o,s;if(e.isValid()&&!isNaN(n)){switch(r=e._d,a=e._isUTC,t){case"Milliseconds":return void(a?r.setUTCMilliseconds(n):r.setMilliseconds(n));case"Seconds":return void(a?r.setUTCSeconds(n):r.setSeconds(n));case"Minutes":return void(a?r.setUTCMinutes(n):r.setMinutes(n));case"Hours":return void(a?r.setUTCHours(n):r.setHours(n));case"Date":return void(a?r.setUTCDate(n):r.setDate(n));case"FullYear":break;default:return}i=n,o=e.month(),s=29!==(s=e.date())||1!==o||ye(i)?s:28,a?r.setUTCFullYear(i,o,s):r.setFullYear(i,o,s)}}function we(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?ye(e)?29:28:31-r%7%2}Me=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},C("M",["MM",2],"Mo",(function(){return this.month()+1})),C("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),C("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),ue("M",G,oe),ue("MM",G,J),ue("MMM",(function(e,t){return t.monthsShortRegex(e)})),ue("MMMM",(function(e,t){return t.monthsRegex(e)})),_e(["M","MM"],(function(e,t){t[1]=fe(e)-1})),_e(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:p(n).invalidMonth=e}));var Ye="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Te="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),De=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Se=ie,xe=ie;function je(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=_([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Me.call(this._shortMonthsParse,o))?a:null:-1!==(a=Me.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Me.call(this._shortMonthsParse,o))||-1!==(a=Me.call(this._longMonthsParse,o))?a:null:-1!==(a=Me.call(this._longMonthsParse,o))||-1!==(a=Me.call(this._shortMonthsParse,o))?a:null}function Oe(e,t){if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=fe(t);else if(!d(t=e.localeData().monthsParse(t)))return e;var n=t,r=e.date();return r=r<29?r:Math.min(r,we(e.year(),n)),e._isUTC?e._d.setUTCMonth(n,r):e._d.setMonth(n,r),e}function Ee(e){return null!=e?(Oe(this,e),a.updateOffset(this,!0),this):Le(this,"Month")}function Pe(){function e(e,t){return t.length-e.length}var t,n,r,a,i=[],o=[],s=[];for(t=0;t<12;t++)n=_([2e3,t]),r=de(this.monthsShort(n,"")),a=de(this.months(n,"")),i.push(r),o.push(a),s.push(a),s.push(r);i.sort(e),o.sort(e),s.sort(e),this._monthsRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function He(e,t,n,r,a,i,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,i,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,i,o),s}function Ae(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Ce(e,t,n){var r=7+t-n;return-(7+Ae(e,0,r).getUTCDay()-t)%7+r-1}function Ne(e,t,n,r,a){var i,o,s=1+7*(t-1)+(7+n-r)%7+Ce(e,r,a);return s<=0?o=ge(i=e-1)+s:s>ge(e)?(i=e+1,o=s-ge(e)):(i=e,o=s),{year:i,dayOfYear:o}}function Fe(e,t,n){var r,a,i=Ce(e.year(),t,n),o=Math.floor((e.dayOfYear()-i-1)/7)+1;return o<1?r=o+We(a=e.year()-1,t,n):o>We(e.year(),t,n)?(r=o-We(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function We(e,t,n){var r=Ce(e,t,n),a=Ce(e+1,t,n);return(ge(e)-r+a)/7}function Ie(e,t){return e.slice(t,7).concat(e.slice(0,t))}C("w",["ww",2],"wo","week"),C("W",["WW",2],"Wo","isoWeek"),ue("w",G,oe),ue("ww",G,J),ue("W",G,oe),ue("WW",G,J),pe(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=fe(e)})),C("d",0,"do","day"),C("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),C("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),C("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),C("e",0,0,"weekday"),C("E",0,0,"isoWeekday"),ue("d",G),ue("e",G),ue("E",G),ue("dd",(function(e,t){return t.weekdaysMinRegex(e)})),ue("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),ue("dddd",(function(e,t){return t.weekdaysRegex(e)})),pe(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:p(n).invalidWeekday=e})),pe(["d","e","E"],(function(e,t,n,r){t[r]=fe(e)}));var ze="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Re="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ue="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Be=ie,Je=ie,$e=ie;function Ve(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=_([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Me.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Me.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._shortWeekdaysParse,o))||-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Me.call(this._shortWeekdaysParse,o))||-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Me.call(this._minWeekdaysParse,o))||-1!==(a=Me.call(this._weekdaysParse,o))||-1!==(a=Me.call(this._shortWeekdaysParse,o))?a:null}function qe(){function e(e,t){return t.length-e.length}var t,n,r,a,i,o=[],s=[],u=[],l=[];for(t=0;t<7;t++)n=_([2e3,1]).day(t),r=de(this.weekdaysMin(n,"")),a=de(this.weekdaysShort(n,"")),i=de(this.weekdays(n,"")),o.push(r),s.push(a),u.push(i),l.push(r),l.push(a),l.push(i);o.sort(e),s.sort(e),u.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function Ge(){return this.hours()%12||12}function Ke(e,t){C(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}C("H",["HH",2],0,"hour"),C("h",["hh",2],0,Ge),C("k",["kk",2],0,(function(){return this.hours()||24})),C("hmm",0,0,(function(){return""+Ge.apply(this)+O(this.minutes(),2)})),C("hmmss",0,0,(function(){return""+Ge.apply(this)+O(this.minutes(),2)+O(this.seconds(),2)})),C("Hmm",0,0,(function(){return""+this.hours()+O(this.minutes(),2)})),C("Hmmss",0,0,(function(){return""+this.hours()+O(this.minutes(),2)+O(this.seconds(),2)})),Ke("a",!0),Ke("A",!1),ue("a",Qe),ue("A",Qe),ue("H",G,se),ue("h",G,oe),ue("k",G,oe),ue("HH",G,J),ue("hh",G,J),ue("kk",G,J),ue("hmm",K),ue("hmmss",Q),ue("Hmm",K),ue("Hmmss",Q),_e(["H","HH"],3),_e(["k","kk"],(function(e,t,n){var r=fe(e);t[3]=24===r?0:r})),_e(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),_e(["h","hh"],(function(e,t,n){t[3]=fe(e),p(n).bigHour=!0})),_e("hmm",(function(e,t,n){var r=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r)),p(n).bigHour=!0})),_e("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r,2)),t[5]=fe(e.substr(a)),p(n).bigHour=!0})),_e("Hmm",(function(e,t,n){var r=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r))})),_e("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=fe(e.substr(0,r)),t[4]=fe(e.substr(r,2)),t[5]=fe(e.substr(a))}));var Ze,Xe=be("Hours",!0),et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ye,monthsShort:Te,week:{dow:0,doy:6},weekdays:ze,weekdaysMin:Ue,weekdaysShort:Re,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function rt(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function at(e){return e?e.toLowerCase().replace("_","-"):e}function it(t){var r=null;if(void 0===tt[t]&&void 0!==e&&e&&e.exports&&function(e){return!(!e||!e.match("^[^/\\\\]*$"))}(t))try{r=Ze._abbr,n(275)("./"+t),ot(r)}catch(e){tt[t]=null}return tt[t]}function ot(e,t){var n;return e&&((n=l(t)?ut(e):st(e,t))?Ze=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ze._abbr}function st(e,t){if(null!==t){var n,r=et;if(t.abbr=e,null!=tt[e])D("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])r=tt[t.parentLocale]._config;else{if(null==(n=it(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return tt[e]=new j(x(r,t)),nt[e]&&nt[e].forEach((function(e){st(e.name,e.config)})),ot(e),tt[e]}return delete tt[e],null}function ut(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ze;if(!i(e)){if(t=it(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=at(e[i]).split("-")).length,n=(n=at(e[i+1]))?n.split("-"):null;t>0;){if(r=it(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&rt(a,n)>=t-1)break;t--}i++}return Ze}(e)}function lt(e){var t,n=e._a;return n&&-2===p(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>we(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,p(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),p(e)._overflowWeeks&&-1===t&&(t=7),p(e)._overflowWeekday&&-1===t&&(t=8),p(e).overflow=t),e}var dt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ft=/Z|[+-]\d\d(?::?\d\d)?/,mt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],_t=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((-?\d+)/i,ht=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,yt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function gt(e){var t,n,r,a,i,o,s=e._i,u=dt.exec(s)||ct.exec(s),l=mt.length,d=_t.length;if(u){for(p(e).iso=!0,t=0,n=l;t<n;t++)if(mt[t][1].exec(u[1])){a=mt[t][0],r=!1!==mt[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=d;t<n;t++)if(_t[t][1].exec(u[3])){i=(u[2]||" ")+_t[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(u[4]){if(!ft.exec(u[4]))return void(e._isValid=!1);o="Z"}e._f=a+(i||"")+(o||""),kt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function vt(e){var t,n,r,a,i,o,s,u,l=ht.exec(e._i.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],r=l[3],a=l[2],i=l[5],o=l[6],s=l[7],u=[Mt(n),Te.indexOf(r),parseInt(a,10),parseInt(i,10),parseInt(o,10)],s&&u.push(parseInt(s,10)),t=u,!function(e,t,n){return!e||Re.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(p(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return yt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(l[8],l[9],l[10]),e._d=Ae.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),p(e).rfc2822=!0}else e._isValid=!1}function bt(e,t,n){return null!=e?e:null!=t?t:n}function Lt(e){var t,n,r,i,o,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,i,o,s,u,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,o=4,n=bt(t.GG,e._a[0],Fe(Tt(),1,4).year),r=bt(t.W,1),((a=bt(t.E,1))<1||a>7)&&(u=!0)):(i=e._locale._week.dow,o=e._locale._week.doy,l=Fe(Tt(),i,o),n=bt(t.gg,e._a[0],l.year),r=bt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(u=!0)):a=i),r<1||r>We(n,i,o)?p(e)._overflowWeeks=!0:null!=u?p(e)._overflowWeekday=!0:(s=Ne(n,r,a,i,o),e._a[0]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=bt(e._a[0],r[0]),(e._dayOfYear>ge(o)||0===e._dayOfYear)&&(p(e)._overflowDayOfYear=!0),n=Ae(o,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ae:He).apply(null,s),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(p(e).weekdayMismatch=!0)}}function kt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],p(e).empty=!0;var t,n,r,i,o,s,u,l=""+e._i,d=l.length,c=0;for(u=(r=F(e._f,e._locale).match(E)||[]).length,t=0;t<u;t++)i=r[t],(n=(l.match(le(i,e))||[])[0])&&((o=l.substr(0,l.indexOf(n))).length>0&&p(e).unusedInput.push(o),l=l.slice(l.indexOf(n)+n.length),c+=n.length),A[i]?(n?p(e).empty=!1:p(e).unusedTokens.push(i),he(i,n,e)):e._strict&&!n&&p(e).unusedTokens.push(i);p(e).charsLeftOver=d-c,l.length>0&&p(e).unusedInput.push(l),e._a[3]<=12&&!0===p(e).bigHour&&e._a[3]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(s=p(e).era)&&(e._a[0]=e._locale.erasConvertYear(s,e._a[0])),Lt(e),lt(e)}else vt(e);else gt(e)}function wt(e){var t=e._i,n=e._f;return e._locale=e._locale||ut(e._l),null===t||void 0===n&&""===t?y({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),L(t)?new b(lt(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,r,a,i,o,s=!1,u=e._f.length;if(0===u)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<u;a++)i=0,o=!1,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],kt(t),h(t)&&(o=!0),i+=p(t).charsLeftOver,i+=10*p(t).unusedTokens.length,p(t).score=i,s?i<r&&(r=i,n=t):(null==r||i<r||o)&&(r=i,n=t,o&&(s=!0));m(e,n||t)}(e):n?kt(e):function(e){var t=e._i;l(t)?e._d=new Date(a.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=pt.exec(e._i);null===t?(gt(e),!1===e._isValid&&(delete e._isValid,vt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=f(t.slice(0),(function(e){return parseInt(e,10)})),Lt(e)):o(t)?function(e){if(!e._d){var t=z(e._i),n=void 0===t.day?t.date:t.day;e._a=f([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),Lt(e)}}(e):d(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),h(e)||(e._d=null),e))}function Yt(e,t,n,r,a){var s,l={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(o(e)&&u(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=n,l._i=e,l._f=t,l._strict=r,(s=new b(lt(wt(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Tt(e,t,n,r){return Yt(e,t,n,r,!1)}a.createFromInputFallback=w("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Dt=w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:y()})),St=w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:y()}));function xt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Tt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var jt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ot(e){var t=z(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,o=t.day||0,u=t.hour||0,l=t.minute||0,d=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,r=!1,a=jt.length;for(t in e)if(s(e,t)&&(-1===Me.call(jt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<a;++n)if(e[jt[n]]){if(r)return!1;parseFloat(e[jt[n]])!==fe(e[jt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*d+6e4*l+1e3*u*60*60,this._days=+o+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=ut(),this._bubble()}function Et(e){return e instanceof Ot}function Pt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ht(e,t){C(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+O(~~(e/60),2)+t+O(~~e%60,2)}))}Ht("Z",":"),Ht("ZZ",""),ue("Z",ae),ue("ZZ",ae),_e(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Ct(ae,e)}));var At=/([\+\-]|\d\d)/gi;function Ct(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(At)||["-",0,0])[1]+fe(n[2]))?0:"+"===n[0]?r:-r}function Nt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(L(e)||c(e)?e.valueOf():Tt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Tt(e).local()}function Ft(e){return-Math.round(e._d.getTimezoneOffset())}function Wt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var It=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,zt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Rt(e,t){var n,r,a,i,o,u,l=e,c=null;return Et(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:d(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=It.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:fe(c[2])*n,h:fe(c[3])*n,m:fe(c[4])*n,s:fe(c[5])*n,ms:fe(Pt(1e3*c[6]))*n}):(c=zt.exec(e))?(n="-"===c[1]?-1:1,l={y:Ut(c[2],n),M:Ut(c[3],n),w:Ut(c[4],n),d:Ut(c[5],n),h:Ut(c[6],n),m:Ut(c[7],n),s:Ut(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(i=Tt(l.from),o=Tt(l.to),a=i.isValid()&&o.isValid()?(o=Nt(o,i),i.isBefore(o)?u=Bt(i,o):((u=Bt(o,i)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new Ot(l),Et(e)&&s(e,"_locale")&&(r._locale=e._locale),Et(e)&&s(e,"_isValid")&&(r._isValid=e._isValid),r}function Ut(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Bt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Jt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(D(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),$t(this,Rt(n,r),e),this}}function $t(e,t,n,r){var i=t._milliseconds,o=Pt(t._days),s=Pt(t._months);e.isValid()&&(r=null==r||r,s&&Oe(e,Le(e,"Month")+s*n),o&&ke(e,"Date",Le(e,"Date")+o*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,o||s))}Rt.fn=Ot.prototype,Rt.invalid=function(){return Rt(NaN)};var Vt=Jt(1,"add"),qt=Jt(-1,"subtract");function Gt(e){return"string"==typeof e||e instanceof String}function Kt(e){return L(e)||c(e)||Gt(e)||d(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!d(t)&&Gt(e)})).length),t&&n}(e)||function(e){var t,n,r=o(e)&&!u(e),a=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],l=i.length;for(t=0;t<l;t+=1)n=i[t],a=a||s(e,n);return r&&a}(e)||null==e}function Qt(e){var t,n=o(e)&&!u(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||s(e,a[t]);return n&&r}function Zt(e,t){if(e.date()<t.date())return-Zt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ut(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}function nn(e,t){return(e%t+t)%t}function rn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-126227808e5:new Date(e,t,n).valueOf()}function an(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-126227808e5:Date.UTC(e,t,n)}function on(e,t){return t.erasAbbrRegex(e)}function sn(){var e,t,n,r,a,i=[],o=[],s=[],u=[],l=this.eras();for(e=0,t=l.length;e<t;++e)n=de(l[e].name),r=de(l[e].abbr),a=de(l[e].narrow),o.push(n),i.push(r),s.push(a),u.push(n),u.push(r),u.push(a);this._erasRegex=new RegExp("^("+u.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+o.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+s.join("|")+")","i")}function un(e,t){C(0,[e,e.length],0,t)}function ln(e,t,n,r,a){var i;return null==e?Fe(this,r,a).year:(t>(i=We(e,r,a))&&(t=i),dn.call(this,e,t,n,r,a))}function dn(e,t,n,r,a){var i=Ne(e,t,n,r,a),o=Ae(i.year,0,i.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}C("N",0,0,"eraAbbr"),C("NN",0,0,"eraAbbr"),C("NNN",0,0,"eraAbbr"),C("NNNN",0,0,"eraName"),C("NNNNN",0,0,"eraNarrow"),C("y",["y",1],"yo","eraYear"),C("y",["yy",2],0,"eraYear"),C("y",["yyy",3],0,"eraYear"),C("y",["yyyy",4],0,"eraYear"),ue("N",on),ue("NN",on),ue("NNN",on),ue("NNNN",(function(e,t){return t.erasNameRegex(e)})),ue("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),_e(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?p(n).era=a:p(n).invalidEra=e})),ue("y",te),ue("yy",te),ue("yyy",te),ue("yyyy",te),ue("yo",(function(e,t){return t._eraYearOrdinalRegex||te})),_e(["y","yy","yyy","yyyy"],0),_e(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,a):t[0]=parseInt(e,10)})),C(0,["gg",2],0,(function(){return this.weekYear()%100})),C(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),un("gggg","weekYear"),un("ggggg","weekYear"),un("GGGG","isoWeekYear"),un("GGGGG","isoWeekYear"),ue("G",ne),ue("g",ne),ue("GG",G,J),ue("gg",G,J),ue("GGGG",X,V),ue("gggg",X,V),ue("GGGGG",ee,q),ue("ggggg",ee,q),pe(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=fe(e)})),pe(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),C("Q",0,"Qo","quarter"),ue("Q",B),_e("Q",(function(e,t){t[1]=3*(fe(e)-1)})),C("D",["DD",2],"Do","date"),ue("D",G,oe),ue("DD",G,J),ue("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),_e(["D","DD"],2),_e("Do",(function(e,t){t[2]=fe(e.match(G)[0])}));var cn=be("Date",!0);C("DDD",["DDDD",3],"DDDo","dayOfYear"),ue("DDD",Z),ue("DDDD",$),_e(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=fe(e)})),C("m",["mm",2],0,"minute"),ue("m",G,se),ue("mm",G,J),_e(["m","mm"],4);var fn=be("Minutes",!1);C("s",["ss",2],0,"second"),ue("s",G,se),ue("ss",G,J),_e(["s","ss"],5);var mn,_n,pn=be("Seconds",!1);for(C("S",0,0,(function(){return~~(this.millisecond()/100)})),C(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),C(0,["SSS",3],0,"millisecond"),C(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),C(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),C(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),C(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),C(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),C(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),ue("S",Z,B),ue("SS",Z,J),ue("SSS",Z,$),mn="SSSS";mn.length<=9;mn+="S")ue(mn,te);function hn(e,t){t[6]=fe(1e3*("0."+e))}for(mn="S";mn.length<=9;mn+="S")_e(mn,hn);_n=be("Milliseconds",!1),C("z",0,0,"zoneAbbr"),C("zz",0,0,"zoneName");var yn=b.prototype;function gn(e){return e}yn.add=Vt,yn.calendar=function(e,t){1===arguments.length&&(arguments[0]?Kt(arguments[0])?(e=arguments[0],t=void 0):Qt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Tt(),r=Nt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",o=t&&(S(t[i])?t[i].call(this,n):t[i]);return this.format(o||this.localeData().calendar(i,this,Tt(n)))},yn.clone=function(){return new b(this)},yn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=Nt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=I(t)){case"year":i=Zt(this,r)/12;break;case"month":i=Zt(this,r);break;case"quarter":i=Zt(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:ce(i)},yn.endOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?an:rn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-nn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-nn(t,1e3)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},yn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=N(this,e);return this.localeData().postformat(t)},yn.from=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||Tt(e).isValid())?Rt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yn.fromNow=function(e){return this.from(Tt(),e)},yn.to=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||Tt(e).isValid())?Rt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yn.toNow=function(e){return this.to(Tt(),e)},yn.get=function(e){return S(this[e=I(e)])?this[e]():this},yn.invalidAt=function(){return p(this).overflow},yn.isAfter=function(e,t){var n=L(e)?e:Tt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},yn.isBefore=function(e,t){var n=L(e)?e:Tt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},yn.isBetween=function(e,t,n,r){var a=L(e)?e:Tt(e),i=L(t)?t:Tt(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&(("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n)))},yn.isSame=function(e,t){var n,r=L(e)?e:Tt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},yn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},yn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},yn.isValid=function(){return h(this)},yn.lang=en,yn.locale=Xt,yn.localeData=tn,yn.max=St,yn.min=Dt,yn.parsingFlags=function(){return m({},p(this))},yn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)s(e,t)&&n.push({unit:t,priority:U[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=z(e)),a=r.length;for(n=0;n<a;n++)this[r[n].unit](e[r[n].unit])}else if(S(this[e=I(e)]))return this[e](t);return this},yn.startOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?an:rn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=nn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=nn(t,6e4);break;case"second":t=this._d.valueOf(),t-=nn(t,1e3)}return this._d.setTime(t),a.updateOffset(this,!0),this},yn.subtract=qt,yn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},yn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},yn.toDate=function(){return new Date(this.valueOf())},yn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?N(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):S(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",N(n,"Z")):N(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},yn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(yn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),yn.toJSON=function(){return this.isValid()?this.toISOString():null},yn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},yn.unix=function(){return Math.floor(this.valueOf()/1e3)},yn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},yn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},yn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},yn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},yn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},yn.eraYear=function(){var e,t,n,r,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,r=this.clone().startOf("day").valueOf(),i[e].since<=r&&r<=i[e].until||i[e].until<=r&&r<=i[e].since)return(this.year()-a(i[e].since).year())*n+i[e].offset;return this.year()},yn.year=ve,yn.isLeapYear=function(){return ye(this.year())},yn.weekYear=function(e){return ln.call(this,e,this.week(),this.weekday()+this.localeData()._week.dow,this.localeData()._week.dow,this.localeData()._week.doy)},yn.isoWeekYear=function(e){return ln.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},yn.quarter=yn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},yn.month=Ee,yn.daysInMonth=function(){return we(this.year(),this.month())},yn.week=yn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},yn.isoWeek=yn.isoWeeks=function(e){var t=Fe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},yn.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},yn.weeksInWeekYear=function(){var e=this.localeData()._week;return We(this.weekYear(),e.dow,e.doy)},yn.isoWeeksInYear=function(){return We(this.year(),1,4)},yn.isoWeeksInISOWeekYear=function(){return We(this.isoWeekYear(),1,4)},yn.date=cn,yn.day=yn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=Le(this,"Day");return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},yn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},yn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},yn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},yn.hour=yn.hours=Xe,yn.minute=yn.minutes=fn,yn.second=yn.seconds=pn,yn.millisecond=yn.milliseconds=_n,yn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ct(ae,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Ft(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?$t(this,Rt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Ft(this)},yn.utc=function(e){return this.utcOffset(0,e)},yn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ft(this),"m")),this},yn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ct(re,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},yn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Tt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},yn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},yn.isLocal=function(){return!!this.isValid()&&!this._isUTC},yn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},yn.isUtc=Wt,yn.isUTC=Wt,yn.zoneAbbr=function(){return this._isUTC?"UTC":""},yn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},yn.dates=w("dates accessor is deprecated. Use date instead.",cn),yn.months=w("months accessor is deprecated. Use month instead",Ee),yn.years=w("years accessor is deprecated. Use year instead",ve),yn.zone=w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),yn.isDSTShifted=w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return v(t,this),(t=wt(t))._a?(e=t._isUTC?_(t._a):Tt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&fe(e[r])!==fe(t[r]))&&o++;return o+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var Mn=j.prototype;function vn(e,t,n,r){var a=ut(),i=_().set(r,t);return a[n](i,e)}function bn(e,t,n){if(d(e)&&(t=e,e=void 0),e=e||"",null!=t)return vn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=vn(e,r,n,"month");return a}function Ln(e,t,n,r){"boolean"==typeof e?(d(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,d(t)&&(n=t,t=void 0),t=t||"");var a,i=ut(),o=e?i._week.dow:0,s=[];if(null!=n)return vn(t,(n+o)%7,r,"day");for(a=0;a<7;a++)s[a]=vn(t,(a+o)%7,r,"day");return s}Mn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return S(r)?r.call(t,n):r},Mn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(E).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},Mn.invalidDate=function(){return this._invalidDate},Mn.ordinal=function(e){return this._ordinal.replace("%d",e)},Mn.preparse=gn,Mn.postformat=gn,Mn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return S(a)?a(e,t,n,r):a.replace(/%d/i,e)},Mn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)},Mn.set=function(e){var t,n;for(n in e)s(e,n)&&(S(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Mn.eras=function(e,t){var n,r,i,o=this._eras||ut("en")._eras;for(n=0,r=o.length;n<r;++n){switch(typeof o[n].since){case"string":i=a(o[n].since).startOf("day"),o[n].since=i.valueOf()}switch(typeof o[n].until){case"undefined":o[n].until=1/0;break;case"string":i=a(o[n].until).startOf("day").valueOf(),o[n].until=i.valueOf()}}return o},Mn.erasParse=function(e,t,n){var r,a,i,o,s,u=this.eras();for(e=e.toUpperCase(),r=0,a=u.length;r<a;++r)if(i=u[r].name.toUpperCase(),o=u[r].abbr.toUpperCase(),s=u[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(o===e)return u[r];break;case"NNNN":if(i===e)return u[r];break;case"NNNNN":if(s===e)return u[r]}else if([i,o,s].indexOf(e)>=0)return u[r]},Mn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},Mn.erasAbbrRegex=function(e){return s(this,"_erasAbbrRegex")||sn.call(this),e?this._erasAbbrRegex:this._erasRegex},Mn.erasNameRegex=function(e){return s(this,"_erasNameRegex")||sn.call(this),e?this._erasNameRegex:this._erasRegex},Mn.erasNarrowRegex=function(e){return s(this,"_erasNarrowRegex")||sn.call(this),e?this._erasNarrowRegex:this._erasRegex},Mn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||De).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},Mn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[De.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Mn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return je.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=_([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},Mn.monthsRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||Pe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(s(this,"_monthsRegex")||(this._monthsRegex=xe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Mn.monthsShortRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||Pe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(s(this,"_monthsShortRegex")||(this._monthsShortRegex=Se),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Mn.week=function(e){return Fe(e,this._week.dow,this._week.doy).week},Mn.firstDayOfYear=function(){return this._week.doy},Mn.firstDayOfWeek=function(){return this._week.dow},Mn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ie(n,this._week.dow):e?n[e.day()]:n},Mn.weekdaysMin=function(e){return!0===e?Ie(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Mn.weekdaysShort=function(e){return!0===e?Ie(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Mn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return Ve.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=_([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},Mn.weekdaysRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(s(this,"_weekdaysRegex")||(this._weekdaysRegex=Be),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Mn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(s(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Mn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(s(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=$e),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Mn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Mn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ot("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===fe(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=w("moment.lang is deprecated. Use moment.locale instead.",ot),a.langData=w("moment.langData is deprecated. Use moment.localeData instead.",ut);var kn=Math.abs;function wn(e,t,n,r){var a=Rt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Yn(e){return e<0?Math.floor(e):Math.ceil(e)}function Tn(e){return 4800*e/146097}function Dn(e){return 146097*e/4800}function Sn(e){return function(){return this.as(e)}}var xn=Sn("ms"),jn=Sn("s"),On=Sn("m"),En=Sn("h"),Pn=Sn("d"),Hn=Sn("w"),An=Sn("M"),Cn=Sn("Q"),Nn=Sn("y"),Fn=xn;function Wn(e){return function(){return this.isValid()?this._data[e]:NaN}}var In=Wn("milliseconds"),zn=Wn("seconds"),Rn=Wn("minutes"),Un=Wn("hours"),Bn=Wn("days"),Jn=Wn("months"),$n=Wn("years"),Vn=Math.round,qn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Gn(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Kn=Math.abs;function Qn(e){return(e>0)-(e<0)||+e}function Zn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,i,o,s,u=Kn(this._milliseconds)/1e3,l=Kn(this._days),d=Kn(this._months),c=this.asSeconds();return c?(e=ce(u/60),t=ce(e/60),u%=60,e%=60,n=ce(d/12),d%=12,r=u?u.toFixed(3).replace(/\.?0+$/,""):"",a=c<0?"-":"",i=Qn(this._months)!==Qn(c)?"-":"",o=Qn(this._days)!==Qn(c)?"-":"",s=Qn(this._milliseconds)!==Qn(c)?"-":"",a+"P"+(n?i+n+"Y":"")+(d?i+d+"M":"")+(l?o+l+"D":"")+(t||e||u?"T":"")+(t?s+t+"H":"")+(e?s+e+"M":"")+(u?s+r+"S":"")):"P0D"}var Xn=Ot.prototype;return Xn.isValid=function(){return this._isValid},Xn.abs=function(){var e=this._data;return this._milliseconds=kn(this._milliseconds),this._days=kn(this._days),this._months=kn(this._months),e.milliseconds=kn(e.milliseconds),e.seconds=kn(e.seconds),e.minutes=kn(e.minutes),e.hours=kn(e.hours),e.months=kn(e.months),e.years=kn(e.years),this},Xn.add=function(e,t){return wn(this,e,t,1)},Xn.subtract=function(e,t){return wn(this,e,t,-1)},Xn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=I(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Tn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Dn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Xn.asMilliseconds=xn,Xn.asSeconds=jn,Xn.asMinutes=On,Xn.asHours=En,Xn.asDays=Pn,Xn.asWeeks=Hn,Xn.asMonths=An,Xn.asQuarters=Cn,Xn.asYears=Nn,Xn.valueOf=Fn,Xn._bubble=function(){var e,t,n,r,a,i=this._milliseconds,o=this._days,s=this._months,u=this._data;return i>=0&&o>=0&&s>=0||i<=0&&o<=0&&s<=0||(i+=864e5*Yn(Dn(s)+o),o=0,s=0),u.milliseconds=i%1e3,e=ce(i/1e3),u.seconds=e%60,t=ce(e/60),u.minutes=t%60,n=ce(t/60),u.hours=n%24,o+=ce(n/24),a=ce(Tn(o)),s+=a,o-=Yn(Dn(a)),r=ce(s/12),s%=12,u.days=o,u.months=s,u.years=r,this},Xn.clone=function(){return Rt(this)},Xn.get=function(e){return e=I(e),this.isValid()?this[e+"s"]():NaN},Xn.milliseconds=In,Xn.seconds=zn,Xn.minutes=Rn,Xn.hours=Un,Xn.days=Bn,Xn.weeks=function(){return ce(this.days()/7)},Xn.months=Jn,Xn.years=$n,Xn.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,i=qn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(i=Object.assign({},qn,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),n=this.localeData(),r=function(e,t,n,r){var a=Rt(e).abs(),i=Vn(a.as("s")),o=Vn(a.as("m")),s=Vn(a.as("h")),u=Vn(a.as("d")),l=Vn(a.as("M")),d=Vn(a.as("w")),c=Vn(a.as("y")),f=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||o<=1&&["m"]||o<n.m&&["mm",o]||s<=1&&["h"]||s<n.h&&["hh",s]||u<=1&&["d"]||u<n.d&&["dd",u];return null!=n.w&&(f=f||d<=1&&["w"]||d<n.w&&["ww",d]),(f=f||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,f[3]=+e>0,f[4]=r,Gn.apply(null,f)}(this,!a,i,n),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},Xn.toISOString=Zn,Xn.toString=Zn,Xn.toJSON=Zn,Xn.locale=Xt,Xn.localeData=tn,Xn.toIsoString=w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Zn),Xn.lang=en,C("X",0,0,"unix"),C("x",0,0,"valueOf"),ue("x",ne),ue("X",/[+-]?\d+(\.\d{1,3})?/),_e("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),_e("x",(function(e,t,n){n._d=new Date(fe(e))})),
//! moment.js
a.version="2.30.1",t=Tt,a.fn=yn,a.min=function(){var e=[].slice.call(arguments,0);return xt("isBefore",e)},a.max=function(){var e=[].slice.call(arguments,0);return xt("isAfter",e)},a.now=function(){return Date.now?Date.now():+new Date},a.utc=_,a.unix=function(e){return Tt(1e3*e)},a.months=function(e,t){return bn(e,t,"months")},a.isDate=c,a.locale=ot,a.invalid=y,a.duration=Rt,a.isMoment=L,a.weekdays=function(e,t,n){return Ln(e,t,n,"weekdays")},a.parseZone=function(){return Tt.apply(null,arguments).parseZone()},a.localeData=ut,a.isDuration=Et,a.monthsShort=function(e,t){return bn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return Ln(e,t,n,"weekdaysMin")},a.defineLocale=st,a.updateLocale=function(e,t){if(null!=t){var n,r,a=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(x(tt[e]._config,t)):(null!=(r=it(e))&&(a=r._config),t=x(a,t),null==r&&(t.abbr=e),(n=new j(t)).parentLocale=tt[e],tt[e]=n),ot(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===ot()&&ot(e)):null!=tt[e]&&delete tt[e]);return tt[e]},a.locales=function(){return Y(tt)},a.weekdaysShort=function(e,t,n){return Ln(e,t,n,"weekdaysShort")},a.normalizeUnits=I,a.relativeTimeRounding=function(e){return void 0===e?Vn:"function"==typeof e&&(Vn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==qn[e]&&(void 0===t?qn[e]:(qn[e]=t,"s"===e&&(qn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=yn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(274)(e))},function(e,t,n){"use strict";e.exports=n(219)},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return j})),n.d(t,"b",(function(){return O})),n.d(t,"c",(function(){return P})),n.d(t,"d",(function(){return A})),n.d(t,"e",(function(){return C}));var r=n(4),a=n.n(r),i=n(212),o=n.n(i),s=n(33),u=n.n(s),l=n(211),d=n.n(l);n(14);function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _(){_=function(e,t){return new n(e,void 0,t)};var e=RegExp.prototype,t=new WeakMap;function n(e,r,a){var i=new RegExp(e,r);return t.set(i,a||t.get(e)),y(i,n.prototype)}function r(e,n){var r=t.get(n);return Object.keys(r).reduce((function(t,n){return t[n]=e[r[n]],t}),Object.create(null))}return h(n,RegExp),n.prototype.exec=function(t){var n=e.exec.call(this,t);return n&&(n.groups=r(n,this)),n},n.prototype[Symbol.replace]=function(n,a){if("string"==typeof a){var i=t.get(this);return e[Symbol.replace].call(this,n,a.replace(/\$<([^>]+)>/g,(function(e,t){return"$"+i[t]})))}if("function"==typeof a){var o=this;return e[Symbol.replace].call(this,n,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(r(e,o)),a.apply(this,e)}))}return e[Symbol.replace].call(this,n,a)},_.apply(this,arguments)}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&y(e,t)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,a,i=[],o=!0,s=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==n.return||n.return()}finally{if(s)throw a}}return i}(e,t)||M(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function M(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function b(){return void 0!==e&&!e.browser}function L(){return e.versions&&e.versions.node?"v".concat(e.versions.node):e.version}function k(){}var w=_(/([0-9]+)(%)/,{value:1});function Y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:7,n=t;if(w.test(e)){var r,a=null===(r=e.match(w))||void 0===r?void 0:r.groups;if(a&&a.value){var i=parseInt(a.value)/100;n=Math.round(t*i)}}return Math.min(30,Math.max(1,n))}function T(e,t){return t("info","Throttle request to ".concat(e,"/s")),d()({limit:e,interval:1e3,strict:!1})}var D=function(e){return new Promise((function(t){setTimeout(t,e)}))},S=function(e){return Math.pow(Math.SQRT2,e)};var x=/^(?!\w+:\/\/)([^\s:]+\.?[^\s:]+)(?::(\d+))?(?!:)$/;function j(e,t){var n=f(f({},{insecure:!1,retryOnError:!0,logHandler:function(e,t){if("error"===e&&t){var n=[t.name,t.message].filter((function(e){return e})).join(" - ");return console.error("[error] ".concat(n)),void console.error(t)}console.log("[".concat(e,"] ").concat(t))},headers:{},httpAgent:!1,httpsAgent:!1,timeout:3e4,throttle:0,proxy:!1,basePath:"",adapter:void 0,maxContentLength:1073741824,maxBodyLength:1073741824}),t);if(!n.accessToken){var r=new TypeError("Expected parameter accessToken");throw n.logHandler("error",r),r}var i=n.insecure?"http":"https",s=n.space?"".concat(n.space,"/"):"",l=n.defaultHostname,d=n.insecure?80:443;if(n.host&&x.test(n.host)){var c=n.host.split(":");if(2===c.length){var m=g(c,2);l=m[0],d=m[1]}else l=c[0]}n.basePath&&(n.basePath="/".concat(n.basePath.split("/").filter(Boolean).join("/")));var _=t.baseURL||"".concat(i,"://").concat(l,":").concat(d).concat(n.basePath,"/spaces/").concat(s);n.headers.Authorization||"function"==typeof n.accessToken||(n.headers.Authorization="Bearer "+n.accessToken),b()&&(n.headers["user-agent"]="node.js/"+L(),n.headers["Accept-Encoding"]="gzip");var p={baseURL:_,headers:n.headers,httpAgent:n.httpAgent,httpsAgent:n.httpsAgent,paramsSerializer:o.a.stringify,proxy:n.proxy,timeout:n.timeout,adapter:n.adapter,maxContentLength:n.maxContentLength,maxBodyLength:n.maxBodyLength,logHandler:n.logHandler,responseLogger:n.responseLogger,requestLogger:n.requestLogger,retryOnError:n.retryOnError},h=e.create(p);return h.httpClientParams=t,h.cloneWithNewParams=function(n){return j(e,f(f({},a()(t)),n))},n.onBeforeRequest&&h.interceptors.request.use(n.onBeforeRequest),"function"==typeof n.accessToken&&function(e,t){e.interceptors.request.use((function(e){return t().then((function(t){return e.headers=f(f({},e.headers),{},{Authorization:"Bearer ".concat(t)}),e}))}))}(h,n.accessToken),n.throttle&&function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"auto",n=e.defaults.logHandler,r=void 0===n?k:n,a=u()(t)?Y(t):Y("auto",t),i=T(a,r),o=!1,s=e.interceptors.request.use((function(e){return i((function(){return e}))()}),(function(e){return Promise.reject(e)})),l=e.interceptors.response.use((function(n){if(!o&&u()(t)&&("auto"===t||w.test(t))&&n.headers&&n.headers["x-contentful-ratelimit-second-limit"]){var l=parseInt(n.headers["x-contentful-ratelimit-second-limit"]),d=Y(t,l);d!==a&&(s&&e.interceptors.request.eject(s),a=d,i=T(d,r),s=e.interceptors.request.use((function(e){return i((function(){return e}))()}),(function(e){return Promise.reject(e)}))),o=!0}return n}),(function(e){return Promise.reject(e)}))}(h,n.throttle),function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,n=e.defaults,r=n.responseLogger,a=void 0===r?k:r,i=n.requestLogger,o=void 0===i?k:i;e.interceptors.request.use((function(e){return o(e),e}),(function(e){return o(e),Promise.reject(e)})),e.interceptors.response.use((function(e){return a(e),e}),(function(n){var r=n.response,i=n.config;if(a(n),!i||!e.defaults.retryOnError)return Promise.reject(n);var o=i.attempts||1;if(o>t)return n.attempts=i.attempts,Promise.reject(n);var s=null,u=S(o);return r?r.status>=500&&r.status<600?s="Server ".concat(r.status):429===r.status&&(s="Rate limit",r.headers&&n.response.headers["x-contentful-ratelimit-reset"]&&(u=r.headers["x-contentful-ratelimit-reset"])):s="Connection",s?(u=Math.floor(1e3*u+200*Math.random()+500),e.defaults.logHandler("warning","".concat(s," error occurred. Waiting for ").concat(u," ms before retrying...")),i.attempts=o+1,delete i.httpAgent,delete i.httpsAgent,D(u).then((function(){return e(i)}))):Promise.reject(n)}))}(h,n.retryLimit),n.onError&&h.interceptors.response.use((function(e){return e}),n.onError),h}function O(e){var t=e.query,n={};return delete t.resolveLinks,n.params=a()(t),n}function E(e){var t,n=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=M(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,o=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==n.return||n.return()}finally{if(s)throw i}}}}(Object.getOwnPropertyNames(e));try{for(n.s();!(t=n.n()).done;){var r=e[t.value];r&&"object"===m(r)&&E(r)}}catch(e){n.e(e)}finally{n.f()}return Object.freeze(e)}function P(e){return E(e.sys||{}),e}function H(){var e=window;if(!e)return null;var t=e.navigator.userAgent,n=e.navigator.platform;return-1!==["Macintosh","MacIntel","MacPPC","Mac68K"].indexOf(n)?"macOS":-1!==["iPhone","iPad","iPod"].indexOf(n)?"iOS":-1!==["Win32","Win64","Windows","WinCE"].indexOf(n)?"Windows":/Android/.test(t)?"Android":/Linux/.test(n)?"Linux":null}function A(t,n,r,a){var i=[];n&&i.push("app ".concat(n)),r&&i.push("integration ".concat(r)),a&&i.push("feature "+a),i.push("sdk ".concat(t));var o=null;try{"undefined"!=typeof window&&"navigator"in window&&"product"in window.navigator&&"ReactNative"===window.navigator.product?(o=H(),i.push("platform ReactNative")):b()?(o=function(){var t=e.platform||"linux",n=e.version||"0.0.0",r={android:"Android",aix:"Linux",darwin:"macOS",freebsd:"Linux",linux:"Linux",openbsd:"Linux",sunos:"Linux",win32:"Windows"};return t in r?"".concat(r[t]||"Linux","/").concat(n):null}(),i.push("platform node.js/".concat(L()))):(o=H(),i.push("platform browser"))}catch(e){o=null}return o&&i.push("os ".concat(o)),"".concat(i.filter((function(e){return""!==e})).join("; "),";")}function C(e){return Object.defineProperty(e,"toPlainObject",{enumerable:!1,configurable:!1,writable:!1,value:function(){return a()(this)}})}}).call(this,n(13))},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return et}));var r=n(31),a=n.n(r),i=n(208),o=n.n(i),s=n(1),u=n.n(s),l=n(209),d=n(20),c=n(32),f=n(217),m=n(218),_=function(e,t){for(var n=[e[0]],r=0,a=t.length;r<a;r+=1)n.push(t[r],e[r+1]);return n},p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},v=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},b=function(e){return"object"===(void 0===e?"undefined":p(e))&&e.constructor===Object},L=Object.freeze([]),k=Object.freeze({});function w(e){return"function"==typeof e}function Y(e){return e.displayName||e.name||"Component"}function T(e){return e&&"string"==typeof e.styledComponentId}var D=void 0!==e&&(e.env.REACT_APP_SC_ATTR||e.env.SC_ATTR)||"data-styled",S="undefined"!=typeof window&&"HTMLElement"in window,x="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||void 0!==e&&(e.env.REACT_APP_SC_DISABLE_SPEEDY||e.env.SC_DISABLE_SPEEDY)||!1,j={};var O=function(e){function t(n){h(this,t);for(var r=arguments.length,a=Array(r>1?r-1:0),i=1;i<r;i++)a[i-1]=arguments[i];var o=v(this,e.call(this,"An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#"+n+" for more information."+(a.length>0?" Additional arguments: "+a.join(", "):"")));return v(o)}return M(t,e),t}(Error),E=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,P=function(e){var t=""+(e||""),n=[];return t.replace(E,(function(e,t,r){return n.push({componentId:t,matchIndex:r}),e})),n.map((function(e,r){var a=e.componentId,i=e.matchIndex,o=n[r+1];return{componentId:a,cssFromDOM:o?t.slice(i,o.matchIndex):t.slice(i)}}))},H=/^\s*\/\/.*$/gm,A=new a.a({global:!1,cascade:!0,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),C=new a.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),N=[],F=function(e){if(-2===e){var t=N;return N=[],t}},W=o()((function(e){N.push(e)})),I=void 0,z=void 0,R=void 0,U=function(e,t,n){return t>0&&-1!==n.slice(0,t).indexOf(z)&&n.slice(t-z.length,t)!==z?"."+I:e};C.use([function(e,t,n){2===e&&n.length&&n[0].lastIndexOf(z)>0&&(n[0]=n[0].replace(R,U))},W,F]),A.use([W,F]);var B=function(e){return A("",e)};function J(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"&",a=e.join("").replace(H,""),i=t&&n?n+" "+t+" { "+a+" }":a;return I=r,z=t,R=new RegExp("\\"+z+"\\b","g"),C(n||!t?"":t,i)}var $=function(){return n.nc},V=function(e,t,n){n&&((e[t]||(e[t]=Object.create(null)))[n]=!0)},q=function(e,t){e[t]=Object.create(null)},G=function(e){return function(t,n){return void 0!==e[t]&&e[t][n]}},K=function(e){var t="";for(var n in e)t+=Object.keys(e[n]).join(" ")+" ";return t.trim()},Q=function(e){if(e.sheet)return e.sheet;for(var t=e.ownerDocument.styleSheets.length,n=0;n<t;n+=1){var r=e.ownerDocument.styleSheets[n];if(r.ownerNode===e)return r}throw new O(10)},Z=function(e,t,n){if(!t)return!1;var r=e.cssRules.length;try{e.insertRule(t,n<=r?n:r)}catch(e){return!1}return!0},X=function(e){return"\n/* sc-component-id: "+e+" */\n"},ee=function(e,t){for(var n=0,r=0;r<=t;r+=1)n+=e[r];return n},te=function(e,t){return function(n){var r=$();return"<style "+[r&&'nonce="'+r+'"',D+'="'+K(t)+'"','data-styled-version="4.4.1"',n].filter(Boolean).join(" ")+">"+e()+"</style>"}},ne=function(e,t){return function(){var n,r=((n={})[D]=K(t),n["data-styled-version"]="4.4.1",n),a=$();return a&&(r.nonce=a),u.a.createElement("style",g({},r,{dangerouslySetInnerHTML:{__html:e()}}))}},re=function(e){return function(){return Object.keys(e)}},ae=function(e,t){return e.createTextNode(X(t))},ie=function e(t,n){var r=void 0===t?Object.create(null):t,a=void 0===n?Object.create(null):n,i=function(e){var t=a[e];return void 0!==t?t:a[e]=[""]},o=function(){var e="";for(var t in a){var n=a[t][0];n&&(e+=X(t)+n)}return e};return{clone:function(){var t=function(e){var t=Object.create(null);for(var n in e)t[n]=g({},e[n]);return t}(r),n=Object.create(null);for(var i in a)n[i]=[a[i][0]];return e(t,n)},css:o,getIds:re(a),hasNameForId:G(r),insertMarker:i,insertRules:function(e,t,n){i(e)[0]+=t.join(" "),V(r,e,n)},removeRules:function(e){var t=a[e];void 0!==t&&(t[0]="",q(r,e))},sealed:!1,styleTag:null,toElement:ne(o,r),toHTML:te(o,r)}},oe=function(e,t,n,r,a){if(S&&!n){var i=function(e,t,n){var r=document;e?r=e.ownerDocument:t&&(r=t.ownerDocument);var a=r.createElement("style");a.setAttribute(D,""),a.setAttribute("data-styled-version","4.4.1");var i=$();if(i&&a.setAttribute("nonce",i),a.appendChild(r.createTextNode("")),e&&!t)e.appendChild(a);else{if(!t||!e||!t.parentNode)throw new O(6);t.parentNode.insertBefore(a,n?t:t.nextSibling)}return a}(e,t,r);return x?function(e,t){var n=Object.create(null),r=Object.create(null),a=void 0!==t,i=!1,o=function(t){var a=r[t];return void 0!==a?a:(r[t]=ae(e.ownerDocument,t),e.appendChild(r[t]),n[t]=Object.create(null),r[t])},s=function(){var e="";for(var t in r)e+=r[t].data;return e};return{clone:function(){throw new O(5)},css:s,getIds:re(r),hasNameForId:G(n),insertMarker:o,insertRules:function(e,r,s){for(var u=o(e),l=[],d=r.length,c=0;c<d;c+=1){var f=r[c],m=a;if(m&&-1!==f.indexOf("@import"))l.push(f);else{m=!1;var _=c===d-1?"":" ";u.appendData(""+f+_)}}V(n,e,s),a&&l.length>0&&(i=!0,t().insertRules(e+"-import",l))},removeRules:function(o){var s=r[o];if(void 0!==s){var u=ae(e.ownerDocument,o);e.replaceChild(u,s),r[o]=u,q(n,o),a&&i&&t().removeRules(o+"-import")}},sealed:!1,styleTag:e,toElement:ne(s,n),toHTML:te(s,n)}}(i,a):function(e,t){var n=Object.create(null),r=Object.create(null),a=[],i=void 0!==t,o=!1,s=function(e){var t=r[e];return void 0!==t?t:(r[e]=a.length,a.push(0),q(n,e),r[e])},u=function(){var t=Q(e).cssRules,n="";for(var i in r){n+=X(i);for(var o=r[i],s=ee(a,o),u=s-a[o];u<s;u+=1){var l=t[u];void 0!==l&&(n+=l.cssText)}}return n};return{clone:function(){throw new O(5)},css:u,getIds:re(r),hasNameForId:G(n),insertMarker:s,insertRules:function(r,u,l){for(var d=s(r),c=Q(e),f=ee(a,d),m=0,_=[],p=u.length,h=0;h<p;h+=1){var y=u[h],g=i;g&&-1!==y.indexOf("@import")?_.push(y):Z(c,y,f+m)&&(g=!1,m+=1)}i&&_.length>0&&(o=!0,t().insertRules(r+"-import",_)),a[d]+=m,V(n,r,l)},removeRules:function(s){var u=r[s];if(void 0!==u&&!1!==e.isConnected){var l=a[u];!function(e,t,n){for(var r=t-n,a=t;a>r;a-=1)e.deleteRule(a)}(Q(e),ee(a,u)-1,l),a[u]=0,q(n,s),i&&o&&t().removeRules(s+"-import")}},sealed:!1,styleTag:e,toElement:ne(u,n),toHTML:te(u,n)}}(i,a)}return ie()},se=/\s+/,ue=void 0;ue=S?x?40:1e3:-1;var le=0,de=void 0,ce=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:S?document.head:null,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];h(this,e),this.getImportRuleTag=function(){var e=t.importRuleTag;if(void 0!==e)return e;var n=t.tags[0];return t.importRuleTag=oe(t.target,n?n.styleTag:null,t.forceServer,!0)},le+=1,this.id=le,this.forceServer=r,this.target=r?null:n,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!S||this.forceServer)return this;var e=[],t=[],n=!1,r=document.querySelectorAll("style["+D+'][data-styled-version="4.4.1"]'),a=r.length;if(!a)return this;for(var i=0;i<a;i+=1){var o=r[i];n||(n=!!o.getAttribute("data-styled-streamed"));for(var s,u=(o.getAttribute(D)||"").trim().split(se),l=u.length,d=0;d<l;d+=1)s=u[d],this.rehydratedNames[s]=!0;t.push.apply(t,P(o.textContent)),e.push(o)}var c=t.length;if(!c)return this;var f=this.makeTag(null);!function(e,t,n){for(var r=0,a=n.length;r<a;r+=1){var i=n[r],o=i.componentId,s=i.cssFromDOM,u=B(s);e.insertRules(o,u)}for(var l=0,d=t.length;l<d;l+=1){var c=t[l];c.parentNode&&c.parentNode.removeChild(c)}}(f,e,t),this.capacity=Math.max(1,ue-c),this.tags.push(f);for(var m=0;m<c;m+=1)this.tagMap[t[m].componentId]=f;return this},e.reset=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];de=new e(void 0,t).rehydrate()},e.prototype.clone=function(){var t=new e(this.target,this.forceServer);return this.clones.push(t),t.tags=this.tags.map((function(e){for(var n=e.getIds(),r=e.clone(),a=0;a<n.length;a+=1)t.tagMap[n[a]]=r;return r})),t.rehydratedNames=g({},this.rehydratedNames),t.deferred=g({},this.deferred),t},e.prototype.sealAllTags=function(){this.capacity=1,this.tags.forEach((function(e){e.sealed=!0}))},e.prototype.makeTag=function(e){var t=e?e.styleTag:null;return oe(this.target,t,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var t=this.tagMap[e];if(void 0!==t&&!t.sealed)return t;var n=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=ue,n=this.makeTag(n),this.tags.push(n)),this.tagMap[e]=n},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,t){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[t])return!0;var n=this.tagMap[e];return void 0!==n&&n.hasNameForId(e,t)},e.prototype.deferredInject=function(e,t){if(void 0===this.tagMap[e]){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].deferredInject(e,t);this.getTagForId(e).insertMarker(e),this.deferred[e]=t}},e.prototype.inject=function(e,t,n){for(var r=this.clones,a=0;a<r.length;a+=1)r[a].inject(e,t,n);var i=this.getTagForId(e);if(void 0!==this.deferred[e]){var o=this.deferred[e].concat(t);i.insertRules(e,o,n),this.deferred[e]=void 0}else i.insertRules(e,t,n)},e.prototype.remove=function(e){var t=this.tagMap[e];if(void 0!==t){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].remove(e);t.removeRules(e),this.ignoreRehydratedNames[e]=!0,this.deferred[e]=void 0}},e.prototype.toHTML=function(){return this.tags.map((function(e){return e.toHTML()})).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map((function(t,n){var r="sc-"+e+"-"+n;return Object(s.cloneElement)(t.toElement(),{key:r})}))},y(e,null,[{key:"master",get:function(){return de||(de=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),fe=function(){function e(t,n){var r=this;h(this,e),this.inject=function(e){e.hasNameForId(r.id,r.name)||e.inject(r.id,r.rules,r.name)},this.toString=function(){throw new O(12,String(r.name))},this.name=t,this.rules=n,this.id="sc-keyframes-"+t}return e.prototype.getName=function(){return this.name},e}(),me=/([A-Z])/g,_e=/^ms-/;function pe(e){return e.replace(me,"-$1").toLowerCase().replace(_e,"-ms-")}var he=function(e){return null==e||!1===e||""===e},ye=function e(t,n){var r=[];return Object.keys(t).forEach((function(n){if(!he(t[n])){if(b(t[n]))return r.push.apply(r,e(t[n],n)),r;if(w(t[n]))return r.push(pe(n)+":",t[n],";"),r;r.push(pe(n)+": "+(a=n,(null==(i=t[n])||"boolean"==typeof i||""===i?"":"number"!=typeof i||0===i||a in l.a?String(i).trim():i+"px")+";"))}var a,i;return r})),n?[n+" {"].concat(r,["}"]):r};function ge(e,t,n){if(Array.isArray(e)){for(var r,a=[],i=0,o=e.length;i<o;i+=1)null!==(r=ge(e[i],t,n))&&(Array.isArray(r)?a.push.apply(a,r):a.push(r));return a}return he(e)?null:T(e)?"."+e.styledComponentId:w(e)?"function"!=typeof(s=e)||s.prototype&&s.prototype.isReactComponent||!t?e:ge(e(t),t,n):e instanceof fe?n?(e.inject(n),e.getName()):e:b(e)?ye(e):e.toString();var s}function Me(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return w(e)||b(e)?ge(_(L,[e].concat(n))):ge(_(e,n))}function ve(e){for(var t,n=0|e.length,r=0|n,a=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(a)|(255&e.charCodeAt(++a))<<8|(255&e.charCodeAt(++a))<<16|(255&e.charCodeAt(++a))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++a;switch(n){case 3:r^=(255&e.charCodeAt(a+2))<<16;case 2:r^=(255&e.charCodeAt(a+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(a)))+((1540483477*(r>>>16)&65535)<<16)}return((r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16))^r>>>15)>>>0}var be=function(e){return String.fromCharCode(e+(e>25?39:97))};function Le(e){var t="",n=void 0;for(n=e;n>52;n=Math.floor(n/52))t=be(n%52)+t;return be(n%52)+t}function ke(e,t){for(var n=0;n<e.length;n+=1){var r=e[n];if(Array.isArray(r)&&!ke(r,t))return!1;if(w(r)&&!T(r))return!1}return!t.some((function(e){return w(e)||function(e){for(var t in e)if(w(e[t]))return!0;return!1}(e)}))}var we,Ye=function(e){return Le(ve(e))},Te=function(){function e(t,n,r){h(this,e),this.rules=t,this.isStatic=ke(t,n),this.componentId=r,ce.master.hasId(r)||ce.master.deferredInject(r,[])}return e.prototype.generateAndInjectStyles=function(e,t){var n=this.isStatic,r=this.componentId,a=this.lastClassName;if(S&&n&&"string"==typeof a&&t.hasNameForId(r,a))return a;var i=ge(this.rules,e,t),o=Ye(this.componentId+i.join(""));return t.hasNameForId(r,o)||t.inject(this.componentId,J(i,"."+o,void 0,r),o),this.lastClassName=o,o},e.generateName=function(e){return Ye(e)},e}(),De=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k,r=!!n&&e.theme===n.theme,a=e.theme&&!r?e.theme:t||n.theme;return a},Se=/[[\].#*$><+~=|^:(),"'`-]+/g,xe=/(^-|-$)/g;function je(e){return e.replace(Se,"-").replace(xe,"")}function Oe(e){return"string"==typeof e&&!0}var Ee={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDerivedStateFromProps:!0,propTypes:!0,type:!0},Pe={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},He=((we={})[d.ForwardRef]={$$typeof:!0,render:!0},we),Ae=Object.defineProperty,Ce=Object.getOwnPropertyNames,Ne=Object.getOwnPropertySymbols,Fe=void 0===Ne?function(){return[]}:Ne,We=Object.getOwnPropertyDescriptor,Ie=Object.getPrototypeOf,ze=Object.prototype,Re=Array.prototype;function Ue(e,t,n){if("string"!=typeof t){var r=Ie(t);r&&r!==ze&&Ue(e,r,n);for(var a=Re.concat(Ce(t),Fe(t)),i=He[e.$$typeof]||Ee,o=He[t.$$typeof]||Ee,s=a.length,u=void 0,l=void 0;s--;)if(l=a[s],!(Pe[l]||n&&n[l]||o&&o[l]||i&&i[l])&&(u=We(t,l)))try{Ae(e,l,u)}catch(e){}return e}return e}var Be=Object(s.createContext)(),Je=Be.Consumer,$e=(function(e){function t(n){h(this,t);var r=v(this,e.call(this,n));return r.getContext=Object(c.a)(r.getContext.bind(r)),r.renderInner=r.renderInner.bind(r),r}M(t,e),t.prototype.render=function(){return this.props.children?u.a.createElement(Be.Consumer,null,this.renderInner):null},t.prototype.renderInner=function(e){var t=this.getContext(this.props.theme,e);return u.a.createElement(Be.Provider,{value:t},this.props.children)},t.prototype.getTheme=function(e,t){if(w(e))return e(t);if(null===e||Array.isArray(e)||"object"!==(void 0===e?"undefined":p(e)))throw new O(8);return g({},t,e)},t.prototype.getContext=function(e,t){return this.getTheme(e,t)}}(s.Component),function(){function e(){h(this,e),this.masterSheet=ce.master,this.instance=this.masterSheet.clone(),this.sealed=!1}e.prototype.seal=function(){if(!this.sealed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.sealed=!0}},e.prototype.collectStyles=function(e){if(this.sealed)throw new O(2);return u.a.createElement(qe,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.seal(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.seal(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new O(3)}}(),Object(s.createContext)()),Ve=$e.Consumer,qe=function(e){function t(n){h(this,t);var r=v(this,e.call(this,n));return r.getContext=Object(c.a)(r.getContext),r}return M(t,e),t.prototype.getContext=function(e,t){if(e)return e;if(t)return new ce(t);throw new O(4)},t.prototype.render=function(){var e=this.props,t=e.children,n=e.sheet,r=e.target;return u.a.createElement($e.Provider,{value:this.getContext(n,r)},t)},t}(s.Component),Ge={};var Ke=function(e){function t(){h(this,t);var n=v(this,e.call(this));return n.attrs={},n.renderOuter=n.renderOuter.bind(n),n.renderInner=n.renderInner.bind(n),n}return M(t,e),t.prototype.render=function(){return u.a.createElement(Ve,null,this.renderOuter)},t.prototype.renderOuter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ce.master;return this.styleSheet=e,this.props.forwardedComponent.componentStyle.isStatic?this.renderInner():u.a.createElement(Je,null,this.renderInner)},t.prototype.renderInner=function(e){var t=this.props.forwardedComponent,n=t.componentStyle,r=t.defaultProps,a=(t.displayName,t.foldedComponentIds),i=t.styledComponentId,o=t.target,u=void 0;u=n.isStatic?this.generateAndInjectStyles(k,this.props):this.generateAndInjectStyles(De(this.props,e,r)||k,this.props);var l=this.props.as||this.attrs.as||o,d=Oe(l),c={},m=g({},this.props,this.attrs),_=void 0;for(_ in m)"forwardedComponent"!==_&&"as"!==_&&("forwardedRef"===_?c.ref=m[_]:"forwardedAs"===_?c.as=m[_]:d&&!Object(f.a)(_)||(c[_]=m[_]));return this.props.style&&this.attrs.style&&(c.style=g({},this.attrs.style,this.props.style)),c.className=Array.prototype.concat(a,i,u!==i?u:null,this.props.className,this.attrs.className).filter(Boolean).join(" "),Object(s.createElement)(l,c)},t.prototype.buildExecutionContext=function(e,t,n){var r=this,a=g({},t,{theme:e});return n.length?(this.attrs={},n.forEach((function(e){var t,n=e,i=!1,o=void 0,s=void 0;for(s in w(n)&&(n=n(a),i=!0),n)o=n[s],i||!w(o)||(t=o)&&t.prototype&&t.prototype.isReactComponent||T(o)||(o=o(a)),r.attrs[s]=o,a[s]=o})),a):a},t.prototype.generateAndInjectStyles=function(e,t){var n=t.forwardedComponent,r=n.attrs,a=n.componentStyle;n.warnTooManyClasses;return a.isStatic&&!r.length?a.generateAndInjectStyles(k,this.styleSheet):a.generateAndInjectStyles(this.buildExecutionContext(e,t,r),this.styleSheet)},t}(s.Component);function Qe(e,t,n){var r=T(e),a=!Oe(e),i=t.displayName,o=void 0===i?function(e){return Oe(e)?"styled."+e:"Styled("+Y(e)+")"}(e):i,s=t.componentId,l=void 0===s?function(e,t,n){var r="string"!=typeof t?"sc":je(t),a=(Ge[r]||0)+1;Ge[r]=a;var i=r+"-"+e.generateName(r+a);return n?n+"-"+i:i}(Te,t.displayName,t.parentComponentId):s,d=t.ParentComponent,c=void 0===d?Ke:d,f=t.attrs,_=void 0===f?L:f,p=t.displayName&&t.componentId?je(t.displayName)+"-"+t.componentId:t.componentId||l,h=r&&e.attrs?Array.prototype.concat(e.attrs,_).filter(Boolean):_,y=new Te(r?e.componentStyle.rules.concat(n):n,h,p),M=void 0,v=function(e,t){return u.a.createElement(c,g({},e,{forwardedComponent:M,forwardedRef:t}))};return v.displayName=o,(M=u.a.forwardRef(v)).displayName=o,M.attrs=h,M.componentStyle=y,M.foldedComponentIds=r?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):L,M.styledComponentId=p,M.target=r?e.target:e,M.withComponent=function(e){var r=t.componentId,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["componentId"]),i=r&&r+"-"+(Oe(e)?e:je(Y(e)));return Qe(e,g({},a,{attrs:h,componentId:i,ParentComponent:c}),n)},Object.defineProperty(M,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=r?Object(m.a)(e.defaultProps,t):t}}),M.toString=function(){return"."+M.styledComponentId},a&&Ue(M,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,styledComponentId:!0,target:!0,withComponent:!0}),M}var Ze=function(e){return function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k;if(!Object(d.isValidElementType)(n))throw new O(1,String(n));var a=function(){return t(n,r,Me.apply(void 0,arguments))};return a.withConfig=function(a){return e(t,n,g({},r,a))},a.attrs=function(a){return e(t,n,g({},r,{attrs:Array.prototype.concat(r.attrs,a).filter(Boolean)}))},a}(Qe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Ze[e]=Ze(e)}));var Xe=function(){function e(t,n){h(this,e),this.rules=t,this.componentId=n,this.isStatic=ke(t,L),ce.master.hasId(n)||ce.master.deferredInject(n,[])}return e.prototype.createStyles=function(e,t){var n=J(ge(this.rules,e,t),"");t.inject(this.componentId,n)},e.prototype.removeStyles=function(e){var t=this.componentId;e.hasId(t)&&e.remove(t)},e.prototype.renderStyles=function(e,t){this.removeStyles(t),this.createStyles(e,t)},e}();function et(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var a=Me.apply(void 0,[e].concat(n)),i="sc-global-"+ve(JSON.stringify(a)),o=new Xe(a,i),s=function(e){function t(n){h(this,t);var r=v(this,e.call(this,n)),a=r.constructor,i=a.globalStyle,o=a.styledComponentId;return S&&(window.scCGSHMRCache[o]=(window.scCGSHMRCache[o]||0)+1),r.state={globalStyle:i,styledComponentId:o},r}return M(t,e),t.prototype.componentWillUnmount=function(){window.scCGSHMRCache[this.state.styledComponentId]&&(window.scCGSHMRCache[this.state.styledComponentId]-=1),0===window.scCGSHMRCache[this.state.styledComponentId]&&this.state.globalStyle.removeStyles(this.styleSheet)},t.prototype.render=function(){var e=this;return u.a.createElement(Ve,null,(function(t){e.styleSheet=t||ce.master;var n=e.state.globalStyle;return n.isStatic?(n.renderStyles(j,e.styleSheet),null):u.a.createElement(Je,null,(function(t){var r=e.constructor.defaultProps,a=g({},e.props);return void 0!==t&&(a.theme=De(e.props,t,r)),n.renderStyles(a,e.styleSheet),null}))}))},t}(u.a.Component);return s.globalStyle=o,s.styledComponentId=i,s}S&&(window.scCGSHMRCache={});t.b=Ze}).call(this,n(13))},function(e,t,n){(function(t){var n;n=function(){"use strict";var e=Function.prototype.toString,n=Object.create,r=Object.defineProperty,a=Object.getOwnPropertyDescriptor,i=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,s=Object.getPrototypeOf,u=Object.prototype,l=u.hasOwnProperty,d=u.propertyIsEnumerable,c="function"==typeof o,f="function"==typeof WeakMap,m=function(){if(f)return function(){return new WeakMap};var e=function(){function e(){this._keys=[],this._values=[]}return e.prototype.has=function(e){return!!~this._keys.indexOf(e)},e.prototype.get=function(e){return this._values[this._keys.indexOf(e)]},e.prototype.set=function(e,t){this._keys.push(e),this._values.push(t)},e}();return function(){return new e}}(),_=function(t,r){var a=t.__proto__||s(t);if(!a)return n(null);var i=a.constructor;if(i===r.Object)return a===r.Object.prototype?{}:n(a);if(~e.call(i).indexOf("[native code]"))try{return new i}catch(e){}return n(a)},p=function(e,t,n,r){var a=_(e,t);for(var i in r.set(e,a),e)l.call(e,i)&&(a[i]=n(e[i],r));if(c)for(var s=o(e),u=0,f=s.length,m=void 0;u<f;++u)m=s[u],d.call(e,m)&&(a[m]=n(e[m],r));return a},h=function(e,t,n,s){var u=_(e,t);s.set(e,u);for(var l=c?i(e).concat(o(e)):i(e),d=0,f=l.length,m=void 0,p=void 0;d<f;++d)if("callee"!==(m=l[d])&&"caller"!==m)if(p=a(e,m)){p.get||p.set||(p.value=n(e[m],s));try{r(u,m,p)}catch(e){u[m]=p.value}}else u[m]=n(e[m],s);return u},y=Array.isArray,g=Object.getPrototypeOf,M=function(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:(console&&console.error&&console.error('Unable to locate global object, returning "this".'),this)}();function v(e,t){var n=!(!t||!t.isStrict),r=t&&t.realm||M,a=n?h:p,i=function(e,t){if(!e||"object"!=typeof e)return e;if(t.has(e))return t.get(e);var o,s,u,l=e.__proto__||g(e),d=l&&l.constructor;if(!d||d===r.Object)return a(e,r,i,t);if(y(e)){if(n)return h(e,r,i,t);o=new d,t.set(e,o);for(var c=0,f=e.length;c<f;++c)o[c]=i(e[c],t);return o}if(e instanceof r.Date)return new d(e.getTime());if(e instanceof r.RegExp)return(o=new d(e.source,e.flags||(u="",(s=e).global&&(u+="g"),s.ignoreCase&&(u+="i"),s.multiline&&(u+="m"),s.unicode&&(u+="u"),s.sticky&&(u+="y"),u))).lastIndex=e.lastIndex,o;if(r.Map&&e instanceof r.Map)return o=new d,t.set(e,o),e.forEach((function(e,n){o.set(n,i(e,t))})),o;if(r.Set&&e instanceof r.Set)return o=new d,t.set(e,o),e.forEach((function(e){o.add(i(e,t))})),o;if(r.Blob&&e instanceof r.Blob)return e.slice(0,e.size,e.type);if(r.Buffer&&r.Buffer.isBuffer(e))return o=r.Buffer.allocUnsafe?r.Buffer.allocUnsafe(e.length):new d(e.length),t.set(e,o),e.copy(o),o;if(r.ArrayBuffer){if(r.ArrayBuffer.isView(e))return o=new d(e.buffer.slice(0)),t.set(e,o),o;if(e instanceof r.ArrayBuffer)return o=e.slice(0),t.set(e,o),o}return"function"==typeof e.then||e instanceof Error||r.WeakMap&&e instanceof r.WeakMap||r.WeakSet&&e instanceof r.WeakSet?e:a(e,r,i,t)};return i(e,m())}return v.default=v,v.strict=function(e,t){return v(e,{isStrict:!0,realm:t?t.realm:void 0})},v},e.exports=n()}).call(this,n(49))},function(e,t,n){"use strict";var r=n(41),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function o(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==a.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function l(e){return"[object Function]"===a.call(e)}function d(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!o(e)&&null!==e.constructor&&!o(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:u,isUndefined:o,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:l,isStream:function(e){return s(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:d,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,a=arguments.length;r<a;r++)d(arguments[r],n);return t},extend:function(e,t,n){return d(t,(function(t,a){e[a]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";e.exports=function(e){return a.test("number"==typeof e?r(e):e.charAt(0))};var r=String.fromCharCode,a=/\s/},function(e,t,n){var r=n(224)();e.exports=r;try{regeneratorRuntime=r}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(e,t){e.exports=function(){for(var e={},t=0;t<arguments.length;t++){var r=arguments[t];for(var a in r)n.call(r,a)&&(e[a]=r[a])}return e};var n=Object.prototype.hasOwnProperty},function(e,t,n){var r=n(35);e.exports=function(e,t,n){return(t=r(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(e,t,n,r,a,i,o){try{var s=e[i](o),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,a)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise((function(a,i){var o=e.apply(t,r);function s(e){n(o,a,i,s,u,"next",e)}function u(e){n(o,a,i,s,u,"throw",e)}s(void 0)}))}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";e.exports=TypeError},function(e,t){(t=e.exports=function(e){return e.replace(/^\s*|\s*$/g,"")}).left=function(e){return e.replace(/^\s*/,"")},t.right=function(e){return e.replace(/\s*$/,"")}},function(e,t){var n,r,a=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var u,l=[],d=!1,c=-1;function f(){d&&u&&(d=!1,u.length?l=u.concat(l):c=-1,l.length&&m())}function m(){if(!d){var e=s(f);d=!0;for(var t=l.length;t;){for(u=l,l=[];++c<t;)u&&u[c].run();c=-1,t=l.length}u=null,d=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function _(e,t){this.fun=e,this.array=t}function p(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new _(e,t)),1!==l.length||d||s(m)},_.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=p,a.addListener=p,a.once=p,a.off=p,a.removeListener=p,a.removeAllListeners=p,a.emit=p,a.prependListener=p,a.prependOnceListener=p,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t){var n,r,a=Function.prototype,i=Object.prototype,o=a.toString,s=i.hasOwnProperty,u=o.call(Object),l=i.toString,d=(n=Object.getPrototypeOf,r=Object,function(e){return n(r(e))});e.exports=function(e){if(!function(e){return!!e&&"object"==typeof e}(e)||"[object Object]"!=l.call(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e))return!1;var t=d(e);if(null===t)return!0;var n=s.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&o.call(n)==u}},function(e,t){function n(t){return e.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){(function(t){var r="function"==typeof Map&&Map.prototype,a=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=r&&a&&"function"==typeof a.get?a.get:null,o=r&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,u=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,l=s&&u&&"function"==typeof u.get?u.get:null,d=s&&Set.prototype.forEach,c="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,f="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,m="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,_=Boolean.prototype.valueOf,p=Object.prototype.toString,h=Function.prototype.toString,y=String.prototype.match,g=String.prototype.slice,M=String.prototype.replace,v=String.prototype.toUpperCase,b=String.prototype.toLowerCase,L=RegExp.prototype.test,k=Array.prototype.concat,w=Array.prototype.join,Y=Array.prototype.slice,T=Math.floor,D="function"==typeof BigInt?BigInt.prototype.valueOf:null,S=Object.getOwnPropertySymbols,x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,j="function"==typeof Symbol&&"object"==typeof Symbol.iterator,O="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===j||"symbol")?Symbol.toStringTag:null,E=Object.prototype.propertyIsEnumerable,P=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function H(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||L.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-T(-e):T(e);if(r!==e){var a=String(r),i=g.call(t,a.length+1);return M.call(a,n,"$&_")+"."+M.call(M.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return M.call(t,n,"$&_")}var A=n(246),C=A.custom,N=J(C)?C:null,F={__proto__:null,double:'"',single:"'"},W={__proto__:null,double:/(["\\])/g,single:/(['\\])/g};function I(e,t,n){var r=n.quoteStyle||t,a=F[r];return a+e+a}function z(e){return M.call(String(e),/"/g,"&quot;")}function R(e){return!O||!("object"==typeof e&&(O in e||void 0!==e[O]))}function U(e){return"[object Array]"===q(e)&&R(e)}function B(e){return"[object RegExp]"===q(e)&&R(e)}function J(e){if(j)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!x)return!1;try{return x.call(e),!0}catch(e){}return!1}e.exports=function e(n,r,a,s){var u=r||{};if(V(u,"quoteStyle")&&!V(F,u.quoteStyle))throw new TypeError('option "quoteStyle" must be "single" or "double"');if(V(u,"maxStringLength")&&("number"==typeof u.maxStringLength?u.maxStringLength<0&&u.maxStringLength!==1/0:null!==u.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var p=!V(u,"customInspect")||u.customInspect;if("boolean"!=typeof p&&"symbol"!==p)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(V(u,"indent")&&null!==u.indent&&"\t"!==u.indent&&!(parseInt(u.indent,10)===u.indent&&u.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(V(u,"numericSeparator")&&"boolean"!=typeof u.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var v=u.numericSeparator;if(void 0===n)return"undefined";if(null===n)return"null";if("boolean"==typeof n)return n?"true":"false";if("string"==typeof n)return function e(t,n){if(t.length>n.maxStringLength){var r=t.length-n.maxStringLength,a="... "+r+" more character"+(r>1?"s":"");return e(g.call(t,0,n.maxStringLength),n)+a}var i=W[n.quoteStyle||"single"];return i.lastIndex=0,I(M.call(M.call(t,i,"\\$1"),/[\x00-\x1f]/g,K),"single",n)}(n,u);if("number"==typeof n){if(0===n)return 1/0/n>0?"0":"-0";var L=String(n);return v?H(n,L):L}if("bigint"==typeof n){var T=String(n)+"n";return v?H(n,T):T}var S=void 0===u.depth?5:u.depth;if(void 0===a&&(a=0),a>=S&&S>0&&"object"==typeof n)return U(n)?"[Array]":"[Object]";var C=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=w.call(Array(e.indent+1)," ")}return{base:n,prev:w.call(Array(t+1),n)}}(u,a);if(void 0===s)s=[];else if(G(s,n)>=0)return"[Circular]";function $(t,n,r){if(n&&(s=Y.call(s)).push(n),r){var i={depth:u.depth};return V(u,"quoteStyle")&&(i.quoteStyle=u.quoteStyle),e(t,i,a+1,s)}return e(t,u,a+1,s)}if("function"==typeof n&&!B(n)){var ne=function(e){if(e.name)return e.name;var t=y.call(h.call(e),/^function\s*([\w$]+)/);if(t)return t[1];return null}(n),re=te(n,$);return"[Function"+(ne?": "+ne:" (anonymous)")+"]"+(re.length>0?" { "+w.call(re,", ")+" }":"")}if(J(n)){var ae=j?M.call(String(n),/^(Symbol\(.*\))_[^)]*$/,"$1"):x.call(n);return"object"!=typeof n||j?ae:Q(ae)}if(function(e){if(!e||"object"!=typeof e)return!1;if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement)return!0;return"string"==typeof e.nodeName&&"function"==typeof e.getAttribute}(n)){for(var ie="<"+b.call(String(n.nodeName)),oe=n.attributes||[],se=0;se<oe.length;se++)ie+=" "+oe[se].name+"="+I(z(oe[se].value),"double",u);return ie+=">",n.childNodes&&n.childNodes.length&&(ie+="..."),ie+="</"+b.call(String(n.nodeName))+">"}if(U(n)){if(0===n.length)return"[]";var ue=te(n,$);return C&&!function(e){for(var t=0;t<e.length;t++)if(G(e[t],"\n")>=0)return!1;return!0}(ue)?"["+ee(ue,C)+"]":"[ "+w.call(ue,", ")+" ]"}if(function(e){return"[object Error]"===q(e)&&R(e)}(n)){var le=te(n,$);return"cause"in Error.prototype||!("cause"in n)||E.call(n,"cause")?0===le.length?"["+String(n)+"]":"{ ["+String(n)+"] "+w.call(le,", ")+" }":"{ ["+String(n)+"] "+w.call(k.call("[cause]: "+$(n.cause),le),", ")+" }"}if("object"==typeof n&&p){if(N&&"function"==typeof n[N]&&A)return A(n,{depth:S-a});if("symbol"!==p&&"function"==typeof n.inspect)return n.inspect()}if(function(e){if(!i||!e||"object"!=typeof e)return!1;try{i.call(e);try{l.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(n)){var de=[];return o&&o.call(n,(function(e,t){de.push($(t,n,!0)+" => "+$(e,n))})),X("Map",i.call(n),de,C)}if(function(e){if(!l||!e||"object"!=typeof e)return!1;try{l.call(e);try{i.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(n)){var ce=[];return d&&d.call(n,(function(e){ce.push($(e,n))})),X("Set",l.call(n),ce,C)}if(function(e){if(!c||!e||"object"!=typeof e)return!1;try{c.call(e,c);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(n))return Z("WeakMap");if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{c.call(e,c)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(n))return Z("WeakSet");if(function(e){if(!m||!e||"object"!=typeof e)return!1;try{return m.call(e),!0}catch(e){}return!1}(n))return Z("WeakRef");if(function(e){return"[object Number]"===q(e)&&R(e)}(n))return Q($(Number(n)));if(function(e){if(!e||"object"!=typeof e||!D)return!1;try{return D.call(e),!0}catch(e){}return!1}(n))return Q($(D.call(n)));if(function(e){return"[object Boolean]"===q(e)&&R(e)}(n))return Q(_.call(n));if(function(e){return"[object String]"===q(e)&&R(e)}(n))return Q($(String(n)));if("undefined"!=typeof window&&n===window)return"{ [object Window] }";if("undefined"!=typeof globalThis&&n===globalThis||void 0!==t&&n===t)return"{ [object globalThis] }";if(!function(e){return"[object Date]"===q(e)&&R(e)}(n)&&!B(n)){var fe=te(n,$),me=P?P(n)===Object.prototype:n instanceof Object||n.constructor===Object,_e=n instanceof Object?"":"null prototype",pe=!me&&O&&Object(n)===n&&O in n?g.call(q(n),8,-1):_e?"Object":"",he=(me||"function"!=typeof n.constructor?"":n.constructor.name?n.constructor.name+" ":"")+(pe||_e?"["+w.call(k.call([],pe||[],_e||[]),": ")+"] ":"");return 0===fe.length?he+"{}":C?he+"{"+ee(fe,C)+"}":he+"{ "+w.call(fe,", ")+" }"}return String(n)};var $=Object.prototype.hasOwnProperty||function(e){return e in this};function V(e,t){return $.call(e,t)}function q(e){return p.call(e)}function G(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function K(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+v.call(t.toString(16))}function Q(e){return"Object("+e+")"}function Z(e){return e+" { ? }"}function X(e,t,n,r){return e+" ("+t+") {"+(r?ee(n,r):w.call(n,", "))+"}"}function ee(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+w.call(e,","+n)+"\n"+t.prev}function te(e,t){var n=U(e),r=[];if(n){r.length=e.length;for(var a=0;a<e.length;a++)r[a]=V(e,a)?t(e[a],e):""}var i,o="function"==typeof S?S(e):[];if(j){i={};for(var s=0;s<o.length;s++)i["$"+o[s]]=o[s]}for(var u in e)V(e,u)&&(n&&String(Number(u))===u&&u<e.length||j&&i["$"+u]instanceof Symbol||(L.call(/[^\w$]/,u)?r.push(t(u,e)+": "+t(e[u],e)):r.push(u+": "+t(e[u],e))));if("function"==typeof S)for(var l=0;l<o.length;l++)E.call(e,o[l])&&r.push("["+t(o[l])+"]: "+t(e[o[l]],e));return r}}).call(this,n(49))},function(e,t,n){"use strict";var r=n(268);e.exports=Function.prototype.bind||r},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=48&&t<=57}},function(e,t,n){"use strict";e.exports=s;var r=n(313),a=r.CONTINUE,i=r.SKIP,o=r.EXIT;function s(e,t,n,a){"function"==typeof t&&"function"!=typeof n&&(a=n,n=t,t=null),r(e,t,(function(e,t){var r=t[t.length-1],a=r?r.children.indexOf(e):null;return n(e,a,r)}),a)}s.CONTINUE=a,s.SKIP=i,s.EXIT=o},function(e,t,n){"use strict";e.exports=n(223)},function(e,t,n){var r=n(276),a=n(277),i=n(278),o=n(280);e.exports=function(e,t){return r(e)||a(e,t)||i(e,t)||o()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(51),a=n(248),i=n(249),o=n(250),s=n(251),u=n(252),l=n(11),d=n(253),c=n(254),f=n(255),m=n(256),_=n(257),p=n(258),h=n(259),y=n(260),g=Function,M=function(e){try{return g('"use strict"; return ('+e+").constructor;")()}catch(e){}},v=n(52),b=n(263),L=function(){throw new l},k=v?function(){try{return L}catch(e){try{return v(arguments,"callee").get}catch(e){return L}}}():L,w=n(264)(),Y=n(266),T=n(54),D=n(53),S=n(56),x=n(23),j={},O="undefined"!=typeof Uint8Array&&Y?Y(Uint8Array):void 0,E={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":w&&Y?Y([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":j,"%AsyncGenerator%":j,"%AsyncGeneratorFunction%":j,"%AsyncIteratorPrototype%":j,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?void 0:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?void 0:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":a,"%eval%":eval,"%EvalError%":i,"%Float16Array%":"undefined"==typeof Float16Array?void 0:Float16Array,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":g,"%GeneratorFunction%":j,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":w&&Y?Y(Y([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&w&&Y?Y((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":r,"%Object.getOwnPropertyDescriptor%":v,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":o,"%ReferenceError%":s,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&w&&Y?Y((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":w&&Y?Y(""[Symbol.iterator]()):void 0,"%Symbol%":w?Symbol:void 0,"%SyntaxError%":u,"%ThrowTypeError%":k,"%TypedArray%":O,"%TypeError%":l,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":d,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%Function.prototype.call%":x,"%Function.prototype.apply%":S,"%Object.defineProperty%":b,"%Object.getPrototypeOf%":T,"%Math.abs%":c,"%Math.floor%":f,"%Math.max%":m,"%Math.min%":_,"%Math.pow%":p,"%Math.round%":h,"%Math.sign%":y,"%Reflect.getPrototypeOf%":D};if(Y)try{null.error}catch(e){var P=Y(Y(e));E["%Error.prototype%"]=P}var H={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},A=n(17),C=n(271),N=A.call(x,Array.prototype.concat),F=A.call(S,Array.prototype.splice),W=A.call(x,String.prototype.replace),I=A.call(x,String.prototype.slice),z=A.call(x,RegExp.prototype.exec),R=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,U=/\\(\\)?/g,B=function(e){var t=I(e,0,1),n=I(e,-1);if("%"===t&&"%"!==n)throw new u("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new u("invalid intrinsic syntax, expected opening `%`");var r=[];return W(e,R,(function(e,t,n,a){r[r.length]=n?W(a,U,"$1"):t||e})),r},J=function(e,t){var n,r=e;if(C(H,r)&&(r="%"+(n=H[r])[0]+"%"),C(E,r)){var a=E[r];if(a===j&&(a=function e(t){var n;if("%AsyncFunction%"===t)n=M("async function () {}");else if("%GeneratorFunction%"===t)n=M("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=M("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var a=e("%AsyncGenerator%");a&&Y&&(n=Y(a.prototype))}return E[t]=n,n}(r)),void 0===a&&!t)throw new l("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:a}}throw new u("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new l("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new l('"allowMissing" argument must be a boolean');if(null===z(/^%?[^%]*%?$/,e))throw new u("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=B(e),r=n.length>0?n[0]:"",a=J("%"+r+"%",t),i=a.name,o=a.value,s=!1,d=a.alias;d&&(r=d[0],F(n,N([0,1],d)));for(var c=1,f=!0;c<n.length;c+=1){var m=n[c],_=I(m,0,1),p=I(m,-1);if(('"'===_||"'"===_||"`"===_||'"'===p||"'"===p||"`"===p)&&_!==p)throw new u("property names with quotes must have matching quotes");if("constructor"!==m&&f||(s=!0),C(E,i="%"+(r+="."+m)+"%"))o=E[i];else if(null!=o){if(!(m in o)){if(!t)throw new l("base intrinsic for "+e+" exists, but the property is not available.");return}if(v&&c+1>=n.length){var h=v(o,m);o=(f=!!h)&&"get"in h&&!("originalValue"in h.get)?h.get:o[m]}else f=C(o,m),o=o[m];f&&!s&&(E[i]=o)}}return o}},function(e,t,n){"use strict";e.exports=Function.prototype.call},function(e,t,n){"use strict";var r=String.prototype.replace,a=/%20/g,i="RFC1738",o="RFC3986";e.exports={default:o,formatters:{RFC1738:function(e){return r.call(e,a,"+")},RFC3986:function(e){return String(e)}},RFC1738:i,RFC3986:o}},function(e,t,n){"use strict";var r=n(302),a=n(303),i=n(18),o=n(304),s=n(305),u=n(306);e.exports=function(e,t){var n,i,o={};t||(t={});for(i in f)n=t[i],o[i]=null==n?f[i]:n;(o.position.indent||o.position.start)&&(o.indent=o.position.indent||[],o.position=o.position.start);return function(e,t){var n,i,o,f,M,v,b,L,k,w,Y,T,D,S,x,j,O,E,P,H=t.additional,A=t.nonTerminated,C=t.text,N=t.reference,F=t.warning,W=t.textContext,I=t.referenceContext,z=t.warningContext,R=t.position,U=t.indent||[],B=e.length,J=0,$=-1,V=R.column||1,q=R.line||1,G="",K=[];"string"==typeof H&&(H=H.charCodeAt(0));j=Z(),L=F?function(e,t){var n=Z();n.column+=t,n.offset+=t,F.call(z,y[e],n,e)}:c,J--,B++;for(;++J<B;)if(10===M&&(V=U[$]||1),38===(M=e.charCodeAt(J))){if(9===(b=e.charCodeAt(J+1))||10===b||12===b||32===b||38===b||60===b||b!=b||H&&b===H){G+=d(M),V++;continue}for(T=D=J+1,P=D,35===b?(P=++T,88===(b=e.charCodeAt(P))||120===b?(S=_,P=++T):S="decimal"):S=m,n="",Y="",f="",x=h[S],P--;++P<B&&(b=e.charCodeAt(P),x(b));)f+=d(b),S===m&&l.call(r,f)&&(n=f,Y=r[f]);(o=59===e.charCodeAt(P))&&(P++,(i=S===m&&u(f))&&(n=f,Y=i)),E=1+P-D,(o||A)&&(f?S===m?(o&&!Y?L(5,1):(n!==f&&(P=T+n.length,E=1+P-T,o=!1),o||(k=n?1:3,t.attribute?61===(b=e.charCodeAt(P))?(L(k,E),Y=null):s(b)?Y=null:L(k,E):L(k,E))),v=Y):(o||L(2,E),v=parseInt(f,p[S]),(Q=v)>=55296&&Q<=57343||Q>1114111?(L(7,E),v=d(65533)):v in a?(L(6,E),v=a[v]):(w="",g(v)&&L(6,E),v>65535&&(w+=d((v-=65536)>>>10|55296),v=56320|1023&v),v=w+d(v))):S!==m&&L(4,E)),v?(X(),j=Z(),J=P-1,V+=P-D+1,K.push(v),(O=Z()).offset++,N&&N.call(I,v,{start:j,end:O},e.slice(D-1,P)),j=O):(f=e.slice(D-1,P),G+=f,V+=f.length,J=P-1)}else 10===M&&(q++,$++,V=0),M==M?(G+=d(M),V++):X();var Q;return K.join("");function Z(){return{line:q,column:V,offset:J+(R.offset||0)}}function X(){G&&(K.push(G),C&&C.call(W,G,{start:j,end:Z()}),G="")}}(e,o)};var l={}.hasOwnProperty,d=String.fromCharCode,c=Function.prototype,f={warning:null,reference:null,text:null,warningContext:null,referenceContext:null,textContext:null,position:{},additional:null,attribute:!1,nonTerminated:!0},m="named",_="hexadecimal",p={hexadecimal:16,decimal:10},h={};h[m]=s,h.decimal=i,h[_]=o;var y={};function g(e){return e>=1&&e<=8||11===e||e>=13&&e<=31||e>=127&&e<=159||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)}y[1]="Named character references must be terminated by a semicolon",y[2]="Numeric character references must be terminated by a semicolon",y[3]="Named character references cannot be empty",y[4]="Numeric character references cannot be empty",y[5]="Named character references must be known",y[6]="Numeric character references cannot be disallowed",y[7]="Numeric character references cannot be outside the permissible Unicode range"},function(e,t,n){"use strict";
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var r,a="";e.exports=function(e,t){if("string"!=typeof e)throw new TypeError("expected a string");if(1===t)return e;if(2===t)return e+e;var n=e.length*t;if(r!==e||void 0===r)r=e,a="";else if(a.length>=n)return a.substr(0,n);for(;n>a.length&&t>1;)1&t&&(a+=e),t>>=1,e+=e;return a=(a+=e).substr(0,n)}},function(e,t,n){"use strict";e.exports=function(e){return String(e).replace(/\n+$/,"")}},function(e,t,n){"use strict";e.exports=function(e,t,n,r){var a,i,o,s,u,l,d=["pedantic","commonmark"],c=d.length,f=e.length,m=-1;for(;++m<f;){for(a=e[m],i=a[1]||{},o=a[0],s=-1,l=!1;++s<c;)if(void 0!==i[u=d[s]]&&i[u]!==n.options[u]){l=!0;break}if(!l&&t[o].apply(n,r))return!0}return!1}},function(e,t,n){"use strict";var r=n(326);e.exports=function(e){return r(e).toLowerCase()}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){e.exports=function e(t){"use strict";var n=/^\0+/g,r=/[\0\r\f]/g,a=/: */g,i=/zoo|gra/,o=/([,: ])(transform)/g,s=/,+\s*(?![^(]*[)])/g,u=/ +\s*(?![^(]*[)])/g,l=/ *[\0] */g,d=/,\r+?/g,c=/([\t\r\n ])*\f?&/g,f=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,m=/\W+/g,_=/@(k\w+)\s*(\S*)\s*/,p=/::(place)/g,h=/:(read-only)/g,y=/\s+(?=[{\];=:>])/g,g=/([[}=:>])\s+/g,M=/(\{[^{]+?);(?=\})/g,v=/\s{2,}/g,b=/([^\(])(:+) */g,L=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,Y=/-self|flex-/g,T=/[^]*?(:[rp][el]a[\w-]+)[^]*/,D=/stretch|:\s*\w+\-(?:conte|avail)/,S=/([^-])(image-set\()/,x="-webkit-",j="-moz-",O="-ms-",E=59,P=125,H=123,A=40,C=41,N=10,F=13,W=32,I=45,z=42,R=44,U=58,B=47,J=1,$=1,V=0,q=1,G=1,K=1,Q=0,Z=0,X=0,ee=[],te=[],ne=0,re=null,ae=0,ie=1,oe="",se="",ue="";function le(e,t,a,i,o){for(var s,u,d=0,c=0,f=0,m=0,y=0,g=0,M=0,v=0,L=0,w=0,Y=0,T=0,D=0,S=0,j=0,O=0,Q=0,te=0,re=0,ce=a.length,ye=ce-1,ge="",Me="",ve="",be="",Le="",ke="";j<ce;){if(M=a.charCodeAt(j),j===ye&&c+m+f+d!==0&&(0!==c&&(M=c===B?N:B),m=f=d=0,ce++,ye++),c+m+f+d===0){if(j===ye&&(O>0&&(Me=Me.replace(r,"")),Me.trim().length>0)){switch(M){case W:case 9:case E:case F:case N:break;default:Me+=a.charAt(j)}M=E}if(1===Q)switch(M){case H:case P:case E:case 34:case 39:case A:case C:case R:Q=0;case 9:case F:case N:case W:break;default:for(Q=0,re=j,y=M,j--,M=E;re<ce;)switch(a.charCodeAt(re++)){case N:case F:case E:++j,M=y,re=ce;break;case U:O>0&&(++j,M=y);case H:re=ce}}switch(M){case H:for(y=(Me=Me.trim()).charCodeAt(0),Y=1,re=++j;j<ce;){switch(M=a.charCodeAt(j)){case H:Y++;break;case P:Y--;break;case B:switch(g=a.charCodeAt(j+1)){case z:case B:j=he(g,j,ye,a)}break;case 91:M++;case A:M++;case 34:case 39:for(;j++<ye&&a.charCodeAt(j)!==M;);}if(0===Y)break;j++}switch(ve=a.substring(re,j),0===y&&(y=(Me=Me.replace(n,"").trim()).charCodeAt(0)),y){case 64:switch(O>0&&(Me=Me.replace(r,"")),g=Me.charCodeAt(1)){case 100:case 109:case 115:case I:s=t;break;default:s=ee}if(re=(ve=le(t,s,ve,g,o+1)).length,X>0&&0===re&&(re=Me.length),ne>0&&(u=pe(3,ve,s=de(ee,Me,te),t,$,J,re,g,o,i),Me=s.join(""),void 0!==u&&0===(re=(ve=u.trim()).length)&&(g=0,ve="")),re>0)switch(g){case 115:Me=Me.replace(k,_e);case 100:case 109:case I:ve=Me+"{"+ve+"}";break;case 107:ve=(Me=Me.replace(_,"$1 $2"+(ie>0?oe:"")))+"{"+ve+"}",ve=1===G||2===G&&me("@"+ve,3)?"@"+x+ve+"@"+ve:"@"+ve;break;default:ve=Me+ve,112===i&&(be+=ve,ve="")}else ve="";break;default:ve=le(t,de(t,Me,te),ve,i,o+1)}Le+=ve,T=0,Q=0,S=0,O=0,te=0,D=0,Me="",ve="",M=a.charCodeAt(++j);break;case P:case E:if((re=(Me=(O>0?Me.replace(r,""):Me).trim()).length)>1)switch(0===S&&((y=Me.charCodeAt(0))===I||y>96&&y<123)&&(re=(Me=Me.replace(" ",":")).length),ne>0&&void 0!==(u=pe(1,Me,t,e,$,J,be.length,i,o,i))&&0===(re=(Me=u.trim()).length)&&(Me="\0\0"),y=Me.charCodeAt(0),g=Me.charCodeAt(1),y){case 0:break;case 64:if(105===g||99===g){ke+=Me+a.charAt(j);break}default:if(Me.charCodeAt(re-1)===U)break;be+=fe(Me,y,g,Me.charCodeAt(2))}T=0,Q=0,S=0,O=0,te=0,Me="",M=a.charCodeAt(++j)}}switch(M){case F:case N:if(c+m+f+d+Z===0)switch(w){case C:case 39:case 34:case 64:case 126:case 62:case z:case 43:case B:case I:case U:case R:case E:case H:case P:break;default:S>0&&(Q=1)}c===B?c=0:q+T===0&&107!==i&&Me.length>0&&(O=1,Me+="\0"),ne*ae>0&&pe(0,Me,t,e,$,J,be.length,i,o,i),J=1,$++;break;case E:case P:if(c+m+f+d===0){J++;break}default:switch(J++,ge=a.charAt(j),M){case 9:case W:if(m+d+c===0)switch(v){case R:case U:case 9:case W:ge="";break;default:M!==W&&(ge=" ")}break;case 0:ge="\\0";break;case 12:ge="\\f";break;case 11:ge="\\v";break;case 38:m+c+d===0&&q>0&&(te=1,O=1,ge="\f"+ge);break;case 108:if(m+c+d+V===0&&S>0)switch(j-S){case 2:112===v&&a.charCodeAt(j-3)===U&&(V=v);case 8:111===L&&(V=L)}break;case U:m+c+d===0&&(S=j);break;case R:c+f+m+d===0&&(O=1,ge+="\r");break;case 34:case 39:0===c&&(m=m===M?0:0===m?M:m);break;case 91:m+c+f===0&&d++;break;case 93:m+c+f===0&&d--;break;case C:m+c+d===0&&f--;break;case A:if(m+c+d===0){if(0===T)switch(2*v+3*L){case 533:break;default:Y=0,T=1}f++}break;case 64:c+f+m+d+S+D===0&&(D=1);break;case z:case B:if(m+d+f>0)break;switch(c){case 0:switch(2*M+3*a.charCodeAt(j+1)){case 235:c=B;break;case 220:re=j,c=z}break;case z:M===B&&v===z&&re+2!==j&&(33===a.charCodeAt(re+2)&&(be+=a.substring(re,j+1)),ge="",c=0)}}if(0===c){if(q+m+d+D===0&&107!==i&&M!==E)switch(M){case R:case 126:case 62:case 43:case C:case A:if(0===T){switch(v){case 9:case W:case N:case F:ge+="\0";break;default:ge="\0"+ge+(M===R?"":"\0")}O=1}else switch(M){case A:S+7===j&&108===v&&(S=0),T=++Y;break;case C:0==(T=--Y)&&(O=1,ge+="\0")}break;case 9:case W:switch(v){case 0:case H:case P:case E:case R:case 12:case 9:case W:case N:case F:break;default:0===T&&(O=1,ge+="\0")}}Me+=ge,M!==W&&9!==M&&(w=M)}}L=v,v=M,j++}if(re=be.length,X>0&&0===re&&0===Le.length&&0===t[0].length==0&&(109!==i||1===t.length&&(q>0?se:ue)===t[0])&&(re=t.join(",").length+2),re>0){if(s=0===q&&107!==i?function(e){for(var t,n,a=0,i=e.length,o=Array(i);a<i;++a){for(var s=e[a].split(l),u="",d=0,c=0,f=0,m=0,_=s.length;d<_;++d)if(!(0===(c=(n=s[d]).length)&&_>1)){if(f=u.charCodeAt(u.length-1),m=n.charCodeAt(0),t="",0!==d)switch(f){case z:case 126:case 62:case 43:case W:case A:break;default:t=" "}switch(m){case 38:n=t+se;case 126:case 62:case 43:case W:case C:case A:break;case 91:n=t+n+se;break;case U:switch(2*n.charCodeAt(1)+3*n.charCodeAt(2)){case 530:if(K>0){n=t+n.substring(8,c-1);break}default:(d<1||s[d-1].length<1)&&(n=t+se+n)}break;case R:t="";default:n=c>1&&n.indexOf(":")>0?t+n.replace(b,"$1"+se+"$2"):t+n+se}u+=n}o[a]=u.replace(r,"").trim()}return o}(t):t,ne>0&&void 0!==(u=pe(2,be,s,e,$,J,re,i,o,i))&&0===(be=u).length)return ke+be+Le;if(be=s.join(",")+"{"+be+"}",G*V!=0){switch(2!==G||me(be,2)||(V=0),V){case 111:be=be.replace(h,":-moz-$1")+be;break;case 112:be=be.replace(p,"::"+x+"input-$1")+be.replace(p,"::-moz-$1")+be.replace(p,":-ms-input-$1")+be}V=0}}return ke+be+Le}function de(e,t,n){var r=t.trim().split(d),a=r,i=r.length,o=e.length;switch(o){case 0:case 1:for(var s=0,u=0===o?"":e[0]+" ";s<i;++s)a[s]=ce(u,a[s],n,o).trim();break;default:s=0;var l=0;for(a=[];s<i;++s)for(var c=0;c<o;++c)a[l++]=ce(e[c]+" ",r[s],n,o).trim()}return a}function ce(e,t,n,r){var a=t,i=a.charCodeAt(0);switch(i<33&&(i=(a=a.trim()).charCodeAt(0)),i){case 38:switch(q+r){case 0:case 1:if(0===e.trim().length)break;default:return a.replace(c,"$1"+e.trim())}break;case U:switch(a.charCodeAt(1)){case 103:if(K>0&&q>0)return a.replace(f,"$1").replace(c,"$1"+ue);break;default:return e.trim()+a.replace(c,"$1"+e.trim())}default:if(n*q>0&&a.indexOf("\f")>0)return a.replace(c,(e.charCodeAt(0)===U?"":"$1")+e.trim())}return e+a}function fe(e,t,n,r){var l,d=0,c=e+";",f=2*t+3*n+4*r;if(944===f)return function(e){var t=e.length,n=e.indexOf(":",9)+1,r=e.substring(0,n).trim(),a=e.substring(n,t-1).trim();switch(e.charCodeAt(9)*ie){case 0:break;case I:if(110!==e.charCodeAt(10))break;default:var i=a.split((a="",s)),o=0;for(n=0,t=i.length;o<t;n=0,++o){for(var l=i[o],d=l.split(u);l=d[n];){var c=l.charCodeAt(0);if(1===ie&&(c>64&&c<90||c>96&&c<123||95===c||c===I&&l.charCodeAt(1)!==I))switch(isNaN(parseFloat(l))+(-1!==l.indexOf("("))){case 1:switch(l){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:l+=oe}}d[n++]=l}a+=(0===o?"":",")+d.join(" ")}}return a=r+a+";",1===G||2===G&&me(a,1)?x+a+a:a}(c);if(0===G||2===G&&!me(c,1))return c;switch(f){case 1015:return 97===c.charCodeAt(10)?x+c+c:c;case 951:return 116===c.charCodeAt(3)?x+c+c:c;case 963:return 110===c.charCodeAt(5)?x+c+c:c;case 1009:if(100!==c.charCodeAt(4))break;case 969:case 942:return x+c+c;case 978:return x+c+j+c+c;case 1019:case 983:return x+c+j+c+O+c+c;case 883:return c.charCodeAt(8)===I?x+c+c:c.indexOf("image-set(",11)>0?c.replace(S,"$1"+x+"$2")+c:c;case 932:if(c.charCodeAt(4)===I)switch(c.charCodeAt(5)){case 103:return x+"box-"+c.replace("-grow","")+x+c+O+c.replace("grow","positive")+c;case 115:return x+c+O+c.replace("shrink","negative")+c;case 98:return x+c+O+c.replace("basis","preferred-size")+c}return x+c+O+c+c;case 964:return x+c+O+"flex-"+c+c;case 1023:if(99!==c.charCodeAt(8))break;return l=c.substring(c.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),x+"box-pack"+l+x+c+O+"flex-pack"+l+c;case 1005:return i.test(c)?c.replace(a,":"+x)+c.replace(a,":"+j)+c:c;case 1e3:switch(d=(l=c.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(d)){case 226:l=c.replace(L,"tb");break;case 232:l=c.replace(L,"tb-rl");break;case 220:l=c.replace(L,"lr");break;default:return c}return x+c+O+l+c;case 1017:if(-1===c.indexOf("sticky",9))return c;case 975:switch(d=(c=e).length-10,f=(l=(33===c.charCodeAt(d)?c.substring(0,d):c).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(l.charCodeAt(8)<111)break;case 115:c=c.replace(l,x+l)+";"+c;break;case 207:case 102:c=c.replace(l,x+(f>102?"inline-":"")+"box")+";"+c.replace(l,x+l)+";"+c.replace(l,O+l+"box")+";"+c}return c+";";case 938:if(c.charCodeAt(5)===I)switch(c.charCodeAt(6)){case 105:return l=c.replace("-items",""),x+c+x+"box-"+l+O+"flex-"+l+c;case 115:return x+c+O+"flex-item-"+c.replace(Y,"")+c;default:return x+c+O+"flex-line-pack"+c.replace("align-content","").replace(Y,"")+c}break;case 973:case 989:if(c.charCodeAt(3)!==I||122===c.charCodeAt(4))break;case 931:case 953:if(!0===D.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?fe(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):c.replace(l,x+l)+c.replace(l,j+l.replace("fill-",""))+c;break;case 962:if(c=x+c+(102===c.charCodeAt(5)?O+c:"")+c,n+r===211&&105===c.charCodeAt(13)&&c.indexOf("transform",10)>0)return c.substring(0,c.indexOf(";",27)+1).replace(o,"$1"+x+"$2")+c}return c}function me(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10),a=e.substring(n+1,e.length-1);return re(2!==t?r:r.replace(T,"$1"),a,t)}function _e(e,t){var n=fe(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(w," or ($1)").substring(4):"("+t+")"}function pe(e,t,n,r,a,i,o,s,u,l){for(var d,c=0,f=t;c<ne;++c)switch(d=te[c].call(ge,e,f,n,r,a,i,o,s,u,l)){case void 0:case!1:case!0:case null:break;default:f=d}if(f!==t)return f}function he(e,t,n,r){for(var a=t+1;a<n;++a)switch(r.charCodeAt(a)){case B:if(e===z&&r.charCodeAt(a-1)===z&&t+2!==a)return a+1;break;case N:if(e===B)return a+1}return a}function ye(e){for(var t in e){var n=e[t];switch(t){case"keyframe":ie=0|n;break;case"global":K=0|n;break;case"cascade":q=0|n;break;case"compress":Q=0|n;break;case"semicolon":Z=0|n;break;case"preserve":X=0|n;break;case"prefix":re=null,n?"function"!=typeof n?G=1:(G=2,re=n):G=0}}return ye}function ge(t,n){if(void 0!==this&&this.constructor===ge)return e(t);var a=t,i=a.charCodeAt(0);i<33&&(i=(a=a.trim()).charCodeAt(0)),ie>0&&(oe=a.replace(m,91===i?"":"-")),i=1,1===q?ue=a:se=a;var o,s=[ue];ne>0&&void 0!==(o=pe(-1,n,s,s,$,J,0,0,0,0))&&"string"==typeof o&&(n=o);var u=le(ee,s,n,0,0);return ne>0&&void 0!==(o=pe(-2,u,s,s,$,J,u.length,0,0,0))&&"string"!=typeof(u=o)&&(i=0),oe="",ue="",se="",V=0,$=1,J=1,Q*i==0?u:u.replace(r,"").replace(y,"").replace(g,"$1").replace(M,"$1").replace(v," ")}return ge.use=function e(t){switch(t){case void 0:case null:ne=te.length=0;break;default:if("function"==typeof t)te[ne++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else ae=0|!!t}return e},ge.set=ye,void 0!==t&&ye(t),ge}(null)},function(e,t,n){"use strict";var r=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function a(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(a=e[n],i=t[n],!(a===i||r(a)&&r(i)))return!1;var a,i;return!0}t.a=function(e,t){var n;void 0===t&&(t=a);var r,i=[],o=!1;return function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];return o&&n===this&&t(a,i)||(r=e.apply(this,a),o=!0,n=this,i=a),r}}},function(e,t){var n=Object.prototype.toString,r=Array.isArray;e.exports=function(e){return"string"==typeof e||!r(e)&&function(e){return!!e&&"object"==typeof e}(e)&&"[object String]"==n.call(e)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=o(e),l=1;l<arguments.length;l++){for(var d in n=Object(arguments[l]))a.call(n,d)&&(u[d]=n[d]);if(r){s=r(n);for(var c=0;c<s.length;c++)i.call(n,s[c])&&(u[s[c]]=n[s[c]])}}return u}},function(e,t,n){var r=n(15).default,a=n(220);e.exports=function(e){var t=a(e,"string");return"symbol"==r(t)?t:t+""},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){this.v=e,this.k=t},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(38);function a(){
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
var t,n,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.toStringTag||"@@toStringTag";function u(e,a,i,o){var s=a&&a.prototype instanceof d?a:d,u=Object.create(s.prototype);return r(u,"_invoke",function(e,r,a){var i,o,s,u=0,d=a||[],c=!1,f={p:0,n:0,v:t,a:m,f:m.bind(t,4),d:function(e,n){return i=e,o=0,s=t,f.n=n,l}};function m(e,r){for(o=e,s=r,n=0;!c&&u&&!a&&n<d.length;n++){var a,i=d[n],m=f.p,_=i[2];e>3?(a=_===r)&&(s=i[(o=i[4])?5:(o=3,3)],i[4]=i[5]=t):i[0]<=m&&((a=e<2&&m<i[1])?(o=0,f.v=r,f.n=i[1]):m<_&&(a=e<3||i[0]>r||r>_)&&(i[4]=e,i[5]=r,f.n=_,o=0))}if(a||e>1)return l;throw c=!0,r}return function(a,d,_){if(u>1)throw TypeError("Generator is already running");for(c&&1===d&&m(d,_),o=d,s=_;(n=o<2?t:s)||!c;){i||(o?o<3?(o>1&&(f.n=-1),m(o,s)):f.n=s:f.v=s);try{if(u=2,i){if(o||(a="next"),n=i[a]){if(!(n=n.call(i,s)))throw TypeError("iterator result is not an object");if(!n.done)return n;s=n.value,o<2&&(o=0)}else 1===o&&(n=i.return)&&n.call(i),o<2&&(s=TypeError("The iterator does not provide a '"+a+"' method"),o=1);i=t}else if((n=(c=f.n<0)?s:e.call(r,f))!==l)break}catch(e){i=t,o=1,s=e}finally{u=1}}return{value:n,done:c}}}(e,i,o),!0),u}var l={};function d(){}function c(){}function f(){}n=Object.getPrototypeOf;var m=[][o]?n(n([][o]())):(r(n={},o,(function(){return this})),n),_=f.prototype=d.prototype=Object.create(m);function p(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,f):(e.__proto__=f,r(e,s,"GeneratorFunction")),e.prototype=Object.create(_),e}return c.prototype=f,r(_,"constructor",f),r(f,"constructor",c),c.displayName="GeneratorFunction",r(f,s,"GeneratorFunction"),r(_),r(_,s,"Generator"),r(_,o,(function(){return this})),r(_,"toString",(function(){return"[object Generator]"})),(e.exports=a=function(){return{w:u,m:p}},e.exports.__esModule=!0,e.exports.default=e.exports)()}e.exports=a,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t,r,a,i){var o=Object.defineProperty;try{o({},"",{})}catch(t){o=0}e.exports=n=function(e,t,r,a){function i(t,r){n(e,t,(function(e){return this._invoke(t,r,e)}))}t?o?o(e,t,{value:r,enumerable:!a,configurable:!a,writable:!a}):e[t]=r:(i("next",0),i("throw",1),i("return",2))},e.exports.__esModule=!0,e.exports.default=e.exports,n(t,r,a,i)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(37),a=n(40);e.exports=function(e,t,n,i,o){return new a(r().w(e,t,n,i),o||Promise)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(36),a=n(38);e.exports=function e(t,n){function i(e,a,o,s){try{var u=t[e](a),l=u.value;return l instanceof r?n.resolve(l.v).then((function(e){i("next",e,o,s)}),(function(e){i("throw",e,o,s)})):n.resolve(l).then((function(e){u.value=e,o(u)}),(function(e){return i("throw",e,o,s)}))}catch(e){s(e)}}var o;this.next||(a(e.prototype),a(e.prototype,"function"==typeof Symbol&&Symbol.asyncIterator||"@asyncIterator",(function(){return this}))),a(this,"_invoke",(function(e,t,r){function a(){return new n((function(t,n){i(e,r,t,n)}))}return o=o?o.then(a,a):a()}),!0)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(5);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var o=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),o.push(a(t)+"="+a(e))})))})),i=o.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(5),a=n(233),i={"Content-Type":"application/x-www-form-urlencoded"};function o(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=n(45)),s),transformRequest:[function(e,t){return a(t,"Accept"),a(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(o(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(o(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(i)})),e.exports=u}).call(this,n(13))},function(e,t,n){"use strict";var r=n(5),a=n(234),i=n(236),o=n(42),s=n(237),u=n(240),l=n(241),d=n(46);e.exports=function(e){return new Promise((function(t,n){var c=e.data,f=e.headers;r.isFormData(c)&&delete f["Content-Type"],(r.isBlob(c)||r.isFile(c))&&c.type&&delete f["Content-Type"];var m=new XMLHttpRequest;if(e.auth){var _=e.auth.username||"",p=unescape(encodeURIComponent(e.auth.password))||"";f.Authorization="Basic "+btoa(_+":"+p)}var h=s(e.baseURL,e.url);if(m.open(e.method.toUpperCase(),o(h,e.params,e.paramsSerializer),!0),m.timeout=e.timeout,m.onreadystatechange=function(){if(m&&4===m.readyState&&(0!==m.status||m.responseURL&&0===m.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in m?u(m.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?m.response:m.responseText,status:m.status,statusText:m.statusText,headers:r,config:e,request:m};a(t,n,i),m=null}},m.onabort=function(){m&&(n(d("Request aborted",e,"ECONNABORTED",m)),m=null)},m.onerror=function(){n(d("Network Error",e,null,m)),m=null},m.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(d(t,e,"ECONNABORTED",m)),m=null},r.isStandardBrowserEnv()){var y=(e.withCredentials||l(h))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;y&&(f[e.xsrfHeaderName]=y)}if("setRequestHeader"in m&&r.forEach(f,(function(e,t){void 0===c&&"content-type"===t.toLowerCase()?delete f[t]:m.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(m.withCredentials=!!e.withCredentials),e.responseType)try{m.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&m.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&m.upload&&m.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){m&&(m.abort(),n(e),m=null)})),c||(c=null),m.send(c)}))}},function(e,t,n){"use strict";var r=n(235);e.exports=function(e,t,n,a,i){var o=new Error(e);return r(o,t,n,a,i)}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){t=t||{};var n={},a=["url","method","data"],i=["headers","auth","proxy","params"],o=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function l(a){r.isUndefined(t[a])?r.isUndefined(e[a])||(n[a]=u(void 0,e[a])):n[a]=u(e[a],t[a])}r.forEach(a,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(i,l),r.forEach(o,(function(a){r.isUndefined(t[a])?r.isUndefined(e[a])||(n[a]=u(void 0,e[a])):n[a]=u(void 0,t[a])})),r.forEach(s,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var d=a.concat(i).concat(o).concat(s),c=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===d.indexOf(e)}));return r.forEach(c,l),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(22),a=n(57),i=n(16),o=n(11),s=r("%Map%",!0),u=a("Map.prototype.get",!0),l=a("Map.prototype.set",!0),d=a("Map.prototype.has",!0),c=a("Map.prototype.delete",!0),f=a("Map.prototype.size",!0);e.exports=!!s&&function(){var e,t={assert:function(e){if(!t.has(e))throw new o("Side channel does not contain "+i(e))},delete:function(t){if(e){var n=c(e,t);return 0===f(e)&&(e=void 0),n}return!1},get:function(t){if(e)return u(e,t)},has:function(t){return!!e&&d(e,t)},set:function(t,n){e||(e=new s),l(e,t,n)}};return t}},function(e,t,n){"use strict";e.exports=Object},function(e,t,n){"use strict";var r=n(262);if(r)try{r([],"length")}catch(e){r=null}e.exports=r},function(e,t,n){"use strict";e.exports="undefined"!=typeof Reflect&&Reflect.getPrototypeOf||null},function(e,t,n){"use strict";var r=n(51);e.exports=r.getPrototypeOf||null},function(e,t,n){"use strict";var r=n(17),a=n(11),i=n(23),o=n(269);e.exports=function(e){if(e.length<1||"function"!=typeof e[0])throw new a("a function is required");return o(r,i,e)}},function(e,t,n){"use strict";e.exports=Function.prototype.apply},function(e,t,n){"use strict";var r=n(22),a=n(55),i=a([r("%String.prototype.indexOf%")]);e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?a([n]):n}},function(e,t,n){"use strict";var r=n(24),a=Object.prototype.hasOwnProperty,i=Array.isArray,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),s=function(e,t){for(var n=t&&t.plainObjects?{__proto__:null}:{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:s,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var a=t[r],o=a.obj[a.prop],s=Object.keys(o),u=0;u<s.length;++u){var l=s[u],d=o[l];"object"==typeof d&&null!==d&&-1===n.indexOf(d)&&(t.push({obj:o,prop:l}),n.push(d))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],a=0;a<n.length;++a)void 0!==n[a]&&r.push(n[a]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,a,i){if(0===e.length)return e;var s=e;if("symbol"==typeof e?s=Symbol.prototype.toString.call(e):"string"!=typeof e&&(s=String(e)),"iso-8859-1"===n)return escape(s).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var u="",l=0;l<s.length;l+=1024){for(var d=s.length>=1024?s.slice(l,l+1024):s,c=[],f=0;f<d.length;++f){var m=d.charCodeAt(f);45===m||46===m||95===m||126===m||m>=48&&m<=57||m>=65&&m<=90||m>=97&&m<=122||i===r.RFC1738&&(40===m||41===m)?c[c.length]=d.charAt(f):m<128?c[c.length]=o[m]:m<2048?c[c.length]=o[192|m>>6]+o[128|63&m]:m<55296||m>=57344?c[c.length]=o[224|m>>12]+o[128|m>>6&63]+o[128|63&m]:(f+=1,m=65536+((1023&m)<<10|1023&d.charCodeAt(f)),c[c.length]=o[240|m>>18]+o[128|m>>12&63]+o[128|m>>6&63]+o[128|63&m])}u+=c.join("")}return u},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(i(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n&&"function"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!a.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var o=t;return i(t)&&!i(n)&&(o=s(t,r)),i(t)&&i(n)?(n.forEach((function(n,i){if(a.call(t,i)){var o=t[i];o&&"object"==typeof o&&n&&"object"==typeof n?t[i]=e(o,n,r):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var o=n[i];return a.call(t,i)?t[i]=e(t[i],o,r):t[i]=o,t}),o)}}},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,o){var s=r(t),u=a[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,i,o){var s=t(r),u=n[e][t(r)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,o){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-ps",{months:"كانون الثاني_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_تشري الأوّل_تشرين الثاني_كانون الأوّل".split("_"),monthsShort:"ك٢_شباط_آذار_نيسان_أيّار_حزيران_تمّوز_آب_أيلول_ت١_ت٢_ك١".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).split("").reverse().join("").replace(/[١٢](?![\u062a\u0643])/g,(function(e){return n[e]})).split("").reverse().join("").replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}var n=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],r=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,a=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:a,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:a,monthsRegex:r,monthsShortRegex:r,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return"jedan sat";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:function(e,t,n,r){switch(n){case"m":return t?"jedna minuta":r?"jednu minutu":"jedne minute"}},mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={standalone:"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),format:"ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince".split("_"),isFormat:/DD?[o.]?(\[[^\[\]]*\]|\s)+MMMM/},n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function o(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:o,ss:o,m:o,mm:o,h:o,hh:o,d:o,dd:o,M:o,MM:o,y:o,yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var o="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":o=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":o=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":o=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":o=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":o=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":o=i?"vuoden":"vuotta"}return o=function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+o}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["çend sanîye","çend sanîyeyan"],ss:[e+" sanîye",e+" sanîyeyan"],m:["deqîqeyek","deqîqeyekê"],mm:[e+" deqîqe",e+" deqîqeyan"],h:["saetek","saetekê"],hh:[e+" saet",e+" saetan"],d:["rojek","rojekê"],dd:[e+" roj",e+" rojan"],w:["hefteyek","hefteyekê"],ww:[e+" hefte",e+" hefteyan"],M:["mehek","mehekê"],MM:[e+" meh",e+" mehan"],y:["salek","salekê"],yy:[e+" sal",e+" salan"]};return t?a[n][0]:a[n][1]}e.defineLocale("ku-kmr",{months:"Rêbendan_Sibat_Adar_Nîsan_Gulan_Hezîran_Tîrmeh_Tebax_Îlon_Cotmeh_Mijdar_Berfanbar".split("_"),monthsShort:"Rêb_Sib_Ada_Nîs_Gul_Hez_Tîr_Teb_Îlo_Cot_Mij_Ber".split("_"),monthsParseExact:!0,weekdays:"Yekşem_Duşem_Sêşem_Çarşem_Pêncşem_În_Şemî".split("_"),weekdaysShort:"Yek_Du_Sê_Çar_Pên_În_Şem".split("_"),weekdaysMin:"Ye_Du_Sê_Ça_Pê_În_Şe".split("_"),meridiem:function(e,t,n){return e<12?n?"bn":"BN":n?"pn":"PN"},meridiemParse:/bn|BN|pn|PN/,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM[a] YYYY[an]",LLL:"Do MMMM[a] YYYY[an] HH:mm",LLLL:"dddd, Do MMMM[a] YYYY[an] HH:mm",ll:"Do MMM[.] YYYY[an]",lll:"Do MMM[.] YYYY[an] HH:mm",llll:"ddd[.], Do MMM[.] YYYY[an] HH:mm"},calendar:{sameDay:"[Îro di saet] LT [de]",nextDay:"[Sibê di saet] LT [de]",nextWeek:"dddd [di saet] LT [de]",lastDay:"[Duh di saet] LT [de]",lastWeek:"dddd[a borî di saet] LT [de]",sameElse:"L"},relativeTime:{future:"di %s de",past:"berî %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,w:t,ww:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(?:yê|ê|\.)/,ordinal:function(e,t){var n=t.toLowerCase();return n.includes("w")||n.includes("m")?e+".":e+function(e){var t=(e=""+e).substring(e.length-1),n=e.length>1?e.substring(e.length-2):"";return 12==n||13==n||"2"!=t&&"3"!=t&&"50"!=n&&"70"!=t&&"80"!=t?"ê":"yê"}(e)},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,o){var s=e+" ";return 1===e?s+n(0,t,i[0],o):t?s+(r(e)?a(i)[1]:a(i)[0]):o?s+a(i)[1]:s+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"én time",hh:"%d timer",d:"én dag",dd:"%d dager",w:"én uke",ww:"%d uker",M:"én måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^(maart|mrt\.?)$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^(maart|mrt\.?)$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],d:["jedan dan","jednog dana"],dd:["dan","dana","dana"],M:["jedan mesec","jednog meseca"],MM:["mesec","meseca","meseci"],y:["jednu godinu","jedne godine"],yy:["godinu","godine","godina"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,o=t.words[r];return 1===r.length?"y"===r&&n?"jedna godina":a||n?o[0]:o[1]:(i=t.correctGrammaticalCase(e,o),"yy"===r&&n&&"godinu"===i?e+" godina":e+" "+i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једног минута"],mm:["минут","минута","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],d:["један дан","једног дана"],dd:["дан","дана","дана"],M:["један месец","једног месеца"],MM:["месец","месеца","месеци"],y:["једну годину","једне године"],yy:["годину","године","година"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,o=t.words[r];return 1===r.length?"y"===r&&n?"једна година":a||n?o[0]:o[1]:(i=t.correctGrammaticalCase(e,o),"yy"===r&&n&&"годину"===i?e+" година":e+" "+i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pzt_Sal_Çar_Per_Cum_Cmt".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
function t(e,t,n){var r,a;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";
//! moment.js locale configuration
e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){(function(e){function n(e,t){for(var n=0,r=e.length-1;r>=0;r--){var a=e[r];"."===a?e.splice(r,1):".."===a?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var n=[],r=0;r<e.length;r++)t(e[r],r,e)&&n.push(e[r]);return n}t.resolve=function(){for(var t="",a=!1,i=arguments.length-1;i>=-1&&!a;i--){var o=i>=0?arguments[i]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(t=o+"/"+t,a="/"===o.charAt(0))}return(a?"/":"")+(t=n(r(t.split("/"),(function(e){return!!e})),!a).join("/"))||"."},t.normalize=function(e){var i=t.isAbsolute(e),o="/"===a(e,-1);return(e=n(r(e.split("/"),(function(e){return!!e})),!i).join("/"))||i||(e="."),e&&o&&(e+="/"),(i?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(r(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},t.relative=function(e,n){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var a=r(e.split("/")),i=r(n.split("/")),o=Math.min(a.length,i.length),s=o,u=0;u<o;u++)if(a[u]!==i[u]){s=u;break}var l=[];for(u=s;u<a.length;u++)l.push("..");return(l=l.concat(i.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),n=47===t,r=-1,a=!0,i=e.length-1;i>=1;--i)if(47===(t=e.charCodeAt(i))){if(!a){r=i;break}}else a=!1;return-1===r?n?"/":".":n&&1===r?"/":e.slice(0,r)},t.basename=function(e,t){var n=function(e){"string"!=typeof e&&(e+="");var t,n=0,r=-1,a=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!a){n=t+1;break}}else-1===r&&(a=!1,r=t+1);return-1===r?"":e.slice(n,r)}(e);return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,n=0,r=-1,a=!0,i=0,o=e.length-1;o>=0;--o){var s=e.charCodeAt(o);if(47!==s)-1===r&&(a=!1,r=o+1),46===s?-1===t?t=o:1!==i&&(i=1):-1!==t&&(i=-1);else if(!a){n=o+1;break}}return-1===t||-1===r||0===i||1===i&&t===r-1&&t===n+1?"":e.slice(t,r)};var a="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(13))},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=97&&t<=122||t>=65&&t<=90}},function(e,t,n){"use strict";e.exports={position:!0,gfm:!0,commonmark:!1,footnotes:!1,pedantic:!1,blocks:n(310)}},function(e,t,n){"use strict";e.exports=function(e){var t,n=0,a=0,i=e.charAt(n),o={};for(;i in r;)a+=t=r[i],t>1&&(a=Math.floor(a/t)*t),o[a]=n,i=e.charAt(++n);return{indent:a,stops:o}};var r={" ":1,"\t":4}},function(e,t,n){"use strict";var r="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\u0000-\\u0020]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",a="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";t.openCloseTag=new RegExp("^(?:"+r+"|"+a+")"),t.tag=new RegExp("^(?:"+r+"|"+a+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Za-z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)")},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("<",t)}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("[",t),r=e.indexOf("![",t);if(-1===r)return n;return n<r?n:r}},function(e,t,n){e.exports=n(350)()},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(35);function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,r(a.key),a)}}e.exports=function(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(15).default,a=n(221);e.exports=function(e,t){if(t&&("object"==r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return a(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(222);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&r(e,t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,a,i,o,s,u,l,d,c){switch(n){case 1:if(0===d&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===l)return r+"/*|*/";break;case 3:switch(l){case 102:case 112:return e(a[0]+r),"";default:return r+(0===c?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";t.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},function(e,t,n){e.exports=n(228)},function(e,t,n){"use strict";class r extends Error{constructor(){super("Throttled function aborted"),this.name="AbortError"}}e.exports=({limit:e,interval:t,strict:n})=>{if(!Number.isFinite(e))throw new TypeError("Expected `limit` to be a finite number");if(!Number.isFinite(t))throw new TypeError("Expected `interval` to be a finite number");const a=new Map;let i=0,o=0;const s=[];const u=n?function(){const n=Date.now();if(s.length<e)return s.push(n),0;const r=s.shift()+t;return n>=r?(s.push(n),0):(s.push(r),r-n)}:function(){const n=Date.now();return n-i>t?(o=1,i=n,0):(o<e?o++:(i+=t,o=1),i-n)};return e=>{const t=function(...n){if(!t.isEnabled)return(async()=>e.apply(this,n))();let r;return new Promise((t,i)=>{r=setTimeout(()=>{t(e.apply(this,n)),a.delete(r)},u()),a.set(r,i)})};return t.abort=()=>{for(const e of a.keys())clearTimeout(e),a.get(e)(new r);a.clear(),s.splice(0,s.length)},t.isEnabled=!0,t}},e.exports.AbortError=r},function(e,t,n){"use strict";var r=n(244),a=n(273),i=n(24);e.exports={formats:i,parse:a,stringify:r}},function(e,t){function n(e,t){var n=[],r=[];return null==t&&(t=function(e,t){return n[0]===t?"[Circular ~]":"[Circular ~."+r.slice(0,n.indexOf(t)).join(".")+"]"}),function(a,i){if(n.length>0){var o=n.indexOf(this);~o?n.splice(o+1):n.push(this),~o?r.splice(o,1/0,a):r.push(a),~n.indexOf(i)&&(i=t.call(this,a,i))}else n.push(i);return null==e?i:e.call(this,a,i)}}(e.exports=function(e,t,r,a){return JSON.stringify(e,n(t,a),r)}).getSerialize=n},function(e,t,n){!function(e){"use strict";var t=Function.prototype.toString,n=Object.create,r=Object.prototype.toString,a=function(){function e(){this._keys=[],this._values=[]}return e.prototype.has=function(e){return!!~this._keys.indexOf(e)},e.prototype.get=function(e){return this._values[this._keys.indexOf(e)]},e.prototype.set=function(e,t){this._keys.push(e),this._values.push(t)},e}(),i="undefined"!=typeof WeakMap?function(){return new WeakMap}:function(){return new a};function o(e){if(!e)return n(null);var r=e.constructor;if(r===Object)return e===Object.prototype?{}:n(e);if(r&&~t.call(r).indexOf("[native code]"))try{return new r}catch(e){}return n(e)}var s="g"===/test/g.flags?function(e){return e.flags}:function(e){var t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t};function u(e){var t=r.call(e);return t.substring(8,t.length-1)}var l="undefined"!=typeof Symbol?function(e){return e[Symbol.toStringTag]||u(e)}:u,d=Object.defineProperty,c=Object.getOwnPropertyDescriptor,f=Object.getOwnPropertyNames,m=Object.getOwnPropertySymbols,_=Object.prototype,p=_.hasOwnProperty,h=_.propertyIsEnumerable,y="function"==typeof m,g=y?function(e){return f(e).concat(m(e))}:f;function M(e,t,n){for(var r=g(e),a=0,i=r.length,o=void 0,s=void 0;a<i;++a)if("callee"!==(o=r[a])&&"caller"!==o)if(s=c(e,o)){s.get||s.set||(s.value=n.copier(s.value,n));try{d(t,o,s)}catch(e){t[o]=s.value}}else t[o]=n.copier(e[o],n);return t}function v(e,t){return e.slice(0)}function b(e,t){var n=new t.Constructor;return t.cache.set(e,n),e.forEach((function(e,r){n.set(r,t.copier(e,t))})),n}var L=y?function(e,t){var n=o(t.prototype);for(var r in t.cache.set(e,n),e)p.call(e,r)&&(n[r]=t.copier(e[r],t));for(var a=m(e),i=0,s=a.length,u=void 0;i<s;++i)u=a[i],h.call(e,u)&&(n[u]=t.copier(e[u],t));return n}:function(e,t){var n=o(t.prototype);for(var r in t.cache.set(e,n),e)p.call(e,r)&&(n[r]=t.copier(e[r],t));return n};function k(e,t){return new t.Constructor(e.valueOf())}function w(e,t){return e}function Y(e,t){var n=new t.Constructor;return t.cache.set(e,n),e.forEach((function(e){n.add(t.copier(e,t))})),n}var T=Array.isArray,D=Object.assign,S=Object.getPrototypeOf||function(e){return e.__proto__},x={array:function(e,t){var n=new t.Constructor;t.cache.set(e,n);for(var r=0,a=e.length;r<a;++r)n[r]=t.copier(e[r],t);return n},arrayBuffer:v,blob:function(e,t){return e.slice(0,e.size,e.type)},dataView:function(e,t){return new t.Constructor(v(e.buffer))},date:function(e,t){return new t.Constructor(e.getTime())},error:w,map:b,object:L,regExp:function(e,t){var n=new t.Constructor(e.source,s(e));return n.lastIndex=e.lastIndex,n},set:Y},j=D({},x,{array:function(e,t){var n=new t.Constructor;return t.cache.set(e,n),M(e,n,t)},map:function(e,t){return M(e,b(e,t),t)},object:function(e,t){var n=o(t.prototype);return t.cache.set(e,n),M(e,n,t)},set:function(e,t){return M(e,Y(e,t),t)}});function O(e){var t=function(e){return{Arguments:e.object,Array:e.array,ArrayBuffer:e.arrayBuffer,Blob:e.blob,Boolean:k,DataView:e.dataView,Date:e.date,Error:e.error,Float32Array:e.arrayBuffer,Float64Array:e.arrayBuffer,Int8Array:e.arrayBuffer,Int16Array:e.arrayBuffer,Int32Array:e.arrayBuffer,Map:e.map,Number:k,Object:e.object,Promise:w,RegExp:e.regExp,Set:e.set,String:k,WeakMap:w,WeakSet:w,Uint8Array:e.arrayBuffer,Uint8ClampedArray:e.arrayBuffer,Uint16Array:e.arrayBuffer,Uint32Array:e.arrayBuffer,Uint64Array:e.arrayBuffer}}(D({},x,e)),n=t.Array,r=t.Object;function a(e,a){if(a.prototype=a.Constructor=void 0,!e||"object"!=typeof e)return e;if(a.cache.has(e))return a.cache.get(e);if(a.prototype=S(e),a.Constructor=a.prototype&&a.prototype.constructor,!a.Constructor||a.Constructor===Object)return r(e,a);if(T(e))return n(e,a);var i=t[l(e)];return i?i(e,a):"function"==typeof e.then?e:r(e,a)}return function(e){return a(e,{Constructor:void 0,cache:i(),copier:a,prototype:void 0})}}function E(e){return O(D({},j,e))}var P=E({}),H=O({});e.copyStrict=P,e.createCopier=O,e.createStrictCopier=E,e.default=H,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,n){"use strict";function r(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var a=n(8),i=n(281),o=n(294),s=n(203),u=n(352),l=n(354),d=n(355),c=n(356),f=n(357),m=n(358),_=n(359),p=n(360),h=n(361),y=Object.keys(p),g=function(e){var t=e.source||e.children||"",n=e.parserOptions;if(e.allowedTypes&&e.disallowedTypes)throw new Error("Only one of `allowedTypes` and `disallowedTypes` should be defined");var r=a(p,e.renderers),s=[[o,n]].concat(e.plugins||[]).reduce(M,i()),_=s.parse(t),g=a(e,{renderers:r,definitions:m(_)}),v=function(e){var t=[f,u()],n=e.disallowedTypes;e.allowedTypes&&(n=y.filter((function(t){return"root"!==t&&-1===e.allowedTypes.indexOf(t)})));var r=e.unwrapDisallowed?"unwrap":"remove";n&&n.length>0&&t.push(d.ofType(n,r));e.allowNode&&t.push(d.ifNotMatch(e.allowNode,r));var a=!e.escapeHtml&&!e.skipHtml,i=(e.astPlugins||[]).some((function(e){return(Array.isArray(e)?e[0]:e).identity===h.HtmlParser}));a&&!i&&t.push(l);return e.astPlugins?t.concat(e.astPlugins):t}(e),b=s.runSync(_),L=v.reduce((function(e,t){return t(e,g)}),b);return c(L,g)};function M(e,t){return Array.isArray(t)?e.use.apply(e,r(t)):e.use(t)}g.defaultProps={renderers:{},escapeHtml:!0,skipHtml:!1,sourcePos:!1,rawSourcePos:!1,transformLinkUri:_,astPlugins:[],plugins:[],parserOptions:{}},g.propTypes={className:s.string,source:s.string,children:s.string,sourcePos:s.bool,rawSourcePos:s.bool,escapeHtml:s.bool,skipHtml:s.bool,allowNode:s.func,allowedTypes:s.arrayOf(s.oneOf(y)),disallowedTypes:s.arrayOf(s.oneOf(y)),transformLinkUri:s.oneOfType([s.func,s.bool]),linkTarget:s.oneOfType([s.func,s.string]),transformImageUri:s.func,astPlugins:s.arrayOf(s.func),unwrapDisallowed:s.bool,renderers:s.object,plugins:s.array,parserOptions:s.object},g.types=y,g.renderers=p,g.uriTransformer=_,e.exports=g},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(362)},function(e,t,n){"use strict";var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,a=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));t.a=a},function(e,t,n){"use strict";function r(e){return Object.prototype.toString.call(e).slice(8,-1)}function a(e){return"Undefined"===r(e)}function i(e){return"Null"===r(e)}function o(e){return"Object"===r(e)&&(e.constructor===Object&&Object.getPrototypeOf(e)===Object.prototype)}function s(e){return"Array"===r(e)}function u(e){return"Symbol"===r(e)}var l,d,c,f,m;l=i,d=a;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function _(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var i=arguments[t],o=0,s=i.length;o<s;o++,a++)r[a]=i[o];return r}function p(e,t,n,r){var a=r.propertyIsEnumerable(t)?"enumerable":"nonenumerable";"enumerable"===a&&(e[t]=n),"nonenumerable"===a&&Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0,configurable:!0})}function h(e,t,n){if(!o(t))return n&&s(n)&&n.forEach((function(n){t=n(e,t)})),t;var r={};o(e)&&(r=_(Object.getOwnPropertyNames(e),Object.getOwnPropertySymbols(e)).reduce((function(n,r){var a=e[r];return(!u(r)&&!Object.getOwnPropertyNames(t).includes(r)||u(r)&&!Object.getOwnPropertySymbols(t).includes(r))&&p(n,r,a,e),n}),{}));return _(Object.getOwnPropertyNames(t),Object.getOwnPropertySymbols(t)).reduce((function(r,a){var i=t[a],u=o(e)?e[a]:void 0;return n&&s(n)&&n.forEach((function(e){i=e(u,i)})),void 0!==u&&o(i)&&(i=h(u,i,n)),p(r,a,i,t),r}),r)}t.a=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=null,a=e;return o(e)&&e.extensions&&1===Object.keys(e).length&&(a={},r=e.extensions),t.reduce((function(e,t){return h(e,t,r)}),a)}},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(34),a="function"==typeof Symbol&&Symbol.for,i=a?Symbol.for("react.element"):60103,o=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,l=a?Symbol.for("react.profiler"):60114,d=a?Symbol.for("react.provider"):60109,c=a?Symbol.for("react.context"):60110,f=a?Symbol.for("react.forward_ref"):60112,m=a?Symbol.for("react.suspense"):60113,_=a?Symbol.for("react.memo"):60115,p=a?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},M={};function v(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||g}function b(){}function L(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||g}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var k=L.prototype=new b;k.constructor=L,r(k,v.prototype),k.isPureReactComponent=!0;var w={current:null},Y=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function D(e,t,n){var r,a={},o=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)Y.call(t,r)&&!T.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var l=Array(u),d=0;d<u;d++)l[d]=arguments[d+2];a.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:i,type:e,key:o,ref:s,props:a,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var x=/\/+/g,j=[];function O(e,t,n,r){if(j.length){var a=j.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function E(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function P(e,t,n){return null==e?0:function e(t,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case o:u=!0}}if(u)return r(a,t,""===n?"."+H(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var d=n+H(s=t[l],l);u+=e(s,d,r,a)}else if(null===t||"object"!=typeof t?d=null:d="function"==typeof(d=h&&t[h]||t["@@iterator"])?d:null,"function"==typeof d)for(t=d.call(t),l=0;!(s=t.next()).done;)u+=e(s=s.value,d=n+H(s,l++),r,a);else if("object"===s)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function H(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function C(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,(function(e){return e})):null!=e&&(S(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(x,"$&/")+"/")+n)),r.push(e))}function N(e,t,n,r,a){var i="";null!=n&&(i=(""+n).replace(x,"$&/")+"/"),P(e,C,t=O(t,i,r,a)),E(t)}var F={current:null};function W(){var e=F.current;if(null===e)throw Error(y(321));return e}var I={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;P(e,A,t=O(null,null,t,n)),E(t)},count:function(e){return P(e,(function(){return null}),null)},toArray:function(e){var t=[];return N(e,t,null,(function(e){return e})),t},only:function(e){if(!S(e))throw Error(y(143));return e}},t.Component=v,t.Fragment=s,t.Profiler=l,t.PureComponent=L,t.StrictMode=u,t.Suspense=m,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var a=r({},e.props),o=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=w.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(d in t)Y.call(t,d)&&!T.hasOwnProperty(d)&&(a[d]=void 0===t[d]&&void 0!==l?l[d]:t[d])}var d=arguments.length-2;if(1===d)a.children=n;else if(1<d){l=Array(d);for(var c=0;c<d;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:i,type:e.type,key:o,ref:s,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},t.createElement=D,t.createFactory=function(e){var t=D.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:p,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:_,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return W().useCallback(e,t)},t.useContext=function(e,t){return W().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return W().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return W().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return W().useLayoutEffect(e,t)},t.useMemo=function(e,t){return W().useMemo(e,t)},t.useReducer=function(e,t,n){return W().useReducer(e,t,n)},t.useRef=function(e){return W().useRef(e)},t.useState=function(e){return W().useState(e)},t.version="16.14.0"},function(e,t,n){var r=n(15).default;e.exports=function(e,t){if("object"!=r(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,t||"default");if("object"!=r(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t,r)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,d=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,m=r?Symbol.for("react.forward_ref"):60112,_=r?Symbol.for("react.suspense"):60113,p=r?Symbol.for("react.suspense_list"):60120,h=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,M=r?Symbol.for("react.fundamental"):60117,v=r?Symbol.for("react.responder"):60118,b=r?Symbol.for("react.scope"):60119;function L(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case c:case f:case o:case u:case s:case _:return e;default:switch(e=e&&e.$$typeof){case d:case m:case y:case h:case l:return e;default:return t}}case i:return t}}}function k(e){return L(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=d,t.ContextProvider=l,t.Element=a,t.ForwardRef=m,t.Fragment=o,t.Lazy=y,t.Memo=h,t.Portal=i,t.Profiler=u,t.StrictMode=s,t.Suspense=_,t.isAsyncMode=function(e){return k(e)||L(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return L(e)===d},t.isContextProvider=function(e){return L(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return L(e)===m},t.isFragment=function(e){return L(e)===o},t.isLazy=function(e){return L(e)===y},t.isMemo=function(e){return L(e)===h},t.isPortal=function(e){return L(e)===i},t.isProfiler=function(e){return L(e)===u},t.isStrictMode=function(e){return L(e)===s},t.isSuspense=function(e){return L(e)===_},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===u||e===s||e===_||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===h||e.$$typeof===l||e.$$typeof===d||e.$$typeof===m||e.$$typeof===M||e.$$typeof===v||e.$$typeof===b||e.$$typeof===g)},t.typeOf=L},function(e,t,n){var r=n(36),a=n(37),i=n(225),o=n(39),s=n(40),u=n(226),l=n(227);function d(){"use strict";var t=a(),n=t.m(d),c=(Object.getPrototypeOf?Object.getPrototypeOf(n):n.__proto__).constructor;function f(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===c||"GeneratorFunction"===(t.displayName||t.name))}var m={throw:1,return:2,break:3,continue:3};function _(e){var t,n;return function(r){t||(t={stop:function(){return n(r.a,2)},catch:function(){return r.v},abrupt:function(e,t){return n(r.a,m[e],t)},delegateYield:function(e,a,i){return t.resultName=a,n(r.d,l(e),i)},finish:function(e){return n(r.f,e)}},n=function(e,n,a){r.p=t.prev,r.n=t.next;try{return e(n,a)}finally{t.next=r.n}}),t.resultName&&(t[t.resultName]=r.v,t.resultName=void 0),t.sent=r.v,t.next=r.n;try{return e.call(this,t)}finally{r.p=t.prev,r.n=t.next}}}return(e.exports=d=function(){return{wrap:function(e,n,r,a){return t.w(_(e),n,r,a&&a.reverse())},isGeneratorFunction:f,mark:t.m,awrap:function(e,t){return new r(e,t)},AsyncIterator:s,async:function(e,t,n,r,a){return(f(t)?o:i)(_(e),t,n,r,a)},keys:u,values:l}},e.exports.__esModule=!0,e.exports.default=e.exports)()}e.exports=d,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(39);e.exports=function(e,t,n,a,i){var o=r(e,t,n,a,i);return o.next().then((function(e){return e.done?e.value:o.next()}))},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){var t=Object(e),n=[];for(var r in t)n.unshift(r);return function e(){for(;n.length;)if((r=n.pop())in t)return e.value=r,e.done=!1,e;return e.done=!0,e}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(15).default;e.exports=function(e){if(null!=e){var t=e["function"==typeof Symbol&&Symbol.iterator||"@@iterator"],n=0;if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length))return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}throw new TypeError(r(e)+" is not iterable")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(5),a=n(41),i=n(229),o=n(47);function s(e){var t=new i(e),n=a(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=s(n(44));u.Axios=i,u.create=function(e){return s(o(u.defaults,e))},u.Cancel=n(48),u.CancelToken=n(242),u.isCancel=n(43),u.all=function(e){return Promise.all(e)},u.spread=n(243),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(5),a=n(42),i=n(230),o=n(231),s=n(47);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[o,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=s(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(5);function a(){this.handlers=[]}a.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=a},function(e,t,n){"use strict";var r=n(5),a=n(232),i=n(43),o=n(44);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||o.adapter)(e).then((function(t){return s(e),t.data=a(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(46);e.exports=function(e,t,n){var a=n.config.validateStatus;n.status&&a&&!a(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,a){return e.config=t,n&&(e.code=n),e.request=r,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,a,i,o){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(a)&&s.push("path="+a),r.isString(i)&&s.push("domain="+i),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(238),a=n(239);e.exports=function(e,t){return e&&!r(t)?a(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(5),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,o={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(o[t]&&a.indexOf(t)>=0)return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([n]):o[t]?o[t]+", "+n:n}})),o):o}},function(e,t,n){"use strict";var r=n(5);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function a(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=a(window.location.href),function(t){var n=r.isString(t)?a(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(48);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.source=function(){var e;return{token:new a((function(t){e=t})),cancel:e}},e.exports=a},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(245),a=n(58),i=n(24),o=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},u=Array.isArray,l=Array.prototype.push,d=function(e,t){l.apply(e,u(t)?t:[t])},c=Date.prototype.toISOString,f=i.default,m={addQueryPrefix:!1,allowDots:!1,allowEmptyArrays:!1,arrayFormat:"indices",charset:"utf-8",charsetSentinel:!1,commaRoundTrip:!1,delimiter:"&",encode:!0,encodeDotInKeys:!1,encoder:a.encode,encodeValuesOnly:!1,filter:void 0,format:f,formatter:i.formatters[f],indices:!1,serializeDate:function(e){return c.call(e)},skipNulls:!1,strictNullHandling:!1},_={},p=function e(t,n,i,o,s,l,c,f,p,h,y,g,M,v,b,L,k,w){for(var Y,T=t,D=w,S=0,x=!1;void 0!==(D=D.get(_))&&!x;){var j=D.get(t);if(S+=1,void 0!==j){if(j===S)throw new RangeError("Cyclic object value");x=!0}void 0===D.get(_)&&(S=0)}if("function"==typeof h?T=h(n,T):T instanceof Date?T=M(T):"comma"===i&&u(T)&&(T=a.maybeMap(T,(function(e){return e instanceof Date?M(e):e}))),null===T){if(l)return p&&!L?p(n,m.encoder,k,"key",v):n;T=""}if("string"==typeof(Y=T)||"number"==typeof Y||"boolean"==typeof Y||"symbol"==typeof Y||"bigint"==typeof Y||a.isBuffer(T))return p?[b(L?n:p(n,m.encoder,k,"key",v))+"="+b(p(T,m.encoder,k,"value",v))]:[b(n)+"="+b(String(T))];var O,E=[];if(void 0===T)return E;if("comma"===i&&u(T))L&&p&&(T=a.maybeMap(T,p)),O=[{value:T.length>0?T.join(",")||null:void 0}];else if(u(h))O=h;else{var P=Object.keys(T);O=y?P.sort(y):P}var H=f?String(n).replace(/\./g,"%2E"):String(n),A=o&&u(T)&&1===T.length?H+"[]":H;if(s&&u(T)&&0===T.length)return A+"[]";for(var C=0;C<O.length;++C){var N=O[C],F="object"==typeof N&&N&&void 0!==N.value?N.value:T[N];if(!c||null!==F){var W=g&&f?String(N).replace(/\./g,"%2E"):String(N),I=u(T)?"function"==typeof i?i(A,W):A:A+(g?"."+W:"["+W+"]");w.set(t,S);var z=r();z.set(_,w),d(E,e(F,I,i,o,s,l,c,f,"comma"===i&&L&&u(T)?null:p,h,y,g,M,v,b,L,k,z))}}return E};e.exports=function(e,t){var n,a=e,l=function(e){if(!e)return m;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.encodeDotInKeys&&"boolean"!=typeof e.encodeDotInKeys)throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||m.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!o.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r,a=i.formatters[n],l=m.filter;if(("function"==typeof e.filter||u(e.filter))&&(l=e.filter),r=e.arrayFormat in s?e.arrayFormat:"indices"in e?e.indices?"indices":"repeat":m.arrayFormat,"commaRoundTrip"in e&&"boolean"!=typeof e.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var d=void 0===e.allowDots?!0===e.encodeDotInKeys||m.allowDots:!!e.allowDots;return{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:m.addQueryPrefix,allowDots:d,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:m.allowEmptyArrays,arrayFormat:r,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:m.charsetSentinel,commaRoundTrip:!!e.commaRoundTrip,delimiter:void 0===e.delimiter?m.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:m.encode,encodeDotInKeys:"boolean"==typeof e.encodeDotInKeys?e.encodeDotInKeys:m.encodeDotInKeys,encoder:"function"==typeof e.encoder?e.encoder:m.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:m.encodeValuesOnly,filter:l,format:n,formatter:a,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:m.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:m.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:m.strictNullHandling}}(t);"function"==typeof l.filter?a=(0,l.filter)("",a):u(l.filter)&&(n=l.filter);var c=[];if("object"!=typeof a||null===a)return"";var f=s[l.arrayFormat],_="comma"===f&&l.commaRoundTrip;n||(n=Object.keys(a)),l.sort&&n.sort(l.sort);for(var h=r(),y=0;y<n.length;++y){var g=n[y],M=a[g];l.skipNulls&&null===M||d(c,p(M,g,f,_,l.allowEmptyArrays,l.strictNullHandling,l.skipNulls,l.encodeDotInKeys,l.encode?l.encoder:null,l.filter,l.sort,l.allowDots,l.serializeDate,l.format,l.formatter,l.encodeValuesOnly,l.charset,h))}var v=c.join(l.delimiter),b=!0===l.addQueryPrefix?"?":"";return l.charsetSentinel&&("iso-8859-1"===l.charset?b+="utf8=%26%2310003%3B&":b+="utf8=%E2%9C%93&"),v.length>0?b+v:""}},function(e,t,n){"use strict";var r=n(11),a=n(16),i=n(247),o=n(50),s=n(272)||o||i;e.exports=function(){var e,t={assert:function(e){if(!t.has(e))throw new r("Side channel does not contain "+a(e))},delete:function(t){return!!e&&e.delete(t)},get:function(t){return e&&e.get(t)},has:function(t){return!!e&&e.has(t)},set:function(t,n){e||(e=s()),e.set(t,n)}};return t}},function(e,t){},function(e,t,n){"use strict";var r=n(16),a=n(11),i=function(e,t,n){for(var r,a=e;null!=(r=a.next);a=r)if(r.key===t)return a.next=r.next,n||(r.next=e.next,e.next=r),r};e.exports=function(){var e,t={assert:function(e){if(!t.has(e))throw new a("Side channel does not contain "+r(e))},delete:function(t){var n=e&&e.next,r=function(e,t){if(e)return i(e,t,!0)}(e,t);return r&&n&&n===r&&(e=void 0),!!r},get:function(t){return function(e,t){if(e){var n=i(e,t);return n&&n.value}}(e,t)},has:function(t){return function(e,t){return!!e&&!!i(e,t)}(e,t)},set:function(t,n){e||(e={next:void 0}),function(e,t,n){var r=i(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(e,t,n)}};return t}},function(e,t,n){"use strict";e.exports=Error},function(e,t,n){"use strict";e.exports=EvalError},function(e,t,n){"use strict";e.exports=RangeError},function(e,t,n){"use strict";e.exports=ReferenceError},function(e,t,n){"use strict";e.exports=SyntaxError},function(e,t,n){"use strict";e.exports=URIError},function(e,t,n){"use strict";e.exports=Math.abs},function(e,t,n){"use strict";e.exports=Math.floor},function(e,t,n){"use strict";e.exports=Math.max},function(e,t,n){"use strict";e.exports=Math.min},function(e,t,n){"use strict";e.exports=Math.pow},function(e,t,n){"use strict";e.exports=Math.round},function(e,t,n){"use strict";var r=n(261);e.exports=function(e){return r(e)||0===e?e:e<0?-1:1}},function(e,t,n){"use strict";e.exports=Number.isNaN||function(e){return e!=e}},function(e,t,n){"use strict";e.exports=Object.getOwnPropertyDescriptor},function(e,t,n){"use strict";var r=Object.defineProperty||!1;if(r)try{r({},"a",{value:1})}catch(e){r=!1}e.exports=r},function(e,t,n){"use strict";var r="undefined"!=typeof Symbol&&Symbol,a=n(265);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&a())))}},function(e,t,n){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(var r in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var a=Object.getOwnPropertySymbols(e);if(1!==a.length||a[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,t);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},function(e,t,n){"use strict";var r=n(53),a=n(54),i=n(267);e.exports=r?function(e){return r(e)}:a?function(e){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("getProto: not an object");return a(e)}:i?function(e){return i(e)}:null},function(e,t,n){"use strict";var r,a=n(55),i=n(52);try{r=[].__proto__===Array.prototype}catch(e){if(!e||"object"!=typeof e||!("code"in e)||"ERR_PROTO_ACCESS"!==e.code)throw e}var o=!!r&&i&&i(Object.prototype,"__proto__"),s=Object,u=s.getPrototypeOf;e.exports=o&&"function"==typeof o.get?a([o.get]):"function"==typeof u&&function(e){return u(null==e?e:s(e))}},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",a=Object.prototype.toString,i=Math.max,o=function(e,t){for(var n=[],r=0;r<e.length;r+=1)n[r]=e[r];for(var a=0;a<t.length;a+=1)n[a+e.length]=t[a];return n},s=function(e,t){for(var n=[],r=t||0,a=0;r<e.length;r+=1,a+=1)n[a]=e[r];return n},u=function(e,t){for(var n="",r=0;r<e.length;r+=1)n+=e[r],r+1<e.length&&(n+=t);return n};e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==a.apply(t))throw new TypeError(r+t);for(var n,l=s(arguments,1),d=function(){if(this instanceof n){var r=t.apply(this,o(l,arguments));return Object(r)===r?r:this}return t.apply(e,o(l,arguments))},c=i(0,t.length-l.length),f=[],m=0;m<c;m++)f[m]="$"+m;if(n=Function("binder","return function ("+u(f,",")+"){ return binder.apply(this,arguments); }")(d),t.prototype){var _=function(){};_.prototype=t.prototype,n.prototype=new _,_.prototype=null}return n}},function(e,t,n){"use strict";var r=n(17),a=n(56),i=n(23),o=n(270);e.exports=o||r.call(i,a)},function(e,t,n){"use strict";e.exports="undefined"!=typeof Reflect&&Reflect&&Reflect.apply},function(e,t,n){"use strict";var r=Function.prototype.call,a=Object.prototype.hasOwnProperty,i=n(17);e.exports=i.call(r,a)},function(e,t,n){"use strict";var r=n(22),a=n(57),i=n(16),o=n(50),s=n(11),u=r("%WeakMap%",!0),l=a("WeakMap.prototype.get",!0),d=a("WeakMap.prototype.set",!0),c=a("WeakMap.prototype.has",!0),f=a("WeakMap.prototype.delete",!0);e.exports=u?function(){var e,t,n={assert:function(e){if(!n.has(e))throw new s("Side channel does not contain "+i(e))},delete:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(e)return f(e,n)}else if(o&&t)return t.delete(n);return!1},get:function(n){return u&&n&&("object"==typeof n||"function"==typeof n)&&e?l(e,n):t&&t.get(n)},has:function(n){return u&&n&&("object"==typeof n||"function"==typeof n)&&e?c(e,n):!!t&&t.has(n)},set:function(n,r){u&&n&&("object"==typeof n||"function"==typeof n)?(e||(e=new u),d(e,n,r)):o&&(t||(t=o()),t.set(n,r))}};return n}:o},function(e,t,n){"use strict";var r=n(58),a=Object.prototype.hasOwnProperty,i=Array.isArray,o={allowDots:!1,allowEmptyArrays:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decodeDotInKeys:!1,decoder:r.decode,delimiter:"&",depth:5,duplicates:"combine",ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictDepth:!1,strictNullHandling:!1,throwOnLimitExceeded:!1},s=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},u=function(e,t,n){if(e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1)return e.split(",");if(t.throwOnLimitExceeded&&n>=t.arrayLimit)throw new RangeError("Array limit exceeded. Only "+t.arrayLimit+" element"+(1===t.arrayLimit?"":"s")+" allowed in an array.");return e},l=function(e,t,n,i){if(e){var o=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,l=n.depth>0&&/(\[[^[\]]*])/.exec(o),d=l?o.slice(0,l.index):o,c=[];if(d){if(!n.plainObjects&&a.call(Object.prototype,d)&&!n.allowPrototypes)return;c.push(d)}for(var f=0;n.depth>0&&null!==(l=s.exec(o))&&f<n.depth;){if(f+=1,!n.plainObjects&&a.call(Object.prototype,l[1].slice(1,-1))&&!n.allowPrototypes)return;c.push(l[1])}if(l){if(!0===n.strictDepth)throw new RangeError("Input depth exceeded depth option of "+n.depth+" and strictDepth is true");c.push("["+o.slice(l.index)+"]")}return function(e,t,n,a){var i=0;if(e.length>0&&"[]"===e[e.length-1]){var o=e.slice(0,-1).join("");i=Array.isArray(t)&&t[o]?t[o].length:0}for(var s=a?t:u(t,n,i),l=e.length-1;l>=0;--l){var d,c=e[l];if("[]"===c&&n.parseArrays)d=n.allowEmptyArrays&&(""===s||n.strictNullHandling&&null===s)?[]:r.combine([],s);else{d=n.plainObjects?{__proto__:null}:{};var f="["===c.charAt(0)&&"]"===c.charAt(c.length-1)?c.slice(1,-1):c,m=n.decodeDotInKeys?f.replace(/%2E/g,"."):f,_=parseInt(m,10);n.parseArrays||""!==m?!isNaN(_)&&c!==m&&String(_)===m&&_>=0&&n.parseArrays&&_<=n.arrayLimit?(d=[])[_]=s:"__proto__"!==m&&(d[m]=s):d={0:s}}s=d}return s}(c,t,n,i)}};e.exports=function(e,t){var n=function(e){if(!e)return o;if(void 0!==e.allowEmptyArrays&&"boolean"!=typeof e.allowEmptyArrays)throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(void 0!==e.decodeDotInKeys&&"boolean"!=typeof e.decodeDotInKeys)throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");if(void 0!==e.throwOnLimitExceeded&&"boolean"!=typeof e.throwOnLimitExceeded)throw new TypeError("`throwOnLimitExceeded` option must be a boolean");var t=void 0===e.charset?o.charset:e.charset,n=void 0===e.duplicates?o.duplicates:e.duplicates;if("combine"!==n&&"first"!==n&&"last"!==n)throw new TypeError("The duplicates option must be either combine, first, or last");return{allowDots:void 0===e.allowDots?!0===e.decodeDotInKeys||o.allowDots:!!e.allowDots,allowEmptyArrays:"boolean"==typeof e.allowEmptyArrays?!!e.allowEmptyArrays:o.allowEmptyArrays,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:o.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:o.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:o.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:o.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:o.comma,decodeDotInKeys:"boolean"==typeof e.decodeDotInKeys?e.decodeDotInKeys:o.decodeDotInKeys,decoder:"function"==typeof e.decoder?e.decoder:o.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:o.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:o.depth,duplicates:n,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:o.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:o.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:o.plainObjects,strictDepth:"boolean"==typeof e.strictDepth?!!e.strictDepth:o.strictDepth,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:o.strictNullHandling,throwOnLimitExceeded:"boolean"==typeof e.throwOnLimitExceeded&&e.throwOnLimitExceeded}}(t);if(""===e||null==e)return n.plainObjects?{__proto__:null}:{};for(var d="string"==typeof e?function(e,t){var n={__proto__:null},l=t.ignoreQueryPrefix?e.replace(/^\?/,""):e;l=l.replace(/%5B/gi,"[").replace(/%5D/gi,"]");var d=t.parameterLimit===1/0?void 0:t.parameterLimit,c=l.split(t.delimiter,t.throwOnLimitExceeded?d+1:d);if(t.throwOnLimitExceeded&&c.length>d)throw new RangeError("Parameter limit exceeded. Only "+d+" parameter"+(1===d?"":"s")+" allowed.");var f,m=-1,_=t.charset;if(t.charsetSentinel)for(f=0;f<c.length;++f)0===c[f].indexOf("utf8=")&&("utf8=%E2%9C%93"===c[f]?_="utf-8":"utf8=%26%2310003%3B"===c[f]&&(_="iso-8859-1"),m=f,f=c.length);for(f=0;f<c.length;++f)if(f!==m){var p,h,y=c[f],g=y.indexOf("]="),M=-1===g?y.indexOf("="):g+1;-1===M?(p=t.decoder(y,o.decoder,_,"key"),h=t.strictNullHandling?null:""):(p=t.decoder(y.slice(0,M),o.decoder,_,"key"),h=r.maybeMap(u(y.slice(M+1),t,i(n[p])?n[p].length:0),(function(e){return t.decoder(e,o.decoder,_,"value")}))),h&&t.interpretNumericEntities&&"iso-8859-1"===_&&(h=s(String(h))),y.indexOf("[]=")>-1&&(h=i(h)?[h]:h);var v=a.call(n,p);v&&"combine"===t.duplicates?n[p]=r.combine(n[p],h):v&&"last"!==t.duplicates||(n[p]=h)}return n}(e,n):e,c=n.plainObjects?{__proto__:null}:{},f=Object.keys(d),m=0;m<f.length;++m){var _=f[m],p=l(_,d[_],n,"string"==typeof e);c=r.merge(c,p,n)}return!0===n.allowSparse?c:r.compact(c)}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./af":59,"./af.js":59,"./ar":60,"./ar-dz":61,"./ar-dz.js":61,"./ar-kw":62,"./ar-kw.js":62,"./ar-ly":63,"./ar-ly.js":63,"./ar-ma":64,"./ar-ma.js":64,"./ar-ps":65,"./ar-ps.js":65,"./ar-sa":66,"./ar-sa.js":66,"./ar-tn":67,"./ar-tn.js":67,"./ar.js":60,"./az":68,"./az.js":68,"./be":69,"./be.js":69,"./bg":70,"./bg.js":70,"./bm":71,"./bm.js":71,"./bn":72,"./bn-bd":73,"./bn-bd.js":73,"./bn.js":72,"./bo":74,"./bo.js":74,"./br":75,"./br.js":75,"./bs":76,"./bs.js":76,"./ca":77,"./ca.js":77,"./cs":78,"./cs.js":78,"./cv":79,"./cv.js":79,"./cy":80,"./cy.js":80,"./da":81,"./da.js":81,"./de":82,"./de-at":83,"./de-at.js":83,"./de-ch":84,"./de-ch.js":84,"./de.js":82,"./dv":85,"./dv.js":85,"./el":86,"./el.js":86,"./en-au":87,"./en-au.js":87,"./en-ca":88,"./en-ca.js":88,"./en-gb":89,"./en-gb.js":89,"./en-ie":90,"./en-ie.js":90,"./en-il":91,"./en-il.js":91,"./en-in":92,"./en-in.js":92,"./en-nz":93,"./en-nz.js":93,"./en-sg":94,"./en-sg.js":94,"./eo":95,"./eo.js":95,"./es":96,"./es-do":97,"./es-do.js":97,"./es-mx":98,"./es-mx.js":98,"./es-us":99,"./es-us.js":99,"./es.js":96,"./et":100,"./et.js":100,"./eu":101,"./eu.js":101,"./fa":102,"./fa.js":102,"./fi":103,"./fi.js":103,"./fil":104,"./fil.js":104,"./fo":105,"./fo.js":105,"./fr":106,"./fr-ca":107,"./fr-ca.js":107,"./fr-ch":108,"./fr-ch.js":108,"./fr.js":106,"./fy":109,"./fy.js":109,"./ga":110,"./ga.js":110,"./gd":111,"./gd.js":111,"./gl":112,"./gl.js":112,"./gom-deva":113,"./gom-deva.js":113,"./gom-latn":114,"./gom-latn.js":114,"./gu":115,"./gu.js":115,"./he":116,"./he.js":116,"./hi":117,"./hi.js":117,"./hr":118,"./hr.js":118,"./hu":119,"./hu.js":119,"./hy-am":120,"./hy-am.js":120,"./id":121,"./id.js":121,"./is":122,"./is.js":122,"./it":123,"./it-ch":124,"./it-ch.js":124,"./it.js":123,"./ja":125,"./ja.js":125,"./jv":126,"./jv.js":126,"./ka":127,"./ka.js":127,"./kk":128,"./kk.js":128,"./km":129,"./km.js":129,"./kn":130,"./kn.js":130,"./ko":131,"./ko.js":131,"./ku":132,"./ku-kmr":133,"./ku-kmr.js":133,"./ku.js":132,"./ky":134,"./ky.js":134,"./lb":135,"./lb.js":135,"./lo":136,"./lo.js":136,"./lt":137,"./lt.js":137,"./lv":138,"./lv.js":138,"./me":139,"./me.js":139,"./mi":140,"./mi.js":140,"./mk":141,"./mk.js":141,"./ml":142,"./ml.js":142,"./mn":143,"./mn.js":143,"./mr":144,"./mr.js":144,"./ms":145,"./ms-my":146,"./ms-my.js":146,"./ms.js":145,"./mt":147,"./mt.js":147,"./my":148,"./my.js":148,"./nb":149,"./nb.js":149,"./ne":150,"./ne.js":150,"./nl":151,"./nl-be":152,"./nl-be.js":152,"./nl.js":151,"./nn":153,"./nn.js":153,"./oc-lnc":154,"./oc-lnc.js":154,"./pa-in":155,"./pa-in.js":155,"./pl":156,"./pl.js":156,"./pt":157,"./pt-br":158,"./pt-br.js":158,"./pt.js":157,"./ro":159,"./ro.js":159,"./ru":160,"./ru.js":160,"./sd":161,"./sd.js":161,"./se":162,"./se.js":162,"./si":163,"./si.js":163,"./sk":164,"./sk.js":164,"./sl":165,"./sl.js":165,"./sq":166,"./sq.js":166,"./sr":167,"./sr-cyrl":168,"./sr-cyrl.js":168,"./sr.js":167,"./ss":169,"./ss.js":169,"./sv":170,"./sv.js":170,"./sw":171,"./sw.js":171,"./ta":172,"./ta.js":172,"./te":173,"./te.js":173,"./tet":174,"./tet.js":174,"./tg":175,"./tg.js":175,"./th":176,"./th.js":176,"./tk":177,"./tk.js":177,"./tl-ph":178,"./tl-ph.js":178,"./tlh":179,"./tlh.js":179,"./tr":180,"./tr.js":180,"./tzl":181,"./tzl.js":181,"./tzm":182,"./tzm-latn":183,"./tzm-latn.js":183,"./tzm.js":182,"./ug-cn":184,"./ug-cn.js":184,"./uk":185,"./uk.js":185,"./ur":186,"./ur.js":186,"./uz":187,"./uz-latn":188,"./uz-latn.js":188,"./uz.js":187,"./vi":189,"./vi.js":189,"./x-pseudo":190,"./x-pseudo.js":190,"./yo":191,"./yo.js":191,"./zh-cn":192,"./zh-cn.js":192,"./zh-hk":193,"./zh-hk.js":193,"./zh-mo":194,"./zh-mo.js":194,"./zh-tw":195,"./zh-tw.js":195};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=275},function(e,t){e.exports=function(e){if(Array.isArray(e))return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,i,o,s=[],u=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(e){l=!0,a=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(l)throw a}}return s}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(279);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";var r=n(282),a=n(283),i=n(284),o=n(290),s=n(292),u=n(293);e.exports=function e(){var t=[],n=o(),g={},M=!1,v=-1;return b.data=function(e,t){if(s(e))return 2===arguments.length?(p("data",M),g[e]=t,b):d.call(g,e)&&g[e]||null;if(e)return p("data",M),g=e,b;return g},b.freeze=L,b.attachers=t,b.use=function(e){var n;if(p("use",M),null==e);else if("function"==typeof e)s.apply(null,arguments);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?o(e):a(e)}n&&(g.settings=r(g.settings||{},n));return b;function a(e){o(e.plugins),e.settings&&(n=r(n||{},e.settings))}function i(e){if("function"==typeof e)s(e);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?s.apply(null,e):a(e)}}function o(e){var t,n;if(null==e);else{if("object"!=typeof e||!("length"in e))throw new Error("Expected a list of plugins, not `"+e+"`");for(t=e.length,n=-1;++n<t;)i(e[n])}}function s(e,n){var a=k(e);a?(u(a[1])&&u(n)&&(n=r(a[1],n)),a[1]=n):t.push(l.call(arguments))}},b.parse=function(e){var t,n=i(e);if(L(),m("parse",t=b.Parser),f(t))return new t(String(n),n).parse();return t(String(n),n)},b.stringify=function(e,t){var n,r=i(t);if(L(),_("stringify",n=b.Compiler),h(e),f(n))return new n(e,r).compile();return n(e,r)},b.run=w,b.runSync=function(e,t){var n,r=!1;return w(e,t,(function(e,t){r=!0,a(e),n=t})),y("runSync","run",r),n},b.process=Y,b.processSync=function(e){var t,n=!1;return L(),m("processSync",b.Parser),_("processSync",b.Compiler),Y(t=i(e),(function(e){n=!0,a(e)})),y("processSync","process",n),t},b;function b(){for(var n=e(),a=t.length,i=-1;++i<a;)n.use.apply(null,t[i]);return n.data(r(!0,{},g)),n}function L(){var e,r,a,i;if(M)return b;for(;++v<t.length;)r=(e=t[v])[0],null,!1!==(a=e[1])&&(!0===a&&(e[1]=void 0),"function"==typeof(i=r.apply(b,e.slice(1)))&&n.use(i));return M=!0,v=1/0,b}function k(e){for(var n,r=t.length,a=-1;++a<r;)if((n=t[a])[0]===e)return n}function w(e,t,r){if(h(e),L(),r||"function"!=typeof t||(r=t,t=null),!r)return new Promise(a);function a(a,o){n.run(e,i(t),(function(t,n,i){n=n||e,t?o(t):a?a(n):r(null,n,i)}))}a(null,r)}function Y(e,t){if(L(),m("process",b.Parser),_("process",b.Compiler),!t)return new Promise(n);function n(n,r){var a=i(e);c.run(b,{file:a},(function(e){e?r(e):n?n(a):t(null,a)}))}n(null,t)}}().freeze();var l=[].slice,d={}.hasOwnProperty,c=o().use((function(e,t){t.tree=e.parse(t.file)})).use((function(e,t,n){e.run(t.tree,t.file,(function(e,r,a){e?n(e):(t.tree=r,t.file=a,n())}))})).use((function(e,t){t.file.contents=e.stringify(t.tree,t.file)}));function f(e){return"function"==typeof e&&function(e){var t;for(t in e)return!0;return!1}(e.prototype)}function m(e,t){if("function"!=typeof t)throw new Error("Cannot `"+e+"` without `Parser`")}function _(e,t){if("function"!=typeof t)throw new Error("Cannot `"+e+"` without `Compiler`")}function p(e,t){if(t)throw new Error(["Cannot invoke `"+e+"` on a frozen processor.\nCreate a new ","processor first, by invoking it: use `processor()` instead of ","`processor`."].join(""))}function h(e){if(!e||!s(e.type))throw new Error("Expected node, got `"+e+"`")}function y(e,t,n){if(!n)throw new Error("`"+e+"` finished async. Use `"+t+"` instead")}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=Object.defineProperty,o=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===a.call(e)},u=function(e){if(!e||"[object Object]"!==a.call(e))return!1;var t,n=r.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&r.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!n&&!i)return!1;for(t in e);return void 0===t||r.call(e,t)},l=function(e,t){i&&"__proto__"===t.name?i(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},d=function(e,t){if("__proto__"===t){if(!r.call(e,t))return;if(o)return o(e,t).value}return e[t]};e.exports=function e(){var t,n,r,a,i,o,c=arguments[0],f=1,m=arguments.length,_=!1;for("boolean"==typeof c&&(_=c,c=arguments[1]||{},f=2),(null==c||"object"!=typeof c&&"function"!=typeof c)&&(c={});f<m;++f)if(null!=(t=arguments[f]))for(n in t)r=d(c,n),c!==(a=d(t,n))&&(_&&a&&(u(a)||(i=s(a)))?(i?(i=!1,o=r&&s(r)?r:[]):o=r&&u(r)?r:{},l(c,{name:n,newValue:e(_,o,a)})):void 0!==a&&l(c,{name:n,newValue:a}));return c}},function(e,t,n){"use strict";e.exports=function(e){if(e)throw e}},function(e,t,n){"use strict";var r=n(285),a=n(287);e.exports=a;var i=a.prototype;function o(e,t,n){var a=this.path,i=new r(e,t,n);return a&&(i.name=a+":"+i.name,i.file=a),i.fatal=!1,this.messages.push(i),i}i.message=o,i.info=function(){var e=this.message.apply(this,arguments);return e.fatal=null,e},i.fail=function(){var e=this.message.apply(this,arguments);throw e.fatal=!0,e},i.warn=o},function(e,t,n){"use strict";var r=n(286);function a(){}e.exports=o,a.prototype=Error.prototype,o.prototype=new a;var i=o.prototype;function o(e,t,n){var a,i,o;"string"==typeof t&&(n=t,t=null),a=function(e){var t,n=[null,null];"string"==typeof e&&(-1===(t=e.indexOf(":"))?n[1]=e:(n[0]=e.slice(0,t),n[1]=e.slice(t+1)));return n}(n),i=r(t)||"1:1",o={start:{line:null,column:null},end:{line:null,column:null}},t&&t.position&&(t=t.position),t&&(t.start?(o=t,t=t.start):o.start=t),e.stack&&(this.stack=e.stack,e=e.message),this.message=e,this.name=i,this.reason=e,this.line=t?t.line:null,this.column=t?t.column:null,this.location=o,this.source=a[0],this.ruleId=a[1]}i.file="",i.name="",i.reason="",i.message="",i.stack="",i.fatal=null,i.column=null,i.line=null},function(e,t,n){"use strict";var r={}.hasOwnProperty;function a(e){return e&&"object"==typeof e||(e={}),o(e.line)+":"+o(e.column)}function i(e){return e&&"object"==typeof e||(e={}),a(e.start)+"-"+a(e.end)}function o(e){return e&&"number"==typeof e?e:1}e.exports=function(e){if(!e||"object"!=typeof e)return null;if(r.call(e,"position")||r.call(e,"type"))return i(e.position);if(r.call(e,"start")||r.call(e,"end"))return i(e);if(r.call(e,"line")||r.call(e,"column"))return a(e);return null}},function(e,t,n){"use strict";(function(t){var r=n(196),a=n(288),i=n(289);e.exports=l;var o={}.hasOwnProperty,s=l.prototype;s.toString=function(e){var t=this.contents||"";return i(t)?t.toString(e):String(t)};var u=["history","path","basename","stem","extname","dirname"];function l(e){var n,r,a;if(e){if("string"==typeof e||i(e))e={contents:e};else if("message"in e&&"messages"in e)return e}else e={};if(!(this instanceof l))return new l(e);for(this.data={},this.messages=[],this.history=[],this.cwd=t.cwd(),r=-1,a=u.length;++r<a;)n=u[r],o.call(e,n)&&(this[n]=e[n]);for(n in e)-1===u.indexOf(n)&&(this[n]=e[n])}function d(e,t){if(-1!==e.indexOf(r.sep))throw new Error("`"+t+"` cannot be a path: did not expect `"+r.sep+"`")}function c(e,t){if(!e)throw new Error("`"+t+"` cannot be empty")}function f(e,t){if(!e)throw new Error("Setting `"+t+"` requires `path` to be set too")}Object.defineProperty(s,"path",{get:function(){return this.history[this.history.length-1]},set:function(e){c(e,"path"),e!==this.path&&this.history.push(e)}}),Object.defineProperty(s,"dirname",{get:function(){return"string"==typeof this.path?r.dirname(this.path):void 0},set:function(e){f(this.path,"dirname"),this.path=r.join(e||"",this.basename)}}),Object.defineProperty(s,"basename",{get:function(){return"string"==typeof this.path?r.basename(this.path):void 0},set:function(e){c(e,"basename"),d(e,"basename"),this.path=r.join(this.dirname||"",e)}}),Object.defineProperty(s,"extname",{get:function(){return"string"==typeof this.path?r.extname(this.path):void 0},set:function(e){var t=e||"";if(d(t,"extname"),f(this.path,"extname"),t){if("."!==t.charAt(0))throw new Error("`extname` must start with `.`");if(-1!==t.indexOf(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=a(this.path,t)}}),Object.defineProperty(s,"stem",{get:function(){return"string"==typeof this.path?r.basename(this.path,this.extname):void 0},set:function(e){c(e,"stem"),d(e,"stem"),this.path=r.join(this.dirname||"",e+(this.extname||""))}})}).call(this,n(13))},function(e,t,n){"use strict";var r=n(196);e.exports=function(e,t){if("string"!=typeof e)return e;if(0===e.length)return e;var n=r.basename(e,r.extname(e))+t;return r.join(r.dirname(e),n)}},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(291);e.exports=i,i.wrap=r;var a=[].slice;function i(){var e=[],t={run:function(){var t=-1,n=a.call(arguments,0,-1),i=arguments[arguments.length-1];if("function"!=typeof i)throw new Error("Expected function as last argument, not "+i);function o(s){var u=e[++t],l=a.call(arguments,0),d=l.slice(1),c=n.length,f=-1;if(s)i(s);else{for(;++f<c;)null!==d[f]&&void 0!==d[f]||(d[f]=n[f]);n=d,u?r(u,o).apply(null,n):i.apply(null,[null].concat(n))}}o.apply(null,[null].concat(n))},use:function(n){if("function"!=typeof n)throw new Error("Expected `fn` to be a function, not "+n);return e.push(n),t}};return t}},function(e,t,n){"use strict";var r=[].slice;e.exports=function(e,t){var n;return function(){var t,o=r.call(arguments,0),s=e.length>o.length;s&&o.push(a);try{t=e.apply(null,o)}catch(e){if(s&&n)throw e;return a(e)}s||(t&&"function"==typeof t.then?t.then(i,a):t instanceof Error?a(t):i(t))};function a(){n||(n=!0,t.apply(null,arguments))}function i(e){a(null,e)}}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return"[object String]"===n.call(e)}},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){var t;return"[object Object]"===r.call(e)&&(null===(t=Object.getPrototypeOf(e))||t===Object.getPrototypeOf({}))}},function(e,t,n){"use strict";var r=n(295),a=n(8),i=n(297);function o(e){var t=r(i);t.prototype.options=a(t.prototype.options,this.data("settings"),e),this.Parser=t}e.exports=o,o.Parser=i},function(e,t,n){"use strict";var r=n(8),a=n(296);e.exports=function(e){var t,n,i;for(n in a(s,e),a(o,s),t=s.prototype)(i=t[n])&&"object"==typeof i&&(t[n]="concat"in i?i.concat():r(i));return s;function o(t){return e.apply(this,t)}function s(){return this instanceof s?e.apply(this,arguments):new o(arguments)}}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},function(e,t,n){"use strict";var r=n(8),a=n(298),i=n(299),o=n(300),s=n(301),u=n(307);function l(e,t){this.file=t,this.offset={},this.options=r(this.options),this.setOptions({}),this.inList=!1,this.inBlock=!1,this.inLink=!1,this.atStart=!0,this.toOffset=i(t).toOffset,this.unescape=o(this,"escape"),this.decode=s(this)}e.exports=l;var d=l.prototype;function c(e){var t,n=[];for(t in e)n.push(t);return n}d.setOptions=n(308),d.parse=n(311),d.options=n(198),d.exitStart=a("atStart",!0),d.enterList=a("inList",!1),d.enterLink=a("inLink",!1),d.enterBlock=a("inBlock",!1),d.interruptParagraph=[["thematicBreak"],["atxHeading"],["fencedCode"],["blockquote"],["html"],["setextHeading",{commonmark:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.interruptList=[["atxHeading",{pedantic:!1}],["fencedCode",{pedantic:!1}],["thematicBreak",{pedantic:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.interruptBlockquote=[["indentedCode",{commonmark:!0}],["fencedCode",{commonmark:!0}],["atxHeading",{commonmark:!0}],["setextHeading",{commonmark:!0}],["thematicBreak",{commonmark:!0}],["html",{commonmark:!0}],["list",{commonmark:!0}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],d.blockTokenizers={newline:n(315),indentedCode:n(316),fencedCode:n(317),blockquote:n(318),atxHeading:n(319),thematicBreak:n(320),list:n(321),setextHeading:n(323),html:n(324),footnote:n(325),definition:n(327),table:n(328),paragraph:n(329)},d.inlineTokenizers={escape:n(330),autoLink:n(332),url:n(333),html:n(335),link:n(336),reference:n(337),strong:n(338),emphasis:n(340),deletion:n(343),code:n(345),break:n(347),text:n(349)},d.blockMethods=c(d.blockTokenizers),d.inlineMethods=c(d.inlineTokenizers),d.tokenizeBlock=u("block"),d.tokenizeInline=u("inline"),d.tokenizeFactory=u},function(e,t,n){"use strict";e.exports=function(e,t,n){return function(){var r=n||this,a=r[e];return r[e]=!t,function(){r[e]=a}}}},function(e,t,n){"use strict";function r(e){return function(t){var n=-1,r=e.length;if(t<0)return{};for(;++n<r;)if(e[n]>t)return{line:n+1,column:t-(e[n-1]||0)+1,offset:t};return{}}}function a(e){return function(t){var n=t&&t.line,r=t&&t.column;if(!isNaN(n)&&!isNaN(r)&&n-1 in e)return(e[n-2]||0)+r-1||0;return-1}}e.exports=function(e){var t=function(e){var t=[],n=e.indexOf("\n");for(;-1!==n;)t.push(n+1),n=e.indexOf("\n",n+1);return t.push(e.length+1),t}(String(e));return{toPosition:r(t),toOffset:a(t)}}},function(e,t,n){"use strict";e.exports=function(e,t){return function(n){var r,a=0,i=n.indexOf("\\"),o=e[t],s=[];for(;-1!==i;)s.push(n.slice(a,i)),a=i+1,(r=n.charAt(a))&&-1!==o.indexOf(r)||s.push("\\"),i=n.indexOf("\\",a);return s.push(n.slice(a)),s.join("")}}},function(e,t,n){"use strict";var r=n(8),a=n(25);e.exports=function(e){return i.raw=function(e,i,o){return a(e,r(o,{position:t(i),warning:n}))},i;function t(t){for(var n=e.offset,r=t.line,a=[];++r&&r in n;)a.push((n[r]||0)+1);return{start:t,indent:a}}function n(t,n,r){3!==r&&e.file.message(t,n)}function i(r,i,o){a(r,{position:t(i),warning:n,text:o,reference:o,textContext:e,referenceContext:e})}}},function(e){e.exports=JSON.parse('{"AElig":"Æ","AMP":"&","Aacute":"Á","Acirc":"Â","Agrave":"À","Aring":"Å","Atilde":"Ã","Auml":"Ä","COPY":"©","Ccedil":"Ç","ETH":"Ð","Eacute":"É","Ecirc":"Ê","Egrave":"È","Euml":"Ë","GT":">","Iacute":"Í","Icirc":"Î","Igrave":"Ì","Iuml":"Ï","LT":"<","Ntilde":"Ñ","Oacute":"Ó","Ocirc":"Ô","Ograve":"Ò","Oslash":"Ø","Otilde":"Õ","Ouml":"Ö","QUOT":"\\"","REG":"®","THORN":"Þ","Uacute":"Ú","Ucirc":"Û","Ugrave":"Ù","Uuml":"Ü","Yacute":"Ý","aacute":"á","acirc":"â","acute":"´","aelig":"æ","agrave":"à","amp":"&","aring":"å","atilde":"ã","auml":"ä","brvbar":"¦","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","curren":"¤","deg":"°","divide":"÷","eacute":"é","ecirc":"ê","egrave":"è","eth":"ð","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","iacute":"í","icirc":"î","iexcl":"¡","igrave":"ì","iquest":"¿","iuml":"ï","laquo":"«","lt":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","ntilde":"ñ","oacute":"ó","ocirc":"ô","ograve":"ò","ordf":"ª","ordm":"º","oslash":"ø","otilde":"õ","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","raquo":"»","reg":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","thorn":"þ","times":"×","uacute":"ú","ucirc":"û","ugrave":"ù","uml":"¨","uuml":"ü","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e){e.exports=JSON.parse('{"0":"�","128":"€","130":"‚","131":"ƒ","132":"„","133":"…","134":"†","135":"‡","136":"ˆ","137":"‰","138":"Š","139":"‹","140":"Œ","142":"Ž","145":"‘","146":"’","147":"“","148":"”","149":"•","150":"–","151":"—","152":"˜","153":"™","154":"š","155":"›","156":"œ","158":"ž","159":"Ÿ"}')},function(e,t,n){"use strict";e.exports=function(e){var t="string"==typeof e?e.charCodeAt(0):e;return t>=97&&t<=102||t>=65&&t<=70||t>=48&&t<=57}},function(e,t,n){"use strict";var r=n(197),a=n(18);e.exports=function(e){return r(e)||a(e)}},function(e,t,n){"use strict";var r;e.exports=function(e){var t,n="&"+e+";";if((r=r||document.createElement("i")).innerHTML=n,59===(t=r.textContent).charCodeAt(t.length-1)&&"semi"!==e)return!1;return t!==n&&t}},function(e,t,n){"use strict";e.exports=function(e){return function(t,n){var i,o,s,u,l,d,c=this,f=c.offset,m=[],_=c[e+"Methods"],p=c[e+"Tokenizers"],h=n.line,y=n.column;if(!t)return m;b.now=M,b.file=c.file,g("");for(;t;){for(i=-1,o=_.length,l=!1;++i<o&&(u=_[i],!(s=p[u])||s.onlyAtStart&&!c.atStart||s.notInList&&c.inList||s.notInBlock&&c.inBlock||s.notInLink&&c.inLink||(d=t.length,s.apply(c,[b,t]),!(l=d!==t.length))););l||c.file.fail(new Error("Infinite loop"),b.now())}return c.eof=M(),m;function g(e){for(var t=-1,n=e.indexOf("\n");-1!==n;)h++,t=n,n=e.indexOf("\n",n+1);-1===t?y+=e.length:y=e.length-t,h in f&&(-1!==t?y+=f[h]:y<=f[h]&&(y=f[h]+1))}function M(){var e={line:h,column:y};return e.offset=c.toOffset(e),e}function v(e){this.start=e,this.end=M()}function b(e){var n,i=function(){var e=[],t=h+1;return function(){for(var n=h+1;t<n;)e.push((f[t]||0)+1),t++;return e}}(),o=(n=M(),function(e,t){var r=e.position,a=r?r.start:n,i=[],o=r&&r.end.line,s=n.line;if(e.position=new v(a),r&&t&&r.indent){if(i=r.indent,o<s){for(;++o<s;)i.push((f[o]||0)+1);i.push(n.column)}t=i.concat(t)}return e.position.indent=t||[],e}),s=M();return function(e){t.substring(0,e.length)!==e&&c.file.fail(new Error("Incorrectly eaten value: please report this warning on http://git.io/vg5Ft"),M())}(e),u.reset=l,l.test=d,u.test=d,t=t.substring(e.length),g(e),i=i(),u;function u(e,t){return o(function(e,t){var n=t?t.children:m,i=n[n.length-1];return i&&e.type===i.type&&e.type in r&&a(i)&&a(e)&&(e=r[e.type].call(c,i,e)),e!==i&&n.push(e),c.atStart&&0!==m.length&&c.exitStart(),e}(o(e),t),i)}function l(){var n=u.apply(null,arguments);return h=s.line,y=s.column,t=e+t,n}function d(){var n=o({});return h=s.line,y=s.column,t=e+t,n.position}}}};var r={text:function(e,t){return e.value+=t.value,e},blockquote:function(e,t){if(this.options.commonmark)return t;return e.children=e.children.concat(t.children),e}};function a(e){var t,n;return"text"!==e.type||!e.position||(t=e.position.start,n=e.position.end,t.line!==n.line||n.column-t.column===e.value.length)}},function(e,t,n){"use strict";var r=n(8),a=n(309),i=n(198);e.exports=function(e){var t,n,o=this.options;if(null==e)e={};else{if("object"!=typeof e)throw new Error("Invalid value `"+e+"` for setting `options`");e=r(e)}for(t in i){if(null==(n=e[t])&&(n=o[t]),"blocks"!==t&&"boolean"!=typeof n||"blocks"===t&&"object"!=typeof n)throw new Error("Invalid value `"+n+"` for setting `options."+t+"`");e[t]=n}return this.options=e,this.escape=a(e),this}},function(e,t,n){"use strict";e.exports=o;var r=["\\","`","*","{","}","[","]","(",")","#","+","-",".","!","_",">"],a=r.concat(["~","|"]),i=a.concat(["\n",'"',"$","%","&","'",",","/",":",";","<","=","?","@","^"]);function o(e){var t=e||{};return t.commonmark?i:t.gfm?a:r}o.default=r,o.gfm=a,o.commonmark=i},function(e){e.exports=JSON.parse('["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","pre","section","source","title","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]')},function(e,t,n){"use strict";var r=n(8),a=n(312);e.exports=function(){var e,t=String(this.file),n={line:1,column:1,offset:0},o=r(n);65279===(t=t.replace(i,"\n")).charCodeAt(0)&&(t=t.slice(1),o.column++,o.offset++);e={type:"root",children:this.tokenizeBlock(t,o),position:{start:n,end:this.eof||r(n)}},this.options.position||a(e,!0);return e};var i=/\r\n|\r/g},function(e,t,n){"use strict";var r=n(19);function a(e){delete e.position}function i(e){e.position=void 0}e.exports=function(e,t){return r(e,t?a:i),e}},function(e,t,n){"use strict";e.exports=a;var r=n(314);function a(e,t,n,a){var o;function s(e,r,u){var l,d=[];return(t&&!o(e,r,u[u.length-1]||null)||!1!==(d=i(n(e,u)))[0])&&e.children&&"skip"!==d[0]&&!1===(l=i(function(e,t){var n,r=a?-1:1,i=(a?e.length:-1)+r;for(;i>-1&&i<e.length;){if(!1===(n=s(e[i],i,t))[0])return n;i="number"==typeof n[1]?n[1]:i+r}}(e.children,u.concat(e))))[0]?l:d}"function"==typeof t&&"function"!=typeof n&&(a=n,n=t,t=null),o=r(t),s(e,null,[])}function i(e){return null!==e&&"object"==typeof e&&"length"in e?e:"number"==typeof e?[!0,e]:[e]}a.CONTINUE=!0,a.SKIP="skip",a.EXIT=!1},function(e,t,n){"use strict";function r(e){if("string"==typeof e)return function(e){return function(t){return Boolean(t&&t.type===e)}}(e);if(null==e)return o;if("object"==typeof e)return("length"in e?i:a)(e);if("function"==typeof e)return e;throw new Error("Expected function, string, or object as test")}function a(e){return function(t){var n;for(n in e)if(t[n]!==e[n])return!1;return!0}}function i(e){var t=function(e){for(var t=[],n=e.length,a=-1;++a<n;)t[a]=r(e[a]);return t}(e),n=t.length;return function(){var e=-1;for(;++e<n;)if(t[e].apply(this,arguments))return!0;return!1}}function o(){return!0}e.exports=r},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var a,i,o,s,u=t.charAt(0);if("\n"!==u)return;if(n)return!0;s=1,a=t.length,i=u,o="";for(;s<a&&(u=t.charAt(s),r(u));)o+=u,"\n"===u&&(i+=o,o=""),s++;e(i)}},function(e,t,n){"use strict";var r=n(26),a=n(27);e.exports=function(e,t,n){var r,o,s,u=-1,l=t.length,d="",c="",f="",m="";for(;++u<l;)if(r=t.charAt(u),s)if(s=!1,d+=f,c+=m,f="",m="","\n"===r)f=r,m=r;else for(d+=r,c+=r;++u<l;){if(!(r=t.charAt(u))||"\n"===r){m=r,f=r;break}d+=r,c+=r}else if(" "===r&&t.charAt(u+1)===r&&t.charAt(u+2)===r&&t.charAt(u+3)===r)f+=i,u+=3,s=!0;else if("\t"===r)f+=r,s=!0;else{for(o="";"\t"===r||" "===r;)o+=r,r=t.charAt(++u);if("\n"!==r)break;f+=o+r,m+=r}if(c)return!!n||e(d)({type:"code",lang:null,value:a(c)})};var i=r(" ",4)},function(e,t,n){"use strict";var r=n(27);e.exports=function(e,t,n){var a,i,o,s,u,l,d,c,f,m,_,p=this.options,h=t.length+1,y=0,g="";if(!p.gfm)return;for(;y<h&&(" "===(o=t.charAt(y))||"\t"===o);)g+=o,y++;if(m=y,"~"!==(o=t.charAt(y))&&"`"!==o)return;y++,i=o,a=1,g+=o;for(;y<h&&(o=t.charAt(y))===i;)g+=o,a++,y++;if(a<3)return;for(;y<h&&(" "===(o=t.charAt(y))||"\t"===o);)g+=o,y++;s="",u="";for(;y<h&&"\n"!==(o=t.charAt(y))&&"~"!==o&&"`"!==o;)" "===o||"\t"===o?u+=o:(s+=u+o,u=""),y++;if((o=t.charAt(y))&&"\n"!==o)return;if(n)return!0;(_=e.now()).column+=g.length,_.offset+=g.length,g+=s,s=this.decode.raw(this.unescape(s),_),u&&(g+=u);u="",c="",f="",l="",d="";for(;y<h;)if(o=t.charAt(y),l+=c,d+=f,c="",f="","\n"===o){for(l?(c+=o,f+=o):g+=o,u="",y++;y<h&&" "===(o=t.charAt(y));)u+=o,y++;if(c+=u,f+=u.slice(m),!(u.length>=4)){for(u="";y<h&&(o=t.charAt(y))===i;)u+=o,y++;if(c+=u,f+=u,!(u.length<a)){for(u="";y<h&&(" "===(o=t.charAt(y))||"\t"===o);)c+=o,f+=o,y++;if(!o||"\n"===o)break}}}else l+=o,f+=o,y++;return e(g+=l+c)({type:"code",lang:s||null,value:r(d)})}},function(e,t,n){"use strict";var r=n(12),a=n(28);e.exports=function(e,t,n){var i,o,s,u,l,d,c,f,m,_=this.offset,p=this.blockTokenizers,h=this.interruptBlockquote,y=e.now(),g=y.line,M=t.length,v=[],b=[],L=[],k=0;for(;k<M&&(" "===(o=t.charAt(k))||"\t"===o);)k++;if(">"!==t.charAt(k))return;if(n)return!0;k=0;for(;k<M;){for(u=t.indexOf("\n",k),c=k,f=!1,-1===u&&(u=M);k<M&&(" "===(o=t.charAt(k))||"\t"===o);)k++;if(">"===t.charAt(k)?(k++,f=!0," "===t.charAt(k)&&k++):k=c,l=t.slice(k,u),!f&&!r(l)){k=c;break}if(!f&&(s=t.slice(k),a(h,p,this,[e,s,!0])))break;d=c===k?l:t.slice(c,u),L.push(k-c),v.push(d),b.push(l),k=u+1}k=-1,M=L.length,i=e(v.join("\n"));for(;++k<M;)_[g]=(_[g]||0)+L[k],g++;return m=this.enterBlock(),b=this.tokenizeBlock(b.join("\n"),y),m(),i({type:"blockquote",children:b})}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o=this.options,s=t.length+1,u=-1,l=e.now(),d="",c="";for(;++u<s;){if(" "!==(r=t.charAt(u))&&"\t"!==r){u--;break}d+=r}i=0;for(;++u<=s;){if("#"!==(r=t.charAt(u))){u--;break}d+=r,i++}if(i>6)return;if(!i||!o.pedantic&&"#"===t.charAt(u+1))return;s=t.length+1,a="";for(;++u<s;){if(" "!==(r=t.charAt(u))&&"\t"!==r){u--;break}a+=r}if(!o.pedantic&&0===a.length&&r&&"\n"!==r)return;if(n)return!0;d+=a,a="",c="";for(;++u<s&&(r=t.charAt(u))&&"\n"!==r;)if(" "===r||"\t"===r||"#"===r){for(;" "===r||"\t"===r;)a+=r,r=t.charAt(++u);for(;"#"===r;)a+=r,r=t.charAt(++u);for(;" "===r||"\t"===r;)a+=r,r=t.charAt(++u);u--}else c+=a+r,a="";return l.column+=d.length,l.offset+=d.length,e(d+=c+a)({type:"heading",depth:i,children:this.tokenizeInline(c,l)})}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o,s=-1,u=t.length+1,l="";for(;++s<u&&("\t"===(r=t.charAt(s))||" "===r);)l+=r;if("*"!==r&&"-"!==r&&"_"!==r)return;a=r,l+=r,i=1,o="";for(;++s<u;)if((r=t.charAt(s))===a)i++,l+=o+a,o="";else{if(" "!==r)return i>=3&&(!r||"\n"===r)?(l+=o,!!n||e(l)({type:"thematicBreak"})):void 0;o+=r}}},function(e,t,n){"use strict";var r=n(12),a=n(26),i=n(18),o=n(199),s=n(322),u=n(28);e.exports=function(e,t,n){var a,o,s,l,d,c,f,m,g,M,v,b,L,k,w,Y,T,D,S,x,j,O,E,P,H=this.options.commonmark,A=this.options.pedantic,C=this.blockTokenizers,N=this.interruptList,F=0,W=t.length,I=null,z=0;for(;F<W;){if("\t"===(l=t.charAt(F)))z+=4-z%4;else{if(" "!==l)break;z++}F++}if(z>=4)return;if(l=t.charAt(F),a=H?h:p,!0===_[l])d=l,s=!1;else{for(s=!0,o="";F<W&&(l=t.charAt(F),i(l));)o+=l,F++;if(l=t.charAt(F),!o||!0!==a[l])return;I=parseInt(o,10),d=l}if(" "!==(l=t.charAt(++F))&&"\t"!==l)return;if(n)return!0;F=0,k=[],w=[],Y=[];for(;F<W;){for(c=t.indexOf("\n",F),f=F,m=!1,P=!1,-1===c&&(c=W),E=F+4,z=0;F<W;){if("\t"===(l=t.charAt(F)))z+=4-z%4;else{if(" "!==l)break;z++}F++}if(z>=4&&(P=!0),T&&z>=T.indent&&(P=!0),l=t.charAt(F),g=null,!P){if(!0===_[l])g=l,F++,z++;else{for(o="";F<W&&(l=t.charAt(F),i(l));)o+=l,F++;l=t.charAt(F),F++,o&&!0===a[l]&&(g=l,z+=o.length+1)}if(g)if("\t"===(l=t.charAt(F)))z+=4-z%4,F++;else if(" "===l){for(E=F+4;F<E&&" "===t.charAt(F);)F++,z++;F===E&&" "===t.charAt(F)&&(F-=3,z-=3)}else"\n"!==l&&""!==l&&(g=null)}if(g){if(!A&&d!==g)break;m=!0}else H||P||" "!==t.charAt(f)?H&&T&&(P=z>=T.indent||z>4):P=!0,m=!1,F=f;if(v=t.slice(f,c),M=f===F?v:t.slice(F,c),("*"===g||"_"===g||"-"===g)&&C.thematicBreak.call(this,e,v,!0))break;if(b=L,L=!r(M).length,P&&T)T.value=T.value.concat(Y,v),w=w.concat(Y,v),Y=[];else if(m)0!==Y.length&&(T.value.push(""),T.trail=Y.concat()),T={value:[v],indent:z,trail:[]},k.push(T),w=w.concat(Y,v),Y=[];else if(L){if(b)break;Y.push(v)}else{if(b)break;if(u(N,C,this,[e,v,!0]))break;T.value=T.value.concat(Y,v),w=w.concat(Y,v),Y=[]}F=c+1}j=e(w.join("\n")).reset({type:"list",ordered:s,start:I,loose:null,children:[]}),D=this.enterList(),S=this.enterBlock(),x=!1,F=-1,W=k.length;for(;++F<W;)T=k[F].value.join("\n"),O=e.now(),(T=e(T)(y(this,T,O),j)).loose&&(x=!0),T=k[F].trail.join("\n"),F!==W-1&&(T+="\n"),e(T);return D(),S(),j.loose=x,j};var l=/\n\n(?!\s*$)/,d=/^\[([ \t]|x|X)][ \t]/,c=/^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/,f=/^([ \t]*)([*+-]|\d+[.)])([ \t]+)/,m=/^( {1,4}|\t)?/gm,_={"*":!0,"+":!0,"-":!0},p={".":!0},h={};function y(e,t,n){var r,a,i=e.offset,o=e.options.pedantic?g:M,s=null;return t=o.apply(null,arguments),e.options.gfm&&(r=t.match(d))&&(a=r[0].length,s="x"===r[1].toLowerCase(),i[n.line]+=a,t=t.slice(a)),{type:"listItem",loose:l.test(t)||"\n"===t.charAt(t.length-1),checked:s,children:e.tokenizeBlock(t,n)}}function g(e,t,n){var r=e.offset,a=n.line;return t=t.replace(f,i),a=n.line,t.replace(m,i);function i(e){return r[a]=(r[a]||0)+e.length,a++,""}}function M(e,t,n){var r,i,u,l,d,f,m,_=e.offset,p=n.line;for(l=(t=t.replace(c,(function(e,t,n,o,s){i=t+n+o,u=s,Number(n)<10&&i.length%2==1&&(n=" "+n);return(r=t+a(" ",n.length)+o)+u}))).split("\n"),(d=s(t,o(r).indent).split("\n"))[0]=u,_[p]=(_[p]||0)+i.length,p++,f=0,m=l.length;++f<m;)_[p]=(_[p]||0)+l[f].length-d[f].length,p++;return d.join("\n")}h["."]=!0,h[")"]=!0},function(e,t,n){"use strict";var r=n(12),a=n(26),i=n(199);e.exports=function(e,t){var n,o,s,u,l=e.split("\n"),d=l.length+1,c=1/0,f=[];l.unshift(a(" ",t)+"!");for(;d--;)if(o=i(l[d]),f[d]=o.stops,0!==r(l[d]).length){if(!o.indent){c=1/0;break}o.indent>0&&o.indent<c&&(c=o.indent)}if(c!==1/0)for(d=l.length;d--;){for(s=f[d],n=c;n&&!(n in s);)n--;u=0!==r(l[d]).length&&c&&n!==c?"\t":"",l[d]=u+l[d].slice(n in s?s[n]+1:0)}return l.shift(),l.join("\n")}},function(e,t,n){"use strict";e.exports=function(e,t,n){var a,i,o,s,u,l=e.now(),d=t.length,c=-1,f="";for(;++c<d;){if(" "!==(o=t.charAt(c))||c>=3){c--;break}f+=o}a="",i="";for(;++c<d;){if("\n"===(o=t.charAt(c))){c--;break}" "===o||"\t"===o?i+=o:(a+=i+o,i="")}if(l.column+=f.length,l.offset+=f.length,f+=a+i,o=t.charAt(++c),s=t.charAt(++c),"\n"!==o||!r[s])return;f+=o,i=s,u=r[s];for(;++c<d;){if((o=t.charAt(c))!==s){if("\n"!==o)return;c--;break}i+=o}if(n)return!0;return e(f+i)({type:"heading",depth:u,children:this.tokenizeInline(a,l)})};var r={};r["="]=1,r["-"]=2},function(e,t,n){"use strict";var r=n(200).openCloseTag;e.exports=function(e,t,n){var a,i,o,s,u,l,d,c=this.options.blocks,f=t.length,m=0,_=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Za-z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+c.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(r.source+"\\s*$"),/^$/,!1]];for(;m<f&&("\t"===(s=t.charAt(m))||" "===s);)m++;if("<"!==t.charAt(m))return;a=-1===(a=t.indexOf("\n",m+1))?f:a,i=t.slice(m,a),o=-1,u=_.length;for(;++o<u;)if(_[o][0].test(i)){l=_[o];break}if(!l)return;if(n)return l[2];if(m=a,!l[1].test(i))for(;m<f;){if(a=-1===(a=t.indexOf("\n",m+1))?f:a,i=t.slice(m+1,a),l[1].test(i)){i&&(m=a);break}m=a}return d=t.slice(0,m),e(d)({type:"html",value:d})}},function(e,t,n){"use strict";var r=n(6),a=n(29);e.exports=o,o.notInList=!0,o.notInBlock=!0;var i=/^( {4}|\t)?/gm;function o(e,t,n){var o,s,u,l,d,c,f,m,_,p,h,y,g=this.offset;if(this.options.footnotes){for(o=0,s=t.length,u="",l=e.now(),d=l.line;o<s&&(_=t.charAt(o),r(_));)u+=_,o++;if("["===t.charAt(o)&&"^"===t.charAt(o+1)){for(o=(u+="[^").length,f="";o<s&&"]"!==(_=t.charAt(o));)"\\"===_&&(f+=_,o++,_=t.charAt(o)),f+=_,o++;if(f&&"]"===t.charAt(o)&&":"===t.charAt(o+1)){if(n)return!0;for(p=a(f),o=(u+=f+"]:").length;o<s&&("\t"===(_=t.charAt(o))||" "===_);)u+=_,o++;for(l.column+=u.length,l.offset+=u.length,f="",c="",m="";o<s;){if("\n"===(_=t.charAt(o))){for(m=_,o++;o<s&&"\n"===(_=t.charAt(o));)m+=_,o++;for(f+=m,m="";o<s&&" "===(_=t.charAt(o));)m+=_,o++;if(0===m.length)break;f+=m}f&&(c+=f,f=""),c+=_,o++}return u+=c,c=c.replace(i,(function(e){return g[d]=(g[d]||0)+e.length,d++,""})),h=e(u),y=this.enterBlock(),c=this.tokenizeBlock(c,l),y(),h({type:"footnoteDefinition",identifier:p,children:c})}}}}},function(e,t,n){"use strict";e.exports=function(e){return String(e).replace(/\s+/g," ")}},function(e,t,n){"use strict";var r=n(6),a=n(29);e.exports=i,i.notInList=!0,i.notInBlock=!0;function i(e,t,n){for(var r,i,u,l,d,c,f,m,_=this.options.commonmark,p=0,h=t.length,y="";p<h&&(" "===(l=t.charAt(p))||"\t"===l);)y+=l,p++;if("["===(l=t.charAt(p))){for(p++,y+=l,u="";p<h&&"]"!==(l=t.charAt(p));)"\\"===l&&(u+=l,p++,l=t.charAt(p)),u+=l,p++;if(u&&"]"===t.charAt(p)&&":"===t.charAt(p+1)){for(c=u,p=(y+=u+"]:").length,u="";p<h&&("\t"===(l=t.charAt(p))||" "===l||"\n"===l);)y+=l,p++;if(u="",r=y,"<"===(l=t.charAt(p))){for(p++;p<h&&o(l=t.charAt(p));)u+=l,p++;if((l=t.charAt(p))===o.delimiter)y+="<"+u+l,p++;else{if(_)return;p-=u.length+1,u=""}}if(!u){for(;p<h&&s(l=t.charAt(p));)u+=l,p++;y+=u}if(u){for(f=u,u="";p<h&&("\t"===(l=t.charAt(p))||" "===l||"\n"===l);)u+=l,p++;if(d=null,'"'===(l=t.charAt(p))?d='"':"'"===l?d="'":"("===l&&(d=")"),d){if(!u)return;for(p=(y+=u+l).length,u="";p<h&&(l=t.charAt(p))!==d;){if("\n"===l){if(p++,"\n"===(l=t.charAt(p))||l===d)return;u+="\n"}u+=l,p++}if((l=t.charAt(p))!==d)return;i=y,y+=u+l,p++,m=u,u=""}else u="",p=y.length;for(;p<h&&("\t"===(l=t.charAt(p))||" "===l);)y+=l,p++;return(l=t.charAt(p))&&"\n"!==l?void 0:!!n||(r=e(r).test().end,f=this.decode.raw(this.unescape(f),r,{nonTerminated:!1}),m&&(i=e(i).test().end,m=this.decode.raw(this.unescape(m),i)),e(y)({type:"definition",identifier:a(c),title:m||null,url:f}))}}}}function o(e){return">"!==e&&"["!==e&&"]"!==e}function s(e){return"["!==e&&"]"!==e&&!r(e)}o.delimiter=">"},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var a,i,o,s,u,l,d,c,f,m,_,p,h,y,g,M,v,b,L,k,w,Y,T,D;if(!this.options.gfm)return;a=0,b=0,l=t.length+1,d=[];for(;a<l;){if(Y=t.indexOf("\n",a),T=t.indexOf("|",a+1),-1===Y&&(Y=t.length),-1===T||T>Y){if(b<2)return;break}d.push(t.slice(a,Y)),b++,a=Y+1}s=d.join("\n"),i=d.splice(1,1)[0]||[],a=0,l=i.length,b--,o=!1,_=[];for(;a<l;){if("|"===(f=i.charAt(a))){if(m=null,!1===o){if(!1===D)return}else _.push(o),o=!1;D=!1}else if("-"===f)m=!0,o=o||null;else if(":"===f)o="left"===o?"center":m&&null===o?"right":"left";else if(!r(f))return;a++}!1!==o&&_.push(o);if(_.length<1)return;if(n)return!0;v=-1,k=[],w=e(s).reset({type:"table",align:_,children:k});for(;++v<b;){for(L=d[v],u={type:"tableRow",children:[]},v&&e("\n"),e(L).reset(u,w),l=L.length+1,a=0,c="",p="",h=!0,y=null,g=null;a<l;)if("\t"!==(f=L.charAt(a))&&" "!==f){if(""===f||"|"===f)if(h)e(f);else{if(f&&g){c+=f,a++;continue}!p&&!f||h||(s=p,c.length>1&&(f?(s+=c.slice(0,c.length-1),c=c.charAt(c.length-1)):(s+=c,c="")),M=e.now(),e(s)({type:"tableCell",children:this.tokenizeInline(p,M)},u)),e(c+f),c="",p=""}else if(c&&(p+=c,c=""),p+=f,"\\"===f&&a!==l-2&&(p+=L.charAt(a+1),a++),"`"===f){for(y=1;L.charAt(a+1)===f;)p+=f,a++,y++;g?y>=g&&(g=0):g=y}h=!1,a++}else p?c+=f:e(f),a++;v||e("\n"+i)}return w}},function(e,t,n){"use strict";var r=n(12),a=n(18),i=n(27),o=n(28);e.exports=function(e,t,n){var s,u,l,d,c,f=this.options,m=f.commonmark,_=f.gfm,p=this.blockTokenizers,h=this.interruptParagraph,y=t.indexOf("\n"),g=t.length;for(;y<g;){if(-1===y){y=g;break}if("\n"===t.charAt(y+1))break;if(m){for(d=0,s=y+1;s<g;){if("\t"===(l=t.charAt(s))){d=4;break}if(" "!==l)break;d++,s++}if(d>=4){y=t.indexOf("\n",y+1);continue}}if(u=t.slice(y+1),o(h,p,this,[e,u,!0]))break;if(p.list.call(this,e,u,!0)&&(this.inList||m||_&&!a(r.left(u).charAt(0))))break;if(s=y,-1!==(y=t.indexOf("\n",y+1))&&""===r(t.slice(s,y))){y=s;break}}if(u=t.slice(0,y),""===r(u))return e(u),null;if(n)return!0;return c=e.now(),u=i(u),e(u)({type:"paragraph",children:this.tokenizeInline(u,c)})}},function(e,t,n){"use strict";var r=n(331);function a(e,t,n){var r,a;if("\\"===t.charAt(0)&&(r=t.charAt(1),-1!==this.escape.indexOf(r)))return!!n||(a="\n"===r?{type:"break"}:{type:"text",value:r},e("\\"+r)(a))}e.exports=a,a.locator=r},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("\\",t)}},function(e,t,n){"use strict";var r=n(6),a=n(25),i=n(201);e.exports=s,s.locator=i,s.notInLink=!0;var o="mailto:".length;function s(e,t,n){var i,s,u,l,d,c,f,m,_,p,h;if("<"===t.charAt(0)){for(this,i="",s=t.length,u=0,l="",c=!1,f="",u++,i="<";u<s&&(d=t.charAt(u),!(r(d)||">"===d||"@"===d||":"===d&&"/"===t.charAt(u+1)));)l+=d,u++;if(l){if(f+=l,l="",f+=d=t.charAt(u),u++,"@"===d)c=!0;else{if(":"!==d||"/"!==t.charAt(u+1))return;f+="/",u++}for(;u<s&&(d=t.charAt(u),!r(d)&&">"!==d);)l+=d,u++;if(d=t.charAt(u),l&&">"===d)return!!n||(_=f+=l,i+=f+d,(m=e.now()).column++,m.offset++,c&&("mailto:"===f.slice(0,o).toLowerCase()?(_=_.substr(o),m.column+=o,m.offset+=o):f="mailto:"+f),p=this.inlineTokenizers,this.inlineTokenizers={text:p.text},h=this.enterLink(),_=this.tokenizeInline(_,m),this.inlineTokenizers=p,h(),e(i)({type:"link",title:null,url:a(f,{nonTerminated:!1}),children:_}))}}}},function(e,t,n){"use strict";var r=n(25),a=n(6),i=n(334);e.exports=u,u.locator=i,u.notInLink=!0;var o=["http://","https://","mailto:"],s=o.length;function u(e,t,n){var i,u,l,d,c,f,m,_,p,h,y,g;if(this.options.gfm){for(i="",d=-1,_=s;++d<_;)if(f=o[d],(m=t.slice(0,f.length)).toLowerCase()===f){i=m;break}if(i){for(d=i.length,_=t.length,p="",h=0;d<_&&(l=t.charAt(d),!a(l)&&"<"!==l)&&("."!==l&&","!==l&&":"!==l&&";"!==l&&'"'!==l&&"'"!==l&&")"!==l&&"]"!==l||(y=t.charAt(d+1))&&!a(y))&&("("!==l&&"["!==l||h++,")"!==l&&"]"!==l||!(--h<0));)p+=l,d++;if(p){if(u=i+=p,"mailto:"===f){if(-1===(c=p.indexOf("@"))||c===_-1)return;u=u.substr("mailto:".length)}return!!n||(g=this.enterLink(),u=this.tokenizeInline(u,e.now()),g(),e(i)({type:"link",title:null,url:r(i,{nonTerminated:!1}),children:u}))}}}}},function(e,t,n){"use strict";e.exports=function(e,t){var n,a=r.length,i=-1,o=-1;if(!this.options.gfm)return-1;for(;++i<a;)-1!==(n=e.indexOf(r[i],t))&&(n<o||-1===o)&&(o=n);return o};var r=["https://","http://","mailto:"]},function(e,t,n){"use strict";var r=n(197),a=n(201),i=n(200).tag;e.exports=u,u.locator=a;var o=/^<a /i,s=/^<\/a>/i;function u(e,t,n){var a,u,l=t.length;if(!("<"!==t.charAt(0)||l<3)&&(a=t.charAt(1),(r(a)||"?"===a||"!"===a||"/"===a)&&(u=t.match(i))))return!!n||(u=u[0],!this.inLink&&o.test(u)?this.inLink=!0:this.inLink&&s.test(u)&&(this.inLink=!1),e(u)({type:"html",value:u}))}},function(e,t,n){"use strict";var r=n(6),a=n(202);e.exports=u,u.locator=a;var i={}.hasOwnProperty,o={'"':'"',"'":"'"},s={};function u(e,t,n){var a,u,l,d,c,f,m,_,p,h,y,g,M,v,b,L,k,w,Y,T="",D=0,S=t.charAt(0),x=this.options.pedantic,j=this.options.commonmark,O=this.options.gfm;if("!"===S&&(p=!0,T=S,S=t.charAt(++D)),"["===S&&(p||!this.inLink)){for(T+=S,b="",D++,g=t.length,v=0,(k=e.now()).column+=D,k.offset+=D;D<g;){if(f=S=t.charAt(D),"`"===S){for(u=1;"`"===t.charAt(D+1);)f+=S,D++,u++;l?u>=l&&(l=0):l=u}else if("\\"===S)D++,f+=t.charAt(D);else if(l&&!O||"["!==S){if((!l||O)&&"]"===S){if(!v){if(!x)for(;D<g&&(S=t.charAt(D+1),r(S));)f+=S,D++;if("("!==t.charAt(D+1))return;f+="(",a=!0,D++;break}v--}}else v++;b+=f,f="",D++}if(a){for(h=b,T+=b+f,D++;D<g&&(S=t.charAt(D),r(S));)T+=S,D++;if(S=t.charAt(D),_=j?s:o,b="",d=T,"<"===S){for(D++,d+="<";D<g&&">"!==(S=t.charAt(D));){if(j&&"\n"===S)return;b+=S,D++}if(">"!==t.charAt(D))return;T+="<"+b+">",L=b,D++}else{for(S=null,f="";D<g&&(S=t.charAt(D),!f||!i.call(_,S));){if(r(S)){if(!x)break;f+=S}else{if("("===S)v++;else if(")"===S){if(0===v)break;v--}b+=f,f="","\\"===S&&(b+="\\",S=t.charAt(++D)),b+=S}D++}L=b,D=(T+=b).length}for(b="";D<g&&(S=t.charAt(D),r(S));)b+=S,D++;if(S=t.charAt(D),T+=b,b&&i.call(_,S))if(D++,T+=S,b="",y=_[S],c=T,j){for(;D<g&&(S=t.charAt(D))!==y;)"\\"===S&&(b+="\\",S=t.charAt(++D)),D++,b+=S;if((S=t.charAt(D))!==y)return;for(M=b,T+=b+S,D++;D<g&&(S=t.charAt(D),r(S));)T+=S,D++}else for(f="";D<g;){if((S=t.charAt(D))===y)m&&(b+=y+f,f=""),m=!0;else if(m){if(")"===S){T+=b+y+f,M=b;break}r(S)?f+=S:(b+=y+f+S,f="",m=!1)}else b+=S;D++}if(")"===t.charAt(D))return!!n||(T+=")",L=this.decode.raw(this.unescape(L),e(d).test().end,{nonTerminated:!1}),M&&(c=e(c).test().end,M=this.decode.raw(this.unescape(M),c)),Y={type:p?"image":"link",title:M||null,url:L},p?Y.alt=this.decode.raw(this.unescape(h),k)||null:(w=this.enterLink(),Y.children=this.tokenizeInline(h,k),w()),e(T)(Y))}}}s['"']='"',s["'"]="'",s["("]=")"},function(e,t,n){"use strict";var r=n(6),a=n(202),i=n(29);e.exports=o,o.locator=a;function o(e,t,n){var a,o,s,u,l,d,c,f,m=t.charAt(0),_=0,p=t.length,h="",y="",g="link",M="shortcut";if("!"===m&&(g="image",y=m,m=t.charAt(++_)),"["===m){if(_++,y+=m,d="",this.options.footnotes&&"^"===t.charAt(_)){if("image"===g)return;y+="^",_++,g="footnote"}for(f=0;_<p;){if("["===(m=t.charAt(_)))c=!0,f++;else if("]"===m){if(!f)break;f--}"\\"===m&&(d+="\\",m=t.charAt(++_)),d+=m,_++}if(h=d,a=d,"]"===(m=t.charAt(_))){for(_++,h+=m,d="";_<p&&(m=t.charAt(_),r(m));)d+=m,_++;if(m=t.charAt(_),"footnote"!==g&&"["===m){for(o="",d+=m,_++;_<p&&"["!==(m=t.charAt(_))&&"]"!==m;)"\\"===m&&(o+="\\",m=t.charAt(++_)),o+=m,_++;"]"===(m=t.charAt(_))?(M=o?"full":"collapsed",d+=o+m,_++):o="",h+=d,d=""}else{if(!a)return;o=a}if("full"===M||!c)return h=y+h,"link"===g&&this.inLink?null:!!n||("footnote"===g&&-1!==a.indexOf(" ")?e(h)({type:"footnote",children:this.tokenizeInline(a,e.now())}):((s=e.now()).column+=y.length,s.offset+=y.length,u={type:g+"Reference",identifier:i(o="full"===M?o:a)},"link"!==g&&"image"!==g||(u.referenceType=M),"link"===g?(l=this.enterLink(),u.children=this.tokenizeInline(a,s),l()):"image"===g&&(u.alt=this.decode.raw(this.unescape(a),s)||null),e(h)(u)))}}}},function(e,t,n){"use strict";var r=n(12),a=n(6),i=n(339);e.exports=o,o.locator=i;function o(e,t,n){var i,o,s,u,l,d,c,f=0,m=t.charAt(f);if(!("*"!==m&&"_"!==m||t.charAt(++f)!==m||(o=this.options.pedantic,l=(s=m)+s,d=t.length,f++,u="",m="",o&&a(t.charAt(f)))))for(;f<d;){if(c=m,!((m=t.charAt(f))!==s||t.charAt(f+1)!==s||o&&a(c))&&(m=t.charAt(f+2))!==s){if(!r(u))return;return!!n||((i=e.now()).column+=2,i.offset+=2,e(l+u+l)({type:"strong",children:this.tokenizeInline(u,i)}))}o||"\\"!==m||(u+=m,m=t.charAt(++f)),u+=m,f++}}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("**",t),r=e.indexOf("__",t);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},function(e,t,n){"use strict";var r=n(12),a=n(341),i=n(6),o=n(342);e.exports=s,s.locator=o;function s(e,t,n){var o,s,u,l,d,c,f,m=0,_=t.charAt(m);if(!("*"!==_&&"_"!==_||(s=this.options.pedantic,d=_,u=_,c=t.length,m++,l="",_="",s&&i(t.charAt(m)))))for(;m<c;){if(f=_,!((_=t.charAt(m))!==u||s&&i(f))){if((_=t.charAt(++m))!==u){if(!r(l)||f===u)return;if(!s&&"_"===u&&a(_)){l+=u;continue}return!!n||((o=e.now()).column++,o.offset++,e(d+l+u)({type:"emphasis",children:this.tokenizeInline(l,o)}))}l+=u}s||"\\"!==_||(l+=_,_=t.charAt(++m)),l+=_,m++}}},function(e,t,n){"use strict";e.exports=function(e){return a.test("number"==typeof e?r(e):e.charAt(0))};var r=String.fromCharCode,a=/\w/},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("*",t),r=e.indexOf("_",t);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},function(e,t,n){"use strict";var r=n(6),a=n(344);e.exports=i,i.locator=a;function i(e,t,n){var a,i,o,s="",u="",l="",d="";if(this.options.gfm&&"~"===t.charAt(0)&&"~"===t.charAt(1)&&!r(t.charAt(2)))for(a=1,i=t.length,(o=e.now()).column+=2,o.offset+=2;++a<i;){if(!("~"!==(s=t.charAt(a))||"~"!==u||l&&r(l)))return!!n||e("~~"+d+"~~")({type:"delete",children:this.tokenizeInline(d,o)});d+=u,l=u,u=s}}},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("~~",t)}},function(e,t,n){"use strict";var r=n(6),a=n(346);e.exports=i,i.locator=a;function i(e,t,n){for(var a,i,o,s,u,l,d,c,f=t.length,m=0,_="",p="";m<f&&"`"===t.charAt(m);)_+="`",m++;if(_){for(u=_,s=m,_="",c=t.charAt(m),o=0;m<f;){if(l=c,c=t.charAt(m+1),"`"===l?(o++,p+=l):(o=0,_+=l),o&&"`"!==c){if(o===s){u+=_+p,d=!0;break}_+=p,p=""}m++}if(!d){if(s%2!=0)return;_=""}if(n)return!0;for(a="",i="",f=_.length,m=-1;++m<f;)l=_.charAt(m),r(l)?i+=l:(i&&(a&&(a+=i),i=""),a+=l);return e(u)({type:"inlineCode",value:a})}}},function(e,t,n){"use strict";e.exports=function(e,t){return e.indexOf("`",t)}},function(e,t,n){"use strict";var r=n(348);e.exports=a,a.locator=r;function a(e,t,n){for(var r,a=t.length,i=-1,o="";++i<a;){if("\n"===(r=t.charAt(i))){if(i<2)return;return!!n||e(o+=r)({type:"break"})}if(" "!==r)return;o+=r}}},function(e,t,n){"use strict";e.exports=function(e,t){var n=e.indexOf("\n",t);for(;n>t&&" "===e.charAt(n-1);)n--;return n}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r,a,i,o,s,u,l,d,c,f;if(n)return!0;r=this.inlineMethods,o=r.length,a=this.inlineTokenizers,i=-1,c=t.length;for(;++i<o;)"text"!==(d=r[i])&&a[d]&&((l=a[d].locator)||e.file.fail("Missing locator: `"+d+"`"),-1!==(u=l.call(this,t,1))&&u<c&&(c=u));s=t.slice(0,c),f=e.now(),this.decode(s,f,(function(t,n,r){e(r||t)({type:"text",value:t})}))}},function(e,t,n){"use strict";var r=n(351);function a(){}function i(){}i.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,i,o){if(o!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(353);e.exports=function(){return function(e){return r(e,"list",(function(e,t){var n,r,a=0;for(n=0,r=t.length;n<r;n++)"list"===t[n].type&&(a+=1);for(n=0,r=e.children.length;n<r;n++){var i=e.children[n];i.index=n,i.ordered=e.ordered}e.depth=a})),e}}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r=[];"function"==typeof t&&(n=t,t=null);function a(e){var i;return t&&e.type!==t||(i=n(e,r.concat())),e.children&&!1!==i?function(e,t){var n,i=e.length,o=-1;r.push(t);for(;++o<i;)if((n=e[o])&&!1===a(n))return!1;return r.pop(),!0}(e.children,e):i}a(e)}},function(e,t,n){"use strict";var r=n(19),a=/^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i,i=/^<(\/?)([a-z]+)\s*>$/;e.exports=function(e){var t,n;return r(e,"html",(function(e,r,o){n!==o&&(t=[],n=o);var s=function(e){var t=e.value.match(a);return!!t&&t[1]}(e);if(s)return o.children.splice(r,1,{type:"virtualHtml",tag:s,position:e.position}),!0;var u=function(e,t){var n=e.value.match(i);return!!n&&{tag:n[2],opening:!n[1],node:e}}(e);if(!u)return!0;var l=function(e,t){var n=e.length;for(;n--;)if(e[n].tag===t)return e.splice(n,1)[0];return!1}(t,u.tag);return l?o.children.splice(r,0,function(e,t,n){var r=n.children.indexOf(e.node),a=n.children.indexOf(t.node),i=n.children.splice(r,a-r+1).slice(1,-1);return{type:"virtualHtml",children:i,tag:e.tag,position:{start:e.node.position.start,end:t.node.position.end,indent:[]}}}(u,l,o)):u.opening||t.push(u),!0}),!0),e}},function(e,t,n){"use strict";var r=n(19);function a(e,t,n,r){if("remove"===r)n.children.splice(t,1);else if("unwrap"===r){var a=[t,1];e.children&&(a=a.concat(e.children)),Array.prototype.splice.apply(n.children,a)}}t.ofType=function(e,t){return function(t){return e.forEach((function(e){return r(t,e,n,!0)})),t};function n(e,n,r){r&&a(e,n,r,t)}},t.ifNotMatch=function(e,t){return function(e){return r(e,n,!0),e};function n(n,r,i){i&&!e(n,r,i)&&a(n,r,i,t)}}},function(e,t,n){"use strict";var r=n(1),a=n(8),i=n(20),o={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function s(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,l=t.renderers[e.type];void 0===e.position&&(e.position=n.node&&n.node.position||o);var d=e.position.start,c=[e.type,d.line,d.column,a].join("-");if(!i.isValidElementType(l))throw new Error("Renderer for type `".concat(e.type,"` not defined or is not renderable"));var f=u(e,c,t,l,n,a);return r.createElement(l,f,f.children||m()||void 0);function m(){return e.children&&e.children.map((function(n,r){return s(n,t,{node:e,props:f},r)}))}}function u(e,t,n,i,o,u){var d,c={key:t},f="string"==typeof i;n.sourcePos&&e.position&&(c["data-sourcepos"]=[(d=e.position).start.line,":",d.start.column,"-",d.end.line,":",d.end.column].map(String).join("")),n.rawSourcePos&&!f&&(c.sourcePosition=e.position),n.includeNodeIndex&&o.node&&o.node.children&&!f&&(c.index=o.node.children.indexOf(e),c.parentChildCount=o.node.children.length);var m=null!==e.identifier&&void 0!==e.identifier?n.definitions[e.identifier]||{}:null;switch(e.type){case"root":l(c,{className:n.className});break;case"text":c.nodeKey=t,c.children=e.value;break;case"heading":c.level=e.depth;break;case"list":c.start=e.start,c.ordered=e.ordered,c.tight=!e.loose,c.depth=e.depth;break;case"listItem":c.checked=e.checked,c.tight=!e.loose,c.ordered=e.ordered,c.index=e.index,c.children=function(e,t){if(e.loose)return e.children;if(t.node&&e.index>0&&t.node.children[e.index-1].loose)return e.children;return function(e){return e.children.reduce((function(e,t){return e.concat("paragraph"===t.type?t.children||[]:[t])}),[])}(e)}(e,o).map((function(t,r){return s(t,n,{node:e,props:c},r)}));break;case"definition":l(c,{identifier:e.identifier,title:e.title,url:e.url});break;case"code":l(c,{language:e.lang&&e.lang.split(/\s/,1)[0]});break;case"inlineCode":c.children=e.value,c.inline=!0;break;case"link":l(c,{title:e.title||void 0,target:"function"==typeof n.linkTarget?n.linkTarget(e.url,e.children,e.title):n.linkTarget,href:n.transformLinkUri?n.transformLinkUri(e.url,e.children,e.title):e.url});break;case"image":l(c,{alt:e.alt||void 0,title:e.title||void 0,src:n.transformImageUri?n.transformImageUri(e.url,e.children,e.title,e.alt):e.url});break;case"linkReference":l(c,a(m,{href:n.transformLinkUri?n.transformLinkUri(m.href):m.href}));break;case"imageReference":l(c,{src:n.transformImageUri&&m.href?n.transformImageUri(m.href,e.children,m.title,e.alt):m.href,title:m.title||void 0,alt:e.alt||void 0});break;case"table":case"tableHead":case"tableBody":c.columnAlignment=e.align;break;case"tableRow":c.isHeader="tableHead"===o.node.type,c.columnAlignment=o.props.columnAlignment;break;case"tableCell":l(c,{isHeader:o.props.isHeader,align:o.props.columnAlignment[u]});break;case"virtualHtml":c.tag=e.tag;break;case"html":c.isBlock=e.position.start.line!==e.position.end.line,c.escapeHtml=n.escapeHtml,c.skipHtml=n.skipHtml;break;case"parsedHtml":var _;e.children&&(_=e.children.map((function(t,r){return s(t,n,{node:e,props:c},r)}))),c.escapeHtml=n.escapeHtml,c.skipHtml=n.skipHtml,c.element=function(e,t){var n=e.element;if(Array.isArray(n)){var a=r.Fragment||"div";return r.createElement(a,null,n)}if(n.props.children||t){var i=r.Children.toArray(n.props.children).concat(t);return r.cloneElement(n,null,i)}return r.cloneElement(n,null)}(e,_);break;default:l(c,a(e,{type:void 0,position:void 0,children:void 0}))}return!f&&e.value&&(c.value=e.value),c}function l(e,t){for(var n in t)void 0!==t[n]&&(e[n]=t[n])}e.exports=s},function(e,t,n){"use strict";var r=n(19);function a(e){var t=e.children;e.children=[{type:"tableHead",align:e.align,children:[t[0]],position:t[0].position}],t.length>1&&e.children.push({type:"tableBody",align:e.align,children:t.slice(1),position:{start:t[1].position.start,end:t[t.length-1].position.end}})}e.exports=function(e){return r(e,"table",a),e}},function(e,t,n){"use strict";e.exports=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(t.children||[]).reduce((function(t,n){return"definition"===n.type&&(t[n.identifier]={href:n.url,title:n.title}),e(n,t)}),n)}},function(e,t,n){"use strict";var r=["http","https","mailto","tel"];e.exports=function(e){var t=(e||"").trim(),n=t.charAt(0);if("#"===n||"/"===n)return t;var a=t.indexOf(":");if(-1===a)return t;for(var i=r.length,o=-1;++o<i;){var s=r[o];if(a===s.length&&t.slice(0,s.length).toLowerCase()===s)return t}return-1!==(o=t.indexOf("?"))&&a>o||-1!==(o=t.indexOf("#"))&&a>o?t:"javascript:void(0)"}},function(e,t,n){"use strict";var r=n(8),a=n(1),i=parseInt((a.version||"16").slice(0,2),10)>=16,o=a.createElement;function s(e,t){return o(e,u(t),t.children)}function u(e){return e["data-sourcepos"]?{"data-sourcepos":e["data-sourcepos"]}:{}}e.exports={break:"br",paragraph:"p",emphasis:"em",strong:"strong",thematicBreak:"hr",blockquote:"blockquote",delete:"del",link:"a",image:"img",linkReference:"a",imageReference:"img",table:s.bind(null,"table"),tableHead:s.bind(null,"thead"),tableBody:s.bind(null,"tbody"),tableRow:s.bind(null,"tr"),tableCell:function(e){var t=e.align?{textAlign:e.align}:void 0,n=u(e);return o(e.isHeader?"th":"td",t?r({style:t},n):n,e.children)},root:function(e){var t=!e.className,n=t&&a.Fragment||"div";return o(n,t?null:e,e.children)},text:function(e){return i?e.children:o("span",null,e.children)},list:function(e){var t=u(e);null!==e.start&&1!==e.start&&void 0!==e.start&&(t.start=e.start.toString());return o(e.ordered?"ol":"ul",t,e.children)},listItem:function(e){var t=null;if(null!==e.checked&&void 0!==e.checked){var n=e.checked;t=o("input",{type:"checkbox",checked:n,readOnly:!0})}return o("li",u(e),t,e.children)},definition:function(){return null},heading:function(e){return o("h".concat(e.level),u(e),e.children)},inlineCode:function(e){return o("code",u(e),e.children)},code:function(e){var t=e.language&&"language-".concat(e.language),n=o("code",t?{className:t}:null,e.value);return o("pre",u(e),n)},html:function(e){if(e.skipHtml)return null;var t=e.isBlock?"div":"span";if(e.escapeHtml){var n=a.Fragment||t;return o(n,null,e.value)}var r={dangerouslySetInnerHTML:{__html:e.value}};return o(t,r)},virtualHtml:function(e){return o(e.tag,u(e),e.children)},parsedHtml:function(e){return e["data-sourcepos"]?a.cloneElement(e.element,{"data-sourcepos":e["data-sourcepos"]}):e.element}}},function(e,t,n){"use strict";t.HtmlParser="undefined"==typeof Symbol?"__RMD_HTML_PARSER__":Symbol("__RMD_HTML_PARSER__")},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),a=n(34),i=n(363);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));function s(e,t,n,r,a,i,o,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var u=!1,l=null,d=!1,c=null,f={onError:function(e){u=!0,l=e}};function m(e,t,n,r,a,i,o,d,c){u=!1,l=null,s.apply(f,arguments)}var _=null,p=null,h=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=h(n),function(e,t,n,r,a,i,s,f,_){if(m.apply(this,arguments),u){if(!u)throw Error(o(198));var p=l;u=!1,l=null,d||(d=!0,c=p)}}(r,t,void 0,e),e.currentTarget=null}var g=null,M={};function v(){if(g)for(var e in M){var t=M[e],n=g.indexOf(e);if(!(-1<n))throw Error(o(96,e));if(!L[n]){if(!t.extractEvents)throw Error(o(97,e));for(var r in L[n]=t,n=t.eventTypes){var a=void 0,i=n[r],s=t,u=r;if(k.hasOwnProperty(u))throw Error(o(99,u));k[u]=i;var l=i.phasedRegistrationNames;if(l){for(a in l)l.hasOwnProperty(a)&&b(l[a],s,u);a=!0}else i.registrationName?(b(i.registrationName,s,u),a=!0):a=!1;if(!a)throw Error(o(98,r,e))}}}}function b(e,t,n){if(w[e])throw Error(o(100,e));w[e]=t,Y[e]=t.eventTypes[n].dependencies}var L=[],k={},w={},Y={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!M.hasOwnProperty(t)||M[t]!==r){if(M[t])throw Error(o(102,t));M[t]=r,n=!0}}n&&v()}var D=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),S=null,x=null,j=null;function O(e){if(e=p(e)){if("function"!=typeof S)throw Error(o(280));var t=e.stateNode;t&&(t=_(t),S(e.stateNode,e.type,t))}}function E(e){x?j?j.push(e):j=[e]:x=e}function P(){if(x){var e=x,t=j;if(j=x=null,O(e),t)for(e=0;e<t.length;e++)O(t[e])}}function H(e,t){return e(t)}function A(e,t,n,r,a){return e(t,n,r,a)}function C(){}var N=H,F=!1,W=!1;function I(){null===x&&null===j||(C(),P())}function z(e,t,n){if(W)return e(t,n);W=!0;try{return N(e,t,n)}finally{W=!1,I()}}var R=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,U=Object.prototype.hasOwnProperty,B={},J={};function $(e,t,n,r,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var V={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){V[e]=new $(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];V[t]=new $(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){V[e]=new $(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){V[e]=new $(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){V[e]=new $(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){V[e]=new $(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){V[e]=new $(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){V[e]=new $(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){V[e]=new $(e,5,!1,e.toLowerCase(),null,!1)}));var q=/[\-:]([a-z])/g;function G(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(q,G);V[t]=new $(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){V[e]=new $(e,1,!1,e.toLowerCase(),null,!1)})),V.xlinkHref=new $("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){V[e]=new $(e,1,!1,e.toLowerCase(),null,!0)}));var K=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Q(e,t,n,r){var a=V.hasOwnProperty(t)?V[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!U.call(J,e)||!U.call(B,e)&&(R.test(e)?J[e]=!0:(B[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}K.hasOwnProperty("ReactCurrentDispatcher")||(K.ReactCurrentDispatcher={current:null}),K.hasOwnProperty("ReactCurrentBatchConfig")||(K.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,X="function"==typeof Symbol&&Symbol.for,ee=X?Symbol.for("react.element"):60103,te=X?Symbol.for("react.portal"):60106,ne=X?Symbol.for("react.fragment"):60107,re=X?Symbol.for("react.strict_mode"):60108,ae=X?Symbol.for("react.profiler"):60114,ie=X?Symbol.for("react.provider"):60109,oe=X?Symbol.for("react.context"):60110,se=X?Symbol.for("react.concurrent_mode"):60111,ue=X?Symbol.for("react.forward_ref"):60112,le=X?Symbol.for("react.suspense"):60113,de=X?Symbol.for("react.suspense_list"):60120,ce=X?Symbol.for("react.memo"):60115,fe=X?Symbol.for("react.lazy"):60116,me=X?Symbol.for("react.block"):60121,_e="function"==typeof Symbol&&Symbol.iterator;function pe(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=_e&&e[_e]||e["@@iterator"])?e:null}function he(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ae:return"Profiler";case re:return"StrictMode";case le:return"Suspense";case de:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case oe:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case ce:return he(e.type);case me:return he(e.render);case fe:if(e=1===e._status?e._result:null)return he(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,i=he(e.type);n=null,r&&(n=he(r.type)),r=i,i="",a?i=" (at "+a.fileName.replace(Z,"")+":"+a.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Me(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ve(e){e._valueTracker||(e._valueTracker=function(e){var t=Me(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Me(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Le(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function we(e,t){null!=(t=t.checked)&&Q(e,"checked",t,!1)}function Ye(e,t){we(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?De(e,t.type,n):t.hasOwnProperty("defaultValue")&&De(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function De(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Se(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function xe(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Ee(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Pe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var He="http://www.w3.org/1999/xhtml",Ae="http://www.w3.org/2000/svg";function Ce(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ne(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ce(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Fe,We=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ae||"innerHTML"in e)e.innerHTML=t;else{for((Fe=Fe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Fe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ie(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function ze(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Re={animationend:ze("Animation","AnimationEnd"),animationiteration:ze("Animation","AnimationIteration"),animationstart:ze("Animation","AnimationStart"),transitionend:ze("Transition","TransitionEnd")},Ue={},Be={};function Je(e){if(Ue[e])return Ue[e];if(!Re[e])return e;var t,n=Re[e];for(t in n)if(n.hasOwnProperty(t)&&t in Be)return Ue[e]=n[t];return e}D&&(Be=document.createElement("div").style,"AnimationEvent"in window||(delete Re.animationend.animation,delete Re.animationiteration.animation,delete Re.animationstart.animation),"TransitionEvent"in window||delete Re.transitionend.transition);var $e=Je("animationend"),Ve=Je("animationiteration"),qe=Je("animationstart"),Ge=Je("transitionend"),Ke="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Qe.get(e);return void 0===t&&(t=new Map,Qe.set(e,t)),t}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Xe(e)!==e)throw Error(o(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return tt(a),e;if(i===r)return tt(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var s=!1,u=a.child;u;){if(u===n){s=!0,n=a,r=i;break}if(u===r){s=!0,r=a,n=i;break}u=u.sibling}if(!s){for(u=i.child;u;){if(u===n){s=!0,n=i,r=a;break}if(u===r){s=!0,r=i,n=a;break}u=u.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(o(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function at(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function ot(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function st(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(at(e,ot),it)throw Error(o(95));if(d)throw e=c,d=!1,c=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!D)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var dt=[];function ct(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>dt.length&&dt.push(e)}function ft(e,t,n,r){if(dt.length){var a=dt.pop();return a.topLevelType=e,a.eventSystemFlags=r,a.nativeEvent=t,a.targetInst=n,a}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function mt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Dn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,o=e.eventSystemFlags;0===n&&(o|=64);for(var s=null,u=0;u<L.length;u++){var l=L[u];l&&(l=l.extractEvents(r,t,i,a,o))&&(s=rt(s,l))}st(s)}}function _t(e,t,n){if(!n.has(e)){switch(e){case"scroll":qt(t,"scroll",!0);break;case"focus":case"blur":qt(t,"focus",!0),qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ke.indexOf(e)&&Vt(e,t)}n.set(e,null)}}var pt,ht,yt,gt=!1,Mt=[],vt=null,bt=null,Lt=null,kt=new Map,wt=new Map,Yt=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Dt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function St(e,t,n,r,a){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:a,container:r}}function xt(e,t){switch(e){case"focus":case"blur":vt=null;break;case"dragenter":case"dragleave":bt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":wt.delete(t.pointerId)}}function jt(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e=St(t,n,r,a,i),null!==t&&(null!==(t=Sn(t))&&ht(t)),e):(e.eventSystemFlags|=r,e)}function Ot(e){var t=Dn(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Et(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Sn(t);return null!==n&&ht(n),e.blockedOn=t,!1}return!0}function Pt(e,t,n){Et(e)&&n.delete(t)}function Ht(){for(gt=!1;0<Mt.length;){var e=Mt[0];if(null!==e.blockedOn){null!==(e=Sn(e.blockedOn))&&pt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:Mt.shift()}null!==vt&&Et(vt)&&(vt=null),null!==bt&&Et(bt)&&(bt=null),null!==Lt&&Et(Lt)&&(Lt=null),kt.forEach(Pt),wt.forEach(Pt)}function At(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Ht)))}function Ct(e){function t(t){return At(t,e)}if(0<Mt.length){At(Mt[0],e);for(var n=1;n<Mt.length;n++){var r=Mt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==vt&&At(vt,e),null!==bt&&At(bt,e),null!==Lt&&At(Lt,e),kt.forEach(t),wt.forEach(t),n=0;n<Yt.length;n++)(r=Yt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Yt.length&&null===(n=Yt[0]).blockedOn;)Ot(n),null===n.blockedOn&&Yt.shift()}var Nt={},Ft=new Map,Wt=new Map,It=["abort","abort",$e,"animationEnd",Ve,"animationIteration",qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ge,"transitionEnd","waiting","waiting"];function zt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1],i="on"+(a[0].toUpperCase()+a.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Wt.set(r,t),Ft.set(r,i),Nt[a]=i}}zt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zt(It,2);for(var Rt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ut=0;Ut<Rt.length;Ut++)Wt.set(Rt[Ut],0);var Bt=i.unstable_UserBlockingPriority,Jt=i.unstable_runWithPriority,$t=!0;function Vt(e,t){qt(t,e,!1)}function qt(e,t,n){var r=Wt.get(t);switch(void 0===r?2:r){case 0:r=Gt.bind(null,t,1,e);break;case 1:r=Kt.bind(null,t,1,e);break;default:r=Qt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Gt(e,t,n,r){F||C();var a=Qt,i=F;F=!0;try{A(a,e,t,n,r)}finally{(F=i)||I()}}function Kt(e,t,n,r){Jt(Bt,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){if($t)if(0<Mt.length&&-1<Tt.indexOf(e))e=St(null,e,t,n,r),Mt.push(e);else{var a=Zt(e,t,n,r);if(null===a)xt(e,r);else if(-1<Tt.indexOf(e))e=St(a,e,t,n,r),Mt.push(e);else if(!function(e,t,n,r,a){switch(t){case"focus":return vt=jt(vt,e,t,n,r,a),!0;case"dragenter":return bt=jt(bt,e,t,n,r,a),!0;case"mouseover":return Lt=jt(Lt,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return kt.set(i,jt(kt.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,wt.set(i,jt(wt.get(i)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r)){xt(e,r),e=ft(e,r,null,t);try{z(mt,e)}finally{ct(e)}}}}function Zt(e,t,n,r){if(null!==(n=Dn(n=ut(r)))){var a=Xe(n);if(null===a)n=null;else{var i=a.tag;if(13===i){if(null!==(n=et(a)))return n;n=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;n=null}else a!==n&&(n=null)}}e=ft(e,r,n,t);try{z(mt,e)}finally{ct(e)}return null}var Xt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Xt.hasOwnProperty(e)&&Xt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(Xt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Xt[t]=Xt[e]}))}));var rn=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function an(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var sn=He;function un(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=Y[t];for(var r=0;r<t.length;r++)_t(t[r],e,n)}function ln(){}function dn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function cn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=cn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cn(r)}}function mn(){for(var e=window,t=dn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dn((e=t.contentWindow).document)}return t}function _n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pn=null,hn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Mn="function"==typeof setTimeout?setTimeout:void 0,vn="function"==typeof clearTimeout?clearTimeout:void 0;function bn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Ln(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),wn="__reactInternalInstance$"+kn,Yn="__reactEventHandlers$"+kn,Tn="__reactContainere$"+kn;function Dn(e){var t=e[wn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[wn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Ln(e);null!==e;){if(n=e[wn])return n;e=Ln(e)}return t}n=(e=n).parentNode}return null}function Sn(e){return!(e=e[wn]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function jn(e){return e[Yn]||null}function On(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function En(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}function Pn(e,t,n){(t=En(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Hn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=On(t);for(t=n.length;0<t--;)Pn(n[t],"captured",e);for(t=0;t<n.length;t++)Pn(n[t],"bubbled",e)}}function An(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=En(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Cn(e){e&&e.dispatchConfig.registrationName&&An(e._targetInst,null,e)}function Nn(e){at(e,Hn)}var Fn=null,Wn=null,In=null;function zn(){if(In)return In;var e,t,n=Wn,r=n.length,a="value"in Fn?Fn.value:Fn.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return In=a.slice(e,1<t?1-t:void 0)}function Rn(){return!0}function Un(){return!1}function Bn(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Rn:Un,this.isPropagationStopped=Un,this}function Jn(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function $n(e){if(!(e instanceof this))throw Error(o(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Vn(e){e.eventPool=[],e.getPooled=Jn,e.release=$n}a(Bn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Rn)},persist:function(){this.isPersistent=Rn},isPersistent:Un,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Un,this._dispatchInstances=this._dispatchListeners=null}}),Bn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Bn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return a(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,Vn(n),n},Vn(Bn);var qn=Bn.extend({data:null}),Gn=Bn.extend({data:null}),Kn=[9,13,27,32],Qn=D&&"CompositionEvent"in window,Zn=null;D&&"documentMode"in document&&(Zn=document.documentMode);var Xn=D&&"TextEvent"in window&&!Zn,er=D&&(!Qn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ar(e,t){switch(e){case"keyup":return-1!==Kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var or=!1;var sr={eventTypes:nr,extractEvents:function(e,t,n,r){var a;if(Qn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else or?ar(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(or||i!==nr.compositionStart?i===nr.compositionEnd&&or&&(a=zn()):(Wn="value"in(Fn=r)?Fn.value:Fn.textContent,or=!0)),i=qn.getPooled(i,t,n,r),a?i.data=a:null!==(a=ir(n))&&(i.data=a),Nn(i),a=i):a=null,(e=Xn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(or)return"compositionend"===e||!Qn&&ar(e,t)?(e=zn(),In=Wn=Fn=null,or=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Gn.getPooled(nr.beforeInput,t,n,r)).data=e,Nn(t)):t=null,null===a?t:null===t?a:[a,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function lr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var dr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function cr(e,t,n){return(e=Bn.getPooled(dr.change,e,t,n)).type="change",E(n),Nn(e),e}var fr=null,mr=null;function _r(e){st(e)}function pr(e){if(be(xn(e)))return e}function hr(e,t){if("change"===e)return t}var yr=!1;function gr(){fr&&(fr.detachEvent("onpropertychange",Mr),mr=fr=null)}function Mr(e){if("value"===e.propertyName&&pr(mr))if(e=cr(mr,e,ut(e)),F)st(e);else{F=!0;try{H(_r,e)}finally{F=!1,I()}}}function vr(e,t,n){"focus"===e?(gr(),mr=n,(fr=t).attachEvent("onpropertychange",Mr)):"blur"===e&&gr()}function br(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return pr(mr)}function Lr(e,t){if("click"===e)return pr(t)}function kr(e,t){if("input"===e||"change"===e)return pr(t)}D&&(yr=lt("input")&&(!document.documentMode||9<document.documentMode));var wr={eventTypes:dr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var a=t?xn(t):window,i=a.nodeName&&a.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===a.type)var o=hr;else if(lr(a))if(yr)o=kr;else{o=br;var s=vr}else(i=a.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(o=Lr);if(o&&(o=o(e,t)))return cr(o,n,r);s&&s(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&De(a,"number",a.value)}},Yr=Bn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Dr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Sr(){return Dr}var xr=0,jr=0,Or=!1,Er=!1,Pr=Yr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Sr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=xr;return xr=e.screenX,Or?"mousemove"===e.type?e.screenX-t:0:(Or=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=jr;return jr=e.screenY,Er?"mousemove"===e.type?e.screenY-t:0:(Er=!0,0)}}),Hr=Pr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ar={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Cr={eventTypes:Ar,extractEvents:function(e,t,n,r,a){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&0==(32&a)&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o)?(o=t,null!==(t=(t=n.relatedTarget||n.toElement)?Dn(t):null)&&(t!==Xe(t)||5!==t.tag&&6!==t.tag)&&(t=null)):o=null;if(o===t)return null;if("mouseout"===e||"mouseover"===e)var s=Pr,u=Ar.mouseLeave,l=Ar.mouseEnter,d="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=Hr,u=Ar.pointerLeave,l=Ar.pointerEnter,d="pointer");if(e=null==o?i:xn(o),i=null==t?i:xn(t),(u=s.getPooled(u,o,n,r)).type=d+"leave",u.target=e,u.relatedTarget=i,(n=s.getPooled(l,t,n,r)).type=d+"enter",n.target=i,n.relatedTarget=e,d=t,(r=o)&&d)e:{for(l=d,o=0,e=s=r;e;e=On(e))o++;for(e=0,t=l;t;t=On(t))e++;for(;0<o-e;)s=On(s),o--;for(;0<e-o;)l=On(l),e--;for(;o--;){if(s===l||s===l.alternate)break e;s=On(s),l=On(l)}s=null}else s=null;for(l=s,s=[];r&&r!==l&&(null===(o=r.alternate)||o!==l);)s.push(r),r=On(r);for(r=[];d&&d!==l&&(null===(o=d.alternate)||o!==l);)r.push(d),d=On(d);for(d=0;d<s.length;d++)An(s[d],"bubbled",u);for(d=r.length;0<d--;)An(r[d],"captured",n);return 0==(64&a)?[u]:[u,n]}};var Nr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Fr=Object.prototype.hasOwnProperty;function Wr(e,t){if(Nr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Fr.call(t,n[r])||!Nr(e[n[r]],t[n[r]]))return!1;return!0}var Ir=D&&"documentMode"in document&&11>=document.documentMode,zr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Rr=null,Ur=null,Br=null,Jr=!1;function $r(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Jr||null==Rr||Rr!==dn(n)?null:("selectionStart"in(n=Rr)&&_n(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Br&&Wr(Br,n)?null:(Br=n,(e=Bn.getPooled(zr.select,Ur,e,t)).type="select",e.target=Rr,Nn(e),e))}var Vr={eventTypes:zr,extractEvents:function(e,t,n,r,a,i){if(!(i=!(a=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{a=Ze(a),i=Y.onSelect;for(var o=0;o<i.length;o++)if(!a.has(i[o])){a=!1;break e}a=!0}i=!a}if(i)return null;switch(a=t?xn(t):window,e){case"focus":(lr(a)||"true"===a.contentEditable)&&(Rr=a,Ur=t,Br=null);break;case"blur":Br=Ur=Rr=null;break;case"mousedown":Jr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Jr=!1,$r(n,r);case"selectionchange":if(Ir)break;case"keydown":case"keyup":return $r(n,r)}return null}},qr=Bn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Gr=Bn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Kr=Yr.extend({relatedTarget:null});function Qr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ea=Yr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Qr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Xr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Sr,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ta=Pr.extend({dataTransfer:null}),na=Yr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Sr}),ra=Bn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),aa=Pr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ia={eventTypes:Nt,extractEvents:function(e,t,n,r){var a=Ft.get(e);if(!a)return null;switch(e){case"keypress":if(0===Qr(n))return null;case"keydown":case"keyup":e=ea;break;case"blur":case"focus":e=Kr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Pr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ta;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=na;break;case $e:case Ve:case qe:e=qr;break;case Ge:e=ra;break;case"scroll":e=Yr;break;case"wheel":e=aa;break;case"copy":case"cut":case"paste":e=Gr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Hr;break;default:e=Bn}return Nn(t=e.getPooled(a,t,n,r)),t}};if(g)throw Error(o(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),v(),_=jn,p=Sn,h=xn,T({SimpleEventPlugin:ia,EnterLeaveEventPlugin:Cr,ChangeEventPlugin:wr,SelectEventPlugin:Vr,BeforeInputEventPlugin:sr});var oa=[],sa=-1;function ua(e){0>sa||(e.current=oa[sa],oa[sa]=null,sa--)}function la(e,t){sa++,oa[sa]=e.current,e.current=t}var da={},ca={current:da},fa={current:!1},ma=da;function _a(e,t){var n=e.type.contextTypes;if(!n)return da;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function pa(e){return null!=(e=e.childContextTypes)}function ha(){ua(fa),ua(ca)}function ya(e,t,n){if(ca.current!==da)throw Error(o(168));la(ca,t),la(fa,n)}function ga(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(o(108,he(t)||"Unknown",i));return a({},n,{},r)}function Ma(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||da,ma=ca.current,la(ca,e),la(fa,fa.current),!0}function va(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=ga(e,t,ma),r.__reactInternalMemoizedMergedChildContext=e,ua(fa),ua(ca),la(ca,e)):ua(fa),la(fa,n)}var ba=i.unstable_runWithPriority,La=i.unstable_scheduleCallback,ka=i.unstable_cancelCallback,wa=i.unstable_requestPaint,Ya=i.unstable_now,Ta=i.unstable_getCurrentPriorityLevel,Da=i.unstable_ImmediatePriority,Sa=i.unstable_UserBlockingPriority,xa=i.unstable_NormalPriority,ja=i.unstable_LowPriority,Oa=i.unstable_IdlePriority,Ea={},Pa=i.unstable_shouldYield,Ha=void 0!==wa?wa:function(){},Aa=null,Ca=null,Na=!1,Fa=Ya(),Wa=1e4>Fa?Ya:function(){return Ya()-Fa};function Ia(){switch(Ta()){case Da:return 99;case Sa:return 98;case xa:return 97;case ja:return 96;case Oa:return 95;default:throw Error(o(332))}}function za(e){switch(e){case 99:return Da;case 98:return Sa;case 97:return xa;case 96:return ja;case 95:return Oa;default:throw Error(o(332))}}function Ra(e,t){return e=za(e),ba(e,t)}function Ua(e,t,n){return e=za(e),La(e,t,n)}function Ba(e){return null===Aa?(Aa=[e],Ca=La(Da,$a)):Aa.push(e),Ea}function Ja(){if(null!==Ca){var e=Ca;Ca=null,ka(e)}$a()}function $a(){if(!Na&&null!==Aa){Na=!0;var e=0;try{var t=Aa;Ra(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Aa=null}catch(t){throw null!==Aa&&(Aa=Aa.slice(e+1)),La(Da,Ja),t}finally{Na=!1}}}function Va(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function qa(e,t){if(e&&e.defaultProps)for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ga={current:null},Ka=null,Qa=null,Za=null;function Xa(){Za=Qa=Ka=null}function ei(e){var t=Ga.current;ua(Ga),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ni(e,t){Ka=e,Za=Qa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(jo=!0),e.firstContext=null)}function ri(e,t){if(Za!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Qa){if(null===Ka)throw Error(o(308));Qa=t,Ka.dependencies={expirationTime:0,firstContext:t,responders:null}}else Qa=Qa.next=t;return e._currentValue}var ai=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function oi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function si(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function li(e,t){var n=e.alternate;null!==n&&oi(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function di(e,t,n,r){var i=e.updateQueue;ai=!1;var o=i.baseQueue,s=i.shared.pending;if(null!==s){if(null!==o){var u=o.next;o.next=s.next,s.next=u}o=s,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=s))}if(null!==o){u=o.next;var l=i.baseState,d=0,c=null,f=null,m=null;if(null!==u)for(var _=u;;){if((s=_.expirationTime)<r){var p={expirationTime:_.expirationTime,suspenseConfig:_.suspenseConfig,tag:_.tag,payload:_.payload,callback:_.callback,next:null};null===m?(f=m=p,c=l):m=m.next=p,s>d&&(d=s)}else{null!==m&&(m=m.next={expirationTime:1073741823,suspenseConfig:_.suspenseConfig,tag:_.tag,payload:_.payload,callback:_.callback,next:null}),iu(s,_.suspenseConfig);e:{var h=e,y=_;switch(s=t,p=n,y.tag){case 1:if("function"==typeof(h=y.payload)){l=h.call(p,l,s);break e}l=h;break e;case 3:h.effectTag=-4097&h.effectTag|64;case 0:if(null==(s="function"==typeof(h=y.payload)?h.call(p,l,s):h))break e;l=a({},l,s);break e;case 2:ai=!0}}null!==_.callback&&(e.effectTag|=32,null===(s=i.effects)?i.effects=[_]:s.push(_))}if(null===(_=_.next)||_===u){if(null===(s=i.shared.pending))break;_=o.next=s.next,s.next=u,i.baseQueue=o=s,i.shared.pending=null}}null===m?c=l:m.next=f,i.baseState=c,i.baseQueue=m,ou(d),e.expirationTime=d,e.memoizedState=l}}function ci(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=a,a=n,"function"!=typeof r)throw Error(o(191,r));r.call(a)}}}var fi=K.ReactCurrentBatchConfig,mi=(new r.Component).refs;function _i(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var pi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=$s(),a=fi.suspense;(a=si(r=Vs(r,e,a),a)).payload=t,null!=n&&(a.callback=n),ui(e,a),qs(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=$s(),a=fi.suspense;(a=si(r=Vs(r,e,a),a)).tag=1,a.payload=t,null!=n&&(a.callback=n),ui(e,a),qs(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=$s(),r=fi.suspense;(r=si(n=Vs(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ui(e,r),qs(e,n)}};function hi(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!t.prototype||!t.prototype.isPureReactComponent||(!Wr(n,r)||!Wr(a,i))}function yi(e,t,n){var r=!1,a=da,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(a=pa(t)?ma:ca.current,i=(r=null!=(r=t.contextTypes))?_a(e,a):da),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function Mi(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=mi,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=ri(i):(i=pa(t)?ma:ca.current,a.context=_a(e,i)),di(e,n,a,r),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(_i(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&pi.enqueueReplaceState(a,a.state,null),di(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}var vi=Array.isArray;function bi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Li(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ki(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=xu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=bi(e,t,n),r.return=e,r):((r=Du(n.type,n.key,n.props,null,e.mode,r)).ref=bi(e,t,n),r.return=e,r)}function d(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ju(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function c(e,t,n,r,i){return null===t||7!==t.tag?((t=Su(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=xu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Du(t.type,t.key,t.props,null,e.mode,n)).ref=bi(e,null,t),n.return=e,n;case te:return(t=ju(t,e.mode,n)).return=e,t}if(vi(t)||pe(t))return(t=Su(t,e.mode,n,null)).return=e,t;Li(e,t)}return null}function m(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===a?n.type===ne?c(e,t,n.props.children,r,a):l(e,t,n,r):null;case te:return n.key===a?d(e,t,n,r):null}if(vi(n)||pe(n))return null!==a?null:c(e,t,n,r,null);Li(e,n)}return null}function _(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?c(t,e,r.props.children,a,r.key):l(t,e,r,a);case te:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(vi(r)||pe(r))return c(t,e=e.get(n)||null,r,a,null);Li(t,r)}return null}function p(a,o,s,u){for(var l=null,d=null,c=o,p=o=0,h=null;null!==c&&p<s.length;p++){c.index>p?(h=c,c=null):h=c.sibling;var y=m(a,c,s[p],u);if(null===y){null===c&&(c=h);break}e&&c&&null===y.alternate&&t(a,c),o=i(y,o,p),null===d?l=y:d.sibling=y,d=y,c=h}if(p===s.length)return n(a,c),l;if(null===c){for(;p<s.length;p++)null!==(c=f(a,s[p],u))&&(o=i(c,o,p),null===d?l=c:d.sibling=c,d=c);return l}for(c=r(a,c);p<s.length;p++)null!==(h=_(c,a,p,s[p],u))&&(e&&null!==h.alternate&&c.delete(null===h.key?p:h.key),o=i(h,o,p),null===d?l=h:d.sibling=h,d=h);return e&&c.forEach((function(e){return t(a,e)})),l}function h(a,s,u,l){var d=pe(u);if("function"!=typeof d)throw Error(o(150));if(null==(u=d.call(u)))throw Error(o(151));for(var c=d=null,p=s,h=s=0,y=null,g=u.next();null!==p&&!g.done;h++,g=u.next()){p.index>h?(y=p,p=null):y=p.sibling;var M=m(a,p,g.value,l);if(null===M){null===p&&(p=y);break}e&&p&&null===M.alternate&&t(a,p),s=i(M,s,h),null===c?d=M:c.sibling=M,c=M,p=y}if(g.done)return n(a,p),d;if(null===p){for(;!g.done;h++,g=u.next())null!==(g=f(a,g.value,l))&&(s=i(g,s,h),null===c?d=g:c.sibling=g,c=g);return d}for(p=r(a,p);!g.done;h++,g=u.next())null!==(g=_(p,a,h,g.value,l))&&(e&&null!==g.alternate&&p.delete(null===g.key?h:g.key),s=i(g,s,h),null===c?d=g:c.sibling=g,c=g);return e&&p.forEach((function(e){return t(a,e)})),d}return function(e,r,i,u){var l="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;l&&(i=i.props.children);var d="object"==typeof i&&null!==i;if(d)switch(i.$$typeof){case ee:e:{for(d=i.key,l=r;null!==l;){if(l.key===d){switch(l.tag){case 7:if(i.type===ne){n(e,l.sibling),(r=a(l,i.props.children)).return=e,e=r;break e}break;default:if(l.elementType===i.type){n(e,l.sibling),(r=a(l,i.props)).ref=bi(e,l,i),r.return=e,e=r;break e}}n(e,l);break}t(e,l),l=l.sibling}i.type===ne?((r=Su(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Du(i.type,i.key,i.props,null,e.mode,u)).ref=bi(e,r,i),u.return=e,e=u)}return s(e);case te:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ju(i,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i)).return=e,e=r):(n(e,r),(r=xu(i,e.mode,u)).return=e,e=r),s(e);if(vi(i))return p(e,r,i,u);if(pe(i))return h(e,r,i,u);if(d&&Li(e,i),void 0===i&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(o(152,e.displayName||e.name||"Component"))}return n(e,r)}}var wi=ki(!0),Yi=ki(!1),Ti={},Di={current:Ti},Si={current:Ti},xi={current:Ti};function ji(e){if(e===Ti)throw Error(o(174));return e}function Oi(e,t){switch(la(xi,t),la(Si,e),la(Di,Ti),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ne(null,"");break;default:t=Ne(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ua(Di),la(Di,t)}function Ei(){ua(Di),ua(Si),ua(xi)}function Pi(e){ji(xi.current);var t=ji(Di.current),n=Ne(t,e.type);t!==n&&(la(Si,e),la(Di,n))}function Hi(e){Si.current===e&&(ua(Di),ua(Si))}var Ai={current:0};function Ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ni(e,t){return{responder:e,props:t}}var Fi=K.ReactCurrentDispatcher,Wi=K.ReactCurrentBatchConfig,Ii=0,zi=null,Ri=null,Ui=null,Bi=!1;function Ji(){throw Error(o(321))}function $i(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Nr(e[n],t[n]))return!1;return!0}function Vi(e,t,n,r,a,i){if(Ii=i,zi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fi.current=null===e||null===e.memoizedState?yo:go,e=n(r,a),t.expirationTime===Ii){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(o(301));i+=1,Ui=Ri=null,t.updateQueue=null,Fi.current=Mo,e=n(r,a)}while(t.expirationTime===Ii)}if(Fi.current=ho,t=null!==Ri&&null!==Ri.next,Ii=0,Ui=Ri=zi=null,Bi=!1,t)throw Error(o(300));return e}function qi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ui?zi.memoizedState=Ui=e:Ui=Ui.next=e,Ui}function Gi(){if(null===Ri){var e=zi.alternate;e=null!==e?e.memoizedState:null}else e=Ri.next;var t=null===Ui?zi.memoizedState:Ui.next;if(null!==t)Ui=t,Ri=e;else{if(null===e)throw Error(o(310));e={memoizedState:(Ri=e).memoizedState,baseState:Ri.baseState,baseQueue:Ri.baseQueue,queue:Ri.queue,next:null},null===Ui?zi.memoizedState=Ui=e:Ui=Ui.next=e}return Ui}function Ki(e,t){return"function"==typeof t?t(e):t}function Qi(e){var t=Gi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=Ri,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var s=a.next;a.next=i.next,i.next=s}r.baseQueue=a=i,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=s=i=null,l=a;do{var d=l.expirationTime;if(d<Ii){var c={expirationTime:l.expirationTime,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(s=u=c,i=r):u=u.next=c,d>zi.expirationTime&&(zi.expirationTime=d,ou(d))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),iu(d,l.suspenseConfig),r=l.eagerReducer===e?l.eagerState:e(r,l.action);l=l.next}while(null!==l&&l!==a);null===u?i=r:u.next=s,Nr(r,t.memoizedState)||(jo=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zi(e){var t=Gi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var s=a=a.next;do{i=e(i,s.action),s=s.next}while(s!==a);Nr(i,t.memoizedState)||(jo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Xi(e){var t=qi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ki,lastRenderedState:e}).dispatch=po.bind(null,zi,e),[t.memoizedState,e]}function eo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=zi.updateQueue)?(t={lastEffect:null},zi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function to(){return Gi().memoizedState}function no(e,t,n,r){var a=qi();zi.effectTag|=e,a.memoizedState=eo(1|t,n,void 0,void 0===r?null:r)}function ro(e,t,n,r){var a=Gi();r=void 0===r?null:r;var i=void 0;if(null!==Ri){var o=Ri.memoizedState;if(i=o.destroy,null!==r&&$i(r,o.deps))return void eo(t,n,i,r)}zi.effectTag|=e,a.memoizedState=eo(1|t,n,i,r)}function ao(e,t){return no(516,4,e,t)}function io(e,t){return ro(516,4,e,t)}function oo(e,t){return ro(4,2,e,t)}function so(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function uo(e,t,n){return n=null!=n?n.concat([e]):null,ro(4,2,so.bind(null,t,e),n)}function lo(){}function co(e,t){return qi().memoizedState=[e,void 0===t?null:t],e}function fo(e,t){var n=Gi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function mo(e,t){var n=Gi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&$i(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function _o(e,t,n){var r=Ia();Ra(98>r?98:r,(function(){e(!0)})),Ra(97<r?97:r,(function(){var r=Wi.suspense;Wi.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wi.suspense=r}}))}function po(e,t,n){var r=$s(),a=fi.suspense;a={expirationTime:r=Vs(r,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===zi||null!==i&&i===zi)Bi=!0,a.expirationTime=Ii,zi.expirationTime=Ii;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var o=t.lastRenderedState,s=i(o,n);if(a.eagerReducer=i,a.eagerState=s,Nr(s,o))return}catch(e){}qs(e,r)}}var ho={readContext:ri,useCallback:Ji,useContext:Ji,useEffect:Ji,useImperativeHandle:Ji,useLayoutEffect:Ji,useMemo:Ji,useReducer:Ji,useRef:Ji,useState:Ji,useDebugValue:Ji,useResponder:Ji,useDeferredValue:Ji,useTransition:Ji},yo={readContext:ri,useCallback:co,useContext:ri,useEffect:ao,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,no(4,2,so.bind(null,t,e),n)},useLayoutEffect:function(e,t){return no(4,2,e,t)},useMemo:function(e,t){var n=qi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=qi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=po.bind(null,zi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},qi().memoizedState=e},useState:Xi,useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Xi(e),r=n[0],a=n[1];return ao((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xi(!1),n=t[0];return t=t[1],[co(_o.bind(null,t,e),[t,e]),n]}},go={readContext:ri,useCallback:fo,useContext:ri,useEffect:io,useImperativeHandle:uo,useLayoutEffect:oo,useMemo:mo,useReducer:Qi,useRef:to,useState:function(){return Qi(Ki)},useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Qi(Ki),r=n[0],a=n[1];return io((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Qi(Ki),n=t[0];return t=t[1],[fo(_o.bind(null,t,e),[t,e]),n]}},Mo={readContext:ri,useCallback:fo,useContext:ri,useEffect:io,useImperativeHandle:uo,useLayoutEffect:oo,useMemo:mo,useReducer:Zi,useRef:to,useState:function(){return Zi(Ki)},useDebugValue:lo,useResponder:Ni,useDeferredValue:function(e,t){var n=Zi(Ki),r=n[0],a=n[1];return io((function(){var n=Wi.suspense;Wi.suspense=void 0===t?null:t;try{a(e)}finally{Wi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zi(Ki),n=t[0];return t=t[1],[fo(_o.bind(null,t,e),[t,e]),n]}},vo=null,bo=null,Lo=!1;function ko(e,t){var n=wu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function wo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Yo(e){if(Lo){var t=bo;if(t){var n=t;if(!wo(e,t)){if(!(t=bn(n.nextSibling))||!wo(e,t))return e.effectTag=-1025&e.effectTag|2,Lo=!1,void(vo=e);ko(vo,n)}vo=e,bo=bn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Lo=!1,vo=e}}function To(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;vo=e}function Do(e){if(e!==vo)return!1;if(!Lo)return To(e),Lo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=bo;t;)ko(e,t),t=bn(t.nextSibling);if(To(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){bo=bn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}bo=null}}else bo=vo?bn(e.stateNode.nextSibling):null;return!0}function So(){bo=vo=null,Lo=!1}var xo=K.ReactCurrentOwner,jo=!1;function Oo(e,t,n,r){t.child=null===e?Yi(t,null,n,r):wi(t,e.child,n,r)}function Eo(e,t,n,r,a){n=n.render;var i=t.ref;return ni(t,a),r=Vi(e,t,n,r,i,a),null===e||jo?(t.effectTag|=1,Oo(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),qo(e,t,a))}function Po(e,t,n,r,a,i){if(null===e){var o=n.type;return"function"!=typeof o||Yu(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Du(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ho(e,t,o,r,a,i))}return o=e.child,a<i&&(a=o.memoizedProps,(n=null!==(n=n.compare)?n:Wr)(a,r)&&e.ref===t.ref)?qo(e,t,i):(t.effectTag|=1,(e=Tu(o,r)).ref=t.ref,e.return=t,t.child=e)}function Ho(e,t,n,r,a,i){return null!==e&&Wr(e.memoizedProps,r)&&e.ref===t.ref&&(jo=!1,a<i)?(t.expirationTime=e.expirationTime,qo(e,t,i)):Co(e,t,n,r,i)}function Ao(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Co(e,t,n,r,a){var i=pa(n)?ma:ca.current;return i=_a(t,i),ni(t,a),n=Vi(e,t,n,r,i,a),null===e||jo?(t.effectTag|=1,Oo(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),qo(e,t,a))}function No(e,t,n,r,a){if(pa(n)){var i=!0;Ma(t)}else i=!1;if(ni(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yi(t,n,r),Mi(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var u=o.context,l=n.contextType;"object"==typeof l&&null!==l?l=ri(l):l=_a(t,l=pa(n)?ma:ca.current);var d=n.getDerivedStateFromProps,c="function"==typeof d||"function"==typeof o.getSnapshotBeforeUpdate;c||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||u!==l)&&gi(t,o,r,l),ai=!1;var f=t.memoizedState;o.state=f,di(t,r,o,a),u=t.memoizedState,s!==r||f!==u||fa.current||ai?("function"==typeof d&&(_i(t,n,d,r),u=t.memoizedState),(s=ai||hi(t,n,s,r,f,u,l))?(c||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=l,r=s):("function"==typeof o.componentDidMount&&(t.effectTag|=4),r=!1)}else o=t.stateNode,oi(e,t),s=t.memoizedProps,o.props=t.type===t.elementType?s:qa(t.type,s),u=o.context,"object"==typeof(l=n.contextType)&&null!==l?l=ri(l):l=_a(t,l=pa(n)?ma:ca.current),(c="function"==typeof(d=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||u!==l)&&gi(t,o,r,l),ai=!1,u=t.memoizedState,o.state=u,di(t,r,o,a),f=t.memoizedState,s!==r||u!==f||fa.current||ai?("function"==typeof d&&(_i(t,n,d,r),f=t.memoizedState),(d=ai||hi(t,n,s,r,u,f,l))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,f,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,f,l)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),o.props=r,o.state=f,o.context=l,r=d):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Fo(e,t,n,r,i,a)}function Fo(e,t,n,r,a,i){Ao(e,t);var o=0!=(64&t.effectTag);if(!r&&!o)return a&&va(t,n,!1),qo(e,t,i);r=t.stateNode,xo.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&o?(t.child=wi(t,e.child,null,i),t.child=wi(t,null,s,i)):Oo(e,t,s,i),t.memoizedState=r.state,a&&va(t,n,!0),t.child}function Wo(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),Oi(e,t.containerInfo)}var Io,zo,Ro,Uo={dehydrated:null,retryTime:0};function Bo(e,t,n){var r,a=t.mode,i=t.pendingProps,o=Ai.current,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&o)&&(null===e||null!==e.memoizedState)),r?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),la(Ai,1&o),null===e){if(void 0!==i.fallback&&Yo(t),s){if(s=i.fallback,(i=Su(null,a,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Su(s,a,n,null)).return=t,i.sibling=n,t.memoizedState=Uo,t.child=i,n}return a=i.children,t.memoizedState=null,t.child=Yi(t,null,a,n)}if(null!==e.memoizedState){if(a=(e=e.child).sibling,s){if(i=i.fallback,(n=Tu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(a=Tu(a,i)).return=t,n.sibling=a,n.childExpirationTime=0,t.memoizedState=Uo,t.child=n,a}return n=wi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=i.fallback,(i=Su(null,a,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Su(s,a,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Uo,t.child=i,n}return t.memoizedState=null,t.child=wi(t,e,i.children,n)}function Jo(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ti(e.return,t)}function $o(e,t,n,r,a,i){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:a,lastEffect:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=a,o.lastEffect=i)}function Vo(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Oo(e,t,r.children,n),0!=(2&(r=Ai.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Jo(e,n);else if(19===e.tag)Jo(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(la(Ai,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ci(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),$o(t,!1,a,n,i,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ci(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}$o(t,!0,n,null,i,t.lastEffect);break;case"together":$o(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function qo(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ou(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Go(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ko(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return pa(t.type)&&ha(),null;case 3:return Ei(),ua(fa),ua(ca),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Do(t)||(t.effectTag|=4),null;case 5:Hi(t),n=ji(xi.current);var i=t.type;if(null!==e&&null!=t.stateNode)zo(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=ji(Di.current),Do(t)){r=t.stateNode,i=t.type;var s=t.memoizedProps;switch(r[wn]=t,r[Yn]=s,i){case"iframe":case"object":case"embed":Vt("load",r);break;case"video":case"audio":for(e=0;e<Ke.length;e++)Vt(Ke[e],r);break;case"source":Vt("error",r);break;case"img":case"image":case"link":Vt("error",r),Vt("load",r);break;case"form":Vt("reset",r),Vt("submit",r);break;case"details":Vt("toggle",r);break;case"input":ke(r,s),Vt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Vt("invalid",r),un(n,"onChange");break;case"textarea":Oe(r,s),Vt("invalid",r),un(n,"onChange")}for(var u in an(i,s),e=null,s)if(s.hasOwnProperty(u)){var l=s[u];"children"===u?"string"==typeof l?r.textContent!==l&&(e=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(e=["children",""+l]):w.hasOwnProperty(u)&&null!=l&&un(n,u)}switch(i){case"input":ve(r),Te(r,s,!0);break;case"textarea":ve(r),Pe(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===sn&&(e=Ce(i)),e===sn?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[wn]=t,e[Yn]=r,Io(e,t),t.stateNode=e,u=on(i,r),i){case"iframe":case"object":case"embed":Vt("load",e),l=r;break;case"video":case"audio":for(l=0;l<Ke.length;l++)Vt(Ke[l],e);l=r;break;case"source":Vt("error",e),l=r;break;case"img":case"image":case"link":Vt("error",e),Vt("load",e),l=r;break;case"form":Vt("reset",e),Vt("submit",e),l=r;break;case"details":Vt("toggle",e),l=r;break;case"input":ke(e,r),l=Le(e,r),Vt("invalid",e),un(n,"onChange");break;case"option":l=Se(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=a({},r,{value:void 0}),Vt("invalid",e),un(n,"onChange");break;case"textarea":Oe(e,r),l=je(e,r),Vt("invalid",e),un(n,"onChange");break;default:l=r}an(i,l);var d=l;for(s in d)if(d.hasOwnProperty(s)){var c=d[s];"style"===s?nn(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&We(e,c):"children"===s?"string"==typeof c?("textarea"!==i||""!==c)&&Ie(e,c):"number"==typeof c&&Ie(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(w.hasOwnProperty(s)?null!=c&&un(n,s):null!=c&&Q(e,s,c,u))}switch(i){case"input":ve(e),Te(e,r,!1);break;case"textarea":ve(e),Pe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?xe(e,!!r.multiple,n,!1):null!=r.defaultValue&&xe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=ln)}yn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ro(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=ji(xi.current),ji(Di.current),Do(t)?(n=t.stateNode,r=t.memoizedProps,n[wn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[wn]=t,t.stateNode=n)}return null;case 13:return ua(Ai),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Do(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=i,i.nextEffect=s):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ai.current)?Ds===vs&&(Ds=bs):(Ds!==vs&&Ds!==bs||(Ds=Ls),0!==Es&&null!==ws&&(Pu(ws,Ts),Hu(ws,Es)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ei(),null;case 10:return ei(t),null;case 17:return pa(t.type)&&ha(),null;case 19:if(ua(Ai),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(s=r.rendering)){if(i)Go(r,!1);else if(Ds!==vs||null!==e&&0!=(64&e.effectTag))for(s=t.child;null!==s;){if(null!==(e=Ci(s))){for(t.effectTag|=64,Go(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)s=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=s,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,s=e.dependencies,i.dependencies=null===s?null:{expirationTime:s.expirationTime,firstContext:s.firstContext,responders:s.responders}),r=r.sibling;return la(Ai,1&Ai.current|2),t.child}s=s.sibling}}else{if(!i)if(null!==(e=Ci(s))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Go(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wa()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Go(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Wa()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wa(),n.sibling=null,t=Ai.current,la(Ai,i?1&t|2:1&t),n):null}throw Error(o(156,t.tag))}function Qo(e){switch(e.tag){case 1:pa(e.type)&&ha();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ei(),ua(fa),ua(ca),0!=(64&(t=e.effectTag)))throw Error(o(285));return e.effectTag=-4097&t|64,e;case 5:return Hi(e),null;case 13:return ua(Ai),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ua(Ai),null;case 4:return Ei(),null;case 10:return ei(e),null;default:return null}}function Zo(e,t){return{value:e,source:t,stack:ye(t)}}Io=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},zo=function(e,t,n,r,i){var o=e.memoizedProps;if(o!==r){var s,u,l=t.stateNode;switch(ji(Di.current),e=null,n){case"input":o=Le(l,o),r=Le(l,r),e=[];break;case"option":o=Se(l,o),r=Se(l,r),e=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),e=[];break;case"textarea":o=je(l,o),r=je(l,r),e=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(l.onclick=ln)}for(s in an(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s)for(u in l=o[s])l.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(w.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in r){var d=r[s];if(l=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&d!==l&&(null!=d||null!=l))if("style"===s)if(l){for(u in l)!l.hasOwnProperty(u)||d&&d.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in d)d.hasOwnProperty(u)&&l[u]!==d[u]&&(n||(n={}),n[u]=d[u])}else n||(e||(e=[]),e.push(s,n)),n=d;else"dangerouslySetInnerHTML"===s?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(e=e||[]).push(s,d)):"children"===s?l===d||"string"!=typeof d&&"number"!=typeof d||(e=e||[]).push(s,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(w.hasOwnProperty(s)?(null!=d&&un(i,s),e||l===d||(e=[])):(e=e||[]).push(s,d))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Ro=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Xo="function"==typeof WeakSet?WeakSet:Set;function es(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&he(n.type),t=t.value,null!==e&&1===e.tag&&he(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ts(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gu(e,t)}else t.current=null}function ns(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qa(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(o(163))}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function as(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function is(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void as(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:qa(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&ci(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ci(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ct(n)))));case 19:case 17:case 20:case 21:return}throw Error(o(163))}function os(e,t,n){switch("function"==typeof Lu&&Lu(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ra(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var a=t;try{n()}catch(e){gu(a,e)}}e=e.next}while(e!==r)}))}break;case 1:ts(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gu(e,t)}}(t,n);break;case 5:ts(t);break;case 4:ds(e,t,n)}}function ss(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ss(t)}function us(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:{for(var t=e.return;null!==t;){if(us(t)){var n=t;break e}t=t.return}throw Error(o(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.effectTag&&(Ie(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||us(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var a=t.tag,i=5===a||6===a;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=ln));else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var a=t.tag,i=5===a||6===a;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function ds(e,t,n){for(var r,a,i=t,s=!1;;){if(!s){s=i.return;e:for(;;){if(null===s)throw Error(o(160));switch(r=s.stateNode,s.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}s=s.return}s=!0}if(5===i.tag||6===i.tag){e:for(var u=e,l=i,d=n,c=l;;)if(os(u,c,d),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}a?(u=r,l=i.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,a=!0,i.child.return=i,i=i.child;continue}}else if(os(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(s=!1)}i.sibling.return=i.return,i=i.sibling}}function cs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rs(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Yn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&we(n,r),on(e,a),t=on(e,r),a=0;a<i.length;a+=2){var s=i[a],u=i[a+1];"style"===s?nn(n,u):"dangerouslySetInnerHTML"===s?We(n,u):"children"===s?Ie(n,u):Q(n,s,u,t)}switch(e){case"input":Ye(n,r);break;case"textarea":Ee(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?xe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?xe(n,!!r.multiple,r.defaultValue,!0):xe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Ct(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Hs=Wa()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,a=null!=(a=e.memoizedProps.style)&&a.hasOwnProperty("display")?a.display:null,i.style.display=tn("display",a));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fs(t);case 19:return void fs(t);case 17:return}throw Error(o(163))}function fs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xo),t.forEach((function(t){var r=vu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var ms="function"==typeof WeakMap?WeakMap:Map;function _s(e,t,n){(n=si(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Cs||(Cs=!0,Ns=r),es(e,t)},n}function ps(e,t,n){(n=si(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return es(e,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Fs?Fs=new Set([this]):Fs.add(this),es(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var hs,ys=Math.ceil,gs=K.ReactCurrentDispatcher,Ms=K.ReactCurrentOwner,vs=0,bs=3,Ls=4,ks=0,ws=null,Ys=null,Ts=0,Ds=vs,Ss=null,xs=1073741823,js=1073741823,Os=null,Es=0,Ps=!1,Hs=0,As=null,Cs=!1,Ns=null,Fs=null,Ws=!1,Is=null,zs=90,Rs=null,Us=0,Bs=null,Js=0;function $s(){return 0!=(48&ks)?1073741821-(Wa()/10|0):0!==Js?Js:Js=1073741821-(Wa()/10|0)}function Vs(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ia();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&ks))return Ts;if(null!==n)e=Va(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Va(e,150,100);break;case 97:case 96:e=Va(e,5e3,250);break;case 95:e=2;break;default:throw Error(o(326))}return null!==ws&&e===Ts&&--e,e}function qs(e,t){if(50<Us)throw Us=0,Bs=null,Error(o(185));if(null!==(e=Gs(e,t))){var n=Ia();1073741823===t?0!=(8&ks)&&0==(48&ks)?Xs(e):(Qs(e),0===ks&&Ja()):Qs(e),0==(4&ks)||98!==n&&99!==n||(null===Rs?Rs=new Map([[e,t]]):(void 0===(n=Rs.get(e))||n>t)&&Rs.set(e,t))}}function Gs(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return null!==a&&(ws===a&&(ou(t),Ds===Ls&&Pu(a,Ts)),Hu(a,t)),a}function Ks(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Eu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Qs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ba(Xs.bind(null,e));else{var t=Ks(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=$s();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var a=e.callbackPriority;if(e.callbackExpirationTime===t&&a>=r)return;n!==Ea&&ka(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ba(Xs.bind(null,e)):Ua(r,Zs.bind(null,e),{timeout:10*(1073741821-t)-Wa()}),e.callbackNode=t}}}function Zs(e,t){if(Js=0,t)return Au(e,t=$s()),Qs(e),null;var n=Ks(e);if(0!==n){if(t=e.callbackNode,0!=(48&ks))throw Error(o(327));if(pu(),e===ws&&n===Ts||nu(e,n),null!==Ys){var r=ks;ks|=16;for(var a=au();;)try{uu();break}catch(t){ru(e,t)}if(Xa(),ks=r,gs.current=a,1===Ds)throw t=Ss,nu(e,n),Pu(e,n),Qs(e),t;if(null===Ys)switch(a=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ds,ws=null,r){case vs:case 1:throw Error(o(345));case 2:Au(e,2<n?2:n);break;case bs:if(Pu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(a)),1073741823===xs&&10<(a=Hs+500-Wa())){if(Ps){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Ks(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=Mn(fu.bind(null,e),a);break}fu(e);break;case Ls:if(Pu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(a)),Ps&&(0===(a=e.lastPingedTime)||a>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(a=Ks(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==js?r=10*(1073741821-js)-Wa():1073741823===xs?r=0:(r=10*(1073741821-xs)-5e3,0>(r=(a=Wa())-r)&&(r=0),(n=10*(1073741821-n)-a)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ys(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=Mn(fu.bind(null,e),r);break}fu(e);break;case 5:if(1073741823!==xs&&null!==Os){i=xs;var s=Os;if(0>=(r=0|s.busyMinDurationMs)?r=0:(a=0|s.busyDelayMs,r=(i=Wa()-(10*(1073741821-i)-(0|s.timeoutMs||5e3)))<=a?0:a+r-i),10<r){Pu(e,n),e.timeoutHandle=Mn(fu.bind(null,e),r);break}}fu(e);break;default:throw Error(o(329))}if(Qs(e),e.callbackNode===t)return Zs.bind(null,e)}}return null}function Xs(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&ks))throw Error(o(327));if(pu(),e===ws&&t===Ts||nu(e,t),null!==Ys){var n=ks;ks|=16;for(var r=au();;)try{su();break}catch(t){ru(e,t)}if(Xa(),ks=n,gs.current=r,1===Ds)throw n=Ss,nu(e,t),Pu(e,t),Qs(e),n;if(null!==Ys)throw Error(o(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,ws=null,fu(e),Qs(e)}return null}function eu(e,t){var n=ks;ks|=1;try{return e(t)}finally{0===(ks=n)&&Ja()}}function tu(e,t){var n=ks;ks&=-2,ks|=8;try{return e(t)}finally{0===(ks=n)&&Ja()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,vn(n)),null!==Ys)for(n=Ys.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ha();break;case 3:Ei(),ua(fa),ua(ca);break;case 5:Hi(r);break;case 4:Ei();break;case 13:case 19:ua(Ai);break;case 10:ei(r)}n=n.return}ws=e,Ys=Tu(e.current,null),Ts=t,Ds=vs,Ss=null,js=xs=1073741823,Os=null,Es=0,Ps=!1}function ru(e,t){for(;;){try{if(Xa(),Fi.current=ho,Bi)for(var n=zi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Ii=0,Ui=Ri=zi=null,Bi=!1,null===Ys||null===Ys.return)return Ds=1,Ss=t,Ys=null;e:{var a=e,i=Ys.return,o=Ys,s=t;if(t=Ts,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&o.mode)){var l=o.alternate;l?(o.updateQueue=l.updateQueue,o.memoizedState=l.memoizedState,o.expirationTime=l.expirationTime):(o.updateQueue=null,o.memoizedState=null)}var d=0!=(1&Ai.current),c=i;do{var f;if(f=13===c.tag){var m=c.memoizedState;if(null!==m)f=null!==m.dehydrated;else{var _=c.memoizedProps;f=void 0!==_.fallback&&(!0!==_.unstable_avoidThisFallback||!d)}}if(f){var p=c.updateQueue;if(null===p){var h=new Set;h.add(u),c.updateQueue=h}else p.add(u);if(0==(2&c.mode)){if(c.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var y=si(1073741823,null);y.tag=2,ui(o,y)}o.expirationTime=1073741823;break e}s=void 0,o=t;var g=a.pingCache;if(null===g?(g=a.pingCache=new ms,s=new Set,g.set(u,s)):void 0===(s=g.get(u))&&(s=new Set,g.set(u,s)),!s.has(o)){s.add(o);var M=Mu.bind(null,a,u,o);u.then(M,M)}c.effectTag|=4096,c.expirationTime=t;break e}c=c.return}while(null!==c);s=Error((he(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(o))}5!==Ds&&(Ds=2),s=Zo(s,o),c=i;do{switch(c.tag){case 3:u=s,c.effectTag|=4096,c.expirationTime=t,li(c,_s(c,u,t));break e;case 1:u=s;var v=c.type,b=c.stateNode;if(0==(64&c.effectTag)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Fs||!Fs.has(b)))){c.effectTag|=4096,c.expirationTime=t,li(c,ps(c,u,t));break e}}c=c.return}while(null!==c)}Ys=du(Ys)}catch(e){t=e;continue}break}}function au(){var e=gs.current;return gs.current=ho,null===e?ho:e}function iu(e,t){e<xs&&2<e&&(xs=e),null!==t&&e<js&&2<e&&(js=e,Os=t)}function ou(e){e>Es&&(Es=e)}function su(){for(;null!==Ys;)Ys=lu(Ys)}function uu(){for(;null!==Ys&&!Pa();)Ys=lu(Ys)}function lu(e){var t=hs(e.alternate,e,Ts);return e.memoizedProps=e.pendingProps,null===t&&(t=du(e)),Ms.current=null,t}function du(e){Ys=e;do{var t=Ys.alternate;if(e=Ys.return,0==(2048&Ys.effectTag)){if(t=Ko(t,Ys,Ts),1===Ts||1!==Ys.childExpirationTime){for(var n=0,r=Ys.child;null!==r;){var a=r.expirationTime,i=r.childExpirationTime;a>n&&(n=a),i>n&&(n=i),r=r.sibling}Ys.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ys.firstEffect),null!==Ys.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ys.firstEffect),e.lastEffect=Ys.lastEffect),1<Ys.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ys:e.firstEffect=Ys,e.lastEffect=Ys))}else{if(null!==(t=Qo(Ys)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ys.sibling))return t;Ys=e}while(null!==Ys);return Ds===vs&&(Ds=5),null}function cu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fu(e){var t=Ia();return Ra(99,mu.bind(null,e,t)),null}function mu(e,t){do{pu()}while(null!==Is);if(0!=(48&ks))throw Error(o(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var a=cu(n);if(e.firstPendingTime=a,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===ws&&(Ys=ws=null,Ts=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){var i=ks;ks|=32,Ms.current=null,pn=$t;var s=mn();if(_n(s)){if("selectionStart"in s)var u={start:s.selectionStart,end:s.selectionEnd};else e:{var l=(u=(u=s.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(l&&0!==l.rangeCount){u=l.anchorNode;var d=l.anchorOffset,c=l.focusNode;l=l.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,m=-1,_=-1,p=0,h=0,y=s,g=null;t:for(;;){for(var M;y!==u||0!==d&&3!==y.nodeType||(m=f+d),y!==c||0!==l&&3!==y.nodeType||(_=f+l),3===y.nodeType&&(f+=y.nodeValue.length),null!==(M=y.firstChild);)g=y,y=M;for(;;){if(y===s)break t;if(g===u&&++p===d&&(m=f),g===c&&++h===l&&(_=f),null!==(M=y.nextSibling))break;g=(y=g).parentNode}y=M}u=-1===m||-1===_?null:{start:m,end:_}}else u=null}u=u||{start:0,end:0}}else u=null;hn={activeElementDetached:null,focusedElem:s,selectionRange:u},$t=!1,As=a;do{try{_u()}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);As=a;do{try{for(s=e,u=t;null!==As;){var v=As.effectTag;if(16&v&&Ie(As.stateNode,""),128&v){var b=As.alternate;if(null!==b){var L=b.ref;null!==L&&("function"==typeof L?L(null):L.current=null)}}switch(1038&v){case 2:ls(As),As.effectTag&=-3;break;case 6:ls(As),As.effectTag&=-3,cs(As.alternate,As);break;case 1024:As.effectTag&=-1025;break;case 1028:As.effectTag&=-1025,cs(As.alternate,As);break;case 4:cs(As.alternate,As);break;case 8:ds(s,d=As,u),ss(d)}As=As.nextEffect}}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);if(L=hn,b=mn(),v=L.focusedElem,u=L.selectionRange,b!==v&&v&&v.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(v.ownerDocument.documentElement,v)){null!==u&&_n(v)&&(b=u.start,void 0===(L=u.end)&&(L=b),"selectionStart"in v?(v.selectionStart=b,v.selectionEnd=Math.min(L,v.value.length)):(L=(b=v.ownerDocument||document)&&b.defaultView||window).getSelection&&(L=L.getSelection(),d=v.textContent.length,s=Math.min(u.start,d),u=void 0===u.end?s:Math.min(u.end,d),!L.extend&&s>u&&(d=u,u=s,s=d),d=fn(v,s),c=fn(v,u),d&&c&&(1!==L.rangeCount||L.anchorNode!==d.node||L.anchorOffset!==d.offset||L.focusNode!==c.node||L.focusOffset!==c.offset)&&((b=b.createRange()).setStart(d.node,d.offset),L.removeAllRanges(),s>u?(L.addRange(b),L.extend(c.node,c.offset)):(b.setEnd(c.node,c.offset),L.addRange(b))))),b=[];for(L=v;L=L.parentNode;)1===L.nodeType&&b.push({element:L,left:L.scrollLeft,top:L.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<b.length;v++)(L=b[v]).element.scrollLeft=L.left,L.element.scrollTop=L.top}$t=!!pn,hn=pn=null,e.current=n,As=a;do{try{for(v=e;null!==As;){var k=As.effectTag;if(36&k&&is(v,As.alternate,As),128&k){b=void 0;var w=As.ref;if(null!==w){var Y=As.stateNode;switch(As.tag){case 5:b=Y;break;default:b=Y}"function"==typeof w?w(b):w.current=b}}As=As.nextEffect}}catch(e){if(null===As)throw Error(o(330));gu(As,e),As=As.nextEffect}}while(null!==As);As=null,Ha(),ks=i}else e.current=n;if(Ws)Ws=!1,Is=e,zs=t;else for(As=a;null!==As;)t=As.nextEffect,As.nextEffect=null,As=t;if(0===(t=e.firstPendingTime)&&(Fs=null),1073741823===t?e===Bs?Us++:(Us=0,Bs=e):Us=0,"function"==typeof bu&&bu(n.stateNode,r),Qs(e),Cs)throw Cs=!1,e=Ns,Ns=null,e;return 0!=(8&ks)||Ja(),null}function _u(){for(;null!==As;){var e=As.effectTag;0!=(256&e)&&ns(As.alternate,As),0==(512&e)||Ws||(Ws=!0,Ua(97,(function(){return pu(),null}))),As=As.nextEffect}}function pu(){if(90!==zs){var e=97<zs?97:zs;return zs=90,Ra(e,hu)}}function hu(){if(null===Is)return!1;var e=Is;if(Is=null,0!=(48&ks))throw Error(o(331));var t=ks;for(ks|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rs(5,n),as(5,n)}}catch(t){if(null===e)throw Error(o(330));gu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return ks=t,Ja(),!0}function yu(e,t,n){ui(e,t=_s(e,t=Zo(n,t),1073741823)),null!==(e=Gs(e,1073741823))&&Qs(e)}function gu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Fs||!Fs.has(r))){ui(n,e=ps(n,e=Zo(t,e),1073741823)),null!==(n=Gs(n,1073741823))&&Qs(n);break}}n=n.return}}function Mu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ws===e&&Ts===n?Ds===Ls||Ds===bs&&1073741823===xs&&Wa()-Hs<500?nu(e,Ts):Ps=!0:Eu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Qs(e)))}function vu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Vs(t=$s(),e,null)),null!==(e=Gs(e,t))&&Qs(e)}hs=function(e,t,n){var r=t.expirationTime;if(null!==e){var a=t.pendingProps;if(e.memoizedProps!==a||fa.current)jo=!0;else{if(r<n){switch(jo=!1,t.tag){case 3:Wo(t),So();break;case 5:if(Pi(t),4&t.mode&&1!==n&&a.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:pa(t.type)&&Ma(t);break;case 4:Oi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,a=t.type._context,la(Ga,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Bo(e,t,n):(la(Ai,1&Ai.current),null!==(t=qo(e,t,n))?t.sibling:null);la(Ai,1&Ai.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Vo(e,t,n);t.effectTag|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null),la(Ai,Ai.current),!r)return null}return qo(e,t,n)}jo=!1}}else jo=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,a=_a(t,ca.current),ni(t,n),a=Vi(null,t,r,e,a,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,pa(r)){var i=!0;Ma(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ii(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&_i(t,r,s,e),a.updater=pi,t.stateNode=a,a._reactInternalFiber=t,Mi(t,r,e,n),t=Fo(null,t,r,!0,i,n)}else t.tag=0,Oo(null,t,a,n),t=t.child;return t;case 16:e:{if(a=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(a),1!==a._status)throw a._result;switch(a=a._result,t.type=a,i=t.tag=function(e){if("function"==typeof e)return Yu(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===ce)return 14}return 2}(a),e=qa(a,e),i){case 0:t=Co(null,t,a,e,n);break e;case 1:t=No(null,t,a,e,n);break e;case 11:t=Eo(null,t,a,e,n);break e;case 14:t=Po(null,t,a,qa(a.type,e),r,n);break e}throw Error(o(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Co(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 1:return r=t.type,a=t.pendingProps,No(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 3:if(Wo(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,oi(e,t),di(t,r,null,n),(r=t.memoizedState.element)===a)So(),t=qo(e,t,n);else{if((a=t.stateNode.hydrate)&&(bo=bn(t.stateNode.containerInfo.firstChild),vo=t,a=Lo=!0),a)for(n=Yi(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Oo(e,t,r,n),So();t=t.child}return t;case 5:return Pi(t),null===e&&Yo(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,s=a.children,gn(r,a)?s=null:null!==i&&gn(r,i)&&(t.effectTag|=16),Ao(e,t),4&t.mode&&1!==n&&a.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Oo(e,t,s,n),t=t.child),t;case 6:return null===e&&Yo(t),null;case 13:return Bo(e,t,n);case 4:return Oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wi(t,null,r,n):Oo(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Eo(e,t,r,a=t.elementType===r?a:qa(r,a),n);case 7:return Oo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Oo(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,s=t.memoizedProps,i=a.value;var u=t.type._context;if(la(Ga,u._currentValue),u._currentValue=i,null!==s)if(u=s.value,0===(i=Nr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(s.children===a.children&&!fa.current){t=qo(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var d=l.firstContext;null!==d;){if(d.context===r&&0!=(d.observedBits&i)){1===u.tag&&((d=si(n,null)).tag=2,ui(u,d)),u.expirationTime<n&&(u.expirationTime=n),null!==(d=u.alternate)&&d.expirationTime<n&&(d.expirationTime=n),ti(u.return,n),l.expirationTime<n&&(l.expirationTime=n);break}d=d.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Oo(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(a=ri(a,i.unstable_observedBits)),t.effectTag|=1,Oo(e,t,r,n),t.child;case 14:return i=qa(a=t.type,t.pendingProps),Po(e,t,a,i=qa(a.type,i),r,n);case 15:return Ho(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:qa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,pa(r)?(e=!0,Ma(t)):e=!1,ni(t,n),yi(t,r,a),Mi(t,r,a,n),Fo(null,t,r,!0,e,n);case 19:return Vo(e,t,n)}throw Error(o(156,t.tag))};var bu=null,Lu=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function wu(e,t,n,r){return new ku(e,t,n,r)}function Yu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=wu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Du(e,t,n,r,a,i){var s=2;if(r=e,"function"==typeof e)Yu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case ne:return Su(n.children,a,i,t);case se:s=8,a|=7;break;case re:s=8,a|=1;break;case ae:return(e=wu(12,n,t,8|a)).elementType=ae,e.type=ae,e.expirationTime=i,e;case le:return(e=wu(13,n,t,a)).type=le,e.elementType=le,e.expirationTime=i,e;case de:return(e=wu(19,n,t,a)).elementType=de,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:s=10;break e;case oe:s=9;break e;case ue:s=11;break e;case ce:s=14;break e;case fe:s=16,r=null;break e;case me:s=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=wu(s,n,t,a)).elementType=e,t.type=r,t.expirationTime=i,t}function Su(e,t,n,r){return(e=wu(7,e,r,t)).expirationTime=n,e}function xu(e,t,n){return(e=wu(6,e,null,t)).expirationTime=n,e}function ju(e,t,n){return(t=wu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ou(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Eu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Pu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Hu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Au(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Cu(e,t,n,r){var a=t.current,i=$s(),s=fi.suspense;i=Vs(i,a,s);e:if(n){t:{if(Xe(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(o(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(pa(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(o(171))}if(1===n.tag){var l=n.type;if(pa(l)){n=ga(n,l,u);break e}}n=u}else n=da;return null===t.context?t.context=n:t.pendingContext=n,(t=si(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(a,t),qs(a,i),i}function Nu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Wu(e,t){Fu(e,t),(e=e.alternate)&&Fu(e,t)}function Iu(e,t,n){var r=new Ou(e,t,n=null!=n&&!0===n.hydrate),a=wu(3,null,null,2===t?7:1===t?3:0);r.current=a,a.stateNode=r,ii(a),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Tt.forEach((function(e){_t(e,t,n)})),Dt.forEach((function(e){_t(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ru(e,t,n,r,a){var i=n._reactRootContainer;if(i){var o=i._internalRoot;if("function"==typeof a){var s=a;a=function(){var e=Nu(o);s.call(e)}}Cu(t,o,e,a)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Iu(e,0,t?{hydrate:!0}:void 0)}(n,r),o=i._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Nu(o);u.call(e)}}tu((function(){Cu(t,o,e,a)}))}return Nu(o)}function Uu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!zu(t))throw Error(o(200));return Uu(e,t,null,n)}Iu.prototype.render=function(e){Cu(e,this._internalRoot,null,null)},Iu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Cu(null,e,null,(function(){t[Tn]=null}))},pt=function(e){if(13===e.tag){var t=Va($s(),150,100);qs(e,t),Wu(e,t)}},ht=function(e){13===e.tag&&(qs(e,3),Wu(e,3))},yt=function(e){if(13===e.tag){var t=$s();qs(e,t=Vs(t,e,null)),Wu(e,t)}},S=function(e,t,n){switch(t){case"input":if(Ye(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=jn(r);if(!a)throw Error(o(90));be(r),Ye(r,a)}}}break;case"textarea":Ee(e,n);break;case"select":null!=(t=n.value)&&xe(e,!!n.multiple,t,!1)}},H=eu,A=function(e,t,n,r,a){var i=ks;ks|=4;try{return Ra(98,e.bind(null,t,n,r,a))}finally{0===(ks=i)&&Ja()}},C=function(){0==(49&ks)&&(function(){if(null!==Rs){var e=Rs;Rs=null,e.forEach((function(e,t){Au(t,e),Qs(t)})),Ja()}}(),pu())},N=function(e,t){var n=ks;ks|=2;try{return e(t)}finally{0===(ks=n)&&Ja()}};var Ju,$u,Vu={Events:[Sn,xn,jn,T,k,Nn,function(e){at(e,Cn)},E,P,Qt,st,pu,{current:!1}]};$u=(Ju={findFiberByHostInstance:Dn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);bu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Lu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(a({},Ju,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:K.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return $u?$u(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Vu,t.createPortal=Bu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&ks))throw Error(o(187));var n=ks;ks|=1;try{return Ra(99,e.bind(null,t))}finally{ks=n,Ja()}},t.hydrate=function(e,t,n){if(!zu(t))throw Error(o(200));return Ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!zu(t))throw Error(o(200));return Ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!zu(e))throw Error(o(40));return!!e._reactRootContainer&&(tu((function(){Ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Bu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!zu(n))throw Error(o(200));if(null==e||void 0===e._reactInternalFiber)throw Error(o(38));return Ru(e,t,n,!1,r)},t.version="16.14.0"},function(e,t,n){"use strict";e.exports=n(364)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,a,i,o,s;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}},c=Date.now();t.unstable_now=function(){return Date.now()-c},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(d,0))},a=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},o=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,m=window.Date,_=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var y=m.now();t.unstable_now=function(){return m.now()-y}}var g=!1,M=null,v=-1,b=5,L=0;o=function(){return t.unstable_now()>=L},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,w=k.port2;k.port1.onmessage=function(){if(null!==M){var e=t.unstable_now();L=e+b;try{M(!0,e)?w.postMessage(null):(g=!1,M=null)}catch(e){throw w.postMessage(null),e}}else g=!1},r=function(e){M=e,g||(g=!0,w.postMessage(null))},a=function(e,n){v=_((function(){e(t.unstable_now())}),n)},i=function(){p(v),v=-1}}function Y(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<S(a,t)))break e;e[r]=t,e[n]=a,n=r}}function T(e){return void 0===(e=e[0])?null:e}function D(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var i=2*(r+1)-1,o=e[i],s=i+1,u=e[s];if(void 0!==o&&0>S(o,n))void 0!==u&&0>S(u,o)?(e[r]=u,e[s]=n,r=s):(e[r]=o,e[i]=n,r=i);else{if(!(void 0!==u&&0>S(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var x=[],j=[],O=1,E=null,P=3,H=!1,A=!1,C=!1;function N(e){for(var t=T(j);null!==t;){if(null===t.callback)D(j);else{if(!(t.startTime<=e))break;D(j),t.sortIndex=t.expirationTime,Y(x,t)}t=T(j)}}function F(e){if(C=!1,N(e),!A)if(null!==T(x))A=!0,r(W);else{var t=T(j);null!==t&&a(F,t.startTime-e)}}function W(e,n){A=!1,C&&(C=!1,i()),H=!0;var r=P;try{for(N(n),E=T(x);null!==E&&(!(E.expirationTime>n)||e&&!o());){var s=E.callback;if(null!==s){E.callback=null,P=E.priorityLevel;var u=s(E.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?E.callback=u:E===T(x)&&D(x),N(n)}else D(x);E=T(x)}if(null!==E)var l=!0;else{var d=T(j);null!==d&&a(F,d.startTime-n),l=!1}return l}finally{E=null,P=r,H=!1}}function I(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var z=s;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||H||(A=!0,r(W))},t.unstable_getCurrentPriorityLevel=function(){return P},t.unstable_getFirstCallbackNode=function(){return T(x)},t.unstable_next=function(e){switch(P){case 1:case 2:case 3:var t=3;break;default:t=P}var n=P;P=t;try{return e()}finally{P=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=P;P=e;try{return t()}finally{P=n}},t.unstable_scheduleCallback=function(e,n,o){var s=t.unstable_now();if("object"==typeof o&&null!==o){var u=o.delay;u="number"==typeof u&&0<u?s+u:s,o="number"==typeof o.timeout?o.timeout:I(e)}else o=I(e),u=s;return e={id:O++,callback:n,priorityLevel:e,startTime:u,expirationTime:o=u+o,sortIndex:-1},u>s?(e.sortIndex=u,Y(j,e),null===T(x)&&e===T(j)&&(C?i():C=!0,a(F,u-s))):(e.sortIndex=o,Y(x,e),A||H||(A=!0,r(W))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();N(e);var n=T(x);return n!==E&&null!==E&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<E.expirationTime||o()},t.unstable_wrapCallback=function(e){var t=P;return function(){var n=P;P=t;try{return e.apply(this,arguments)}finally{P=n}}}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"wrapSpace",(function(){return I}));var a={};n.r(a),n.d(a,"wrapEntry",(function(){return ne})),n.d(a,"wrapEntryCollection",(function(){return re}));var i={};n.r(i),n.d(i,"wrapAsset",(function(){return ae})),n.d(i,"wrapAssetCollection",(function(){return ie}));var o={};n.r(o),n.d(o,"wrapContentType",(function(){return oe})),n.d(o,"wrapContentTypeCollection",(function(){return se}));var s={};n.r(s),n.d(s,"wrapLocale",(function(){return ue})),n.d(s,"wrapLocaleCollection",(function(){return le}));var u=n(1),l=n.n(u),d=n(204),c=n.n(d),f=n(205),m=n.n(f),_=n(206),p=n.n(_),h=n(30),y=n.n(h),g=n(207),M=n.n(g),v=function(){return l.a.createElement("div",null,"Ayyy! I'm workin hea!")},b="#022b3a",L="#ffffff",k="#e1e5f2",w="#bfdbf7",Y="#bfdbf7",T="#dddddd",D=n(3),S=D.b.div.withConfig({displayName:"nav__Nav",componentId:"sc-19hgxg7-0"})(["@import url('https://fonts.googleapis.com/css?family=Teko&display=swap');@import url('https://fonts.googleapis.com/css?family=Azeret+Mono&display=swap');font-family:'Teko',sans-serif;font-size:35px;color:",";#nav-container{a,strong{margin-right:20px;}a{text-decoration:none;}.selected{color:",";border-bottom:2px solid ","}margin-bottom:50px;#main-nav{width:720px;margin:auto;}#left-nav{#phil-avery{margin-bottom:10px;}#below-phil{font-size:12px;line-height:20px;}font-family:'Azeret Mono';font-size:17px;line-height:25px;float:left;border-right:1px solid ",";margin:17px 15px 0 10px;}}"],w,w,w,T),x=function(e){return l.a.createElement(S,null,l.a.createElement("div",{id:"nav-container"},l.a.createElement("div",{id:"left-nav"},l.a.createElement("div",{id:"phil-avery"},"Phil Avery"),l.a.createElement("div",{id:"below-phil"},l.a.createElement("a",{href:"https://www.linkedin.com/in/phillipavery/"},"LinkedIn"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://github.com/pill"},"Github"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://www.instagram.com/classique_phil/"},"@classique_phil"),l.a.createElement("br",null),l.a.createElement("a",{href:"https://www.instagram.com/pill_moto/"},"@pill_moto"))),l.a.createElement("div",{id:"main-nav"},l.a.createElement("a",{class:[""].includes(e.section)?"selected":"",href:"/"},"home"),l.a.createElement("a",{class:["blog","tags","post"].includes(e.section)?"selected":"",href:"/blog"},"blog"),l.a.createElement("a",{class:["dev"].includes(e.section)?"selected":"",href:"/dev"},"dev"))))},j=n(9),O=n.n(j),E=n(10),P=n.n(E),H=n(7),A=n.n(H),C=function(e){var t=e.totalPages,n=e.p,r=e.rpp,a=e.basePath,i=void 0===a?"/blog":a,o=n-5>0?n-5:1,s=n+5<=t?n+5:t;return console.log(t,o,s),l.a.createElement("div",{id:"paginator"},function(e,t,n){if(void 0===t&&(t=e,e=0),void 0===n&&(n=1),n>0&&e>=t||n<0&&e<=t)return[];for(var r=[],a=e;n>0?a<t:a>t;a+=n)r.push(a);return r}(o,s+1,1).map((function(e){return l.a.createElement("a",{href:"".concat(i,"?p=").concat(e,"&rpp=").concat(r),key:e},e)})))},N=n(210),F=n.n(N),W=n(2);function I(e){return Object(W.c)(Object(W.e)(e))}var z=n(4),R=n.n(z),U=n(213),B=n.n(U);function J(e){return Object.defineProperty(e,"stringifySafe",{enumerable:!1,configurable:!1,writable:!1,value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return B()(this,e,t,(function(e,t){return{sys:{type:"Link",linkType:"Entry",id:t.sys.id,circular:!0}}}))}})}var $=n(214),V=n.n($),q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{!r&&s.return&&s.return()}finally{if(a)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function K(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var Q={},Z=function(e,t){var n=t.entryId,r=t.linkType,a=t.spaceId,i=t.environmentId;return a&&i?e.get(a+"!"+i+"!"+r+"!"+n):e.get(r+"!"+n)},X=function(e,t){var n=t.sys,r=n.type,a=n.linkType;if("ResourceLink"===r){if(!a.startsWith("Contentful:"))return t;var i=function(e){var t=/.*:spaces\/([^/]+)(?:\/environments\/([^/]+))?\/entries\/([^/]+)$/;if(t.test(e)){var n=e.match(t),r=G(n,4),a=(r[0],r[1]),i=r[2];return{spaceId:a,environmentId:void 0===i?"master":i,entryId:r[3]}}}(t.sys.urn),o=i.spaceId,s=i.environmentId,u=i.entryId,l=a.split(":")[1];return Z(e,{linkType:l,entryId:u,spaceId:o,environmentId:s})||Q}var d=t.sys.id;return Z(e,{linkType:a,entryId:d})||Q},ee=function e(t,n,r,a){if(n(t))return r(t);if(t&&"object"===(void 0===t?"undefined":q(t))){for(var i in t)t.hasOwnProperty(i)&&(t[i]=e(t[i],n,r,a));a&&(t=function(e){if(Array.isArray(e))return e.filter((function(e){return e!==Q}));for(var t in e)e[t]===Q&&delete e[t];return e}(t))}return t},te=function(e,t){if(t=t||{},!e.items)return[];var n=V()(e),r=Object.keys(n.includes||{}).reduce((function(t,n){return[].concat(K(t),K(e.includes[n]))}),[]),a=[].concat(K(n.items),K(r)).filter((function(e){return Boolean(e.sys)})),i=new Map(a.reduce((function(e,t){var n,r=(n=t.sys,n.space&&n.environment?[n.type+"!"+n.id,n.space.sys.id+"!"+n.environment.sys.id+"!"+n.type+"!"+n.id]:[n.type+"!"+n.id]).map((function(e){return[e,t]}));return e.push.apply(e,K(r)),e}),[]));return a.forEach((function(e){var n=function(e,t){return Array.isArray(t)?Object.keys(e).filter((function(e){return-1!==t.indexOf(e)})).reduce((function(t,n){return t[n]=e[n],t}),{}):e}(e,t.itemEntryPoints);Object.assign(e,ee(n,(function(e){return(t=e)&&t.sys&&"Link"===t.sys.type||function(e){return e&&e.sys&&"ResourceLink"===e.sys.type}(e);var t}),(function(e){return function(e,t,n){var r=X(e,t);return r===Q?n?r:t:r}(i,e,t.removeUnresolved)}),t.removeUnresolved))})),n.items};function ne(e){return Object(W.c)(Object(W.e)(R()(e)))}function re(e,t){var n=t.resolveLinks,r=t.removeUnresolved,a=J(Object(W.e)(R()(e)));return n&&(a.items=te(a,{removeUnresolved:r,itemEntryPoints:["fields"]})),Object(W.c)(a)}function ae(e){return Object(W.c)(Object(W.e)(R()(e)))}function ie(e){return Object(W.c)(Object(W.e)(R()(e)))}function oe(e){return Object(W.c)(Object(W.e)(R()(e)))}function se(e){return Object(W.c)(Object(W.e)(R()(e)))}function ue(e){return Object(W.c)(Object(W.e)(R()(e)))}function le(e){return Object(W.c)(Object(W.e)(R()(e)))}var de={space:r,entry:a,asset:i,contentType:o,locale:s};function ce(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ce(Object(n),!0).forEach((function(t){me(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ce(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function me(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _e(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!t||!t.initial&&!t.nextSyncToken&&!t.nextPageToken)throw new Error("Please provide one of `initial`, `nextSyncToken` or `nextPageToken` parameters for syncing");if(t&&t.content_type&&!t.type)t.type="Entry";else if(t&&t.content_type&&t.type&&"Entry"!==t.type)throw new Error("When using the `content_type` filter your `type` parameter cannot be different from `Entry`.");var r={resolveLinks:!0,removeUnresolved:!1,paginate:!0},a=fe(fe({},r),n),i=a.resolveLinks,o=a.removeUnresolved,s=a.paginate,u={paginate:s};return he(e,[],t,u).then((function(e){i&&(e.items=te(e,{removeUnresolved:o,itemEntryPoints:["fields"]}));var t=pe(e.items);return e.nextSyncToken&&(t.nextSyncToken=e.nextSyncToken),e.nextPageToken&&(t.nextPageToken=e.nextPageToken),Object(W.c)(J(Object(W.e)(t)))}),(function(e){throw e}))}function pe(e){var t=function(e){return function(t,n){return n.sys.type===e&&t.push(Object(W.e)(n)),t}};return{entries:e.reduce(t("Entry"),[]),assets:e.reduce(t("Asset"),[]),deletedEntries:e.reduce(t("DeletedEntry"),[]),deletedAssets:e.reduce(t("DeletedAsset"),[])}}function he(e,t,n,r){var a=r.paginate;return n.nextSyncToken&&(n.sync_token=n.nextSyncToken,delete n.nextSyncToken),n.nextPageToken&&(n.sync_token=n.nextPageToken,delete n.nextPageToken),n.sync_token&&(delete n.initial,delete n.type,delete n.content_type,delete n.limit),e.get("sync",Object(W.b)({query:n})).then((function(r){var i=r.data||{};return t=t.concat(i.items||[]),i.nextPageUrl?a?(delete n.initial,n.sync_token=ye(i.nextPageUrl),he(e,t,n,{paginate:a})):{items:t,nextPageToken:ye(i.nextPageUrl)}:i.nextSyncUrl?{items:t,nextSyncToken:ye(i.nextSyncUrl)}:{items:[]}}))}function ye(e){var t=e.split("?");return t.length>0?t[1].replace("sync_token=",""):""}function ge(e){return function(e){if(Array.isArray(e))return Me(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return Me(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Me(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Me(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ve(e){if(e.select){var t=e.select.split(","),n=new Set(t);n.has("sys")||(n.add("sys.id"),n.add("sys.type"),e.select=ge(n).join(","))}}function be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?be(Object(n),!0).forEach((function(t){ke(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ke(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function we(e){var t=e.http,n=e.getGlobalOptions,r=de.space.wrapSpace,a=de.contentType,i=a.wrapContentType,o=a.wrapContentTypeCollection,s=de.entry,u=s.wrapEntry,l=s.wrapEntryCollection,d=de.asset,c=d.wrapAsset,f=d.wrapAssetCollection,m=de.locale.wrapLocaleCollection,_=function(e){var t=new Error("The resource could not be found.");return t.sys={type:"Error",id:"NotFound"},t.details={type:"Entry",id:e,environment:n().environment,space:n().space},t};function p(e){if(e.data)throw e.data;if(e.response&&e.response.data)throw e.response.data;throw e}function h(e){e.defaults.baseURL=n().environmentBaseUrl}return{getSpace:function(){return function(e){e.defaults.baseURL=n().spaceBaseUrl}(t),t.get("").then((function(e){return r(e.data)}),p)},getContentType:function(e){return h(t),t.get("content_types/"+e).then((function(e){return i(e.data)}),p)},getContentTypes:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),t.get("content_types",Object(W.b)({query:e})).then((function(e){return o(e.data)}),p)},getEntry:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e?this.getEntries(Le({"sys.id":e},t)).then((function(t){if(t.items.length>0)return u(t.items[0]);throw _(e)}),p):Promise.reject(_(e))},getEntries:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};h(t);var r=n(e),a=r.resolveLinks,i=r.removeUnresolved;return ve(e),t.get("entries",Object(W.b)({query:e})).then((function(e){return l(e.data,{resolveLinks:a,removeUnresolved:i})}),p)},getAsset:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return h(t),ve(n),t.get("assets/"+e,Object(W.b)({query:n})).then((function(e){return c(e.data)}),p)},getAssets:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),ve(e),t.get("assets",Object(W.b)({query:e})).then((function(e){return f(e.data)}),p)},getLocales:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return h(t),t.get("locales",Object(W.b)({query:e})).then((function(e){return m(e.data)}),p)},parseEntries:function(e){var t=n({}),r=t.resolveLinks,a=t.removeUnresolved;return l(e,{resolveLinks:r,removeUnresolved:a})},sync:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{paginate:!0},a=n(e),i=a.resolveLinks,o=a.removeUnresolved;return h(t),_e(t,e,Le({resolveLinks:i,removeUnresolved:o},r))}}}function Ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Te(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ye(Object(n),!0).forEach((function(t){De(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function De(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Se=function(e){if(!e.accessToken)throw new TypeError("Expected parameter accessToken");if(!e.space)throw new TypeError("Expected parameter space");var t=Te(Te({},{resolveLinks:!0,removeUnresolved:!1,defaultHostname:"cdn.contentful.com",environment:"master"}),e),n=Object(W.d)("contentful.js/".concat("0.0.0-determined-by-semantic-release"),t.application,t.integration);t.headers=Te(Te({},t.headers),{},{"Content-Type":"application/vnd.contentful.delivery.v1+json","X-Contentful-User-Agent":n});var r,a=Object(W.a)(F.a,t),i=(r={resolveLinks:t.resolveLinks,environment:t.environment,removeUnresolved:t.removeUnresolved,spaceBaseUrl:a.defaults.baseURL,environmentBaseUrl:"".concat(a.defaults.baseURL,"environments/").concat(t.environment)},function(e){return Object.assign({},r,e)});return a.defaults.baseURL=i().environmentBaseUrl,function(e){e.interceptors.response.use((function(e){return e}),(function(e){if(e.response&&e.response.config.headers.Authorization){var t=e.response.config.headers.Authorization;e.response.config.headers.Authorization=e.response.config.headers.Authorization.replace(t,"Bearer...".concat(t.substr(-5))),e.response.request._headers&&e.response.request._headers.authorization&&(e.response.request._headers.authorization=e.response.request._headers.authorization.replace(t,"Bearer...".concat(t.substr(-5)))),e.response.request._header&&(e.response.request._header=e.response.request._header.replace(t,"Bearer...".concat(t.substr(-5))))}return Promise.reject(e)}))}(a),we({http:a,getGlobalOptions:i})}({space:"9itkoq01s77j",accessToken:"eTLRYpsJLr3mN3W5pRgIuHCvPvRi4hDtgRoOZcb0ndQ"}),xe=n(0),je=n.n(xe),Oe=n(21),Ee=n.n(Oe),Pe=l.a.createContext([{},function(){}]),He=function(e){var t=Object(u.useState)({entry:null,entryList:[],page:1,totalPages:1}),n=Ee()(t,2),r=n[0],a=n[1];return l.a.createElement(Pe.Provider,{value:[r,a]},e.children)};function Ae(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ce(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ae(Object(n),!0).forEach((function(t){O()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ae(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ne=function(){var e=Object(u.useContext)(Pe),t=Ee()(e,2),n=t[0],r=t[1];return{setPage:function(e){if(e<1)throw"Invalid page number";r((function(t){return Ce(Ce({},t),{},{page:e})}))},totalPages:n.totalPages,entry:n.entry,setEntry:function(e){r((function(t){return Ce(Ce({},t),{},{entry:e})}))},entryList:n.entryList,state:n,setState:r}};function Fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function We(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fe(Object(n),!0).forEach((function(t){O()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ie(e){var t=e.searchParams,n=D.b.div.withConfig({displayName:"blog__EntryList",componentId:"sc-fntq75-0"})(["#entry-container{li{div{display:inline-block;h1{margin-bottom:5px;}img{float:left;border:2px solid ",";margin:5px 0 15px 0;}.date{font-family:arial font-size:15px;font-weight:bold;color:",";line-height:30px;margin-bottom:10px;}}}}"],T,Y),r=Ne(),a=r.setState,i=r.entryList,o=r.totalPages,s=t.get("p")||1,d=t.get("rpp")||10;return Object(u.useEffect)((function(){(function(){var e=P()(A.a.mark((function e(){var t,n;return A.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t={content_type:"post",skip:(s-1)*d,limit:d},e.next=1,Se.getEntries(t);case 1:n=e.sent,console.log("entries res",n),a((function(e){return We(We({},e),{},{entryList:n.items,totalPages:Math.ceil(n.total/d)})}));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[]),l.a.createElement(n,null,i.length?l.a.createElement("div",{id:"entry-container"},l.a.createElement("ul",null,i.map((function(e){return l.a.createElement("li",{key:e.fields.slug},l.a.createElement("div",null,l.a.createElement("a",{href:"/post/"+e.sys.id},l.a.createElement("h1",null,e.fields.title),l.a.createElement("div",{class:"date"},je()(e.sys.createdAt).format("MMMM Do YYYY, h:mm a")),e.fields.thumb?l.a.createElement("img",{src:e.fields.thumb.fields.file.url,width:"560px"}):"")))}))),l.a.createElement(C,{totalPages:o,p:s,rpp:d})):l.a.createElement("em",null,"Loading..."))}var ze=n(215),Re=n.n(ze);function Ue(e){var t=D.b.div.withConfig({displayName:"post__BlogPost",componentId:"sc-9jh1rj-0"})(["#post-container{margin:20px 0 20px 0;h1{margin-bottom:5px;}#date{font-family:arial font-size:15px;font-weight:bold;color:",";line-height:30px;margin-bottom:20px;}#post-body{font-family:georgia;line-height:25px;margin-bottom:25px;ul{list-style-type:circle;}}#tag-label{font-weight:bold;margin-bottom:20px;color:",";}.tag{font-size:13px;background:",";border:1px solid ",";border-radius:5px;text-decoration:none;padding:8px;margin:3px;text-transform:uppercase;}.tag:hover{color:",";background:",";}}"],Y,Y,b,T,b,Y),n=Ne(),r=n.entry,a=n.setEntry;return Object(u.useEffect)((function(){(function(){var t=P()(A.a.mark((function t(){var n;return A.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=1,Se.getEntry(e.id);case 1:n=t.sent,console.log("res",n),a(n);case 2:case"end":return t.stop()}}),t)})));return function(){return t.apply(this,arguments)}})()()}),[]),l.a.createElement(t,null,l.a.createElement("div",{id:"post-container"},r?l.a.createElement("div",null,l.a.createElement("h1",null,r.fields.title),l.a.createElement("div",{id:"date"},je()(r.sys.createdAt).format("MMMM Do YYYY, h:mm a")),l.a.createElement("div",{id:"post-body"},l.a.createElement(Re.a,{escapeHtml:!1,children:r.fields.body})),l.a.createElement("div",null,l.a.createElement("div",{id:"tag-label"},r.metadata.tags?"Tags:":""),r.metadata.tags&&r.metadata.tags.map((function(e){return l.a.createElement("a",{href:"/tags/".concat(e.sys.id),class:"tag",key:e.sys.id},e.sys.id)})))):l.a.createElement("div",{class:"loading"},l.a.createElement("em",null,"Loading..."))))}function Be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Je(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Be(Object(n),!0).forEach((function(t){O()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function $e(e){var t=e.id,n=e.searchParams,r=D.b.div.withConfig({displayName:"tag__EntryList",componentId:"sc-19j6k2a-0"})(["#entry-container{li{div{display:inline-block;img{float:left;border:2px solid ",";margin:5px 0 10px 0;}}}}"],T),a=D.b.div.withConfig({displayName:"tag__SelectedTag",componentId:"sc-19j6k2a-1"})(["@import url('https://fonts.googleapis.com/css?family=Bebas+Neue&display=swap');font-size:20px;#selected-tag-container{color:",";width:560px;margin-top:50px;padding-bottom:15px;border-bottom:1px dotted ",';.tag{font-family:"Bebas Neue";font-size:64px;color:',";background:",";text-transform:uppercase;margin-right:10px;}}"],k,T,Y,b),i=Ne(),o=i.setState,s=i.entryList,d=i.totalPages,c=n.get("p")||1,f=n.get("rpp")||10;return Object(u.useEffect)((function(){(function(){var e=P()(A.a.mark((function e(){var n,r;return A.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={"metadata.tags.sys.id[in]":t,content_type:"post",skip:(c-1)*f,limit:f},e.next=1,Se.getEntries(n);case 1:r=e.sent,console.log("entries res",r),o((function(e){return Je(Je({},e),{},{entryList:r.items,totalPages:Math.ceil(r.total/f)})}));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[]),l.a.createElement("div",null,l.a.createElement(a,null,l.a.createElement("div",{id:"selected-tag-container"},l.a.createElement("span",{class:"tag"},t)," posts")),l.a.createElement(r,null,l.a.createElement("div",null,s.length?l.a.createElement("div",{id:"entry-container"},l.a.createElement("ul",null,s.map((function(e){return l.a.createElement("li",{key:e.fields.slug},l.a.createElement("div",null,l.a.createElement("a",{href:"/post/"+e.sys.id},l.a.createElement("h1",null,e.fields.title),e.fields.thumb?l.a.createElement("img",{src:e.fields.thumb.fields.file.url,width:"560px"}):"")))}))),l.a.createElement(C,{totalPages:d,p:c,rpp:f,basePath:"/tags/".concat(t)})):l.a.createElement("em",null,"Loading..."))))}function Ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ve(Object(n),!0).forEach((function(t){O()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ge(e){var t=e.searchParams,n=D.b.div.withConfig({displayName:"dev__EntryList",componentId:"sc-gnk0wp-0"})(["#entry-container{li{div{display:inline-block;h1{margin-bottom:5px;}img{float:left;border:2px solid ",";margin:5px 0 15px 0;}.date{font-family:arial font-size:15px;font-weight:bold;color:",";line-height:30px;margin-bottom:10px;}}}}"],T,Y),r=Ne(),a=r.setState,i=r.entryList,o=r.totalPages,s=t.get("p")||1,d=t.get("rpp")||10;return Object(u.useEffect)((function(){(function(){var e=P()(A.a.mark((function e(){var t,n;return A.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t={"metadata.tags.sys.id[in]":"dev",content_type:"post",skip:(s-1)*d,limit:d},e.next=1,Se.getEntries(t);case 1:n=e.sent,console.log("entries res",n),a((function(e){return qe(qe({},e),{},{entryList:n.items,totalPages:Math.ceil(n.total/d)})}));case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}})()()}),[]),l.a.createElement(n,null,i.length?l.a.createElement("div",{id:"entry-container"},l.a.createElement("ul",null,i.map((function(e){return l.a.createElement("li",{key:e.fields.slug},l.a.createElement("div",null,l.a.createElement("a",{href:"/post/"+e.sys.id},l.a.createElement("h1",null,e.fields.title),l.a.createElement("div",{class:"date"},je()(e.sys.createdAt).format("MMMM Do YYYY, h:mm a")),e.fields.thumb?l.a.createElement("img",{src:e.fields.thumb.fields.file.url,width:"560px"}):"")))}))),l.a.createElement(C,{totalPages:o,p:s,rpp:d,basePath:"/dev"})):l.a.createElement("em",null,"Loading..."))}function Ke(){var e=D.b.div.withConfig({displayName:"home__HomePage",componentId:"sc-sb9dzz-0"})(["#home-container{margin-top:50px;width:560px;color:",";text-align:center;img{border:2px solid ",";width:560px;margin-bottom:15px;}}"],k,T);return l.a.createElement(e,null,l.a.createElement("div",{id:"home-container"},l.a.createElement("img",{src:"https://images.ctfassets.net/9itkoq01s77j/2METWxNUggmn6bfqiHhpKu/2215a0bd75ad13cd4eba994008eb8d68/Phil_Avery_on_Instagram_____Yet_another_ramen_place_in_nyc__not_complaining_though___ramen__nyc___.png"}),l.a.createElement("div",null,"Just a picture of some yummy ramen I ate once.")))}function Qe(e,t,n){return t=y()(t),p()(e,function(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return function(){return!!e}()}()?Reflect.construct(t,n||[],y()(e).constructor):t.apply(e,n))}var Ze=Object(D.a)(["body{background-color:",";}.main-site{width:560px;margin:auto;}"],b),Xe=D.b.div.withConfig({displayName:"main__Main",componentId:"sc-msizxx-0"})(["@import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');font-family:sans-serif;color:",";h1{font-family:'Roboto',sans-serif;color:",";}ul{list-style:none;padding:0;}a{text-decoration:none;&:link,&:visited{color:",";}&:hover{color:",";}}.loading{margin-top:50px;}"],k,L,k,k),et=function(e){function t(){return c()(this,t),Qe(this,t,arguments)}return M()(t,e),m()(t,[{key:"render",value:function(){var e,t=[],n=(e=new URL(window.location.href),console.log("url",e),{parts:e.pathname.split("/").filter((function(e){return e.length>0})),searchParams:e.searchParams}),r=n.parts,a=n.searchParams,i=r.length>0?r[0]:"",o=r[1],s=null;switch(i){case"work":s=l.a.createElement(v,{key:"work"});break;case"post":s=l.a.createElement(Ue,{key:"post",id:o});break;case"blog":s=l.a.createElement(Ie,{key:"blog",searchParams:a});break;case"dev":s=l.a.createElement(Ge,{key:"dev",searchParams:a});break;case"tags":s=l.a.createElement($e,{key:"tag",id:o,searchParams:a});break;default:s=l.a.createElement(Ke,{key:"home"})}return t.push(s),l.a.createElement(He,null,l.a.createElement(Ze,null),l.a.createElement(Xe,null,l.a.createElement(x,{key:"nav",section:i}),l.a.createElement("div",{class:"main-site"},t)))}}])}(u.Component),tt=n(216),nt=n.n(tt),rt=document.getElementById("main-site");rt&&nt.a.render(l.a.createElement(et,null),rt)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsLXNkay1jb3JlL2Rpc3QvaW5kZXguZXMtbW9kdWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmFzdC1jb3B5L2Rpc3QvZmFzdC1jb3B5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWVycm9ycy90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmltL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc3BsYWlub2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWluc3BlY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC1hcHBseS1oZWxwZXJzL2Z1bmN0aW9uQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWVudGl0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXBlYXQtc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmltLXRyYWlsaW5nLWxpbmVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvbm9ybWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3R5bGlzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc3N0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL092ZXJsb2FkWWllbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3JEZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3JBc3luY0dlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9yZWdlbmVyYXRvckFzeW5jSXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsLW1hcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtb2JqZWN0LWF0b21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nb3BkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZXQtcHJvdG8vUmVmbGVjdC5nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LXByb3RvL09iamVjdC5nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC1hcHBseS1oZWxwZXJzL2Z1bmN0aW9uQXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhbGwtYm91bmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1kei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1tYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci10bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi1iZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ici5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1jaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1hdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1nYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1uei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1zZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1kby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1teC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy11cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9maS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9maWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWRldmEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWxhdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHktYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQtY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvamEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvanYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3Uta21yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21pLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLW15LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL210LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL215LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25iLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLWJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL29jLWxuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wYS1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC1ici5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9yby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ydS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci1jeXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bC1waC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHpsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0tbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91Zy1jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei1sYXRuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3ZpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3gtcHNldWRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3lvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWNuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWhrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLW1vLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLXR3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWFscGhhYmV0aWNhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL2dldC1pbmRlbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMtcnVsZS1zaGVldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3AtdGhyb3R0bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNvbi1zdHJpbmdpZnktc2FmZS9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwtcmVzb2x2ZS1yZXNwb25zZS9ub2RlX21vZHVsZXMvZmFzdC1jb3B5L2Rpc3QvdW1kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcmVhY3QtbWFya2Rvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy13aGF0L2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZXJnZS1hbnl0aGluZy9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlZ2VuZXJhdG9yUnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9yZWdlbmVyYXRvckFzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlZ2VuZXJhdG9yS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9yZWdlbmVyYXRvclZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaWRlLWNoYW5uZWwtbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvZXZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvcmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvc3ludGF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdXJpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRoLWludHJpbnNpY3MvYWJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRoLWludHJpbnNpY3MvZmxvb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9tYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9wb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aC1pbnRyaW5zaWNzL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGgtaW50cmluc2ljcy9pc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ29wZC9nT1BELmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1kZWZpbmUtcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LXByb3RvL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kdW5kZXItcHJvdG8vZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQtYXBwbHktaGVscGVycy9hY3R1YWxBcHBseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMvcmVmbGVjdEFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNvd24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC13ZWFrbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIF5cXC5cXC8uKiQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaWZpZWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2V4dGVuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmZpbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlLW1lc3NhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZmlsZS9jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXBsYWNlLWV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cm91Z2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Ryb3VnaC93cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94LWlzLXN0cmluZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuaGVyaXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdGF0ZS10b2dnbGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlLWxvY2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3VuZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaGV4YWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWFscGhhbnVtZXJpY2FsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1lbnRpdGllcy9kZWNvZGUtZW50aXR5LmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3NldC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1lc2NhcGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXJlbW92ZS1wb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLWlzL2NvbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbmV3bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9jb2RlLWluZGVudGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtZmVuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Jsb2NrcXVvdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvaGVhZGluZy1hdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWJsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Zvb3Rub3RlLWRlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbGxhcHNlLXdoaXRlLXNwYWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvcGFyYWdyYXBoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2F1dG8tbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3VybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL3JlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3N0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9lbXBoYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtd29yZC1jaGFyYWN0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2VtcGhhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtaW5saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2xvY2F0ZS9jb2RlLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9icmVhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZGFzdC1hZGQtbGlzdC1tZXRhZGF0YS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcGx1Z2lucy9uYWl2ZS1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcGx1Z2lucy9kaXNhbGxvdy1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvYXN0LXRvLXJlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvd3JhcC10YWJsZS1yb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvZ2V0LWRlZmluaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvdXJpLXRyYW5zZm9ybWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcmVuZGVyZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29yay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wYWxldHRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL25hdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3BhZ2luYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL3NwYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9taXhpbnMvc3RyaW5naWZ5LXNhZmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwtcmVzb2x2ZS1yZXNwb25zZS9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvZW50aXRpZXMvZW50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL2Fzc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9lbnRpdGllcy9jb250ZW50LXR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2VudGl0aWVzL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvZW50aXRpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL3BhZ2VkLXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL3V0aWxzL25vcm1hbGl6ZS1zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbnRlbnRmdWwvZGlzdC9lcy1tb2R1bGVzL2NyZWF0ZS1jb250ZW50ZnVsLWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29udGVudGZ1bC9kaXN0L2VzLW1vZHVsZXMvY29udGVudGZ1bC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb250ZW50ZnVsL2Rpc3QvZXMtbW9kdWxlcy9jcmVhdGUtZ2xvYmFsLW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9ibG9nQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3VzZUJsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ibG9nL3Bvc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy90YWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9kZXYuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaG9tZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImhvb2tDYWxsYmFjayIsInNvbWUiLCJob29rcyIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNBcnJheSIsImlucHV0IiwiQXJyYXkiLCJ0b1N0cmluZyIsImlzT2JqZWN0IiwiaGFzT3duUHJvcCIsImEiLCJiIiwiaXNPYmplY3RFbXB0eSIsIm9iaiIsImdldE93blByb3BlcnR5TmFtZXMiLCJsZW5ndGgiLCJrIiwiaXNVbmRlZmluZWQiLCJpc051bWJlciIsImlzRGF0ZSIsIkRhdGUiLCJtYXAiLCJhcnIiLCJmbiIsInJlcyIsImFyckxlbiIsInB1c2giLCJleHRlbmQiLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwiZm9ybWF0IiwibG9jYWxlIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImdldFBhcnNpbmdGbGFncyIsIl9wZiIsImVtcHR5IiwidW51c2VkVG9rZW5zIiwidW51c2VkSW5wdXQiLCJvdmVyZmxvdyIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkRXJhIiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsImVyYSIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImlzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsIl9kIiwiaXNOYU4iLCJnZXRUaW1lIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwidW5kZWZpbmVkIiwiYmlnSG91ciIsImlzRnJvemVuIiwiX2lzVmFsaWQiLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwiZnVuIiwidGhpcyIsImxlbiIsIm1vbWVudFByb3BlcnRpZXMiLCJ1cGRhdGVJblByb2dyZXNzIiwiY29weUNvbmZpZyIsInRvIiwiZnJvbSIsInByb3AiLCJ2YWwiLCJtb21lbnRQcm9wZXJ0aWVzTGVuIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsIk1vbWVudCIsImNvbmZpZyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50Iiwid2FybiIsIm1zZyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImNvbnNvbGUiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJhcmciLCJhcmdzIiwiYXJnTGVuIiwic2xpY2UiLCJqb2luIiwiRXJyb3IiLCJzdGFjayIsImtleXMiLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJpc0Z1bmN0aW9uIiwiRnVuY3Rpb24iLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsInNldCIsInplcm9GaWxsIiwibnVtYmVyIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiTWF0aCIsImFicyIsInplcm9zVG9GaWxsIiwicG93IiwibWF4Iiwic3Vic3RyIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJjYWxsYmFjayIsImZ1bmMiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwiYXJyYXkiLCJtYXRjaCIsInJlcGxhY2UiLCJtb20iLCJvdXRwdXQiLCJtYWtlRm9ybWF0RnVuY3Rpb24iLCJpbnZhbGlkRGF0ZSIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvbmdEYXRlRm9ybWF0IiwibGFzdEluZGV4IiwidGVzdCIsImFsaWFzZXMiLCJEIiwiZGF0ZXMiLCJkYXRlIiwiZGF5cyIsImRheSIsImUiLCJ3ZWVrZGF5cyIsIndlZWtkYXkiLCJFIiwiaXNvd2Vla2RheXMiLCJpc293ZWVrZGF5IiwiREREIiwiZGF5b2Z5ZWFycyIsImRheW9meWVhciIsImgiLCJob3VycyIsImhvdXIiLCJtcyIsIm1pbGxpc2Vjb25kcyIsIm1pbGxpc2Vjb25kIiwibWludXRlcyIsIm1pbnV0ZSIsIk0iLCJtb250aHMiLCJtb250aCIsIlEiLCJxdWFydGVycyIsInF1YXJ0ZXIiLCJzZWNvbmRzIiwic2Vjb25kIiwiZ2ciLCJ3ZWVreWVhcnMiLCJ3ZWVreWVhciIsIkdHIiwiaXNvd2Vla3llYXJzIiwiaXNvd2Vla3llYXIiLCJ3Iiwid2Vla3MiLCJ3ZWVrIiwiVyIsImlzb3dlZWtzIiwiaXNvd2VlayIsInkiLCJ5ZWFycyIsInllYXIiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJyZWdleGVzIiwicHJpb3JpdGllcyIsImlzb1dlZWtkYXkiLCJkYXlPZlllYXIiLCJ3ZWVrWWVhciIsImlzb1dlZWtZZWFyIiwiaXNvV2VlayIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsIm1hdGNoMXRvMk5vTGVhZGluZ1plcm8iLCJtYXRjaDF0bzJIYXNaZXJvIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsIlJlZ0V4cCIsInJlZ2V4RXNjYXBlIiwibWF0Y2hlZCIsInAxIiwicDIiLCJwMyIsInA0IiwiYWJzRmxvb3IiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwiaXNGaW5pdGUiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwidG9rZW5MZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsImlzTGVhcFllYXIiLCJkYXlzSW5ZZWFyIiwicGFyc2VUd29EaWdpdFllYXIiLCJwYXJzZUludCIsImluZGV4T2YiLCJnZXRTZXRZZWFyIiwibWFrZUdldFNldCIsInVuaXQiLCJrZWVwVGltZSIsInNldCQxIiwiaXNVVEMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsImdldFVUQ01pbnV0ZXMiLCJnZXRNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJnZXRIb3VycyIsImdldFVUQ0RhdGUiLCJnZXREYXRlIiwiZ2V0VVRDRGF5IiwiZ2V0RGF5IiwiZ2V0VVRDTW9udGgiLCJnZXRNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJzZXRVVENNaWxsaXNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJzZXRVVENTZWNvbmRzIiwic2V0U2Vjb25kcyIsInNldFVUQ01pbnV0ZXMiLCJzZXRNaW51dGVzIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsInNldFVUQ0RhdGUiLCJzZXREYXRlIiwic2V0VVRDRnVsbFllYXIiLCJzZXRGdWxsWWVhciIsImRheXNJbk1vbnRoIiwieCIsIm1vZE1vbnRoIiwibW9udGhzU2hvcnQiLCJtb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJtb250aHNQYXJzZSIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJzcGxpdCIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsIk1PTlRIU19JTl9GT1JNQVQiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsInNldE1vbnRoIiwibWluIiwic2V0VVRDTW9udGgiLCJnZXRTZXRNb250aCIsImNvbXB1dGVNb250aHNQYXJzZSIsImNtcExlblJldiIsInNob3J0UCIsImxvbmdQIiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJzb3J0IiwiX21vbnRoc1JlZ2V4IiwiX21vbnRoc1Nob3J0UmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRTdHJpY3RSZWdleCIsImNyZWF0ZURhdGUiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZmlyc3RXZWVrT2Zmc2V0IiwiZG93IiwiZG95IiwiZndkIiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla09mZnNldCIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJzaGlmdFdlZWtkYXlzIiwid3MiLCJjb25jYXQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c01pblJlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNSZWdleCIsIndlZWtkYXlzUGFyc2UiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCIsImRlZmF1bHRXZWVrZGF5c01pblJlZ2V4IiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsIm1pblBpZWNlcyIsIl93ZWVrZGF5c1JlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblJlZ2V4IiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJoRm9ybWF0IiwibG93ZXJjYXNlIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaGgiLCJkZCIsInd3IiwiTU0iLCJ5eSIsIm1lcmlkaWVtUGFyc2UiLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJjb21tb25QcmVmaXgiLCJhcnIxIiwiYXJyMiIsIm1pbmwiLCJub3JtYWxpemVMb2NhbGUiLCJsb2FkTG9jYWxlIiwib2xkTG9jYWxlIiwiaXNMb2NhbGVOYW1lU2FuZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwidmFsdWVzIiwiZGF0YSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImFiYnIiLCJfY29uZmlnIiwicGFyZW50TG9jYWxlIiwiZm9yRWFjaCIsIm5hbWVzIiwiaiIsIm5leHQiLCJjaG9vc2VMb2NhbGUiLCJjaGVja092ZXJmbG93IiwiX292ZXJmbG93RGF5T2ZZZWFyIiwiX292ZXJmbG93V2Vla3MiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsIm9ic09mZnNldHMiLCJVVCIsIkdNVCIsIkVEVCIsIkVTVCIsIkNEVCIsIkNTVCIsIk1EVCIsIk1TVCIsIlBEVCIsIlBTVCIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0Iiwic3RyaW5nIiwiZXhlYyIsImlzb0RhdGVzTGVuIiwiaXNvVGltZXNMZW4iLCJjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0IiwidW50cnVuY2F0ZVllYXIiLCJ5ZWFyU3RyIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsInJlc3VsdCIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsImNoZWNrV2Vla2RheSIsIm9ic09mZnNldCIsIm1pbGl0YXJ5T2Zmc2V0IiwibnVtT2Zmc2V0IiwiaG0iLCJjYWxjdWxhdGVPZmZzZXQiLCJkZWZhdWx0cyIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwiZXhwZWN0ZWRXZWVrZGF5IiwieWVhclRvVXNlIiwibm93VmFsdWUiLCJub3ciLCJfdXNlVVRDIiwiY3VycmVudERhdGVBcnJheSIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJjdXJXZWVrIiwiY3JlYXRlTG9jYWwiLCJfd2VlayIsIl9kYXlPZlllYXIiLCJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCJfbmV4dERheSIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJtZXJpZGllbUZpeFdyYXAiLCJlcmFzQ29udmVydFllYXIiLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJ0ZW1wQ29uZmlnIiwiYmVzdE1vbWVudCIsInNjb3JlVG9CZWF0IiwiY3VycmVudFNjb3JlIiwidmFsaWRGb3JtYXRGb3VuZCIsImJlc3RGb3JtYXRJc1ZhbGlkIiwiY29uZmlnZkxlbiIsInNjb3JlIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJjb25maWdGcm9tU3RyaW5nIiwiZGF5T3JEYXRlIiwiY29uZmlnRnJvbU9iamVjdCIsImNvbmZpZ0Zyb21JbnB1dCIsImFkZCIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsInVuaXRIYXNEZWNpbWFsIiwib3JkZXJMZW4iLCJwYXJzZUZsb2F0IiwiaXNEdXJhdGlvblZhbGlkIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX21vbnRocyIsIl9kYXRhIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInJvdW5kIiwib2Zmc2V0Iiwic2VwYXJhdG9yIiwidXRjT2Zmc2V0Iiwic2lnbiIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJwYXJ0cyIsIm1hdGNoZXMiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsImRpZmYiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwicmV0IiwiZGlmZlJlcyIsImJhc2UiLCJwYXJzZUlzbyIsImlzQmVmb3JlIiwicG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZSIsImlucCIsImlzQWZ0ZXIiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsInRtcCIsImFkZFN1YnRyYWN0IiwiaXNBZGRpbmciLCJpbnZhbGlkIiwic3VidHJhY3QiLCJpc1N0cmluZyIsIlN0cmluZyIsImlzTW9tZW50SW5wdXQiLCJhcnJheVRlc3QiLCJkYXRhVHlwZVRlc3QiLCJmaWx0ZXIiLCJpdGVtIiwiaXNOdW1iZXJPclN0cmluZ0FycmF5Iiwib2JqZWN0VGVzdCIsInByb3BlcnR5VGVzdCIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eUxlbiIsImlzTW9tZW50SW5wdXRPYmplY3QiLCJpc0NhbGVuZGFyU3BlYyIsIm1vbnRoRGlmZiIsIndob2xlTW9udGhEaWZmIiwiYW5jaG9yIiwibmV3TG9jYWxlRGF0YSIsImRlZmF1bHRGb3JtYXQiLCJkZWZhdWx0Rm9ybWF0VXRjIiwibGFuZyIsIm1vZCQxIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibG9jYWxTdGFydE9mRGF0ZSIsInV0Y1N0YXJ0T2ZEYXRlIiwibWF0Y2hFcmFBYmJyIiwiZXJhc0FiYnJSZWdleCIsImNvbXB1dGVFcmFzUGFyc2UiLCJlcmFzTmFtZSIsImVyYXNBYmJyIiwiZXJhc05hcnJvdyIsImFiYnJQaWVjZXMiLCJuYW1lUGllY2VzIiwibmFycm93UGllY2VzIiwiZXJhcyIsIm5hcnJvdyIsIl9lcmFzUmVnZXgiLCJfZXJhc05hbWVSZWdleCIsIl9lcmFzQWJiclJlZ2V4IiwiX2VyYXNOYXJyb3dSZWdleCIsImFkZFdlZWtZZWFyRm9ybWF0VG9rZW4iLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJlcmFzTmFtZVJlZ2V4IiwiZXJhc05hcnJvd1JlZ2V4IiwiZXJhc1BhcnNlIiwiX2VyYVllYXJPcmRpbmFsUmVnZXgiLCJlcmFZZWFyT3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldE1pbnV0ZSIsImdldFNldE1pbGxpc2Vjb25kIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsInByb3RvIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwidGltZSIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJhc0Zsb2F0IiwidGhhdCIsInpvbmVEZWx0YSIsImVuZE9mIiwic3RhcnRPZkRhdGUiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwicHJpb3JpdHkiLCJnZXRQcmlvcml0aXplZFVuaXRzIiwicHJpb3JpdGl6ZWRMZW4iLCJ0b0FycmF5IiwidG9PYmplY3QiLCJ0b0RhdGUiLCJ0b0lTT1N0cmluZyIsImtlZXBPZmZzZXQiLCJpbnNwZWN0IiwicHJlZml4Iiwic3VmZml4Iiwiem9uZSIsImlzTG9jYWwiLCJmb3IiLCJ0b0pTT04iLCJ1bml4IiwiY3JlYXRpb25EYXRhIiwiZXJhTmFtZSIsInNpbmNlIiwidW50aWwiLCJlcmFOYXJyb3ciLCJlcmFBYmJyIiwiZXJhWWVhciIsImRpciIsImlzb1dlZWtzIiwid2Vla0luZm8iLCJ3ZWVrc0luV2Vla1llYXIiLCJpc29XZWVrc0luWWVhciIsImlzb1dlZWtzSW5JU09XZWVrWWVhciIsInBhcnNlV2Vla2RheSIsInBhcnNlSXNvV2Vla2RheSIsImtlZXBMb2NhbFRpbWUiLCJrZWVwTWludXRlcyIsImxvY2FsQWRqdXN0IiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJwYXJzZVpvbmUiLCJ0Wm9uZSIsImhhc0FsaWduZWRIb3VyT2Zmc2V0IiwiaXNEU1QiLCJpc1V0Y09mZnNldCIsInpvbmVBYmJyIiwiem9uZU5hbWUiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJjb21wYXJlQXJyYXlzIiwicHJvdG8kMSIsImdldCQxIiwiaW5kZXgiLCJmaWVsZCIsInNldHRlciIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsInNoaWZ0IiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJ0b1VwcGVyQ2FzZSIsInRvayIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsInNvdXJjZSIsIl9lcmFzIiwiaXNGb3JtYXQiLCJfbW9udGhzU2hvcnQiLCJfbW9udGhzUGFyc2VFeGFjdCIsImZpcnN0RGF5T2ZZZWFyIiwiZmlyc3REYXlPZldlZWsiLCJfd2Vla2RheXMiLCJfd2Vla2RheXNNaW4iLCJfd2Vla2RheXNTaG9ydCIsIl93ZWVrZGF5c1BhcnNlRXhhY3QiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJjaGFyQXQiLCJpc0xvd2VyIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFic0NlaWwiLCJkYXlzVG9Nb250aHMiLCJtb250aHNUb0RheXMiLCJtYWtlQXMiLCJhbGlhcyIsImFzIiwiYXNNaWxsaXNlY29uZHMiLCJhc1NlY29uZHMiLCJhc01pbnV0ZXMiLCJhc0hvdXJzIiwiYXNEYXlzIiwiYXNXZWVrcyIsImFzTW9udGhzIiwiYXNRdWFydGVycyIsImFzWWVhcnMiLCJ2YWx1ZU9mJDEiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsInN1YnN0aXR1dGVUaW1lQWdvIiwiYWJzJDEiLCJ0b0lTT1N0cmluZyQxIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwidG90YWwiLCJ0b0ZpeGVkIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwiYXJnV2l0aFN1ZmZpeCIsImFyZ1RocmVzaG9sZHMiLCJ3aXRoU3VmZml4IiwidGgiLCJhc3NpZ24iLCJwb3NOZWdEdXJhdGlvbiIsInJlbGF0aXZlVGltZSQxIiwidG9Jc29TdHJpbmciLCJ2ZXJzaW9uIiwidXBkYXRlTG9jYWxlIiwidG1wTG9jYWxlIiwicmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJteU1vbWVudCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiREFURSIsIlRJTUUiLCJUSU1FX1NFQ09ORFMiLCJUSU1FX01TIiwiV0VFSyIsIk1PTlRIIiwiZmFjdG9yeSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJfd3JhcFJlZ0V4cCIsInJlIiwiZ3JvdXBzIiwiQmFiZWxSZWdFeHAiLCJfc3VwZXIiLCJfZ3JvdXBzIiwiV2Vha01hcCIsIl90aGlzIiwiX3NldFByb3RvdHlwZU9mIiwiYnVpbGRHcm91cHMiLCJnIiwicmVkdWNlIiwiX2luaGVyaXRzIiwic3RyIiwic3Vic3RpdHV0aW9uIiwiXyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiVHlwZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJkb25lIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiaXNOb2RlIiwicHJvY2VzcyIsImJyb3dzZXIiLCJnZXROb2RlVmVyc2lvbiIsInZlcnNpb25zIiwibm9kZSIsIm5vb3AiLCJQRVJDRU5UQUdFX1JFR0VYIiwiY2FsY3VsYXRlTGltaXQiLCJ0eXBlIiwiX3R5cGUkbWF0Y2giLCJwZXJjZW50YWdlIiwiY3JlYXRlVGhyb3R0bGUiLCJsb2dnZXIiLCJpbnRlcnZhbCIsImRlbGF5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZGVmYXVsdFdhaXQiLCJhdHRlbXB0cyIsIlNRUlQyIiwiSE9TVF9SRUdFWCIsImNyZWF0ZUh0dHBDbGllbnQiLCJheGlvcyIsIm9wdGlvbnMiLCJpbnNlY3VyZSIsInJldHJ5T25FcnJvciIsImxvZ0hhbmRsZXIiLCJsZXZlbCIsInRpdGxlIiwibWVzc2FnZSIsImVycm9yIiwibG9nIiwiaGVhZGVycyIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJ0aW1lb3V0IiwidGhyb3R0bGUiLCJwcm94eSIsImJhc2VQYXRoIiwiYWRhcHRlciIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwiYWNjZXNzVG9rZW4iLCJtaXNzaW5nQWNjZXNzVG9rZW5FcnJvciIsInByb3RvY29sIiwic3BhY2UiLCJob3N0bmFtZSIsImRlZmF1bHRIb3N0bmFtZSIsInBvcnQiLCJob3N0IiwicGFyc2VkIiwiX3BhcnNlZCIsIkJvb2xlYW4iLCJiYXNlVVJMIiwiQXV0aG9yaXphdGlvbiIsImF4aW9zT3B0aW9ucyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJzdHJpbmdpZnkiLCJyZXNwb25zZUxvZ2dlciIsInJlcXVlc3RMb2dnZXIiLCJpbnN0YW5jZSIsImh0dHBDbGllbnRQYXJhbXMiLCJjbG9uZVdpdGhOZXdQYXJhbXMiLCJuZXdQYXJhbXMiLCJvbkJlZm9yZVJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0IiwidXNlIiwiZ2V0VG9rZW4iLCJ0aGVuIiwiYXN5bmNUb2tlbiIsImF4aW9zSW5zdGFuY2UiLCJfYXhpb3NJbnN0YW5jZSRkZWZhdWwiLCJpc0NhbGN1bGF0ZWQiLCJyZXF1ZXN0SW50ZXJjZXB0b3JJZCIsInJlamVjdCIsInJlc3BvbnNlSW50ZXJjZXB0b3JJZCIsInJlc3BvbnNlIiwicmF3TGltaXQiLCJuZXh0TGltaXQiLCJlamVjdCIsInJhdGVMaW1pdFRocm90dGxlIiwibWF4UmV0cnkiLCJfaW5zdGFuY2UkZGVmYXVsdHMiLCJfaW5zdGFuY2UkZGVmYXVsdHMkcmUiLCJfaW5zdGFuY2UkZGVmYXVsdHMkcmUyIiwiZG9uZUF0dGVtcHRzIiwicmV0cnlFcnJvclR5cGUiLCJ3YWl0Iiwic3RhdHVzIiwicmFuZG9tIiwicmF0ZUxpbWl0IiwicmV0cnlMaW1pdCIsIm9uRXJyb3IiLCJjcmVhdGVSZXF1ZXN0Q29uZmlnIiwiX3JlZiIsInF1ZXJ5IiwicmVzb2x2ZUxpbmtzIiwicGFyYW1zIiwiZGVlcEZyZWV6ZSIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIkYiLCJmIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsInN0ZXAiLCJyZXR1cm4iLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImZyZWV6ZSIsImZyZWV6ZVN5cyIsInN5cyIsImdldEJyb3dzZXJPUyIsIndpbiIsIndpbmRvdyIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwiZ2V0VXNlckFnZW50SGVhZGVyIiwic2RrIiwiYXBwbGljYXRpb24iLCJpbnRlZ3JhdGlvbiIsImZlYXR1cmUiLCJoZWFkZXJQYXJ0cyIsInByb2R1Y3QiLCJwbGF0Zm9ybU1hcCIsImFuZHJvaWQiLCJhaXgiLCJkYXJ3aW4iLCJmcmVlYnNkIiwibGludXgiLCJvcGVuYnNkIiwic3Vub3MiLCJ3aW4zMiIsImdldE5vZGVPUyIsInRvUGxhaW5PYmplY3QiLCJpbnRlcmxlYXZlIiwic3RyaW5ncyIsImludGVycG9sYXRpb25zIiwiY2xhc3NDYWxsQ2hlY2siLCJDb25zdHJ1Y3RvciIsImNyZWF0ZUNsYXNzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJpbmhlcml0cyIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJpc1BsYWluT2JqZWN0IiwiRU1QVFlfQVJSQVkiLCJFTVBUWV9PQkpFQ1QiLCJnZXRDb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJpc1N0eWxlZENvbXBvbmVudCIsInN0eWxlZENvbXBvbmVudElkIiwiU0NfQVRUUiIsImVudiIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiSVNfQlJPV1NFUiIsIkRJU0FCTEVfU1BFRURZIiwiU0NfRElTQUJMRV9TUEVFRFkiLCJSRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkiLCJTVEFUSUNfRVhFQ1VUSU9OX0NPTlRFWFQiLCJTdHlsZWRDb21wb25lbnRzRXJyb3IiLCJfRXJyb3IiLCJjb2RlIiwiX2xlbiIsIl9rZXkiLCJTQ19DT01QT05FTlRfSUQiLCJleHRyYWN0Q29tcHMiLCJtYXliZUNTUyIsImNzcyIsImV4aXN0aW5nQ29tcG9uZW50cyIsImNvbXBvbmVudElkIiwibWF0Y2hJbmRleCIsIm5leHRDb21wIiwiY3NzRnJvbURPTSIsIkNPTU1FTlRfUkVHRVgiLCJzdHlsaXNTcGxpdHRlciIsImdsb2JhbCIsImNhc2NhZGUiLCJrZXlmcmFtZSIsImNvbXByZXNzIiwic2VtaWNvbG9uIiwic3R5bGlzIiwicGFyc2luZ1J1bGVzIiwicmV0dXJuUnVsZXNQbHVnaW4iLCJjb250ZXh0IiwicGFyc2VkUnVsZXMiLCJwYXJzZVJ1bGVzUGx1Z2luIiwicnVsZSIsIl9jb21wb25lbnRJZCIsIl9zZWxlY3RvciIsIl9zZWxlY3RvclJlZ2V4cCIsInNlbGZSZWZlcmVuY2VSZXBsYWNlciIsInNlbGVjdG9ycyIsImxhc3RJbmRleE9mIiwic3BsaXRCeVJ1bGVzIiwic3RyaW5naWZ5UnVsZXMiLCJydWxlcyIsInNlbGVjdG9yIiwiZmxhdENTUyIsImNzc1N0ciIsImdldE5vbmNlIiwiYWRkTmFtZUZvcklkIiwiaWQiLCJyZXNldElkTmFtZXMiLCJoYXNOYW1lRm9ySWQiLCJzdHJpbmdpZnlOYW1lcyIsInRyaW0iLCJzaGVldEZvclRhZyIsInRhZyIsInNoZWV0Iiwic2l6ZSIsIm93bmVyRG9jdW1lbnQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNhZmVJbnNlcnRSdWxlIiwiY3NzUnVsZSIsIm1heEluZGV4IiwiY3NzUnVsZXMiLCJpbnNlcnRSdWxlIiwibWFrZVRleHRNYXJrZXIiLCJhZGRVcFVudGlsSW5kZXgiLCJzaXplcyIsInRvdGFsVXBUb0luZGV4Iiwid3JhcEFzSHRtbFRhZyIsImFkZGl0aW9uYWxBdHRycyIsIm5vbmNlIiwiU0NfVkVSU0lPTl9BVFRSIiwid3JhcEFzRWxlbWVudCIsIl9wcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImdldElkc0Zyb21NYXJrZXJzRmFjdG9yeSIsIm1hcmtlcnMiLCJtYWtlVGV4dE5vZGUiLCJ0YXJnZXREb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwibWFrZVNlcnZlclRhZyIsIm5hbWVzQXJnIiwibWFya2Vyc0FyZyIsImluc2VydE1hcmtlciIsInByZXYiLCJjc3NGb3JJZCIsIm5hbWVzQ2xvbmUiLCJjbG9uZU5hbWVzIiwibWFya2Vyc0Nsb25lIiwiZ2V0SWRzIiwiaW5zZXJ0UnVsZXMiLCJyZW1vdmVSdWxlcyIsIm1hcmtlciIsInNlYWxlZCIsInN0eWxlVGFnIiwidG9FbGVtZW50IiwidG9IVE1MIiwibWFrZVRhZyIsInRhZ0VsIiwiZm9yY2VTZXJ2ZXIiLCJpbnNlcnRCZWZvcmUiLCJnZXRJbXBvcnRSdWxlVGFnIiwiZWwiLCJkb2N1bWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsIm5leHRTaWJsaW5nIiwibWFrZVN0eWxlVGFnIiwiZXh0cmFjdEltcG9ydCIsInVzZWRJbXBvcnRSdWxlVGFnIiwiaW1wb3J0UnVsZXMiLCJjc3NSdWxlc1NpemUiLCJtYXlIYXZlSW1wb3J0IiwiYXBwZW5kRGF0YSIsIm5ld01hcmtlciIsInJlcGxhY2VDaGlsZCIsIm1ha2VCcm93c2VyVGFnIiwiZW5kIiwiY3NzVGV4dCIsImluc2VydEluZGV4IiwiaW5qZWN0ZWRSdWxlcyIsImlzQ29ubmVjdGVkIiwicmVtb3ZhbEluZGV4IiwibG93ZXJCb3VuZCIsImRlbGV0ZVJ1bGUiLCJkZWxldGVSdWxlcyIsIm1ha2VTcGVlZHlUYWciLCJTUExJVF9SRUdFWCIsIk1BWF9TSVpFIiwic2hlZXRSdW5uaW5nSWQiLCJtYXN0ZXIiLCJTdHlsZVNoZWV0IiwiaGVhZCIsImltcG9ydFJ1bGVUYWciLCJmaXJzdFRhZyIsInRhZ3MiLCJ0YWdNYXAiLCJkZWZlcnJlZCIsInJlaHlkcmF0ZWROYW1lcyIsImlnbm9yZVJlaHlkcmF0ZWROYW1lcyIsImNhcGFjaXR5IiwiY2xvbmVzIiwicmVoeWRyYXRlIiwiZWxzIiwiZXh0cmFjdGVkIiwiaXNTdHJlYW1lZCIsIm5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGVzU2l6ZSIsImdldEF0dHJpYnV0ZSIsImVsTmFtZXMiLCJlbE5hbWVzU2l6ZSIsInRleHRDb250ZW50IiwiZXh0cmFjdGVkU2l6ZSIsIl9leHRyYWN0ZWQkaSIsInJlbW92ZUNoaWxkIiwiX2oiLCJyZXNldCIsImlkcyIsIm5ld1RhZyIsInNlYWxBbGxUYWdzIiwibGFzdEVsIiwiZ2V0VGFnRm9ySWQiLCJoYXNJZCIsImRlZmVycmVkSW5qZWN0IiwiaW5qZWN0IiwicmVtb3ZlIiwidG9SZWFjdEVsZW1lbnRzIiwiS2V5ZnJhbWVzIiwic3R5bGVTaGVldCIsImdldE5hbWUiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiaHlwaGVuYXRlU3R5bGVOYW1lIiwiaXNGYWxzaXNoIiwiY2h1bmsiLCJvYmpUb0Nzc0FycmF5IiwicHJldktleSIsImZsYXR0ZW4iLCJleGVjdXRpb25Db250ZXh0IiwicnVsZVNldCIsImlzUmVhY3RDb21wb25lbnQiLCJzdHlsZXMiLCJtdXJtdXJoYXNoIiwiY2hhckNvZGVBdCIsImdldEFscGhhYmV0aWNDaGFyIiwiZnJvbUNoYXJDb2RlIiwiZ2VuZXJhdGVBbHBoYWJldGljTmFtZSIsImlzU3RhdGljUnVsZXMiLCJhdHRycyIsImhhc0Z1bmN0aW9uT2JqZWN0S2V5IiwiX1RZUEVfU1RBVElDUyIsImhhc2hlciIsIkNvbXBvbmVudFN0eWxlIiwiaXNTdGF0aWMiLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsImxhc3RDbGFzc05hbWUiLCJnZW5lcmF0ZU5hbWUiLCJkZXRlcm1pbmVUaGVtZSIsImZhbGxiYWNrVGhlbWUiLCJkZWZhdWx0UHJvcHMiLCJpc0RlZmF1bHRUaGVtZSIsInRoZW1lIiwiZXNjYXBlUmVnZXgiLCJkYXNoZXNBdEVuZHMiLCJlc2NhcGUiLCJpc1RhZyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIlRZUEVfU1RBVElDUyIsIiQkdHlwZW9mIiwicmVuZGVyIiwiZGVmaW5lUHJvcGVydHkkMSIsIl9PYmplY3QkZ2V0T3duUHJvcGVydCIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiYXJyYXlQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiVGhlbWVDb250ZXh0IiwiVGhlbWVDb25zdW1lciIsIkNvbnN1bWVyIiwiU3R5bGVTaGVldENvbnRleHQiLCJfQ29tcG9uZW50IiwiVGhlbWVQcm92aWRlciIsImdldENvbnRleHQiLCJyZW5kZXJJbm5lciIsImNoaWxkcmVuIiwib3V0ZXJUaGVtZSIsIlByb3ZpZGVyIiwiZ2V0VGhlbWUiLCJTZXJ2ZXJTdHlsZVNoZWV0IiwibWFzdGVyU2hlZXQiLCJzZWFsIiwic3BsaWNlIiwiY29sbGVjdFN0eWxlcyIsIlN0eWxlU2hlZXRNYW5hZ2VyIiwiZ2V0U3R5bGVUYWdzIiwiZ2V0U3R5bGVFbGVtZW50IiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwicmVhZGFibGVTdHJlYW0iLCJTdHlsZVNoZWV0Q29uc3VtZXIiLCJpZGVudGlmaWVycyIsIlN0eWxlZENvbXBvbmVudCIsInJlbmRlck91dGVyIiwiZm9yd2FyZGVkQ29tcG9uZW50IiwiY29tcG9uZW50U3R5bGUiLCJfcHJvcHMkZm9yd2FyZGVkQ29tcG8iLCJmb2xkZWRDb21wb25lbnRJZHMiLCJnZW5lcmF0ZWRDbGFzc05hbWUiLCJlbGVtZW50VG9CZUNyZWF0ZWQiLCJpc1RhcmdldFRhZyIsInByb3BzRm9yRWxlbWVudCIsImNvbXB1dGVkUHJvcHMiLCJyZWYiLCJzdHlsZSIsImNsYXNzTmFtZSIsImJ1aWxkRXhlY3V0aW9uQ29udGV4dCIsIl90aGlzMiIsImF0dHJEZWYiLCJyZXNvbHZlZEF0dHJEZWYiLCJhdHRyRGVmV2FzRm4iLCJhdHRyIiwiX3Byb3BzJGZvcndhcmRlZENvbXBvMiIsIndhcm5Ub29NYW55Q2xhc3NlcyIsImNyZWF0ZVN0eWxlZENvbXBvbmVudCIsImlzVGFyZ2V0U3R5bGVkQ29tcCIsImlzQ2xhc3MiLCJfb3B0aW9ucyRkaXNwbGF5TmFtZSIsImdlbmVyYXRlRGlzcGxheU5hbWUiLCJfb3B0aW9ucyRjb21wb25lbnRJZCIsIl9Db21wb25lbnRTdHlsZSIsIl9kaXNwbGF5TmFtZSIsInBhcmVudENvbXBvbmVudElkIiwibnIiLCJnZW5lcmF0ZUlkIiwiX29wdGlvbnMkUGFyZW50Q29tcG9uIiwiUGFyZW50Q29tcG9uZW50IiwiX29wdGlvbnMkYXR0cnMiLCJmaW5hbEF0dHJzIiwiV3JhcHBlZFN0eWxlZENvbXBvbmVudCIsImZvcndhcmRSZWYiLCJmb3J3YXJkZWRSZWYiLCJ3aXRoQ29tcG9uZW50IiwicHJldmlvdXNDb21wb25lbnRJZCIsIm9wdGlvbnNUb0NvcHkiLCJvYmplY3RXaXRob3V0UHJvcGVydGllcyIsIm5ld0NvbXBvbmVudElkIiwiX2ZvbGRlZERlZmF1bHRQcm9wcyIsInN0eWxlZCIsImNvbnN0cnVjdFdpdGhPcHRpb25zIiwiY29tcG9uZW50Q29uc3RydWN0b3IiLCJ0ZW1wbGF0ZUZ1bmN0aW9uIiwid2l0aENvbmZpZyIsImRvbUVsZW1lbnQiLCJHbG9iYWxTdHlsZSIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsImNyZWF0ZUdsb2JhbFN0eWxlIiwiSlNPTiIsIkdsb2JhbFN0eWxlQ29tcG9uZW50IiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzJGNvbnN0cnVjdG9yIiwiZ2xvYmFsU3R5bGUiLCJzY0NHU0hNUkNhY2hlIiwic3RhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkNvbXBvbmVudCIsInRvU3RyaW5nRnVuY3Rpb24iLCJnZXRQcm90b3R5cGVPZiQxIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJTWU1CT0xfUFJPUEVSVElFUyIsIldFQUtfTUFQIiwiY3JlYXRlQ2FjaGUiLCJDYWNoZSIsIl9rZXlzIiwiX3ZhbHVlcyIsImhhcyIsImdldENsZWFuQ2xvbmUiLCJyZWFsbSIsImdldE9iamVjdENsb25lTG9vc2UiLCJoYW5kbGVDb3B5IiwiY2FjaGUiLCJsZW5ndGhfMSIsInN5bWJvbCIsImdldE9iamVjdENsb25lU3RyaWN0IiwibGVuZ3RoXzIiLCJHTE9CQUxfVEhJUyIsImdsb2JhbFRoaXMiLCJjb3B5IiwiZ2V0T2JqZWN0Q2xvbmUiLCJyZWdFeHAiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIk1hcCIsIlNldCIsIkJsb2IiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImFsbG9jVW5zYWZlIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJXZWFrU2V0IiwiZGVmYXVsdCIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwidGhpc0FyZyIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJhY3RlciIsImZyb21Db2RlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwidG9Qcm9wZXJ0eUtleSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9uZXh0IiwiX3Rocm93IiwibGVmdCIsInJpZ2h0IiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsImFyZ3YiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsInRyYW5zZm9ybSIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwiZ2V0UHJvdG90eXBlIiwiaXNPYmplY3RMaWtlIiwiaXNIb3N0T2JqZWN0IiwiQ3RvciIsIm1hcFNpemVEZXNjcmlwdG9yIiwiaGFzTWFwIiwibWFwU2l6ZSIsIm1hcEZvckVhY2giLCJoYXNTZXQiLCJzZXRTaXplRGVzY3JpcHRvciIsInNldFNpemUiLCJzZXRGb3JFYWNoIiwid2Vha01hcEhhcyIsIndlYWtTZXRIYXMiLCJ3ZWFrUmVmRGVyZWYiLCJXZWFrUmVmIiwiZGVyZWYiLCJib29sZWFuVmFsdWVPZiIsImZ1bmN0aW9uVG9TdHJpbmciLCIkbWF0Y2giLCIkc2xpY2UiLCIkcmVwbGFjZSIsIiR0b1VwcGVyQ2FzZSIsIiR0b0xvd2VyQ2FzZSIsIiR0ZXN0IiwiJGNvbmNhdCIsIiRqb2luIiwiJGFyclNsaWNlIiwiJGZsb29yIiwiYmlnSW50VmFsdWVPZiIsIkJpZ0ludCIsImdPUFMiLCJzeW1Ub1N0cmluZyIsImhhc1NoYW1tZWRTeW1ib2xzIiwiaXNFbnVtZXJhYmxlIiwiZ1BPIiwiUmVmbGVjdCIsIk8iLCJhZGROdW1lcmljU2VwYXJhdG9yIiwibnVtIiwiSW5maW5pdHkiLCJzZXBSZWdleCIsImludCIsImludFN0ciIsImRlYyIsInV0aWxJbnNwZWN0IiwiaW5zcGVjdEN1c3RvbSIsImN1c3RvbSIsImluc3BlY3RTeW1ib2wiLCJpc1N5bWJvbCIsInF1b3RlcyIsInNpbmdsZSIsInF1b3RlUkVzIiwid3JhcFF1b3RlcyIsImRlZmF1bHRTdHlsZSIsIm9wdHMiLCJxdW90ZVN0eWxlIiwicXVvdGVDaGFyIiwicXVvdGUiLCJjYW5UcnVzdFRvU3RyaW5nIiwidG9TdHIiLCJpc1JlZ0V4cCIsImluc3BlY3RfIiwiZGVwdGgiLCJzZWVuIiwibWF4U3RyaW5nTGVuZ3RoIiwiY3VzdG9tSW5zcGVjdCIsImluZGVudCIsIm51bWVyaWNTZXBhcmF0b3IiLCJpbnNwZWN0U3RyaW5nIiwicmVtYWluaW5nIiwidHJhaWxlciIsInF1b3RlUkUiLCJsb3dieXRlIiwiYmlnSW50U3RyIiwibWF4RGVwdGgiLCJiYXNlSW5kZW50IiwiZ2V0SW5kZW50Iiwibm9JbmRlbnQiLCJuZXdPcHRzIiwibmFtZU9mIiwiYXJyT2JqS2V5cyIsInN5bVN0cmluZyIsIm1hcmtCb3hlZCIsIkhUTUxFbGVtZW50Iiwibm9kZU5hbWUiLCJpc0VsZW1lbnQiLCJhdHRyaWJ1dGVzIiwiY2hpbGROb2RlcyIsInhzIiwic2luZ2xlTGluZVZhbHVlcyIsImluZGVudGVkSm9pbiIsImlzRXJyb3IiLCJjYXVzZSIsImlzTWFwIiwibWFwUGFydHMiLCJjb2xsZWN0aW9uT2YiLCJpc1NldCIsInNldFBhcnRzIiwiaXNXZWFrTWFwIiwid2Vha0NvbGxlY3Rpb25PZiIsImlzV2Vha1NldCIsImlzV2Vha1JlZiIsIk51bWJlciIsImlzQmlnSW50IiwiaXNCb29sZWFuIiwieXMiLCJwcm90b1RhZyIsInN0cmluZ1RhZyIsImhhc093biIsIjgiLCI5IiwiMTAiLCIxMiIsIjEzIiwiZW50cmllcyIsImxpbmVKb2luZXIiLCJpc0FyciIsInN5bU1hcCIsInN5bXMiLCJpbXBsZW1lbnRhdGlvbiIsInZpc2l0IiwidmlzaXRQYXJlbnRzIiwiQ09OVElOVUUiLCJTS0lQIiwiRVhJVCIsInRyZWUiLCJ2aXNpdG9yIiwicmV2ZXJzZSIsInBhcmVudHMiLCJwYXJlbnQiLCJhcnJheVdpdGhIb2xlcyIsIml0ZXJhYmxlVG9BcnJheUxpbWl0IiwidW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJub25JdGVyYWJsZVJlc3QiLCIkT2JqZWN0IiwiJEVycm9yIiwiJEV2YWxFcnJvciIsIiRSYW5nZUVycm9yIiwiJFJlZmVyZW5jZUVycm9yIiwiJFN5bnRheEVycm9yIiwiJFR5cGVFcnJvciIsIiRVUklFcnJvciIsIiRGdW5jdGlvbiIsImdldEV2YWxsZWRDb25zdHJ1Y3RvciIsImV4cHJlc3Npb25TeW50YXgiLCIkZ09QRCIsIiRkZWZpbmVQcm9wZXJ0eSIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWVUaHJvd3MiLCJnT1BEdGhyb3dzIiwiaGFzU3ltYm9scyIsImdldFByb3RvIiwiJE9iamVjdEdQTyIsIiRSZWZsZWN0R1BPIiwiJGFwcGx5IiwiJGNhbGwiLCJuZWVkc0V2YWwiLCJUeXBlZEFycmF5IiwiVWludDhBcnJheSIsIklOVFJJTlNJQ1MiLCJBZ2dyZWdhdGVFcnJvciIsIkF0b21pY3MiLCJCaWdJbnQ2NEFycmF5IiwiQmlnVWludDY0QXJyYXkiLCJEYXRhVmlldyIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsImV2YWwiLCJGbG9hdDE2QXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJGaW5hbGl6YXRpb25SZWdpc3RyeSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiUHJveHkiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsImVycm9yUHJvdG8iLCJMRUdBQ1lfQUxJQVNFUyIsIiRzcGxpY2VBcHBseSIsIiRzdHJTbGljZSIsIiRleGVjIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsImZpcnN0IiwibGFzdCIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJhbGxvd01pc3NpbmciLCJpbnRyaW5zaWNOYW1lIiwiZG9FdmFsIiwiZ2VuIiwiaW50cmluc2ljQmFzZU5hbWUiLCJpbnRyaW5zaWMiLCJpbnRyaW5zaWNSZWFsTmFtZSIsInNraXBGdXJ0aGVyQ2FjaGluZyIsImlzT3duIiwicGFydCIsImRlc2MiLCJwZXJjZW50VHdlbnRpZXMiLCJGb3JtYXQiLCJmb3JtYXR0ZXJzIiwiUkZDMTczOCIsIlJGQzM5ODYiLCJsZWdhY3kiLCJkZWNpbWFsIiwiaGV4YWRlY2ltYWwiLCJhbHBoYW51bWVyaWNhbCIsImRlY29kZUVudGl0eSIsIm9wdGlvbiIsInNldHRpbmdzIiwicG9zaXRpb24iLCJzdGFydCIsImVudGl0eUNoYXJhY3RlcnMiLCJuYW1lZEVudGl0eSIsInRlcm1pbmF0ZWQiLCJjaGFyYWN0ZXJzIiwicmVmZXJlbmNlIiwiZm9sbG93aW5nIiwid2FybmluZyIsInJlYXNvbiIsImVudGl0eSIsImJlZ2luIiwiYWRkaXRpb25hbCIsIm5vblRlcm1pbmF0ZWQiLCJoYW5kbGVUZXh0IiwidGV4dCIsImhhbmRsZVJlZmVyZW5jZSIsImhhbmRsZVdhcm5pbmciLCJ0ZXh0Q29udGV4dCIsInJlZmVyZW5jZUNvbnRleHQiLCJ3YXJuaW5nQ29udGV4dCIsImxpbmVzIiwiY29sdW1uIiwibGluZSIsIm1lc3NhZ2VzIiwiaGV4YSIsInRlc3RzIiwib3duIiwiYXR0cmlidXRlIiwiYmFzZXMiLCJkaXNhbGxvd2VkIiwiZmx1c2giLCJwYXJzZSIsImludGVycnVwdG9ycyIsInRva2VuaXplcnMiLCJjdHgiLCJpbnRlcnJ1cHRvciIsImJvb2wiLCJpZ25vcmUiLCJib29scyIsImNvdW50IiwiY29sbGFwc2VXaGl0ZVNwYWNlIiwiX2dldFByb3RvdHlwZU9mIiwiQSIsIkMiLCJ2IiwiJCIsInoiLCJOIiwiUyIsInEiLCJCIiwiSSIsIkoiLCJUIiwiVSIsIlYiLCJaIiwiYmUiLCJwZSIsImtlIiwiZ2UiLCJBZSIsIkNlIiwid2UiLCJ2ZSIsIm1lIiwieGUiLCIkZSIsInllIiwiT2UiLCJxZSIsIkJlIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJSIiwiamUiLCJ6ZSIsIkplIiwiUmUiLCJUZSIsIlVlIiwiVmUiLCJYZSIsIlllIiwiUWUiLCJzdWJzdHJpbmciLCJQZSIsIkllIiwiTWUiLCJMZSIsIktlIiwic2FmZUlzTmFOIiwiYXJlSW5wdXRzRXF1YWwiLCJuZXdJbnB1dHMiLCJsYXN0SW5wdXRzIiwicmVzdWx0Rm4iLCJpc0VxdWFsIiwibGFzdFRoaXMiLCJsYXN0UmVzdWx0IiwibGFzdEFyZ3MiLCJjYWxsZWRPbmNlIiwibmV3QXJncyIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0b1ByaW1pdGl2ZSIsInJlZ2VuZXJhdG9yRGVmaW5lIiwiX3JlZ2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiRyIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJfcmVnZW5lcmF0b3JEZWZpbmUiLCJfaW52b2tlIiwicmVnZW5lcmF0b3IiLCJyZWdlbmVyYXRvckFzeW5jSXRlcmF0b3IiLCJPdmVybG9hZFlpZWxkIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jSXRlcmF0b3IiLCJ1dGlscyIsImVuY29kZSIsInVybCIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsIlhNTEh0dHBSZXF1ZXN0IiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsInZhbGlkYXRlU3RhdHVzIiwiY29tbW9uIiwibWV0aG9kIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJidG9hIiwiZnVsbFBhdGgiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImRpcmVjdE1lcmdlS2V5cyIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIkNhbmNlbCIsIkdldEludHJpbnNpYyIsImNhbGxCb3VuZCIsIiRNYXAiLCIkbWFwR2V0IiwiJG1hcFNldCIsIiRtYXBIYXMiLCIkbWFwRGVsZXRlIiwiJG1hcFNpemUiLCIkbSIsImNoYW5uZWwiLCJhc3NlcnQiLCIkYWN0dWFsQXBwbHkiLCJjYWxsQmluZEJhc2ljIiwiJGluZGV4T2YiLCJoZXhUYWJsZSIsImFycmF5VG9PYmplY3QiLCJwbGFpbk9iamVjdHMiLCJhY2MiLCJjb21iaW5lIiwiY29tcGFjdCIsInJlZnMiLCJwb3AiLCJjb21wYWN0ZWQiLCJjb21wYWN0UXVldWUiLCJkZWNvZGUiLCJkZWZhdWx0RGVjb2RlciIsImNoYXJzZXQiLCJzdHJXaXRob3V0UGx1cyIsImRlZmF1bHRFbmNvZGVyIiwia2luZCIsIiQwIiwic2VnbWVudCIsIm1heWJlTWFwIiwibWFwcGVkIiwiYWxsb3dQcm90b3R5cGVzIiwibWVyZ2VUYXJnZXQiLCJ0YXJnZXRJdGVtIiwibW9tZW50Iiwic3ltYm9sTWFwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjAiLCJudW1iZXJNYXAiLCJwbHVyYWxGb3JtIiwicGx1cmFscyIsInBsdXJhbGl6ZSIsIndlZWtkYXlzUGFyc2VFeGFjdCIsInN1ZmZpeGVzIiwiNzAiLCI4MCIsIjIwIiwiNTAiLCIxMDAiLCIzMCIsIjYwIiwiOTAiLCJyZWxhdGl2ZVRpbWVXaXRoUGx1cmFsIiwiZm9ybXMiLCJzdGFuZGFsb25lIiwibGFzdERpZ2l0IiwibGFzdDJEaWdpdHMiLCJtb250aHNQYXJzZUV4YWN0IiwicmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uIiwibXV0YXRpb25UYWJsZSIsInNvZnRNdXRhdGlvbiIsIm11dGF0aW9uIiwibWluV2Vla2RheXNQYXJzZSIsImZ1bGxXZWVrZGF5c1BhcnNlIiwic2hvcnRXZWVrZGF5c1BhcnNlIiwibW9udGhzU3RyaWN0UmVnZXgiLCJtb250aHNTaG9ydFN0cmljdFJlZ2V4IiwibG9uZ01vbnRoc1BhcnNlIiwic2hvcnRNb250aHNQYXJzZSIsImxhc3ROdW1iZXIiLCJ0cmFuc2xhdGUiLCJsbCIsImxsbCIsImxsbGwiLCJwbHVyYWwiLCJwcm9jZXNzUmVsYXRpdmVUaW1lIiwibW9udGhzTm9taW5hdGl2ZUVsIiwibW9udGhzR2VuaXRpdmVFbCIsIm1vbWVudFRvRm9ybWF0IiwiX21vbnRoc0dlbml0aXZlRWwiLCJfbW9udGhzTm9taW5hdGl2ZUVsIiwiY2FsZW5kYXJFbCIsIl9jYWxlbmRhckVsIiwibW9udGhzU2hvcnREb3QiLCJudW1iZXJzUGFzdCIsIm51bWJlcnNGdXR1cmUiLCJ2ZXJiYWxOdW1iZXIiLCJtb250aHNTaG9ydFdpdGhEb3RzIiwibW9udGhzU2hvcnRXaXRob3V0RG90cyIsIndlZWtFbmRpbmdzIiwiZXJhWWVhck9yZGluYWxSZWdleCIsIiQxIiwiJDIiLCI0MCIsImlzVXBwZXIiLCJpbmNsdWRlcyIsImV6YWZlTnVtU3VmZml4IiwiZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyIiwidHJhbnNsYXRlU2luZ3VsYXIiLCJzcGVjaWFsIiwicmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyIiwidHJhbnNsYXRvciIsIndvcmRzIiwiY29ycmVjdEdyYW1tYXRpY2FsQ2FzZSIsIndvcmRLZXkiLCJyZWxhdGl2ZVRpbWVNciIsIm1vbnRoc05vbWluYXRpdmUiLCJtb250aHNTdWJqZWN0aXZlIiwid29yZCIsIm51bWJlcnNOb3VucyIsIm51bWJlck5vdW4iLCJodW5kcmVkIiwidGVuIiwib25lIiwibnVtYmVyQXNOb3VuIiwicHJvY2Vzc0hvdXJzRnVuY3Rpb24iLCJub21pbmF0aXZlIiwiYWNjdXNhdGl2ZSIsImdlbml0aXZlIiwibm9ybWFsaXplQXJyYXkiLCJhbGxvd0Fib3ZlUm9vdCIsInVwIiwidW5zaGlmdCIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJwYXRoIiwibm9ybWFsaXplIiwiaXNBYnNvbHV0ZSIsInRyYWlsaW5nU2xhc2giLCJwYXRocyIsInJlbGF0aXZlIiwiZnJvbVBhcnRzIiwidG9QYXJ0cyIsInNhbWVQYXJ0c0xlbmd0aCIsIm91dHB1dFBhcnRzIiwic2VwIiwiZGVsaW1pdGVyIiwiZGlybmFtZSIsImhhc1Jvb3QiLCJtYXRjaGVkU2xhc2giLCJiYXNlbmFtZSIsImV4dCIsImV4dG5hbWUiLCJzdGFydERvdCIsInN0YXJ0UGFydCIsInByZURvdFN0YXRlIiwiZ2ZtIiwiY29tbW9ubWFyayIsImZvb3Rub3RlcyIsInBlZGFudGljIiwiYmxvY2tzIiwic3RvcHMiLCJvcGVuVGFnIiwiY2xvc2VUYWciLCJvcGVuQ2xvc2VUYWciLCJmcm9tSW5kZXgiLCJsaW5rIiwiaW1hZ2UiLCJfZGVmaW5lUHJvcGVydGllcyIsImFzc2VydFRoaXNJbml0aWFsaXplZCIsInRvU2hlZXQiLCJibG9jayIsImF0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJXZWJraXRMaW5lQ2xhbXAiLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJBYm9ydEVycm9yIiwic3VwZXIiLCJjdXJyZW50VGljayIsImFjdGl2ZUNvdW50Iiwic3RyaWN0VGlja3MiLCJnZXREZWxheSIsImVhcmxpZXN0VGltZSIsImZ1bmN0aW9uXyIsInRocm90dGxlZCIsImlzRW5hYmxlZCIsImRlbGV0ZSIsImNsZWFyIiwic2VyaWFsaXplciIsInJlcGxhY2VyIiwiY3ljbGVSZXBsYWNlciIsInRoaXNQb3MiLCJzcGFjZXMiLCJnZXRTZXJpYWxpemUiLCJ0b1N0cmluZ09iamVjdCIsIkxlZ2FjeUNhY2hlIiwiZ2V0UmVnRXhwRmxhZ3MiLCJnZXRUYWdMZWdhY3kiLCJnZXRUYWciLCJTVVBQT1JUU19TWU1CT0wiLCJnZXRTdHJpY3RQcm9wZXJ0aWVzIiwiY29weU93blByb3BlcnRpZXNTdHJpY3QiLCJjb3BpZXIiLCJjb3B5QXJyYXlCdWZmZXIiLCJhcnJheUJ1ZmZlciIsIl9zdGF0ZSIsImNvcHlNYXBMb29zZSIsImNvcHlPYmplY3RMb29zZSIsImxlbmd0aF8zIiwiY29weVByaW1pdGl2ZVdyYXBwZXIiLCJwcmltaXRpdmVPYmplY3QiLCJjb3B5U2VsZiIsImNvcHlTZXRMb29zZSIsIkRFRkFVTFRfTE9PU0VfT1BUSU9OUyIsImJsb2IiLCJkYXRhVmlldyIsIkRFRkFVTFRfU1RSSUNUX09QVElPTlMiLCJjcmVhdGVDb3BpZXIiLCJ0YWdTcGVjaWZpY0NvcGllcnMiLCJBcmd1bWVudHMiLCJVaW50NjRBcnJheSIsImdldFRhZ1NwZWNpZmljQ29waWVycyIsInRhZ1NwZWNpZmljQ29waWVyIiwiY3JlYXRlU3RyaWN0Q29waWVyIiwiY29weVN0cmljdCIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwieHRlbmQiLCJ1bmlmaWVkIiwiUHJvcFR5cGVzIiwiYWRkTGlzdE1ldGFkYXRhIiwibmFpdmVIdG1sIiwiZGlzYWxsb3dOb2RlIiwiYXN0VG9SZWFjdCIsIndyYXBUYWJsZVJvd3MiLCJnZXREZWZpbml0aW9ucyIsInVyaVRyYW5zZm9ybWVyIiwiZGVmYXVsdFJlbmRlcmVycyIsImFsbFR5cGVzIiwiUmVhY3RNYXJrZG93biIsInNyYyIsInBhcnNlck9wdGlvbnMiLCJhbGxvd2VkVHlwZXMiLCJkaXNhbGxvd2VkVHlwZXMiLCJyZW5kZXJlcnMiLCJwYXJzZXIiLCJwbHVnaW5zIiwiYXBwbHlQYXJzZXJQbHVnaW4iLCJyYXdBc3QiLCJyZW5kZXJQcm9wcyIsImRlZmluaXRpb25zIiwiYXN0UGx1Z2lucyIsInJlbW92YWxNZXRob2QiLCJ1bndyYXBEaXNhbGxvd2VkIiwib2ZUeXBlIiwiYWxsb3dOb2RlIiwiaWZOb3RNYXRjaCIsInJlbmRlckh0bWwiLCJlc2NhcGVIdG1sIiwic2tpcEh0bWwiLCJoYXNIdG1sUGFyc2VyIiwiaWRlbnRpdHkiLCJIdG1sUGFyc2VyIiwiZGV0ZXJtaW5lQXN0UGx1Z2lucyIsInRyYW5zZm9ybWVkQXN0IiwicnVuU3luYyIsImFzdCIsInBsdWdpbiIsInNvdXJjZVBvcyIsInJhd1NvdXJjZVBvcyIsInRyYW5zZm9ybUxpbmtVcmkiLCJhcnJheU9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJsaW5rVGFyZ2V0IiwidHJhbnNmb3JtSW1hZ2VVcmkiLCJ0eXBlcyIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwicmVhY3RQcm9wc1JlZ2V4IiwiZ2V0VHlwZSIsInBheWxvYWQiLCJpc051bGwiLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiamwiLCJhc3NpZ25Qcm9wIiwiY2FycnkiLCJuZXdWYWwiLCJvcmlnaW5hbE9iamVjdCIsInByb3BUeXBlIiwibWVyZ2VSZWN1cnNpdmVseSIsIm9yaWdpbiIsIm5ld0NvbWVyIiwiZXh0ZW5zaW9ucyIsIm5ld09iamVjdCIsInRhcmdldFZhbCIsIm5ld0NvbWVycyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJ1cGRhdGVyIiwiSCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImN1cnJlbnQiLCJLIiwiX19zZWxmIiwiX19zb3VyY2UiLCJfb3duZXIiLCJQIiwia2V5UHJlZml4IiwiYWEiLCJYIiwiWSIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsImNvbXBhcmUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzTWVtbyIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJyZWdlbmVyYXRvckFzeW5jIiwicmVnZW5lcmF0b3JBc3luY0dlbiIsInJlZ2VuZXJhdG9yS2V5cyIsInJlZ2VuZXJhdG9yVmFsdWVzIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsInN0b3AiLCJhYnJ1cHQiLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsImZpbmlzaCIsIl90Iiwic2VudCIsIndyYXAiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJjaGFpbiIsImludGVyY2VwdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJoYW5kbGVycyIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImZucyIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiaWdub3JlRHVwbGljYXRlT2YiLCJvcmlnaW5VUkwiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNlYXJjaCIsImhhc2giLCJwYXRobmFtZSIsImxvY2F0aW9uIiwicmVxdWVzdFVSTCIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJnZXRTaWRlQ2hhbm5lbCIsImFycmF5UHJlZml4R2VuZXJhdG9ycyIsImJyYWNrZXRzIiwiY29tbWEiLCJpbmRpY2VzIiwicmVwZWF0IiwicHVzaFRvQXJyYXkiLCJ2YWx1ZU9yQXJyYXkiLCJ0b0lTTyIsImFkZFF1ZXJ5UHJlZml4IiwiYWxsb3dEb3RzIiwiYWxsb3dFbXB0eUFycmF5cyIsImFycmF5Rm9ybWF0IiwiY2hhcnNldFNlbnRpbmVsIiwiY29tbWFSb3VuZFRyaXAiLCJlbmNvZGVEb3RJbktleXMiLCJlbmNvZGVyIiwiZW5jb2RlVmFsdWVzT25seSIsImZvcm1hdHRlciIsInNlcmlhbGl6ZURhdGUiLCJza2lwTnVsbHMiLCJzdHJpY3ROdWxsSGFuZGxpbmciLCJzZW50aW5lbCIsImdlbmVyYXRlQXJyYXlQcmVmaXgiLCJzaWRlQ2hhbm5lbCIsInRtcFNjIiwiZmluZEZsYWciLCJSYW5nZUVycm9yIiwib2JqS2V5cyIsImVuY29kZWRQcmVmaXgiLCJhZGp1c3RlZFByZWZpeCIsImVuY29kZWRLZXkiLCJ2YWx1ZVNpZGVDaGFubmVsIiwibm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyIsImpvaW5lZCIsImdldFNpZGVDaGFubmVsTGlzdCIsImdldFNpZGVDaGFubmVsTWFwIiwibWFrZUNoYW5uZWwiLCIkY2hhbm5lbERhdGEiLCJsaXN0R2V0Tm9kZSIsImxpc3QiLCJpc0RlbGV0ZSIsImN1cnIiLCIkbyIsInJvb3QiLCJkZWxldGVkTm9kZSIsIm9iamVjdHMiLCJsaXN0RGVsZXRlIiwibGlzdEdldCIsImxpc3RIYXMiLCJsaXN0U2V0IiwiRXZhbEVycm9yIiwiU3ludGF4RXJyb3IiLCJVUklFcnJvciIsIiRpc05hTiIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwic3ltT2JqIiwicmVmbGVjdEdldFByb3RvIiwib3JpZ2luYWxHZXRQcm90byIsImdldER1bmRlclByb3RvIiwiaGFzUHJvdG9BY2Nlc3NvciIsImNhbGxCaW5kIiwiZ09QRCIsIiRnZXRQcm90b3R5cGVPZiIsIkVSUk9SX01FU1NBR0UiLCJjb25jYXR0eSIsInNsaWN5IiwiYXJyTGlrZSIsImpvaW55Iiwiam9pbmVyIiwiYm91bmQiLCJiaW5kZXIiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsIkVtcHR5IiwiJHJlZmxlY3RBcHBseSIsIiRoYXNPd24iLCIkV2Vha01hcCIsIiR3ZWFrTWFwR2V0IiwiJHdlYWtNYXBTZXQiLCIkd2Vha01hcEhhcyIsIiR3ZWFrTWFwRGVsZXRlIiwiJHdtIiwiYWxsb3dTcGFyc2UiLCJhcnJheUxpbWl0IiwiZGVjb2RlRG90SW5LZXlzIiwiZGVjb2RlciIsImR1cGxpY2F0ZXMiLCJpZ25vcmVRdWVyeVByZWZpeCIsImludGVycHJldE51bWVyaWNFbnRpdGllcyIsInBhcmFtZXRlckxpbWl0IiwicGFyc2VBcnJheXMiLCJzdHJpY3REZXB0aCIsInRocm93T25MaW1pdEV4Y2VlZGVkIiwibnVtYmVyU3RyIiwicGFyc2VBcnJheVZhbHVlIiwiY3VycmVudEFycmF5TGVuZ3RoIiwicGFyc2VLZXlzIiwiZ2l2ZW5LZXkiLCJ2YWx1ZXNQYXJzZWQiLCJjaGlsZCIsInBhcmVudEtleSIsImxlYWYiLCJjbGVhblJvb3QiLCJkZWNvZGVkUm9vdCIsInBhcnNlT2JqZWN0Iiwibm9ybWFsaXplUGFyc2VPcHRpb25zIiwidGVtcE9iaiIsImNsZWFuU3RyIiwic2tpcEluZGV4IiwiYnJhY2tldEVxdWFsc1BvcyIsImVuY29kZWRWYWwiLCJleGlzdGluZyIsInBhcnNlVmFsdWVzIiwibmV3T2JqIiwid2VicGFja1BvbHlmaWxsIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJhcnJheUxpa2VUb0FycmF5IiwiYmFpbCIsInZmaWxlIiwidHJvdWdoIiwicGxhaW4iLCJhdHRhY2hlcnMiLCJ0cmFuc2Zvcm1lcnMiLCJuYW1lc3BhY2UiLCJmcm96ZW4iLCJmcmVlemVJbmRleCIsInByb2Nlc3NvciIsImFzc2VydFVuZnJvemVuIiwiYWRkUGx1Z2luIiwiYWRkTGlzdCIsImFkZFByZXNldCIsImVudHJ5IiwiZmluZCIsImRvYyIsIlBhcnNlciIsImZpbGUiLCJhc3NlcnRQYXJzZXIiLCJuZXdhYmxlIiwiQ29tcGlsZXIiLCJhc3NlcnRDb21waWxlciIsImFzc2VydE5vZGUiLCJjb21waWxlIiwiY29tcGxldGUiLCJhc3NlcnREb25lIiwicHJvY2Vzc1N5bmMiLCJkZXN0aW5hdGlvbiIsInRyYW5zZm9ybWVyIiwiY2IiLCJwaXBlbGluZSIsImNvbnRlbnRzIiwiYXN5bmNOYW1lIiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwic2V0UHJvcGVydHkiLCJuZXdWYWx1ZSIsImdldFByb3BlcnR5IiwiY29weUlzQXJyYXkiLCJkZWVwIiwiVk1lc3NhZ2UiLCJWRmlsZSIsImZpbGVQYXRoIiwiZmF0YWwiLCJpbmZvIiwiZmFpbCIsIlZNZXNzYWdlUHJvdG90eXBlIiwicmFuZ2UiLCJwYXJzZU9yaWdpbiIsInJ1bGVJZCIsInBvaW50IiwiZW5jb2RpbmciLCJoaXN0b3J5IiwiYXNzZXJ0UGFydCIsImFzc2VydE5vbkVtcHR5IiwiYXNzZXJ0UGF0aCIsInN0ZW0iLCJucGF0aCIsIm5GaWxlTmFtZSIsInJlYWRGbG9hdExFIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwibWlkZGxld2FyZSIsImludm9rZWQiLCJ1bmhlcml0IiwiTG9jYWwiLCJTdXBlciIsIk9mIiwiRnJvbSIsInBhcmFtZXRlcnMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJ0b2dnbGUiLCJ2ZmlsZUxvY2F0aW9uIiwidG9rZW5pemVyIiwic2V0T3B0aW9ucyIsImluTGlzdCIsImluQmxvY2siLCJpbkxpbmsiLCJhdFN0YXJ0IiwidG9PZmZzZXQiLCJleGl0U3RhcnQiLCJlbnRlckxpc3QiLCJlbnRlckxpbmsiLCJlbnRlckJsb2NrIiwiaW50ZXJydXB0UGFyYWdyYXBoIiwiaW50ZXJydXB0TGlzdCIsImludGVycnVwdEJsb2NrcXVvdGUiLCJibG9ja1Rva2VuaXplcnMiLCJuZXdsaW5lIiwiaW5kZW50ZWRDb2RlIiwiZmVuY2VkQ29kZSIsImJsb2NrcXVvdGUiLCJhdHhIZWFkaW5nIiwidGhlbWF0aWNCcmVhayIsInNldGV4dEhlYWRpbmciLCJodG1sIiwiZm9vdG5vdGUiLCJkZWZpbml0aW9uIiwidGFibGUiLCJwYXJhZ3JhcGgiLCJpbmxpbmVUb2tlbml6ZXJzIiwiYXV0b0xpbmsiLCJzdHJvbmciLCJlbXBoYXNpcyIsImRlbGV0aW9uIiwiYnJlYWsiLCJibG9ja01ldGhvZHMiLCJpbmxpbmVNZXRob2RzIiwidG9rZW5pemVCbG9jayIsInRva2VuaXplSW5saW5lIiwidG9rZW5pemVGYWN0b3J5Iiwib2Zmc2V0VG9Qb3NpdGlvbkZhY3RvcnkiLCJwb3NpdGlvblRvT2Zmc2V0RmFjdG9yeSIsInRvUG9zaXRpb24iLCJlbnRpdGllcyIsInJhdyIsIm9mZnNldHMiLCJoYW5kbGVyIiwiYWxwaGFiZXRpY2FsIiwiY2hhciIsImlubmVySFRNTCIsInZhbHVlTGVuZ3RoIiwibWV0aG9kcyIsImVhdCIsInVwZGF0ZVBvc2l0aW9uIiwib25seUF0U3RhcnQiLCJub3RJbkxpc3QiLCJub3RJbkJsb2NrIiwibm90SW5MaW5rIiwiZW9mIiwic3VidmFsdWUiLCJQb3NpdGlvbiIsImJlZm9yZSIsImluZGVudGF0aW9uIiwiZ2V0T2Zmc2V0IiwiY29tYmluZWQiLCJ2YWxpZGF0ZUVhdCIsIk1FUkdFQUJMRV9OT0RFUyIsIm1lcmdlYWJsZSIsImVzY2FwZXMiLCJyZW1vdmVQb3NpdGlvbiIsIkVYUFJFU1NJT05fTElORV9CUkVBS1MiLCJoYXJkIiwic29mdCIsImZvcmNlIiwiY29udmVydCIsImlzIiwic3VicmVzdWx0IiwidG9SZXN1bHQiLCJ0eXBlRmFjdG9yeSIsIm9rIiwiYW55RmFjdG9yeSIsIm1hdGNoZXNGYWN0b3J5IiwiY2hlY2tzIiwicmVzdWx0cyIsImNvbnZlcnRBbGwiLCJ3aGl0ZXNwYWNlIiwic2lsZW50IiwiYmxhbmtRdWV1ZSIsInN1YnZhbHVlUXVldWUiLCJjb250ZW50UXVldWUiLCJDT0RFX0lOREVOVCIsImZlbmNlQ291bnQiLCJmbGFnIiwiZXhkZW50ZWRDb250ZW50IiwiY2xvc2luZyIsImV4ZGVudGVkQ2xvc2luZyIsImludGVycnVwdCIsInJlc3QiLCJuZXh0SW5kZXgiLCJzdGFydEluZGV4IiwicHJlZml4ZWQiLCJleGl0IiwiY3VycmVudExpbmUiLCJpbmRlbnRzIiwibWFya2VyQ291bnQiLCJyZW1vdmVJbmRlbnQiLCJvcmRlcmVkIiwiY3VycmVudE1hcmtlciIsInByZXZFbXB0eSIsIml0ZW1zIiwiYWxsTGluZXMiLCJlbXB0eUxpbmVzIiwiZW50ZXJUb3AiLCJleGl0QmxvY2txdW90ZSIsImlzTG9vc2UiLCJpbmRlbnRlZCIsImludGVydXB0b3JzIiwiTElTVF9PUkRFUkVEX0NPTU1PTk1BUktfTUFSS0VSUyIsIkxJU1RfT1JERVJFRF9NQVJLRVJTIiwiTElTVF9VTk9SREVSRURfTUFSS0VSUyIsIlRBQl9TSVpFIiwidHJhaWwiLCJsb29zZSIsImxpc3RJdGVtIiwiRVhQUkVTU0lPTl9MT09TRV9MSVNUX0lURU0iLCJFWFBSRVNTSU9OX1RBU0tfSVRFTSIsIkVYUFJFU1NJT05fQlVMTEVUIiwiRVhQUkVTU0lPTl9QRURBTlRJQ19CVUxMRVQiLCJFWFBSRVNTSU9OX0lOSVRJQUxfSU5ERU5UIiwidGFzayIsInBlZGFudGljTGlzdEl0ZW0iLCJub3JtYWxMaXN0SXRlbSIsImNoZWNrZWQiLCJidWxsZXQiLCJ0cmltbWVkTGluZXMiLCIkMyIsIiQ0IiwibWF4aW11bSIsInBhZGRpbmciLCJtaW5JbmRlbnQiLCJtYXRyaXgiLCJTRVRFWFRfTUFSS0VSUyIsInNlcXVlbmNlIiwic2VxdWVuY2VzIiwiZm9vdG5vdGVEZWZpbml0aW9uIiwiRVhQUkVTU0lPTl9JTklUSUFMX1RBQiIsInN1YnF1ZXVlIiwiaWRlbnRpZmllciIsIkNfQlJBQ0tFVF9PUEVOIiwiYmVmb3JlVVJMIiwiYmVmb3JlVGl0bGUiLCJpc0VuY2xvc2VkVVJMQ2hhcmFjdGVyIiwiaXNVbmNsb3NlZFVSTENoYXJhY3RlciIsImFsaWdubWVudHMiLCJhbGlnbm1lbnQiLCJyb3ciLCJoYXNEYXNoIiwiYWxpZ24iLCJjZWxsIiwicHJlYW1ibGUiLCJvcGVuaW5nIiwibGluZUNvdW50Iiwicm93cyIsImxpbmVJbmRleCIsInBpcGVJbmRleCIsInRyaW1UcmFpbGluZ0xpbmVzIiwibG9jYXRlIiwibG9jYXRvciIsIk1BSUxUT19MRU5HVEgiLCJoYXNBdENoYXJhY3RlciIsIlBST1RPQ09MUyIsIlBST1RPQ09MU19MRU5HVEgiLCJwYXJlbkNvdW50IiwibmV4dENoYXJhY3RlciIsImlubGluZUhUTUwiLCJFWFBSRVNTSU9OX0hUTUxfTElOS19PUEVOIiwiRVhQUkVTU0lPTl9IVE1MX0xJTktfQ0xPU0UiLCJMSU5LX01BUktFUlMiLCJDT01NT05NQVJLX0xJTktfTUFSS0VSUyIsImNsb3NlZCIsImhhc01hcmtlciIsImlzSW1hZ2UiLCJhbHQiLCJicmFja2V0ZWQiLCJpbnRybyIsInJlZmVyZW5jZVR5cGUiLCJhc3RlcmlzayIsInVuZGVyc2NvcmUiLCJzdHJpa2V0aHJvdWdoIiwicHJldmlvdXMiLCJwcmVjZWRpbmciLCJpbmxpbmVDb2RlIiwib3BlbmluZ0NvdW50IiwiZm91bmQiLCJ0aWNrUXVldWUiLCJoYXJkQnJlYWsiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJpZ2ludCIsImFueSIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsInZpc2l0V2l0aFBhcmVudHMiLCJsaXN0Tm9kZSIsInNlbGZDbG9zaW5nUmUiLCJzaW1wbGVUYWdSZSIsImN1cnJlbnRQYXJlbnQiLCJzZWxmQ2xvc2luZyIsImdldFNlbGZDbG9zaW5nIiwiZ2V0U2ltcGxlVGFnIiwibWF0Y2hpbmciLCJtYXRjaGluZ1RhZyIsImZpbmRBbmRQdWxsIiwiZnJvbU5vZGUiLCJ0b05vZGUiLCJ0b0luZGV4IiwidmlydHVhbCIsInVudGFuZ2xlIiwiZGlzYWxsb3ciLCJSZWFjdCIsIlJlYWN0SXMiLCJkZWZhdWx0Tm9kZVBvc2l0aW9uIiwicmVuZGVyZXIiLCJub2RlUHJvcHMiLCJnZXROb2RlUHJvcHMiLCJyZXNvbHZlQ2hpbGRyZW4iLCJjaGlsZE5vZGUiLCJpc1RhZ1JlbmRlcmVyIiwic291cmNlUG9zaXRpb24iLCJpbmNsdWRlTm9kZUluZGV4IiwicGFyZW50Q2hpbGRDb3VudCIsImFzc2lnbkRlZmluZWQiLCJub2RlS2V5IiwidGlnaHQiLCJ1bndyYXBQYXJhZ3JhcGhzIiwiZ2V0TGlzdEl0ZW1DaGlsZHJlbiIsImxhbmd1YWdlIiwiaW5saW5lIiwiY29sdW1uQWxpZ25tZW50IiwiaXNIZWFkZXIiLCJpc0Jsb2NrIiwicGFyc2VkQ2hpbGRyZW4iLCJtZXJnZU5vZGVDaGlsZHJlbiIsImRlZnMiLCJwcm90b2NvbHMiLCJ1cmkiLCJjb2xvbiIsInN1cHBvcnRzU3RyaW5nUmVuZGVyIiwiU2ltcGxlUmVuZGVyZXIiLCJnZXRDb3JlUHJvcHMiLCJsaW5rUmVmZXJlbmNlIiwiaW1hZ2VSZWZlcmVuY2UiLCJ0YWJsZUhlYWQiLCJ0YWJsZUJvZHkiLCJ0YWJsZVJvdyIsInRhYmxlQ2VsbCIsInRleHRBbGlnbiIsImNvcmVQcm9wcyIsInVzZUZyYWdtZW50IiwiY2hlY2tib3giLCJyZWFkT25seSIsImhlYWRpbmciLCJjb21wIiwidmlydHVhbEh0bWwiLCJwYXJzZWRIdG1sIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJwYSIsInFhIiwicmEiLCJzYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwidGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInVhIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJkZXBlbmRlbmNpZXMiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiWGEiLCJTYSIsIlRhIiwiUmEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwicGIiLCJxYiIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwicmIiLCJzYiIsInhiIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiemIiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFiIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiZmlyc3RDaGlsZCIsIlJiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsInNpYmxpbmciLCJnYyIsImljIiwiamMiLCJrYyIsImxjIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwibWMiLCJuYyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsInJjIiwiZXZlbnRTeXN0ZW1GbGFncyIsInNjIiwiY29udGFpbmVySW5mbyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiS2MiLCJibG9ja2VkT24iLCJjb250YWluZXIiLCJMYyIsInBvaW50ZXJJZCIsIk1jIiwiTmMiLCJQYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiT2MiLCJqZCIsImdyaWRBcmVhIiwibGluZUNsYW1wIiwia2QiLCJsZCIsIm1kIiwibmQiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIm9kIiwicGQiLCJxZCIsInJkIiwic2QiLCJ0ZCIsImJvZHkiLCJ1ZCIsInZkIiwieGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJ5ZCIsImNvbnRlbnRFZGl0YWJsZSIsIkRkIiwiRWQiLCJGZCIsImF1dG9Gb2N1cyIsIkdkIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJwcmV2aW91c1NpYmxpbmciLCJMZCIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJkaXNwYXRjaENvbmZpZyIsIlVkIiwiX3RhcmdldEluc3QiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImNlIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsImhlIiwiaWUiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm5lIiwib2UiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwia2V5Q29kZSIsImRldGFpbCIsInNlIiwid2hpY2giLCJ0ZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwidWUiLCJjb2xvciIsImRhdGV0aW1lIiwiZW1haWwiLCJ0ZWwiLCJjaGFuZ2UiLCJGZSIsImRldGFjaEV2ZW50IiwiYXR0YWNoRXZlbnQiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiTmUiLCJ2aWV3IiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImdldE1vZGlmaWVyU3RhdGUiLCJTZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiV2UiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJrZiIsIm9uU2VsZWN0IiwibGYiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwibWYiLCJjbGlwYm9hcmREYXRhIiwibmYiLCJvZiIsImNoYXJDb2RlIiwicGYiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwicWYiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsImdldENoaWxkQ29udGV4dCIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlBmIiwiUWYiLCJSZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiU2YiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJUZiIsIlVmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJjb250ZXh0VHlwZSIsIk1nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIk9nIiwiUGciLCJfc3RyaW5nUmVmIiwiUWciLCJSZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJTZyIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJpaCIsInJlc3BvbmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJtaSIsInJpIiwic2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkZpIiwiRWkiLCJHaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiSGkiLCJJaSIsIkppIiwiZm9jdXMiLCJLaSIsIkxpIiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsImRpc3BsYXkiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjaiIsImRqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwidGltZW91dE1zIiwieGoiLCJ5aiIsInpqIiwibGFzdEV4cGlyZWRUaW1lIiwiQWoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsImxhc3RTdXNwZW5kZWRUaW1lIiwiSWoiLCJ0aW1lb3V0SGFuZGxlIiwiSmoiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwiS2oiLCJNaiIsIk5qIiwicGluZ0NhY2hlIiwiT2oiLCJ1YiIsIlBqIiwiWGMiLCJRaiIsIlNqIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIndiIiwiYWN0aXZlRWxlbWVudERldGFjaGVkIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIlRqIiwid2QiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsInZiIiwiVWoiLCJWaiIsIldqIiwiaGlkZGVuIiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJmb3JtIiwiTGoiLCJsayIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJZaiIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJOYXYiLCJkaXYiLCJwYWxldHRlIiwiY2xhc3MiLCJzZWN0aW9uIiwidG90YWxQYWdlcyIsInJwcCIsIl9yZWYkYmFzZVBhdGgiLCJtaXhpblN0cmluZ2lmeVNhZmUiLCJsaW5rVHlwZSIsImNpcmN1bGFyIiwic2xpY2VJdGVyYXRvciIsIlVOUkVTT0xWRURfTElOSyIsImxvb2t1cEluRW50aXR5TWFwIiwiZW50aXR5TWFwIiwibGlua0RhdGEiLCJlbnRyeUlkIiwic3BhY2VJZCIsImVudmlyb25tZW50SWQiLCJnZXRSZXNvbHZlZExpbmsiLCJfbGluayRzeXMiLCJzdGFydHNXaXRoIiwiX2dldElkc0Zyb21Vcm4iLCJ1cm4iLCJfdXJuJG1hdGNoIiwiX3VybiRtYXRjaDIiLCJfdXJuJG1hdGNoMiQiLCJnZXRJZHNGcm9tVXJuIiwiX2VudHJ5SWQiLCJleHRyYWN0ZWRMaW5rVHlwZSIsIndhbGtNdXRhdGUiLCJwcmVkaWNhdGUiLCJtdXRhdG9yIiwicmVtb3ZlVW5yZXNvbHZlZCIsImNsZWFuVXBMaW5rcyIsInJlc3BvbnNlQ2xvbmUiLCJhbGxJbmNsdWRlcyIsImFsbEVudHJpZXMiLCJlbnZpcm9ubWVudCIsImVudHJ5T2JqZWN0IiwiaXRlbUVudHJ5UG9pbnRzIiwib3duS2V5IiwiZW50cnlPYmoiLCJlbnRyeVBvaW50IiwibWFrZUVudHJ5T2JqZWN0IiwiaXNSZXNvdXJjZUxpbmsiLCJyZXNvbHZlZExpbmsiLCJub3JtYWxpemVMaW5rIiwid3JhcHBlZERhdGEiLCJ3cmFwTG9jYWxlIiwiYXNzZXQiLCJjb250ZW50VHlwZSIsIl9vYmplY3RTcHJlYWQiLCJwYWdlZFN5bmMiLCJodHRwIiwiaW5pdGlhbCIsIm5leHRTeW5jVG9rZW4iLCJuZXh0UGFnZVRva2VuIiwiY29udGVudF90eXBlIiwiZGVmYXVsdE9wdGlvbnMiLCJwYWdpbmF0ZSIsIl9kZWZhdWx0T3B0aW9ucyRvcHRpbyIsInN5bmNPcHRpb25zIiwiZ2V0U3luY1BhZ2UiLCJtYXBwZWRSZXNwb25zZUl0ZW1zIiwibWFwUmVzcG9uc2VJdGVtcyIsInJlZHVjZXIiLCJhY2N1bXVsYXRlZCIsImFzc2V0cyIsImRlbGV0ZWRFbnRyaWVzIiwiZGVsZXRlZEFzc2V0cyIsInN5bmNfdG9rZW4iLCJuZXh0UGFnZVVybCIsIm5leHRTeW5jVXJsIiwidXJsUGFydHMiLCJub3JtYWxpemVTZWxlY3QiLCJhbGxTZWxlY3RzIiwic2VsZWN0ZWRTZXQiLCJjcmVhdGVDb250ZW50ZnVsQXBpIiwiZ2V0R2xvYmFsT3B0aW9ucyIsIndyYXBTcGFjZSIsIl9lbnRpdGllcyRjb250ZW50VHlwZSIsIndyYXBDb250ZW50VHlwZSIsIndyYXBDb250ZW50VHlwZUNvbGxlY3Rpb24iLCJfZW50aXRpZXMkZW50cnkiLCJ3cmFwRW50cnkiLCJ3cmFwRW50cnlDb2xsZWN0aW9uIiwiX2VudGl0aWVzJGFzc2V0Iiwid3JhcEFzc2V0Iiwid3JhcEFzc2V0Q29sbGVjdGlvbiIsIndyYXBMb2NhbGVDb2xsZWN0aW9uIiwibm90Rm91bmRFcnJvciIsImRldGFpbHMiLCJlcnJvckhhbmRsZXIiLCJzd2l0Y2hUb0Vudmlyb25tZW50IiwiZW52aXJvbm1lbnRCYXNlVXJsIiwiZ2V0U3BhY2UiLCJzcGFjZUJhc2VVcmwiLCJzd2l0Y2hUb1NwYWNlIiwiZ2V0Q29udGVudFR5cGUiLCJnZXRDb250ZW50VHlwZXMiLCJnZXRFbnRyeSIsImdldEVudHJpZXMiLCJfZ2V0R2xvYmFsT3B0aW9ucyIsImdldEFzc2V0IiwiZ2V0QXNzZXRzIiwiZ2V0TG9jYWxlcyIsInBhcnNlRW50cmllcyIsIl9nZXRHbG9iYWxPcHRpb25zMyIsInN5bmMiLCJfZ2V0R2xvYmFsT3B0aW9uczIiLCJjbGllbnQiLCJ1c2VyQWdlbnRIZWFkZXIiLCJnbG9iYWxTZXR0aW5ncyIsIl9oZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsIl9oZWFkZXIiLCJvYnNjdXJlQXV0aFRva2VuSW5SZXNwb25zZSIsImNyZWF0ZUNsaWVudCIsIkJsb2dDb250ZXh0IiwiQmxvZ1Byb3ZpZGVyIiwiX3VzZVN0YXRlIiwiZW50cnlMaXN0IiwicGFnZSIsIl91c2VTdGF0ZTIiLCJ1c2VCbG9nIiwiX3VzZUNvbnRleHQiLCJfdXNlQ29udGV4dDIiLCJzZXRQYWdlIiwic2V0RW50cnkiLCJCbG9nIiwic2VhcmNoUGFyYW1zIiwiRW50cnlMaXN0IiwiX3VzZUJsb2ciLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX2NhbGxlZSIsInNraXAiLCJmZXRjaERhdGEiLCJmaWVsZHMiLCJzbHVnIiwiY3JlYXRlZEF0IiwidGh1bWIiLCJQYWdpbmF0b3IiLCJQb3N0IiwiQmxvZ1Bvc3QiLCJtZXRhZGF0YSIsIlRhZyIsIlNlbGVjdGVkVGFnIiwiRGV2IiwiSG9tZSIsIkhvbWVQYWdlIiwiTWFpbiIsIk1haW5Db250YWluZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY2FsbFN1cGVyIiwiX2NyZWF0ZUNsYXNzIiwicGFyc2VkVXJsIiwiX3BhcnNlVXJsIiwiVVJMIiwidGFnT3JQb3N0SWQiLCJtaWRkbGUiLCJXb3JrIiwiTmF2aWdhdGlvbiIsIndyYXBwZXIiLCJnZXRFbGVtZW50QnlJZCIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFT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Q1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsV0FBWSxJQUNaLGNBQWUsSUFDZixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLFdBQVksSUFDWixjQUFlLElBQ2YsVUFBVyxJQUNYLGFBQWMsSUFDZCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFlBQWEsSUFDYixlQUFnQixJQUNoQixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLFFBQVMsSUFDVCxXQUFZLElBQ1osT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsVUFBVyxJQUNYLGFBQWMsSUFDZCxRQUFTLElBQ1QsV0FBWSxJQUNaLE9BQVEsSUFDUixVQUFXLElBQ1gsUUFBUyxJQUNULFdBQVksSUFDWixRQUFTLElBQ1QsYUFBYyxJQUNkLGdCQUFpQixJQUNqQixXQUFZLElBQ1osVUFBVyxJQUNYLGFBQWMsSUFDZCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFlBQWEsSUFDYixlQUFnQixJQUNoQixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxhQUFjLElBQ2QsZ0JBQWlCLElBQ2pCLE9BQVEsSUFDUixVQUFXLElBQ1gsVUFBVyxJQUNYLGFBQWMsSUFDZCxVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxhQUFjLElBQ2QsVUFBVyxJQUNYLGFBQWMsS0FJZixTQUFTbTZFLEVBQWVDLEdBQ3ZCLElBQUk1M0MsRUFBSzYzQyxFQUFzQkQsR0FDL0IsT0FBTzk5RSxFQUFvQmttQyxHQUU1QixTQUFTNjNDLEVBQXNCRCxHQUM5QixJQUFJOTlFLEVBQW9CYSxFQUFFNkMsRUFBS282RSxHQUFNLENBQ3BDLElBQUk3eEUsRUFBSSxJQUFJckQsTUFBTSx1QkFBeUJrMUUsRUFBTSxLQUVqRCxNQURBN3hFLEVBQUV5M0IsS0FBTyxtQkFDSHozQixFQUVQLE9BQU92SSxFQUFJbzZFLEdBRVpELEVBQWUvMEUsS0FBTyxXQUNyQixPQUFPaEksT0FBT2dJLEtBQUtwRixJQUVwQm02RSxFQUFlOWpELFFBQVVna0QsRUFDekI1OUUsRUFBT0QsUUFBVTI5RSxFQUNqQkEsRUFBZTMzQyxHQUFLLEssY0NwU3BCL2xDLEVBQU9ELFFBSFAsU0FBeUJnQixHQUN2QixHQUFJeUIsTUFBTUYsUUFBUXZCLEdBQUksT0FBT0EsR0FFR2YsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsY0N3QnZHQyxFQUFPRCxRQTNCUCxTQUErQmdCLEVBQUdiLEdBQ2hDLElBQUlpQixFQUFJLE1BQVFKLEVBQUksS0FBTyxvQkFBc0JDLFFBQVVELEVBQUVDLE9BQU9xMUIsV0FBYXQxQixFQUFFLGNBQ25GLEdBQUksTUFBUUksRUFBRyxDQUNiLElBQUkySyxFQUNGcEssRUFDQXpCLEVBQ0F1c0IsRUFDQTVwQixFQUFJLEdBQ0owOEIsR0FBSSxFQUNKNStCLEdBQUksRUFDTixJQUNFLEdBQUlULEdBQUtrQixFQUFJQSxFQUFFZixLQUFLVyxJQUFJd2MsS0FBTSxJQUFNcmQsRUFBRyxDQUNyQyxHQUFJUyxPQUFPUSxLQUFPQSxFQUFHLE9BQ3JCbStCLEdBQUksT0FDQyxPQUFTQSxHQUFLeHpCLEVBQUk3TCxFQUFFRyxLQUFLZSxJQUFJaTNCLFFBQVV4MUIsRUFBRWdCLEtBQUtrSSxFQUFFNUssT0FBUTBCLEVBQUVLLFNBQVcvQyxHQUFJby9CLEdBQUksSUFDcEYsTUFBT3YrQixHQUNQTCxHQUFJLEVBQUlnQixFQUFJWCxFQUNaLFFBQ0EsSUFDRSxJQUFLdStCLEdBQUssTUFBUW4rQixFQUFVLFNBQU1xckIsRUFBSXJyQixFQUFVLFNBQUtSLE9BQU82ckIsS0FBT0EsR0FBSSxPQUN2RSxRQUNBLEdBQUk5ckIsRUFBRyxNQUFNZ0IsR0FHakIsT0FBT2tCLElBRzZCNUMsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsZ0JDM0I3RyxJQUFJODlFLEVBQW1CLEVBQVEsS0FRL0I3OUUsRUFBT0QsUUFQUCxTQUFxQ2dCLEVBQUc2QixHQUN0QyxHQUFJN0IsRUFBRyxDQUNMLEdBQUksaUJBQW1CQSxFQUFHLE9BQU84OEUsRUFBaUI5OEUsRUFBRzZCLEdBQ3JELElBQUl6QixFQUFJLEdBQUdzQixTQUFTckMsS0FBS1csR0FBR3dILE1BQU0sR0FBSSxHQUN0QyxNQUFPLFdBQWFwSCxHQUFLSixFQUFFdTFCLGNBQWdCbjFCLEVBQUlKLEVBQUV1MUIsWUFBWTkxQixNQUFPLFFBQVVXLEdBQUssUUFBVUEsRUFBSXFCLE1BQU1xRSxLQUFLOUYsR0FBSyxjQUFnQkksR0FBSywyQ0FBMkNvSyxLQUFLcEssR0FBSzA4RSxFQUFpQjk4RSxFQUFHNkIsUUFBSyxJQUcxSzVDLEVBQU9ELFFBQVFzQixZQUFhLEVBQU1yQixFQUFPRCxRQUFpQixRQUFJQyxFQUFPRCxTLGNDSG5IQyxFQUFPRCxRQUxQLFNBQTJCZ0IsRUFBRzZCLElBQzNCLE1BQVFBLEdBQUtBLEVBQUk3QixFQUFFa0MsVUFBWUwsRUFBSTdCLEVBQUVrQyxRQUN0QyxJQUFLLElBQUk2SSxFQUFJLEVBQUdwSyxFQUFJYyxNQUFNSSxHQUFJa0osRUFBSWxKLEVBQUdrSixJQUFLcEssRUFBRW9LLEdBQUsvSyxFQUFFK0ssR0FDbkQsT0FBT3BLLEdBRTJCMUIsRUFBT0QsUUFBUXNCLFlBQWEsRUFBTXJCLEVBQU9ELFFBQWlCLFFBQUlDLEVBQU9ELFMsY0NGekdDLEVBQU9ELFFBSFAsV0FDRSxNQUFNLElBQUk0M0IsVUFBVSw4SUFFYTMzQixFQUFPRCxRQUFRc0IsWUFBYSxFQUFNckIsRUFBT0QsUUFBaUIsUUFBSUMsRUFBT0QsUyw2QkNBeEcsSUFBSThELEVBQVMsRUFBUSxLQUNqQmk2RSxFQUFPLEVBQVEsS0FDZkMsRUFBUSxFQUFRLEtBQ2hCQyxFQUFTLEVBQVEsS0FDakI3K0QsRUFBUyxFQUFRLEtBQ2pCOCtELEVBQVEsRUFBUSxLQUdwQmorRSxFQUFPRCxRQWtDUCxTQUFTMG9FLElBQ1AsSUFBSXlWLEVBQVksR0FDWkMsRUFBZUgsSUFDZkksRUFBWSxHQUNaQyxHQUFTLEVBQ1RDLEdBQWUsRUFxQm5CLE9BbEJBQyxFQUFVemhFLEtBb0ZWLFNBQWN0YixFQUFLTixHQUNqQixHQUFJaWUsRUFBTzNkLEdBRVQsT0FBeUIsSUFBckJhLFVBQVVZLFFBQ1p1N0UsRUFBZSxPQUFRSCxHQUV2QkQsRUFBVTU4RSxHQUFPTixFQUVWcTlFLEdBSUR0eEIsRUFBSTdzRCxLQUFLZytFLEVBQVc1OEUsSUFBUTQ4RSxFQUFVNThFLElBQVMsS0FJekQsR0FBSUEsRUFHRixPQUZBZzlFLEVBQWUsT0FBUUgsR0FDdkJELEVBQVk1OEUsRUFDTCs4RSxFQUlULE9BQU9ILEdBeEdURyxFQUFVMytDLE9BQVNBLEVBR25CMitDLEVBQVVMLFVBQVlBLEVBQ3RCSyxFQUFVdmhELElBOEdWLFNBQWE5N0IsR0FDWCxJQUFJbXFELEVBSUosR0FGQW16QixFQUFlLE1BQU9ILEdBRWxCbjlFLGNBRUcsR0FBcUIsbUJBQVZBLEVBQ2hCdTlFLEVBQVVyOEUsTUFBTSxLQUFNQyxlQUNqQixJQUFxQixpQkFBVm5CLEVBT2hCLE1BQU0sSUFBSXVILE1BQU0sK0JBQWlDdkgsRUFBUSxLQU5yRCxXQUFZQSxFQUNkdzlFLEVBQVF4OUUsR0FFUnk5RSxFQUFVejlFLEdBTVZtcUQsSUFDRit5QixFQUFVL3lCLFNBQVd4bkQsRUFBT3U2RSxFQUFVL3lCLFVBQVksR0FBSUEsSUFHeEQsT0FBT2t6QixFQUVQLFNBQVNJLEVBQVUxK0QsR0FDakJ5K0QsRUFBUXorRCxFQUFPMHBELFNBRVgxcEQsRUFBT29yQyxXQUNUQSxFQUFXeG5ELEVBQU93bkQsR0FBWSxHQUFJcHJDLEVBQU9vckMsV0FJN0MsU0FBU2pvQyxFQUFJbGlCLEdBQ1gsR0FBcUIsbUJBQVZBLEVBQ1R1OUUsRUFBVXY5RSxPQUNMLElBQXFCLGlCQUFWQSxFQU9oQixNQUFNLElBQUl1SCxNQUFNLCtCQUFpQ3ZILEVBQVEsS0FOckQsV0FBWUEsRUFDZHU5RSxFQUFVcjhFLE1BQU0sS0FBTWxCLEdBRXRCeTlFLEVBQVV6OUUsSUFPaEIsU0FBU3c5RSxFQUFRL1UsR0FDZixJQUFJMW1FLEVBQ0E0c0IsRUFFSixHQUFJODVDLGFBRUcsSUFBdUIsaUJBQVpBLEtBQXdCLFdBQVlBLEdBUXBELE1BQU0sSUFBSWxoRSxNQUFNLG9DQUFzQ2toRSxFQUFVLEtBSmhFLElBSEExbUUsRUFBUzBtRSxFQUFRMW1FLE9BQ2pCNHNCLEdBQVMsSUFFQUEsRUFBUTVzQixHQUNmbWdCLEVBQUl1bUQsRUFBUTk1QyxLQU9sQixTQUFTNHVELEVBQVV6VCxFQUFROXBFLEdBQ3pCLElBQUkwOUUsRUFBUUMsRUFBSzdULEdBRWI0VCxHQUNFWCxFQUFNVyxFQUFNLEtBQU9YLEVBQU0vOEUsS0FDM0JBLEVBQVEyQyxFQUFPKzZFLEVBQU0sR0FBSTE5RSxJQUczQjA5RSxFQUFNLEdBQUsxOUUsR0FFWGc5RSxFQUFVdDZFLEtBQUsyRSxFQUFNbkksS0FBS2lDLGNBdExoQ2s4RSxFQUFVanhCLE1BNE1WLFNBQWV3eEIsR0FDYixJQUNJQyxFQURBQyxFQUFPakIsRUFBTWUsR0FPakIsR0FKQWwvQyxJQUVBcS9DLEVBQWEsUUFEYkYsRUFBU1IsRUFBVVEsUUFHZkcsRUFBUUgsR0FDVixPQUFPLElBQUlBLEVBQU9oNEQsT0FBT2k0RCxHQUFPQSxHQUFNMXhCLFFBR3hDLE9BQU95eEIsRUFBT2g0RCxPQUFPaTRELEdBQU9BLElBdk45QlQsRUFBVWppRCxVQWlSVixTQUFtQnRELEVBQU04bEQsR0FDdkIsSUFDSUssRUFEQUgsRUFBT2pCLEVBQU1lLEdBUWpCLEdBTEFsL0MsSUFFQXcvQyxFQUFlLFlBRGZELEVBQVdaLEVBQVVZLFVBRXJCRSxFQUFXcm1ELEdBRVBrbUQsRUFBUUMsR0FDVixPQUFPLElBQUlBLEVBQVNubUQsRUFBTWdtRCxHQUFNTSxVQUdsQyxPQUFPSCxFQUFTbm1ELEVBQU1nbUQsSUE3UnhCVCxFQUFVcmlDLElBQU1BLEVBQ2hCcWlDLEVBQVV6VCxRQTJQVixTQUFpQjl4QyxFQUFNZ21ELEdBQ3JCLElBQ0kvK0QsRUFEQXMvRCxHQUFXLEVBT2YsT0FKQXJqQyxFQUFJbGpCLEVBQU1nbUQsR0FNVixTQUFjM21ELEVBQUtvdEIsR0FDakI4NUIsR0FBVyxFQUNYekIsRUFBS3psRCxHQUNMcFksRUFBU3dsQyxLQVBYKzVCLEVBQVcsVUFBVyxNQUFPRCxHQUV0QnQvRCxHQWxRVHMrRCxFQUFVM2xELFFBQVVBLEVBQ3BCMmxELEVBQVVrQixZQWdVVixTQUFxQlgsR0FDbkIsSUFDSUUsRUFEQU8sR0FBVyxFQVlmLE9BVEEzL0MsSUFDQXEvQyxFQUFhLGNBQWVWLEVBQVVRLFFBQ3RDSyxFQUFlLGNBQWViLEVBQVVZLFVBR3hDdm1ELEVBRkFvbUQsRUFBT2pCLEVBQU1lLElBUWIsU0FBY3ptRCxHQUNaa25ELEdBQVcsRUFDWHpCLEVBQUt6bEQsTUFOUG1uRCxFQUFXLGNBQWUsVUFBV0QsR0FFOUJQLEdBMVVGVCxFQUlQLFNBQVNBLElBS1AsSUFKQSxJQUFJbUIsRUFBY2pYLElBQ2R4bEUsRUFBU2k3RSxFQUFVajdFLE9BQ25CNHNCLEdBQVMsSUFFSkEsRUFBUTVzQixHQUNmeThFLEVBQVkxaUQsSUFBSTU2QixNQUFNLEtBQU04N0UsRUFBVXJ1RCxJQUt4QyxPQUZBNnZELEVBQVk1aUUsS0FBS2paLEdBQU8sRUFBTSxHQUFJdTZFLElBRTNCc0IsRUFZVCxTQUFTOS9DLElBQ1AsSUFBSS9pQixFQUNBbXVELEVBQ0E1d0MsRUFDQXVsRCxFQUVKLEdBQUl0QixFQUNGLE9BQU9FLEVBR1QsT0FBU0QsRUFBY0osRUFBVWo3RSxRQUUvQituRSxHQURBbnVELEVBQVNxaEUsRUFBVUksSUFDSCxHQUVGLE1BRUUsS0FIaEJsa0QsRUFBVXZkLEVBQU8sT0FPRCxJQUFadWQsSUFDRnZkLEVBQU8sUUFBSzdXLEdBS2EsbUJBRjNCMjVFLEVBQWMzVSxFQUFPNW9FLE1BQU1tOEUsRUFBVzFoRSxFQUFPdFUsTUFBTSxNQUdqRDQxRSxFQUFhbmhELElBQUkyaUQsSUFPckIsT0FIQXRCLEdBQVMsRUFDVEMsRUFBY24rQixJQUVQbytCLEVBc0hULFNBQVNNLEVBQUs3VCxHQUtaLElBSkEsSUFFSTRULEVBRkEzN0UsRUFBU2k3RSxFQUFVajdFLE9BQ25CNHNCLEdBQVMsSUFHSkEsRUFBUTVzQixHQUdmLElBRkEyN0UsRUFBUVYsRUFBVXJ1RCxJQUVSLEtBQU9tN0MsRUFDZixPQUFPNFQsRUF5QmIsU0FBUzFpQyxFQUFJbGpCLEVBQU1nbUQsRUFBTVksR0FTdkIsR0FSQVAsRUFBV3JtRCxHQUNYNEcsSUFFS2dnRCxHQUFzQixtQkFBVFosSUFDaEJZLEVBQUtaLEVBQ0xBLEVBQU8sT0FHSlksRUFDSCxPQUFPLElBQUlqbUQsUUFBUXc4QyxHQUtyQixTQUFTQSxFQUFTdjhDLEVBQVM0RCxHQUN6QjJnRCxFQUFhamlDLElBQUlsakIsRUFBTStrRCxFQUFNaUIsSUFFN0IsU0FBYzNtRCxFQUFLb3RCLEVBQU11NUIsR0FDdkJ2NUIsRUFBT0EsR0FBUXpzQixFQUNYWCxFQUNGbUYsRUFBT25GLEdBQ0V1QixFQUNUQSxFQUFRNnJCLEdBRVJtNkIsRUFBRyxLQUFNbjZCLEVBQU11NUIsTUFackI3SSxFQUFTLEtBQU15SixHQTZEakIsU0FBU2huRCxFQUFRa21ELEVBQUtjLEdBS3BCLEdBSkFoZ0QsSUFDQXEvQyxFQUFhLFVBQVdWLEVBQVVRLFFBQ2xDSyxFQUFlLFVBQVdiLEVBQVVZLFdBRS9CUyxFQUNILE9BQU8sSUFBSWptRCxRQUFRdzhDLEdBS3JCLFNBQVNBLEVBQVN2OEMsRUFBUzRELEdBQ3pCLElBQUl3aEQsRUFBT2pCLEVBQU1lLEdBRWpCZSxFQUFTM2pDLElBQUlxaUMsRUFBVyxDQUFDUyxLQUFNQSxJQUUvQixTQUFjM21ELEdBQ1JBLEVBQ0ZtRixFQUFPbkYsR0FDRXVCLEVBQ1RBLEVBQVFvbEQsR0FFUlksRUFBRyxLQUFNWixNQWJmN0ksRUFBUyxLQUFNeUosSUFwV0ZuWCxHQUFVN29DLFNBRTNCLElBQUlyM0IsRUFBUSxHQUFHQSxNQUNYMGtELEVBQU0sR0FBR25yRCxlQUdUKzlFLEVBQVc3QixJQUNaaGhELEtBSUgsU0FBdUJqN0IsRUFBRzByRCxHQUN4QkEsRUFBSWhJLEtBQU8xakQsRUFBRXVyRCxNQUFNRyxFQUFJdXhCLFNBSnRCaGlELEtBT0gsU0FBcUJqN0IsRUFBRzByRCxFQUFLbHdDLEdBQzNCeGIsRUFBRW02QyxJQUFJdVIsRUFBSWhJLEtBQU1nSSxFQUFJdXhCLE1BRXBCLFNBQWMzbUQsRUFBS290QixFQUFNdTVCLEdBQ25CM21ELEVBQ0Y5YSxFQUFLOGEsSUFFTG8xQixFQUFJaEksS0FBT0EsRUFDWGdJLEVBQUl1eEIsS0FBT0EsRUFDWHpoRSxXQWZIeWYsS0FvQkgsU0FBMkJqN0IsRUFBRzByRCxHQUM1QkEsRUFBSXV4QixLQUFLYyxTQUFXLzlFLEVBQUV1NkIsVUFBVW14QixFQUFJaEksS0FBTWdJLEVBQUl1eEIsU0FrWGhELFNBQVNFLEVBQVFoK0UsR0FDZixNQUF3QixtQkFBVkEsR0FJaEIsU0FBY0EsR0FDWixJQUFJTSxFQUNKLElBQUtBLEtBQU9OLEVBQ1YsT0FBTyxFQUVULE9BQU8sRUFUK0J5SCxDQUFLekgsRUFBTVcsV0FhbkQsU0FBU285RSxFQUFheitFLEVBQU11K0UsR0FDMUIsR0FBc0IsbUJBQVhBLEVBQ1QsTUFBTSxJQUFJdDJFLE1BQU0sV0FBYWpJLEVBQU8sc0JBS3hDLFNBQVM0K0UsRUFBZTUrRSxFQUFNMitFLEdBQzVCLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSTEyRSxNQUFNLFdBQWFqSSxFQUFPLHdCQUt4QyxTQUFTZytFLEVBQWVoK0UsRUFBTTY5RSxHQUM1QixHQUFJQSxFQUNGLE1BQU0sSUFBSTUxRSxNQUNSLENBQ0Usa0JBQW9CakksRUFBTywwQ0FDM0IsaUVBQ0EsZ0JBQ0FnSSxLQUFLLEtBTWIsU0FBUzYyRSxFQUFXcm1ELEdBQ2xCLElBQUtBLElBQVM3WixFQUFPNlosRUFBS0ksTUFDeEIsTUFBTSxJQUFJM3dCLE1BQU0sdUJBQXlCdXdCLEVBQU8sS0FLcEQsU0FBU3dtRCxFQUFXaC9FLEVBQU11L0UsRUFBV1IsR0FDbkMsSUFBS0EsRUFDSCxNQUFNLElBQUk5MkUsTUFDUixJQUFNakksRUFBTywwQkFBNEJ1L0UsRUFBWSxlLDZCQzVjM0QsSUFBSXY3QixFQUFTN2pELE9BQU9rQixVQUFVQyxlQUMxQnkvQyxFQUFRNWdELE9BQU9rQixVQUFVWSxTQUN6QjdCLEVBQWlCRCxPQUFPQyxlQUN4Qnc1RSxFQUFPejVFLE9BQU9tMUIseUJBRWR4ekIsRUFBVSxTQUFpQmtCLEdBQzlCLE1BQTZCLG1CQUFsQmhCLE1BQU1GLFFBQ1RFLE1BQU1GLFFBQVFrQixHQUdLLG1CQUFwQis5QyxFQUFNbmhELEtBQUtvRCxJQUdmOCtCLEVBQWdCLFNBQXVCdi9CLEdBQzFDLElBQUtBLEdBQTJCLG9CQUFwQncrQyxFQUFNbmhELEtBQUsyQyxHQUN0QixPQUFPLEVBR1IsSUFTSXZCLEVBVEF3K0UsRUFBb0J4N0IsRUFBT3BrRCxLQUFLMkMsRUFBSyxlQUNyQ2s5RSxFQUFtQmw5RSxFQUFJdXpCLGFBQWV2ekIsRUFBSXV6QixZQUFZejBCLFdBQWEyaUQsRUFBT3BrRCxLQUFLMkMsRUFBSXV6QixZQUFZejBCLFVBQVcsaUJBRTlHLEdBQUlrQixFQUFJdXpCLGNBQWdCMHBELElBQXNCQyxFQUM3QyxPQUFPLEVBTVIsSUFBS3orRSxLQUFPdUIsR0FFWixZQUFzQixJQUFSdkIsR0FBdUJnakQsRUFBT3BrRCxLQUFLMkMsRUFBS3ZCLElBSW5EMCtFLEVBQWMsU0FBcUJscUQsRUFBUW9FLEdBQzFDeDVCLEdBQW1DLGNBQWpCdzVCLEVBQVE1NUIsS0FDN0JJLEVBQWVvMUIsRUFBUW9FLEVBQVE1NUIsS0FBTSxDQUNwQ0ssWUFBWSxFQUNaMDJCLGNBQWMsRUFDZHIyQixNQUFPazVCLEVBQVErbEQsU0FDZjNvRCxVQUFVLElBR1h4QixFQUFPb0UsRUFBUTU1QixNQUFRNDVCLEVBQVErbEQsVUFLN0JDLEVBQWMsU0FBcUJyOUUsRUFBS3ZDLEdBQzNDLEdBQWEsY0FBVEEsRUFBc0IsQ0FDekIsSUFBS2drRCxFQUFPcGtELEtBQUsyQyxFQUFLdkMsR0FDckIsT0FDTSxHQUFJNDVFLEVBR1YsT0FBT0EsRUFBS3IzRSxFQUFLdkMsR0FBTVUsTUFJekIsT0FBTzZCLEVBQUl2QyxJQUdaUixFQUFPRCxRQUFVLFNBQVM4RCxJQUN6QixJQUFJdTJCLEVBQVM1NUIsRUFBTTZvRSxFQUFLNXdCLEVBQU00bkMsRUFBYWg3RCxFQUN2QzJRLEVBQVMzekIsVUFBVSxHQUNuQnBDLEVBQUksRUFDSmdELEVBQVNaLFVBQVVZLE9BQ25CcTlFLEdBQU8sRUFhWCxJQVZzQixrQkFBWHRxRCxJQUNWc3FELEVBQU90cUQsRUFDUEEsRUFBUzN6QixVQUFVLElBQU0sR0FFekJwQyxFQUFJLElBRVMsTUFBVisxQixHQUFxQyxpQkFBWEEsR0FBeUMsbUJBQVhBLEtBQzNEQSxFQUFTLElBR0gvMUIsRUFBSWdELElBQVVoRCxFQUdwQixHQUFlLE9BRmZtNkIsRUFBVS8zQixVQUFVcEMsSUFJbkIsSUFBS08sS0FBUTQ1QixFQUNaaXZDLEVBQU0rVyxFQUFZcHFELEVBQVF4MUIsR0FJdEJ3MUIsS0FISnlpQixFQUFPMm5DLEVBQVlobUQsRUFBUzU1QixNQUt2QjgvRSxHQUFRN25DLElBQVNuVyxFQUFjbVcsS0FBVTRuQyxFQUFjLzlFLEVBQVFtMkMsTUFDOUQ0bkMsR0FDSEEsR0FBYyxFQUNkaDdELEVBQVFna0QsR0FBTy9tRSxFQUFRK21FLEdBQU9BLEVBQU0sSUFFcENoa0QsRUFBUWdrRCxHQUFPL21DLEVBQWMrbUMsR0FBT0EsRUFBTSxHQUkzQzZXLEVBQVlscUQsRUFBUSxDQUFFeDFCLEtBQU1BLEVBQU0yL0UsU0FBVXQ4RSxFQUFPeThFLEVBQU1qN0QsRUFBT296QixXQUd0QyxJQUFUQSxHQUNqQnluQyxFQUFZbHFELEVBQVEsQ0FBRXgxQixLQUFNQSxFQUFNMi9FLFNBQVUxbkMsS0FRakQsT0FBT3ppQixJLDZCQ2pIUmgyQixFQUFPRCxRQUVQLFNBQWNzNEIsR0FDWixHQUFJQSxFQUNGLE1BQU1BLEksNkJDSlYsSUFBSWtvRCxFQUFXLEVBQVEsS0FDbkJDLEVBQVEsRUFBUSxLQUVwQnhnRixFQUFPRCxRQUFVeWdGLEVBRWpCLElBQUkvMUQsRUFBUSsxRCxFQUFNMytFLFVBV2xCLFNBQVM2NEIsRUFBUXF4QixFQUFRVCxFQUFVbWhCLEdBQ2pDLElBQUlnVSxFQUFXbDZFLEtBQUt3NUQsS0FDaEJybEMsRUFBVSxJQUFJNmxELEVBQVN4MEIsRUFBUVQsRUFBVW1oQixHQVc3QyxPQVRJZ1UsSUFDRi9sRCxFQUFRbDZCLEtBQU9pZ0YsRUFBVyxJQUFNL2xELEVBQVFsNkIsS0FDeENrNkIsRUFBUXNrRCxLQUFPeUIsR0FHakIvbEQsRUFBUWdtRCxPQUFRLEVBRWhCbjZFLEtBQUt1bUQsU0FBU2xwRCxLQUFLODJCLEdBRVpBLEVBdEJUalEsRUFBTWlRLFFBQVVBLEVBQ2hCalEsRUFBTWsyRCxLQW9DTixXQUNFLElBQUlqbUQsRUFBVW4wQixLQUFLbTBCLFFBQVF0NEIsTUFBTW1FLEtBQU1sRSxXQUl2QyxPQUZBcTRCLEVBQVFnbUQsTUFBUSxLQUVUaG1ELEdBeENUalEsRUFBTW0yRCxLQXlCTixXQUNFLElBQUlsbUQsRUFBVW4wQixLQUFLbTBCLFFBQVF0NEIsTUFBTW1FLEtBQU1sRSxXQUl2QyxNQUZBcTRCLEVBQVFnbUQsT0FBUSxFQUVWaG1ELEdBM0JSalEsRUFBTTVpQixLQUFPNnlCLEcsNkJDWmIsSUFBSTRCLEVBQVksRUFBUSxLQUt4QixTQUFTdWtELEtBSFQ3Z0YsRUFBT0QsUUFBVXdnRixFQUlqQk0sRUFBa0JoL0UsVUFBWTRHLE1BQU01RyxVQUNwQzArRSxFQUFTMStFLFVBQVksSUFBSWcvRSxFQUd6QixJQUFJcDJELEVBQVE4MUQsRUFBUzErRSxVQWdCckIsU0FBUzArRSxFQUFTeDBCLEVBQVFULEVBQVVtaEIsR0FDbEMsSUFBSXpuRCxFQUNBODdELEVBQ0E3SyxFQUVvQixpQkFBYjNxQixJQUNUbWhCLEVBQVNuaEIsRUFDVEEsRUFBVyxNQUdidG1DLEVBdUNGLFNBQXFCeW5ELEdBQ25CLElBQ0k1OEMsRUFEQTVQLEVBQVMsQ0FBQyxLQUFNLE1BR0UsaUJBQVh3c0QsS0FHTSxLQUZmNThDLEVBQVE0OEMsRUFBT3I2RCxRQUFRLE1BR3JCNk4sRUFBTyxHQUFLd3NELEdBRVp4c0QsRUFBTyxHQUFLd3NELEVBQU9sa0UsTUFBTSxFQUFHc25CLEdBQzVCNVAsRUFBTyxHQUFLd3NELEVBQU9sa0UsTUFBTXNuQixFQUFRLEtBSXJDLE9BQU81UCxFQXREQzhnRSxDQUFZdFUsR0FDcEJxVSxFQUFReGtELEVBQVVndkIsSUFBYSxNQUUvQjJxQixFQUFXLENBQ1QxcUIsTUFBTyxDQUFDc0IsS0FBTSxLQUFNRCxPQUFRLE1BQzVCcGlCLElBQUssQ0FBQ3FpQixLQUFNLEtBQU1ELE9BQVEsT0FJeEJ0QixHQUFZQSxFQUFTQSxXQUN2QkEsRUFBV0EsRUFBU0EsVUFHbEJBLElBRUVBLEVBQVNDLE9BQ1gwcUIsRUFBVzNxQixFQUNYQSxFQUFXQSxFQUFTQyxPQUdwQjBxQixFQUFTMXFCLE1BQVFELEdBSWpCUyxFQUFPcmpELFFBQ1RuQyxLQUFLbUMsTUFBUXFqRCxFQUFPcmpELE1BQ3BCcWpELEVBQVNBLEVBQU9yeEIsU0FHbEJuMEIsS0FBS20wQixRQUFVcXhCLEVBQ2Z4bEQsS0FBSy9GLEtBQU9zZ0YsRUFDWnY2RSxLQUFLd2xELE9BQVNBLEVBQ2R4bEQsS0FBS3NtRCxLQUFPdkIsRUFBV0EsRUFBU3VCLEtBQU8sS0FDdkN0bUQsS0FBS3FtRCxPQUFTdEIsRUFBV0EsRUFBU3NCLE9BQVMsS0FDM0NybUQsS0FBSzB2RSxTQUFXQSxFQUNoQjF2RSxLQUFLd3FCLE9BQVMvTCxFQUFNLEdBQ3BCemUsS0FBS3k2RSxPQUFTaDhELEVBQU0sR0E1RHRCeUYsRUFBTXUwRCxLQUFPLEdBQ2J2MEQsRUFBTWpxQixLQUFPLEdBQ2JpcUIsRUFBTXNoQyxPQUFTLEdBQ2Z0aEMsRUFBTWlRLFFBQVUsR0FDaEJqUSxFQUFNL2hCLE1BQVEsR0FDZCtoQixFQUFNaTJELE1BQVEsS0FDZGoyRCxFQUFNbWlDLE9BQVMsS0FDZm5pQyxFQUFNb2lDLEtBQU8sTSw2QkNuQmIsSUFBSUksRUFBTSxHQUFHbnJELGVBNkJiLFNBQVNtL0UsRUFBTUEsR0FLYixPQUpLQSxHQUEwQixpQkFBVkEsSUFDbkJBLEVBQVEsSUFHSHB4RCxFQUFNb3hELEVBQU1wMEIsTUFBUSxJQUFNaDlCLEVBQU1veEQsRUFBTXIwQixRQUcvQyxTQUFTdEIsRUFBU3B4QyxHQUtoQixPQUpLQSxHQUFzQixpQkFBUkEsSUFDakJBLEVBQU0sSUFHRCttRSxFQUFNL21FLEVBQUlxeEMsT0FBUyxJQUFNMDFCLEVBQU0vbUUsRUFBSXN3QixLQUc1QyxTQUFTM2EsRUFBTTN1QixHQUNiLE9BQU9BLEdBQTBCLGlCQUFWQSxFQUFxQkEsRUFBUSxFQTVDdERsQixFQUFPRCxRQUVQLFNBQW1CbUIsR0FFakIsSUFBS0EsR0FBMEIsaUJBQVZBLEVBQ25CLE9BQU8sS0FJVCxHQUFJK3JELEVBQUk3c0QsS0FBS2MsRUFBTyxhQUFlK3JELEVBQUk3c0QsS0FBS2MsRUFBTyxRQUNqRCxPQUFPb3FELEVBQVNwcUQsRUFBTW9xRCxVQUl4QixHQUFJMkIsRUFBSTdzRCxLQUFLYyxFQUFPLFVBQVkrckQsRUFBSTdzRCxLQUFLYyxFQUFPLE9BQzlDLE9BQU9vcUQsRUFBU3BxRCxHQUlsQixHQUFJK3JELEVBQUk3c0QsS0FBS2MsRUFBTyxTQUFXK3JELEVBQUk3c0QsS0FBS2MsRUFBTyxVQUM3QyxPQUFPKy9FLEVBQU0vL0UsR0FJZixPQUFPLE8sOEJDNUJULFlBRUEsSUFBSTYrRCxFQUFPLEVBQVEsS0FDZmgxRCxFQUFVLEVBQVEsS0FDbEJ5dUMsRUFBUyxFQUFRLEtBRXJCeDVDLEVBQU9ELFFBQVV5Z0YsRUFFakIsSUFBSXZ6QixFQUFNLEdBQUduckQsZUFDVDJvQixFQUFRKzFELEVBQU0zK0UsVUFFbEI0b0IsRUFBTWhvQixTQW9JTixTQUFrQnkrRSxHQUNoQixJQUFJaGdGLEVBQVFxRixLQUFLdTVFLFVBQVksR0FDN0IsT0FBT3RtQyxFQUFPdDRDLEdBQVNBLEVBQU11QixTQUFTeStFLEdBQVluNkQsT0FBTzdsQixJQWpJM0QsSUFBSWlqRSxFQUFRLENBQ1YsVUFDQSxPQUNBLFdBQ0EsT0FDQSxVQUNBLFdBSUYsU0FBU3FjLEVBQU1wbUQsR0FDYixJQUFJdHpCLEVBQ0Erb0IsRUFDQTVzQixFQUVKLEdBQUttM0IsR0FFRSxHQUF1QixpQkFBWkEsR0FBd0JvZixFQUFPcGYsR0FDL0NBLEVBQVUsQ0FBQzBsRCxTQUFVMWxELFFBQ2hCLEdBQUksWUFBYUEsR0FBVyxhQUFjQSxFQUMvQyxPQUFPQSxPQUpQQSxFQUFVLEdBT1osS0FBTTd6QixnQkFBZ0JpNkUsR0FDcEIsT0FBTyxJQUFJQSxFQUFNcG1ELEdBWW5CLElBVEE3ekIsS0FBS3VXLEtBQU8sR0FDWnZXLEtBQUt1bUQsU0FBVyxHQUNoQnZtRCxLQUFLNDZFLFFBQVUsR0FDZjU2RSxLQUFLMjJDLElBQU10a0IsRUFBUXNrQixNQUduQnJ0QixHQUFTLEVBQ1Q1c0IsRUFBU2toRSxFQUFNbGhFLFNBRU40c0IsRUFBUTVzQixHQUNmNkQsRUFBT3E5RCxFQUFNdDBDLEdBRVRvOUIsRUFBSTdzRCxLQUFLZzZCLEVBQVN0ekIsS0FDcEJQLEtBQUtPLEdBQVFzekIsRUFBUXR6QixJQUt6QixJQUFLQSxLQUFRc3pCLEdBQ2tCLElBQXpCK3BDLEVBQU0veEQsUUFBUXRMLEtBQ2hCUCxLQUFLTyxHQUFRc3pCLEVBQVF0ekIsSUF1RjNCLFNBQVNzNkUsRUFBVzUyQixFQUFNaHFELEdBQ3hCLElBQWdDLElBQTVCZ3FELEVBQUtwNEMsUUFBUTJ0RCxFQUFLVSxLQUNwQixNQUFNLElBQUloNEQsTUFBTSxJQUFNakksRUFBTyx1Q0FBeUN1L0QsRUFBS1UsSUFBTSxLQUtyRixTQUFTNGdCLEVBQWU3MkIsRUFBTWhxRCxHQUM1QixJQUFLZ3FELEVBQ0gsTUFBTSxJQUFJL2hELE1BQU0sSUFBTWpJLEVBQU8scUJBS2pDLFNBQVM4Z0YsRUFBV3ZoQixFQUFNdi9ELEdBQ3hCLElBQUt1L0QsRUFDSCxNQUFNLElBQUl0M0QsTUFBTSxZQUFjakksRUFBTyxtQ0FqR3pDRyxPQUFPQyxlQUFlNnBCLEVBQU8sT0FBUSxDQUNuQzNwQixJQUFLLFdBQ0gsT0FBT3lGLEtBQUs0NkUsUUFBUTU2RSxLQUFLNDZFLFFBQVFsK0UsT0FBUyxJQUU1Q21HLElBQUssU0FBVTIyRCxHQUNic2hCLEVBQWV0aEIsRUFBTSxRQUVqQkEsSUFBU3g1RCxLQUFLdzVELE1BQ2hCeDVELEtBQUs0NkUsUUFBUXY5RSxLQUFLbThELE1BTXhCcC9ELE9BQU9DLGVBQWU2cEIsRUFBTyxVQUFXLENBQ3RDM3BCLElBQUssV0FDSCxNQUE0QixpQkFBZHlGLEtBQUt3NUQsS0FBb0JBLEVBQUtZLFFBQVFwNkQsS0FBS3c1RCxXQUFRLzVELEdBRW5Fb0QsSUFBSyxTQUFVdTNELEdBQ2IyZ0IsRUFBVy82RSxLQUFLdzVELEtBQU0sV0FDdEJ4NUQsS0FBS3c1RCxLQUFPQSxFQUFLdjNELEtBQUttNEQsR0FBVyxHQUFJcDZELEtBQUt1NkQsYUFLOUNuZ0UsT0FBT0MsZUFBZTZwQixFQUFPLFdBQVksQ0FDdkMzcEIsSUFBSyxXQUNILE1BQTRCLGlCQUFkeUYsS0FBS3c1RCxLQUFvQkEsRUFBS2UsU0FBU3Y2RCxLQUFLdzVELFdBQVEvNUQsR0FFcEVvRCxJQUFLLFNBQVUwM0QsR0FDYnVnQixFQUFldmdCLEVBQVUsWUFDekJzZ0IsRUFBV3RnQixFQUFVLFlBQ3JCdjZELEtBQUt3NUQsS0FBT0EsRUFBS3YzRCxLQUFLakMsS0FBS282RCxTQUFXLEdBQUlHLE1BSzlDbmdFLE9BQU9DLGVBQWU2cEIsRUFBTyxVQUFXLENBQ3RDM3BCLElBQUssV0FDSCxNQUE0QixpQkFBZHlGLEtBQUt3NUQsS0FBb0JBLEVBQUtpQixRQUFRejZELEtBQUt3NUQsV0FBUS81RCxHQUVuRW9ELElBQUssU0FBVTQzRCxHQUNiLElBQUlELEVBQU1DLEdBQVcsR0FLckIsR0FIQW9nQixFQUFXcmdCLEVBQUssV0FDaEJ1Z0IsRUFBVy82RSxLQUFLdzVELEtBQU0sV0FFbEJnQixFQUFLLENBQ1AsR0FBc0IsTUFBbEJBLEVBQUlwdkMsT0FBTyxHQUNiLE1BQU0sSUFBSWxwQixNQUFNLGlDQUdsQixJQUE2QixJQUF6QnM0RCxFQUFJM3VELFFBQVEsSUFBSyxHQUNuQixNQUFNLElBQUkzSixNQUFNLDBDQUlwQmxDLEtBQUt3NUQsS0FBT2gxRCxFQUFReEUsS0FBS3c1RCxLQUFNZ0IsTUFLbkNwZ0UsT0FBT0MsZUFBZTZwQixFQUFPLE9BQVEsQ0FDbkMzcEIsSUFBSyxXQUNILE1BQTRCLGlCQUFkeUYsS0FBS3c1RCxLQUFvQkEsRUFBS2UsU0FBU3Y2RCxLQUFLdzVELEtBQU14NUQsS0FBS3k2RCxjQUFXaDdELEdBRWxGb0QsSUFBSyxTQUFVbTRFLEdBQ2JGLEVBQWVFLEVBQU0sUUFDckJILEVBQVdHLEVBQU0sUUFDakJoN0UsS0FBS3c1RCxLQUFPQSxFQUFLdjNELEtBQUtqQyxLQUFLbzZELFNBQVcsR0FBSTRnQixHQUFRaDdFLEtBQUt5NkQsU0FBVyxVLCtDQ3hJdEUsSUFBSWpCLEVBQU8sRUFBUSxLQWVuQi8vRCxFQUFPRCxRQWJQLFNBQW9CeWhGLEVBQU96Z0IsR0FDekIsR0FBcUIsaUJBQVZ5Z0IsRUFDVCxPQUFPQSxFQUdULEdBQXFCLElBQWpCQSxFQUFNditFLE9BQ1IsT0FBT3UrRSxFQUdULElBQUlDLEVBQVkxaEIsRUFBS2UsU0FBUzBnQixFQUFPemhCLEVBQUtpQixRQUFRd2dCLElBQVV6Z0IsRUFDNUQsT0FBT2hCLEVBQUt2M0QsS0FBS3UzRCxFQUFLWSxRQUFRNmdCLEdBQVFDLEssY0NEeEMsU0FBU3JvQyxFQUFVcjJDLEdBQ2pCLFFBQVNBLEVBQUl1ekIsYUFBbUQsbUJBQTdCdnpCLEVBQUl1ekIsWUFBWThpQixVQUEyQnIyQyxFQUFJdXpCLFlBQVk4aUIsU0FBU3IyQzs7Ozs7OztBQUx6Ry9DLEVBQU9ELFFBQVUsU0FBVWdELEdBQ3pCLE9BQWMsTUFBUEEsSUFBZ0JxMkMsRUFBU3IyQyxJQVFsQyxTQUF1QkEsR0FDckIsTUFBa0MsbUJBQXBCQSxFQUFJMitFLGFBQW1ELG1CQUFkMytFLEVBQUl3RixPQUF3QjZ3QyxFQUFTcjJDLEVBQUl3RixNQUFNLEVBQUcsSUFUakVvNUUsQ0FBYTUrRSxNQUFVQSxFQUFJNitFLGEsNkJDUnJFLElBQUkvTyxFQUFPLEVBQVEsS0FFbkI3eUUsRUFBT0QsUUFBVWkrRSxFQUVqQkEsRUFBT25MLEtBQU9BLEVBRWQsSUFBSXRxRSxFQUFRLEdBQUdBLE1BR2YsU0FBU3kxRSxJQUNQLElBQUl6SixFQUFNLEdBQ05zTixFQUFhLENBRWpCLElBTUEsV0FDRSxJQUFJaHlELEdBQVMsRUFDVHR0QixFQUFRZ0csRUFBTW5JLEtBQUtpQyxVQUFXLEdBQUksR0FDbEMrMUIsRUFBTy8xQixVQUFVQSxVQUFVWSxPQUFTLEdBRXhDLEdBQW9CLG1CQUFUbTFCLEVBQ1QsTUFBTSxJQUFJM3ZCLE1BQU0sMkNBQTZDMnZCLEdBTS9ELFNBQVM3YSxFQUFLOGEsR0FDWixJQUFJNTBCLEVBQUs4d0UsSUFBTTFrRCxHQUNYa1AsRUFBU3gyQixFQUFNbkksS0FBS2lDLFVBQVcsR0FDL0J3YSxFQUFTa2lCLEVBQU94MkIsTUFBTSxHQUN0QnRGLEVBQVNWLEVBQU1VLE9BQ2ZpWCxHQUFPLEVBRVgsR0FBSW1lLEVBQ0ZELEVBQUtDLE9BRFAsQ0FNQSxPQUFTbmUsRUFBTWpYLEdBQ08sT0FBaEI0WixFQUFPM0MsU0FBaUNsVSxJQUFoQjZXLEVBQU8zQyxLQUNqQzJDLEVBQU8zQyxHQUFPM1gsRUFBTTJYLElBSXhCM1gsRUFBUXNhLEVBR0pwWixFQUNGb3ZFLEVBQUtwdkUsRUFBSThaLEdBQU1uYixNQUFNLEtBQU1HLEdBRTNCNjFCLEVBQUtoMkIsTUFBTSxLQUFNLENBQUMsTUFBTXlWLE9BQU90VixLQTVCbkNnYixFQUFLbmIsTUFBTSxLQUFNLENBQUMsTUFBTXlWLE9BQU90VixLQWRqQyxJQWdEQSxTQUFha0IsR0FDWCxHQUFrQixtQkFBUEEsRUFDVCxNQUFNLElBQUlnRixNQUFNLHVDQUF5Q2hGLEdBSzNELE9BRkE4d0UsRUFBSTN3RSxLQUFLSCxHQUVGbytFLElBckRULE9BQU9BLEksNkJDaEJULElBQUl0NUUsRUFBUSxHQUFHQSxNQUVmdkksRUFBT0QsUUFLUCxTQUFjMEQsRUFBSStHLEdBQ2hCLElBQUlzM0UsRUFFSixPQUVBLFdBQ0UsSUFFSTdoRSxFQUZBOGUsRUFBU3gyQixFQUFNbkksS0FBS2lDLFVBQVcsR0FDL0JtSSxFQUFXL0csRUFBR1IsT0FBUzg3QixFQUFPOTdCLE9BRzlCdUgsR0FDRnUwQixFQUFPbjdCLEtBQUt3MEIsR0FHZCxJQUNFblksRUFBU3hjLEVBQUdyQixNQUFNLEtBQU0yOEIsR0FDeEIsTUFBT3BFLEdBTVAsR0FBSW53QixHQUFZczNFLEVBQ2QsTUFBTW5uRCxFQUdSLE9BQU92QyxFQUFLdUMsR0FHVG53QixJQUNDeVYsR0FBaUMsbUJBQWhCQSxFQUFPaWQsS0FDMUJqZCxFQUFPaWQsS0FBS0EsRUFBTTlFLEdBQ1RuWSxhQUFrQnhYLE1BQzNCMnZCLEVBQUtuWSxHQUVMaWQsRUFBS2pkLEtBTVgsU0FBU21ZLElBQ0YwcEQsSUFDSEEsR0FBVSxFQUVWdDNFLEVBQVNwSSxNQUFNLEtBQU1DLFlBTXpCLFNBQVM2NkIsRUFBS2g4QixHQUNaazNCLEVBQUssS0FBTWwzQixNLGNDN0RmLElBQUl1QixFQUFXOUIsT0FBT2tCLFVBQVVZLFNBRWhDekMsRUFBT0QsUUFFUCxTQUFrQmdELEdBQ2QsTUFBOEIsb0JBQXZCTixFQUFTckMsS0FBSzJDLEssNkJDSnpCLElBQUlOLEVBQVc5QixPQUFPa0IsVUFBVVksU0FFaEN6QyxFQUFPRCxRQUFVLFNBQVV5VSxHQUMxQixJQUFJM1MsRUFDSixNQUE0QixvQkFBckJZLEVBQVNyQyxLQUFLb1UsS0FBaUYsUUFBcEQzUyxFQUFZbEIsT0FBT3F3QyxlQUFleDhCLEtBQTBCM1MsSUFBY2xCLE9BQU9xd0MsZUFBZSxPLDZCQ0huSixJQUFJK3dDLEVBQVUsRUFBUSxLQUNsQnZaLEVBQVEsRUFBUSxHQUNoQnVXLEVBQVMsRUFBUSxLQUtyQixTQUFTenhCLEVBQU1sekIsR0FDYixJQUFJNG5ELEVBQVFELEVBQVFoRCxHQUNwQmlELEVBQU1uZ0YsVUFBVXU0QixRQUFVb3VDLEVBQU13WixFQUFNbmdGLFVBQVV1NEIsUUFBUzd6QixLQUFLdVcsS0FBSyxZQUFhc2QsR0FDaEY3ekIsS0FBS3c0RSxPQUFTaUQsRUFOaEJoaUYsRUFBT0QsUUFBVXV0RCxFQUNqQkEsRUFBTXl4QixPQUFTQSxHLDZCQ0xmLElBQUl2VyxFQUFRLEVBQVEsR0FDaEJ0bUMsRUFBVyxFQUFRLEtBRXZCbGlDLEVBQU9ELFFBSVAsU0FBaUJraUYsR0FDZixJQUFJaGlFLEVBQ0F6ZSxFQUNBTixFQVFKLElBQUtNLEtBTkwwZ0MsRUFBU2dnRCxFQUFJRCxHQUNiLy9DLEVBQVNpZ0QsRUFBTUQsR0FHZmppRSxFQUFTaWlFLEVBQUdyZ0YsV0FHVlgsRUFBUStlLEVBQU96ZSxLQUVlLGlCQUFWTixJQUNsQitlLEVBQU96ZSxHQUFPLFdBQVlOLEVBQVFBLEVBQU0yVyxTQUFXMndELEVBQU10bkUsSUFJN0QsT0FBT2doRixFQUlQLFNBQVNDLEVBQUtDLEdBQ1osT0FBT0gsRUFBTTcvRSxNQUFNbUUsS0FBTTY3RSxHQUkzQixTQUFTRixJQUNQLE9BQU0zN0UsZ0JBQWdCMjdFLEVBSWZELEVBQU03L0UsTUFBTW1FLEtBQU1sRSxXQUhoQixJQUFJOC9FLEVBQUs5L0UsYyxjQ3ZDTyxtQkFBbEIxQixPQUFPWSxPQUVoQnZCLEVBQU9ELFFBQVUsU0FBa0JzaUYsRUFBTUMsR0FDbkNBLElBQ0ZELEVBQUtFLE9BQVNELEVBQ2RELEVBQUt4Z0YsVUFBWWxCLE9BQU9ZLE9BQU8rZ0YsRUFBVXpnRixVQUFXLENBQ2xEeTBCLFlBQWEsQ0FDWHAxQixNQUFPbWhGLEVBQ1B4aEYsWUFBWSxFQUNaMjJCLFVBQVUsRUFDVkQsY0FBYyxPQU90QnYzQixFQUFPRCxRQUFVLFNBQWtCc2lGLEVBQU1DLEdBQ3ZDLEdBQUlBLEVBQVcsQ0FDYkQsRUFBS0UsT0FBU0QsRUFDZCxJQUFJRSxFQUFXLGFBQ2ZBLEVBQVMzZ0YsVUFBWXlnRixFQUFVemdGLFVBQy9Cd2dGLEVBQUt4Z0YsVUFBWSxJQUFJMmdGLEVBQ3JCSCxFQUFLeGdGLFVBQVV5MEIsWUFBYytyRCxLLDZCQ3JCbkMsSUFBSTdaLEVBQVEsRUFBUSxHQUNoQmlhLEVBQVMsRUFBUSxLQUNqQkMsRUFBZ0IsRUFBUSxLQUN4QjF0QixFQUFXLEVBQVEsS0FDbkJpRSxFQUFTLEVBQVEsS0FDakIwcEIsRUFBWSxFQUFRLEtBSXhCLFNBQVM1RCxFQUFPRCxFQUFLRSxHQUNuQno0RSxLQUFLeTRFLEtBQU9BLEVBQ1p6NEUsS0FBS2tlLE9BQVMsR0FDZGxlLEtBQUs2ekIsUUFBVW91QyxFQUFNamlFLEtBQUs2ekIsU0FDMUI3ekIsS0FBS3E4RSxXQUFXLElBRWhCcjhFLEtBQUtzOEUsUUFBUyxFQUNkdDhFLEtBQUt1OEUsU0FBVSxFQUNmdjhFLEtBQUt3OEUsUUFBUyxFQUNkeDhFLEtBQUt5OEUsU0FBVSxFQUVmejhFLEtBQUswOEUsU0FBV1AsRUFBYzFELEdBQU1pRSxTQUNwQzE4RSxLQUFLeXVELFNBQVdBLEVBQVN6dUQsS0FBTSxVQUMvQkEsS0FBSzB5RCxPQUFTQSxFQUFPMXlELE1BZnZCdkcsRUFBT0QsUUFBVWcvRSxFQWtCakIsSUFBSXQwRCxFQUFRczBELEVBQU9sOUUsVUFtSG5CLFNBQVM4RyxFQUFLekgsR0FDWixJQUNJTSxFQURBeWUsRUFBUyxHQUdiLElBQUt6ZSxLQUFPTixFQUNWK2UsRUFBT3JjLEtBQUtwQyxHQUdkLE9BQU95ZSxFQXhIVHdLLEVBQU1tNEQsV0FBYSxFQUFRLEtBQzNCbjRELEVBQU02aUMsTUFBUSxFQUFRLEtBR3RCN2lDLEVBQU0yUCxRQUFVLEVBQVEsS0FHeEIzUCxFQUFNeTRELFVBQVlULEVBQU8sV0FBVyxHQUNwQ2g0RCxFQUFNMDRELFVBQVlWLEVBQU8sVUFBVSxHQUNuQ2g0RCxFQUFNMjRELFVBQVlYLEVBQU8sVUFBVSxHQUNuQ2g0RCxFQUFNNDRELFdBQWFaLEVBQU8sV0FBVyxHQVdyQ2g0RCxFQUFNNjRELG1CQUFxQixDQUN6QixDQUFDLGlCQUNELENBQUMsY0FDRCxDQUFDLGNBQ0QsQ0FBQyxjQUNELENBQUMsUUFDRCxDQUFDLGdCQUFpQixDQUFDamlCLFlBQVksSUFDL0IsQ0FBQyxhQUFjLENBQUNBLFlBQVksSUFDNUIsQ0FBQyxXQUFZLENBQUNBLFlBQVksS0FZNUI1MkMsRUFBTTg0RCxjQUFnQixDQUNwQixDQUFDLGFBQWMsQ0FBQ2hpQixVQUFVLElBQzFCLENBQUMsYUFBYyxDQUFDQSxVQUFVLElBQzFCLENBQUMsZ0JBQWlCLENBQUNBLFVBQVUsSUFDN0IsQ0FBQyxhQUFjLENBQUNGLFlBQVksSUFDNUIsQ0FBQyxXQUFZLENBQUNBLFlBQVksS0FZNUI1MkMsRUFBTSs0RCxvQkFBc0IsQ0FDMUIsQ0FBQyxlQUFnQixDQUFDbmlCLFlBQVksSUFDOUIsQ0FBQyxhQUFjLENBQUNBLFlBQVksSUFDNUIsQ0FBQyxhQUFjLENBQUNBLFlBQVksSUFDNUIsQ0FBQyxnQkFBaUIsQ0FBQ0EsWUFBWSxJQUMvQixDQUFDLGdCQUFpQixDQUFDQSxZQUFZLElBQy9CLENBQUMsT0FBUSxDQUFDQSxZQUFZLElBQ3RCLENBQUMsT0FBUSxDQUFDQSxZQUFZLElBQ3RCLENBQUMsYUFBYyxDQUFDQSxZQUFZLElBQzVCLENBQUMsV0FBWSxDQUFDQSxZQUFZLEtBSTVCNTJDLEVBQU1nNUQsZ0JBQWtCLENBQ3RCQyxRQUFTLEVBQVEsS0FDakJDLGFBQWMsRUFBUSxLQUN0QkMsV0FBWSxFQUFRLEtBQ3BCQyxXQUFZLEVBQVEsS0FDcEJDLFdBQVksRUFBUSxLQUNwQkMsY0FBZSxFQUFRLEtBQ3ZCbEwsS0FBTSxFQUFRLEtBQ2RtTCxjQUFlLEVBQVEsS0FDdkJDLEtBQU0sRUFBUSxLQUNkQyxTQUFVLEVBQVEsS0FDbEJDLFdBQVksRUFBUSxLQUNwQkMsTUFBTyxFQUFRLEtBQ2ZDLFVBQVcsRUFBUSxNQUdyQjU1RCxFQUFNNjVELGlCQUFtQixDQUN2QnQwQyxPQUFRLEVBQVEsS0FDaEJ1MEMsU0FBVSxFQUFRLEtBQ2xCbHhCLElBQUssRUFBUSxLQUNiNHdCLEtBQU0sRUFBUSxLQUNkbmlCLEtBQU0sRUFBUSxLQUNkbFcsVUFBVyxFQUFRLEtBQ25CNDRCLE9BQVEsRUFBUSxLQUNoQkMsU0FBVSxFQUFRLEtBQ2xCQyxTQUFVLEVBQVEsS0FDbEJuaEQsS0FBTSxFQUFRLEtBQ2RvaEQsTUFBTyxFQUFRLEtBQ2Z0NEIsS0FBTSxFQUFRLE1BSWhCNWhDLEVBQU1tNkQsYUFBZWo4RSxFQUFLOGhCLEVBQU1nNUQsaUJBQ2hDaDVELEVBQU1vNkQsY0FBZ0JsOEUsRUFBSzhoQixFQUFNNjVELGtCQUdqQzc1RCxFQUFNcTZELGNBQWdCbkMsRUFBVSxTQUNoQ2w0RCxFQUFNczZELGVBQWlCcEMsRUFBVSxVQUNqQ2w0RCxFQUFNdTZELGdCQUFrQnJDLEcsNkJDekl4QjNpRixFQUFPRCxRQUtQLFNBQWlCeUIsRUFBS3kxQyxFQUFPd1csR0FDM0IsT0FFQSxXQUNFLElBQUk1b0IsRUFBVTRvQixHQUFPbG5ELEtBQ2pCaW5FLEVBQVUzb0MsRUFBUXJqQyxHQUl0QixPQUZBcWpDLEVBQVFyakMsSUFBUXkxQyxFQUloQixXQUNFcFMsRUFBUXJqQyxHQUFPZ3NFLE0sNkJDSnJCLFNBQVN5WCxFQUF3QnhPLEdBQy9CLE9BR0EsU0FBMEJoeUQsR0FDeEIsSUFBSW9MLEdBQVMsRUFDVDVzQixFQUFTd3pFLEVBQVF4ekUsT0FFckIsR0FBSXdoQixFQUFTLEVBQ1gsTUFBTyxHQUdULE9BQVNvTCxFQUFRNXNCLEdBQ2YsR0FBSXd6RSxFQUFRNW1ELEdBQVNwTCxFQUNuQixNQUFPLENBQ0xvb0MsS0FBTWg5QixFQUFRLEVBQ2QrOEIsT0FBUW5vQyxHQUFVZ3lELEVBQVE1bUQsRUFBUSxJQUFNLEdBQUssRUFDN0NwTCxPQUFRQSxHQUtkLE1BQU8sSUFNWCxTQUFTeWdFLEVBQXdCek8sR0FDL0IsT0FJQSxTQUEwQm5yQixHQUN4QixJQUFJdUIsRUFBT3ZCLEdBQVlBLEVBQVN1QixLQUM1QkQsRUFBU3RCLEdBQVlBLEVBQVNzQixPQUVsQyxJQUFLaG5ELE1BQU1pbkQsS0FBVWpuRCxNQUFNZ25ELElBQVdDLEVBQU8sS0FBSzRwQixFQUNoRCxPQUFRQSxFQUFRNXBCLEVBQU8sSUFBTSxHQUFLRCxFQUFTLEdBQUssRUFHbEQsT0FBUSxHQXREWjVzRCxFQUFPRCxRQUVQLFNBQWlCaS9FLEdBQ2YsSUFBSWMsRUF3RE4sU0FBaUI1K0UsR0FDZixJQUFJK2UsRUFBUyxHQUNUNFAsRUFBUTN1QixFQUFNa1IsUUFBUSxNQUUxQixNQUFrQixJQUFYeWQsR0FDTDVQLEVBQU9yYyxLQUFLaXNCLEVBQVEsR0FDcEJBLEVBQVEzdUIsRUFBTWtSLFFBQVEsS0FBTXlkLEVBQVEsR0FLdEMsT0FGQTVQLEVBQU9yYyxLQUFLMUMsRUFBTStCLE9BQVMsR0FFcEJnZCxFQW5FUXcyRCxDQUFRMXZELE9BQU9pNEQsSUFFOUIsTUFBTyxDQUNMbUcsV0FBWUYsRUFBd0JuRixHQUNwQ21ELFNBQVVpQyxFQUF3QnBGLE0sNkJDUHRDOS9FLEVBQU9ELFFBSVAsU0FBaUIwdEQsRUFBS2pzRCxHQUNwQixPQUlBLFNBQWtCTixHQUNoQixJQUlJeTVDLEVBSkFyUyxFQUFPLEVBQ1B6WSxFQUFRM3VCLEVBQU1rUixRQUFRLE1BQ3RCNDlCLEVBQVN5ZCxFQUFJanNELEdBQ2JxNkMsRUFBUSxHQUdaLE1BQWtCLElBQVhoc0IsR0FDTGdzQixFQUFNajRDLEtBQUsxQyxFQUFNcUgsTUFBTSsvQixFQUFNelksSUFDN0J5WSxFQUFPelksRUFBUSxHQUNmOHFCLEVBQVl6NUMsRUFBTXl3QixPQUFPMlcsTUFJd0IsSUFBL0IwSCxFQUFPNTlCLFFBQVF1b0MsSUFDL0JrQixFQUFNajRDLEtBQUssTUFHYmlzQixFQUFRM3VCLEVBQU1rUixRQUFRLEtBQU1rMkIsR0FLOUIsT0FGQXVULEVBQU1qNEMsS0FBSzFDLEVBQU1xSCxNQUFNKy9CLElBRWhCdVQsRUFBTXJ6QyxLQUFLLE8sNkJDaEN0QixJQUFJZ2dFLEVBQVEsRUFBUSxHQUNoQjRjLEVBQVcsRUFBUSxJQUV2QnBsRixFQUFPRCxRQUdQLFNBQWlCMHRELEdBR2YsT0FGQW11QixFQUFReUosSUFnRFIsU0FBbUJua0YsRUFBT29xRCxFQUFVbHhCLEdBQ2xDLE9BQU9nckQsRUFBU2xrRixFQUFPc25FLEVBQU1wdUMsRUFBUyxDQUNwQ2t4QixTQUFVMFUsRUFBVTFVLEdBQ3BCUSxRQUFTUyxNQWpETnF2QixFQUdQLFNBQVM1YixFQUFVMVUsR0FLakIsSUFKQSxJQUFJZzZCLEVBQVU3M0IsRUFBSWhwQyxPQUNkb29DLEVBQU92QixFQUFTdUIsS0FDaEI1c0MsRUFBUyxLQUVKNHNDLEdBQ0RBLEtBQVF5NEIsR0FJZHJsRSxFQUFPcmMsTUFBTTBoRixFQUFRejRCLElBQVMsR0FBSyxHQUdyQyxNQUFPLENBQ0x0QixNQUFPRCxFQUNQeEosT0FBUTdoQyxHQU9aLFNBQVNzc0MsRUFBY1IsRUFBUVQsRUFBVS9uQixHQUMxQixJQUFUQSxHQUlKa3FCLEVBQUl1eEIsS0FBS3RrRCxRQUFRcXhCLEVBQVFULEdBSTNCLFNBQVNzd0IsRUFBUTE2RSxFQUFPb3FELEVBQVVpNkIsR0FDaENILEVBQVNsa0YsRUFBTyxDQUNkb3FELFNBQVUwVSxFQUFVMVUsR0FDcEJRLFFBQVNTLEVBQ1RGLEtBQU1rNUIsRUFDTjM1QixVQUFXMjVCLEVBQ1gvNEIsWUFBYWlCLEVBQ2JoQixpQkFBa0JnQixPLDJtRENsRHhCenRELEVBQU9ELFFBSVAsU0FBcUI0NkMsR0FDbkIsSUFBSXBYLEVBQTRCLGlCQUFkb1gsRUFBeUJBLEVBQVVoTSxXQUFXLEdBQUtnTSxFQUVyRSxPQUNHcFgsR0FBUSxJQUFjQSxHQUFRLEtBQzlCQSxHQUFRLElBQWNBLEdBQVEsSUFDOUJBLEdBQVEsSUFBY0EsR0FBUSxLLDZCQ1ZuQyxJQUFJaWlELEVBQWUsRUFBUSxLQUN2Qng2QixFQUFVLEVBQVEsSUFFdEJockQsRUFBT0QsUUFJUCxTQUF3QjQ2QyxHQUN0QixPQUFPNnFDLEVBQWE3cUMsSUFBY3FRLEVBQVFyUSxLLDZCQ041QyxJQUFJblIsRUFJSnhwQyxFQUFPRCxRQUVQLFNBQXNCNHJELEdBQ3BCLElBQ0k4NUIsRUFEQXo1QixFQUFTLElBQU1MLEVBQWEsSUFZaEMsSUFUQW5pQixFQUFLQSxHQUFNQyxTQUFTL0IsY0FBYyxNQUMvQmcrQyxVQUFZMTVCLEVBVEQsTUFVZHk1QixFQUFPajhDLEVBQUdtRCxhQU9EZ0MsV0FBVzgyQyxFQUFLeGlGLE9BQVMsSUFBbUMsU0FBZjBvRCxFQUNwRCxPQUFPLEVBSVQsT0FBTzg1QixJQUFTejVCLEdBQWlCeTVCLEksNkJDMUJuQ3psRixFQUFPRCxRQThDUCxTQUFpQnE1QixHQUNmLE9BR0EsU0FBa0JsNEIsRUFBTyswRSxHQUN2QixJQU9JcG1ELEVBQ0E1c0IsRUFDQWt4RCxFQUNBM3pELEVBQ0FxUSxFQUNBODBFLEVBWkF2akQsRUFBTzc3QixLQUNQa2UsRUFBUzJkLEVBQUszZCxPQUNkaFQsRUFBUyxHQUNUbTBFLEVBQVV4akQsRUFBS2hKLEVBQU8sV0FDdEJvMEIsRUFBYXByQixFQUFLaEosRUFBTyxjQUN6Qnl6QixFQUFPb3BCLEVBQVNwcEIsS0FDaEJELEVBQVNxcEIsRUFBU3JwQixPQVN0QixJQUFLMXJELEVBQ0gsT0FBT3VRLEVBSVRvMEUsRUFBSTdrRSxJQUFNQSxFQUNWNmtFLEVBQUk3RyxLQUFPNThDLEVBQUs0OEMsS0FHaEI4RyxFQUFlLElBT2YsS0FBTzVrRixHQUFPLENBS1osSUFKQTJ1QixHQUFTLEVBQ1Q1c0IsRUFBUzJpRixFQUFRM2lGLE9BQ2pCNE4sR0FBVSxJQUVEZ2YsRUFBUTVzQixJQUNmekMsRUFBT29sRixFQUFRLzFELEtBQ2Zza0MsRUFBUzNHLEVBQVdodEQsS0FJVzJ6RCxFQUFPNHhCLGNBQWUzakQsRUFBSzRnRCxTQUN0RDd1QixFQUFPNnhCLFdBQWM1akQsRUFBS3lnRCxRQUMxQjF1QixFQUFPOHhCLFlBQWU3akQsRUFBSzBnRCxTQUMzQjN1QixFQUFPK3hCLFdBQWM5akQsRUFBSzJnRCxTQUU1QjRDLEVBQWN6a0YsRUFBTStCLE9BRXBCa3hELEVBQU8veEQsTUFBTWdnQyxFQUFNLENBQUN5akQsRUFBSzNrRixNQUV6QjJQLEVBQVU4MEUsSUFBZ0J6a0YsRUFBTStCLFlBUy9CNE4sR0FDSHV4QixFQUFLNDhDLEtBQUs0QixLQUFLLElBQUluNEUsTUFBTSxpQkFBa0JvOUUsRUFBSTdrRSxPQU1uRCxPQUZBb2hCLEVBQUsrakQsSUFBTW5sRSxJQUVKdlAsRUFJUCxTQUFTcTBFLEVBQWVNLEdBSXRCLElBSEEsSUFBSTk2RSxHQUFhLEVBQ2J1a0IsRUFBUXUyRCxFQUFTaDBFLFFBQVEsT0FFWCxJQUFYeWQsR0FDTGc5QixJQUNBdmhELEVBQVl1a0IsRUFDWkEsRUFBUXUyRCxFQUFTaDBFLFFBQVEsS0FBTXlkLEVBQVEsSUFHdEIsSUFBZnZrQixFQUNGc2hELEdBQVV3NUIsRUFBU25qRixPQUVuQjJwRCxFQUFTdzVCLEVBQVNuakYsT0FBU3FJLEVBR3pCdWhELEtBQVFwb0MsS0FDUyxJQUFmblosRUFDRnNoRCxHQUFVbm9DLEVBQU9vb0MsR0FDUkQsR0FBVW5vQyxFQUFPb29DLEtBQzFCRCxFQUFTbm9DLEVBQU9vb0MsR0FBUSxJQTJCOUIsU0FBUzdyQyxJQUNQLElBQUk5RyxFQUFNLENBQUMyeUMsS0FBTUEsRUFBTUQsT0FBUUEsR0FJL0IsT0FGQTF5QyxFQUFJdUssT0FBUzJkLEVBQUs2Z0QsU0FBUy9vRSxHQUVwQkEsRUFJVCxTQUFTbXNFLEVBQVM5NkIsR0FDaEJobEQsS0FBS2dsRCxNQUFRQSxFQUNiaGxELEtBQUtpa0MsSUFBTXhwQixJQTZGYixTQUFTNmtFLEVBQUlPLEdBQ1gsSUF4RUlFLEVBd0VBeGtDLEVBN0hOLFdBQ0UsSUFBSXlrQyxFQUFjLEdBQ2Ryc0UsRUFBTTJ5QyxFQUFPLEVBSWpCLE9BQU8sV0FHTCxJQUZBLElBQUlqRCxFQUFPaUQsRUFBTyxFQUVYM3lDLEVBQU0wdkMsR0FDWDI4QixFQUFZM2lGLE1BQU02Z0IsRUFBT3ZLLElBQVEsR0FBSyxHQUV0Q0EsSUFHRixPQUFPcXNFLEdBOEdJQyxHQUNUdHNFLEdBekVBb3NFLEVBQVN0bEUsSUFLYixTQUFnQmdZLEVBQU04b0IsR0FDcEIsSUFBSXhaLEVBQU90UCxFQUFLc3lCLFNBQ1pDLEVBQVFqakIsRUFBT0EsRUFBS2lqQixNQUFRKzZCLEVBQzVCRyxFQUFXLEdBQ1gva0YsRUFBSTRtQyxHQUFRQSxFQUFLa0MsSUFBSXFpQixLQUNyQjNzRCxFQUFJb21GLEVBQU96NUIsS0FZZixHQVZBN3pCLEVBQUtzeUIsU0FBVyxJQUFJKzZCLEVBQVM5NkIsR0FVekJqakIsR0FBUXdaLEdBQVV4WixFQUFLd1osT0FBUSxDQUdqQyxHQUZBMmtDLEVBQVduK0MsRUFBS3daLE9BRVpwZ0QsRUFBSXhCLEVBQUcsQ0FDVCxPQUFTd0IsRUFBSXhCLEdBQ1h1bUYsRUFBUzdpRixNQUFNNmdCLEVBQU8vaUIsSUFBTSxHQUFLLEdBR25DK2tGLEVBQVM3aUYsS0FBSzBpRixFQUFPMTVCLFFBR3ZCOUssRUFBUzJrQyxFQUFTNXVFLE9BQU9pcUMsR0FLM0IsT0FGQTlvQixFQUFLc3lCLFNBQVN4SixPQUFTQSxHQUFVLEdBRTFCOW9CLElBb0NMdzBDLEVBQVV4c0QsSUFjZCxPQXhHRixTQUFxQm9sRSxHQUVmbGxGLEVBQU00dkQsVUFBVSxFQUFHczFCLEVBQVNuakYsVUFBWW1qRixHQUUxQ2hrRCxFQUFLNDhDLEtBQUs0QixLQUNSLElBQUluNEUsTUFDRiw4RUFHRnVZLEtBbUZKMGxFLENBQVlOLEdBRVpoa0YsRUFBTTRxQyxNQUFRQSxFQUNkQSxFQUFNemhDLEtBQU9BLEVBQ2JuSixFQUFNbUosS0FBT0EsRUFFYnJLLEVBQVFBLEVBQU00dkQsVUFBVXMxQixFQUFTbmpGLFFBRWpDNmlGLEVBQWVNLEdBRWZ0a0MsRUFBU0EsSUFFRjEvQyxFQUlQLFNBQVNBLEVBQU00MkIsRUFBTTZzQixHQUNuQixPQUFPM3JDLEVBakRYLFNBQWE4ZSxFQUFNNnNCLEdBQ2pCLElBQUkzVCxFQUFXMlQsRUFBU0EsRUFBTzNULFNBQVd6Z0MsRUFDdEM2MkIsRUFBTzRKLEVBQVNBLEVBQVNqdkMsT0FBUyxHQW9CdEMsT0FqQkVxbEMsR0FDQXRQLEVBQUtJLE9BQVNrUCxFQUFLbFAsTUFDbkJKLEVBQUtJLFFBQVF1dEQsR0FDYkMsRUFBVXQrQyxJQUNWcytDLEVBQVU1dEQsS0FFVkEsRUFBTzJ0RCxFQUFnQjN0RCxFQUFLSSxNQUFNaDVCLEtBQUtnaUMsRUFBTWtHLEVBQU10UCxJQUdqREEsSUFBU3NQLEdBQ1g0SixFQUFTdHVDLEtBQUtvMUIsR0FHWm9KLEVBQUs0Z0QsU0FBNkIsSUFBbEJ2eEUsRUFBT3hPLFFBQ3pCbS9CLEVBQUs4Z0QsWUFHQWxxRCxFQTJCTTVWLENBQUlsSixFQUFJOGUsR0FBTzZzQixHQUFTL0QsR0FVckMsU0FBUzlVLElBQ1AsSUFBSWhVLEVBQU81MkIsRUFBTUEsTUFBTSxLQUFNQyxXQU03QixPQUpBd3FELEVBQU8yZ0IsRUFBUTNnQixLQUNmRCxFQUFTNGdCLEVBQVE1Z0IsT0FDakIxckQsRUFBUWtsRixFQUFXbGxGLEVBRVo4M0IsRUFLVCxTQUFTenRCLElBQ1AsSUFBSTBVLEVBQVMvRixFQUFJLElBTWpCLE9BSkEyeUMsRUFBTzJnQixFQUFRM2dCLEtBQ2ZELEVBQVM0Z0IsRUFBUTVnQixPQUNqQjFyRCxFQUFRa2xGLEVBQVdsbEYsRUFFWitlLEVBQU9xckMsYUFsVXRCLElBQUlxN0IsRUFBa0IsQ0FDcEJ0NkIsS0F1QkYsU0FBbUIvakIsRUFBTXRQLEdBR3ZCLE9BRkFzUCxFQUFLcG5DLE9BQVM4M0IsRUFBSzkzQixNQUVab25DLEdBekJQdTdDLFdBOEJGLFNBQXlCdjdDLEVBQU10UCxHQUM3QixHQUFJenlCLEtBQUs2ekIsUUFBUWluQyxXQUNmLE9BQU9yb0MsRUFLVCxPQUZBc1AsRUFBSzRKLFNBQVc1SixFQUFLNEosU0FBU3I2QixPQUFPbWhCLEVBQUtrWixVQUVuQzVKLElBakNULFNBQVNzK0MsRUFBVTV0RCxHQUNqQixJQUFJdXlCLEVBQ0EvZ0IsRUFFSixNQUFrQixTQUFkeFIsRUFBS0ksT0FBb0JKLEVBQUtzeUIsV0FJbENDLEVBQVF2eUIsRUFBS3N5QixTQUFTQyxNQUN0Qi9nQixFQUFNeFIsRUFBS3N5QixTQUFTOWdCLElBSWIrZ0IsRUFBTXNCLE9BQVNyaUIsRUFBSXFpQixNQUN0QnJpQixFQUFJb2lCLE9BQVNyQixFQUFNcUIsU0FBVzV6QixFQUFLOTNCLE1BQU0rQixVLDZCQ3RCL0MsSUFBSXVsRSxFQUFRLEVBQVEsR0FDaEJxZSxFQUFVLEVBQVEsS0FDbEJubUUsRUFBVyxFQUFRLEtBRXZCMWdCLEVBQU9ELFFBRVAsU0FBb0JxNkIsR0FDbEIsSUFFSTU0QixFQUNBTixFQUZBc3NFLEVBRE9qbkUsS0FDUTZ6QixRQUluQixHQUFlLE1BQVhBLEVBQ0ZBLEVBQVUsT0FDTCxJQUF1QixpQkFBWkEsRUFHaEIsTUFBTSxJQUFJM3hCLE1BQ1Isa0JBQW9CMnhCLEVBQXBCLDJCQUhGQSxFQUFVb3VDLEVBQU1wdUMsR0FRbEIsSUFBSzU0QixLQUFPa2YsRUFBVSxDQU9wQixHQUphLE9BRmJ4ZixFQUFRazVCLEVBQVE1NEIsTUFHZE4sRUFBUXNzRSxFQUFRaHNFLElBSVAsV0FBUkEsR0FBcUMsa0JBQVZOLEdBQ25CLFdBQVJNLEdBQXFDLGlCQUFWTixFQUU1QixNQUFNLElBQUl1SCxNQUFNLGtCQUFvQnZILEVBQVEsMEJBQTRCTSxFQUFNLEtBR2hGNDRCLEVBQVE1NEIsR0FBT04sRUFNakIsT0FwQ1dxRixLQWlDTjZ6QixRQUFVQSxFQWpDSjd6QixLQWtDTnlwQyxPQUFTNjJDLEVBQVF6c0QsR0FsQ1g3ekIsTyw2QkNQYnZHLEVBQU9ELFFBQVU4bUYsRUFFakIsSUFBSW5tRSxFQUFXLENBQ2IsS0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FHRTBnRCxFQUFNMWdELEVBQVM3SSxPQUFPLENBQUMsSUFBSyxNQUU1QndwRCxFQUFhRCxFQUFJdnBELE9BQU8sQ0FDMUIsS0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLE1BUUYsU0FBU2d2RSxFQUFRenNELEdBQ2YsSUFBSWl4QixFQUFXanhCLEdBQVcsR0FFMUIsT0FBSWl4QixFQUFTZ1csV0FDSkEsRUFHRmhXLEVBQVMrVixJQUFNQSxFQUFNMWdELEVBWjlCbW1FLEVBQVFudEMsUUFBVWg1QixFQUNsQm1tRSxFQUFRemxCLElBQU1BLEVBQ2R5bEIsRUFBUXhsQixXQUFhQSxHLGtrQkMzQ3JCLElBQUltSCxFQUFRLEVBQVEsR0FDaEJzZSxFQUFpQixFQUFRLEtBRTdCOW1GLEVBQU9ELFFBTVAsV0FDRSxJQUlJaTVCLEVBSEE5M0IsRUFBUTZsQixPQUREeGdCLEtBQ2F5NEUsTUFDcEJ6ekIsRUFBUSxDQUFDc0IsS0FBTSxFQUFHRCxPQUFRLEVBQUdub0MsT0FBUSxHQUNyQ2kyQixFQUFVOHRCLEVBQU1qZCxHQVFRLFNBRjVCcnFELEVBQVFBLEVBQU02SixRQUFRZzhFLEVBZFIsT0FnQkpwNEMsV0FBVyxLQUNuQnp0QyxFQUFRQSxFQUFNcUgsTUFBTSxHQUVwQm15QyxFQUFRa1MsU0FDUmxTLEVBQVFqMkIsVUFHVnVVLEVBQU8sQ0FDTEksS0FBTSxPQUNOOFksU0FwQlMzckMsS0FvQk11K0UsY0FBYzVqRixFQUFPdzVDLEdBQ3BDNFEsU0FBVSxDQUNSQyxNQUFPQSxFQUNQL2dCLElBdkJPamtDLEtBdUJHNC9FLEtBQU8zZCxFQUFNamQsS0F2QmhCaGxELEtBMkJENnpCLFFBQVFreEIsVUFDaEJ3N0IsRUFBZTl0RCxHQUFNLEdBR3ZCLE9BQU9BLEdBcENULElBQ0krdEQsRUFBeUIsWSw2QkNON0IsSUFBSTNoQyxFQUFRLEVBQVEsSUFTcEIsU0FBUzRoQyxFQUFLaHVELFVBQ0xBLEVBQUtzeUIsU0FHZCxTQUFTMjdCLEVBQUtqdUQsR0FDWkEsRUFBS3N5QixjQUFXdGxELEVBWmxCaEcsRUFBT0QsUUFFUCxTQUF3Qmk1QixFQUFNa3VELEdBRTVCLE9BREE5aEMsRUFBTXBzQixFQUFNa3VELEVBQVFGLEVBQU9DLEdBQ3BCanVELEksNkJDTlRoNUIsRUFBT0QsUUFBVXNsRCxFQUVqQixJQUFJOGhDLEVBQVUsRUFBUSxLQVV0QixTQUFTOWhDLEVBQWFJLEVBQU1sNkMsRUFBTW02QyxFQUFTQyxHQUN6QyxJQUFJeWhDLEVBYUosU0FBU2pvQixFQUFJbm1DLEVBQU1uSixFQUFPKzFCLEdBQ3hCLElBQ0l5aEMsRUFEQXBuRSxFQUFTLEdBR2IsT0FBSzFVLElBQVE2N0UsRUFBR3B1RCxFQUFNbkosRUFBTysxQixFQUFRQSxFQUFRM2lELE9BQVMsSUFBTSxRQXhCckQsS0F5QkxnZCxFQUFTcW5FLEVBQVM1aEMsRUFBUTFzQixFQUFNNHNCLEtBRXJCLEtBS1Q1c0IsRUFBS2taLFVBakNGLFNBaUNjanlCLEVBQU8sS0FoQ3JCLEtBaUNMb25FLEVBQVlDLEVBUWhCLFNBQWFwMUMsRUFBVTBULEdBQ3JCLElBR0kzbEMsRUFGQXdmLEVBQU9rbUIsR0FBVyxFQUFJLEVBQ3RCOTFCLEdBQVM4MUIsRUFBVXpULEVBQVNqdkMsUUFGdEIsR0FFc0N3OEIsRUFHaEQsS0FBTzVQLEdBTEcsR0FLWUEsRUFBUXFpQixFQUFTanZDLFFBQVEsQ0FHN0MsSUFsREssS0FnRExnZCxFQUFTay9DLEVBQUlqdEIsRUFBU3JpQixHQUFRQSxFQUFPKzFCLElBRTFCLEdBQ1QsT0FBTzNsQyxFQUdUNFAsRUFBNkIsaUJBQWQ1UCxFQUFPLEdBQWtCQSxFQUFPLEdBQUs0UCxFQUFRNFAsR0FyQnZDZzBDLENBQUl6NkMsRUFBS2taLFNBQVUwVCxFQUFRL3RDLE9BQU9taEIsTUFDdEMsR0FBY3F1RCxFQU50QnBuRSxFQW5CTyxtQkFBVDFVLEdBQTBDLG1CQUFabTZDLElBQ3ZDQyxFQUFVRCxFQUNWQSxFQUFVbjZDLEVBQ1ZBLEVBQU8sTUFHVDY3RSxFQUFLRCxFQUFRNTdFLEdBRWI0ekQsRUFBSTFaLEVBQU0sS0FBTSxJQTBDbEIsU0FBUzZoQyxFQUFTcG1GLEdBQ2hCLE9BQWMsT0FBVkEsR0FBbUMsaUJBQVZBLEdBQXNCLFdBQVlBLEVBQ3REQSxFQUdZLGlCQUFWQSxFQUNGLEVBbkVJLEVBbUVPQSxHQUdiLENBQUNBLEdBbEVWbWtELEVBQWFDLFVBSkUsRUFLZkQsRUFBYUUsS0FKRixPQUtYRixFQUFhRyxNQUpGLEcsNkJDSlgsU0FBUzJoQyxFQUFRNTdFLEdBQ2YsR0FBb0IsaUJBQVRBLEVBQ1QsT0FxRUosU0FBcUJBLEdBQ25CLE9BRUEsU0FBY3l0QixHQUNaLE9BQU9pRCxRQUFRakQsR0FBUUEsRUFBS0ksT0FBUzd0QixJQXpFOUJnOEUsQ0FBWWg4RSxHQUdyQixHQUFJQSxRQUNGLE9BQU9pOEUsRUFHVCxHQUFvQixpQkFBVGo4RSxFQUNULE9BQVEsV0FBWUEsRUFBT2s4RSxFQUFhQyxHQUFnQm44RSxHQUcxRCxHQUFvQixtQkFBVEEsRUFDVCxPQUFPQSxFQUdULE1BQU0sSUFBSTlDLE1BQU0sZ0RBaUJsQixTQUFTaS9FLEVBQWVuOEUsR0FDdEIsT0FFQSxTQUFpQnl0QixHQUNmLElBQUl4M0IsRUFFSixJQUFLQSxLQUFPK0osRUFDVixHQUFJeXRCLEVBQUt4M0IsS0FBUytKLEVBQUsvSixHQUNyQixPQUFPLEVBSVgsT0FBTyxHQUlYLFNBQVNpbUYsRUFBV3o2QixHQUNsQixJQUFJMjZCLEVBL0JOLFNBQW9CMzZCLEdBS2xCLElBSkEsSUFBSTQ2QixFQUFVLEdBQ1Yza0YsRUFBUytwRCxFQUFNL3BELE9BQ2Y0c0IsR0FBUyxJQUVKQSxFQUFRNXNCLEdBQ2Yya0YsRUFBUS8zRCxHQUFTczNELEVBQVFuNkIsRUFBTW45QixJQUdqQyxPQUFPKzNELEVBc0JNQyxDQUFXNzZCLEdBQ3BCL3BELEVBQVMwa0YsRUFBTzFrRixPQUVwQixPQUVBLFdBQ0UsSUFBSTRzQixHQUFTLEVBRWIsT0FBU0EsRUFBUTVzQixHQUNmLEdBQUkwa0YsRUFBTzkzRCxHQUFPenRCLE1BQU1tRSxLQUFNbEUsV0FDNUIsT0FBTyxFQUlYLE9BQU8sR0FlWCxTQUFTbWxGLElBQ1AsT0FBTyxFQW5GVHhuRixFQUFPRCxRQUFVb25GLEcsNkJDQWpCLElBQUlXLEVBQWEsRUFBUSxHQUV6QjluRixFQUFPRCxRQUdQLFNBQWlCOGxGLEVBQUsza0YsRUFBTzZtRixHQUMzQixJQUNJOWtGLEVBQ0FtakYsRUFDQXZxQyxFQUNBaHNCLEVBSkE4cUIsRUFBWXo1QyxFQUFNeXdCLE9BQU8sR0FNN0IsR0FBa0IsT0FBZGdwQixFQUNGLE9BSUYsR0FBSW90QyxFQUNGLE9BQU8sRUFHVGw0RCxFQUFRLEVBQ1I1c0IsRUFBUy9CLEVBQU0rQixPQUNmbWpGLEVBQVd6ckMsRUFDWGtCLEVBQVEsR0FFUixLQUFPaHNCLEVBQVE1c0IsSUFDYjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEdBRXBCaTRELEVBQVdudEMsS0FJaEJrQixHQUFTbEIsRUFFUyxPQUFkQSxJQUNGeXJDLEdBQVl2cUMsRUFDWkEsRUFBUSxJQUdWaHNCLElBR0ZnMkQsRUFBSU8sSyw2QkMzQ04sSUFBSTFQLEVBQVMsRUFBUSxJQUNqQnZ3QyxFQUFPLEVBQVEsSUFFbkJubUMsRUFBT0QsUUFVUCxTQUFzQjhsRixFQUFLM2tGLEVBQU82bUYsR0FDaEMsSUFNSXB0QyxFQUNBcXRDLEVBQ0FsbUMsRUFSQWp5QixHQUFTLEVBQ1Q1c0IsRUFBUy9CLEVBQU0rQixPQUNmbWpGLEVBQVcsR0FDWDFyQyxFQUFVLEdBQ1Z1dEMsRUFBZ0IsR0FDaEJDLEVBQWUsR0FLbkIsT0FBU3I0RCxFQUFRNXNCLEdBR2YsR0FGQTAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEdBRXJCaXlCLEVBUUYsR0FQQUEsR0FBUyxFQUVUc2tDLEdBQVk2QixFQUNadnRDLEdBQVd3dEMsRUFDWEQsRUFBZ0IsR0FDaEJDLEVBQWUsR0E1QkwsT0E4Qk52dEMsRUFDRnN0QyxFQUFnQnR0QyxFQUNoQnV0QyxFQUFldnRDLE9BS2YsSUFIQXlyQyxHQUFZenJDLEVBQ1pELEdBQVdDLElBRUY5cUIsRUFBUTVzQixHQUFRLENBR3ZCLEtBRkEwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQXRDbkIsT0F3Q1k4cUIsRUFBeUIsQ0FDekN1dEMsRUFBZXZ0QyxFQUNmc3RDLEVBQWdCdHRDLEVBQ2hCLE1BR0Z5ckMsR0FBWXpyQyxFQUNaRCxHQUFXQyxPQUdWLEdBaERHLE1BaURSQSxHQUNBejVDLEVBQU15d0IsT0FBTzlCLEVBQVEsS0FBTzhxQixHQUM1Qno1QyxFQUFNeXdCLE9BQU85QixFQUFRLEtBQU84cUIsR0FDNUJ6NUMsRUFBTXl3QixPQUFPOUIsRUFBUSxLQUFPOHFCLEVBRTVCc3RDLEdBQWlCRSxFQUNqQnQ0RCxHQUFTLEVBQ1RpeUIsR0FBUyxPQUNKLEdBMURDLE9BMERHbkgsRUFDVHN0QyxHQUFpQnR0QyxFQUNqQm1ILEdBQVMsTUFDSixDQUdMLElBRkFrbUMsRUFBYSxHQTlEUCxPQWdFQ3J0QyxHQS9EQyxNQStEc0JBLEdBQzVCcXRDLEdBQWNydEMsRUFDZEEsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixHQUc3QixHQXRFVSxPQXNFTjhxQixFQUNGLE1BR0ZzdEMsR0FBaUJELEVBQWFydEMsRUFDOUJ1dEMsR0FBZ0J2dEMsRUFJcEIsR0FBSUQsRUFDRixRQUFJcXRDLEdBSUdsQyxFQUFJTyxFQUFKUCxDQUFjLENBQ25CenNELEtBQU0sT0FDTmxSLEtBQU0sS0FDTmhuQixNQUFPaWxDLEVBQUt1VSxNQXZGbEIsSUFLSXl0QyxFQUFjelIsRUFISixJQUVVLEksNkJDVHhCLElBQUl2d0MsRUFBTyxFQUFRLElBRW5Cbm1DLEVBQU9ELFFBV1AsU0FBb0I4bEYsRUFBSzNrRixFQUFPNm1GLEdBQzlCLElBS0lLLEVBQ0F0L0MsRUFDQTZSLEVBQ0EwdEMsRUFDQXhzQyxFQUNBbkIsRUFDQTR0QyxFQUNBQyxFQUNBQyxFQUNBMW1DLEVBQ0E5Z0MsRUFkQXFxQyxFQURPOWtELEtBQ1M2ekIsUUFDaEJuM0IsRUFBUy9CLEVBQU0rQixPQUFTLEVBQ3hCNHNCLEVBQVEsRUFDUnUyRCxFQUFXLEdBYWYsSUFBSy82QixFQUFTK1YsSUFDWixPQUlGLEtBQU92eEMsRUFBUTVzQixJQTlCSCxPQStCVjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBaENqQixPQWtDcUI4cUIsSUFJN0J5ckMsR0FBWXpyQyxFQUNaOXFCLElBUUYsR0FMQWl5QixFQUFTanlCLEVBeENHLE9BMkNaOHFCLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0ExQ2QsTUE0Q2tCOHFCLEVBQzNCLE9BR0Y5cUIsSUFDQWlaLEVBQVM2UixFQUNUeXRDLEVBQWEsRUFDYmhDLEdBQVl6ckMsRUFFWixLQUFPOXFCLEVBQVE1c0IsSUFDYjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLE1BRVBpWixHQUlsQnM5QyxHQUFZenJDLEVBQ1p5dEMsSUFDQXY0RCxJQUdGLEdBQUl1NEQsRUEvRGdCLEVBZ0VsQixPQUlGLEtBQU92NEQsRUFBUTVzQixJQXhFSCxPQXlFVjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBMUVqQixPQTRFcUI4cUIsSUFJN0J5ckMsR0FBWXpyQyxFQUNaOXFCLElBSUZ3NEQsRUFBTyxHQUNQeHNDLEVBQVEsR0FFUixLQUFPaHNCLEVBQVE1c0IsR0F6RkQsUUEwRlowM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQXZGZixNQTJGUjhxQixHQTFGTyxNQTJGUEEsR0E3RlEsTUFrR05BLEdBbkdJLE9BbUdxQkEsRUFDM0JrQixHQUFTbEIsR0FFVDB0QyxHQUFReHNDLEVBQVFsQixFQUNoQmtCLEVBQVEsSUFHVmhzQixJQUtGLElBRkE4cUIsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQTlHWCxPQWdIRzhxQixFQUNmLE9BR0YsR0FBSW90QyxFQUNGLE9BQU8sR0FHVC9tRSxFQUFNNmtFLEVBQUk3a0UsT0FDTjRyQyxRQUFVdzVCLEVBQVNuakYsT0FDdkIrZCxFQUFJeUQsUUFBVTJoRSxFQUFTbmpGLE9BRXZCbWpGLEdBQVlpQyxFQUNaQSxFQW5IVzloRixLQW1IQzB5RCxPQUFPb3NCLElBbkhSOStFLEtBbUhpQnl1RCxTQUFTcXpCLEdBQU9ybkUsR0FFeEM2NkIsSUFDRnVxQyxHQUFZdnFDLEdBR2RBLEVBQVEsR0FDUjBzQyxFQUFVLEdBQ1ZDLEVBQWtCLEdBQ2xCOXRDLEVBQVUsR0FDVjR0QyxFQUFrQixHQUdsQixLQUFPejRELEVBQVE1c0IsR0FPYixHQU5BMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FDekI2cUIsR0FBVzZ0QyxFQUNYRCxHQUFtQkUsRUFDbkJELEVBQVUsR0FDVkMsRUFBa0IsR0EvSU4sT0FpSlI3dEMsRUFBSixDQW9CQSxJQVZJRCxHQUNGNnRDLEdBQVc1dEMsRUFDWDZ0QyxHQUFtQjd0QyxHQUVuQnlyQyxHQUFZenJDLEVBR2RrQixFQUFRLEdBQ1Joc0IsSUFFT0EsRUFBUTVzQixHQW5LTCxPQW9LUjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBTXpCZ3NCLEdBQVNsQixFQUNUOXFCLElBTUYsR0FIQTA0RCxHQUFXMXNDLEVBQ1gyc0MsR0FBbUIzc0MsRUFBTXR6QyxNQUFNdTVDLEtBRTNCakcsRUFBTTU0QyxRQTVLVSxHQTRLcEIsQ0FNQSxJQUZBNDRDLEVBQVEsR0FFRGhzQixFQUFRNXNCLElBQ2IwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixNQUVQaVosR0FJbEIrUyxHQUFTbEIsRUFDVDlxQixJQU1GLEdBSEEwNEQsR0FBVzFzQyxFQUNYMnNDLEdBQW1CM3NDLElBRWZBLEVBQU01NEMsT0FBU21sRixHQUFuQixDQU1BLElBRkF2c0MsRUFBUSxHQUVEaHNCLEVBQVE1c0IsSUEzTUwsT0E0TVIwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQTdNbkIsT0ErTXVCOHFCLElBSTdCNHRDLEdBQVc1dEMsRUFDWDZ0QyxHQUFtQjd0QyxFQUNuQjlxQixJQUdGLElBQUs4cUIsR0F6Tk8sT0F5Tk1BLEVBQ2hCLGFBeEVBRCxHQUFXQyxFQUNYNnRDLEdBQW1CN3RDLEVBQ25COXFCLElBNEVKLE9BQU9nMkQsRUFGUE8sR0FBWTFyQyxFQUFVNnRDLEVBRWYxQyxDQUFjLENBQ25CenNELEtBQU0sT0FDTmxSLEtBQU1tZ0UsR0FBUSxLQUNkbm5GLE1BQU9pbEMsRUFBS21pRCxPLDZCQ3ZPaEIsSUFBSW5pRCxFQUFPLEVBQVEsSUFDZnNpRCxFQUFZLEVBQVEsSUFFeEJ6b0YsRUFBT0QsUUFRUCxTQUFvQjhsRixFQUFLM2tGLEVBQU82bUYsR0FDOUIsSUFVSTNrRSxFQUVBdTNCLEVBQ0ErdEMsRUFDQUMsRUFDQWp1QyxFQUNBbVMsRUFDQSs3QixFQUNBQyxFQUNBQyxFQWxCQXhELEVBRE8vK0UsS0FDUWtlLE9BQ2Yrb0MsRUFGT2puRCxLQUVXazlFLGdCQUNsQmwyQixFQUhPaG5ELEtBR2FpOUUsb0JBQ3BCeGlFLEVBQU02a0UsRUFBSTdrRSxNQUNWK25FLEVBQWMvbkUsRUFBSTZyQyxLQUNsQjVwRCxFQUFTL0IsRUFBTStCLE9BQ2Y0WixFQUFTLEdBQ1RpakUsRUFBVyxHQUNYa0osRUFBVSxHQUVWbjVELEVBQVEsRUFVWixLQUFPQSxFQUFRNXNCLElBMUJILE9BMkJWMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0E1QmpCLE9BOEJxQjhxQixJQUk3QjlxQixJQUdGLEdBbkNTLE1BbUNMM3VCLEVBQU15d0IsT0FBTzlCLEdBQ2YsT0FHRixHQUFJazRELEVBQ0YsT0FBTyxFQUdUbDRELEVBQVEsRUFFUixLQUFPQSxFQUFRNXNCLEdBQVEsQ0FTckIsSUFSQTBsRixFQUFZem5GLEVBQU1rUixRQWpETixLQWlEeUJ5ZCxHQUNyQys0RCxFQUFhLzRELEVBQ2JnNUQsR0FBVyxHQUVRLElBQWZGLElBQ0ZBLEVBQVkxbEYsR0FHUDRzQixFQUFRNXNCLElBdkRMLE9Bd0RSMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0F6RG5CLE9BMkR1QjhxQixJQUk3QjlxQixJQWdCRixHQTdFTyxNQWdFSDN1QixFQUFNeXdCLE9BQU85QixJQUNmQSxJQUNBZzVELEdBQVcsRUFuRUgsTUFxRUozbkYsRUFBTXl3QixPQUFPOUIsSUFDZkEsS0FHRkEsRUFBUSs0RCxFQUdWbHVDLEVBQVV4NUMsRUFBTXFILE1BQU1zbkIsRUFBTzg0RCxJQUV4QkUsSUFBYTFpRCxFQUFLdVUsR0FBVSxDQUMvQjdxQixFQUFRKzRELEVBQ1IsTUFHRixJQUFLQyxJQUNISCxFQUFPeG5GLEVBQU1xSCxNQUFNc25CLEdBSWY0NEQsRUFBVWw3QixFQUFjQyxFQW5GckJqbkQsS0FtRnVDLENBQUNzL0UsRUFBSzZDLEdBQU0sS0FDeEQsTUFJSjc3QixFQUFPKzdCLElBQWUvNEQsRUFBUTZxQixFQUFVeDVDLEVBQU1xSCxNQUFNcWdGLEVBQVlELEdBRWhFSyxFQUFRcGxGLEtBQUtpc0IsRUFBUSs0RCxHQUNyQi9yRSxFQUFPalosS0FBS2lwRCxHQUNaaXpCLEVBQVNsOEUsS0FBSzgyQyxHQUVkN3FCLEVBQVE4NEQsRUFBWSxFQUd0Qjk0RCxHQUFTLEVBQ1Q1c0IsRUFBUytsRixFQUFRL2xGLE9BQ2pCbWdCLEVBQU15aUUsRUFBSWhwRSxFQUFPclUsS0ExR0gsT0E0R2QsT0FBU3FuQixFQUFRNXNCLEdBQ2ZxaUYsRUFBUXlELElBQWdCekQsRUFBUXlELElBQWdCLEdBQUtDLEVBQVFuNUQsR0FDN0RrNUQsSUFPRixPQUpBRCxFQTFHV3ZpRixLQTBHQzg4RSxhQUNadkQsRUEzR1d2NUUsS0EyR0t1K0UsY0FBY2hGLEVBQVN0M0UsS0FsSHpCLE1Ba0gwQ3dZLEdBQ3hEOG5FLElBRU8xbEUsRUFBSSxDQUNUZ1csS0FBTSxhQUNOOFksU0FBVTR0QyxNLDZCQzVIZDkvRSxFQUFPRCxRQVNQLFNBQW9COGxGLEVBQUsza0YsRUFBTzZtRixHQUM5QixJQU9JcHRDLEVBQ0FrQixFQUNBNkYsRUFSQTJKLEVBRE85a0QsS0FDUzZ6QixRQUNoQm4zQixFQUFTL0IsRUFBTStCLE9BQVMsRUFDeEI0c0IsR0FBUyxFQUNUN08sRUFBTTZrRSxFQUFJN2tFLE1BQ1ZvbEUsRUFBVyxHQUNYMXJDLEVBQVUsR0FNZCxPQUFTN3FCLEVBQVE1c0IsR0FBUSxDQUd2QixHQXJCVSxPQW1CVjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBcEJqQixPQXNCcUI4cUIsRUFBcUIsQ0FDaEQ5cUIsSUFDQSxNQUdGdTJELEdBQVl6ckMsRUFJZCtHLEVBQVEsRUFFUixPQUFTN3hCLEdBQVM1c0IsR0FBUSxDQUd4QixHQWxDUyxPQWdDVDAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLElBRUMsQ0FDeEJBLElBQ0EsTUFHRnUyRCxHQUFZenJDLEVBQ1orRyxJQUdGLEdBQUlBLEVBekNjLEVBMENoQixPQUdGLElBQ0dBLElBQ0MySixFQUFTa1csVUFqREYsTUFpRGNyZ0UsRUFBTXl3QixPQUFPOUIsRUFBUSxHQUU1QyxPQUdGNXNCLEVBQVMvQixFQUFNK0IsT0FBUyxFQUd4QjQ0QyxFQUFRLEdBRVIsT0FBU2hzQixFQUFRNXNCLEdBQVEsQ0FHdkIsR0EvRFUsT0E2RFYwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQTlEakIsT0FnRXFCOHFCLEVBQXFCLENBQ2hEOXFCLElBQ0EsTUFHRmdzQixHQUFTbEIsRUFJWCxJQUNHMFEsRUFBU2tXLFVBQ08sSUFBakIxbEIsRUFBTTU0QyxRQUNOMDNDLEdBN0VZLE9BOEVaQSxFQUVBLE9BR0YsR0FBSW90QyxFQUNGLE9BQU8sRUFJVDNCLEdBQVl2cUMsRUFDWkEsRUFBUSxHQUNSbkIsRUFBVSxHQUVWLE9BQVM3cUIsRUFBUTVzQixJQUNmMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0E3RmIsT0ErRk04cUIsR0FJbEIsR0FqR1UsTUFrR1JBLEdBbkdNLE9Bb0dOQSxHQWxHTyxNQW1HUEEsRUFIRixDQVVBLEtBM0dVLE1BMkdIQSxHQTVHQyxPQTRHd0JBLEdBQzlCa0IsR0FBU2xCLEVBQ1RBLEVBQVl6NUMsRUFBTXl3QixTQUFTOUIsR0FHN0IsS0EvR1MsTUErR0Y4cUIsR0FDTGtCLEdBQVNsQixFQUNUQSxFQUFZejVDLEVBQU15d0IsU0FBUzlCLEdBRzdCLEtBckhVLE1BcUhIOHFCLEdBdEhDLE9Bc0h3QkEsR0FDOUJrQixHQUFTbEIsRUFDVEEsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixHQUc3QkEsU0FwQkU2cUIsR0FBV21CLEVBQVFsQixFQUNuQmtCLEVBQVEsR0EwQlosT0FKQTc2QixFQUFJNHJDLFFBQVV3NUIsRUFBU25qRixPQUN2QitkLEVBQUl5RCxRQUFVMmhFLEVBQVNuakYsT0FHaEI0aUYsRUFGUE8sR0FBWTFyQyxFQUFVbUIsRUFFZmdxQyxDQUFjLENBQ25CenNELEtBQU0sVUFDTnNvQixNQUFPQSxFQUNQeFAsU0E5SFMzckMsS0E4SE13K0UsZUFBZXJxQyxFQUFTMTVCLE8sNkJDeEkzQ2hoQixFQUFPRCxRQVdQLFNBQXVCOGxGLEVBQUsza0YsRUFBTzZtRixHQUNqQyxJQUdJcHRDLEVBQ0E3UixFQUNBbWdELEVBQ0FwdEMsRUFOQWhzQixHQUFTLEVBQ1Q1c0IsRUFBUy9CLEVBQU0rQixPQUFTLEVBQ3hCbWpGLEVBQVcsR0FNZixPQUFTdjJELEVBQVE1c0IsSUFqQlAsUUFrQlIwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQWpCZixNQW1CaUI4cUIsSUFJM0J5ckMsR0FBWXpyQyxFQUdkLEdBekJlLE1BMEJiQSxHQXhCUyxNQXlCVEEsR0ExQmUsTUEyQmZBLEVBRUEsT0FHRjdSLEVBQVM2UixFQUNUeXJDLEdBQVl6ckMsRUFDWnN1QyxFQUFjLEVBQ2RwdEMsRUFBUSxHQUVSLE9BQVNoc0IsRUFBUTVzQixHQUdmLElBRkEwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixNQUVQaVosRUFDaEJtZ0QsSUFDQTdDLEdBQVl2cUMsRUFBUS9TLEVBQ3BCK1MsRUFBUSxPQUNILElBOUNHLE1BOENDbEIsRUFFSixPQUNMc3VDLEdBNUM0QixLQTZDMUJ0dUMsR0FwRFEsT0FvREtBLElBRWZ5ckMsR0FBWXZxQyxJQUVSa3NDLEdBSUdsQyxFQUFJTyxFQUFKUCxDQUFjLENBQUN6c0QsS0FBTSx3QkFFNUIsRUFiQXlpQixHQUFTbEIsSyw2QkNqRGYsSUFBSXhVLEVBQU8sRUFBUSxJQUNmdXdDLEVBQVMsRUFBUSxJQUNqQjFyQixFQUFVLEVBQVEsSUFDbEJ4SSxFQUFZLEVBQVEsS0FDcEIwbUMsRUFBZSxFQUFRLEtBQ3ZCVCxFQUFZLEVBQVEsSUFFeEJ6b0YsRUFBT0QsUUF5Q1AsU0FBYzhsRixFQUFLM2tGLEVBQU82bUYsR0FDeEIsSUFLSWpnRCxFQUtBK1QsRUFDQXN0QyxFQUNBeHVDLEVBQ0E3UixFQUNBNi9DLEVBQ0FDLEVBQ0FDLEVBQ0FPLEVBQ0ExdUMsRUFDQW1TLEVBQ0F3OEIsRUFDQTlrRixFQUNBK2tGLEVBQ0FDLEVBQ0FDLEVBQ0FwaUUsRUFDQXFpRSxFQUNBQyxFQUNBQyxFQUNBM3dELEVBQ0FoWSxFQUNBd3BCLEVBQ0FvL0MsRUEvQkF2b0IsRUFETzk2RCxLQUNXNnpCLFFBQVFpbkMsV0FDMUJFLEVBRk9oN0QsS0FFUzZ6QixRQUFRbW5DLFNBQ3hCL1QsRUFIT2puRCxLQUdXazlFLGdCQUNsQm9HLEVBSk90akYsS0FJWWc5RSxjQUVuQjF6RCxFQUFRLEVBQ1I1c0IsRUFBUy9CLEVBQU0rQixPQUNmc29ELEVBQVEsS0FDUmhsQixFQUFPLEVBeUJYLEtBQU8xVyxFQUFRNXNCLEdBQVEsQ0FHckIsR0F0RVEsUUFvRVIwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixJQUd2QjBXLEdBbkVTLEVBbUVXQSxFQW5FWCxNQW9FSixJQTFFRyxNQTBFQ29VLEVBR1QsTUFGQXBVLElBS0YxVyxJQUdGLEdBQUkwVyxHQTdFUyxFQThFWCxPQVNGLEdBTkFvVSxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEdBRXpCaVksRUFBVXU1QixFQUNSeW9CLEVBQ0FDLEdBRXdDLElBQXRDQyxFQUF1QnJ2QyxHQUN6QjdSLEVBQVM2UixFQUNUd3VDLEdBQVUsTUFDTCxDQUlMLElBSEFBLEdBQVUsRUFDVnR0QyxFQUFRLEdBRURoc0IsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFcEJtN0IsRUFBUXJRLEtBSWJrQixHQUFTbEIsRUFDVDlxQixJQUtGLEdBRkE4cUIsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixJQUVwQmdzQixJQUFnQyxJQUF2Qi9ULEVBQVE2UyxHQUNwQixPQUdGNFEsRUFBUXA1QyxTQUFTMHBDLEVBQU8sSUFDeEIvUyxFQUFTNlIsRUFLWCxHQTNIWSxPQXlIWkEsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixLQXZIakIsT0F5SG1COHFCLEVBQzNCLE9BR0YsR0FBSW90QyxFQUNGLE9BQU8sRUFHVGw0RCxFQUFRLEVBQ1J5NUQsRUFBUSxHQUNSQyxFQUFXLEdBQ1hDLEVBQWEsR0FFYixLQUFPMzVELEVBQVE1c0IsR0FBUSxDQWFyQixJQVpBMGxGLEVBQVl6bkYsRUFBTWtSLFFBeElOLEtBd0l5QnlkLEdBQ3JDKzRELEVBQWEvNEQsRUFDYmc1RCxHQUFXLEVBQ1hlLEdBQVcsR0FFUSxJQUFmakIsSUFDRkEsRUFBWTFsRixHQUdkdW5DLEVBQU0zYSxFQTVJSyxFQTZJWDBXLEVBQU8sRUFFQTFXLEVBQVE1c0IsR0FBUSxDQUdyQixHQXRKTSxRQW9KTjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLElBR3ZCMFcsR0FuSk8sRUFtSmFBLEVBbkpiLE1Bb0pGLElBMUpDLE1BMEpHb1UsRUFHVCxNQUZBcFUsSUFLRjFXLElBY0YsR0FYSTBXLEdBN0pPLElBOEpUcWpELEdBQVcsR0FHVHhpRSxHQUFRbWYsR0FBUW5mLEVBQUswNkIsU0FDdkI4bkMsR0FBVyxHQUdianZDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FDekJ1NUQsRUFBZ0IsTUFFWFEsRUFBVSxDQUNiLElBQTBDLElBQXRDSSxFQUF1QnJ2QyxHQUN6Qnl1QyxFQUFnQnp1QyxFQUNoQjlxQixJQUNBMFcsUUFDSyxDQUdMLElBRkFzVixFQUFRLEdBRURoc0IsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFcEJtN0IsRUFBUXJRLEtBSWJrQixHQUFTbEIsRUFDVDlxQixJQUdGOHFCLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FDekJBLElBRUlnc0IsSUFBZ0MsSUFBdkIvVCxFQUFRNlMsS0FDbkJ5dUMsRUFBZ0J6dUMsRUFDaEJwVSxHQUFRc1YsRUFBTTU0QyxPQUFTLEdBSTNCLEdBQUltbUYsRUFHRixHQTNNSSxRQXlNSnp1QyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLElBR3ZCMFcsR0F4TUssRUF3TWVBLEVBeE1mLEVBeU1MMVcsU0FDSyxHQWhORCxNQWdOSzhxQixFQUF1QixDQUdoQyxJQUZBblEsRUFBTTNhLEVBM01ELEVBNk1FQSxFQUFRMmEsR0FuTlgsTUFvTkV0cEMsRUFBTXl3QixPQUFPOUIsSUFJakJBLElBQ0EwVyxJQUdFMVcsSUFBVTJhLEdBNU5WLE1BNE5pQnRwQyxFQUFNeXdCLE9BQU85QixLQUNoQ0EsR0FBU282RCxFQUNUMWpELEdBQVEwakQsT0E3TkosT0ErTkd0dkMsR0FBeUMsS0FBZEEsSUFDcEN5dUMsRUFBZ0IsTUFLdEIsR0FBSUEsRUFBZSxDQUNqQixJQUFLN25CLEdBQVl6NEIsSUFBV3NnRCxFQUMxQixNQUdGUCxHQUFXLE9BRU54bkIsR0FBZXVvQixHQTdPWixNQTZPd0Ixb0YsRUFBTXl3QixPQUFPaTNELEdBRWxDdm5CLEdBQWNqNkMsSUFDdkJ3aUUsRUFBV3JqRCxHQUFRbmYsRUFBSzA2QixRQUFVdmIsRUExTzNCLEdBd09QcWpELEdBQVcsRUFLYmYsR0FBVyxFQUNYaDVELEVBQVErNEQsRUFNVixHQUhBLzdCLEVBQU8zckQsRUFBTXFILE1BQU1xZ0YsRUFBWUQsR0FDL0JqdUMsRUFBVWt1QyxJQUFlLzRELEVBQVFnOUIsRUFBTzNyRCxFQUFNcUgsTUFBTXNuQixFQUFPODRELElBN1A5QyxNQWdRWFMsR0EvUGEsTUFnUWJBLEdBOVBPLE1BK1BQQSxJQUVJNTdCLEVBQVd1MkIsY0FBYzNqRixLQTVOdEJtRyxLQTROaUNzL0UsRUFBS2g1QixHQUFNLEdBQ2pELE1BT0osR0FIQXc4QixFQUFZOWtGLEVBQ1pBLEdBQVM0aEMsRUFBS3VVLEdBQVN6M0MsT0FFbkIybUYsR0FBWXhpRSxFQUNkQSxFQUFLbG1CLE1BQVFrbUIsRUFBS2xtQixNQUFNMlcsT0FBTzJ4RSxFQUFZMzhCLEdBQzNDMDhCLEVBQVdBLEVBQVMxeEUsT0FBTzJ4RSxFQUFZMzhCLEdBQ3ZDMjhCLEVBQWEsUUFDUixHQUFJWCxFQUNpQixJQUF0QlcsRUFBV3ZtRixTQUNibWtCLEVBQUtsbUIsTUFBTTBDLEtBQUssSUFDaEJ3akIsRUFBSzhpRSxNQUFRVixFQUFXM3hFLFVBRzFCdVAsRUFBTyxDQUNMbG1CLE1BQU8sQ0FBQzJyRCxHQUNSL0ssT0FBUXZiLEVBQ1IyakQsTUFBTyxJQUdUWixFQUFNMWxGLEtBQUt3akIsR0FDWG1pRSxFQUFXQSxFQUFTMXhFLE9BQU8yeEUsRUFBWTM4QixHQUN2QzI4QixFQUFhLFFBQ1IsR0FBSWpsRixFQUFPLENBQ2hCLEdBQUk4a0YsRUFDRixNQUdGRyxFQUFXNWxGLEtBQUtpcEQsT0FDWCxDQUNMLEdBQUl3OEIsRUFDRixNQUdGLEdBQUlaLEVBQVVvQixFQUFhcjhCLEVBbFFwQmpuRCxLQWtRc0MsQ0FBQ3MvRSxFQUFLaDVCLEdBQU0sSUFDdkQsTUFHRnpsQyxFQUFLbG1CLE1BQVFrbUIsRUFBS2xtQixNQUFNMlcsT0FBTzJ4RSxFQUFZMzhCLEdBQzNDMDhCLEVBQVdBLEVBQVMxeEUsT0FBTzJ4RSxFQUFZMzhCLEdBQ3ZDMjhCLEVBQWEsR0FHZjM1RCxFQUFRODRELEVBQVksRUFHdEIzdkQsRUFBTzZzRCxFQUFJMEQsRUFBUy9nRixLQWhUTixPQWdUdUJ3a0MsTUFBTSxDQUN6QzVULEtBQU0sT0FDTit2RCxRQUFTQSxFQUNUNTlCLE1BQU9BLEVBQ1A0K0IsTUFBTyxLQUNQajRDLFNBQVUsS0FHWnUzQyxFQXRSV2xqRixLQXNSSzQ4RSxZQUNoQnVHLEVBdlJXbmpGLEtBdVJXODhFLGFBQ3RCc0csR0FBVSxFQUNWOTVELEdBQVMsRUFDVDVzQixFQUFTcW1GLEVBQU1ybUYsT0FFZixPQUFTNHNCLEVBQVE1c0IsR0FDZm1rQixFQUFPa2lFLEVBQU16NUQsR0FBTzN1QixNQUFNc0gsS0EvVGQsTUFnVVp3WSxFQUFNNmtFLEVBQUk3a0UsT0FFVm9HLEVBQU95K0QsRUFBSXorRCxFQUFKeStELENBQVV1RSxFQWhTUjdqRixLQWdTdUI2Z0IsRUFBTXBHLEdBQU1nWSxJQUVuQ214RCxRQUNQUixHQUFVLEdBR1p2aUUsRUFBT2tpRSxFQUFNejVELEdBQU9xNkQsTUFBTTFoRixLQXhVZCxNQTBVUnFuQixJQUFVNXNCLEVBQVMsSUFDckJta0IsR0EzVVUsTUE4VVp5K0QsRUFBSXorRCxHQVFOLE9BTEFxaUUsSUFDQUMsSUFFQTF3RCxFQUFLbXhELE1BQVFSLEVBRU4zd0QsR0E1VlQsSUFZSXF4RCxFQUE2QixlQUM3QkMsRUFBdUIsdUJBQ3ZCQyxFQUFvQiw4REFDcEJDLEVBQTZCLG1DQUM3QkMsRUFBNEIsa0JBSTVCVCxFQUF5QixDQUU3QixLQUFxQyxFQUNyQyxLQUFpQyxFQUNqQyxLQUFpQyxHQUk3QkQsRUFBdUIsQ0FFM0IsS0FBOEIsR0FJMUJELEVBQWtDLEdBNlR0QyxTQUFTTSxFQUFTMzhCLEVBQUt2c0QsRUFBT29xRCxHQUM1QixJQUdJby9CLEVBQ0E1b0MsRUFKQXdqQyxFQUFVNzNCLEVBQUlocEMsT0FDZGhoQixFQUFLZ3FELEVBQUlyekIsUUFBUW1uQyxTQUFXb3BCLEVBQW1CQyxFQUMvQ0MsRUFBVSxLQWlCZCxPQWJBM3BGLEVBQVF1QyxFQUFHckIsTUFBTSxLQUFNQyxXQUVuQm9yRCxFQUFJcnpCLFFBQVFnbkMsTUFDZHNwQixFQUFPeHBGLEVBQU00SixNQUFNdy9FLE1BR2pCeG9DLEVBQVM0b0MsRUFBSyxHQUFHem5GLE9BQ2pCNG5GLEVBcFdVLE1Bb1dBSCxFQUFLLEdBQUdsOEUsY0FDbEI4MkUsRUFBUWg2QixFQUFTdUIsT0FBUy9LLEVBQzFCNWdELEVBQVFBLEVBQU1xSCxNQUFNdTVDLElBSWpCLENBQ0wxb0IsS0FBTSxXQUNOK3dELE1BQU9FLEVBQTJCOStFLEtBQUtySyxJQS9XM0IsT0FnWFZBLEVBQU15d0IsT0FBT3p3QixFQUFNK0IsT0FBUyxHQUM5QjRuRixRQUFTQSxFQUNUMzRDLFNBQVV1YixFQUFJcTNCLGNBQWM1akYsRUFBT29xRCxJQUt2QyxTQUFTcS9CLEVBQWlCbDlCLEVBQUt2c0QsRUFBT29xRCxHQUNwQyxJQUFJZzZCLEVBQVU3M0IsRUFBSWhwQyxPQUNkb29DLEVBQU92QixFQUFTdUIsS0FTcEIsT0FOQTNyRCxFQUFRQSxFQUFNNkosUUFBUXkvRSxFQUE0QnprQixHQUlsRGxaLEVBQU92QixFQUFTdUIsS0FFVDNyRCxFQUFNNkosUUFBUTAvRSxFQUEyQjFrQixHQUloRCxTQUFTQSxFQUFTeE0sR0FJaEIsT0FIQStyQixFQUFRejRCLElBQVN5NEIsRUFBUXo0QixJQUFTLEdBQUswTSxFQUFHdDJELE9BQzFDNHBELElBRU8sSUFLWCxTQUFTKzlCLEVBQWVuOUIsRUFBS3ZzRCxFQUFPb3FELEdBQ2xDLElBRUl4aEQsRUFDQWdoRixFQUNBcEMsRUFDQS83QixFQUNBbytCLEVBQ0FsN0QsRUFDQTVzQixFQVJBcWlGLEVBQVU3M0IsRUFBSWhwQyxPQUNkb29DLEVBQU92QixFQUFTdUIsS0E4QnBCLElBbEJBRixHQUZBenJELEVBQVFBLEVBQU02SixRQUFRdy9FLEdBNEJ0QixTQUFrQmh4QixFQUFJc0UsRUFBSUMsRUFBSWt0QixFQUFJQyxHQUNoQ0gsRUFBU2p0QixFQUFLQyxFQUFLa3RCLEVBQ25CdEMsRUFBT3VDLEVBS0gvbUMsT0FBTzRaLEdBQU0sSUFBTWd0QixFQUFPN25GLE9BQVMsR0FBTSxJQUMzQzY2RCxFQWhjUSxJQWdjT0EsR0FLakIsT0FGQWgwRCxFQUFNK3pELEVBQUs2WSxFQW5jRCxJQW1jaUI1WSxFQUFHNzZELFFBQVUrbkYsR0FFM0J0QyxNQXZDRDN6RSxNQTdaQSxPQStaZGcyRSxFQUFlN0IsRUFBYWhvRixFQUFPc2hELEVBQVUxNEMsR0FBS2c0QyxRQUFRL3NDLE1BL1o1QyxPQXVhRCxHQUFLMnpFLEVBRWxCcEQsRUFBUXo0QixJQUFTeTRCLEVBQVF6NEIsSUFBUyxHQUFLaStCLEVBQU83bkYsT0FDOUM0cEQsSUFFQWg5QixFQUFRLEVBQ1I1c0IsRUFBUzBwRCxFQUFNMXBELFNBRU40c0IsRUFBUTVzQixHQUNmcWlGLEVBQVF6NEIsSUFBU3k0QixFQUFRejRCLElBQVMsR0FDaENGLEVBQU05OEIsR0FBTzVzQixPQUFTOG5GLEVBQWFsN0QsR0FBTzVzQixPQUM1QzRwRCxJQUdGLE9BQU9rK0IsRUFBYXZpRixLQXJiTixNQThCaEJzaEYsRUFoQ1ksTUFnQzZCLEVBQ3pDQSxFQTdCb0IsTUE2QjZCLEcsNkJDaERqRCxJQUFJM2pELEVBQU8sRUFBUSxJQUNmdXdDLEVBQVMsRUFBUSxJQUNqQmwwQixFQUFZLEVBQVEsS0FFeEJ4aUQsRUFBT0QsUUFTUCxTQUFxQm1CLEVBQU9ncUYsR0FDMUIsSUFJSXI3RCxFQUNBMDJELEVBQ0E5a0IsRUFDQTBwQixFQVBBdHVFLEVBQVMzYixFQUFNNlQsTUFQTCxNQVFWdTJDLEVBQVd6dUMsRUFBTzVaLE9BQVMsRUFDM0Jtb0YsRUFBWWpyQyxJQUNaa3JDLEVBQVMsR0FNYnh1RSxFQUFPK2lELFFBQVE4VyxFQWpCSCxJQWlCbUJ3VSxHQUFXLEtBRTFDLEtBQU81L0IsS0FLTCxHQUpBaTdCLEVBQWMvakMsRUFBVTNsQyxFQUFPeXVDLElBRS9CKy9CLEVBQU8vL0IsR0FBWWk3QixFQUFZOWtCLE1BRU8sSUFBbEN0N0IsRUFBS3RwQixFQUFPeXVDLElBQVdyb0QsT0FBM0IsQ0FJQSxJQUFJc2pGLEVBQVl6a0MsT0FJVCxDQUNMc3BDLEVBQVlqckMsSUFFWixNQU5Jb21DLEVBQVl6a0MsT0FBUyxHQUFLeWtDLEVBQVl6a0MsT0FBU3NwQyxJQUNqREEsRUFBWTdFLEVBQVl6a0MsUUFTOUIsR0FBSXNwQyxJQUFjanJDLElBR2hCLElBRkFtTCxFQUFXenVDLEVBQU81WixPQUVYcW9ELEtBQVksQ0FJakIsSUFIQW1XLEVBQVE0cEIsRUFBTy8vQixHQUNmejdCLEVBQVF1N0QsRUFFRHY3RCxLQUFXQSxLQUFTNHhDLElBQ3pCNXhDLElBUUFzN0QsRUFKa0MsSUFBbENobEQsRUFBS3RwQixFQUFPeXVDLElBQVdyb0QsUUFDdkJtb0YsR0FDQXY3RCxJQUFVdTdELEVBbkROLEtBdURNLEdBR1p2dUUsRUFBT3l1QyxHQUFZNi9CLEVBQVV0dUUsRUFBT3l1QyxHQUFVL2lELE1BQzVDc25CLEtBQVM0eEMsRUFBUUEsRUFBTTV4QyxHQUFTLEVBQUksR0FPMUMsT0FGQWhULEVBQU91VCxRQUVBdlQsRUFBT3JVLEtBbkVBLFEsNkJDUGhCeEksRUFBT0QsUUFpQlAsU0FBdUI4bEYsRUFBSzNrRixFQUFPNm1GLEdBQ2pDLElBS0lydEMsRUFDQW1CLEVBQ0FsQixFQUNBN1IsRUFDQTRZLEVBUkExZ0MsRUFBTTZrRSxFQUFJN2tFLE1BQ1YvZCxFQUFTL0IsRUFBTStCLE9BQ2Y0c0IsR0FBUyxFQUNUdTJELEVBQVcsR0FRZixPQUFTdjJELEVBQVE1c0IsR0FBUSxDQUd2QixHQTdCVSxPQTJCVjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBRUlBLEdBekJSLEVBeUJxQyxDQUN4REEsSUFDQSxNQUdGdTJELEdBQVl6ckMsRUFJZEQsRUFBVSxHQUNWbUIsRUFBUSxHQUVSLE9BQVNoc0IsRUFBUTVzQixHQUFRLENBR3ZCLEdBOUNZLFFBNENaMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsSUFFSSxDQUMzQkEsSUFDQSxNQTlDUSxNQWlETjhxQixHQWxESSxPQWtEcUJBLEVBQzNCa0IsR0FBU2xCLEdBRVRELEdBQVdtQixFQUFRbEIsRUFDbkJrQixFQUFRLElBYVosR0FUQTc2QixFQUFJNHJDLFFBQVV3NUIsRUFBU25qRixPQUN2QitkLEVBQUl5RCxRQUFVMmhFLEVBQVNuakYsT0FDdkJtakYsR0FBWTFyQyxFQUFVbUIsRUFJdEJsQixFQUFZejVDLEVBQU15d0IsU0FBUzlCLEdBQzNCaVosRUFBUzVuQyxFQUFNeXdCLFNBQVM5QixHQWxFVixPQW9FVjhxQixJQUE0QjJ3QyxFQUFleGlELEdBQzdDLE9BR0ZzOUMsR0FBWXpyQyxFQUdaa0IsRUFBUS9TLEVBQ1I0WSxFQUFRNHBDLEVBQWV4aUQsR0FFdkIsT0FBU2paLEVBQVE1c0IsR0FBUSxDQUd2QixJQUZBMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsTUFFUGlaLEVBQVEsQ0FDeEIsR0FsRlUsT0FrRk42UixFQUNGLE9BR0Y5cUIsSUFDQSxNQUdGZ3NCLEdBQVNsQixFQUdYLEdBQUlvdEMsRUFDRixPQUFPLEVBR1QsT0FBT2xDLEVBQUlPLEVBQVd2cUMsRUFBZmdxQyxDQUFzQixDQUMzQnpzRCxLQUFNLFVBQ05zb0IsTUFBT0EsRUFDUHhQLFNBcEZTM3JDLEtBb0ZNdytFLGVBQWVycUMsRUFBUzE1QixNQXBHM0MsSUFVSXNxRSxFQUFpQixHQUVyQkEsRUFUZSxLQVNZLEVBQzNCQSxFQVRhLEtBU1ksRyw2QkNmekIsSUFBSTFwQixFQUFlLEVBQVEsS0FBZ0JBLGFBRTNDNWhFLEVBQU9ELFFBT1AsU0FBbUI4bEYsRUFBSzNrRixFQUFPNm1GLEdBQzdCLElBSUl4cUUsRUFDQXN2QyxFQUNBcG9DLEVBQ0FrMkIsRUFDQW1ULEVBQ0F5OUIsRUFDQW5GLEVBVEE1a0IsRUFET2o3RCxLQUNPNnpCLFFBQVFvbkMsT0FDdEJ2K0QsRUFBUy9CLEVBQU0rQixPQUNmNHNCLEVBQVEsRUFTUjI3RCxFQUFZLENBQ2QsQ0FBQyxvQ0FBcUMsMkJBQTJCLEdBQ2pFLENBQUMsUUFBUyxPQUFPLEdBQ2pCLENBQUMsT0FBUSxPQUFPLEdBQ2hCLENBQUMsY0FBZSxLQUFLLEdBQ3JCLENBQUMsZUFBZ0IsU0FBUyxHQUMxQixDQUFDLElBQUk3NkUsT0FBTyxRQUFVNndELEVBQU9oNUQsS0FBSyxLQUFPLG1CQUFvQixLQUFNLE1BQU0sR0FDekUsQ0FBQyxJQUFJbUksT0FBT2l4RCxFQUFhN3dDLE9BQVMsU0FBVSxNQUFNLElBSXBELEtBQU9sQixFQUFRNXNCLElBN0JMLFFBOEJSMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0E3QmYsTUErQmlCOHFCLElBSTNCOXFCLElBR0YsR0FwQ1MsTUFvQ0wzdUIsRUFBTXl3QixPQUFPOUIsR0FDZixPQUlGdFMsR0FBaUIsS0FEakJBLEVBQU9yYyxFQUFNa1IsUUF6Q0MsS0F5Q2tCeWQsRUFBUSxJQUNuQjVzQixFQUFTc2EsRUFDOUJzdkMsRUFBTzNyRCxFQUFNcUgsTUFBTXNuQixFQUFPdFMsR0FDMUJrSCxHQUFVLEVBQ1ZxcEMsRUFBUTA5QixFQUFVdm9GLE9BRWxCLE9BQVN3aEIsRUFBU3FwQyxHQUNoQixHQUFJMDlCLEVBQVUvbUUsR0FBUSxHQUFHbFosS0FBS3NoRCxHQUFPLENBQ25DMCtCLEVBQVdDLEVBQVUvbUUsR0FDckIsTUFJSixJQUFLOG1FLEVBQ0gsT0FHRixHQUFJeEQsRUFDRixPQUFPd0QsRUFBUyxHQUtsQixHQUZBMTdELEVBQVF0UyxHQUVIZ3VFLEVBQVMsR0FBR2hnRixLQUFLc2hELEdBQ3BCLEtBQU9oOUIsRUFBUTVzQixHQUFRLENBS3JCLEdBSEFzYSxHQUFpQixLQURqQkEsRUFBT3JjLEVBQU1rUixRQWxFSCxLQWtFc0J5ZCxFQUFRLElBQ25CNXNCLEVBQVNzYSxFQUM5QnN2QyxFQUFPM3JELEVBQU1xSCxNQUFNc25CLEVBQVEsRUFBR3RTLEdBRTFCZ3VFLEVBQVMsR0FBR2hnRixLQUFLc2hELEdBQU8sQ0FDdEJBLElBQ0ZoOUIsRUFBUXRTLEdBR1YsTUFHRnNTLEVBQVF0UyxFQU1aLE9BRkE2b0UsRUFBV2xsRixFQUFNcUgsTUFBTSxFQUFHc25CLEdBRW5CZzJELEVBQUlPLEVBQUpQLENBQWMsQ0FBQ3pzRCxLQUFNLE9BQVFsNEIsTUFBT2tsRixNLDZCQzFGN0MsSUFBSTBCLEVBQWEsRUFBUSxHQUNyQjluQixFQUFZLEVBQVEsSUFFeEJoZ0UsRUFBT0QsUUFBVTByRixFQUNqQkEsRUFBbUJ6RixXQUFZLEVBQy9CeUYsRUFBbUJ4RixZQUFhLEVBRWhDLElBU0l5RixFQUF5QixnQkFFN0IsU0FBU0QsRUFBbUI1RixFQUFLM2tGLEVBQU82bUYsR0FDdEMsSUFFSWw0RCxFQUNBNXNCLEVBQ0FtakYsRUFDQXBsRSxFQUNBK25FLEVBQ0FydUMsRUFDQW1CLEVBQ0E4dkMsRUFDQWh4QyxFQUNBaXhDLEVBQ0F4b0UsRUFDQTBsRSxFQVpBeEQsRUFETy8rRSxLQUNRa2UsT0FjbkIsR0FmV2xlLEtBZUQ2ekIsUUFBUWtuQyxVQUFsQixDQVVBLElBTkF6eEMsRUFBUSxFQUNSNXNCLEVBQVMvQixFQUFNK0IsT0FDZm1qRixFQUFXLEdBQ1hwbEUsRUFBTTZrRSxFQUFJN2tFLE1BQ1YrbkUsRUFBYy9uRSxFQUFJNnJDLEtBRVhoOUIsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFcEJpNEQsRUFBV250QyxLQUloQnlyQyxHQUFZenJDLEVBQ1o5cUIsSUFHRixHQTVDbUIsTUE2Q2pCM3VCLEVBQU15d0IsT0FBTzlCLElBM0NILE1BNENWM3VCLEVBQU15d0IsT0FBTzlCLEVBQVEsR0FGdkIsQ0FXQSxJQUhBQSxHQURBdTJELEdBQVl5RixNQUNLNW9GLE9BQ2pCNDRDLEVBQVEsR0FFRGhzQixFQUFRNXNCLEdBdERLLE9BdURsQjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBNURYLE9BZ0VIOHFCLElBQ1RrQixHQUFTbEIsRUFDVDlxQixJQUNBOHFCLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsSUFHM0Jnc0IsR0FBU2xCLEVBQ1Q5cUIsSUFHRixHQUNHZ3NCLEdBdEVpQixNQXVFbEIzNkMsRUFBTXl3QixPQUFPOUIsSUFyRUgsTUFzRVYzdUIsRUFBTXl3QixPQUFPOUIsRUFBUSxHQUh2QixDQVFBLEdBQUlrNEQsRUFDRixPQUFPLEVBT1QsSUFKQTZELEVBQWE1ckIsRUFBVW5rQixHQUV2QmhzQixHQURBdTJELEdBQVl2cUMsUUFDSzU0QyxPQUVWNHNCLEVBQVE1c0IsSUF4RkwsUUF5RlIwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQXhGZixNQTBGaUI4cUIsSUFJM0J5ckMsR0FBWXpyQyxFQUNaOXFCLElBU0YsSUFOQTdPLEVBQUk0ckMsUUFBVXc1QixFQUFTbmpGLE9BQ3ZCK2QsRUFBSXlELFFBQVUyaEUsRUFBU25qRixPQUN2QjQ0QyxFQUFRLEdBQ1JuQixFQUFVLEdBQ1ZpeEMsRUFBVyxHQUVKOTdELEVBQVE1c0IsR0FBUSxDQUdyQixHQTdHWSxRQTJHWjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLElBRUksQ0FJM0IsSUFIQTg3RCxFQUFXaHhDLEVBQ1g5cUIsSUFFT0EsRUFBUTVzQixHQWpITCxRQWtIUjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBTXpCODdELEdBQVloeEMsRUFDWjlxQixJQU1GLElBSEFnc0IsR0FBUzh2QyxFQUNUQSxFQUFXLEdBRUo5N0QsRUFBUTVzQixHQTdIUCxPQThITjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBTXpCODdELEdBQVloeEMsRUFDWjlxQixJQUdGLEdBQXdCLElBQXBCODdELEVBQVMxb0YsT0FDWCxNQUdGNDRDLEdBQVM4dkMsRUFHUDl2QyxJQUNGbkIsR0FBV21CLEVBQ1hBLEVBQVEsSUFHVm5CLEdBQVdDLEVBQ1g5cUIsSUFrQkYsT0FmQXUyRCxHQUFZMXJDLEVBRVpBLEVBQVVBLEVBQVEzdkMsUUFBUTJnRixHQUF3QixTQUFVNytCLEdBSTFELE9BSEF5NEIsRUFBUXlELElBQWdCekQsRUFBUXlELElBQWdCLEdBQUtsOEIsRUFBSzVwRCxPQUMxRDhsRixJQUVPLE1BR1QzbEUsRUFBTXlpRSxFQUFJTyxHQUVWMEMsRUExSld2aUYsS0EwSkM4OEUsYUFDWjNvQyxFQTNKV24wQyxLQTJKSXUrRSxjQUFjcHFDLEVBQVMxNUIsR0FDdEM4bkUsSUFFTzFsRSxFQUFJLENBQ1RnVyxLQUFNLHFCQUNOd3lELFdBQVlBLEVBQ1oxNUMsU0FBVXdJLFMsNkJDcExkMTZDLEVBQU9ELFFBR1AsU0FBa0JtQixHQUNoQixPQUFPNmxCLE9BQU83bEIsR0FBTzZKLFFBQVEsT0FBUSxPLDZCQ0p2QyxJQUFJKzhFLEVBQWEsRUFBUSxHQUNyQjluQixFQUFZLEVBQVEsSUFFeEJoZ0UsRUFBT0QsUUFBVW9rRixFQUNqQkEsRUFBVzZCLFdBQVksRUFDdkI3QixFQUFXOEIsWUFBYSxFQWdCeEIsU0FBUzlCLEVBQVcwQixFQUFLM2tGLEVBQU82bUYsR0FlOUIsSUFkQSxJQUtJK0QsRUFDQUMsRUFDQWx3QyxFQUNBbEIsRUFDQXB2QyxFQUNBcWdGLEVBQ0F2NEIsRUFDQTU0QixFQVhBNG1DLEVBRE85NkQsS0FDVzZ6QixRQUFRaW5DLFdBQzFCeHhDLEVBQVEsRUFDUjVzQixFQUFTL0IsRUFBTStCLE9BQ2ZtakYsRUFBVyxHQVVSdjJELEVBQVE1c0IsSUF4QkgsT0F5QlYwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQTFCakIsT0E0QnFCOHFCLElBSTdCeXJDLEdBQVl6ckMsRUFDWjlxQixJQUtGLEdBcENtQixPQWtDbkI4cUIsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixJQUV6QixDQVFBLElBSkFBLElBQ0F1MkQsR0FBWXpyQyxFQUNaa0IsRUFBUSxHQUVEaHNCLEVBQVE1c0IsR0EzQ0ssT0E0Q2xCMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0FqRFgsT0FxREg4cUIsSUFDVGtCLEdBQVNsQixFQUNUOXFCLElBQ0E4cUIsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixJQUczQmdzQixHQUFTbEIsRUFDVDlxQixJQUdGLEdBQ0dnc0IsR0EzRGlCLE1BNERsQjM2QyxFQUFNeXdCLE9BQU85QixJQXpESCxNQTBEVjN1QixFQUFNeXdCLE9BQU85QixFQUFRLEdBSHZCLENBYUEsSUFMQSs3RCxFQUFhL3ZDLEVBRWJoc0IsR0FEQXUyRCxHQUFZdnFDLFFBQ0s1NEMsT0FDakI0NEMsRUFBUSxHQUVEaHNCLEVBQVE1c0IsSUExRUwsUUEyRVIwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQTFFZixNQThFUjhxQixHQWhGVSxPQWlGVkEsSUFLRnlyQyxHQUFZenJDLEVBQ1o5cUIsSUFPRixHQUhBZ3NCLEVBQVEsR0FDUml3QyxFQUFZMUYsRUFwRkgsT0FrRlR6ckMsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixJQUlELENBR3RCLElBRkFBLElBRU9BLEVBQVE1c0IsR0FHUitvRixFQUZMcnhDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0FNekJnc0IsR0FBU2xCLEVBQ1Q5cUIsSUFLRixJQUZBOHFCLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsTUFFUG04RCxFQUF1QnRyQixVQUN2QzBsQixHQXZHSyxJQXVHY3ZxQyxFQUFRbEIsRUFDM0I5cUIsUUFDSyxDQUNMLEdBQUl3eEMsRUFDRixPQUdGeHhDLEdBQVNnc0IsRUFBTTU0QyxPQUFTLEVBQ3hCNDRDLEVBQVEsSUFJWixJQUFLQSxFQUFPLENBQ1YsS0FBT2hzQixFQUFRNXNCLEdBR1JncEYsRUFGTHR4QyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBTXpCZ3NCLEdBQVNsQixFQUNUOXFCLElBR0Z1MkQsR0FBWXZxQyxFQUdkLEdBQUtBLEVBQUwsQ0FPQSxJQUhBd1gsRUFBTXhYLEVBQ05BLEVBQVEsR0FFRGhzQixFQUFRNXNCLElBaEpMLFFBaUpSMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0FoSmYsTUFvSlI4cUIsR0F0SlUsT0F1SlZBLElBS0ZrQixHQUFTbEIsRUFDVDlxQixJQWNGLEdBVkF0a0IsRUFBTyxLQXBLWSxPQW1LbkJvdkMsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixJQUl2QnRrQixFQXZLaUIsSUFDQSxNQXVLUm92QyxFQUNUcHZDLEVBeEtpQixJQU9GLE1Ba0tOb3ZDLElBQ1RwdkMsRUFsS2dCLEtBcUtiQSxFQUdFLEtBQUlzd0MsRUF1Q1QsT0FsQ0EsSUFIQWhzQixHQURBdTJELEdBQVl2cUMsRUFBUWxCLEdBQ0gxM0MsT0FDakI0NEMsRUFBUSxHQUVEaHNCLEVBQVE1c0IsSUFDYjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLE1BRVB0a0IsR0FIRyxDQU9yQixHQTFMVSxPQTBMTm92QyxFQUF5QixDQUkzQixHQUhBOXFCLElBM0xRLFFBNExSOHFCLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0FFTThxQixJQUFjcHZDLEVBQzNDLE9BR0Zzd0MsR0FsTVEsS0FxTVZBLEdBQVNsQixFQUNUOXFCLElBS0YsSUFGQThxQixFQUFZejVDLEVBQU15d0IsT0FBTzlCLE1BRVB0a0IsRUFDaEIsT0FHRndnRixFQUFjM0YsRUFDZEEsR0FBWXZxQyxFQUFRbEIsRUFDcEI5cUIsSUFDQTRLLEVBQVFvaEIsRUFDUkEsRUFBUSxRQXZDUkEsRUFBUSxHQUNSaHNCLEVBQVF1MkQsRUFBU25qRixPQTJDbkIsS0FBTzRzQixFQUFRNXNCLElBdk5MLFFBd05SMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsS0F2TmYsTUF5TmlCOHFCLElBSTNCeXJDLEdBQVl6ckMsRUFDWjlxQixJQUtGLE9BRkE4cUIsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQW5PWCxPQXFPSThxQixPQUFsQixJQUNNb3RDLElBSUorRCxFQUFZakcsRUFBSWlHLEdBQVd2Z0YsT0FBT2kvQixJQUNsQzZvQixFQS9OUzlzRCxLQStORTB5RCxPQUFPb3NCLElBL05UOStFLEtBK05rQnl1RCxTQUFTM0IsR0FBTXk0QixFQUFXLENBQUMzL0IsZUFBZSxJQUVqRTF4QixJQUNGc3hELEVBQWNsRyxFQUFJa0csR0FBYXhnRixPQUFPaS9CLElBQ3RDL1AsRUFuT09sMEIsS0FtT00weUQsT0FBT29zQixJQW5PYjkrRSxLQW1Pc0J5dUQsU0FBU3Y2QixHQUFRc3hELElBR3pDbEcsRUFBSU8sRUFBSlAsQ0FBYyxDQUNuQnpzRCxLQUFNLGFBQ053eUQsV0FBWTVyQixFQUFVNHJCLEdBQ3RCbnhELE1BQU9BLEdBQVMsS0FDaEI0NEIsSUFBS0EsUUFNWCxTQUFTMjRCLEVBQXVCcnhDLEdBQzlCLE1BcFBTLE1Bb1BGQSxHQTFQWSxNQTJQakJBLEdBMVBrQixNQTJQbEJBLEVBTUosU0FBU3N4QyxFQUF1QnR4QyxHQUM5QixNQW5RbUIsTUFtUVpBLEdBbFFhLE1BbVFsQkEsSUFDQ210QyxFQUFXbnRDLEdBTmhCcXhDLEVBQXVCdHJCLFVBelBaLEssNkJDbkJYLElBQUlvbkIsRUFBYSxFQUFRLEdBRXpCOW5GLEVBQU9ELFFBbUJQLFNBQWU4bEYsRUFBSzNrRixFQUFPNm1GLEdBQ3pCLElBQ0lsNEQsRUFDQXE4RCxFQUNBQyxFQUNBL0YsRUFDQWdHLEVBQ0FucEYsRUFDQTBwRCxFQUNBOVEsRUFDQWxCLEVBQ0EweEMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQTErQixFQUNBMitCLEVBQ0F6ckUsRUFDQXNxQyxFQUNBb2hDLEVBQ0E3L0IsRUFDQTgvQixFQUNBdkksRUFDQXdJLEVBQ0FDLEVBQ0FsakMsRUFHSixJQTNCV3BqRCxLQTJCRDZ6QixRQUFRZ25DLElBQ2hCLE9BUUZ2eEMsRUFBUSxFQUNSNjhELEVBQVksRUFDWnpwRixFQUFTL0IsRUFBTStCLE9BQVMsRUFDeEIwcEQsRUFBUSxHQUVSLEtBQU85OEIsRUFBUTVzQixHQUFRLENBUXJCLEdBUEEycEYsRUFBWTFyRixFQUFNa1IsUUF0RE4sS0FzRHlCeWQsR0FDckNnOUQsRUFBWTNyRixFQUFNa1IsUUExRFQsSUEwRHlCeWQsRUFBUSxJQUV2QixJQUFmKzhELElBQ0ZBLEVBQVkxckYsRUFBTStCLFNBR0QsSUFBZjRwRixHQUFvQkEsRUFBWUQsRUFBVyxDQUM3QyxHQUFJRixFQTFEVyxFQTJEYixPQUdGLE1BR0YvL0IsRUFBTS9vRCxLQUFLMUMsRUFBTXFILE1BQU1zbkIsRUFBTys4RCxJQUM5QkYsSUFDQTc4RCxFQUFRKzhELEVBQVksRUFJdEJ4RyxFQUFXejVCLEVBQU1ua0QsS0EzRUgsTUE0RWQwakYsRUFBYXYvQixFQUFNbGEsT0FBTyxFQUFHLEdBQUcsSUFBTSxHQUN0QzVpQixFQUFRLEVBQ1I1c0IsRUFBU2lwRixFQUFXanBGLE9BQ3BCeXBGLElBQ0FQLEdBQVksRUFDWkcsRUFBUSxHQUVSLEtBQU96OEQsRUFBUTVzQixHQUFRLENBR3JCLEdBekZTLE9BdUZUMDNDLEVBQVl1eEMsRUFBV3Y2RCxPQUFPOUIsSUFFSixDQUd4QixHQUZBdzhELEVBQVUsTUFFUSxJQUFkRixHQUNGLElBQWMsSUFBVnhpQyxFQUNGLFlBR0YyaUMsRUFBTTFvRixLQUFLdW9GLEdBQ1hBLEdBQVksRUFHZHhpQyxHQUFRLE9BQ0gsR0F2R0UsTUF1R0VoUCxFQUNUMHhDLEdBQVUsRUFDVkYsRUFBWUEsR0E1RkssVUE2RlosR0F4R0csTUF3R0N4eEMsRUFFUHd4QyxFQWxHZSxTQWlHYkEsRUFoR2UsU0FrR1JFLEdBaEdNLE9BZ0dLRixFQWpHSixRQUZELFlBd0daLElBQUtyRSxFQUFXbnRDLEdBQ3JCLE9BR0Y5cUIsS0FHZ0IsSUFBZHM4RCxHQUNGRyxFQUFNMW9GLEtBQUt1b0YsR0FJYixHQUFJRyxFQUFNcnBGLE9BdkhZLEVBd0hwQixPQUlGLEdBQUk4a0YsRUFDRixPQUFPLEVBSVR6OEIsR0FBWSxFQUNacWhDLEVBQU8sR0FFUHZJLEVBQVF5QixFQUFJTyxHQUFVcDVDLE1BQU0sQ0FDMUI1VCxLQUFNLFFBQ05rekQsTUFBT0EsRUFDUHA2QyxTQUFVeTZDLElBR1osT0FBU3JoQyxFQUFXb2hDLEdBQVcsQ0FxQjdCLElBcEJBNy9CLEVBQU9GLEVBQU1yQixHQUNiOGdDLEVBQU0sQ0FBQ2h6RCxLQUFNLFdBQVk4WSxTQUFVLElBSS9Cb1osR0FDRnU2QixFQXBKVSxNQXdKWkEsRUFBSWg1QixHQUFNN2YsTUFBTW8vQyxFQUFLaEksR0FFckJuaEYsRUFBUzRwRCxFQUFLNXBELE9BQVMsRUFDdkI0c0IsRUFBUSxFQUNSZ3NCLEVBQVEsR0FDUjB3QyxFQUFPLEdBQ1BDLEdBQVcsRUFDWDErQixFQUFRLEtBQ1IyK0IsRUFBVSxLQUVINThELEVBQVE1c0IsR0FHYixHQXBLTSxRQWtLTjAzQyxFQUFZa1MsRUFBS2w3QixPQUFPOUIsS0FwS2hCLE1Bc0ttQjhxQixFQUEzQixDQVdBLEdBQWtCLEtBQWRBLEdBbkxHLE1BbUxpQkEsRUFDdEIsR0FBSTZ4QyxFQUNGM0csRUFBSWxyQyxPQUNDLENBQ0wsR0FBSUEsR0FBYTh4QyxFQUFTLENBQ3hCNXdDLEdBQVNsQixFQUNUOXFCLElBQ0EsVUFHRzA4RCxJQUFRNXhDLEdBQWU2eEMsSUFDMUJwRyxFQUFXbUcsRUFFUDF3QyxFQUFNNTRDLE9BQVMsSUFDYjAzQyxHQUNGeXJDLEdBQVl2cUMsRUFBTXR6QyxNQUFNLEVBQUdzekMsRUFBTTU0QyxPQUFTLEdBQzFDNDRDLEVBQVFBLEVBQU1scUIsT0FBT2txQixFQUFNNTRDLE9BQVMsS0FFcENtakYsR0FBWXZxQyxFQUNaQSxFQUFRLEtBSVo3NkIsRUFBTTZrRSxFQUFJN2tFLE1BRVY2a0UsRUFBSU8sRUFBSlAsQ0FBYyxDQUNaenNELEtBQU0sWUFDTjhZLFNBL0xEM3JDLEtBK0xnQncrRSxlQUFld0gsRUFBTXZyRSxJQUNuQ29yRSxJQUdMdkcsRUFBSWhxQyxFQUFRbEIsR0FFWmtCLEVBQVEsR0FDUjB3QyxFQUFPLFFBZVQsR0FaSTF3QyxJQUNGMHdDLEdBQVExd0MsRUFDUkEsRUFBUSxJQUdWMHdDLEdBQVE1eEMsRUFoT0UsT0FrT05BLEdBQTZCOXFCLElBQVU1c0IsRUFBUyxJQUNsRHNwRixHQUFRMS9CLEVBQUtsN0IsT0FBTzlCLEVBQVEsR0FDNUJBLEtBbk9HLE1Bc09EOHFCLEVBQXNCLENBR3hCLElBRkFtVCxFQUFRLEVBRURqQixFQUFLbDdCLE9BQU85QixFQUFRLEtBQU84cUIsR0FDaEM0eEMsR0FBUTV4QyxFQUNSOXFCLElBQ0FpK0IsSUFHRzIrQixFQUVNMytCLEdBQVMyK0IsSUFDbEJBLEVBQVUsR0FGVkEsRUFBVTMrQixFQU9oQjArQixHQUFXLEVBQ1gzOEQsU0E3RU0wOEQsRUFDRjF3QyxHQUFTbEIsRUFFVGtyQyxFQUFJbHJDLEdBR045cUIsSUEyRUN5N0IsR0FDSHU2QixFQXhQVSxLQXdQTXFHLEdBSXBCLE9BQU85SCxJLDZCQ3RRVCxJQUFJaitDLEVBQU8sRUFBUSxJQUNmNmtCLEVBQVUsRUFBUSxJQUNsQjhoQyxFQUFvQixFQUFRLElBQzVCckUsRUFBWSxFQUFRLElBRXhCem9GLEVBQU9ELFFBU1AsU0FBbUI4bEYsRUFBSzNrRixFQUFPNm1GLEdBQzdCLElBUUl6OEIsRUFDQTg2QixFQUNBenJDLEVBQ0FwVSxFQUNBdmxCLEVBWEFxcUMsRUFETzlrRCxLQUNTNnpCLFFBQ2hCaW5DLEVBQWFoVyxFQUFTZ1csV0FDdEJELEVBQU0vVixFQUFTK1YsSUFDZjVULEVBSk9qbkQsS0FJV2s5RSxnQkFDbEJsMkIsRUFMT2huRCxLQUthKzhFLG1CQUNwQnp6RCxFQUFRM3VCLEVBQU1rUixRQWRKLE1BZVZuUCxFQUFTL0IsRUFBTStCLE9BT25CLEtBQU80c0IsRUFBUTVzQixHQUFRLENBRXJCLElBQWUsSUFBWDRzQixFQUFjLENBQ2hCQSxFQUFRNXNCLEVBQ1IsTUFJRixHQTlCWSxPQThCUi9CLEVBQU15d0IsT0FBTzlCLEVBQVEsR0FDdkIsTUFLRixHQUFJd3hDLEVBQVksQ0FJZCxJQUhBOTZCLEVBQU8sRUFDUCtrQixFQUFXejdCLEVBQVEsRUFFWnk3QixFQUFXcm9ELEdBQVEsQ0FHeEIsR0ExQ0ksUUF3Q0owM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU8yNUIsSUFFQSxDQUN2Qi9rQixFQXhDSyxFQXlDTCxNQUNLLEdBNUNELE1BNENLb1UsRUFHVCxNQUZBcFUsSUFLRitrQixJQUdGLEdBQUkva0IsR0FuREssRUFtRGEsQ0FDcEIxVyxFQUFRM3VCLEVBQU1rUixRQXhETixLQXdEeUJ5ZCxFQUFRLEdBQ3pDLFVBUUosR0FKQXUyRCxFQUFXbGxGLEVBQU1xSCxNQUFNc25CLEVBQVEsR0FJM0I0NEQsRUFBVWw3QixFQUFjQyxFQXpEbkJqbkQsS0F5RHFDLENBQUNzL0UsRUFBS08sR0FBVSxJQUM1RCxNQU1GLEdBQ0U1NEIsRUFBV3FyQixLQUFLejRFLEtBakVUbUcsS0FpRW9Ccy9FLEVBQUtPLEdBQVUsS0FqRW5DNy9FLEtBbUVBczhFLFFBQ0x4aEIsR0FDQ0QsSUFBUXBXLEVBQVE3a0IsRUFBS2lWLEtBQUtnckMsR0FBVXowRCxPQUFPLEtBRzlDLE1BTUYsR0FIQTI1QixFQUFXejdCLEdBR0ksS0FGZkEsRUFBUTN1QixFQUFNa1IsUUFwRkYsS0FvRnFCeWQsRUFBUSxLQUVrQixLQUF2Q3NXLEVBQUtqbEMsRUFBTXFILE1BQU0raUQsRUFBVXo3QixJQUFnQixDQUM3REEsRUFBUXk3QixFQUNSLE9BTUosR0FGQTg2QixFQUFXbGxGLEVBQU1xSCxNQUFNLEVBQUdzbkIsR0FFSCxLQUFuQnNXLEVBQUtpZ0QsR0FHUCxPQUZBUCxFQUFJTyxHQUVHLEtBSVQsR0FBSTJCLEVBQ0YsT0FBTyxFQU1ULE9BSEEvbUUsRUFBTTZrRSxFQUFJN2tFLE1BQ1ZvbEUsRUFBVzBHLEVBQWtCMUcsR0FFdEJQLEVBQUlPLEVBQUpQLENBQWMsQ0FDbkJ6c0QsS0FBTSxZQUNOOFksU0F0R1MzckMsS0FzR013K0UsZUFBZXFCLEVBQVVwbEUsTyw2QkNySDVDLElBQUkrckUsRUFBUyxFQUFRLEtBS3JCLFNBQVMvOEMsRUFBTzYxQyxFQUFLM2tGLEVBQU82bUYsR0FDMUIsSUFDSXB0QyxFQUNBM2hCLEVBRUosR0FBd0IsT0FBcEI5M0IsRUFBTXl3QixPQUFPLEtBQ2ZncEIsRUFBWXo1QyxFQUFNeXdCLE9BQU8sSUFFZSxJQVAvQnByQixLQU9BeXBDLE9BQU81OUIsUUFBUXVvQyxJQUV0QixRQUFJb3RDLElBS0YvdUQsRUFEZ0IsT0FBZDJoQixFQUNLLENBQUN2aEIsS0FBTSxTQUVQLENBQ0xBLEtBQU0sT0FDTmw0QixNQUFPeTVDLEdBSUprckMsRUFBSSxLQUFPbHJDLEVBQVhrckMsQ0FBc0I3c0QsSUExQm5DaDVCLEVBQU9ELFFBQVVpd0MsRUFDakJBLEVBQU9nOUMsUUFBVUQsRyw2QkNIakIvc0YsRUFBT0QsUUFFUCxTQUFnQm1CLEVBQU8yZ0UsR0FDckIsT0FBTzNnRSxFQUFNa1IsUUFBUSxLQUFNeXZELEssNkJDSDdCLElBQUlpbUIsRUFBYSxFQUFRLEdBQ3JCN3VCLEVBQVMsRUFBUSxJQUNqQjh6QixFQUFTLEVBQVEsS0FFckIvc0YsRUFBT0QsUUFBVXdrRixFQUNqQkEsRUFBU3lJLFFBQVVELEVBQ25CeEksRUFBUzJCLFdBQVksRUFFckIsSUFLSStHLEVBRFMsVUFDY2hxRixPQUczQixTQUFTc2hGLEVBQVNzQixFQUFLM2tGLEVBQU82bUYsR0FDNUIsSUFDSTNCLEVBQ0FuakYsRUFDQTRzQixFQUNBZ3NCLEVBQ0FsQixFQUNBdXlDLEVBQ0FwckIsRUFDQTlnRCxFQUNBMDVCLEVBQ0E4UyxFQUNBczdCLEVBRUosR0F0QlMsTUFzQkw1bkYsRUFBTXl3QixPQUFPLEdBQWpCLENBZUEsSUFYT3ByQixLQUNQNi9FLEVBQVcsR0FDWG5qRixFQUFTL0IsRUFBTStCLE9BQ2Y0c0IsRUFBUSxFQUNSZ3NCLEVBQVEsR0FDUnF4QyxHQUFpQixFQUNqQnByQixFQUFPLEdBRVBqeUMsSUFDQXUyRCxFQW5DUyxJQXFDRnYyRCxFQUFRNXNCLElBQ2IwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQUd2Qmk0RCxFQUFXbnRDLElBeENOLE1BeUNMQSxHQXhDVSxNQXlDVkEsR0FDZSxNQUFkQSxHQXpDTyxNQXlDY3o1QyxFQUFNeXdCLE9BQU85QixFQUFRLE1BSzdDZ3NCLEdBQVNsQixFQUNUOXFCLElBR0YsR0FBS2dzQixFQUFMLENBV0EsR0FQQWltQixHQUFRam1CLEVBQ1JBLEVBQVEsR0FHUmltQixHQURBbm5CLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFekJBLElBNURjLE1BOERWOHFCLEVBQ0Z1eUMsR0FBaUIsTUFDWixDQUNMLEdBQ2dCLE1BQWR2eUMsR0FqRVEsTUFrRVJ6NUMsRUFBTXl3QixPQUFPOUIsRUFBUSxHQUVyQixPQUdGaXlDLEdBdkVVLElBd0VWanlDLElBR0YsS0FBT0EsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsSUFFckJpNEQsRUFBV250QyxJQWhGUixNQWdGc0JBLElBSTdCa0IsR0FBU2xCLEVBQ1Q5cUIsSUFLRixHQUZBOHFCLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFcEJnc0IsR0ExRkksTUEwRktsQixFQUtkLFFBQUlvdEMsSUFLSnJ0QyxFQURBb25CLEdBQVFqbUIsRUFFUnVxQyxHQUFZdGtCLEVBQU9ubkIsR0FDbkIzNUIsRUFBTTZrRSxFQUFJN2tFLE9BQ040ckMsU0FDSjVyQyxFQUFJeUQsU0FFQXlvRSxJQXZHTyxZQXdHTHByQixFQUFLdjVELE1BQU0sRUFBRzBrRixHQUFleitFLGVBQy9Ca3NDLEVBQVVBLEVBQVEzd0MsT0FBT2tqRixHQUN6QmpzRSxFQUFJNHJDLFFBQVVxZ0MsRUFDZGpzRSxFQUFJeUQsUUFBVXdvRSxHQUVkbnJCLEVBN0dPLFVBNkdTQSxHQUtwQnRVLEVBNUZPam5ELEtBNEZXKzlFLGlCQTVGWC85RSxLQTZGRis5RSxpQkFBbUIsQ0FBQ2o0QixLQUFNbUIsRUFBV25CLE1BRTFDeThCLEVBL0ZPdmlGLEtBK0ZLNjhFLFlBRVoxb0MsRUFqR09uMEMsS0FpR1F3K0UsZUFBZXJxQyxFQUFTMTVCLEdBakdoQ3phLEtBbUdGKzlFLGlCQUFtQjkyQixFQUN4QnM3QixJQUVPakQsRUFBSU8sRUFBSlAsQ0FBYyxDQUNuQnpzRCxLQUFNLE9BQ05xQixNQUFPLEtBQ1A0NEIsSUFBSzRGLEVBQU82SSxFQUFNLENBQUMzVixlQUFlLElBQ2xDamEsU0FBVXdJLFMsNkJDNUlkLElBQUl1ZSxFQUFTLEVBQVEsSUFDakI2dUIsRUFBYSxFQUFRLEdBQ3JCaUYsRUFBUyxFQUFRLEtBRXJCL3NGLEVBQU9ELFFBQVVzekQsRUFDakJBLEVBQUkyNUIsUUFBVUQsRUFDZDE1QixFQUFJNnlCLFdBQVksRUFFaEIsSUFXSWlILEVBQVksQ0FKSSxVQUNDLFdBQ0MsV0FRbEJDLEVBQW1CRCxFQUFVbHFGLE9BRWpDLFNBQVNvd0QsRUFBSXd5QixFQUFLM2tGLEVBQU82bUYsR0FDdkIsSUFDSTNCLEVBQ0ExckMsRUFDQUMsRUFDQTlxQixFQUNBeTdCLEVBQ0E3dkIsRUFDQTN3QixFQUNBN0gsRUFDQTQ0QyxFQUNBd3hDLEVBQ0FDLEVBQ0F4RSxFQUVKLEdBZFd2aUYsS0FjRDZ6QixRQUFRZ25DLElBQWxCLENBUUEsSUFKQWdsQixFQUFXLEdBQ1h2MkQsR0FBUyxFQUNUNXNCLEVBQVNtcUYsSUFFQXY5RCxFQUFRNXNCLEdBSWYsR0FIQXc0QixFQUFXMHhELEVBQVV0OUQsSUFDckIva0IsRUFBUTVKLEVBQU1xSCxNQUFNLEVBQUdrekIsRUFBU3g0QixTQUV0QnVMLGdCQUFrQml0QixFQUFVLENBQ3BDMnFELEVBQVd0N0UsRUFDWCxNQUlKLEdBQUtzN0UsRUFBTCxDQVNBLElBTEF2MkQsRUFBUXUyRCxFQUFTbmpGLE9BQ2pCQSxFQUFTL0IsRUFBTStCLE9BQ2Y0NEMsRUFBUSxHQUNSd3hDLEVBQWEsRUFFTng5RCxFQUFRNXNCLElBQ2IwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixJQUVyQmk0RCxFQUFXbnRDLElBNURSLE1BNERzQkEsS0FLYixNQUFkQSxHQUNjLE1BQWRBLEdBQ2MsTUFBZEEsR0FDYyxNQUFkQSxHQUNjLE1BQWRBLEdBQ2MsTUFBZEEsR0FDYyxNQUFkQSxHQUNjLE1BQWRBLElBRUEyeUMsRUFBZ0Jwc0YsRUFBTXl3QixPQUFPOUIsRUFBUSxNQUVmaTRELEVBQVd3RixNQTlFcEIsTUFtRlgzeUMsR0FyRmEsTUFxRmlCQSxHQUNoQzB5QyxJQW5GYyxNQXNGWjF5QyxHQXhGYyxNQXdGaUJBLE9BQ2pDMHlDLEVBRWlCLEtBS25CeHhDLEdBQVNsQixFQUNUOXFCLElBR0YsR0FBS2dzQixFQUFMLENBT0EsR0FGQW5CLEVBREEwckMsR0FBWXZxQyxFQWhHUSxZQW1HaEJwZ0IsRUFBOEIsQ0FHaEMsSUFBa0IsS0FGbEI2dkIsRUFBV3pQLEVBQU16cEMsUUF4R0wsT0EwR1drNUMsSUFBYXJvRCxFQUFTLEVBQzNDLE9BR0Z5M0MsRUFBVUEsRUFBUTN3QyxPQTFHQSxVQTBHdUI5RyxRQUkzQyxRQUFJOGtGLElBSUplLEVBdkdXdmlGLEtBdUdDNjhFLFlBQ1oxb0MsRUF4R1duMEMsS0F3R0l3K0UsZUFBZXJxQyxFQUFTbXJDLEVBQUk3a0UsT0FDM0M4bkUsSUFFT2pELEVBQUlPLEVBQUpQLENBQWMsQ0FDbkJ6c0QsS0FBTSxPQUNOcUIsTUFBTyxLQUNQNDRCLElBQUs0RixFQUFPbXRCLEVBQVUsQ0FBQ2o2QixlQUFlLElBQ3RDamEsU0FBVXdJLFUsNkJDM0lkMTZDLEVBQU9ELFFBSVAsU0FBZ0JtQixFQUFPMmdFLEdBQ3JCLElBR0l2VyxFQUhBcm9ELEVBQVNrcUYsRUFBVWxxRixPQUNuQjRzQixHQUFTLEVBQ1RoYSxHQUFPLEVBR1gsSUFBS3RQLEtBQUs2ekIsUUFBUWduQyxJQUNoQixPQUFRLEVBR1YsT0FBU3Z4QyxFQUFRNXNCLElBR0csS0FGbEJxb0QsRUFBV3BxRCxFQUFNa1IsUUFBUSs2RSxFQUFVdDlELEdBQVFneUMsTUFFbkJ2VyxFQUFXejFDLElBQWdCLElBQVRBLEtBQ3hDQSxFQUFNeTFDLEdBSVYsT0FBT3oxQyxHQXBCVCxJQUFJczNFLEVBQVksQ0FBQyxXQUFZLFVBQVcsWSw2QkNGeEMsSUFBSTNILEVBQWUsRUFBUSxLQUN2QnVILEVBQVMsRUFBUSxLQUNqQjFtRCxFQUFNLEVBQVEsS0FBZ0JBLElBRWxDcm1DLEVBQU9ELFFBQVV3dEYsRUFDakJBLEVBQVdQLFFBQVVELEVBRXJCLElBQUlTLEVBQTRCLFFBQzVCQyxFQUE2QixVQUVqQyxTQUFTRixFQUFXMUgsRUFBSzNrRixFQUFPNm1GLEdBQzlCLElBRUlwdEMsRUFDQXlyQyxFQUZBbmpGLEVBQVMvQixFQUFNK0IsT0FJbkIsS0FBd0IsTUFBcEIvQixFQUFNeXdCLE9BQU8sSUFBYzF1QixFQUFTLEtBSXhDMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPLElBR3RCNnpELEVBQWE3cUMsSUFDQSxNQUFkQSxHQUNjLE1BQWRBLEdBQ2MsTUFBZEEsS0FLRnlyQyxFQUFXbGxGLEVBQU00SixNQUFNdTdCLEtBT3ZCLFFBQUkwaEQsSUFJSjNCLEVBQVdBLEVBQVMsSUEvQlQ3L0UsS0FpQ0R3OEUsUUFBVXlLLEVBQTBCamlGLEtBQUs2NkUsR0FqQ3hDNy9FLEtBa0NKdzhFLFFBQVMsRUFsQ0x4OEUsS0FtQ0t3OEUsUUFBVTBLLEVBQTJCbGlGLEtBQUs2NkUsS0FuQy9DNy9FLEtBb0NKdzhFLFFBQVMsR0FHVDhDLEVBQUlPLEVBQUpQLENBQWMsQ0FBQ3pzRCxLQUFNLE9BQVFsNEIsTUFBT2tsRixPLDZCQ2xEN0MsSUFBSTBCLEVBQWEsRUFBUSxHQUNyQmlGLEVBQVMsRUFBUSxLQUVyQi9zRixFQUFPRCxRQUFVK2hFLEVBQ2pCQSxFQUFLa3JCLFFBQVVELEVBRWYsSUFBSTkvQixFQUFNLEdBQUduckQsZUFlVDRyRixFQUFlLENBRW5CLElBUHFCLElBUXJCLElBUHFCLEtBV2pCQyxFQUEwQixHQU05QixTQUFTN3JCLEVBQUsrakIsRUFBSzNrRixFQUFPNm1GLEdBQ3hCLElBT0k2RixFQUNBOS9CLEVBQ0EyK0IsRUFDQVgsRUFDQUMsRUFDQUosRUFDQWtDLEVBQ0EvbEQsRUFDQWdtRCxFQUNBcHpDLEVBQ0E1UixFQUNBN2xDLEVBQ0F3M0IsRUFDQWluQixFQUNBN0YsRUFDQXdYLEVBQ0FyeUMsRUFDQThuRSxFQUNBOXZELEVBeEJBb3RELEVBQVcsR0FDWHYyRCxFQUFRLEVBQ1I4cUIsRUFBWXo1QyxFQUFNeXdCLE9BQU8sR0FDekI0dkMsRUFKT2g3RCxLQUlTNnpCLFFBQVFtbkMsU0FDeEJGLEVBTE85NkQsS0FLVzZ6QixRQUFRaW5DLFdBQzFCRCxFQU5PNzZELEtBTUk2ekIsUUFBUWduQyxJQTZCdkIsR0FQa0IsTUFBZHptQixJQUNGbXpDLEdBQVUsRUFDVjFILEVBQVd6ckMsRUFDWEEsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixJQXpEVixNQTZEZjhxQixJQU1DbXpDLElBekNNdm5GLEtBeUNVdzhFLFFBQXJCLENBZ0JBLElBWkFxRCxHQUFZenJDLEVBQ1prQixFQUFRLEdBQ1Joc0IsSUFHQTVzQixFQUFTL0IsRUFBTStCLE9BRWZ5K0MsRUFBUSxHQURSMWdDLEVBQU02a0UsRUFBSTdrRSxPQUdONHJDLFFBQVUvOEIsRUFDZDdPLEVBQUl5RCxRQUFVb0wsRUFFUEEsRUFBUTVzQixHQUFRLENBSXJCLEdBRkEwb0YsRUFEQWh4QyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEdBOUVoQixNQWlGTDhxQixFQUFzQixDQUl4QixJQUZBbVQsRUFBUSxFQW5GRCxNQXFGQTVzRCxFQUFNeXdCLE9BQU85QixFQUFRLElBQzFCODdELEdBQVloeEMsRUFDWjlxQixJQUNBaStCLElBR0cyK0IsRUFFTTMrQixHQUFTMitCLElBQ2xCQSxFQUFVLEdBRlZBLEVBQVUzK0IsT0FJUCxHQXZHTyxPQXVHSG5ULEVBRVQ5cUIsSUFDQTg3RCxHQUFZenFGLEVBQU15d0IsT0FBTzlCLFFBS3BCLEdBQU00OEQsSUFBV3JyQixHQTlHUCxNQThHZXptQixHQUV6QixLQUFNOHhDLEdBQVdyckIsSUEvR04sTUErR2N6bUIsRUFBK0IsQ0FDN0QsSUFBSStHLEVBRUcsQ0FHTCxJQUFLNmYsRUFDSCxLQUFPMXhDLEVBQVE1c0IsSUFDYjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEVBQVEsR0FFNUJpNEQsRUFBV250QyxLQUloQmd4QyxHQUFZaHhDLEVBQ1o5cUIsSUFJSixHQWpJVyxNQWlJUDN1QixFQUFNeXdCLE9BQU85QixFQUFRLEdBQ3ZCLE9BR0Y4N0QsR0FySVcsSUFzSVhpQyxHQUFTLEVBQ1QvOUQsSUFFQSxNQXpCQTZ4QixVQUhGQSxJQWdDRjdGLEdBQVM4dkMsRUFDVEEsRUFBVyxHQUNYOTdELElBSUYsR0FBSys5RCxFQUFMLENBU0EsSUFMQWx6QyxFQUFVbUIsRUFDVnVxQyxHQUFZdnFDLEVBQVE4dkMsRUFDcEI5N0QsSUFHT0EsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFcEJpNEQsRUFBV250QyxLQUloQnlyQyxHQUFZenJDLEVBQ1o5cUIsSUFTRixHQUxBOHFCLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FDekJpWSxFQUFVdTVCLEVBQWFzc0IsRUFBMEJELEVBQ2pEN3hDLEVBQVEsR0FDUml3QyxFQUFZMUYsRUF6S0gsTUEyS0x6ckMsRUFBb0IsQ0FJdEIsSUFIQTlxQixJQUNBaThELEdBN0tPLElBK0tBajhELEVBQVE1c0IsR0E5S1IsT0ErS0wwM0MsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixLQURKLENBT3JCLEdBQUl3eEMsR0FBNEIsT0FBZDFtQixFQUNoQixPQUdGa0IsR0FBU2xCLEVBQ1Q5cUIsSUFHRixHQTdMTyxNQTZMSDN1QixFQUFNeXdCLE9BQU85QixHQUNmLE9BR0Z1MkQsR0FsTU8sSUFrTVl2cUMsRUFqTVosSUFrTVB3WCxFQUFNeFgsRUFDTmhzQixRQUNLLENBSUwsSUFIQThxQixFQUFZLEtBQ1pneEMsRUFBVyxHQUVKOTdELEVBQVE1c0IsSUFDYjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLElBRXJCODdELElBQVkxK0IsRUFBSTdzRCxLQUFLMG5DLEVBQVM2UyxLQUhiLENBT3JCLEdBQUltdEMsRUFBV250QyxHQUFZLENBQ3pCLElBQUs0bUIsRUFDSCxNQUdGb3FCLEdBQVloeEMsTUFDUCxDQUNMLEdBek5XLE1BeU5QQSxFQUNGK0csU0FDSyxHQTFOSyxNQTBORC9HLEVBQTZCLENBQ3RDLEdBQWMsSUFBVitHLEVBQ0YsTUFHRkEsSUFHRjdGLEdBQVM4dkMsRUFDVEEsRUFBVyxHQXZPRCxPQXlPTmh4QyxJQUNGa0IsR0ExT1EsS0EyT1JsQixFQUFZejVDLEVBQU15d0IsU0FBUzlCLElBRzdCZ3NCLEdBQVNsQixFQUdYOXFCLElBSUZ3akMsRUFBTXhYLEVBQ05oc0IsR0FGQXUyRCxHQUFZdnFDLEdBRUs1NEMsT0FNbkIsSUFGQTQ0QyxFQUFRLEdBRURoc0IsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFcEJpNEQsRUFBV250QyxLQUloQmtCLEdBQVNsQixFQUNUOXFCLElBT0YsR0FKQThxQixFQUFZejVDLEVBQU15d0IsT0FBTzlCLEdBQ3pCdTJELEdBQVl2cUMsRUFHUkEsR0FBU29SLEVBQUk3c0QsS0FBSzBuQyxFQUFTNlMsR0FZN0IsR0FYQTlxQixJQUNBdTJELEdBQVl6ckMsRUFDWmtCLEVBQVEsR0FDUi9TLEVBQVNoQixFQUFRNlMsR0FDakJveEMsRUFBYzNGLEVBT1Yva0IsRUFBWSxDQUNkLEtBQU94eEMsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsTUFFUGlaLEdBM1JSLE9BK1JONlIsSUFDRmtCLEdBaFNRLEtBaVNSbEIsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixJQUc3QkEsSUFDQWdzQixHQUFTbEIsRUFLWCxJQUZBQSxFQUFZejVDLEVBQU15d0IsT0FBTzlCLE1BRVBpWixFQUNoQixPQU9GLElBSkFyTyxFQUFRb2hCLEVBQ1J1cUMsR0FBWXZxQyxFQUFRbEIsRUFDcEI5cUIsSUFFT0EsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFcEJpNEQsRUFBV250QyxLQUloQnlyQyxHQUFZenJDLEVBQ1o5cUIsU0FLRixJQUZBODdELEVBQVcsR0FFSjk3RCxFQUFRNXNCLEdBQVEsQ0FHckIsSUFGQTAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLE1BRVBpWixFQUNaK2tELElBQ0ZoeUMsR0FBUy9TLEVBQVM2aUQsRUFDbEJBLEVBQVcsSUFHYmtDLEdBQVksT0FDUCxHQUFLQSxFQUVMLElBdlVLLE1BdVVEbHpDLEVBQTZCLENBQ3RDeXJDLEdBQVl2cUMsRUFBUS9TLEVBQVM2aUQsRUFDN0JseEQsRUFBUW9oQixFQUNSLE1BQ1Npc0MsRUFBV250QyxHQUNwQmd4QyxHQUFZaHhDLEdBRVprQixHQUFTL1MsRUFBUzZpRCxFQUFXaHhDLEVBQzdCZ3hDLEVBQVcsR0FDWGtDLEdBQVksUUFWWmh5QyxHQUFTbEIsRUFhWDlxQixJQUtOLEdBeFZrQixNQXdWZDN1QixFQUFNeXdCLE9BQU85QixHQUtqQixRQUFJazRELElBSUozQixHQWpXa0IsSUFtV2xCL3lCLEVBNVVXOXNELEtBNFVBMHlELE9BQU9vc0IsSUE1VVA5K0UsS0E0VWdCeXVELFNBQVMzQixHQUFNd3lCLEVBQUlpRyxHQUFXdmdGLE9BQU9pL0IsSUFBSyxDQUFDMmhCLGVBQWUsSUFFakYxeEIsSUFDRnN4RCxFQUFjbEcsRUFBSWtHLEdBQWF4Z0YsT0FBT2kvQixJQUN0Qy9QLEVBaFZTbDBCLEtBZ1ZJMHlELE9BQU9vc0IsSUFoVlg5K0UsS0FnVm9CeXVELFNBQVN2NkIsR0FBUXN4RCxJQUdoRC95RCxFQUFPLENBQ0xJLEtBQU0wMEQsRUFBVSxRQUFVLE9BQzFCcnpELE1BQU9BLEdBQVMsS0FDaEI0NEIsSUFBS0EsR0FHSHk2QixFQUNGOTBELEVBQUsrMEQsSUExVkl4bkYsS0EwVk8weUQsT0FBT29zQixJQTFWZDkrRSxLQTBWdUJ5dUQsU0FBU3RhLEdBQVUxNUIsSUFBUSxNQUUzRDhuRSxFQTVWU3ZpRixLQTRWRzY4RSxZQUNacHFELEVBQUtrWixTQTdWSTNyQyxLQTZWWXcrRSxlQUFlcnFDLEVBQVMxNUIsR0FDN0M4bkUsS0FHS2pELEVBQUlPLEVBQUpQLENBQWM3c0QsTUF0V3ZCMjBELEVBZHFCLFNBZXJCQSxFQWRxQixTQWVyQkEsRUFyQm1CLEtBQ0MsSyw2QkNacEIsSUFBSTdGLEVBQWEsRUFBUSxHQUNyQmlGLEVBQVMsRUFBUSxLQUNqQi9zQixFQUFZLEVBQVEsSUFFeEJoZ0UsRUFBT0QsUUFBVTZyRCxFQUNqQkEsRUFBVW9oQyxRQUFVRCxFQWFwQixTQUFTbmhDLEVBQVVpNkIsRUFBSzNrRixFQUFPNm1GLEdBQzdCLElBUUlydEMsRUFDQWt4QyxFQUNBNXFFLEVBQ0FnWSxFQUNBOHZELEVBQ0FqdEMsRUFDQW15QyxFQUNBdHNDLEVBZEEvRyxFQUFZejVDLEVBQU15d0IsT0FBTyxHQUN6QjlCLEVBQVEsRUFDUjVzQixFQUFTL0IsRUFBTStCLE9BQ2ZtakYsRUFBVyxHQUNYNkgsRUFBUSxHQUNSNzBELEVBbEJPLE9BbUJQODBELEVBaEJ3QixXQWlDNUIsR0FOa0IsTUFBZHZ6QyxJQUNGdmhCLEVBOUJVLFFBK0JWNjBELEVBQVF0ekMsRUFDUkEsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixJQXpCVixNQTRCZjhxQixFQUFKLENBU0EsR0FMQTlxQixJQUNBbytELEdBQVN0ekMsRUFDVGtCLEVBQVEsR0E5Qkd0MUMsS0FpQ0Y2ekIsUUFBUWtuQyxXQXZDTCxNQXVDa0JwZ0UsRUFBTXl3QixPQUFPOUIsR0FBb0IsQ0FHN0QsR0EvQ1UsVUErQ051SixFQUNGLE9BR0Y2MEQsR0E5Q1UsSUErQ1ZwK0QsSUFDQXVKLEVBcERhLFdBMERmLElBRkFzb0IsRUFBUSxFQUVEN3hCLEVBQVE1c0IsR0FBUSxDQUdyQixHQXZEaUIsT0FxRGpCMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsSUFHdkJtK0QsR0FBWSxFQUNadHNDLFNBQ0ssR0F6RFcsTUF5RFAvRyxFQUErQixDQUN4QyxJQUFLK0csRUFDSCxNQUdGQSxJQWhFWSxPQW1FVi9HLElBQ0ZrQixHQXBFWSxLQXFFWmxCLEVBQVl6NUMsRUFBTXl3QixTQUFTOUIsSUFHN0Jnc0IsR0FBU2xCLEVBQ1Q5cUIsSUFPRixHQUpBdTJELEVBQVd2cUMsRUFDWG5CLEVBQVVtQixFQTNFVSxPQTRFcEJsQixFQUFZejVDLEVBQU15d0IsT0FBTzlCLElBRXpCLENBUUEsSUFKQUEsSUFDQXUyRCxHQUFZenJDLEVBQ1prQixFQUFRLEdBRURoc0IsRUFBUTVzQixJQUNiMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsR0FFcEJpNEQsRUFBV250QyxLQUloQmtCLEdBQVNsQixFQUNUOXFCLElBTUYsR0FIQThxQixFQUFZejVDLEVBQU15d0IsT0FBTzlCLEdBeEdWLGFBMkdYdUosR0FyR2UsTUFxR1F1aEIsRUFBOEIsQ0FLdkQsSUFKQWl4QyxFQUFhLEdBQ2IvdkMsR0FBU2xCLEVBQ1Q5cUIsSUFFT0EsRUFBUTVzQixHQTFHRSxPQTJHZjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBMUdULE1BNEdvQjhxQixHQTlHeEIsT0FrSFJBLElBQ0ZpeEMsR0FuSFUsS0FvSFZqeEMsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixJQUc3Qis3RCxHQUFjanhDLEVBQ2Q5cUIsSUF0SGdCLE9BeUhsQjhxQixFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBR3ZCcStELEVBQWdCdEMsRUFoSUksT0FESyxZQWtJekIvdkMsR0FBUyt2QyxFQUFhanhDLEVBQ3RCOXFCLEtBRUErN0QsRUFBYSxHQUdmeEYsR0FBWXZxQyxFQUNaQSxFQUFRLE9BQ0gsQ0FDTCxJQUFLbkIsRUFDSCxPQUdGa3hDLEVBQWFseEMsRUFJZixHQWxKd0IsU0FrSnBCd3pDLElBQXlDRixFQU03QyxPQUZBNUgsRUFBVzZILEVBQVE3SCxFQTNKUixTQTZKUGh0RCxHQWpKTzd5QixLQWlKaUJ3OEUsT0FDbkIsT0FJTGdGLElBaEtXLGFBb0tYM3VELElBQWlELElBQTFCc2hCLEVBQVF0b0MsUUFBUSxLQUNsQ3l6RSxFQUFJTyxFQUFKUCxDQUFjLENBQ25CenNELEtBQU0sV0FDTjhZLFNBQVUzckMsS0FBS3crRSxlQUFlcnFDLEVBQVNtckMsRUFBSTdrRSxXQUkvQ0EsRUFBTTZrRSxFQUFJN2tFLE9BQ040ckMsUUFBVXFoQyxFQUFNaHJGLE9BQ3BCK2QsRUFBSXlELFFBQVV3cEUsRUFBTWhyRixPQUdwQisxQixFQUFPLENBQ0xJLEtBQU1BLEVBQU8sWUFDYnd5RCxXQUFZNXJCLEVBSmQ0ckIsRUEzS3dCLFNBMktYc0MsRUFBd0N0QyxFQUFhbHhDLElBaEx2RCxTQXVMUHRoQixHQXRMUSxVQXNMV0EsSUFDckJKLEVBQUtrMUQsY0FBZ0JBLEdBeExaLFNBMkxQOTBELEdBQ0YwdkQsRUFoTFN2aUYsS0FnTEc2OEUsWUFDWnBxRCxFQUFLa1osU0FqTEkzckMsS0FpTFl3K0UsZUFBZXJxQyxFQUFTMTVCLEdBQzdDOG5FLEtBN0xVLFVBOExEMXZELElBQ1RKLEVBQUsrMEQsSUFwTEl4bkYsS0FvTE8weUQsT0FBT29zQixJQXBMZDkrRSxLQW9MdUJ5dUQsU0FBU3RhLEdBQVUxNUIsSUFBUSxNQUd0RDZrRSxFQUFJTyxFQUFKUCxDQUFjN3NELFMsNkJDMU12QixJQUFJbU4sRUFBTyxFQUFRLElBQ2YyaEQsRUFBYSxFQUFRLEdBQ3JCaUYsRUFBUyxFQUFRLEtBRXJCL3NGLEVBQU9ELFFBQVV5a0YsRUFDakJBLEVBQU93SSxRQUFVRCxFQUtqQixTQUFTdkksRUFBT3FCLEVBQUsza0YsRUFBTzZtRixHQUMxQixJQUdJL21FLEVBQ0F1Z0QsRUFDQXo0QixFQUNBK1MsRUFDQXVxQyxFQUNBbmpGLEVBQ0FxbEMsRUFSQXpZLEVBQVEsRUFDUjhxQixFQUFZejVDLEVBQU15d0IsT0FBTzlCLEdBUzdCLEtBZmUsTUFnQlo4cUIsR0FmYyxNQWVjQSxHQUM3Qno1QyxFQUFNeXdCLFNBQVM5QixLQUFXOHFCLElBSzVCNG1CLEVBbEJXaDdELEtBa0JLNnpCLFFBQVFtbkMsU0FFeEI2a0IsR0FEQXQ5QyxFQUFTNlIsR0FDVzdSLEVBQ3BCN2xDLEVBQVMvQixFQUFNK0IsT0FDZjRzQixJQUNBZ3NCLEVBQVEsR0FDUmxCLEVBQVksR0FFUjRtQixHQUFZdW1CLEVBQVc1bUYsRUFBTXl3QixPQUFPOUIsTUFJeEMsS0FBT0EsRUFBUTVzQixHQUFRLENBSXJCLEdBSEFxbEMsRUFBT3FTLEtBQ1BBLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsTUFHVGlaLEdBQ2Q1bkMsRUFBTXl3QixPQUFPOUIsRUFBUSxLQUFPaVosR0FDMUJ5NEIsR0FBYXVtQixFQUFXeC9DLE1BRTFCcVMsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixFQUFRLE1BRWZpWixFQUFRLENBQ3hCLElBQUszQyxFQUFLMFYsR0FDUixPQUlGLFFBQUlrc0MsS0FJSi9tRSxFQUFNNmtFLEVBQUk3a0UsT0FDTjRyQyxRQUFVLEVBQ2Q1ckMsRUFBSXlELFFBQVUsRUFFUG9oRSxFQUFJTyxFQUFXdnFDLEVBQVF1cUMsRUFBdkJQLENBQWlDLENBQ3RDenNELEtBQU0sU0FDTjhZLFNBekRHM3JDLEtBeURZdytFLGVBQWVscEMsRUFBTzc2QixNQUt0Q3VnRCxHQUEwQixPQUFkNW1CLElBQ2ZrQixHQUFTbEIsRUFDVEEsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixJQUc3QmdzQixHQUFTbEIsRUFDVDlxQixPLDZCQy9FSjd2QixFQUFPRCxRQUVQLFNBQWdCbUIsRUFBTzJnRSxHQUNyQixJQUFJc3NCLEVBQVdqdEYsRUFBTWtSLFFBQVEsS0FBTXl2RCxHQUMvQnVzQixFQUFhbHRGLEVBQU1rUixRQUFRLEtBQU15dkQsR0FFckMsSUFBb0IsSUFBaEJ1c0IsRUFDRixPQUFPRCxFQUdULElBQWtCLElBQWRBLEVBQ0YsT0FBT0MsRUFHVCxPQUFPQSxFQUFhRCxFQUFXQyxFQUFhRCxJLDZCQ2Q5QyxJQUFJaG9ELEVBQU8sRUFBUSxJQUNmMjRCLEVBQU8sRUFBUSxLQUNmZ3BCLEVBQWEsRUFBUSxHQUNyQmlGLEVBQVMsRUFBUSxLQUVyQi9zRixFQUFPRCxRQUFVMGtGLEVBQ2pCQSxFQUFTdUksUUFBVUQsRUFLbkIsU0FBU3RJLEVBQVNvQixFQUFLM2tGLEVBQU82bUYsR0FDNUIsSUFHSS9tRSxFQUNBdWdELEVBQ0F6NEIsRUFDQStTLEVBQ0F1cUMsRUFDQW5qRixFQUNBcWxDLEVBUkF6WSxFQUFRLEVBQ1I4cUIsRUFBWXo1QyxFQUFNeXdCLE9BQU85QixHQVM3QixLQWZlLE1BZVg4cUIsR0FkYSxNQWNlQSxJQUloQzRtQixFQWZXaDdELEtBZUs2ekIsUUFBUW1uQyxTQUN4QjZrQixFQUFXenJDLEVBQ1g3UixFQUFTNlIsRUFDVDEzQyxFQUFTL0IsRUFBTStCLE9BQ2Y0c0IsSUFDQWdzQixFQUFRLEdBQ1JsQixFQUFZLEdBRVI0bUIsR0FBWXVtQixFQUFXNW1GLEVBQU15d0IsT0FBTzlCLE1BSXhDLEtBQU9BLEVBQVE1c0IsR0FBUSxDQUlyQixHQUhBcWxDLEVBQU9xUyxLQUNQQSxFQUFZejVDLEVBQU15d0IsT0FBTzlCLE1BRVBpWixHQUFZeTRCLEdBQWF1bUIsRUFBV3gvQyxJQUFRLENBRzVELElBRkFxUyxFQUFZejVDLEVBQU15d0IsU0FBUzlCLE1BRVRpWixFQUFRLENBQ3hCLElBQUszQyxFQUFLMFYsSUFBVXZULElBQVNRLEVBQzNCLE9BR0YsSUFBS3k0QixHQTFDTSxNQTBDTXo0QixHQUEyQmcyQixFQUFLbmtCLEdBQVksQ0FDM0RrQixHQUFTL1MsRUFDVCxTQUlGLFFBQUlpL0MsS0FJSi9tRSxFQUFNNmtFLEVBQUk3a0UsT0FDTjRyQyxTQUNKNXJDLEVBQUl5RCxTQUVHb2hFLEVBQUlPLEVBQVd2cUMsRUFBUS9TLEVBQXZCKzhDLENBQStCLENBQ3BDenNELEtBQU0sV0FDTjhZLFNBdkRHM3JDLEtBdURZdytFLGVBQWVscEMsRUFBTzc2QixNQUl6QzY2QixHQUFTL1MsRUFHTnk0QixHQUEwQixPQUFkNW1CLElBQ2ZrQixHQUFTbEIsRUFDVEEsRUFBWXo1QyxFQUFNeXdCLFNBQVM5QixJQUc3QmdzQixHQUFTbEIsRUFDVDlxQixPLDZCQ2hGSjd2QixFQUFPRCxRQU9QLFNBQXVCNDZDLEdBQ3JCLE9BQU9ua0IsRUFBR2pyQixLQUNhLGlCQUFkb3ZDLEVBQXlCQyxFQUFTRCxHQUFhQSxFQUFVaHBCLE9BQU8sS0FQM0UsSUFBSWlwQixFQUFXN3pCLE9BQU84bkIsYUFDbEJyWSxFQUFLLE0sNkJDSFR4MkIsRUFBT0QsUUFFUCxTQUFnQm1CLEVBQU8yZ0UsR0FDckIsSUFBSXNzQixFQUFXanRGLEVBQU1rUixRQUFRLElBQUt5dkQsR0FDOUJ1c0IsRUFBYWx0RixFQUFNa1IsUUFBUSxJQUFLeXZELEdBRXBDLElBQW9CLElBQWhCdXNCLEVBQ0YsT0FBT0QsRUFHVCxJQUFrQixJQUFkQSxFQUNGLE9BQU9DLEVBR1QsT0FBT0EsRUFBYUQsRUFBV0MsRUFBYUQsSSw2QkNkOUMsSUFBSXJHLEVBQWEsRUFBUSxHQUNyQmlGLEVBQVMsRUFBUSxLQUVyQi9zRixFQUFPRCxRQUFVc3VGLEVBQ2pCQSxFQUFjckIsUUFBVUQsRUFLeEIsU0FBU3NCLEVBQWN4SSxFQUFLM2tGLEVBQU82bUYsR0FDakMsSUFLSWw0RCxFQUNBNXNCLEVBQ0ErZCxFQU5BMjVCLEVBQVksR0FDWjJ6QyxFQUFXLEdBQ1hDLEVBQVksR0FDWm5JLEVBQVcsR0FLZixHQVRXNy9FLEtBVUg2ekIsUUFBUWduQyxLQWRKLE1BZVZsZ0UsRUFBTXl3QixPQUFPLElBZkgsTUFnQlZ6d0IsRUFBTXl3QixPQUFPLEtBQ2JtMkQsRUFBVzVtRixFQUFNeXdCLE9BQU8sSUFXMUIsSUFOQTlCLEVBQVEsRUFDUjVzQixFQUFTL0IsRUFBTStCLFFBQ2YrZCxFQUFNNmtFLEVBQUk3a0UsT0FDTjRyQyxRQUFVLEVBQ2Q1ckMsRUFBSXlELFFBQVUsSUFFTG9MLEVBQVE1c0IsR0FBUSxDQUd2QixLQS9CVSxPQTZCVjAzQyxFQUFZejVDLEVBQU15d0IsT0FBTzlCLEtBN0JmLE1BaUNSeStELEdBQ0VDLEdBQWN6RyxFQUFXeUcsSUFHM0IsUUFBSXhHLEdBSUdsQyxFQXhDQSxLQXdDYU8sRUF4Q2IsS0F3Q0FQLENBQWdDLENBQ3JDenNELEtBQU0sU0FDTjhZLFNBdkNLM3JDLEtBdUNVdytFLGVBQWVxQixFQUFVcGxFLEtBSTVDb2xFLEdBQVlrSSxFQUNaQyxFQUFZRCxFQUNaQSxFQUFXM3pDLEssNkJDdkRmMzZDLEVBQU9ELFFBRVAsU0FBZ0JtQixFQUFPMmdFLEdBQ3JCLE9BQU8zZ0UsRUFBTWtSLFFBQVEsS0FBTXl2RCxLLDZCQ0g3QixJQUFJaW1CLEVBQWEsRUFBUSxHQUNyQmlGLEVBQVMsRUFBUSxLQUVyQi9zRixFQUFPRCxRQUFVeXVGLEVBQ2pCQSxFQUFXeEIsUUFBVUQsRUFLckIsU0FBU3lCLEVBQVczSSxFQUFLM2tGLEVBQU82bUYsR0FjOUIsSUFiQSxJQUlJRyxFQUNBeUQsRUFDQTc5QixFQUNBMmdDLEVBQ0FySSxFQUNBenJDLEVBQ0ErekMsRUFDQW54RSxFQVhBdGEsRUFBUy9CLEVBQU0rQixPQUNmNHNCLEVBQVEsRUFDUmdzQixFQUFRLEdBQ1I4eUMsRUFBWSxHQVVUOStELEVBQVE1c0IsR0FqQkosTUFrQkwvQixFQUFNeXdCLE9BQU85QixJQUlqQmdzQixHQXRCUyxJQXVCVGhzQixJQUdGLEdBQUtnc0IsRUFBTCxDQVVBLElBTkF1cUMsRUFBV3ZxQyxFQUNYNHlDLEVBQWU1K0QsRUFDZmdzQixFQUFRLEdBQ1J0K0IsRUFBT3JjLEVBQU15d0IsT0FBTzlCLEdBQ3BCaStCLEVBQVEsRUFFRGorQixFQUFRNXNCLEdBQVEsQ0FZckIsR0FYQTAzQyxFQUFZcDlCLEVBQ1pBLEVBQU9yYyxFQUFNeXdCLE9BQU85QixFQUFRLEdBdENuQixNQXdDTDhxQixHQUNGbVQsSUFDQTZnQyxHQUFhaDBDLElBRWJtVCxFQUFRLEVBQ1JqUyxHQUFTbEIsR0FHUG1ULEdBaERLLE1BZ0RJdndDLEVBQWlCLENBQzVCLEdBQUl1d0MsSUFBVTJnQyxFQUFjLENBQzFCckksR0FBWXZxQyxFQUFROHlDLEVBQ3BCRCxHQUFRLEVBQ1IsTUFHRjd5QyxHQUFTOHlDLEVBQ1RBLEVBQVksR0FHZDkrRCxJQUdGLElBQUs2K0QsRUFBTyxDQUNWLEdBQUlELEVBQWUsR0FBTSxFQUN2QixPQUdGNXlDLEVBQVEsR0FJVixHQUFJa3NDLEVBQ0YsT0FBTyxFQVFULElBTEFHLEVBQWUsR0FDZnlELEVBQVcsR0FDWDFvRixFQUFTNDRDLEVBQU01NEMsT0FDZjRzQixHQUFTLElBRUFBLEVBQVE1c0IsR0FDZjAzQyxFQUFZa0IsRUFBTWxxQixPQUFPOUIsR0FFckJpNEQsRUFBV250QyxHQUNiZ3hDLEdBQVloeEMsR0FJVmd4QyxJQUNFekQsSUFDRkEsR0FBZ0J5RCxHQUdsQkEsRUFBVyxJQUdiekQsR0FBZ0J2dEMsR0FHbEIsT0FBT2tyQyxFQUFJTyxFQUFKUCxDQUFjLENBQ25CenNELEtBQU0sYUFDTmw0QixNQUFPZ25GLE8sNkJDM0dYbG9GLEVBQU9ELFFBRVAsU0FBZ0JtQixFQUFPMmdFLEdBQ3JCLE9BQU8zZ0UsRUFBTWtSLFFBQVEsSUFBS3l2RCxLLDZCQ0g1QixJQUFJa3JCLEVBQVMsRUFBUSxLQUVyQi9zRixFQUFPRCxRQUFVNnVGLEVBQ2pCQSxFQUFVNUIsUUFBVUQsRUFJcEIsU0FBUzZCLEVBQVUvSSxFQUFLM2tGLEVBQU82bUYsR0FNN0IsSUFMQSxJQUdJcHRDLEVBSEExM0MsRUFBUy9CLEVBQU0rQixPQUNmNHNCLEdBQVMsRUFDVGdzQixFQUFRLEtBR0hoc0IsRUFBUTVzQixHQUFRLENBR3ZCLEdBQWtCLFFBRmxCMDNDLEVBQVl6NUMsRUFBTXl3QixPQUFPOUIsSUFFRCxDQUN0QixHQUFJQSxFQVphLEVBYWYsT0FJRixRQUFJazRELEdBTUdsQyxFQUZQaHFDLEdBQVNsQixFQUVGa3JDLENBQVcsQ0FBQ3pzRCxLQUFNLFVBRzNCLEdBQWtCLE1BQWR1aEIsRUFDRixPQUdGa0IsR0FBU2xCLEssNkJDbkNiMzZDLEVBQU9ELFFBRVAsU0FBZ0JtQixFQUFPMmdFLEdBQ3JCLElBQUloeUMsRUFBUTN1QixFQUFNa1IsUUFBUSxLQUFNeXZELEdBRWhDLEtBQU9oeUMsRUFBUWd5QyxHQUNtQixNQUE1QjNnRSxFQUFNeXdCLE9BQU85QixFQUFRLElBSXpCQSxJQUdGLE9BQU9BLEksNkJDYlQ3dkIsRUFBT0QsUUFFUCxTQUFjOGxGLEVBQUsza0YsRUFBTzZtRixHQUN4QixJQUNJbkMsRUFDQXA0QixFQUNBMzlCLEVBQ0E1c0IsRUFDQW1qRixFQUNBOTZCLEVBQ0FxM0IsRUFDQW5pRixFQUNBcVYsRUFDQW1MLEVBR0osR0FBSSttRSxFQUNGLE9BQU8sRUFHVG5DLEVBakJXci9FLEtBaUJJcytFLGNBQ2Y1aEYsRUFBUzJpRixFQUFRM2lGLE9BQ2pCdXFELEVBbkJXam5ELEtBbUJPKzlFLGlCQUNsQnowRCxHQUFTLEVBQ1RoYSxFQUFNM1UsRUFBTStCLE9BRVosT0FBUzRzQixFQUFRNXNCLEdBR0YsVUFGYnpDLEVBQU9vbEYsRUFBUS8xRCxLQUVTMjlCLEVBQVdodEQsTUFJbkNtaUYsRUFBWW4xQixFQUFXaHRELEdBQU13c0YsVUFHM0JuSCxFQUFJN0csS0FBSzRCLEtBQUsscUJBQXVCcGdGLEVBQU8sTUFLNUIsS0FGbEI4cUQsRUFBV3EzQixFQUFVdmlGLEtBcENabUcsS0FvQ3VCckYsRUFBTyxLQUVoQm9xRCxFQUFXejFDLElBQ2hDQSxFQUFNeTFDLElBSVY4NkIsRUFBV2xsRixFQUFNcUgsTUFBTSxFQUFHc04sR0FDMUJtTCxFQUFNNmtFLEVBQUk3a0UsTUE1Q0N6YSxLQThDTjB5RCxPQUFPbXRCLEVBQVVwbEUsR0FBSyxTQUFVMDVCLEVBQVM0USxFQUFVdjZCLEdBQ3REODBELEVBQUk5MEQsR0FBVTJwQixFQUFkbXJDLENBQXVCLENBQ3JCenNELEtBQU0sT0FDTmw0QixNQUFPdzVDLFMsNkJDN0NiLElBQUltMEMsRUFBdUIsRUFBUSxLQUVuQyxTQUFTQyxLQUNULFNBQVNDLEtBQ1RBLEVBQXVCQyxrQkFBb0JGLEVBRTNDOXVGLEVBQU9ELFFBQVUsV0FDZixTQUFTa3ZGLEVBQUtwdEQsRUFBT3F0RCxFQUFVQyxFQUFlbFosRUFBVW1aLEVBQWNDLEdBQ3BFLEdBQUlBLElBQVdSLEVBQWYsQ0FJQSxJQUFJeDJELEVBQU0sSUFBSTV2QixNQUNaLG1MQUtGLE1BREE0dkIsRUFBSTczQixLQUFPLHNCQUNMNjNCLEdBR1IsU0FBU2kzRCxJQUNQLE9BQU9MLEVBRlRBLEVBQUtNLFdBQWFOLEVBTWxCLElBQUlPLEVBQWlCLENBQ25CM2tGLE1BQU9va0YsRUFDUFEsT0FBUVIsRUFDUnRoQyxLQUFNc2hDLEVBQ054a0YsS0FBTXdrRixFQUNOM2xGLE9BQVEybEYsRUFDUnR0RixPQUFRc3RGLEVBQ1I5dkUsT0FBUTh2RSxFQUNSNzJDLE9BQVE2MkMsRUFFUlMsSUFBS1QsRUFDTDdqQixRQUFTa2tCLEVBQ1RLLFFBQVNWLEVBQ1RXLFlBQWFYLEVBQ2JZLFdBQVlQLEVBQ1p0MkQsS0FBTWkyRCxFQUNOYSxTQUFVUixFQUNWamtCLE1BQU9pa0IsRUFDUGhrQixVQUFXZ2tCLEVBQ1hTLE1BQU9ULEVBQ1BVLE1BQU9WLEVBRVBXLGVBQWdCbEIsRUFDaEJDLGtCQUFtQkYsR0FLckIsT0FGQVUsRUFBZTltQixVQUFZOG1CLEVBRXBCQSxJLDZCQ3BEVHh2RixFQUFPRCxRQUZvQixnRCxnQkNUM0IsSUFBSW13RixFQUFtQixFQUFRLEtBb0IvQmx3RixFQUFPRCxRQWxCUCxXQUNFLE9BQU8sU0FBVWdyRSxHQWFmLE9BWkFtbEIsRUFBaUJubEIsRUFBSyxRQUFRLFNBQVVvbEIsRUFBVXZxQyxHQUNoRCxJQUFlM2xELEVBQUd5QixFQUFkZ2dELEVBQVEsRUFDWixJQUFLemhELEVBQUksRUFBR3lCLEVBQUlra0QsRUFBUTNpRCxPQUFRaEQsRUFBSXlCLEVBQUd6QixJQUNiLFNBQXBCMmxELEVBQVEzbEQsR0FBR201QixPQUFpQnNvQixHQUFTLEdBRTNDLElBQUt6aEQsRUFBSSxFQUFHeUIsRUFBSXl1RixFQUFTaitDLFNBQVNqdkMsT0FBUWhELEVBQUl5QixFQUFHekIsSUFBSyxDQUNwRCxJQUFJeThFLEVBQVF5VCxFQUFTaitDLFNBQVNqeUMsR0FDOUJ5OEUsRUFBTTdzRCxNQUFRNXZCLEVBQ2R5OEUsRUFBTXlNLFFBQVVnSCxFQUFTaEgsUUFFM0JnSCxFQUFTenVDLE1BQVFBLEtBRVpxcEIsSyw2QkNiWC9xRSxFQUFPRCxRQUdQLFNBQXNCMGxELEVBQU1yc0IsRUFBTXNzQixHQUNoQyxJQUFJaDlDLEVBQVEsR0FFUSxtQkFBVDB3QixJQUNUc3NCLEVBQVV0c0IsRUFDVkEsRUFBTyxNQU1ULFNBQVMrbEMsRUFBSW5tQyxHQUNYLElBQUkvWSxFQU1KLE9BSkttWixHQUFRSixFQUFLSSxPQUFTQSxJQUN6Qm5aLEVBQVN5bEMsRUFBUTFzQixFQUFNdHdCLEVBQU1tUCxXQUczQm1oQixFQUFLa1osV0FBdUIsSUFBWGp5QixFQVF2QixTQUFhaXlCLEVBQVUyVCxHQUNyQixJQUVJNjJCLEVBRkF6NUUsRUFBU2l2QyxFQUFTanZDLE9BQ2xCNHNCLEdBQVMsRUFHYm5uQixFQUFNOUUsS0FBS2lpRCxHQUVYLE9BQVNoMkIsRUFBUTVzQixHQUdmLElBRkF5NUUsRUFBUXhxQyxFQUFTcmlCLE1BRVcsSUFBZnN2QyxFQUFJdWQsR0FDZixPQUFPLEVBTVgsT0FGQWgwRSxFQUFNb3dELE9BRUMsRUF4QkUyYSxDQUFJejZDLEVBQUtrWixTQUFVbFosR0FHckIvWSxFQWRUay9DLEVBQUkxWixLLDZCQ1BOLElBQUlMLEVBQVEsRUFBUSxJQUdoQmdyQyxFQUFnQiwyRkFDaEJDLEVBQWMsdUJBRWxCcndGLEVBQU9ELFFBQVUsU0FBVTBsRCxHQUN6QixJQUFJMFAsRUFDQW03QixFQW1DSixPQWxDQWxyQyxFQUFNSyxFQUFNLFFBQVEsU0FBVXpzQixFQUFNbkosRUFBT2cyQixHQUNyQ3lxQyxJQUFrQnpxQyxJQUNwQnNQLEVBQU8sR0FDUG03QixFQUFnQnpxQyxHQUdsQixJQUFJMHFDLEVBb0RSLFNBQXdCdjNELEdBQ3RCLElBQUlsdUIsRUFBUWt1QixFQUFLOTNCLE1BQU00SixNQUFNc2xGLEdBQzdCLFFBQU90bEYsR0FBUUEsRUFBTSxHQXRERDBsRixDQUFleDNELEdBRWpDLEdBQUl1M0QsRUFNRixPQUxBMXFDLEVBQU8zVCxTQUFTTyxPQUFPNWlCLEVBQU8sRUFBRyxDQUMvQnVKLEtBakJHLGNBa0JIaU4sSUFBS2txRCxFQUNMamxDLFNBQVV0eUIsRUFBS3N5QixZQUVWLEVBR1QsSUFBSWtpQixFQWdDUixTQUFzQngwQyxFQUFNNnNCLEdBQzFCLElBQUkvNkMsRUFBUWt1QixFQUFLOTNCLE1BQU00SixNQUFNdWxGLEdBQzdCLFFBQU92bEYsR0FBUSxDQUNidTdCLElBQUt2N0IsRUFBTSxHQUNYMmhGLFNBQVUzaEYsRUFBTSxHQUNoQmt1QixLQUFNQSxHQXJDUXkzRCxDQUFhejNELEdBRTNCLElBQUt3MEMsRUFDSCxPQUFPLEVBR1QsSUFBSWtqQixFQWNSLFNBQXFCdjdCLEVBQU13N0IsR0FDekIsSUFBSTF3RixFQUFJazFELEVBQUtseUQsT0FFYixLQUFPaEQsS0FDTCxHQUFJazFELEVBQUtsMUQsR0FBR29tQyxNQUFRc3FELEVBQ2xCLE9BQU94N0IsRUFBSzFpQixPQUFPeHlDLEVBQUcsR0FBRyxHQUk3QixPQUFPLEVBdkJVMndGLENBQVl6N0IsRUFBTXFZLEVBQVFubkMsS0FRekMsT0FOSXFxRCxFQUNGN3FDLEVBQU8zVCxTQUFTTyxPQUFPNWlCLEVBQU8sRUFxQ3BDLFNBQWlCZ2hFLEVBQVVDLEVBQVFqckMsR0FDakMsSUFBSWdjLEVBQVloYyxFQUFPM1QsU0FBUzkvQixRQUFReStFLEVBQVM3M0QsTUFDN0MrM0QsRUFBVWxyQyxFQUFPM1QsU0FBUzkvQixRQUFRMCtFLEVBQU85M0QsTUFFekNrWixFQURZMlQsRUFBTzNULFNBQVNPLE9BQU9vdkIsRUFBV2t2QixFQUFVbHZCLEVBQVksR0FDL0N0NUQsTUFBTSxHQUFJLEdBQ25DLE1BQU8sQ0FDTDZ3QixLQTVFTyxjQTZFUDhZLFNBQVVBLEVBQ1Y3TCxJQUFLd3FELEVBQVN4cUQsSUFDZGlsQixTQUFVLENBQ1JDLE1BQU9zbEMsRUFBUzczRCxLQUFLc3lCLFNBQVNDLE1BQzlCL2dCLElBQUtzbUQsRUFBTzkzRCxLQUFLc3lCLFNBQVM5Z0IsSUFDMUJzWCxPQUFRLEtBakR5Qmt2QyxDQUFReGpCLEVBQVNrakIsRUFBVTdxQyxJQUNsRDJuQixFQUFRaWYsU0FDbEJ0M0IsRUFBS3Z4RCxLQUFLNHBFLElBR0wsS0FDTixHQUVJL25CLEksNkJDaERULElBQUlMLEVBQVEsRUFBUSxJQThCcEIsU0FBUzZyQyxFQUFTajRELEVBQU1uSixFQUFPZzJCLEVBQVF6a0QsR0FDckMsR0FBYSxXQUFUQSxFQUNGeWtELEVBQU8zVCxTQUFTTyxPQUFPNWlCLEVBQU8sUUFDekIsR0FBYSxXQUFUenVCLEVBQW1CLENBQzVCLElBQUlpSCxFQUFPLENBQUN3bkIsRUFBTyxHQUVmbUosRUFBS2taLFdBQ1A3cEMsRUFBT0EsRUFBS3dQLE9BQU9taEIsRUFBS2taLFdBRzFCMXZDLE1BQU1YLFVBQVU0d0MsT0FBT3J3QyxNQUFNeWpELEVBQU8zVCxTQUFVN3BDLElBdENsRHRJLEVBQVFvcUUsT0FBUyxTQUFVc0IsRUFBT3JxRSxHQUNoQyxPQUFPLFNBQVU0M0IsR0FJZixPQUhBeXlDLEVBQU1ydUQsU0FBUSxTQUFVZ2MsR0FDdEIsT0FBT2dzQixFQUFNcHNCLEVBQU1JLEVBQU04M0QsR0FBVSxNQUU5Qmw0RCxHQUdULFNBQVNrNEQsRUFBU2w0RCxFQUFNbkosRUFBT2cyQixHQUN6QkEsR0FDRm9yQyxFQUFTajRELEVBQU1uSixFQUFPZzJCLEVBQVF6a0QsS0FLcENyQixFQUFRc3FFLFdBQWEsU0FBVUQsRUFBV2hwRSxHQUN4QyxPQUFPLFNBQVU0M0IsR0FFZixPQURBb3NCLEVBQU1wc0IsRUFBTWs0RCxHQUFVLEdBQ2ZsNEQsR0FHVCxTQUFTazRELEVBQVNsNEQsRUFBTW5KLEVBQU9nMkIsR0FDekJBLElBQVd1a0IsRUFBVXB4QyxFQUFNbkosRUFBT2cyQixJQUNwQ29yQyxFQUFTajRELEVBQU1uSixFQUFPZzJCLEVBQVF6a0QsTSw2QkN6QnBDLElBQUkrdkYsRUFBUSxFQUFRLEdBRWhCM29CLEVBQVEsRUFBUSxHQUVoQjRvQixFQUFVLEVBQVEsSUFFbEJDLEVBQXNCLENBQ3hCOWxDLE1BQU8sQ0FDTHNCLEtBQU0sRUFDTkQsT0FBUSxFQUNSbm9DLE9BQVEsR0FFVitsQixJQUFLLENBQ0hxaUIsS0FBTSxFQUNORCxPQUFRLEVBQ1Jub0MsT0FBUSxJQUlaLFNBQVNxa0QsRUFBVzl2QyxFQUFNb0IsR0FDeEIsSUFBSXlyQixFQUFTeGpELFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUM3RXd0QixFQUFReHRCLFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUM1RWl2RixFQUFXbDNELEVBQVFxdkMsVUFBVXp3QyxFQUFLSSxXQUloQnB6QixJQUFsQmd6QixFQUFLc3lCLFdBQ1B0eUIsRUFBS3N5QixTQUFXekYsRUFBTzdzQixNQUFRNnNCLEVBQU83c0IsS0FBS3N5QixVQUFZK2xDLEdBR3pELElBQUluM0UsRUFBTThlLEVBQUtzeUIsU0FBU0MsTUFDcEIvcEQsRUFBTSxDQUFDdzNCLEVBQUtJLEtBQU1sZixFQUFJMnlDLEtBQU0zeUMsRUFBSTB5QyxPQUFRLzhCLEdBQU9ybkIsS0FBSyxLQUV4RCxJQUFLNG9GLEVBQVFyZixtQkFBbUJ1ZixHQUM5QixNQUFNLElBQUk3b0YsTUFBTSxzQkFBc0JvUCxPQUFPbWhCLEVBQUtJLEtBQU0sdUNBRzFELElBQUltNEQsRUFBWUMsRUFBYXg0RCxFQUFNeDNCLEVBQUs0NEIsRUFBU2szRCxFQUFVenJDLEVBQVFoMkIsR0FDbkUsT0FBT3NoRSxFQUFNenBELGNBQWM0cEQsRUFBVUMsRUFBV0EsRUFBVXIvQyxVQUFZdS9DLFVBQXFCenJGLEdBRTNGLFNBQVN5ckYsSUFDUCxPQUFPejRELEVBQUtrWixVQUFZbFosRUFBS2taLFNBQVMzdUMsS0FBSSxTQUFVbXVGLEVBQVd6eEYsR0FDN0QsT0FBTzZvRSxFQUFXNG9CLEVBQVd0M0QsRUFBUyxDQUNwQ3BCLEtBQU1BLEVBQ042SSxNQUFPMHZELEdBQ050eEYsT0FNVCxTQUFTdXhGLEVBQWF4NEQsRUFBTXgzQixFQUFLMC9DLEVBQU1vd0MsRUFBVXpyQyxFQUFRaDJCLEdBQ3ZELElBaU11QjNWLEVBak1uQjJuQixFQUFRLENBQ1ZyZ0MsSUFBS0EsR0FFSG13RixFQUFvQyxpQkFBYkwsRUFFdkJwd0MsRUFBSytwQixXQUFhanlDLEVBQUtzeUIsV0FDekJ6cEIsRUFBTSxrQkE0TEQsRUFEZ0IzbkIsRUEzTHFCOGUsRUFBS3N5QixVQTRMckNDLE1BQU1zQixLQUFNLElBQUszeUMsRUFBSXF4QyxNQUFNcUIsT0FBUSxJQUFLMXlDLEVBQUlzd0IsSUFBSXFpQixLQUFNLElBQUszeUMsRUFBSXN3QixJQUFJb2lCLFFBQVFycEQsSUFBSXdqQixRQUFRdmUsS0FBSyxLQXpMcEcwNEMsRUFBS2dxQixlQUFpQnltQixJQUN4Qjl2RCxFQUFNK3ZELGVBQWlCNTRELEVBQUtzeUIsVUFJMUJwSyxFQUFLMndDLGtCQUFvQmhzQyxFQUFPN3NCLE1BQVE2c0IsRUFBTzdzQixLQUFLa1osV0FBYXkvQyxJQUNuRTl2RCxFQUFNaFMsTUFBUWcyQixFQUFPN3NCLEtBQUtrWixTQUFTOS9CLFFBQVE0bUIsR0FDM0M2SSxFQUFNaXdELGlCQUFtQmpzQyxFQUFPN3NCLEtBQUtrWixTQUFTanZDLFFBR2hELElBQUk0d0MsRUFBMEIsT0FBcEI3YSxFQUFLNHlELGlCQUEyQzVsRixJQUFwQmd6QixFQUFLNHlELFdBQTJCMXFDLEVBQUs2b0IsWUFBWS93QyxFQUFLNHlELGFBQWUsR0FBSyxLQUVoSCxPQUFRNXlELEVBQUtJLE1BQ1gsSUFBSyxPQUNIMjRELEVBQWNsd0QsRUFBTyxDQUNuQmtTLFVBQVdtTixFQUFLbk4sWUFFbEIsTUFFRixJQUFLLE9BQ0hsUyxFQUFNbXdELFFBQVV4d0YsRUFDaEJxZ0MsRUFBTXFRLFNBQVdsWixFQUFLOTNCLE1BQ3RCLE1BRUYsSUFBSyxVQUNIMmdDLEVBQU1ySCxNQUFReEIsRUFBSzBvQixNQUNuQixNQUVGLElBQUssT0FDSDdmLEVBQU0wcEIsTUFBUXZ5QixFQUFLdXlCLE1BQ25CMXBCLEVBQU1zbkQsUUFBVW53RCxFQUFLbXdELFFBQ3JCdG5ELEVBQU1vd0QsT0FBU2o1RCxFQUFLbXhELE1BQ3BCdG9ELEVBQU02ZixNQUFRMW9CLEVBQUswb0IsTUFDbkIsTUFFRixJQUFLLFdBQ0g3ZixFQUFNZ3BELFFBQVU3eEQsRUFBSzZ4RCxRQUNyQmhwRCxFQUFNb3dELE9BQVNqNUQsRUFBS214RCxNQUNwQnRvRCxFQUFNc25ELFFBQVVud0QsRUFBS213RCxRQUNyQnRuRCxFQUFNaFMsTUFBUW1KLEVBQUtuSixNQUNuQmdTLEVBQU1xUSxTQW9KWixTQUE2QmxaLEVBQU02c0IsR0FDakMsR0FBSTdzQixFQUFLbXhELE1BQ1AsT0FBT254RCxFQUFLa1osU0FHZCxHQUFJMlQsRUFBTzdzQixNQUFRQSxFQUFLbkosTUFBUSxHQUFLZzJCLEVBQU83c0IsS0FBS2taLFNBQVNsWixFQUFLbkosTUFBUSxHQUFHczZELE1BQ3hFLE9BQU9ueEQsRUFBS2taLFNBR2QsT0FHRixTQUEwQmxaLEdBQ3hCLE9BQU9BLEVBQUtrWixTQUFTaGIsUUFBTyxTQUFVcnNCLEVBQU82eEUsR0FDM0MsT0FBTzd4RSxFQUFNZ04sT0FBc0IsY0FBZjZrRSxFQUFNdGpELEtBQXVCc2pELEVBQU14cUMsVUFBWSxHQUFLLENBQUN3cUMsTUFDeEUsSUFOSXdWLENBQWlCbDVELEdBN0pIbTVELENBQW9CbjVELEVBQU02c0IsR0FBUXRpRCxLQUFJLFNBQVVtdUYsRUFBV3p4RixHQUMxRSxPQUFPNm9FLEVBQVc0b0IsRUFBV3h3QyxFQUFNLENBQ2pDbG9CLEtBQU1BLEVBQ042SSxNQUFPQSxHQUNONWhDLE1BRUwsTUFFRixJQUFLLGFBQ0g4eEYsRUFBY2x3RCxFQUFPLENBQ25CK3BELFdBQVk1eUQsRUFBSzR5RCxXQUNqQm54RCxNQUFPekIsRUFBS3lCLE1BQ1o0NEIsSUFBS3I2QixFQUFLcTZCLE1BRVosTUFFRixJQUFLLE9BQ0gwK0IsRUFBY2x3RCxFQUFPLENBQ25CdXdELFNBQVVwNUQsRUFBSzlRLE1BQVE4USxFQUFLOVEsS0FBS25ULE1BQU0sS0FBTSxHQUFHLEtBRWxELE1BRUYsSUFBSyxhQUNIOHNCLEVBQU1xUSxTQUFXbFosRUFBSzkzQixNQUN0QjJnQyxFQUFNd3dELFFBQVMsRUFDZixNQUVGLElBQUssT0FDSE4sRUFBY2x3RCxFQUFPLENBQ25CcEgsTUFBT3pCLEVBQUt5QixZQUFTejBCLEVBQ3JCZ3dCLE9BQW1DLG1CQUFwQmtyQixFQUFLcXFCLFdBQTRCcnFCLEVBQUtxcUIsV0FBV3Z5QyxFQUFLcTZCLElBQUtyNkIsRUFBS2taLFNBQVVsWixFQUFLeUIsT0FBU3ltQixFQUFLcXFCLFdBQzVHc0ssS0FBTTMwQixFQUFLaXFCLGlCQUFtQmpxQixFQUFLaXFCLGlCQUFpQm55QyxFQUFLcTZCLElBQUtyNkIsRUFBS2taLFNBQVVsWixFQUFLeUIsT0FBU3pCLEVBQUtxNkIsTUFFbEcsTUFFRixJQUFLLFFBQ0gwK0IsRUFBY2x3RCxFQUFPLENBQ25Ca3NELElBQUsvMEQsRUFBSyswRCxVQUFPL25GLEVBQ2pCeTBCLE1BQU96QixFQUFLeUIsWUFBU3owQixFQUNyQnFqRSxJQUFLbm9CLEVBQUtzcUIsa0JBQW9CdHFCLEVBQUtzcUIsa0JBQWtCeHlDLEVBQUtxNkIsSUFBS3I2QixFQUFLa1osU0FBVWxaLEVBQUt5QixNQUFPekIsRUFBSyswRCxLQUFPLzBELEVBQUtxNkIsTUFFN0csTUFFRixJQUFLLGdCQUNIMCtCLEVBQWNsd0QsRUFBTzJtQyxFQUFNMzBCLEVBQUssQ0FDOUJnaUMsS0FBTTMwQixFQUFLaXFCLGlCQUFtQmpxQixFQUFLaXFCLGlCQUFpQnQzQixFQUFJZ2lDLE1BQVFoaUMsRUFBSWdpQyxRQUV0RSxNQUVGLElBQUssaUJBQ0hrYyxFQUFjbHdELEVBQU8sQ0FDbkJ3bkMsSUFBS25vQixFQUFLc3FCLG1CQUFxQjMzQixFQUFJZ2lDLEtBQU8zMEIsRUFBS3NxQixrQkFBa0IzM0IsRUFBSWdpQyxLQUFNNzhDLEVBQUtrWixTQUFVMkIsRUFBSXBaLE1BQU96QixFQUFLKzBELEtBQU9sNkMsRUFBSWdpQyxLQUNySHA3QyxNQUFPb1osRUFBSXBaLFlBQVN6MEIsRUFDcEIrbkYsSUFBSy8wRCxFQUFLKzBELFVBQU8vbkYsSUFFbkIsTUFFRixJQUFLLFFBQ0wsSUFBSyxZQUNMLElBQUssWUFDSDY3QixFQUFNeXdELGdCQUFrQnQ1RCxFQUFLc3pELE1BQzdCLE1BRUYsSUFBSyxXQUNIenFELEVBQU0wd0QsU0FBZ0MsY0FBckIxc0MsRUFBTzdzQixLQUFLSSxLQUM3QnlJLEVBQU15d0QsZ0JBQWtCenNDLEVBQU9oa0IsTUFBTXl3RCxnQkFDckMsTUFFRixJQUFLLFlBQ0hQLEVBQWNsd0QsRUFBTyxDQUNuQjB3RCxTQUFVMXNDLEVBQU9oa0IsTUFBTTB3RCxTQUN2QmpHLE1BQU96bUMsRUFBT2hrQixNQUFNeXdELGdCQUFnQnppRSxLQUV0QyxNQUVGLElBQUssY0FDSGdTLEVBQU13RSxJQUFNck4sRUFBS3FOLElBQ2pCLE1BRUYsSUFBSyxPQUVIeEUsRUFBTTJ3RCxRQUFVeDVELEVBQUtzeUIsU0FBU0MsTUFBTXNCLE9BQVM3ekIsRUFBS3N5QixTQUFTOWdCLElBQUlxaUIsS0FDL0RockIsRUFBTTBvQyxXQUFhcnBCLEVBQUtxcEIsV0FDeEIxb0MsRUFBTTJvQyxTQUFXdHBCLEVBQUtzcEIsU0FDdEIsTUFFRixJQUFLLGFBRUQsSUFBSWlvQixFQUVBejVELEVBQUtrWixXQUNQdWdELEVBQWlCejVELEVBQUtrWixTQUFTM3VDLEtBQUksU0FBVW01RSxFQUFPejhFLEdBQ2xELE9BQU82b0UsRUFBVzRULEVBQU94N0IsRUFBTSxDQUM3QmxvQixLQUFNQSxFQUNONkksTUFBT0EsR0FDTjVoQyxPQUlQNGhDLEVBQU0wb0MsV0FBYXJwQixFQUFLcXBCLFdBQ3hCMW9DLEVBQU0yb0MsU0FBV3RwQixFQUFLc3BCLFNBQ3RCM29DLEVBQU04dEQsUUEyQmQsU0FBMkIzMkQsRUFBTXk1RCxHQUMvQixJQUFJanBELEVBQUt4USxFQUFLMjJELFFBRWQsR0FBSW50RixNQUFNRixRQUFRa25DLEdBQUssQ0FDckIsSUFBSWtsQyxFQUFXeWlCLEVBQU16aUIsVUFBWSxNQUNqQyxPQUFPeWlCLEVBQU16cEQsY0FBY2duQyxFQUFVLEtBQU1sbEMsR0FHN0MsR0FBSUEsRUFBRzNILE1BQU1xUSxVQUFZdWdELEVBQWdCLENBQ3ZDLElBQUl2Z0QsRUFBV2kvQyxFQUFNM2lCLFNBQVM1aEQsUUFBUTRjLEVBQUczSCxNQUFNcVEsVUFBVXI2QixPQUFPNDZFLEdBQ2hFLE9BQU90QixFQUFNbmlCLGFBQWF4bEMsRUFBSSxLQUFNMEksR0FHdEMsT0FBT2kvQyxFQUFNbmlCLGFBQWF4bEMsRUFBSSxNQXhDUmtwRCxDQUFrQjE1RCxFQUFNeTVELEdBQ3hDLE1BR0osUUFDRVYsRUFBY2x3RCxFQUFPMm1DLEVBQU14dkMsRUFBTSxDQUMvQkksVUFBTXB6QixFQUNOc2xELGNBQVV0bEQsRUFDVmtzQyxjQUFVbHNDLEtBUWhCLE9BSksyckYsR0FBaUIzNEQsRUFBSzkzQixRQUN6QjJnQyxFQUFNM2dDLE1BQVE4M0IsRUFBSzkzQixPQUdkMmdDLEVBR1QsU0FBU2t3RCxFQUFjLzdELEVBQVFnWixHQUM3QixJQUFLLElBQUl4dEMsS0FBT3d0QyxPQUNZLElBQWZBLEVBQU14dEMsS0FDZncwQixFQUFPeDBCLEdBQU93dEMsRUFBTXh0QyxJQTJDMUJ4QixFQUFPRCxRQUFVK29FLEcsNkJDM1FqQixJQUFJMWpCLEVBQVEsRUFBUSxJQU9wQixTQUFTeXRCLEVBQUt1UixHQUNaLElBQUlseUMsRUFBV2t5QyxFQUFNbHlDLFNBQ3JCa3lDLEVBQU1seUMsU0FBVyxDQUFDLENBQ2hCOVksS0FBTSxZQUNOa3pELE1BQU9sSSxFQUFNa0ksTUFDYnA2QyxTQUFVLENBQUNBLEVBQVMsSUFDcEJvWixTQUFVcFosRUFBUyxHQUFHb1osV0FHcEJwWixFQUFTanZDLE9BQVMsR0FDcEJtaEYsRUFBTWx5QyxTQUFTdHVDLEtBQUssQ0FDbEJ3MUIsS0FBTSxZQUNOa3pELE1BQU9sSSxFQUFNa0ksTUFDYnA2QyxTQUFVQSxFQUFTM3BDLE1BQU0sR0FDekIraUQsU0FBVSxDQUNSQyxNQUFPclosRUFBUyxHQUFHb1osU0FBU0MsTUFDNUIvZ0IsSUFBSzBILEVBQVNBLEVBQVNqdkMsT0FBUyxHQUFHcW9ELFNBQVM5Z0IsT0FyQnBEeHFDLEVBQU9ELFFBQVUsU0FBVWk1QixHQUV6QixPQURBb3NCLEVBQU1wc0IsRUFBTSxRQUFTNjVDLEdBQ2Q3NUMsSSw2QkNKVGg1QixFQUFPRCxRQUFVLFNBQVNpcEUsRUFBZWh3QyxHQUN2QyxJQUFJMjVELEVBQU90d0YsVUFBVVksT0FBUyxRQUFzQitDLElBQWpCM0QsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQy9FLE9BQVEyMkIsRUFBS2taLFVBQVksSUFBSWhiLFFBQU8sU0FBVTZ5QyxFQUFhMlMsR0FRekQsTUFQbUIsZUFBZkEsRUFBTXRqRCxPQUNSMndDLEVBQVkyUyxFQUFNa1AsWUFBYyxDQUM5Qi9WLEtBQU02RyxFQUFNcnBCLElBQ1o1NEIsTUFBT2lpRCxFQUFNamlELFFBSVZ1dUMsRUFBZTBULEVBQU8zUyxLQUM1QjRvQixLLDZCQ1hMLElBQUlDLEVBQVksQ0FBQyxPQUFRLFFBQVMsU0FBVSxPQUU1QzV5RixFQUFPRCxRQUFVLFNBQXdCOHlGLEdBQ3ZDLElBQUl4L0IsR0FBT3cvQixHQUFPLElBQUkxc0QsT0FDbEJ3akIsRUFBUTBKLEVBQUkxaEMsT0FBTyxHQUV2QixHQUFjLE1BQVZnNEIsR0FBMkIsTUFBVkEsRUFDbkIsT0FBTzBKLEVBR1QsSUFBSXkvQixFQUFRei9CLEVBQUlqaEQsUUFBUSxLQUV4QixJQUFlLElBQVgwZ0YsRUFDRixPQUFPei9CLEVBTVQsSUFIQSxJQUFJcHdELEVBQVMydkYsRUFBVTN2RixPQUNuQjRzQixHQUFTLElBRUpBLEVBQVE1c0IsR0FBUSxDQUN2QixJQUFJdzRCLEVBQVdtM0QsRUFBVS9pRSxHQUV6QixHQUFJaWpFLElBQVVyM0QsRUFBU3g0QixRQUFVb3dELEVBQUk5cUQsTUFBTSxFQUFHa3pCLEVBQVN4NEIsUUFBUXVMLGdCQUFrQml0QixFQUMvRSxPQUFPNDNCLEVBTVgsT0FBZSxLQUZmeGpDLEVBQVF3akMsRUFBSWpoRCxRQUFRLE9BRUEwZ0YsRUFBUWpqRSxJQU1iLEtBRmZBLEVBQVF3akMsRUFBSWpoRCxRQUFRLE9BRUEwZ0YsRUFBUWpqRSxFQUxuQndqQyxFQVVGLHVCLDZCQ3ZDVCxJQUFJbVYsRUFBUSxFQUFRLEdBRWhCMm9CLEVBQVEsRUFBUSxHQUVoQjRCLEVBQXVCNWdGLFVBQVVnL0UsRUFBTTk4RCxTQUFXLE1BQU05ckIsTUFBTSxFQUFHLEdBQUksS0FBTyxHQUM1RW0vQixFQUFnQnlwRCxFQUFNenBELGNBeUMxQixTQUFTc3JELEVBQWUzc0QsRUFBS3hFLEdBQzNCLE9BQU82RixFQUFjckIsRUFBSzRzRCxFQUFhcHhELEdBQVFBLEVBQU1xUSxVQXdGdkQsU0FBUytnRCxFQUFhcHhELEdBQ3BCLE9BQU9BLEVBQU0sa0JBQW9CLENBQy9CLGlCQUFrQkEsRUFBTSxtQkFDdEIsR0FwSU43aEMsRUFBT0QsUUFBVSxDQUNmNGtGLE1BQU8sS0FDUE4sVUFBVyxJQUNYSSxTQUFVLEtBQ1ZELE9BQVEsU0FDUlQsY0FBZSxLQUNmRixXQUFZLGFBQ1pqZSxPQUFRLE1BQ1I5RCxLQUFNLElBQ05DLE1BQU8sTUFDUG14QixjQUFlLElBQ2ZDLGVBQWdCLE1BQ2hCL08sTUFBTzRPLEVBQWV2eEYsS0FBSyxLQUFNLFNBQ2pDMnhGLFVBQVdKLEVBQWV2eEYsS0FBSyxLQUFNLFNBQ3JDNHhGLFVBQVdMLEVBQWV2eEYsS0FBSyxLQUFNLFNBQ3JDNnhGLFNBQVVOLEVBQWV2eEYsS0FBSyxLQUFNLE1BQ3BDOHhGLFVBNEJGLFNBQW1CMXhELEdBQ2pCLElBQUlpUyxFQUFRalMsRUFBTXlxRCxNQUFRLENBQ3hCa0gsVUFBVzN4RCxFQUFNeXFELFlBQ2Z0bUYsRUFDQXl0RixFQUFZUixFQUFhcHhELEdBQzdCLE9BQU82RixFQUFjN0YsRUFBTTB3RCxTQUFXLEtBQU8sS0FBTXorQyxFQUFRMDBCLEVBQU0sQ0FDL0QxMEIsTUFBT0EsR0FDTjIvQyxHQUFhQSxFQUFXNXhELEVBQU1xUSxXQWxDakMrbUMsS0FpQkYsU0FBY3AzQyxHQUNaLElBQUk2eEQsR0FBZTd4RCxFQUFNa1MsVUFDckJrbEMsRUFBT3lhLEdBQWN2QyxFQUFNemlCLFVBQW9CLE1BQ25ELE9BQU9obkMsRUFBY3V4QyxFQUFNeWEsRUFBYyxLQUFPN3hELEVBQU9BLEVBQU1xUSxXQW5CN0RtYSxLQVlGLFNBQXNCeHFCLEdBQ3BCLE9BQU9reEQsRUFBdUJseEQsRUFBTXFRLFNBQVd4SyxFQUFjLE9BQVEsS0FBTTdGLEVBQU1xUSxXQVpqRjJtQyxLQXVDRixTQUFjaDNDLEdBQ1osSUFBSW1OLEVBQVFpa0QsRUFBYXB4RCxHQUVMLE9BQWhCQSxFQUFNMHBCLE9BQWtDLElBQWhCMXBCLEVBQU0wcEIsWUFBK0J2bEQsSUFBaEI2N0IsRUFBTTBwQixRQUNyRHZjLEVBQU11YyxNQUFRMXBCLEVBQU0wcEIsTUFBTTlvRCxZQUc1QixPQUFPaWxDLEVBQWM3RixFQUFNc25ELFFBQVUsS0FBTyxLQUFNbjZDLEVBQU9uTixFQUFNcVEsV0E3Qy9EazRDLFNBZ0RGLFNBQWtCdm9ELEdBQ2hCLElBQUk4eEQsRUFBVyxLQUVmLEdBQXNCLE9BQWxCOXhELEVBQU1ncEQsY0FBc0M3a0YsSUFBbEI2N0IsRUFBTWdwRCxRQUF1QixDQUN6RCxJQUFJQSxFQUFVaHBELEVBQU1ncEQsUUFDcEI4SSxFQUFXanNELEVBQWMsUUFBUyxDQUNoQ3RPLEtBQU0sV0FDTnl4RCxRQUFTQSxFQUNUK0ksVUFBVSxJQUlkLE9BQU9sc0QsRUFBYyxLQUFNdXJELEVBQWFweEQsR0FBUTh4RCxFQUFVOXhELEVBQU1xUSxXQTNEaEVpeUMsV0F3R0YsV0FDRSxPQUFPLE1BeEdQMFAsUUFnQ0YsU0FBaUJoeUQsR0FDZixPQUFPNkYsRUFBYyxJQUFJN3ZCLE9BQU9ncUIsRUFBTXJILE9BQVF5NEQsRUFBYXB4RCxHQUFRQSxFQUFNcVEsV0FoQ3pFczhDLFdBb0VGLFNBQW9CM3NELEdBQ2xCLE9BQU82RixFQUFjLE9BQVF1ckQsRUFBYXB4RCxHQUFRQSxFQUFNcVEsV0FwRXhEM08sS0EyREYsU0FBbUIxQixHQUNqQixJQUFJa1MsRUFBWWxTLEVBQU11d0QsVUFBWSxZQUFZdjZFLE9BQU9ncUIsRUFBTXV3RCxVQUN2RDd1RCxFQUFPbUUsRUFBYyxPQUFRcU0sRUFBWSxDQUMzQ0EsVUFBV0EsR0FDVCxLQUFNbFMsRUFBTTNnQyxPQUNoQixPQUFPd21DLEVBQWMsTUFBT3VyRCxFQUFhcHhELEdBQVEwQixJQS9EakQwZ0QsS0FzRUYsU0FBY3BpRCxHQUNaLEdBQUlBLEVBQU0yb0MsU0FDUixPQUFPLEtBR1QsSUFBSW5rQyxFQUFNeEUsRUFBTTJ3RCxRQUFVLE1BQVEsT0FFbEMsR0FBSTN3RCxFQUFNMG9DLFdBQVksQ0FDcEIsSUFBSXVwQixFQUFPM0MsRUFBTXppQixVQUFZcm9DLEVBQzdCLE9BQU9xQixFQUFjb3NELEVBQU0sS0FBTWp5RCxFQUFNM2dDLE9BR3pDLElBQUlxd0YsRUFBWSxDQUNkNXBELHdCQUF5QixDQUN2QkMsT0FBUS9GLEVBQU0zZ0MsUUFHbEIsT0FBT3dtQyxFQUFjckIsRUFBS2tyRCxJQXRGMUJ3QyxZQStGRixTQUFxQmx5RCxHQUNuQixPQUFPNkYsRUFBYzdGLEVBQU13RSxJQUFLNHNELEVBQWFweEQsR0FBUUEsRUFBTXFRLFdBL0YzRDhoRCxXQXdGRixTQUFvQm55RCxHQUNsQixPQUFPQSxFQUFNLGtCQUFvQnN2RCxFQUFNbmlCLGFBQWFudEMsRUFBTTh0RCxRQUFTLENBQ2pFLGlCQUFrQjl0RCxFQUFNLG9CQUNyQkEsRUFBTTh0RCxXLDZCQzVIYjV2RixFQUFRNHFFLFdBQStCLG9CQUFYM3BFLE9BRFgsc0JBQ2lEQSxPQURqRCx3Qjs7Ozs7Ozs7R0NVSixJQUFJK3NFLEVBQUcsRUFBUSxHQUFTcnNFLEVBQUUsRUFBUSxJQUFpQlgsRUFBRSxFQUFRLEtBQWEsU0FBU3lyQixFQUFFNXBCLEdBQUcsSUFBSSxJQUFJQyxFQUFFLHlEQUF5REQsRUFBRXRDLEVBQUUsRUFBRUEsRUFBRStCLFVBQVVZLE9BQU8zQyxJQUFJdUMsR0FBRyxXQUFXd2xELG1CQUFtQmhtRCxVQUFVL0IsSUFBSSxNQUFNLHlCQUF5QnNDLEVBQUUsV0FBV0MsRUFBRSxpSEFBaUgsSUFBSWtyRSxFQUFHLE1BQU10bEUsTUFBTStqQixFQUFFLE1BQ3hhLFNBQVMwaEQsRUFBR3RyRSxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEVBQUV3ekIsRUFBRXJJLEVBQUUxcUIsRUFBRXJKLEdBQUcsSUFBSWhELEVBQUVzQyxNQUFNWCxVQUFVMEcsTUFBTW5JLEtBQUtpQyxVQUFVLEdBQUcsSUFBSVEsRUFBRVQsTUFBTTlCLEVBQUVKLEdBQUcsTUFBTUcsR0FBR2tHLEtBQUttNEIsUUFBUXIrQixJQUFJLElBQUk0ekYsR0FBRyxFQUFHQyxFQUFHLEtBQUtDLEdBQUcsRUFBR0MsRUFBRyxLQUFLQyxFQUFHLENBQUMzMUQsUUFBUSxTQUFTOTdCLEdBQUdxeEYsR0FBRyxFQUFHQyxFQUFHdHhGLElBQUksU0FBUzB4RixFQUFHMXhGLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsRUFBRXd6QixFQUFFckksRUFBRTFxQixFQUFFckosR0FBRyt3RixHQUFHLEVBQUdDLEVBQUcsS0FBS2htQixFQUFHOXJFLE1BQU1peUYsRUFBR2h5RixXQUFtSixJQUFJa3lGLEVBQUcsS0FBS0MsRUFBRyxLQUFLQyxFQUFHLEtBQ2hhLFNBQVNDLEVBQUc5eEYsRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRXFDLEVBQUV3MkIsTUFBTSxnQkFBZ0J4MkIsRUFBRSt4RixjQUFjRixFQUFHbjBGLEdBRDZMLFNBQVlzQyxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEVBQUV3ekIsRUFBRXJJLEVBQUUxcUIsRUFBRXJKLEdBQTRCLEdBQXpCb3hGLEVBQUdseUYsTUFBTW1FLEtBQUtsRSxXQUFjNHhGLEVBQUcsQ0FBQyxJQUFHQSxFQUFnQyxNQUFNeHJGLE1BQU0rakIsRUFBRSxNQUExQyxJQUFJdHNCLEVBQUVnMEYsRUFBR0QsR0FBRyxFQUFHQyxFQUFHLEtBQThCQyxJQUFLQSxHQUFHLEVBQUdDLEVBQUdsMEYsSUFDOVQwMEYsQ0FBR3IwRixFQUFFc0MsT0FBRSxFQUFPRCxHQUFHQSxFQUFFK3hGLGNBQWMsS0FBSyxJQUFJRSxFQUFHLEtBQUtDLEVBQUcsR0FDNUgsU0FBU0MsSUFBSyxHQUFHRixFQUFHLElBQUksSUFBSWp5RixLQUFLa3lGLEVBQUcsQ0FBQyxJQUFJanlGLEVBQUVpeUYsRUFBR2x5RixHQUFHdEMsRUFBRXUwRixFQUFHemlGLFFBQVF4UCxHQUFHLE1BQU0sRUFBRXRDLEdBQUcsTUFBTW1JLE1BQU0rakIsRUFBRSxHQUFHNXBCLElBQUksSUFBSW95RixFQUFHMTBGLEdBQUcsQ0FBQyxJQUFJdUMsRUFBRW95RixjQUFjLE1BQU14c0YsTUFBTStqQixFQUFFLEdBQUc1cEIsSUFBMkIsSUFBSSxJQUFJckMsS0FBL0J5MEYsRUFBRzEwRixHQUFHdUMsRUFBRXZDLEVBQUV1QyxFQUFFcXlGLFdBQTBCLENBQUMsSUFBSXBwRixPQUFFLEVBQVd3ekIsRUFBRWgvQixFQUFFQyxHQUFHMDJCLEVBQUVwMEIsRUFBRTBKLEVBQUVoTSxFQUFFLEdBQUc0MEYsRUFBR3J6RixlQUFleUssR0FBRyxNQUFNOUQsTUFBTStqQixFQUFFLEdBQUdqZ0IsSUFBSTRvRixFQUFHNW9GLEdBQUcreUIsRUFBRSxJQUFJcDhCLEVBQUVvOEIsRUFBRTgxRCx3QkFBd0IsR0FBR2x5RixFQUFFLENBQUMsSUFBSTRJLEtBQUs1SSxFQUFFQSxFQUFFcEIsZUFBZWdLLElBQUl1cEYsRUFBR255RixFQUFFNEksR0FBR21yQixFQUFFMXFCLEdBQUdULEdBQUUsT0FBUXd6QixFQUFFZzJELGtCQUFrQkQsRUFBRy8xRCxFQUFFZzJELGlCQUFpQnIrRCxFQUFFMXFCLEdBQUdULEdBQUUsR0FBSUEsR0FBRSxFQUFHLElBQUlBLEVBQUUsTUFBTXJELE1BQU0rakIsRUFBRSxHQUFHanNCLEVBQUVxQyxPQUNqYyxTQUFTeXlGLEVBQUd6eUYsRUFBRUMsRUFBRXZDLEdBQUcsR0FBR2kxRixFQUFHM3lGLEdBQUcsTUFBTTZGLE1BQU0rakIsRUFBRSxJQUFJNXBCLElBQUkyeUYsRUFBRzN5RixHQUFHQyxFQUFFMnlGLEVBQUc1eUYsR0FBR0MsRUFBRXF5RixXQUFXNTBGLEdBQUdtMUYsYUFBYSxJQUFJVCxFQUFHLEdBQUdHLEVBQUcsR0FBR0ksRUFBRyxHQUFHQyxFQUFHLEdBQUcsU0FBU0UsRUFBRzl5RixHQUFHLElBQVN0QyxFQUFMdUMsR0FBRSxFQUFLLElBQUl2QyxLQUFLc0MsRUFBRSxHQUFHQSxFQUFFZCxlQUFleEIsR0FBRyxDQUFDLElBQUlDLEVBQUVxQyxFQUFFdEMsR0FBRyxJQUFJdzBGLEVBQUdoekYsZUFBZXhCLElBQUl3MEYsRUFBR3gwRixLQUFLQyxFQUFFLENBQUMsR0FBR3UwRixFQUFHeDBGLEdBQUcsTUFBTW1JLE1BQU0rakIsRUFBRSxJQUFJbHNCLElBQUl3MEYsRUFBR3gwRixHQUFHQyxFQUFFc0MsR0FBRSxHQUFJQSxHQUFHa3lGLElBQUssSUFBSVksSUFBSyxvQkFBcUIxMUQsYUFBUSxJQUFxQkEsT0FBT3dKLGVBQVUsSUFBcUJ4SixPQUFPd0osU0FBUy9CLGVBQWVrdUQsRUFBRyxLQUFLQyxFQUFHLEtBQUtDLEVBQUcsS0FDOWEsU0FBU0MsRUFBR256RixHQUFHLEdBQUdBLEVBQUU0eEYsRUFBRzV4RixHQUFHLENBQUMsR0FBRyxtQkFBb0JnekYsRUFBRyxNQUFNbnRGLE1BQU0rakIsRUFBRSxNQUFNLElBQUkzcEIsRUFBRUQsRUFBRW96RixVQUFVbnpGLElBQUlBLEVBQUUweEYsRUFBRzF4RixHQUFHK3lGLEVBQUdoekYsRUFBRW96RixVQUFVcHpGLEVBQUV3MkIsS0FBS3YyQixLQUFLLFNBQVNvekYsRUFBR3J6RixHQUFHaXpGLEVBQUdDLEVBQUdBLEVBQUdseUYsS0FBS2hCLEdBQUdrekYsRUFBRyxDQUFDbHpGLEdBQUdpekYsRUFBR2p6RixFQUFFLFNBQVNzekYsSUFBSyxHQUFHTCxFQUFHLENBQUMsSUFBSWp6RixFQUFFaXpGLEVBQUdoekYsRUFBRWl6RixFQUFvQixHQUFqQkEsRUFBR0QsRUFBRyxLQUFLRSxFQUFHbnpGLEdBQU1DLEVBQUUsSUFBSUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFSSxPQUFPTCxJQUFJbXpGLEVBQUdsekYsRUFBRUQsS0FBSyxTQUFTdXpGLEVBQUd2ekYsRUFBRUMsR0FBRyxPQUFPRCxFQUFFQyxHQUFHLFNBQVN1ekYsRUFBR3h6RixFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEdBQUcsT0FBT2xKLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsR0FBRyxTQUFTdXFGLEtBQU0sSUFBSUMsRUFBR0gsRUFBR0ksR0FBRyxFQUFHQyxHQUFHLEVBQUcsU0FBU0MsSUFBUSxPQUFPWixHQUFJLE9BQU9DLElBQUdPLElBQUtILEtBQzlaLFNBQVNRLEVBQUc5ekYsRUFBRUMsRUFBRXZDLEdBQUcsR0FBR2syRixFQUFHLE9BQU81ekYsRUFBRUMsRUFBRXZDLEdBQUdrMkYsR0FBRyxFQUFHLElBQUksT0FBT0YsRUFBRzF6RixFQUFFQyxFQUFFdkMsR0FBRyxRQUFRazJGLEdBQUcsRUFBR0MsS0FBTSxJQUFJRSxFQUFHLDhWQUE4VkMsRUFBR2oyRixPQUFPa0IsVUFBVUMsZUFBZSswRixFQUFHLEdBQUdDLEVBQUcsR0FFL1EsU0FBUzNvQyxFQUFFdnJELEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsRUFBRXd6QixHQUFHLzRCLEtBQUt3d0YsZ0JBQWdCLElBQUlsMEYsR0FBRyxJQUFJQSxHQUFHLElBQUlBLEVBQUUwRCxLQUFLeXdGLGNBQWN6MkYsRUFBRWdHLEtBQUswd0YsbUJBQW1CbnJGLEVBQUV2RixLQUFLMndGLGdCQUFnQjUyRixFQUFFaUcsS0FBSzR3RixhQUFhdjBGLEVBQUUyRCxLQUFLNnlCLEtBQUt2MkIsRUFBRTBELEtBQUs2d0YsWUFBWTkzRCxFQUFFLElBQUk0dUIsRUFBRSxHQUN4Wix1SUFBdUluNUMsTUFBTSxLQUFLcUksU0FBUSxTQUFTeGEsR0FBR3NyRCxFQUFFdHJELEdBQUcsSUFBSXVyRCxFQUFFdnJELEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssTUFBTSxDQUFDLENBQUMsZ0JBQWdCLGtCQUFrQixDQUFDLFlBQVksU0FBUyxDQUFDLFVBQVUsT0FBTyxDQUFDLFlBQVksZUFBZXdhLFNBQVEsU0FBU3hhLEdBQUcsSUFBSUMsRUFBRUQsRUFBRSxHQUFHc3JELEVBQUVyckQsR0FBRyxJQUFJc3JELEVBQUV0ckQsRUFBRSxHQUFFLEVBQUdELEVBQUUsR0FBRyxNQUFLLE1BQU0sQ0FBQyxrQkFBa0IsWUFBWSxhQUFhLFNBQVN3YSxTQUFRLFNBQVN4YSxHQUFHc3JELEVBQUV0ckQsR0FBRyxJQUFJdXJELEVBQUV2ckQsRUFBRSxHQUFFLEVBQUdBLEVBQUU0TCxjQUFjLE1BQUssTUFDOWQsQ0FBQyxjQUFjLDRCQUE0QixZQUFZLGlCQUFpQjRPLFNBQVEsU0FBU3hhLEdBQUdzckQsRUFBRXRyRCxHQUFHLElBQUl1ckQsRUFBRXZyRCxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLE1BQU0sd05BQXdObVMsTUFBTSxLQUFLcUksU0FBUSxTQUFTeGEsR0FBR3NyRCxFQUFFdHJELEdBQUcsSUFBSXVyRCxFQUFFdnJELEVBQUUsR0FBRSxFQUFHQSxFQUFFNEwsY0FBYyxNQUFLLE1BQ3paLENBQUMsVUFBVSxXQUFXLFFBQVEsWUFBWTRPLFNBQVEsU0FBU3hhLEdBQUdzckQsRUFBRXRyRCxHQUFHLElBQUl1ckQsRUFBRXZyRCxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLE1BQU0sQ0FBQyxVQUFVLFlBQVl3YSxTQUFRLFNBQVN4YSxHQUFHc3JELEVBQUV0ckQsR0FBRyxJQUFJdXJELEVBQUV2ckQsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxNQUFNLENBQUMsT0FBTyxPQUFPLE9BQU8sUUFBUXdhLFNBQVEsU0FBU3hhLEdBQUdzckQsRUFBRXRyRCxHQUFHLElBQUl1ckQsRUFBRXZyRCxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLE1BQU0sQ0FBQyxVQUFVLFNBQVN3YSxTQUFRLFNBQVN4YSxHQUFHc3JELEVBQUV0ckQsR0FBRyxJQUFJdXJELEVBQUV2ckQsRUFBRSxHQUFFLEVBQUdBLEVBQUU0TCxjQUFjLE1BQUssTUFBTSxJQUFJNm9GLEVBQUcsZ0JBQWdCLFNBQVNDLEVBQUcxMEYsR0FBRyxPQUFPQSxFQUFFLEdBQUc0dEIsY0FDL1gsMGpDQUEwakN6YixNQUFNLEtBQUtxSSxTQUFRLFNBQVN4YSxHQUFHLElBQUlDLEVBQUVELEVBQUVtSSxRQUFRc3NGLEVBQ3ptQ0MsR0FBSXBwQyxFQUFFcnJELEdBQUcsSUFBSXNyRCxFQUFFdHJELEVBQUUsR0FBRSxFQUFHRCxFQUFFLE1BQUssTUFBTSwyRUFBMkVtUyxNQUFNLEtBQUtxSSxTQUFRLFNBQVN4YSxHQUFHLElBQUlDLEVBQUVELEVBQUVtSSxRQUFRc3NGLEVBQUdDLEdBQUlwcEMsRUFBRXJyRCxHQUFHLElBQUlzckQsRUFBRXRyRCxFQUFFLEdBQUUsRUFBR0QsRUFBRSxnQ0FBK0IsTUFBTSxDQUFDLFdBQVcsV0FBVyxhQUFhd2EsU0FBUSxTQUFTeGEsR0FBRyxJQUFJQyxFQUFFRCxFQUFFbUksUUFBUXNzRixFQUFHQyxHQUFJcHBDLEVBQUVyckQsR0FBRyxJQUFJc3JELEVBQUV0ckQsRUFBRSxHQUFFLEVBQUdELEVBQUUsd0NBQXVDLE1BQU0sQ0FBQyxXQUFXLGVBQWV3YSxTQUFRLFNBQVN4YSxHQUFHc3JELEVBQUV0ckQsR0FBRyxJQUFJdXJELEVBQUV2ckQsRUFBRSxHQUFFLEVBQUdBLEVBQUU0TCxjQUFjLE1BQUssTUFDbmMwL0MsRUFBRXFwQyxVQUFVLElBQUlwcEMsRUFBRSxZQUFZLEdBQUUsRUFBRyxhQUFhLGdDQUErQixHQUFJLENBQUMsTUFBTSxPQUFPLFNBQVMsY0FBYy93QyxTQUFRLFNBQVN4YSxHQUFHc3JELEVBQUV0ckQsR0FBRyxJQUFJdXJELEVBQUV2ckQsRUFBRSxHQUFFLEVBQUdBLEVBQUU0TCxjQUFjLE1BQUssTUFBTSxJQUFJZ3BGLEVBQUd6cEIsRUFBR2dCLG1EQUNuTSxTQUFTMG9CLEVBQUc3MEYsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsSUFBSXVMLEVBQUVvaUQsRUFBRXBzRCxlQUFlZSxHQUFHcXJELEVBQUVyckQsR0FBRyxNQUFXLE9BQU9pSixFQUFFLElBQUlBLEVBQUVzdEIsTUFBSzc0QixJQUFPLEVBQUVzQyxFQUFFSSxTQUFTLE1BQU1KLEVBQUUsSUFBSSxNQUFNQSxFQUFFLE1BQUksTUFBTUEsRUFBRSxJQUFJLE1BQU1BLEVBQUUsUUFQbkosU0FBWUQsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsR0FBRyxNQUFPc0MsR0FEb0YsU0FBWUQsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsR0FBRyxPQUFPRCxHQUFHLElBQUlBLEVBQUU4NEIsS0FBSyxPQUFNLEVBQUcsY0FBY3YyQixHQUFHLElBQUssV0FBVyxJQUFLLFNBQVMsT0FBTSxFQUFHLElBQUssVUFBVSxPQUFHdEMsSUFBYyxPQUFPRCxHQUFTQSxFQUFFeTJGLGdCQUFtRCxXQUFuQ24wRixFQUFFQSxFQUFFNEwsY0FBY2pHLE1BQU0sRUFBRSxLQUFzQixVQUFVM0YsR0FBRSxRQUFRLE9BQU0sR0FDblQ4MEYsQ0FBRzkwRixFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxPQUFNLEVBQUcsR0FBR0EsRUFBRSxPQUFNLEVBQUcsR0FBRyxPQUFPRCxFQUFFLE9BQU9BLEVBQUU4NEIsTUFBTSxLQUFLLEVBQUUsT0FBT3YyQixFQUFFLEtBQUssRUFBRSxPQUFNLElBQUtBLEVBQUUsS0FBSyxFQUFFLE9BQU8rQyxNQUFNL0MsR0FBRyxLQUFLLEVBQUUsT0FBTytDLE1BQU0vQyxJQUFJLEVBQUVBLEVBQUUsT0FBTSxFQU9yRDgwRixDQUFHOTBGLEVBQUV2QyxFQUFFd0wsRUFBRXZMLEtBQUtELEVBQUUsTUFBTUMsR0FBRyxPQUFPdUwsRUFSaE0sU0FBWWxKLEdBQUcsUUFBR2cwRixFQUFHeDJGLEtBQUswMkYsRUFBR2wwRixLQUFlZzBGLEVBQUd4MkYsS0FBS3kyRixFQUFHajBGLEtBQWUrekYsRUFBR3ByRixLQUFLM0ksR0FBVWswRixFQUFHbDBGLElBQUcsR0FBR2kwRixFQUFHajBGLElBQUcsR0FBUyxJQVFrRmcxRixDQUFHLzBGLEtBQUssT0FBT3ZDLEVBQUVzQyxFQUFFaTFGLGdCQUFnQmgxRixHQUFHRCxFQUFFOG1DLGFBQWE3bUMsRUFBRSxHQUFHdkMsSUFBSXdMLEVBQUVvckYsZ0JBQWdCdDBGLEVBQUVrSixFQUFFcXJGLGNBQWMsT0FBTzcyRixFQUFFLElBQUl3TCxFQUFFc3RCLE1BQVEsR0FBRzk0QixHQUFHdUMsRUFBRWlKLEVBQUVrckYsY0FBY3oyRixFQUFFdUwsRUFBRW1yRixtQkFBbUIsT0FBTzMyRixFQUFFc0MsRUFBRWkxRixnQkFBZ0JoMUYsSUFBYXZDLEVBQUUsS0FBWHdMLEVBQUVBLEVBQUVzdEIsT0FBYyxJQUFJdHRCLElBQUcsSUFBS3hMLEVBQUUsR0FBRyxHQUFHQSxFQUFFQyxFQUFFcUMsRUFBRWsxRixlQUFldjNGLEVBQUVzQyxFQUFFdkMsR0FBR3NDLEVBQUU4bUMsYUFBYTdtQyxFQUFFdkMsTUFEdE9rM0YsRUFBRzExRixlQUFlLDRCQUE0QjAxRixFQUFHcnBCLHVCQUF1QixDQUFDWCxRQUFRLE9BQU9ncUIsRUFBRzExRixlQUFlLDZCQUE2QjAxRixFQUFHcHBCLHdCQUF3QixDQUFDQyxTQUFTLE9BRWxhLElBQUkwcEIsRUFBRyxjQUFjOXJGLEVBQUUsbUJBQW9CakwsUUFBUUEsT0FBT3NzQixJQUFJMHFFLEdBQUcvckYsRUFBRWpMLE9BQU9zc0IsSUFBSSxpQkFBaUIsTUFBTTJxRSxHQUFHaHNGLEVBQUVqTCxPQUFPc3NCLElBQUksZ0JBQWdCLE1BQU00cUUsR0FBR2pzRixFQUFFakwsT0FBT3NzQixJQUFJLGtCQUFrQixNQUFNNnFFLEdBQUdsc0YsRUFBRWpMLE9BQU9zc0IsSUFBSSxxQkFBcUIsTUFBTXN5RCxHQUFHM3pFLEVBQUVqTCxPQUFPc3NCLElBQUksa0JBQWtCLE1BQU04cUUsR0FBR25zRixFQUFFakwsT0FBT3NzQixJQUFJLGtCQUFrQixNQUFNK3FFLEdBQUdwc0YsRUFBRWpMLE9BQU9zc0IsSUFBSSxpQkFBaUIsTUFBTWdyRSxHQUFHcnNGLEVBQUVqTCxPQUFPc3NCLElBQUkseUJBQXlCLE1BQU1pckUsR0FBR3RzRixFQUFFakwsT0FBT3NzQixJQUFJLHFCQUFxQixNQUFNa3JFLEdBQUd2c0YsRUFBRWpMLE9BQU9zc0IsSUFBSSxrQkFBa0IsTUFBTW1yRSxHQUFHeHNGLEVBQUVqTCxPQUFPc3NCLElBQUksdUJBQ3ZlLE1BQU1vckUsR0FBR3pzRixFQUFFakwsT0FBT3NzQixJQUFJLGNBQWMsTUFBTXFyRSxHQUFHMXNGLEVBQUVqTCxPQUFPc3NCLElBQUksY0FBYyxNQUFNc3JFLEdBQUczc0YsRUFBRWpMLE9BQU9zc0IsSUFBSSxlQUFlLE1BQU11ckUsR0FBRyxtQkFBb0I3M0YsUUFBUUEsT0FBT3ExQixTQUFTLFNBQVN5aUUsR0FBR2wyRixHQUFHLE9BQUcsT0FBT0EsR0FBRyxpQkFBa0JBLEVBQVMsS0FBd0MsbUJBQW5DQSxFQUFFaTJGLElBQUlqMkYsRUFBRWkyRixLQUFLajJGLEVBQUUsZUFBMENBLEVBQUUsS0FDelIsU0FBU20yRixHQUFHbjJGLEdBQUcsR0FBRyxNQUFNQSxFQUFFLE9BQU8sS0FBSyxHQUFHLG1CQUFvQkEsRUFBRSxPQUFPQSxFQUFFOC9CLGFBQWE5L0IsRUFBRXBDLE1BQU0sS0FBSyxHQUFHLGlCQUFrQm9DLEVBQUUsT0FBT0EsRUFBRSxPQUFPQSxHQUFHLEtBQUtzMUYsR0FBRyxNQUFNLFdBQVcsS0FBS0QsR0FBRyxNQUFNLFNBQVMsS0FBS3JZLEdBQUcsTUFBTSxXQUFXLEtBQUt1WSxHQUFHLE1BQU0sYUFBYSxLQUFLSyxHQUFHLE1BQU0sV0FBVyxLQUFLQyxHQUFHLE1BQU0sZUFBZSxHQUFHLGlCQUFrQjcxRixFQUFFLE9BQU9BLEVBQUVndUMsVUFBVSxLQUFLeW5ELEdBQUcsTUFBTSxtQkFBbUIsS0FBS0QsR0FBRyxNQUFNLG1CQUFtQixLQUFLRyxHQUFHLElBQUkxMUYsRUFBRUQsRUFBRWl1QyxPQUFtQyxPQUE1Qmh1QyxFQUFFQSxFQUFFNi9CLGFBQWE3L0IsRUFBRXJDLE1BQU0sR0FBVW9DLEVBQUU4L0IsY0FBYyxLQUFLNy9CLEVBQUUsY0FBY0EsRUFBRSxJQUNuZixjQUFjLEtBQUs2MUYsR0FBRyxPQUFPSyxHQUFHbjJGLEVBQUV3MkIsTUFBTSxLQUFLdy9ELEdBQUcsT0FBT0csR0FBR24yRixFQUFFaXVDLFFBQVEsS0FBSzhuRCxHQUFHLEdBQUcvMUYsRUFBRSxJQUFJQSxFQUFFZ3RFLFFBQVFodEUsRUFBRWl0RSxRQUFRLEtBQUssT0FBT2twQixHQUFHbjJGLEdBQUcsT0FBTyxLQUFLLFNBQVNvMkYsR0FBR3AyRixHQUFHLElBQUlDLEVBQUUsR0FBRyxFQUFFLENBQUNELEVBQUUsT0FBT0EsRUFBRXlqQyxLQUFLLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLElBQUkvbEMsRUFBRSxHQUFHLE1BQU1zQyxFQUFFLFFBQVEsSUFBSXJDLEVBQUVxQyxFQUFFcTJGLFlBQVludEYsRUFBRWxKLEVBQUVzMkYsYUFBYTU1RCxFQUFFeTVELEdBQUduMkYsRUFBRXcyQixNQUFNOTRCLEVBQUUsS0FBS0MsSUFBSUQsRUFBRXk0RixHQUFHeDRGLEVBQUU2NEIsT0FBTzc0QixFQUFFKytCLEVBQUVBLEVBQUUsR0FBR3h6QixFQUFFd3pCLEVBQUUsUUFBUXh6QixFQUFFNm9FLFNBQVM1cEUsUUFBUWd0RixFQUFHLElBQUksSUFBSWpzRixFQUFFOG9FLFdBQVcsSUFBSXQwRSxJQUFJZy9CLEVBQUUsZ0JBQWdCaC9CLEVBQUUsS0FBS0EsRUFBRSxhQUFhQyxHQUFHLFdBQVcrK0IsRUFBRXo4QixHQUFHdkMsRUFBRXNDLEVBQUVBLEVBQUU4OEIsYUFBYTk4QixHQUFHLE9BQU9DLEVBQ2plLFNBQVNzMkYsR0FBR3YyRixHQUFHLGNBQWNBLEdBQUcsSUFBSyxVQUFVLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssWUFBWSxPQUFPQSxFQUFFLFFBQVEsTUFBTSxJQUFJLFNBQVN3MkYsR0FBR3gyRixHQUFHLElBQUlDLEVBQUVELEVBQUV3MkIsS0FBSyxPQUFPeDJCLEVBQUVBLEVBQUVvZ0QsV0FBVyxVQUFVcGdELEVBQUU0TCxnQkFBZ0IsYUFBYTNMLEdBQUcsVUFBVUEsR0FFek4sU0FBU3cyRixHQUFHejJGLEdBQUdBLEVBQUUwMkYsZ0JBQWdCMTJGLEVBQUUwMkYsY0FEdkQsU0FBWTEyRixHQUFHLElBQUlDLEVBQUV1MkYsR0FBR3gyRixHQUFHLFVBQVUsUUFBUXRDLEVBQUVLLE9BQU9tMUIseUJBQXlCbHpCLEVBQUUwekIsWUFBWXowQixVQUFVZ0IsR0FBR3RDLEVBQUUsR0FBR3FDLEVBQUVDLEdBQUcsSUFBSUQsRUFBRWQsZUFBZWUsU0FBSSxJQUFxQnZDLEdBQUcsbUJBQW9CQSxFQUFFUSxLQUFLLG1CQUFvQlIsRUFBRThJLElBQUksQ0FBQyxJQUFJMEMsRUFBRXhMLEVBQUVRLElBQUl3K0IsRUFBRWgvQixFQUFFOEksSUFBaUwsT0FBN0t6SSxPQUFPQyxlQUFlZ0MsRUFBRUMsRUFBRSxDQUFDMDBCLGNBQWEsRUFBR3oyQixJQUFJLFdBQVcsT0FBT2dMLEVBQUUxTCxLQUFLbUcsT0FBTzZDLElBQUksU0FBU3hHLEdBQUdyQyxFQUFFLEdBQUdxQyxFQUFFMDhCLEVBQUVsL0IsS0FBS21HLEtBQUszRCxNQUFNakMsT0FBT0MsZUFBZWdDLEVBQUVDLEVBQUUsQ0FBQ2hDLFdBQVdQLEVBQUVPLGFBQW1CLENBQUMwNEYsU0FBUyxXQUFXLE9BQU9oNUYsR0FBR2k1RixTQUFTLFNBQVM1MkYsR0FBR3JDLEVBQUUsR0FBR3FDLEdBQUc2MkYsYUFBYSxXQUFXNzJGLEVBQUUwMkYsY0FDeGYsWUFBWTEyRixFQUFFQyxNQUF1RDYyRixDQUFHOTJGLElBQUksU0FBUysyRixHQUFHLzJGLEdBQUcsSUFBSUEsRUFBRSxPQUFNLEVBQUcsSUFBSUMsRUFBRUQsRUFBRTAyRixjQUFjLElBQUl6MkYsRUFBRSxPQUFNLEVBQUcsSUFBSXZDLEVBQUV1QyxFQUFFMDJGLFdBQWVoNUYsRUFBRSxHQUFxRCxPQUFsRHFDLElBQUlyQyxFQUFFNjRGLEdBQUd4MkYsR0FBR0EsRUFBRWlvRixRQUFRLE9BQU8sUUFBUWpvRixFQUFFMUIsUUFBTzBCLEVBQUVyQyxLQUFhRCxJQUFHdUMsRUFBRTIyRixTQUFTNTJGLElBQUcsR0FBTyxTQUFTZzNGLEdBQUdoM0YsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRXVDLEVBQUVnb0YsUUFBUSxPQUFPbnBGLEVBQUUsR0FBR21CLEVBQUUsQ0FBQ2czRixvQkFBZSxFQUFPQyxrQkFBYSxFQUFPNTRGLFdBQU0sRUFBTzJwRixRQUFRLE1BQU12cUYsRUFBRUEsRUFBRXNDLEVBQUVtM0YsY0FBY0MsaUJBQ3pZLFNBQVNDLEdBQUdyM0YsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRSxNQUFNdUMsRUFBRWkzRixhQUFhLEdBQUdqM0YsRUFBRWkzRixhQUFhdjVGLEVBQUUsTUFBTXNDLEVBQUVnb0YsUUFBUWhvRixFQUFFZ29GLFFBQVFob0YsRUFBRWczRixlQUFldjVGLEVBQUU2NEYsR0FBRyxNQUFNdDJGLEVBQUUzQixNQUFNMkIsRUFBRTNCLE1BQU1aLEdBQUdzQyxFQUFFbTNGLGNBQWMsQ0FBQ0MsZUFBZXo1RixFQUFFMjVGLGFBQWE1NUYsRUFBRTY1RixXQUFXLGFBQWF0M0YsRUFBRXUyQixNQUFNLFVBQVV2MkIsRUFBRXUyQixLQUFLLE1BQU12MkIsRUFBRWdvRixRQUFRLE1BQU1ob0YsRUFBRTNCLE9BQU8sU0FBU2s1RixHQUFHeDNGLEVBQUVDLEdBQWUsT0FBWkEsRUFBRUEsRUFBRWdvRixVQUFpQjRNLEVBQUc3MEYsRUFBRSxVQUFVQyxHQUFFLEdBQ2pVLFNBQVN3M0YsR0FBR3ozRixFQUFFQyxHQUFHdTNGLEdBQUd4M0YsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRTY0RixHQUFHdDJGLEVBQUUzQixPQUFPWCxFQUFFc0MsRUFBRXUyQixLQUFLLEdBQUcsTUFBTTk0QixFQUFLLFdBQVdDLEdBQU0sSUFBSUQsR0FBRyxLQUFLc0MsRUFBRTFCLE9BQU8wQixFQUFFMUIsT0FBT1osS0FBRXNDLEVBQUUxQixNQUFNLEdBQUdaLEdBQU9zQyxFQUFFMUIsUUFBUSxHQUFHWixJQUFJc0MsRUFBRTFCLE1BQU0sR0FBR1osUUFBUSxHQUFHLFdBQVdDLEdBQUcsVUFBVUEsRUFBOEIsWUFBM0JxQyxFQUFFaTFGLGdCQUFnQixTQUFnQmgxRixFQUFFZixlQUFlLFNBQVN3NEYsR0FBRzEzRixFQUFFQyxFQUFFdTJCLEtBQUs5NEIsR0FBR3VDLEVBQUVmLGVBQWUsaUJBQWlCdzRGLEdBQUcxM0YsRUFBRUMsRUFBRXUyQixLQUFLKy9ELEdBQUd0MkYsRUFBRWkzRixlQUFlLE1BQU1qM0YsRUFBRWdvRixTQUFTLE1BQU1ob0YsRUFBRWczRixpQkFBaUJqM0YsRUFBRWkzRixpQkFBaUJoM0YsRUFBRWczRixnQkFDblosU0FBU1UsR0FBRzMzRixFQUFFQyxFQUFFdkMsR0FBRyxHQUFHdUMsRUFBRWYsZUFBZSxVQUFVZSxFQUFFZixlQUFlLGdCQUFnQixDQUFDLElBQUl2QixFQUFFc0MsRUFBRXUyQixLQUFLLEtBQUssV0FBVzc0QixHQUFHLFVBQVVBLFFBQUcsSUFBU3NDLEVBQUUzQixPQUFPLE9BQU8yQixFQUFFM0IsT0FBTyxPQUFPMkIsRUFBRSxHQUFHRCxFQUFFbTNGLGNBQWNHLGFBQWE1NUYsR0FBR3VDLElBQUlELEVBQUUxQixRQUFRMEIsRUFBRTFCLE1BQU0yQixHQUFHRCxFQUFFazNGLGFBQWFqM0YsRUFBVyxNQUFUdkMsRUFBRXNDLEVBQUVwQyxRQUFjb0MsRUFBRXBDLEtBQUssSUFBSW9DLEVBQUVpM0YsaUJBQWlCajNGLEVBQUVtM0YsY0FBY0MsZUFBZSxLQUFLMTVGLElBQUlzQyxFQUFFcEMsS0FBS0YsR0FDdlYsU0FBU2c2RixHQUFHMTNGLEVBQUVDLEVBQUV2QyxHQUFNLFdBQVd1QyxHQUFHRCxFQUFFNGpDLGNBQWNnMEQsZ0JBQWdCNTNGLElBQUUsTUFBTXRDLEVBQUVzQyxFQUFFazNGLGFBQWEsR0FBR2wzRixFQUFFbTNGLGNBQWNHLGFBQWF0M0YsRUFBRWszRixlQUFlLEdBQUd4NUYsSUFBSXNDLEVBQUVrM0YsYUFBYSxHQUFHeDVGLElBQXdGLFNBQVNtNkYsR0FBRzczRixFQUFFQyxHQUE2RCxPQUExREQsRUFBRWxCLEVBQUUsQ0FBQ3d3QyxjQUFTLEdBQVFydkMsSUFBTUEsRUFBbEksU0FBWUQsR0FBRyxJQUFJQyxFQUFFLEdBQXVELE9BQXBEa3JFLEVBQUdTLFNBQVNweEQsUUFBUXhhLEdBQUUsU0FBU0EsR0FBRyxNQUFNQSxJQUFJQyxHQUFHRCxNQUFZQyxFQUFpRDYzRixDQUFHNzNGLEVBQUVxdkMsYUFBVXR2QyxFQUFFc3ZDLFNBQVNydkMsR0FBU0QsRUFDalYsU0FBUyszRixHQUFHLzNGLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFlLEdBQVpxQyxFQUFFQSxFQUFFdzNCLFFBQVd2M0IsRUFBRSxDQUFDQSxFQUFFLEdBQUcsSUFBSSxJQUFJaUosRUFBRSxFQUFFQSxFQUFFeEwsRUFBRTJDLE9BQU82SSxJQUFJakosRUFBRSxJQUFJdkMsRUFBRXdMLEtBQUksRUFBRyxJQUFJeEwsRUFBRSxFQUFFQSxFQUFFc0MsRUFBRUssT0FBTzNDLElBQUl3TCxFQUFFakosRUFBRWYsZUFBZSxJQUFJYyxFQUFFdEMsR0FBR1ksT0FBTzBCLEVBQUV0QyxHQUFHczZGLFdBQVc5dUYsSUFBSWxKLEVBQUV0QyxHQUFHczZGLFNBQVM5dUYsR0FBR0EsR0FBR3ZMLElBQUlxQyxFQUFFdEMsR0FBR3U2RixpQkFBZ0IsT0FBUSxDQUFtQixJQUFsQnY2RixFQUFFLEdBQUc2NEYsR0FBRzc0RixHQUFHdUMsRUFBRSxLQUFTaUosRUFBRSxFQUFFQSxFQUFFbEosRUFBRUssT0FBTzZJLElBQUksQ0FBQyxHQUFHbEosRUFBRWtKLEdBQUc1SyxRQUFRWixFQUFpRCxPQUE5Q3NDLEVBQUVrSixHQUFHOHVGLFVBQVMsT0FBR3I2RixJQUFJcUMsRUFBRWtKLEdBQUcrdUYsaUJBQWdCLElBQVcsT0FBT2g0RixHQUFHRCxFQUFFa0osR0FBR2d2RixXQUFXajRGLEVBQUVELEVBQUVrSixJQUFJLE9BQU9qSixJQUFJQSxFQUFFKzNGLFVBQVMsSUFDcFksU0FBU0csR0FBR240RixFQUFFQyxHQUFHLEdBQUcsTUFBTUEsRUFBRThrQyx3QkFBd0IsTUFBTWwvQixNQUFNK2pCLEVBQUUsS0FBSyxPQUFPOXFCLEVBQUUsR0FBR21CLEVBQUUsQ0FBQzNCLFdBQU0sRUFBTzQ0RixrQkFBYSxFQUFPNW5ELFNBQVMsR0FBR3R2QyxFQUFFbTNGLGNBQWNHLGVBQWUsU0FBU2MsR0FBR3A0RixFQUFFQyxHQUFHLElBQUl2QyxFQUFFdUMsRUFBRTNCLE1BQU0sR0FBRyxNQUFNWixFQUFFLENBQStCLEdBQTlCQSxFQUFFdUMsRUFBRXF2QyxTQUFTcnZDLEVBQUVBLEVBQUVpM0YsYUFBZ0IsTUFBTXg1RixFQUFFLENBQUMsR0FBRyxNQUFNdUMsRUFBRSxNQUFNNEYsTUFBTStqQixFQUFFLEtBQUssR0FBR2hxQixNQUFNRixRQUFRaEMsR0FBRyxDQUFDLEtBQUssR0FBR0EsRUFBRTJDLFFBQVEsTUFBTXdGLE1BQU0rakIsRUFBRSxLQUFLbHNCLEVBQUVBLEVBQUUsR0FBR3VDLEVBQUV2QyxFQUFFLE1BQU11QyxJQUFJQSxFQUFFLElBQUl2QyxFQUFFdUMsRUFBRUQsRUFBRW0zRixjQUFjLENBQUNHLGFBQWFmLEdBQUc3NEYsSUFDL1ksU0FBUzI2RixHQUFHcjRGLEVBQUVDLEdBQUcsSUFBSXZDLEVBQUU2NEYsR0FBR3QyRixFQUFFM0IsT0FBT1gsRUFBRTQ0RixHQUFHdDJGLEVBQUVpM0YsY0FBYyxNQUFNeDVGLEtBQUlBLEVBQUUsR0FBR0EsS0FBTXNDLEVBQUUxQixRQUFRMEIsRUFBRTFCLE1BQU1aLEdBQUcsTUFBTXVDLEVBQUVpM0YsY0FBY2wzRixFQUFFazNGLGVBQWV4NUYsSUFBSXNDLEVBQUVrM0YsYUFBYXg1RixJQUFJLE1BQU1DLElBQUlxQyxFQUFFazNGLGFBQWEsR0FBR3Y1RixHQUFHLFNBQVMyNkYsR0FBR3Q0RixHQUFHLElBQUlDLEVBQUVELEVBQUUrcEMsWUFBWTlwQyxJQUFJRCxFQUFFbTNGLGNBQWNHLGNBQWMsS0FBS3IzRixHQUFHLE9BQU9BLElBQUlELEVBQUUxQixNQUFNMkIsR0FBRyxJQUFJczRGLEdBQVMsK0JBQVRBLEdBQXdGLDZCQUM5WCxTQUFTQyxHQUFHeDRGLEdBQUcsT0FBT0EsR0FBRyxJQUFLLE1BQU0sTUFBTSw2QkFBNkIsSUFBSyxPQUFPLE1BQU0scUNBQXFDLFFBQVEsTUFBTSxnQ0FBZ0MsU0FBU3k0RixHQUFHejRGLEVBQUVDLEdBQUcsT0FBTyxNQUFNRCxHQUFHLGlDQUFpQ0EsRUFBRXc0RixHQUFHdjRGLEdBQUcsK0JBQStCRCxHQUFHLGtCQUFrQkMsRUFBRSwrQkFBK0JELEVBQzNVLElBQUkwNEYsR0FBR0MsR0FBRyxTQUFTMzRGLEdBQUcsTUFBTSxvQkFBcUI0NEYsT0FBT0EsTUFBTUMsd0JBQXdCLFNBQVM1NEYsRUFBRXZDLEVBQUVDLEVBQUV1TCxHQUFHMHZGLE1BQU1DLHlCQUF3QixXQUFXLE9BQU83NEYsRUFBRUMsRUFBRXZDLE9BQVVzQyxFQUE1SixFQUErSixTQUFTQSxFQUFFQyxHQUFHLEdBQUdELEVBQUU4NEYsZUFBZVAsSUFBUSxjQUFjdjRGLEVBQUVBLEVBQUU4aUYsVUFBVTdpRixNQUFNLENBQTJGLEtBQTFGeTRGLEdBQUdBLElBQUk3eEQsU0FBUy9CLGNBQWMsUUFBVWcrQyxVQUFVLFFBQVE3aUYsRUFBRWlCLFVBQVVyQixXQUFXLFNBQWFJLEVBQUV5NEYsR0FBR0ssV0FBVy80RixFQUFFKzRGLFlBQVkvNEYsRUFBRWtxQyxZQUFZbHFDLEVBQUUrNEYsWUFBWSxLQUFLOTRGLEVBQUU4NEYsWUFBWS80RixFQUFFK21DLFlBQVk5bUMsRUFBRTg0RixnQkFDamIsU0FBU0MsR0FBR2g1RixFQUFFQyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxJQUFJdkMsRUFBRXNDLEVBQUUrNEYsV0FBVyxHQUFHcjdGLEdBQUdBLElBQUlzQyxFQUFFaTVGLFdBQVcsSUFBSXY3RixFQUFFdzdGLFNBQXdCLFlBQWR4N0YsRUFBRXk3RixVQUFVbDVGLEdBQVVELEVBQUUrcEMsWUFBWTlwQyxFQUFFLFNBQVNtNUYsR0FBR3A1RixFQUFFQyxHQUFHLElBQUl2QyxFQUFFLEdBQWtGLE9BQS9FQSxFQUFFc0MsRUFBRTRMLGVBQWUzTCxFQUFFMkwsY0FBY2xPLEVBQUUsU0FBU3NDLEdBQUcsU0FBU0MsRUFBRXZDLEVBQUUsTUFBTXNDLEdBQUcsTUFBTUMsRUFBU3ZDLEVBQUUsSUFBSTI3RixHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxHQUFHQyxHQUFHLEdBQzFNLFNBQVNDLEdBQUc1NUYsR0FBRyxHQUFHMDVGLEdBQUcxNUYsR0FBRyxPQUFPMDVGLEdBQUcxNUYsR0FBRyxJQUFJcTVGLEdBQUdyNUYsR0FBRyxPQUFPQSxFQUFFLElBQVl0QyxFQUFSdUMsRUFBRW81RixHQUFHcjVGLEdBQUssSUFBSXRDLEtBQUt1QyxFQUFFLEdBQUdBLEVBQUVmLGVBQWV4QixJQUFJQSxLQUFLaThGLEdBQUcsT0FBT0QsR0FBRzE1RixHQUFHQyxFQUFFdkMsR0FBRyxPQUFPc0MsRUFBOVgreUYsSUFBSzRHLEdBQUc5eUQsU0FBUy9CLGNBQWMsT0FBT29NLE1BQU0sbUJBQW1CN1QsZ0JBQWdCZzhELEdBQUdDLGFBQWFPLGlCQUFpQlIsR0FBR0UsbUJBQW1CTSxpQkFBaUJSLEdBQUdHLGVBQWVLLFdBQVcsb0JBQW9CeDhELGVBQWVnOEQsR0FBR0ksY0FBY0ssWUFDeE8sSUFBSUMsR0FBR0gsR0FBRyxnQkFBZ0JJLEdBQUdKLEdBQUcsc0JBQXNCSyxHQUFHTCxHQUFHLGtCQUFrQk0sR0FBR04sR0FBRyxpQkFBaUJPLEdBQUcsc05BQXNOaG9GLE1BQU0sS0FBS2lvRixHQUFHLElBQUssbUJBQW9Cbm1FLFFBQVFBLFFBQVFtaUIsS0FBSyxTQUFTaWtELEdBQUdyNkYsR0FBRyxJQUFJQyxFQUFFbTZGLEdBQUdsOEYsSUFBSThCLEdBQXVDLFlBQXBDLElBQVNDLElBQUlBLEVBQUUsSUFBSW0yQyxJQUFJZ2tELEdBQUc1ekYsSUFBSXhHLEVBQUVDLElBQVdBLEVBQ3BjLFNBQVNxNkYsR0FBR3Q2RixHQUFHLElBQUlDLEVBQUVELEVBQUV0QyxFQUFFc0MsRUFBRSxHQUFHQSxFQUFFdTZGLFVBQVUsS0FBS3Q2RixFQUFFNjhCLFFBQVE3OEIsRUFBRUEsRUFBRTY4QixXQUFXLENBQUM5OEIsRUFBRUMsRUFBRSxHQUFPLElBQWlCLE1BQXJCQSxFQUFFRCxHQUFTdzZGLGFBQWtCOThGLEVBQUV1QyxFQUFFNjhCLFFBQVE5OEIsRUFBRUMsRUFBRTY4QixhQUFhOThCLEdBQUcsT0FBTyxJQUFJQyxFQUFFd2pDLElBQUkvbEMsRUFBRSxLQUFLLFNBQVMrOEYsR0FBR3o2RixHQUFHLEdBQUcsS0FBS0EsRUFBRXlqQyxJQUFJLENBQUMsSUFBSXhqQyxFQUFFRCxFQUFFMDZGLGNBQXNFLEdBQXhELE9BQU96NkYsSUFBa0IsUUFBZEQsRUFBRUEsRUFBRXU2RixhQUFxQnQ2RixFQUFFRCxFQUFFMDZGLGdCQUFtQixPQUFPejZGLEVBQUUsT0FBT0EsRUFBRTA2RixXQUFXLE9BQU8sS0FBSyxTQUFTQyxHQUFHNTZGLEdBQUcsR0FBR3M2RixHQUFHdDZGLEtBQUtBLEVBQUUsTUFBTTZGLE1BQU0rakIsRUFBRSxNQUVoSyxTQUFTaXhFLEdBQUc3NkYsR0FBVyxLQUFSQSxFQUR0TixTQUFZQSxHQUFHLElBQUlDLEVBQUVELEVBQUV1NkYsVUFBVSxJQUFJdDZGLEVBQUUsQ0FBUyxHQUFHLFFBQVhBLEVBQUVxNkYsR0FBR3Q2RixJQUFlLE1BQU02RixNQUFNK2pCLEVBQUUsTUFBTSxPQUFPM3BCLElBQUlELEVBQUUsS0FBS0EsRUFBRSxJQUFJLElBQUl0QyxFQUFFc0MsRUFBRXJDLEVBQUVzQyxJQUFJLENBQUMsSUFBSWlKLEVBQUV4TCxFQUFFby9CLE9BQU8sR0FBRyxPQUFPNXpCLEVBQUUsTUFBTSxJQUFJd3pCLEVBQUV4ekIsRUFBRXF4RixVQUFVLEdBQUcsT0FBTzc5RCxFQUFFLENBQVksR0FBRyxRQUFkLytCLEVBQUV1TCxFQUFFNHpCLFFBQW1CLENBQUNwL0IsRUFBRUMsRUFBRSxTQUFTLE1BQU0sR0FBR3VMLEVBQUU0d0UsUUFBUXA5QyxFQUFFbzlDLE1BQU0sQ0FBQyxJQUFJcDlDLEVBQUV4ekIsRUFBRTR3RSxNQUFNcDlDLEdBQUcsQ0FBQyxHQUFHQSxJQUFJaC9CLEVBQUUsT0FBT2s5RixHQUFHMXhGLEdBQUdsSixFQUFFLEdBQUcwOEIsSUFBSS8rQixFQUFFLE9BQU9pOUYsR0FBRzF4RixHQUFHakosRUFBRXk4QixFQUFFQSxFQUFFbytELFFBQVEsTUFBTWoxRixNQUFNK2pCLEVBQUUsTUFBTyxHQUFHbHNCLEVBQUVvL0IsU0FBU24vQixFQUFFbS9CLE9BQU9wL0IsRUFBRXdMLEVBQUV2TCxFQUFFKytCLE1BQU0sQ0FBQyxJQUFJLElBQUlySSxHQUFFLEVBQUcxcUIsRUFBRVQsRUFBRTR3RSxNQUFNbndFLEdBQUcsQ0FBQyxHQUFHQSxJQUFJak0sRUFBRSxDQUFDMjJCLEdBQUUsRUFBRzMyQixFQUFFd0wsRUFBRXZMLEVBQUUrK0IsRUFBRSxNQUFNLEdBQUcveUIsSUFBSWhNLEVBQUUsQ0FBQzAyQixHQUFFLEVBQUcxMkIsRUFBRXVMLEVBQUV4TCxFQUFFZy9CLEVBQUUsTUFBTS95QixFQUFFQSxFQUFFbXhGLFFBQVEsSUFBSXptRSxFQUFFLENBQUMsSUFBSTFxQixFQUFFK3lCLEVBQUVvOUMsTUFBTW53RSxHQUFHLENBQUMsR0FBR0EsSUFDNWZqTSxFQUFFLENBQUMyMkIsR0FBRSxFQUFHMzJCLEVBQUVnL0IsRUFBRS8rQixFQUFFdUwsRUFBRSxNQUFNLEdBQUdTLElBQUloTSxFQUFFLENBQUMwMkIsR0FBRSxFQUFHMTJCLEVBQUUrK0IsRUFBRWgvQixFQUFFd0wsRUFBRSxNQUFNUyxFQUFFQSxFQUFFbXhGLFFBQVEsSUFBSXptRSxFQUFFLE1BQU14dUIsTUFBTStqQixFQUFFLE9BQVEsR0FBR2xzQixFQUFFNjhGLFlBQVk1OEYsRUFBRSxNQUFNa0ksTUFBTStqQixFQUFFLE1BQU8sR0FBRyxJQUFJbHNCLEVBQUUrbEMsSUFBSSxNQUFNNTlCLE1BQU0rakIsRUFBRSxNQUFNLE9BQU9sc0IsRUFBRTAxRixVQUFVeG9CLFVBQVVsdEUsRUFBRXNDLEVBQUVDLEVBQW1CODZGLENBQUcvNkYsSUFBUyxPQUFPLEtBQUssSUFBSSxJQUFJQyxFQUFFRCxJQUFJLENBQUMsR0FBRyxJQUFJQyxFQUFFd2pDLEtBQUssSUFBSXhqQyxFQUFFd2pDLElBQUksT0FBT3hqQyxFQUFFLEdBQUdBLEVBQUU2NUUsTUFBTTc1RSxFQUFFNjVFLE1BQU1oOUMsT0FBTzc4QixFQUFFQSxFQUFFQSxFQUFFNjVFLFVBQVUsQ0FBQyxHQUFHNzVFLElBQUlELEVBQUUsTUFBTSxNQUFNQyxFQUFFNjZGLFNBQVMsQ0FBQyxJQUFJNzZGLEVBQUU2OEIsUUFBUTc4QixFQUFFNjhCLFNBQVM5OEIsRUFBRSxPQUFPLEtBQUtDLEVBQUVBLEVBQUU2OEIsT0FBTzc4QixFQUFFNjZGLFFBQVFoK0QsT0FBTzc4QixFQUFFNjhCLE9BQU83OEIsRUFBRUEsRUFBRTY2RixTQUFTLE9BQU8sS0FDNWMsU0FBU0UsR0FBR2g3RixFQUFFQyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxNQUFNNEYsTUFBTStqQixFQUFFLEtBQUssT0FBRyxNQUFNNXBCLEVBQVNDLEVBQUtMLE1BQU1GLFFBQVFNLEdBQU9KLE1BQU1GLFFBQVFPLElBQVVELEVBQUVnQixLQUFLeEIsTUFBTVEsRUFBRUMsR0FBR0QsSUFBRUEsRUFBRWdCLEtBQUtmLEdBQVVELEdBQVNKLE1BQU1GLFFBQVFPLEdBQUcsQ0FBQ0QsR0FBR2lWLE9BQU9oVixHQUFHLENBQUNELEVBQUVDLEdBQUcsU0FBU2c3RixHQUFHajdGLEVBQUVDLEVBQUV2QyxHQUFHa0MsTUFBTUYsUUFBUU0sR0FBR0EsRUFBRXdhLFFBQVF2YSxFQUFFdkMsR0FBR3NDLEdBQUdDLEVBQUV6QyxLQUFLRSxFQUFFc0MsR0FBRyxJQUFJazdGLEdBQUcsS0FDL1EsU0FBU0MsR0FBR243RixHQUFHLEdBQUdBLEVBQUUsQ0FBQyxJQUFJQyxFQUFFRCxFQUFFbzdGLG1CQUFtQjE5RixFQUFFc0MsRUFBRXE3RixtQkFBbUIsR0FBR3o3RixNQUFNRixRQUFRTyxHQUFHLElBQUksSUFBSXRDLEVBQUUsRUFBRUEsRUFBRXNDLEVBQUVJLFNBQVNMLEVBQUVzN0YsdUJBQXVCMzlGLElBQUltMEYsRUFBRzl4RixFQUFFQyxFQUFFdEMsR0FBR0QsRUFBRUMsU0FBU3NDLEdBQUc2eEYsRUFBRzl4RixFQUFFQyxFQUFFdkMsR0FBR3NDLEVBQUVvN0YsbUJBQW1CLEtBQUtwN0YsRUFBRXE3RixtQkFBbUIsS0FBS3I3RixFQUFFdTdGLGdCQUFnQnY3RixFQUFFMHpCLFlBQVk4bkUsUUFBUXg3RixJQUFJLFNBQVN5N0YsR0FBR3o3RixHQUF3QyxHQUFyQyxPQUFPQSxJQUFJazdGLEdBQUdGLEdBQUdFLEdBQUdsN0YsSUFBSUEsRUFBRWs3RixHQUFHQSxHQUFHLEtBQVFsN0YsRUFBRSxDQUFVLEdBQVRpN0YsR0FBR2o3RixFQUFFbTdGLElBQU9ELEdBQUcsTUFBTXIxRixNQUFNK2pCLEVBQUUsS0FBSyxHQUFHMm5FLEVBQUcsTUFBTXZ4RixFQUFFd3hGLEVBQUdELEdBQUcsRUFBR0MsRUFBRyxLQUFLeHhGLEdBQzlZLFNBQVMwN0YsR0FBRzE3RixHQUE2RixPQUExRkEsRUFBRUEsRUFBRW96QixRQUFRcHpCLEVBQUUyN0YsWUFBWXQrRCxRQUFTdStELDBCQUEwQjU3RixFQUFFQSxFQUFFNDdGLHlCQUFnQyxJQUFJNTdGLEVBQUVrNUYsU0FBU2w1RixFQUFFZ25DLFdBQVdobkMsRUFBRSxTQUFTNjdGLEdBQUc3N0YsR0FBRyxJQUFJK3lGLEVBQUcsT0FBTSxFQUFZLElBQUk5eUYsR0FBYkQsRUFBRSxLQUFLQSxLQUFhNm1DLFNBQXFHLE9BQTVGNW1DLEtBQUlBLEVBQUU0bUMsU0FBUy9CLGNBQWMsUUFBU2dDLGFBQWE5bUMsRUFBRSxXQUFXQyxFQUFFLG1CQUFvQkEsRUFBRUQsSUFBV0MsRUFBRSxJQUFJNjdGLEdBQUcsR0FBRyxTQUFTQyxHQUFHLzdGLEdBQUdBLEVBQUVnOEYsYUFBYSxLQUFLaDhGLEVBQUVpOEYsWUFBWSxLQUFLajhGLEVBQUVrOEYsV0FBVyxLQUFLbDhGLEVBQUVtOEYsVUFBVTk3RixPQUFPLEVBQUUsR0FBR3k3RixHQUFHejdGLFFBQVF5N0YsR0FBRzk2RixLQUFLaEIsR0FDNWEsU0FBU284RixHQUFHcDhGLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFHLEdBQUdtK0YsR0FBR3o3RixPQUFPLENBQUMsSUFBSTZJLEVBQUU0eUYsR0FBRzVsQyxNQUEyRSxPQUFyRWh0RCxFQUFFOHlGLGFBQWFoOEYsRUFBRWtKLEVBQUVtekYsaUJBQWlCMStGLEVBQUV1TCxFQUFFK3lGLFlBQVloOEYsRUFBRWlKLEVBQUVnekYsV0FBV3grRixFQUFTd0wsRUFBRSxNQUFNLENBQUM4eUYsYUFBYWg4RixFQUFFcThGLGlCQUFpQjErRixFQUFFcytGLFlBQVloOEYsRUFBRWk4RixXQUFXeCtGLEVBQUV5K0YsVUFBVSxJQUM5TSxTQUFTRyxHQUFHdDhGLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWs4RixXQUFXeCtGLEVBQUV1QyxFQUFFLEVBQUUsQ0FBQyxJQUFJdkMsRUFBRSxDQUFDc0MsRUFBRW04RixVQUFVbjdGLEtBQUt0RCxHQUFHLE1BQU0sSUFBSUMsRUFBRUQsRUFBRSxHQUFHLElBQUlDLEVBQUU4bEMsSUFBSTlsQyxFQUFFQSxFQUFFeTFGLFVBQVVtSixrQkFBa0IsQ0FBQyxLQUFLNStGLEVBQUVtL0IsUUFBUW4vQixFQUFFQSxFQUFFbS9CLE9BQU9uL0IsRUFBRSxJQUFJQSxFQUFFOGxDLElBQUksS0FBSzlsQyxFQUFFeTFGLFVBQVVtSixjQUFjLElBQUk1K0YsRUFBRSxNQUFjLEtBQVJzQyxFQUFFdkMsRUFBRStsQyxNQUFXLElBQUl4akMsR0FBR0QsRUFBRW04RixVQUFVbjdGLEtBQUt0RCxHQUFHQSxFQUFFOCtGLEdBQUc3K0YsU0FBU0QsR0FBRyxJQUFJQSxFQUFFLEVBQUVBLEVBQUVzQyxFQUFFbThGLFVBQVU5N0YsT0FBTzNDLElBQUksQ0FBQ3VDLEVBQUVELEVBQUVtOEYsVUFBVXorRixHQUFHLElBQUl3TCxFQUFFd3lGLEdBQUcxN0YsRUFBRWk4RixhQUFhdCtGLEVBQUVxQyxFQUFFZzhGLGFBQWEsSUFBSXQvRCxFQUFFMThCLEVBQUVpOEYsWUFBWTVuRSxFQUFFcjBCLEVBQUVxOEYsaUJBQWlCLElBQUkzK0YsSUFBSTIyQixHQUFHLElBQUksSUFBSSxJQUFJMXFCLEVBQUUsS0FBS3JKLEVBQUUsRUFBRUEsRUFBRTh4RixFQUFHL3hGLE9BQU9DLElBQUksQ0FBQyxJQUFJaEQsRUFBRTgwRixFQUFHOXhGLEdBQUdoRCxJQUFJQSxFQUFFQSxFQUFFKzBGLGNBQWMxMEYsRUFBRXNDLEVBQUV5OEIsRUFBRXh6QixFQUFFbXJCLE1BQU0xcUIsRUFDcGZxeEYsR0FBR3J4RixFQUFFck0sSUFBSW0rRixHQUFHOXhGLElBQUksU0FBUzh5RixHQUFHejhGLEVBQUVDLEVBQUV2QyxHQUFHLElBQUlBLEVBQUV1M0MsSUFBSWoxQyxHQUFHLENBQUMsT0FBT0EsR0FBRyxJQUFLLFNBQVMwOEYsR0FBR3o4RixFQUFFLFVBQVMsR0FBSSxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU95OEYsR0FBR3o4RixFQUFFLFNBQVEsR0FBSXk4RixHQUFHejhGLEVBQUUsUUFBTyxHQUFJdkMsRUFBRThJLElBQUksT0FBTyxNQUFNOUksRUFBRThJLElBQUksUUFBUSxNQUFNLE1BQU0sSUFBSyxTQUFTLElBQUssUUFBUXExRixHQUFHNzdGLElBQUkwOEYsR0FBR3o4RixFQUFFRCxHQUFFLEdBQUksTUFBTSxJQUFLLFVBQVUsSUFBSyxTQUFTLElBQUssUUFBUSxNQUFNLFNBQVMsSUFBSW02RixHQUFHM3FGLFFBQVF4UCxJQUFJeThCLEdBQUV6OEIsRUFBRUMsR0FBR3ZDLEVBQUU4SSxJQUFJeEcsRUFBRSxPQUN0VixJQUFJMjhGLEdBQUdDLEdBQUdDLEdBQUdDLElBQUcsRUFBR0MsR0FBRyxHQUFHQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLElBQUkvbUQsSUFBSWduRCxHQUFHLElBQUlobkQsSUFBSWluRCxHQUFHLEdBQUdDLEdBQUcsMFFBQTBRbnJGLE1BQU0sS0FBS29yRixHQUFHLGdIQUFnSHByRixNQUFNLEtBQzNYLFNBQVNxckYsR0FBR3g5RixFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEdBQUcsTUFBTSxDQUFDdTBGLFVBQVV6OUYsRUFBRWc4RixhQUFhLzdGLEVBQUVvOEYsaUJBQW1CLEdBQUYzK0YsRUFBS3UrRixZQUFZL3lGLEVBQUV3MEYsVUFBVS8vRixHQUMxTSxTQUFTZ2dHLEdBQUczOUYsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUSxJQUFLLE9BQU9nOUYsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssWUFBWUMsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssV0FBV0MsR0FBRyxLQUFLLE1BQU0sSUFBSyxjQUFjLElBQUssYUFBYUMsR0FBR242QixPQUFPL2lFLEVBQUUyOUYsV0FBVyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCUixHQUFHcDZCLE9BQU8vaUUsRUFBRTI5RixZQUFZLFNBQVNDLEdBQUc3OUYsRUFBRUMsRUFBRXZDLEVBQUVDLEVBQUV1TCxFQUFFd3pCLEdBQUcsT0FBRyxPQUFPMThCLEdBQUdBLEVBQUVpOEYsY0FBY3YvRCxHQUFTMThCLEVBQUV3OUYsR0FBR3Y5RixFQUFFdkMsRUFBRUMsRUFBRXVMLEVBQUV3ekIsR0FBRyxPQUFPejhCLElBQVksUUFBUkEsRUFBRTY5RixHQUFHNzlGLEtBQWEyOEYsR0FBRzM4RixJQUFJRCxJQUFFQSxFQUFFcThGLGtCQUFrQjErRixFQUFTcUMsR0FFaGMsU0FBUys5RixHQUFHLzlGLEdBQUcsSUFBSUMsRUFBRXU4RixHQUFHeDhGLEVBQUVvekIsUUFBUSxHQUFHLE9BQU9uekIsRUFBRSxDQUFDLElBQUl2QyxFQUFFNDhGLEdBQUdyNkYsR0FBRyxHQUFHLE9BQU92QyxFQUFFLEdBQVcsTUFBUnVDLEVBQUV2QyxFQUFFK2xDLE1BQVksR0FBVyxRQUFSeGpDLEVBQUV3NkYsR0FBRy84RixJQUFvRixPQUF2RXNDLEVBQUV5OUYsVUFBVXg5RixPQUFFOUIsRUFBRTYvRix5QkFBeUJoK0YsRUFBRTZwQixVQUFTLFdBQVdnekUsR0FBR24vRixXQUFrQixHQUFHLElBQUl1QyxHQUFHdkMsRUFBRTAxRixVQUFVNkssUUFBOEQsWUFBckRqK0YsRUFBRXk5RixVQUFVLElBQUkvL0YsRUFBRStsQyxJQUFJL2xDLEVBQUUwMUYsVUFBVW1KLGNBQWMsTUFBYXY4RixFQUFFeTlGLFVBQVUsS0FBSyxTQUFTUyxHQUFHbCtGLEdBQUcsR0FBRyxPQUFPQSxFQUFFeTlGLFVBQVUsT0FBTSxFQUFHLElBQUl4OUYsRUFBRWsrRixHQUFHbitGLEVBQUVnOEYsYUFBYWg4RixFQUFFcThGLGlCQUFpQnI4RixFQUFFMDlGLFVBQVUxOUYsRUFBRWk4RixhQUFhLEdBQUcsT0FBT2g4RixFQUFFLENBQUMsSUFBSXZDLEVBQUVvZ0csR0FBRzc5RixHQUFpQyxPQUE5QixPQUFPdkMsR0FBR2svRixHQUFHbC9GLEdBQUdzQyxFQUFFeTlGLFVBQVV4OUYsR0FBUSxFQUFHLE9BQU0sRUFDMWUsU0FBU20rRixHQUFHcCtGLEVBQUVDLEVBQUV2QyxHQUFHd2dHLEdBQUdsK0YsSUFBSXRDLEVBQUVzbEUsT0FBTy9pRSxHQUFHLFNBQVNvK0YsS0FBSyxJQUFJdkIsSUFBRyxFQUFHLEVBQUVDLEdBQUcxOEYsUUFBUSxDQUFDLElBQUlMLEVBQUUrOEYsR0FBRyxHQUFHLEdBQUcsT0FBTy84RixFQUFFeTlGLFVBQVUsQ0FBbUIsUUFBbEJ6OUYsRUFBRTg5RixHQUFHOTlGLEVBQUV5OUYsYUFBcUJkLEdBQUczOEYsR0FBRyxNQUFNLElBQUlDLEVBQUVrK0YsR0FBR24rRixFQUFFZzhGLGFBQWFoOEYsRUFBRXE4RixpQkFBaUJyOEYsRUFBRTA5RixVQUFVMTlGLEVBQUVpOEYsYUFBYSxPQUFPaDhGLEVBQUVELEVBQUV5OUYsVUFBVXg5RixFQUFFODhGLEdBQUd2dkUsUUFBUSxPQUFPd3ZFLElBQUlrQixHQUFHbEIsTUFBTUEsR0FBRyxNQUFNLE9BQU9DLElBQUlpQixHQUFHakIsTUFBTUEsR0FBRyxNQUFNLE9BQU9DLElBQUlnQixHQUFHaEIsTUFBTUEsR0FBRyxNQUFNQyxHQUFHM2lGLFFBQVE0akYsSUFBSWhCLEdBQUc1aUYsUUFBUTRqRixJQUFJLFNBQVNFLEdBQUd0K0YsRUFBRUMsR0FBR0QsRUFBRXk5RixZQUFZeDlGLElBQUlELEVBQUV5OUYsVUFBVSxLQUFLWCxLQUFLQSxJQUFHLEVBQUczK0YsRUFBRW9nRywwQkFBMEJwZ0csRUFBRXFnRyx3QkFBd0JILE1BQ3plLFNBQVNJLEdBQUd6K0YsR0FBRyxTQUFTQyxFQUFFQSxHQUFHLE9BQU9xK0YsR0FBR3IrRixFQUFFRCxHQUFHLEdBQUcsRUFBRSs4RixHQUFHMThGLE9BQU8sQ0FBQ2krRixHQUFHdkIsR0FBRyxHQUFHLzhGLEdBQUcsSUFBSSxJQUFJdEMsRUFBRSxFQUFFQSxFQUFFcS9GLEdBQUcxOEYsT0FBTzNDLElBQUksQ0FBQyxJQUFJQyxFQUFFby9GLEdBQUdyL0YsR0FBR0MsRUFBRTgvRixZQUFZejlGLElBQUlyQyxFQUFFOC9GLFVBQVUsT0FBK0YsSUFBeEYsT0FBT1QsSUFBSXNCLEdBQUd0QixHQUFHaDlGLEdBQUcsT0FBT2k5RixJQUFJcUIsR0FBR3JCLEdBQUdqOUYsR0FBRyxPQUFPazlGLElBQUlvQixHQUFHcEIsR0FBR2w5RixHQUFHbTlGLEdBQUczaUYsUUFBUXZhLEdBQUdtOUYsR0FBRzVpRixRQUFRdmEsR0FBT3ZDLEVBQUUsRUFBRUEsRUFBRTIvRixHQUFHaDlGLE9BQU8zQyxLQUFJQyxFQUFFMC9GLEdBQUczL0YsSUFBSysvRixZQUFZejlGLElBQUlyQyxFQUFFOC9GLFVBQVUsTUFBTSxLQUFLLEVBQUVKLEdBQUdoOUYsUUFBaUIsUUFBUjNDLEVBQUUyL0YsR0FBRyxJQUFZSSxXQUFZTSxHQUFHcmdHLEdBQUcsT0FBT0EsRUFBRSsvRixXQUFXSixHQUFHN3ZFLFFBQy9YLElBQUlreEUsR0FBRyxHQUFHQyxHQUFHLElBQUl2b0QsSUFBSXdvRCxHQUFHLElBQUl4b0QsSUFBSXlvRCxHQUFHLENBQUMsUUFBUSxRQUFROUUsR0FBRyxlQUFlQyxHQUFHLHFCQUFxQkMsR0FBRyxpQkFBaUIsVUFBVSxVQUFVLGlCQUFpQixpQkFBaUIsaUJBQWlCLGlCQUFpQixVQUFVLFVBQVUsWUFBWSxZQUFZLFFBQVEsUUFBUSxRQUFRLFFBQVEsb0JBQW9CLG9CQUFvQixPQUFPLE9BQU8sYUFBYSxhQUFhLGlCQUFpQixpQkFBaUIsWUFBWSxZQUFZLHFCQUFxQixxQkFBcUIsVUFBVSxVQUFVLFdBQVcsV0FBVyxVQUNwZixVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsYUFBYSxhQUFhQyxHQUFHLGdCQUFnQixVQUFVLFdBQVcsU0FBUzRFLEdBQUc5K0YsRUFBRUMsR0FBRyxJQUFJLElBQUl2QyxFQUFFLEVBQUVBLEVBQUVzQyxFQUFFSyxPQUFPM0MsR0FBRyxFQUFFLENBQUMsSUFBSUMsRUFBRXFDLEVBQUV0QyxHQUFHd0wsRUFBRWxKLEVBQUV0QyxFQUFFLEdBQUdnL0IsRUFBRSxNQUFNeHpCLEVBQUUsR0FBRzBrQixjQUFjMWtCLEVBQUV2RCxNQUFNLElBQUkrMkIsRUFBRSxDQUFDODFELHdCQUF3QixDQUFDdU0sUUFBUXJpRSxFQUFFc2lFLFNBQVN0aUUsRUFBRSxXQUFXbTJELGFBQWEsQ0FBQ2wxRixHQUFHc2hHLGNBQWNoL0YsR0FBRzIrRixHQUFHcDRGLElBQUk3SSxFQUFFc0MsR0FBRzArRixHQUFHbjRGLElBQUk3SSxFQUFFKytCLEdBQUdnaUUsR0FBR3gxRixHQUFHd3pCLEdBQ3pWb2lFLEdBQUcsNmlCQUE2aUIzc0YsTUFBTSxLQUFLLEdBQzNqQjJzRixHQUFHLG9SQUFvUjNzRixNQUFNLEtBQUssR0FBRzJzRixHQUFHRCxHQUFHLEdBQUcsSUFBSSxJQUFJSyxHQUFHLHFGQUFxRi9zRixNQUFNLEtBQUtndEYsR0FBRyxFQUFFQSxHQUFHRCxHQUFHNytGLE9BQU84K0YsS0FBS1AsR0FBR3A0RixJQUFJMDRGLEdBQUdDLElBQUksR0FDOWIsSUFBSW5tRixHQUFHN2EsRUFBRWloRyw4QkFBOEJDLEdBQUdsaEcsRUFBRTYvRix5QkFBeUJzQixJQUFHLEVBQUcsU0FBUzdpRSxHQUFFejhCLEVBQUVDLEdBQUd5OEYsR0FBR3o4RixFQUFFRCxHQUFFLEdBQUksU0FBUzA4RixHQUFHMThGLEVBQUVDLEVBQUV2QyxHQUFHLElBQUlDLEVBQUVpaEcsR0FBRzFnRyxJQUFJK0IsR0FBRyxZQUFPLElBQVN0QyxFQUFFLEVBQUVBLEdBQUcsS0FBSyxFQUFFQSxFQUFFNGhHLEdBQUcxZ0csS0FBSyxLQUFLb0IsRUFBRSxFQUFFRCxHQUFHLE1BQU0sS0FBSyxFQUFFckMsRUFBRTZoRyxHQUFHM2dHLEtBQUssS0FBS29CLEVBQUUsRUFBRUQsR0FBRyxNQUFNLFFBQVFyQyxFQUFFd2xDLEdBQUd0a0MsS0FBSyxLQUFLb0IsRUFBRSxFQUFFRCxHQUFHdEMsRUFBRXNDLEVBQUV5ekQsaUJBQWlCeHpELEVBQUV0QyxHQUFFLEdBQUlxQyxFQUFFeXpELGlCQUFpQnh6RCxFQUFFdEMsR0FBRSxHQUFJLFNBQVM0aEcsR0FBR3YvRixFQUFFQyxFQUFFdkMsRUFBRUMsR0FBR2cyRixHQUFJRixJQUFLLElBQUl2cUYsRUFBRWk2QixHQUFHekcsRUFBRWkzRCxFQUFHQSxHQUFHLEVBQUcsSUFBSUgsRUFBR3RxRixFQUFFbEosRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsU0FBU2cyRixFQUFHajNELElBQUltM0QsS0FBTSxTQUFTMkwsR0FBR3gvRixFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRzBoRyxHQUFHcm1GLEdBQUdtcUIsR0FBR3RrQyxLQUFLLEtBQUttQixFQUFFQyxFQUFFdkMsRUFBRUMsSUFDcGMsU0FBU3dsQyxHQUFHbmpDLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFHLEdBQUcyaEcsR0FBRyxHQUFHLEVBQUV2QyxHQUFHMThGLFNBQVMsRUFBRWk5RixHQUFHOXRGLFFBQVF4UCxHQUFHQSxFQUFFdzlGLEdBQUcsS0FBS3g5RixFQUFFQyxFQUFFdkMsRUFBRUMsR0FBR28vRixHQUFHLzdGLEtBQUtoQixPQUFPLENBQUMsSUFBSWtKLEVBQUVpMUYsR0FBR24rRixFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxHQUFHLE9BQU91TCxFQUFFeTBGLEdBQUczOUYsRUFBRXJDLFFBQVEsSUFBSSxFQUFFMi9GLEdBQUc5dEYsUUFBUXhQLEdBQUdBLEVBQUV3OUYsR0FBR3QwRixFQUFFbEosRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUdvL0YsR0FBRy83RixLQUFLaEIsUUFBUSxJQVQ5TCxTQUFZQSxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEdBQUcsT0FBT2pKLEdBQUcsSUFBSyxRQUFRLE9BQU8rOEYsR0FBR2EsR0FBR2IsR0FBR2g5RixFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLElBQUcsRUFBRyxJQUFLLFlBQVksT0FBTyt6RixHQUFHWSxHQUFHWixHQUFHajlGLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsSUFBRyxFQUFHLElBQUssWUFBWSxPQUFPZzBGLEdBQUdXLEdBQUdYLEdBQUdsOUYsRUFBRUMsRUFBRXZDLEVBQUVDLEVBQUV1TCxJQUFHLEVBQUcsSUFBSyxjQUFjLElBQUl3ekIsRUFBRXh6QixFQUFFMDBGLFVBQWtELE9BQXhDVCxHQUFHMzJGLElBQUlrMkIsRUFBRW1oRSxHQUFHVixHQUFHai9GLElBQUl3K0IsSUFBSSxLQUFLMThCLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsS0FBVSxFQUFHLElBQUssb0JBQW9CLE9BQU93ekIsRUFBRXh6QixFQUFFMDBGLFVBQVVSLEdBQUc1MkYsSUFBSWsyQixFQUFFbWhFLEdBQUdULEdBQUdsL0YsSUFBSXcrQixJQUFJLEtBQUsxOEIsRUFBRUMsRUFBRXZDLEVBQUVDLEVBQUV1TCxLQUFJLEVBQUcsT0FBTSxFQVM3SnUyRixDQUFHdjJGLEVBQUVsSixFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxDQUFDZ2dHLEdBQUczOUYsRUFBRXJDLEdBQUdxQyxFQUFFbzhGLEdBQUdwOEYsRUFBRXJDLEVBQUUsS0FBS3NDLEdBQUcsSUFBSTZ6RixFQUFHd0ksR0FBR3Q4RixHQUFHLFFBQVErN0YsR0FBRy83RixNQUNsUSxTQUFTbStGLEdBQUduK0YsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQW1CLEdBQUcsUUFBWEQsRUFBRTgrRixHQUFWOStGLEVBQUVnK0YsR0FBRy85RixLQUF1QixDQUFDLElBQUl1TCxFQUFFb3hGLEdBQUc1OEYsR0FBRyxHQUFHLE9BQU93TCxFQUFFeEwsRUFBRSxTQUFTLENBQUMsSUFBSWcvQixFQUFFeHpCLEVBQUV1NkIsSUFBSSxHQUFHLEtBQUsvRyxFQUFFLENBQVMsR0FBRyxRQUFYaC9CLEVBQUUrOEYsR0FBR3Z4RixJQUFlLE9BQU94TCxFQUFFQSxFQUFFLFVBQVUsR0FBRyxJQUFJZy9CLEVBQUUsQ0FBQyxHQUFHeHpCLEVBQUVrcUYsVUFBVTZLLFFBQVEsT0FBTyxJQUFJLzBGLEVBQUV1NkIsSUFBSXY2QixFQUFFa3FGLFVBQVVtSixjQUFjLEtBQUs3K0YsRUFBRSxVQUFVd0wsSUFBSXhMLElBQUlBLEVBQUUsT0FBT3NDLEVBQUVvOEYsR0FBR3A4RixFQUFFckMsRUFBRUQsRUFBRXVDLEdBQUcsSUFBSTZ6RixFQUFHd0ksR0FBR3Q4RixHQUFHLFFBQVErN0YsR0FBRy83RixHQUFHLE9BQU8sS0FDcFQsSUFBSTAvRixHQUFHLENBQUNqZ0MseUJBQXdCLEVBQUdDLG1CQUFrQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdDLFNBQVEsRUFBR0MsY0FBYSxFQUFHQyxpQkFBZ0IsRUFBR0MsYUFBWSxFQUFHQyxTQUFRLEVBQUdDLE1BQUssRUFBR0MsVUFBUyxFQUFHQyxjQUFhLEVBQUdDLFlBQVcsRUFBR0MsY0FBYSxFQUFHQyxXQUFVLEVBQUdvL0IsVUFBUyxFQUFHbi9CLFNBQVEsRUFBR0MsWUFBVyxFQUFHQyxhQUFZLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxlQUFjLEVBQUdDLGdCQUFlLEVBQUdDLGlCQUFnQixFQUFHSyxZQUFXLEVBQUd3K0IsV0FBVSxFQUFHditCLFlBQVcsRUFBR0MsU0FBUSxFQUFHQyxPQUFNLEVBQUdDLFNBQVEsRUFBR0MsU0FBUSxFQUFHQyxRQUFPLEVBQUdDLFFBQU8sRUFBR0MsTUFBSyxFQUFHRSxhQUFZLEVBQzFmQyxjQUFhLEVBQUdDLGFBQVksRUFBR0MsaUJBQWdCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsZUFBYyxFQUFHQyxhQUFZLEdBQUl3OUIsR0FBRyxDQUFDLFNBQVMsS0FBSyxNQUFNLEtBQTZILFNBQVNDLEdBQUc5L0YsRUFBRUMsRUFBRXZDLEdBQUcsT0FBTyxNQUFNdUMsR0FBRyxrQkFBbUJBLEdBQUcsS0FBS0EsRUFBRSxHQUFHdkMsR0FBRyxpQkFBa0J1QyxHQUFHLElBQUlBLEdBQUd5L0YsR0FBR3hnRyxlQUFlYyxJQUFJMC9GLEdBQUcxL0YsSUFBSSxHQUFHQyxHQUFHc2pDLE9BQU90akMsRUFBRSxLQUM5WixTQUFTOC9GLEdBQUcvL0YsRUFBRUMsR0FBYSxJQUFJLElBQUl2QyxLQUFsQnNDLEVBQUVBLEVBQUVreEMsTUFBbUJqeEMsRUFBRSxHQUFHQSxFQUFFZixlQUFleEIsR0FBRyxDQUFDLElBQUlDLEVBQUUsSUFBSUQsRUFBRThSLFFBQVEsTUFBTXRHLEVBQUU0MkYsR0FBR3BpRyxFQUFFdUMsRUFBRXZDLEdBQUdDLEdBQUcsVUFBVUQsSUFBSUEsRUFBRSxZQUFZQyxFQUFFcUMsRUFBRXM5RSxZQUFZNS9FLEVBQUV3TCxHQUFHbEosRUFBRXRDLEdBQUd3TCxHQURUbkwsT0FBT2dJLEtBQUsyNUYsSUFBSWxsRixTQUFRLFNBQVN4YSxHQUFHNi9GLEdBQUdybEYsU0FBUSxTQUFTdmEsR0FBR0EsRUFBRUEsRUFBRUQsRUFBRSt1QixPQUFPLEdBQUduQixjQUFjNXRCLEVBQUVrdUQsVUFBVSxHQUFHd3hDLEdBQUd6L0YsR0FBR3kvRixHQUFHMS9GLFNBQ3JHLElBQUlnZ0csR0FBR2xoRyxFQUFFLENBQUNtaEcsVUFBUyxHQUFJLENBQUNDLE1BQUssRUFBRzk4RSxNQUFLLEVBQUcrOEUsSUFBRyxFQUFHQyxLQUFJLEVBQUdDLE9BQU0sRUFBR0MsSUFBRyxFQUFHQyxLQUFJLEVBQUc1Z0csT0FBTSxFQUFHNmdHLFFBQU8sRUFBR3RoQyxNQUFLLEVBQUd1aEMsTUFBSyxFQUFHQyxPQUFNLEVBQUd2eUUsUUFBTyxFQUFHd3lFLE9BQU0sRUFBR0MsS0FBSSxJQUNsVCxTQUFTQyxHQUFHN2dHLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUcrL0YsR0FBR2hnRyxLQUFLLE1BQU1DLEVBQUVxdkMsVUFBVSxNQUFNcnZDLEVBQUU4a0MseUJBQXlCLE1BQU1sL0IsTUFBTStqQixFQUFFLElBQUk1cEIsRUFBRSxLQUFLLEdBQUcsTUFBTUMsRUFBRThrQyx3QkFBd0IsQ0FBQyxHQUFHLE1BQU05a0MsRUFBRXF2QyxTQUFTLE1BQU16cEMsTUFBTStqQixFQUFFLEtBQUssR0FBSyxpQkFBa0IzcEIsRUFBRThrQywyQkFBeUIsV0FBVzlrQyxFQUFFOGtDLHlCQUF5QixNQUFNbC9CLE1BQU0rakIsRUFBRSxLQUFNLEdBQUcsTUFBTTNwQixFQUFFaXhDLE9BQU8saUJBQWtCanhDLEVBQUVpeEMsTUFBTSxNQUFNcnJDLE1BQU0rakIsRUFBRSxHQUFHLE1BQ2xXLFNBQVNrM0UsR0FBRzlnRyxFQUFFQyxHQUFHLElBQUksSUFBSUQsRUFBRXdQLFFBQVEsS0FBSyxNQUFNLGlCQUFrQnZQLEVBQUV1a0YsR0FBRyxPQUFPeGtGLEdBQUcsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyxZQUFZLElBQUssZ0JBQWdCLElBQUssZ0JBQWdCLElBQUssbUJBQW1CLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLE9BQU0sRUFBRyxRQUFRLE9BQU0sR0FBSSxJQUFJK2dHLEdBQUd4SSxHQUFRLFNBQVN5SSxHQUFHaGhHLEVBQUVDLEdBQXVELElBQUl2QyxFQUFFMjhGLEdBQTFEcjZGLEVBQUUsSUFBSUEsRUFBRWs1RixVQUFVLEtBQUtsNUYsRUFBRWs1RixTQUFTbDVGLEVBQUVBLEVBQUU0akMsZUFBMEIzakMsRUFBRTJ5RixFQUFHM3lGLEdBQUcsSUFBSSxJQUFJdEMsRUFBRSxFQUFFQSxFQUFFc0MsRUFBRUksT0FBTzFDLElBQUk4K0YsR0FBR3g4RixFQUFFdEMsR0FBR3FDLEVBQUV0QyxHQUFHLFNBQVN1akcsTUFDNWEsU0FBU0MsR0FBR2xoRyxHQUF3RCxRQUFHLEtBQXhEQSxFQUFFQSxJQUFJLG9CQUFxQjZtQyxTQUFTQSxjQUFTLElBQWtDLE9BQU8sS0FBSyxJQUFJLE9BQU83bUMsRUFBRTQzRixlQUFlNTNGLEVBQUVtaEcsS0FBSyxNQUFNbGhHLEdBQUcsT0FBT0QsRUFBRW1oRyxNQUFNLFNBQVNDLEdBQUdwaEcsR0FBRyxLQUFLQSxHQUFHQSxFQUFFKzRGLFlBQVkvNEYsRUFBRUEsRUFBRSs0RixXQUFXLE9BQU8vNEYsRUFBRSxTQUFTcWhHLEdBQUdyaEcsRUFBRUMsR0FBRyxJQUF3QnRDLEVBQXBCRCxFQUFFMGpHLEdBQUdwaEcsR0FBTyxJQUFKQSxFQUFFLEVBQVl0QyxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFdzdGLFNBQVMsQ0FBMEIsR0FBekJ2N0YsRUFBRXFDLEVBQUV0QyxFQUFFcXNDLFlBQVkxcEMsT0FBVUwsR0FBR0MsR0FBR3RDLEdBQUdzQyxFQUFFLE1BQU0sQ0FBQ20yQixLQUFLMTRCLEVBQUVta0IsT0FBTzVoQixFQUFFRCxHQUFHQSxFQUFFckMsRUFBRXFDLEVBQUUsQ0FBQyxLQUFLdEMsR0FBRyxDQUFDLEdBQUdBLEVBQUV1cEMsWUFBWSxDQUFDdnBDLEVBQUVBLEVBQUV1cEMsWUFBWSxNQUFNam5DLEVBQUV0QyxFQUFFQSxFQUFFc3BDLFdBQVd0cEMsT0FBRSxFQUFPQSxFQUFFMGpHLEdBQUcxakcsSUFDM1AsU0FBUzRqRyxLQUFLLElBQUksSUFBSXRoRyxFQUFFcTlCLE9BQU9wOUIsRUFBRWloRyxLQUFLamhHLGFBQWFELEVBQUV1aEcsbUJBQW1CLENBQUMsSUFBSSxJQUFJN2pHLEVBQUUsaUJBQWtCdUMsRUFBRXVoRyxjQUFjbnVCLFNBQVNKLEtBQUssTUFBTXQxRSxHQUFHRCxHQUFFLEVBQUcsSUFBR0EsRUFBeUIsTUFBTXVDLEVBQUVpaEcsSUFBL0JsaEcsRUFBRUMsRUFBRXVoRyxlQUFnQzM2RCxVQUFVLE9BQU81bUMsRUFDNVksU0FBU3doRyxHQUFHemhHLEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRW9nRCxVQUFVcGdELEVBQUVvZ0QsU0FBU3gwQyxjQUFjLE9BQU8zTCxJQUFJLFVBQVVBLElBQUksU0FBU0QsRUFBRXcyQixNQUFNLFdBQVd4MkIsRUFBRXcyQixNQUFNLFFBQVF4MkIsRUFBRXcyQixNQUFNLFFBQVF4MkIsRUFBRXcyQixNQUFNLGFBQWF4MkIsRUFBRXcyQixPQUFPLGFBQWF2MkIsR0FBRyxTQUFTRCxFQUFFMGhHLGlCQUFpQixJQUFtQ0MsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsR0FBRzdoRyxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxTQUFTLElBQUssUUFBUSxJQUFLLFNBQVMsSUFBSyxXQUFXLFFBQVFDLEVBQUU2aEcsVUFBVSxPQUFNLEVBQzdYLFNBQVNDLEdBQUcvaEcsRUFBRUMsR0FBRyxNQUFNLGFBQWFELEdBQUcsV0FBV0EsR0FBRyxhQUFhQSxHQUFHLGlCQUFrQkMsRUFBRXF2QyxVQUFVLGlCQUFrQnJ2QyxFQUFFcXZDLFVBQVUsaUJBQWtCcnZDLEVBQUU4a0MseUJBQXlCLE9BQU85a0MsRUFBRThrQyx5QkFBeUIsTUFBTTlrQyxFQUFFOGtDLHdCQUF3QkMsT0FBTyxJQUFJZzlELEdBQUcsbUJBQW9CL3FFLFdBQVdBLGdCQUFXLEVBQU9nckUsR0FBRyxtQkFBb0JscEQsYUFBYUEsa0JBQWEsRUFBTyxTQUFTbXBELEdBQUdsaUcsR0FBRyxLQUFLLE1BQU1BLEVBQUVBLEVBQUVBLEVBQUVpbkMsWUFBWSxDQUFDLElBQUlobkMsRUFBRUQsRUFBRWs1RixTQUFTLEdBQUcsSUFBSWo1RixHQUFHLElBQUlBLEVBQUUsTUFBTSxPQUFPRCxFQUNsYyxTQUFTbWlHLEdBQUduaUcsR0FBR0EsRUFBRUEsRUFBRW9pRyxnQkFBZ0IsSUFBSSxJQUFJbmlHLEVBQUUsRUFBRUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRWs1RixTQUFTLENBQUMsSUFBSXg3RixFQUFFc0MsRUFBRWthLEtBQUssR0FGZ0osTUFFN0l4YyxHQUZvSyxPQUU1SkEsR0FGb0osT0FFNUlBLEVBQU8sQ0FBQyxHQUFHLElBQUl1QyxFQUFFLE9BQU9ELEVBQUVDLFFBRjBHLE9BRWpHdkMsR0FBUXVDLElBQUlELEVBQUVBLEVBQUVvaUcsZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQyxHQUFHdjdGLEtBQUs2MEIsU0FBUzk3QixTQUFTLElBQUk4RixNQUFNLEdBQUcyOEYsR0FBRywyQkFBMkJELEdBQUdFLEdBQUcsd0JBQXdCRixHQUFHRyxHQUFHLHFCQUFxQkgsR0FDdlQsU0FBUzdGLEdBQUd4OEYsR0FBRyxJQUFJQyxFQUFFRCxFQUFFc2lHLElBQUksR0FBR3JpRyxFQUFFLE9BQU9BLEVBQUUsSUFBSSxJQUFJdkMsRUFBRXNDLEVBQUVnbkMsV0FBV3RwQyxHQUFHLENBQUMsR0FBR3VDLEVBQUV2QyxFQUFFOGtHLEtBQUs5a0csRUFBRTRrRyxJQUFJLENBQWUsR0FBZDVrRyxFQUFFdUMsRUFBRXM2RixVQUFhLE9BQU90NkYsRUFBRTY1RSxPQUFPLE9BQU9wOEUsR0FBRyxPQUFPQSxFQUFFbzhFLE1BQU0sSUFBSTk1RSxFQUFFbWlHLEdBQUduaUcsR0FBRyxPQUFPQSxHQUFHLENBQUMsR0FBR3RDLEVBQUVzQyxFQUFFc2lHLElBQUksT0FBTzVrRyxFQUFFc0MsRUFBRW1pRyxHQUFHbmlHLEdBQUcsT0FBT0MsRUFBTXZDLEdBQUpzQyxFQUFFdEMsR0FBTXNwQyxXQUFXLE9BQU8sS0FBSyxTQUFTODJELEdBQUc5OUYsR0FBa0IsUUFBZkEsRUFBRUEsRUFBRXNpRyxLQUFLdGlHLEVBQUV3aUcsTUFBYyxJQUFJeGlHLEVBQUV5akMsS0FBSyxJQUFJempDLEVBQUV5akMsS0FBSyxLQUFLempDLEVBQUV5akMsS0FBSyxJQUFJempDLEVBQUV5akMsSUFBSSxLQUFLempDLEVBQUUsU0FBU3lpRyxHQUFHemlHLEdBQUcsR0FBRyxJQUFJQSxFQUFFeWpDLEtBQUssSUFBSXpqQyxFQUFFeWpDLElBQUksT0FBT3pqQyxFQUFFb3pGLFVBQVUsTUFBTXZ0RixNQUFNK2pCLEVBQUUsS0FBTSxTQUFTODRFLEdBQUcxaUcsR0FBRyxPQUFPQSxFQUFFdWlHLEtBQUssS0FDbGIsU0FBU0ksR0FBRzNpRyxHQUFHLEdBQUdBLEVBQUVBLEVBQUU4OEIsYUFBYTk4QixHQUFHLElBQUlBLEVBQUV5akMsS0FBSyxPQUFPempDLEdBQUksS0FDNUQsU0FBUzRpRyxHQUFHNWlHLEVBQUVDLEdBQUcsSUFBSXZDLEVBQUVzQyxFQUFFb3pGLFVBQVUsSUFBSTExRixFQUFFLE9BQU8sS0FBSyxJQUFJQyxFQUFFZzBGLEVBQUdqMEYsR0FBRyxJQUFJQyxFQUFFLE9BQU8sS0FBS0QsRUFBRUMsRUFBRXNDLEdBQUdELEVBQUUsT0FBT0MsR0FBRyxJQUFLLFVBQVUsSUFBSyxpQkFBaUIsSUFBSyxnQkFBZ0IsSUFBSyx1QkFBdUIsSUFBSyxjQUFjLElBQUsscUJBQXFCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLFlBQVksSUFBSyxtQkFBbUIsSUFBSyxnQkFBZ0J0QyxHQUFHQSxFQUFFdTZGLFlBQXFCdjZGLElBQUksWUFBYnFDLEVBQUVBLEVBQUV3MkIsT0FBdUIsVUFBVXgyQixHQUFHLFdBQVdBLEdBQUcsYUFBYUEsSUFBSUEsR0FBR3JDLEVBQUUsTUFBTXFDLEVBQUUsUUFBUUEsR0FBRSxFQUFHLEdBQUdBLEVBQUUsT0FBTyxLQUFLLEdBQUd0QyxHQUFHLG1CQUFvQkEsRUFBRSxNQUFNbUksTUFBTStqQixFQUFFLElBQ2pnQjNwQixTQUFTdkMsSUFBSSxPQUFPQSxFQUFFLFNBQVNtbEcsR0FBRzdpRyxFQUFFQyxFQUFFdkMsSUFBTXVDLEVBQUUyaUcsR0FBRzVpRyxFQUFFdEMsRUFBRW9sRyxlQUFldFEsd0JBQXdCdnlGLE9BQUl2QyxFQUFFMDlGLG1CQUFtQkosR0FBR3Q5RixFQUFFMDlGLG1CQUFtQm43RixHQUFHdkMsRUFBRTI5RixtQkFBbUJMLEdBQUd0OUYsRUFBRTI5RixtQkFBbUJyN0YsSUFBRyxTQUFTK2lHLEdBQUcvaUcsR0FBRyxHQUFHQSxHQUFHQSxFQUFFOGlHLGVBQWV0USx3QkFBd0IsQ0FBQyxJQUFJLElBQUl2eUYsRUFBRUQsRUFBRWdqRyxZQUFZdGxHLEVBQUUsR0FBR3VDLEdBQUd2QyxFQUFFc0QsS0FBS2YsR0FBR0EsRUFBRTBpRyxHQUFHMWlHLEdBQUcsSUFBSUEsRUFBRXZDLEVBQUUyQyxPQUFPLEVBQUVKLEtBQUs0aUcsR0FBR25sRyxFQUFFdUMsR0FBRyxXQUFXRCxHQUFHLElBQUlDLEVBQUUsRUFBRUEsRUFBRXZDLEVBQUUyQyxPQUFPSixJQUFJNGlHLEdBQUdubEcsRUFBRXVDLEdBQUcsVUFBVUQsSUFDdFksU0FBU2lqRyxHQUFHampHLEVBQUVDLEVBQUV2QyxHQUFHc0MsR0FBR3RDLEdBQUdBLEVBQUVvbEcsZUFBZXBRLG1CQUFtQnp5RixFQUFFMmlHLEdBQUc1aUcsRUFBRXRDLEVBQUVvbEcsZUFBZXBRLHFCQUFxQmgxRixFQUFFMDlGLG1CQUFtQkosR0FBR3Q5RixFQUFFMDlGLG1CQUFtQm43RixHQUFHdkMsRUFBRTI5RixtQkFBbUJMLEdBQUd0OUYsRUFBRTI5RixtQkFBbUJyN0YsSUFBSSxTQUFTa2pHLEdBQUdsakcsR0FBR0EsR0FBR0EsRUFBRThpRyxlQUFlcFEsa0JBQWtCdVEsR0FBR2pqRyxFQUFFZ2pHLFlBQVksS0FBS2hqRyxHQUFHLFNBQVNtakcsR0FBR25qRyxHQUFHaTdGLEdBQUdqN0YsRUFBRStpRyxJQUFJLElBQUlLLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQ3hVLFNBQVNDLEtBQUssR0FBR0QsR0FBRyxPQUFPQSxHQUFHLElBQUl0akcsRUFBa0JyQyxFQUFoQnNDLEVBQUVvakcsR0FBRzNsRyxFQUFFdUMsRUFBRUksT0FBUzZJLEVBQUUsVUFBVWs2RixHQUFHQSxHQUFHOWtHLE1BQU04a0csR0FBR3I1RCxZQUFZck4sRUFBRXh6QixFQUFFN0ksT0FBTyxJQUFJTCxFQUFFLEVBQUVBLEVBQUV0QyxHQUFHdUMsRUFBRUQsS0FBS2tKLEVBQUVsSixHQUFHQSxLQUFLLElBQUlxMEIsRUFBRTMyQixFQUFFc0MsRUFBRSxJQUFJckMsRUFBRSxFQUFFQSxHQUFHMDJCLEdBQUdwMEIsRUFBRXZDLEVBQUVDLEtBQUt1TCxFQUFFd3pCLEVBQUUvK0IsR0FBR0EsS0FBSyxPQUFPMmxHLEdBQUdwNkYsRUFBRXZELE1BQU0zRixFQUFFLEVBQUVyQyxFQUFFLEVBQUVBLE9BQUUsR0FBUSxTQUFTeXVELEtBQUssT0FBTSxFQUFHLFNBQVNvM0MsS0FBSyxPQUFNLEVBQ2xRLFNBQVMzekMsR0FBRTd2RCxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBNEYsSUFBSSxJQUFJdUwsS0FBakd2RixLQUFLbS9GLGVBQWU5aUcsRUFBRTJELEtBQUtxL0YsWUFBWS9pRyxFQUFFMEQsS0FBS3M0RixZQUFZditGLEVBQUVzQyxFQUFFMkQsS0FBSyt2QixZQUFZK3ZFLFVBQXlCempHLEVBQUVkLGVBQWVnSyxNQUFNakosRUFBRUQsRUFBRWtKLElBQUl2RixLQUFLdUYsR0FBR2pKLEVBQUV2QyxHQUFHLFdBQVd3TCxFQUFFdkYsS0FBS3l2QixPQUFPejFCLEVBQUVnRyxLQUFLdUYsR0FBR3hMLEVBQUV3TCxJQUFnSSxPQUE1SHZGLEtBQUsrL0Ysb0JBQW9CLE1BQU1obUcsRUFBRWltRyxpQkFBaUJqbUcsRUFBRWltRyxrQkFBaUIsSUFBS2ptRyxFQUFFa21HLGFBQWF4M0MsR0FBR28zQyxHQUFHNy9GLEtBQUsyM0YscUJBQXFCa0ksR0FBVTcvRixLQUdyRixTQUFTa2dHLEdBQUc3akcsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsR0FBR2dHLEtBQUttZ0csVUFBVXpqRyxPQUFPLENBQUMsSUFBSTZJLEVBQUV2RixLQUFLbWdHLFVBQVU1dEMsTUFBMkIsT0FBckJ2eUQsS0FBS25HLEtBQUswTCxFQUFFbEosRUFBRUMsRUFBRXZDLEVBQUVDLEdBQVV1TCxFQUFFLE9BQU8sSUFBSXZGLEtBQUszRCxFQUFFQyxFQUFFdkMsRUFBRUMsR0FDN1gsU0FBU29tRyxHQUFHL2pHLEdBQUcsS0FBS0EsYUFBYTJELE1BQU0sTUFBTWtDLE1BQU0rakIsRUFBRSxNQUFNNXBCLEVBQUVna0csYUFBYSxHQUFHcmdHLEtBQUttZ0csVUFBVXpqRyxRQUFRc0QsS0FBS21nRyxVQUFVOWlHLEtBQUtoQixHQUFHLFNBQVNpa0csR0FBR2prRyxHQUFHQSxFQUFFOGpHLFVBQVUsR0FBRzlqRyxFQUFFa2tHLFVBQVVMLEdBQUc3akcsRUFBRXc3RixRQUFRdUksR0FIbExqbEcsRUFBRSt3RCxHQUFFNXdELFVBQVUsQ0FBQ2tsRyxlQUFlLFdBQVd4Z0csS0FBS2dnRyxrQkFBaUIsRUFBRyxJQUFJM2pHLEVBQUUyRCxLQUFLczRGLFlBQVlqOEYsSUFBSUEsRUFBRW1rRyxlQUFlbmtHLEVBQUVta0csaUJBQWlCLGtCQUFtQm5rRyxFQUFFNGpHLGNBQWM1akcsRUFBRTRqRyxhQUFZLEdBQUlqZ0csS0FBSysvRixtQkFBbUJ0M0MsS0FBS2c0QyxnQkFBZ0IsV0FBVyxJQUFJcGtHLEVBQUUyRCxLQUFLczRGLFlBQVlqOEYsSUFBSUEsRUFBRW9rRyxnQkFBZ0Jwa0csRUFBRW9rRyxrQkFBa0Isa0JBQW1CcGtHLEVBQUVxa0csZUFBZXJrRyxFQUFFcWtHLGNBQWEsR0FBSTFnRyxLQUFLMjNGLHFCQUFxQmx2QyxLQUFLazRDLFFBQVEsV0FBVzNnRyxLQUFLNDNGLGFBQWFudkMsSUFBSW12QyxhQUFhaUksR0FBR1EsV0FBVyxXQUFXLElBQ3BkL2pHLEVBRHdkRCxFQUFFMkQsS0FBSyt2QixZQUFZK3ZFLFVBQ3plLElBQUl4akcsS0FBS0QsRUFBRTJELEtBQUsxRCxHQUFHLEtBQUswRCxLQUFLczRGLFlBQVl0NEYsS0FBS3EvRixZQUFZci9GLEtBQUttL0YsZUFBZSxLQUFLbi9GLEtBQUsyM0YscUJBQXFCMzNGLEtBQUsrL0YsbUJBQW1CRixHQUFHNy9GLEtBQUswM0YsbUJBQW1CMTNGLEtBQUt5M0YsbUJBQW1CLFFBQVF2ckMsR0FBRTR6QyxVQUFVLENBQUNqdEUsS0FBSyxLQUFLcEQsT0FBTyxLQUFLMitELGNBQWMsV0FBVyxPQUFPLE1BQU13UyxXQUFXLEtBQUtDLFFBQVEsS0FBS0MsV0FBVyxLQUFLQyxVQUFVLFNBQVMxa0csR0FBRyxPQUFPQSxFQUFFMGtHLFdBQVdoa0csS0FBSzBkLE9BQU91bEYsaUJBQWlCLEtBQUtnQixVQUFVLE1BQzlZOTBDLEdBQUU1dUQsT0FBTyxTQUFTakIsR0FBRyxTQUFTQyxLQUFLLFNBQVN2QyxJQUFJLE9BQU9DLEVBQUU2QixNQUFNbUUsS0FBS2xFLFdBQVcsSUFBSTlCLEVBQUVnRyxLQUFLMUQsRUFBRWhCLFVBQVV0QixFQUFFc0IsVUFBVSxJQUFJaUssRUFBRSxJQUFJakosRUFBbUgsT0FBakhuQixFQUFFb0ssRUFBRXhMLEVBQUV1QixXQUFXdkIsRUFBRXVCLFVBQVVpSyxFQUFFeEwsRUFBRXVCLFVBQVV5MEIsWUFBWWgyQixFQUFFQSxFQUFFK2xHLFVBQVUza0csRUFBRSxHQUFHbkIsRUFBRThsRyxVQUFVempHLEdBQUd0QyxFQUFFdUQsT0FBT3RELEVBQUVzRCxPQUFPZ2pHLEdBQUd2bUcsR0FBVUEsR0FBR3VtRyxHQUFHcDBDLElBQ3ZFLElBQUl0RCxHQUFHc0QsR0FBRTV1RCxPQUFPLENBQUNpWixLQUFLLE9BQU8wcUYsR0FBRy8wQyxHQUFFNXVELE9BQU8sQ0FBQ2laLEtBQUssT0FBTzJxRixHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSXIzQyxHQUFHdWxDLEdBQUkscUJBQXFCMTFELE9BQU9pdkIsR0FBRyxLQUFLeW1DLEdBQUksaUJBQWlCbHNELFdBQVd5bEIsR0FBR3psQixTQUFTaStELGNBQ2xWLElBQUlDLEdBQUdoUyxHQUFJLGNBQWMxMUQsU0FBU2l2QixHQUFHTSxHQUFHbW1DLEtBQU12bEMsSUFBSWxCLElBQUksRUFBRUEsSUFBSSxJQUFJQSxJQUFJMDRDLEdBQUc3Z0YsT0FBTzhuQixhQUFhLElBQUlnNUQsR0FBRyxDQUFDQyxZQUFZLENBQUMxUyx3QkFBd0IsQ0FBQ3VNLFFBQVEsZ0JBQWdCQyxTQUFTLHdCQUF3Qm5NLGFBQWEsQ0FBQyxpQkFBaUIsV0FBVyxZQUFZLFVBQVVzUyxlQUFlLENBQUMzUyx3QkFBd0IsQ0FBQ3VNLFFBQVEsbUJBQW1CQyxTQUFTLDJCQUEyQm5NLGFBQWEsdURBQXVEMWdGLE1BQU0sTUFBTWl6RixpQkFBaUIsQ0FBQzVTLHdCQUF3QixDQUFDdU0sUUFBUSxxQkFDN2VDLFNBQVMsNkJBQTZCbk0sYUFBYSx5REFBeUQxZ0YsTUFBTSxNQUFNa3pGLGtCQUFrQixDQUFDN1Msd0JBQXdCLENBQUN1TSxRQUFRLHNCQUFzQkMsU0FBUyw4QkFBOEJuTSxhQUFhLDBEQUEwRDFnRixNQUFNLE9BQU9rNkMsSUFBRyxFQUNoVSxTQUFTWSxHQUFHanRELEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVEsT0FBTyxJQUFJNmtHLEdBQUdyMUYsUUFBUXZQLEVBQUVxbEcsU0FBUyxJQUFLLFVBQVUsT0FBTyxNQUFNcmxHLEVBQUVxbEcsUUFBUSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssT0FBTyxPQUFNLEVBQUcsUUFBUSxPQUFNLEdBQUksU0FBUzF4RSxHQUFHNXpCLEdBQWMsTUFBTSxpQkFBakJBLEVBQUVBLEVBQUV1bEcsU0FBa0MsU0FBU3ZsRyxFQUFFQSxFQUFFa2EsS0FBSyxLQUFLLElBQUlzckYsSUFBRyxFQUUxUSxJQUFJNzRDLEdBQUcsQ0FBQzJsQyxXQUFXMlMsR0FBRzVTLGNBQWMsU0FBU3J5RixFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxJQUFJdUwsRUFBRSxHQUFHc2tELEdBQUd2dEQsRUFBRSxDQUFDLE9BQU9ELEdBQUcsSUFBSyxtQkFBbUIsSUFBSTA4QixFQUFFdW9FLEdBQUdHLGlCQUFpQixNQUFNbmxHLEVBQUUsSUFBSyxpQkFBaUJ5OEIsRUFBRXVvRSxHQUFHRSxlQUFlLE1BQU1sbEcsRUFBRSxJQUFLLG9CQUFvQnk4QixFQUFFdW9FLEdBQUdJLGtCQUFrQixNQUFNcGxHLEVBQUV5OEIsT0FBRSxPQUFZOG9FLEdBQUd2NEMsR0FBR2p0RCxFQUFFdEMsS0FBS2cvQixFQUFFdW9FLEdBQUdFLGdCQUFnQixZQUFZbmxHLEdBQUcsTUFBTXRDLEVBQUU0bkcsVUFBVTVvRSxFQUFFdW9FLEdBQUdHLGtCQUNsTCxPQURvTTFvRSxHQUFHa3dCLElBQUksT0FBT2x2RCxFQUFFMkQsU0FBU21rRyxJQUFJOW9FLElBQUl1b0UsR0FBR0csaUJBQWlCMW9FLElBQUl1b0UsR0FBR0UsZ0JBQWdCSyxLQUFLdDhGLEVBQUVxNkYsT0FBWUYsR0FBRyxVQUFSRCxHQUFHemxHLEdBQWtCeWxHLEdBQUc5a0csTUFBTThrRyxHQUFHcjVELFlBQVl5N0QsSUFBRyxJQUFLOW9FLEVBQUU2dkIsR0FBRzIzQyxVQUFVeG5FLEVBQ3pmejhCLEVBQUV2QyxFQUFFQyxHQUFHdUwsRUFBRXd6QixFQUFFeGlCLEtBQUtoUixFQUFXLFFBQVJBLEVBQUUwcUIsR0FBR2wyQixNQUFjZy9CLEVBQUV4aUIsS0FBS2hSLEdBQUlpNkYsR0FBR3ptRSxHQUFHeHpCLEVBQUV3ekIsR0FBR3h6QixFQUFFLE1BQU1sSixFQUFFK2tHLEdBSHVNLFNBQVkva0csRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssaUJBQWlCLE9BQU80ekIsR0FBRzN6QixHQUFHLElBQUssV0FBVyxPQUFHLEtBQUtBLEVBQUV3bEcsTUFBYSxNQUFLcDVDLElBQUcsRUFBVTI0QyxJQUFHLElBQUssWUFBWSxPQUFPaGxHLEVBQUVDLEVBQUVpYSxRQUFTOHFGLElBQUkzNEMsR0FBRyxLQUFLcnNELEVBQUUsUUFBUSxPQUFPLE1BR2hZMGxHLENBQUcxbEcsRUFBRXRDLEdBRjlFLFNBQVlzQyxFQUFFQyxHQUFHLEdBQUd1bEcsR0FBRyxNQUFNLG1CQUFtQnhsRyxJQUFJd3RELElBQUlQLEdBQUdqdEQsRUFBRUMsSUFBSUQsRUFBRXVqRyxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQUtvQyxJQUFHLEVBQUd4bEcsR0FBRyxLQUFLLE9BQU9BLEdBQUcsSUFBSyxRQUFRLE9BQU8sS0FBSyxJQUFLLFdBQVcsS0FBS0MsRUFBRTBsRyxTQUFTMWxHLEVBQUUybEcsUUFBUTNsRyxFQUFFNGxHLFVBQVU1bEcsRUFBRTBsRyxTQUFTMWxHLEVBQUUybEcsT0FBTyxDQUFDLEdBQUczbEcsRUFBRTRpRixNQUFNLEVBQUU1aUYsRUFBRTRpRixLQUFLeGlGLE9BQU8sT0FBT0osRUFBRTRpRixLQUFLLEdBQUc1aUYsRUFBRXdsRyxNQUFNLE9BQU90aEYsT0FBTzhuQixhQUFhaHNDLEVBQUV3bEcsT0FBTyxPQUFPLEtBQUssSUFBSyxpQkFBaUIsT0FBTzc0QyxJQUFJLE9BQU8zc0QsRUFBRW9CLE9BQU8sS0FBS3BCLEVBQUVpYSxLQUFLLFFBQVEsT0FBTyxNQUVqVDRyRixDQUFHOWxHLEVBQUV0QyxNQUFLdUMsRUFBRTJrRyxHQUFHVixVQUFVZSxHQUFHQyxZQUFZamxHLEVBQUV2QyxFQUFFQyxJQUFLdWMsS0FBS2xhLEVBQUVtakcsR0FBR2xqRyxJQUFJQSxFQUFFLEtBQVksT0FBT2lKLEVBQUVqSixFQUFFLE9BQU9BLEVBQUVpSixFQUFFLENBQUNBLEVBQUVqSixLQUFLeXNELEdBQUcsQ0FBQ3E1QyxPQUFNLEVBQUdoOUYsTUFBSyxFQUFHaTlGLFVBQVMsRUFBRyxrQkFBaUIsRUFBR0MsT0FBTSxFQUFHNTdGLE9BQU0sRUFBRzNELFFBQU8sRUFBR3lyRCxVQUFTLEVBQUcrckIsT0FBTSxFQUFHaEwsUUFBTyxFQUFHZ3pCLEtBQUksRUFBR3o4QyxNQUFLLEVBQUcxaEMsTUFBSyxFQUFHMG9DLEtBQUksRUFBR3RsRCxNQUFLLEdBQUksU0FBUzBoRCxHQUFHN3NELEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRW9nRCxVQUFVcGdELEVBQUVvZ0QsU0FBU3gwQyxjQUFjLE1BQU0sVUFBVTNMLElBQUl5c0QsR0FBRzFzRCxFQUFFdzJCLE1BQU0sYUFBYXYyQixFQUM1YixJQUFJOHNELEdBQUcsQ0FBQ281QyxPQUFPLENBQUMzVCx3QkFBd0IsQ0FBQ3VNLFFBQVEsV0FBV0MsU0FBUyxtQkFBbUJuTSxhQUFhLDhEQUE4RDFnRixNQUFNLE9BQU8sU0FBU3M3QyxHQUFHenRELEVBQUVDLEVBQUV2QyxHQUE4RCxPQUEzRHNDLEVBQUU2dkQsR0FBRXEwQyxVQUFVbjNDLEdBQUdvNUMsT0FBT25tRyxFQUFFQyxFQUFFdkMsSUFBSzg0QixLQUFLLFNBQVM2OEQsRUFBRzMxRixHQUFHeWxHLEdBQUduakcsR0FBVUEsRUFBRSxJQUFJd3NELEdBQUcsS0FBS1UsR0FBRyxLQUFLLFNBQVNULEdBQUd6c0QsR0FBR3k3RixHQUFHejdGLEdBQUcsU0FBU210RCxHQUFHbnRELEdBQWUsR0FBRysyRixHQUFUMEwsR0FBR3ppRyxJQUFZLE9BQU9BLEVBQUUsU0FBU290RCxHQUFHcHRELEVBQUVDLEdBQUcsR0FBRyxXQUFXRCxFQUFFLE9BQU9DLEVBQUUsSUFBSW1tRyxJQUFHLEVBQzlZLFNBQVMvNEMsS0FBS2IsS0FBS0EsR0FBRzY1QyxZQUFZLG1CQUFtQi80QyxJQUFJSixHQUFHVixHQUFHLE1BQU0sU0FBU2MsR0FBR3R0RCxHQUFHLEdBQUcsVUFBVUEsRUFBRXUwRixjQUFjcG5DLEdBQUdELElBQUksR0FBR2x0RCxFQUFFeXRELEdBQUdQLEdBQUdsdEQsRUFBRTA3RixHQUFHMTdGLElBQUkyekYsRUFBRzhILEdBQUd6N0YsT0FBTyxDQUFDMnpGLEdBQUcsRUFBRyxJQUFJSixFQUFHOW1DLEdBQUd6c0QsR0FBRyxRQUFRMnpGLEdBQUcsRUFBR0UsTUFBTyxTQUFTemxDLEdBQUdwdUQsRUFBRUMsRUFBRXZDLEdBQUcsVUFBVXNDLEdBQUdxdEQsS0FBVUgsR0FBR3h2RCxHQUFSOHVELEdBQUd2c0QsR0FBVXFtRyxZQUFZLG1CQUFtQmg1QyxLQUFLLFNBQVN0dEQsR0FBR3F0RCxLQUFLLFNBQVNLLEdBQUcxdEQsR0FBRyxHQUFHLG9CQUFvQkEsR0FBRyxVQUFVQSxHQUFHLFlBQVlBLEVBQUUsT0FBT210RCxHQUFHRCxJQUFJLFNBQVNxQixHQUFHdnVELEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxFQUFFLE9BQU9tdEQsR0FBR2x0RCxHQUFHLFNBQVNxdUQsR0FBR3R1RCxFQUFFQyxHQUFHLEdBQUcsVUFBVUQsR0FBRyxXQUFXQSxFQUFFLE9BQU9tdEQsR0FBR2x0RCxHQUQvRTh5RixJQUFLcVQsR0FBR3ZLLEdBQUcsWUFBWWgxRCxTQUFTaStELGNBQWMsRUFBRWorRCxTQUFTaStELGVBRTFjLElBQUl6MkMsR0FBRyxDQUFDaWtDLFdBQVd2bEMsR0FBR3c1Qyx1QkFBdUJILEdBQUcvVCxjQUFjLFNBQVNyeUYsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsSUFBSXVMLEVBQUVqSixFQUFFd2lHLEdBQUd4aUcsR0FBR285QixPQUFPWCxFQUFFeHpCLEVBQUVrM0MsVUFBVWwzQyxFQUFFazNDLFNBQVN4MEMsY0FBYyxHQUFHLFdBQVc4d0IsR0FBRyxVQUFVQSxHQUFHLFNBQVN4ekIsRUFBRXN0QixLQUFLLElBQUluQyxFQUFFKzRCLFFBQVEsR0FBR1AsR0FBRzNqRCxHQUFHLEdBQUdrOUYsR0FBRy94RSxFQUFFaTZCLE9BQU8sQ0FBQ2o2QixFQUFFcTVCLEdBQUcsSUFBSS9qRCxFQUFFeWtELFFBQVExeEIsRUFBRXh6QixFQUFFazNDLFdBQVcsVUFBVTFqQixFQUFFOXdCLGdCQUFnQixhQUFhMUMsRUFBRXN0QixNQUFNLFVBQVV0dEIsRUFBRXN0QixRQUFRbkMsRUFBRWs2QixJQUFJLEdBQUdsNkIsSUFBSUEsRUFBRUEsRUFBRXIwQixFQUFFQyxJQUFJLE9BQU93dEQsR0FBR3A1QixFQUFFMzJCLEVBQUVDLEdBQUdnTSxHQUFHQSxFQUFFM0osRUFBRWtKLEVBQUVqSixHQUFHLFNBQVNELElBQUlBLEVBQUVrSixFQUFFaXVGLGdCQUFnQm4zRixFQUFFdTNGLFlBQVksV0FBV3J1RixFQUFFc3RCLE1BQU1raEUsR0FBR3h1RixFQUFFLFNBQVNBLEVBQUU1SyxTQUFTa29HLEdBQUczMkMsR0FBRTV1RCxPQUFPLENBQUN3bEcsS0FBSyxLQUFLbEIsT0FBTyxPQUNyZnY0QyxHQUFHLENBQUMwNUMsSUFBSSxTQUFTQyxRQUFRLFVBQVVDLEtBQUssVUFBVUMsTUFBTSxZQUFZLFNBQVMxNEMsR0FBR251RCxHQUFHLElBQUlDLEVBQUUwRCxLQUFLczRGLFlBQVksT0FBT2g4RixFQUFFNm1HLGlCQUFpQjdtRyxFQUFFNm1HLGlCQUFpQjltRyxNQUFJQSxFQUFFZ3RELEdBQUdodEQsT0FBTUMsRUFBRUQsR0FBTSxTQUFTaXVELEtBQUssT0FBT0UsR0FDbk0sSUFBSVIsR0FBRyxFQUFFbzVDLEdBQUcsRUFBRW41QyxJQUFHLEVBQUdDLElBQUcsRUFBR0MsR0FBRzA0QyxHQUFHdmxHLE9BQU8sQ0FBQytsRyxRQUFRLEtBQUtDLFFBQVEsS0FBS0MsUUFBUSxLQUFLQyxRQUFRLEtBQUtDLE1BQU0sS0FBS0MsTUFBTSxLQUFLMUIsUUFBUSxLQUFLMkIsU0FBUyxLQUFLMUIsT0FBTyxLQUFLQyxRQUFRLEtBQUtpQixpQkFBaUI3NEMsR0FBR3M1QyxPQUFPLEtBQUtDLFFBQVEsS0FBS0MsY0FBYyxTQUFTem5HLEdBQUcsT0FBT0EsRUFBRXluRyxnQkFBZ0J6bkcsRUFBRTBuRyxjQUFjMW5HLEVBQUUyN0YsV0FBVzM3RixFQUFFcW1DLFVBQVVybUMsRUFBRTBuRyxjQUFjQyxVQUFVLFNBQVMzbkcsR0FBRyxHQUFHLGNBQWNBLEVBQUUsT0FBT0EsRUFBRTJuRyxVQUFVLElBQUkxbkcsRUFBRTB0RCxHQUFnQixPQUFiQSxHQUFHM3RELEVBQUVnbkcsUUFBZXA1QyxHQUFHLGNBQWM1dEQsRUFBRXcyQixLQUFLeDJCLEVBQUVnbkcsUUFBUS9tRyxFQUFFLEdBQUcydEQsSUFBRyxFQUFHLElBQUlnNkMsVUFBVSxTQUFTNW5HLEdBQUcsR0FBRyxjQUFjQSxFQUFFLE9BQU9BLEVBQUU0bkcsVUFDM2YsSUFBSTNuRyxFQUFFOG1HLEdBQWdCLE9BQWJBLEdBQUcvbUcsRUFBRWluRyxRQUFlcDVDLEdBQUcsY0FBYzd0RCxFQUFFdzJCLEtBQUt4MkIsRUFBRWluRyxRQUFRaG5HLEVBQUUsR0FBRzR0RCxJQUFHLEVBQUcsTUFBTWc2QyxHQUFHLzVDLEdBQUc3c0QsT0FBTyxDQUFDMjhGLFVBQVUsS0FBS2tLLE1BQU0sS0FBS0MsT0FBTyxLQUFLQyxTQUFTLEtBQUtDLG1CQUFtQixLQUFLQyxNQUFNLEtBQUtDLE1BQU0sS0FBS0MsTUFBTSxLQUFLQyxZQUFZLEtBQUtDLFVBQVUsT0FBT3Y2QyxHQUFHLENBQUN3NkMsV0FBVyxDQUFDN1YsaUJBQWlCLGVBQWVHLGFBQWEsQ0FBQyxXQUFXLGNBQWMyVixXQUFXLENBQUM5VixpQkFBaUIsZUFBZUcsYUFBYSxDQUFDLFdBQVcsY0FBYzRWLGFBQWEsQ0FBQy9WLGlCQUFpQixpQkFBaUJHLGFBQWEsQ0FBQyxhQUFhLGdCQUFnQjZWLGFBQWEsQ0FBQ2hXLGlCQUFpQixpQkFDamhCRyxhQUFhLENBQUMsYUFBYSxpQkFBaUI3a0MsR0FBRyxDQUFDc2tDLFdBQVd2a0MsR0FBR3NrQyxjQUFjLFNBQVNyeUYsRUFBRUMsRUFBRXZDLEVBQUVDLEVBQUV1TCxHQUFHLElBQUl3ekIsRUFBRSxjQUFjMThCLEdBQUcsZ0JBQWdCQSxFQUFFcTBCLEVBQUUsYUFBYXIwQixHQUFHLGVBQWVBLEVBQUUsR0FBRzA4QixHQUFHLElBQU8sR0FBRnh6QixLQUFReEwsRUFBRStwRyxlQUFlL3BHLEVBQUVncUcsZUFBZXJ6RSxJQUFJcUksRUFBRSxPQUFPLE1BQUtBLEVBQUUvK0IsRUFBRTAvQixTQUFTMS9CLEVBQUVBLEdBQUcrK0IsRUFBRS8rQixFQUFFaW1DLGVBQWVsSCxFQUFFaXNFLGFBQWFqc0UsRUFBRWtzRSxhQUFhdnJFLE9BQVVoSixJQUFNQSxFQUFFcDBCLEVBQWdELFFBQTlDQSxHQUFHQSxFQUFFdkMsRUFBRStwRyxlQUFlL3BHLEVBQUUyb0MsV0FBV20yRCxHQUFHdjhGLEdBQUcsUUFBOEJBLElBQVRxNkYsR0FBR3I2RixJQUFhLElBQUlBLEVBQUV3akMsS0FBSyxJQUFJeGpDLEVBQUV3akMsT0FBSXhqQyxFQUFFLE9BQVdvMEIsRUFBRSxLQUFLLEdBQUdBLElBQUlwMEIsRUFBRSxPQUFPLEtBQUssR0FBRyxhQUFhRCxHQUFHLGNBQ3plQSxFQUFHLElBQUlNLEVBQUV3dEQsR0FBT3h3RCxFQUFFeXdELEdBQUd5NkMsV0FBZS9xRyxFQUFFc3dELEdBQUd3NkMsV0FBZXBwRyxFQUFFLFlBQWdCLGVBQWVhLEdBQUcsZ0JBQWdCQSxJQUFFTSxFQUFFdW5HLEdBQUd2cUcsRUFBRXl3RCxHQUFHMjZDLGFBQWFqckcsRUFBRXN3RCxHQUFHMDZDLGFBQWF0cEcsRUFBRSxXQUFnTSxHQUF0TGEsRUFBRSxNQUFNcTBCLEVBQUVxSSxFQUFFK2xFLEdBQUdwdUUsR0FBR3FJLEVBQUUsTUFBTXo4QixFQUFFeThCLEVBQUUrbEUsR0FBR3hpRyxJQUFHM0MsRUFBRWdELEVBQUU0akcsVUFBVTVtRyxFQUFFKzJCLEVBQUUzMkIsRUFBRUMsSUFBSzY0QixLQUFLcjNCLEVBQUUsUUFBUTdCLEVBQUU4MUIsT0FBT3B6QixFQUFFMUMsRUFBRW1xRyxjQUFjL3FFLEdBQUVoL0IsRUFBRTRDLEVBQUU0akcsVUFBVXptRyxFQUFFd0MsRUFBRXZDLEVBQUVDLElBQUs2NEIsS0FBS3IzQixFQUFFLFFBQVF6QixFQUFFMDFCLE9BQU9zSixFQUFFaC9CLEVBQUUrcEcsY0FBY3puRyxFQUFNYixFQUFFYyxHQUFOdEMsRUFBRTAyQixJQUFZbDFCLEVBQUVhLEVBQUUsQ0FBYSxJQUFSdkMsRUFBRTBCLEVBQUVrMUIsRUFBRSxFQUFNcjBCLEVBQWhCTSxFQUFFM0MsRUFBa0JxQyxFQUFFQSxFQUFFMmlHLEdBQUczaUcsR0FBR3EwQixJQUFRLElBQUpyMEIsRUFBRSxFQUFNQyxFQUFFeEMsRUFBRXdDLEVBQUVBLEVBQUUwaUcsR0FBRzFpRyxHQUFHRCxJQUFJLEtBQUssRUFBRXEwQixFQUFFcjBCLEdBQUdNLEVBQUVxaUcsR0FBR3JpRyxHQUFHK3pCLElBQUksS0FBSyxFQUFFcjBCLEVBQUVxMEIsR0FBRzUyQixFQUFFa2xHLEdBQUdsbEcsR0FBR3VDLElBQUksS0FBS3EwQixLQUFLLENBQUMsR0FBRy96QixJQUFJN0MsR0FBRzZDLElBQUk3QyxFQUFFODhGLFVBQVUsTUFBTXY2RixFQUMzZk0sRUFBRXFpRyxHQUFHcmlHLEdBQUc3QyxFQUFFa2xHLEdBQUdsbEcsR0FBRzZDLEVBQUUsVUFBVUEsRUFBRSxLQUFTLElBQUo3QyxFQUFFNkMsRUFBTUEsRUFBRSxHQUFHM0MsR0FBR0EsSUFBSUYsSUFBcUIsUUFBakI0MkIsRUFBRTEyQixFQUFFNDhGLFlBQXVCbG1FLElBQUk1MkIsSUFBUTZDLEVBQUVVLEtBQUtyRCxHQUFHQSxFQUFFZ2xHLEdBQUdobEcsR0FBRyxJQUFJQSxFQUFFLEdBQUd3QixHQUFHQSxJQUFJMUIsSUFBcUIsUUFBakI0MkIsRUFBRWwxQixFQUFFbzdGLFlBQXVCbG1FLElBQUk1MkIsSUFBUUUsRUFBRXFELEtBQUs3QixHQUFHQSxFQUFFd2pHLEdBQUd4akcsR0FBRyxJQUFJQSxFQUFFLEVBQUVBLEVBQUVtQixFQUFFRCxPQUFPbEIsSUFBSThqRyxHQUFHM2lHLEVBQUVuQixHQUFHLFVBQVU3QixHQUFHLElBQUk2QixFQUFFeEIsRUFBRTBDLE9BQU8sRUFBRWxCLEtBQUs4akcsR0FBR3RsRyxFQUFFd0IsR0FBRyxXQUFXekIsR0FBRyxPQUFPLElBQU8sR0FBRndMLEdBQU0sQ0FBQzVMLEdBQUcsQ0FBQ0EsRUFBRUksS0FBcUUsSUFBSW92RCxHQUFHLG1CQUFvQi91RCxPQUFPeW1GLEdBQUd6bUYsT0FBT3ltRixHQUE1RyxTQUFZeGtGLEVBQUVDLEdBQUcsT0FBT0QsSUFBSUMsSUFBSSxJQUFJRCxHQUFHLEVBQUVBLEdBQUksRUFBRUMsSUFBSUQsR0FBSUEsR0FBR0MsR0FBSUEsR0FBb0Q0b0csR0FBRzlxRyxPQUFPa0IsVUFBVUMsZUFDN2IsU0FBUzRwRyxHQUFHOW9HLEVBQUVDLEdBQUcsR0FBRzZzRCxHQUFHOXNELEVBQUVDLEdBQUcsT0FBTSxFQUFHLEdBQUcsaUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsaUJBQWtCQyxHQUFHLE9BQU9BLEVBQUUsT0FBTSxFQUFHLElBQUl2QyxFQUFFSyxPQUFPZ0ksS0FBSy9GLEdBQUdyQyxFQUFFSSxPQUFPZ0ksS0FBSzlGLEdBQUcsR0FBR3ZDLEVBQUUyQyxTQUFTMUMsRUFBRTBDLE9BQU8sT0FBTSxFQUFHLElBQUkxQyxFQUFFLEVBQUVBLEVBQUVELEVBQUUyQyxPQUFPMUMsSUFBSSxJQUFJa3JHLEdBQUdyckcsS0FBS3lDLEVBQUV2QyxFQUFFQyxNQUFNbXZELEdBQUc5c0QsRUFBRXRDLEVBQUVDLElBQUlzQyxFQUFFdkMsRUFBRUMsS0FBSyxPQUFNLEVBQUcsT0FBTSxFQUNwUSxJQUFJb3JHLEdBQUdoVyxHQUFJLGlCQUFpQmxzRCxVQUFVLElBQUlBLFNBQVNpK0QsYUFBYWtFLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDelcsd0JBQXdCLENBQUN1TSxRQUFRLFdBQVdDLFNBQVMsbUJBQW1Cbk0sYUFBYSxpRkFBaUYxZ0YsTUFBTSxPQUFPKzJGLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLElBQUcsRUFDMVIsU0FBU0MsR0FBR3RwRyxFQUFFQyxHQUFHLElBQUl2QyxFQUFFdUMsRUFBRW85QixTQUFTcDlCLEVBQUVBLEVBQUU0bUMsU0FBUyxJQUFJNW1DLEVBQUVpNUYsU0FBU2o1RixFQUFFQSxFQUFFMmpDLGNBQWMsT0FBR3lsRSxJQUFJLE1BQU1ILElBQUlBLEtBQUtoSSxHQUFHeGpHLEdBQVUsTUFBVSxtQkFBTEEsRUFBRXdyRyxLQUF5QnpILEdBQUcvakcsR0FBR0EsRUFBRSxDQUFDaXJELE1BQU1qckQsRUFBRTZyRyxlQUFlM2hFLElBQUlscUMsRUFBRThyRyxjQUF1RjlyRyxFQUFFLENBQUMrckcsWUFBM0UvckcsR0FBR0EsRUFBRWttQyxlQUFlbG1DLEVBQUVrbUMsY0FBYytrRSxhQUFhdHJFLFFBQVFxc0UsZ0JBQStCRCxXQUFXRSxhQUFhanNHLEVBQUVpc0csYUFBYUMsVUFBVWxzRyxFQUFFa3NHLFVBQVVDLFlBQVluc0csRUFBRW1zRyxhQUFxQlQsSUFBSU4sR0FBR00sR0FBRzFyRyxHQUFHLE1BQU0wckcsR0FBRzFyRyxHQUFFc0MsRUFBRTZ2RCxHQUFFcTBDLFVBQVU4RSxHQUFHQyxPQUFPRSxHQUFHbnBHLEVBQUVDLElBQUt1MkIsS0FBSyxTQUFTeDJCLEVBQUVvekIsT0FBTzgxRSxHQUFHL0YsR0FBR25qRyxHQUFHQSxJQUMxZCxJQUFJOHBHLEdBQUcsQ0FBQ3hYLFdBQVcwVyxHQUFHM1csY0FBYyxTQUFTcnlGLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsRUFBRXd6QixHQUFtRSxLQUFLQSxJQUFyRXh6QixFQUFFd3pCLElBQUkvK0IsRUFBRTAvQixTQUFTMS9CLEVBQUVBLEVBQUVrcEMsU0FBUyxJQUFJbHBDLEVBQUV1N0YsU0FBU3Y3RixFQUFFQSxFQUFFaW1DLGlCQUEwQixDQUFDNWpDLEVBQUUsQ0FBQ2tKLEVBQUVteEYsR0FBR254RixHQUFHd3pCLEVBQUVrMkQsRUFBR21YLFNBQVMsSUFBSSxJQUFJMTFFLEVBQUUsRUFBRUEsRUFBRXFJLEVBQUVyOEIsT0FBT2cwQixJQUFJLElBQUluckIsRUFBRStyQyxJQUFJdlksRUFBRXJJLElBQUksQ0FBQ25yQixHQUFFLEVBQUcsTUFBTWxKLEVBQUVrSixHQUFFLEVBQUd3ekIsR0FBR3h6QixFQUFFLEdBQUd3ekIsRUFBRSxPQUFPLEtBQXNCLE9BQWpCeHpCLEVBQUVqSixFQUFFd2lHLEdBQUd4aUcsR0FBR285QixPQUFjcjlCLEdBQUcsSUFBSyxTQUFXNnNELEdBQUczakQsSUFBSSxTQUFTQSxFQUFFdzRGLG1CQUFnQndILEdBQUdoZ0csRUFBRWlnRyxHQUFHbHBHLEVBQUVtcEcsR0FBRyxNQUFLLE1BQU0sSUFBSyxPQUFPQSxHQUFHRCxHQUFHRCxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVlHLElBQUcsRUFBRyxNQUFNLElBQUssY0FBYyxJQUFLLFVBQVUsSUFBSyxVQUFVLE9BQU9BLElBQUcsRUFBR0MsR0FBRzVyRyxFQUFFQyxHQUFHLElBQUssa0JBQWtCLEdBQUdvckcsR0FBRyxNQUN4ZixJQUFLLFVBQVUsSUFBSyxRQUFRLE9BQU9PLEdBQUc1ckcsRUFBRUMsR0FBRyxPQUFPLE9BQU9xc0csR0FBR242QyxHQUFFNXVELE9BQU8sQ0FBQ2dwRyxjQUFjLEtBQUtDLFlBQVksS0FBS0MsY0FBYyxPQUFPQyxHQUFHdjZDLEdBQUU1dUQsT0FBTyxDQUFDb3BHLGNBQWMsU0FBU3JxRyxHQUFHLE1BQU0sa0JBQWtCQSxFQUFFQSxFQUFFcXFHLGNBQWNodEUsT0FBT2d0RSxpQkFBaUJDLEdBQUc5RCxHQUFHdmxHLE9BQU8sQ0FBQ3dtRyxjQUFjLE9BQU8sU0FBUzhDLEdBQUd2cUcsR0FBRyxJQUFJQyxFQUFFRCxFQUFFc2xHLFFBQStFLE1BQXZFLGFBQWF0bEcsRUFBZ0IsS0FBYkEsRUFBRUEsRUFBRXdxRyxXQUFnQixLQUFLdnFHLElBQUlELEVBQUUsSUFBS0EsRUFBRUMsRUFBRSxLQUFLRCxJQUFJQSxFQUFFLElBQVcsSUFBSUEsR0FBRyxLQUFLQSxFQUFFQSxFQUFFLEVBQ3hZLElBQUl5cUcsR0FBRyxDQUFDQyxJQUFJLFNBQVNDLFNBQVMsSUFBSUMsS0FBSyxZQUFZQyxHQUFHLFVBQVVDLE1BQU0sYUFBYUMsS0FBSyxZQUFZQyxJQUFJLFNBQVNDLElBQUksS0FBS0MsS0FBSyxjQUFjQyxLQUFLLGNBQWNDLE9BQU8sYUFBYUMsZ0JBQWdCLGdCQUFnQkMsR0FBRyxDQUFDenBELEVBQUUsWUFBWUMsRUFBRSxNQUFNRSxHQUFHLFFBQVFDLEdBQUcsUUFBUXNwRCxHQUFHLFFBQVFDLEdBQUcsVUFBVUMsR0FBRyxNQUFNQyxHQUFHLFFBQVF0ekMsR0FBRyxXQUFXdXpDLEdBQUcsU0FBU0MsR0FBRyxJQUFJQyxHQUFHLFNBQVNDLEdBQUcsV0FBV0MsR0FBRyxNQUFNQyxHQUFHLE9BQU9DLEdBQUcsWUFBWUMsR0FBRyxVQUFVQyxHQUFHLGFBQWFoeEMsR0FBRyxZQUFZaXhDLEdBQUcsU0FBU0MsR0FBRyxTQUFTQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQ2hmQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxNQUFNQyxJQUFJLE1BQU1DLElBQUksTUFBTUMsSUFBSSxVQUFVQyxJQUFJLGFBQWFDLElBQUksUUFBUUMsR0FBRzdHLEdBQUd2bEcsT0FBTyxDQUFDckMsSUFBSSxTQUFTb0IsR0FBRyxHQUFHQSxFQUFFcEIsSUFBSSxDQUFDLElBQUlxQixFQUFFd3FHLEdBQUd6cUcsRUFBRXBCLE1BQU1vQixFQUFFcEIsSUFBSSxHQUFHLGlCQUFpQnFCLEVBQUUsT0FBT0EsRUFBRSxNQUFNLGFBQWFELEVBQUV3MkIsS0FBYyxNQUFSeDJCLEVBQUV1cUcsR0FBR3ZxRyxJQUFVLFFBQVFta0IsT0FBTzhuQixhQUFhanNDLEdBQUksWUFBWUEsRUFBRXcyQixNQUFNLFVBQVV4MkIsRUFBRXcyQixLQUFLODBFLEdBQUd0ckcsRUFBRXNsRyxVQUFVLGVBQWUsSUFBSWp5QixTQUFTLEtBQUtzeUIsUUFBUSxLQUFLMkIsU0FBUyxLQUFLMUIsT0FBTyxLQUFLQyxRQUFRLEtBQUsveEIsT0FBTyxLQUFLenlFLE9BQU8sS0FBS3lsRyxpQkFBaUI3NEMsR0FBR3U4QyxTQUFTLFNBQVN4cUcsR0FBRyxNQUFNLGFBQzllQSxFQUFFdzJCLEtBQUsrekUsR0FBR3ZxRyxHQUFHLEdBQUdzbEcsUUFBUSxTQUFTdGxHLEdBQUcsTUFBTSxZQUFZQSxFQUFFdzJCLE1BQU0sVUFBVXgyQixFQUFFdzJCLEtBQUt4MkIsRUFBRXNsRyxRQUFRLEdBQUdHLE1BQU0sU0FBU3psRyxHQUFHLE1BQU0sYUFBYUEsRUFBRXcyQixLQUFLK3pFLEdBQUd2cUcsR0FBRyxZQUFZQSxFQUFFdzJCLE1BQU0sVUFBVXgyQixFQUFFdzJCLEtBQUt4MkIsRUFBRXNsRyxRQUFRLEtBQUtnSSxHQUFHeC9DLEdBQUc3c0QsT0FBTyxDQUFDc3NHLGFBQWEsT0FBT0MsR0FBR2hILEdBQUd2bEcsT0FBTyxDQUFDd3NHLFFBQVEsS0FBS0MsY0FBYyxLQUFLQyxlQUFlLEtBQUsvSCxPQUFPLEtBQUtDLFFBQVEsS0FBS0YsUUFBUSxLQUFLMkIsU0FBUyxLQUFLUixpQkFBaUI3NEMsS0FBSzIvQyxHQUFHLzlDLEdBQUU1dUQsT0FBTyxDQUFDc3pGLGFBQWEsS0FBSzJWLFlBQVksS0FBS0MsY0FBYyxPQUFPMEQsR0FBRy8vQyxHQUFHN3NELE9BQU8sQ0FBQzZzRyxPQUFPLFNBQVM5dEcsR0FBRyxNQUFNLFdBQVdBLEVBQUVBLEVBQUU4dEcsT0FBTyxnQkFDbGY5dEcsR0FBR0EsRUFBRSt0RyxZQUFZLEdBQUdDLE9BQU8sU0FBU2h1RyxHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRWd1RyxPQUFPLGdCQUFnQmh1RyxHQUFHQSxFQUFFaXVHLFlBQVksZUFBZWp1RyxHQUFHQSxFQUFFa3VHLFdBQVcsR0FBR0MsT0FBTyxLQUFLQyxVQUFVLE9BQU9DLEdBQUcsQ0FBQy9iLFdBQVdvTSxHQUFHck0sY0FBYyxTQUFTcnlGLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFHLElBQUl1TCxFQUFFeTFGLEdBQUd6Z0csSUFBSThCLEdBQUcsSUFBSWtKLEVBQUUsT0FBTyxLQUFLLE9BQU9sSixHQUFHLElBQUssV0FBVyxHQUFHLElBQUl1cUcsR0FBRzdzRyxHQUFHLE9BQU8sS0FBSyxJQUFLLFVBQVUsSUFBSyxRQUFRc0MsRUFBRXF0RyxHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssUUFBUXJ0RyxFQUFFc3FHLEdBQUcsTUFBTSxJQUFLLFFBQVEsR0FBRyxJQUFJNXNHLEVBQUU2cEcsT0FBTyxPQUFPLEtBQUssSUFBSyxXQUFXLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxZQUFZLElBQUssVUFBVSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssY0FBY3ZuRyxFQUNuaUI4dEQsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFVBQVUsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLE9BQU85dEQsRUFBRXN0RyxHQUFHLE1BQU0sSUFBSyxjQUFjLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxhQUFhdHRHLEVBQUV3dEcsR0FBRyxNQUFNLEtBQUt6VCxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBR2o2RixFQUFFZ3FHLEdBQUcsTUFBTSxLQUFLOVAsR0FBR2w2RixFQUFFNHRHLEdBQUcsTUFBTSxJQUFLLFNBQVM1dEcsRUFBRXdtRyxHQUFHLE1BQU0sSUFBSyxRQUFReG1HLEVBQUU2dEcsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLE1BQU0sSUFBSyxRQUFRN3RHLEVBQUVvcUcsR0FBRyxNQUFNLElBQUssb0JBQW9CLElBQUsscUJBQXFCLElBQUssZ0JBQWdCLElBQUssY0FBYyxJQUFLLGNBQWMsSUFBSyxhQUFhLElBQUssY0FBYyxJQUFLLFlBQVlwcUcsRUFDemhCNm5HLEdBQUcsTUFBTSxRQUFRN25HLEVBQUU2dkQsR0FBK0IsT0FBTnN6QyxHQUF2QmxqRyxFQUFFRCxFQUFFa2tHLFVBQVVoN0YsRUFBRWpKLEVBQUV2QyxFQUFFQyxJQUFnQnNDLElBQUksR0FBR2d5RixFQUFHLE1BQU1wc0YsTUFBTStqQixFQUFFLE1BQU1xb0UsRUFBR3J5RixNQUFNWCxVQUFVMEcsTUFBTW5JLEtBQUssMEhBQTBIMlUsTUFBTSxNQUFNZ2dGLElBQWVSLEVBQUcrUSxHQUFHOVEsRUFBVGtNLEdBQWVqTSxFQUFHNFEsR0FBRzNQLEVBQUcsQ0FBQ3diLGtCQUFrQkQsR0FBR0Usc0JBQXNCdmdELEdBQUd3Z0Qsa0JBQWtCbmdELEdBQUdvZ0Qsa0JBQWtCM0UsR0FBRzRFLHVCQUF1Qi9oRCxLQUFLLElBQUlnaUQsR0FBRyxHQUFHQyxJQUFJLEVBQUUsU0FBU3BrQyxHQUFFeHFFLEdBQUcsRUFBRTR1RyxLQUFLNXVHLEVBQUU0cUUsUUFBUStqQyxHQUFHQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtBLE1BQ3RkLFNBQVM5aUQsR0FBRTlyRCxFQUFFQyxHQUFHMnVHLEtBQUtELEdBQUdDLElBQUk1dUcsRUFBRTRxRSxRQUFRNXFFLEVBQUU0cUUsUUFBUTNxRSxFQUFFLElBQUk0dUcsR0FBRyxHQUFHOWlELEdBQUUsQ0FBQzZlLFFBQVFpa0MsSUFBSWhrQyxHQUFFLENBQUNELFNBQVEsR0FBSWtrQyxHQUFHRCxHQUFHLFNBQVNFLEdBQUcvdUcsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRXNDLEVBQUV3MkIsS0FBS2dYLGFBQWEsSUFBSTl2QyxFQUFFLE9BQU9teEcsR0FBRyxJQUFJbHhHLEVBQUVxQyxFQUFFb3pGLFVBQVUsR0FBR3oxRixHQUFHQSxFQUFFcXhHLDhDQUE4Qy91RyxFQUFFLE9BQU90QyxFQUFFc3hHLDBDQUEwQyxJQUFTdnlFLEVBQUx4ekIsRUFBRSxHQUFLLElBQUl3ekIsS0FBS2gvQixFQUFFd0wsRUFBRXd6QixHQUFHejhCLEVBQUV5OEIsR0FBb0gsT0FBakgvK0IsS0FBSXFDLEVBQUVBLEVBQUVvekYsV0FBWTRiLDRDQUE0Qy91RyxFQUFFRCxFQUFFaXZHLDBDQUEwQy9sRyxHQUFVQSxFQUFFLFNBQVNtUCxHQUFFclksR0FBeUIsT0FBTyxPQUE3QkEsRUFBRUEsRUFBRXV0QyxtQkFDcGMsU0FBUzJoRSxLQUFLMWtDLEdBQUVLLElBQUdMLEdBQUV6ZSxJQUFHLFNBQVNvakQsR0FBR252RyxFQUFFQyxFQUFFdkMsR0FBRyxHQUFHcXVELEdBQUU2ZSxVQUFVaWtDLEdBQUcsTUFBTWhwRyxNQUFNK2pCLEVBQUUsTUFBTWtpQyxHQUFFQyxHQUFFOXJELEdBQUc2ckQsR0FBRStlLEdBQUVudEUsR0FBRyxTQUFTMHhHLEdBQUdwdkcsRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRXFDLEVBQUVvekYsVUFBZ0MsR0FBdEJwekYsRUFBRUMsRUFBRXN0QyxrQkFBcUIsbUJBQW9CNXZDLEVBQUUweEcsZ0JBQWdCLE9BQU8zeEcsRUFBd0IsSUFBSSxJQUFJd0wsS0FBOUJ2TCxFQUFFQSxFQUFFMHhHLGtCQUFpQyxLQUFLbm1HLEtBQUtsSixHQUFHLE1BQU02RixNQUFNK2pCLEVBQUUsSUFBSXVzRSxHQUFHbDJGLElBQUksVUFBVWlKLElBQUksT0FBT3BLLEVBQUUsR0FBR3BCLEVBQUUsR0FBR0MsR0FBRyxTQUFTMnhHLEdBQUd0dkcsR0FBeUcsT0FBdEdBLEdBQUdBLEVBQUVBLEVBQUVvekYsWUFBWXB6RixFQUFFdXZHLDJDQUEyQ1YsR0FBR0MsR0FBRy9pRCxHQUFFNmUsUUFBUTllLEdBQUVDLEdBQUUvckQsR0FBRzhyRCxHQUFFK2UsR0FBRUEsR0FBRUQsVUFBZSxFQUNwYixTQUFTNGtDLEdBQUd4dkcsRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRXFDLEVBQUVvekYsVUFBVSxJQUFJejFGLEVBQUUsTUFBTWtJLE1BQU0rakIsRUFBRSxNQUFNbHNCLEdBQUdzQyxFQUFFb3ZHLEdBQUdwdkcsRUFBRUMsRUFBRTZ1RyxJQUFJbnhHLEVBQUU0eEcsMENBQTBDdnZHLEVBQUV3cUUsR0FBRUssSUFBR0wsR0FBRXplLElBQUdELEdBQUVDLEdBQUUvckQsSUFBSXdxRSxHQUFFSyxJQUFHL2UsR0FBRStlLEdBQUVudEUsR0FDeEosSUFBSSt4RyxHQUFHdHhHLEVBQUU2L0YseUJBQXlCMFIsR0FBR3Z4RyxFQUFFb2dHLDBCQUEwQm9SLEdBQUd4eEcsRUFBRXl4Ryx3QkFBd0JDLEdBQUcxeEcsRUFBRTJ4RyxzQkFBc0JDLEdBQUc1eEcsRUFBRTZ4RyxhQUFhQyxHQUFHOXhHLEVBQUUreEcsaUNBQWlDNXdCLEdBQUduaEYsRUFBRWd5RywyQkFBMkJDLEdBQUdqeUcsRUFBRWloRyw4QkFBOEJpUixHQUFHbHlHLEVBQUVxZ0csd0JBQXdCOFIsR0FBR255RyxFQUFFb3lHLHFCQUFxQkMsR0FBR3J5RyxFQUFFc3lHLHNCQUFzQkMsR0FBRyxHQUFHQyxHQUFHeHlHLEVBQUV5eUcscUJBQXFCQyxRQUFHLElBQVNoQixHQUFHQSxHQUFHLGFBQWFpQixHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxHQUFHbEIsS0FBS21CLEdBQUcsSUFBSUQsR0FBR2xCLEdBQUcsV0FBVyxPQUFPQSxLQUFLa0IsSUFDdmMsU0FBU0UsS0FBSyxPQUFPbEIsTUFBTSxLQUFLM3dCLEdBQUcsT0FBTyxHQUFHLEtBQUs4d0IsR0FBRyxPQUFPLEdBQUcsS0FBS0MsR0FBRyxPQUFPLEdBQUcsS0FBS0MsR0FBRyxPQUFPLEdBQUcsS0FBS0UsR0FBRyxPQUFPLEdBQUcsUUFBUSxNQUFNM3FHLE1BQU0rakIsRUFBRSxPQUFRLFNBQVN3bkYsR0FBR3B4RyxHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLE9BQU9zL0UsR0FBRyxLQUFLLEdBQUcsT0FBTzh3QixHQUFHLEtBQUssR0FBRyxPQUFPQyxHQUFHLEtBQUssR0FBRyxPQUFPQyxHQUFHLEtBQUssR0FBRyxPQUFPRSxHQUFHLFFBQVEsTUFBTTNxRyxNQUFNK2pCLEVBQUUsT0FBUSxTQUFTeW5GLEdBQUdyeEcsRUFBRUMsR0FBVyxPQUFSRCxFQUFFb3hHLEdBQUdweEcsR0FBVXl2RyxHQUFHenZHLEVBQUVDLEdBQUcsU0FBU3F4RyxHQUFHdHhHLEVBQUVDLEVBQUV2QyxHQUFXLE9BQVJzQyxFQUFFb3hHLEdBQUdweEcsR0FBVTB2RyxHQUFHMXZHLEVBQUVDLEVBQUV2QyxHQUFHLFNBQVM2ekcsR0FBR3Z4RyxHQUE4QyxPQUEzQyxPQUFPOHdHLElBQUlBLEdBQUcsQ0FBQzl3RyxHQUFHK3dHLEdBQUdyQixHQUFHcHdCLEdBQUdreUIsS0FBS1YsR0FBRzl2RyxLQUFLaEIsR0FBVTB3RyxHQUFHLFNBQVMvbEcsS0FBSyxHQUFHLE9BQU9vbUcsR0FBRyxDQUFDLElBQUkvd0csRUFBRSt3RyxHQUFHQSxHQUFHLEtBQUtwQixHQUFHM3ZHLEdBQUd3eEcsS0FDL2UsU0FBU0EsS0FBSyxJQUFJUixJQUFJLE9BQU9GLEdBQUcsQ0FBQ0UsSUFBRyxFQUFHLElBQUloeEcsRUFBRSxFQUFFLElBQUksSUFBSUMsRUFBRTZ3RyxHQUFHTyxHQUFHLElBQUcsV0FBVyxLQUFLcnhHLEVBQUVDLEVBQUVJLE9BQU9MLElBQUksQ0FBQyxJQUFJdEMsRUFBRXVDLEVBQUVELEdBQUcsR0FBR3RDLEVBQUVBLEdBQUUsU0FBVSxPQUFPQSxPQUFNb3pHLEdBQUcsS0FBSyxNQUFNcHpHLEdBQUcsTUFBTSxPQUFPb3pHLEtBQUtBLEdBQUdBLEdBQUduckcsTUFBTTNGLEVBQUUsSUFBSTB2RyxHQUFHcHdCLEdBQUczMEUsSUFBSWpOLEVBQUcsUUFBUXN6RyxJQUFHLElBQUssU0FBU1MsR0FBR3p4RyxFQUFFQyxFQUFFdkMsR0FBUyxPQUFPLFlBQXNDLElBQXhCLFdBQVdzQyxFQUFFQyxFQUFFLEtBQTFDdkMsR0FBRyxJQUE2QyxJQUFNQSxFQUFFLFNBQVNnMEcsR0FBRzF4RyxFQUFFQyxHQUFHLEdBQUdELEdBQUdBLEVBQUUrc0MsYUFBeUMsSUFBSSxJQUFJcnZDLEtBQW5DdUMsRUFBRW5CLEVBQUUsR0FBR21CLEdBQUdELEVBQUVBLEVBQUUrc0Msa0JBQTRCLElBQVM5c0MsRUFBRXZDLEtBQUt1QyxFQUFFdkMsR0FBR3NDLEVBQUV0QyxJQUFJLE9BQU91QyxFQUFFLElBQUkweEcsR0FBRyxDQUFDL21DLFFBQVEsTUFBTWduQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEtBQUtELEdBQUdELEdBQUdELEdBQUcsS0FDbGUsU0FBU0ksR0FBR2h5RyxHQUFHLElBQUlDLEVBQUUweEcsR0FBRy9tQyxRQUFRSixHQUFFbW5DLElBQUkzeEcsRUFBRXcyQixLQUFLazJDLFNBQVNILGNBQWN0c0UsRUFBRSxTQUFTZ3lHLEdBQUdqeUcsRUFBRUMsR0FBRyxLQUFLLE9BQU9ELEdBQUcsQ0FBQyxJQUFJdEMsRUFBRXNDLEVBQUV1NkYsVUFBVSxHQUFHdjZGLEVBQUVreUcsb0JBQW9CanlHLEVBQUVELEVBQUVreUcsb0JBQW9CanlHLEVBQUUsT0FBT3ZDLEdBQUdBLEVBQUV3MEcsb0JBQW9CanlHLElBQUl2QyxFQUFFdzBHLG9CQUFvQmp5RyxPQUFRLE1BQUcsT0FBT3ZDLEdBQUdBLEVBQUV3MEcsb0JBQW9CanlHLEdBQStCLE1BQTdCdkMsRUFBRXcwRyxvQkFBb0JqeUcsRUFBYUQsRUFBRUEsRUFBRTg4QixRQUFRLFNBQVNxMUUsR0FBR255RyxFQUFFQyxHQUFHMnhHLEdBQUc1eEcsRUFBRTh4RyxHQUFHRCxHQUFHLEtBQXNCLFFBQWpCN3hHLEVBQUVBLEVBQUU2eUYsZUFBdUIsT0FBTzd5RixFQUFFb3lHLGVBQWVweUcsRUFBRXF5RyxnQkFBZ0JweUcsSUFBSXF5RyxJQUFHLEdBQUl0eUcsRUFBRW95RyxhQUFhLE1BQ2xjLFNBQVNHLEdBQUd2eUcsRUFBRUMsR0FBRyxHQUFHNnhHLEtBQUs5eEcsSUFBRyxJQUFLQyxHQUFHLElBQUlBLEVBQW1HLEdBQTdGLGlCQUFrQkEsR0FBRyxhQUFhQSxJQUFFNnhHLEdBQUc5eEcsRUFBRUMsRUFBRSxZQUFXQSxFQUFFLENBQUNnaUMsUUFBUWppQyxFQUFFd3lHLGFBQWF2eUcsRUFBRTBhLEtBQUssTUFBUyxPQUFPazNGLEdBQUcsQ0FBQyxHQUFHLE9BQU9ELEdBQUcsTUFBTS9yRyxNQUFNK2pCLEVBQUUsTUFBTWlvRixHQUFHNXhHLEVBQUUyeEcsR0FBRy9lLGFBQWEsQ0FBQ3dmLGVBQWUsRUFBRUQsYUFBYW55RyxFQUFFd3lHLFdBQVcsV0FBV1osR0FBR0EsR0FBR2wzRixLQUFLMWEsRUFBRSxPQUFPRCxFQUFFdXNFLGNBQWMsSUFBSW1tQyxJQUFHLEVBQUcsU0FBU0MsR0FBRzN5RyxHQUFHQSxFQUFFNHlHLFlBQVksQ0FBQ0MsVUFBVTd5RyxFQUFFMDZGLGNBQWNvWSxVQUFVLEtBQUtDLE9BQU8sQ0FBQ0MsUUFBUSxNQUFNQyxRQUFRLE1BQ3paLFNBQVNDLEdBQUdsekcsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRTR5RyxZQUFZM3lHLEVBQUUyeUcsY0FBYzV5RyxJQUFJQyxFQUFFMnlHLFlBQVksQ0FBQ0MsVUFBVTd5RyxFQUFFNnlHLFVBQVVDLFVBQVU5eUcsRUFBRTh5RyxVQUFVQyxPQUFPL3lHLEVBQUUreUcsT0FBT0UsUUFBUWp6RyxFQUFFaXpHLFVBQVUsU0FBU0UsR0FBR256RyxFQUFFQyxHQUFvRixPQUFqRkQsRUFBRSxDQUFDcXlHLGVBQWVyeUcsRUFBRW96RyxlQUFlbnpHLEVBQUV3akMsSUFBSSxFQUFFeWxDLFFBQVEsS0FBS3RoRSxTQUFTLEtBQUsrUyxLQUFLLE9BQWVBLEtBQUszYSxFQUFFLFNBQVNxekcsR0FBR3J6RyxFQUFFQyxHQUFtQixHQUFHLFFBQW5CRCxFQUFFQSxFQUFFNHlHLGFBQXdCLENBQVksSUFBSWwxRyxHQUFmc0MsRUFBRUEsRUFBRSt5RyxRQUFlQyxRQUFRLE9BQU90MUcsRUFBRXVDLEVBQUUwYSxLQUFLMWEsR0FBR0EsRUFBRTBhLEtBQUtqZCxFQUFFaWQsS0FBS2pkLEVBQUVpZCxLQUFLMWEsR0FBR0QsRUFBRWd6RyxRQUFRL3lHLEdBQ3BZLFNBQVNxekcsR0FBR3R6RyxFQUFFQyxHQUFHLElBQUl2QyxFQUFFc0MsRUFBRXU2RixVQUFVLE9BQU83OEYsR0FBR3cxRyxHQUFHeDFHLEVBQUVzQyxHQUFpQyxRQUFkdEMsR0FBaEJzQyxFQUFFQSxFQUFFNHlHLGFBQWdCRSxZQUFvQjl5RyxFQUFFOHlHLFVBQVU3eUcsRUFBRTBhLEtBQUsxYSxFQUFFQSxFQUFFMGEsS0FBSzFhLElBQUlBLEVBQUUwYSxLQUFLamQsRUFBRWlkLEtBQUtqZCxFQUFFaWQsS0FBSzFhLEdBQ2xKLFNBQVNzekcsR0FBR3Z6RyxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxJQUFJdUwsRUFBRWxKLEVBQUU0eUcsWUFBWUYsSUFBRyxFQUFHLElBQUloMkUsRUFBRXh6QixFQUFFNHBHLFVBQVV6K0UsRUFBRW5yQixFQUFFNnBHLE9BQU9DLFFBQVEsR0FBRyxPQUFPMytFLEVBQUUsQ0FBQyxHQUFHLE9BQU9xSSxFQUFFLENBQUMsSUFBSS95QixFQUFFK3lCLEVBQUUvaEIsS0FBSytoQixFQUFFL2hCLEtBQUswWixFQUFFMVosS0FBSzBaLEVBQUUxWixLQUFLaFIsRUFBRSt5QixFQUFFckksRUFBRW5yQixFQUFFNnBHLE9BQU9DLFFBQVEsS0FBbUIsUUFBZHJwRyxFQUFFM0osRUFBRXU2RixhQUFxQyxRQUFoQjV3RixFQUFFQSxFQUFFaXBHLGVBQXVCanBHLEVBQUVtcEcsVUFBVXorRSxJQUFJLEdBQUcsT0FBT3FJLEVBQUUsQ0FBQy95QixFQUFFK3lCLEVBQUUvaEIsS0FBSyxJQUFJcmEsRUFBRTRJLEVBQUUycEcsVUFBVXYxRyxFQUFFLEVBQUVHLEVBQUUsS0FBSzBCLEVBQUUsS0FBS3lTLEVBQUUsS0FBSyxHQUFHLE9BQU9qSSxFQUFXLElBQVIsSUFBSThoRCxFQUFFOWhELElBQUksQ0FBb0IsSUFBbkIwcUIsRUFBRW8zQixFQUFFNG1ELGdCQUFvQjEwRyxFQUFFLENBQUMsSUFBSTYxRyxFQUFHLENBQUNuQixlQUFlNW1ELEVBQUU0bUQsZUFBZWUsZUFBZTNuRCxFQUFFMm5ELGVBQWUzdkUsSUFBSWdvQixFQUFFaG9CLElBQUl5bEMsUUFBUXpkLEVBQUV5ZCxRQUFRdGhFLFNBQVM2akQsRUFBRTdqRCxTQUFTK1MsS0FBSyxNQUFNLE9BQU8vSSxHQUFHelMsRUFBRXlTLEVBQ25mNGhHLEVBQUcvMUcsRUFBRTZDLEdBQUdzUixFQUFFQSxFQUFFK0ksS0FBSzY0RixFQUFHbi9FLEVBQUUvMkIsSUFBSUEsRUFBRSsyQixPQUFPLENBQUMsT0FBT3ppQixJQUFJQSxFQUFFQSxFQUFFK0ksS0FBSyxDQUFDMDNGLGVBQWUsV0FBV2UsZUFBZTNuRCxFQUFFMm5ELGVBQWUzdkUsSUFBSWdvQixFQUFFaG9CLElBQUl5bEMsUUFBUXpkLEVBQUV5ZCxRQUFRdGhFLFNBQVM2akQsRUFBRTdqRCxTQUFTK1MsS0FBSyxPQUFPODRGLEdBQUdwL0UsRUFBRW8zQixFQUFFMm5ELGdCQUFnQnB6RyxFQUFFLENBQUMsSUFBSTZJLEVBQUU3SSxFQUFFekIsRUFBRWt0RCxFQUFXLE9BQVRwM0IsRUFBRXAwQixFQUFFdXpHLEVBQUc5MUcsRUFBU2EsRUFBRWtsQyxLQUFLLEtBQUssRUFBYyxHQUFHLG1CQUFmNTZCLEVBQUV0SyxFQUFFMnFFLFNBQWlDLENBQUM1b0UsRUFBRXVJLEVBQUVyTCxLQUFLZzJHLEVBQUdsekcsRUFBRSt6QixHQUFHLE1BQU1yMEIsRUFBRU0sRUFBRXVJLEVBQUUsTUFBTTdJLEVBQUUsS0FBSyxFQUFFNkksRUFBRTJ4RixXQUF1QixLQUFiM3hGLEVBQUUyeEYsVUFBZ0IsR0FBRyxLQUFLLEVBQXVELEdBQUcsT0FBNUNubUUsRUFBRSxtQkFBZHhyQixFQUFFdEssRUFBRTJxRSxTQUFnQ3JnRSxFQUFFckwsS0FBS2cyRyxFQUFHbHpHLEVBQUUrekIsR0FBR3hyQixHQUEwQixNQUFNN0ksRUFBRU0sRUFBRXhCLEVBQUUsR0FBR3dCLEVBQUUrekIsR0FBRyxNQUFNcjBCLEVBQUUsS0FBSyxFQUFFMHlHLElBQUcsR0FBSSxPQUFPam5ELEVBQUU3akQsV0FDNWU1SCxFQUFFdzZGLFdBQVcsR0FBZSxRQUFabm1FLEVBQUVuckIsRUFBRStwRyxTQUFpQi9wRyxFQUFFK3BHLFFBQVEsQ0FBQ3huRCxHQUFHcDNCLEVBQUVyekIsS0FBS3lxRCxJQUFhLEdBQUcsUUFBWkEsRUFBRUEsRUFBRTl3QyxPQUFrQjh3QyxJQUFJOWhELEVBQUUsSUFBc0IsUUFBbkIwcUIsRUFBRW5yQixFQUFFNnBHLE9BQU9DLFNBQWlCLE1BQVd2bkQsRUFBRS91QixFQUFFL2hCLEtBQUswWixFQUFFMVosS0FBSzBaLEVBQUUxWixLQUFLaFIsRUFBRVQsRUFBRTRwRyxVQUFVcDJFLEVBQUVySSxFQUFFbnJCLEVBQUU2cEcsT0FBT0MsUUFBUSxNQUFjLE9BQU9waEcsRUFBRW5VLEVBQUU2QyxFQUFFc1IsRUFBRStJLEtBQUt4YixFQUFFK0osRUFBRTJwRyxVQUFVcDFHLEVBQUV5TCxFQUFFNHBHLFVBQVVsaEcsRUFBRThoRyxHQUFHcDJHLEdBQUcwQyxFQUFFcXlHLGVBQWUvMEcsRUFBRTBDLEVBQUUwNkYsY0FBY3A2RixHQUN4UyxTQUFTcXpHLEdBQUczekcsRUFBRUMsRUFBRXZDLEdBQThCLEdBQTNCc0MsRUFBRUMsRUFBRWd6RyxRQUFRaHpHLEVBQUVnekcsUUFBUSxLQUFRLE9BQU9qekcsRUFBRSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVLLE9BQU9KLElBQUksQ0FBQyxJQUFJdEMsRUFBRXFDLEVBQUVDLEdBQUdpSixFQUFFdkwsRUFBRWlLLFNBQVMsR0FBRyxPQUFPc0IsRUFBRSxDQUF5QixHQUF4QnZMLEVBQUVpSyxTQUFTLEtBQUtqSyxFQUFFdUwsRUFBRUEsRUFBRXhMLEVBQUssbUJBQW9CQyxFQUFFLE1BQU1rSSxNQUFNK2pCLEVBQUUsSUFBSWpzQixJQUFJQSxFQUFFSCxLQUFLMEwsS0FBSyxJQUFJMHFHLEdBQUdoZixFQUFHcHBCLHdCQUF3QnFvQyxJQUFHLElBQUsxb0MsRUFBRzUyQixXQUFXMGhCLEtBQUssU0FBUzY5QyxHQUFHOXpHLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUE4QkQsRUFBRSxPQUFYQSxFQUFFQSxFQUFFQyxFQUF0QnNDLEVBQUVELEVBQUUwNkYsZ0JBQThDejZGLEVBQUVuQixFQUFFLEdBQUdtQixFQUFFdkMsR0FBR3NDLEVBQUUwNkYsY0FBY2g5RixFQUFFLElBQUlzQyxFQUFFcXlHLGlCQUFpQnJ5RyxFQUFFNHlHLFlBQVlDLFVBQVVuMUcsR0FDM1osSUFBSXEyRyxHQUFHLENBQUM1cEMsVUFBVSxTQUFTbnFFLEdBQUcsU0FBT0EsRUFBRUEsRUFBRWcwRyxzQkFBcUIxWixHQUFHdDZGLEtBQUtBLEdBQU1zcUUsZ0JBQWdCLFNBQVN0cUUsRUFBRUMsRUFBRXZDLEdBQUdzQyxFQUFFQSxFQUFFZzBHLG9CQUFvQixJQUFJcjJHLEVBQUVzMkcsS0FBSy9xRyxFQUFFMHFHLEdBQUdub0MsVUFBcUJ2aUUsRUFBRWlxRyxHQUFkeDFHLEVBQUV1MkcsR0FBR3YyRyxFQUFFcUMsRUFBRWtKLEdBQVVBLElBQUtnZ0UsUUFBUWpwRSxFQUFFLE1BQVN2QyxJQUFjd0wsRUFBRXRCLFNBQVNsSyxHQUFHMjFHLEdBQUdyekcsRUFBRWtKLEdBQUdpckcsR0FBR24wRyxFQUFFckMsSUFBSTBzRSxvQkFBb0IsU0FBU3JxRSxFQUFFQyxFQUFFdkMsR0FBR3NDLEVBQUVBLEVBQUVnMEcsb0JBQW9CLElBQUlyMkcsRUFBRXMyRyxLQUFLL3FHLEVBQUUwcUcsR0FBR25vQyxVQUFxQnZpRSxFQUFFaXFHLEdBQWR4MUcsRUFBRXUyRyxHQUFHdjJHLEVBQUVxQyxFQUFFa0osR0FBVUEsSUFBS3U2QixJQUFJLEVBQUV2NkIsRUFBRWdnRSxRQUFRanBFLEVBQUUsTUFBU3ZDLElBQWN3TCxFQUFFdEIsU0FBU2xLLEdBQUcyMUcsR0FBR3J6RyxFQUFFa0osR0FBR2lyRyxHQUFHbjBHLEVBQUVyQyxJQUFJeXNFLG1CQUFtQixTQUFTcHFFLEVBQUVDLEdBQUdELEVBQUVBLEVBQUVnMEcsb0JBQW9CLElBQUl0MkcsRUFBRXUyRyxLQUFLdDJHLEVBQUVpMkcsR0FBR25vQyxVQUN2ZTl0RSxFQUFFdzFHLEdBQWR6MUcsRUFBRXcyRyxHQUFHeDJHLEVBQUVzQyxFQUFFckMsR0FBVUEsSUFBSzhsQyxJQUFJLEVBQUUsTUFBU3hqQyxJQUFjdEMsRUFBRWlLLFNBQVMzSCxHQUFHb3pHLEdBQUdyekcsRUFBRXJDLEdBQUd3MkcsR0FBR24wRyxFQUFFdEMsS0FBSyxTQUFTMDJHLEdBQUdwMEcsRUFBRUMsRUFBRXZDLEVBQUVDLEVBQUV1TCxFQUFFd3pCLEVBQUVySSxHQUFpQixNQUFNLG1CQUFwQnIwQixFQUFFQSxFQUFFb3pGLFdBQXNDaWhCLHNCQUFzQnIwRyxFQUFFcTBHLHNCQUFzQjEyRyxFQUFFKytCLEVBQUVySSxJQUFHcDBCLEVBQUVoQixZQUFXZ0IsRUFBRWhCLFVBQVUwckUsd0JBQXNCbStCLEdBQUdwckcsRUFBRUMsS0FBS21yRyxHQUFHNS9GLEVBQUV3ekIsSUFDN1EsU0FBUzQzRSxHQUFHdDBHLEVBQUVDLEVBQUV2QyxHQUFHLElBQUlDLEdBQUUsRUFBR3VMLEVBQUUybEcsR0FBT255RSxFQUFFejhCLEVBQUVzMEcsWUFBOFcsTUFBbFcsaUJBQWtCNzNFLEdBQUcsT0FBT0EsRUFBRUEsRUFBRTYxRSxHQUFHNzFFLElBQUl4ekIsRUFBRW1QLEdBQUVwWSxHQUFHNnVHLEdBQUcvaUQsR0FBRTZlLFFBQXlCbHVDLEdBQUcvK0IsRUFBRSxPQUF0QkEsRUFBRXNDLEVBQUV1dEMsZUFBd0N1aEUsR0FBRy91RyxFQUFFa0osR0FBRzJsRyxJQUFJNXVHLEVBQUUsSUFBSUEsRUFBRXZDLEVBQUVnL0IsR0FBRzE4QixFQUFFMDZGLGNBQWMsT0FBT3o2RixFQUFFbzBDLFlBQU8sSUFBU3AwQyxFQUFFbzBDLE1BQU1wMEMsRUFBRW8wQyxNQUFNLEtBQUtwMEMsRUFBRXNxRSxRQUFRd3BDLEdBQUcvekcsRUFBRW96RixVQUFVbnpGLEVBQUVBLEVBQUUrekcsb0JBQW9CaDBHLEVBQUVyQyxLQUFJcUMsRUFBRUEsRUFBRW96RixXQUFZNGIsNENBQTRDOWxHLEVBQUVsSixFQUFFaXZHLDBDQUEwQ3Z5RSxHQUFVejhCLEVBQzlaLFNBQVN1MEcsR0FBR3gwRyxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBR3FDLEVBQUVDLEVBQUVvMEMsTUFBTSxtQkFBb0JwMEMsRUFBRXcwRywyQkFBMkJ4MEcsRUFBRXcwRywwQkFBMEIvMkcsRUFBRUMsR0FBRyxtQkFBb0JzQyxFQUFFeTBHLGtDQUFrQ3owRyxFQUFFeTBHLGlDQUFpQ2gzRyxFQUFFQyxHQUFHc0MsRUFBRW8wQyxRQUFRcjBDLEdBQUcrekcsR0FBRzFwQyxvQkFBb0JwcUUsRUFBRUEsRUFBRW8wQyxNQUFNLE1BQy9QLFNBQVNzZ0UsR0FBRzMwRyxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxJQUFJdUwsRUFBRWxKLEVBQUVvekYsVUFBVWxxRixFQUFFKzFCLE1BQU12aEMsRUFBRXdMLEVBQUVtckMsTUFBTXIwQyxFQUFFMDZGLGNBQWN4eEYsRUFBRStzRCxLQUFLNDlDLEdBQUdsQixHQUFHM3lHLEdBQUcsSUFBSTA4QixFQUFFejhCLEVBQUVzMEcsWUFBWSxpQkFBa0I3M0UsR0FBRyxPQUFPQSxFQUFFeHpCLEVBQUUrNEIsUUFBUXN3RSxHQUFHNzFFLElBQUlBLEVBQUVya0IsR0FBRXBZLEdBQUc2dUcsR0FBRy9pRCxHQUFFNmUsUUFBUTFoRSxFQUFFKzRCLFFBQVE4c0UsR0FBRy91RyxFQUFFMDhCLElBQUk2MkUsR0FBR3Z6RyxFQUFFdEMsRUFBRXdMLEVBQUV2TCxHQUFHdUwsRUFBRW1yQyxNQUFNcjBDLEVBQUUwNkYsY0FBMkMsbUJBQTdCaCtELEVBQUV6OEIsRUFBRXd0Qyw0QkFBaURxbUUsR0FBRzl6RyxFQUFFQyxFQUFFeThCLEVBQUVoL0IsR0FBR3dMLEVBQUVtckMsTUFBTXIwQyxFQUFFMDZGLGVBQWUsbUJBQW9CejZGLEVBQUV3dEMsMEJBQTBCLG1CQUFvQnZrQyxFQUFFMHJHLHlCQUF5QixtQkFBb0IxckcsRUFBRTJyRywyQkFBMkIsbUJBQW9CM3JHLEVBQUU0ckcscUJBQ3RlNzBHLEVBQUVpSixFQUFFbXJDLE1BQU0sbUJBQW9CbnJDLEVBQUU0ckcsb0JBQW9CNXJHLEVBQUU0ckcscUJBQXFCLG1CQUFvQjVyRyxFQUFFMnJHLDJCQUEyQjNyRyxFQUFFMnJHLDRCQUE0QjUwRyxJQUFJaUosRUFBRW1yQyxPQUFPMC9ELEdBQUcxcEMsb0JBQW9CbmhFLEVBQUVBLEVBQUVtckMsTUFBTSxNQUFNay9ELEdBQUd2ekcsRUFBRXRDLEVBQUV3TCxFQUFFdkwsR0FBR3VMLEVBQUVtckMsTUFBTXIwQyxFQUFFMDZGLGVBQWUsbUJBQW9CeHhGLEVBQUU2ckcsb0JBQW9CLzBHLEVBQUV3NkYsV0FBVyxHQUFHLElBQUl3YSxHQUFHcDFHLE1BQU1GLFFBQzNULFNBQVN1MUcsR0FBR2oxRyxFQUFFQyxFQUFFdkMsR0FBVyxHQUFHLFFBQVhzQyxFQUFFdEMsRUFBRXV6QyxNQUFpQixtQkFBb0JqeEMsR0FBRyxpQkFBa0JBLEVBQUUsQ0FBQyxHQUFHdEMsRUFBRXN0RSxPQUFPLENBQVksR0FBWHR0RSxFQUFFQSxFQUFFc3RFLE9BQVksQ0FBQyxHQUFHLElBQUl0dEUsRUFBRStsQyxJQUFJLE1BQU01OUIsTUFBTStqQixFQUFFLE1BQU0sSUFBSWpzQixFQUFFRCxFQUFFMDFGLFVBQVUsSUFBSXoxRixFQUFFLE1BQU1rSSxNQUFNK2pCLEVBQUUsSUFBSTVwQixJQUFJLElBQUlrSixFQUFFLEdBQUdsSixFQUFFLE9BQUcsT0FBT0MsR0FBRyxPQUFPQSxFQUFFZ3hDLEtBQUssbUJBQW9CaHhDLEVBQUVneEMsS0FBS2h4QyxFQUFFZ3hDLElBQUlpa0UsYUFBYWhzRyxFQUFTakosRUFBRWd4QyxNQUFJaHhDLEVBQUUsU0FBU0QsR0FBRyxJQUFJQyxFQUFFdEMsRUFBRXM0RCxLQUFLaDJELElBQUk0ekcsS0FBSzV6RyxFQUFFdEMsRUFBRXM0RCxLQUFLLElBQUksT0FBT2oyRCxTQUFTQyxFQUFFaUosR0FBR2pKLEVBQUVpSixHQUFHbEosSUFBS2sxRyxXQUFXaHNHLEVBQVNqSixHQUFFLEdBQUcsaUJBQWtCRCxFQUFFLE1BQU02RixNQUFNK2pCLEVBQUUsTUFBTSxJQUFJbHNCLEVBQUVzdEUsT0FBTyxNQUFNbmxFLE1BQU0rakIsRUFBRSxJQUFJNXBCLElBQUssT0FBT0EsRUFDaGUsU0FBU20xRyxHQUFHbjFHLEVBQUVDLEdBQUcsR0FBRyxhQUFhRCxFQUFFdzJCLEtBQUssTUFBTTN3QixNQUFNK2pCLEVBQUUsR0FBRyxvQkFBb0I3ckIsT0FBT2tCLFVBQVVZLFNBQVNyQyxLQUFLeUMsR0FBRyxxQkFBcUJsQyxPQUFPZ0ksS0FBSzlGLEdBQUcyRixLQUFLLE1BQU0sSUFBSTNGLEVBQUUsS0FDcEssU0FBU20xRyxHQUFHcDFHLEdBQUcsU0FBU0MsRUFBRUEsRUFBRXZDLEdBQUcsR0FBR3NDLEVBQUUsQ0FBQyxJQUFJckMsRUFBRXNDLEVBQUVvMUcsV0FBVyxPQUFPMTNHLEdBQUdBLEVBQUUyM0csV0FBVzUzRyxFQUFFdUMsRUFBRW8xRyxXQUFXMzNHLEdBQUd1QyxFQUFFczFHLFlBQVl0MUcsRUFBRW8xRyxXQUFXMzNHLEVBQUVBLEVBQUU0M0csV0FBVyxLQUFLNTNHLEVBQUU4OEYsVUFBVSxHQUFHLFNBQVM5OEYsRUFBRUEsRUFBRUMsR0FBRyxJQUFJcUMsRUFBRSxPQUFPLEtBQUssS0FBSyxPQUFPckMsR0FBR3NDLEVBQUV2QyxFQUFFQyxHQUFHQSxFQUFFQSxFQUFFbTlGLFFBQVEsT0FBTyxLQUFLLFNBQVNuOUYsRUFBRXFDLEVBQUVDLEdBQUcsSUFBSUQsRUFBRSxJQUFJbzJDLElBQUksT0FBT24yQyxHQUFHLE9BQU9BLEVBQUVyQixJQUFJb0IsRUFBRXdHLElBQUl2RyxFQUFFckIsSUFBSXFCLEdBQUdELEVBQUV3RyxJQUFJdkcsRUFBRWd0QixNQUFNaHRCLEdBQUdBLEVBQUVBLEVBQUU2NkYsUUFBUSxPQUFPOTZGLEVBQUUsU0FBU2tKLEVBQUVsSixFQUFFQyxHQUFzQyxPQUFuQ0QsRUFBRXcxRyxHQUFHeDFHLEVBQUVDLElBQUtndEIsTUFBTSxFQUFFanRCLEVBQUU4NkYsUUFBUSxLQUFZOTZGLEVBQUUsU0FBUzA4QixFQUFFejhCLEVBQUV2QyxFQUFFQyxHQUFhLE9BQVZzQyxFQUFFZ3RCLE1BQU10dkIsRUFBTXFDLEVBQTRCLFFBQWpCckMsRUFBRXNDLEVBQUVzNkYsWUFBNkI1OEYsRUFBRUEsRUFBRXN2QixPQUFRdnZCLEdBQUd1QyxFQUFFdTZGLFVBQ2xmLEVBQUU5OEYsR0FBR0MsR0FBRXNDLEVBQUV1NkYsVUFBVSxFQUFTOThGLEdBRGthQSxFQUNoYSxTQUFTMjJCLEVBQUVwMEIsR0FBMEMsT0FBdkNELEdBQUcsT0FBT0MsRUFBRXM2RixZQUFZdDZGLEVBQUV1NkYsVUFBVSxHQUFVdjZGLEVBQUUsU0FBUzBKLEVBQUUzSixFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxPQUFHLE9BQU9zQyxHQUFHLElBQUlBLEVBQUV3akMsTUFBV3hqQyxFQUFFdzFHLEdBQUcvM0csRUFBRXNDLEVBQUV4QixLQUFLYixJQUFLbS9CLE9BQU85OEIsRUFBRUMsS0FBRUEsRUFBRWlKLEVBQUVqSixFQUFFdkMsSUFBS28vQixPQUFPOThCLEVBQVNDLEdBQUUsU0FBU0ssRUFBRU4sRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsT0FBRyxPQUFPc0MsR0FBR0EsRUFBRStzRixjQUFjdHZGLEVBQUU4NEIsT0FBWTc0QixFQUFFdUwsRUFBRWpKLEVBQUV2QyxFQUFFdWhDLFFBQVNnUyxJQUFJZ2tFLEdBQUdqMUcsRUFBRUMsRUFBRXZDLEdBQUdDLEVBQUVtL0IsT0FBTzk4QixFQUFFckMsS0FBRUEsRUFBRSszRyxHQUFHaDRHLEVBQUU4NEIsS0FBSzk0QixFQUFFa0IsSUFBSWxCLEVBQUV1aEMsTUFBTSxLQUFLai9CLEVBQUV4QixLQUFLYixJQUFLc3pDLElBQUlna0UsR0FBR2oxRyxFQUFFQyxFQUFFdkMsR0FBR0MsRUFBRW0vQixPQUFPOThCLEVBQVNyQyxHQUFFLFNBQVNMLEVBQUUwQyxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxPQUFHLE9BQU9zQyxHQUFHLElBQUlBLEVBQUV3akMsS0FBS3hqQyxFQUFFbXpGLFVBQVVtSixnQkFBZ0I3K0YsRUFBRTYrRixlQUFldDhGLEVBQUVtekYsVUFBVTd3QyxpQkFDdGU3a0QsRUFBRTZrRCxpQkFBc0J0aUQsRUFBRTAxRyxHQUFHajRHLEVBQUVzQyxFQUFFeEIsS0FBS2IsSUFBS20vQixPQUFPOThCLEVBQUVDLEtBQUVBLEVBQUVpSixFQUFFakosRUFBRXZDLEVBQUU0eEMsVUFBVSxLQUFNeFMsT0FBTzk4QixFQUFTQyxHQUFFLFNBQVN4QyxFQUFFdUMsRUFBRUMsRUFBRXZDLEVBQUVDLEVBQUUrK0IsR0FBRyxPQUFHLE9BQU96OEIsR0FBRyxJQUFJQSxFQUFFd2pDLE1BQVd4akMsRUFBRTIxRyxHQUFHbDRHLEVBQUVzQyxFQUFFeEIsS0FBS2IsRUFBRSsrQixJQUFLSSxPQUFPOThCLEVBQUVDLEtBQUVBLEVBQUVpSixFQUFFakosRUFBRXZDLElBQUtvL0IsT0FBTzk4QixFQUFTQyxHQUFFLFNBQVNkLEVBQUVhLEVBQUVDLEVBQUV2QyxHQUFHLEdBQUcsaUJBQWtCdUMsR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRXcxRyxHQUFHLEdBQUd4MUcsRUFBRUQsRUFBRXhCLEtBQUtkLElBQUtvL0IsT0FBTzk4QixFQUFFQyxFQUFFLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFK3RDLFVBQVUsS0FBS29uRCxHQUFHLE9BQU8xM0YsRUFBRWc0RyxHQUFHejFHLEVBQUV1MkIsS0FBS3YyQixFQUFFckIsSUFBSXFCLEVBQUVnL0IsTUFBTSxLQUFLai9CLEVBQUV4QixLQUFLZCxJQUFLdXpDLElBQUlna0UsR0FBR2oxRyxFQUFFLEtBQUtDLEdBQUd2QyxFQUFFby9CLE9BQU85OEIsRUFBRXRDLEVBQUUsS0FBSzIzRixHQUFHLE9BQU9wMUYsRUFBRTAxRyxHQUFHMTFHLEVBQUVELEVBQUV4QixLQUFLZCxJQUFLby9CLE9BQU85OEIsRUFBRUMsRUFBRSxHQUFHKzBHLEdBQUcvMEcsSUFDdmZpMkYsR0FBR2oyRixHQUFHLE9BQU9BLEVBQUUyMUcsR0FBRzMxRyxFQUFFRCxFQUFFeEIsS0FBS2QsRUFBRSxPQUFRby9CLE9BQU85OEIsRUFBRUMsRUFBRWsxRyxHQUFHbjFHLEVBQUVDLEdBQUcsT0FBTyxLQUFLLFNBQVMyUixFQUFFNVIsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsSUFBSXVMLEVBQUUsT0FBT2pKLEVBQUVBLEVBQUVyQixJQUFJLEtBQUssR0FBRyxpQkFBa0JsQixHQUFHLGlCQUFrQkEsRUFBRSxPQUFPLE9BQU93TCxFQUFFLEtBQUtTLEVBQUUzSixFQUFFQyxFQUFFLEdBQUd2QyxFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFc3dDLFVBQVUsS0FBS29uRCxHQUFHLE9BQU8xM0YsRUFBRWtCLE1BQU1zSyxFQUFFeEwsRUFBRTg0QixPQUFPOCtELEdBQUc3M0YsRUFBRXVDLEVBQUVDLEVBQUV2QyxFQUFFdWhDLE1BQU1xUSxTQUFTM3hDLEVBQUV1TCxHQUFHNUksRUFBRU4sRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsS0FBSyxLQUFLMDNGLEdBQUcsT0FBTzMzRixFQUFFa0IsTUFBTXNLLEVBQUU1TCxFQUFFMEMsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQUcsS0FBSyxHQUFHcTNHLEdBQUd0M0csSUFBSXc0RixHQUFHeDRGLEdBQUcsT0FBTyxPQUFPd0wsRUFBRSxLQUFLekwsRUFBRXVDLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFLE1BQU13M0csR0FBR24xRyxFQUFFdEMsR0FBRyxPQUFPLEtBQUssU0FBUyt0RCxFQUFFenJELEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsR0FBRyxHQUFHLGlCQUFrQnZMLEdBQUcsaUJBQWtCQSxFQUFFLE9BQzVlZ00sRUFBRTFKLEVBRGlmRCxFQUNsZ0JBLEVBQUU5QixJQUFJUixJQUFJLEtBQVcsR0FBR0MsRUFBRXVMLEdBQUcsR0FBRyxpQkFBa0J2TCxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxPQUFPQSxFQUFFcXdDLFVBQVUsS0FBS29uRCxHQUFHLE9BQU9wMUYsRUFBRUEsRUFBRTlCLElBQUksT0FBT1AsRUFBRWlCLElBQUlsQixFQUFFQyxFQUFFaUIsTUFBTSxLQUFLakIsRUFBRTY0QixPQUFPOCtELEdBQUc3M0YsRUFBRXdDLEVBQUVELEVBQUVyQyxFQUFFc2hDLE1BQU1xUSxTQUFTcG1DLEVBQUV2TCxFQUFFaUIsS0FBSzBCLEVBQUVMLEVBQUVELEVBQUVyQyxFQUFFdUwsR0FBRyxLQUFLbXNGLEdBQUcsT0FBMkMvM0YsRUFBRTJDLEVBQXRDRCxFQUFFQSxFQUFFOUIsSUFBSSxPQUFPUCxFQUFFaUIsSUFBSWxCLEVBQUVDLEVBQUVpQixNQUFNLEtBQVdqQixFQUFFdUwsR0FBRyxHQUFHOHJHLEdBQUdyM0csSUFBSXU0RixHQUFHdjRGLEdBQUcsT0FBd0JGLEVBQUV3QyxFQUFuQkQsRUFBRUEsRUFBRTlCLElBQUlSLElBQUksS0FBV0MsRUFBRXVMLEVBQUUsTUFBTWlzRyxHQUFHbDFHLEVBQUV0QyxHQUFHLE9BQU8sS0FBSyxTQUFTNjFHLEVBQUd0cUcsRUFBRW1yQixFQUFFMXFCLEVBQUVySixHQUFHLElBQUksSUFBSWhELEVBQUUsS0FBS2lCLEVBQUUsS0FBS2QsRUFBRTQyQixFQUFFOW9CLEVBQUU4b0IsRUFBRSxFQUFFZzNCLEVBQUUsS0FBSyxPQUFPNXRELEdBQUc4TixFQUFFNUIsRUFBRXRKLE9BQU9rTCxJQUFJLENBQUM5TixFQUFFd3ZCLE1BQU0xaEIsR0FBRzgvQyxFQUFFNXRELEVBQUVBLEVBQUUsTUFBTTR0RCxFQUFFNXRELEVBQUVxOUYsUUFBUSxJQUFJbHZDLEVBQUVoNkMsRUFBRTFJLEVBQUV6TCxFQUFFa00sRUFBRTRCLEdBQUdqTCxHQUFHLEdBQUcsT0FBT3NyRCxFQUFFLENBQUMsT0FBT251RCxJQUFJQSxFQUFFNHRELEdBQUcsTUFBTXJyRCxHQUN0ZnZDLEdBQUcsT0FBT211RCxFQUFFMnVDLFdBQVd0NkYsRUFBRWlKLEVBQUV6TCxHQUFHNDJCLEVBQUVxSSxFQUFFa3ZCLEVBQUV2M0IsRUFBRTlvQixHQUFHLE9BQU9oTixFQUFFakIsRUFBRXN1RCxFQUFFcnRELEVBQUV1OEYsUUFBUWx2QyxFQUFFcnRELEVBQUVxdEQsRUFBRW51RCxFQUFFNHRELEVBQUUsR0FBRzkvQyxJQUFJNUIsRUFBRXRKLE9BQU8sT0FBTzNDLEVBQUV3TCxFQUFFekwsR0FBR0gsRUFBRSxHQUFHLE9BQU9HLEVBQUUsQ0FBQyxLQUFLOE4sRUFBRTVCLEVBQUV0SixPQUFPa0wsSUFBa0IsUUFBZDlOLEVBQUUwQixFQUFFK0osRUFBRVMsRUFBRTRCLEdBQUdqTCxNQUFjK3pCLEVBQUVxSSxFQUFFai9CLEVBQUU0MkIsRUFBRTlvQixHQUFHLE9BQU9oTixFQUFFakIsRUFBRUcsRUFBRWMsRUFBRXU4RixRQUFRcjlGLEVBQUVjLEVBQUVkLEdBQUcsT0FBT0gsRUFBRSxJQUFJRyxFQUFFRSxFQUFFdUwsRUFBRXpMLEdBQUc4TixFQUFFNUIsRUFBRXRKLE9BQU9rTCxJQUFzQixRQUFsQjgvQyxFQUFFSSxFQUFFaHVELEVBQUV5TCxFQUFFcUMsRUFBRTVCLEVBQUU0QixHQUFHakwsTUFBY04sR0FBRyxPQUFPcXJELEVBQUVrdkMsV0FBVzk4RixFQUFFdWxFLE9BQU8sT0FBTzNYLEVBQUV6c0QsSUFBSTJNLEVBQUU4L0MsRUFBRXpzRCxLQUFLeTFCLEVBQUVxSSxFQUFFMnVCLEVBQUVoM0IsRUFBRTlvQixHQUFHLE9BQU9oTixFQUFFakIsRUFBRSt0RCxFQUFFOXNELEVBQUV1OEYsUUFBUXp2QyxFQUFFOXNELEVBQUU4c0QsR0FBNEMsT0FBekNyckQsR0FBR3ZDLEVBQUUrYyxTQUFRLFNBQVN4YSxHQUFHLE9BQU9DLEVBQUVpSixFQUFFbEosTUFBWTFDLEVBQUUsU0FBU3VMLEVBQUVLLEVBQUVtckIsRUFBRTFxQixFQUFFck0sR0FBRyxJQUFJZ0QsRUFBRTQxRixHQUFHdnNGLEdBQUcsR0FBRyxtQkFBb0JySixFQUFFLE1BQU11RixNQUFNK2pCLEVBQUUsTUFDdmUsR0FBRyxPQUQwZWpnQixFQUFFckosRUFBRTlDLEtBQUttTSxJQUMzZSxNQUFNOUQsTUFBTStqQixFQUFFLE1BQU0sSUFBSSxJQUFJbnNCLEVBQUU2QyxFQUFFLEtBQUsvQixFQUFFODFCLEVBQUU5b0IsRUFBRThvQixFQUFFLEVBQUVnM0IsRUFBRSxLQUFLTyxFQUFFamlELEVBQUVnUixPQUFPLE9BQU9wYyxJQUFJcXRELEVBQUVwMkIsS0FBS2pxQixJQUFJcWdELEVBQUVqaUQsRUFBRWdSLE9BQU8sQ0FBQ3BjLEVBQUUwdUIsTUFBTTFoQixHQUFHOC9DLEVBQUU5c0QsRUFBRUEsRUFBRSxNQUFNOHNELEVBQUU5c0QsRUFBRXU4RixRQUFRLElBQUlqeUYsRUFBRStJLEVBQUUxSSxFQUFFM0ssRUFBRXF0RCxFQUFFdHRELE1BQU1oQixHQUFHLEdBQUcsT0FBT3VMLEVBQUUsQ0FBQyxPQUFPdEssSUFBSUEsRUFBRThzRCxHQUFHLE1BQU1yckQsR0FBR3pCLEdBQUcsT0FBT3NLLEVBQUUweEYsV0FBV3Q2RixFQUFFaUosRUFBRTNLLEdBQUc4MUIsRUFBRXFJLEVBQUU3ekIsRUFBRXdyQixFQUFFOW9CLEdBQUcsT0FBTzlOLEVBQUU2QyxFQUFFdUksRUFBRXBMLEVBQUVxOUYsUUFBUWp5RixFQUFFcEwsRUFBRW9MLEVBQUV0SyxFQUFFOHNELEVBQUUsR0FBR08sRUFBRXAyQixLQUFLLE9BQU85M0IsRUFBRXdMLEVBQUUzSyxHQUFHK0IsRUFBRSxHQUFHLE9BQU8vQixFQUFFLENBQUMsTUFBTXF0RCxFQUFFcDJCLEtBQUtqcUIsSUFBSXFnRCxFQUFFamlELEVBQUVnUixPQUF3QixRQUFqQml4QyxFQUFFenNELEVBQUUrSixFQUFFMGlELEVBQUV0dEQsTUFBTWhCLE1BQWMrMkIsRUFBRXFJLEVBQUVrdkIsRUFBRXYzQixFQUFFOW9CLEdBQUcsT0FBTzlOLEVBQUU2QyxFQUFFc3JELEVBQUVudUQsRUFBRXE5RixRQUFRbHZDLEVBQUVudUQsRUFBRW11RCxHQUFHLE9BQU90ckQsRUFBRSxJQUFJL0IsRUFBRVosRUFBRXVMLEVBQUUzSyxJQUFJcXRELEVBQUVwMkIsS0FBS2pxQixJQUFJcWdELEVBQUVqaUQsRUFBRWdSLE9BQTRCLFFBQXJCaXhDLEVBQUVILEVBQUVsdEQsRUFBRTJLLEVBQUVxQyxFQUFFcWdELEVBQUV0dEQsTUFBTWhCLE1BQWMwQyxHQUFHLE9BQ2hmNHJELEVBQUUydUMsV0FBV2g4RixFQUFFeWtFLE9BQU8sT0FBT3BYLEVBQUVodEQsSUFBSTJNLEVBQUVxZ0QsRUFBRWh0RCxLQUFLeTFCLEVBQUVxSSxFQUFFa3ZCLEVBQUV2M0IsRUFBRTlvQixHQUFHLE9BQU85TixFQUFFNkMsRUFBRXNyRCxFQUFFbnVELEVBQUVxOUYsUUFBUWx2QyxFQUFFbnVELEVBQUVtdUQsR0FBNEMsT0FBekM1ckQsR0FBR3pCLEVBQUVpYyxTQUFRLFNBQVN4YSxHQUFHLE9BQU9DLEVBQUVpSixFQUFFbEosTUFBWU0sRUFBRSxPQUFPLFNBQVNOLEVBQUVyQyxFQUFFKytCLEVBQUUveUIsR0FBRyxJQUFJckosRUFBRSxpQkFBa0JvOEIsR0FBRyxPQUFPQSxHQUFHQSxFQUFFbEcsT0FBTzgrRCxJQUFJLE9BQU81NEQsRUFBRTk5QixJQUFJMEIsSUFBSW84QixFQUFFQSxFQUFFdUMsTUFBTXFRLFVBQVUsSUFBSWh5QyxFQUFFLGlCQUFrQm8vQixHQUFHLE9BQU9BLEVBQUUsR0FBR3AvQixFQUFFLE9BQU9vL0IsRUFBRXNSLFVBQVUsS0FBS29uRCxHQUFHcDFGLEVBQUUsQ0FBUyxJQUFSMUMsRUFBRW8vQixFQUFFOTlCLElBQVEwQixFQUFFM0MsRUFBRSxPQUFPMkMsR0FBRyxDQUFDLEdBQUdBLEVBQUUxQixNQUFNdEIsRUFBRSxDQUFDLE9BQU9nRCxFQUFFbWpDLEtBQUssS0FBSyxFQUFFLEdBQUcvRyxFQUFFbEcsT0FBTzgrRCxHQUFHLENBQUM1M0YsRUFBRXNDLEVBQUVNLEVBQUV3NkYsVUFBU245RixFQUFFdUwsRUFBRTVJLEVBQUVvOEIsRUFBRXVDLE1BQU1xUSxXQUFZeFMsT0FBTzk4QixFQUFFQSxFQUFFckMsRUFBRSxNQUFNcUMsRUFBRSxNQUFNLFFBQVEsR0FBR00sRUFBRTBzRixjQUFjdHdELEVBQUVsRyxLQUFLLENBQUM5NEIsRUFBRXNDLEVBQ3JmTSxFQUFFdzZGLFVBQVNuOUYsRUFBRXVMLEVBQUU1SSxFQUFFbzhCLEVBQUV1QyxRQUFTZ1MsSUFBSWdrRSxHQUFHajFHLEVBQUVNLEVBQUVvOEIsR0FBRy8rQixFQUFFbS9CLE9BQU85OEIsRUFBRUEsRUFBRXJDLEVBQUUsTUFBTXFDLEdBQUd0QyxFQUFFc0MsRUFBRU0sR0FBRyxNQUFXTCxFQUFFRCxFQUFFTSxHQUFHQSxFQUFFQSxFQUFFdzZGLFFBQVFwK0QsRUFBRWxHLE9BQU84K0QsS0FBSTMzRixFQUFFaTRHLEdBQUdsNUUsRUFBRXVDLE1BQU1xUSxTQUFTdHZDLEVBQUV4QixLQUFLbUwsRUFBRSt5QixFQUFFOTlCLE1BQU9rK0IsT0FBTzk4QixFQUFFQSxFQUFFckMsS0FBSWdNLEVBQUUrckcsR0FBR2g1RSxFQUFFbEcsS0FBS2tHLEVBQUU5OUIsSUFBSTg5QixFQUFFdUMsTUFBTSxLQUFLai9CLEVBQUV4QixLQUFLbUwsSUFBS3NuQyxJQUFJZ2tFLEdBQUdqMUcsRUFBRXJDLEVBQUUrK0IsR0FBRy95QixFQUFFbXpCLE9BQU85OEIsRUFBRUEsRUFBRTJKLEdBQUcsT0FBTzBxQixFQUFFcjBCLEdBQUcsS0FBS3ExRixHQUFHcjFGLEVBQUUsQ0FBQyxJQUFJTSxFQUFFbzhCLEVBQUU5OUIsSUFBSSxPQUFPakIsR0FBRyxDQUFDLEdBQUdBLEVBQUVpQixNQUFNMEIsRUFBRSxJQUFHLElBQUkzQyxFQUFFOGxDLEtBQUs5bEMsRUFBRXkxRixVQUFVbUosZ0JBQWdCNy9ELEVBQUU2L0QsZUFBZTUrRixFQUFFeTFGLFVBQVU3d0MsaUJBQWlCN2xCLEVBQUU2bEIsZUFBZSxDQUFDN2tELEVBQUVzQyxFQUFFckMsRUFBRW05RixVQUFTbjlGLEVBQUV1TCxFQUFFdkwsRUFBRSsrQixFQUFFNFMsVUFBVSxLQUFNeFMsT0FBTzk4QixFQUFFQSxFQUFFckMsRUFBRSxNQUFNcUMsRUFBT3RDLEVBQUVzQyxFQUFFckMsR0FBRyxNQUFXc0MsRUFBRUQsRUFBRXJDLEdBQUdBLEVBQ25mQSxFQUFFbTlGLFNBQVFuOUYsRUFBRWc0RyxHQUFHajVFLEVBQUUxOEIsRUFBRXhCLEtBQUttTCxJQUFLbXpCLE9BQU85OEIsRUFBRUEsRUFBRXJDLEVBQUUsT0FBTzAyQixFQUFFcjBCLEdBQUcsR0FBRyxpQkFBa0IwOEIsR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRSxHQUFHQSxFQUFFLE9BQU8vK0IsR0FBRyxJQUFJQSxFQUFFOGxDLEtBQUsvbEMsRUFBRXNDLEVBQUVyQyxFQUFFbTlGLFVBQVNuOUYsRUFBRXVMLEVBQUV2TCxFQUFFKytCLElBQUtJLE9BQU85OEIsRUFBRUEsRUFBRXJDLElBQUlELEVBQUVzQyxFQUFFckMsSUFBR0EsRUFBRTgzRyxHQUFHLzRFLEVBQUUxOEIsRUFBRXhCLEtBQUttTCxJQUFLbXpCLE9BQU85OEIsRUFBRUEsRUFBRXJDLEdBQUcwMkIsRUFBRXIwQixHQUFHLEdBQUdnMUcsR0FBR3Q0RSxHQUFHLE9BQU84MkUsRUFBR3h6RyxFQUFFckMsRUFBRSsrQixFQUFFL3lCLEdBQUcsR0FBR3VzRixHQUFHeDVELEdBQUcsT0FBTzd6QixFQUFFN0ksRUFBRXJDLEVBQUUrK0IsRUFBRS95QixHQUFjLEdBQVhyTSxHQUFHNjNHLEdBQUduMUcsRUFBRTA4QixRQUFNLElBQXFCQSxJQUFJcDhCLEVBQUUsT0FBT04sRUFBRXlqQyxLQUFLLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTXpqQyxFQUFFQSxFQUFFdzJCLEtBQUszd0IsTUFBTStqQixFQUFFLElBQUk1cEIsRUFBRTgvQixhQUFhOS9CLEVBQUVwQyxNQUFNLGNBQWUsT0FBT0YsRUFBRXNDLEVBQUVyQyxJQUFJLElBQUlrNEcsR0FBR1QsSUFBRyxHQUFJVSxHQUFHVixJQUFHLEdBQUlXLEdBQUcsR0FBR0MsR0FBRyxDQUFDcHJDLFFBQVFtckMsSUFBSUUsR0FBRyxDQUFDcnJDLFFBQVFtckMsSUFBSUcsR0FBRyxDQUFDdHJDLFFBQVFtckMsSUFDamYsU0FBU0ksR0FBR24yRyxHQUFHLEdBQUdBLElBQUkrMUcsR0FBRyxNQUFNbHdHLE1BQU0rakIsRUFBRSxNQUFNLE9BQU81cEIsRUFBRSxTQUFTbzJHLEdBQUdwMkcsRUFBRUMsR0FBeUMsT0FBdEM2ckQsR0FBRW9xRCxHQUFHajJHLEdBQUc2ckQsR0FBRW1xRCxHQUFHajJHLEdBQUc4ckQsR0FBRWtxRCxHQUFHRCxJQUFJLzFHLEVBQUVDLEVBQUVpNUYsVUFBbUIsS0FBSyxFQUFFLEtBQUssR0FBR2o1RixHQUFHQSxFQUFFQSxFQUFFbzJHLGlCQUFpQnAyRyxFQUFFNjRGLGFBQWFMLEdBQUcsS0FBSyxJQUFJLE1BQU0sUUFBa0V4NEYsRUFBRXc0RixHQUFyQ3g0RixHQUF2QkQsRUFBRSxJQUFJQSxFQUFFQyxFQUFFK21DLFdBQVcvbUMsR0FBTTY0RixjQUFjLEtBQUs5NEYsRUFBRUEsRUFBRXMyRyxTQUFrQjlyQyxHQUFFd3JDLElBQUlscUQsR0FBRWtxRCxHQUFHLzFHLEdBQUcsU0FBU3MyRyxLQUFLL3JDLEdBQUV3ckMsSUFBSXhyQyxHQUFFeXJDLElBQUl6ckMsR0FBRTByQyxJQUFJLFNBQVNNLEdBQUd4MkcsR0FBR20yRyxHQUFHRCxHQUFHdHJDLFNBQVMsSUFBSTNxRSxFQUFFazJHLEdBQUdILEdBQUdwckMsU0FBYWx0RSxFQUFFKzZGLEdBQUd4NEYsRUFBRUQsRUFBRXcyQixNQUFNdjJCLElBQUl2QyxJQUFJb3VELEdBQUVtcUQsR0FBR2oyRyxHQUFHOHJELEdBQUVrcUQsR0FBR3Q0RyxJQUFJLFNBQVMrNEcsR0FBR3oyRyxHQUFHaTJHLEdBQUdyckMsVUFBVTVxRSxJQUFJd3FFLEdBQUV3ckMsSUFBSXhyQyxHQUFFeXJDLEtBQUssSUFBSTlyRyxHQUFFLENBQUN5Z0UsUUFBUSxHQUNwZCxTQUFTN3hELEdBQUcvWSxHQUFHLElBQUksSUFBSUMsRUFBRUQsRUFBRSxPQUFPQyxHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFd2pDLElBQUksQ0FBQyxJQUFJL2xDLEVBQUV1QyxFQUFFeTZGLGNBQWMsR0FBRyxPQUFPaDlGLElBQW1CLFFBQWZBLEVBQUVBLEVBQUVpOUYsYUF6RXFKLE9BeUVoSWo5RixFQUFFd2MsTUF6RXNJLE9BeUUzSHhjLEVBQUV3YyxNQUFXLE9BQU9qYSxPQUFPLEdBQUcsS0FBS0EsRUFBRXdqQyxVQUFLLElBQVN4akMsRUFBRXkyRyxjQUFjQyxhQUFhLEdBQUcsSUFBaUIsR0FBWjEyRyxFQUFFdTZGLFdBQWMsT0FBT3Y2RixPQUFPLEdBQUcsT0FBT0EsRUFBRTY1RSxNQUFNLENBQUM3NUUsRUFBRTY1RSxNQUFNaDlDLE9BQU83OEIsRUFBRUEsRUFBRUEsRUFBRTY1RSxNQUFNLFNBQVMsR0FBRzc1RSxJQUFJRCxFQUFFLE1BQU0sS0FBSyxPQUFPQyxFQUFFNjZGLFNBQVMsQ0FBQyxHQUFHLE9BQU83NkYsRUFBRTY4QixRQUFRNzhCLEVBQUU2OEIsU0FBUzk4QixFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRTY4QixPQUFPNzhCLEVBQUU2NkYsUUFBUWgrRCxPQUFPNzhCLEVBQUU2OEIsT0FBTzc4QixFQUFFQSxFQUFFNjZGLFFBQVEsT0FBTyxLQUFLLFNBQVM4YixHQUFHNTJHLEVBQUVDLEdBQUcsTUFBTSxDQUFDNDJHLFVBQVU3MkcsRUFBRWkvQixNQUFNaC9CLEdBQ3ZlLElBQUk2MkcsR0FBR2xpQixFQUFHcnBCLHVCQUF1QndyQyxHQUFHbmlCLEVBQUdwcEIsd0JBQXdCd3JDLEdBQUcsRUFBRXRyRCxHQUFFLEtBQUt0TyxHQUFFLEtBQUs2dEIsR0FBRSxLQUFLZ3NDLElBQUcsRUFBRyxTQUFTM3NHLEtBQUksTUFBTXpFLE1BQU0rakIsRUFBRSxNQUFPLFNBQVNzdEYsR0FBR2wzRyxFQUFFQyxHQUFHLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSSxJQUFJdkMsRUFBRSxFQUFFQSxFQUFFdUMsRUFBRUksUUFBUTNDLEVBQUVzQyxFQUFFSyxPQUFPM0MsSUFBSSxJQUFJb3ZELEdBQUc5c0QsRUFBRXRDLEdBQUd1QyxFQUFFdkMsSUFBSSxPQUFNLEVBQUcsT0FBTSxFQUMvTyxTQUFTeTVHLEdBQUduM0csRUFBRUMsRUFBRXZDLEVBQUVDLEVBQUV1TCxFQUFFd3pCLEdBQWtJLEdBQS9IczZFLEdBQUd0NkUsRUFBRWd2QixHQUFFenJELEVBQUVBLEVBQUV5NkYsY0FBYyxLQUFLejZGLEVBQUUyeUcsWUFBWSxLQUFLM3lHLEVBQUVveUcsZUFBZSxFQUFFeUUsR0FBR2xzQyxRQUFRLE9BQU81cUUsR0FBRyxPQUFPQSxFQUFFMDZGLGNBQWMwYyxHQUFHQyxHQUFHcjNHLEVBQUV0QyxFQUFFQyxFQUFFdUwsR0FBTWpKLEVBQUVveUcsaUJBQWlCMkUsR0FBRyxDQUFDdDZFLEVBQUUsRUFBRSxFQUFFLENBQW9CLEdBQW5CejhCLEVBQUVveUcsZUFBZSxJQUFPLEdBQUczMUUsR0FBRyxNQUFNNzJCLE1BQU0rakIsRUFBRSxNQUFNOFMsR0FBRyxFQUFFdXVDLEdBQUU3dEIsR0FBRSxLQUFLbjlDLEVBQUUyeUcsWUFBWSxLQUFLa0UsR0FBR2xzQyxRQUFRMHNDLEdBQUd0M0csRUFBRXRDLEVBQUVDLEVBQUV1TCxTQUFTakosRUFBRW95RyxpQkFBaUIyRSxJQUFrRSxHQUE5REYsR0FBR2xzQyxRQUFRMnNDLEdBQUd0M0csRUFBRSxPQUFPbTlDLElBQUcsT0FBT0EsR0FBRXppQyxLQUFLcThGLEdBQUcsRUFBRS9yQyxHQUFFN3RCLEdBQUVzTyxHQUFFLEtBQUt1ckQsSUFBRyxFQUFNaDNHLEVBQUUsTUFBTTRGLE1BQU0rakIsRUFBRSxNQUFNLE9BQU81cEIsRUFDOVosU0FBU294QixLQUFLLElBQUlweEIsRUFBRSxDQUFDMDZGLGNBQWMsS0FBS21ZLFVBQVUsS0FBS0MsVUFBVSxLQUFLNzVELE1BQU0sS0FBS3QrQixLQUFLLE1BQThDLE9BQXhDLE9BQU9zd0QsR0FBRXZmLEdBQUVndkMsY0FBY3p2QixHQUFFanJFLEVBQUVpckUsR0FBRUEsR0FBRXR3RCxLQUFLM2EsRUFBU2lyRSxHQUFFLFNBQVN1c0MsS0FBSyxHQUFHLE9BQU9wNkQsR0FBRSxDQUFDLElBQUlwOUMsRUFBRTByRCxHQUFFNnVDLFVBQVV2NkYsRUFBRSxPQUFPQSxFQUFFQSxFQUFFMDZGLGNBQWMsVUFBVTE2RixFQUFFbzlDLEdBQUV6aUMsS0FBSyxJQUFJMWEsRUFBRSxPQUFPZ3JFLEdBQUV2ZixHQUFFZ3ZDLGNBQWN6dkIsR0FBRXR3RCxLQUFLLEdBQUcsT0FBTzFhLEVBQUVnckUsR0FBRWhyRSxFQUFFbTlDLEdBQUVwOUMsTUFBTSxDQUFDLEdBQUcsT0FBT0EsRUFBRSxNQUFNNkYsTUFBTStqQixFQUFFLE1BQVU1cEIsRUFBRSxDQUFDMDZGLGVBQVB0OUMsR0FBRXA5QyxHQUFxQjA2RixjQUFjbVksVUFBVXoxRCxHQUFFeTFELFVBQVVDLFVBQVUxMUQsR0FBRTAxRCxVQUFVNzVELE1BQU1tRSxHQUFFbkUsTUFBTXQrQixLQUFLLE1BQU0sT0FBT3N3RCxHQUFFdmYsR0FBRWd2QyxjQUFjenZCLEdBQUVqckUsRUFBRWlyRSxHQUFFQSxHQUFFdHdELEtBQUszYSxFQUFFLE9BQU9pckUsR0FDaGUsU0FBU3dzQyxHQUFHejNHLEVBQUVDLEdBQUcsTUFBTSxtQkFBb0JBLEVBQUVBLEVBQUVELEdBQUdDLEVBQ2xELFNBQVN5M0csR0FBRzEzRyxHQUFHLElBQUlDLEVBQUV1M0csS0FBSzk1RyxFQUFFdUMsRUFBRWc1QyxNQUFNLEdBQUcsT0FBT3Y3QyxFQUFFLE1BQU1tSSxNQUFNK2pCLEVBQUUsTUFBTWxzQixFQUFFaTZHLG9CQUFvQjMzRyxFQUFFLElBQUlyQyxFQUFFeS9DLEdBQUVsMEMsRUFBRXZMLEVBQUVtMUcsVUFBVXAyRSxFQUFFaC9CLEVBQUVzMUcsUUFBUSxHQUFHLE9BQU90MkUsRUFBRSxDQUFDLEdBQUcsT0FBT3h6QixFQUFFLENBQUMsSUFBSW1yQixFQUFFbnJCLEVBQUV5UixLQUFLelIsRUFBRXlSLEtBQUsraEIsRUFBRS9oQixLQUFLK2hCLEVBQUUvaEIsS0FBSzBaLEVBQUUxMkIsRUFBRW0xRyxVQUFVNXBHLEVBQUV3ekIsRUFBRWgvQixFQUFFczFHLFFBQVEsS0FBSyxHQUFHLE9BQU85cEcsRUFBRSxDQUFDQSxFQUFFQSxFQUFFeVIsS0FBS2hkLEVBQUVBLEVBQUVrMUcsVUFBVSxJQUFJbHBHLEVBQUUwcUIsRUFBRXFJLEVBQUUsS0FBS3A4QixFQUFFNEksRUFBRSxFQUFFLENBQUMsSUFBSTVMLEVBQUVnRCxFQUFFK3hHLGVBQWUsR0FBRy8wRyxFQUFFMDVHLEdBQUcsQ0FBQyxJQUFJdjVHLEVBQUUsQ0FBQzQwRyxlQUFlL3hHLEVBQUUreEcsZUFBZWUsZUFBZTl5RyxFQUFFOHlHLGVBQWV3RSxPQUFPdDNHLEVBQUVzM0csT0FBT0MsYUFBYXYzRyxFQUFFdTNHLGFBQWFDLFdBQVd4M0csRUFBRXczRyxXQUFXbjlGLEtBQUssTUFBTSxPQUFPaFIsR0FBRzBxQixFQUFFMXFCLEVBQUVsTSxFQUFFaS9CLEVBQUUvK0IsR0FBR2dNLEVBQUVBLEVBQUVnUixLQUFLbGQsRUFBRUgsRUFBRW91RCxHQUFFMm1ELGlCQUM5ZTNtRCxHQUFFMm1ELGVBQWUvMEcsRUFBRW8yRyxHQUFHcDJHLFNBQVMsT0FBT3FNLElBQUlBLEVBQUVBLEVBQUVnUixLQUFLLENBQUMwM0YsZUFBZSxXQUFXZSxlQUFlOXlHLEVBQUU4eUcsZUFBZXdFLE9BQU90M0csRUFBRXMzRyxPQUFPQyxhQUFhdjNHLEVBQUV1M0csYUFBYUMsV0FBV3gzRyxFQUFFdzNHLFdBQVduOUYsS0FBSyxPQUFPODRGLEdBQUduMkcsRUFBRWdELEVBQUU4eUcsZ0JBQWdCejFHLEVBQUUyQyxFQUFFdTNHLGVBQWU3M0csRUFBRU0sRUFBRXczRyxXQUFXOTNHLEVBQUVyQyxFQUFFMkMsRUFBRXMzRyxRQUFRdDNHLEVBQUVBLEVBQUVxYSxXQUFXLE9BQU9yYSxHQUFHQSxJQUFJNEksR0FBRyxPQUFPUyxFQUFFK3lCLEVBQUUvK0IsRUFBRWdNLEVBQUVnUixLQUFLMFosRUFBRXk0QixHQUFHbnZELEVBQUVzQyxFQUFFeTZGLGlCQUFpQjRYLElBQUcsR0FBSXJ5RyxFQUFFeTZGLGNBQWMvOEYsRUFBRXNDLEVBQUU0eUcsVUFBVW4yRSxFQUFFejhCLEVBQUU2eUcsVUFBVW5wRyxFQUFFak0sRUFBRXE2RyxrQkFBa0JwNkcsRUFBRSxNQUFNLENBQUNzQyxFQUFFeTZGLGNBQWNoOUYsRUFBRXM2RyxVQUN4YixTQUFTQyxHQUFHajRHLEdBQUcsSUFBSUMsRUFBRXUzRyxLQUFLOTVHLEVBQUV1QyxFQUFFZzVDLE1BQU0sR0FBRyxPQUFPdjdDLEVBQUUsTUFBTW1JLE1BQU0rakIsRUFBRSxNQUFNbHNCLEVBQUVpNkcsb0JBQW9CMzNHLEVBQUUsSUFBSXJDLEVBQUVELEVBQUVzNkcsU0FBUzl1RyxFQUFFeEwsRUFBRXMxRyxRQUFRdDJFLEVBQUV6OEIsRUFBRXk2RixjQUFjLEdBQUcsT0FBT3h4RixFQUFFLENBQUN4TCxFQUFFczFHLFFBQVEsS0FBSyxJQUFJMytFLEVBQUVuckIsRUFBRUEsRUFBRXlSLEtBQUssR0FBRytoQixFQUFFMThCLEVBQUUwOEIsRUFBRXJJLEVBQUV1akYsUUFBUXZqRixFQUFFQSxFQUFFMVosV0FBVzBaLElBQUluckIsR0FBRzRqRCxHQUFHcHdCLEVBQUV6OEIsRUFBRXk2RixpQkFBaUI0WCxJQUFHLEdBQUlyeUcsRUFBRXk2RixjQUFjaCtELEVBQUUsT0FBT3o4QixFQUFFNnlHLFlBQVk3eUcsRUFBRTR5RyxVQUFVbjJFLEdBQUdoL0IsRUFBRXE2RyxrQkFBa0JyN0UsRUFBRSxNQUFNLENBQUNBLEVBQUUvK0IsR0FDblYsU0FBU3U2RyxHQUFHbDRHLEdBQUcsSUFBSUMsRUFBRW14QixLQUFtTCxNQUE5SyxtQkFBb0JweEIsSUFBSUEsRUFBRUEsS0FBS0MsRUFBRXk2RixjQUFjejZGLEVBQUU0eUcsVUFBVTd5RyxFQUFvRkEsR0FBbEZBLEVBQUVDLEVBQUVnNUMsTUFBTSxDQUFDKzVELFFBQVEsS0FBS2dGLFNBQVMsS0FBS0wsb0JBQW9CRixHQUFHTSxrQkFBa0IvM0csSUFBT2c0RyxTQUFTRyxHQUFHdDVHLEtBQUssS0FBSzZzRCxHQUFFMXJELEdBQVMsQ0FBQ0MsRUFBRXk2RixjQUFjMTZGLEdBQUcsU0FBU280RyxHQUFHcDRHLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFrTyxPQUEvTnFDLEVBQUUsQ0FBQ3lqQyxJQUFJempDLEVBQUVyQixPQUFPc0IsRUFBRW80RyxRQUFRMzZHLEVBQUU0NkcsS0FBSzM2RyxFQUFFZ2QsS0FBSyxNQUFzQixRQUFoQjFhLEVBQUV5ckQsR0FBRWtuRCxjQUFzQjN5RyxFQUFFLENBQUNvMUcsV0FBVyxNQUFNM3BELEdBQUVrbkQsWUFBWTN5RyxFQUFFQSxFQUFFbzFHLFdBQVdyMUcsRUFBRTJhLEtBQUszYSxHQUFtQixRQUFmdEMsRUFBRXVDLEVBQUVvMUcsWUFBb0JwMUcsRUFBRW8xRyxXQUFXcjFHLEVBQUUyYSxLQUFLM2EsR0FBR3JDLEVBQUVELEVBQUVpZCxLQUFLamQsRUFBRWlkLEtBQUszYSxFQUFFQSxFQUFFMmEsS0FBS2hkLEVBQUVzQyxFQUFFbzFHLFdBQVdyMUcsR0FBV0EsRUFDN2QsU0FBU3U0RyxLQUFLLE9BQU9mLEtBQUs5YyxjQUFjLFNBQVM4ZCxHQUFHeDRHLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFHLElBQUl1TCxFQUFFa29CLEtBQUtzNkIsR0FBRTh1QyxXQUFXeDZGLEVBQUVrSixFQUFFd3hGLGNBQWMwZCxHQUFHLEVBQUVuNEcsRUFBRXZDLE9BQUUsT0FBTyxJQUFTQyxFQUFFLEtBQUtBLEdBQUcsU0FBUzg2RyxHQUFHejRHLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFHLElBQUl1TCxFQUFFc3VHLEtBQUs3NUcsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSSsrQixPQUFFLEVBQU8sR0FBRyxPQUFPMGdCLEdBQUUsQ0FBQyxJQUFJL29CLEVBQUUrb0IsR0FBRXM5QyxjQUEwQixHQUFaaCtELEVBQUVySSxFQUFFZ2tGLFFBQVcsT0FBTzE2RyxHQUFHdTVHLEdBQUd2NUcsRUFBRTAyQixFQUFFaWtGLE1BQW1CLFlBQVpGLEdBQUduNEcsRUFBRXZDLEVBQUVnL0IsRUFBRS8rQixHQUFXK3RELEdBQUU4dUMsV0FBV3g2RixFQUFFa0osRUFBRXd4RixjQUFjMGQsR0FBRyxFQUFFbjRHLEVBQUV2QyxFQUFFZy9CLEVBQUUvK0IsR0FBRyxTQUFTKzZHLEdBQUcxNEcsRUFBRUMsR0FBRyxPQUFPdTRHLEdBQUcsSUFBSSxFQUFFeDRHLEVBQUVDLEdBQUcsU0FBUzA0RyxHQUFHMzRHLEVBQUVDLEdBQUcsT0FBT3c0RyxHQUFHLElBQUksRUFBRXo0RyxFQUFFQyxHQUFHLFNBQVMyNEcsR0FBRzU0RyxFQUFFQyxHQUFHLE9BQU93NEcsR0FBRyxFQUFFLEVBQUV6NEcsRUFBRUMsR0FDbmMsU0FBUzQ0RyxHQUFHNzRHLEVBQUVDLEdBQUcsTUFBRyxtQkFBb0JBLEdBQVNELEVBQUVBLElBQUlDLEVBQUVELEdBQUcsV0FBV0MsRUFBRSxRQUFVLE1BQU9BLEdBQXFCRCxFQUFFQSxJQUFJQyxFQUFFMnFFLFFBQVE1cUUsRUFBRSxXQUFXQyxFQUFFMnFFLFFBQVEsWUFBdEUsRUFBNEUsU0FBU2t1QyxHQUFHOTRHLEVBQUVDLEVBQUV2QyxHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFdVgsT0FBTyxDQUFDalYsSUFBSSxLQUFZeTRHLEdBQUcsRUFBRSxFQUFFSSxHQUFHaDZHLEtBQUssS0FBS29CLEVBQUVELEdBQUd0QyxHQUFHLFNBQVNxN0csTUFBTSxTQUFTQyxHQUFHaDVHLEVBQUVDLEdBQTRDLE9BQXpDbXhCLEtBQUtzcEUsY0FBYyxDQUFDMTZGLE9BQUUsSUFBU0MsRUFBRSxLQUFLQSxHQUFVRCxFQUFFLFNBQVNpNUcsR0FBR2o1RyxFQUFFQyxHQUFHLElBQUl2QyxFQUFFODVHLEtBQUt2M0csT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSXRDLEVBQUVELEVBQUVnOUYsY0FBYyxPQUFHLE9BQU8vOEYsR0FBRyxPQUFPc0MsR0FBR2kzRyxHQUFHajNHLEVBQUV0QyxFQUFFLElBQVdBLEVBQUUsSUFBR0QsRUFBRWc5RixjQUFjLENBQUMxNkYsRUFBRUMsR0FBVUQsR0FDL2QsU0FBU2s1RyxHQUFHbDVHLEVBQUVDLEdBQUcsSUFBSXZDLEVBQUU4NUcsS0FBS3YzRyxPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJdEMsRUFBRUQsRUFBRWc5RixjQUFjLE9BQUcsT0FBTy84RixHQUFHLE9BQU9zQyxHQUFHaTNHLEdBQUdqM0csRUFBRXRDLEVBQUUsSUFBV0EsRUFBRSxJQUFHcUMsRUFBRUEsSUFBSXRDLEVBQUVnOUYsY0FBYyxDQUFDMTZGLEVBQUVDLEdBQVVELEdBQUUsU0FBU201RyxHQUFHbjVHLEVBQUVDLEVBQUV2QyxHQUFHLElBQUlDLEVBQUV3ekcsS0FBS0UsR0FBRyxHQUFHMXpHLEVBQUUsR0FBR0EsR0FBRSxXQUFXcUMsR0FBRSxNQUFNcXhHLEdBQUcsR0FBRzF6RyxFQUFFLEdBQUdBLEdBQUUsV0FBVyxJQUFJQSxFQUFFbzVHLEdBQUd0ckMsU0FBU3NyQyxHQUFHdHJDLGNBQVMsSUFBU3hyRSxFQUFFLEtBQUtBLEVBQUUsSUFBSUQsR0FBRSxHQUFJdEMsSUFBSSxRQUFRcTVHLEdBQUd0ckMsU0FBUzl0RSxNQUNqVSxTQUFTdzZHLEdBQUduNEcsRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRXMyRyxLQUFLL3FHLEVBQUUwcUcsR0FBR25vQyxTQUFxQnZpRSxFQUFFLENBQUNtcEcsZUFBZjEwRyxFQUFFdTJHLEdBQUd2MkcsRUFBRXFDLEVBQUVrSixHQUF1QmtxRyxlQUFlbHFHLEVBQUUwdUcsT0FBT2w2RyxFQUFFbTZHLGFBQWEsS0FBS0MsV0FBVyxLQUFLbjlGLEtBQUssTUFBTSxJQUFJK2hCLEVBQUV6OEIsRUFBRSt5RyxRQUE2RSxHQUFyRSxPQUFPdDJFLEVBQUV4ekIsRUFBRXlSLEtBQUt6UixHQUFHQSxFQUFFeVIsS0FBSytoQixFQUFFL2hCLEtBQUsraEIsRUFBRS9oQixLQUFLelIsR0FBR2pKLEVBQUUreUcsUUFBUTlwRyxFQUFFd3pCLEVBQUUxOEIsRUFBRXU2RixVQUFhdjZGLElBQUkwckQsSUFBRyxPQUFPaHZCLEdBQUdBLElBQUlndkIsR0FBRXVyRCxJQUFHLEVBQUcvdEcsRUFBRW1wRyxlQUFlMkUsR0FBR3RyRCxHQUFFMm1ELGVBQWUyRSxPQUFPLENBQUMsR0FBRyxJQUFJaDNHLEVBQUVxeUcsaUJBQWlCLE9BQU8zMUUsR0FBRyxJQUFJQSxFQUFFMjFFLGlCQUEwQyxRQUF4QjMxRSxFQUFFejhCLEVBQUUwM0cscUJBQThCLElBQUksSUFBSXRqRixFQUFFcDBCLEVBQUU4M0csa0JBQWtCcHVHLEVBQUUreUIsRUFBRXJJLEVBQUUzMkIsR0FBbUMsR0FBaEN3TCxFQUFFMnVHLGFBQWFuN0UsRUFBRXh6QixFQUFFNHVHLFdBQVdudUcsRUFBS21qRCxHQUFHbmpELEVBQUUwcUIsR0FBRyxPQUFPLE1BQU0vekIsSUFBYTZ6RyxHQUFHbjBHLEVBQ2xnQnJDLElBQ0EsSUFBSTQ1RyxHQUFHLENBQUM2QixZQUFZN0csR0FBR25sQyxZQUFZOWlFLEdBQUUraUUsV0FBVy9pRSxHQUFFaWpFLFVBQVVqakUsR0FBRWtqRSxvQkFBb0JsakUsR0FBRW1qRSxnQkFBZ0JuakUsR0FBRW9qRSxRQUFRcGpFLEdBQUVxakUsV0FBV3JqRSxHQUFFc2pFLE9BQU90akUsR0FBRXVqRSxTQUFTdmpFLEdBQUVnakUsY0FBY2hqRSxHQUFFK3VHLGFBQWEvdUcsR0FBRWd2RyxpQkFBaUJodkcsR0FBRWl2RyxjQUFjanZHLElBQUc4c0csR0FBRyxDQUFDZ0MsWUFBWTdHLEdBQUdubEMsWUFBWTRyQyxHQUFHM3JDLFdBQVdrbEMsR0FBR2hsQyxVQUFVbXJDLEdBQUdsckMsb0JBQW9CLFNBQVN4dEUsRUFBRUMsRUFBRXZDLEdBQTZDLE9BQTFDQSxFQUFFLE1BQU9BLEVBQWNBLEVBQUV1WCxPQUFPLENBQUNqVixJQUFJLEtBQVl3NEcsR0FBRyxFQUFFLEVBQUVLLEdBQUdoNkcsS0FBSyxLQUFLb0IsRUFBRUQsR0FBR3RDLElBQUkrdkUsZ0JBQWdCLFNBQVN6dEUsRUFBRUMsR0FBRyxPQUFPdTRHLEdBQUcsRUFBRSxFQUFFeDRHLEVBQUVDLElBQUl5dEUsUUFBUSxTQUFTMXRFLEVBQUVDLEdBQUcsSUFBSXZDLEVBQUUwekIsS0FDOWMsT0FEbWRueEIsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUVELEVBQUVBLElBQUl0QyxFQUFFZzlGLGNBQWMsQ0FBQzE2RixFQUNqZ0JDLEdBQVVELEdBQUcydEUsV0FBVyxTQUFTM3RFLEVBQUVDLEVBQUV2QyxHQUFHLElBQUlDLEVBQUV5ekIsS0FBdUssT0FBbEtueEIsT0FBRSxJQUFTdkMsRUFBRUEsRUFBRXVDLEdBQUdBLEVBQUV0QyxFQUFFKzhGLGNBQWMvOEYsRUFBRWsxRyxVQUFVNXlHLEVBQW1GRCxHQUFqRkEsRUFBRXJDLEVBQUVzN0MsTUFBTSxDQUFDKzVELFFBQVEsS0FBS2dGLFNBQVMsS0FBS0wsb0JBQW9CMzNHLEVBQUUrM0csa0JBQWtCOTNHLElBQU8rM0csU0FBU0csR0FBR3Q1RyxLQUFLLEtBQUs2c0QsR0FBRTFyRCxHQUFTLENBQUNyQyxFQUFFKzhGLGNBQWMxNkYsSUFBSTR0RSxPQUFPLFNBQVM1dEUsR0FBNEIsT0FBZEEsRUFBRSxDQUFDNHFFLFFBQVE1cUUsR0FBaEJveEIsS0FBNEJzcEUsY0FBYzE2RixHQUFHNnRFLFNBQVNxcUMsR0FBRzVxQyxjQUFjeXJDLEdBQUdNLGFBQWF6QyxHQUFHMEMsaUJBQWlCLFNBQVN0NUcsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRXc2RyxHQUFHbDRHLEdBQUdyQyxFQUFFRCxFQUFFLEdBQUd3TCxFQUFFeEwsRUFBRSxHQUM5WSxPQURpWmc3RyxJQUFHLFdBQVcsSUFBSWg3RyxFQUFFcTVHLEdBQUd0ckMsU0FBU3NyQyxHQUFHdHJDLGNBQVMsSUFBU3hyRSxFQUFFLEtBQUtBLEVBQUUsSUFBSWlKLEVBQUVsSixHQUFHLFFBQVErMkcsR0FBR3RyQyxTQUM5ZS90RSxLQUFJLENBQUNzQyxFQUFFQyxJQUFXdEMsR0FBRzQ3RyxjQUFjLFNBQVN2NUcsR0FBRyxJQUFJQyxFQUFFaTRHLElBQUcsR0FBSXg2RyxFQUFFdUMsRUFBRSxHQUFVLE9BQVBBLEVBQUVBLEVBQUUsR0FBUyxDQUFDKzRHLEdBQUdHLEdBQUd0NkcsS0FBSyxLQUFLb0IsRUFBRUQsR0FBRyxDQUFDQyxFQUFFRCxJQUFJdEMsS0FBSzI1RyxHQUFHLENBQUMrQixZQUFZN0csR0FBR25sQyxZQUFZNnJDLEdBQUc1ckMsV0FBV2tsQyxHQUFHaGxDLFVBQVVvckMsR0FBR25yQyxvQkFBb0JzckMsR0FBR3JyQyxnQkFBZ0JtckMsR0FBR2xyQyxRQUFRd3JDLEdBQUd2ckMsV0FBVytwQyxHQUFHOXBDLE9BQU8ycUMsR0FBRzFxQyxTQUFTLFdBQVcsT0FBTzZwQyxHQUFHRCxLQUFLbnFDLGNBQWN5ckMsR0FBR00sYUFBYXpDLEdBQUcwQyxpQkFBaUIsU0FBU3Q1RyxFQUFFQyxHQUFHLElBQUl2QyxFQUFFZzZHLEdBQUdELElBQUk5NUcsRUFBRUQsRUFBRSxHQUFHd0wsRUFBRXhMLEVBQUUsR0FBeUcsT0FBdEdpN0csSUFBRyxXQUFXLElBQUlqN0csRUFBRXE1RyxHQUFHdHJDLFNBQVNzckMsR0FBR3RyQyxjQUFTLElBQVN4ckUsRUFBRSxLQUFLQSxFQUFFLElBQUlpSixFQUFFbEosR0FBRyxRQUFRKzJHLEdBQUd0ckMsU0FBUy90RSxLQUFJLENBQUNzQyxFQUFFQyxJQUFXdEMsR0FBRzQ3RyxjQUFjLFNBQVN2NUcsR0FBRyxJQUFJQyxFQUN4Z0J5M0csR0FBR0QsSUFBSS81RyxFQUFFdUMsRUFBRSxHQUFVLE9BQVBBLEVBQUVBLEVBQUUsR0FBUyxDQUFDZzVHLEdBQUdFLEdBQUd0NkcsS0FBSyxLQUFLb0IsRUFBRUQsR0FBRyxDQUFDQyxFQUFFRCxJQUFJdEMsS0FBSzQ1RyxHQUFHLENBQUM4QixZQUFZN0csR0FBR25sQyxZQUFZNnJDLEdBQUc1ckMsV0FBV2tsQyxHQUFHaGxDLFVBQVVvckMsR0FBR25yQyxvQkFBb0JzckMsR0FBR3JyQyxnQkFBZ0JtckMsR0FBR2xyQyxRQUFRd3JDLEdBQUd2ckMsV0FBV3NxQyxHQUFHcnFDLE9BQU8ycUMsR0FBRzFxQyxTQUFTLFdBQVcsT0FBT29xQyxHQUFHUixLQUFLbnFDLGNBQWN5ckMsR0FBR00sYUFBYXpDLEdBQUcwQyxpQkFBaUIsU0FBU3Q1RyxFQUFFQyxHQUFHLElBQUl2QyxFQUFFdTZHLEdBQUdSLElBQUk5NUcsRUFBRUQsRUFBRSxHQUFHd0wsRUFBRXhMLEVBQUUsR0FBeUcsT0FBdEdpN0csSUFBRyxXQUFXLElBQUlqN0csRUFBRXE1RyxHQUFHdHJDLFNBQVNzckMsR0FBR3RyQyxjQUFTLElBQVN4ckUsRUFBRSxLQUFLQSxFQUFFLElBQUlpSixFQUFFbEosR0FBRyxRQUFRKzJHLEdBQUd0ckMsU0FBUy90RSxLQUFJLENBQUNzQyxFQUFFQyxJQUFXdEMsR0FBRzQ3RyxjQUFjLFNBQVN2NUcsR0FBRyxJQUFJQyxFQUFFZzRHLEdBQUdSLElBQUkvNUcsRUFBRXVDLEVBQUUsR0FBVSxPQUFQQSxFQUFFQSxFQUFFLEdBQVMsQ0FBQ2c1RyxHQUFHRSxHQUFHdDZHLEtBQUssS0FDNWZvQixFQUFFRCxHQUFHLENBQUNDLEVBQUVELElBQUl0QyxLQUFLODdHLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQUcsU0FBU0MsR0FBRzM1RyxFQUFFQyxHQUFHLElBQUl2QyxFQUFFazhHLEdBQUcsRUFBRSxLQUFLLEtBQUssR0FBR2w4RyxFQUFFc3ZGLFlBQVksVUFBVXR2RixFQUFFODRCLEtBQUssVUFBVTk0QixFQUFFMDFGLFVBQVVuekYsRUFBRXZDLEVBQUVvL0IsT0FBTzk4QixFQUFFdEMsRUFBRTg4RixVQUFVLEVBQUUsT0FBT3g2RixFQUFFcTFHLFlBQVlyMUcsRUFBRXExRyxXQUFXQyxXQUFXNTNHLEVBQUVzQyxFQUFFcTFHLFdBQVczM0csR0FBR3NDLEVBQUV1MUcsWUFBWXYxRyxFQUFFcTFHLFdBQVczM0csRUFDMVAsU0FBU204RyxHQUFHNzVHLEVBQUVDLEdBQUcsT0FBT0QsRUFBRXlqQyxLQUFLLEtBQUssRUFBRSxJQUFJL2xDLEVBQUVzQyxFQUFFdzJCLEtBQXlFLE9BQU8sUUFBM0V2MkIsRUFBRSxJQUFJQSxFQUFFaTVGLFVBQVV4N0YsRUFBRWtPLGdCQUFnQjNMLEVBQUVtZ0QsU0FBU3gwQyxjQUFjLEtBQUszTCxLQUFtQkQsRUFBRW96RixVQUFVbnpGLEdBQUUsR0FBTyxLQUFLLEVBQUUsT0FBb0QsUUFBN0NBLEVBQUUsS0FBS0QsRUFBRTg1RyxjQUFjLElBQUk3NUcsRUFBRWk1RixTQUFTLEtBQUtqNUYsS0FBWUQsRUFBRW96RixVQUFVbnpGLEdBQUUsR0FBTyxLQUFLLEdBQVksUUFBUSxPQUFNLEdBQ3RSLFNBQVM4NUcsR0FBRy81RyxHQUFHLEdBQUcwNUcsR0FBRyxDQUFDLElBQUl6NUcsRUFBRXc1RyxHQUFHLEdBQUd4NUcsRUFBRSxDQUFDLElBQUl2QyxFQUFFdUMsRUFBRSxJQUFJNDVHLEdBQUc3NUcsRUFBRUMsR0FBRyxDQUFxQixLQUFwQkEsRUFBRWlpRyxHQUFHeGtHLEVBQUV1cEMsZ0JBQXFCNHlFLEdBQUc3NUcsRUFBRUMsR0FBK0MsT0FBM0NELEVBQUV3NkYsV0FBdUIsS0FBYng2RixFQUFFdzZGLFVBQWdCLEVBQUVrZixJQUFHLE9BQUdGLEdBQUd4NUcsR0FBUzI1RyxHQUFHSCxHQUFHOTdHLEdBQUc4N0csR0FBR3g1RyxFQUFFeTVHLEdBQUd2WCxHQUFHamlHLEVBQUU4NEYsaUJBQWlCLzRGLEVBQUV3NkYsV0FBdUIsS0FBYng2RixFQUFFdzZGLFVBQWdCLEVBQUVrZixJQUFHLEVBQUdGLEdBQUd4NUcsR0FBRyxTQUFTZzZHLEdBQUdoNkcsR0FBRyxJQUFJQSxFQUFFQSxFQUFFODhCLE9BQU8sT0FBTzk4QixHQUFHLElBQUlBLEVBQUV5akMsS0FBSyxJQUFJempDLEVBQUV5akMsS0FBSyxLQUFLempDLEVBQUV5akMsS0FBS3pqQyxFQUFFQSxFQUFFODhCLE9BQU8wOEUsR0FBR3g1RyxFQUM1VCxTQUFTaTZHLEdBQUdqNkcsR0FBRyxHQUFHQSxJQUFJdzVHLEdBQUcsT0FBTSxFQUFHLElBQUlFLEdBQUcsT0FBT00sR0FBR2g2RyxHQUFHMDVHLElBQUcsR0FBRyxFQUFHLElBQUl6NUcsRUFBRUQsRUFBRXcyQixLQUFLLEdBQUcsSUFBSXgyQixFQUFFeWpDLEtBQUssU0FBU3hqQyxHQUFHLFNBQVNBLElBQUk4aEcsR0FBRzloRyxFQUFFRCxFQUFFMDJHLGVBQWUsSUFBSXoyRyxFQUFFdzVHLEdBQUd4NUcsR0FBRzA1RyxHQUFHMzVHLEVBQUVDLEdBQUdBLEVBQUVpaUcsR0FBR2ppRyxFQUFFZ25DLGFBQW1CLEdBQU4reUUsR0FBR2g2RyxHQUFNLEtBQUtBLEVBQUV5akMsSUFBSSxDQUFnRCxLQUE3QnpqQyxFQUFFLFFBQXBCQSxFQUFFQSxFQUFFMDZGLGVBQXlCMTZGLEVBQUUyNkYsV0FBVyxNQUFXLE1BQU05MEYsTUFBTStqQixFQUFFLE1BQU01cEIsRUFBRSxDQUFpQixJQUFoQkEsRUFBRUEsRUFBRWluQyxZQUFnQmhuQyxFQUFFLEVBQUVELEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUVrNUYsU0FBUyxDQUFDLElBQUl4N0YsRUFBRXNDLEVBQUVrYSxLQUFLLEdBOUZwRyxPQThGdUd4YyxFQUFPLENBQUMsR0FBRyxJQUFJdUMsRUFBRSxDQUFDdzVHLEdBQUd2WCxHQUFHbGlHLEVBQUVpbkMsYUFBYSxNQUFNam5DLEVBQUVDLFFBOUY3SixNQThGc0t2QyxHQTlGL0ksT0E4RnVKQSxHQTlGL0osT0E4RnVLQSxHQUFRdUMsSUFBSUQsRUFBRUEsRUFBRWluQyxZQUFZd3lFLEdBQUcsV0FBV0EsR0FBR0QsR0FBR3RYLEdBQUdsaUcsRUFBRW96RixVQUFVbnNELGFBQWEsS0FBSyxPQUFNLEVBQ2hmLFNBQVNpekUsS0FBS1QsR0FBR0QsR0FBRyxLQUFLRSxJQUFHLEVBQUcsSUFBSVMsR0FBR3ZsQixFQUFHbHBCLGtCQUFrQjRtQyxJQUFHLEVBQUcsU0FBUy9rRCxHQUFFdnRELEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFHc0MsRUFBRTY1RSxNQUFNLE9BQU85NUUsRUFBRTgxRyxHQUFHNzFHLEVBQUUsS0FBS3ZDLEVBQUVDLEdBQUdrNEcsR0FBRzUxRyxFQUFFRCxFQUFFODVFLE1BQU1wOEUsRUFBRUMsR0FBRyxTQUFTeThHLEdBQUdwNkcsRUFBRUMsRUFBRXZDLEVBQUVDLEVBQUV1TCxHQUFHeEwsRUFBRUEsRUFBRXV3QyxPQUFPLElBQUl2UixFQUFFejhCLEVBQUVneEMsSUFBOEIsT0FBMUJraEUsR0FBR2x5RyxFQUFFaUosR0FBR3ZMLEVBQUV3NUcsR0FBR24zRyxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRSsrQixFQUFFeHpCLEdBQU0sT0FBT2xKLEdBQUlzeUcsSUFBNEdyeUcsRUFBRXU2RixXQUFXLEVBQUVqdEMsR0FBRXZ0RCxFQUFFQyxFQUFFdEMsRUFBRXVMLEdBQVVqSixFQUFFNjVFLFFBQXJJNzVFLEVBQUUyeUcsWUFBWTV5RyxFQUFFNHlHLFlBQVkzeUcsRUFBRXU2RixZQUFZLElBQUl4NkYsRUFBRXF5RyxnQkFBZ0JucEcsSUFBSWxKLEVBQUVxeUcsZUFBZSxHQUFHZ0ksR0FBR3I2RyxFQUFFQyxFQUFFaUosSUFDdFUsU0FBU294RyxHQUFHdDZHLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsRUFBRXd6QixHQUFHLEdBQUcsT0FBTzE4QixFQUFFLENBQUMsSUFBSXEwQixFQUFFMzJCLEVBQUU4NEIsS0FBSyxNQUFHLG1CQUFvQm5DLEdBQUlrbUYsR0FBR2xtRixTQUFJLElBQVNBLEVBQUUwWSxjQUFjLE9BQU9ydkMsRUFBRXl2RSxjQUFTLElBQVN6dkUsRUFBRXF2QyxlQUFzRC9zQyxFQUFFMDFHLEdBQUdoNEcsRUFBRTg0QixLQUFLLEtBQUs3NEIsRUFBRSxLQUFLc0MsRUFBRXpCLEtBQUtrK0IsSUFBS3VVLElBQUloeEMsRUFBRWd4QyxJQUFJanhDLEVBQUU4OEIsT0FBTzc4QixFQUFTQSxFQUFFNjVFLE1BQU05NUUsSUFBMUdDLEVBQUV3akMsSUFBSSxHQUFHeGpDLEVBQUV1MkIsS0FBS25DLEVBQUVtbUYsR0FBR3g2RyxFQUFFQyxFQUFFbzBCLEVBQUUxMkIsRUFBRXVMLEVBQUV3ekIsSUFBdUYsT0FBVnJJLEVBQUVyMEIsRUFBRTg1RSxNQUFTNXdFLEVBQUV3ekIsSUFBSXh6QixFQUFFbXJCLEVBQUVxaUYsZUFBMEJoNUcsRUFBRSxRQUFkQSxFQUFFQSxFQUFFeXZFLFNBQW1CenZFLEVBQUVvckcsSUFBSzUvRixFQUFFdkwsSUFBSXFDLEVBQUVpeEMsTUFBTWh4QyxFQUFFZ3hDLEtBQVlvcEUsR0FBR3I2RyxFQUFFQyxFQUFFeThCLElBQUd6OEIsRUFBRXU2RixXQUFXLEdBQUV4NkYsRUFBRXcxRyxHQUFHbmhGLEVBQUUxMkIsSUFBS3N6QyxJQUFJaHhDLEVBQUVneEMsSUFBSWp4QyxFQUFFODhCLE9BQU83OEIsRUFBU0EsRUFBRTY1RSxNQUFNOTVFLEdBQ25iLFNBQVN3NkcsR0FBR3g2RyxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEVBQUV3ekIsR0FBRyxPQUFPLE9BQU8xOEIsR0FBRzhvRyxHQUFHOW9HLEVBQUUwMkcsY0FBYy80RyxJQUFJcUMsRUFBRWl4QyxNQUFNaHhDLEVBQUVneEMsTUFBTXFoRSxJQUFHLEVBQUdwcEcsRUFBRXd6QixJQUFJejhCLEVBQUVveUcsZUFBZXJ5RyxFQUFFcXlHLGVBQWVnSSxHQUFHcjZHLEVBQUVDLEVBQUV5OEIsSUFBSSs5RSxHQUFHejZHLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFKytCLEdBQUcsU0FBU2crRSxHQUFHMTZHLEVBQUVDLEdBQUcsSUFBSXZDLEVBQUV1QyxFQUFFZ3hDLEtBQU8sT0FBT2p4QyxHQUFHLE9BQU90QyxHQUFHLE9BQU9zQyxHQUFHQSxFQUFFaXhDLE1BQU12ekMsS0FBRXVDLEVBQUV1NkYsV0FBVyxLQUFJLFNBQVNpZ0IsR0FBR3o2RyxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEdBQUcsSUFBSXd6QixFQUFFcmtCLEdBQUUzYSxHQUFHb3hHLEdBQUcvaUQsR0FBRTZlLFFBQTRDLE9BQXBDbHVDLEVBQUVxeUUsR0FBRzl1RyxFQUFFeThCLEdBQUd5MUUsR0FBR2x5RyxFQUFFaUosR0FBR3hMLEVBQUV5NUcsR0FBR24zRyxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRSsrQixFQUFFeHpCLEdBQU0sT0FBT2xKLEdBQUlzeUcsSUFBNEdyeUcsRUFBRXU2RixXQUFXLEVBQUVqdEMsR0FBRXZ0RCxFQUFFQyxFQUFFdkMsRUFBRXdMLEdBQVVqSixFQUFFNjVFLFFBQXJJNzVFLEVBQUUyeUcsWUFBWTV5RyxFQUFFNHlHLFlBQVkzeUcsRUFBRXU2RixZQUFZLElBQUl4NkYsRUFBRXF5RyxnQkFBZ0JucEcsSUFBSWxKLEVBQUVxeUcsZUFBZSxHQUFHZ0ksR0FBR3I2RyxFQUFFQyxFQUFFaUosSUFDM2IsU0FBU3l4RyxHQUFHMzZHLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsR0FBRyxHQUFHbVAsR0FBRTNhLEdBQUcsQ0FBQyxJQUFJZy9CLEdBQUUsRUFBRzR5RSxHQUFHcnZHLFFBQVF5OEIsR0FBRSxFQUFXLEdBQVJ5MUUsR0FBR2x5RyxFQUFFaUosR0FBTSxPQUFPakosRUFBRW16RixVQUFVLE9BQU9wekYsSUFBSUEsRUFBRXU2RixVQUFVLEtBQUt0NkYsRUFBRXM2RixVQUFVLEtBQUt0NkYsRUFBRXU2RixXQUFXLEdBQUc4WixHQUFHcjBHLEVBQUV2QyxFQUFFQyxHQUFHZzNHLEdBQUcxMEcsRUFBRXZDLEVBQUVDLEVBQUV1TCxHQUFHdkwsR0FBRSxPQUFRLEdBQUcsT0FBT3FDLEVBQUUsQ0FBQyxJQUFJcTBCLEVBQUVwMEIsRUFBRW16RixVQUFVenBGLEVBQUUxSixFQUFFeTJHLGNBQWNyaUYsRUFBRTRLLE1BQU10MUIsRUFBRSxJQUFJckosRUFBRSt6QixFQUFFNE4sUUFBUTNrQyxFQUFFSSxFQUFFNjJHLFlBQVksaUJBQWtCajNHLEdBQUcsT0FBT0EsRUFBRUEsRUFBRWkxRyxHQUFHajFHLEdBQXdCQSxFQUFFeXhHLEdBQUc5dUcsRUFBekIzQyxFQUFFK2EsR0FBRTNhLEdBQUdveEcsR0FBRy9pRCxHQUFFNmUsU0FBbUIsSUFBSW50RSxFQUFFQyxFQUFFK3ZDLHlCQUF5QnR1QyxFQUFFLG1CQUFvQjFCLEdBQUcsbUJBQW9CNDJCLEVBQUV1Z0Ysd0JBQXdCejFHLEdBQUcsbUJBQW9CazFCLEVBQUVxZ0Ysa0NBQ3RkLG1CQUFvQnJnRixFQUFFb2dGLDRCQUE0QjlxRyxJQUFJaE0sR0FBRzJDLElBQUloRCxJQUFJazNHLEdBQUd2MEcsRUFBRW8wQixFQUFFMTJCLEVBQUVMLEdBQUdvMUcsSUFBRyxFQUFHLElBQUk5Z0csRUFBRTNSLEVBQUV5NkYsY0FBY3JtRSxFQUFFZ2dCLE1BQU16aUMsRUFBRTJoRyxHQUFHdHpHLEVBQUV0QyxFQUFFMDJCLEVBQUVuckIsR0FBRzVJLEVBQUVMLEVBQUV5NkYsY0FBYy93RixJQUFJaE0sR0FBR2lVLElBQUl0UixHQUFHdXFFLEdBQUVELFNBQVM4bkMsSUFBSSxtQkFBb0JqMUcsSUFBSXEyRyxHQUFHN3pHLEVBQUV2QyxFQUFFRCxFQUFFRSxHQUFHMkMsRUFBRUwsRUFBRXk2RixnQkFBZ0Ivd0YsRUFBRStvRyxJQUFJMEIsR0FBR24wRyxFQUFFdkMsRUFBRWlNLEVBQUVoTSxFQUFFaVUsRUFBRXRSLEVBQUVoRCxLQUFLNkIsR0FBRyxtQkFBb0JrMUIsRUFBRXdnRiwyQkFBMkIsbUJBQW9CeGdGLEVBQUV5Z0YscUJBQXFCLG1CQUFvQnpnRixFQUFFeWdGLG9CQUFvQnpnRixFQUFFeWdGLHFCQUFxQixtQkFBb0J6Z0YsRUFBRXdnRiwyQkFBMkJ4Z0YsRUFBRXdnRiw2QkFBNkIsbUJBQ3pleGdGLEVBQUUwZ0Ysb0JBQW9COTBHLEVBQUV1NkYsV0FBVyxLQUFLLG1CQUFvQm5tRSxFQUFFMGdGLG9CQUFvQjkwRyxFQUFFdTZGLFdBQVcsR0FBR3Y2RixFQUFFeTJHLGNBQWMvNEcsRUFBRXNDLEVBQUV5NkYsY0FBY3A2RixHQUFHK3pCLEVBQUU0SyxNQUFNdGhDLEVBQUUwMkIsRUFBRWdnQixNQUFNL3pDLEVBQUUrekIsRUFBRTROLFFBQVEza0MsRUFBRUssRUFBRWdNLElBQUksbUJBQW9CMHFCLEVBQUUwZ0Ysb0JBQW9COTBHLEVBQUV1NkYsV0FBVyxHQUFHNzhGLEdBQUUsUUFBUzAyQixFQUFFcDBCLEVBQUVtekYsVUFBVThmLEdBQUdsekcsRUFBRUMsR0FBRzBKLEVBQUUxSixFQUFFeTJHLGNBQWNyaUYsRUFBRTRLLE1BQU1oL0IsRUFBRXUyQixPQUFPdjJCLEVBQUUrc0YsWUFBWXJqRixFQUFFK25HLEdBQUd6eEcsRUFBRXUyQixLQUFLN3NCLEdBQUdySixFQUFFK3pCLEVBQUU0TixRQUF3QixpQkFBaEIza0MsRUFBRUksRUFBRTYyRyxjQUFpQyxPQUFPajNHLEVBQUVBLEVBQUVpMUcsR0FBR2oxRyxHQUF3QkEsRUFBRXl4RyxHQUFHOXVHLEVBQXpCM0MsRUFBRSthLEdBQUUzYSxHQUFHb3hHLEdBQUcvaUQsR0FBRTZlLFVBQWlEenJFLEVBQUUsbUJBQWhDMUIsRUFBRUMsRUFBRSt2QywyQkFBbUQsbUJBQ2plcFosRUFBRXVnRiwwQkFBMEIsbUJBQW9CdmdGLEVBQUVxZ0Ysa0NBQWtDLG1CQUFvQnJnRixFQUFFb2dGLDRCQUE0QjlxRyxJQUFJaE0sR0FBRzJDLElBQUloRCxJQUFJazNHLEdBQUd2MEcsRUFBRW8wQixFQUFFMTJCLEVBQUVMLEdBQUdvMUcsSUFBRyxFQUFHcHlHLEVBQUVMLEVBQUV5NkYsY0FBY3JtRSxFQUFFZ2dCLE1BQU0vekMsRUFBRWl6RyxHQUFHdHpHLEVBQUV0QyxFQUFFMDJCLEVBQUVuckIsR0FBRzBJLEVBQUUzUixFQUFFeTZGLGNBQWMvd0YsSUFBSWhNLEdBQUcyQyxJQUFJc1IsR0FBR2k1RCxHQUFFRCxTQUFTOG5DLElBQUksbUJBQW9CajFHLElBQUlxMkcsR0FBRzd6RyxFQUFFdkMsRUFBRUQsRUFBRUUsR0FBR2lVLEVBQUUzUixFQUFFeTZGLGdCQUFnQmo5RixFQUFFaTFHLElBQUkwQixHQUFHbjBHLEVBQUV2QyxFQUFFaU0sRUFBRWhNLEVBQUUyQyxFQUFFc1IsRUFBRXRVLEtBQUs2QixHQUFHLG1CQUFvQmsxQixFQUFFdW1GLDRCQUE0QixtQkFBb0J2bUYsRUFBRXdtRixzQkFBc0IsbUJBQW9CeG1GLEVBQUV3bUYscUJBQXFCeG1GLEVBQUV3bUYsb0JBQW9CbDlHLEVBQ3pmaVUsRUFBRXRVLEdBQUcsbUJBQW9CKzJCLEVBQUV1bUYsNEJBQTRCdm1GLEVBQUV1bUYsMkJBQTJCajlHLEVBQUVpVSxFQUFFdFUsSUFBSSxtQkFBb0IrMkIsRUFBRXltRixxQkFBcUI3NkcsRUFBRXU2RixXQUFXLEdBQUcsbUJBQW9Cbm1FLEVBQUV1Z0YsMEJBQTBCMzBHLEVBQUV1NkYsV0FBVyxPQUFPLG1CQUFvQm5tRSxFQUFFeW1GLG9CQUFvQm54RyxJQUFJM0osRUFBRTAyRyxlQUFlcDJHLElBQUlOLEVBQUUwNkYsZ0JBQWdCejZGLEVBQUV1NkYsV0FBVyxHQUFHLG1CQUFvQm5tRSxFQUFFdWdGLHlCQUF5QmpyRyxJQUFJM0osRUFBRTAyRyxlQUFlcDJHLElBQUlOLEVBQUUwNkYsZ0JBQWdCejZGLEVBQUV1NkYsV0FBVyxLQUFLdjZGLEVBQUV5MkcsY0FBYy80RyxFQUFFc0MsRUFBRXk2RixjQUFjOW9GLEdBQUd5aUIsRUFBRTRLLE1BQU10aEMsRUFBRTAyQixFQUFFZ2dCLE1BQU16aUMsRUFBRXlpQixFQUFFNE4sUUFBUTNrQyxFQUFFSyxFQUFFRixJQUNsZixtQkFBb0I0MkIsRUFBRXltRixvQkFBb0JueEcsSUFBSTNKLEVBQUUwMkcsZUFBZXAyRyxJQUFJTixFQUFFMDZGLGdCQUFnQno2RixFQUFFdTZGLFdBQVcsR0FBRyxtQkFBb0JubUUsRUFBRXVnRix5QkFBeUJqckcsSUFBSTNKLEVBQUUwMkcsZUFBZXAyRyxJQUFJTixFQUFFMDZGLGdCQUFnQno2RixFQUFFdTZGLFdBQVcsS0FBSzc4RixHQUFFLEdBQUksT0FBT285RyxHQUFHLzZHLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFKytCLEVBQUV4ekIsR0FDNU8sU0FBUzZ4RyxHQUFHLzZHLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsRUFBRXd6QixHQUFHZytFLEdBQUcxNkcsRUFBRUMsR0FBRyxJQUFJbzBCLEVBQUUsSUFBaUIsR0FBWnAwQixFQUFFdTZGLFdBQWMsSUFBSTc4RixJQUFJMDJCLEVBQUUsT0FBT25yQixHQUFHc21HLEdBQUd2dkcsRUFBRXZDLEdBQUUsR0FBSTI4RyxHQUFHcjZHLEVBQUVDLEVBQUV5OEIsR0FBRy8rQixFQUFFc0MsRUFBRW16RixVQUFVK21CLEdBQUd2dkMsUUFBUTNxRSxFQUFFLElBQUkwSixFQUFFMHFCLEdBQUcsbUJBQW9CMzJCLEVBQUVzOUcseUJBQXlCLEtBQUtyOUcsRUFBRXN3QyxTQUEySSxPQUFsSWh1QyxFQUFFdTZGLFdBQVcsRUFBRSxPQUFPeDZGLEdBQUdxMEIsR0FBR3AwQixFQUFFNjVFLE1BQU0rN0IsR0FBRzUxRyxFQUFFRCxFQUFFODVFLE1BQU0sS0FBS3A5QyxHQUFHejhCLEVBQUU2NUUsTUFBTSs3QixHQUFHNTFHLEVBQUUsS0FBSzBKLEVBQUUreUIsSUFBSTZ3QixHQUFFdnRELEVBQUVDLEVBQUUwSixFQUFFK3lCLEdBQUd6OEIsRUFBRXk2RixjQUFjLzhGLEVBQUUwMkMsTUFBTW5yQyxHQUFHc21HLEdBQUd2dkcsRUFBRXZDLEdBQUUsR0FBV3VDLEVBQUU2NUUsTUFBTSxTQUFTbWhDLEdBQUdqN0csR0FBRyxJQUFJQyxFQUFFRCxFQUFFb3pGLFVBQVVuekYsRUFBRWk3RyxlQUFlL0wsR0FBR252RyxFQUFFQyxFQUFFaTdHLGVBQWVqN0csRUFBRWk3RyxpQkFBaUJqN0csRUFBRWdpQyxTQUFTaGlDLEVBQUVnaUMsU0FBU2t0RSxHQUFHbnZHLEVBQUVDLEVBQUVnaUMsU0FBUSxHQUFJbTBFLEdBQUdwMkcsRUFBRUMsRUFBRXM4RixlQUNwZSxJQU9vWDRlLEdBQU1DLEdBQUdDLEdBUHpYM29HLEdBQUcsQ0FBQ2lvRixXQUFXLEtBQUsyZ0IsVUFBVSxHQUNsQyxTQUFTQyxHQUFHdjdHLEVBQUVDLEVBQUV2QyxHQUFHLElBQStDaU0sRUFBM0NoTSxFQUFFc0MsRUFBRXpCLEtBQUswSyxFQUFFakosRUFBRTY1RyxhQUFhcDlFLEVBQUV2eUIsR0FBRXlnRSxRQUFRdjJDLEdBQUUsRUFBcU4sSUFBL00xcUIsRUFBRSxJQUFpQixHQUFaMUosRUFBRXU2RixjQUFpQjd3RixFQUFFLElBQU8sRUFBRit5QixLQUFPLE9BQU8xOEIsR0FBRyxPQUFPQSxFQUFFMDZGLGdCQUFnQi93RixHQUFHMHFCLEdBQUUsRUFBR3AwQixFQUFFdTZGLFlBQVksSUFBSSxPQUFPeDZGLEdBQUcsT0FBT0EsRUFBRTA2RixvQkFBZSxJQUFTeHhGLEVBQUVzeUcsV0FBVSxJQUFLdHlHLEVBQUV1eUcsNkJBQTZCLytFLEdBQUcsR0FBR292QixHQUFFM2hELEdBQUksRUFBRnV5QixHQUFRLE9BQU8xOEIsRUFBRSxDQUE0QixRQUEzQixJQUFTa0osRUFBRXN5RyxVQUFVekIsR0FBRzk1RyxHQUFNbzBCLEVBQUUsQ0FBNkMsR0FBNUNBLEVBQUVuckIsRUFBRXN5RyxVQUFTdHlHLEVBQUUwc0csR0FBRyxLQUFLajRHLEVBQUUsRUFBRSxPQUFRbS9CLE9BQU83OEIsRUFBSyxJQUFZLEVBQVBBLEVBQUV6QixNQUFRLElBQUl3QixFQUFFLE9BQU9DLEVBQUV5NkYsY0FBY3o2RixFQUFFNjVFLE1BQU1BLE1BQU03NUUsRUFBRTY1RSxNQUFNNXdFLEVBQUU0d0UsTUFBTTk1RSxFQUFFLE9BQU9BLEdBQUdBLEVBQUU4OEIsT0FBTzV6QixFQUFFbEosRUFBRUEsRUFBRTg2RixRQUMzYSxPQURtYnA5RixFQUFFazRHLEdBQUd2aEYsRUFBRTEyQixFQUFFRCxFQUFFLE9BQVFvL0IsT0FDamY3OEIsRUFBRWlKLEVBQUU0eEYsUUFBUXA5RixFQUFFdUMsRUFBRXk2RixjQUFjaG9GLEdBQUd6UyxFQUFFNjVFLE1BQU01d0UsRUFBU3hMLEVBQW9DLE9BQWxDQyxFQUFFdUwsRUFBRW9tQyxTQUFTcnZDLEVBQUV5NkYsY0FBYyxLQUFZejZGLEVBQUU2NUUsTUFBTWc4QixHQUFHNzFHLEVBQUUsS0FBS3RDLEVBQUVELEdBQUcsR0FBRyxPQUFPc0MsRUFBRTA2RixjQUFjLENBQXVCLEdBQVovOEYsR0FBVnFDLEVBQUVBLEVBQUU4NUUsT0FBVWdoQixRQUFXem1FLEVBQUUsQ0FBZ0QsR0FBL0NuckIsRUFBRUEsRUFBRXN5RyxVQUFTOTlHLEVBQUU4M0csR0FBR3gxRyxFQUFFQSxFQUFFODVHLGVBQWdCaDlFLE9BQU83OEIsRUFBSyxJQUFZLEVBQVBBLEVBQUV6QixRQUFVNjFCLEVBQUUsT0FBT3AwQixFQUFFeTZGLGNBQWN6NkYsRUFBRTY1RSxNQUFNQSxNQUFNNzVFLEVBQUU2NUUsU0FBVTk1RSxFQUFFODVFLE1BQU8sSUFBSXA4RSxFQUFFbzhFLE1BQU16bEQsRUFBRSxPQUFPQSxHQUFHQSxFQUFFeUksT0FBT3AvQixFQUFFMjJCLEVBQUVBLEVBQUV5bUUsUUFBOEYsT0FBdEZuOUYsRUFBRTYzRyxHQUFHNzNHLEVBQUV1TCxJQUFLNHpCLE9BQU83OEIsRUFBRXZDLEVBQUVvOUYsUUFBUW45RixFQUFFRCxFQUFFdzBHLG9CQUFvQixFQUFFanlHLEVBQUV5NkYsY0FBY2hvRixHQUFHelMsRUFBRTY1RSxNQUFNcDhFLEVBQVNDLEVBQW9ELE9BQWxERCxFQUFFbTRHLEdBQUc1MUcsRUFBRUQsRUFBRTg1RSxNQUFNNXdFLEVBQUVvbUMsU0FBUzV4QyxHQUFHdUMsRUFBRXk2RixjQUFjLEtBQVl6NkYsRUFBRTY1RSxNQUNuZnA4RSxFQUFZLEdBQVZzQyxFQUFFQSxFQUFFODVFLE1BQVN6bEQsRUFBRSxDQUE4RSxHQUE3RUEsRUFBRW5yQixFQUFFc3lHLFVBQVN0eUcsRUFBRTBzRyxHQUFHLEtBQUtqNEcsRUFBRSxFQUFFLE9BQVFtL0IsT0FBTzc4QixFQUFFaUosRUFBRTR3RSxNQUFNOTVFLEVBQUUsT0FBT0EsSUFBSUEsRUFBRTg4QixPQUFPNXpCLEdBQU0sSUFBWSxFQUFQakosRUFBRXpCLE1BQVEsSUFBSXdCLEVBQUUsT0FBT0MsRUFBRXk2RixjQUFjejZGLEVBQUU2NUUsTUFBTUEsTUFBTTc1RSxFQUFFNjVFLE1BQU01d0UsRUFBRTR3RSxNQUFNOTVFLEVBQUUsT0FBT0EsR0FBR0EsRUFBRTg4QixPQUFPNXpCLEVBQUVsSixFQUFFQSxFQUFFODZGLFFBQW9ILE9BQTVHcDlGLEVBQUVrNEcsR0FBR3ZoRixFQUFFMTJCLEVBQUVELEVBQUUsT0FBUW8vQixPQUFPNzhCLEVBQUVpSixFQUFFNHhGLFFBQVFwOUYsRUFBRUEsRUFBRTg4RixXQUFXLEVBQUV0eEYsRUFBRWdwRyxvQkFBb0IsRUFBRWp5RyxFQUFFeTZGLGNBQWNob0YsR0FBR3pTLEVBQUU2NUUsTUFBTTV3RSxFQUFTeEwsRUFBdUIsT0FBckJ1QyxFQUFFeTZGLGNBQWMsS0FBWXo2RixFQUFFNjVFLE1BQU0rN0IsR0FBRzUxRyxFQUFFRCxFQUFFa0osRUFBRW9tQyxTQUFTNXhDLEdBQzFYLFNBQVNnK0csR0FBRzE3RyxFQUFFQyxHQUFHRCxFQUFFcXlHLGVBQWVweUcsSUFBSUQsRUFBRXF5RyxlQUFlcHlHLEdBQUcsSUFBSXZDLEVBQUVzQyxFQUFFdTZGLFVBQVUsT0FBTzc4RixHQUFHQSxFQUFFMjBHLGVBQWVweUcsSUFBSXZDLEVBQUUyMEcsZUFBZXB5RyxHQUFHZ3lHLEdBQUdqeUcsRUFBRTg4QixPQUFPNzhCLEdBQUcsU0FBUzA3RyxHQUFHMzdHLEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsRUFBRXd6QixHQUFHLElBQUlySSxFQUFFcjBCLEVBQUUwNkYsY0FBYyxPQUFPcm1FLEVBQUVyMEIsRUFBRTA2RixjQUFjLENBQUNraEIsWUFBWTM3RyxFQUFFNDdHLFVBQVUsS0FBS0MsbUJBQW1CLEVBQUU5MEQsS0FBS3JwRCxFQUFFbytHLEtBQUtyK0csRUFBRXMrRyxlQUFlLEVBQUVDLFNBQVMveUcsRUFBRW1zRyxXQUFXMzRFLElBQUlySSxFQUFFdW5GLFlBQVkzN0csRUFBRW8wQixFQUFFd25GLFVBQVUsS0FBS3huRixFQUFFeW5GLG1CQUFtQixFQUFFem5GLEVBQUUyeUIsS0FBS3JwRCxFQUFFMDJCLEVBQUUwbkYsS0FBS3IrRyxFQUFFMjJCLEVBQUUybkYsZUFBZSxFQUFFM25GLEVBQUU0bkYsU0FBUy95RyxFQUFFbXJCLEVBQUVnaEYsV0FBVzM0RSxHQUN6YixTQUFTdy9FLEdBQUdsOEcsRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRXNDLEVBQUU2NUcsYUFBYTV3RyxFQUFFdkwsRUFBRWc1RyxZQUFZajZFLEVBQUUvK0IsRUFBRW8rRyxLQUFxQyxHQUFoQ3h1RCxHQUFFdnRELEVBQUVDLEVBQUV0QyxFQUFFMnhDLFNBQVM1eEMsR0FBa0IsSUFBTyxHQUF0QkMsRUFBRXdNLEdBQUV5Z0UsVUFBcUJqdEUsRUFBSSxFQUFGQSxFQUFJLEVBQUVzQyxFQUFFdTZGLFdBQVcsT0FBTyxDQUFDLEdBQUcsT0FBT3g2RixHQUFHLElBQWlCLEdBQVpBLEVBQUV3NkYsV0FBY3g2RixFQUFFLElBQUlBLEVBQUVDLEVBQUU2NUUsTUFBTSxPQUFPOTVFLEdBQUcsQ0FBQyxHQUFHLEtBQUtBLEVBQUV5akMsSUFBSSxPQUFPempDLEVBQUUwNkYsZUFBZWdoQixHQUFHMTdHLEVBQUV0QyxRQUFRLEdBQUcsS0FBS3NDLEVBQUV5akMsSUFBSWk0RSxHQUFHMTdHLEVBQUV0QyxRQUFRLEdBQUcsT0FBT3NDLEVBQUU4NUUsTUFBTSxDQUFDOTVFLEVBQUU4NUUsTUFBTWg5QyxPQUFPOThCLEVBQUVBLEVBQUVBLEVBQUU4NUUsTUFBTSxTQUFTLEdBQUc5NUUsSUFBSUMsRUFBRSxNQUFNRCxFQUFFLEtBQUssT0FBT0EsRUFBRTg2RixTQUFTLENBQUMsR0FBRyxPQUFPOTZGLEVBQUU4OEIsUUFBUTk4QixFQUFFODhCLFNBQVM3OEIsRUFBRSxNQUFNRCxFQUFFQSxFQUFFQSxFQUFFODhCLE9BQU85OEIsRUFBRTg2RixRQUFRaCtELE9BQU85OEIsRUFBRTg4QixPQUFPOThCLEVBQUVBLEVBQUU4NkYsUUFBUW45RixHQUFHLEVBQVMsR0FBUG11RCxHQUFFM2hELEdBQUV4TSxHQUFNLElBQVksRUFBUHNDLEVBQUV6QixNQUFReUIsRUFBRXk2RixjQUNoZixVQUFVLE9BQU94eEYsR0FBRyxJQUFLLFdBQXFCLElBQVZ4TCxFQUFFdUMsRUFBRTY1RSxNQUFVNXdFLEVBQUUsS0FBSyxPQUFPeEwsR0FBaUIsUUFBZHNDLEVBQUV0QyxFQUFFNjhGLFlBQW9CLE9BQU94aEYsR0FBRy9ZLEtBQUtrSixFQUFFeEwsR0FBR0EsRUFBRUEsRUFBRW85RixRQUFZLFFBQUpwOUYsRUFBRXdMLElBQVlBLEVBQUVqSixFQUFFNjVFLE1BQU03NUUsRUFBRTY1RSxNQUFNLE9BQU81d0UsRUFBRXhMLEVBQUVvOUYsUUFBUXA5RixFQUFFbzlGLFFBQVEsTUFBTTZnQixHQUFHMTdHLEdBQUUsRUFBR2lKLEVBQUV4TCxFQUFFZy9CLEVBQUV6OEIsRUFBRW8xRyxZQUFZLE1BQU0sSUFBSyxZQUE2QixJQUFqQjMzRyxFQUFFLEtBQUt3TCxFQUFFakosRUFBRTY1RSxNQUFVNzVFLEVBQUU2NUUsTUFBTSxLQUFLLE9BQU81d0UsR0FBRyxDQUFlLEdBQUcsUUFBakJsSixFQUFFa0osRUFBRXF4RixZQUF1QixPQUFPeGhGLEdBQUcvWSxHQUFHLENBQUNDLEVBQUU2NUUsTUFBTTV3RSxFQUFFLE1BQU1sSixFQUFFa0osRUFBRTR4RixRQUFRNXhGLEVBQUU0eEYsUUFBUXA5RixFQUFFQSxFQUFFd0wsRUFBRUEsRUFBRWxKLEVBQUUyN0csR0FBRzE3RyxHQUFFLEVBQUd2QyxFQUFFLEtBQUtnL0IsRUFBRXo4QixFQUFFbzFHLFlBQVksTUFBTSxJQUFLLFdBQVdzRyxHQUFHMTdHLEdBQUUsRUFBRyxLQUFLLFVBQUssRUFBT0EsRUFBRW8xRyxZQUFZLE1BQU0sUUFBUXAxRyxFQUFFeTZGLGNBQWMsS0FBSyxPQUFPejZGLEVBQUU2NUUsTUFDL2YsU0FBU3VnQyxHQUFHcjZHLEVBQUVDLEVBQUV2QyxHQUFHLE9BQU9zQyxJQUFJQyxFQUFFNHlGLGFBQWE3eUYsRUFBRTZ5RixjQUFjLElBQUlsMUYsRUFBRXNDLEVBQUVveUcsZUFBNEIsR0FBYixJQUFJMTBHLEdBQUcrMUcsR0FBRy8xRyxHQUFNc0MsRUFBRWl5RyxvQkFBb0J4MEcsRUFBRSxPQUFPLEtBQUssR0FBRyxPQUFPc0MsR0FBR0MsRUFBRTY1RSxRQUFROTVFLEVBQUU4NUUsTUFBTSxNQUFNajBFLE1BQU0rakIsRUFBRSxNQUFNLEdBQUcsT0FBTzNwQixFQUFFNjVFLE1BQU0sQ0FBNEMsSUFBakNwOEUsRUFBRTgzRyxHQUFaeDFHLEVBQUVDLEVBQUU2NUUsTUFBYTk1RSxFQUFFODVHLGNBQWM3NUcsRUFBRTY1RSxNQUFNcDhFLEVBQU1BLEVBQUVvL0IsT0FBTzc4QixFQUFFLE9BQU9ELEVBQUU4NkYsU0FBUzk2RixFQUFFQSxFQUFFODZGLFNBQVFwOUYsRUFBRUEsRUFBRW85RixRQUFRMGEsR0FBR3gxRyxFQUFFQSxFQUFFODVHLGVBQWdCaDlFLE9BQU83OEIsRUFBRXZDLEVBQUVvOUYsUUFBUSxLQUFLLE9BQU83NkYsRUFBRTY1RSxNQUs1VCxTQUFTcWlDLEdBQUduOEcsRUFBRUMsR0FBRyxPQUFPRCxFQUFFaThHLFVBQVUsSUFBSyxTQUFTaDhHLEVBQUVELEVBQUUrN0csS0FBSyxJQUFJLElBQUlyK0csRUFBRSxLQUFLLE9BQU91QyxHQUFHLE9BQU9BLEVBQUVzNkYsWUFBWTc4RixFQUFFdUMsR0FBR0EsRUFBRUEsRUFBRTY2RixRQUFRLE9BQU9wOUYsRUFBRXNDLEVBQUUrN0csS0FBSyxLQUFLcitHLEVBQUVvOUYsUUFBUSxLQUFLLE1BQU0sSUFBSyxZQUFZcDlGLEVBQUVzQyxFQUFFKzdHLEtBQUssSUFBSSxJQUFJcCtHLEVBQUUsS0FBSyxPQUFPRCxHQUFHLE9BQU9BLEVBQUU2OEYsWUFBWTU4RixFQUFFRCxHQUFHQSxFQUFFQSxFQUFFbzlGLFFBQVEsT0FBT245RixFQUFFc0MsR0FBRyxPQUFPRCxFQUFFKzdHLEtBQUsvN0csRUFBRSs3RyxLQUFLLEtBQUsvN0csRUFBRSs3RyxLQUFLamhCLFFBQVEsS0FBS245RixFQUFFbTlGLFFBQVEsTUFDL1csU0FBU3NoQixHQUFHcDhHLEVBQUVDLEVBQUV2QyxHQUFHLElBQUlDLEVBQUVzQyxFQUFFNjVHLGFBQWEsT0FBTzc1RyxFQUFFd2pDLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLE9BQU8sS0FBSyxLQUFLLEVBQUUsT0FBT3ByQixHQUFFcFksRUFBRXUyQixPQUFPMDRFLEtBQUssS0FBSyxLQUFLLEVBQUUsT0FBT3FILEtBQUsvckMsR0FBRUssSUFBR0wsR0FBRXplLEtBQUdydUQsRUFBRXVDLEVBQUVtekYsV0FBWThuQixpQkFBaUJ4OUcsRUFBRXVrQyxRQUFRdmtDLEVBQUV3OUcsZUFBZXg5RyxFQUFFdzlHLGVBQWUsTUFBTSxPQUFPbDdHLEdBQUcsT0FBT0EsRUFBRTg1RSxRQUFRbWdDLEdBQUdoNkcsS0FBS0EsRUFBRXU2RixXQUFXLEdBQVMsS0FBSyxLQUFLLEVBQUVpYyxHQUFHeDJHLEdBQUd2QyxFQUFFeTRHLEdBQUdELEdBQUd0ckMsU0FBUyxJQUFJMWhFLEVBQUVqSixFQUFFdTJCLEtBQUssR0FBRyxPQUFPeDJCLEdBQUcsTUFBTUMsRUFBRW16RixVQUFVZ29CLEdBQUdwN0csRUFBRUMsRUFBRWlKLEVBQUV2TCxFQUFFRCxHQUFHc0MsRUFBRWl4QyxNQUFNaHhDLEVBQUVneEMsTUFBTWh4QyxFQUFFdTZGLFdBQVcsU0FBUyxDQUFDLElBQUk3OEYsRUFBRSxDQUFDLEdBQUcsT0FBT3NDLEVBQUVtekYsVUFBVSxNQUFNdnRGLE1BQU0rakIsRUFBRSxNQUN4Z0IsT0FBTyxLQUFzQixHQUFqQjVwQixFQUFFbTJHLEdBQUdILEdBQUdwckMsU0FBWXF2QyxHQUFHaDZHLEdBQUcsQ0FBQ3RDLEVBQUVzQyxFQUFFbXpGLFVBQVVscUYsRUFBRWpKLEVBQUV1MkIsS0FBSyxJQUFJa0csRUFBRXo4QixFQUFFeTJHLGNBQThCLE9BQWhCLzRHLEVBQUUya0csSUFBSXJpRyxFQUFFdEMsRUFBRTRrRyxJQUFJN2xFLEVBQVN4ekIsR0FBRyxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssUUFBUXV6QixHQUFFLE9BQU85K0IsR0FBRyxNQUFNLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSXFDLEVBQUUsRUFBRUEsRUFBRW02RixHQUFHOTVGLE9BQU9MLElBQUl5OEIsR0FBRTA5RCxHQUFHbjZGLEdBQUdyQyxHQUFHLE1BQU0sSUFBSyxTQUFTOCtCLEdBQUUsUUFBUTkrQixHQUFHLE1BQU0sSUFBSyxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU84K0IsR0FBRSxRQUFROStCLEdBQUc4K0IsR0FBRSxPQUFPOStCLEdBQUcsTUFBTSxJQUFLLE9BQU84K0IsR0FBRSxRQUFROStCLEdBQUc4K0IsR0FBRSxTQUFTOStCLEdBQUcsTUFBTSxJQUFLLFVBQVU4K0IsR0FBRSxTQUFTOStCLEdBQUcsTUFBTSxJQUFLLFFBQVEwNUYsR0FBRzE1RixFQUFFKytCLEdBQUdELEdBQUUsVUFBVTkrQixHQUFHcWpHLEdBQUd0akcsRUFBRSxZQUFZLE1BQU0sSUFBSyxTQUFTQyxFQUFFdzVGLGNBQzNlLENBQUNrbEIsY0FBYzMvRSxFQUFFNC9FLFVBQVU3L0UsR0FBRSxVQUFVOStCLEdBQUdxakcsR0FBR3RqRyxFQUFFLFlBQVksTUFBTSxJQUFLLFdBQVcwNkYsR0FBR3o2RixFQUFFKytCLEdBQUdELEdBQUUsVUFBVTkrQixHQUFHcWpHLEdBQUd0akcsRUFBRSxZQUEyQixJQUFJLElBQUkyMkIsS0FBdkJ3c0UsR0FBRzMzRixFQUFFd3pCLEdBQUcxOEIsRUFBRSxLQUFrQjA4QixFQUFFLEdBQUdBLEVBQUV4OUIsZUFBZW0xQixHQUFHLENBQUMsSUFBSTFxQixFQUFFK3lCLEVBQUVySSxHQUFHLGFBQWFBLEVBQUUsaUJBQWtCMXFCLEVBQUVoTSxFQUFFb3NDLGNBQWNwZ0MsSUFBSTNKLEVBQUUsQ0FBQyxXQUFXMkosSUFBSSxpQkFBa0JBLEdBQUdoTSxFQUFFb3NDLGNBQWMsR0FBR3BnQyxJQUFJM0osRUFBRSxDQUFDLFdBQVcsR0FBRzJKLElBQUlncEYsRUFBR3p6RixlQUFlbTFCLElBQUksTUFBTTFxQixHQUFHcTNGLEdBQUd0akcsRUFBRTIyQixHQUFHLE9BQU9uckIsR0FBRyxJQUFLLFFBQVF1dEYsR0FBRzk0RixHQUFHZzZGLEdBQUdoNkYsRUFBRSsrQixHQUFFLEdBQUksTUFBTSxJQUFLLFdBQVcrNUQsR0FBRzk0RixHQUFHMjZGLEdBQUczNkYsR0FBRyxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsTUFBTSxRQUFRLG1CQUFvQisrQixFQUFFNi9FLFVBQzFmNStHLEVBQUU2K0csUUFBUXZiLElBQUl2akcsRUFBRXNDLEVBQUVDLEVBQUUyeUcsWUFBWWwxRyxFQUFFLE9BQU9BLElBQUl1QyxFQUFFdTZGLFdBQVcsT0FBTyxDQUF1WSxPQUF0WW5tRSxFQUFFLElBQUkzMkIsRUFBRXc3RixTQUFTeDdGLEVBQUVBLEVBQUVrbUMsY0FBYzVqQyxJQUFJK2dHLEtBQUsvZ0csRUFBRXc0RixHQUFHdHZGLElBQUlsSixJQUFJK2dHLEdBQUcsV0FBVzczRixJQUFHbEosRUFBRXEwQixFQUFFeVEsY0FBYyxRQUFTZytDLFVBQVUscUJBQXVCOWlGLEVBQUVBLEVBQUVrcUMsWUFBWWxxQyxFQUFFKzRGLGFBQWEsaUJBQWtCcDdGLEVBQUU2bUYsR0FBR3hrRixFQUFFcTBCLEVBQUV5USxjQUFjNTdCLEVBQUUsQ0FBQ3M3RSxHQUFHN21GLEVBQUU2bUYsTUFBTXhrRixFQUFFcTBCLEVBQUV5USxjQUFjNTdCLEdBQUcsV0FBV0EsSUFBSW1yQixFQUFFcjBCLEVBQUVyQyxFQUFFMitHLFNBQVNqb0YsRUFBRWlvRixVQUFTLEVBQUczK0csRUFBRWdtQyxPQUFPdFAsRUFBRXNQLEtBQUtobUMsRUFBRWdtQyxRQUFRM2pDLEVBQUVxMEIsRUFBRW9vRixnQkFBZ0J6OEcsRUFBRWtKLEdBQUdsSixFQUFFc2lHLElBQUlyaUcsRUFBRUQsRUFBRXVpRyxJQUFJNWtHLEVBQUV3OUcsR0FBR243RyxFQUFFQyxHQUFTQSxFQUFFbXpGLFVBQVVwekYsRUFBRXEwQixFQUFFeXNFLEdBQUc1M0YsRUFBRXZMLEdBQVV1TCxHQUFHLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRdXpCLEdBQUUsT0FDOWZ6OEIsR0FBRzJKLEVBQUVoTSxFQUFFLE1BQU0sSUFBSyxRQUFRLElBQUssUUFBUSxJQUFJZ00sRUFBRSxFQUFFQSxFQUFFd3dGLEdBQUc5NUYsT0FBT3NKLElBQUk4eUIsR0FBRTA5RCxHQUFHeHdGLEdBQUczSixHQUFHMkosRUFBRWhNLEVBQUUsTUFBTSxJQUFLLFNBQVM4K0IsR0FBRSxRQUFRejhCLEdBQUcySixFQUFFaE0sRUFBRSxNQUFNLElBQUssTUFBTSxJQUFLLFFBQVEsSUFBSyxPQUFPOCtCLEdBQUUsUUFBUXo4QixHQUFHeThCLEdBQUUsT0FBT3o4QixHQUFHMkosRUFBRWhNLEVBQUUsTUFBTSxJQUFLLE9BQU84K0IsR0FBRSxRQUFRejhCLEdBQUd5OEIsR0FBRSxTQUFTejhCLEdBQUcySixFQUFFaE0sRUFBRSxNQUFNLElBQUssVUFBVTgrQixHQUFFLFNBQVN6OEIsR0FBRzJKLEVBQUVoTSxFQUFFLE1BQU0sSUFBSyxRQUFRMDVGLEdBQUdyM0YsRUFBRXJDLEdBQUdnTSxFQUFFcXRGLEdBQUdoM0YsRUFBRXJDLEdBQUc4K0IsR0FBRSxVQUFVejhCLEdBQUdnaEcsR0FBR3RqRyxFQUFFLFlBQVksTUFBTSxJQUFLLFNBQVNpTSxFQUFFa3VGLEdBQUc3M0YsRUFBRXJDLEdBQUcsTUFBTSxJQUFLLFNBQVNxQyxFQUFFbTNGLGNBQWMsQ0FBQ2tsQixjQUFjMStHLEVBQUUyK0csVUFBVTN5RyxFQUFFN0ssRUFBRSxHQUFHbkIsRUFBRSxDQUFDVyxXQUFNLElBQVNtK0IsR0FBRSxVQUFVejhCLEdBQUdnaEcsR0FBR3RqRyxFQUFFLFlBQVksTUFBTSxJQUFLLFdBQVcwNkYsR0FBR3A0RixFQUN0Z0JyQyxHQUFHZ00sRUFBRXd1RixHQUFHbjRGLEVBQUVyQyxHQUFHOCtCLEdBQUUsVUFBVXo4QixHQUFHZ2hHLEdBQUd0akcsRUFBRSxZQUFZLE1BQU0sUUFBUWlNLEVBQUVoTSxFQUFFa2pHLEdBQUczM0YsRUFBRVMsR0FBRyxJQUFJckosRUFBRXFKLEVBQUUsSUFBSSt5QixLQUFLcDhCLEVBQUUsR0FBR0EsRUFBRXBCLGVBQWV3OUIsR0FBRyxDQUFDLElBQUlwL0IsRUFBRWdELEVBQUVvOEIsR0FBRyxVQUFVQSxFQUFFcWpFLEdBQUcvL0YsRUFBRTFDLEdBQUcsNEJBQTRCby9CLEVBQXVCLE9BQXBCcC9CLEVBQUVBLEVBQUVBLEVBQUUwbkMsWUFBTyxJQUFnQjJ6RCxHQUFHMzRGLEVBQUUxQyxHQUFJLGFBQWFvL0IsRUFBRSxpQkFBa0JwL0IsR0FBRyxhQUFhNEwsR0FBRyxLQUFLNUwsSUFBSTA3RixHQUFHaDVGLEVBQUUxQyxHQUFHLGlCQUFrQkEsR0FBRzA3RixHQUFHaDVGLEVBQUUsR0FBRzFDLEdBQUcsbUNBQW1Dby9CLEdBQUcsNkJBQTZCQSxHQUFHLGNBQWNBLElBQUlpMkQsRUFBR3p6RixlQUFldzlCLEdBQUcsTUFBTXAvQixHQUFHMGpHLEdBQUd0akcsRUFBRWcvQixHQUFHLE1BQU1wL0IsR0FBR3UzRixFQUFHNzBGLEVBQUUwOEIsRUFBRXAvQixFQUFFKzJCLElBQUksT0FBT25yQixHQUFHLElBQUssUUFBUXV0RixHQUFHejJGLEdBQUcyM0YsR0FBRzMzRixFQUFFckMsR0FBRSxHQUNuZixNQUFNLElBQUssV0FBVzg0RixHQUFHejJGLEdBQUdzNEYsR0FBR3Q0RixHQUFHLE1BQU0sSUFBSyxTQUFTLE1BQU1yQyxFQUFFVyxPQUFPMEIsRUFBRThtQyxhQUFhLFFBQVEsR0FBR3l2RCxHQUFHNTRGLEVBQUVXLFFBQVEsTUFBTSxJQUFLLFNBQVMwQixFQUFFczhHLFdBQVczK0csRUFBRTIrRyxTQUFtQixPQUFWNStHLEVBQUVDLEVBQUVXLE9BQWN5NUYsR0FBRy8zRixJQUFJckMsRUFBRTIrRyxTQUFTNStHLEdBQUUsR0FBSSxNQUFNQyxFQUFFdTVGLGNBQWNhLEdBQUcvM0YsSUFBSXJDLEVBQUUyK0csU0FBUzMrRyxFQUFFdTVGLGNBQWEsR0FBSSxNQUFNLFFBQVEsbUJBQW9CdnRGLEVBQUU0eUcsVUFBVXY4RyxFQUFFdzhHLFFBQVF2YixJQUFJWSxHQUFHMzRGLEVBQUV2TCxLQUFLc0MsRUFBRXU2RixXQUFXLEdBQUcsT0FBT3Y2RixFQUFFZ3hDLE1BQU1oeEMsRUFBRXU2RixXQUFXLEtBQUssT0FBTyxLQUFLLEtBQUssRUFBRSxHQUFHeDZGLEdBQUcsTUFBTUMsRUFBRW16RixVQUFVaW9CLEdBQUdyN0csRUFBRUMsRUFBRUQsRUFBRTAyRyxjQUFjLzRHLE9BQU8sQ0FBQyxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPc0MsRUFBRW16RixVQUFVLE1BQU12dEYsTUFBTStqQixFQUFFLE1BQ3ZmbHNCLEVBQUV5NEcsR0FBR0QsR0FBR3RyQyxTQUFTdXJDLEdBQUdILEdBQUdwckMsU0FBU3F2QyxHQUFHaDZHLElBQUl2QyxFQUFFdUMsRUFBRW16RixVQUFVejFGLEVBQUVzQyxFQUFFeTJHLGNBQWNoNUcsRUFBRTRrRyxJQUFJcmlHLEVBQUV2QyxFQUFFeTdGLFlBQVl4N0YsSUFBSXNDLEVBQUV1NkYsV0FBVyxNQUFLOThGLEdBQUcsSUFBSUEsRUFBRXc3RixTQUFTeDdGLEVBQUVBLEVBQUVrbUMsZUFBZXlCLGVBQWUxbkMsSUFBSzJrRyxJQUFJcmlHLEVBQUVBLEVBQUVtekYsVUFBVTExRixHQUFHLE9BQU8sS0FBSyxLQUFLLEdBQTBCLE9BQXZCOHNFLEdBQUVyZ0UsSUFBR3hNLEVBQUVzQyxFQUFFeTZGLGNBQWlCLElBQWlCLEdBQVp6NkYsRUFBRXU2RixZQUFxQnY2RixFQUFFb3lHLGVBQWUzMEcsRUFBRXVDLElBQUV2QyxFQUFFLE9BQU9DLEVBQUVBLEdBQUUsRUFBRyxPQUFPcUMsT0FBRSxJQUFTQyxFQUFFeTJHLGNBQWM4RSxVQUFVdkIsR0FBR2g2RyxJQUFzQnRDLEVBQUUsUUFBcEJ1TCxFQUFFbEosRUFBRTA2RixlQUF5Qmg5RixHQUFHLE9BQU93TCxHQUFzQixRQUFsQkEsRUFBRWxKLEVBQUU4NUUsTUFBTWdoQixXQUFtQyxRQUFoQnArRCxFQUFFejhCLEVBQUVzMUcsY0FBc0J0MUcsRUFBRXMxRyxZQUFZcnNHLEVBQUVBLEVBQUVvc0csV0FBVzU0RSxJQUFJejhCLEVBQUVzMUcsWUFBWXQxRyxFQUFFbzFHLFdBQ3RmbnNHLEVBQUVBLEVBQUVvc0csV0FBVyxNQUFNcHNHLEVBQUVzeEYsVUFBVSxJQUFROThGLElBQUlDLEdBQUcsSUFBWSxFQUFQc0MsRUFBRXpCLFFBQVcsT0FBT3dCLElBQUcsSUFBS0MsRUFBRXkyRyxjQUFjK0UsNEJBQTRCLElBQWUsRUFBVnR4RyxHQUFFeWdFLFNBQVdqZixLQUFJK3dELEtBQUsvd0QsR0FBRWd4RCxLQUFZaHhELEtBQUkrd0QsSUFBSS93RCxLQUFJZ3hELEtBQUdoeEQsR0FBRWl4RCxJQUFHLElBQUlDLElBQUksT0FBTzd3RCxLQUFJOHdELEdBQUc5d0QsR0FBRUMsSUFBRzh3RCxHQUFHL3dELEdBQUU2d0QsUUFBUW4vRyxHQUFHQyxLQUFFc0MsRUFBRXU2RixXQUFXLEdBQVMsTUFBSyxLQUFLLEVBQUUsT0FBTytiLEtBQVcsS0FBSyxLQUFLLEdBQUcsT0FBT3ZFLEdBQUcveEcsR0FBRyxLQUFLLEtBQUssR0FBRyxPQUFPb1ksR0FBRXBZLEVBQUV1MkIsT0FBTzA0RSxLQUFLLEtBQUssS0FBSyxHQUEwQixHQUF2QjFrQyxHQUFFcmdFLElBQXdCLFFBQXJCeE0sRUFBRXNDLEVBQUV5NkYsZUFBMEIsT0FBTyxLQUEwQyxHQUFyQ3h4RixFQUFFLElBQWlCLEdBQVpqSixFQUFFdTZGLFdBQStCLFFBQWpCOTlELEVBQUUvK0IsRUFBRWsrRyxZQUFzQixHQUFHM3lHLEVBQUVpekcsR0FBR3grRyxHQUFFLFFBQVMsR0FBR2d1RCxLQUFJK3dELElBQUksT0FBTzE4RyxHQUFHLElBQzllLEdBRG1mQSxFQUFFdzZGLFdBQ2pmLElBQUk5OUQsRUFBRXo4QixFQUFFNjVFLE1BQU0sT0FBT3A5QyxHQUFHLENBQVMsR0FBRyxRQUFYMThCLEVBQUUrWSxHQUFHMmpCLElBQWUsQ0FBeUosSUFBeEp6OEIsRUFBRXU2RixXQUFXLEdBQUcyaEIsR0FBR3grRyxHQUFFLEdBQW9CLFFBQWhCdUwsRUFBRWxKLEVBQUU0eUcsZUFBdUIzeUcsRUFBRTJ5RyxZQUFZMXBHLEVBQUVqSixFQUFFdTZGLFdBQVcsR0FBRyxPQUFPNzhGLEVBQUUwM0csYUFBYXAxRyxFQUFFczFHLFlBQVksTUFBTXQxRyxFQUFFbzFHLFdBQVcxM0csRUFBRTAzRyxXQUFlMTNHLEVBQUVzQyxFQUFFNjVFLE1BQU0sT0FBT244RSxHQUFPKytCLEVBQUVoL0IsR0FBTndMLEVBQUV2TCxHQUFRNjhGLFdBQVcsRUFBRXR4RixFQUFFb3NHLFdBQVcsS0FBS3BzRyxFQUFFcXNHLFlBQVksS0FBS3JzRyxFQUFFbXNHLFdBQVcsS0FBbUIsUUFBZHIxRyxFQUFFa0osRUFBRXF4RixZQUFvQnJ4RixFQUFFZ3BHLG9CQUFvQixFQUFFaHBHLEVBQUVtcEcsZUFBZTMxRSxFQUFFeHpCLEVBQUU0d0UsTUFBTSxLQUFLNXdFLEVBQUV3dEcsY0FBYyxLQUFLeHRHLEVBQUV3eEYsY0FBYyxLQUFLeHhGLEVBQUUwcEcsWUFBWSxLQUFLMXBHLEVBQUUycEYsYUFBYSxPQUFPM3BGLEVBQUVncEcsb0JBQW9CbHlHLEVBQUVreUcsb0JBQzNlaHBHLEVBQUVtcEcsZUFBZXJ5RyxFQUFFcXlHLGVBQWVucEcsRUFBRTR3RSxNQUFNOTVFLEVBQUU4NUUsTUFBTTV3RSxFQUFFd3RHLGNBQWMxMkcsRUFBRTAyRyxjQUFjeHRHLEVBQUV3eEYsY0FBYzE2RixFQUFFMDZGLGNBQWN4eEYsRUFBRTBwRyxZQUFZNXlHLEVBQUU0eUcsWUFBWWwyRSxFQUFFMThCLEVBQUU2eUYsYUFBYTNwRixFQUFFMnBGLGFBQWEsT0FBT24yRCxFQUFFLEtBQUssQ0FBQzIxRSxlQUFlMzFFLEVBQUUyMUUsZUFBZUQsYUFBYTExRSxFQUFFMDFFLGFBQWFLLFdBQVcvMUUsRUFBRSsxRSxhQUFhOTBHLEVBQUVBLEVBQUVtOUYsUUFBMkIsT0FBbkJodkMsR0FBRTNoRCxHQUFZLEVBQVZBLEdBQUV5Z0UsUUFBVSxHQUFVM3FFLEVBQUU2NUUsTUFBTXA5QyxFQUFFQSxFQUFFbytELGFBQWEsQ0FBQyxJQUFJNXhGLEVBQUUsR0FBVyxRQUFSbEosRUFBRStZLEdBQUcyakIsS0FBYSxHQUFHejhCLEVBQUV1NkYsV0FBVyxHQUFHdHhGLEdBQUUsRUFBbUIsUUFBaEJ4TCxFQUFFc0MsRUFBRTR5RyxlQUF1QjN5RyxFQUFFMnlHLFlBQVlsMUcsRUFBRXVDLEVBQUV1NkYsV0FBVyxHQUFHMmhCLEdBQUd4K0csR0FBRSxHQUFJLE9BQU9BLEVBQUVvK0csTUFBTSxXQUFXcCtHLEVBQUVzK0csV0FBV3YvRSxFQUFFNjlELFVBQVUsT0FDbmUsUUFEMGV0NkYsRUFDcGdCQSxFQUFFbzFHLFdBQVcxM0csRUFBRTAzRyxjQUFzQnAxRyxFQUFFcTFHLFdBQVcsTUFBTSxVQUFVLEVBQUVwRSxLQUFLdnpHLEVBQUVtK0csbUJBQW1CbitHLEVBQUVxK0csZ0JBQWdCLEVBQUV0K0csSUFBSXVDLEVBQUV1NkYsV0FBVyxHQUFHdHhGLEdBQUUsRUFBR2l6RyxHQUFHeCtHLEdBQUUsR0FBSXNDLEVBQUVveUcsZUFBZXB5RyxFQUFFaXlHLG9CQUFvQngwRyxFQUFFLEdBQUdDLEVBQUVpK0csYUFBYWwvRSxFQUFFbytELFFBQVE3NkYsRUFBRTY1RSxNQUFNNzVFLEVBQUU2NUUsTUFBTXA5QyxJQUFhLFFBQVRoL0IsRUFBRUMsRUFBRXFwRCxNQUFjdHBELEVBQUVvOUYsUUFBUXArRCxFQUFFejhCLEVBQUU2NUUsTUFBTXA5QyxFQUFFLytCLEVBQUVxcEQsS0FBS3RxQixHQUFHLE9BQU8sT0FBTy8rQixFQUFFbytHLE1BQU0sSUFBSXArRyxFQUFFcStHLGlCQUFpQnIrRyxFQUFFcStHLGVBQWU5SyxLQUFLLEtBQUt4ekcsRUFBRUMsRUFBRW8rRyxLQUFLcCtHLEVBQUVrK0csVUFBVW4rRyxFQUFFQyxFQUFFbytHLEtBQUtyK0csRUFBRW85RixRQUFRbjlGLEVBQUUwM0csV0FBV3AxRyxFQUFFbzFHLFdBQVcxM0csRUFBRW0rRyxtQkFBbUI1SyxLQUFLeHpHLEVBQUVvOUYsUUFBUSxLQUFLNzZGLEVBQUVrSyxHQUFFeWdFLFFBQVE5ZSxHQUFFM2hELEdBQUVqQixFQUFJLEVBQUZqSixFQUFJLEVBQUksRUFBRkEsR0FBS3ZDLEdBQUcsS0FBSyxNQUFNbUksTUFBTStqQixFQUFFLElBQ3JnQjNwQixFQUFFd2pDLE1BQU8sU0FBU3U1RSxHQUFHaDlHLEdBQUcsT0FBT0EsRUFBRXlqQyxLQUFLLEtBQUssRUFBRXByQixHQUFFclksRUFBRXcyQixPQUFPMDRFLEtBQUssSUFBSWp2RyxFQUFFRCxFQUFFdzZGLFVBQVUsT0FBUyxLQUFGdjZGLEdBQVFELEVBQUV3NkYsV0FBYSxLQUFIdjZGLEVBQVEsR0FBR0QsR0FBRyxLQUFLLEtBQUssRUFBK0IsR0FBN0J1MkcsS0FBSy9yQyxHQUFFSyxJQUFHTCxHQUFFemUsSUFBb0IsSUFBTyxJQUF4QjlyRCxFQUFFRCxFQUFFdzZGLFlBQXdCLE1BQU0zMEYsTUFBTStqQixFQUFFLE1BQTZCLE9BQXZCNXBCLEVBQUV3NkYsV0FBYSxLQUFIdjZGLEVBQVEsR0FBVUQsRUFBRSxLQUFLLEVBQUUsT0FBT3kyRyxHQUFHejJHLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT3dxRSxHQUFFcmdFLElBQW1CLE1BQWhCbEssRUFBRUQsRUFBRXc2RixZQUFrQng2RixFQUFFdzZGLFdBQWEsS0FBSHY2RixFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT3dxRSxHQUFFcmdFLElBQUcsS0FBSyxLQUFLLEVBQUUsT0FBT29zRyxLQUFLLEtBQUssS0FBSyxHQUFHLE9BQU92RSxHQUFHaHlHLEdBQUcsS0FBSyxRQUFRLE9BQU8sTUFBTSxTQUFTaTlHLEdBQUdqOUcsRUFBRUMsR0FBRyxNQUFNLENBQUMzQixNQUFNMEIsRUFBRW11QixPQUFPbHVCLEVBQUU2RixNQUFNc3dGLEdBQUduMkYsSUFqQnZkazdHLEdBQUcsU0FBU243RyxFQUFFQyxHQUFHLElBQUksSUFBSXZDLEVBQUV1QyxFQUFFNjVFLE1BQU0sT0FBT3A4RSxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFK2xDLEtBQUssSUFBSS9sQyxFQUFFK2xDLElBQUl6akMsRUFBRSttQyxZQUFZcnBDLEVBQUUwMUYsZ0JBQWdCLEdBQUcsSUFBSTExRixFQUFFK2xDLEtBQUssT0FBTy9sQyxFQUFFbzhFLE1BQU0sQ0FBQ3A4RSxFQUFFbzhFLE1BQU1oOUMsT0FBT3AvQixFQUFFQSxFQUFFQSxFQUFFbzhFLE1BQU0sU0FBUyxHQUFHcDhFLElBQUl1QyxFQUFFLE1BQU0sS0FBSyxPQUFPdkMsRUFBRW85RixTQUFTLENBQUMsR0FBRyxPQUFPcDlGLEVBQUVvL0IsUUFBUXAvQixFQUFFby9CLFNBQVM3OEIsRUFBRSxPQUFPdkMsRUFBRUEsRUFBRW8vQixPQUFPcC9CLEVBQUVvOUYsUUFBUWgrRCxPQUFPcC9CLEVBQUVvL0IsT0FBT3AvQixFQUFFQSxFQUFFbzlGLFVBQ2hTc2dCLEdBQUcsU0FBU3A3RyxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEdBQUcsSUFBSXd6QixFQUFFMThCLEVBQUUwMkcsY0FBYyxHQUFHaDZFLElBQUkvK0IsRUFBRSxDQUFDLElBQXNXZ00sRUFBRXJKLEVBQXBXK3pCLEVBQUVwMEIsRUFBRW16RixVQUFnQyxPQUF0QitpQixHQUFHSCxHQUFHcHJDLFNBQVM1cUUsRUFBRSxLQUFZdEMsR0FBRyxJQUFLLFFBQVFnL0IsRUFBRXM2RCxHQUFHM2lFLEVBQUVxSSxHQUFHLytCLEVBQUVxNUYsR0FBRzNpRSxFQUFFMTJCLEdBQUdxQyxFQUFFLEdBQUcsTUFBTSxJQUFLLFNBQVMwOEIsRUFBRW03RCxHQUFHeGpFLEVBQUVxSSxHQUFHLytCLEVBQUVrNkYsR0FBR3hqRSxFQUFFMTJCLEdBQUdxQyxFQUFFLEdBQUcsTUFBTSxJQUFLLFNBQVMwOEIsRUFBRTU5QixFQUFFLEdBQUc0OUIsRUFBRSxDQUFDcCtCLFdBQU0sSUFBU1gsRUFBRW1CLEVBQUUsR0FBR25CLEVBQUUsQ0FBQ1csV0FBTSxJQUFTMEIsRUFBRSxHQUFHLE1BQU0sSUFBSyxXQUFXMDhCLEVBQUV5N0QsR0FBRzlqRSxFQUFFcUksR0FBRy8rQixFQUFFdzZGLEdBQUc5akUsRUFBRTEyQixHQUFHcUMsRUFBRSxHQUFHLE1BQU0sUUFBUSxtQkFBb0IwOEIsRUFBRTYvRSxTQUFTLG1CQUFvQjUrRyxFQUFFNCtHLFVBQVVsb0YsRUFBRW1vRixRQUFRdmIsSUFBMkIsSUFBSXQzRixLQUEzQmszRixHQUFHbmpHLEVBQUVDLEdBQVdELEVBQUUsS0FBY2cvQixFQUFFLElBQUkvK0IsRUFBRXVCLGVBQWV5SyxJQUFJK3lCLEVBQUV4OUIsZUFBZXlLLElBQUksTUFBTSt5QixFQUFFL3lCLEdBQUcsR0FBRyxVQUMvZUEsRUFBRSxJQUFJckosS0FBSyt6QixFQUFFcUksRUFBRS95QixHQUFLMHFCLEVBQUVuMUIsZUFBZW9CLEtBQUs1QyxJQUFJQSxFQUFFLElBQUlBLEVBQUU0QyxHQUFHLFFBQVEsNEJBQTRCcUosR0FBRyxhQUFhQSxHQUFHLG1DQUFtQ0EsR0FBRyw2QkFBNkJBLEdBQUcsY0FBY0EsSUFBSWdwRixFQUFHenpGLGVBQWV5SyxHQUFHM0osSUFBSUEsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLElBQUlnQixLQUFLMkksRUFBRSxPQUFPLElBQUlBLEtBQUtoTSxFQUFFLENBQUMsSUFBSUwsRUFBRUssRUFBRWdNLEdBQXlCLEdBQXRCMHFCLEVBQUUsTUFBTXFJLEVBQUVBLEVBQUUveUIsUUFBRyxFQUFVaE0sRUFBRXVCLGVBQWV5SyxJQUFJck0sSUFBSSsyQixJQUFJLE1BQU0vMkIsR0FBRyxNQUFNKzJCLEdBQUcsR0FBRyxVQUFVMXFCLEVBQUUsR0FBRzBxQixFQUFFLENBQUMsSUFBSS96QixLQUFLK3pCLEdBQUdBLEVBQUVuMUIsZUFBZW9CLElBQUloRCxHQUFHQSxFQUFFNEIsZUFBZW9CLEtBQUs1QyxJQUFJQSxFQUFFLElBQUlBLEVBQUU0QyxHQUFHLElBQUksSUFBSUEsS0FBS2hELEVBQUVBLEVBQUU0QixlQUFlb0IsSUFBSSt6QixFQUFFL3pCLEtBQUtoRCxFQUFFZ0QsS0FBSzVDLElBQUlBLEVBQUUsSUFDcGZBLEVBQUU0QyxHQUFHaEQsRUFBRWdELFNBQVM1QyxJQUFJc0MsSUFBSUEsRUFBRSxJQUFJQSxFQUFFZ0IsS0FBSzJJLEVBQUVqTSxJQUFJQSxFQUFFSixNQUFNLDRCQUE0QnFNLEdBQUdyTSxFQUFFQSxFQUFFQSxFQUFFMG5DLFlBQU8sRUFBTzNRLEVBQUVBLEVBQUVBLEVBQUUyUSxZQUFPLEVBQU8sTUFBTTFuQyxHQUFHKzJCLElBQUkvMkIsSUFBSTBDLEVBQUVBLEdBQUcsSUFBSWdCLEtBQUsySSxFQUFFck0sSUFBSSxhQUFhcU0sRUFBRTBxQixJQUFJLzJCLEdBQUcsaUJBQWtCQSxHQUFHLGlCQUFrQkEsSUFBSTBDLEVBQUVBLEdBQUcsSUFBSWdCLEtBQUsySSxFQUFFLEdBQUdyTSxHQUFHLG1DQUFtQ3FNLEdBQUcsNkJBQTZCQSxJQUFJZ3BGLEVBQUd6ekYsZUFBZXlLLElBQUksTUFBTXJNLEdBQUcwakcsR0FBRzkzRixFQUFFUyxHQUFHM0osR0FBR3EwQixJQUFJLzJCLElBQUkwQyxFQUFFLE1BQU1BLEVBQUVBLEdBQUcsSUFBSWdCLEtBQUsySSxFQUFFck0sSUFBSUksSUFBSXNDLEVBQUVBLEdBQUcsSUFBSWdCLEtBQUssUUFBUXRELEdBQUd3TCxFQUFFbEosR0FBS0MsRUFBRTJ5RyxZQUFZMXBHLEtBQUVqSixFQUFFdTZGLFdBQVcsS0FDNWM2Z0IsR0FBRyxTQUFTcjdHLEVBQUVDLEVBQUV2QyxFQUFFQyxHQUFHRCxJQUFJQyxJQUFJc0MsRUFBRXU2RixXQUFXLElBYzFDLElBQUkwaUIsR0FBRyxtQkFBb0JybUUsUUFBUUEsUUFBUVIsSUFBSSxTQUFTOG1FLEdBQUduOUcsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRXVDLEVBQUVrdUIsT0FBT3h3QixFQUFFc0MsRUFBRTZGLE1BQU0sT0FBT25JLEdBQUcsT0FBT0QsSUFBSUMsRUFBRXk0RixHQUFHMTRGLElBQUksT0FBT0EsR0FBR3k0RixHQUFHejRGLEVBQUU4NEIsTUFBTXYyQixFQUFFQSxFQUFFM0IsTUFBTSxPQUFPMEIsR0FBRyxJQUFJQSxFQUFFeWpDLEtBQUsweUQsR0FBR24yRixFQUFFdzJCLE1BQU0sSUFBSXB4QixRQUFRMnlCLE1BQU05M0IsR0FBRyxNQUFNaUosR0FBRyt0QixZQUFXLFdBQVcsTUFBTS90QixNQUFzSCxTQUFTazBHLEdBQUdwOUcsR0FBRyxJQUFJQyxFQUFFRCxFQUFFaXhDLElBQUksR0FBRyxPQUFPaHhDLEVBQUUsR0FBRyxtQkFBb0JBLEVBQUUsSUFBSUEsRUFBRSxNQUFNLE1BQU12QyxHQUFHMi9HLEdBQUdyOUcsRUFBRXRDLFFBQVF1QyxFQUFFMnFFLFFBQVEsS0FDbGQsU0FBUzB5QyxHQUFHdDlHLEVBQUVDLEdBQUcsT0FBT0EsRUFBRXdqQyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLEtBQUssRUFBRSxHQUFlLElBQVp4akMsRUFBRXU2RixXQUFlLE9BQU94NkYsRUFBRSxDQUFDLElBQUl0QyxFQUFFc0MsRUFBRTAyRyxjQUFjLzRHLEVBQUVxQyxFQUFFMDZGLGNBQTRCejZGLEdBQWRELEVBQUVDLEVBQUVtekYsV0FBY3doQix3QkFBd0IzMEcsRUFBRStzRixjQUFjL3NGLEVBQUV1MkIsS0FBSzk0QixFQUFFZzBHLEdBQUd6eEcsRUFBRXUyQixLQUFLOTRCLEdBQUdDLEdBQUdxQyxFQUFFdTlHLG9DQUFvQ3Q5RyxFQUFFLE9BQU8sS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFPLE1BQU00RixNQUFNK2pCLEVBQUUsTUFDN1UsU0FBUzR6RixHQUFHeDlHLEVBQUVDLEdBQWdELEdBQUcsUUFBaENBLEVBQUUsUUFBbEJBLEVBQUVBLEVBQUUyeUcsYUFBdUIzeUcsRUFBRW8xRyxXQUFXLE1BQWlCLENBQUMsSUFBSTMzRyxFQUFFdUMsRUFBRUEsRUFBRTBhLEtBQUssRUFBRSxDQUFDLElBQUlqZCxFQUFFK2xDLElBQUl6akMsS0FBS0EsRUFBRSxDQUFDLElBQUlyQyxFQUFFRCxFQUFFMjZHLFFBQVEzNkcsRUFBRTI2RyxhQUFRLE9BQU8sSUFBUzE2RyxHQUFHQSxJQUFJRCxFQUFFQSxFQUFFaWQsV0FBV2pkLElBQUl1QyxJQUFJLFNBQVN3OUcsR0FBR3o5RyxFQUFFQyxHQUFnRCxHQUFHLFFBQWhDQSxFQUFFLFFBQWxCQSxFQUFFQSxFQUFFMnlHLGFBQXVCM3lHLEVBQUVvMUcsV0FBVyxNQUFpQixDQUFDLElBQUkzM0csRUFBRXVDLEVBQUVBLEVBQUUwYSxLQUFLLEVBQUUsQ0FBQyxJQUFJamQsRUFBRStsQyxJQUFJempDLEtBQUtBLEVBQUUsQ0FBQyxJQUFJckMsRUFBRUQsRUFBRWlCLE9BQU9qQixFQUFFMjZHLFFBQVExNkcsSUFBSUQsRUFBRUEsRUFBRWlkLFdBQVdqZCxJQUFJdUMsSUFDdFYsU0FBU3k5RyxHQUFHMTlHLEVBQUVDLEVBQUV2QyxHQUFHLE9BQU9BLEVBQUUrbEMsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQVcsWUFBUmc2RSxHQUFHLEVBQUUvL0csR0FBVSxLQUFLLEVBQWdCLEdBQWRzQyxFQUFFdEMsRUFBRTAxRixVQUF5QixFQUFaMTFGLEVBQUU4OEYsVUFBWSxHQUFHLE9BQU92NkYsRUFBRUQsRUFBRSswRyx3QkFBd0IsQ0FBQyxJQUFJcDNHLEVBQUVELEVBQUVzdkYsY0FBY3R2RixFQUFFODRCLEtBQUt2MkIsRUFBRXkyRyxjQUFjaEYsR0FBR2gwRyxFQUFFODRCLEtBQUt2MkIsRUFBRXkyRyxlQUFlMTJHLEVBQUU4NkcsbUJBQW1CbjlHLEVBQUVzQyxFQUFFeTZGLGNBQWMxNkYsRUFBRXU5RyxxQ0FBeUUsWUFBcEIsUUFBaEJ0OUcsRUFBRXZDLEVBQUVrMUcsY0FBc0JlLEdBQUdqMkcsRUFBRXVDLEVBQUVELElBQVUsS0FBSyxFQUFrQixHQUFHLFFBQW5CQyxFQUFFdkMsRUFBRWsxRyxhQUF3QixDQUFRLEdBQVA1eUcsRUFBRSxLQUFRLE9BQU90QyxFQUFFbzhFLE1BQU0sT0FBT3A4RSxFQUFFbzhFLE1BQU1yMkMsS0FBSyxLQUFLLEVBQUV6akMsRUFBRXRDLEVBQUVvOEUsTUFBTXNaLFVBQVUsTUFBTSxLQUFLLEVBQUVwekYsRUFBRXRDLEVBQUVvOEUsTUFBTXNaLFVBQVV1Z0IsR0FBR2oyRyxFQUFFdUMsRUFBRUQsR0FBRyxPQUNwZixLQUFLLEVBQStFLE9BQTdFQSxFQUFFdEMsRUFBRTAxRixlQUFVLE9BQU9uekYsR0FBZSxFQUFadkMsRUFBRTg4RixXQUFhcUgsR0FBR25rRyxFQUFFODRCLEtBQUs5NEIsRUFBRWc1RyxnQkFBZ0IxMkcsRUFBRTI5RyxTQUFlLEtBQUssRUFBUyxLQUFLLEVBQVMsS0FBSyxHQUFHLE9BQU8sS0FBSyxHQUFvSCxZQUFqSCxPQUFPamdILEVBQUVnOUYsZ0JBQWdCaDlGLEVBQUVBLEVBQUU2OEYsVUFBVSxPQUFPNzhGLElBQUlBLEVBQUVBLEVBQUVnOUYsY0FBYyxPQUFPaDlGLElBQUlBLEVBQUVBLEVBQUVpOUYsV0FBVyxPQUFPajlGLEdBQUcrZ0csR0FBRy9nRyxPQUFhLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLE1BQU1tSSxNQUFNK2pCLEVBQUUsTUFDM1QsU0FBU2cwRixHQUFHNTlHLEVBQUVDLEVBQUV2QyxHQUFpQyxPQUE5QixtQkFBb0JtZ0gsSUFBSUEsR0FBRzU5RyxHQUFVQSxFQUFFd2pDLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBbUIsR0FBRyxRQUFuQnpqQyxFQUFFQyxFQUFFMnlHLGNBQXlDLFFBQWY1eUcsRUFBRUEsRUFBRXExRyxZQUFxQixDQUFDLElBQUkxM0csRUFBRXFDLEVBQUUyYSxLQUFLMDJGLEdBQUcsR0FBRzN6RyxFQUFFLEdBQUdBLEdBQUUsV0FBVyxJQUFJc0MsRUFBRXJDLEVBQUUsRUFBRSxDQUFDLElBQUlELEVBQUVzQyxFQUFFcTRHLFFBQVEsUUFBRyxJQUFTMzZHLEVBQUUsQ0FBQyxJQUFJMjJCLEVBQUVwMEIsRUFBRSxJQUFJdkMsSUFBSSxNQUFNaU0sR0FBRzB6RyxHQUFHaHBGLEVBQUUxcUIsSUFBSTNKLEVBQUVBLEVBQUUyYSxXQUFXM2EsSUFBSXJDLE1BQUssTUFBTSxLQUFLLEVBQUV5L0csR0FBR245RyxHQUFpQixtQkFBZHZDLEVBQUV1QyxFQUFFbXpGLFdBQWdDOStDLHNCQUx4RyxTQUFZdDBDLEVBQUVDLEdBQUcsSUFBSUEsRUFBRWcvQixNQUFNai9CLEVBQUUwMkcsY0FBY3oyRyxFQUFFbzBDLE1BQU1yMEMsRUFBRTA2RixjQUFjejZGLEVBQUVxMEMsdUJBQXVCLE1BQU01MkMsR0FBRzIvRyxHQUFHcjlHLEVBQUV0QyxJQUtrQm9nSCxDQUFHNzlHLEVBQUV2QyxHQUFHLE1BQU0sS0FBSyxFQUFFMC9HLEdBQUduOUcsR0FBRyxNQUFNLEtBQUssRUFBRTg5RyxHQUFHLzlHLEVBQUVDLEVBQUV2QyxJQUNuYSxTQUFTc2dILEdBQUdoK0csR0FBRyxJQUFJQyxFQUFFRCxFQUFFdTZGLFVBQVV2NkYsRUFBRTg4QixPQUFPLEtBQUs5OEIsRUFBRTg1RSxNQUFNLEtBQUs5NUUsRUFBRTA2RixjQUFjLEtBQUsxNkYsRUFBRTR5RyxZQUFZLEtBQUs1eUcsRUFBRTZ5RixhQUFhLEtBQUs3eUYsRUFBRXU2RixVQUFVLEtBQUt2NkYsRUFBRXUxRyxZQUFZLEtBQUt2MUcsRUFBRXExRyxXQUFXLEtBQUtyMUcsRUFBRTg1RyxhQUFhLEtBQUs5NUcsRUFBRTAyRyxjQUFjLEtBQUsxMkcsRUFBRW96RixVQUFVLEtBQUssT0FBT256RixHQUFHKzlHLEdBQUcvOUcsR0FBRyxTQUFTZytHLEdBQUdqK0csR0FBRyxPQUFPLElBQUlBLEVBQUV5akMsS0FBSyxJQUFJempDLEVBQUV5akMsS0FBSyxJQUFJempDLEVBQUV5akMsSUFDMVMsU0FBU3k2RSxHQUFHbCtHLEdBQUdBLEVBQUUsQ0FBQyxJQUFJLElBQUlDLEVBQUVELEVBQUU4OEIsT0FBTyxPQUFPNzhCLEdBQUcsQ0FBQyxHQUFHZytHLEdBQUdoK0csR0FBRyxDQUFDLElBQUl2QyxFQUFFdUMsRUFBRSxNQUFNRCxFQUFFQyxFQUFFQSxFQUFFNjhCLE9BQU8sTUFBTWozQixNQUFNK2pCLEVBQUUsTUFBcUIsT0FBZDNwQixFQUFFdkMsRUFBRTAxRixVQUFpQjExRixFQUFFK2xDLEtBQUssS0FBSyxFQUFFLElBQUk5bEMsR0FBRSxFQUFHLE1BQU0sS0FBSyxFQUErQixLQUFLLEVBQUVzQyxFQUFFQSxFQUFFczhGLGNBQWM1K0YsR0FBRSxFQUFHLE1BQU0sUUFBUSxNQUFNa0ksTUFBTStqQixFQUFFLE1BQW1CLEdBQVpsc0IsRUFBRTg4RixZQUFleEIsR0FBRy80RixFQUFFLElBQUl2QyxFQUFFODhGLFlBQVksSUFBSXg2RixFQUFFQyxFQUFFLElBQUl2QyxFQUFFc0MsSUFBSSxDQUFDLEtBQUssT0FBT3RDLEVBQUVvOUYsU0FBUyxDQUFDLEdBQUcsT0FBT3A5RixFQUFFby9CLFFBQVFtaEYsR0FBR3ZnSCxFQUFFby9CLFFBQVEsQ0FBQ3AvQixFQUFFLEtBQUssTUFBTXNDLEVBQUV0QyxFQUFFQSxFQUFFby9CLE9BQWlDLElBQTFCcC9CLEVBQUVvOUYsUUFBUWgrRCxPQUFPcC9CLEVBQUVvL0IsT0FBV3AvQixFQUFFQSxFQUFFbzlGLFFBQVEsSUFBSXA5RixFQUFFK2xDLEtBQUssSUFBSS9sQyxFQUFFK2xDLEtBQUssS0FBSy9sQyxFQUFFK2xDLEtBQUssQ0FBQyxHQUFlLEVBQVovbEMsRUFBRTg4RixVQUFZLFNBQVN2NkYsRUFDdmYsR0FBRyxPQUFPdkMsRUFBRW84RSxPQUFPLElBQUlwOEUsRUFBRStsQyxJQUFJLFNBQVN4akMsRUFBT3ZDLEVBQUVvOEUsTUFBTWg5QyxPQUFPcC9CLEVBQUVBLEVBQUVBLEVBQUVvOEUsTUFBTSxLQUFpQixFQUFacDhFLEVBQUU4OEYsV0FBYSxDQUFDOThGLEVBQUVBLEVBQUUwMUYsVUFBVSxNQUFNcHpGLEdBQUdyQyxFQUNwSCxTQUFTd2dILEVBQUduK0csRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRXFDLEVBQUV5akMsSUFBSXY2QixFQUFFLElBQUl2TCxHQUFHLElBQUlBLEVBQUUsR0FBR3VMLEVBQUVsSixFQUFFa0osRUFBRWxKLEVBQUVvekYsVUFBVXB6RixFQUFFb3pGLFVBQVV2NUQsU0FBUzU1QixFQUFFLElBQUl2QyxFQUFFdzdGLFNBQVN4N0YsRUFBRXNwQyxXQUFXTixhQUFhMW1DLEVBQUVDLEdBQUd2QyxFQUFFZ3BDLGFBQWExbUMsRUFBRUMsSUFBSSxJQUFJdkMsRUFBRXc3RixVQUFVajVGLEVBQUV2QyxFQUFFc3BDLFlBQWFOLGFBQWExbUMsRUFBRXRDLElBQUt1QyxFQUFFdkMsR0FBSXFwQyxZQUFZL21DLEdBQTRCLFFBQXhCdEMsRUFBRUEsRUFBRTBnSCwyQkFBOEIsSUFBUzFnSCxHQUFHLE9BQU91QyxFQUFFdThHLFVBQVV2OEcsRUFBRXU4RyxRQUFRdmIsVUFBVSxHQUFHLElBQUl0akcsR0FBYyxRQUFWcUMsRUFBRUEsRUFBRTg1RSxPQUFnQixJQUFJcWtDLEVBQUduK0csRUFBRUMsRUFBRXZDLEdBQUdzQyxFQUFFQSxFQUFFODZGLFFBQVEsT0FBTzk2RixHQUFHbStHLEVBQUduK0csRUFBRUMsRUFBRXZDLEdBQUdzQyxFQUFFQSxFQUFFODZGLFFBRHhScWpCLENBQUduK0csRUFBRXRDLEVBQUV1QyxHQUU3SCxTQUFTbytHLEVBQUdyK0csRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRXFDLEVBQUV5akMsSUFBSXY2QixFQUFFLElBQUl2TCxHQUFHLElBQUlBLEVBQUUsR0FBR3VMLEVBQUVsSixFQUFFa0osRUFBRWxKLEVBQUVvekYsVUFBVXB6RixFQUFFb3pGLFVBQVV2NUQsU0FBUzU1QixFQUFFdkMsRUFBRWdwQyxhQUFhMW1DLEVBQUVDLEdBQUd2QyxFQUFFcXBDLFlBQVkvbUMsUUFBUSxHQUFHLElBQUlyQyxHQUFjLFFBQVZxQyxFQUFFQSxFQUFFODVFLE9BQWdCLElBQUl1a0MsRUFBR3IrRyxFQUFFQyxFQUFFdkMsR0FBR3NDLEVBQUVBLEVBQUU4NkYsUUFBUSxPQUFPOTZGLEdBQUdxK0csRUFBR3IrRyxFQUFFQyxFQUFFdkMsR0FBR3NDLEVBQUVBLEVBQUU4NkYsUUFGckZ1akIsQ0FBR3IrRyxFQUFFdEMsRUFBRXVDLEdBR3ZJLFNBQVM4OUcsR0FBRy85RyxFQUFFQyxFQUFFdkMsR0FBRyxJQUFJLElBQWFnL0IsRUFBRXJJLEVBQVgxMkIsRUFBRXNDLEVBQUVpSixHQUFFLElBQVMsQ0FBQyxJQUFJQSxFQUFFLENBQUNBLEVBQUV2TCxFQUFFbS9CLE9BQU85OEIsRUFBRSxPQUFPLENBQUMsR0FBRyxPQUFPa0osRUFBRSxNQUFNckQsTUFBTStqQixFQUFFLE1BQW9CLE9BQWQ4UyxFQUFFeHpCLEVBQUVrcUYsVUFBaUJscUYsRUFBRXU2QixLQUFLLEtBQUssRUFBRXBQLEdBQUUsRUFBRyxNQUFNcjBCLEVBQUUsS0FBSyxFQUFpQyxLQUFLLEVBQUUwOEIsRUFBRUEsRUFBRTYvRCxjQUFjbG9FLEdBQUUsRUFBRyxNQUFNcjBCLEVBQUVrSixFQUFFQSxFQUFFNHpCLE9BQU81ekIsR0FBRSxFQUFHLEdBQUcsSUFBSXZMLEVBQUU4bEMsS0FBSyxJQUFJOWxDLEVBQUU4bEMsSUFBSSxDQUFDempDLEVBQUUsSUFBSSxJQUFJMkosRUFBRTNKLEVBQUVNLEVBQUUzQyxFQUFFTCxFQUFFSSxFQUFFRCxFQUFFNkMsSUFBSSxHQUFHczlHLEdBQUdqMEcsRUFBRWxNLEVBQUVILEdBQUcsT0FBT0csRUFBRXE4RSxPQUFPLElBQUlyOEUsRUFBRWdtQyxJQUFJaG1DLEVBQUVxOEUsTUFBTWg5QyxPQUFPci9CLEVBQUVBLEVBQUVBLEVBQUVxOEUsVUFBVSxDQUFDLEdBQUdyOEUsSUFBSTZDLEVBQUUsTUFBTU4sRUFBRSxLQUFLLE9BQU92QyxFQUFFcTlGLFNBQVMsQ0FBQyxHQUFHLE9BQU9yOUYsRUFBRXEvQixRQUFRci9CLEVBQUVxL0IsU0FBU3g4QixFQUFFLE1BQU1OLEVBQUV2QyxFQUFFQSxFQUFFcS9CLE9BQU9yL0IsRUFBRXE5RixRQUFRaCtELE9BQU9yL0IsRUFBRXEvQixPQUFPci9CLEVBQUVBLEVBQUVxOUYsUUFBUXptRSxHQUFHMXFCLEVBQ3JmK3lCLEVBQUVwOEIsRUFBRTNDLEVBQUV5MUYsVUFBVSxJQUFJenBGLEVBQUV1dkYsU0FBU3Z2RixFQUFFcTlCLFdBQVdrRCxZQUFZNXBDLEdBQUdxSixFQUFFdWdDLFlBQVk1cEMsSUFBSW84QixFQUFFd04sWUFBWXZzQyxFQUFFeTFGLGdCQUFnQixHQUFHLElBQUl6MUYsRUFBRThsQyxLQUFLLEdBQUcsT0FBTzlsQyxFQUFFbThFLE1BQU0sQ0FBQ3A5QyxFQUFFLytCLEVBQUV5MUYsVUFBVW1KLGNBQWNsb0UsR0FBRSxFQUFHMTJCLEVBQUVtOEUsTUFBTWg5QyxPQUFPbi9CLEVBQUVBLEVBQUVBLEVBQUVtOEUsTUFBTSxlQUFlLEdBQUc4akMsR0FBRzU5RyxFQUFFckMsRUFBRUQsR0FBRyxPQUFPQyxFQUFFbThFLE1BQU0sQ0FBQ244RSxFQUFFbThFLE1BQU1oOUMsT0FBT24vQixFQUFFQSxFQUFFQSxFQUFFbThFLE1BQU0sU0FBUyxHQUFHbjhFLElBQUlzQyxFQUFFLE1BQU0sS0FBSyxPQUFPdEMsRUFBRW05RixTQUFTLENBQUMsR0FBRyxPQUFPbjlGLEVBQUVtL0IsUUFBUW4vQixFQUFFbS9CLFNBQVM3OEIsRUFBRSxPQUFrQixLQUFYdEMsRUFBRUEsRUFBRW0vQixRQUFhMkcsTUFBTXY2QixHQUFFLEdBQUl2TCxFQUFFbTlGLFFBQVFoK0QsT0FBT24vQixFQUFFbS9CLE9BQU9uL0IsRUFBRUEsRUFBRW05RixTQUNwYSxTQUFTd2pCLEdBQUd0K0csRUFBRUMsR0FBRyxPQUFPQSxFQUFFd2pDLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBVyxZQUFSKzVFLEdBQUcsRUFBRXY5RyxHQUFVLEtBQUssRUFBRSxPQUFPLEtBQUssRUFBRSxJQUFJdkMsRUFBRXVDLEVBQUVtekYsVUFBVSxHQUFHLE1BQU0xMUYsRUFBRSxDQUFDLElBQUlDLEVBQUVzQyxFQUFFeTJHLGNBQWN4dEcsRUFBRSxPQUFPbEosRUFBRUEsRUFBRTAyRyxjQUFjLzRHLEVBQUVxQyxFQUFFQyxFQUFFdTJCLEtBQUssSUFBSWtHLEVBQUV6OEIsRUFBRTJ5RyxZQUErQixHQUFuQjN5RyxFQUFFMnlHLFlBQVksS0FBUSxPQUFPbDJFLEVBQUUsQ0FBZ0YsSUFBL0VoL0IsRUFBRTZrRyxJQUFJNWtHLEVBQUUsVUFBVXFDLEdBQUcsVUFBVXJDLEVBQUU2NEIsTUFBTSxNQUFNNzRCLEVBQUVDLE1BQU00NUYsR0FBRzk1RixFQUFFQyxHQUFHbWpHLEdBQUc5Z0csRUFBRWtKLEdBQUdqSixFQUFFNmdHLEdBQUc5Z0csRUFBRXJDLEdBQU91TCxFQUFFLEVBQUVBLEVBQUV3ekIsRUFBRXI4QixPQUFPNkksR0FBRyxFQUFFLENBQUMsSUFBSW1yQixFQUFFcUksRUFBRXh6QixHQUFHUyxFQUFFK3lCLEVBQUV4ekIsRUFBRSxHQUFHLFVBQVVtckIsRUFBRTByRSxHQUFHcmlHLEVBQUVpTSxHQUFHLDRCQUE0QjBxQixFQUFFc2tFLEdBQUdqN0YsRUFBRWlNLEdBQUcsYUFBYTBxQixFQUFFMmtFLEdBQUd0N0YsRUFBRWlNLEdBQUdrckYsRUFBR24zRixFQUFFMjJCLEVBQUUxcUIsRUFBRTFKLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVF5M0YsR0FBRy81RixFQUFFQyxHQUFHLE1BQ2hmLElBQUssV0FBVzA2RixHQUFHMzZGLEVBQUVDLEdBQUcsTUFBTSxJQUFLLFNBQVNzQyxFQUFFdkMsRUFBRXk1RixjQUFja2xCLFlBQVkzK0csRUFBRXk1RixjQUFja2xCLGNBQWMxK0csRUFBRTIrRyxTQUFtQixPQUFWdDhHLEVBQUVyQyxFQUFFVyxPQUFjeTVGLEdBQUdyNkYsSUFBSUMsRUFBRTIrRyxTQUFTdDhHLEdBQUUsR0FBSUMsTUFBTXRDLEVBQUUyK0csV0FBVyxNQUFNMytHLEVBQUV1NUYsYUFBYWEsR0FBR3I2RixJQUFJQyxFQUFFMitHLFNBQVMzK0csRUFBRXU1RixjQUFhLEdBQUlhLEdBQUdyNkYsSUFBSUMsRUFBRTIrRyxTQUFTMytHLEVBQUUyK0csU0FBUyxHQUFHLElBQUcsTUFBTyxPQUFPLEtBQUssRUFBRSxHQUFHLE9BQU9yOEcsRUFBRW16RixVQUFVLE1BQU12dEYsTUFBTStqQixFQUFFLE1BQTRDLFlBQXRDM3BCLEVBQUVtekYsVUFBVStGLFVBQVVsNUYsRUFBRXkyRyxlQUFxQixLQUFLLEVBQThELGFBQTVEejJHLEVBQUVBLEVBQUVtekYsV0FBWTZLLFVBQVVoK0YsRUFBRWcrRixTQUFRLEVBQUdRLEdBQUd4K0YsRUFBRXM4RixpQkFBdUIsS0FBSyxHQUFHLE9BQU8sS0FBSyxHQUN6YixHQUQ0YjcrRixFQUFFdUMsRUFBRSxPQUFPQSxFQUFFeTZGLGNBQ3ZlLzhGLEdBQUUsR0FBSUEsR0FBRSxFQUFHRCxFQUFFdUMsRUFBRTY1RSxNQUFNeWtDLEdBQUdyTixNQUFTLE9BQU94ekcsRUFBRXNDLEVBQUUsSUFBSUEsRUFBRXRDLElBQUksQ0FBQyxHQUFHLElBQUlzQyxFQUFFeWpDLElBQUkvRyxFQUFFMThCLEVBQUVvekYsVUFBVXoxRixFQUFhLG1CQUFWKytCLEVBQUVBLEVBQUV3VSxPQUE0Qm9zQyxZQUFZNWdELEVBQUU0Z0QsWUFBWSxVQUFVLE9BQU8sYUFBYTVnRCxFQUFFOGhGLFFBQVEsUUFBUzloRixFQUFFMThCLEVBQUVvekYsVUFBa0NscUYsRUFBRSxPQUExQkEsRUFBRWxKLEVBQUUwMkcsY0FBY3hsRSxRQUE4QmhvQyxFQUFFaEssZUFBZSxXQUFXZ0ssRUFBRXMxRyxRQUFRLEtBQUs5aEYsRUFBRXdVLE1BQU1zdEUsUUFBUTFlLEdBQUcsVUFBVTUyRixTQUFTLEdBQUcsSUFBSWxKLEVBQUV5akMsSUFBSXpqQyxFQUFFb3pGLFVBQVUrRixVQUFVeDdGLEVBQUUsR0FBR3FDLEVBQUUwMkcsa0JBQW1CLElBQUcsS0FBSzEyRyxFQUFFeWpDLEtBQUssT0FBT3pqQyxFQUFFMDZGLGVBQWUsT0FBTzE2RixFQUFFMDZGLGNBQWNDLFdBQVcsRUFBQ2orRCxFQUFFMThCLEVBQUU4NUUsTUFBTWdoQixTQUFVaCtELE9BQU85OEIsRUFBRUEsRUFDbmYwOEIsRUFBRSxTQUFjLEdBQUcsT0FBTzE4QixFQUFFODVFLE1BQU0sQ0FBQzk1RSxFQUFFODVFLE1BQU1oOUMsT0FBTzk4QixFQUFFQSxFQUFFQSxFQUFFODVFLE1BQU0sVUFBUyxHQUFHOTVFLElBQUl0QyxFQUFFLE1BQU0sS0FBSyxPQUFPc0MsRUFBRTg2RixTQUFTLENBQUMsR0FBRyxPQUFPOTZGLEVBQUU4OEIsUUFBUTk4QixFQUFFODhCLFNBQVNwL0IsRUFBRSxNQUFNc0MsRUFBRUEsRUFBRUEsRUFBRTg4QixPQUFPOThCLEVBQUU4NkYsUUFBUWgrRCxPQUFPOThCLEVBQUU4OEIsT0FBTzk4QixFQUFFQSxFQUFFODZGLFFBQWMsWUFBTjJqQixHQUFHeCtHLEdBQVUsS0FBSyxHQUFTLFlBQU53K0csR0FBR3grRyxHQUFVLEtBQUssR0FBRyxPQUFPLE1BQU00RixNQUFNK2pCLEVBQUUsTUFBTyxTQUFTNjBGLEdBQUd6K0csR0FBRyxJQUFJQyxFQUFFRCxFQUFFNHlHLFlBQVksR0FBRyxPQUFPM3lHLEVBQUUsQ0FBQ0QsRUFBRTR5RyxZQUFZLEtBQUssSUFBSWwxRyxFQUFFc0MsRUFBRW96RixVQUFVLE9BQU8xMUYsSUFBSUEsRUFBRXNDLEVBQUVvekYsVUFBVSxJQUFJOHBCLElBQUlqOUcsRUFBRXVhLFNBQVEsU0FBU3ZhLEdBQUcsSUFBSXRDLEVBQUUrZ0gsR0FBRzcvRyxLQUFLLEtBQUttQixFQUFFQyxHQUFHdkMsRUFBRXUzQyxJQUFJaDFDLEtBQUt2QyxFQUFFOGlCLElBQUl2Z0IsR0FBR0EsRUFBRXE2QixLQUFLMzhCLEVBQUVBLFFBQy9jLElBQUlnaEgsR0FBRyxtQkFBb0IxcUYsUUFBUUEsUUFBUW1pQixJQUFJLFNBQVN3b0UsR0FBRzUrRyxFQUFFQyxFQUFFdkMsSUFBR0EsRUFBRXkxRyxHQUFHejFHLEVBQUUsT0FBUStsQyxJQUFJLEVBQUUvbEMsRUFBRXdyRSxRQUFRLENBQUM2akIsUUFBUSxNQUFNLElBQUlwdkYsRUFBRXNDLEVBQUUzQixNQUFzRCxPQUFoRFosRUFBRWtLLFNBQVMsV0FBV2kzRyxLQUFLQSxJQUFHLEVBQUdDLEdBQUduaEgsR0FBR3cvRyxHQUFHbjlHLEVBQUVDLElBQVd2QyxFQUNyTCxTQUFTcWhILEdBQUcvK0csRUFBRUMsRUFBRXZDLElBQUdBLEVBQUV5MUcsR0FBR3oxRyxFQUFFLE9BQVErbEMsSUFBSSxFQUFFLElBQUk5bEMsRUFBRXFDLEVBQUV3MkIsS0FBS3drRix5QkFBeUIsR0FBRyxtQkFBb0JyOUcsRUFBRSxDQUFDLElBQUl1TCxFQUFFakosRUFBRTNCLE1BQU1aLEVBQUV3ckUsUUFBUSxXQUFtQixPQUFSaTBDLEdBQUduOUcsRUFBRUMsR0FBVXRDLEVBQUV1TCxJQUFJLElBQUl3ekIsRUFBRTE4QixFQUFFb3pGLFVBQThPLE9BQXBPLE9BQU8xMkQsR0FBRyxtQkFBb0JBLEVBQUVzaUYsb0JBQW9CdGhILEVBQUVrSyxTQUFTLFdBQVcsbUJBQW9CakssSUFBSSxPQUFPc2hILEdBQUdBLEdBQUcsSUFBSTVvRSxJQUFJLENBQUMxeUMsT0FBT3M3RyxHQUFHeitGLElBQUk3YyxNQUFNdzVHLEdBQUduOUcsRUFBRUMsSUFBSSxJQUFJdkMsRUFBRXVDLEVBQUU2RixNQUFNbkMsS0FBS3E3RyxrQkFBa0IvK0csRUFBRTNCLE1BQU0sQ0FBQzRnSCxlQUFlLE9BQU94aEgsRUFBRUEsRUFBRSxPQUFjQSxFQUM3WixJQStCK1R5aEgsR0EvQjNUQyxHQUFHdDRHLEtBQUt5SCxLQUFLOHdHLEdBQUd6cUIsRUFBR3JwQix1QkFBdUIrekMsR0FBRzFxQixFQUFHbHBCLGtCQUF1Q2d4QyxHQUFHLEVBQVlDLEdBQUcsRUFBRUMsR0FBRyxFQUFPeHhHLEdBQWpELEVBQXFENGdELEdBQUUsS0FBS29mLEdBQUUsS0FBS25mLEdBQUUsRUFBRU4sR0FBRSt3RCxHQUFHNkMsR0FBRyxLQUFLQyxHQUFHLFdBQVdDLEdBQUcsV0FBV0MsR0FBRyxLQUFLN0MsR0FBRyxFQUFFOEMsSUFBRyxFQUFHcEIsR0FBRyxFQUFTbHpDLEdBQUUsS0FBS3d6QyxJQUFHLEVBQUdDLEdBQUcsS0FBS0csR0FBRyxLQUFLVyxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxHQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxHQUFHLEVBQUUsU0FBU2pNLEtBQUssT0FBeE8sSUFBaVAsR0FBRjdvRyxJQUFlLFlBQVk4bEcsS0FBSyxHQUFHLEdBQUcsSUFBSWdQLEdBQUdBLEdBQUdBLEdBQUcsWUFBWWhQLEtBQUssR0FBRyxHQUM5WCxTQUFTZ0QsR0FBR2wwRyxFQUFFQyxFQUFFdkMsR0FBWSxHQUFHLElBQU8sR0FBbkJ1QyxFQUFFQSxFQUFFekIsT0FBa0IsT0FBTyxXQUFXLElBQUliLEVBQUV3ekcsS0FBSyxHQUFHLElBQU8sRUFBRmx4RyxHQUFLLE9BQU8sS0FBS3RDLEVBQUUsV0FBVyxXQUFXLEdBRC9DLElBQVUsR0FDeUN5TixJQUFVLE9BQU82Z0QsR0FBRSxHQUFHLE9BQU92dUQsRUFBRXNDLEVBQUV5eEcsR0FBR3p4RyxFQUFjLEVBQVp0QyxFQUFFeWlILFdBQWEsSUFBSSxVQUFVLE9BQU94aUgsR0FBRyxLQUFLLEdBQUdxQyxFQUFFLFdBQVcsTUFBTSxLQUFLLEdBQUdBLEVBQUV5eEcsR0FBR3p4RyxFQUFFLElBQUksS0FBSyxNQUFNLEtBQUssR0FBRyxLQUFLLEdBQUdBLEVBQUV5eEcsR0FBR3p4RyxFQUFFLElBQUksS0FBSyxNQUFNLEtBQUssR0FBR0EsRUFBRSxFQUFFLE1BQU0sUUFBUSxNQUFNNkYsTUFBTStqQixFQUFFLE1BQTRCLE9BQXJCLE9BQU9vaUMsSUFBR2hzRCxJQUFJaXNELE1BQUtqc0QsRUFBU0EsRUFDbFgsU0FBU20wRyxHQUFHbjBHLEVBQUVDLEdBQUcsR0FBRyxHQUFHKy9HLEdBQUcsTUFBTUEsR0FBRyxFQUFFQyxHQUFHLEtBQUtwNkcsTUFBTStqQixFQUFFLE1BQWdCLEdBQUcsUUFBYjVwQixFQUFFb2dILEdBQUdwZ0gsRUFBRUMsSUFBZSxDQUFDLElBQUl2QyxFQUFFeXpHLEtBQUssYUFBYWx4RyxFQUZsQyxJQUFLLEVBRWdDbUwsS0FGckMsSUFFbUQsR0FBRkEsSUFBZWkxRyxHQUFHcmdILElBQUltc0QsR0FBRW5zRCxHQUZ6RSxJQUU0RW9MLElBQU9ULE1BQU13aEQsR0FBRW5zRCxHQUYzRixJQUVpRyxFQUFGb0wsS0FBVSxLQUFLMU4sR0FBRyxLQUFLQSxJQUFJLE9BQU9xaUgsR0FBR0EsR0FBRyxJQUFJM3BFLElBQUksQ0FBQyxDQUFDcDJDLEVBQUVDLFdBQW1CLEtBQWJ2QyxFQUFFcWlILEdBQUc3aEgsSUFBSThCLEtBQWdCdEMsRUFBRXVDLElBQUk4L0csR0FBR3Y1RyxJQUFJeEcsRUFBRUMsS0FDelEsU0FBU21nSCxHQUFHcGdILEVBQUVDLEdBQUdELEVBQUVxeUcsZUFBZXB5RyxJQUFJRCxFQUFFcXlHLGVBQWVweUcsR0FBRyxJQUFJdkMsRUFBRXNDLEVBQUV1NkYsVUFBVSxPQUFPNzhGLEdBQUdBLEVBQUUyMEcsZUFBZXB5RyxJQUFJdkMsRUFBRTIwRyxlQUFlcHlHLEdBQUcsSUFBSXRDLEVBQUVxQyxFQUFFODhCLE9BQU81ekIsRUFBRSxLQUFLLEdBQUcsT0FBT3ZMLEdBQUcsSUFBSXFDLEVBQUV5akMsSUFBSXY2QixFQUFFbEosRUFBRW96RixlQUFlLEtBQUssT0FBT3oxRixHQUFHLENBQStILEdBQTlIRCxFQUFFQyxFQUFFNDhGLFVBQVU1OEYsRUFBRXUwRyxvQkFBb0JqeUcsSUFBSXRDLEVBQUV1MEcsb0JBQW9CanlHLEdBQUcsT0FBT3ZDLEdBQUdBLEVBQUV3MEcsb0JBQW9CanlHLElBQUl2QyxFQUFFdzBHLG9CQUFvQmp5RyxHQUFNLE9BQU90QyxFQUFFbS9CLFFBQVEsSUFBSW4vQixFQUFFOGxDLElBQUksQ0FBQ3Y2QixFQUFFdkwsRUFBRXkxRixVQUFVLE1BQU16MUYsRUFBRUEsRUFBRW0vQixPQUEwRCxPQUFuRCxPQUFPNXpCLElBQUk4aUQsS0FBSTlpRCxJQUFJd3FHLEdBQUd6ekcsR0FBRzByRCxLQUFJaXhELElBQUlFLEdBQUc1ekcsRUFBRStpRCxLQUFJOHdELEdBQUc3ekcsRUFBRWpKLElBQVdpSixFQUNyYyxTQUFTbzNHLEdBQUd0Z0gsR0FBRyxJQUFJQyxFQUFFRCxFQUFFdWdILGdCQUFnQixHQUFHLElBQUl0Z0gsRUFBRSxPQUFPQSxFQUF1QixJQUFJdWdILEdBQUd4Z0gsRUFBNUJDLEVBQUVELEVBQUV5Z0gsa0JBQTZCLE9BQU94Z0gsRUFBRSxJQUFJdkMsRUFBRXNDLEVBQUUwZ0gsZUFBbUQsT0FBTyxJQUFqQjFnSCxFQUFFdEMsR0FBNUJzQyxFQUFFQSxFQUFFMmdILHVCQUE0QmpqSCxFQUFFc0MsSUFBZUMsSUFBSUQsRUFBRSxFQUFFQSxFQUNuTCxTQUFTbXNELEdBQUVuc0QsR0FBRyxHQUFHLElBQUlBLEVBQUV1Z0gsZ0JBQWdCdmdILEVBQUU0Z0gsdUJBQXVCLFdBQVc1Z0gsRUFBRTZnSCxpQkFBaUIsR0FBRzdnSCxFQUFFOGdILGFBQWF2UCxHQUFHOE8sR0FBR3hoSCxLQUFLLEtBQUttQixRQUFRLENBQUMsSUFBSUMsRUFBRXFnSCxHQUFHdGdILEdBQUd0QyxFQUFFc0MsRUFBRThnSCxhQUFhLEdBQUcsSUFBSTdnSCxFQUFFLE9BQU92QyxJQUFJc0MsRUFBRThnSCxhQUFhLEtBQUs5Z0gsRUFBRTRnSCx1QkFBdUIsRUFBRTVnSCxFQUFFNmdILGlCQUFpQixRQUFRLENBQUMsSUFBSWxqSCxFQUFFczJHLEtBQXFILEdBQWhILGFBQWFoMEcsRUFBRXRDLEVBQUUsR0FBRyxJQUFJc0MsR0FBRyxJQUFJQSxFQUFFdEMsRUFBRSxHQUEwQ0EsRUFBRSxJQUF4Q0EsRUFBRSxJQUFJLFdBQVdzQyxHQUFHLElBQUksV0FBV3RDLElBQVUsR0FBRyxLQUFLQSxFQUFFLEdBQUcsTUFBTUEsRUFBRSxHQUFHLEdBQU8sT0FBT0QsRUFBRSxDQUFDLElBQUl3TCxFQUFFbEosRUFBRTZnSCxpQkFBaUIsR0FBRzdnSCxFQUFFNGdILHlCQUF5QjNnSCxHQUFHaUosR0FBR3ZMLEVBQUUsT0FBT0QsSUFBSWd6RyxJQUFJZixHQUFHanlHLEdBQUdzQyxFQUFFNGdILHVCQUNuZTNnSCxFQUFFRCxFQUFFNmdILGlCQUFpQmxqSCxFQUFFc0MsRUFBRSxhQUFhQSxFQUFFc3hHLEdBQUc4TyxHQUFHeGhILEtBQUssS0FBS21CLElBQUlzeEcsR0FBRzN6RyxFQUFFb2pILEdBQUdsaUgsS0FBSyxLQUFLbUIsR0FBRyxDQUFDbzRCLFFBQVEsSUFBSSxXQUFXbjRCLEdBQUdpeEcsT0FBT2x4RyxFQUFFOGdILGFBQWE3Z0gsSUFDbEksU0FBUzhnSCxHQUFHL2dILEVBQUVDLEdBQVEsR0FBTGlnSCxHQUFHLEVBQUtqZ0gsRUFBRSxPQUFjK2dILEdBQUdoaEgsRUFBVkMsRUFBRWcwRyxNQUFhOW5ELEdBQUVuc0QsR0FBRyxLQUFLLElBQUl0QyxFQUFFNGlILEdBQUd0Z0gsR0FBRyxHQUFHLElBQUl0QyxFQUFFLENBQWtCLEdBQWpCdUMsRUFBRUQsRUFBRThnSCxhQVBiLElBT2dDLEdBQUYxMUcsSUFBZSxNQUFNdkYsTUFBTStqQixFQUFFLE1BQWlDLEdBQTNCcTNGLEtBQUtqaEgsSUFBSWdzRCxJQUFHdHVELElBQUl1dUQsSUFBR2kxRCxHQUFHbGhILEVBQUV0QyxHQUFNLE9BQU8wdEUsR0FBRSxDQUFDLElBQUl6dEUsRUFBRXlOLEdBQUVBLElBUHZHLEdBT3dILElBQVgsSUFBSWxDLEVBQUVpNEcsT0FBUSxJQUFJQyxLQUFLLE1BQU0sTUFBTXozRyxHQUFHMDNHLEdBQUdyaEgsRUFBRTJKLEdBQWtDLEdBQXRCb29HLEtBQUszbUcsR0FBRXpOLEVBQUUwaEgsR0FBR3owQyxRQUFRMWhFLEVBUHZLLElBTzRLeWlELEdBQU8sTUFBTTFyRCxFQUFFcy9HLEdBQUcyQixHQUFHbGhILEVBQUV0QyxHQUFHby9HLEdBQUc5OEcsRUFBRXRDLEdBQUd5dUQsR0FBRW5zRCxHQUFHQyxFQUFFLEdBQUcsT0FBT21yRSxHQUFFLE9BQU9saUUsRUFBRWxKLEVBQUVzaEgsYUFBYXRoSCxFQUFFNHFFLFFBQVEydkIsVUFBVXY2RixFQUFFdWhILHVCQUF1QjdqSCxFQUFFQyxFQUFFZ3VELEdBQUVLLEdBQUUsS0FBS3J1RCxHQUFHLEtBQUsrK0csR0FBRyxLQVA5VCxFQU9zVSxNQUFNNzJHLE1BQU0rakIsRUFBRSxNQUFNLEtBUHJWLEVBTzZWbzNGLEdBQUdoaEgsRUFBRSxFQUFFdEMsRUFBRSxFQUFFQSxHQUFHLE1BQU0sS0FBS2kvRyxHQUN2YixHQUQwYkcsR0FBRzk4RyxFQUFFdEMsR0FDdGVBLEtBRHllQyxFQUFFcUMsRUFBRXdoSCxxQkFDcmV4aEgsRUFBRTJnSCxzQkFBc0JjLEdBQUd2NEcsSUFBTyxhQUFhczJHLElBQWtCLElBQWJ0MkcsRUFBRXExRyxHQVJxSixJQVEvSXJOLE1BQVcsQ0FBQyxHQUFHeU8sR0FBRyxDQUFDLElBQUlqakYsRUFBRTE4QixFQUFFMGdILGVBQWUsR0FBRyxJQUFJaGtGLEdBQUdBLEdBQUdoL0IsRUFBRSxDQUFDc0MsRUFBRTBnSCxlQUFlaGpILEVBQUV3akgsR0FBR2xoSCxFQUFFdEMsR0FBRyxPQUFlLEdBQUcsS0FBWGcvQixFQUFFNGpGLEdBQUd0Z0gsS0FBYTA4QixJQUFJaC9CLEVBQUUsTUFBTSxHQUFHLElBQUlDLEdBQUdBLElBQUlELEVBQUUsQ0FBQ3NDLEVBQUUwZ0gsZUFBZS9pSCxFQUFFLE1BQU1xQyxFQUFFMGhILGNBQWMxZixHQUFHMmYsR0FBRzlpSCxLQUFLLEtBQUttQixHQUFHa0osR0FBRyxNQUFNeTRHLEdBQUczaEgsR0FBRyxNQUFNLEtBQUs0OEcsR0FBd0UsR0FBckVFLEdBQUc5OEcsRUFBRXRDLEdBQXlCQSxLQUF0QkMsRUFBRXFDLEVBQUV3aEgscUJBQTBCeGhILEVBQUUyZ0gsc0JBQXNCYyxHQUFHdjRHLElBQU95MkcsS0FBd0IsS0FBbkJ6MkcsRUFBRWxKLEVBQUUwZ0gsaUJBQXNCeDNHLEdBQUd4TCxHQUFHLENBQUNzQyxFQUFFMGdILGVBQWVoakgsRUFBRXdqSCxHQUFHbGhILEVBQUV0QyxHQUFHLE1BQWMsR0FBRyxLQUFYd0wsRUFBRW8zRyxHQUFHdGdILEtBQWFrSixJQUFJeEwsRUFBRSxNQUFNLEdBQUcsSUFBSUMsR0FBR0EsSUFBSUQsRUFBRSxDQUFDc0MsRUFBRTBnSCxlQUN4ZS9pSCxFQUFFLE1BQWdQLEdBQTFPLGFBQWE4aEgsR0FBRzloSCxFQUFFLElBQUksV0FBVzhoSCxJQUFJdk8sS0FBSyxhQUFhc08sR0FBRzdoSCxFQUFFLEdBQUdBLEVBQUUsSUFBSSxXQUFXNmhILElBQUksSUFBdUMsR0FBTjdoSCxHQUE3QnVMLEVBQUVnb0csTUFBK0J2ekcsS0FBUUEsRUFBRSxJQUFwQ0QsRUFBRSxJQUFJLFdBQVdBLEdBQUd3TCxJQUFtQnZMLEdBQUcsSUFBSUEsRUFBRSxJQUFJLElBQUlBLEVBQUUsSUFBSSxLQUFLQSxFQUFFLEtBQUssS0FBS0EsRUFBRSxLQUFLLElBQUlBLEVBQUUsSUFBSSxLQUFLQSxFQUFFLEtBQUssS0FBS3loSCxHQUFHemhILEVBQUUsT0FBT0EsS0FBUUEsRUFBRUQsSUFBTyxHQUFHQyxFQUFFLENBQUNxQyxFQUFFMGhILGNBQWMxZixHQUFHMmYsR0FBRzlpSCxLQUFLLEtBQUttQixHQUFHckMsR0FBRyxNQUFNZ2tILEdBQUczaEgsR0FBRyxNQUFNLEtBVDVMLEVBU29NLEdBQUcsYUFBYXcvRyxJQUFJLE9BQU9FLEdBQUcsQ0FBQ2hqRixFQUFFOGlGLEdBQUcsSUFBSW5yRixFQUFFcXJGLEdBQXVILEdBQTVGLElBQXhCL2hILEVBQXNCLEVBQXBCMDJCLEVBQUV1dEYsbUJBQXlCamtILEVBQUUsR0FBR3VMLEVBQWdCLEVBQWRtckIsRUFBRXd0RixZQUE4RGxrSCxHQUFoRCsrQixFQUFFdzBFLE1BQU0sSUFBSSxXQUFXeDBFLElBQWdCLEVBQVpySSxFQUFFOHJGLFdBQWEsUUFBV2ozRyxFQUFFLEVBQUVBLEVBQUV2TCxFQUFFKytCLEdBQU0sR0FBRy8rQixFQUFFLENBQUNtL0csR0FBRzk4RyxFQUFFdEMsR0FBR3NDLEVBQUUwaEgsY0FDL2UxZixHQUFHMmYsR0FBRzlpSCxLQUFLLEtBQUttQixHQUFHckMsR0FBRyxPQUFPZ2tILEdBQUczaEgsR0FBRyxNQUFNLFFBQVEsTUFBTTZGLE1BQU0rakIsRUFBRSxNQUFZLEdBQUx1aUMsR0FBRW5zRCxHQUFNQSxFQUFFOGdILGVBQWU3Z0gsRUFBRSxPQUFPOGdILEdBQUdsaUgsS0FBSyxLQUFLbUIsSUFBSSxPQUFPLEtBQ2hJLFNBQVNxZ0gsR0FBR3JnSCxHQUFHLElBQUlDLEVBQUVELEVBQUV1Z0gsZ0JBQXFDLEdBQXJCdGdILEVBQUUsSUFBSUEsRUFBRUEsRUFBRSxXQVh1QixJQVdOLEdBQUZtTCxJQUFlLE1BQU12RixNQUFNK2pCLEVBQUUsTUFBaUMsR0FBM0JxM0YsS0FBS2poSCxJQUFJZ3NELElBQUcvckQsSUFBSWdzRCxJQUFHaTFELEdBQUdsaEgsRUFBRUMsR0FBTSxPQUFPbXJFLEdBQUUsQ0FBQyxJQUFJMXRFLEVBQUUwTixHQUFFQSxJQVhqRSxHQVdrRixJQUFYLElBQUl6TixFQUFFd2pILE9BQVEsSUFBSVcsS0FBSyxNQUFNLE1BQU01NEcsR0FBR200RyxHQUFHcmhILEVBQUVrSixHQUFrQyxHQUF0QjZvRyxLQUFLM21HLEdBQUUxTixFQUFFMmhILEdBQUd6MEMsUUFBUWp0RSxFQVhqSSxJQVdzSWd1RCxHQUFPLE1BQU1qdUQsRUFBRTZoSCxHQUFHMkIsR0FBR2xoSCxFQUFFQyxHQUFHNjhHLEdBQUc5OEcsRUFBRUMsR0FBR2tzRCxHQUFFbnNELEdBQUd0QyxFQUFFLEdBQUcsT0FBTzB0RSxHQUFFLE1BQU12bEUsTUFBTStqQixFQUFFLE1BQU01cEIsRUFBRXNoSCxhQUFhdGhILEVBQUU0cUUsUUFBUTJ2QixVQUFVdjZGLEVBQUV1aEgsdUJBQXVCdGhILEVBQUUrckQsR0FBRSxLQUFLMjFELEdBQUczaEgsR0FBR21zRCxHQUFFbnNELEdBQUcsT0FBTyxLQUN6WSxTQUFTK2hILEdBQUcvaEgsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRTBOLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU9wTCxFQUFFQyxHQUFHLFFBWjBCLEtBWWxCbUwsR0FBRTFOLElBQVNpTixNQUFNLFNBQVNxM0csR0FBR2hpSCxFQUFFQyxHQUFHLElBQUl2QyxFQUFFME4sR0FBRUEsS0FBSSxFQUFFQSxJQVp6QixFQVkrQixJQUFJLE9BQU9wTCxFQUFFQyxHQUFHLFFBWnBELEtBWTREbUwsR0FBRTFOLElBQVNpTixNQUMvSSxTQUFTdTJHLEdBQUdsaEgsRUFBRUMsR0FBR0QsRUFBRXNoSCxhQUFhLEtBQUt0aEgsRUFBRXVoSCx1QkFBdUIsRUFBRSxJQUFJN2pILEVBQUVzQyxFQUFFMGhILGNBQWlELElBQWxDLElBQUloa0gsSUFBSXNDLEVBQUUwaEgsZUFBZSxFQUFFemYsR0FBR3ZrRyxJQUFPLE9BQU8wdEUsR0FBRSxJQUFJMXRFLEVBQUUwdEUsR0FBRXR1QyxPQUFPLE9BQU9wL0IsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUUsT0FBT0MsRUFBRThsQyxLQUFLLEtBQUssRUFBNkIsT0FBM0I5bEMsRUFBRUEsRUFBRTY0QixLQUFLK1csb0JBQXdDMmhFLEtBQUssTUFBTSxLQUFLLEVBQUVxSCxLQUFLL3JDLEdBQUVLLElBQUdMLEdBQUV6ZSxJQUFHLE1BQU0sS0FBSyxFQUFFMHFELEdBQUc5NEcsR0FBRyxNQUFNLEtBQUssRUFBRTQ0RyxLQUFLLE1BQU0sS0FBSyxHQUFjLEtBQUssR0FBRy9yQyxHQUFFcmdFLElBQUcsTUFBTSxLQUFLLEdBQUc2bkcsR0FBR3IwRyxHQUFHRCxFQUFFQSxFQUFFby9CLE9BQU9rdkIsR0FBRWhzRCxFQUFFb3JFLEdBQUVvcUMsR0FBR3gxRyxFQUFFNHFFLFFBQVEsTUFBTTNlLEdBQUVoc0QsRUFBRTByRCxHQUFFK3dELEdBQUc2QyxHQUFHLEtBQUtFLEdBQUdELEdBQUcsV0FBV0UsR0FBRyxLQUFLN0MsR0FBRyxFQUFFOEMsSUFBRyxFQUNuYyxTQUFTMEIsR0FBR3JoSCxFQUFFQyxHQUFHLE9BQUUsQ0FBQyxJQUF1QixHQUFuQjh4RyxLQUFLK0UsR0FBR2xzQyxRQUFRMnNDLEdBQU1OLEdBQUcsSUFBSSxJQUFJdjVHLEVBQUVndUQsR0FBRWd2QyxjQUFjLE9BQU9oOUYsR0FBRyxDQUFDLElBQUlDLEVBQUVELEVBQUV1N0MsTUFBTSxPQUFPdDdDLElBQUlBLEVBQUVxMUcsUUFBUSxNQUFNdDFHLEVBQUVBLEVBQUVpZCxLQUEyQixHQUF0QnE4RixHQUFHLEVBQUUvckMsR0FBRTd0QixHQUFFc08sR0FBRSxLQUFLdXJELElBQUcsRUFBTSxPQUFPN3JDLElBQUcsT0FBT0EsR0FBRXR1QyxPQUFPLE9BQU82dUIsR0FkL0YsRUFjb0c0ekQsR0FBR3QvRyxFQUFFbXJFLEdBQUUsS0FBS3ByRSxFQUFFLENBQUMsSUFBSWtKLEVBQUVsSixFQUFFMDhCLEVBQUUwdUMsR0FBRXR1QyxPQUFPekksRUFBRSsyQyxHQUFFemhFLEVBQUUxSixFQUF3RCxHQUF0REEsRUFBRWdzRCxHQUFFNTNCLEVBQUVtbUUsV0FBVyxLQUFLbm1FLEVBQUVraEYsWUFBWWxoRixFQUFFZ2hGLFdBQVcsS0FBUSxPQUFPMXJHLEdBQUcsaUJBQWtCQSxHQUFHLG1CQUFvQkEsRUFBRTJ3QixLQUFLLENBQUMsSUFBSWg2QixFQUFFcUosRUFBRSxHQUFHLElBQVksRUFBUDBxQixFQUFFNzFCLE1BQVEsQ0FBQyxJQUFJbEIsRUFBRSsyQixFQUFFa21FLFVBQVVqOUYsR0FBRysyQixFQUFFdStFLFlBQVl0MUcsRUFBRXMxRyxZQUFZditFLEVBQUVxbUUsY0FBY3A5RixFQUFFbzlGLGNBQWNybUUsRUFBRWcrRSxlQUFlLzBHLEVBQUUrMEcsaUJBQWlCaCtFLEVBQUV1K0UsWUFDdmYsS0FBS3YrRSxFQUFFcW1FLGNBQWMsTUFBTSxJQUFJajlGLEVBQUUsSUFBZSxFQUFWME0sR0FBRXlnRSxTQUFXenJFLEVBQUV1OUIsRUFBRSxFQUFFLENBQUMsSUFBSTlxQixFQUFFLEdBQUdBLEVBQUUsS0FBS3pTLEVBQUVza0MsSUFBSSxDQUFDLElBQUlnb0IsRUFBRXRzRCxFQUFFdTdGLGNBQWMsR0FBRyxPQUFPanZDLEVBQUU3NUMsRUFBRSxPQUFPNjVDLEVBQUVrdkMsZUFBcUIsQ0FBQyxJQUFJNlksRUFBR3IwRyxFQUFFdTNHLGNBQWM5a0csT0FBRSxJQUFTNGhHLEVBQUdnSSxZQUFZLElBQUtoSSxFQUFHaUksNkJBQThCaCtHLElBQVMsR0FBR21VLEVBQUUsQ0FBQyxJQUFJL0ksRUFBRTFKLEVBQUV5ekcsWUFBWSxHQUFHLE9BQU8vcEcsRUFBRSxDQUFDLElBQUl0SyxFQUFFLElBQUk4M0MsSUFBSTkzQyxFQUFFaWlCLElBQUlsZ0IsR0FBR25CLEVBQUV5ekcsWUFBWXIwRyxPQUFPc0ssRUFBRTJYLElBQUlsZ0IsR0FBRyxHQUFHLElBQVksRUFBUG5CLEVBQUVYLE1BQVEsQ0FBb0MsR0FBbkNXLEVBQUVxN0YsV0FBVyxHQUFHbm1FLEVBQUVtbUUsWUFBWSxLQUFRLElBQUlubUUsRUFBRW9QLElBQUksR0FBRyxPQUFPcFAsRUFBRWttRSxVQUFVbG1FLEVBQUVvUCxJQUFJLE9BQU8sQ0FBQyxJQUFJbDRCLEVBQUU0bkcsR0FBRyxXQUFXLE1BQU01bkcsRUFBRWs0QixJQUFJLEVBQUU0dkUsR0FBR2gvRSxFQUFFOW9CLEdBQUc4b0IsRUFBRWcrRSxlQUFlLFdBQ2xmLE1BQU1yeUcsRUFBRTJKLE9BQUUsRUFBTzBxQixFQUFFcDBCLEVBQUUsSUFBSW9yRCxFQUFFbmlELEVBQUUrNEcsVUFBK0csR0FBckcsT0FBTzUyRCxHQUFHQSxFQUFFbmlELEVBQUUrNEcsVUFBVSxJQUFJdEQsR0FBR2gxRyxFQUFFLElBQUkwc0MsSUFBSWdWLEVBQUU3a0QsSUFBSWxHLEVBQUVxSixTQUFnQixLQUFYQSxFQUFFMGhELEVBQUVudEQsSUFBSW9DLE1BQWdCcUosRUFBRSxJQUFJMHNDLElBQUlnVixFQUFFN2tELElBQUlsRyxFQUFFcUosS0FBU0EsRUFBRXNyQyxJQUFJNWdCLEdBQUcsQ0FBQzFxQixFQUFFNlcsSUFBSTZULEdBQUcsSUFBSXUzQixFQUFFczJELEdBQUdyakgsS0FBSyxLQUFLcUssRUFBRTVJLEVBQUUrekIsR0FBRy96QixFQUFFZzZCLEtBQUtzeEIsRUFBRUEsR0FBR3pzRCxFQUFFcTdGLFdBQVcsS0FBS3I3RixFQUFFa3pHLGVBQWVweUcsRUFBRSxNQUFNRCxFQUFFYixFQUFFQSxFQUFFMjlCLGFBQWEsT0FBTzM5QixHQUFHd0ssRUFBRTlELE9BQU9zd0YsR0FBRzloRSxFQUFFbUMsT0FBTyxxQkFBcUIsd0xBQXdMNC9ELEdBQUcvaEUsSUFoQi9YLElBZ0JtWXMzQixLQUNyZkEsR0FqQm1HLEdBaUI3RmhpRCxFQUFFc3pHLEdBQUd0ekcsRUFBRTBxQixHQUFHbDFCLEVBQUV1OUIsRUFBRSxFQUFFLENBQUMsT0FBT3Y5QixFQUFFc2tDLEtBQUssS0FBSyxFQUFFbmpDLEVBQUVxSixFQUFFeEssRUFBRXE3RixXQUFXLEtBQUtyN0YsRUFBRWt6RyxlQUFlcHlHLEVBQWtCcXpHLEdBQUduMEcsRUFBYnkvRyxHQUFHei9HLEVBQUVtQixFQUFFTCxJQUFXLE1BQU1ELEVBQUUsS0FBSyxFQUFFTSxFQUFFcUosRUFBRSxJQUFJc0IsRUFBRTlMLEVBQUVxM0IsS0FBSzJyRixFQUFHaGpILEVBQUVpMEYsVUFBVSxHQUFHLElBQWlCLEdBQVpqMEYsRUFBRXE3RixhQUFnQixtQkFBb0J2dkYsRUFBRSt2RywwQkFBMEIsT0FBT21ILEdBQUksbUJBQW9CQSxFQUFHbkQsb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUdocUUsSUFBSWt0RSxLQUFNLENBQUNoakgsRUFBRXE3RixXQUFXLEtBQUtyN0YsRUFBRWt6RyxlQUFlcHlHLEVBQW1CcXpHLEdBQUduMEcsRUFBYjQvRyxHQUFHNS9HLEVBQUVtQixFQUFFTCxJQUFZLE1BQU1ELEdBQUdiLEVBQUVBLEVBQUUyOUIsYUFBYSxPQUFPMzlCLEdBQUdpc0UsR0FBRWczQyxHQUFHaDNDLElBQUcsTUFBTWkzQyxHQUFJcGlILEVBQUVvaUgsRUFBRyxTQUFTLE9BQzliLFNBQVNsQixLQUFLLElBQUluaEgsRUFBRXEvRyxHQUFHejBDLFFBQXNCLE9BQWR5MEMsR0FBR3owQyxRQUFRMnNDLEdBQVUsT0FBT3YzRyxFQUFFdTNHLEdBQUd2M0csRUFBRSxTQUFTeXpHLEdBQUd6ekcsRUFBRUMsR0FBR0QsRUFBRXcvRyxJQUFJLEVBQUV4L0csSUFBSXcvRyxHQUFHeC9HLEdBQUcsT0FBT0MsR0FBR0QsRUFBRXkvRyxJQUFJLEVBQUV6L0csSUFBSXkvRyxHQUFHei9HLEVBQUUwL0csR0FBR3ovRyxHQUFHLFNBQVN5ekcsR0FBRzF6RyxHQUFHQSxFQUFFNjhHLEtBQUtBLEdBQUc3OEcsR0FBRyxTQUFTOGhILEtBQUssS0FBSyxPQUFPMTJDLElBQUdBLEdBQUVrM0MsR0FBR2wzQyxJQUFHLFNBQVNnMkMsS0FBSyxLQUFLLE9BQU9oMkMsS0FBSXVsQyxNQUFNdmxDLEdBQUVrM0MsR0FBR2wzQyxJQUFHLFNBQVNrM0MsR0FBR3RpSCxHQUFHLElBQUlDLEVBQUVrL0csR0FBR24vRyxFQUFFdTZGLFVBQVV2NkYsRUFBRWlzRCxJQUFzRSxPQUFuRWpzRCxFQUFFMDJHLGNBQWMxMkcsRUFBRTg1RyxhQUFhLE9BQU83NUcsSUFBSUEsRUFBRW1pSCxHQUFHcGlILElBQUlzL0csR0FBRzEwQyxRQUFRLEtBQVkzcUUsRUFDdFcsU0FBU21pSCxHQUFHcGlILEdBQUdvckUsR0FBRXByRSxFQUFFLEVBQUUsQ0FBQyxJQUFJQyxFQUFFbXJFLEdBQUVtdkIsVUFBcUIsR0FBWHY2RixFQUFFb3JFLEdBQUV0dUMsT0FBVSxJQUFpQixLQUFac3VDLEdBQUVvdkIsV0FBZ0IsQ0FBYSxHQUFadjZGLEVBQUVtOEcsR0FBR244RyxFQUFFbXJFLEdBQUVuZixJQUFNLElBQUlBLElBQUcsSUFBSW1mLEdBQUU4bUMsb0JBQW9CLENBQUMsSUFBSSxJQUFJeDBHLEVBQUUsRUFBRUMsRUFBRXl0RSxHQUFFME8sTUFBTSxPQUFPbjhFLEdBQUcsQ0FBQyxJQUFJdUwsRUFBRXZMLEVBQUUwMEcsZUFBZTMxRSxFQUFFLytCLEVBQUV1MEcsb0JBQW9CaHBHLEVBQUV4TCxJQUFJQSxFQUFFd0wsR0FBR3d6QixFQUFFaC9CLElBQUlBLEVBQUVnL0IsR0FBRy8rQixFQUFFQSxFQUFFbTlGLFFBQVExdkIsR0FBRThtQyxvQkFBb0J4MEcsRUFBRSxHQUFHLE9BQU91QyxFQUFFLE9BQU9BLEVBQUUsT0FBT0QsR0FBRyxJQUFpQixLQUFaQSxFQUFFdzZGLGFBQWtCLE9BQU94NkYsRUFBRXUxRyxjQUFjdjFHLEVBQUV1MUcsWUFBWW5xQyxHQUFFbXFDLGFBQWEsT0FBT25xQyxHQUFFaXFDLGFBQWEsT0FBT3IxRyxFQUFFcTFHLGFBQWFyMUcsRUFBRXExRyxXQUFXQyxXQUFXbHFDLEdBQUVtcUMsYUFBYXYxRyxFQUFFcTFHLFdBQVdqcUMsR0FBRWlxQyxZQUFZLEVBQUVqcUMsR0FBRW92QixZQUFZLE9BQ25meDZGLEVBQUVxMUcsV0FBV3IxRyxFQUFFcTFHLFdBQVdDLFdBQVdscUMsR0FBRXByRSxFQUFFdTFHLFlBQVlucUMsR0FBRXByRSxFQUFFcTFHLFdBQVdqcUMsU0FBUSxDQUFTLEdBQUcsUUFBWG5yRSxFQUFFKzhHLEdBQUc1eEMsS0FBZSxPQUFPbnJFLEVBQUV1NkYsV0FBVyxLQUFLdjZGLEVBQUUsT0FBT0QsSUFBSUEsRUFBRXUxRyxZQUFZdjFHLEVBQUVxMUcsV0FBVyxLQUFLcjFHLEVBQUV3NkYsV0FBVyxNQUFrQixHQUFHLFFBQWZ2NkYsRUFBRW1yRSxHQUFFMHZCLFNBQW9CLE9BQU83NkYsRUFBRW1yRSxHQUFFcHJFLFFBQVEsT0FBT29yRSxJQUFrQixPQUFmemYsS0FBSSt3RCxLQUFLL3dELEdBcEJqSSxHQW9COEksS0FBSyxTQUFTODFELEdBQUd6aEgsR0FBRyxJQUFJQyxFQUFFRCxFQUFFcXlHLGVBQXVDLE9BQU9weUcsR0FBL0JELEVBQUVBLEVBQUVreUcscUJBQStCanlHLEVBQUVELEVBQUUsU0FBUzJoSCxHQUFHM2hILEdBQUcsSUFBSUMsRUFBRWt4RyxLQUE4QixPQUF6QkUsR0FBRyxHQUFHa1IsR0FBRzFqSCxLQUFLLEtBQUttQixFQUFFQyxJQUFXLEtBQ2paLFNBQVNzaUgsR0FBR3ZpSCxFQUFFQyxHQUFHLEdBQUdnaEgsV0FBVyxPQUFPcEIsSUFBSSxHQXJCOEIsSUFxQnhCLEdBQUZ6MEcsSUFBZSxNQUFNdkYsTUFBTStqQixFQUFFLE1BQU0sSUFBSWxzQixFQUFFc0MsRUFBRXNoSCxhQUFhM2pILEVBQUVxQyxFQUFFdWhILHVCQUF1QixHQUFHLE9BQU83akgsRUFBRSxPQUFPLEtBQW9ELEdBQS9Dc0MsRUFBRXNoSCxhQUFhLEtBQUt0aEgsRUFBRXVoSCx1QkFBdUIsRUFBSzdqSCxJQUFJc0MsRUFBRTRxRSxRQUFRLE1BQU0va0UsTUFBTStqQixFQUFFLE1BQU01cEIsRUFBRThnSCxhQUFhLEtBQUs5Z0gsRUFBRTRnSCx1QkFBdUIsRUFBRTVnSCxFQUFFNmdILGlCQUFpQixHQUFHN2dILEVBQUUyZ0gsc0JBQXNCLEVBQUUsSUFBSXozRyxFQUFFdTRHLEdBQUcvakgsR0FDbEksR0FEcUlzQyxFQUFFeWdILGlCQUFpQnYzRyxFQUFFdkwsR0FBR3FDLEVBQUV3aEgsa0JBQWtCeGhILEVBQUV3aUgsbUJBQW1CeGlILEVBQUV3aEgsa0JBQWtCeGhILEVBQUUyZ0gsc0JBQXNCLEVBQUVoakgsR0FBR3FDLEVBQUV3aUgscUJBQXFCeGlILEVBQUV3aUgsbUJBQ25lN2tILEVBQUUsR0FBR0EsR0FBR3FDLEVBQUUwZ0gsaUJBQWlCMWdILEVBQUUwZ0gsZUFBZSxHQUFHL2lILEdBQUdxQyxFQUFFdWdILGtCQUFrQnZnSCxFQUFFdWdILGdCQUFnQixHQUFHdmdILElBQUlnc0QsS0FBSW9mLEdBQUVwZixHQUFFLEtBQUtDLEdBQUUsR0FBRyxFQUFFdnVELEVBQUU4OEYsVUFBVSxPQUFPOThGLEVBQUUyM0csWUFBWTMzRyxFQUFFMjNHLFdBQVdDLFdBQVc1M0csRUFBRXdMLEVBQUV4TCxFQUFFNjNHLGFBQWFyc0csRUFBRXhMLEVBQUV3TCxFQUFFeEwsRUFBRTYzRyxZQUFlLE9BQU9yc0csRUFBRSxDQUFDLElBQUl3ekIsRUFBRXR4QixHQUFFQSxJQXRCaEosR0FzQnNKazBHLEdBQUcxMEMsUUFBUSxLQUFLKzJCLEdBQUdyQyxHQUFHLElBQUlqckUsRUFBRWl0RSxLQUFLLEdBQUdHLEdBQUdwdEUsR0FBRyxDQUFDLEdBQUcsbUJBQW1CQSxFQUFFLElBQUkxcUIsRUFBRSxDQUFDZy9DLE1BQU10MEIsRUFBRWsxRSxlQUFlM2hFLElBQUl2VCxFQUFFbTFFLG1CQUFtQnhwRyxFQUFFLENBQThDLElBQUlNLEdBQWpEcUosR0FBR0EsRUFBRTBxQixFQUFFdVAsZ0JBQWdCajZCLEVBQUVnL0YsYUFBYXRyRSxRQUFlcXNFLGNBQWMvL0YsRUFBRSsvRixlQUFlLEdBQUdwcEcsR0FBRyxJQUFJQSxFQUFFbWlILFdBQVcsQ0FBQzk0RyxFQUFFckosRUFBRW1wRyxXQUFXLElBQUluc0csRUFBRWdELEVBQUVxcEcsYUFDOWVsc0csRUFBRTZDLEVBQUVzcEcsVUFBVXRwRyxFQUFFQSxFQUFFdXBHLFlBQVksSUFBSWxnRyxFQUFFdXZGLFNBQVN6N0YsRUFBRXk3RixTQUFTLE1BQU13cEIsR0FBSS80RyxFQUFFLEtBQUssTUFBTTNKLEVBQUUsSUFBSWIsRUFBRSxFQUFFeVMsR0FBRyxFQUFFNjVDLEdBQUcsRUFBRStuRCxFQUFHLEVBQUUzcUcsRUFBRSxFQUFFdEssRUFBRTgxQixFQUFFOW9CLEVBQUUsS0FBS3RMLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSW9yRCxFQUFLOXNELElBQUlvTCxHQUFHLElBQUlyTSxHQUFHLElBQUlpQixFQUFFMjZGLFdBQVd0bkYsRUFBRXpTLEVBQUU3QixHQUFHaUIsSUFBSWQsR0FBRyxJQUFJNkMsR0FBRyxJQUFJL0IsRUFBRTI2RixXQUFXenRDLEVBQUV0c0QsRUFBRW1CLEdBQUcsSUFBSS9CLEVBQUUyNkYsV0FBVy81RixHQUFHWixFQUFFNDZGLFVBQVU5NEYsUUFBVyxRQUFRZ3JELEVBQUU5c0QsRUFBRXc2RixhQUFrQnh0RixFQUFFaE4sRUFBRUEsRUFBRThzRCxFQUFFLE9BQU8sQ0FBQyxHQUFHOXNELElBQUk4MUIsRUFBRSxNQUFNcDBCLEVBQStDLEdBQTdDc0wsSUFBSTVCLEtBQUs2cEcsSUFBS2wyRyxJQUFJc1UsRUFBRXpTLEdBQUdvTSxJQUFJOU4sS0FBS29MLElBQUl2SSxJQUFJbXJELEVBQUV0c0QsR0FBTSxRQUFRa3NELEVBQUU5c0QsRUFBRTBvQyxhQUFhLE1BQVUxN0IsR0FBSmhOLEVBQUVnTixHQUFNeTdCLFdBQVd6b0MsRUFBRThzRCxFQUFFMWhELEdBQUcsSUFBSWlJLElBQUksSUFBSTY1QyxFQUFFLEtBQUssQ0FBQzlDLE1BQU0vMkMsRUFBRWcyQixJQUFJNmpCLFFBQVE5aEQsRUFBRSxLQUFLQSxFQUFFQSxHQUFHLENBQUNnL0MsTUFBTSxFQUFFL2dCLElBQUksUUFBUWorQixFQUN0ZixLQUFLaTRGLEdBQUcsQ0FBQytnQixzQkFBc0IsS0FBS0MsWUFBWXZ1RixFQUFFd3VGLGVBQWVsNUcsR0FBRzIxRixJQUFHLEVBQUdqMEIsR0FBRW5pRSxFQUFFLEdBQUcsSUFBSTQ1RyxLQUFLLE1BQU1KLEdBQUksR0FBRyxPQUFPcjNDLEdBQUUsTUFBTXhsRSxNQUFNK2pCLEVBQUUsTUFBTXl6RixHQUFHaHlDLEdBQUVxM0MsR0FBSXIzQyxHQUFFQSxHQUFFaXFDLGtCQUFpQixPQUFPanFDLElBQUdBLEdBQUVuaUUsRUFBRSxHQUFHLElBQUksSUFBSW1yQixFQUFFcjBCLEVBQUUySixFQUFFMUosRUFBRSxPQUFPb3JFLElBQUcsQ0FBQyxJQUFJemYsRUFBRXlmLEdBQUVtdkIsVUFBbUMsR0FBdkIsR0FBRjV1QyxHQUFNb3RDLEdBQUczdEIsR0FBRStuQixVQUFVLElBQVMsSUFBRnhuQyxFQUFNLENBQUMsSUFBSUMsRUFBRXdmLEdBQUVrdkIsVUFBVSxHQUFHLE9BQU8xdUMsRUFBRSxDQUFDLElBQUk1Z0QsRUFBRTRnRCxFQUFFNWEsSUFBSSxPQUFPaG1DLElBQUksbUJBQW9CQSxFQUFFQSxFQUFFLE1BQU1BLEVBQUUyL0QsUUFBUSxPQUFPLE9BQVMsS0FBRmhmLEdBQVEsS0FBSyxFQUFFc3lELEdBQUc3eUMsSUFBR0EsR0FBRW12QixZQUFZLEVBQUUsTUFBTSxLQUFLLEVBQUUwakIsR0FBRzd5QyxJQUFHQSxHQUFFbXZCLFlBQVksRUFBRThqQixHQUFHanpDLEdBQUVrdkIsVUFBVWx2QixJQUFHLE1BQU0sS0FBSyxLQUFLQSxHQUFFbXZCLFlBQVksS0FBSyxNQUFNLEtBQUssS0FBS252QixHQUFFbXZCLFlBQzdmLEtBQUs4akIsR0FBR2p6QyxHQUFFa3ZCLFVBQVVsdkIsSUFBRyxNQUFNLEtBQUssRUFBRWl6QyxHQUFHanpDLEdBQUVrdkIsVUFBVWx2QixJQUFHLE1BQU0sS0FBSyxFQUFNMHlDLEdBQUcxcEYsRUFBUC8yQixFQUFFK3RFLEdBQVMxaEUsR0FBR3EwRyxHQUFHMWdILEdBQUcrdEUsR0FBRUEsR0FBRWlxQyxZQUFZLE1BQU1vTixHQUFJLEdBQUcsT0FBT3IzQyxHQUFFLE1BQU14bEUsTUFBTStqQixFQUFFLE1BQU15ekYsR0FBR2h5QyxHQUFFcTNDLEdBQUlyM0MsR0FBRUEsR0FBRWlxQyxrQkFBaUIsT0FBT2pxQyxJQUFrRCxHQUEvQ3BnRSxFQUFFMjJGLEdBQUcvMUMsRUFBRXkxQyxLQUFLMTFDLEVBQUUzZ0QsRUFBRTIzRyxZQUFZajVHLEVBQUVzQixFQUFFNDNHLGVBQWtCaDNELElBQUlELEdBQUdBLEdBQUdBLEVBQUVob0IsZUFoTHhQLFNBQVNtL0UsRUFBRy9pSCxFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRWs1RixZQUFZajVGLEdBQUcsSUFBSUEsRUFBRWk1RixTQUFTNnBCLEVBQUcvaUgsRUFBRUMsRUFBRSttQyxZQUFZLGFBQWFobkMsRUFBRUEsRUFBRWdqSCxTQUFTL2lILEtBQUdELEVBQUVpakgsNEJBQXdELEdBQTdCampILEVBQUVpakgsd0JBQXdCaGpILE1BZ0xtRjhpSCxDQUFHbjNELEVBQUVob0IsY0FBY3l5RSxnQkFBZ0J6cUQsR0FBRyxDQUFDLE9BQU9qaUQsR0FBRzgzRixHQUFHNzFDLEtBQUtDLEVBQUVsaUQsRUFBRWcvQyxXQUFjLEtBQVIxOUMsRUFBRXRCLEVBQUVpK0IsT0FBaUIzOEIsRUFBRTRnRCxHQUFHLG1CQUFtQkQsR0FBR0EsRUFBRTI5QyxlQUFlMTlDLEVBQUVELEVBQUU0OUMsYUFBYTFpRyxLQUFLbU0sSUFBSWhJLEVBQUUyZ0QsRUFBRXR0RCxNQUFNK0IsVUFBVTRLLEdBQUc0Z0QsRUFBRUQsRUFBRWhvQixlQUFlaUQsV0FBV2dsQixFQUFFODhDLGFBQWF0ckUsUUFBU3FzRSxlQUNqZnorRixFQUFFQSxFQUFFeStGLGVBQWVwc0csRUFBRXN1RCxFQUFFN2hCLFlBQVkxcEMsT0FBT2cwQixFQUFFdnRCLEtBQUttTSxJQUFJdEosRUFBRWcvQyxNQUFNcnJELEdBQUdxTSxPQUFFLElBQVNBLEVBQUVpK0IsSUFBSXZULEVBQUV2dEIsS0FBS21NLElBQUl0SixFQUFFaStCLElBQUl0cUMsSUFBSTJOLEVBQUVoSyxRQUFRb3pCLEVBQUUxcUIsSUFBSXJNLEVBQUVxTSxFQUFFQSxFQUFFMHFCLEVBQUVBLEVBQUUvMkIsR0FBR0EsRUFBRStqRyxHQUFHejFDLEVBQUV2M0IsR0FBRzUyQixFQUFFNGpHLEdBQUd6MUMsRUFBRWppRCxHQUFHck0sR0FBR0csSUFBSSxJQUFJd04sRUFBRXczRyxZQUFZeDNHLEVBQUV3K0YsYUFBYW5zRyxFQUFFODRCLE1BQU1uckIsRUFBRTArRixlQUFlcnNHLEVBQUV1a0IsUUFBUTVXLEVBQUUyK0YsWUFBWW5zRyxFQUFFMjRCLE1BQU1uckIsRUFBRTQrRixjQUFjcHNHLEVBQUVva0IsV0FBVWdxQyxFQUFFQSxFQUFFcTNELGVBQWdCQyxTQUFTN2xILEVBQUU4NEIsS0FBSzk0QixFQUFFdWtCLFFBQVE1VyxFQUFFbTRHLGtCQUFrQi91RixFQUFFMXFCLEdBQUdzQixFQUFFbzRHLFNBQVN4M0QsR0FBRzVnRCxFQUFFaEssT0FBT3hELEVBQUUyNEIsS0FBSzM0QixFQUFFb2tCLFVBQVVncUMsRUFBRXkzRCxPQUFPN2xILEVBQUUyNEIsS0FBSzM0QixFQUFFb2tCLFFBQVE1VyxFQUFFbzRHLFNBQVN4M0QsT0FBUUEsRUFBRSxHQUFHLElBQUk1Z0QsRUFBRTJnRCxFQUFFM2dELEVBQUVBLEVBQUUrN0IsWUFBWSxJQUFJLzdCLEVBQUVpdUYsVUFBVXJ0QyxFQUFFN3FELEtBQUssQ0FBQytyRixRQUFROWhGLEVBQUV1dEMsS0FBS3Z0QyxFQUFFczRHLFdBQ3pmQyxJQUFJdjRHLEVBQUV3NEcsWUFBbUQsSUFBdkMsbUJBQW9CNzNELEVBQUUreEQsT0FBTy94RCxFQUFFK3hELFFBQVkveEQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFeHJELE9BQU91ckQsS0FBSTNnRCxFQUFFNGdELEVBQUVELElBQUttaEMsUUFBUXcyQixXQUFXdDRHLEVBQUV1dEMsS0FBS3Z0QyxFQUFFOGhGLFFBQVEwMkIsVUFBVXg0RyxFQUFFdTRHLElBQUlsa0IsS0FBS3FDLEdBQUdDLEdBQUdELEdBQUcsS0FBSzNoRyxFQUFFNHFFLFFBQVFsdEUsRUFBRTJ0RSxHQUFFbmlFLEVBQUUsR0FBRyxJQUFJLElBQUkwaUQsRUFBRTVyRCxFQUFFLE9BQU9xckUsSUFBRyxDQUFDLElBQUk4MkMsRUFBRzkyQyxHQUFFbXZCLFVBQXFDLEdBQXhCLEdBQUgybkIsR0FBT3pFLEdBQUc5eEQsRUFBRXlmLEdBQUVrdkIsVUFBVWx2QixJQUFTLElBQUg4MkMsRUFBTyxDQUFDdDJELE9BQUUsRUFBTyxJQUFJNjNELEVBQUdyNEMsR0FBRXA2QixJQUFJLEdBQUcsT0FBT3l5RSxFQUFHLENBQUMsSUFBSXJCLEVBQUdoM0MsR0FBRStuQixVQUFVLE9BQU8vbkIsR0FBRTVuQyxLQUFLLEtBQUssRUFBRW9vQixFQUFFdzJELEVBQUcsTUFBTSxRQUFReDJELEVBQUV3MkQsRUFBRyxtQkFBb0JxQixFQUFHQSxFQUFHNzNELEdBQUc2M0QsRUFBRzk0QyxRQUFRL2UsR0FBR3dmLEdBQUVBLEdBQUVpcUMsWUFBWSxNQUFNb04sR0FBSSxHQUFHLE9BQU9yM0MsR0FBRSxNQUFNeGxFLE1BQU0rakIsRUFBRSxNQUFNeXpGLEdBQUdoeUMsR0FBRXEzQyxHQUFJcjNDLEdBQUVBLEdBQUVpcUMsa0JBQWlCLE9BQU9qcUMsSUFBR0EsR0FDcGYsS0FBS3dsQyxLQUFLemxHLEdBQUVzeEIsT0FBTzE4QixFQUFFNHFFLFFBQVFsdEUsRUFBRSxHQUFHa2lILEdBQUdBLElBQUcsRUFBR0MsR0FBRzcvRyxFQUFFOC9HLEdBQUc3L0csT0FBTyxJQUFJb3JFLEdBQUVuaUUsRUFBRSxPQUFPbWlFLElBQUdwckUsRUFBRW9yRSxHQUFFaXFDLFdBQVdqcUMsR0FBRWlxQyxXQUFXLEtBQUtqcUMsR0FBRXByRSxFQUFtSSxHQUE1RyxLQUFyQkEsRUFBRUQsRUFBRXlnSCxvQkFBeUJ4QixHQUFHLE1BQU0sYUFBYWgvRyxFQUFFRCxJQUFJaWdILEdBQUdELE1BQU1BLEdBQUcsRUFBRUMsR0FBR2pnSCxHQUFHZ2dILEdBQUcsRUFBRSxtQkFBb0IyRCxJQUFJQSxHQUFHam1ILEVBQUUwMUYsVUFBVXoxRixHQUFHd3VELEdBQUVuc0QsR0FBTTYrRyxHQUFHLE1BQU1BLElBQUcsRUFBRzcrRyxFQUFFOCtHLEdBQUdBLEdBQUcsS0FBSzkrRyxFQUFFLE9BNUIzTSxJQUFLLEVBNEIwTW9MLEtBQXNCVCxLQUFMLEtBQXNCLFNBQVNtNEcsS0FBSyxLQUFLLE9BQU96M0MsSUFBRyxDQUFDLElBQUlyckUsRUFBRXFyRSxHQUFFbXZCLFVBQVUsSUFBTyxJQUFGeDZGLElBQVFzOUcsR0FBR2p5QyxHQUFFa3ZCLFVBQVVsdkIsSUFBRyxJQUFPLElBQUZyckUsSUFBUTQvRyxLQUFLQSxJQUFHLEVBQUd0TyxHQUFHLElBQUcsV0FBZ0IsT0FBTDJQLEtBQVksU0FBUTUxQyxHQUFFQSxHQUFFaXFDLFlBQzljLFNBQVMyTCxLQUFLLEdBQUcsS0FBS25CLEdBQUcsQ0FBQyxJQUFJOS9HLEVBQUUsR0FBRzgvRyxHQUFHLEdBQUdBLEdBQVMsT0FBTkEsR0FBRyxHQUFVek8sR0FBR3J4RyxFQUFFNGpILEtBQUssU0FBU0EsS0FBSyxHQUFHLE9BQU8vRCxHQUFHLE9BQU0sRUFBRyxJQUFJNy9HLEVBQUU2L0csR0FBVyxHQUFSQSxHQUFHLEtBN0IzQyxJQTZCc0QsR0FBRnowRyxJQUFlLE1BQU12RixNQUFNK2pCLEVBQUUsTUFBTSxJQUFJM3BCLEVBQUVtTCxHQUFRLElBQU5BLElBN0IvRSxHQTZCeUZwTCxFQUFFQSxFQUFFNHFFLFFBQVEycUMsWUFBWSxPQUFPdjFHLEdBQUcsQ0FBQyxJQUFJLElBQUl0QyxFQUFFc0MsRUFBRSxHQUFHLElBQWlCLElBQVp0QyxFQUFFODhGLFdBQWUsT0FBTzk4RixFQUFFK2xDLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHKzVFLEdBQUcsRUFBRTkvRyxHQUFHKy9HLEdBQUcsRUFBRS8vRyxJQUFJLE1BQU1DLEdBQUcsR0FBRyxPQUFPcUMsRUFBRSxNQUFNNkYsTUFBTStqQixFQUFFLE1BQU15ekYsR0FBR3I5RyxFQUFFckMsR0FBR0QsRUFBRXNDLEVBQUVzMUcsV0FBV3QxRyxFQUFFczFHLFdBQVcsS0FBS3QxRyxFQUFFdEMsRUFBVyxPQUFUME4sR0FBRW5MLEVBQUUwSyxNQUFXLEVBQzVaLFNBQVNrNUcsR0FBRzdqSCxFQUFFQyxFQUFFdkMsR0FBa0MyMUcsR0FBR3J6RyxFQUF4QkMsRUFBRTIrRyxHQUFHNStHLEVBQWZDLEVBQUVnOUcsR0FBR3YvRyxFQUFFdUMsR0FBWSxhQUF1QyxRQUFuQkQsRUFBRW9nSCxHQUFHcGdILEVBQUUsY0FBc0Jtc0QsR0FBRW5zRCxHQUFHLFNBQVNxOUcsR0FBR3I5RyxFQUFFQyxHQUFHLEdBQUcsSUFBSUQsRUFBRXlqQyxJQUFJb2dGLEdBQUc3akgsRUFBRUEsRUFBRUMsUUFBUSxJQUFJLElBQUl2QyxFQUFFc0MsRUFBRTg4QixPQUFPLE9BQU9wL0IsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRStsQyxJQUFJLENBQUNvZ0YsR0FBR25tSCxFQUFFc0MsRUFBRUMsR0FBRyxNQUFXLEdBQUcsSUFBSXZDLEVBQUUrbEMsSUFBSSxDQUFDLElBQUk5bEMsRUFBRUQsRUFBRTAxRixVQUFVLEdBQUcsbUJBQW9CMTFGLEVBQUU4NEIsS0FBS3drRiwwQkFBMEIsbUJBQW9CcjlHLEVBQUVxaEgsb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUdocUUsSUFBSXQzQyxJQUFJLENBQWdDMDFHLEdBQUczMUcsRUFBeEJzQyxFQUFFKytHLEdBQUdyaEgsRUFBZnNDLEVBQUVpOUcsR0FBR2g5RyxFQUFFRCxHQUFZLGFBQXVDLFFBQW5CdEMsRUFBRTBpSCxHQUFHMWlILEVBQUUsY0FBc0J5dUQsR0FBRXp1RCxHQUFHLE9BQU9BLEVBQUVBLEVBQUVvL0IsUUFDeGIsU0FBU29sRixHQUFHbGlILEVBQUVDLEVBQUV2QyxHQUFHLElBQUlDLEVBQUVxQyxFQUFFaWlILFVBQVUsT0FBT3RrSCxHQUFHQSxFQUFFcWxFLE9BQU8vaUUsR0FBRytyRCxLQUFJaHNELEdBQUdpc0QsS0FBSXZ1RCxFQUFFaXVELEtBQUlpeEQsSUFBSWp4RCxLQUFJZ3hELElBQUksYUFBYTZDLElBQUl0TyxLQUFLcU4sR0EvQnFHLElBK0IvRjJDLEdBQUdsaEgsRUFBRWlzRCxJQUFHMHpELElBQUcsRUFBR2EsR0FBR3hnSCxFQUFFdEMsS0FBd0IsS0FBbkJ1QyxFQUFFRCxFQUFFMGdILGlCQUFzQnpnSCxFQUFFdkMsSUFBSXNDLEVBQUUwZ0gsZUFBZWhqSCxFQUFFeXVELEdBQUVuc0QsS0FBSyxTQUFTMCtHLEdBQUcxK0csRUFBRUMsR0FBRyxJQUFJdkMsRUFBRXNDLEVBQUVvekYsVUFBVSxPQUFPMTFGLEdBQUdBLEVBQUVzbEUsT0FBTy9pRSxHQUFPLEtBQUpBLEVBQUUsS0FBaUJBLEVBQUVpMEcsR0FBVGowRyxFQUFFZzBHLEtBQVlqMEcsRUFBRSxPQUFpQixRQUFWQSxFQUFFb2dILEdBQUdwZ0gsRUFBRUMsS0FBYWtzRCxHQUFFbnNELEdBQ3hUbS9HLEdBQUcsU0FBU24vRyxFQUFFQyxFQUFFdkMsR0FBRyxJQUFJQyxFQUFFc0MsRUFBRW95RyxlQUFlLEdBQUcsT0FBT3J5RyxFQUFFLENBQUMsSUFBSWtKLEVBQUVqSixFQUFFNjVHLGFBQWEsR0FBRzk1RyxFQUFFMDJHLGdCQUFnQnh0RyxHQUFHMmhFLEdBQUVELFFBQVEwbkMsSUFBRyxNQUFPLENBQUMsR0FBRzMwRyxFQUFFRCxFQUFFLENBQU8sT0FBTjQwRyxJQUFHLEVBQVVyeUcsRUFBRXdqQyxLQUFLLEtBQUssRUFBRXczRSxHQUFHaDdHLEdBQUdpNkcsS0FBSyxNQUFNLEtBQUssRUFBUSxHQUFOMUQsR0FBR3YyRyxHQUFhLEVBQVBBLEVBQUV6QixNQUFRLElBQUlkLEdBQUd3TCxFQUFFNDZHLE9BQU8sT0FBTzdqSCxFQUFFb3lHLGVBQWVweUcsRUFBRWl5RyxvQkFBb0IsRUFBRSxLQUFLLE1BQU0sS0FBSyxFQUFFNzVGLEdBQUVwWSxFQUFFdTJCLE9BQU84NEUsR0FBR3J2RyxHQUFHLE1BQU0sS0FBSyxFQUFFbTJHLEdBQUduMkcsRUFBRUEsRUFBRW16RixVQUFVbUosZUFBZSxNQUFNLEtBQUssR0FBRzUrRixFQUFFc0MsRUFBRXkyRyxjQUFjcDRHLE1BQU00SyxFQUFFakosRUFBRXUyQixLQUFLazJDLFNBQVM1Z0IsR0FBRTZsRCxHQUFHem9HLEVBQUVxakUsZUFBZXJqRSxFQUFFcWpFLGNBQWM1dUUsRUFBRSxNQUFNLEtBQUssR0FBRyxHQUFHLE9BQU9zQyxFQUFFeTZGLGNBQ2pkLE9BQUcsS0FENmQvOEYsRUFBRXNDLEVBQUU2NUUsTUFBTW80QixzQkFDaGV2MEcsR0FBR0QsRUFBUzY5RyxHQUFHdjdHLEVBQUVDLEVBQUV2QyxJQUFHb3VELEdBQUUzaEQsR0FBWSxFQUFWQSxHQUFFeWdFLFNBQThCLFFBQW5CM3FFLEVBQUVvNkcsR0FBR3I2RyxFQUFFQyxFQUFFdkMsSUFBbUJ1QyxFQUFFNjZGLFFBQVEsTUFBS2h2QyxHQUFFM2hELEdBQVksRUFBVkEsR0FBRXlnRSxTQUFXLE1BQU0sS0FBSyxHQUE4QixHQUEzQmp0RSxFQUFFc0MsRUFBRWl5RyxxQkFBcUJ4MEcsRUFBSyxJQUFpQixHQUFac0MsRUFBRXc2RixXQUFjLENBQUMsR0FBRzc4RixFQUFFLE9BQU91K0csR0FBR2w4RyxFQUFFQyxFQUFFdkMsR0FBR3VDLEVBQUV1NkYsV0FBVyxHQUE2RSxHQUF4RCxRQUFsQnR4RixFQUFFakosRUFBRXk2RixpQkFBeUJ4eEYsRUFBRTJ5RyxVQUFVLEtBQUszeUcsRUFBRTZ5RyxLQUFLLE1BQU1qd0QsR0FBRTNoRCxHQUFFQSxHQUFFeWdFLFVBQWFqdEUsRUFBRSxPQUFPLEtBQUssT0FBTzA4RyxHQUFHcjZHLEVBQUVDLEVBQUV2QyxHQUFHNDBHLElBQUcsUUFBU0EsSUFBRyxFQUFzQixPQUFuQnJ5RyxFQUFFb3lHLGVBQWUsRUFBU3B5RyxFQUFFd2pDLEtBQUssS0FBSyxFQUNoVyxHQURrVzlsQyxFQUFFc0MsRUFBRXUyQixLQUFLLE9BQU94MkIsSUFBSUEsRUFBRXU2RixVQUFVLEtBQUt0NkYsRUFBRXM2RixVQUFVLEtBQUt0NkYsRUFBRXU2RixXQUFXLEdBQUd4NkYsRUFBRUMsRUFBRTY1RyxhQUFhNXdHLEVBQUU2bEcsR0FBRzl1RyxFQUFFOHJELEdBQUU2ZSxTQUFTdW5DLEdBQUdseUcsRUFBRXZDLEdBQUd3TCxFQUFFaXVHLEdBQUcsS0FDbGZsM0csRUFBRXRDLEVBQUVxQyxFQUFFa0osRUFBRXhMLEdBQUd1QyxFQUFFdTZGLFdBQVcsRUFBSyxpQkFBa0J0eEYsR0FBRyxPQUFPQSxHQUFHLG1CQUFvQkEsRUFBRStrQyxhQUFRLElBQVMva0MsRUFBRThrQyxTQUFTLENBQWlELEdBQWhEL3RDLEVBQUV3akMsSUFBSSxFQUFFeGpDLEVBQUV5NkYsY0FBYyxLQUFLejZGLEVBQUUyeUcsWUFBWSxLQUFRdjZGLEdBQUUxYSxHQUFHLENBQUMsSUFBSSsrQixHQUFFLEVBQUc0eUUsR0FBR3J2RyxRQUFReThCLEdBQUUsRUFBR3o4QixFQUFFeTZGLGNBQWMsT0FBT3h4RixFQUFFbXJDLFlBQU8sSUFBU25yQyxFQUFFbXJDLE1BQU1uckMsRUFBRW1yQyxNQUFNLEtBQUtzK0QsR0FBRzF5RyxHQUFHLElBQUlvMEIsRUFBRTEyQixFQUFFOHZDLHlCQUF5QixtQkFBb0JwWixHQUFHeS9FLEdBQUc3ekcsRUFBRXRDLEVBQUUwMkIsRUFBRXIwQixHQUFHa0osRUFBRXFoRSxRQUFRd3BDLEdBQUc5ekcsRUFBRW16RixVQUFVbHFGLEVBQUVBLEVBQUU4cUcsb0JBQW9CL3pHLEVBQUUwMEcsR0FBRzEwRyxFQUFFdEMsRUFBRXFDLEVBQUV0QyxHQUFHdUMsRUFBRTg2RyxHQUFHLEtBQUs5NkcsRUFBRXRDLEdBQUUsRUFBRysrQixFQUFFaC9CLFFBQVF1QyxFQUFFd2pDLElBQUksRUFBRThwQixHQUFFLEtBQUt0dEQsRUFBRWlKLEVBQUV4TCxHQUFHdUMsRUFBRUEsRUFBRTY1RSxNQUFNLE9BQU83NUUsRUFBRSxLQUFLLEdBQUdELEVBQUUsQ0FDelosR0FEMFprSixFQUFFakosRUFBRStzRixZQUFZLE9BQU9odEYsSUFBSUEsRUFBRXU2RixVQUNwZixLQUFLdDZGLEVBQUVzNkYsVUFBVSxLQUFLdDZGLEVBQUV1NkYsV0FBVyxHQUFHeDZGLEVBQUVDLEVBQUU2NUcsYUF6T29QLFNBQVk5NUcsR0FBRyxJQUFJLElBQUlBLEVBQUVndEUsUUFBUSxDQUFDaHRFLEVBQUVndEUsUUFBUSxFQUFFLElBQUkvc0UsRUFBRUQsRUFBRStzRSxNQUFNOXNFLEVBQUVBLElBQUlELEVBQUVpdEUsUUFBUWh0RSxFQUFFQSxFQUFFcTZCLE1BQUssU0FBU3I2QixHQUFHLElBQUlELEVBQUVndEUsVUFBVS9zRSxFQUFFQSxFQUFFNjJDLFFBQVE5MkMsRUFBRWd0RSxRQUFRLEVBQUVodEUsRUFBRWl0RSxRQUFRaHRFLE1BQUksU0FBU0EsR0FBRyxJQUFJRCxFQUFFZ3RFLFVBQVVodEUsRUFBRWd0RSxRQUFRLEVBQUVodEUsRUFBRWl0RSxRQUFRaHRFLE9BeU9oYjhqSCxDQUFHNzZHLEdBQU0sSUFBSUEsRUFBRThqRSxRQUFRLE1BQU05akUsRUFBRStqRSxRQUFxRCxPQUE3Qy9qRSxFQUFFQSxFQUFFK2pFLFFBQVFodEUsRUFBRXUyQixLQUFLdHRCLEVBQUV3ekIsRUFBRXo4QixFQUFFd2pDLElBUXpELFNBQVl6akMsR0FBRyxHQUFHLG1CQUFvQkEsRUFBRSxPQUFPdTZHLEdBQUd2NkcsR0FBRyxFQUFFLEVBQUUsR0FBRyxNQUFTQSxFQUFZLENBQWMsSUFBYkEsRUFBRUEsRUFBRWd1QyxZQUFnQjJuRCxHQUFHLE9BQU8sR0FBRyxHQUFHMzFGLElBQUk4MUYsR0FBRyxPQUFPLEdBQUcsT0FBTyxFQVJqRmt1QixDQUFHOTZHLEdBQUdsSixFQUFFMHhHLEdBQUd4b0csRUFBRWxKLEdBQVUwOEIsR0FBRyxLQUFLLEVBQUV6OEIsRUFBRXc2RyxHQUFHLEtBQUt4NkcsRUFBRWlKLEVBQUVsSixFQUFFdEMsR0FBRyxNQUFNc0MsRUFBRSxLQUFLLEVBQUVDLEVBQUUwNkcsR0FBRyxLQUFLMTZHLEVBQUVpSixFQUFFbEosRUFBRXRDLEdBQUcsTUFBTXNDLEVBQUUsS0FBSyxHQUFHQyxFQUFFbTZHLEdBQUcsS0FBS242RyxFQUFFaUosRUFBRWxKLEVBQUV0QyxHQUFHLE1BQU1zQyxFQUFFLEtBQUssR0FBR0MsRUFBRXE2RyxHQUFHLEtBQUtyNkcsRUFBRWlKLEVBQUV3b0csR0FBR3hvRyxFQUFFc3RCLEtBQUt4MkIsR0FBR3JDLEVBQUVELEdBQUcsTUFBTXNDLEVBQUUsTUFBTTZGLE1BQU0rakIsRUFBRSxJQUFJMWdCLEVBQUUsS0FBTSxPQUFPakosRUFBRSxLQUFLLEVBQUUsT0FBT3RDLEVBQUVzQyxFQUFFdTJCLEtBQUt0dEIsRUFBRWpKLEVBQUU2NUcsYUFBMkNXLEdBQUd6NkcsRUFBRUMsRUFBRXRDLEVBQXJDdUwsRUFBRWpKLEVBQUUrc0YsY0FBY3J2RixFQUFFdUwsRUFBRXdvRyxHQUFHL3pHLEVBQUV1TCxHQUFjeEwsR0FBRyxLQUFLLEVBQUUsT0FBT0MsRUFBRXNDLEVBQUV1MkIsS0FBS3R0QixFQUFFakosRUFBRTY1RyxhQUEyQ2EsR0FBRzM2RyxFQUFFQyxFQUFFdEMsRUFBckN1TCxFQUFFakosRUFBRStzRixjQUFjcnZGLEVBQUV1TCxFQUFFd29HLEdBQUcvekcsRUFBRXVMLEdBQWN4TCxHQUNwZixLQUFLLEVBQXdCLEdBQXRCdTlHLEdBQUdoN0csR0FBR3RDLEVBQUVzQyxFQUFFMnlHLFlBQWUsT0FBTzV5RyxHQUFHLE9BQU9yQyxFQUFFLE1BQU1rSSxNQUFNK2pCLEVBQUUsTUFBb0gsR0FBOUdqc0IsRUFBRXNDLEVBQUU2NUcsYUFBK0I1d0csRUFBRSxRQUFwQkEsRUFBRWpKLEVBQUV5NkYsZUFBeUJ4eEYsRUFBRTZqRixRQUFRLEtBQUttbUIsR0FBR2x6RyxFQUFFQyxHQUFHc3pHLEdBQUd0ekcsRUFBRXRDLEVBQUUsS0FBS0QsSUFBR0MsRUFBRXNDLEVBQUV5NkYsY0FBYzNOLFdBQWU3akYsRUFBRWd4RyxLQUFLajZHLEVBQUVvNkcsR0FBR3I2RyxFQUFFQyxFQUFFdkMsT0FBTyxDQUFtRixJQUEvRXdMLEVBQUVqSixFQUFFbXpGLFVBQVU2SyxXQUFRd2IsR0FBR3ZYLEdBQUdqaUcsRUFBRW16RixVQUFVbUosY0FBY3hELFlBQVl5Z0IsR0FBR3Y1RyxFQUFFaUosRUFBRXd3RyxJQUFHLEdBQU14d0csRUFBRSxJQUFJeEwsRUFBRW80RyxHQUFHNzFHLEVBQUUsS0FBS3RDLEVBQUVELEdBQUd1QyxFQUFFNjVFLE1BQU1wOEUsRUFBRUEsR0FBR0EsRUFBRTg4RixXQUF1QixFQUFiOThGLEVBQUU4OEYsVUFBYSxLQUFLOThGLEVBQUVBLEVBQUVvOUYsYUFBYXZ0QyxHQUFFdnRELEVBQUVDLEVBQUV0QyxFQUFFRCxHQUFHdzhHLEtBQUtqNkcsRUFBRUEsRUFBRTY1RSxNQUFNLE9BQU83NUUsRUFBRSxLQUFLLEVBQUUsT0FBT3UyRyxHQUFHdjJHLEdBQUcsT0FBT0QsR0FBRys1RyxHQUFHOTVHLEdBQUd0QyxFQUFFc0MsRUFBRXUyQixLQUFLdHRCLEVBQUVqSixFQUFFNjVHLGFBQWFwOUUsRUFBRSxPQUFPMThCLEVBQUVBLEVBQUUwMkcsY0FDNWUsS0FBS3JpRixFQUFFbnJCLEVBQUVvbUMsU0FBU3l5RCxHQUFHcGtHLEVBQUV1TCxHQUFHbXJCLEVBQUUsS0FBSyxPQUFPcUksR0FBR3FsRSxHQUFHcGtHLEVBQUUrK0IsS0FBS3o4QixFQUFFdTZGLFdBQVcsSUFBSWtnQixHQUFHMTZHLEVBQUVDLEdBQVUsRUFBUEEsRUFBRXpCLE1BQVEsSUFBSWQsR0FBR3dMLEVBQUU0NkcsUUFBUTdqSCxFQUFFb3lHLGVBQWVweUcsRUFBRWl5RyxvQkFBb0IsRUFBRWp5RyxFQUFFLE9BQU9zdEQsR0FBRXZ0RCxFQUFFQyxFQUFFbzBCLEVBQUUzMkIsR0FBR3VDLEVBQUVBLEVBQUU2NUUsT0FBTzc1RSxFQUFFLEtBQUssRUFBRSxPQUFPLE9BQU9ELEdBQUcrNUcsR0FBRzk1RyxHQUFHLEtBQUssS0FBSyxHQUFHLE9BQU9zN0csR0FBR3Y3RyxFQUFFQyxFQUFFdkMsR0FBRyxLQUFLLEVBQUUsT0FBTzA0RyxHQUFHbjJHLEVBQUVBLEVBQUVtekYsVUFBVW1KLGVBQWU1K0YsRUFBRXNDLEVBQUU2NUcsYUFBYSxPQUFPOTVHLEVBQUVDLEVBQUU2NUUsTUFBTSs3QixHQUFHNTFHLEVBQUUsS0FBS3RDLEVBQUVELEdBQUc2dkQsR0FBRXZ0RCxFQUFFQyxFQUFFdEMsRUFBRUQsR0FBR3VDLEVBQUU2NUUsTUFBTSxLQUFLLEdBQUcsT0FBT244RSxFQUFFc0MsRUFBRXUyQixLQUFLdHRCLEVBQUVqSixFQUFFNjVHLGFBQTJDTSxHQUFHcDZHLEVBQUVDLEVBQUV0QyxFQUFyQ3VMLEVBQUVqSixFQUFFK3NGLGNBQWNydkYsRUFBRXVMLEVBQUV3b0csR0FBRy96RyxFQUFFdUwsR0FBY3hMLEdBQUcsS0FBSyxFQUFFLE9BQU82dkQsR0FBRXZ0RCxFQUFFQyxFQUFFQSxFQUFFNjVHLGFBQWFwOEcsR0FBR3VDLEVBQUU2NUUsTUFBTSxLQUFLLEVBQ3BjLEtBQUssR0FBRyxPQUFPdnNCLEdBQUV2dEQsRUFBRUMsRUFBRUEsRUFBRTY1RyxhQUFheHFFLFNBQVM1eEMsR0FBR3VDLEVBQUU2NUUsTUFBTSxLQUFLLEdBQUc5NUUsRUFBRSxDQUFDckMsRUFBRXNDLEVBQUV1MkIsS0FBS2syQyxTQUFTeGpFLEVBQUVqSixFQUFFNjVHLGFBQWF6bEYsRUFBRXAwQixFQUFFeTJHLGNBQWNoNkUsRUFBRXh6QixFQUFFNUssTUFBTSxJQUFJcUwsRUFBRTFKLEVBQUV1MkIsS0FBS2syQyxTQUFpRCxHQUF4QzVnQixHQUFFNmxELEdBQUdob0csRUFBRTRpRSxlQUFlNWlFLEVBQUU0aUUsY0FBYzd2QyxFQUFLLE9BQU9ySSxFQUFFLEdBQUcxcUIsRUFBRTBxQixFQUFFLzFCLE1BQTBHLEtBQXBHbytCLEVBQUVvd0IsR0FBR25qRCxFQUFFK3lCLEdBQUcsRUFBd0YsR0FBckYsbUJBQW9CLytCLEVBQUUydUUsc0JBQXNCM3VFLEVBQUUydUUsc0JBQXNCM2lFLEVBQUUreUIsR0FBRyxjQUFxQixHQUFHckksRUFBRWliLFdBQVdwbUMsRUFBRW9tQyxXQUFXdTdCLEdBQUVELFFBQVEsQ0FBQzNxRSxFQUFFbzZHLEdBQUdyNkcsRUFBRUMsRUFBRXZDLEdBQUcsTUFBTXNDLFFBQVEsSUFBYyxRQUFWMkosRUFBRTFKLEVBQUU2NUUsU0FBaUJud0UsRUFBRW16QixPQUFPNzhCLEdBQUcsT0FBTzBKLEdBQUcsQ0FBQyxJQUFJckosRUFBRXFKLEVBQUVrcEYsYUFBYSxHQUFHLE9BQ25mdnlGLEVBQUUsQ0FBQyt6QixFQUFFMXFCLEVBQUVtd0UsTUFBTSxJQUFJLElBQUl4OEUsRUFBRWdELEVBQUU4eEcsYUFBYSxPQUFPOTBHLEdBQUcsQ0FBQyxHQUFHQSxFQUFFMmtDLFVBQVV0a0MsR0FBRyxJQUFLTCxFQUFFazFHLGFBQWE5MUUsR0FBRyxDQUFDLElBQUkveUIsRUFBRTg1QixPQUFNbm1DLEVBQUU2MUcsR0FBR3oxRyxFQUFFLE9BQVErbEMsSUFBSSxFQUFFNHZFLEdBQUcxcEcsRUFBRXJNLElBQUlxTSxFQUFFMG9HLGVBQWUzMEcsSUFBSWlNLEVBQUUwb0csZUFBZTMwRyxHQUFpQixRQUFkSixFQUFFcU0sRUFBRTR3RixZQUFvQmo5RixFQUFFKzBHLGVBQWUzMEcsSUFBSUosRUFBRSswRyxlQUFlMzBHLEdBQUd1MEcsR0FBR3RvRyxFQUFFbXpCLE9BQU9wL0IsR0FBRzRDLEVBQUUreEcsZUFBZTMwRyxJQUFJNEMsRUFBRSt4RyxlQUFlMzBHLEdBQUcsTUFBTUosRUFBRUEsRUFBRXFkLFdBQVcwWixFQUFFLEtBQUsxcUIsRUFBRTg1QixLQUFJOTVCLEVBQUU2c0IsT0FBT3YyQixFQUFFdTJCLEtBQUssS0FBYTdzQixFQUFFbXdFLE1BQU0sR0FBRyxPQUFPemxELEVBQUVBLEVBQUV5SSxPQUFPbnpCLE9BQU8sSUFBSTBxQixFQUFFMXFCLEVBQUUsT0FBTzBxQixHQUFHLENBQUMsR0FBR0EsSUFBSXAwQixFQUFFLENBQUNvMEIsRUFBRSxLQUFLLE1BQWtCLEdBQUcsUUFBZjFxQixFQUFFMHFCLEVBQUV5bUUsU0FBb0IsQ0FBQ254RixFQUFFbXpCLE9BQU96SSxFQUFFeUksT0FBT3pJLEVBQUUxcUIsRUFBRSxNQUFNMHFCLEVBQUVBLEVBQUV5SSxPQUFPbnpCLEVBQ3BmMHFCLEVBQUVrNUIsR0FBRXZ0RCxFQUFFQyxFQUFFaUosRUFBRW9tQyxTQUFTNXhDLEdBQUd1QyxFQUFFQSxFQUFFNjVFLE1BQU0sT0FBTzc1RSxFQUFFLEtBQUssRUFBRSxPQUFPaUosRUFBRWpKLEVBQUV1MkIsS0FBc0I3NEIsR0FBakIrK0IsRUFBRXo4QixFQUFFNjVHLGNBQWlCeHFFLFNBQVM2aUUsR0FBR2x5RyxFQUFFdkMsR0FBbUNDLEVBQUVBLEVBQWxDdUwsRUFBRXFwRyxHQUFHcnBHLEVBQUV3ekIsRUFBRXVuRix3QkFBOEJoa0gsRUFBRXU2RixXQUFXLEVBQUVqdEMsR0FBRXZ0RCxFQUFFQyxFQUFFdEMsRUFBRUQsR0FBR3VDLEVBQUU2NUUsTUFBTSxLQUFLLEdBQUcsT0FBZ0JwOUMsRUFBRWcxRSxHQUFYeG9HLEVBQUVqSixFQUFFdTJCLEtBQVl2MkIsRUFBRTY1RyxjQUE2QlEsR0FBR3Q2RyxFQUFFQyxFQUFFaUosRUFBdEJ3ekIsRUFBRWcxRSxHQUFHeG9HLEVBQUVzdEIsS0FBS2tHLEdBQWMvK0IsRUFBRUQsR0FBRyxLQUFLLEdBQUcsT0FBTzg4RyxHQUFHeDZHLEVBQUVDLEVBQUVBLEVBQUV1MkIsS0FBS3YyQixFQUFFNjVHLGFBQWFuOEcsRUFBRUQsR0FBRyxLQUFLLEdBQUcsT0FBT0MsRUFBRXNDLEVBQUV1MkIsS0FBS3R0QixFQUFFakosRUFBRTY1RyxhQUFhNXdHLEVBQUVqSixFQUFFK3NGLGNBQWNydkYsRUFBRXVMLEVBQUV3b0csR0FBRy96RyxFQUFFdUwsR0FBRyxPQUFPbEosSUFBSUEsRUFBRXU2RixVQUFVLEtBQUt0NkYsRUFBRXM2RixVQUFVLEtBQUt0NkYsRUFBRXU2RixXQUFXLEdBQUd2NkYsRUFBRXdqQyxJQUFJLEVBQUVwckIsR0FBRTFhLElBQUlxQyxHQUFFLEVBQUdzdkcsR0FBR3J2RyxJQUFJRCxHQUFFLEVBQUdteUcsR0FBR2x5RyxFQUFFdkMsR0FBRzQyRyxHQUFHcjBHLEVBQUV0QyxFQUFFdUwsR0FBR3lyRyxHQUFHMTBHLEVBQUV0QyxFQUFFdUwsRUFBRXhMLEdBQUdxOUcsR0FBRyxLQUNsZjk2RyxFQUFFdEMsR0FBRSxFQUFHcUMsRUFBRXRDLEdBQUcsS0FBSyxHQUFHLE9BQU93K0csR0FBR2w4RyxFQUFFQyxFQUFFdkMsR0FBRyxNQUFNbUksTUFBTStqQixFQUFFLElBQUkzcEIsRUFBRXdqQyxPQUFRLElBQUlrZ0YsR0FBRyxLQUFLOUYsR0FBRyxLQUNoRixTQUFTcUcsR0FBR2xrSCxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBR2dHLEtBQUs4L0IsSUFBSXpqQyxFQUFFMkQsS0FBSy9FLElBQUlsQixFQUFFaUcsS0FBS20zRixRQUFRbjNGLEtBQUttMkUsTUFBTW4yRSxLQUFLbTVCLE9BQU9uNUIsS0FBS3l2RixVQUFVenZGLEtBQUs2eUIsS0FBSzd5QixLQUFLcXBGLFlBQVksS0FBS3JwRixLQUFLc3BCLE1BQU0sRUFBRXRwQixLQUFLc3RDLElBQUksS0FBS3R0QyxLQUFLbTJHLGFBQWE3NUcsRUFBRTBELEtBQUtrdkYsYUFBYWx2RixLQUFLKzJGLGNBQWMvMkYsS0FBS2l2RyxZQUFZanZHLEtBQUsreUcsY0FBYyxLQUFLL3lHLEtBQUtuRixLQUFLYixFQUFFZ0csS0FBSzYyRixVQUFVLEVBQUU3MkYsS0FBSzB4RyxXQUFXMXhHLEtBQUs0eEcsWUFBWTV4RyxLQUFLMnhHLFdBQVcsS0FBSzN4RyxLQUFLdXVHLG9CQUFvQnZ1RyxLQUFLMHVHLGVBQWUsRUFBRTF1RyxLQUFLNDJGLFVBQVUsS0FBSyxTQUFTcWYsR0FBRzU1RyxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxPQUFPLElBQUl1bUgsR0FBR2xrSCxFQUFFQyxFQUFFdkMsRUFBRUMsR0FDMWIsU0FBUzQ4RyxHQUFHdjZHLEdBQWlCLFVBQWRBLEVBQUVBLEVBQUVmLGFBQXVCZSxFQUFFNHJDLGtCQUM1QyxTQUFTNHBFLEdBQUd4MUcsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRXNDLEVBQUV1NkYsVUFDNEUsT0FEbEUsT0FBTzc4RixJQUFHQSxFQUFFazhHLEdBQUc1NUcsRUFBRXlqQyxJQUFJeGpDLEVBQUVELEVBQUVwQixJQUFJb0IsRUFBRXhCLE9BQVF3dUYsWUFBWWh0RixFQUFFZ3RGLFlBQVl0dkYsRUFBRTg0QixLQUFLeDJCLEVBQUV3MkIsS0FBSzk0QixFQUFFMDFGLFVBQVVwekYsRUFBRW96RixVQUFVMTFGLEVBQUU2OEYsVUFBVXY2RixFQUFFQSxFQUFFdTZGLFVBQVU3OEYsSUFBSUEsRUFBRW84RyxhQUFhNzVHLEVBQUV2QyxFQUFFODhGLFVBQVUsRUFBRTk4RixFQUFFNDNHLFdBQVcsS0FBSzUzRyxFQUFFNjNHLFlBQVksS0FBSzczRyxFQUFFMjNHLFdBQVcsTUFBTTMzRyxFQUFFdzBHLG9CQUFvQmx5RyxFQUFFa3lHLG9CQUFvQngwRyxFQUFFMjBHLGVBQWVyeUcsRUFBRXF5RyxlQUFlMzBHLEVBQUVvOEUsTUFBTTk1RSxFQUFFODVFLE1BQU1wOEUsRUFBRWc1RyxjQUFjMTJHLEVBQUUwMkcsY0FBY2g1RyxFQUFFZzlGLGNBQWMxNkYsRUFBRTA2RixjQUFjaDlGLEVBQUVrMUcsWUFBWTV5RyxFQUFFNHlHLFlBQVkzeUcsRUFBRUQsRUFBRTZ5RixhQUFhbjFGLEVBQUVtMUYsYUFBYSxPQUFPNXlGLEVBQUUsS0FBSyxDQUFDb3lHLGVBQWVweUcsRUFBRW95RyxlQUN6ZkQsYUFBYW55RyxFQUFFbXlHLGFBQWFLLFdBQVd4eUcsRUFBRXd5RyxZQUFZLzBHLEVBQUVvOUYsUUFBUTk2RixFQUFFODZGLFFBQVFwOUYsRUFBRXV2QixNQUFNanRCLEVBQUVpdEIsTUFBTXZ2QixFQUFFdXpDLElBQUlqeEMsRUFBRWl4QyxJQUFXdnpDLEVBQzVHLFNBQVNnNEcsR0FBRzExRyxFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEVBQUV3ekIsR0FBRyxJQUFJckksRUFBRSxFQUFNLEdBQUoxMkIsRUFBRXFDLEVBQUssbUJBQW9CQSxFQUFFdTZHLEdBQUd2NkcsS0FBS3EwQixFQUFFLFFBQVEsR0FBRyxpQkFBa0JyMEIsRUFBRXEwQixFQUFFLE9BQU9yMEIsRUFBRSxPQUFPQSxHQUFHLEtBQUtzMUYsR0FBRyxPQUFPc2dCLEdBQUdsNEcsRUFBRTR4QyxTQUFTcG1DLEVBQUV3ekIsRUFBRXo4QixHQUFHLEtBQUt5MUYsR0FBR3JoRSxFQUFFLEVBQUVuckIsR0FBRyxFQUFFLE1BQU0sS0FBS3FzRixHQUFHbGhFLEVBQUUsRUFBRW5yQixHQUFHLEVBQUUsTUFBTSxLQUFLOHpFLEdBQUcsT0FBT2g5RSxFQUFFNDVHLEdBQUcsR0FBR2w4RyxFQUFFdUMsRUFBSSxFQUFGaUosSUFBTzhqRixZQUFZaFEsR0FBR2g5RSxFQUFFdzJCLEtBQUt3bUQsR0FBR2g5RSxFQUFFcXlHLGVBQWUzMUUsRUFBRTE4QixFQUFFLEtBQUs0MUYsR0FBRyxPQUFPNTFGLEVBQUU0NUcsR0FBRyxHQUFHbDhHLEVBQUV1QyxFQUFFaUosSUFBS3N0QixLQUFLby9ELEdBQUc1MUYsRUFBRWd0RixZQUFZNEksR0FBRzUxRixFQUFFcXlHLGVBQWUzMUUsRUFBRTE4QixFQUFFLEtBQUs2MUYsR0FBRyxPQUFPNzFGLEVBQUU0NUcsR0FBRyxHQUFHbDhHLEVBQUV1QyxFQUFFaUosSUFBSzhqRixZQUFZNkksR0FBRzcxRixFQUFFcXlHLGVBQWUzMUUsRUFBRTE4QixFQUFFLFFBQVEsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxPQUFPQSxFQUFFZ3VDLFVBQVUsS0FBS3duRCxHQUFHbmhFLEVBQ3BmLEdBQUcsTUFBTXIwQixFQUFFLEtBQUt5MUYsR0FBR3BoRSxFQUFFLEVBQUUsTUFBTXIwQixFQUFFLEtBQUsyMUYsR0FBR3RoRSxFQUFFLEdBQUcsTUFBTXIwQixFQUFFLEtBQUs4MUYsR0FBR3poRSxFQUFFLEdBQUcsTUFBTXIwQixFQUFFLEtBQUsrMUYsR0FBRzFoRSxFQUFFLEdBQUcxMkIsRUFBRSxLQUFLLE1BQU1xQyxFQUFFLEtBQUtnMkYsR0FBRzNoRSxFQUFFLEdBQUcsTUFBTXIwQixFQUFFLE1BQU02RixNQUFNK2pCLEVBQUUsSUFBSSxNQUFNNXBCLEVBQUVBLFNBQVNBLEVBQUUsS0FBZ0UsT0FBMURDLEVBQUUyNUcsR0FBR3ZsRixFQUFFMzJCLEVBQUV1QyxFQUFFaUosSUFBSzhqRixZQUFZaHRGLEVBQUVDLEVBQUV1MkIsS0FBSzc0QixFQUFFc0MsRUFBRW95RyxlQUFlMzFFLEVBQVN6OEIsRUFBRSxTQUFTMjFHLEdBQUc1MUcsRUFBRUMsRUFBRXZDLEVBQUVDLEdBQW9DLE9BQWpDcUMsRUFBRTQ1RyxHQUFHLEVBQUU1NUcsRUFBRXJDLEVBQUVzQyxJQUFLb3lHLGVBQWUzMEcsRUFBU3NDLEVBQUUsU0FBU3kxRyxHQUFHejFHLEVBQUVDLEVBQUV2QyxHQUF1QyxPQUFwQ3NDLEVBQUU0NUcsR0FBRyxFQUFFNTVHLEVBQUUsS0FBS0MsSUFBS295RyxlQUFlMzBHLEVBQVNzQyxFQUNyVyxTQUFTMjFHLEdBQUczMUcsRUFBRUMsRUFBRXZDLEdBQXVLLE9BQXBLdUMsRUFBRTI1RyxHQUFHLEVBQUUsT0FBTzU1RyxFQUFFc3ZDLFNBQVN0dkMsRUFBRXN2QyxTQUFTLEdBQUd0dkMsRUFBRXBCLElBQUlxQixJQUFLb3lHLGVBQWUzMEcsRUFBRXVDLEVBQUVtekYsVUFBVSxDQUFDbUosY0FBY3Y4RixFQUFFdThGLGNBQWM0bkIsZ0JBQWdCLEtBQUs1aEUsZUFBZXZpRCxFQUFFdWlELGdCQUF1QnRpRCxFQUM5TCxTQUFTbWtILEdBQUdwa0gsRUFBRUMsRUFBRXZDLEdBQUdpRyxLQUFLOC9CLElBQUl4akMsRUFBRTBELEtBQUtpbkUsUUFBUSxLQUFLam5FLEtBQUs0NEYsY0FBY3Y4RixFQUFFMkQsS0FBS3MrRyxVQUFVdCtHLEtBQUt3Z0gsZ0JBQWdCLEtBQUt4Z0gsS0FBSzQ5Ryx1QkFBdUIsRUFBRTU5RyxLQUFLMjlHLGFBQWEsS0FBSzM5RyxLQUFLKzlHLGVBQWUsRUFBRS85RyxLQUFLdTNHLGVBQWV2M0csS0FBS3MrQixRQUFRLEtBQUt0K0IsS0FBS3M2RixRQUFRdmdHLEVBQUVpRyxLQUFLbTlHLGFBQWEsS0FBS245RyxLQUFLazlHLGlCQUFpQixHQUFHbDlHLEtBQUs0OEcsZ0JBQWdCNThHLEtBQUsrOEcsZUFBZS84RyxLQUFLZzlHLHNCQUFzQmg5RyxLQUFLNjlHLGtCQUFrQjc5RyxLQUFLNitHLG1CQUFtQjcrRyxLQUFLODhHLGlCQUFpQixFQUN2YSxTQUFTRCxHQUFHeGdILEVBQUVDLEdBQUcsSUFBSXZDLEVBQUVzQyxFQUFFd2lILG1CQUF5QyxPQUF0QnhpSCxFQUFFQSxFQUFFd2hILGtCQUF5QixJQUFJOWpILEdBQUdBLEdBQUd1QyxHQUFHRCxHQUFHQyxFQUFFLFNBQVM2OEcsR0FBRzk4RyxFQUFFQyxHQUFHLElBQUl2QyxFQUFFc0MsRUFBRXdpSCxtQkFBbUI3a0gsRUFBRXFDLEVBQUV3aEgsa0JBQWtCOWpILEVBQUV1QyxJQUFJRCxFQUFFd2lILG1CQUFtQnZpSCxJQUFNdEMsRUFBRXNDLEdBQUcsSUFBSXZDLEtBQUVzQyxFQUFFd2hILGtCQUFrQnZoSCxHQUFFQSxHQUFHRCxFQUFFMGdILGlCQUFpQjFnSCxFQUFFMGdILGVBQWUsR0FBR3pnSCxHQUFHRCxFQUFFdWdILGtCQUFrQnZnSCxFQUFFdWdILGdCQUFnQixHQUNsVCxTQUFTeEQsR0FBRy84RyxFQUFFQyxHQUFHQSxFQUFFRCxFQUFFeWdILG1CQUFtQnpnSCxFQUFFeWdILGlCQUFpQnhnSCxHQUFHLElBQUl2QyxFQUFFc0MsRUFBRXdpSCxtQkFBbUIsSUFBSTlrSCxJQUFJdUMsR0FBR3ZDLEVBQUVzQyxFQUFFd2lILG1CQUFtQnhpSCxFQUFFd2hILGtCQUFrQnhoSCxFQUFFMmdILHNCQUFzQixFQUFFMWdILEdBQUdELEVBQUV3aEgsb0JBQW9CeGhILEVBQUV3aEgsa0JBQWtCdmhILEVBQUUsR0FBR0EsRUFBRUQsRUFBRTJnSCx3QkFBd0IzZ0gsRUFBRTJnSCxzQkFBc0IxZ0gsSUFBSSxTQUFTK2dILEdBQUdoaEgsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRXNDLEVBQUV1Z0gsaUJBQW1CLElBQUk3aUgsR0FBR0EsRUFBRXVDLEtBQUVELEVBQUV1Z0gsZ0JBQWdCdGdILEdBQzVWLFNBQVNva0gsR0FBR3JrSCxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxJQUFJdUwsRUFBRWpKLEVBQUUycUUsUUFBUWx1QyxFQUFFdTNFLEtBQUs1L0UsRUFBRXUvRSxHQUFHbm9DLFNBQVMvdUMsRUFBRXczRSxHQUFHeDNFLEVBQUV4ekIsRUFBRW1yQixHQUFHcjBCLEVBQUUsR0FBR3RDLEVBQUUsQ0FBeUJ1QyxFQUFFLENBQUMsR0FBR3E2RixHQUE5QjU4RixFQUFFQSxFQUFFczJHLHVCQUFrQ3QyRyxHQUFHLElBQUlBLEVBQUUrbEMsSUFBSSxNQUFNNTlCLE1BQU0rakIsRUFBRSxNQUFNLElBQUlqZ0IsRUFBRWpNLEVBQUUsRUFBRSxDQUFDLE9BQU9pTSxFQUFFODVCLEtBQUssS0FBSyxFQUFFOTVCLEVBQUVBLEVBQUV5cEYsVUFBVW54RCxRQUFRLE1BQU1oaUMsRUFBRSxLQUFLLEVBQUUsR0FBR29ZLEdBQUUxTyxFQUFFNnNCLE1BQU0sQ0FBQzdzQixFQUFFQSxFQUFFeXBGLFVBQVVtYywwQ0FBMEMsTUFBTXR2RyxHQUFHMEosRUFBRUEsRUFBRW16QixhQUFhLE9BQU9uekIsR0FBRyxNQUFNOUQsTUFBTStqQixFQUFFLE1BQU8sR0FBRyxJQUFJbHNCLEVBQUUrbEMsSUFBSSxDQUFDLElBQUluakMsRUFBRTVDLEVBQUU4NEIsS0FBSyxHQUFHbmUsR0FBRS9YLEdBQUcsQ0FBQzVDLEVBQUUweEcsR0FBRzF4RyxFQUFFNEMsRUFBRXFKLEdBQUcsTUFBTTNKLEdBQUd0QyxFQUFFaU0sT0FBT2pNLEVBQUVteEcsR0FDM1csT0FEOFcsT0FBTzV1RyxFQUFFZ2lDLFFBQVFoaUMsRUFBRWdpQyxRQUFRdmtDLEVBQUV1QyxFQUFFaTdHLGVBQWV4OUcsR0FBRXVDLEVBQUVrekcsR0FBR3oyRSxFQUFFckksSUFBSzYwQyxRQUFRLENBQUM2akIsUUFBUS9zRixHQUNwZSxRQUR1ZXJDLE9BQUUsSUFDbGZBLEVBQUUsS0FBS0EsS0FBYXNDLEVBQUUySCxTQUFTakssR0FBRzAxRyxHQUFHbnFHLEVBQUVqSixHQUFHazBHLEdBQUdqckcsRUFBRXd6QixHQUFVQSxFQUFFLFNBQVM0bkYsR0FBR3RrSCxHQUFlLEtBQVpBLEVBQUVBLEVBQUU0cUUsU0FBY2tQLE1BQU0sT0FBTyxLQUFLLE9BQU85NUUsRUFBRTg1RSxNQUFNcjJDLEtBQUssS0FBSyxFQUEyQixRQUFRLE9BQU96akMsRUFBRTg1RSxNQUFNc1osV0FBVyxTQUFTbXhCLEdBQUd2a0gsRUFBRUMsR0FBcUIsUUFBbEJELEVBQUVBLEVBQUUwNkYsZ0JBQXdCLE9BQU8xNkYsRUFBRTI2RixZQUFZMzZGLEVBQUVzN0csVUFBVXI3RyxJQUFJRCxFQUFFczdHLFVBQVVyN0csR0FBRyxTQUFTdWtILEdBQUd4a0gsRUFBRUMsR0FBR3NrSCxHQUFHdmtILEVBQUVDLElBQUlELEVBQUVBLEVBQUV1NkYsWUFBWWdxQixHQUFHdmtILEVBQUVDLEdBQ3BWLFNBQVN3a0gsR0FBR3prSCxFQUFFQyxFQUFFdkMsR0FBNkIsSUFBSUMsRUFBRSxJQUFJeW1ILEdBQUdwa0gsRUFBRUMsRUFBekN2QyxFQUFFLE1BQU1BLElBQUcsSUFBS0EsRUFBRXVnRyxTQUE0Qi8wRixFQUFFMHdHLEdBQUcsRUFBRSxLQUFLLEtBQUssSUFBSTM1RyxFQUFFLEVBQUUsSUFBSUEsRUFBRSxFQUFFLEdBQUd0QyxFQUFFaXRFLFFBQVExaEUsRUFBRUEsRUFBRWtxRixVQUFVejFGLEVBQUVnMUcsR0FBR3pwRyxHQUFHbEosRUFBRXdpRyxJQUFJN2tHLEVBQUVpdEUsUUFBUWx0RSxHQUFHLElBQUl1QyxHQWhPNUosU0FBWUQsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRTI4RixHQUFHcDZGLEdBQUdxOUYsR0FBRzlpRixTQUFRLFNBQVN4YSxHQUFHeThGLEdBQUd6OEYsRUFBRUMsRUFBRXZDLE1BQUs2L0YsR0FBRy9pRixTQUFRLFNBQVN4YSxHQUFHeThGLEdBQUd6OEYsRUFBRUMsRUFBRXZDLE1BZ09pRWduSCxDQUFHMWtILEVBQUUsSUFBSUEsRUFBRWs1RixTQUFTbDVGLEVBQUVBLEVBQUU0akMsZUFBZWpnQyxLQUFLZ2hILGNBQWNobkgsRUFDek4sU0FBU2luSCxHQUFHNWtILEdBQUcsU0FBU0EsR0FBRyxJQUFJQSxFQUFFazVGLFVBQVUsSUFBSWw1RixFQUFFazVGLFVBQVUsS0FBS2w1RixFQUFFazVGLFdBQVcsSUFBSWw1RixFQUFFazVGLFVBQVUsaUNBQWlDbDVGLEVBQUVtNUYsWUFDaEksU0FBUzByQixHQUFHN2tILEVBQUVDLEVBQUV2QyxFQUFFQyxFQUFFdUwsR0FBRyxJQUFJd3pCLEVBQUVoL0IsRUFBRTBnSCxvQkFBb0IsR0FBRzFoRixFQUFFLENBQUMsSUFBSXJJLEVBQUVxSSxFQUFFaW9GLGNBQWMsR0FBRyxtQkFBb0J6N0csRUFBRSxDQUFDLElBQUlTLEVBQUVULEVBQUVBLEVBQUUsV0FBVyxJQUFJbEosRUFBRXNrSCxHQUFHandGLEdBQUcxcUIsRUFBRW5NLEtBQUt3QyxJQUFJcWtILEdBQUdwa0gsRUFBRW8wQixFQUFFcjBCLEVBQUVrSixPQUFPLENBQW1ELEdBQWxEd3pCLEVBQUVoL0IsRUFBRTBnSCxvQkFEOUIsU0FBWXArRyxFQUFFQyxHQUEwSCxHQUF2SEEsSUFBMkRBLE1BQXZEQSxFQUFFRCxFQUFFLElBQUlBLEVBQUVrNUYsU0FBU2w1RixFQUFFcTJHLGdCQUFnQnIyRyxFQUFFKzRGLFdBQVcsT0FBYSxJQUFJOTRGLEVBQUVpNUYsV0FBV2o1RixFQUFFNmtILGFBQWEscUJBQXdCN2tILEVBQUUsSUFBSSxJQUFJdkMsRUFBRUEsRUFBRXNDLEVBQUVpNUYsV0FBV2o1RixFQUFFa3FDLFlBQVl4c0MsR0FBRyxPQUFPLElBQUkrbUgsR0FBR3prSCxFQUFFLEVBQUVDLEVBQUUsQ0FBQ2crRixTQUFRLFFBQUksR0FDdks4bUIsQ0FBR3JuSCxFQUFFQyxHQUFHMDJCLEVBQUVxSSxFQUFFaW9GLGNBQWlCLG1CQUFvQno3RyxFQUFFLENBQUMsSUFBSTVJLEVBQUU0SSxFQUFFQSxFQUFFLFdBQVcsSUFBSWxKLEVBQUVza0gsR0FBR2p3RixHQUFHL3pCLEVBQUU5QyxLQUFLd0MsSUFBSWdpSCxJQUFHLFdBQVdxQyxHQUFHcGtILEVBQUVvMEIsRUFBRXIwQixFQUFFa0osTUFBSyxPQUFPbzdHLEdBQUdqd0YsR0FBRyxTQUFTMndGLEdBQUdobEgsRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRSxFQUFFOEIsVUFBVVksYUFBUSxJQUFTWixVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLE1BQU0sQ0FBQ3V1QyxTQUFTcW5ELEdBQUd6MkYsSUFBSSxNQUFNakIsRUFBRSxLQUFLLEdBQUdBLEVBQUUyeEMsU0FBU3R2QyxFQUFFdThGLGNBQWN0OEYsRUFBRXNpRCxlQUFlN2tELEdBR3BSLFNBQVN1bkgsR0FBR2psSCxFQUFFQyxHQUFHLElBQUl2QyxFQUFFLEVBQUUrQixVQUFVWSxhQUFRLElBQVNaLFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQUssSUFBSW1sSCxHQUFHM2tILEdBQUcsTUFBTTRGLE1BQU0rakIsRUFBRSxNQUFNLE9BQU9vN0YsR0FBR2hsSCxFQUFFQyxFQUFFLEtBQUt2QyxHQUxwSSttSCxHQUFHeGxILFVBQVVndkMsT0FBTyxTQUFTanVDLEdBQUdxa0gsR0FBR3JrSCxFQUFFMkQsS0FBS2doSCxjQUFjLEtBQUssT0FBT0YsR0FBR3hsSCxVQUFVaW1ILFFBQVEsV0FBVyxJQUFJbGxILEVBQUUyRCxLQUFLZ2hILGNBQWMxa0gsRUFBRUQsRUFBRXU4RixjQUFjOG5CLEdBQUcsS0FBS3JrSCxFQUFFLE1BQUssV0FBV0MsRUFBRXVpRyxJQUFJLFNBRzFZN0YsR0FBRyxTQUFTMzhGLEdBQUcsR0FBRyxLQUFLQSxFQUFFeWpDLElBQUksQ0FBQyxJQUFJeGpDLEVBQUV3eEcsR0FBR3dDLEtBQUssSUFBSSxLQUFLRSxHQUFHbjBHLEVBQUVDLEdBQUd1a0gsR0FBR3hrSCxFQUFFQyxLQUFLMjhGLEdBQUcsU0FBUzU4RixHQUFHLEtBQUtBLEVBQUV5akMsTUFBTTB3RSxHQUFHbjBHLEVBQUUsR0FBR3drSCxHQUFHeGtILEVBQUUsS0FBSzY4RixHQUFHLFNBQVM3OEYsR0FBRyxHQUFHLEtBQUtBLEVBQUV5akMsSUFBSSxDQUFDLElBQUl4akMsRUFBRWcwRyxLQUFvQkUsR0FBR24wRyxFQUFsQkMsRUFBRWkwRyxHQUFHajBHLEVBQUVELEVBQUUsT0FBY3drSCxHQUFHeGtILEVBQUVDLEtBQzFMK3lGLEVBQUcsU0FBU2h6RixFQUFFQyxFQUFFdkMsR0FBRyxPQUFPdUMsR0FBRyxJQUFLLFFBQXlCLEdBQWpCdzNGLEdBQUd6M0YsRUFBRXRDLEdBQUd1QyxFQUFFdkMsRUFBRUUsS0FBUSxVQUFVRixFQUFFODRCLE1BQU0sTUFBTXYyQixFQUFFLENBQUMsSUFBSXZDLEVBQUVzQyxFQUFFdEMsRUFBRXNwQyxZQUFZdHBDLEVBQUVBLEVBQUVzcEMsV0FBc0YsSUFBM0V0cEMsRUFBRUEsRUFBRWdzQyxpQkFBaUIsY0FBY3FLLEtBQUtyYSxVQUFVLEdBQUd6NUIsR0FBRyxtQkFBdUJBLEVBQUUsRUFBRUEsRUFBRXZDLEVBQUUyQyxPQUFPSixJQUFJLENBQUMsSUFBSXRDLEVBQUVELEVBQUV1QyxHQUFHLEdBQUd0QyxJQUFJcUMsR0FBR3JDLEVBQUV3bkgsT0FBT25sSCxFQUFFbWxILEtBQUssQ0FBQyxJQUFJajhHLEVBQUV3NUYsR0FBRy9rRyxHQUFHLElBQUl1TCxFQUFFLE1BQU1yRCxNQUFNK2pCLEVBQUUsS0FBS210RSxHQUFHcDVGLEdBQUc4NUYsR0FBRzk1RixFQUFFdUwsS0FBSyxNQUFNLElBQUssV0FBV212RixHQUFHcjRGLEVBQUV0QyxHQUFHLE1BQU0sSUFBSyxTQUFtQixPQUFWdUMsRUFBRXZDLEVBQUVZLFFBQWV5NUYsR0FBRy8zRixJQUFJdEMsRUFBRTQrRyxTQUFTcjhHLEdBQUUsS0FBTXN6RixFQUFHd3VCLEdBQzladnVCLEVBQUcsU0FBU3h6RixFQUFFQyxFQUFFdkMsRUFBRUMsRUFBRXVMLEdBQUcsSUFBSXd6QixFQUFFdHhCLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU9pbUcsR0FBRyxHQUFHcnhHLEVBQUVuQixLQUFLLEtBQUtvQixFQUFFdkMsRUFBRUMsRUFBRXVMLElBQUksUUEzREgsS0EyRFdrQyxHQUFFc3hCLElBQVMveEIsT0FBTzhvRixFQUFHLFdBM0RoQyxJQTJEOEMsR0FBRnJvRixNQWhEMFIsV0FBYyxHQUFHLE9BQU8yMEcsR0FBRyxDQUFDLElBQUkvL0csRUFBRSsvRyxHQUFHQSxHQUFHLEtBQUsvL0csRUFBRXdhLFNBQVEsU0FBU3hhLEVBQUV0QyxHQUFHc2pILEdBQUd0akgsRUFBRXNDLEdBQUdtc0QsR0FBRXp1RCxNQUFLaU4sTUFnRDNWeTZHLEdBQUtuRSxPQUFPdnRCLEVBQUcsU0FBUzF6RixFQUFFQyxHQUFHLElBQUl2QyxFQUFFME4sR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBT3BMLEVBQUVDLEdBQUcsUUEzRHpILEtBMkRpSW1MLEdBQUUxTixJQUFTaU4sT0FBOEksSUFDeFYzSyxHQUFPQyxHQURxVm9sSCxHQUFHLENBQUNDLE9BQU8sQ0FBQ3huQixHQUFHMkUsR0FBR0MsR0FBRzVQLEVBQUdQLEVBQUc0USxHQUFHLFNBQVNuakcsR0FBR2k3RixHQUFHajdGLEVBQUVrakcsS0FBSzdQLEVBQUdDLEVBQUdud0QsR0FBR3M0RCxHQUFHd2xCLEdBQUcsQ0FBQ3IyQyxTQUFRLEtBQ2phM3FFLElBQVBELEdBQXliLENBQUN1bEgsd0JBQXdCL29CLEdBQUdncEIsV0FBVyxFQUFFL3pGLFFBQVEsVUFDcGZnMEYsb0JBQW9CLGNBRENGLHdCQW5CZ0UsU0FBWXZsSCxHQUFHLEdBQUcsb0JBQXFCK29FLCtCQUErQixPQUFNLEVBQUcsSUFBSTlvRSxFQUFFOG9FLCtCQUErQixHQUFHOW9FLEVBQUV5bEgsYUFBYXpsSCxFQUFFMGxILGNBQWMsT0FBTSxFQUFHLElBQUksSUFBSWpvSCxFQUFFdUMsRUFBRTJxQyxPQUFPNXFDLEdBQUcyakgsR0FBRyxTQUFTM2pILEdBQUcsSUFBSUMsRUFBRTJsSCxrQkFBa0Jsb0gsRUFBRXNDLE9BQUUsRUFBTyxLQUEwQixHQUFwQkEsRUFBRTRxRSxRQUFRNHZCLFlBQWUsTUFBTXR4RixNQUFNMjBHLEdBQUcsU0FBUzc5RyxHQUFHLElBQUlDLEVBQUU0bEgscUJBQXFCbm9ILEVBQUVzQyxHQUFHLE1BQU1rSixNQUFNLE1BQU12TCxLQW1CcFhtb0gsQ0FBR2huSCxFQUFFLEdBQUdrQixHQUFFLENBQUMrbEgsa0JBQWtCLEtBQUtDLGNBQWMsS0FBS0MsbUJBQW1CLEtBQUtDLGVBQWUsS0FBS0MscUJBQXFCdnhCLEVBQUdycEIsdUJBQXVCNjZDLHdCQUF3QixTQUFTcG1ILEdBQVcsT0FBTyxRQUFmQSxFQUFFNjZGLEdBQUc3NkYsSUFBbUIsS0FBS0EsRUFBRW96RixXQUFXbXlCLHdCQUF3QixTQUFTdmxILEdBQUcsT0FBT0MsR0FBRUEsR0FBRUQsR0FBRyxNQUFNcW1ILDRCQUE0QixLQUFLQyxnQkFBZ0IsS0FBS0MsYUFBYSxLQUFLQyxrQkFBa0IsS0FBS0MsZ0JBQWdCLFFBQ3ZadHBILEVBQVFndkUsbURBQW1EazVDLEdBQUdsb0gsRUFBUXVwSCxhQUFhekIsR0FBRzluSCxFQUFRd3BILFlBQVksU0FBUzNtSCxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxJQUFJQSxFQUFFazVGLFNBQVMsT0FBT2w1RixFQUFFLElBQUlDLEVBQUVELEVBQUVnMEcsb0JBQW9CLFFBQUcsSUFBUy96RyxFQUFFLENBQUMsR0FBRyxtQkFBb0JELEVBQUVpdUMsT0FBTyxNQUFNcG9DLE1BQU0rakIsRUFBRSxNQUFNLE1BQU0vakIsTUFBTStqQixFQUFFLElBQUk3ckIsT0FBT2dJLEtBQUsvRixLQUEwQyxPQUE1QkEsRUFBRSxRQUFWQSxFQUFFNjZGLEdBQUc1NkYsSUFBYyxLQUFLRCxFQUFFb3pGLFdBQ3ZXajJGLEVBQVF5cEgsVUFBVSxTQUFTNW1ILEVBQUVDLEdBQUcsR0E5RHdDLElBOERsQyxHQUFGbUwsSUFBZSxNQUFNdkYsTUFBTStqQixFQUFFLE1BQU0sSUFBSWxzQixFQUFFME4sR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBT2ltRyxHQUFHLEdBQUdyeEcsRUFBRW5CLEtBQUssS0FBS29CLElBQUksUUFBUW1MLEdBQUUxTixFQUFFaU4sT0FBT3hOLEVBQVE4Z0csUUFBUSxTQUFTaitGLEVBQUVDLEVBQUV2QyxHQUFHLElBQUlrbkgsR0FBRzNrSCxHQUFHLE1BQU00RixNQUFNK2pCLEVBQUUsTUFBTSxPQUFPaTdGLEdBQUcsS0FBSzdrSCxFQUFFQyxHQUFFLEVBQUd2QyxJQUFJUCxFQUFROHdDLE9BQU8sU0FBU2p1QyxFQUFFQyxFQUFFdkMsR0FBRyxJQUFJa25ILEdBQUcza0gsR0FBRyxNQUFNNEYsTUFBTStqQixFQUFFLE1BQU0sT0FBT2k3RixHQUFHLEtBQUs3a0gsRUFBRUMsR0FBRSxFQUFHdkMsSUFDblRQLEVBQVEwcEgsdUJBQXVCLFNBQVM3bUgsR0FBRyxJQUFJNGtILEdBQUc1a0gsR0FBRyxNQUFNNkYsTUFBTStqQixFQUFFLEtBQUssUUFBTzVwQixFQUFFbytHLHNCQUFxQjRELElBQUcsV0FBVzZDLEdBQUcsS0FBSyxLQUFLN2tILEdBQUUsR0FBRyxXQUFXQSxFQUFFbytHLG9CQUFvQixLQUFLcCtHLEVBQUV3aUcsSUFBSSxZQUFTLElBQVFybEcsRUFBUTJwSCx3QkFBd0IvRSxHQUFHNWtILEVBQVE0cEgsc0JBQXNCLFNBQVMvbUgsRUFBRUMsR0FBRyxPQUFPZ2xILEdBQUdqbEgsRUFBRUMsRUFBRSxFQUFFUixVQUFVWSxhQUFRLElBQVNaLFVBQVUsR0FBR0EsVUFBVSxHQUFHLE9BQ3ZWdEMsRUFBUTZwSCxvQ0FBb0MsU0FBU2huSCxFQUFFQyxFQUFFdkMsRUFBRUMsR0FBRyxJQUFJaW5ILEdBQUdsbkgsR0FBRyxNQUFNbUksTUFBTStqQixFQUFFLE1BQU0sR0FBRyxNQUFNNXBCLFFBQUcsSUFBU0EsRUFBRWcwRyxvQkFBb0IsTUFBTW51RyxNQUFNK2pCLEVBQUUsS0FBSyxPQUFPaTdGLEdBQUc3a0gsRUFBRUMsRUFBRXZDLEdBQUUsRUFBR0MsSUFBSVIsRUFBUXMwQixRQUFRLFcsNkJDaFMvTHIwQixFQUFPRCxRQUFVLEVBQVEsTTs7Ozs7Ozs7R0NNZCxJQUFJdS9CLEVBQUVySSxFQUFFMXFCLEVBQUVySixFQUFFaEQsRUFDekIsR0FBRyxvQkFBcUIrL0IsUUFBUSxtQkFBb0I0cEYsZUFBZSxDQUFDLElBQUk5bkgsRUFBRSxLQUFLeXNELEVBQUUsS0FBS3J0RCxFQUFFLFdBQVcsR0FBRyxPQUFPWSxFQUFFLElBQUksSUFBSWEsRUFBRTdDLEVBQVE2eUcsZUFBZTd3RyxHQUFFLEVBQUdhLEdBQUdiLEVBQUUsS0FBSyxNQUFNYyxHQUFHLE1BQU1nM0IsV0FBVzE0QixFQUFFLEdBQUcwQixJQUFLMnBCLEVBQUVscEIsS0FBSzBkLE1BQU1qaEIsRUFBUTZ5RyxhQUFhLFdBQVcsT0FBT3R2RyxLQUFLMGQsTUFBTXdMLEdBQUc4UyxFQUFFLFNBQVMxOEIsR0FBRyxPQUFPYixFQUFFODNCLFdBQVd5RixFQUFFLEVBQUUxOEIsSUFBSWIsRUFBRWEsRUFBRWkzQixXQUFXMTRCLEVBQUUsS0FBSzgxQixFQUFFLFNBQVNyMEIsRUFBRUMsR0FBRzJyRCxFQUFFMzBCLFdBQVdqM0IsRUFBRUMsSUFBSTBKLEVBQUUsV0FBV292QyxhQUFhNlMsSUFBSXRyRCxFQUFFLFdBQVcsT0FBTSxHQUFJaEQsRUFBRUgsRUFBUStwSCx3QkFBd0IsaUJBQWlCLENBQUMsSUFBSWo4RyxFQUFFb3lCLE9BQU84cEYsWUFBWXYxRyxFQUFFeXJCLE9BQU8zOEIsS0FDbmY2SyxFQUFFOHhCLE9BQU9wRyxXQUFXdzBCLEVBQUVwdUIsT0FBTzBiLGFBQWEsR0FBRyxvQkFBcUIzekMsUUFBUSxDQUFDLElBQUlpbUQsRUFBRWh1QixPQUFPK3BGLHFCQUFxQixtQkFBb0IvcEYsT0FBT2dxRix1QkFBdUJqaUgsUUFBUTJ5QixNQUFNLDJJQUEySSxtQkFBb0JzekIsR0FBR2ptRCxRQUFRMnlCLE1BQU0sMElBQTBJLEdBQUcsaUJBQ25lOXNCLEdBQUcsbUJBQW9CQSxFQUFFbVQsSUFBSWpoQixFQUFRNnlHLGFBQWEsV0FBVyxPQUFPL2tHLEVBQUVtVCxXQUFXLENBQUMsSUFBSXl0QyxFQUFFajZDLEVBQUV3TSxNQUFNamhCLEVBQVE2eUcsYUFBYSxXQUFXLE9BQU9wK0YsRUFBRXdNLE1BQU15dEMsR0FBRyxJQUFJUCxHQUFFLEVBQUd6aUQsRUFBRSxLQUFLUSxHQUFHLEVBQUVvekIsRUFBRSxFQUFFb3pCLEVBQUUsRUFBRXZ2RCxFQUFFLFdBQVcsT0FBT25ELEVBQVE2eUcsZ0JBQWdCbmdELEdBQUd2eUQsRUFBRSxhQUFhSCxFQUFRK3BILHdCQUF3QixTQUFTbG5ILEdBQUcsRUFBRUEsR0FBRyxJQUFJQSxFQUFFb0YsUUFBUTJ5QixNQUFNLG9IQUFvSDBFLEVBQUUsRUFBRXo4QixFQUFFOEcsS0FBSzBILE1BQU0sSUFBSXhPLEdBQUcsR0FBRyxJQUFJd3FFLEVBQUUsSUFBSXk4QyxlQUFlbjdELEVBQUUwZSxFQUFFODhDLE1BQU05OEMsRUFBRSs4QyxNQUFNQyxVQUNuZixXQUFXLEdBQUcsT0FBTzMrRyxFQUFFLENBQUMsSUFBSTdJLEVBQUU3QyxFQUFRNnlHLGVBQWVuZ0QsRUFBRTd2RCxFQUFFeThCLEVBQUUsSUFBSTV6QixHQUFFLEVBQUc3SSxHQUFHOHJELEVBQUUyN0QsWUFBWSxPQUFPbjhELEdBQUUsRUFBR3ppRCxFQUFFLE1BQU0sTUFBTTVJLEdBQUcsTUFBTTZyRCxFQUFFMjdELFlBQVksTUFBTXhuSCxRQUFTcXJELEdBQUUsR0FBSTV1QixFQUFFLFNBQVMxOEIsR0FBRzZJLEVBQUU3SSxFQUFFc3JELElBQUlBLEdBQUUsRUFBR1EsRUFBRTI3RCxZQUFZLFFBQVFwekYsRUFBRSxTQUFTcjBCLEVBQUVDLEdBQUdvSixFQUFFa0MsR0FBRSxXQUFXdkwsRUFBRTdDLEVBQVE2eUcsa0JBQWlCL3ZHLElBQUkwSixFQUFFLFdBQVc4aEQsRUFBRXBpRCxHQUFHQSxHQUFHLEdBQUcsU0FBUzBpRCxFQUFFL3JELEVBQUVDLEdBQUcsSUFBSXZDLEVBQUVzQyxFQUFFSyxPQUFPTCxFQUFFZ0IsS0FBS2YsR0FBR0QsRUFBRSxPQUFPLENBQUMsSUFBSXJDLEVBQUVELEVBQUUsSUFBSSxFQUFFd0wsRUFBRWxKLEVBQUVyQyxHQUFHLFVBQUcsSUFBU3VMLEdBQUcsRUFBRTJoRSxFQUFFM2hFLEVBQUVqSixJQUEwQixNQUFNRCxFQUE3QkEsRUFBRXJDLEdBQUdzQyxFQUFFRCxFQUFFdEMsR0FBR3dMLEVBQUV4TCxFQUFFQyxHQUFnQixTQUFTMGEsRUFBRXJZLEdBQVUsWUFBTyxLQUFkQSxFQUFFQSxFQUFFLElBQXFCLEtBQUtBLEVBQzljLFNBQVNtSyxFQUFFbkssR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUcsUUFBRyxJQUFTQyxFQUFFLENBQUMsSUFBSXZDLEVBQUVzQyxFQUFFazJELE1BQU0sR0FBR3g0RCxJQUFJdUMsRUFBRSxDQUFDRCxFQUFFLEdBQUd0QyxFQUFFc0MsRUFBRSxJQUFJLElBQUlyQyxFQUFFLEVBQUV1TCxFQUFFbEosRUFBRUssT0FBTzFDLEVBQUV1TCxHQUFHLENBQUMsSUFBSXpMLEVBQUUsR0FBR0UsRUFBRSxHQUFHLEVBQUVtQixFQUFFa0IsRUFBRXZDLEdBQUc4dEQsRUFBRTl0RCxFQUFFLEVBQUVVLEVBQUU2QixFQUFFdXJELEdBQUcsUUFBRyxJQUFTenNELEdBQUcsRUFBRStyRSxFQUFFL3JFLEVBQUVwQixRQUFHLElBQVNTLEdBQUcsRUFBRTBzRSxFQUFFMXNFLEVBQUVXLElBQUlrQixFQUFFckMsR0FBR1EsRUFBRTZCLEVBQUV1ckQsR0FBRzd0RCxFQUFFQyxFQUFFNHRELElBQUl2ckQsRUFBRXJDLEdBQUdtQixFQUFFa0IsRUFBRXZDLEdBQUdDLEVBQUVDLEVBQUVGLE9BQVEsV0FBRyxJQUFTVSxHQUFHLEVBQUUwc0UsRUFBRTFzRSxFQUFFVCxJQUEwQixNQUFNc0MsRUFBN0JBLEVBQUVyQyxHQUFHUSxFQUFFNkIsRUFBRXVyRCxHQUFHN3RELEVBQUVDLEVBQUU0dEQsSUFBZ0IsT0FBT3RyRCxFQUFFLE9BQU8sS0FBSyxTQUFTNHFFLEVBQUU3cUUsRUFBRUMsR0FBRyxJQUFJdkMsRUFBRXNDLEVBQUUwbkgsVUFBVXpuSCxFQUFFeW5ILFVBQVUsT0FBTyxJQUFJaHFILEVBQUVBLEVBQUVzQyxFQUFFbWpDLEdBQUdsakMsRUFBRWtqQyxHQUFHLElBQUl1b0IsRUFBRSxHQUFHdE8sRUFBRSxHQUFHNnRCLEVBQUUsRUFBRTNnRSxFQUFFLEtBQUtpakQsRUFBRSxFQUFFNUIsR0FBRSxFQUFHSyxHQUFFLEVBQUdDLEdBQUUsRUFDamEsU0FBU0MsRUFBRWxzRCxHQUFHLElBQUksSUFBSUMsRUFBRW9ZLEVBQUUra0MsR0FBRyxPQUFPbjlDLEdBQUcsQ0FBQyxHQUFHLE9BQU9BLEVBQUUySCxTQUFTdUMsRUFBRWl6QyxPQUFRLE1BQUduOUMsRUFBRTBuSCxXQUFXM25ILEdBQWdELE1BQTlDbUssRUFBRWl6QyxHQUFHbjlDLEVBQUV5bkgsVUFBVXpuSCxFQUFFb3lHLGVBQWV0bUQsRUFBRUwsRUFBRXpyRCxHQUFjQSxFQUFFb1ksRUFBRStrQyxJQUFJLFNBQVNoeUMsRUFBRXBMLEdBQWEsR0FBVmlzRCxHQUFFLEVBQUdDLEVBQUVsc0QsSUFBT2dzRCxFQUFFLEdBQUcsT0FBTzN6QyxFQUFFcXpDLEdBQUdNLEdBQUUsRUFBR3R2QixFQUFFMHVDLE9BQU8sQ0FBQyxJQUFJbnJFLEVBQUVvWSxFQUFFK2tDLEdBQUcsT0FBT245QyxHQUFHbzBCLEVBQUVqcEIsRUFBRW5MLEVBQUUwbkgsVUFBVTNuSCxJQUN0UCxTQUFTb3JFLEVBQUVwckUsRUFBRUMsR0FBRytyRCxHQUFFLEVBQUdDLElBQUlBLEdBQUUsRUFBR3RpRCxLQUFLZ2lELEdBQUUsRUFBRyxJQUFJanVELEVBQUU2dkQsRUFBRSxJQUFTLElBQUxyQixFQUFFanNELEdBQU9xSyxFQUFFK04sRUFBRXF6QyxHQUFHLE9BQU9waEQsTUFBTUEsRUFBRStuRyxlQUFlcHlHLElBQUlELElBQUlNLE1BQU0sQ0FBQyxJQUFJM0MsRUFBRTJNLEVBQUUxQyxTQUFTLEdBQUcsT0FBT2pLLEVBQUUsQ0FBQzJNLEVBQUUxQyxTQUFTLEtBQUsybEQsRUFBRWpqRCxFQUFFczlHLGNBQWMsSUFBSTErRyxFQUFFdkwsRUFBRTJNLEVBQUUrbkcsZ0JBQWdCcHlHLEdBQUdBLEVBQUU5QyxFQUFRNnlHLGVBQWUsbUJBQW9COW1HLEVBQUVvQixFQUFFMUMsU0FBU3NCLEVBQUVvQixJQUFJK04sRUFBRXF6QyxJQUFJdmhELEVBQUV1aEQsR0FBR1EsRUFBRWpzRCxRQUFRa0ssRUFBRXVoRCxHQUFHcGhELEVBQUUrTixFQUFFcXpDLEdBQUcsR0FBRyxPQUFPcGhELEVBQUUsSUFBSTdNLEdBQUUsTUFBTyxDQUFDLElBQUlxQixFQUFFdVosRUFBRStrQyxHQUFHLE9BQU90K0MsR0FBR3UxQixFQUFFanBCLEVBQUV0TSxFQUFFNm9ILFVBQVUxbkgsR0FBR3hDLEdBQUUsRUFBRyxPQUFPQSxFQUFFLFFBQVE2TSxFQUFFLEtBQUtpakQsRUFBRTd2RCxFQUFFaXVELEdBQUUsR0FDcFosU0FBUzBmLEVBQUVyckUsR0FBRyxPQUFPQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsT0FBTyxXQUFXLEtBQUssRUFBRSxPQUFPLElBQUksUUFBUSxPQUFPLEtBQUssSUFBSW1zRCxFQUFFN3VELEVBQUVILEVBQVFzekcsc0JBQXNCLEVBQUV0ekcsRUFBUWd6RywyQkFBMkIsRUFBRWh6RyxFQUFRb3pHLHFCQUFxQixFQUFFcHpHLEVBQVFxaEcsd0JBQXdCLEVBQUVyaEcsRUFBUTBxSCxtQkFBbUIsS0FBSzFxSCxFQUFRaWlHLDhCQUE4QixFQUFFamlHLEVBQVF5eUcsd0JBQXdCLFNBQVM1dkcsR0FBR0EsRUFBRTRILFNBQVMsTUFBTXpLLEVBQVEycUgsMkJBQTJCLFdBQVc5N0QsR0FBR0wsSUFBSUssR0FBRSxFQUFHdHZCLEVBQUUwdUMsS0FDeGNqdUUsRUFBUSt5RyxpQ0FBaUMsV0FBVyxPQUFPM2lELEdBQUdwd0QsRUFBUTRxSCw4QkFBOEIsV0FBVyxPQUFPMXZHLEVBQUVxekMsSUFBSXZ1RCxFQUFRNnFILGNBQWMsU0FBU2hvSCxHQUFHLE9BQU91dEQsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJdHRELEVBQUUsRUFBRSxNQUFNLFFBQVFBLEVBQUVzdEQsRUFBRSxJQUFJN3ZELEVBQUU2dkQsRUFBRUEsRUFBRXR0RCxFQUFFLElBQUksT0FBT0QsSUFBSSxRQUFRdXRELEVBQUU3dkQsSUFBSVAsRUFBUThxSCx3QkFBd0IsYUFBYTlxSCxFQUFRMnlHLHNCQUFzQjNqRCxFQUFFaHZELEVBQVE2Z0cseUJBQXlCLFNBQVNoK0YsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxRQUFRQSxFQUFFLEVBQUUsSUFBSXRDLEVBQUU2dkQsRUFBRUEsRUFBRXZ0RCxFQUFFLElBQUksT0FBT0MsSUFBSSxRQUFRc3RELEVBQUU3dkQsSUFDaGVQLEVBQVFvaEcsMEJBQTBCLFNBQVN2K0YsRUFBRUMsRUFBRXZDLEdBQUcsSUFBSUMsRUFBRVIsRUFBUTZ5RyxlQUFlLEdBQUcsaUJBQWtCdHlHLEdBQUcsT0FBT0EsRUFBRSxDQUFDLElBQUl3TCxFQUFFeEwsRUFBRW81QixNQUFNNXRCLEVBQUUsaUJBQWtCQSxHQUFHLEVBQUVBLEVBQUV2TCxFQUFFdUwsRUFBRXZMLEVBQUVELEVBQUUsaUJBQWtCQSxFQUFFMDZCLFFBQVExNkIsRUFBRTA2QixRQUFRaXpDLEVBQUVyckUsUUFBUXRDLEVBQUUydEUsRUFBRXJyRSxHQUFHa0osRUFBRXZMLEVBQXlNLE9BQWpNcUMsRUFBRSxDQUFDbWpDLEdBQUc4bkMsSUFBSXJqRSxTQUFTM0gsRUFBRTJuSCxjQUFjNW5ILEVBQUUybkgsVUFBVXorRyxFQUFFbXBHLGVBQXZEMzBHLEVBQUV3TCxFQUFFeEwsRUFBb0VncUgsV0FBVyxHQUFHeCtHLEVBQUV2TCxHQUFHcUMsRUFBRTBuSCxVQUFVeCtHLEVBQUU2aUQsRUFBRTNPLEVBQUVwOUMsR0FBRyxPQUFPcVksRUFBRXF6QyxJQUFJMXJELElBQUlxWSxFQUFFK2tDLEtBQUs2TyxFQUFFdGlELElBQUlzaUQsR0FBRSxFQUFHNTNCLEVBQUVqcEIsRUFBRWxDLEVBQUV2TCxNQUFNcUMsRUFBRTBuSCxVQUFVaHFILEVBQUVxdUQsRUFBRUwsRUFBRTFyRCxHQUFHZ3NELEdBQUdMLElBQUlLLEdBQUUsRUFBR3R2QixFQUFFMHVDLEtBQVlwckUsR0FDM2E3QyxFQUFReXpHLHFCQUFxQixXQUFXLElBQUk1d0csRUFBRTdDLEVBQVE2eUcsZUFBZTlqRCxFQUFFbHNELEdBQUcsSUFBSUMsRUFBRW9ZLEVBQUVxekMsR0FBRyxPQUFPenJELElBQUlxSyxHQUFHLE9BQU9BLEdBQUcsT0FBT3JLLEdBQUcsT0FBT0EsRUFBRTJILFVBQVUzSCxFQUFFMG5ILFdBQVczbkgsR0FBR0MsRUFBRW95RyxlQUFlL25HLEVBQUUrbkcsZ0JBQWdCL3hHLEtBQUtuRCxFQUFRK3FILHNCQUFzQixTQUFTbG9ILEdBQUcsSUFBSUMsRUFBRXN0RCxFQUFFLE9BQU8sV0FBVyxJQUFJN3ZELEVBQUU2dkQsRUFBRUEsRUFBRXR0RCxFQUFFLElBQUksT0FBT0QsRUFBRVIsTUFBTW1FLEtBQUtsRSxXQUFXLFFBQVE4dEQsRUFBRTd2RCxNLHlwQkNsQmhULGFBQ2IsT0FDRTZ3RixJQUFBenBELGNBQUEsV0FBSywwQkNPTSxFQUNELFVBREMsRUFFSixVQUZJLEVBR1AsVUFITyxFQUlSLFVBSlEsRUFLRCxVQUxDLEVBTUEsVSxPQ1pUcWpGLEVBQU0vMEUsSUFBT2cxRSxJQUFHNTBFLFdBQUEsQ0FBQTFULFlBQUEsV0FBQXFCLFlBQUEsZ0JBQVZpUyxDQUFVLCtrQkFNWGkxRSxFQVlJQSxFQUNrQkEsRUF1QkRBLEdBTWpCLFdBQUNwcEYsR0FDZCxPQUNFc3ZELElBQUF6cEQsY0FBQ3FqRixFQUFHLEtBQ0Y1NUIsSUFBQXpwRCxjQUFBLE9BQUszQixHQUFHLGlCQUNOb3JELElBQUF6cEQsY0FBQSxPQUFLM0IsR0FBRyxZQUNOb3JELElBQUF6cEQsY0FBQSxPQUFLM0IsR0FBRyxjQUFhLGNBQ3JCb3JELElBQUF6cEQsY0FBQSxPQUFLM0IsR0FBRyxjQUNOb3JELElBQUF6cEQsY0FBQSxLQUFHbXVDLEtBQUssNkNBQTRDLFlBQ3BEc2IsSUFBQXpwRCxjQUFBLFdBQUt5cEQsSUFBQXpwRCxjQUFBLEtBQUdtdUMsS0FBSywyQkFBMEIsVUFDdkNzYixJQUFBenBELGNBQUEsV0FBS3lwRCxJQUFBenBELGNBQUEsS0FBR211QyxLQUFLLDZDQUE0QyxtQkFDekRzYixJQUFBenBELGNBQUEsV0FBS3lwRCxJQUFBenBELGNBQUEsS0FBR211QyxLQUFLLHdDQUF1QyxnQkFJeERzYixJQUFBenBELGNBQUEsT0FBSzNCLEdBQUcsWUFDRm9yRCxJQUFBenBELGNBQUEsS0FBR3dqRixNQUFRLENBQUMsSUFBSWp0RCxTQUFTcDhCLEVBQU1zcEYsU0FBVyxXQUFhLEdBQ3BEdDFDLEtBQUssS0FBSSxRQUNac2IsSUFBQXpwRCxjQUFBLEtBQUd3akYsTUFBTyxDQUFDLE9BQVEsT0FBUSxRQUFRanRELFNBQVNwOEIsRUFBTXNwRixTQUFXLFdBQWEsR0FDdkV0MUMsS0FBSyxTQUFRLFFBQ2hCc2IsSUFBQXpwRCxjQUFBLEtBQUd3akYsTUFBTyxDQUFDLE9BQU9qdEQsU0FBU3A4QixFQUFNc3BGLFNBQVcsV0FBYSxHQUN0RHQxQyxLQUFLLFFBQU8sVyxpREN0RWQsV0FBQWozQyxHQUFnRCxJQUE3Q3dzRixFQUFVeHNGLEVBQVZ3c0YsV0FBWXJwSCxFQUFDNjhCLEVBQUQ3OEIsRUFBR3NwSCxFQUFHenNGLEVBQUh5c0YsSUFBR0MsRUFBQTFzRixFQUFFekQsZ0JBQVEsSUFBQW13RixFQUFHLFFBQU9BLEVBRWhELy9ELEVBQVN4cEQsRUFEQyxFQUNjLEVBQUtBLEVBRG5CLEVBQ2tDLEVBQzVDeW9DLEVBQU96b0MsRUFGRyxHQUVhcXBILEVBQWNycEgsRUFGM0IsRUFFMENxcEgsRUFJMUQsT0FGQXBqSCxRQUFRNHlCLElBQUl3d0YsRUFBWTcvRCxFQUFPL2dCLEdBRzdCMm1ELElBQUF6cEQsY0FBQSxPQUFLM0IsR0FBRyxhQ0tFLFNBQUN3bEIsRUFBTyttQixFQUFNN3lDLEdBVzFCLFFBVm1CLElBQVI2eUMsSUFFUEEsRUFBTy9tQixFQUNQQSxFQUFRLFFBR08sSUFBUjlyQixJQUNQQSxFQUFPLEdBR05BLEVBQU8sR0FBSzhyQixHQUFTK21CLEdBQVU3eUMsRUFBTyxHQUFLOHJCLEdBQVMrbUIsRUFDckQsTUFBTyxHQUlYLElBREEsSUFBSXJ5RCxFQUFTLEdBQ0poZ0IsRUFBSXNyRCxFQUFPOXJCLEVBQU8sRUFBSXgvQixFQUFJcXlFLEVBQU9yeUUsRUFBSXF5RSxFQUFNcnlFLEdBQUt3L0IsRUFDckR4ZixFQUFPcmMsS0FBSzNELEdBR2hCLE9BQU9nZ0IsRUR2Qkg2Z0UsQ0FBTXYxQixFQUFPL2dCLEVBQUksRUFBRyxHQUFHam5DLEtBQUksU0FBQXRELEdBQ3pCLE9BQU9reEYsSUFBQXpwRCxjQUFBLEtBQUdtdUMsS0FBSSxHQUFBaCtELE9BQUtzakIsRUFBUSxPQUFBdGpCLE9BQU01WCxFQUFDLFNBQUE0WCxPQUFRd3pHLEdBQU83cEgsSUFBS3ZCLEdBQUlBLFEseUJFSTNELFNBQVMsRUFBVTZjLEdBQ3hCLE9BQU8sWUFBVSxZQUFjQSxJLHNDQ2xCbEIsU0FBU3l1RyxFQUFtQnp1RyxHQUN6QyxPQUFPbmMsT0FBT0MsZUFBZWtjLEVBQU0sZ0JBQWlCLENBQ2xEamMsWUFBWSxFQUNaMDJCLGNBQWMsRUFDZEMsVUFBVSxFQUNWdDJCLE1BQU8sV0FDTCxJQUFJNGtFLEVBQWF6akUsVUFBVVksT0FBUyxRQUFzQitDLElBQWpCM0QsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEtBQ2pGeS9DLEVBQVN6L0MsVUFBVVksT0FBUyxRQUFzQitDLElBQWpCM0QsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQ2pGLE9BQU8sSUFBa0JrRSxLQUFNdS9ELEVBQVloa0IsR0FBUSxTQUFVdGdELEVBQUtOLEdBQ2hFLE1BQU8sQ0FDTDQrQixJQUFLLENBQ0gxRyxLQUFNLE9BQ05veUYsU0FBVSxRQUNWemxGLEdBQUk3a0MsRUFBTTQrQixJQUFJaUcsR0FDZDBsRixVQUFVLFUsc0JDZmxCcjFGLEVBQTRCLG1CQUFYcDFCLFFBQW9ELGlCQUFwQkEsT0FBT3ExQixTQUF3QixTQUFVdHpCLEdBQU8sY0FBY0EsR0FBUyxTQUFVQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYL0IsUUFBeUIrQixFQUFJdXpCLGNBQWdCdDFCLFFBQVUrQixJQUFRL0IsT0FBT2EsVUFBWSxnQkFBa0JrQixHQUVsUSswQixFQUFnYixTQUFVdDBCLEVBQUt2RCxHQUFLLEdBQUl1QyxNQUFNRixRQUFRa0IsR0FBUSxPQUFPQSxFQUFZLEdBQUl4QyxPQUFPcTFCLFlBQVkxMUIsT0FBTzZDLEdBQVEsT0FBeGYsU0FBdUJBLEVBQUt2RCxHQUFLLElBQUlpNEIsRUFBTyxHQUFRQyxHQUFLLEVBQVV4eUIsR0FBSyxFQUFXc3lCLE9BQUtqeUIsRUFBVyxJQUFNLElBQUssSUFBaUNneUIsRUFBN0I5d0IsRUFBSzFELEVBQUl4QyxPQUFPcTFCLGNBQW1COEIsR0FBTUgsRUFBSzl3QixFQUFHcVcsUUFBUTZhLFFBQW9CRixFQUFLdDBCLEtBQUtvMEIsRUFBRzkyQixRQUFZakIsR0FBS2k0QixFQUFLajFCLFNBQVdoRCxHQUEzRGs0QixHQUFLLElBQW9FLE1BQU9FLEdBQU8xeUIsR0FBSyxFQUFNc3lCLEVBQUtJLEVBQU8sUUFBVSxLQUFXRixHQUFNanhCLEVBQVcsUUFBR0EsRUFBVyxTQUFPLFFBQVUsR0FBSXZCLEVBQUksTUFBTXN5QixHQUFRLE9BQU9DLEVBQTZId3pGLENBQWNsb0gsRUFBS3ZELEdBQWEsTUFBTSxJQUFJMDNCLFVBQVUseURBRXRsQixTQUFTd3dDLEVBQW1CM2tFLEdBQU8sR0FBSWhCLE1BQU1GLFFBQVFrQixHQUFNLENBQUUsSUFBSyxJQUFJdkQsRUFBSSxFQUFHb2MsRUFBTzdaLE1BQU1nQixFQUFJUCxRQUFTaEQsRUFBSXVELEVBQUlQLE9BQVFoRCxJQUFPb2MsRUFBS3BjLEdBQUt1RCxFQUFJdkQsR0FBTSxPQUFPb2MsRUFBZSxPQUFPN1osTUFBTXFFLEtBQUtyRCxHQUkxTCxJQUFJbW9ILEVBQWtCLEdBa0RsQkMsRUFBb0IsU0FBMkJDLEVBQVdDLEdBQzVELElBQUlDLEVBQVVELEVBQVNDLFFBQ25CUCxFQUFXTSxFQUFTTixTQUNwQlEsRUFBVUYsRUFBU0UsUUFDbkJDLEVBQWdCSCxFQUFTRyxjQUc3QixPQUFJRCxHQUFXQyxFQUNOSixFQUFVL3FILElBQUlrckgsRUFBVSxJQUFNQyxFQUFnQixJQUFNVCxFQUFXLElBQU1PLEdBR3ZFRixFQUFVL3FILElBQUkwcUgsRUFBVyxJQUFNTyxJQThCcENHLEVBQWtCLFNBQXlCTCxFQUFXL3BELEdBQ3hELElBQUlxcUQsRUFBWXJxRCxFQUFLaGlDLElBQ2pCMUcsRUFBTyt5RixFQUFVL3lGLEtBQ2pCb3lGLEVBQVdXLEVBQVVYLFNBRXpCLEdBQWEsaUJBQVRweUYsRUFBeUIsQ0FDM0IsSUFBS295RixFQUFTWSxXQUFXLGVBQ3ZCLE9BQU90cUQsRUFHVCxJQUVJdXFELEVBdkNZLFNBQXVCQyxHQUN6QyxJQUFJM3pFLEVBQVMsb0VBRWIsR0FBS0EsRUFBT3B0QyxLQUFLK2dILEdBQWpCLENBTUEsSUFBSUMsRUFBYUQsRUFBSXhoSCxNQUFNNnRDLEdBQ3ZCNnpFLEVBQWMxMEYsRUFBZXkwRixFQUFZLEdBRXpDUCxHQURJUSxFQUFZLEdBQ05BLEVBQVksSUFDdEJDLEVBQWVELEVBQVksR0FJL0IsTUFBTyxDQUFFUixRQUFTQSxFQUFTQyxtQkFIVWptSCxJQUFqQnltSCxFQUE2QixTQUFXQSxFQUdIVixRQUYzQ1MsRUFBWSxLQXdCSEUsQ0FGWDVxRCxFQUFLaGlDLElBQUl3c0YsS0FHZk4sRUFBVUssRUFBZUwsUUFDekJDLEVBQWdCSSxFQUFlSixjQUMvQlUsRUFBV04sRUFBZU4sUUFFMUJhLEVBQW9CcEIsRUFBU3oyRyxNQUFNLEtBQUssR0FFNUMsT0FBTzYyRyxFQUFrQkMsRUFBVyxDQUNsQ0wsU0FBVW9CLEVBQ1ZiLFFBQVNZLEVBQ1RYLFFBQVNBLEVBQ1RDLGNBQWVBLEtBQ1hOLEVBR1IsSUFBSUksRUFBVWpxRCxFQUFLaGlDLElBQUlpRyxHQUV2QixPQUFPNmxGLEVBQWtCQyxFQUFXLENBQUVMLFNBQVVBLEVBQVVPLFFBQVNBLEtBQWNKLEdBK0IvRWtCLEdBQWEsU0FBU0EsRUFBV3RxSCxFQUFPdXFILEVBQVdDLEVBQVNDLEdBQzlELEdBQUlGLEVBQVV2cUgsR0FDWixPQUFPd3FILEVBQVF4cUgsR0FHakIsR0FBSUEsR0FBMkUsaUJBQWhELElBQVZBLEVBQXdCLFlBQWM2ekIsRUFBUTd6QixJQUFzQixDQUN2RixJQUFLLElBQUlmLEtBQU9lLEVBRVZBLEVBQU1ULGVBQWVOLEtBQ3ZCZSxFQUFNZixHQUFPcXJILEVBQVd0cUgsRUFBTWYsR0FBTXNySCxFQUFXQyxFQUFTQyxJQUd4REEsSUFDRnpxSCxFQW5DYSxTQUFzQkEsR0FDdkMsR0FBSUMsTUFBTUYsUUFBUUMsR0FDaEIsT0FBT0EsRUFBTTRrQixRQUFPLFNBQVVwZ0IsR0FDNUIsT0FBT0EsSUFBUTRrSCxLQUduQixJQUFLLElBQUlucUgsS0FBT2UsRUFDVkEsRUFBTWYsS0FBU21xSCxVQUNWcHBILEVBQU1mLEdBR2pCLE9BQU9lLEVBd0JLMHFILENBQWExcUgsSUFHekIsT0FBT0EsR0FzRU0sR0FuQ08sU0FBeUJtN0IsRUFBVXRELEdBRXZELEdBREFBLEVBQVVBLEdBQVcsSUFDaEJzRCxFQUFTNHJELE1BQ1osTUFBTyxHQUVULElBQUk0akMsRUFBZ0IsSUFBS3h2RixHQUNyQnl2RixFQUFjeHNILE9BQU9nSSxLQUFLdWtILEVBQWNqdkQsVUFBWSxJQUFJL21DLFFBQU8sU0FBVXU4QyxFQUFLcjZDLEdBQ2hGLE1BQU8sR0FBR3ZoQixPQUFPc3dELEVBQW1Cc0wsR0FBTXRMLEVBQW1CenFDLEVBQVN1Z0MsU0FBUzdrQyxPQUM5RSxJQUVDZzBGLEVBQWEsR0FBR3YxRyxPQUFPc3dELEVBQW1CK2tELEVBQWM1akMsT0FBUW5oQixFQUFtQmdsRCxJQUFjaG1HLFFBQU8sU0FBVTZrQyxHQUNwSCxPQUFPL3ZCLFFBQVErdkIsRUFBT2xzQixRQUdwQityRixFQUFZLElBQUk3eUUsSUFBSW8wRSxFQUFXbDJGLFFBQU8sU0FBVXdoQyxFQUFLMU0sR0FDdkQsSUExTCtDbHNCLEVBMEwzQ2dsQixHQTFMMkNobEIsRUEwTGZrc0IsRUFBT2xzQixJQXpMckNBLEVBQUlwRSxPQUFTb0UsRUFBSXV0RixZQUNaLENBQUN2dEYsRUFBSTFHLEtBQU8sSUFBTTBHLEVBQUlpRyxHQUFJakcsRUFBSXBFLE1BQU1vRSxJQUFJaUcsR0FBSyxJQUFNakcsRUFBSXV0RixZQUFZdnRGLElBQUlpRyxHQUFLLElBQU1qRyxFQUFJMUcsS0FBTyxJQUFNMEcsRUFBSWlHLElBR3pHLENBQUNqRyxFQUFJMUcsS0FBTyxJQUFNMEcsRUFBSWlHLEtBcUxpQnhpQyxLQUFJLFNBQVUvQixHQUN4RCxNQUFPLENBQUNBLEVBQUt3cUQsTUFHZixPQURBME0sRUFBSTkwRCxLQUFLeEIsTUFBTXMyRCxFQUFLeVAsRUFBbUJyakIsSUFDaEM0VCxJQUNOLEtBWUgsT0FWQTAwRCxFQUFXaHdHLFNBQVEsU0FBVWdLLEdBQzNCLElBQUlrbUcsRUEvQ2MsU0FBeUJsbUcsRUFBTW1tRyxHQUNuRCxPQUFLL3FILE1BQU1GLFFBQVFpckgsR0FJRDVzSCxPQUFPZ0ksS0FBS3llLEdBQU1ELFFBQU8sU0FBVXFtRyxHQUNuRCxPQUE0QyxJQUFyQ0QsRUFBZ0JuN0csUUFBUW83RyxNQUdkdDJGLFFBQU8sU0FBVXUyRixFQUFVQyxHQUU1QyxPQURBRCxFQUFTQyxHQUFjdG1HLEVBQUtzbUcsR0FDckJELElBQ04sSUFWTXJtRyxFQTZDV3VtRyxDQUFnQnZtRyxFQUFNZ1QsRUFBUW16RixpQkFFaEQ1c0gsT0FBT3N6QixPQUFPN00sRUFBTXlsRyxHQUFXUyxHQUFhLFNBQVU5NEcsR0FDcEQsT0E3TnVCN1MsRUE2TlQ2UyxJQTVORDdTLEVBQU9tK0IsS0FBMkIsU0FBcEJuK0IsRUFBT20rQixJQUFJMUcsTUFRdkIsU0FBd0J6M0IsR0FDM0MsT0FBT0EsR0FBVUEsRUFBT20rQixLQUEyQixpQkFBcEJuK0IsRUFBT20rQixJQUFJMUcsS0FtTmxCdzBGLENBQWVwNUcsR0E3TjVCLElBQWdCN1MsS0E4TnRCLFNBQVVtZ0UsR0FDWCxPQTVEYyxTQUF1QitwRCxFQUFXL3BELEVBQU1rckQsR0FDMUQsSUFBSWEsRUFBZTNCLEVBQWdCTCxFQUFXL3BELEdBQzlDLE9BQUkrckQsSUFBaUJsQyxFQUNacUIsRUFBbUJhLEVBQWUvckQsRUFFcEMrckQsRUF1RElDLENBQWNqQyxFQUFXL3BELEVBQU0xbkMsRUFBUTR5RixvQkFDN0M1eUYsRUFBUTR5RixzQkFHTkUsRUFBYzVqQyxPQ3ZLaEIsU0FBUyxHQUFVeHNFLEdBQ3hCLE9BQU8sWUFBVSxZQUFjLElBQUtBLEtBdUIvQixTQUFTLEdBQW9CQSxFQUFNOGhCLEdBQ3hDLElBQUlFLEVBQWVGLEVBQUtFLGFBQ3BCa3VGLEVBQW1CcHVGLEVBQUtvdUYsaUJBQ3hCZSxFQUFjeEMsRUFBbUIsWUFBYyxJQUFLenVHLEtBU3hELE9BUElnaUIsSUFDRml2RixFQUFZemtDLE1BQVEsR0FBZ0J5a0MsRUFBYSxDQUMvQ2YsaUJBQWtCQSxFQUNsQk8sZ0JBQWlCLENBQUMsYUFJZixZQUFVUSxHQ3ZGWixTQUFTLEdBQVVqeEcsR0FDeEIsT0FBTyxZQUFVLFlBQWMsSUFBS0EsS0FrQi9CLFNBQVMsR0FBb0JBLEdBQ2xDLE9BQU8sWUFBVSxZQUFjLElBQUtBLEtDekIvQixTQUFTLEdBQWdCQSxHQUM5QixPQUFPLFlBQVUsWUFBYyxJQUFLQSxLQWtCL0IsU0FBUyxHQUEwQkEsR0FDeEMsT0FBTyxZQUFVLFlBQWMsSUFBS0EsS0NuQi9CLFNBQVNreEcsR0FBV2x4RyxHQUN6QixPQUFPLFlBQVUsWUFBYyxJQUFLQSxLQWtCL0IsU0FBUyxHQUFxQkEsR0FDbkMsT0FBTyxZQUFVLFlBQWMsSUFBS0EsS0NuQ3ZCLFFBQ2I0ZSxNQUFPLEVBQ1BrakQsTUFBTyxFQUNQcXZDLE1BQU8sRUFDUEMsWUFBYSxFQUNianFILE9BQVEsR0NWVixTQUFTd3hCLEdBQVE5ekIsRUFBUSt6QixHQUFrQixJQUFJL3NCLEVBQU9oSSxPQUFPZ0ksS0FBS2hILEdBQVMsR0FBSWhCLE9BQU9nMUIsc0JBQXVCLENBQUUsSUFBSUMsRUFBVWoxQixPQUFPZzFCLHNCQUFzQmgwQixHQUFhK3pCLElBQWdCRSxFQUFVQSxFQUFRek8sUUFBTyxTQUFVME8sR0FBTyxPQUFPbDFCLE9BQU9tMUIseUJBQXlCbjBCLEVBQVFrMEIsR0FBS2gxQixlQUFnQjhILEVBQUsvRSxLQUFLeEIsTUFBTXVHLEVBQU1pdEIsR0FBWSxPQUFPanRCLEVBRTlVLFNBQVN3bEgsR0FBY240RixHQUFVLElBQUssSUFBSS8xQixFQUFJLEVBQUdBLEVBQUlvQyxVQUFVWSxPQUFRaEQsSUFBSyxDQUFFLElBQUk4d0IsRUFBeUIsTUFBaEIxdUIsVUFBVXBDLEdBQWFvQyxVQUFVcEMsR0FBSyxHQUFRQSxFQUFJLEVBQUt3MUIsR0FBUTkwQixPQUFPb3dCLElBQVMsR0FBTTNULFNBQVEsU0FBVTViLEdBQU95MEIsR0FBZ0JELEVBQVF4MEIsRUFBS3V2QixFQUFPdnZCLE9BQXNCYixPQUFPdTFCLDBCQUE2QnYxQixPQUFPdzFCLGlCQUFpQkgsRUFBUXIxQixPQUFPdTFCLDBCQUEwQm5GLElBQW1CMEUsR0FBUTkwQixPQUFPb3dCLElBQVMzVCxTQUFRLFNBQVU1YixHQUFPYixPQUFPQyxlQUFlbzFCLEVBQVF4MEIsRUFBS2IsT0FBT20xQix5QkFBeUIvRSxFQUFRdnZCLE9BQWUsT0FBT3cwQixFQUU3Z0IsU0FBU0MsR0FBZ0JsekIsRUFBS3ZCLEVBQUtOLEdBQWlLLE9BQXBKTSxLQUFPdUIsRUFBT3BDLE9BQU9DLGVBQWVtQyxFQUFLdkIsRUFBSyxDQUFFTixNQUFPQSxFQUFPTCxZQUFZLEVBQU0wMkIsY0FBYyxFQUFNQyxVQUFVLElBQWtCejBCLEVBQUl2QixHQUFPTixFQUFnQjZCLEVBK0M1TCxTQUFTcXJILEdBQVVDLEVBQU14dkYsR0FDdEMsSUFBSXpFLEVBQVUvM0IsVUFBVVksT0FBUyxRQUFzQitDLElBQWpCM0QsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBRWxGLElBQUt3OEIsSUFBVUEsRUFBTXl2RixVQUFZenZGLEVBQU0wdkYsZ0JBQWtCMXZGLEVBQU0ydkYsY0FDN0QsTUFBTSxJQUFJL2xILE1BQU0sOEZBR2xCLEdBQUlvMkIsR0FBU0EsRUFBTTR2RixlQUFpQjV2RixFQUFNekYsS0FDeEN5RixFQUFNekYsS0FBTyxhQUNSLEdBQUl5RixHQUFTQSxFQUFNNHZGLGNBQWdCNXZGLEVBQU16RixNQUF1QixVQUFmeUYsRUFBTXpGLEtBQzVELE1BQU0sSUFBSTN3QixNQUFNLGdHQUdsQixJQUFJaW1ILEVBQWlCLENBQ25CNXZGLGNBQWMsRUFDZGt1RixrQkFBa0IsRUFDbEIyQixVQUFVLEdBR1JDLEVBQXdCVCxHQUFjQSxHQUFjLEdBQUlPLEdBQWlCdDBGLEdBQ3pFMEUsRUFBZTh2RixFQUFzQjl2RixhQUNyQ2t1RixFQUFtQjRCLEVBQXNCNUIsaUJBQ3pDMkIsRUFBV0MsRUFBc0JELFNBRWpDRSxFQUFjLENBQ2hCRixTQUFVQSxHQUVaLE9BQU9HLEdBQVlULEVBQU0sR0FBSXh2RixFQUFPZ3dGLEdBQWEzeEYsTUFBSyxTQUFVUSxHQUUxRG9CLElBQ0ZwQixFQUFTNHJELE1BQVEsR0FBZ0I1ckQsRUFBVSxDQUN6Q3N2RixpQkFBa0JBLEVBQ2xCTyxnQkFBaUIsQ0FBQyxhQUt0QixJQUFJd0IsRUFBc0JDLEdBQWlCdHhGLEVBQVM0ckQsT0FVcEQsT0FSSTVyRCxFQUFTNndGLGdCQUNYUSxFQUFvQlIsY0FBZ0I3d0YsRUFBUzZ3RixlQUczQzd3RixFQUFTOHdGLGdCQUNYTyxFQUFvQlAsY0FBZ0I5d0YsRUFBUzh3RixlQUd4QyxZQUFVakQsRUFBbUIsWUFBY3dELFFBQ2pELFNBQVVwMEYsR0FDWCxNQUFNQSxLQVNWLFNBQVNxMEYsR0FBaUIxbEMsR0FDeEIsSUFBSTJsQyxFQUFVLFNBQWlCNzFGLEdBQzdCLE9BQU8sU0FBVTgxRixFQUFhOW5HLEdBSzVCLE9BSklBLEVBQUswWSxJQUFJMUcsT0FBU0EsR0FDcEI4MUYsRUFBWXRySCxLQUFLLFlBQWN3akIsSUFHMUI4bkcsSUFJWCxNQUFPLENBQ0xwcUUsUUFBU3drQyxFQUFNcHlELE9BQU8rM0YsRUFBUSxTQUFVLElBQ3hDRSxPQUFRN2xDLEVBQU1weUQsT0FBTyszRixFQUFRLFNBQVUsSUFDdkNHLGVBQWdCOWxDLEVBQU1weUQsT0FBTyszRixFQUFRLGdCQUFpQixJQUN0REksY0FBZS9sQyxFQUFNcHlELE9BQU8rM0YsRUFBUSxnQkFBaUIsS0FvQnpELFNBQVNILEdBQVlULEVBQU0va0MsRUFBT3pxRCxFQUFPRCxHQUN2QyxJQUFJK3ZGLEVBQVcvdkYsRUFBSyt2RixTQW1CcEIsT0FqQkk5dkYsRUFBTTB2RixnQkFDUjF2RixFQUFNeXdGLFdBQWF6d0YsRUFBTTB2RixxQkFDbEIxdkYsRUFBTTB2RixlQUdYMXZGLEVBQU0ydkYsZ0JBQ1IzdkYsRUFBTXl3RixXQUFhendGLEVBQU0ydkYscUJBQ2xCM3ZGLEVBQU0ydkYsZUFHWDN2RixFQUFNeXdGLG9CQUNEendGLEVBQU15dkYsZUFDTnp2RixFQUFNekYsWUFDTnlGLEVBQU00dkYsb0JBQ041dkYsRUFBTWpLLE9BR1J5NUYsRUFBS3Z0SCxJQUFJLE9BQVEsWUFBb0IsQ0FDMUMrOUIsTUFBT0EsS0FDTDNCLE1BQUssU0FBVVEsR0FDakIsSUFBSTVnQixFQUFPNGdCLEVBQVM1Z0IsTUFBUSxHQUc1QixPQUZBd3NFLEVBQVFBLEVBQU16eEUsT0FBT2lGLEVBQUt3c0UsT0FBUyxJQUUvQnhzRSxFQUFLeXlHLFlBQ0haLFVBQ0s5dkYsRUFBTXl2RixRQUNienZGLEVBQU15d0YsV0FBYXJ5RixHQUFTbmdCLEVBQUt5eUcsYUFDMUJULEdBQVlULEVBQU0va0MsRUFBT3pxRCxFQUFPLENBQ3JDOHZGLFNBQVVBLEtBSVAsQ0FDTHJsQyxNQUFPQSxFQUNQa2xDLGNBQWV2eEYsR0FBU25nQixFQUFLeXlHLGNBRXRCenlHLEVBQUsweUcsWUFDUCxDQUNMbG1DLE1BQU9BLEVBQ1BpbEMsY0FBZXR4RixHQUFTbmdCLEVBQUsweUcsY0FHeEIsQ0FDTGxtQyxNQUFPLE9BV2YsU0FBU3JzRCxHQUFTbzJCLEdBQ2hCLElBQUlvOEQsRUFBV3A4RCxFQUFJdCtDLE1BQU0sS0FDekIsT0FBTzA2RyxFQUFTeHNILE9BQVMsRUFBSXdzSCxFQUFTLEdBQUcxa0gsUUFBUSxjQUFlLElBQU0sR0MzTXhFLFNBQVMsR0FBbUJ2SCxHQUFPLE9BUW5DLFNBQTRCQSxHQUFPLEdBQUloQixNQUFNRixRQUFRa0IsR0FBTSxPQUFPazFCLEdBQWtCbDFCLEdBUjFDNGtFLENBQW1CNWtFLElBTTdELFNBQTBCNmtFLEdBQVEsR0FBc0Isb0JBQVhybkUsUUFBMEJBLE9BQU9xMUIsWUFBWTExQixPQUFPMG5FLEdBQU8sT0FBTzdsRSxNQUFNcUUsS0FBS3doRSxHQU5yREMsQ0FBaUI5a0UsSUFJdEYsU0FBcUM5QyxFQUFHKzNCLEdBQVUsSUFBSy8zQixFQUFHLE9BQVEsR0FBaUIsaUJBQU5BLEVBQWdCLE9BQU9nNEIsR0FBa0JoNEIsRUFBRyszQixHQUFTLElBQUkvMkIsRUFBSWYsT0FBT2tCLFVBQVVZLFNBQVNyQyxLQUFLTSxHQUFHNkgsTUFBTSxHQUFJLEdBQWMsV0FBTjdHLEdBQWtCaEIsRUFBRTQxQixjQUFhNTBCLEVBQUloQixFQUFFNDFCLFlBQVk5MUIsTUFBTSxHQUFVLFFBQU5rQixHQUFxQixRQUFOQSxFQUFhLE9BQU9jLE1BQU1xRSxLQUFLbkcsR0FBSSxHQUFVLGNBQU5nQixHQUFxQiwyQ0FBMkM2SixLQUFLN0osR0FBSSxPQUFPZzNCLEdBQWtCaDRCLEVBQUcrM0IsR0FKeFRGLENBQTRCLzBCLElBRTFILFdBQWdDLE1BQU0sSUFBSW0wQixVQUFVLHdJQUY4RTR3QyxHQVVsSSxTQUFTN3ZDLEdBQWtCbDFCLEVBQUtnRCxJQUFrQixNQUFQQSxHQUFlQSxFQUFNaEQsRUFBSVAsVUFBUXVELEVBQU1oRCxFQUFJUCxRQUFRLElBQUssSUFBSWhELEVBQUksRUFBR29jLEVBQU8sSUFBSTdaLE1BQU1nRSxHQUFNdkcsRUFBSXVHLEVBQUt2RyxJQUFPb2MsRUFBS3BjLEdBQUt1RCxFQUFJdkQsR0FBTSxPQUFPb2MsRUFPakssU0FBU3F6RyxHQUFnQjd3RixHQUN0QyxHQUFLQSxFQUFNZ3RFLE9BQVgsQ0FNQSxJQUFJOGpCLEVBQWE5d0YsRUFBTWd0RSxPQUFPOTJGLE1BQU0sS0FFaEM2NkcsRUFBYyxJQUFJMzJFLElBQUkwMkUsR0FHdEJDLEVBQVkvM0UsSUFBSSxTQUtwQiszRSxFQUFZeHNHLElBQUksVUFDaEJ3c0csRUFBWXhzRyxJQUFJLFlBRWhCeWIsRUFBTWd0RSxPQUFTLEdBQW1CK2pCLEdBQWFwbkgsS0FBSyxPQ3JDdEQsU0FBUyxHQUFRN0csRUFBUSt6QixHQUFrQixJQUFJL3NCLEVBQU9oSSxPQUFPZ0ksS0FBS2hILEdBQVMsR0FBSWhCLE9BQU9nMUIsc0JBQXVCLENBQUUsSUFBSUMsRUFBVWoxQixPQUFPZzFCLHNCQUFzQmgwQixHQUFhK3pCLElBQWdCRSxFQUFVQSxFQUFRek8sUUFBTyxTQUFVME8sR0FBTyxPQUFPbDFCLE9BQU9tMUIseUJBQXlCbjBCLEVBQVFrMEIsR0FBS2gxQixlQUFnQjhILEVBQUsvRSxLQUFLeEIsTUFBTXVHLEVBQU1pdEIsR0FBWSxPQUFPanRCLEVBRTlVLFNBQVMsR0FBY3F0QixHQUFVLElBQUssSUFBSS8xQixFQUFJLEVBQUdBLEVBQUlvQyxVQUFVWSxPQUFRaEQsSUFBSyxDQUFFLElBQUk4d0IsRUFBeUIsTUFBaEIxdUIsVUFBVXBDLEdBQWFvQyxVQUFVcEMsR0FBSyxHQUFRQSxFQUFJLEVBQUssR0FBUVUsT0FBT293QixJQUFTLEdBQU0zVCxTQUFRLFNBQVU1YixHQUFPLEdBQWdCdzBCLEVBQVF4MEIsRUFBS3V2QixFQUFPdnZCLE9BQXNCYixPQUFPdTFCLDBCQUE2QnYxQixPQUFPdzFCLGlCQUFpQkgsRUFBUXIxQixPQUFPdTFCLDBCQUEwQm5GLElBQW1CLEdBQVFwd0IsT0FBT293QixJQUFTM1QsU0FBUSxTQUFVNWIsR0FBT2IsT0FBT0MsZUFBZW8xQixFQUFReDBCLEVBQUtiLE9BQU9tMUIseUJBQXlCL0UsRUFBUXZ2QixPQUFlLE9BQU93MEIsRUFFN2dCLFNBQVMsR0FBZ0JqekIsRUFBS3ZCLEVBQUtOLEdBQWlLLE9BQXBKTSxLQUFPdUIsRUFBT3BDLE9BQU9DLGVBQWVtQyxFQUFLdkIsRUFBSyxDQUFFTixNQUFPQSxFQUFPTCxZQUFZLEVBQU0wMkIsY0FBYyxFQUFNQyxVQUFVLElBQWtCejBCLEVBQUl2QixHQUFPTixFQUFnQjZCLEVBK0Q1TCxTQUFTOHNILEdBQW9CanhGLEdBQzFDLElBQUl5dkYsRUFBT3p2RixFQUFLeXZGLEtBQ1p5QixFQUFtQmx4RixFQUFLa3hGLGlCQUN4QkMsRUFBWTNxQyxHQUFTMXBELE1BQU1xMEYsVUFDM0JDLEVBQXdCNXFDLEdBQVM4b0MsWUFDakMrQixFQUFrQkQsRUFBc0JDLGdCQUN4Q0MsRUFBNEJGLEVBQXNCRSwwQkFDbERDLEVBQWtCL3FDLEdBQVN4RyxNQUMzQnd4QyxFQUFZRCxFQUFnQkMsVUFDNUJDLEVBQXNCRixFQUFnQkUsb0JBQ3RDQyxFQUFrQmxyQyxHQUFTNm9DLE1BQzNCc0MsRUFBWUQsRUFBZ0JDLFVBQzVCQyxFQUFzQkYsRUFBZ0JFLG9CQUN0Q0MsRUFBdUJyckMsR0FBU25oRixPQUFPd3NILHFCQUV2Q0MsRUFBZ0IsU0FBdUIzcUYsR0FDekMsSUFBSXBMLEVBQVEsSUFBSWx5QixNQUFNLG9DQVd0QixPQVZBa3lCLEVBQU1tRixJQUFNLENBQ1YxRyxLQUFNLFFBQ04yTSxHQUFJLFlBRU5wTCxFQUFNZzJGLFFBQVUsQ0FDZHYzRixLQUFNLFFBQ04yTSxHQUFJQSxFQUNKc25GLFlBQWF5QyxJQUFtQnpDLFlBQ2hDM3hGLE1BQU9vMEYsSUFBbUJwMEYsT0FFckJmLEdBR1QsU0FBU2kyRixFQUFhajJGLEdBQ3BCLEdBQUlBLEVBQU03ZCxLQUNSLE1BQU02ZCxFQUFNN2QsS0FHZCxHQUFJNmQsRUFBTStDLFVBQVkvQyxFQUFNK0MsU0FBUzVnQixLQUNuQyxNQUFNNmQsRUFBTStDLFNBQVM1Z0IsS0FHdkIsTUFBTTZkLEVBbVZSLFNBQVNrMkYsRUFBb0J4QyxHQUMzQkEsRUFBSzN0RyxTQUFTd2IsUUFBVTR6RixJQUFtQmdCLG1CQVc3QyxNQUFPLENBQ0xDLFNBNVVGLFdBRUUsT0FxVUYsU0FBdUIxQyxHQUNyQkEsRUFBSzN0RyxTQUFTd2IsUUFBVTR6RixJQUFtQmtCLGFBdlUzQ0MsQ0FBYzVDLEdBQ1BBLEVBQUt2dEgsSUFBSSxJQUFJbzhCLE1BQUssU0FBVVEsR0FDakMsT0FBT3F5RixFQUFVcnlGLEVBQVM1Z0IsUUFDekI4ekcsSUF5VUhNLGVBcFRGLFNBQXdCbnJGLEdBRXRCLE9BREE4cUYsRUFBb0J4QyxHQUNiQSxFQUFLdnRILElBQUksaUJBQW1CaWxDLEdBQUk3SSxNQUFLLFNBQVVRLEdBQ3BELE9BQU91eUYsRUFBZ0J2eUYsRUFBUzVnQixRQUMvQjh6RyxJQWlUSE8sZ0JBNVJGLFdBQ0UsSUFBSXR5RixFQUFReDhCLFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUVoRixPQURBd3VILEVBQW9CeEMsR0FDYkEsRUFBS3Z0SCxJQUFJLGdCQUFpQixZQUFvQixDQUNuRCs5QixNQUFPQSxLQUNMM0IsTUFBSyxTQUFVUSxHQUNqQixPQUFPd3lGLEVBQTBCeHlGLEVBQVM1Z0IsUUFDekM4ekcsSUFzUkhRLFNBaFFGLFNBQWtCcnJGLEdBQ2hCLElBQUlsSCxFQUFReDhCLFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUVoRixPQUFLMGpDLEVBSUV4L0IsS0FBSzhxSCxXQUFXLEdBQWMsQ0FDbkMsU0FBVXRyRixHQUNUbEgsSUFBUTNCLE1BQUssU0FBVVEsR0FDeEIsR0FBSUEsRUFBUzRyRCxNQUFNcm1GLE9BQVMsRUFDMUIsT0FBT210SCxFQUFVMXlGLEVBQVM0ckQsTUFBTSxJQUdsQyxNQUFNb25DLEVBQWMzcUYsS0FDbkI2cUYsR0FYTWozRixRQUFRNkQsT0FBT2t6RixFQUFjM3FGLEtBNlB0Q3NyRixXQTdORixXQUNFLElBQUl4eUYsRUFBUXg4QixVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssR0FDaEZ3dUgsRUFBb0J4QyxHQUVwQixJQUFJaUQsRUFBb0J4QixFQUFpQmp4RixHQUNyQ0MsRUFBZXd5RixFQUFrQnh5RixhQUNqQ2t1RixFQUFtQnNFLEVBQWtCdEUsaUJBR3pDLE9BREEwQyxHQUFnQjd3RixHQUNUd3ZGLEVBQUt2dEgsSUFBSSxVQUFXLFlBQW9CLENBQzdDKzlCLE1BQU9BLEtBQ0wzQixNQUFLLFNBQVVRLEdBQ2pCLE9BQU8yeUYsRUFBb0IzeUYsRUFBUzVnQixLQUFNLENBQ3hDZ2lCLGFBQWNBLEVBQ2RrdUYsaUJBQWtCQSxNQUVuQjRELElBOE1IVyxTQXhMRixTQUFrQnhyRixHQUNoQixJQUFJbEgsRUFBUXg4QixVQUFVWSxPQUFTLFFBQXNCK0MsSUFBakIzRCxVQUFVLEdBQW1CQSxVQUFVLEdBQUssR0FHaEYsT0FGQXd1SCxFQUFvQnhDLEdBQ3BCcUIsR0FBZ0I3d0YsR0FDVHd2RixFQUFLdnRILElBQUksVUFBWWlsQyxFQUFJLFlBQW9CLENBQ2xEbEgsTUFBT0EsS0FDTDNCLE1BQUssU0FBVVEsR0FDakIsT0FBTzZ5RixFQUFVN3lGLEVBQVM1Z0IsUUFDekI4ekcsSUFpTEhZLFVBNUpGLFdBQ0UsSUFBSTN5RixFQUFReDhCLFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUdoRixPQUZBd3VILEVBQW9CeEMsR0FDcEJxQixHQUFnQjd3RixHQUNUd3ZGLEVBQUt2dEgsSUFBSSxTQUFVLFlBQW9CLENBQzVDKzlCLE1BQU9BLEtBQ0wzQixNQUFLLFNBQVVRLEdBQ2pCLE9BQU84eUYsRUFBb0I5eUYsRUFBUzVnQixRQUNuQzh6RyxJQXFKSGEsV0FoSUYsV0FDRSxJQUFJNXlGLEVBQVF4OEIsVUFBVVksT0FBUyxRQUFzQitDLElBQWpCM0QsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBRWhGLE9BREF3dUgsRUFBb0J4QyxHQUNiQSxFQUFLdnRILElBQUksVUFBVyxZQUFvQixDQUM3Qys5QixNQUFPQSxLQUNMM0IsTUFBSyxTQUFVUSxHQUNqQixPQUFPK3lGLEVBQXFCL3lGLEVBQVM1Z0IsUUFDcEM4ekcsSUEwSEhjLGFBcENGLFNBQXNCNTBHLEdBQ3BCLElBQUk2MEcsRUFBcUI3QixFQUFpQixJQUN0Q2h4RixFQUFlNnlGLEVBQW1CN3lGLGFBQ2xDa3VGLEVBQW1CMkUsRUFBbUIzRSxpQkFFMUMsT0FBT3FELEVBQW9CdnpHLEVBQU0sQ0FDL0JnaUIsYUFBY0EsRUFDZGt1RixpQkFBa0JBLEtBOEJwQjRFLEtBckZGLFdBQ0UsSUFBSS95RixFQUFReDhCLFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUM1RSszQixFQUFVLzNCLFVBQVVZLE9BQVMsUUFBc0IrQyxJQUFqQjNELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxDQUNoRnNzSCxVQUFVLEdBR1JrRCxFQUFxQi9CLEVBQWlCanhGLEdBQ3RDQyxFQUFlK3lGLEVBQW1CL3lGLGFBQ2xDa3VGLEVBQW1CNkUsRUFBbUI3RSxpQkFHMUMsT0FEQTZELEVBQW9CeEMsR0FDYkQsR0FBVUMsRUFBTXh2RixFQUFPLEdBQWMsQ0FDMUNDLGFBQWNBLEVBQ2RrdUYsaUJBQWtCQSxHQUNqQjV5RixNQzVZUCxTQUFTLEdBQVF6NEIsRUFBUSt6QixHQUFrQixJQUFJL3NCLEVBQU9oSSxPQUFPZ0ksS0FBS2hILEdBQVMsR0FBSWhCLE9BQU9nMUIsc0JBQXVCLENBQUUsSUFBSUMsRUFBVWoxQixPQUFPZzFCLHNCQUFzQmgwQixHQUFhK3pCLElBQWdCRSxFQUFVQSxFQUFRek8sUUFBTyxTQUFVME8sR0FBTyxPQUFPbDFCLE9BQU9tMUIseUJBQXlCbjBCLEVBQVFrMEIsR0FBS2gxQixlQUFnQjhILEVBQUsvRSxLQUFLeEIsTUFBTXVHLEVBQU1pdEIsR0FBWSxPQUFPanRCLEVBRTlVLFNBQVMsR0FBY3F0QixHQUFVLElBQUssSUFBSS8xQixFQUFJLEVBQUdBLEVBQUlvQyxVQUFVWSxPQUFRaEQsSUFBSyxDQUFFLElBQUk4d0IsRUFBeUIsTUFBaEIxdUIsVUFBVXBDLEdBQWFvQyxVQUFVcEMsR0FBSyxHQUFRQSxFQUFJLEVBQUssR0FBUVUsT0FBT293QixJQUFTLEdBQU0zVCxTQUFRLFNBQVU1YixHQUFPLEdBQWdCdzBCLEVBQVF4MEIsRUFBS3V2QixFQUFPdnZCLE9BQXNCYixPQUFPdTFCLDBCQUE2QnYxQixPQUFPdzFCLGlCQUFpQkgsRUFBUXIxQixPQUFPdTFCLDBCQUEwQm5GLElBQW1CLEdBQVFwd0IsT0FBT293QixJQUFTM1QsU0FBUSxTQUFVNWIsR0FBT2IsT0FBT0MsZUFBZW8xQixFQUFReDBCLEVBQUtiLE9BQU9tMUIseUJBQXlCL0UsRUFBUXZ2QixPQUFlLE9BQU93MEIsRUFFN2dCLFNBQVMsR0FBZ0JqekIsRUFBS3ZCLEVBQUtOLEdBQWlLLE9BQXBKTSxLQUFPdUIsRUFBT3BDLE9BQU9DLGVBQWVtQyxFQUFLdkIsRUFBSyxDQUFFTixNQUFPQSxFQUFPTCxZQUFZLEVBQU0wMkIsY0FBYyxFQUFNQyxVQUFVLElBQWtCejBCLEVBQUl2QixHQUFPTixFQUFnQjZCLEVDSDNNLElBT2UrdUgsR0QwQ1IsU0FBc0IveUYsR0FDM0IsSUFBS0EsRUFBT3hELFlBQ1YsTUFBTSxJQUFJNUQsVUFBVSxrQ0FHdEIsSUFBS29ILEVBQU9yRCxNQUNWLE1BQU0sSUFBSS9ELFVBQVUsNEJBR3RCLElBT0lqd0IsRUFBUyxHQUFjLEdBQWMsR0FQckIsQ0FDbEJvM0IsY0FBYyxFQUNka3VGLGtCQUFrQixFQUNsQnB4RixnQkFBaUIscUJBQ2pCeXhGLFlBQWEsV0FHOEN0dUYsR0FFekRnekYsRUFBa0IsWUFBbUIsaUJBQWlCbDZHLE9BQU8sd0NBQXlDblEsRUFBTzY0QixZQUFhNzRCLEVBQU84NEIsYUFDckk5NEIsRUFBT216QixRQUFVLEdBQWMsR0FBYyxHQUFJbnpCLEVBQU9tekIsU0FBVSxHQUFJLENBQ3BFLGVBQWdCLDhDQUNoQiwwQkFBMkJrM0YsSUFFN0IsSUVsRTBDQyxFRmtFdEMzRCxFQUFPLFlBQWlCLEVBQUF6ckgsRUFBTzhFLEdBQy9Cb29ILEdFbkVzQ2tDLEVGbUVDLENBQ3pDbHpGLGFBQWNwM0IsRUFBT28zQixhQUNyQnV1RixZQUFhM2xILEVBQU8ybEgsWUFDcEJMLGlCQUFrQnRsSCxFQUFPc2xILGlCQUN6QmdFLGFBQWMzQyxFQUFLM3RHLFNBQVN3YixRQUM1QjQwRixtQkFBb0IsR0FBR2o1RyxPQUFPdzJHLEVBQUszdEcsU0FBU3diLFFBQVMsaUJBQWlCcmtCLE9BQU9uUSxFQUFPMmxILGNFbkUvRSxTQUEwQnh1RixHQUMvQixPQUFPbCtCLE9BQU9zekIsT0FBTyxHQUFJKzlGLEVBQWdCbnpGLEtGd0UzQyxPQUhBd3ZGLEVBQUszdEcsU0FBU3diLFFBQVU0ekYsSUFBbUJnQixtQkFTN0MsU0FBb0N6QyxHQUNsQ0EsRUFBS3Z4RixhQUFhWSxTQUFTVixLQUFJLFNBQVVVLEdBQ3ZDLE9BQU9BLEtBQ04sU0FBVS9DLEdBQ1gsR0FBSUEsRUFBTStDLFVBQVkvQyxFQUFNK0MsU0FBU2gyQixPQUFPbXpCLFFBQVFzQixjQUFlLENBQ2pFLElBQUk5eEIsRUFBUXN3QixFQUFNK0MsU0FBU2gyQixPQUFPbXpCLFFBQVFzQixjQUMxQ3hCLEVBQU0rQyxTQUFTaDJCLE9BQU9tekIsUUFBUXNCLGNBQWdCeEIsRUFBTStDLFNBQVNoMkIsT0FBT216QixRQUFRc0IsY0FBY3B4QixRQUFRVixFQUFPLFlBQVl3TixPQUFPeE4sRUFBTU4sUUFBUSxLQUV0STR3QixFQUFNK0MsU0FBU1gsUUFBUWsxRixVQUFZdDNGLEVBQU0rQyxTQUFTWCxRQUFRazFGLFNBQVNDLGdCQUNyRXYzRixFQUFNK0MsU0FBU1gsUUFBUWsxRixTQUFTQyxjQUFnQnYzRixFQUFNK0MsU0FBU1gsUUFBUWsxRixTQUFTQyxjQUFjbm5ILFFBQVFWLEVBQU8sWUFBWXdOLE9BQU94TixFQUFNTixRQUFRLE1BRzVJNHdCLEVBQU0rQyxTQUFTWCxRQUFRbzFGLFVBQ3pCeDNGLEVBQU0rQyxTQUFTWCxRQUFRbzFGLFFBQVV4M0YsRUFBTStDLFNBQVNYLFFBQVFvMUYsUUFBUXBuSCxRQUFRVixFQUFPLFlBQVl3TixPQUFPeE4sRUFBTU4sUUFBUSxNQUlwSCxPQUFPNHZCLFFBQVE2RCxPQUFPN0MsTUF4QnhCeTNGLENBQTJCL0QsR0FDcEJ3QixHQUFvQixDQUN6QnhCLEtBQU1BLEVBQ055QixpQkFBa0JBLElDdEZQdUMsQ0FBYSxDQUUxQjMyRixNQUFPOUMsZUFFUDJDLFlBQWEzQyxnRCx1Q0VIVDA1RixHQUFjbmhDLElBQU1saUIsY0FBYyxDQUFDLEdBQUksZUFFdkNzakQsR0FBZSxTQUFDMXdGLEdBQ3BCLElBQUEyd0YsRUFBMEIvaEQsbUJBQVMsQ0FDakNtTyxNQUFPLEtBQ1A2ekMsVUFBVyxHQUNYQyxLQUFNLEVBQ050SCxXQUFZLElBQ1p1SCxFQUFBNzZGLEtBQUEwNkYsRUFBQSxHQUxLdjdFLEVBQUswN0UsRUFBQSxHQUFFdGxELEVBQVFzbEQsRUFBQSxHQU10QixPQUNFeGhDLElBQUF6cEQsY0FBQzRxRixHQUFZbGdGLFNBQVEsQ0FBQ2x4QyxNQUFPLENBQUMrMUMsRUFBT28yQixJQUNsQ3hyQyxFQUFNcVEsVyxxa0JDUGIsSUF5QmUwZ0YsR0F6QkMsV0FDZCxJQUFBQyxFQUEwQjVpRCxxQkFBV3FpRCxJQUFZUSxFQUFBaDdGLEtBQUErNkYsRUFBQSxHQUExQzU3RSxFQUFLNjdFLEVBQUEsR0FBRXpsRCxFQUFReWxELEVBQUEsR0FhdEIsTUFBTyxDQUNMQyxRQVpGLFNBQWlCTCxHQUNmLEdBQUlBLEVBQU8sRUFDVCxLQUFNLHNCQUVScmxELEdBQVMsU0FBQXAyQixHQUFLLE9BQUFrM0UsTUFBQSxHQUFTbDNFLEdBQUssSUFBRXk3RSxhQVM5QnRILFdBQVluMEUsRUFBTW0wRSxXQUNsQnhzQyxNQUFPM25DLEVBQU0ybkMsTUFDYm8wQyxTQVJGLFNBQWtCcDBDLEdBQ2hCdlIsR0FBUyxTQUFBcDJCLEdBQUssT0FBQWszRSxNQUFBLEdBQVVsM0UsR0FBSyxJQUFFMm5DLGNBUS9CNnpDLFVBQVd4N0UsRUFBTXc3RSxVQUNqQng3RSxRQUNBbzJCLGEscWtCQ2xCVyxTQUFTNGxELEdBQUlyMEYsR0FBbUIsSUFBaEJzMEYsRUFBWXQwRixFQUFaczBGLGFBRXZCQyxFQUFZbjlFLElBQU9nMUUsSUFBRzUwRSxXQUFBLENBQUExVCxZQUFBLGtCQUFBcUIsWUFBQSxlQUFWaVMsQ0FBVSwyT0FZRWkxRSxFQVFYQSxHQVVuQm1JLEVBQTRDUixLQUFwQ3ZsRCxFQUFRK2xELEVBQVIvbEQsU0FBVW9sRCxFQUFTVyxFQUFUWCxVQUFXckgsRUFBVWdJLEVBQVZoSSxXQUd2QnJwSCxFQUFJbXhILEVBQWFweUgsSUFBSSxNQUFRLEVBQzdCdXFILEVBQU02SCxFQUFhcHlILElBQUksUUFBVSxHQXFCdkMsT0FuQkFxdkUscUJBQVUsWUFDTyxlQUFBa2pELEVBQUFDLElBQUFqaEQsSUFBQVUsTUFBRyxTQUFBd2dELElBQUEsSUFBQS9rRSxFQUFBOXFELEVBQUEsT0FBQTJ1RSxJQUFBUSxNQUFBLFNBQUF2RCxHQUFBLGNBQUFBLEVBQUFobkMsS0FBQWduQyxFQUFBL3hELE1BQUEsT0FLZixPQUpLaXhDLEVBQUksQ0FDUmlnRSxhQUFjLE9BQ2QrRSxNQUFPenhILEVBQUksR0FBS3NwSCxFQUNoQnoyRixNQUFPeTJGLEdBQ1IvN0MsRUFBQS94RCxLQUFBLEVBQ2lCdTBHLEdBQU9ULFdBQVc3aUUsR0FBRSxPQUFoQzlxRCxFQUFHNHJFLEVBQUFzRCxLQUNUNXFFLFFBQVE0eUIsSUFBSSxjQUFlbDNCLEdBRTNCMnBFLEdBQVMsU0FBQXAyQixHQUFLLE9BQUFrM0UsTUFBQSxHQUNUbDNFLEdBQUssSUFDUnc3RSxVQUFXL3VILEVBQUk0bEYsTUFDZjhoQyxXQUFZMWhILEtBQUt5SCxLQUFLek4sRUFBSSt2QixNQUFNNDNGLFFBQy9CLHdCQUFBLzdDLEVBQUFnRCxVQUFBaWhELE9BQ0osa0JBZGMsT0FBQUYsRUFBQWp4SCxNQUFBLEtBQUFDLGFBQUEsRUFlZm94SCxLQUNDLElBR0R0aUMsSUFBQXpwRCxjQUFDeXJGLEVBQVMsS0FFTFYsRUFBVXh2SCxPQUVQa3VGLElBQUF6cEQsY0FBQSxPQUFLM0IsR0FBRyxtQkFDTm9yRCxJQUFBenBELGNBQUEsVUFDRytxRixFQUFVbHZILEtBQUksU0FBQTZqQixHQUFJLE9BQ2pCK3BFLElBQUF6cEQsY0FBQSxNQUFJbG1DLElBQUs0bEIsRUFBS3NzRyxPQUFPQyxNQUNuQnhpQyxJQUFBenBELGNBQUEsV0FDRXlwRCxJQUFBenBELGNBQUEsS0FBR211QyxLQUFNLFNBQVN6dUQsRUFBSzBZLElBQUlpRyxJQUN6Qm9yRCxJQUFBenBELGNBQUEsVUFBS3RnQixFQUFLc3NHLE9BQU9qNUYsT0FDakIwMkQsSUFBQXpwRCxjQUFBLE9BQUt3akYsTUFBTSxRQUFRcHhELEtBQU8xeUMsRUFBSzBZLElBQUk4ekYsV0FBVzV2SCxPQUFPLHlCQUVuRG9qQixFQUFLc3NHLE9BQU9HLE1BQ1IxaUMsSUFBQXpwRCxjQUFBLE9BQ0UyaEMsSUFBS2ppRCxFQUFLc3NHLE9BQU9HLE1BQU1ILE9BQU8xMEMsS0FBSzNyQixJQUNuQ3EzQyxNQUFNLFVBQ1IsVUFPaEJ2WixJQUFBenBELGNBQUNvc0YsRUFBUyxDQUFDMUksV0FBWUEsRUFBWXJwSCxFQUFHQSxFQUFHc3BILElBQUtBLEtBckJoRGw2QixJQUFBenBELGNBQUEsVUFBSSxlLHlCQzdERCxTQUFTcXNGLEdBQUtseUYsR0FFM0IsSUFBTW15RixFQUFXaCtFLElBQU9nMUUsSUFBRzUwRSxXQUFBLENBQUExVCxZQUFBLGlCQUFBcUIsWUFBQSxlQUFWaVMsQ0FBVSxzZkFZWmkxRSxFQWtCQUEsRUFLS0EsRUFDS0EsRUFTVkEsRUFDS0EsR0FLcEJtSSxFQUE0QlIsS0FBcEJoMEMsRUFBS3cwQyxFQUFMeDBDLE1BQU9vMEMsRUFBUUksRUFBUkosU0FXZixPQVRBN2lELHFCQUFVLFlBQ08sZUFBQXZ4QyxFQUFBMDBGLElBQUFqaEQsSUFBQVUsTUFBRyxTQUFBd2dELElBQUEsSUFBQTd2SCxFQUFBLE9BQUEydUUsSUFBQVEsTUFBQSxTQUFBdkQsR0FBQSxjQUFBQSxFQUFBaG5DLEtBQUFnbkMsRUFBQS94RCxNQUFBLGNBQUEreEQsRUFBQS94RCxLQUFBLEVBQ0V1MEcsR0FBT1YsU0FBU3Z2RixFQUFNa0UsSUFBRyxPQUFyQ3JpQyxFQUFHNHJFLEVBQUFzRCxLQUNUNXFFLFFBQVE0eUIsSUFBSSxNQUFPbDNCLEdBQ25Cc3ZILEVBQVN0dkgsR0FBSSx3QkFBQTRyRSxFQUFBZ0QsVUFBQWloRCxPQUNkLGtCQUpjLE9BQUEzMEYsRUFBQXg4QixNQUFBLEtBQUFDLGFBQUEsRUFLZm94SCxLQUNDLElBR0R0aUMsSUFBQXpwRCxjQUFDc3NGLEVBQVEsS0FDVDdpQyxJQUFBenBELGNBQUEsT0FBSzNCLEdBQUcsa0JBRUg2NEMsRUFFR3VTLElBQUF6cEQsY0FBQSxXQUNFeXBELElBQUF6cEQsY0FBQSxVQUFLazNDLEVBQU04MEMsT0FBT2o1RixPQUNsQjAyRCxJQUFBenBELGNBQUEsT0FBSzNCLEdBQUcsUUFBUSt6QixLQUFPOGtCLEVBQU05K0MsSUFBSTh6RixXQUFXNXZILE9BQU8seUJBQ25EbXRGLElBQUF6cEQsY0FBQSxPQUFLM0IsR0FBRyxhQUFZb3JELElBQUF6cEQsY0FBQzBoQyxLQUFhLENBQ2hDbUIsWUFBWSxFQUNacjRCLFNBQVUwc0MsRUFBTTgwQyxPQUFPM3ZCLFFBR3pCNVMsSUFBQXpwRCxjQUFBLFdBQ0V5cEQsSUFBQXpwRCxjQUFBLE9BQUszQixHQUFHLGFBQWM2NEMsRUFBTXExQyxTQUFTdm9GLEtBQU8sUUFBVSxJQUVwRGt6QyxFQUFNcTFDLFNBQVN2b0YsTUFBUWt6QyxFQUFNcTFDLFNBQVN2b0YsS0FBS25vQyxLQUFJLFNBQUE4aUMsR0FDN0MsT0FBTzhxRCxJQUFBenBELGNBQUEsS0FBR211QyxLQUFJLFNBQUFoK0QsT0FBV3d1QixFQUFJdkcsSUFBSWlHLElBQU1tbEYsTUFBTSxNQUFNMXBILElBQUs2a0MsRUFBSXZHLElBQUlpRyxJQUFLTSxFQUFJdkcsSUFBSWlHLFNBYnJGb3JELElBQUF6cEQsY0FBQSxPQUFLd2pGLE1BQU0sV0FBVS81QixJQUFBenBELGNBQUEsVUFBSSxpQixxa0JDdEV0QixTQUFTd3NGLEdBQUd0MUYsR0FBdUIsSUFBcEJtSCxFQUFFbkgsRUFBRm1ILEdBQUltdEYsRUFBWXQwRixFQUFaczBGLGFBRTFCQyxFQUFZbjlFLElBQU9nMUUsSUFBRzUwRSxXQUFBLENBQUExVCxZQUFBLGlCQUFBcUIsWUFBQSxnQkFBVmlTLENBQVUsOEdBT0VpMUUsR0FReEJrSixFQUFjbitFLElBQU9nMUUsSUFBRzUwRSxXQUFBLENBQUExVCxZQUFBLG1CQUFBcUIsWUFBQSxnQkFBVmlTLENBQVUscVVBS2pCaTFFLEVBSW1CQSxFQU1qQkEsRUFDS0EsR0FPcEJtSSxFQUE0Q1IsS0FBcEN2bEQsRUFBUStsRCxFQUFSL2xELFNBQVVvbEQsRUFBU1csRUFBVFgsVUFBV3JILEVBQVVnSSxFQUFWaEksV0FHdkJycEgsRUFBSW14SCxFQUFhcHlILElBQUksTUFBUSxFQUM3QnVxSCxFQUFNNkgsRUFBYXB5SCxJQUFJLFFBQVUsR0FzQnZDLE9BcEJBcXZFLHFCQUFVLFlBQ08sZUFBQWtqRCxFQUFBQyxJQUFBamhELElBQUFVLE1BQUcsU0FBQXdnRCxJQUFBLElBQUEva0UsRUFBQTlxRCxFQUFBLE9BQUEydUUsSUFBQVEsTUFBQSxTQUFBdkQsR0FBQSxjQUFBQSxFQUFBaG5DLEtBQUFnbkMsRUFBQS94RCxNQUFBLE9BTWYsT0FMS2l4QyxFQUFJLENBQ1IsMkJBQTRCem9CLEVBQzVCMG9GLGFBQWMsT0FDZCtFLE1BQU96eEgsRUFBSSxHQUFLc3BILEVBQ2hCejJGLE1BQU95MkYsR0FDUi83QyxFQUFBL3hELEtBQUEsRUFDaUJ1MEcsR0FBT1QsV0FBVzdpRSxHQUFFLE9BQWhDOXFELEVBQUc0ckUsRUFBQXNELEtBQ1Q1cUUsUUFBUTR5QixJQUFJLGNBQWVsM0IsR0FFM0IycEUsR0FBUyxTQUFBcDJCLEdBQUssT0FBQWszRSxNQUFBLEdBQ1RsM0UsR0FBSyxJQUNSdzdFLFVBQVcvdUgsRUFBSTRsRixNQUNmOGhDLFdBQVkxaEgsS0FBS3lILEtBQUt6TixFQUFJK3ZCLE1BQU00M0YsUUFDL0Isd0JBQUEvN0MsRUFBQWdELFVBQUFpaEQsT0FDSixrQkFmYyxPQUFBRixFQUFBanhILE1BQUEsS0FBQUMsYUFBQSxFQWdCZm94SCxLQUNDLElBR0R0aUMsSUFBQXpwRCxjQUFBLFdBQ0F5cEQsSUFBQXpwRCxjQUFDeXNGLEVBQVcsS0FDVmhqQyxJQUFBenBELGNBQUEsT0FBSzNCLEdBQUcsMEJBQ1JvckQsSUFBQXpwRCxjQUFBLFFBQU13akYsTUFBTSxPQUFPbmxGLEdBQVUsV0FHL0JvckQsSUFBQXpwRCxjQUFDeXJGLEVBQVMsS0FDUmhpQyxJQUFBenBELGNBQUEsV0FFRytxRixFQUFVeHZILE9BRVBrdUYsSUFBQXpwRCxjQUFBLE9BQUszQixHQUFHLG1CQUNOb3JELElBQUF6cEQsY0FBQSxVQUNHK3FGLEVBQVVsdkgsS0FBSSxTQUFBNmpCLEdBQUksT0FDakIrcEUsSUFBQXpwRCxjQUFBLE1BQUlsbUMsSUFBSzRsQixFQUFLc3NHLE9BQU9DLE1BQ25CeGlDLElBQUF6cEQsY0FBQSxXQUNBeXBELElBQUF6cEQsY0FBQSxLQUFHbXVDLEtBQU0sU0FBU3p1RCxFQUFLMFksSUFBSWlHLElBQ3pCb3JELElBQUF6cEQsY0FBQSxVQUFLdGdCLEVBQUtzc0csT0FBT2o1RixPQUVmclQsRUFBS3NzRyxPQUFPRyxNQUNSMWlDLElBQUF6cEQsY0FBQSxPQUNFMmhDLElBQUtqaUQsRUFBS3NzRyxPQUFPRyxNQUFNSCxPQUFPMTBDLEtBQUszckIsSUFDbkNxM0MsTUFBTSxVQUNSLFVBT2R2WixJQUFBenBELGNBQUNvc0YsRUFBUyxDQUFDMUksV0FBWUEsRUFBWXJwSCxFQUFHQSxFQUFHc3BILElBQUtBLEVBQUtsd0YsU0FBUSxTQUFBdGpCLE9BQVdrdUIsTUFwQnhFb3JELElBQUF6cEQsY0FBQSxVQUFJLGlCLHFrQkM1RUQsU0FBUzBzRixHQUFHeDFGLEdBQW1CLElBQWhCczBGLEVBQVl0MEYsRUFBWnMwRixhQUV0QkMsRUFBWW45RSxJQUFPZzFFLElBQUc1MEUsV0FBQSxDQUFBMVQsWUFBQSxpQkFBQXFCLFlBQUEsZUFBVmlTLENBQVUsMk9BWUVpMUUsRUFRWEEsR0FVbkJtSSxFQUE0Q1IsS0FBcEN2bEQsRUFBUStsRCxFQUFSL2xELFNBQVVvbEQsRUFBU1csRUFBVFgsVUFBV3JILEVBQVVnSSxFQUFWaEksV0FHdkJycEgsRUFBSW14SCxFQUFhcHlILElBQUksTUFBUSxFQUM3QnVxSCxFQUFNNkgsRUFBYXB5SCxJQUFJLFFBQVUsR0FzQnZDLE9BcEJBcXZFLHFCQUFVLFlBQ08sZUFBQWtqRCxFQUFBQyxJQUFBamhELElBQUFVLE1BQUcsU0FBQXdnRCxJQUFBLElBQUEva0UsRUFBQTlxRCxFQUFBLE9BQUEydUUsSUFBQVEsTUFBQSxTQUFBdkQsR0FBQSxjQUFBQSxFQUFBaG5DLEtBQUFnbkMsRUFBQS94RCxNQUFBLE9BTWYsT0FMS2l4QyxFQUFJLENBQ1IsMkJBQTRCLE1BQzVCaWdFLGFBQWMsT0FDZCtFLE1BQU96eEgsRUFBSSxHQUFLc3BILEVBQ2hCejJGLE1BQU95MkYsR0FDUi83QyxFQUFBL3hELEtBQUEsRUFDaUJ1MEcsR0FBT1QsV0FBVzdpRSxHQUFFLE9BQWhDOXFELEVBQUc0ckUsRUFBQXNELEtBQ1Q1cUUsUUFBUTR5QixJQUFJLGNBQWVsM0IsR0FFM0IycEUsR0FBUyxTQUFBcDJCLEdBQUssT0FBQWszRSxNQUFBLEdBQ1RsM0UsR0FBSyxJQUNSdzdFLFVBQVcvdUgsRUFBSTRsRixNQUNmOGhDLFdBQVkxaEgsS0FBS3lILEtBQUt6TixFQUFJK3ZCLE1BQU00M0YsUUFDL0Isd0JBQUEvN0MsRUFBQWdELFVBQUFpaEQsT0FDSixrQkFmYyxPQUFBRixFQUFBanhILE1BQUEsS0FBQUMsYUFBQSxFQWdCZm94SCxLQUNDLElBR0R0aUMsSUFBQXpwRCxjQUFDeXJGLEVBQVMsS0FFTFYsRUFBVXh2SCxPQUVQa3VGLElBQUF6cEQsY0FBQSxPQUFLM0IsR0FBRyxtQkFDTm9yRCxJQUFBenBELGNBQUEsVUFDRytxRixFQUFVbHZILEtBQUksU0FBQTZqQixHQUFJLE9BQ2pCK3BFLElBQUF6cEQsY0FBQSxNQUFJbG1DLElBQUs0bEIsRUFBS3NzRyxPQUFPQyxNQUNuQnhpQyxJQUFBenBELGNBQUEsV0FDRXlwRCxJQUFBenBELGNBQUEsS0FBR211QyxLQUFNLFNBQVN6dUQsRUFBSzBZLElBQUlpRyxJQUN6Qm9yRCxJQUFBenBELGNBQUEsVUFBS3RnQixFQUFLc3NHLE9BQU9qNUYsT0FDakIwMkQsSUFBQXpwRCxjQUFBLE9BQUt3akYsTUFBTSxRQUFRcHhELEtBQU8xeUMsRUFBSzBZLElBQUk4ekYsV0FBVzV2SCxPQUFPLHlCQUVuRG9qQixFQUFLc3NHLE9BQU9HLE1BQ1IxaUMsSUFBQXpwRCxjQUFBLE9BQ0UyaEMsSUFBS2ppRCxFQUFLc3NHLE9BQU9HLE1BQU1ILE9BQU8xMEMsS0FBSzNyQixJQUNuQ3EzQyxNQUFNLFVBQ1IsVUFPaEJ2WixJQUFBenBELGNBQUNvc0YsRUFBUyxDQUFDMUksV0FBWUEsRUFBWXJwSCxFQUFHQSxFQUFHc3BILElBQUtBLEVBQUtsd0YsU0FBUyxVQXJCOURnMkQsSUFBQXpwRCxjQUFBLFVBQUksZUNuRUQsU0FBUzJzRixLQUV0QixJQUFNQyxFQUFXdCtFLElBQU9nMUUsSUFBRzUwRSxXQUFBLENBQUExVCxZQUFBLGlCQUFBcUIsWUFBQSxlQUFWaVMsQ0FBVSx1SUFJZGkxRSxFQUlhQSxHQU8xQixPQUNFOTVCLElBQUF6cEQsY0FBQzRzRixFQUFRLEtBQ1BuakMsSUFBQXpwRCxjQUFBLE9BQUszQixHQUFHLGtCQUNOb3JELElBQUF6cEQsY0FBQSxPQUFLMmhDLElBQUksNk1BQ1Q4bkIsSUFBQXpwRCxjQUFBLFdBQUssb0Qsb1BDVGIsSUFBTTRPLEdBQWNJLFlBQWlCLG9FQUVidTBFLEdBUWxCc0osR0FBT3YrRSxJQUFPZzFFLElBQUc1MEUsV0FBQSxDQUFBMVQsWUFBQSxhQUFBcUIsWUFBQSxlQUFWaVMsQ0FBVSw4UkFJWmkxRSxFQUlFQSxFQVdFQSxFQUdBQSxHQW9EQXVKLEdBM0NJLFNBQUExaUYsR0FBQSxTQUFBMGlGLElBQUEsT0FBQUMsSUFBQSxLQUFBRCxHQUFBRSxHQUFBLEtBQUFGLEVBQUFueUgsV0FBQSxPQUFBODBCLElBQUFxOUYsRUFBQTFpRixHQUFBNmlGLElBQUFILEVBQUEsRUFBQWh6SCxJQUFBLFNBQUFOLE1BRWpCLFdBQ0UsSXRCeERJMHpILEVzQndEQWx4SCxFQUFNLEdBQ1ZteEgsR3RCekRJRCxFQUFZLElBQUlFLElBQUk3MEYsT0FBT2cyQyxTQUFTSixNQUMxQzd0RSxRQUFRNHlCLElBQUksTUFBT2c2RixHQUVaLENBQ0w1dkcsTUFGWTR2RyxFQUFVNStDLFNBQVNqaEUsTUFBTSxLQUFLb1MsUUFBTyxTQUFBcGxCLEdBQUMsT0FBSUEsRUFBRWtCLE9BQVMsS0FHakVpd0gsYUFBYzBCLEVBQVUxQixlc0JvRGpCbHVHLEVBQUs2dkcsRUFBTDd2RyxNQUFPa3VHLEVBQVkyQixFQUFaM0IsYUFDUi9ILEVBQVVubUcsRUFBTS9oQixPQUFTLEVBQUkraEIsRUFBTSxHQUFLLEdBQ3hDK3ZHLEVBQWMvdkcsRUFBTSxHQUV0Qmd3RyxFQUFTLEtBQ2IsT0FBTzdKLEdBQ0wsSUFBSyxPQUNINkosRUFBUzdqQyxJQUFBenBELGNBQUN1dEYsRUFBSSxDQUFDenpILElBQUksU0FDbkIsTUFDRixJQUFLLE9BQ0h3ekgsRUFBUzdqQyxJQUFBenBELGNBQUNxc0YsR0FBSSxDQUFDdnlILElBQUksT0FBT3VrQyxHQUFJZ3ZGLElBQzlCLE1BQ0YsSUFBSyxPQUNIQyxFQUFTN2pDLElBQUF6cEQsY0FBQ3VyRixHQUFJLENBQUN6eEgsSUFBSSxPQUFPMHhILGFBQWNBLElBQ3hDLE1BQ0YsSUFBSyxNQUNIOEIsRUFBUzdqQyxJQUFBenBELGNBQUMwc0YsR0FBRyxDQUFDNXlILElBQUksTUFBTTB4SCxhQUFjQSxJQUN0QyxNQUNGLElBQUssT0FDSDhCLEVBQVM3akMsSUFBQXpwRCxjQUFDd3NGLEdBQUcsQ0FBQzF5SCxJQUFJLE1BQU11a0MsR0FBSWd2RixFQUFhN0IsYUFBY0EsSUFDdkQsTUFDRixRQUNFOEIsRUFBUzdqQyxJQUFBenBELGNBQUMyc0YsR0FBSSxDQUFDN3lILElBQUksU0FJdkIsT0FGQWtDLEVBQUlFLEtBQUtveEgsR0FJUDdqQyxJQUFBenBELGNBQUM2cUYsR0FBWSxLQUNYcGhDLElBQUF6cEQsY0FBQzRPLEdBQVcsTUFDWjY2QyxJQUFBenBELGNBQUM2c0YsR0FBSSxLQUNIcGpDLElBQUF6cEQsY0FBQ3d0RixFQUFVLENBQUMxekgsSUFBSSxNQUFNMnBILFFBQVNBLElBQy9CaDZCLElBQUF6cEQsY0FBQSxPQUFLd2pGLE1BQU0sYUFBYXhuSCxTQXBDZixDQUFTeXpDLGEscUJDckR0QmcrRSxHQUFVMXJGLFNBQVMyckYsZUFBZSxhQUN4Q0QsSUFBVUUsS0FBU3hrRixPQUFPc2dELElBQUF6cEQsY0FBQzhzRixHQUFhLE1BQUtXIiwiZmlsZSI6ImluZGV4X2J1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzY1KTtcbiIsIi8vISBtb21lbnQuanNcbi8vISB2ZXJzaW9uIDogMi4zMC4xXG4vLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9yc1xuLy8hIGxpY2Vuc2UgOiBNSVRcbi8vISBtb21lbnRqcy5jb21cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaG9va0NhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuICAgIC8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIGZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0ICE9IG51bGwgJiZcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggPT09IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGspKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgYXJyTGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyckxlbjsgKytpKSB7XG4gICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHk6IGZhbHNlLFxuICAgICAgICAgICAgdW51c2VkVG9rZW5zOiBbXSxcbiAgICAgICAgICAgIHVudXNlZElucHV0OiBbXSxcbiAgICAgICAgICAgIG92ZXJmbG93OiAtMixcbiAgICAgICAgICAgIGNoYXJzTGVmdE92ZXI6IDAsXG4gICAgICAgICAgICBudWxsSW5wdXQ6IGZhbHNlLFxuICAgICAgICAgICAgaW52YWxpZEVyYTogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRNb250aDogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRGb3JtYXQ6IGZhbHNlLFxuICAgICAgICAgICAgdXNlckludmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzbzogZmFsc2UsXG4gICAgICAgICAgICBwYXJzZWREYXRlUGFydHM6IFtdLFxuICAgICAgICAgICAgZXJhOiBudWxsLFxuICAgICAgICAgICAgbWVyaWRpZW06IG51bGwsXG4gICAgICAgICAgICByZmMyODIyOiBmYWxzZSxcbiAgICAgICAgICAgIHdlZWtkYXlNaXNtYXRjaDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICAgICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9wZjtcbiAgICB9XG5cbiAgICB2YXIgc29tZTtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICAgICAgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKSxcbiAgICAgICAgICAgICAgICBsZW4gPSB0Lmxlbmd0aCA+Pj4gMCxcbiAgICAgICAgICAgICAgICBpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgICAgICB2YXIgZmxhZ3MgPSBudWxsLFxuICAgICAgICAgICAgcGFyc2VkUGFydHMgPSBmYWxzZSxcbiAgICAgICAgICAgIGlzTm93VmFsaWQgPSBtLl9kICYmICFpc05hTihtLl9kLmdldFRpbWUoKSk7XG4gICAgICAgIGlmIChpc05vd1ZhbGlkKSB7XG4gICAgICAgICAgICBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgICAgIHBhcnNlZFBhcnRzID0gc29tZS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpc05vd1ZhbGlkID1cbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEVyYSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9XG4gICAgICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNOb3dWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gKGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXSksXG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGNvcHlDb25maWcodG8sIGZyb20pIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBwcm9wLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgbW9tZW50UHJvcGVydGllc0xlbiA9IG1vbWVudFByb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllc0xlbiA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuXG4gICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAgICAgLy8gb2JqZWN0cy5cbiAgICAgICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50KG9iaikge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgY29uc29sZS53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgICAgIHZhciBmaXJzdFRpbWUgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyKG51bGwsIG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgYXJnLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgIGFyZ0xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGFyZ3VtZW50c1swXSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgICAgIG1zZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuQXJndW1lbnRzOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcigpLnN0YWNrXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG4gICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlb2YgRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnICYmIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0KGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY29uZmlnLCBpKSkge1xuICAgICAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgICAgIC9cXGR7MSwyfS8uc291cmNlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSxcbiAgICAgICAgICAgIHByb3A7XG4gICAgICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cztcblxuICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIHJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhcihrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICAgICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgK1xuICAgICAgICAgICAgYWJzTnVtYmVyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRpbmdUb2tlbnMgPVxuICAgICAgICAgICAgLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xOezEsNX18WVlZWVlZfFlZWVlZfFlZWVl8WVl8eXsyLDR9fHlvP3xnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZyxcbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZyxcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zID0ge30sXG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4odG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbY2FsbGJhY2tdKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFkZGVkKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW29yZGluYWxdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKFxuICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIHRva2VuXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgICAgICBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pXG4gICAgICAgICAgICAgICAgICAgID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgOiBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPVxuICAgICAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgICAgICB2YXIgaSA9IDU7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2VucyxcbiAgICAgICAgICAgICAgICByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICBMOiAnTU0vREQvWVlZWScsXG4gICAgICAgIExMOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQoa2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXJcbiAgICAgICAgICAgIC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodG9rKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdNTU1NJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdNTScgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnREQnIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ2RkZGQnXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2suc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0b2s7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJycpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuICAgIGZ1bmN0aW9uIGludmFsaWREYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJyxcbiAgICAgICAgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG4gICAgZnVuY3Rpb24gb3JkaW5hbChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgIHc6ICdhIHdlZWsnLFxuICAgICAgICB3dzogJyVkIHdlZWtzJyxcbiAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dClcbiAgICAgICAgICAgID8gb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSlcbiAgICAgICAgICAgIDogb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZShkaWZmLCBvdXRwdXQpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFsaWFzZXMgPSB7XG4gICAgICAgIEQ6ICdkYXRlJyxcbiAgICAgICAgZGF0ZXM6ICdkYXRlJyxcbiAgICAgICAgZGF0ZTogJ2RhdGUnLFxuICAgICAgICBkOiAnZGF5JyxcbiAgICAgICAgZGF5czogJ2RheScsXG4gICAgICAgIGRheTogJ2RheScsXG4gICAgICAgIGU6ICd3ZWVrZGF5JyxcbiAgICAgICAgd2Vla2RheXM6ICd3ZWVrZGF5JyxcbiAgICAgICAgd2Vla2RheTogJ3dlZWtkYXknLFxuICAgICAgICBFOiAnaXNvV2Vla2RheScsXG4gICAgICAgIGlzb3dlZWtkYXlzOiAnaXNvV2Vla2RheScsXG4gICAgICAgIGlzb3dlZWtkYXk6ICdpc29XZWVrZGF5JyxcbiAgICAgICAgREREOiAnZGF5T2ZZZWFyJyxcbiAgICAgICAgZGF5b2Z5ZWFyczogJ2RheU9mWWVhcicsXG4gICAgICAgIGRheW9meWVhcjogJ2RheU9mWWVhcicsXG4gICAgICAgIGg6ICdob3VyJyxcbiAgICAgICAgaG91cnM6ICdob3VyJyxcbiAgICAgICAgaG91cjogJ2hvdXInLFxuICAgICAgICBtczogJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgbWlsbGlzZWNvbmRzOiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICBtaWxsaXNlY29uZDogJ21pbGxpc2Vjb25kJyxcbiAgICAgICAgbTogJ21pbnV0ZScsXG4gICAgICAgIG1pbnV0ZXM6ICdtaW51dGUnLFxuICAgICAgICBtaW51dGU6ICdtaW51dGUnLFxuICAgICAgICBNOiAnbW9udGgnLFxuICAgICAgICBtb250aHM6ICdtb250aCcsXG4gICAgICAgIG1vbnRoOiAnbW9udGgnLFxuICAgICAgICBROiAncXVhcnRlcicsXG4gICAgICAgIHF1YXJ0ZXJzOiAncXVhcnRlcicsXG4gICAgICAgIHF1YXJ0ZXI6ICdxdWFydGVyJyxcbiAgICAgICAgczogJ3NlY29uZCcsXG4gICAgICAgIHNlY29uZHM6ICdzZWNvbmQnLFxuICAgICAgICBzZWNvbmQ6ICdzZWNvbmQnLFxuICAgICAgICBnZzogJ3dlZWtZZWFyJyxcbiAgICAgICAgd2Vla3llYXJzOiAnd2Vla1llYXInLFxuICAgICAgICB3ZWVreWVhcjogJ3dlZWtZZWFyJyxcbiAgICAgICAgR0c6ICdpc29XZWVrWWVhcicsXG4gICAgICAgIGlzb3dlZWt5ZWFyczogJ2lzb1dlZWtZZWFyJyxcbiAgICAgICAgaXNvd2Vla3llYXI6ICdpc29XZWVrWWVhcicsXG4gICAgICAgIHc6ICd3ZWVrJyxcbiAgICAgICAgd2Vla3M6ICd3ZWVrJyxcbiAgICAgICAgd2VlazogJ3dlZWsnLFxuICAgICAgICBXOiAnaXNvV2VlaycsXG4gICAgICAgIGlzb3dlZWtzOiAnaXNvV2VlaycsXG4gICAgICAgIGlzb3dlZWs6ICdpc29XZWVrJyxcbiAgICAgICAgeTogJ3llYXInLFxuICAgICAgICB5ZWFyczogJ3llYXInLFxuICAgICAgICB5ZWFyOiAneWVhcicsXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xuICAgIH1cblxuICAgIHZhciBwcmlvcml0aWVzID0ge1xuICAgICAgICBkYXRlOiA5LFxuICAgICAgICBkYXk6IDExLFxuICAgICAgICB3ZWVrZGF5OiAxMSxcbiAgICAgICAgaXNvV2Vla2RheTogMTEsXG4gICAgICAgIGRheU9mWWVhcjogNCxcbiAgICAgICAgaG91cjogMTMsXG4gICAgICAgIG1pbGxpc2Vjb25kOiAxNixcbiAgICAgICAgbWludXRlOiAxNCxcbiAgICAgICAgbW9udGg6IDgsXG4gICAgICAgIHF1YXJ0ZXI6IDcsXG4gICAgICAgIHNlY29uZDogMTUsXG4gICAgICAgIHdlZWtZZWFyOiAxLFxuICAgICAgICBpc29XZWVrWWVhcjogMSxcbiAgICAgICAgd2VlazogNSxcbiAgICAgICAgaXNvV2VlazogNSxcbiAgICAgICAgeWVhcjogMSxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXSxcbiAgICAgICAgICAgIHU7XG4gICAgICAgIGZvciAodSBpbiB1bml0c09iaikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AodW5pdHNPYmosIHUpKSB7XG4gICAgICAgICAgICAgICAgdW5pdHMucHVzaCh7IHVuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bml0cztcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2gxID0gL1xcZC8sIC8vICAgICAgIDAgLSA5XG4gICAgICAgIG1hdGNoMiA9IC9cXGRcXGQvLCAvLyAgICAgIDAwIC0gOTlcbiAgICAgICAgbWF0Y2gzID0gL1xcZHszfS8sIC8vICAgICAwMDAgLSA5OTlcbiAgICAgICAgbWF0Y2g0ID0gL1xcZHs0fS8sIC8vICAgIDAwMDAgLSA5OTk5XG4gICAgICAgIG1hdGNoNiA9IC9bKy1dP1xcZHs2fS8sIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2gxdG8yID0gL1xcZFxcZD8vLCAvLyAgICAgICAwIC0gOTlcbiAgICAgICAgbWF0Y2gzdG80ID0gL1xcZFxcZFxcZFxcZD8vLCAvLyAgICAgOTk5IC0gOTk5OVxuICAgICAgICBtYXRjaDV0bzYgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy8sIC8vICAgOTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2gxdG8zID0gL1xcZHsxLDN9LywgLy8gICAgICAgMCAtIDk5OVxuICAgICAgICBtYXRjaDF0bzQgPSAvXFxkezEsNH0vLCAvLyAgICAgICAwIC0gOTk5OVxuICAgICAgICBtYXRjaDF0bzYgPSAvWystXT9cXGR7MSw2fS8sIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICAgICAgbWF0Y2hVbnNpZ25lZCA9IC9cXGQrLywgLy8gICAgICAgMCAtIGluZlxuICAgICAgICBtYXRjaFNpZ25lZCA9IC9bKy1dP1xcZCsvLCAvLyAgICAtaW5mIC0gaW5mXG4gICAgICAgIG1hdGNoT2Zmc2V0ID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpLCAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICAgICAgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpLCAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgICAgICBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy8sIC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG4gICAgICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgICAgICAvLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG4gICAgICAgIG1hdGNoV29yZCA9XG4gICAgICAgICAgICAvWzAtOV17MCwyNTZ9WydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGMDdcXHVGRjEwLVxcdUZGRUZdezEsMjU2fXxbXFx1MDYwMC1cXHUwNkZGXFwvXXsxLDI1Nn0oXFxzKj9bXFx1MDYwMC1cXHUwNkZGXXsxLDI1Nn0pezEsMn0vaSxcbiAgICAgICAgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyA9IC9eWzEtOV1cXGQ/LywgLy8gICAgICAgICAxLTk5XG4gICAgICAgIG1hdGNoMXRvMkhhc1plcm8gPSAvXihbMS05XVxcZHxcXGQpLywgLy8gICAgICAgICAgIDAtOTlcbiAgICAgICAgcmVnZXhlcztcblxuICAgIHJlZ2V4ZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4odG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpXG4gICAgICAgICAgICA/IHJlZ2V4XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4ID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykge1xuICAgICAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKFxuICAgICAgICAgICAgc1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdcXFxcJywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgIC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzRmxvb3IobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcikgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbih0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBmdW5jID0gY2FsbGJhY2ssXG4gICAgICAgICAgICB0b2tlbkxlbjtcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdG9rZW5MZW4gPSB0b2tlbi5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuKHRva2VuLCBjYWxsYmFjaykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaGFzT3duUHJvcCh0b2tlbnMsIHRva2VuKSkge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwLFxuICAgICAgICBNT05USCA9IDEsXG4gICAgICAgIERBVEUgPSAyLFxuICAgICAgICBIT1VSID0gMyxcbiAgICAgICAgTUlOVVRFID0gNCxcbiAgICAgICAgU0VDT05EID0gNSxcbiAgICAgICAgTUlMTElTRUNPTkQgPSA2LFxuICAgICAgICBXRUVLID0gNyxcbiAgICAgICAgV0VFS0RBWSA9IDg7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/IHplcm9GaWxsKHksIDQpIDogJysnICsgeTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCA0XSwgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgNV0sIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID1cbiAgICAgICAgICAgIGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICBob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xuICAgIH07XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBnZXRJc0xlYXBZZWFyKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldFNldCh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldChtb20sIHVuaXQpIHtcbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGQgPSBtb20uX2QsXG4gICAgICAgICAgICBpc1VUQyA9IG1vbS5faXNVVEM7XG5cbiAgICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgICAgICBjYXNlICdNaWxsaXNlY29uZHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgOiBkLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgICAgICAgY2FzZSAnU2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENTZWNvbmRzKCkgOiBkLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgIGNhc2UgJ01pbnV0ZXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDTWludXRlcygpIDogZC5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICBjYXNlICdIb3Vycyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENIb3VycygpIDogZC5nZXRIb3VycygpO1xuICAgICAgICAgICAgY2FzZSAnRGF0ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENEYXRlKCkgOiBkLmdldERhdGUoKTtcbiAgICAgICAgICAgIGNhc2UgJ0RheSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENEYXkoKSA6IGQuZ2V0RGF5KCk7XG4gICAgICAgICAgICBjYXNlICdNb250aCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVVRDID8gZC5nZXRVVENNb250aCgpIDogZC5nZXRNb250aCgpO1xuICAgICAgICAgICAgY2FzZSAnRnVsbFllYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc1VUQyA/IGQuZ2V0VVRDRnVsbFllYXIoKSA6IGQuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5hTjsgLy8gSnVzdCBpbiBjYXNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQkMShtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIHZhciBkLCBpc1VUQywgeWVhciwgbW9udGgsIGRhdGU7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpIHx8IGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZCA9IG1vbS5fZDtcbiAgICAgICAgaXNVVEMgPSBtb20uX2lzVVRDO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgY2FzZSAnTWlsbGlzZWNvbmRzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAoaXNVVENcbiAgICAgICAgICAgICAgICAgICAgPyBkLnNldFVUQ01pbGxpc2Vjb25kcyh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiBkLnNldE1pbGxpc2Vjb25kcyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnU2Vjb25kcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENTZWNvbmRzKHZhbHVlKSA6IGQuc2V0U2Vjb25kcyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnTWludXRlcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENNaW51dGVzKHZhbHVlKSA6IGQuc2V0TWludXRlcyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnSG91cnMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDSG91cnModmFsdWUpIDogZC5zZXRIb3Vycyh2YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSAnRGF0ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKGlzVVRDID8gZC5zZXRVVENEYXRlKHZhbHVlKSA6IGQuc2V0RGF0ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgLy8gY2FzZSAnRGF5JzogLy8gTm90IHJlYWxcbiAgICAgICAgICAgIC8vICAgIHJldHVybiB2b2lkIChpc1VUQyA/IGQuc2V0VVRDRGF5KHZhbHVlKSA6IGQuc2V0RGF5KHZhbHVlKSk7XG4gICAgICAgICAgICAvLyBjYXNlICdNb250aCc6IC8vIE5vdCB1c2VkIGJlY2F1c2Ugd2UgbmVlZCB0byBwYXNzIHR3byB2YXJpYWJsZXNcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gdm9pZCAoaXNVVEMgPyBkLnNldFVUQ01vbnRoKHZhbHVlKSA6IGQuc2V0TW9udGgodmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgJ0Z1bGxZZWFyJzpcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gU2VlIGJlbG93IC4uLlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIEp1c3QgaW4gY2FzZVxuICAgICAgICB9XG5cbiAgICAgICAgeWVhciA9IHZhbHVlO1xuICAgICAgICBtb250aCA9IG1vbS5tb250aCgpO1xuICAgICAgICBkYXRlID0gbW9tLmRhdGUoKTtcbiAgICAgICAgZGF0ZSA9IGRhdGUgPT09IDI5ICYmIG1vbnRoID09PSAxICYmICFpc0xlYXBZZWFyKHllYXIpID8gMjggOiBkYXRlO1xuICAgICAgICB2b2lkIChpc1VUQ1xuICAgICAgICAgICAgPyBkLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXRlKVxuICAgICAgICAgICAgOiBkLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXRlKSk7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc3RyaW5nR2V0KHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0cmluZ1NldCh1bml0cywgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyksXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICBwcmlvcml0aXplZExlbiA9IHByaW9yaXRpemVkLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcmlvcml0aXplZExlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kKG4sIHgpIHtcbiAgICAgICAgcmV0dXJuICgobiAlIHgpICsgeCkgJSB4O1xuICAgIH1cblxuICAgIHZhciBpbmRleE9mO1xuXG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIC8vIEkga25vd1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtb2RNb250aCA9IG1vZChtb250aCwgMTIpO1xuICAgICAgICB5ZWFyICs9IChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuICAgICAgICByZXR1cm4gbW9kTW9udGggPT09IDFcbiAgICAgICAgICAgID8gaXNMZWFwWWVhcih5ZWFyKVxuICAgICAgICAgICAgICAgID8gMjlcbiAgICAgICAgICAgICAgICA6IDI4XG4gICAgICAgICAgICA6IDMxIC0gKChtb2RNb250aCAlIDcpICUgMik7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdNJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJOb0xlYWRpbmdaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICAgICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzID1cbiAgICAgICAgICAgICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9XG4gICAgICAgICAgICAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy8sXG4gICAgICAgIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHMobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpXG4gICAgICAgICAgICA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldXG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1tcbiAgICAgICAgICAgICAgICAgICh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgPyAnZm9ybWF0J1xuICAgICAgICAgICAgICAgICAgICAgIDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgICAgIF1bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1Nob3J0XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KVxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFttLm1vbnRoKCldXG4gICAgICAgICAgICA6IHRoaXMuX21vbnRoc1Nob3J0W1xuICAgICAgICAgICAgICAgICAgTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHVzZWRcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzU2hvcnQoXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UobW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlLmNhbGwodGhpcywgbW9udGhOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBhZGQgc29ydGluZ1xuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgICAgIC8vIHNlZSBzb3J0aW5nIGluIGNvbXB1dGVNb250aHNQYXJzZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnTU1NTScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnTU1NJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHNldE1vbnRoKG1vbSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1vbnRoID0gdmFsdWUsXG4gICAgICAgICAgICBkYXRlID0gbW9tLmRhdGUoKTtcblxuICAgICAgICBkYXRlID0gZGF0ZSA8IDI5ID8gZGF0ZSA6IE1hdGgubWluKGRhdGUsIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIG1vbnRoKSk7XG4gICAgICAgIHZvaWQgKG1vbS5faXNVVENcbiAgICAgICAgICAgID8gbW9tLl9kLnNldFVUQ01vbnRoKG1vbnRoLCBkYXRlKVxuICAgICAgICAgICAgOiBtb20uX2Quc2V0TW9udGgobW9udGgsIGRhdGUpKTtcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRNb250aCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGgoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGxvbmdQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgc2hvcnRQLFxuICAgICAgICAgICAgbG9uZ1A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQID0gcmVnZXhFc2NhcGUodGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25nUCA9IHJlZ2V4RXNjYXBlKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRQKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25nUCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdQKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRQKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVENEYXRlKHkpIHtcbiAgICAgICAgdmFyIGRhdGUsIGFyZ3M7XG4gICAgICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBhcmdzWzBdID0geSArIDQwMDtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmdzKSk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuICAgIGZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICAgICAgZndkbHcgPSAoNyArIGNyZWF0ZVVUQ0RhdGUoeWVhciwgMCwgZndkKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuXG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGUjQ2FsY3VsYXRpbmdfYV9kYXRlX2dpdmVuX3RoZV95ZWFyLjJDX3dlZWtfbnVtYmVyX2FuZF93ZWVrZGF5XG4gICAgZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgICAgIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgICAgIHJlc1llYXIsXG4gICAgICAgICAgICByZXNEYXlPZlllYXI7XG5cbiAgICAgICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgICAgICByZXNXZWVrLFxuICAgICAgICAgICAgcmVzWWVhcjtcblxuICAgICAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrICsgd2Vla3NJblllYXIocmVzWWVhciwgZG93LCBkb3kpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3ZWVrOiByZXNXZWVrLFxuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgICAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oXG4gICAgICAgIFsndycsICd3dycsICdXJywgJ1dXJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWsobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWsoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2QnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2UnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0UnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignZGRkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2RkJywgJ2RkZCcsICdkZGRkJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBnZXQgYSB3ZWVrZGF5IG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZFxuICAgICAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkJywgJ2UnLCAnRSddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQgPSBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIExPQ0FMRVNcbiAgICBmdW5jdGlvbiBzaGlmdFdlZWtkYXlzKHdzLCBuKSB7XG4gICAgICAgIHJldHVybiB3cy5zbGljZShuLCA3KS5jb25jYXQod3Muc2xpY2UoMCwgbikpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPVxuICAgICAgICAgICAgJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCA9ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQsXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4ID0gbWF0Y2hXb3JkO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciB3ZWVrZGF5cyA9IGlzQXJyYXkodGhpcy5fd2Vla2RheXMpXG4gICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzXG4gICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzW1xuICAgICAgICAgICAgICAgICAgbSAmJiBtICE9PSB0cnVlICYmIHRoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdO1xuICAgICAgICByZXR1cm4gbSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBzaGlmdFdlZWtkYXlzKHdlZWtkYXlzLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogbVxuICAgICAgICAgICAgICA/IHdlZWtkYXlzW20uZGF5KCldXG4gICAgICAgICAgICAgIDogd2Vla2RheXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydChtKSB7XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNTaG9ydCwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldXG4gICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbihtKSB7XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNNaW4sIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV1cbiAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c01pbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGlpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihcbiAgICAgICAgICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzU2hvcnQoXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2Uod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJyxcbiAgICAgICAgICAgICAgICAgICAgJ2knXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgJ14nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5cyhtb20sICcnKSArXG4gICAgICAgICAgICAgICAgICAgICd8XicgK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZGRkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGRkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkJyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mV2VlayhpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF5ID0gZ2V0KHRoaXMsICdEYXknKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWtkYXkgOiB0aGlzLmFkZChpbnB1dCAtIHdlZWtkYXksICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3RcbiAgICAgICAgICAgICAgICA/IHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXhcbiAgICAgICAgICAgICAgICA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSgpIHtcbiAgICAgICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1pblBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgc2hvcnRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGxvbmdQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbW9tLFxuICAgICAgICAgICAgbWlucCxcbiAgICAgICAgICAgIHNob3J0cCxcbiAgICAgICAgICAgIGxvbmdwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIG1pbnAgPSByZWdleEVzY2FwZSh0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpKTtcbiAgICAgICAgICAgIHNob3J0cCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25ncCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBtaW5QaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAnJyArXG4gICAgICAgICAgICBoRm9ybWF0LmFwcGx5KHRoaXMpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgIHRoaXMuaG91cnMoKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0oXG4gICAgICAgICAgICAgICAgdGhpcy5ob3VycygpLFxuICAgICAgICAgICAgICAgIHRoaXMubWludXRlcygpLFxuICAgICAgICAgICAgICAgIGxvd2VyY2FzZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbWVyaWRpZW0oJ2EnLCB0cnVlKTtcbiAgICBtZXJpZGllbSgnQScsIGZhbHNlKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0oaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignSCcsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignaycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8yTm9MZWFkaW5nWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbigna2snLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW0nLCBtYXRjaDN0bzQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydrJywgJ2trJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgICAgICBjb25maWcuX21lcmlkaWVtID0gaW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdobW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0LFxuICAgICAgICAgICAgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlSXNQTShpbnB1dCkge1xuICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCc7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2ksXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgICAgICAvLyBzcGVjaWZpZWQgd2hpY2ggaG91ciB0aGV5IHdhbnQuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgICAgICAvLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbiAgICAgICAgLy8gdGhpcyBydWxlLlxuICAgICAgICBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBiYXNlQ29uZmlnID0ge1xuICAgICAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgICAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgICAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgICAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICAgICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICAgICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UsXG4gICAgfTtcblxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbiAgICB2YXIgbG9jYWxlcyA9IHt9LFxuICAgICAgICBsb2NhbGVGYW1pbGllcyA9IHt9LFxuICAgICAgICBnbG9iYWxMb2NhbGU7XG5cbiAgICBmdW5jdGlvbiBjb21tb25QcmVmaXgoYXJyMSwgYXJyMikge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG1pbmwgPSBNYXRoLm1pbihhcnIxLmxlbmd0aCwgYXJyMi5sZW5ndGgpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWlubDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYXJyMVtpXSAhPT0gYXJyMltpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW5sO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgbmV4dCxcbiAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgIHNwbGl0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIG5leHQgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5sZW5ndGggPj0gaiAmJlxuICAgICAgICAgICAgICAgICAgICBjb21tb25QcmVmaXgoc3BsaXQsIG5leHQpID49IGogLSAxXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWxlTmFtZVNhbmUobmFtZSkge1xuICAgICAgICAvLyBQcmV2ZW50IG5hbWVzIHRoYXQgbG9vayBsaWtlIGZpbGVzeXN0ZW0gcGF0aHMsIGkuZSBjb250YWluICcvJyBvciAnXFwnXG4gICAgICAgIC8vIEVuc3VyZSBuYW1lIGlzIGF2YWlsYWJsZSBhbmQgZnVuY3Rpb24gcmV0dXJucyBib29sZWFuXG4gICAgICAgIHJldHVybiAhIShuYW1lICYmIG5hbWUubWF0Y2goJ15bXi9cXFxcXFxcXF0qJCcpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICAgICAgdmFyIG9sZExvY2FsZSA9IG51bGwsXG4gICAgICAgICAgICBhbGlhc2VkUmVxdWlyZTtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgbW9kdWxlICYmXG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyAmJlxuICAgICAgICAgICAgaXNMb2NhbGVOYW1lU2FuZShuYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIGFsaWFzZWRSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIG1hcmsgYXMgbm90IGZvdW5kIHRvIGF2b2lkIHJlcGVhdGluZyBleHBlbnNpdmUgZmlsZSByZXF1aXJlIGNhbGwgY2F1c2luZyBoaWdoIENQVVxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdHJ5aW5nIHRvIGZpbmQgZW4tVVMsIGVuX1VTLCBlbi11cyBmb3IgZXZlcnkgZm9ybWF0IGNhbGxcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbnVsbDsgLy8gbnVsbCBtZWFucyBub3QgZm91bmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuICAgIC8vIGxvY2FsZSBrZXkuXG4gICAgZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlKGtleSwgdmFsdWVzKSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWVzKSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy93YXJuIHVzZXIgaWYgYXJndW1lbnRzIGFyZSBwYXNzZWQgYnV0IHRoZSBsb2NhbGUgY291bGQgbm90IGJlIHNldFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAnTG9jYWxlICcgKyBrZXkgKyAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoXG4gICAgICAgICAgICAgICAgICAgICdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbiBleGlzdGluZyBsb2NhbGUuIG1vbWVudC5kZWZpbmVMb2NhbGUobG9jYWxlTmFtZSwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoY29uZmlnLnBhcmVudExvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxvY2FsZShuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHRtcExvY2FsZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsICYmIGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgY2hpbGQgbG9jYWxlIGluLXBsYWNlIHRvIGF2b2lkIG1lbW9yeS1sZWFrc1xuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0uc2V0KG1lcmdlQ29uZmlncyhsb2NhbGVzW25hbWVdLl9jb25maWcsIGNvbmZpZykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBNRVJHRVxuICAgICAgICAgICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRtcExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IHRtcExvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGVMb2NhbGUgaXMgY2FsbGVkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGFiYnIgc28gaXQgd2lsbCBoYXZlIGEgbmFtZSAoZ2V0dGVycyByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgLy8gdW5kZWZpbmVkIG90aGVyd2lzZSkuXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICAgICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBnZXRTZXRHbG9iYWxMb2NhbGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBnZXRMb2NhbGUoa2V5KSB7XG4gICAgICAgIHZhciBsb2NhbGU7XG5cbiAgICAgICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICAgICAga2V5ID0ga2V5Ll9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbExvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAvL3Nob3J0LWNpcmN1aXQgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleSA9IFtrZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RMb2NhbGVzKCkge1xuICAgICAgICByZXR1cm4ga2V5cyhsb2NhbGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93KG0pIHtcbiAgICAgICAgdmFyIG92ZXJmbG93LFxuICAgICAgICAgICAgYSA9IG0uX2E7XG5cbiAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgICAgIGFbTU9OVEhdIDwgMCB8fCBhW01PTlRIXSA+IDExXG4gICAgICAgICAgICAgICAgICAgID8gTU9OVEhcbiAgICAgICAgICAgICAgICAgICAgOiBhW0RBVEVdIDwgMSB8fCBhW0RBVEVdID4gZGF5c0luTW9udGgoYVtZRUFSXSwgYVtNT05USF0pXG4gICAgICAgICAgICAgICAgICAgICAgPyBEQVRFXG4gICAgICAgICAgICAgICAgICAgICAgOiBhW0hPVVJdIDwgMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhW0hPVVJdID4gMjQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGFbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtNSU5VVEVdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtTRUNPTkRdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gIT09IDApKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBIT1VSXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFbTUlOVVRFXSA8IDAgfHwgYVtNSU5VVEVdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBNSU5VVEVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhW1NFQ09ORF0gPCAwIHx8IGFbU0VDT05EXSA+IDU5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBNSUxMSVNFQ09ORFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAtMTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiZcbiAgICAgICAgICAgICAgICAob3ZlcmZsb3cgPCBZRUFSIHx8IG92ZXJmbG93ID4gREFURSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBpc28gODYwMSByZWdleFxuICAgIC8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxuICAgIHZhciBleHRlbmRlZElzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvLFxuICAgICAgICBiYXNpY0lzb1JlZ2V4ID1cbiAgICAgICAgICAgIC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGR8KSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoWystXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC8sXG4gICAgICAgIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy8sXG4gICAgICAgIGlzb0RhdGVzID0gW1xuICAgICAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgICAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgICAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZREREJywgL1xcZHs3fS9dLFxuICAgICAgICAgICAgWydZWVlZTU0nLCAvXFxkezZ9LywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZJywgL1xcZHs0fS8sIGZhbHNlXSxcbiAgICAgICAgXSxcbiAgICAgICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgICAgICBpc29UaW1lcyA9IFtcbiAgICAgICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIJywgL1xcZFxcZC9dLFxuICAgICAgICBdLFxuICAgICAgICBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKC0/XFxkKykvaSxcbiAgICAgICAgLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xuICAgICAgICByZmMyODIyID1cbiAgICAgICAgICAgIC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC8sXG4gICAgICAgIG9ic09mZnNldHMgPSB7XG4gICAgICAgICAgICBVVDogMCxcbiAgICAgICAgICAgIEdNVDogMCxcbiAgICAgICAgICAgIEVEVDogLTQgKiA2MCxcbiAgICAgICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgICAgIENEVDogLTUgKiA2MCxcbiAgICAgICAgICAgIENTVDogLTYgKiA2MCxcbiAgICAgICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgICAgIE1TVDogLTcgKiA2MCxcbiAgICAgICAgICAgIFBEVDogLTcgKiA2MCxcbiAgICAgICAgICAgIFBTVDogLTggKiA2MCxcbiAgICAgICAgfTtcblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgICAgIGFsbG93VGltZSxcbiAgICAgICAgICAgIGRhdGVGb3JtYXQsXG4gICAgICAgICAgICB0aW1lRm9ybWF0LFxuICAgICAgICAgICAgdHpGb3JtYXQsXG4gICAgICAgICAgICBpc29EYXRlc0xlbiA9IGlzb0RhdGVzLmxlbmd0aCxcbiAgICAgICAgICAgIGlzb1RpbWVzTGVuID0gaXNvVGltZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lc0xlbjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoXG4gICAgICAgIHllYXJTdHIsXG4gICAgICAgIG1vbnRoU3RyLFxuICAgICAgICBkYXlTdHIsXG4gICAgICAgIGhvdXJTdHIsXG4gICAgICAgIG1pbnV0ZVN0cixcbiAgICAgICAgc2Vjb25kU3RyXG4gICAgKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobWludXRlU3RyLCAxMCksXG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKHNlY29uZFN0cikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoeWVhclN0ciwgMTApO1xuICAgICAgICBpZiAoeWVhciA8PSA0OSkge1xuICAgICAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKHllYXIgPD0gOTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gMTkwMCArIHllYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHllYXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgICAgICAvLyBSZW1vdmUgY29tbWVudHMgYW5kIGZvbGRpbmcgd2hpdGVzcGFjZSBhbmQgcmVwbGFjZSBtdWx0aXBsZS1zcGFjZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuICAgICAgICByZXR1cm4gc1xuICAgICAgICAgICAgLnJlcGxhY2UoL1xcKFteKCldKlxcKXxbXFxuXFx0XS9nLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvKFxcc1xccyspL2csICcgJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbmRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgICAgICB3ZWVrZGF5QWN0dWFsID0gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzBdLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFsxXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMl1cbiAgICAgICAgICAgICAgICApLmdldERheSgpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChvYnNPZmZzZXQsIG1pbGl0YXJ5T2Zmc2V0LCBudW1PZmZzZXQpIHtcbiAgICAgICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICAgICAgfSBlbHNlIGlmIChtaWxpdGFyeU9mZnNldCkge1xuICAgICAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApLFxuICAgICAgICAgICAgICAgIG0gPSBobSAlIDEwMCxcbiAgICAgICAgICAgICAgICBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpLFxuICAgICAgICAgICAgcGFyc2VkQXJyYXk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKFxuICAgICAgICAgICAgICAgIG1hdGNoWzRdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzNdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzVdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzZdLFxuICAgICAgICAgICAgICAgIG1hdGNoWzddXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgICAgIGNvbmZpZy5fdHptID0gY2FsY3VsYXRlT2Zmc2V0KG1hdGNoWzhdLCBtYXRjaFs5XSwgbWF0Y2hbMTBdKTtcblxuICAgICAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucmZjMjgyMiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgZnJvbSAxKSBBU1AuTkVULCAyKSBJU08sIDMpIFJGQyAyODIyIGZvcm1hdHMsIG9yIDQpIG9wdGlvbmFsIGZhbGxiYWNrIGlmIHBhcnNpbmcgaXNuJ3Qgc3RyaWN0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZyhjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fc3RyaWN0KSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgICAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAgICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgICAgICAgICAnZGlzY291cmFnZWQuIFBsZWFzZSByZWZlciB0byBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICAgICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG4gICAgfVxuXG4gICAgLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4gICAgLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbiAgICAvLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbiAgICAvLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZGF0ZSxcbiAgICAgICAgICAgIGlucHV0ID0gW10sXG4gICAgICAgICAgICBjdXJyZW50RGF0ZSxcbiAgICAgICAgICAgIGV4cGVjdGVkV2Vla2RheSxcbiAgICAgICAgICAgIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fFxuICAgICAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID09PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9XG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW2ldID09IG51bGwgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTlVURV0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgKTtcbiAgICAgICAgZXhwZWN0ZWRXZWVrZGF5ID0gY29uZmlnLl91c2VVVENcbiAgICAgICAgICAgID8gY29uZmlnLl9kLmdldFVUQ0RheSgpXG4gICAgICAgICAgICA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl93ICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5XG4gICAgICAgICkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93LCBjdXJXZWVrO1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMoXG4gICAgICAgICAgICAgICAgdy5HRyxcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbWUVBUl0sXG4gICAgICAgICAgICAgICAgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbm5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBJU08gc3RhbmRhcmRcbiAgICBob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbiAgICBob29rcy5SRkNfMjgyMiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyB0byBhbm90aGVyIHBhcnQgb2YgdGhlIGNyZWF0aW9uIGZsb3cgdG8gcHJldmVudCBjaXJjdWxhciBkZXBzXG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9hID0gW107XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgICAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgICAgICB2YXIgc3RyaW5nID0gJycgKyBjb25maWcuX2ksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcGFyc2VkSW5wdXQsXG4gICAgICAgICAgICB0b2tlbnMsXG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDAsXG4gICAgICAgICAgICBlcmEsXG4gICAgICAgICAgICB0b2tlbkxlbjtcblxuICAgICAgICB0b2tlbnMgPVxuICAgICAgICAgICAgZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuICAgICAgICB0b2tlbkxlbiA9IHRva2Vucy5sZW5ndGg7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbkxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8XG4gICAgICAgICAgICAgICAgW10pWzBdO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID1cbiAgICAgICAgICAgIHN0cmluZ0xlbmd0aCAtIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGg7XG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgICAgICAvLyBoYW5kbGUgbWVyaWRpZW1cbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKFxuICAgICAgICAgICAgY29uZmlnLl9sb2NhbGUsXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0sXG4gICAgICAgICAgICBjb25maWcuX21lcmlkaWVtXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGVyYVxuICAgICAgICBlcmEgPSBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmE7XG4gICAgICAgIGlmIChlcmEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IGNvbmZpZy5fbG9jYWxlLmVyYXNDb252ZXJ0WWVhcihlcmEsIGNvbmZpZy5fYVtZRUFSXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIHZhciBpc1BtO1xuXG4gICAgICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuICAgICAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgY3VycmVudFNjb3JlLFxuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCxcbiAgICAgICAgICAgIGJlc3RGb3JtYXRJc1ZhbGlkID0gZmFsc2UsXG4gICAgICAgICAgICBjb25maWdmTGVuID0gY29uZmlnLl9mLmxlbmd0aDtcblxuICAgICAgICBpZiAoY29uZmlnZkxlbiA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZEZvcm1hdCA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZ2ZMZW47IGkrKykge1xuICAgICAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRlbXBDb25maWcgPSBjb3B5Q29uZmlnKHt9LCBjb25maWcpO1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKCFiZXN0Rm9ybWF0SXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCB8fFxuICAgICAgICAgICAgICAgICAgICB2YWxpZEZvcm1hdEZvdW5kXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkRm9ybWF0Rm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RGb3JtYXRJc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKSxcbiAgICAgICAgICAgIGRheU9yRGF0ZSA9IGkuZGF5ID09PSB1bmRlZmluZWQgPyBpLmRhdGUgOiBpLmRheTtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKFxuICAgICAgICAgICAgW2kueWVhciwgaS5tb250aCwgZGF5T3JEYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sXG4gICAgICAgICAgICBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICAgICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQgPT09IHVuZGVmaW5lZCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7IG51bGxJbnB1dDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25maWcuX2kgPSBpbnB1dCA9IGNvbmZpZy5fbG9jYWxlLnByZXBhcnNlKGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3coaW5wdXQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBpZiAoZm9ybWF0ID09PSB0cnVlIHx8IGZvcm1hdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb2NhbGUgPT09IHRydWUgfHwgbG9jYWxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgIChpc0FycmF5KGlucHV0KSAmJiBpbnB1dC5sZW5ndGggPT09IDApXG4gICAgICAgICkge1xuICAgICAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgICAgIGMuX2kgPSBpbnB1dDtcbiAgICAgICAgYy5fZiA9IGZvcm1hdDtcbiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICksXG4gICAgICAgIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAgICAgICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAvLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuICAgIC8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbiAgICAvL1xuICAgIC8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2VcbiAgICAvLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuICAgIGZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgICAgICB2YXIgcmVzLCBpO1xuICAgICAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gbW9tZW50c1swXTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuICAgIGZ1bmN0aW9uIG1pbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXgoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbiAgICB9XG5cbiAgICB2YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogK25ldyBEYXRlKCk7XG4gICAgfTtcblxuICAgIHZhciBvcmRlcmluZyA9IFtcbiAgICAgICAgJ3llYXInLFxuICAgICAgICAncXVhcnRlcicsXG4gICAgICAgICdtb250aCcsXG4gICAgICAgICd3ZWVrJyxcbiAgICAgICAgJ2RheScsXG4gICAgICAgICdob3VyJyxcbiAgICAgICAgJ21pbnV0ZScsXG4gICAgICAgICdzZWNvbmQnLFxuICAgICAgICAnbWlsbGlzZWNvbmQnLFxuICAgIF07XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgICAgICB2YXIga2V5LFxuICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvcmRlckxlbiA9IG9yZGVyaW5nLmxlbmd0aDtcbiAgICAgICAgZm9yIChrZXkgaW4gbSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGhhc093blByb3AobSwga2V5KSAmJlxuICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmRlckxlbjsgKytpKSB7XG4gICAgICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPVxuICAgICAgICAgICAgK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArIHdlZWtzICogNztcbiAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0byB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArIHF1YXJ0ZXJzICogMyArIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNSb3VuZChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKC0xICogbnVtYmVyKSAqIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBvZmZzZXQodG9rZW4sIHNlcGFyYXRvcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgc2lnbiA9ICcrJztcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBzaWduICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgK1xuICAgICAgICAgICAgICAgIHplcm9GaWxsKH5+b2Zmc2V0ICUgNjAsIDIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlciksXG4gICAgICAgICAgICBjaHVuayxcbiAgICAgICAgICAgIHBhcnRzLFxuICAgICAgICAgICAgbWludXRlcztcblxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjaHVuayA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXSB8fCBbXTtcbiAgICAgICAgcGFydHMgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgICAgICBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/IDAgOiBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9XG4gICAgICAgICAgICAgICAgKGlzTW9tZW50KGlucHV0KSB8fCBpc0RhdGUoaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgID8gaW5wdXQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIDogY3JlYXRlTG9jYWwoaW5wdXQpLnZhbHVlT2YoKSkgLSByZXMudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHJlcywgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCkubG9jYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVPZmZzZXQobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbiAgICAvLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbiAgICBob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX29mZnNldCB8fCAwLFxuICAgICAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQgKiA2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIGxvY2FsQWRqdXN0ID0gZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3VidHJhY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRHVyYXRpb24oaW5wdXQgLSBvZmZzZXQsICdtJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gb2Zmc2V0IDogZ2V0RGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFpvbmUoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyhrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzVVRDKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0ID0gaW5wdXQgPyBjcmVhdGVMb2NhbChpbnB1dCkudXRjT2Zmc2V0KCkgOiAwO1xuXG4gICAgICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCgpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGMgPSB7fSxcbiAgICAgICAgICAgIG90aGVyO1xuXG4gICAgICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgICAgIGMgPSBwcmVwYXJlQ29uZmlnKGMpO1xuXG4gICAgICAgIGlmIChjLl9hKSB7XG4gICAgICAgICAgICBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPVxuICAgICAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxuICAgIHZhciBhc3BOZXRSZWdleCA9IC9eKC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKyk6KFxcZCspKD86OihcXGQrKShcXC5cXGQqKT8pPyQvLFxuICAgICAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgICAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgICAgIC8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbiAgICAgICAgaXNvUmVnZXggPVxuICAgICAgICAgICAgL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kLztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtczogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNOiBpbnB1dC5fbW9udGhzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkgfHwgIWlzTmFOKCtpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9ICtpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gK2lucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIGQ6IHRvSW50KG1hdGNoW0RBVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaDogdG9JbnQobWF0Y2hbSE9VUl0pICogc2lnbixcbiAgICAgICAgICAgICAgICBtOiB0b0ludChtYXRjaFtNSU5VVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgczogdG9JbnQobWF0Y2hbU0VDT05EXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduLCAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHk6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdzogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQ6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgbTogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHM6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoXG4gICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksXG4gICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2lzVmFsaWQnKSkge1xuICAgICAgICAgICAgcmV0Ll9pc1ZhbGlkID0gaW5wdXQuX2lzVmFsaWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzbyhpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIHJlcy5tb250aHMgPVxuICAgICAgICAgICAgb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICAgICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAgICAgLS1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICtiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJyk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbiAgICBmdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ21vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRtcCA9IHZhbDtcbiAgICAgICAgICAgICAgICB2YWwgPSBwZXJpb2Q7XG4gICAgICAgICAgICAgICAgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpLFxuICAgICAgICBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nO1xuICAgIH1cblxuICAgIC8vIHR5cGUgTW9tZW50SW5wdXQgPSBNb21lbnQgfCBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyIHwgKG51bWJlciB8IHN0cmluZylbXSB8IE1vbWVudElucHV0T2JqZWN0IHwgdm9pZDsgLy8gbnVsbCB8IHVuZGVmaW5lZFxuICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzTW9tZW50KGlucHV0KSB8fFxuICAgICAgICAgICAgaXNEYXRlKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNTdHJpbmcoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc051bWJlcihpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHx8XG4gICAgICAgICAgICBpbnB1dCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgaW5wdXQgPT09IHVuZGVmaW5lZFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICd5ZWFycycsXG4gICAgICAgICAgICAgICAgJ3llYXInLFxuICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAnbW9udGhzJyxcbiAgICAgICAgICAgICAgICAnbW9udGgnLFxuICAgICAgICAgICAgICAgICdNJyxcbiAgICAgICAgICAgICAgICAnZGF5cycsXG4gICAgICAgICAgICAgICAgJ2RheScsXG4gICAgICAgICAgICAgICAgJ2QnLFxuICAgICAgICAgICAgICAgICdkYXRlcycsXG4gICAgICAgICAgICAgICAgJ2RhdGUnLFxuICAgICAgICAgICAgICAgICdEJyxcbiAgICAgICAgICAgICAgICAnaG91cnMnLFxuICAgICAgICAgICAgICAgICdob3VyJyxcbiAgICAgICAgICAgICAgICAnaCcsXG4gICAgICAgICAgICAgICAgJ21pbnV0ZXMnLFxuICAgICAgICAgICAgICAgICdtaW51dGUnLFxuICAgICAgICAgICAgICAgICdtJyxcbiAgICAgICAgICAgICAgICAnc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICAgICAgICAgJ3MnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZHMnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgICAgICAgICAgICAgJ21zJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICBwcm9wZXJ0eUxlbiA9IHByb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwcm9wZXJ0eUxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0eVRlc3QgPSBwcm9wZXJ0eVRlc3QgfHwgaGFzT3duUHJvcChpbnB1dCwgcHJvcGVydHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iamVjdFRlc3QgJiYgcHJvcGVydHlUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkge1xuICAgICAgICB2YXIgYXJyYXlUZXN0ID0gaXNBcnJheShpbnB1dCksXG4gICAgICAgICAgICBkYXRhVHlwZVRlc3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKGFycmF5VGVzdCkge1xuICAgICAgICAgICAgZGF0YVR5cGVUZXN0ID1cbiAgICAgICAgICAgICAgICBpbnB1dC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpc051bWJlcihpdGVtKSAmJiBpc1N0cmluZyhpbnB1dCk7XG4gICAgICAgICAgICAgICAgfSkubGVuZ3RoID09PSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheVRlc3QgJiYgZGF0YVR5cGVUZXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ2FsZW5kYXJTcGVjKGlucHV0KSB7XG4gICAgICAgIHZhciBvYmplY3RUZXN0ID0gaXNPYmplY3QoaW5wdXQpICYmICFpc09iamVjdEVtcHR5KGlucHV0KSxcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IGZhbHNlLFxuICAgICAgICAgICAgcHJvcGVydGllcyA9IFtcbiAgICAgICAgICAgICAgICAnc2FtZURheScsXG4gICAgICAgICAgICAgICAgJ25leHREYXknLFxuICAgICAgICAgICAgICAgICdsYXN0RGF5JyxcbiAgICAgICAgICAgICAgICAnbmV4dFdlZWsnLFxuICAgICAgICAgICAgICAgICdsYXN0V2VlaycsXG4gICAgICAgICAgICAgICAgJ3NhbWVFbHNlJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcHJvcGVydHk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IHByb3BlcnR5VGVzdCB8fCBoYXNPd25Qcm9wKGlucHV0LCBwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgICAgICB2YXIgZGlmZiA9IG15TW9tZW50LmRpZmYobm93LCAnZGF5cycsIHRydWUpO1xuICAgICAgICByZXR1cm4gZGlmZiA8IC02XG4gICAgICAgICAgICA/ICdzYW1lRWxzZSdcbiAgICAgICAgICAgIDogZGlmZiA8IC0xXG4gICAgICAgICAgICAgID8gJ2xhc3RXZWVrJ1xuICAgICAgICAgICAgICA6IGRpZmYgPCAwXG4gICAgICAgICAgICAgICAgPyAnbGFzdERheSdcbiAgICAgICAgICAgICAgICA6IGRpZmYgPCAxXG4gICAgICAgICAgICAgICAgICA/ICdzYW1lRGF5J1xuICAgICAgICAgICAgICAgICAgOiBkaWZmIDwgMlxuICAgICAgICAgICAgICAgICAgICA/ICduZXh0RGF5J1xuICAgICAgICAgICAgICAgICAgICA6IGRpZmYgPCA3XG4gICAgICAgICAgICAgICAgICAgICAgPyAnbmV4dFdlZWsnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc2FtZUVsc2UnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyJDEodGltZSwgZm9ybWF0cykge1xuICAgICAgICAvLyBTdXBwb3J0IGZvciBzaW5nbGUgcGFyYW1ldGVyLCBmb3JtYXRzIG9ubHkgb3ZlcmxvYWQgdG8gdGhlIGNhbGVuZGFyIGZ1bmN0aW9uXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNNb21lbnRJbnB1dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0NhbGVuZGFyU3BlYyhhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0cyA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICB0aW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY29tcGFyZSB0aGUgc3RhcnQgb2YgdG9kYXksIHZzIHRoaXMuXG4gICAgICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgICAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICAgICAgc29kID0gY2xvbmVXaXRoT2Zmc2V0KG5vdywgdGhpcykuc3RhcnRPZignZGF5JyksXG4gICAgICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZScsXG4gICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgIGZvcm1hdHMgJiZcbiAgICAgICAgICAgICAgICAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pXG4gICAgICAgICAgICAgICAgICAgID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KVxuICAgICAgICAgICAgICAgICAgICA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KFxuICAgICAgICAgICAgb3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBZnRlcihpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JlZm9yZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuKGZyb20sIHRvLCB1bml0cywgaW5jbHVzaXZpdHkpIHtcbiAgICAgICAgdmFyIGxvY2FsRnJvbSA9IGlzTW9tZW50KGZyb20pID8gZnJvbSA6IGNyZWF0ZUxvY2FsKGZyb20pLFxuICAgICAgICAgICAgbG9jYWxUbyA9IGlzTW9tZW50KHRvKSA/IHRvIDogY3JlYXRlTG9jYWwodG8pO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbEZyb20uaXNWYWxpZCgpICYmIGxvY2FsVG8uaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChpbmNsdXNpdml0eVswXSA9PT0gJygnXG4gICAgICAgICAgICAgICAgPyB0aGlzLmlzQWZ0ZXIobG9jYWxGcm9tLCB1bml0cylcbiAgICAgICAgICAgICAgICA6ICF0aGlzLmlzQmVmb3JlKGxvY2FsRnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzFdID09PSAnKSdcbiAgICAgICAgICAgICAgICA/IHRoaXMuaXNCZWZvcmUobG9jYWxUbywgdW5pdHMpXG4gICAgICAgICAgICAgICAgOiAhdGhpcy5pc0FmdGVyKGxvY2FsVG8sIHVuaXRzKSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCksXG4gICAgICAgICAgICBpbnB1dE1zO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJlxuICAgICAgICAgICAgICAgIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckFmdGVyKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsIHVuaXRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckJlZm9yZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZmYoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0LCB6b25lRGVsdGEsIG91dHB1dDtcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMTI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDFlMztcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMFxuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1O1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gODY0ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzRmxvYXQgPyBvdXRwdXQgOiBhYnNGbG9vcihvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoRGlmZihhLCBiKSB7XG4gICAgICAgIGlmIChhLmRhdGUoKSA8IGIuZGF0ZSgpKSB7XG4gICAgICAgICAgICAvLyBlbmQtb2YtbW9udGggY2FsY3VsYXRpb25zIHdvcmsgY29ycmVjdCB3aGVuIHRoZSBzdGFydCBtb250aCBoYXMgbW9yZVxuICAgICAgICAgICAgLy8gZGF5cyB0aGFuIHRoZSBlbmQgbW9udGguXG4gICAgICAgICAgICByZXR1cm4gLW1vbnRoRGlmZihiLCBhKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkaWZmZXJlbmNlIGluIG1vbnRoc1xuICAgICAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMiArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgIGFuY2hvcjIsXG4gICAgICAgICAgICBhZGp1c3Q7XG5cbiAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwO1xuICAgIH1cblxuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSc7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHV0YyA9IGtlZXBPZmZzZXQgIT09IHRydWUsXG4gICAgICAgICAgICBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICAgICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQoXG4gICAgICAgICAgICAgICAgbSxcbiAgICAgICAgICAgICAgICB1dGNcbiAgICAgICAgICAgICAgICAgICAgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJ1xuICAgICAgICAgICAgICAgICAgICA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykpIHtcbiAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgICAgICBpZiAodXRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpICsgdGhpcy51dGNPZmZzZXQoKSAqIDYwICogMTAwMClcbiAgICAgICAgICAgICAgICAgICAgLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1onLCBmb3JtYXRNb21lbnQobSwgJ1onKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgIG0sXG4gICAgICAgICAgICB1dGMgPyAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAgICAgKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gICAgICpcbiAgICAgKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZ1bmMgPSAnbW9tZW50JyxcbiAgICAgICAgICAgIHpvbmUgPSAnJyxcbiAgICAgICAgICAgIHByZWZpeCxcbiAgICAgICAgICAgIHllYXIsXG4gICAgICAgICAgICBkYXRldGltZSxcbiAgICAgICAgICAgIHN1ZmZpeDtcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgICAgICB6b25lID0gJ1onO1xuICAgICAgICB9XG4gICAgICAgIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgICAgIHllYXIgPSAwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkgPyAnWVlZWScgOiAnWVlZWVlZJztcbiAgICAgICAgZGF0ZXRpbWUgPSAnLU1NLUREW1RdSEg6bW06c3MuU1NTJztcbiAgICAgICAgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0KGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlmICghaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpXG4gICAgICAgICAgICAgICAgPyBob29rcy5kZWZhdWx0Rm9ybWF0VXRjXG4gICAgICAgICAgICAgICAgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20odGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHwgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IHRvOiB0aGlzLCBmcm9tOiB0aW1lIH0pXG4gICAgICAgICAgICAgICAgLmxvY2FsZSh0aGlzLmxvY2FsZSgpKVxuICAgICAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8IGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyBmcm9tOiB0aGlzLCB0bzogdGltZSB9KVxuICAgICAgICAgICAgICAgIC5sb2NhbGUodGhpcy5sb2NhbGUoKSlcbiAgICAgICAgICAgICAgICAuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b05vdyh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIC8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbiAgICAvLyBpbnN0YW5jZS4gIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gdGhlIGxvY2FsZSBjb25maWd1cmF0aW9uXG4gICAgLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgIGZ1bmN0aW9uIGxvY2FsZShrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZURhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgdmFyIE1TX1BFUl9TRUNPTkQgPSAxMDAwLFxuICAgICAgICBNU19QRVJfTUlOVVRFID0gNjAgKiBNU19QRVJfU0VDT05ELFxuICAgICAgICBNU19QRVJfSE9VUiA9IDYwICogTVNfUEVSX01JTlVURSxcbiAgICAgICAgTVNfUEVSXzQwMF9ZRUFSUyA9ICgzNjUgKiA0MDAgKyA5NykgKiAyNCAqIE1TX1BFUl9IT1VSO1xuXG4gICAgLy8gYWN0dWFsIG1vZHVsbyAtIGhhbmRsZXMgbmVnYXRpdmUgbnVtYmVycyAoZm9yIGRhdGVzIGJlZm9yZSAxOTcwKTpcbiAgICBmdW5jdGlvbiBtb2QkMShkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgICByZXR1cm4gKChkaXZpZGVuZCAlIGRpdmlzb3IpICsgZGl2aXNvcikgJSBkaXZpc29yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5LCBtLCBkKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1dGNTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIERhdGUuVVRDIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHksIG0sIGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRPZih1bml0cykge1xuICAgICAgICB2YXIgdGltZSwgc3RhcnRPZkRhdGU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEoXG4gICAgICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZih1bml0cykge1xuICAgICAgICB2YXIgdGltZSwgc3RhcnRPZkRhdGU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCkgKyAxLCAwLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSAtICh0aGlzLm1vbnRoKCkgJSAzKSArIDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpICsgMSwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpICsgN1xuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSArIDdcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpICsgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz1cbiAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVIgLVxuICAgICAgICAgICAgICAgICAgICBtb2QkMShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgTVNfUEVSX0hPVVJcbiAgICAgICAgICAgICAgICAgICAgKSAtXG4gICAgICAgICAgICAgICAgICAgIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9NSU5VVEUgLSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lICs9IE1TX1BFUl9TRUNPTkQgLSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaXgoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG0ueWVhcigpLFxuICAgICAgICAgICAgbS5tb250aCgpLFxuICAgICAgICAgICAgbS5kYXRlKCksXG4gICAgICAgICAgICBtLmhvdXIoKSxcbiAgICAgICAgICAgIG0ubWludXRlKCksXG4gICAgICAgICAgICBtLnNlY29uZCgpLFxuICAgICAgICAgICAgbS5taWxsaXNlY29uZCgpLFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogbS55ZWFyKCksXG4gICAgICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICAgICAgaG91cnM6IG0uaG91cnMoKSxcbiAgICAgICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IG0ubWlsbGlzZWNvbmRzKCksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQyKCkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52YWxpZEF0KCkge1xuICAgICAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlucHV0OiB0aGlzLl9pLFxuICAgICAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICAgICBpc1VUQzogdGhpcy5faXNVVEMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTicsIDAsIDAsICdlcmFBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OTicsIDAsIDAsICdlcmFOYW1lJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ05OTk5OJywgMCwgMCwgJ2VyYU5hcnJvdycpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3knLCAxXSwgJ3lvJywgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXknLCAyXSwgMCwgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXl5JywgM10sIDAsICdlcmFZZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3knLCBbJ3l5eXknLCA0XSwgMCwgJ2VyYVllYXInKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ04nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OJywgbWF0Y2hFcmFBYmJyKTtcbiAgICBhZGRSZWdleFRva2VuKCdOTk4nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTk4nLCBtYXRjaEVyYU5hbWUpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTk5OJywgbWF0Y2hFcmFOYXJyb3cpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihcbiAgICAgICAgWydOJywgJ05OJywgJ05OTicsICdOTk5OJywgJ05OTk5OJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIHZhciBlcmEgPSBjb25maWcuX2xvY2FsZS5lcmFzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgICAgICBpZiAoZXJhKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhID0gZXJhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRXJhID0gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgYWRkUmVnZXhUb2tlbigneScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXl5JywgbWF0Y2hVbnNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbigneXl5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3lvJywgbWF0Y2hFcmFZZWFyT3JkaW5hbCk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsneScsICd5eScsICd5eXknLCAneXl5eSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsneW8nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgIGlmIChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCkge1xuICAgICAgICAgICAgbWF0Y2ggPSBpbnB1dC5tYXRjaChjb25maWcuX2xvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZSkge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBjb25maWcuX2xvY2FsZS5lcmFZZWFyT3JkaW5hbFBhcnNlKGlucHV0LCBtYXRjaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXMobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5fZXJhcyB8fCBnZXRMb2NhbGUoJ2VuJykuX2VyYXM7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0uc2luY2UpLnN0YXJ0T2YoJ2RheScpO1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnNpbmNlID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9ICtJbmZpbml0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBkYXRlID0gaG9va3MoZXJhc1tpXS51bnRpbCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBlcmFzW2ldLnVudGlsID0gZGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcmFzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUVyYXNQYXJzZShlcmFOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCksXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYWJicixcbiAgICAgICAgICAgIG5hcnJvdztcbiAgICAgICAgZXJhTmFtZSA9IGVyYU5hbWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIG5hbWUgPSBlcmFzW2ldLm5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGFiYnIgPSBlcmFzW2ldLmFiYnIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIG5hcnJvdyA9IGVyYXNbaV0ubmFycm93LnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk4nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFiYnIgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYXJyb3cgPT09IGVyYU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW25hbWUsIGFiYnIsIG5hcnJvd10uaW5kZXhPZihlcmFOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzQ29udmVydFllYXIoZXJhLCB5ZWFyKSB7XG4gICAgICAgIHZhciBkaXIgPSBlcmEuc2luY2UgPD0gZXJhLnVudGlsID8gKzEgOiAtMTtcbiAgICAgICAgaWYgKHllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhvb2tzKGVyYS5zaW5jZSkueWVhcigpICsgKHllYXIgLSBlcmEub2Zmc2V0KSAqIGRpcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYU5hbWUoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKGVyYXNbaV0uc2luY2UgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnVudGlsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0ubmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhTmFycm93KCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnVudGlsIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS5zaW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hcnJvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFBYmJyKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLmFiYnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYVllYXIoKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGRpcixcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIGVyYXMgPSB0aGlzLmxvY2FsZURhdGEoKS5lcmFzKCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgZGlyID0gZXJhc1tpXS5zaW5jZSA8PSBlcmFzW2ldLnVudGlsID8gKzEgOiAtMTtcblxuICAgICAgICAgICAgLy8gdHJ1bmNhdGUgdGltZVxuICAgICAgICAgICAgdmFsID0gdGhpcy5jbG9uZSgpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkgfHxcbiAgICAgICAgICAgICAgICAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAodGhpcy55ZWFyKCkgLSBob29rcyhlcmFzW2ldLnNpbmNlKS55ZWFyKCkpICogZGlyICtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS5vZmZzZXRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNOYW1lUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfZXJhc05hbWVSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hbWVSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzQWJiclJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNBYmJyUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNBYmJyUmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYXJyb3dSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlRXJhc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzU3RyaWN0ID8gdGhpcy5fZXJhc05hcnJvd1JlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhQWJicihpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc0FiYnJSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFOYW1lKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5lcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYU5hcnJvdyhpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc05hcnJvd1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYVllYXJPcmRpbmFsKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5fZXJhWWVhck9yZGluYWxSZWdleCB8fCBtYXRjaFVuc2lnbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVFcmFzUGFyc2UoKSB7XG4gICAgICAgIHZhciBhYmJyUGllY2VzID0gW10sXG4gICAgICAgICAgICBuYW1lUGllY2VzID0gW10sXG4gICAgICAgICAgICBuYXJyb3dQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIGVyYXNOYW1lLFxuICAgICAgICAgICAgZXJhc0FiYnIsXG4gICAgICAgICAgICBlcmFzTmFycm93LFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBlcmFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgICAgZXJhc05hbWUgPSByZWdleEVzY2FwZShlcmFzW2ldLm5hbWUpO1xuICAgICAgICAgICAgZXJhc0FiYnIgPSByZWdleEVzY2FwZShlcmFzW2ldLmFiYnIpO1xuICAgICAgICAgICAgZXJhc05hcnJvdyA9IHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFycm93KTtcblxuICAgICAgICAgICAgbmFtZVBpZWNlcy5wdXNoKGVyYXNOYW1lKTtcbiAgICAgICAgICAgIGFiYnJQaWVjZXMucHVzaChlcmFzQWJicik7XG4gICAgICAgICAgICBuYXJyb3dQaWVjZXMucHVzaChlcmFzTmFycm93KTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goZXJhc05hbWUpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChlcmFzQWJicik7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGVyYXNOYXJyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZXJhc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzTmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbmFtZVBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNBYmJyUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBhYmJyUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc05hcnJvd1JlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBuYXJyb3dQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4odG9rZW4sIGdldHRlcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG4gICAgfVxuXG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2dnJywgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdHJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2cnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHRycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oXG4gICAgICAgIFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sXG4gICAgICAgIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2cnLCAnR0cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgIHRoaXMud2Vla2RheSgpICsgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93LFxuICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2Vla1llYXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICB0aGlzLmlzb1dlZWsoKSxcbiAgICAgICAgICAgIHRoaXMuaXNvV2Vla2RheSgpLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luSVNPV2Vla1llYXIoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLmlzb1dlZWtZZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJbldlZWtZZWFyKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMud2Vla1llYXIoKSwgd2Vla0luZm8uZG93LCB3ZWVrSW5mby5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla3NUYXJnZXQ7XG4gICAgICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICB3ZWVrID0gd2Vla3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyRGF0YSA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICAgICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIHRoaXMubW9udGgoZGF0ZS5nZXRVVENNb250aCgpKTtcbiAgICAgICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG4gICAgYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGxcbiAgICAgICAgICAgID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpXG4gICAgICAgICAgICA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgKHRoaXMubW9udGgoKSAlIDMpKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0QnLCBtYXRjaDF0bzIsIG1hdGNoMXRvMk5vTGVhZGluZ1plcm8pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICByZXR1cm4gaXNTdHJpY3RcbiAgICAgICAgICAgID8gbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIHx8IGxvY2FsZS5fb3JkaW5hbFBhcnNlXG4gICAgICAgICAgICA6IGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbiAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdKTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0RERCcsIG1hdGNoMXRvMyk7XG4gICAgYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mWWVhcihpbnB1dCkge1xuICAgICAgICB2YXIgZGF5T2ZZZWFyID1cbiAgICAgICAgICAgIE1hdGgucm91bmQoXG4gICAgICAgICAgICAgICAgKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTVcbiAgICAgICAgICAgICkgKyAxO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKGlucHV0IC0gZGF5T2ZZZWFyLCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdtJywgbWF0Y2gxdG8yLCBtYXRjaDF0bzJIYXNaZXJvKTtcbiAgICBhZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnbScsICdtbSddLCBNSU5VVEUpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigncycsIG1hdGNoMXRvMiwgbWF0Y2gxdG8ySGFzWmVybyk7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCBtYXRjaDF0bzMsIG1hdGNoMSk7XG4gICAgYWRkUmVnZXhUb2tlbignU1MnLCBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG4gICAgdmFyIHRva2VuLCBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG5cbiAgICBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJicigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRab25lTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5hZGQgPSBhZGQ7XG4gICAgcHJvdG8uY2FsZW5kYXIgPSBjYWxlbmRhciQxO1xuICAgIHByb3RvLmNsb25lID0gY2xvbmU7XG4gICAgcHJvdG8uZGlmZiA9IGRpZmY7XG4gICAgcHJvdG8uZW5kT2YgPSBlbmRPZjtcbiAgICBwcm90by5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgcHJvdG8uZnJvbSA9IGZyb207XG4gICAgcHJvdG8uZnJvbU5vdyA9IGZyb21Ob3c7XG4gICAgcHJvdG8udG8gPSB0bztcbiAgICBwcm90by50b05vdyA9IHRvTm93O1xuICAgIHByb3RvLmdldCA9IHN0cmluZ0dldDtcbiAgICBwcm90by5pbnZhbGlkQXQgPSBpbnZhbGlkQXQ7XG4gICAgcHJvdG8uaXNBZnRlciA9IGlzQWZ0ZXI7XG4gICAgcHJvdG8uaXNCZWZvcmUgPSBpc0JlZm9yZTtcbiAgICBwcm90by5pc0JldHdlZW4gPSBpc0JldHdlZW47XG4gICAgcHJvdG8uaXNTYW1lID0gaXNTYW1lO1xuICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgPSBpc1NhbWVPckFmdGVyO1xuICAgIHByb3RvLmlzU2FtZU9yQmVmb3JlID0gaXNTYW1lT3JCZWZvcmU7XG4gICAgcHJvdG8uaXNWYWxpZCA9IGlzVmFsaWQkMjtcbiAgICBwcm90by5sYW5nID0gbGFuZztcbiAgICBwcm90by5sb2NhbGUgPSBsb2NhbGU7XG4gICAgcHJvdG8ubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG4gICAgcHJvdG8ubWF4ID0gcHJvdG90eXBlTWF4O1xuICAgIHByb3RvLm1pbiA9IHByb3RvdHlwZU1pbjtcbiAgICBwcm90by5wYXJzaW5nRmxhZ3MgPSBwYXJzaW5nRmxhZ3M7XG4gICAgcHJvdG8uc2V0ID0gc3RyaW5nU2V0O1xuICAgIHByb3RvLnN0YXJ0T2YgPSBzdGFydE9mO1xuICAgIHByb3RvLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgcHJvdG8udG9BcnJheSA9IHRvQXJyYXk7XG4gICAgcHJvdG8udG9PYmplY3QgPSB0b09iamVjdDtcbiAgICBwcm90by50b0RhdGUgPSB0b0RhdGU7XG4gICAgcHJvdG8udG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZztcbiAgICBwcm90by5pbnNwZWN0ID0gaW5zcGVjdDtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLmZvciAhPSBudWxsKSB7XG4gICAgICAgIHByb3RvW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdNb21lbnQ8JyArIHRoaXMuZm9ybWF0KCkgKyAnPic7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHByb3RvLnRvSlNPTiA9IHRvSlNPTjtcbiAgICBwcm90by50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIHByb3RvLnVuaXggPSB1bml4O1xuICAgIHByb3RvLnZhbHVlT2YgPSB2YWx1ZU9mO1xuICAgIHByb3RvLmNyZWF0aW9uRGF0YSA9IGNyZWF0aW9uRGF0YTtcbiAgICBwcm90by5lcmFOYW1lID0gZ2V0RXJhTmFtZTtcbiAgICBwcm90by5lcmFOYXJyb3cgPSBnZXRFcmFOYXJyb3c7XG4gICAgcHJvdG8uZXJhQWJiciA9IGdldEVyYUFiYnI7XG4gICAgcHJvdG8uZXJhWWVhciA9IGdldEVyYVllYXI7XG4gICAgcHJvdG8ueWVhciA9IGdldFNldFllYXI7XG4gICAgcHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG4gICAgcHJvdG8ud2Vla1llYXIgPSBnZXRTZXRXZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuICAgIHByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG4gICAgcHJvdG8ubW9udGggPSBnZXRTZXRNb250aDtcbiAgICBwcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuICAgIHByb3RvLndlZWsgPSBwcm90by53ZWVrcyA9IGdldFNldFdlZWs7XG4gICAgcHJvdG8uaXNvV2VlayA9IHByb3RvLmlzb1dlZWtzID0gZ2V0U2V0SVNPV2VlaztcbiAgICBwcm90by53ZWVrc0luWWVhciA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIHByb3RvLndlZWtzSW5XZWVrWWVhciA9IGdldFdlZWtzSW5XZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5JU09XZWVrWWVhciA9IGdldElTT1dlZWtzSW5JU09XZWVrWWVhcjtcbiAgICBwcm90by5kYXRlID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBwcm90by5kYXkgPSBwcm90by5kYXlzID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIHByb3RvLndlZWtkYXkgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG4gICAgcHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbiAgICBwcm90by5kYXlPZlllYXIgPSBnZXRTZXREYXlPZlllYXI7XG4gICAgcHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcbiAgICBwcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG4gICAgcHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBwcm90by51dGNPZmZzZXQgPSBnZXRTZXRPZmZzZXQ7XG4gICAgcHJvdG8udXRjID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgcHJvdG8ubG9jYWwgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIHByb3RvLnBhcnNlWm9uZSA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgcHJvdG8uaXNEU1QgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBwcm90by5pc0xvY2FsID0gaXNMb2NhbDtcbiAgICBwcm90by5pc1V0Y09mZnNldCA9IGlzVXRjT2Zmc2V0O1xuICAgIHByb3RvLmlzVXRjID0gaXNVdGM7XG4gICAgcHJvdG8uaXNVVEMgPSBpc1V0YztcbiAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIHByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG4gICAgcHJvdG8uZGF0ZXMgPSBkZXByZWNhdGUoXG4gICAgICAgICdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsXG4gICAgICAgIGdldFNldERheU9mTW9udGhcbiAgICApO1xuICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsXG4gICAgICAgIGdldFNldE1vbnRoXG4gICAgKTtcbiAgICBwcm90by55ZWFycyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLFxuICAgICAgICBnZXRTZXRZZWFyXG4gICAgKTtcbiAgICBwcm90by56b25lID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLFxuICAgICAgICBnZXRTZXRab25lXG4gICAgKTtcbiAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoXG4gICAgICAgICdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJyxcbiAgICAgICAgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkXG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXgoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5ab25lKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMS5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90byQxLmludmFsaWREYXRlID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG8kMS5vcmRpbmFsID0gb3JkaW5hbDtcbiAgICBwcm90byQxLnByZXBhcnNlID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucG9zdGZvcm1hdCA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnJlbGF0aXZlVGltZSA9IHJlbGF0aXZlVGltZTtcbiAgICBwcm90byQxLnBhc3RGdXR1cmUgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvJDEuc2V0ID0gc2V0O1xuICAgIHByb3RvJDEuZXJhcyA9IGxvY2FsZUVyYXM7XG4gICAgcHJvdG8kMS5lcmFzUGFyc2UgPSBsb2NhbGVFcmFzUGFyc2U7XG4gICAgcHJvdG8kMS5lcmFzQ29udmVydFllYXIgPSBsb2NhbGVFcmFzQ29udmVydFllYXI7XG4gICAgcHJvdG8kMS5lcmFzQWJiclJlZ2V4ID0gZXJhc0FiYnJSZWdleDtcbiAgICBwcm90byQxLmVyYXNOYW1lUmVnZXggPSBlcmFzTmFtZVJlZ2V4O1xuICAgIHByb3RvJDEuZXJhc05hcnJvd1JlZ2V4ID0gZXJhc05hcnJvd1JlZ2V4O1xuXG4gICAgcHJvdG8kMS5tb250aHMgPSBsb2NhbGVNb250aHM7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydCA9IGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvJDEubW9udGhzUGFyc2UgPSBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90byQxLm1vbnRoc1JlZ2V4ID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ID0gbW9udGhzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICBwcm90byQxLndlZWtkYXlzID0gbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pbiA9IGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCA9IGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1BhcnNlID0gbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIHByb3RvJDEud2Vla2RheXNSZWdleCA9IHdlZWtkYXlzUmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggPSB3ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ID0gd2Vla2RheXNNaW5SZWdleDtcblxuICAgIHByb3RvJDEuaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG4gICAgZnVuY3Rpb24gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvLyAoKVxuICAgIC8vICg1KVxuICAgIC8vIChmbXQsIDUpXG4gICAgLy8gKGZtdClcbiAgICAvLyAodHJ1ZSlcbiAgICAvLyAodHJ1ZSwgNSlcbiAgICAvLyAodHJ1ZSwgZm10LCA1KVxuICAgIC8vICh0cnVlLCBmbXQpXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBsb2NhbGVTb3J0ZWQ7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvdXQgPSBbXTtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRocyhmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0KGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyhsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbihsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbiAgICB9XG5cbiAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBlcmFzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAxLTAxLTAxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogK0luZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQW5ubyBEb21pbmknLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0FEJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQUQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDAtMTItMzEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdCZWZvcmUgQ2hyaXN0JyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdCQycsXG4gICAgICAgICAgICAgICAgYWJicjogJ0JDJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIHRvSW50KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLFxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGVcbiAgICApO1xuICAgIGhvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsXG4gICAgICAgIGdldExvY2FsZVxuICAgICk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gYWJzKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdGhpcy5fbW9udGhzID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICAgICAgZGF0YS5tb250aHMgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QkMShkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gYWRkJDEoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzLFxuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzLFxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2RhdGEsXG4gICAgICAgICAgICBzZWNvbmRzLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgeWVhcnMsXG4gICAgICAgICAgICBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMClcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gKGRheXMgKiA0ODAwKSAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gKG1vbnRocyAqIDE0NjA5NykgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzKHVuaXRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXMsXG4gICAgICAgICAgICBtb250aHMsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHM7XG4gICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHMgLyAzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAvIDcgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiAyNCArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiAxNDQwICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUFzKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpLFxuICAgICAgICBhc1NlY29uZHMgPSBtYWtlQXMoJ3MnKSxcbiAgICAgICAgYXNNaW51dGVzID0gbWFrZUFzKCdtJyksXG4gICAgICAgIGFzSG91cnMgPSBtYWtlQXMoJ2gnKSxcbiAgICAgICAgYXNEYXlzID0gbWFrZUFzKCdkJyksXG4gICAgICAgIGFzV2Vla3MgPSBtYWtlQXMoJ3cnKSxcbiAgICAgICAgYXNNb250aHMgPSBtYWtlQXMoJ00nKSxcbiAgICAgICAgYXNRdWFydGVycyA9IG1ha2VBcygnUScpLFxuICAgICAgICBhc1llYXJzID0gbWFrZUFzKCd5JyksXG4gICAgICAgIHZhbHVlT2YkMSA9IGFzTWlsbGlzZWNvbmRzO1xuXG4gICAgZnVuY3Rpb24gY2xvbmUkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCQyKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyksXG4gICAgICAgIHNlY29uZHMgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyksXG4gICAgICAgIG1pbnV0ZXMgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyksXG4gICAgICAgIGhvdXJzID0gbWFrZUdldHRlcignaG91cnMnKSxcbiAgICAgICAgZGF5cyA9IG1ha2VHZXR0ZXIoJ2RheXMnKSxcbiAgICAgICAgbW9udGhzID0gbWFrZUdldHRlcignbW9udGhzJyksXG4gICAgICAgIHllYXJzID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgICB0aHJlc2hvbGRzID0ge1xuICAgICAgICAgICAgc3M6IDQ0LCAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICAgICAgICAgIHM6IDQ1LCAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICAgICAgbTogNDUsIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICAgICAgaDogMjIsIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICAgICAgZDogMjYsIC8vIGRheXMgdG8gbW9udGgvd2Vla1xuICAgICAgICAgICAgdzogbnVsbCwgLy8gd2Vla3MgdG8gbW9udGhcbiAgICAgICAgICAgIE06IDExLCAvLyBtb250aHMgdG8geWVhclxuICAgICAgICB9O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUkMShwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgdGhyZXNob2xkcywgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKSxcbiAgICAgICAgICAgIHNlY29uZHMgPSByb3VuZChkdXJhdGlvbi5hcygncycpKSxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKSxcbiAgICAgICAgICAgIGhvdXJzID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSksXG4gICAgICAgICAgICBkYXlzID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSksXG4gICAgICAgICAgICBtb250aHMgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKSxcbiAgICAgICAgICAgIHdlZWtzID0gcm91bmQoZHVyYXRpb24uYXMoJ3cnKSksXG4gICAgICAgICAgICB5ZWFycyA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpLFxuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgKHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSkgfHxcbiAgICAgICAgICAgICAgICAoc2Vjb25kcyA8IHRocmVzaG9sZHMucyAmJiBbJ3NzJywgc2Vjb25kc10pIHx8XG4gICAgICAgICAgICAgICAgKG1pbnV0ZXMgPD0gMSAmJiBbJ20nXSkgfHxcbiAgICAgICAgICAgICAgICAobWludXRlcyA8IHRocmVzaG9sZHMubSAmJiBbJ21tJywgbWludXRlc10pIHx8XG4gICAgICAgICAgICAgICAgKGhvdXJzIDw9IDEgJiYgWydoJ10pIHx8XG4gICAgICAgICAgICAgICAgKGhvdXJzIDwgdGhyZXNob2xkcy5oICYmIFsnaGgnLCBob3Vyc10pIHx8XG4gICAgICAgICAgICAgICAgKGRheXMgPD0gMSAmJiBbJ2QnXSkgfHxcbiAgICAgICAgICAgICAgICAoZGF5cyA8IHRocmVzaG9sZHMuZCAmJiBbJ2RkJywgZGF5c10pO1xuXG4gICAgICAgIGlmICh0aHJlc2hvbGRzLncgIT0gbnVsbCkge1xuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgYSB8fFxuICAgICAgICAgICAgICAgICh3ZWVrcyA8PSAxICYmIFsndyddKSB8fFxuICAgICAgICAgICAgICAgICh3ZWVrcyA8IHRocmVzaG9sZHMudyAmJiBbJ3d3Jywgd2Vla3NdKTtcbiAgICAgICAgfVxuICAgICAgICBhID0gYSB8fFxuICAgICAgICAgICAgKG1vbnRocyA8PSAxICYmIFsnTSddKSB8fFxuICAgICAgICAgICAgKG1vbnRocyA8IHRocmVzaG9sZHMuTSAmJiBbJ01NJywgbW9udGhzXSkgfHxcbiAgICAgICAgICAgICh5ZWFycyA8PSAxICYmIFsneSddKSB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgICAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICAgICAgYVs0XSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyhyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJvdW5kaW5nRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh1bWFuaXplKGFyZ1dpdGhTdWZmaXgsIGFyZ1RocmVzaG9sZHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgd2l0aFN1ZmZpeCA9IGZhbHNlLFxuICAgICAgICAgICAgdGggPSB0aHJlc2hvbGRzLFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGFyZ1RocmVzaG9sZHMgPSBhcmdXaXRoU3VmZml4O1xuICAgICAgICAgICAgYXJnV2l0aFN1ZmZpeCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB3aXRoU3VmZml4ID0gYXJnV2l0aFN1ZmZpeDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ1RocmVzaG9sZHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aCA9IE9iamVjdC5hc3NpZ24oe30sIHRocmVzaG9sZHMsIGFyZ1RocmVzaG9sZHMpO1xuICAgICAgICAgICAgaWYgKGFyZ1RocmVzaG9sZHMucyAhPSBudWxsICYmIGFyZ1RocmVzaG9sZHMuc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoLnNzID0gYXJnVGhyZXNob2xkcy5zIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgdGgsIGxvY2FsZSk7XG5cbiAgICAgICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICAgICAgcmV0dXJuICh4ID4gMCkgLSAoeCA8IDApIHx8ICt4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDAsXG4gICAgICAgICAgICBkYXlzID0gYWJzJDEodGhpcy5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnMkMSh0aGlzLl9tb250aHMpLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgeWVhcnMsXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpLFxuICAgICAgICAgICAgdG90YWxTaWduLFxuICAgICAgICAgICAgeW1TaWduLFxuICAgICAgICAgICAgZGF5c1NpZ24sXG4gICAgICAgICAgICBobXNTaWduO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG5cbiAgICAgICAgdG90YWxTaWduID0gdG90YWwgPCAwID8gJy0nIDogJyc7XG4gICAgICAgIHltU2lnbiA9IHNpZ24odGhpcy5fbW9udGhzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICBobXNTaWduID0gc2lnbih0aGlzLl9taWxsaXNlY29uZHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0b3RhbFNpZ24gK1xuICAgICAgICAgICAgJ1AnICtcbiAgICAgICAgICAgICh5ZWFycyA/IHltU2lnbiArIHllYXJzICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChtb250aHMgPyB5bVNpZ24gKyBtb250aHMgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKGRheXMgPyBkYXlzU2lnbiArIGRheXMgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKGhvdXJzIHx8IG1pbnV0ZXMgfHwgc2Vjb25kcyA/ICdUJyA6ICcnKSArXG4gICAgICAgICAgICAoaG91cnMgPyBobXNTaWduICsgaG91cnMgKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG1pbnV0ZXMgPyBobXNTaWduICsgbWludXRlcyArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoc2Vjb25kcyA/IGhtc1NpZ24gKyBzICsgJ1MnIDogJycpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBwcm90byQyLmlzVmFsaWQgPSBpc1ZhbGlkJDE7XG4gICAgcHJvdG8kMi5hYnMgPSBhYnM7XG4gICAgcHJvdG8kMi5hZGQgPSBhZGQkMTtcbiAgICBwcm90byQyLnN1YnRyYWN0ID0gc3VidHJhY3QkMTtcbiAgICBwcm90byQyLmFzID0gYXM7XG4gICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuYXNTZWNvbmRzID0gYXNTZWNvbmRzO1xuICAgIHByb3RvJDIuYXNNaW51dGVzID0gYXNNaW51dGVzO1xuICAgIHByb3RvJDIuYXNIb3VycyA9IGFzSG91cnM7XG4gICAgcHJvdG8kMi5hc0RheXMgPSBhc0RheXM7XG4gICAgcHJvdG8kMi5hc1dlZWtzID0gYXNXZWVrcztcbiAgICBwcm90byQyLmFzTW9udGhzID0gYXNNb250aHM7XG4gICAgcHJvdG8kMi5hc1F1YXJ0ZXJzID0gYXNRdWFydGVycztcbiAgICBwcm90byQyLmFzWWVhcnMgPSBhc1llYXJzO1xuICAgIHByb3RvJDIudmFsdWVPZiA9IHZhbHVlT2YkMTtcbiAgICBwcm90byQyLl9idWJibGUgPSBidWJibGU7XG4gICAgcHJvdG8kMi5jbG9uZSA9IGNsb25lJDE7XG4gICAgcHJvdG8kMi5nZXQgPSBnZXQkMjtcbiAgICBwcm90byQyLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLnNlY29uZHMgPSBzZWNvbmRzO1xuICAgIHByb3RvJDIubWludXRlcyA9IG1pbnV0ZXM7XG4gICAgcHJvdG8kMi5ob3VycyA9IGhvdXJzO1xuICAgIHByb3RvJDIuZGF5cyA9IGRheXM7XG4gICAgcHJvdG8kMi53ZWVrcyA9IHdlZWtzO1xuICAgIHByb3RvJDIubW9udGhzID0gbW9udGhzO1xuICAgIHByb3RvJDIueWVhcnMgPSB5ZWFycztcbiAgICBwcm90byQyLmh1bWFuaXplID0gaHVtYW5pemU7XG4gICAgcHJvdG8kMi50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b1N0cmluZyA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b0pTT04gPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIubG9jYWxlID0gbG9jYWxlO1xuICAgIHByb3RvJDIubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG5cbiAgICBwcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLFxuICAgICAgICB0b0lTT1N0cmluZyQxXG4gICAgKTtcbiAgICBwcm90byQyLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQpICogMTAwMCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xuICAgIH0pO1xuXG4gICAgLy8hIG1vbWVudC5qc1xuXG4gICAgaG9va3MudmVyc2lvbiA9ICcyLjMwLjEnO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuICAgIGhvb2tzLmZuID0gcHJvdG87XG4gICAgaG9va3MubWluID0gbWluO1xuICAgIGhvb2tzLm1heCA9IG1heDtcbiAgICBob29rcy5ub3cgPSBub3c7XG4gICAgaG9va3MudXRjID0gY3JlYXRlVVRDO1xuICAgIGhvb2tzLnVuaXggPSBjcmVhdGVVbml4O1xuICAgIGhvb2tzLm1vbnRocyA9IGxpc3RNb250aHM7XG4gICAgaG9va3MuaXNEYXRlID0gaXNEYXRlO1xuICAgIGhvb2tzLmxvY2FsZSA9IGdldFNldEdsb2JhbExvY2FsZTtcbiAgICBob29rcy5pbnZhbGlkID0gY3JlYXRlSW52YWxpZDtcbiAgICBob29rcy5kdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGhvb2tzLmlzTW9tZW50ID0gaXNNb21lbnQ7XG4gICAgaG9va3Mud2Vla2RheXMgPSBsaXN0V2Vla2RheXM7XG4gICAgaG9va3MucGFyc2Vab25lID0gY3JlYXRlSW5ab25lO1xuICAgIGhvb2tzLmxvY2FsZURhdGEgPSBnZXRMb2NhbGU7XG4gICAgaG9va3MuaXNEdXJhdGlvbiA9IGlzRHVyYXRpb247XG4gICAgaG9va3MubW9udGhzU2hvcnQgPSBsaXN0TW9udGhzU2hvcnQ7XG4gICAgaG9va3Mud2Vla2RheXNNaW4gPSBsaXN0V2Vla2RheXNNaW47XG4gICAgaG9va3MuZGVmaW5lTG9jYWxlID0gZGVmaW5lTG9jYWxlO1xuICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSA9IHVwZGF0ZUxvY2FsZTtcbiAgICBob29rcy5sb2NhbGVzID0gbGlzdExvY2FsZXM7XG4gICAgaG9va3Mud2Vla2RheXNTaG9ydCA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzID0gbm9ybWFsaXplVW5pdHM7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG4gICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgPSBnZXRDYWxlbmRhckZvcm1hdDtcbiAgICBob29rcy5wcm90b3R5cGUgPSBwcm90bztcblxuICAgIC8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG4gICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIERBVEU6ICdZWVlZLU1NLUREJywgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgVElNRTogJ0hIOm1tJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5cbiAgICAgICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBXRUVLOiAnR0dHRy1bV11XVycsIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgIE1PTlRIOiAnWVlZWS1NTScsIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgIH07XG5cbiAgICByZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCBjb3B5IGZyb20gJ2Zhc3QtY29weSc7XG5pbXBvcnQgcXMgZnJvbSAncXMnO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gJ2xvZGFzaC5pc3N0cmluZyc7XG5pbXBvcnQgcFRocm90dGxlIGZyb20gJ3AtdGhyb3R0bGUnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnbG9kYXNoLmlzcGxhaW5vYmplY3QnO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF93cmFwUmVnRXhwKCkge1xuICBfd3JhcFJlZ0V4cCA9IGZ1bmN0aW9uIChyZSwgZ3JvdXBzKSB7XG4gICAgcmV0dXJuIG5ldyBCYWJlbFJlZ0V4cChyZSwgdm9pZCAwLCBncm91cHMpO1xuICB9O1xuXG4gIHZhciBfc3VwZXIgPSBSZWdFeHAucHJvdG90eXBlLFxuICAgICAgX2dyb3VwcyA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgZnVuY3Rpb24gQmFiZWxSZWdFeHAocmUsIGZsYWdzLCBncm91cHMpIHtcbiAgICB2YXIgX3RoaXMgPSBuZXcgUmVnRXhwKHJlLCBmbGFncyk7XG5cbiAgICByZXR1cm4gX2dyb3Vwcy5zZXQoX3RoaXMsIGdyb3VwcyB8fCBfZ3JvdXBzLmdldChyZSkpLCBfc2V0UHJvdG90eXBlT2YoX3RoaXMsIEJhYmVsUmVnRXhwLnByb3RvdHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEdyb3VwcyhyZXN1bHQsIHJlKSB7XG4gICAgdmFyIGcgPSBfZ3JvdXBzLmdldChyZSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZykucmVkdWNlKGZ1bmN0aW9uIChncm91cHMsIG5hbWUpIHtcbiAgICAgIHJldHVybiBncm91cHNbbmFtZV0gPSByZXN1bHRbZ1tuYW1lXV0sIGdyb3VwcztcbiAgICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgfVxuXG4gIHJldHVybiBfaW5oZXJpdHMoQmFiZWxSZWdFeHAsIFJlZ0V4cCksIEJhYmVsUmVnRXhwLnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciByZXN1bHQgPSBfc3VwZXIuZXhlYy5jYWxsKHRoaXMsIHN0cik7XG5cbiAgICByZXR1cm4gcmVzdWx0ICYmIChyZXN1bHQuZ3JvdXBzID0gYnVpbGRHcm91cHMocmVzdWx0LCB0aGlzKSksIHJlc3VsdDtcbiAgfSwgQmFiZWxSZWdFeHAucHJvdG90eXBlW1N5bWJvbC5yZXBsYWNlXSA9IGZ1bmN0aW9uIChzdHIsIHN1YnN0aXR1dGlvbikge1xuICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBzdWJzdGl0dXRpb24pIHtcbiAgICAgIHZhciBncm91cHMgPSBfZ3JvdXBzLmdldCh0aGlzKTtcblxuICAgICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIHN1YnN0aXR1dGlvbi5yZXBsYWNlKC9cXCQ8KFtePl0rKT4vZywgZnVuY3Rpb24gKF8sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiJFwiICsgZ3JvdXBzW25hbWVdO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHN1YnN0aXR1dGlvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiBcIm9iamVjdFwiICE9IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gJiYgKGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3MpKS5wdXNoKGJ1aWxkR3JvdXBzKGFyZ3MsIF90aGlzKSksIHN1YnN0aXR1dGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBzdWJzdGl0dXRpb24pO1xuICB9LCBfd3JhcFJlZ0V4cC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKF9pID09IG51bGwpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG5cbiAgdmFyIF9zLCBfZTtcblxuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICByZXR1cm4gYXJyMjtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHtcbiAgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKCFpdCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGlmIChpdCkgbyA9IGl0O1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzOiBGLFxuICAgICAgICBuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogb1tpKytdXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9LFxuICAgICAgICBmOiBGXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgfVxuXG4gIHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSxcbiAgICAgIGRpZEVyciA9IGZhbHNlLFxuICAgICAgZXJyO1xuICByZXR1cm4ge1xuICAgIHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0ID0gaXQuY2FsbChvKTtcbiAgICB9LFxuICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpO1xuICAgICAgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTtcbiAgICAgIHJldHVybiBzdGVwO1xuICAgIH0sXG4gICAgZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGRpZEVyciA9IHRydWU7XG4gICAgICBlcnIgPSBlO1xuICAgIH0sXG4gICAgZjogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChkaWRFcnIpIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzTm9kZSgpIHtcbiAgLyoqXG4gICAqIFBvbHlmaWxscyBvZiAncHJvY2VzcycgbWlnaHQgc2V0IHByb2Nlc3MuYnJvd3NlciA9PT0gdHJ1ZVxuICAgKlxuICAgKiBTZWU6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL25vZGUtbGlicy1icm93c2VyL2Jsb2IvbWFzdGVyL21vY2svcHJvY2Vzcy5qcyNMOFxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vZGVmdW5jdHpvbWJpZS9ub2RlLXByb2Nlc3MvYmxvYi9tYXN0ZXIvYnJvd3Nlci5qcyNMMTU2XG4gICAqKi9cbiAgcmV0dXJuIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAhcHJvY2Vzcy5icm93c2VyO1xufVxuZnVuY3Rpb24gaXNSZWFjdE5hdGl2ZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICduYXZpZ2F0b3InIGluIHdpbmRvdyAmJiAncHJvZHVjdCcgaW4gd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZSc7XG59XG5mdW5jdGlvbiBnZXROb2RlVmVyc2lvbigpIHtcbiAgcmV0dXJuIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlID8gXCJ2XCIuY29uY2F0KHByb2Nlc3MudmVyc2lvbnMubm9kZSkgOiBwcm9jZXNzLnZlcnNpb247XG59XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gIHJldHVybiB3aW5kb3c7XG59XG5mdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG52YXIgUEVSQ0VOVEFHRV9SRUdFWCA9IC8qI19fUFVSRV9fKi9fd3JhcFJlZ0V4cCgvKFswLTldKykoJSkvLCB7XG4gIHZhbHVlOiAxXG59KTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlTGltaXQodHlwZSkge1xuICB2YXIgbWF4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA3O1xuICB2YXIgbGltaXQgPSBtYXg7XG5cbiAgaWYgKFBFUkNFTlRBR0VfUkVHRVgudGVzdCh0eXBlKSkge1xuICAgIHZhciBfdHlwZSRtYXRjaDtcblxuICAgIHZhciBncm91cHMgPSAoX3R5cGUkbWF0Y2ggPSB0eXBlLm1hdGNoKFBFUkNFTlRBR0VfUkVHRVgpKSA9PT0gbnVsbCB8fCBfdHlwZSRtYXRjaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3R5cGUkbWF0Y2guZ3JvdXBzO1xuXG4gICAgaWYgKGdyb3VwcyAmJiBncm91cHMudmFsdWUpIHtcbiAgICAgIHZhciBwZXJjZW50YWdlID0gcGFyc2VJbnQoZ3JvdXBzLnZhbHVlKSAvIDEwMDtcbiAgICAgIGxpbWl0ID0gTWF0aC5yb3VuZChtYXggKiBwZXJjZW50YWdlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oMzAsIE1hdGgubWF4KDEsIGxpbWl0KSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRocm90dGxlKGxpbWl0LCBsb2dnZXIpIHtcbiAgbG9nZ2VyKCdpbmZvJywgXCJUaHJvdHRsZSByZXF1ZXN0IHRvIFwiLmNvbmNhdChsaW1pdCwgXCIvc1wiKSk7XG4gIHJldHVybiBwVGhyb3R0bGUoe1xuICAgIGxpbWl0OiBsaW1pdCxcbiAgICBpbnRlcnZhbDogMTAwMCxcbiAgICBzdHJpY3Q6IGZhbHNlXG4gIH0pO1xufVxuXG52YXIgcmF0ZUxpbWl0VGhyb3R0bGUgPSAoZnVuY3Rpb24gKGF4aW9zSW5zdGFuY2UpIHtcbiAgdmFyIHR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdhdXRvJztcbiAgdmFyIF9heGlvc0luc3RhbmNlJGRlZmF1bCA9IGF4aW9zSW5zdGFuY2UuZGVmYXVsdHMubG9nSGFuZGxlcixcbiAgICAgIGxvZ0hhbmRsZXIgPSBfYXhpb3NJbnN0YW5jZSRkZWZhdWwgPT09IHZvaWQgMCA/IG5vb3AgOiBfYXhpb3NJbnN0YW5jZSRkZWZhdWw7XG4gIHZhciBsaW1pdCA9IGlzU3RyaW5nKHR5cGUpID8gY2FsY3VsYXRlTGltaXQodHlwZSkgOiBjYWxjdWxhdGVMaW1pdCgnYXV0bycsIHR5cGUpO1xuICB2YXIgdGhyb3R0bGUgPSBjcmVhdGVUaHJvdHRsZShsaW1pdCwgbG9nSGFuZGxlcik7XG4gIHZhciBpc0NhbGN1bGF0ZWQgPSBmYWxzZTtcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvcklkID0gYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHJldHVybiB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH0pKCk7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH0pO1xuICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvcklkID0gYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIGlmICghaXNDYWxjdWxhdGVkICYmIGlzU3RyaW5nKHR5cGUpICYmICh0eXBlID09PSAnYXV0bycgfHwgUEVSQ0VOVEFHRV9SRUdFWC50ZXN0KHR5cGUpKSAmJiByZXNwb25zZS5oZWFkZXJzICYmIHJlc3BvbnNlLmhlYWRlcnNbJ3gtY29udGVudGZ1bC1yYXRlbGltaXQtc2Vjb25kLWxpbWl0J10pIHtcbiAgICAgIHZhciByYXdMaW1pdCA9IHBhcnNlSW50KHJlc3BvbnNlLmhlYWRlcnNbJ3gtY29udGVudGZ1bC1yYXRlbGltaXQtc2Vjb25kLWxpbWl0J10pO1xuICAgICAgdmFyIG5leHRMaW1pdCA9IGNhbGN1bGF0ZUxpbWl0KHR5cGUsIHJhd0xpbWl0KTtcblxuICAgICAgaWYgKG5leHRMaW1pdCAhPT0gbGltaXQpIHtcbiAgICAgICAgaWYgKHJlcXVlc3RJbnRlcmNlcHRvcklkKSB7XG4gICAgICAgICAgYXhpb3NJbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC5lamVjdChyZXF1ZXN0SW50ZXJjZXB0b3JJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsaW1pdCA9IG5leHRMaW1pdDtcbiAgICAgICAgdGhyb3R0bGUgPSBjcmVhdGVUaHJvdHRsZShuZXh0TGltaXQsIGxvZ0hhbmRsZXIpO1xuICAgICAgICByZXF1ZXN0SW50ZXJjZXB0b3JJZCA9IGF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICByZXR1cm4gdGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgICB9KSgpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaXNDYWxjdWxhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZWplY3QocmVxdWVzdEludGVyY2VwdG9ySWQpO1xuICAgIGF4aW9zSW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmVqZWN0KHJlc3BvbnNlSW50ZXJjZXB0b3JJZCk7XG4gIH07XG59KTtcblxudmFyIGRlbGF5ID0gZnVuY3Rpb24gZGVsYXkobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCBtcyk7XG4gIH0pO1xufTtcblxudmFyIGRlZmF1bHRXYWl0ID0gZnVuY3Rpb24gZGVmYXVsdFdhaXQoYXR0ZW1wdHMpIHtcbiAgcmV0dXJuIE1hdGgucG93KE1hdGguU1FSVDIsIGF0dGVtcHRzKTtcbn07XG5cbmZ1bmN0aW9uIHJhdGVMaW1pdChpbnN0YW5jZSkge1xuICB2YXIgbWF4UmV0cnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDU7XG4gIHZhciBfaW5zdGFuY2UkZGVmYXVsdHMgPSBpbnN0YW5jZS5kZWZhdWx0cyxcbiAgICAgIF9pbnN0YW5jZSRkZWZhdWx0cyRyZSA9IF9pbnN0YW5jZSRkZWZhdWx0cy5yZXNwb25zZUxvZ2dlcixcbiAgICAgIHJlc3BvbnNlTG9nZ2VyID0gX2luc3RhbmNlJGRlZmF1bHRzJHJlID09PSB2b2lkIDAgPyBub29wIDogX2luc3RhbmNlJGRlZmF1bHRzJHJlLFxuICAgICAgX2luc3RhbmNlJGRlZmF1bHRzJHJlMiA9IF9pbnN0YW5jZSRkZWZhdWx0cy5yZXF1ZXN0TG9nZ2VyLFxuICAgICAgcmVxdWVzdExvZ2dlciA9IF9pbnN0YW5jZSRkZWZhdWx0cyRyZTIgPT09IHZvaWQgMCA/IG5vb3AgOiBfaW5zdGFuY2UkZGVmYXVsdHMkcmUyO1xuICBpbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykge1xuICAgIHJlcXVlc3RMb2dnZXIoY29uZmlnKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXF1ZXN0TG9nZ2VyKGVycm9yKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9KTtcbiAgaW5zdGFuY2UuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nIGhlcmVcbiAgICByZXNwb25zZUxvZ2dlcihyZXNwb25zZSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBlcnJvci5yZXNwb25zZTtcbiAgICB2YXIgY29uZmlnID0gZXJyb3IuY29uZmlnO1xuICAgIHJlc3BvbnNlTG9nZ2VyKGVycm9yKTsgLy8gRG8gbm90IHJldHJ5IGlmIGl0IGlzIGRpc2FibGVkIG9yIG5vIHJlcXVlc3QgY29uZmlnIGV4aXN0cyAobm90IGFuIGF4aW9zIGVycm9yKVxuXG4gICAgaWYgKCFjb25maWcgfHwgIWluc3RhbmNlLmRlZmF1bHRzLnJldHJ5T25FcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9IC8vIFJldHJpZWQgYWxyZWFkeSBmb3IgbWF4IGF0dGVtcHRzXG5cblxuICAgIHZhciBkb25lQXR0ZW1wdHMgPSBjb25maWcuYXR0ZW1wdHMgfHwgMTtcblxuICAgIGlmIChkb25lQXR0ZW1wdHMgPiBtYXhSZXRyeSkge1xuICAgICAgZXJyb3IuYXR0ZW1wdHMgPSBjb25maWcuYXR0ZW1wdHM7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIHZhciByZXRyeUVycm9yVHlwZSA9IG51bGw7XG4gICAgdmFyIHdhaXQgPSBkZWZhdWx0V2FpdChkb25lQXR0ZW1wdHMpOyAvLyBFcnJvcnMgd2l0aG91dCByZXNwb25zZSBkaWQgbm90IHJlY2VpdmUgYW55dGhpbmcgZnJvbSB0aGUgc2VydmVyXG5cbiAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICByZXRyeUVycm9yVHlwZSA9ICdDb25uZWN0aW9uJztcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSA1MDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgNjAwKSB7XG4gICAgICAvLyA1KiogZXJyb3JzIGFyZSBzZXJ2ZXIgcmVsYXRlZFxuICAgICAgcmV0cnlFcnJvclR5cGUgPSBcIlNlcnZlciBcIi5jb25jYXQocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAvLyA0MjkgZXJyb3JzIGFyZSBleGNlZWRlZCByYXRlIGxpbWl0IGV4Y2VwdGlvbnNcbiAgICAgIHJldHJ5RXJyb3JUeXBlID0gJ1JhdGUgbGltaXQnOyAvLyBhbGwgaGVhZGVycyBhcmUgbG93ZXJjYXNlZCBieSBheGlvcyBodHRwczovL2dpdGh1Yi5jb20vbXphYnJpc2tpZS9heGlvcy9pc3N1ZXMvNDEzXG5cbiAgICAgIGlmIChyZXNwb25zZS5oZWFkZXJzICYmIGVycm9yLnJlc3BvbnNlLmhlYWRlcnNbJ3gtY29udGVudGZ1bC1yYXRlbGltaXQtcmVzZXQnXSkge1xuICAgICAgICB3YWl0ID0gcmVzcG9uc2UuaGVhZGVyc1sneC1jb250ZW50ZnVsLXJhdGVsaW1pdC1yZXNldCddO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXRyeUVycm9yVHlwZSkge1xuICAgICAgLy8gY29udmVydCB0byBtcyBhbmQgYWRkIGppdHRlclxuICAgICAgd2FpdCA9IE1hdGguZmxvb3Iod2FpdCAqIDEwMDAgKyBNYXRoLnJhbmRvbSgpICogMjAwICsgNTAwKTtcbiAgICAgIGluc3RhbmNlLmRlZmF1bHRzLmxvZ0hhbmRsZXIoJ3dhcm5pbmcnLCBcIlwiLmNvbmNhdChyZXRyeUVycm9yVHlwZSwgXCIgZXJyb3Igb2NjdXJyZWQuIFdhaXRpbmcgZm9yIFwiKS5jb25jYXQod2FpdCwgXCIgbXMgYmVmb3JlIHJldHJ5aW5nLi4uXCIpKTsgLy8gaW5jcmVhc2UgYXR0ZW1wdHMgY291bnRlclxuXG4gICAgICBjb25maWcuYXR0ZW1wdHMgPSBkb25lQXR0ZW1wdHMgKyAxO1xuICAgICAgLyogU29tZWhvdyBiZXR3ZWVuIHRoZSBpbnRlcmNlcHRvciBhbmQgcmV0cnlpbmcgdGhlIHJlcXVlc3QgdGhlIGh0dHBBZ2VudC9odHRwc0FnZW50IGdldHMgdHJhbnNmb3JtZWQgZnJvbSBhbiBBZ2VudC1saWtlIG9iamVjdFxuICAgICAgIHRvIGEgcmVndWxhciBvYmplY3QsIGNhdXNpbmcgZmFpbHVyZXMgb24gcmV0cmllcyBhZnRlciByYXRlIGxpbWl0cy4gUmVtb3ZpbmcgdGhlc2UgcHJvcGVydGllcyBoZXJlIGZpeGVzIHRoZSBlcnJvciwgYnV0IHJldHJ5XG4gICAgICAgcmVxdWVzdHMgc3RpbGwgdXNlIHRoZSBvcmlnaW5hbCBodHRwL2h0dHBzQWdlbnQgcHJvcGVydHkgKi9cblxuICAgICAgZGVsZXRlIGNvbmZpZy5odHRwQWdlbnQ7XG4gICAgICBkZWxldGUgY29uZmlnLmh0dHBzQWdlbnQ7XG4gICAgICByZXR1cm4gZGVsYXkod2FpdCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZShjb25maWcpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzeW5jVG9rZW4oaW5zdGFuY2UsIGdldFRva2VuKSB7XG4gIGluc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIGdldFRva2VuKCkudGhlbihmdW5jdGlvbiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgIGNvbmZpZy5oZWFkZXJzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGNvbmZpZy5oZWFkZXJzKSwge30sIHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogXCJCZWFyZXIgXCIuY29uY2F0KGFjY2Vzc1Rva2VuKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH0pO1xuICB9KTtcbn1cblxuLy8gQWxzbyBlbmZvcmNlcyB0b3BsZXZlbCBkb21haW4gc3BlY2lmaWVkLCBubyBzcGFjZXMgYW5kIG5vIHByb3RvY29sXG5cbnZhciBIT1NUX1JFR0VYID0gL14oPyFcXHcrOlxcL1xcLykoW15cXHM6XStcXC4/W15cXHM6XSspKD86OihcXGQrKSk/KD8hOikkLztcbi8qKlxuICogQ3JlYXRlIHByZSBjb25maWd1cmVkIGF4aW9zIGluc3RhbmNlXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBeGlvc1N0YXRpY30gYXhpb3MgLSBBeGlvcyBsaWJyYXJ5XG4gKiBAcGFyYW0ge0NyZWF0ZUh0dHBDbGllbnRQYXJhbXN9IG9wdGlvbnMgLSBJbml0aWFsaXphdGlvbiBwYXJhbWV0ZXJzIGZvciB0aGUgSFRUUCBjbGllbnRcbiAqIEByZXR1cm4ge0NvbnRlbnRmdWxBeGlvc0luc3RhbmNlfSBJbml0aWFsaXplZCBheGlvcyBpbnN0YW5jZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBDbGllbnQoYXhpb3MsIG9wdGlvbnMpIHtcbiAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgaW5zZWN1cmU6IGZhbHNlLFxuICAgIHJldHJ5T25FcnJvcjogdHJ1ZSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxvZ0hhbmRsZXI6IGZ1bmN0aW9uIGxvZ0hhbmRsZXIobGV2ZWwsIGRhdGEpIHtcbiAgICAgIGlmIChsZXZlbCA9PT0gJ2Vycm9yJyAmJiBkYXRhKSB7XG4gICAgICAgIHZhciB0aXRsZSA9IFtkYXRhLm5hbWUsIGRhdGEubWVzc2FnZV0uZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH0pLmpvaW4oJyAtICcpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW2Vycm9yXSBcIi5jb25jYXQodGl0bGUpKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihkYXRhKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZyhcIltcIi5jb25jYXQobGV2ZWwsIFwiXSBcIikuY29uY2F0KGRhdGEpKTtcbiAgICB9LFxuICAgIC8vIFBhc3NlZCB0byBheGlvc1xuICAgIGhlYWRlcnM6IHt9LFxuICAgIGh0dHBBZ2VudDogZmFsc2UsXG4gICAgaHR0cHNBZ2VudDogZmFsc2UsXG4gICAgdGltZW91dDogMzAwMDAsXG4gICAgdGhyb3R0bGU6IDAsXG4gICAgcHJveHk6IGZhbHNlLFxuICAgIGJhc2VQYXRoOiAnJyxcbiAgICBhZGFwdGVyOiB1bmRlZmluZWQsXG4gICAgbWF4Q29udGVudExlbmd0aDogMTA3Mzc0MTgyNCxcbiAgICAvLyAxR0JcbiAgICBtYXhCb2R5TGVuZ3RoOiAxMDczNzQxODI0IC8vIDFHQlxuXG4gIH07XG5cbiAgdmFyIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBkZWZhdWx0Q29uZmlnKSwgb3B0aW9ucyk7XG5cbiAgaWYgKCFjb25maWcuYWNjZXNzVG9rZW4pIHtcbiAgICB2YXIgbWlzc2luZ0FjY2Vzc1Rva2VuRXJyb3IgPSBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBwYXJhbWV0ZXIgYWNjZXNzVG9rZW4nKTtcbiAgICBjb25maWcubG9nSGFuZGxlcignZXJyb3InLCBtaXNzaW5nQWNjZXNzVG9rZW5FcnJvcik7XG4gICAgdGhyb3cgbWlzc2luZ0FjY2Vzc1Rva2VuRXJyb3I7XG4gIH0gLy8gQ29uc3RydWN0IGF4aW9zIGJhc2VVUkwgb3B0aW9uXG5cblxuICB2YXIgcHJvdG9jb2wgPSBjb25maWcuaW5zZWN1cmUgPyAnaHR0cCcgOiAnaHR0cHMnO1xuICB2YXIgc3BhY2UgPSBjb25maWcuc3BhY2UgPyBcIlwiLmNvbmNhdChjb25maWcuc3BhY2UsIFwiL1wiKSA6ICcnO1xuICB2YXIgaG9zdG5hbWUgPSBjb25maWcuZGVmYXVsdEhvc3RuYW1lO1xuICB2YXIgcG9ydCA9IGNvbmZpZy5pbnNlY3VyZSA/IDgwIDogNDQzO1xuXG4gIGlmIChjb25maWcuaG9zdCAmJiBIT1NUX1JFR0VYLnRlc3QoY29uZmlnLmhvc3QpKSB7XG4gICAgdmFyIHBhcnNlZCA9IGNvbmZpZy5ob3N0LnNwbGl0KCc6Jyk7XG5cbiAgICBpZiAocGFyc2VkLmxlbmd0aCA9PT0gMikge1xuXG4gICAgICB2YXIgX3BhcnNlZCA9IF9zbGljZWRUb0FycmF5KHBhcnNlZCwgMik7XG5cbiAgICAgIGhvc3RuYW1lID0gX3BhcnNlZFswXTtcbiAgICAgIHBvcnQgPSBfcGFyc2VkWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBob3N0bmFtZSA9IHBhcnNlZFswXTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoYXQgYmFzZVBhdGggZG9lcyBzdGFydCBidXQgbm90IGVuZCB3aXRoIGEgc2xhc2hcblxuXG4gIGlmIChjb25maWcuYmFzZVBhdGgpIHtcbiAgICBjb25maWcuYmFzZVBhdGggPSBcIi9cIi5jb25jYXQoY29uZmlnLmJhc2VQYXRoLnNwbGl0KCcvJykuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJy8nKSk7XG4gIH1cblxuICB2YXIgYmFzZVVSTCA9IG9wdGlvbnMuYmFzZVVSTCB8fCBcIlwiLmNvbmNhdChwcm90b2NvbCwgXCI6Ly9cIikuY29uY2F0KGhvc3RuYW1lLCBcIjpcIikuY29uY2F0KHBvcnQpLmNvbmNhdChjb25maWcuYmFzZVBhdGgsIFwiL3NwYWNlcy9cIikuY29uY2F0KHNwYWNlKTtcblxuICBpZiAoIWNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gJiYgdHlwZW9mIGNvbmZpZy5hY2Nlc3NUb2tlbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmVhcmVyICcgKyBjb25maWcuYWNjZXNzVG9rZW47XG4gIH0gLy8gU2V0IHRoZXNlIGhlYWRlcnMgb25seSBmb3Igbm9kZSBiZWNhdXNlIGJyb3dzZXJzIGRvbid0IGxpa2UgaXQgd2hlbiB5b3VcbiAgLy8gb3ZlcnJpZGUgdXNlci1hZ2VudCBvciBhY2NlcHQtZW5jb2RpbmcuXG4gIC8vIFRoZSBTREtzIHNob3VsZCBzZXQgdGhlaXIgb3duIFgtQ29udGVudGZ1bC1Vc2VyLUFnZW50LlxuXG5cbiAgaWYgKGlzTm9kZSgpKSB7XG4gICAgY29uZmlnLmhlYWRlcnNbJ3VzZXItYWdlbnQnXSA9ICdub2RlLmpzLycgKyBnZXROb2RlVmVyc2lvbigpO1xuICAgIGNvbmZpZy5oZWFkZXJzWydBY2NlcHQtRW5jb2RpbmcnXSA9ICdnemlwJztcbiAgfVxuXG4gIHZhciBheGlvc09wdGlvbnMgPSB7XG4gICAgLy8gQXhpb3NcbiAgICBiYXNlVVJMOiBiYXNlVVJMLFxuICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzLFxuICAgIGh0dHBBZ2VudDogY29uZmlnLmh0dHBBZ2VudCxcbiAgICBodHRwc0FnZW50OiBjb25maWcuaHR0cHNBZ2VudCxcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBxcy5zdHJpbmdpZnksXG4gICAgcHJveHk6IGNvbmZpZy5wcm94eSxcbiAgICB0aW1lb3V0OiBjb25maWcudGltZW91dCxcbiAgICBhZGFwdGVyOiBjb25maWcuYWRhcHRlcixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBjb25maWcubWF4Q29udGVudExlbmd0aCxcbiAgICBtYXhCb2R5TGVuZ3RoOiBjb25maWcubWF4Qm9keUxlbmd0aCxcbiAgICAvLyBDb250ZW50ZnVsXG4gICAgbG9nSGFuZGxlcjogY29uZmlnLmxvZ0hhbmRsZXIsXG4gICAgcmVzcG9uc2VMb2dnZXI6IGNvbmZpZy5yZXNwb25zZUxvZ2dlcixcbiAgICByZXF1ZXN0TG9nZ2VyOiBjb25maWcucmVxdWVzdExvZ2dlcixcbiAgICByZXRyeU9uRXJyb3I6IGNvbmZpZy5yZXRyeU9uRXJyb3JcbiAgfTtcbiAgdmFyIGluc3RhbmNlID0gYXhpb3MuY3JlYXRlKGF4aW9zT3B0aW9ucyk7XG4gIGluc3RhbmNlLmh0dHBDbGllbnRQYXJhbXMgPSBvcHRpb25zO1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBheGlvcyBpbnN0YW5jZSB3aXRoIHRoZSBzYW1lIGRlZmF1bHQgYmFzZSBwYXJhbWV0ZXJzIGFzIHRoZVxuICAgKiBjdXJyZW50IG9uZSwgYW5kIHdpdGggYW55IG92ZXJyaWRlcyBwYXNzZWQgdG8gdGhlIG5ld1BhcmFtcyBvYmplY3RcbiAgICogVGhpcyBpcyB1c2VmdWwgYXMgdGhlIFNES3MgdXNlIGRlcGVuZGVuY3kgaW5qZWN0aW9uIHRvIGdldCB0aGUgYXhpb3MgbGlicmFyeVxuICAgKiBhbmQgdGhlIHZlcnNpb24gb2YgdGhlIGxpYnJhcnkgY29tZXMgZnJvbSBkaWZmZXJlbnQgcGxhY2VzIGRlcGVuZGluZ1xuICAgKiBvbiB3aGV0aGVyIGl0J3MgYSBicm93c2VyIGJ1aWxkIG9yIGEgbm9kZS5qcyBidWlsZC5cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtDcmVhdGVIdHRwQ2xpZW50UGFyYW1zfSBodHRwQ2xpZW50UGFyYW1zIC0gSW5pdGlhbGl6YXRpb24gcGFyYW1ldGVycyBmb3IgdGhlIEhUVFAgY2xpZW50XG4gICAqIEByZXR1cm4ge0NvbnRlbnRmdWxBeGlvc0luc3RhbmNlfSBJbml0aWFsaXplZCBheGlvcyBpbnN0YW5jZVxuICAgKi9cblxuICBpbnN0YW5jZS5jbG9uZVdpdGhOZXdQYXJhbXMgPSBmdW5jdGlvbiAobmV3UGFyYW1zKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUh0dHBDbGllbnQoYXhpb3MsIF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBjb3B5KG9wdGlvbnMpKSwgbmV3UGFyYW1zKSk7XG4gIH07XG4gIC8qKlxuICAgKiBBcHBseSBpbnRlcmNlcHRvcnMuXG4gICAqIFBsZWFzZSBub3RlIHRoYXQgdGhlIG9yZGVyIG9mIGludGVyY2VwdG9ycyBpcyBpbXBvcnRhbnRcbiAgICovXG5cblxuICBpZiAoY29uZmlnLm9uQmVmb3JlUmVxdWVzdCkge1xuICAgIGluc3RhbmNlLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShjb25maWcub25CZWZvcmVSZXF1ZXN0KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY29uZmlnLmFjY2Vzc1Rva2VuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYXN5bmNUb2tlbihpbnN0YW5jZSwgY29uZmlnLmFjY2Vzc1Rva2VuKTtcbiAgfVxuXG4gIGlmIChjb25maWcudGhyb3R0bGUpIHtcbiAgICByYXRlTGltaXRUaHJvdHRsZShpbnN0YW5jZSwgY29uZmlnLnRocm90dGxlKTtcbiAgfVxuXG4gIHJhdGVMaW1pdChpbnN0YW5jZSwgY29uZmlnLnJldHJ5TGltaXQpO1xuXG4gIGlmIChjb25maWcub25FcnJvcikge1xuICAgIGluc3RhbmNlLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSwgY29uZmlnLm9uRXJyb3IpO1xuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5cbi8qKlxuICogQ3JlYXRlcyByZXF1ZXN0IHBhcmFtZXRlcnMgY29uZmlndXJhdGlvbiBieSBwYXJzaW5nIGFuIGV4aXN0aW5nIHF1ZXJ5IG9iamVjdFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeVxuICogQHJldHVybiB7T2JqZWN0fSBDb25maWcgb2JqZWN0IHdpdGggYHBhcmFtc2AgcHJvcGVydHksIHJlYWR5IHRvIGJlIHVzZWQgaW4gYXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdENvbmZpZyhfcmVmKSB7XG4gIHZhciBxdWVyeSA9IF9yZWYucXVlcnk7XG4gIHZhciBjb25maWcgPSB7fTtcbiAgZGVsZXRlIHF1ZXJ5LnJlc29sdmVMaW5rcztcbiAgY29uZmlnLnBhcmFtcyA9IGNvcHkocXVlcnkpO1xuICByZXR1cm4gY29uZmlnO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZW5mb3JjZU9ialBhdGgob2JqLCBwYXRoKSB7XG4gIGlmICghKHBhdGggaW4gb2JqKSkge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKTtcbiAgICBlcnIubmFtZSA9ICdQcm9wZXJ0eU1pc3NpbmcnO1xuICAgIGVyci5tZXNzYWdlID0gXCJSZXF1aXJlZCBwcm9wZXJ0eSBcIi5jb25jYXQocGF0aCwgXCIgbWlzc2luZyBmcm9tOlxcblxcblwiKS5jb25jYXQoSlNPTi5zdHJpbmdpZnkob2JqKSwgXCJcXG5cXG5cIik7XG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIGNvcGllZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9mcmVlemVcbmZ1bmN0aW9uIGRlZXBGcmVlemUob2JqZWN0KSB7XG4gIHZhciBwcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpO1xuXG4gIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihwcm9wTmFtZXMpLFxuICAgICAgX3N0ZXA7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIG5hbWUgPSBfc3RlcC52YWx1ZTtcbiAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlICYmIF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBkZWVwRnJlZXplKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvci5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yLmYoKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZnJlZXplKG9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGZyZWV6ZVN5cyhvYmopIHtcbiAgZGVlcEZyZWV6ZShvYmouc3lzIHx8IHt9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gZ2V0QnJvd3Nlck9TKCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKCF3aW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB1c2VyQWdlbnQgPSB3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudDsgLy8gVE9ETzogcGxhdGZvcm0gaXMgZGVwcmVjYXRlZC5cblxuICB2YXIgcGxhdGZvcm0gPSB3aW4ubmF2aWdhdG9yLnBsYXRmb3JtO1xuICB2YXIgbWFjb3NQbGF0Zm9ybXMgPSBbJ01hY2ludG9zaCcsICdNYWNJbnRlbCcsICdNYWNQUEMnLCAnTWFjNjhLJ107XG4gIHZhciB3aW5kb3dzUGxhdGZvcm1zID0gWydXaW4zMicsICdXaW42NCcsICdXaW5kb3dzJywgJ1dpbkNFJ107XG4gIHZhciBpb3NQbGF0Zm9ybXMgPSBbJ2lQaG9uZScsICdpUGFkJywgJ2lQb2QnXTtcblxuICBpZiAobWFjb3NQbGF0Zm9ybXMuaW5kZXhPZihwbGF0Zm9ybSkgIT09IC0xKSB7XG4gICAgcmV0dXJuICdtYWNPUyc7XG4gIH0gZWxzZSBpZiAoaW9zUGxhdGZvcm1zLmluZGV4T2YocGxhdGZvcm0pICE9PSAtMSkge1xuICAgIHJldHVybiAnaU9TJztcbiAgfSBlbHNlIGlmICh3aW5kb3dzUGxhdGZvcm1zLmluZGV4T2YocGxhdGZvcm0pICE9PSAtMSkge1xuICAgIHJldHVybiAnV2luZG93cyc7XG4gIH0gZWxzZSBpZiAoL0FuZHJvaWQvLnRlc3QodXNlckFnZW50KSkge1xuICAgIHJldHVybiAnQW5kcm9pZCc7XG4gIH0gZWxzZSBpZiAoL0xpbnV4Ly50ZXN0KHBsYXRmb3JtKSkge1xuICAgIHJldHVybiAnTGludXgnO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldE5vZGVPUygpIHtcbiAgdmFyIHBsYXRmb3JtID0gcHJvY2Vzcy5wbGF0Zm9ybSB8fCAnbGludXgnO1xuICB2YXIgdmVyc2lvbiA9IHByb2Nlc3MudmVyc2lvbiB8fCAnMC4wLjAnO1xuICB2YXIgcGxhdGZvcm1NYXAgPSB7XG4gICAgYW5kcm9pZDogJ0FuZHJvaWQnLFxuICAgIGFpeDogJ0xpbnV4JyxcbiAgICBkYXJ3aW46ICdtYWNPUycsXG4gICAgZnJlZWJzZDogJ0xpbnV4JyxcbiAgICBsaW51eDogJ0xpbnV4JyxcbiAgICBvcGVuYnNkOiAnTGludXgnLFxuICAgIHN1bm9zOiAnTGludXgnLFxuICAgIHdpbjMyOiAnV2luZG93cydcbiAgfTtcblxuICBpZiAocGxhdGZvcm0gaW4gcGxhdGZvcm1NYXApIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQocGxhdGZvcm1NYXBbcGxhdGZvcm1dIHx8ICdMaW51eCcsIFwiL1wiKS5jb25jYXQodmVyc2lvbik7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VXNlckFnZW50SGVhZGVyKHNkaywgYXBwbGljYXRpb24sIGludGVncmF0aW9uLCBmZWF0dXJlKSB7XG4gIHZhciBoZWFkZXJQYXJ0cyA9IFtdO1xuXG4gIGlmIChhcHBsaWNhdGlvbikge1xuICAgIGhlYWRlclBhcnRzLnB1c2goXCJhcHAgXCIuY29uY2F0KGFwcGxpY2F0aW9uKSk7XG4gIH1cblxuICBpZiAoaW50ZWdyYXRpb24pIHtcbiAgICBoZWFkZXJQYXJ0cy5wdXNoKFwiaW50ZWdyYXRpb24gXCIuY29uY2F0KGludGVncmF0aW9uKSk7XG4gIH1cblxuICBpZiAoZmVhdHVyZSkge1xuICAgIGhlYWRlclBhcnRzLnB1c2goJ2ZlYXR1cmUgJyArIGZlYXR1cmUpO1xuICB9XG5cbiAgaGVhZGVyUGFydHMucHVzaChcInNkayBcIi5jb25jYXQoc2RrKSk7XG4gIHZhciBwbGF0Zm9ybSA9IG51bGw7XG5cbiAgdHJ5IHtcbiAgICBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICBwbGF0Zm9ybSA9IGdldEJyb3dzZXJPUygpO1xuICAgICAgaGVhZGVyUGFydHMucHVzaCgncGxhdGZvcm0gUmVhY3ROYXRpdmUnKTtcbiAgICB9IGVsc2UgaWYgKGlzTm9kZSgpKSB7XG4gICAgICBwbGF0Zm9ybSA9IGdldE5vZGVPUygpO1xuICAgICAgaGVhZGVyUGFydHMucHVzaChcInBsYXRmb3JtIG5vZGUuanMvXCIuY29uY2F0KGdldE5vZGVWZXJzaW9uKCkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxhdGZvcm0gPSBnZXRCcm93c2VyT1MoKTtcbiAgICAgIGhlYWRlclBhcnRzLnB1c2goJ3BsYXRmb3JtIGJyb3dzZXInKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwbGF0Zm9ybSA9IG51bGw7XG4gIH1cblxuICBpZiAocGxhdGZvcm0pIHtcbiAgICBoZWFkZXJQYXJ0cy5wdXNoKFwib3MgXCIuY29uY2F0KHBsYXRmb3JtKSk7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQoaGVhZGVyUGFydHMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0gIT09ICcnO1xuICB9KS5qb2luKCc7ICcpLCBcIjtcIik7XG59XG5cbi8qKlxuICogTWl4ZXMgaW4gYSBtZXRob2QgdG8gcmV0dXJuIGp1c3QgYSBwbGFpbiBvYmplY3Qgd2l0aCBubyBhZGRpdGlvbmFsIG1ldGhvZHNcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gZGF0YSAtIEFueSBwbGFpbiBKU09OIHJlc3BvbnNlIHJldHVybmVkIGZyb20gdGhlIEFQSVxuICogQHJldHVybiBFbmhhbmNlZCBvYmplY3Qgd2l0aCB0b1BsYWluT2JqZWN0IG1ldGhvZFxuICovXG5cbmZ1bmN0aW9uIHRvUGxhaW5PYmplY3QoZGF0YSkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsICd0b1BsYWluT2JqZWN0Jywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgIHJldHVybiBjb3B5KHRoaXMpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogSGFuZGxlcyBlcnJvcnMgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLiBQYXJzZXMgdGhlIGVycm9yIGludG8gYSBtb3JlIHVzZWZ1bFxuICogZm9ybWF0LCBwbGFjZXMgaXQgaW4gYW4gZXhjZXB0aW9uIGFuZCB0aHJvd3MgaXQuXG4gKiBTZWUgaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvZXJyb3JzL1xuICogZm9yIG1vcmUgZGV0YWlscyBvbiB0aGUgZGF0YSByZWNlaXZlZCBvbiB0aGUgZXJyb3JSZXNwb25zZS5kYXRhIHByb3BlcnR5XG4gKiBhbmQgdGhlIGV4cGVjdGVkIGVycm9yIGNvZGVzLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGVycm9yUmVzcG9uc2UpIHtcbiAgdmFyIGNvbmZpZyA9IGVycm9yUmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UgPSBlcnJvclJlc3BvbnNlLnJlc3BvbnNlO1xuICB2YXIgZXJyb3JOYW1lOyAvLyBPYnNjdXJlIHRoZSBNYW5hZ2VtZW50IHRva2VuXG5cbiAgaWYgKGNvbmZpZyAmJiBjb25maWcuaGVhZGVycyAmJiBjb25maWcuaGVhZGVyc1snQXV0aG9yaXphdGlvbiddKSB7XG4gICAgdmFyIHRva2VuID0gXCIuLi5cIi5jb25jYXQoY29uZmlnLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXS5zdWJzdHIoLTUpKTtcbiAgICBjb25maWcuaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gXCJCZWFyZXIgXCIuY29uY2F0KHRva2VuKTtcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChyZXNwb25zZSkgfHwgIWlzUGxhaW5PYmplY3QoY29uZmlnKSkge1xuICAgIHRocm93IGVycm9yUmVzcG9uc2U7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS5kYXRhO1xuICB2YXIgZXJyb3JEYXRhID0ge1xuICAgIHN0YXR1czogcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiByZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICBtZXNzYWdlOiAnJyxcbiAgICBkZXRhaWxzOiB7fVxuICB9O1xuXG4gIGlmIChpc1BsYWluT2JqZWN0KGNvbmZpZykpIHtcbiAgICBlcnJvckRhdGEucmVxdWVzdCA9IHtcbiAgICAgIHVybDogY29uZmlnLnVybCxcbiAgICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzLFxuICAgICAgbWV0aG9kOiBjb25maWcubWV0aG9kLFxuICAgICAgcGF5bG9hZERhdGE6IGNvbmZpZy5kYXRhXG4gICAgfTtcbiAgfVxuXG4gIGlmIChkYXRhICYmIGlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICBpZiAoJ3JlcXVlc3RJZCcgaW4gZGF0YSkge1xuICAgICAgZXJyb3JEYXRhLnJlcXVlc3RJZCA9IGRhdGEucmVxdWVzdElkIHx8ICdVTktOT1dOJztcbiAgICB9XG5cbiAgICBpZiAoJ21lc3NhZ2UnIGluIGRhdGEpIHtcbiAgICAgIGVycm9yRGF0YS5tZXNzYWdlID0gZGF0YS5tZXNzYWdlIHx8ICcnO1xuICAgIH1cblxuICAgIGlmICgnZGV0YWlscycgaW4gZGF0YSkge1xuICAgICAgZXJyb3JEYXRhLmRldGFpbHMgPSBkYXRhLmRldGFpbHMgfHwge307XG4gICAgfVxuXG4gICAgaWYgKCdzeXMnIGluIGRhdGEpIHtcbiAgICAgIGlmICgnaWQnIGluIGRhdGEuc3lzKSB7XG4gICAgICAgIGVycm9yTmFtZSA9IGRhdGEuc3lzLmlkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuICBlcnJvci5uYW1lID0gZXJyb3JOYW1lICYmIGVycm9yTmFtZSAhPT0gJ1Vua25vd24nID8gZXJyb3JOYW1lIDogXCJcIi5jb25jYXQocmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLnN0YXR1cywgXCIgXCIpLmNvbmNhdChyZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cbiAgdHJ5IHtcbiAgICBlcnJvci5tZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkoZXJyb3JEYXRhLCBudWxsLCAnICAnKTtcbiAgfSBjYXRjaCAoX3VudXNlZCkge1xuICAgIHZhciBfZXJyb3JEYXRhJG1lc3NhZ2U7XG5cbiAgICBlcnJvci5tZXNzYWdlID0gKF9lcnJvckRhdGEkbWVzc2FnZSA9IGVycm9yRGF0YSA9PT0gbnVsbCB8fCBlcnJvckRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yRGF0YS5tZXNzYWdlKSAhPT0gbnVsbCAmJiBfZXJyb3JEYXRhJG1lc3NhZ2UgIT09IHZvaWQgMCA/IF9lcnJvckRhdGEkbWVzc2FnZSA6ICcnO1xuICB9XG5cbiAgdGhyb3cgZXJyb3I7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUh0dHBDbGllbnQsIGNyZWF0ZVJlcXVlc3RDb25maWcsIGVuZm9yY2VPYmpQYXRoLCBlcnJvckhhbmRsZXIsIGZyZWV6ZVN5cywgZ2V0VXNlckFnZW50SGVhZGVyLCB0b1BsYWluT2JqZWN0IH07XG4iLCJpbXBvcnQgU3R5bGlzIGZyb20gJ3N0eWxpcy9zdHlsaXMubWluJztcbmltcG9ydCBfaW5zZXJ0UnVsZVBsdWdpbiBmcm9tICdzdHlsaXMtcnVsZS1zaGVldCc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBjcmVhdGVDb250ZXh0LCBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc1ZhbGlkRWxlbWVudFR5cGUsIEZvcndhcmRSZWYgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHZhbGlkQXR0ciBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCBtZXJnZSBmcm9tICdtZXJnZS1hbnl0aGluZyc7XG5cbi8vIFxuXG52YXIgaW50ZXJsZWF2ZSA9IChmdW5jdGlvbiAoc3RyaW5ncywgaW50ZXJwb2xhdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtzdHJpbmdzWzBdXTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gaW50ZXJwb2xhdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0aW9uc1tpXSwgc3RyaW5nc1tpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBpbmhlcml0cyA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cbnZhciBvYmplY3RXaXRob3V0UHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmosIGtleXMpIHtcbiAgdmFyIHRhcmdldCA9IHt9O1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTtcbiAgICB0YXJnZXRbaV0gPSBvYmpbaV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbi8vIFxudmFyIGlzUGxhaW5PYmplY3QgPSAoZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoeCkpID09PSAnb2JqZWN0JyAmJiB4LmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59KTtcblxuLy8gXG52YXIgRU1QVFlfQVJSQVkgPSBPYmplY3QuZnJlZXplKFtdKTtcbnZhciBFTVBUWV9PQkpFQ1QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSh0YXJnZXQpIHtcbiAgcmV0dXJuIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiYgdGFyZ2V0IDogZmFsc2UpIHx8IHRhcmdldC5kaXNwbGF5TmFtZSB8fCB0YXJnZXQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn1cblxuLy8gXG5mdW5jdGlvbiBpc1N0YXRlbGVzc0Z1bmN0aW9uKHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmICEodGVzdC5wcm90b3R5cGUgJiYgdGVzdC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbi8vIFxuZnVuY3Rpb24gaXNTdHlsZWRDb21wb25lbnQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZyc7XG59XG5cbi8vIFxuXG52YXIgU0NfQVRUUiA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFIgfHwgcHJvY2Vzcy5lbnYuU0NfQVRUUikgfHwgJ2RhdGEtc3R5bGVkJztcblxudmFyIFNDX1ZFUlNJT05fQVRUUiA9ICdkYXRhLXN0eWxlZC12ZXJzaW9uJztcblxudmFyIFNDX1NUUkVBTV9BVFRSID0gJ2RhdGEtc3R5bGVkLXN0cmVhbWVkJztcblxudmFyIElTX0JST1dTRVIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnSFRNTEVsZW1lbnQnIGluIHdpbmRvdztcblxudmFyIERJU0FCTEVfU1BFRURZID0gdHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZID09PSAnYm9vbGVhbicgJiYgU0NfRElTQUJMRV9TUEVFRFkgfHwgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIChwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkgfHwgcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkpIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbi8vIFNoYXJlZCBlbXB0eSBleGVjdXRpb24gY29udGV4dCB3aGVuIGdlbmVyYXRpbmcgc3RhdGljIHN0eWxlc1xudmFyIFNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCA9IHt9O1xuXG4vLyBcblxuXG4vKipcbiAqIFBhcnNlIGVycm9ycy5tZCBhbmQgdHVybiBpdCBpbnRvIGEgc2ltcGxlIGhhc2ggb2YgY29kZTogbWVzc2FnZVxuICovXG52YXIgRVJST1JTID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgXCIxXCI6IFwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLFxuICBcIjJcIjogXCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIixcbiAgXCIzXCI6IFwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsXG4gIFwiNFwiOiBcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsXG4gIFwiNVwiOiBcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsXG4gIFwiNlwiOiBcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsXG4gIFwiN1wiOiBcIlRoZW1lUHJvdmlkZXI6IFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciBcXFwidGhlbWVcXFwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcblwiLFxuICBcIjhcIjogXCJUaGVtZVByb3ZpZGVyOiBQbGVhc2UgbWFrZSB5b3VyIFxcXCJ0aGVtZVxcXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuXCIsXG4gIFwiOVwiOiBcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIixcbiAgXCIxMFwiOiBcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsXG4gIFwiMTFcIjogXCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLFxuICBcIjEyXCI6IFwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsXG4gIFwiMTNcIjogXCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXCJcbn0gOiB7fTtcblxuLyoqXG4gKiBzdXBlciBiYXNpYyB2ZXJzaW9uIG9mIHNwcmludGZcbiAqL1xuZnVuY3Rpb24gZm9ybWF0KCkge1xuICB2YXIgYSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGIgPSBbXTtcblxuICBmb3IgKHZhciBjID0gMSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgYyA8IGxlbjsgYyArPSAxKSB7XG4gICAgYi5wdXNoKGFyZ3VtZW50cy5sZW5ndGggPD0gYyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tjXSk7XG4gIH1cblxuICBiLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICBhID0gYS5yZXBsYWNlKC8lW2Etel0vLCBkKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVycm9yIGZpbGUgb3V0IG9mIGVycm9ycy5tZCBmb3IgZGV2ZWxvcG1lbnQgYW5kIGEgc2ltcGxlIHdlYiBsaW5rIHRvIHRoZSBmdWxsIGVycm9yc1xuICogaW4gcHJvZHVjdGlvbiBtb2RlLlxuICovXG5cbnZhciBTdHlsZWRDb21wb25lbnRzRXJyb3IgPSBmdW5jdGlvbiAoX0Vycm9yKSB7XG4gIGluaGVyaXRzKFN0eWxlZENvbXBvbmVudHNFcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBTdHlsZWRDb21wb25lbnRzRXJyb3IoY29kZSkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlZENvbXBvbmVudHNFcnJvcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Vycm9yLmNhbGwodGhpcywgJ0FuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3N0eWxlZC1jb21wb25lbnRzL3NyYy91dGlscy9lcnJvcnMubWQjJyArIGNvZGUgKyAnIGZvciBtb3JlIGluZm9ybWF0aW9uLicgKyAoaW50ZXJwb2xhdGlvbnMubGVuZ3RoID4gMCA/ICcgQWRkaXRpb25hbCBhcmd1bWVudHM6ICcgKyBpbnRlcnBvbGF0aW9ucy5qb2luKCcsICcpIDogJycpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Vycm9yLmNhbGwodGhpcywgZm9ybWF0LmFwcGx5KHVuZGVmaW5lZCwgW0VSUk9SU1tjb2RlXV0uY29uY2F0KGludGVycG9sYXRpb25zKSkudHJpbSgpKSk7XG4gICAgfVxuICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcbiAgfVxuXG4gIHJldHVybiBTdHlsZWRDb21wb25lbnRzRXJyb3I7XG59KEVycm9yKTtcblxuLy8gXG52YXIgU0NfQ09NUE9ORU5UX0lEID0gL15bXlxcU1xcbl0qP1xcL1xcKiBzYy1jb21wb25lbnQtaWQ6XFxzKihcXFMrKVxccytcXCpcXC8vZ207XG5cbnZhciBleHRyYWN0Q29tcHMgPSAoZnVuY3Rpb24gKG1heWJlQ1NTKSB7XG4gIHZhciBjc3MgPSAnJyArIChtYXliZUNTUyB8fCAnJyk7IC8vIERlZmluaXRlbHkgYSBzdHJpbmcsIGFuZCBhIGNsb25lXG4gIHZhciBleGlzdGluZ0NvbXBvbmVudHMgPSBbXTtcbiAgY3NzLnJlcGxhY2UoU0NfQ09NUE9ORU5UX0lELCBmdW5jdGlvbiAobWF0Y2gsIGNvbXBvbmVudElkLCBtYXRjaEluZGV4KSB7XG4gICAgZXhpc3RpbmdDb21wb25lbnRzLnB1c2goeyBjb21wb25lbnRJZDogY29tcG9uZW50SWQsIG1hdGNoSW5kZXg6IG1hdGNoSW5kZXggfSk7XG4gICAgcmV0dXJuIG1hdGNoO1xuICB9KTtcbiAgcmV0dXJuIGV4aXN0aW5nQ29tcG9uZW50cy5tYXAoZnVuY3Rpb24gKF9yZWYsIGkpIHtcbiAgICB2YXIgY29tcG9uZW50SWQgPSBfcmVmLmNvbXBvbmVudElkLFxuICAgICAgICBtYXRjaEluZGV4ID0gX3JlZi5tYXRjaEluZGV4O1xuXG4gICAgdmFyIG5leHRDb21wID0gZXhpc3RpbmdDb21wb25lbnRzW2kgKyAxXTtcbiAgICB2YXIgY3NzRnJvbURPTSA9IG5leHRDb21wID8gY3NzLnNsaWNlKG1hdGNoSW5kZXgsIG5leHRDb21wLm1hdGNoSW5kZXgpIDogY3NzLnNsaWNlKG1hdGNoSW5kZXgpO1xuICAgIHJldHVybiB7IGNvbXBvbmVudElkOiBjb21wb25lbnRJZCwgY3NzRnJvbURPTTogY3NzRnJvbURPTSB9O1xuICB9KTtcbn0pO1xuXG4vLyBcblxudmFyIENPTU1FTlRfUkVHRVggPSAvXlxccypcXC9cXC8uKiQvZ207XG5cbi8vIE5PVEU6IFRoaXMgc3R5bGlzIGluc3RhbmNlIGlzIG9ubHkgdXNlZCB0byBzcGxpdCBydWxlcyBmcm9tIFNTUidkIHN0eWxlIHRhZ3NcbnZhciBzdHlsaXNTcGxpdHRlciA9IG5ldyBTdHlsaXMoe1xuICBnbG9iYWw6IGZhbHNlLFxuICBjYXNjYWRlOiB0cnVlLFxuICBrZXlmcmFtZTogZmFsc2UsXG4gIHByZWZpeDogZmFsc2UsXG4gIGNvbXByZXNzOiBmYWxzZSxcbiAgc2VtaWNvbG9uOiB0cnVlXG59KTtcblxudmFyIHN0eWxpcyA9IG5ldyBTdHlsaXMoe1xuICBnbG9iYWw6IGZhbHNlLFxuICBjYXNjYWRlOiB0cnVlLFxuICBrZXlmcmFtZTogZmFsc2UsXG4gIHByZWZpeDogdHJ1ZSxcbiAgY29tcHJlc3M6IGZhbHNlLFxuICBzZW1pY29sb246IGZhbHNlIC8vIE5PVEU6IFRoaXMgbWVhbnMgXCJhdXRvY29tcGxldGUgbWlzc2luZyBzZW1pY29sb25zXCJcbn0pO1xuXG4vLyBXcmFwIGBpbnNlcnRSdWxlUGx1Z2luIHRvIGJ1aWxkIGEgbGlzdCBvZiBydWxlcyxcbi8vIGFuZCB0aGVuIG1ha2Ugb3VyIG93biBwbHVnaW4gdG8gcmV0dXJuIHRoZSBydWxlcy4gVGhpc1xuLy8gbWFrZXMgaXQgZWFzaWVyIHRvIGhvb2sgaW50byB0aGUgZXhpc3RpbmcgU1NSIGFyY2hpdGVjdHVyZVxuXG52YXIgcGFyc2luZ1J1bGVzID0gW107XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIHJldHVyblJ1bGVzUGx1Z2luID0gZnVuY3Rpb24gcmV0dXJuUnVsZXNQbHVnaW4oY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gLTIpIHtcbiAgICB2YXIgcGFyc2VkUnVsZXMgPSBwYXJzaW5nUnVsZXM7XG4gICAgcGFyc2luZ1J1bGVzID0gW107XG4gICAgcmV0dXJuIHBhcnNlZFJ1bGVzO1xuICB9XG59O1xuXG52YXIgcGFyc2VSdWxlc1BsdWdpbiA9IF9pbnNlcnRSdWxlUGx1Z2luKGZ1bmN0aW9uIChydWxlKSB7XG4gIHBhcnNpbmdSdWxlcy5wdXNoKHJ1bGUpO1xufSk7XG5cbnZhciBfY29tcG9uZW50SWQgPSB2b2lkIDA7XG52YXIgX3NlbGVjdG9yID0gdm9pZCAwO1xudmFyIF9zZWxlY3RvclJlZ2V4cCA9IHZvaWQgMDtcblxudmFyIHNlbGZSZWZlcmVuY2VSZXBsYWNlciA9IGZ1bmN0aW9uIHNlbGZSZWZlcmVuY2VSZXBsYWNlcihtYXRjaCwgb2Zmc2V0LCBzdHJpbmcpIHtcbiAgaWYgKFxuICAvLyB0aGUgZmlyc3Qgc2VsZi1yZWYgaXMgYWx3YXlzIHVudG91Y2hlZFxuICBvZmZzZXQgPiAwICYmXG4gIC8vIHRoZXJlIHNob3VsZCBiZSBhdCBsZWFzdCB0d28gc2VsZi1yZWZzIHRvIGRvIGEgcmVwbGFjZW1lbnQgKC5iID4gLmIpXG4gIHN0cmluZy5zbGljZSgwLCBvZmZzZXQpLmluZGV4T2YoX3NlbGVjdG9yKSAhPT0gLTEgJiZcbiAgLy8gbm8gY29uc2VjdXRpdmUgc2VsZiByZWZzICguYi5iKTsgdGhhdCBpcyBhIHByZWNlZGVuY2UgYm9vc3QgYW5kIHRyZWF0ZWQgZGlmZmVyZW50bHlcbiAgc3RyaW5nLnNsaWNlKG9mZnNldCAtIF9zZWxlY3Rvci5sZW5ndGgsIG9mZnNldCkgIT09IF9zZWxlY3Rvcikge1xuICAgIHJldHVybiAnLicgKyBfY29tcG9uZW50SWQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2g7XG59O1xuXG4vKipcbiAqIFdoZW4gd3JpdGluZyBhIHN0eWxlIGxpa2VcbiAqXG4gKiAmICsgJiB7XG4gKiAgIGNvbG9yOiByZWQ7XG4gKiB9XG4gKlxuICogVGhlIHNlY29uZCBhbXBlcnNhbmQgc2hvdWxkIGJlIGEgcmVmZXJlbmNlIHRvIHRoZSBzdGF0aWMgY29tcG9uZW50IGNsYXNzLiBzdHlsaXNcbiAqIGhhcyBubyBrbm93bGVkZ2Ugb2Ygc3RhdGljIGNsYXNzIHNvIHdlIGhhdmUgdG8gaW50ZWxsaWdlbnRseSByZXBsYWNlIHRoZSBiYXNlIHNlbGVjdG9yLlxuICovXG52YXIgc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luID0gZnVuY3Rpb24gc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luKGNvbnRleHQsIF8sIHNlbGVjdG9ycykge1xuICBpZiAoY29udGV4dCA9PT0gMiAmJiBzZWxlY3RvcnMubGVuZ3RoICYmIHNlbGVjdG9yc1swXS5sYXN0SW5kZXhPZihfc2VsZWN0b3IpID4gMCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHNlbGVjdG9yc1swXSA9IHNlbGVjdG9yc1swXS5yZXBsYWNlKF9zZWxlY3RvclJlZ2V4cCwgc2VsZlJlZmVyZW5jZVJlcGxhY2VyKTtcbiAgfVxufTtcblxuc3R5bGlzLnVzZShbc2VsZlJlZmVyZW5jZVJlcGxhY2VtZW50UGx1Z2luLCBwYXJzZVJ1bGVzUGx1Z2luLCByZXR1cm5SdWxlc1BsdWdpbl0pO1xuc3R5bGlzU3BsaXR0ZXIudXNlKFtwYXJzZVJ1bGVzUGx1Z2luLCByZXR1cm5SdWxlc1BsdWdpbl0pO1xuXG52YXIgc3BsaXRCeVJ1bGVzID0gZnVuY3Rpb24gc3BsaXRCeVJ1bGVzKGNzcykge1xuICByZXR1cm4gc3R5bGlzU3BsaXR0ZXIoJycsIGNzcyk7XG59O1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlSdWxlcyhydWxlcywgc2VsZWN0b3IsIHByZWZpeCkge1xuICB2YXIgY29tcG9uZW50SWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICcmJztcblxuICB2YXIgZmxhdENTUyA9IHJ1bGVzLmpvaW4oJycpLnJlcGxhY2UoQ09NTUVOVF9SRUdFWCwgJycpOyAvLyByZXBsYWNlIEpTIGNvbW1lbnRzXG5cbiAgdmFyIGNzc1N0ciA9IHNlbGVjdG9yICYmIHByZWZpeCA/IHByZWZpeCArICcgJyArIHNlbGVjdG9yICsgJyB7ICcgKyBmbGF0Q1NTICsgJyB9JyA6IGZsYXRDU1M7XG5cbiAgLy8gc3R5bGlzIGhhcyBubyBjb25jZXB0IG9mIHN0YXRlIHRvIGJlIHBhc3NlZCB0byBwbHVnaW5zXG4gIC8vIGJ1dCBzaW5jZSBKUyBpcyBzaW5nbGU9dGhyZWFkZWQsIHdlIGNhbiByZWx5IG9uIHRoYXQgdG8gZW5zdXJlXG4gIC8vIHRoZXNlIHByb3BlcnRpZXMgc3RheSBpbiBzeW5jIHdpdGggdGhlIGN1cnJlbnQgc3R5bGlzIHJ1blxuICBfY29tcG9uZW50SWQgPSBjb21wb25lbnRJZDtcbiAgX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gIF9zZWxlY3RvclJlZ2V4cCA9IG5ldyBSZWdFeHAoJ1xcXFwnICsgX3NlbGVjdG9yICsgJ1xcXFxiJywgJ2cnKTtcblxuICByZXR1cm4gc3R5bGlzKHByZWZpeCB8fCAhc2VsZWN0b3IgPyAnJyA6IHNlbGVjdG9yLCBjc3NTdHIpO1xufVxuXG4vLyBcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSwgbm8tdW5kZWYgKi9cblxudmFyIGdldE5vbmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG59KTtcblxuLy8gXG4vKiBUaGVzZSBhcmUgaGVscGVycyBmb3IgdGhlIFN0eWxlVGFncyB0byBrZWVwIHRyYWNrIG9mIHRoZSBpbmplY3RlZFxuICogcnVsZSBuYW1lcyBmb3IgZWFjaCAoY29tcG9uZW50KSBJRCB0aGF0IHRoZXkncmUga2VlcGluZyB0cmFjayBvZi5cbiAqIFRoZXkncmUgY3J1Y2lhbCBmb3IgZGV0ZWN0aW5nIHdoZXRoZXIgYSBuYW1lIGhhcyBhbHJlYWR5IGJlZW5cbiAqIGluamVjdGVkLlxuICogKFRoaXMgZXhjbHVkZXMgcmVoeWRyYXRlZCBuYW1lcykgKi9cblxuLyogYWRkcyBhIG5ldyBJRDpuYW1lIHBhaXJpbmcgdG8gYSBuYW1lcyBkaWN0aW9uYXJ5ICovXG52YXIgYWRkTmFtZUZvcklkID0gZnVuY3Rpb24gYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSkge1xuICBpZiAobmFtZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHZhciBuYW1lc0ZvcklkID0gbmFtZXNbaWRdIHx8IChuYW1lc1tpZF0gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICBuYW1lc0ZvcklkW25hbWVdID0gdHJ1ZTtcbiAgfVxufTtcblxuLyogcmVzZXRzIGFuIElEIGVudGlyZWx5IGJ5IG92ZXJ3cml0aW5nIGl0IGluIHRoZSBkaWN0aW9uYXJ5ICovXG52YXIgcmVzZXRJZE5hbWVzID0gZnVuY3Rpb24gcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgbmFtZXNbaWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn07XG5cbi8qIGZhY3RvcnkgZm9yIGEgbmFtZXMgZGljdGlvbmFyeSBjaGVja2luZyB0aGUgZXhpc3RhbmNlIG9mIGFuIElEOm5hbWUgcGFpcmluZyAqL1xudmFyIGhhc05hbWVGb3JJZCA9IGZ1bmN0aW9uIGhhc05hbWVGb3JJZChuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGlkLCBuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWVzW2lkXSAhPT0gdW5kZWZpbmVkICYmIG5hbWVzW2lkXVtuYW1lXTtcbiAgfTtcbn07XG5cbi8qIHN0cmluZ2lmaWVzIG5hbWVzIGZvciB0aGUgaHRtbC9lbGVtZW50IG91dHB1dCAqL1xudmFyIHN0cmluZ2lmeU5hbWVzID0gZnVuY3Rpb24gc3RyaW5naWZ5TmFtZXMobmFtZXMpIHtcbiAgdmFyIHN0ciA9ICcnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gIGZvciAodmFyIGlkIGluIG5hbWVzKSB7XG4gICAgc3RyICs9IE9iamVjdC5rZXlzKG5hbWVzW2lkXSkuam9pbignICcpICsgJyAnO1xuICB9XG4gIHJldHVybiBzdHIudHJpbSgpO1xufTtcblxuLyogY2xvbmVzIHRoZSBuZXN0ZWQgbmFtZXMgZGljdGlvbmFyeSAqL1xudmFyIGNsb25lTmFtZXMgPSBmdW5jdGlvbiBjbG9uZU5hbWVzKG5hbWVzKSB7XG4gIHZhciBjbG9uZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yICh2YXIgaWQgaW4gbmFtZXMpIHtcbiAgICBjbG9uZVtpZF0gPSBfZXh0ZW5kcyh7fSwgbmFtZXNbaWRdKTtcbiAgfVxuICByZXR1cm4gY2xvbmU7XG59O1xuXG4vLyBcblxuLyogVGhlc2UgYXJlIGhlbHBlcnMgdGhhdCBkZWFsIHdpdGggdGhlIGluc2VydFJ1bGUgKGFrYSBzcGVlZHkpIEFQSVxuICogVGhleSBhcmUgdXNlZCBpbiB0aGUgU3R5bGVUYWdzIGFuZCBzcGVjaWZpY2FsbHkgdGhlIHNwZWVkeSB0YWdcbiAqL1xuXG4vKiByZXRyaWV2ZSBhIHNoZWV0IGZvciBhIGdpdmVuIHN0eWxlIHRhZyAqL1xudmFyIHNoZWV0Rm9yVGFnID0gZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHRhZy5zaGVldCkgcmV0dXJuIHRhZy5zaGVldDtcblxuICAvKiBGaXJlZm94IHF1aXJrIHJlcXVpcmVzIHVzIHRvIHN0ZXAgdGhyb3VnaCBhbGwgc3R5bGVzaGVldHMgdG8gZmluZCBvbmUgb3duZWQgYnkgdGhlIGdpdmVuIHRhZyAqL1xuICB2YXIgc2l6ZSA9IHRhZy5vd25lckRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IDEpIHtcbiAgICB2YXIgc2hlZXQgPSB0YWcub3duZXJEb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKHNoZWV0Lm93bmVyTm9kZSA9PT0gdGFnKSByZXR1cm4gc2hlZXQ7XG4gIH1cblxuICAvKiB3ZSBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gZmluZCBhIHRhZyAqL1xuICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDEwKTtcbn07XG5cbi8qIGluc2VydCBhIHJ1bGUgc2FmZWx5IGFuZCByZXR1cm4gd2hldGhlciBpdCB3YXMgYWN0dWFsbHkgaW5qZWN0ZWQgKi9cbnZhciBzYWZlSW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIHNhZmVJbnNlcnRSdWxlKHNoZWV0LCBjc3NSdWxlLCBpbmRleCkge1xuICAvKiBhYm9ydCBlYXJseSBpZiBjc3NSdWxlIHN0cmluZyBpcyBmYWxzeSAqL1xuICBpZiAoIWNzc1J1bGUpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4SW5kZXggPSBzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG5cbiAgdHJ5IHtcbiAgICAvKiB1c2UgaW5zZXJ0UnVsZSBhbmQgY2FwIHBhc3NlZCBpbmRleCB3aXRoIG1heEluZGV4IChubyBvZiBjc3NSdWxlcykgKi9cbiAgICBzaGVldC5pbnNlcnRSdWxlKGNzc1J1bGUsIGluZGV4IDw9IG1heEluZGV4ID8gaW5kZXggOiBtYXhJbmRleCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8qIGFueSBlcnJvciBpbmRpY2F0ZXMgYW4gaW52YWxpZCBydWxlICovXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKiBkZWxldGVzIGBzaXplYCBydWxlcyBzdGFydGluZyBmcm9tIGByZW1vdmFsSW5kZXhgICovXG52YXIgZGVsZXRlUnVsZXMgPSBmdW5jdGlvbiBkZWxldGVSdWxlcyhzaGVldCwgcmVtb3ZhbEluZGV4LCBzaXplKSB7XG4gIHZhciBsb3dlckJvdW5kID0gcmVtb3ZhbEluZGV4IC0gc2l6ZTtcbiAgZm9yICh2YXIgaSA9IHJlbW92YWxJbmRleDsgaSA+IGxvd2VyQm91bmQ7IGkgLT0gMSkge1xuICAgIHNoZWV0LmRlbGV0ZVJ1bGUoaSk7XG4gIH1cbn07XG5cbi8vIFxuXG4vKiB0aGlzIG1hcmtlciBzZXBhcmF0ZXMgY29tcG9uZW50IHN0eWxlcyBhbmQgaXMgaW1wb3J0YW50IGZvciByZWh5ZHJhdGlvbiAqL1xudmFyIG1ha2VUZXh0TWFya2VyID0gZnVuY3Rpb24gbWFrZVRleHRNYXJrZXIoaWQpIHtcbiAgcmV0dXJuICdcXG4vKiBzYy1jb21wb25lbnQtaWQ6ICcgKyBpZCArICcgKi9cXG4nO1xufTtcblxuLyogYWRkIHVwIGFsbCBudW1iZXJzIGluIGFycmF5IHVwIHVudGlsIGFuZCBpbmNsdWRpbmcgdGhlIGluZGV4ICovXG52YXIgYWRkVXBVbnRpbEluZGV4ID0gZnVuY3Rpb24gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBpbmRleCkge1xuICB2YXIgdG90YWxVcFRvSW5kZXggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8PSBpbmRleDsgaSArPSAxKSB7XG4gICAgdG90YWxVcFRvSW5kZXggKz0gc2l6ZXNbaV07XG4gIH1cblxuICByZXR1cm4gdG90YWxVcFRvSW5kZXg7XG59O1xuXG4vKiBjcmVhdGUgYSBuZXcgc3R5bGUgdGFnIGFmdGVyIGxhc3RFbCAqL1xudmFyIG1ha2VTdHlsZVRhZyA9IGZ1bmN0aW9uIG1ha2VTdHlsZVRhZyh0YXJnZXQsIHRhZ0VsLCBpbnNlcnRCZWZvcmUpIHtcbiAgdmFyIHRhcmdldERvY3VtZW50ID0gZG9jdW1lbnQ7XG4gIGlmICh0YXJnZXQpIHRhcmdldERvY3VtZW50ID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7ZWxzZSBpZiAodGFnRWwpIHRhcmdldERvY3VtZW50ID0gdGFnRWwub3duZXJEb2N1bWVudDtcblxuICB2YXIgZWwgPSB0YXJnZXREb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBlbC5zZXRBdHRyaWJ1dGUoU0NfQVRUUiwgJycpO1xuICBlbC5zZXRBdHRyaWJ1dGUoU0NfVkVSU0lPTl9BVFRSLCBcIjQuNC4xXCIpO1xuXG4gIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gIGlmIChub25jZSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cblxuICAvKiBXb3JrIGFyb3VuZCBpbnNlcnRSdWxlIHF1aXJrIGluIEVkZ2VIVE1MICovXG4gIGVsLmFwcGVuZENoaWxkKHRhcmdldERvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG5cbiAgaWYgKHRhcmdldCAmJiAhdGFnRWwpIHtcbiAgICAvKiBBcHBlbmQgdG8gdGFyZ2V0IHdoZW4gbm8gcHJldmlvdXMgZWxlbWVudCB3YXMgcGFzc2VkICovXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXRhZ0VsIHx8ICF0YXJnZXQgfHwgIXRhZ0VsLnBhcmVudE5vZGUpIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoNik7XG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IG5ldyBzdHlsZSB0YWcgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZSAqL1xuICAgIHRhZ0VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCBpbnNlcnRCZWZvcmUgPyB0YWdFbCA6IHRhZ0VsLm5leHRTaWJsaW5nKTtcbiAgfVxuXG4gIHJldHVybiBlbDtcbn07XG5cbi8qIHRha2VzIGEgY3NzIGZhY3RvcnkgZnVuY3Rpb24gYW5kIG91dHB1dHMgYW4gaHRtbCBzdHlsZWQgdGFnIGZhY3RvcnkgKi9cbnZhciB3cmFwQXNIdG1sVGFnID0gZnVuY3Rpb24gd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYWRkaXRpb25hbEF0dHJzKSB7XG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICB2YXIgYXR0cnMgPSBbbm9uY2UgJiYgJ25vbmNlPVwiJyArIG5vbmNlICsgJ1wiJywgU0NfQVRUUiArICc9XCInICsgc3RyaW5naWZ5TmFtZXMobmFtZXMpICsgJ1wiJywgU0NfVkVSU0lPTl9BVFRSICsgJz1cIicgKyBcIjQuNC4xXCIgKyAnXCInLCBhZGRpdGlvbmFsQXR0cnNdO1xuXG4gICAgdmFyIGh0bWxBdHRyID0gYXR0cnMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcbiAgICByZXR1cm4gJzxzdHlsZSAnICsgaHRtbEF0dHIgKyAnPicgKyBjc3MoKSArICc8L3N0eWxlPic7XG4gIH07XG59O1xuXG4vKiB0YWtlcyBhIGNzcyBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBvdXRwdXRzIGFuIGVsZW1lbnQgZmFjdG9yeSAqL1xudmFyIHdyYXBBc0VsZW1lbnQgPSBmdW5jdGlvbiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzO1xuXG4gICAgdmFyIHByb3BzID0gKF9wcm9wcyA9IHt9LCBfcHJvcHNbU0NfQVRUUl0gPSBzdHJpbmdpZnlOYW1lcyhuYW1lcyksIF9wcm9wc1tTQ19WRVJTSU9OX0FUVFJdID0gXCI0LjQuMVwiLCBfcHJvcHMpO1xuXG4gICAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHByb3BzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWRhbmdlclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdzdHlsZScsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IGNzcygpIH0gfSkpO1xuICB9O1xufTtcblxudmFyIGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeSA9IGZ1bmN0aW9uIGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeShtYXJrZXJzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcmtlcnMpO1xuICB9O1xufTtcblxuLyogc3BlZWR5IHRhZ3MgdXRpbGlzZSBpbnNlcnRSdWxlICovXG52YXIgbWFrZVNwZWVkeVRhZyA9IGZ1bmN0aW9uIG1ha2VTcGVlZHlUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpIHtcbiAgdmFyIG5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIG1hcmtlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc2l6ZXMgPSBbXTtcblxuICB2YXIgZXh0cmFjdEltcG9ydCA9IGdldEltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZDtcbiAgLyogaW5kaWNhdGVzIHdoZXRoZXIgZ2V0SW1wb3J0UnVsZVRhZyB3YXMgY2FsbGVkICovXG4gIHZhciB1c2VkSW1wb3J0UnVsZVRhZyA9IGZhbHNlO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIG1hcmtlcnNbaWRdID0gc2l6ZXMubGVuZ3RoO1xuICAgIHNpemVzLnB1c2goMCk7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG5cbiAgICByZXR1cm4gbWFya2Vyc1tpZF07XG4gIH07XG5cbiAgdmFyIGluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMoaWQsIGNzc1J1bGVzLCBuYW1lKSB7XG4gICAgdmFyIG1hcmtlciA9IGluc2VydE1hcmtlcihpZCk7XG4gICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcoZWwpO1xuICAgIHZhciBpbnNlcnRJbmRleCA9IGFkZFVwVW50aWxJbmRleChzaXplcywgbWFya2VyKTtcblxuICAgIHZhciBpbmplY3RlZFJ1bGVzID0gMDtcbiAgICB2YXIgaW1wb3J0UnVsZXMgPSBbXTtcbiAgICB2YXIgY3NzUnVsZXNTaXplID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlc1NpemU7IGkgKz0gMSkge1xuICAgICAgdmFyIGNzc1J1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgIHZhciBtYXlIYXZlSW1wb3J0ID0gZXh0cmFjdEltcG9ydDsgLyogQGltcG9ydCBydWxlcyBhcmUgcmVvcmRlcmVkIHRvIGFwcGVhciBmaXJzdCAqL1xuICAgICAgaWYgKG1heUhhdmVJbXBvcnQgJiYgY3NzUnVsZS5pbmRleE9mKCdAaW1wb3J0JykgIT09IC0xKSB7XG4gICAgICAgIGltcG9ydFJ1bGVzLnB1c2goY3NzUnVsZSk7XG4gICAgICB9IGVsc2UgaWYgKHNhZmVJbnNlcnRSdWxlKHNoZWV0LCBjc3NSdWxlLCBpbnNlcnRJbmRleCArIGluamVjdGVkUnVsZXMpKSB7XG4gICAgICAgIG1heUhhdmVJbXBvcnQgPSBmYWxzZTtcbiAgICAgICAgaW5qZWN0ZWRSdWxlcyArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIGltcG9ydFJ1bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHVzZWRJbXBvcnRSdWxlVGFnID0gdHJ1ZTtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldEltcG9ydFJ1bGVUYWcoKS5pbnNlcnRSdWxlcyhpZCArICctaW1wb3J0JywgaW1wb3J0UnVsZXMpO1xuICAgIH1cblxuICAgIHNpemVzW21hcmtlcl0gKz0gaW5qZWN0ZWRSdWxlczsgLyogYWRkIHVwIG5vIG9mIGluamVjdGVkIHJ1bGVzICovXG4gICAgYWRkTmFtZUZvcklkKG5hbWVzLCBpZCwgbmFtZSk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZVJ1bGVzID0gZnVuY3Rpb24gcmVtb3ZlUnVsZXMoaWQpIHtcbiAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKG1hcmtlciA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmIChlbC5pc0Nvbm5lY3RlZCA9PT0gZmFsc2UpIHJldHVybjtcblxuICAgIHZhciBzaXplID0gc2l6ZXNbbWFya2VyXTtcbiAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyhlbCk7XG4gICAgdmFyIHJlbW92YWxJbmRleCA9IGFkZFVwVW50aWxJbmRleChzaXplcywgbWFya2VyKSAtIDE7XG4gICAgZGVsZXRlUnVsZXMoc2hlZXQsIHJlbW92YWxJbmRleCwgc2l6ZSk7XG4gICAgc2l6ZXNbbWFya2VyXSA9IDA7XG4gICAgcmVzZXRJZE5hbWVzKG5hbWVzLCBpZCk7XG5cbiAgICBpZiAoZXh0cmFjdEltcG9ydCAmJiB1c2VkSW1wb3J0UnVsZVRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLnJlbW92ZVJ1bGVzKGlkICsgJy1pbXBvcnQnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICB2YXIgX3NoZWV0Rm9yVGFnID0gc2hlZXRGb3JUYWcoZWwpLFxuICAgICAgICBjc3NSdWxlcyA9IF9zaGVldEZvclRhZy5jc3NSdWxlcztcblxuICAgIHZhciBzdHIgPSAnJztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBzdHIgKz0gbWFrZVRleHRNYXJrZXIoaWQpO1xuICAgICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgICAgdmFyIGVuZCA9IGFkZFVwVW50aWxJbmRleChzaXplcywgbWFya2VyKTtcbiAgICAgIHZhciBzaXplID0gc2l6ZXNbbWFya2VyXTtcbiAgICAgIGZvciAodmFyIGkgPSBlbmQgLSBzaXplOyBpIDwgZW5kOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgICAgaWYgKHJ1bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0ciArPSBydWxlLmNzc1RleHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig1KTtcbiAgICB9LFxuXG4gICAgY3NzOiBjc3MsXG4gICAgZ2V0SWRzOiBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkobWFya2VycyksXG4gICAgaGFzTmFtZUZvcklkOiBoYXNOYW1lRm9ySWQobmFtZXMpLFxuICAgIGluc2VydE1hcmtlcjogaW5zZXJ0TWFya2VyLFxuICAgIGluc2VydFJ1bGVzOiBpbnNlcnRSdWxlcyxcbiAgICByZW1vdmVSdWxlczogcmVtb3ZlUnVsZXMsXG4gICAgc2VhbGVkOiBmYWxzZSxcbiAgICBzdHlsZVRhZzogZWwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xufTtcblxudmFyIG1ha2VUZXh0Tm9kZSA9IGZ1bmN0aW9uIG1ha2VUZXh0Tm9kZSh0YXJnZXREb2N1bWVudCwgaWQpIHtcbiAgcmV0dXJuIHRhcmdldERvY3VtZW50LmNyZWF0ZVRleHROb2RlKG1ha2VUZXh0TWFya2VyKGlkKSk7XG59O1xuXG52YXIgbWFrZUJyb3dzZXJUYWcgPSBmdW5jdGlvbiBtYWtlQnJvd3NlclRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICB2YXIgbmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbWFya2VycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgdmFyIGV4dHJhY3RJbXBvcnQgPSBnZXRJbXBvcnRSdWxlVGFnICE9PSB1bmRlZmluZWQ7XG5cbiAgLyogaW5kaWNhdGVzIHdoZXRoZXIgZ2V0SW1wb3J0UnVsZVRhZyB3YXMgY2FsbGVkICovXG4gIHZhciB1c2VkSW1wb3J0UnVsZVRhZyA9IGZhbHNlO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIG1hcmtlcnNbaWRdID0gbWFrZVRleHROb2RlKGVsLm93bmVyRG9jdW1lbnQsIGlkKTtcbiAgICBlbC5hcHBlbmRDaGlsZChtYXJrZXJzW2lkXSk7XG4gICAgbmFtZXNbaWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHJldHVybiBtYXJrZXJzW2lkXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICB2YXIgaW1wb3J0UnVsZXMgPSBbXTtcbiAgICB2YXIgY3NzUnVsZXNTaXplID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlc1NpemU7IGkgKz0gMSkge1xuICAgICAgdmFyIHJ1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgIHZhciBtYXlIYXZlSW1wb3J0ID0gZXh0cmFjdEltcG9ydDtcbiAgICAgIGlmIChtYXlIYXZlSW1wb3J0ICYmIHJ1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSkge1xuICAgICAgICBpbXBvcnRSdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF5SGF2ZUltcG9ydCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gaSA9PT0gY3NzUnVsZXNTaXplIC0gMSA/ICcnIDogJyAnO1xuICAgICAgICBtYXJrZXIuYXBwZW5kRGF0YSgnJyArIHJ1bGUgKyBzZXBhcmF0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuXG4gICAgaWYgKGV4dHJhY3RJbXBvcnQgJiYgaW1wb3J0UnVsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdXNlZEltcG9ydFJ1bGVUYWcgPSB0cnVlO1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLmluc2VydFJ1bGVzKGlkICsgJy1pbXBvcnQnLCBpbXBvcnRSdWxlcyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgLyogY3JlYXRlIG5ldyBlbXB0eSB0ZXh0IG5vZGUgYW5kIHJlcGxhY2UgdGhlIGN1cnJlbnQgb25lICovXG4gICAgdmFyIG5ld01hcmtlciA9IG1ha2VUZXh0Tm9kZShlbC5vd25lckRvY3VtZW50LCBpZCk7XG4gICAgZWwucmVwbGFjZUNoaWxkKG5ld01hcmtlciwgbWFya2VyKTtcbiAgICBtYXJrZXJzW2lkXSA9IG5ld01hcmtlcjtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIHVzZWRJbXBvcnRSdWxlVGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkucmVtb3ZlUnVsZXMoaWQgKyAnLWltcG9ydCcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBzdHIgPSAnJztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBzdHIgKz0gbWFya2Vyc1tpZF0uZGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig1KTtcbiAgICB9LFxuXG4gICAgY3NzOiBjc3MsXG4gICAgZ2V0SWRzOiBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkobWFya2VycyksXG4gICAgaGFzTmFtZUZvcklkOiBoYXNOYW1lRm9ySWQobmFtZXMpLFxuICAgIGluc2VydE1hcmtlcjogaW5zZXJ0TWFya2VyLFxuICAgIGluc2VydFJ1bGVzOiBpbnNlcnRSdWxlcyxcbiAgICByZW1vdmVSdWxlczogcmVtb3ZlUnVsZXMsXG4gICAgc2VhbGVkOiBmYWxzZSxcbiAgICBzdHlsZVRhZzogZWwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xufTtcblxudmFyIG1ha2VTZXJ2ZXJUYWcgPSBmdW5jdGlvbiBtYWtlU2VydmVyVGFnKG5hbWVzQXJnLCBtYXJrZXJzQXJnKSB7XG4gIHZhciBuYW1lcyA9IG5hbWVzQXJnID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogbmFtZXNBcmc7XG4gIHZhciBtYXJrZXJzID0gbWFya2Vyc0FyZyA9PT0gdW5kZWZpbmVkID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IG1hcmtlcnNBcmc7XG5cbiAgdmFyIGluc2VydE1hcmtlciA9IGZ1bmN0aW9uIGluc2VydE1hcmtlcihpZCkge1xuICAgIHZhciBwcmV2ID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtlcnNbaWRdID0gWycnXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICBtYXJrZXJbMF0gKz0gY3NzUnVsZXMuam9pbignICcpO1xuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIG1hcmtlclswXSA9ICcnO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuICB9O1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICB2YXIgY3NzRm9ySWQgPSBtYXJrZXJzW2lkXVswXTtcbiAgICAgIGlmIChjc3NGb3JJZCkge1xuICAgICAgICBzdHIgKz0gbWFrZVRleHRNYXJrZXIoaWQpICsgY3NzRm9ySWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgdmFyIGNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgdmFyIG5hbWVzQ2xvbmUgPSBjbG9uZU5hbWVzKG5hbWVzKTtcbiAgICB2YXIgbWFya2Vyc0Nsb25lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBtYXJrZXJzQ2xvbmVbaWRdID0gW21hcmtlcnNbaWRdWzBdXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZVNlcnZlclRhZyhuYW1lc0Nsb25lLCBtYXJrZXJzQ2xvbmUpO1xuICB9O1xuXG4gIHZhciB0YWcgPSB7XG4gICAgY2xvbmU6IGNsb25lLFxuICAgIGNzczogY3NzLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIHNlYWxlZDogZmFsc2UsXG4gICAgc3R5bGVUYWc6IG51bGwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xuXG4gIHJldHVybiB0YWc7XG59O1xuXG52YXIgbWFrZVRhZyA9IGZ1bmN0aW9uIG1ha2VUYWcodGFyZ2V0LCB0YWdFbCwgZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICBpZiAoSVNfQlJPV1NFUiAmJiAhZm9yY2VTZXJ2ZXIpIHtcbiAgICB2YXIgZWwgPSBtYWtlU3R5bGVUYWcodGFyZ2V0LCB0YWdFbCwgaW5zZXJ0QmVmb3JlKTtcblxuICAgIGlmIChESVNBQkxFX1NQRUVEWSkge1xuICAgICAgcmV0dXJuIG1ha2VCcm93c2VyVGFnKGVsLCBnZXRJbXBvcnRSdWxlVGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1ha2VTcGVlZHlUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYWtlU2VydmVyVGFnKCk7XG59O1xuXG52YXIgcmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlKHRhZywgZWxzLCBleHRyYWN0ZWQpIHtcbiAgLyogYWRkIGFsbCBleHRyYWN0ZWQgY29tcG9uZW50cyB0byB0aGUgbmV3IHRhZyAqL1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXh0cmFjdGVkLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgdmFyIF9leHRyYWN0ZWQkaSA9IGV4dHJhY3RlZFtpXSxcbiAgICAgICAgY29tcG9uZW50SWQgPSBfZXh0cmFjdGVkJGkuY29tcG9uZW50SWQsXG4gICAgICAgIGNzc0Zyb21ET00gPSBfZXh0cmFjdGVkJGkuY3NzRnJvbURPTTtcblxuICAgIHZhciBjc3NSdWxlcyA9IHNwbGl0QnlSdWxlcyhjc3NGcm9tRE9NKTtcbiAgICB0YWcuaW5zZXJ0UnVsZXMoY29tcG9uZW50SWQsIGNzc1J1bGVzKTtcbiAgfVxuXG4gIC8qIHJlbW92ZSBvbGQgSFRNTFN0eWxlRWxlbWVudHMsIHNpbmNlIHRoZXkgaGF2ZSBiZWVuIHJlaHlkcmF0ZWQgKi9cbiAgZm9yICh2YXIgX2kgPSAwLCBfbGVuID0gZWxzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSArPSAxKSB7XG4gICAgdmFyIGVsID0gZWxzW19pXTtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSkge1xuICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBcblxudmFyIFNQTElUX1JFR0VYID0gL1xccysvO1xuXG4vKiBkZXRlcm1pbmUgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNvbXBvbmVudHMgYmVmb3JlIHRhZ3MgYXJlIHNoYXJkZWQgKi9cbnZhciBNQVhfU0laRSA9IHZvaWQgMDtcbmlmIChJU19CUk9XU0VSKSB7XG4gIC8qIGluIHNwZWVkeSBtb2RlIHdlIGNhbiBrZWVwIGEgbG90IG1vcmUgcnVsZXMgaW4gYSBzaGVldCBiZWZvcmUgYSBzbG93ZG93biBjYW4gYmUgZXhwZWN0ZWQgKi9cbiAgTUFYX1NJWkUgPSBESVNBQkxFX1NQRUVEWSA/IDQwIDogMTAwMDtcbn0gZWxzZSB7XG4gIC8qIGZvciBzZXJ2ZXJzIHdlIGRvIG5vdCBuZWVkIHRvIHNoYXJkIGF0IGFsbCAqL1xuICBNQVhfU0laRSA9IC0xO1xufVxuXG52YXIgc2hlZXRSdW5uaW5nSWQgPSAwO1xudmFyIG1hc3RlciA9IHZvaWQgMDtcblxudmFyIFN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLyogYSBtYXAgZnJvbSBpZHMgdG8gdGFncyAqL1xuXG4gIC8qIGRlZmVycmVkIHJ1bGVzIGZvciBhIGdpdmVuIGlkICovXG5cbiAgLyogdGhpcyBpcyB1c2VkIGZvciBub3QgcmVpbmplY3RpbmcgcnVsZXMgdmlhIGhhc05hbWVGb3JJZCgpICovXG5cbiAgLyogd2hlbiBydWxlcyBmb3IgYW4gaWQgYXJlIHJlbW92ZWQgdXNpbmcgcmVtb3ZlKCkgd2UgaGF2ZSB0byBpZ25vcmUgcmVoeWRyYXRlZE5hbWVzIGZvciBpdCAqL1xuXG4gIC8qIGEgbGlzdCBvZiB0YWdzIGJlbG9uZ2luZyB0byB0aGlzIFN0eWxlU2hlZXQgKi9cblxuICAvKiBhIHRhZyBmb3IgaW1wb3J0IHJ1bGVzICovXG5cbiAgLyogY3VycmVudCBjYXBhY2l0eSB1bnRpbCBhIG5ldyB0YWcgbXVzdCBiZSBjcmVhdGVkICovXG5cbiAgLyogY2hpbGRyZW4gKGFrYSBjbG9uZXMpIG9mIHRoaXMgU3R5bGVTaGVldCBpbmhlcml0aW5nIGFsbCBhbmQgZnV0dXJlIGluamVjdGlvbnMgKi9cblxuICBmdW5jdGlvbiBTdHlsZVNoZWV0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBJU19CUk9XU0VSID8gZG9jdW1lbnQuaGVhZCA6IG51bGw7XG4gICAgdmFyIGZvcmNlU2VydmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZVNoZWV0KTtcblxuICAgIHRoaXMuZ2V0SW1wb3J0UnVsZVRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbXBvcnRSdWxlVGFnID0gX3RoaXMuaW1wb3J0UnVsZVRhZztcblxuICAgICAgaWYgKGltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaW1wb3J0UnVsZVRhZztcbiAgICAgIH1cblxuICAgICAgdmFyIGZpcnN0VGFnID0gX3RoaXMudGFnc1swXTtcbiAgICAgIHZhciBpbnNlcnRCZWZvcmUgPSB0cnVlO1xuXG4gICAgICByZXR1cm4gX3RoaXMuaW1wb3J0UnVsZVRhZyA9IG1ha2VUYWcoX3RoaXMudGFyZ2V0LCBmaXJzdFRhZyA/IGZpcnN0VGFnLnN0eWxlVGFnIDogbnVsbCwgX3RoaXMuZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSk7XG4gICAgfTtcblxuICAgIHNoZWV0UnVubmluZ0lkICs9IDE7XG4gICAgdGhpcy5pZCA9IHNoZWV0UnVubmluZ0lkO1xuICAgIHRoaXMuZm9yY2VTZXJ2ZXIgPSBmb3JjZVNlcnZlcjtcbiAgICB0aGlzLnRhcmdldCA9IGZvcmNlU2VydmVyID8gbnVsbCA6IHRhcmdldDtcbiAgICB0aGlzLnRhZ01hcCA9IHt9O1xuICAgIHRoaXMuZGVmZXJyZWQgPSB7fTtcbiAgICB0aGlzLnJlaHlkcmF0ZWROYW1lcyA9IHt9O1xuICAgIHRoaXMuaWdub3JlUmVoeWRyYXRlZE5hbWVzID0ge307XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jYXBhY2l0eSA9IDE7XG4gICAgdGhpcy5jbG9uZXMgPSBbXTtcbiAgfVxuXG4gIC8qIHJlaHlkcmF0ZSBhbGwgU1NSJ2Qgc3R5bGUgdGFncyAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUucmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlJCQxKCkge1xuICAgIGlmICghSVNfQlJPV1NFUiB8fCB0aGlzLmZvcmNlU2VydmVyKSByZXR1cm4gdGhpcztcblxuICAgIHZhciBlbHMgPSBbXTtcbiAgICB2YXIgZXh0cmFjdGVkID0gW107XG4gICAgdmFyIGlzU3RyZWFtZWQgPSBmYWxzZTtcblxuICAgIC8qIHJldHJpZXZlIGFsbCBvZiBvdXIgU1NSIHN0eWxlIGVsZW1lbnRzIGZyb20gdGhlIERPTSAqL1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlWycgKyBTQ19BVFRSICsgJ11bJyArIFNDX1ZFUlNJT05fQVRUUiArICc9XCInICsgXCI0LjQuMVwiICsgJ1wiXScpO1xuXG4gICAgdmFyIG5vZGVzU2l6ZSA9IG5vZGVzLmxlbmd0aDtcblxuICAgIC8qIGFib3J0IHJlaHlkcmF0aW9uIGlmIG5vIHByZXZpb3VzIHN0eWxlIHRhZ3Mgd2VyZSBmb3VuZCAqL1xuICAgIGlmICghbm9kZXNTaXplKSByZXR1cm4gdGhpcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBlbCA9IG5vZGVzW2ldO1xuXG4gICAgICAvKiBjaGVjayBpZiBzdHlsZSB0YWcgaXMgYSBzdHJlYW1lZCB0YWcgKi9cbiAgICAgIGlmICghaXNTdHJlYW1lZCkgaXNTdHJlYW1lZCA9ICEhZWwuZ2V0QXR0cmlidXRlKFNDX1NUUkVBTV9BVFRSKTtcblxuICAgICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBuYW1lcyAqL1xuICAgICAgdmFyIGVsTmFtZXMgPSAoZWwuZ2V0QXR0cmlidXRlKFNDX0FUVFIpIHx8ICcnKS50cmltKCkuc3BsaXQoU1BMSVRfUkVHRVgpO1xuICAgICAgdmFyIGVsTmFtZXNTaXplID0gZWxOYW1lcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBqID0gMCwgbmFtZTsgaiA8IGVsTmFtZXNTaXplOyBqICs9IDEpIHtcbiAgICAgICAgbmFtZSA9IGVsTmFtZXNbal07XG4gICAgICAgIC8qIGFkZCByZWh5ZHJhdGVkIG5hbWUgdG8gc2hlZXQgdG8gYXZvaWQgcmUtYWRkaW5nIHN0eWxlcyAqL1xuICAgICAgICB0aGlzLnJlaHlkcmF0ZWROYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIGV4dHJhY3QgYWxsIGNvbXBvbmVudHMgYW5kIHRoZWlyIENTUyAqL1xuICAgICAgZXh0cmFjdGVkLnB1c2guYXBwbHkoZXh0cmFjdGVkLCBleHRyYWN0Q29tcHMoZWwudGV4dENvbnRlbnQpKTtcblxuICAgICAgLyogc3RvcmUgb3JpZ2luYWwgSFRNTFN0eWxlRWxlbWVudCAqL1xuICAgICAgZWxzLnB1c2goZWwpO1xuICAgIH1cblxuICAgIC8qIGFib3J0IHJlaHlkcmF0aW9uIGlmIG5vdGhpbmcgd2FzIGV4dHJhY3RlZCAqL1xuICAgIHZhciBleHRyYWN0ZWRTaXplID0gZXh0cmFjdGVkLmxlbmd0aDtcbiAgICBpZiAoIWV4dHJhY3RlZFNpemUpIHJldHVybiB0aGlzO1xuXG4gICAgLyogY3JlYXRlIGEgdGFnIHRvIGJlIHVzZWQgZm9yIHJlaHlkcmF0aW9uICovXG4gICAgdmFyIHRhZyA9IHRoaXMubWFrZVRhZyhudWxsKTtcblxuICAgIHJlaHlkcmF0ZSh0YWcsIGVscywgZXh0cmFjdGVkKTtcblxuICAgIC8qIHJlc2V0IGNhcGFjaXR5IGFuZCBhZGp1c3QgTUFYX1NJWkUgYnkgdGhlIGluaXRpYWwgc2l6ZSBvZiB0aGUgcmVoeWRyYXRpb24gKi9cbiAgICB0aGlzLmNhcGFjaXR5ID0gTWF0aC5tYXgoMSwgTUFYX1NJWkUgLSBleHRyYWN0ZWRTaXplKTtcbiAgICB0aGlzLnRhZ3MucHVzaCh0YWcpO1xuXG4gICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBpZHMgKi9cbiAgICBmb3IgKHZhciBfaiA9IDA7IF9qIDwgZXh0cmFjdGVkU2l6ZTsgX2ogKz0gMSkge1xuICAgICAgdGhpcy50YWdNYXBbZXh0cmFjdGVkW19qXS5jb21wb25lbnRJZF0gPSB0YWc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyogcmV0cmlldmUgYSBcIm1hc3RlclwiIGluc3RhbmNlIG9mIFN0eWxlU2hlZXQgd2hpY2ggaXMgdHlwaWNhbGx5IHVzZWQgd2hlbiBubyBvdGhlciBpcyBhdmFpbGFibGVcbiAgICogVGhlIG1hc3RlciBTdHlsZVNoZWV0IGlzIHRhcmdldGVkIGJ5IGNyZWF0ZUdsb2JhbFN0eWxlLCBrZXlmcmFtZXMsIGFuZCBjb21wb25lbnRzIG91dHNpZGUgb2YgYW55XG4gICAgKiBTdHlsZVNoZWV0TWFuYWdlcidzIGNvbnRleHQgKi9cblxuXG4gIC8qIHJlc2V0IHRoZSBpbnRlcm5hbCBcIm1hc3RlclwiIGluc3RhbmNlICovXG4gIFN0eWxlU2hlZXQucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2YXIgZm9yY2VTZXJ2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgbWFzdGVyID0gbmV3IFN0eWxlU2hlZXQodW5kZWZpbmVkLCBmb3JjZVNlcnZlcikucmVoeWRyYXRlKCk7XG4gIH07XG5cbiAgLyogYWRkcyBcImNoaWxkcmVuXCIgdG8gdGhlIFN0eWxlU2hlZXQgdGhhdCBpbmhlcml0IGFsbCBvZiB0aGUgcGFyZW50cycgcnVsZXNcbiAgICogd2hpbGUgdGhlaXIgb3duIHJ1bGVzIGRvIG5vdCBhZmZlY3QgdGhlIHBhcmVudCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldCh0aGlzLnRhcmdldCwgdGhpcy5mb3JjZVNlcnZlcik7XG5cbiAgICAvKiBhZGQgdG8gY2xvbmUgYXJyYXkgKi9cbiAgICB0aGlzLmNsb25lcy5wdXNoKHNoZWV0KTtcblxuICAgIC8qIGNsb25lIGFsbCB0YWdzICovXG4gICAgc2hlZXQudGFncyA9IHRoaXMudGFncy5tYXAoZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGlkcyA9IHRhZy5nZXRJZHMoKTtcbiAgICAgIHZhciBuZXdUYWcgPSB0YWcuY2xvbmUoKTtcblxuICAgICAgLyogcmVjb25zdHJ1Y3QgdGFnTWFwICovXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzaGVldC50YWdNYXBbaWRzW2ldXSA9IG5ld1RhZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1RhZztcbiAgICB9KTtcblxuICAgIC8qIGNsb25lIG90aGVyIG1hcHMgKi9cbiAgICBzaGVldC5yZWh5ZHJhdGVkTmFtZXMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5yZWh5ZHJhdGVkTmFtZXMpO1xuICAgIHNoZWV0LmRlZmVycmVkID0gX2V4dGVuZHMoe30sIHRoaXMuZGVmZXJyZWQpO1xuXG4gICAgcmV0dXJuIHNoZWV0O1xuICB9O1xuXG4gIC8qIGZvcmNlIFN0eWxlU2hlZXQgdG8gY3JlYXRlIGEgbmV3IHRhZyBvbiB0aGUgbmV4dCBpbmplY3Rpb24gKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnNlYWxBbGxUYWdzID0gZnVuY3Rpb24gc2VhbEFsbFRhZ3MoKSB7XG4gICAgdGhpcy5jYXBhY2l0eSA9IDE7XG5cbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIHRhZy5zZWFsZWQgPSB0cnVlO1xuICAgIH0pO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLm1ha2VUYWcgPSBmdW5jdGlvbiBtYWtlVGFnJCQxKHRhZykge1xuICAgIHZhciBsYXN0RWwgPSB0YWcgPyB0YWcuc3R5bGVUYWcgOiBudWxsO1xuICAgIHZhciBpbnNlcnRCZWZvcmUgPSBmYWxzZTtcblxuICAgIHJldHVybiBtYWtlVGFnKHRoaXMudGFyZ2V0LCBsYXN0RWwsIHRoaXMuZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSwgdGhpcy5nZXRJbXBvcnRSdWxlVGFnKTtcbiAgfTtcblxuICAvKiBnZXQgYSB0YWcgZm9yIGEgZ2l2ZW4gY29tcG9uZW50SWQsIGFzc2lnbiB0aGUgY29tcG9uZW50SWQgdG8gb25lLCBvciBzaGFyZCAqL1xuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5nZXRUYWdGb3JJZCA9IGZ1bmN0aW9uIGdldFRhZ0ZvcklkKGlkKSB7XG4gICAgLyogc2ltcGx5IHJldHVybiBhIHRhZywgd2hlbiB0aGUgY29tcG9uZW50SWQgd2FzIGFscmVhZHkgYXNzaWduZWQgb25lICovXG4gICAgdmFyIHByZXYgPSB0aGlzLnRhZ01hcFtpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCAmJiAhcHJldi5zZWFsZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgLyogc2hhcmQgKGNyZWF0ZSBhIG5ldyB0YWcpIGlmIHRoZSB0YWcgaXMgZXhoYXVzdGVkIChTZWUgTUFYX1NJWkUpICovXG4gICAgdGhpcy5jYXBhY2l0eSAtPSAxO1xuXG4gICAgaWYgKHRoaXMuY2FwYWNpdHkgPT09IDApIHtcbiAgICAgIHRoaXMuY2FwYWNpdHkgPSBNQVhfU0laRTtcbiAgICAgIHRhZyA9IHRoaXMubWFrZVRhZyh0YWcpO1xuICAgICAgdGhpcy50YWdzLnB1c2godGFnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50YWdNYXBbaWRdID0gdGFnO1xuICB9O1xuXG4gIC8qIG1haW5seSBmb3IgY3JlYXRlR2xvYmFsU3R5bGUgdG8gY2hlY2sgZm9yIGl0cyBpZCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuaGFzSWQgPSBmdW5jdGlvbiBoYXNJZChpZCkge1xuICAgIHJldHVybiB0aGlzLnRhZ01hcFtpZF0gIT09IHVuZGVmaW5lZDtcbiAgfTtcblxuICAvKiBjYWNoaW5nIGxheWVyIGNoZWNraW5nIGlkK25hbWUgdG8gYWxyZWFkeSBoYXZlIGEgY29ycmVzcG9uZGluZyB0YWcgYW5kIGluamVjdGVkIHJ1bGVzICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5oYXNOYW1lRm9ySWQgPSBmdW5jdGlvbiBoYXNOYW1lRm9ySWQoaWQsIG5hbWUpIHtcbiAgICAvKiBleGNlcHRpb24gZm9yIHJlaHlkcmF0ZWQgbmFtZXMgd2hpY2ggYXJlIGNoZWNrZWQgc2VwYXJhdGVseSAqL1xuICAgIGlmICh0aGlzLmlnbm9yZVJlaHlkcmF0ZWROYW1lc1tpZF0gPT09IHVuZGVmaW5lZCAmJiB0aGlzLnJlaHlkcmF0ZWROYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnTWFwW2lkXTtcbiAgICByZXR1cm4gdGFnICE9PSB1bmRlZmluZWQgJiYgdGFnLmhhc05hbWVGb3JJZChpZCwgbmFtZSk7XG4gIH07XG5cbiAgLyogcmVnaXN0ZXJzIGEgY29tcG9uZW50SWQgYW5kIHJlZ2lzdGVycyBpdCBvbiBpdHMgdGFnICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5kZWZlcnJlZEluamVjdCA9IGZ1bmN0aW9uIGRlZmVycmVkSW5qZWN0KGlkLCBjc3NSdWxlcykge1xuICAgIC8qIGRvbid0IGluamVjdCB3aGVuIHRoZSBpZCBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgKi9cbiAgICBpZiAodGhpcy50YWdNYXBbaWRdICE9PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBjbG9uZXMgPSB0aGlzLmNsb25lcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0uZGVmZXJyZWRJbmplY3QoaWQsIGNzc1J1bGVzKTtcbiAgICB9XG5cbiAgICB0aGlzLmdldFRhZ0ZvcklkKGlkKS5pbnNlcnRNYXJrZXIoaWQpO1xuICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gY3NzUnVsZXM7XG4gIH07XG5cbiAgLyogaW5qZWN0cyBydWxlcyBmb3IgYSBnaXZlbiBpZCB3aXRoIGEgbmFtZSB0aGF0IHdpbGwgbmVlZCB0byBiZSBjYWNoZWQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmluamVjdCA9IGZ1bmN0aW9uIGluamVjdChpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgY2xvbmVzID0gdGhpcy5jbG9uZXM7XG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0uaW5qZWN0KGlkLCBjc3NSdWxlcywgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMuZ2V0VGFnRm9ySWQoaWQpO1xuXG4gICAgLyogYWRkIGRlZmVycmVkIHJ1bGVzIGZvciBjb21wb25lbnQgKi9cbiAgICBpZiAodGhpcy5kZWZlcnJlZFtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQ29tYmluZSBwYXNzZWQgY3NzUnVsZXMgd2l0aCBwcmV2aW91c2x5IGRlZmVycmVkIENTUyBydWxlc1xuICAgICAgLy8gTk9URTogV2UgY2Fubm90IG11dGF0ZSB0aGUgZGVmZXJyZWQgYXJyYXkgaXRzZWxmIGFzIGFsbCBjbG9uZXNcbiAgICAgIC8vIGRvIHRoZSBzYW1lIChzZWUgY2xvbmVzW2ldLmluamVjdClcbiAgICAgIHZhciBydWxlcyA9IHRoaXMuZGVmZXJyZWRbaWRdLmNvbmNhdChjc3NSdWxlcyk7XG4gICAgICB0YWcuaW5zZXJ0UnVsZXMoaWQsIHJ1bGVzLCBuYW1lKTtcblxuICAgICAgdGhpcy5kZWZlcnJlZFtpZF0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZy5pbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpO1xuICAgIH1cbiAgfTtcblxuICAvKiByZW1vdmVzIGFsbCBydWxlcyBmb3IgYSBnaXZlbiBpZCwgd2hpY2ggZG9lc24ndCByZW1vdmUgaXRzIG1hcmtlciBidXQgcmVzZXRzIGl0ICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoaWQpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWdNYXBbaWRdO1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIGNsb25lcyA9IHRoaXMuY2xvbmVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNsb25lc1tpXS5yZW1vdmUoaWQpO1xuICAgIH1cblxuICAgIC8qIHJlbW92ZSBhbGwgcnVsZXMgZnJvbSB0aGUgdGFnICovXG4gICAgdGFnLnJlbW92ZVJ1bGVzKGlkKTtcblxuICAgIC8qIGlnbm9yZSBwb3NzaWJsZSByZWh5ZHJhdGVkIG5hbWVzICovXG4gICAgdGhpcy5pZ25vcmVSZWh5ZHJhdGVkTmFtZXNbaWRdID0gdHJ1ZTtcblxuICAgIC8qIGRlbGV0ZSBwb3NzaWJsZSBkZWZlcnJlZCBydWxlcyAqL1xuICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnRvSFRNTCA9IGZ1bmN0aW9uIHRvSFRNTCgpIHtcbiAgICByZXR1cm4gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnRvSFRNTCgpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnRvUmVhY3RFbGVtZW50cyA9IGZ1bmN0aW9uIHRvUmVhY3RFbGVtZW50cygpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkO1xuXG5cbiAgICByZXR1cm4gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnLCBpKSB7XG4gICAgICB2YXIga2V5ID0gJ3NjLScgKyBpZCArICctJyArIGk7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KHRhZy50b0VsZW1lbnQoKSwgeyBrZXk6IGtleSB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjcmVhdGVDbGFzcyhTdHlsZVNoZWV0LCBudWxsLCBbe1xuICAgIGtleTogJ21hc3RlcicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gbWFzdGVyIHx8IChtYXN0ZXIgPSBuZXcgU3R5bGVTaGVldCgpLnJlaHlkcmF0ZSgpKTtcbiAgICB9XG5cbiAgICAvKiBOT1RFOiBUaGlzIGlzIGp1c3QgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggamVzdC1zdHlsZWQtY29tcG9uZW50cyAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnN0YW5jZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gU3R5bGVTaGVldC5tYXN0ZXI7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG4vLyBcblxudmFyIEtleWZyYW1lcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gS2V5ZnJhbWVzKG5hbWUsIHJ1bGVzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEtleWZyYW1lcyk7XG5cbiAgICB0aGlzLmluamVjdCA9IGZ1bmN0aW9uIChzdHlsZVNoZWV0KSB7XG4gICAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKF90aGlzLmlkLCBfdGhpcy5uYW1lKSkge1xuICAgICAgICBzdHlsZVNoZWV0LmluamVjdChfdGhpcy5pZCwgX3RoaXMucnVsZXMsIF90aGlzLm5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigxMiwgU3RyaW5nKF90aGlzLm5hbWUpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG5cbiAgICB0aGlzLmlkID0gJ3NjLWtleWZyYW1lcy0nICsgbmFtZTtcbiAgfVxuXG4gIEtleWZyYW1lcy5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzO1xufSgpO1xuXG4vLyBcblxuLyoqXG4gKiBpbmxpbmVkIHZlcnNpb24gb2ZcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gKi9cblxudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxuLy8gXG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjg3YWFiZGZlMWI3NDYxZTczMzFhYmIzNjAxZDllNmJiMjc1NDRiYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzXG5mdW5jdGlvbiBhZGRVbml0SWZOZWVkZWQobmFtZSwgdmFsdWUpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtaWxhamFjay9lc2xpbnQtcGx1Z2luLWZsb3d0eXBlLWVycm9ycy9pc3N1ZXMvMTMzXG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDAgJiYgIShuYW1lIGluIHVuaXRsZXNzKSkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7IC8vIFByZXN1bWVzIGltcGxpY2l0ICdweCcgc3VmZml4IGZvciB1bml0bGVzcyBudW1iZXJzXG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS50cmltKCk7XG59XG5cbi8vIFxuXG4vKipcbiAqIEl0J3MgZmFsc2lzaCBub3QgZmFsc3kgYmVjYXVzZSAwIGlzIGFsbG93ZWQuXG4gKi9cbnZhciBpc0ZhbHNpc2ggPSBmdW5jdGlvbiBpc0ZhbHNpc2goY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rID09PSB1bmRlZmluZWQgfHwgY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IGZhbHNlIHx8IGNodW5rID09PSAnJztcbn07XG5cbnZhciBvYmpUb0Nzc0FycmF5ID0gZnVuY3Rpb24gb2JqVG9Dc3NBcnJheShvYmosIHByZXZLZXkpIHtcbiAgdmFyIHJ1bGVzID0gW107XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaXNGYWxzaXNoKG9ialtrZXldKSkge1xuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qob2JqW2tleV0pKSB7XG4gICAgICAgIHJ1bGVzLnB1c2guYXBwbHkocnVsZXMsIG9ialRvQ3NzQXJyYXkob2JqW2tleV0sIGtleSkpO1xuXG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgICAgcnVsZXMucHVzaChoeXBoZW5hdGVTdHlsZU5hbWUoa2V5KSArICc6Jywgb2JqW2tleV0sICc7Jyk7XG5cbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgICAgfVxuICAgICAgcnVsZXMucHVzaChoeXBoZW5hdGVTdHlsZU5hbWUoa2V5KSArICc6ICcgKyBhZGRVbml0SWZOZWVkZWQoa2V5LCBvYmpba2V5XSkgKyAnOycpO1xuICAgIH1cbiAgICByZXR1cm4gcnVsZXM7XG4gIH0pO1xuXG4gIHJldHVybiBwcmV2S2V5ID8gW3ByZXZLZXkgKyAnIHsnXS5jb25jYXQocnVsZXMsIFsnfSddKSA6IHJ1bGVzO1xufTtcblxuZnVuY3Rpb24gZmxhdHRlbihjaHVuaywgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaHVuaykpIHtcbiAgICB2YXIgcnVsZVNldCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aCwgcmVzdWx0OyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHJlc3VsdCA9IGZsYXR0ZW4oY2h1bmtbaV0sIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBjb250aW51ZTtlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHJ1bGVTZXQucHVzaC5hcHBseShydWxlU2V0LCByZXN1bHQpO2Vsc2UgcnVsZVNldC5wdXNoKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGVTZXQ7XG4gIH1cblxuICBpZiAoaXNGYWxzaXNoKGNodW5rKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyogSGFuZGxlIG90aGVyIGNvbXBvbmVudHMgKi9cbiAgaWYgKGlzU3R5bGVkQ29tcG9uZW50KGNodW5rKSkge1xuICAgIHJldHVybiAnLicgKyBjaHVuay5zdHlsZWRDb21wb25lbnRJZDtcbiAgfVxuXG4gIC8qIEVpdGhlciBleGVjdXRlIG9yIGRlZmVyIHRoZSBmdW5jdGlvbiAqL1xuICBpZiAoaXNGdW5jdGlvbihjaHVuaykpIHtcbiAgICBpZiAoaXNTdGF0ZWxlc3NGdW5jdGlvbihjaHVuaykgJiYgZXhlY3V0aW9uQ29udGV4dCkge1xuICAgICAgdmFyIF9yZXN1bHQgPSBjaHVuayhleGVjdXRpb25Db250ZXh0KTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNFbGVtZW50KF9yZXN1bHQpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihnZXRDb21wb25lbnROYW1lKGNodW5rKSArICcgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmxhdHRlbihfcmVzdWx0LCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgICB9IGVsc2UgcmV0dXJuIGNodW5rO1xuICB9XG5cbiAgaWYgKGNodW5rIGluc3RhbmNlb2YgS2V5ZnJhbWVzKSB7XG4gICAgaWYgKHN0eWxlU2hlZXQpIHtcbiAgICAgIGNodW5rLmluamVjdChzdHlsZVNoZWV0KTtcbiAgICAgIHJldHVybiBjaHVuay5nZXROYW1lKCk7XG4gICAgfSBlbHNlIHJldHVybiBjaHVuaztcbiAgfVxuXG4gIC8qIEhhbmRsZSBvYmplY3RzICovXG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGNodW5rKSA/IG9ialRvQ3NzQXJyYXkoY2h1bmspIDogY2h1bmsudG9TdHJpbmcoKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGNzcyhzdHlsZXMpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVycG9sYXRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChpc0Z1bmN0aW9uKHN0eWxlcykgfHwgaXNQbGFpbk9iamVjdChzdHlsZXMpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBmbGF0dGVuKGludGVybGVhdmUoRU1QVFlfQVJSQVksIFtzdHlsZXNdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpKTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIGZsYXR0ZW4oaW50ZXJsZWF2ZShzdHlsZXMsIGludGVycG9sYXRpb25zKSk7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBFTVBUWV9PQkpFQ1Q7XG5cbiAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUodGFnKSkge1xuICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMSwgU3RyaW5nKHRhZykpO1xuICB9XG5cbiAgLyogVGhpcyBpcyBjYWxsYWJsZSBkaXJlY3RseSBhcyBhIHRlbXBsYXRlIGZ1bmN0aW9uICovXG4gIC8vICRGbG93Rml4TWU6IE5vdCB0eXBlZCB0byBhdm9pZCBkZXN0cnVjdHVyaW5nIGFyZ3VtZW50c1xuICB2YXIgdGVtcGxhdGVGdW5jdGlvbiA9IGZ1bmN0aW9uIHRlbXBsYXRlRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudENvbnN0cnVjdG9yKHRhZywgb3B0aW9ucywgY3NzLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgLyogSWYgY29uZmlnIG1ldGhvZHMgYXJlIGNhbGxlZCwgd3JhcCB1cCBhIG5ldyB0ZW1wbGF0ZSBmdW5jdGlvbiBhbmQgbWVyZ2Ugb3B0aW9ucyAqL1xuICB0ZW1wbGF0ZUZ1bmN0aW9uLndpdGhDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBjb25maWcpKTtcbiAgfTtcblxuICAvKiBNb2RpZnkvaW5qZWN0IG5ldyBwcm9wcyBhdCBydW50aW1lICovXG4gIHRlbXBsYXRlRnVuY3Rpb24uYXR0cnMgPSBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY29tcG9uZW50Q29uc3RydWN0b3IsIHRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGF0dHJzOiBBcnJheS5wcm90b3R5cGUuY29uY2F0KG9wdGlvbnMuYXR0cnMsIGF0dHJzKS5maWx0ZXIoQm9vbGVhbilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHRlbXBsYXRlRnVuY3Rpb247XG59XG5cbi8vIFxuLy8gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanMvYmxvYi9tYXN0ZXIvbXVybXVyaGFzaDJfZ2MuanNcbmZ1bmN0aW9uIG11cm11cmhhc2goYykge1xuICBmb3IgKHZhciBlID0gYy5sZW5ndGggfCAwLCBhID0gZSB8IDAsIGQgPSAwLCBiOyBlID49IDQ7KSB7XG4gICAgYiA9IGMuY2hhckNvZGVBdChkKSAmIDI1NSB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgOCB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgMTYgfCAoYy5jaGFyQ29kZUF0KCsrZCkgJiAyNTUpIDw8IDI0LCBiID0gMTU0MDQ4MzQ3NyAqIChiICYgNjU1MzUpICsgKCgxNTQwNDgzNDc3ICogKGIgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNiksIGIgXj0gYiA+Pj4gMjQsIGIgPSAxNTQwNDgzNDc3ICogKGIgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYiA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KSwgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpIF4gYiwgZSAtPSA0LCArK2Q7XG4gIH1cbiAgc3dpdGNoIChlKSB7XG4gICAgY2FzZSAzOlxuICAgICAgYSBePSAoYy5jaGFyQ29kZUF0KGQgKyAyKSAmIDI1NSkgPDwgMTY7XG4gICAgY2FzZSAyOlxuICAgICAgYSBePSAoYy5jaGFyQ29kZUF0KGQgKyAxKSAmIDI1NSkgPDwgODtcbiAgICBjYXNlIDE6XG4gICAgICBhIF49IGMuY2hhckNvZGVBdChkKSAmIDI1NSwgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpO1xuICB9XG4gIGEgXj0gYSA+Pj4gMTM7XG4gIGEgPSAxNTQwNDgzNDc3ICogKGEgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYSA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KTtcbiAgcmV0dXJuIChhIF4gYSA+Pj4gMTUpID4+PiAwO1xufVxuXG4vLyBcbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyogVGhpcyBpcyB0aGUgXCJjYXBhY2l0eVwiIG9mIG91ciBhbHBoYWJldCBpLmUuIDJ4MjYgZm9yIGFsbCBsZXR0ZXJzIHBsdXMgdGhlaXIgY2FwaXRhbGlzZWRcbiAqIGNvdW50ZXJwYXJ0cyAqL1xudmFyIGNoYXJzTGVuZ3RoID0gNTI7XG5cbi8qIHN0YXJ0IGF0IDc1IGZvciAnYScgdW50aWwgJ3onICgyNSkgYW5kIHRoZW4gc3RhcnQgYXQgNjUgZm9yIGNhcGl0YWxpc2VkIGxldHRlcnMgKi9cbnZhciBnZXRBbHBoYWJldGljQ2hhciA9IGZ1bmN0aW9uIGdldEFscGhhYmV0aWNDaGFyKGNvZGUpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSArIChjb2RlID4gMjUgPyAzOSA6IDk3KSk7XG59O1xuXG4vKiBpbnB1dCBhIG51bWJlciwgdXN1YWxseSBhIGhhc2ggYW5kIGNvbnZlcnQgaXQgdG8gYmFzZS01MiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShjb2RlKSB7XG4gIHZhciBuYW1lID0gJyc7XG4gIHZhciB4ID0gdm9pZCAwO1xuXG4gIC8qIGdldCBhIGNoYXIgYW5kIGRpdmlkZSBieSBhbHBoYWJldC1sZW5ndGggKi9cbiAgZm9yICh4ID0gY29kZTsgeCA+IGNoYXJzTGVuZ3RoOyB4ID0gTWF0aC5mbG9vcih4IC8gY2hhcnNMZW5ndGgpKSB7XG4gICAgbmFtZSA9IGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lO1xuICB9XG5cbiAgcmV0dXJuIGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gaGFzRnVuY3Rpb25PYmplY3RLZXkob2JqKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTdGF0aWNSdWxlcyhydWxlcywgYXR0cnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBydWxlID0gcnVsZXNbaV07XG5cbiAgICAvLyByZWN1cnNpdmUgY2FzZVxuICAgIGlmIChBcnJheS5pc0FycmF5KHJ1bGUpICYmICFpc1N0YXRpY1J1bGVzKHJ1bGUsIGF0dHJzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihydWxlKSAmJiAhaXNTdHlsZWRDb21wb25lbnQocnVsZSkpIHtcbiAgICAgIC8vIGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBzdGF0aWMgaWYgdGhleSdyZSBqdXN0IGJlaW5nXG4gICAgICAvLyB1c2VkIHRvIGdldCB0aGUgY2xhc3NuYW1lIG9mIGEgbmVzdGVkIHN0eWxlZCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXR0cnMuc29tZShmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHgpIHx8IGhhc0Z1bmN0aW9uT2JqZWN0S2V5KHgpO1xuICB9KSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBcblxuLyogY29tYmluZXMgaGFzaFN0ciAobXVybXVyaGFzaCkgYW5kIG5hbWVHZW5lcmF0b3IgZm9yIGNvbnZlbmllbmNlICovXG52YXIgaGFzaGVyID0gZnVuY3Rpb24gaGFzaGVyKHN0cikge1xuICByZXR1cm4gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShtdXJtdXJoYXNoKHN0cikpO1xufTtcblxuLypcbiBDb21wb25lbnRTdHlsZSBpcyBhbGwgdGhlIENTUy1zcGVjaWZpYyBzdHVmZiwgbm90XG4gdGhlIFJlYWN0LXNwZWNpZmljIHN0dWZmLlxuICovXG5cbnZhciBDb21wb25lbnRTdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50U3R5bGUocnVsZXMsIGF0dHJzLCBjb21wb25lbnRJZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvbmVudFN0eWxlKTtcblxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmlzU3RhdGljID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiBpc1N0YXRpY1J1bGVzKHJ1bGVzLCBhdHRycyk7XG4gICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuXG4gICAgaWYgKCFTdHlsZVNoZWV0Lm1hc3Rlci5oYXNJZChjb21wb25lbnRJZCkpIHtcbiAgICAgIFN0eWxlU2hlZXQubWFzdGVyLmRlZmVycmVkSW5qZWN0KGNvbXBvbmVudElkLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogRmxhdHRlbnMgYSBydWxlIHNldCBpbnRvIHZhbGlkIENTU1xuICAgKiBIYXNoZXMgaXQsIHdyYXBzIHRoZSB3aG9sZSBjaHVuayBpbiBhIC5oYXNoMTIzNCB7fVxuICAgKiBSZXR1cm5zIHRoZSBoYXNoIHRvIGJlIGluamVjdGVkIG9uIHJlbmRlcigpXG4gICAqICovXG5cblxuICBDb21wb25lbnRTdHlsZS5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMgPSBmdW5jdGlvbiBnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIGlzU3RhdGljID0gdGhpcy5pc1N0YXRpYyxcbiAgICAgICAgY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkLFxuICAgICAgICBsYXN0Q2xhc3NOYW1lID0gdGhpcy5sYXN0Q2xhc3NOYW1lO1xuXG4gICAgaWYgKElTX0JST1dTRVIgJiYgaXNTdGF0aWMgJiYgdHlwZW9mIGxhc3RDbGFzc05hbWUgPT09ICdzdHJpbmcnICYmIHN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKGNvbXBvbmVudElkLCBsYXN0Q2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuIGxhc3RDbGFzc05hbWU7XG4gICAgfVxuXG4gICAgdmFyIGZsYXRDU1MgPSBmbGF0dGVuKHRoaXMucnVsZXMsIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICAgIHZhciBuYW1lID0gaGFzaGVyKHRoaXMuY29tcG9uZW50SWQgKyBmbGF0Q1NTLmpvaW4oJycpKTtcbiAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKGNvbXBvbmVudElkLCBuYW1lKSkge1xuICAgICAgc3R5bGVTaGVldC5pbmplY3QodGhpcy5jb21wb25lbnRJZCwgc3RyaW5naWZ5UnVsZXMoZmxhdENTUywgJy4nICsgbmFtZSwgdW5kZWZpbmVkLCBjb21wb25lbnRJZCksIG5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMubGFzdENsYXNzTmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH07XG5cbiAgQ29tcG9uZW50U3R5bGUuZ2VuZXJhdGVOYW1lID0gZnVuY3Rpb24gZ2VuZXJhdGVOYW1lKHN0cikge1xuICAgIHJldHVybiBoYXNoZXIoc3RyKTtcbiAgfTtcblxuICByZXR1cm4gQ29tcG9uZW50U3R5bGU7XG59KCk7XG5cbi8vIFxuXG52YXIgTElNSVQgPSAyMDA7XG5cbnZhciBjcmVhdGVXYXJuVG9vTWFueUNsYXNzZXMgPSAoZnVuY3Rpb24gKGRpc3BsYXlOYW1lKSB7XG4gIHZhciBnZW5lcmF0ZWRDbGFzc2VzID0ge307XG4gIHZhciB3YXJuaW5nU2VlbiA9IGZhbHNlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKCF3YXJuaW5nU2Vlbikge1xuICAgICAgZ2VuZXJhdGVkQ2xhc3Nlc1tjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhnZW5lcmF0ZWRDbGFzc2VzKS5sZW5ndGggPj0gTElNSVQpIHtcbiAgICAgICAgLy8gVW5hYmxlIHRvIGZpbmQgbGF0ZXN0UnVsZSBpbiB0ZXN0IGVudmlyb25tZW50LlxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlLCBwcmVmZXItdGVtcGxhdGUgKi9cbiAgICAgICAgY29uc29sZS53YXJuKCdPdmVyICcgKyBMSU1JVCArICcgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50ICcgKyBkaXNwbGF5TmFtZSArICcuIFxcbicgKyAnQ29uc2lkZXIgdXNpbmcgdGhlIGF0dHJzIG1ldGhvZCwgdG9nZXRoZXIgd2l0aCBhIHN0eWxlIG9iamVjdCBmb3IgZnJlcXVlbnRseSBjaGFuZ2VkIHN0eWxlcy5cXG4nICsgJ0V4YW1wbGU6XFxuJyArICcgIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZC5kaXYuYXR0cnMocHJvcHMgPT4gKHtcXG4nICsgJyAgICBzdHlsZToge1xcbicgKyAnICAgICAgYmFja2dyb3VuZDogcHJvcHMuYmFja2dyb3VuZCxcXG4nICsgJyAgICB9LFxcbicgKyAnICB9KSlgd2lkdGg6IDEwMCU7YFxcblxcbicgKyAnICA8Q29tcG9uZW50IC8+Jyk7XG4gICAgICAgIHdhcm5pbmdTZWVuID0gdHJ1ZTtcbiAgICAgICAgZ2VuZXJhdGVkQ2xhc3NlcyA9IHt9O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0pO1xuXG4vLyBcblxudmFyIGRldGVybWluZVRoZW1lID0gKGZ1bmN0aW9uIChwcm9wcywgZmFsbGJhY2tUaGVtZSkge1xuICB2YXIgZGVmYXVsdFByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBFTVBUWV9PQkpFQ1Q7XG5cbiAgLy8gUHJvcHMgc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIFRoZW1lUHJvdmlkZXIsIHdoaWNoIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlclxuICAvLyBkZWZhdWx0UHJvcHMsIGJ1dCBSZWFjdCBhdXRvbWF0aWNhbGx5IHB1dHMgZGVmYXVsdFByb3BzIG9uIHByb3BzLlxuXG4gIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMsIGZsb3d0eXBlLWVycm9ycy9zaG93LWVycm9ycyAqL1xuICB2YXIgaXNEZWZhdWx0VGhlbWUgPSBkZWZhdWx0UHJvcHMgPyBwcm9wcy50aGVtZSA9PT0gZGVmYXVsdFByb3BzLnRoZW1lIDogZmFsc2U7XG4gIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lICYmICFpc0RlZmF1bHRUaGVtZSA/IHByb3BzLnRoZW1lIDogZmFsbGJhY2tUaGVtZSB8fCBkZWZhdWx0UHJvcHMudGhlbWU7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cblxuICByZXR1cm4gdGhlbWU7XG59KTtcblxuLy8gXG52YXIgZXNjYXBlUmVnZXggPSAvW1tcXF0uIyokPjwrfj18XjooKSxcIidgLV0rL2c7XG52YXIgZGFzaGVzQXRFbmRzID0gLyheLXwtJCkvZztcblxuLyoqXG4gKiBUT0RPOiBFeHBsb3JlIHVzaW5nIENTUy5lc2NhcGUgd2hlbiBpdCBiZWNvbWVzIG1vcmUgYXZhaWxhYmxlXG4gKiBpbiBldmVyZ3JlZW4gYnJvd3NlcnMuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShzdHIpIHtcbiAgcmV0dXJuIHN0clxuICAvLyBSZXBsYWNlIGFsbCBwb3NzaWJsZSBDU1Mgc2VsZWN0b3JzXG4gIC5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnLScpXG5cbiAgLy8gUmVtb3ZlIGV4dHJhbmVvdXMgaHlwaGVucyBhdCB0aGUgc3RhcnQgYW5kIGVuZFxuICAucmVwbGFjZShkYXNoZXNBdEVuZHMsICcnKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGlzVGFnKHRhcmdldCkge1xuICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB0YXJnZXQuY2hhckF0KDApID09PSB0YXJnZXQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgOiB0cnVlKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGdlbmVyYXRlRGlzcGxheU5hbWUodGFyZ2V0KSB7XG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIGlzVGFnKHRhcmdldCkgPyAnc3R5bGVkLicgKyB0YXJnZXQgOiAnU3R5bGVkKCcgKyBnZXRDb21wb25lbnROYW1lKHRhcmdldCkgKyAnKSc7XG59XG5cbnZhciBfVFlQRV9TVEFUSUNTO1xuXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSAoX1RZUEVfU1RBVElDUyA9IHt9LCBfVFlQRV9TVEFUSUNTW0ZvcndhcmRSZWZdID0ge1xuICAkJHR5cGVvZjogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlXG59LCBfVFlQRV9TVEFUSUNTKTtcblxudmFyIGRlZmluZVByb3BlcnR5JDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAgIF9PYmplY3QkZ2V0T3duUHJvcGVydCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gX09iamVjdCRnZXRPd25Qcm9wZXJ0ID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbXTtcbn0gOiBfT2JqZWN0JGdldE93blByb3BlcnQsXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIGFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBhcnJheVByb3RvdHlwZS5jb25jYXQoZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpLFxuICAgIC8vICRGbG93Rml4TWVcbiAgICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IFRZUEVfU1RBVElDU1t0YXJnZXRDb21wb25lbnQuJCR0eXBlb2ZdIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICB2YXIgc291cmNlU3RhdGljcyA9IFRZUEVfU1RBVElDU1tzb3VyY2VDb21wb25lbnQuJCR0eXBlb2ZdIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBkZXNjcmlwdG9yID0gdm9pZCAwO1xuICAgIHZhciBrZXkgPSB2b2lkIDA7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXNcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAhS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJlxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkkMSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLyogZmFpbCBzaWxlbnRseSAqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG4vLyBcbmZ1bmN0aW9uIGlzRGVyaXZlZFJlYWN0Q29tcG9uZW50KGZuKSB7XG4gIHJldHVybiAhIShmbiAmJiBmbi5wcm90b3R5cGUgJiYgZm4ucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufVxuXG4vLyBcbi8vIEhlbHBlciB0byBjYWxsIGEgZ2l2ZW4gZnVuY3Rpb24sIG9ubHkgb25jZVxudmFyIG9uY2UgPSAoZnVuY3Rpb24gKGNiKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgY2IuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG4vLyBcblxudmFyIFRoZW1lQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcblxudmFyIFRoZW1lQ29uc3VtZXIgPSBUaGVtZUNvbnRleHQuQ29uc3VtZXI7XG5cbi8qKlxuICogUHJvdmlkZSBhIHRoZW1lIHRvIGFuIGVudGlyZSByZWFjdCBjb21wb25lbnQgdHJlZSB2aWEgY29udGV4dFxuICovXG5cbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoVGhlbWVQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFRoZW1lUHJvdmlkZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmdldENvbnRleHQgPSBtZW1vaXplKF90aGlzLmdldENvbnRleHQuYmluZChfdGhpcykpO1xuICAgIF90aGlzLnJlbmRlcklubmVyID0gX3RoaXMucmVuZGVySW5uZXIuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5jaGlsZHJlbikgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFRoZW1lQ29udGV4dC5Db25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICB0aGlzLnJlbmRlcklubmVyXG4gICAgKTtcbiAgfTtcblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXJJbm5lciA9IGZ1bmN0aW9uIHJlbmRlcklubmVyKG91dGVyVGhlbWUpIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dCh0aGlzLnByb3BzLnRoZW1lLCBvdXRlclRoZW1lKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb250ZXh0LlByb3ZpZGVyLFxuICAgICAgeyB2YWx1ZTogY29udGV4dCB9LFxuICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdGhlbWUgZnJvbSB0aGUgcHJvcHMsIHN1cHBvcnRpbmcgYm90aCAob3V0ZXJUaGVtZSkgPT4ge31cbiAgICogYXMgd2VsbCBhcyBvYmplY3Qgbm90YXRpb25cbiAgICovXG5cblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5nZXRUaGVtZSA9IGZ1bmN0aW9uIGdldFRoZW1lKHRoZW1lLCBvdXRlclRoZW1lKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odGhlbWUpKSB7XG4gICAgICB2YXIgbWVyZ2VkVGhlbWUgPSB0aGVtZShvdXRlclRoZW1lKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkobWVyZ2VkVGhlbWUpIHx8ICh0eXBlb2YgbWVyZ2VkVGhlbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG1lcmdlZFRoZW1lKSkgIT09ICdvYmplY3QnKSkge1xuICAgICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gICAgfVxuXG4gICAgaWYgKHRoZW1lID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkodGhlbWUpIHx8ICh0eXBlb2YgdGhlbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHRoZW1lKSkgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDgpO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xuICB9O1xuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLmdldENvbnRleHQgPSBmdW5jdGlvbiBnZXRDb250ZXh0KHRoZW1lLCBvdXRlclRoZW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGhlbWUodGhlbWUsIG91dGVyVGhlbWUpO1xuICB9O1xuXG4gIHJldHVybiBUaGVtZVByb3ZpZGVyO1xufShDb21wb25lbnQpO1xuXG4vLyBcblxudmFyIENMT1NJTkdfVEFHX1IgPSAvXlxccyo8XFwvW2Etel0vaTtcblxudmFyIFNlcnZlclN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlcnZlclN0eWxlU2hlZXQoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VydmVyU3R5bGVTaGVldCk7XG5cbiAgICAvKiBUaGUgbWFzdGVyIHNoZWV0IG1pZ2h0IGJlIHJlc2V0LCBzbyBrZWVwIGEgcmVmZXJlbmNlIGhlcmUgKi9cbiAgICB0aGlzLm1hc3RlclNoZWV0ID0gU3R5bGVTaGVldC5tYXN0ZXI7XG4gICAgdGhpcy5pbnN0YW5jZSA9IHRoaXMubWFzdGVyU2hlZXQuY2xvbmUoKTtcbiAgICB0aGlzLnNlYWxlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIFNlcnZlclN0eWxlU2hlZXQgYXMgYmVpbmcgZnVsbHkgZW1pdHRlZCBhbmQgbWFudWFsbHkgR0MgaXQgZnJvbSB0aGVcbiAgICogU3R5bGVTaGVldCBzaW5nbGV0b24uXG4gICAqL1xuXG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuc2VhbCA9IGZ1bmN0aW9uIHNlYWwoKSB7XG4gICAgaWYgKCF0aGlzLnNlYWxlZCkge1xuICAgICAgLyogUmVtb3ZlIHNlYWxlZCBTdHlsZVNoZWV0cyBmcm9tIHRoZSBtYXN0ZXIgc2hlZXQgKi9cbiAgICAgIHZhciBpbmRleCA9IHRoaXMubWFzdGVyU2hlZXQuY2xvbmVzLmluZGV4T2YodGhpcy5pbnN0YW5jZSk7XG4gICAgICB0aGlzLm1hc3RlclNoZWV0LmNsb25lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5zZWFsZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5jb2xsZWN0U3R5bGVzID0gZnVuY3Rpb24gY29sbGVjdFN0eWxlcyhjaGlsZHJlbikge1xuICAgIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN0eWxlU2hlZXRNYW5hZ2VyLFxuICAgICAgeyBzaGVldDogdGhpcy5pbnN0YW5jZSB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmdldFN0eWxlVGFncyA9IGZ1bmN0aW9uIGdldFN0eWxlVGFncygpIHtcbiAgICB0aGlzLnNlYWwoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS50b0hUTUwoKTtcbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5nZXRTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiBnZXRTdHlsZUVsZW1lbnQoKSB7XG4gICAgdGhpcy5zZWFsKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UudG9SZWFjdEVsZW1lbnRzKCk7XG4gIH07XG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtID0gZnVuY3Rpb24gaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMyk7XG4gICAgfVxuXG4gICAgLyogdGhlIHRhZyBpbmRleCBrZWVwcyB0cmFjayBvZiB3aGljaCB0YWdzIGhhdmUgYWxyZWFkeSBiZWVuIGVtaXR0ZWQgKi9cbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xuXG4gICAgdmFyIGluc3RhbmNlVGFnSW5kZXggPSAwO1xuXG4gICAgdmFyIHN0cmVhbUF0dHIgPSBTQ19TVFJFQU1fQVRUUiArICc9XCJ0cnVlXCInO1xuXG4gICAgdmFyIHRyYW5zZm9ybWVyID0gbmV3IHN0cmVhbS5UcmFuc2Zvcm0oe1xuICAgICAgdHJhbnNmb3JtOiBmdW5jdGlvbiBhcHBlbmRTdHlsZUNodW5rcyhjaHVuaywgLyogZW5jb2RpbmcgKi9fLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdGFncyA9IGluc3RhbmNlLnRhZ3M7XG5cbiAgICAgICAgdmFyIGh0bWwgPSAnJztcblxuICAgICAgICAvKiByZXRyaWV2ZSBodG1sIGZvciBlYWNoIG5ldyBzdHlsZSB0YWcgKi9cbiAgICAgICAgZm9yICg7IGluc3RhbmNlVGFnSW5kZXggPCB0YWdzLmxlbmd0aDsgaW5zdGFuY2VUYWdJbmRleCArPSAxKSB7XG4gICAgICAgICAgdmFyIHRhZyA9IHRhZ3NbaW5zdGFuY2VUYWdJbmRleF07XG4gICAgICAgICAgaHRtbCArPSB0YWcudG9IVE1MKHN0cmVhbUF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogZm9yY2Ugb3VyIFN0eWxlU2hlZXRzIHRvIGVtaXQgZW50aXJlbHkgbmV3IHRhZ3MgKi9cbiAgICAgICAgaW5zdGFuY2Uuc2VhbEFsbFRhZ3MoKTtcblxuICAgICAgICB2YXIgcmVuZGVyZWRIdG1sID0gY2h1bmsudG9TdHJpbmcoKTtcblxuICAgICAgICAvKiBwcmVwZW5kIHN0eWxlIGh0bWwgdG8gY2h1bmssIHVubGVzcyB0aGUgc3RhcnQgb2YgdGhlIGNodW5rIGlzIGEgY2xvc2luZyB0YWcgaW4gd2hpY2ggY2FzZSBhcHBlbmQgcmlnaHQgYWZ0ZXIgdGhhdCAqL1xuICAgICAgICBpZiAoQ0xPU0lOR19UQUdfUi50ZXN0KHJlbmRlcmVkSHRtbCkpIHtcbiAgICAgICAgICB2YXIgZW5kT2ZDbG9zaW5nVGFnID0gcmVuZGVyZWRIdG1sLmluZGV4T2YoJz4nKTtcblxuICAgICAgICAgIHRoaXMucHVzaChyZW5kZXJlZEh0bWwuc2xpY2UoMCwgZW5kT2ZDbG9zaW5nVGFnICsgMSkgKyBodG1sICsgcmVuZGVyZWRIdG1sLnNsaWNlKGVuZE9mQ2xvc2luZ1RhZyArIDEpKTtcbiAgICAgICAgfSBlbHNlIHRoaXMucHVzaChodG1sICsgcmVuZGVyZWRIdG1sKTtcblxuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhZGFibGVTdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zZWFsKCk7XG4gICAgfSk7XG5cbiAgICByZWFkYWJsZVN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBfdGhpcy5zZWFsKCk7XG5cbiAgICAgIC8vIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSB0cmFuc2Zvcm0gc3RyZWFtXG4gICAgICB0cmFuc2Zvcm1lci5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVhZGFibGVTdHJlYW0ucGlwZSh0cmFuc2Zvcm1lcik7XG4gIH07XG5cbiAgcmV0dXJuIFNlcnZlclN0eWxlU2hlZXQ7XG59KCk7XG5cbi8vIFxuXG52YXIgU3R5bGVTaGVldENvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG52YXIgU3R5bGVTaGVldENvbnN1bWVyID0gU3R5bGVTaGVldENvbnRleHQuQ29uc3VtZXI7XG5cbnZhciBTdHlsZVNoZWV0TWFuYWdlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFN0eWxlU2hlZXRNYW5hZ2VyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdHlsZVNoZWV0TWFuYWdlcihwcm9wcykge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlU2hlZXRNYW5hZ2VyKTtcblxuICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5nZXRDb250ZXh0ID0gbWVtb2l6ZShfdGhpcy5nZXRDb250ZXh0KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBTdHlsZVNoZWV0TWFuYWdlci5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGZ1bmN0aW9uIGdldENvbnRleHQoc2hlZXQsIHRhcmdldCkge1xuICAgIGlmIChzaGVldCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbmV3IFN0eWxlU2hlZXQodGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig0KTtcbiAgICB9XG4gIH07XG5cbiAgU3R5bGVTaGVldE1hbmFnZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHNoZWV0ID0gX3Byb3BzLnNoZWV0LFxuICAgICAgICB0YXJnZXQgPSBfcHJvcHMudGFyZ2V0O1xuXG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN0eWxlU2hlZXRDb250ZXh0LlByb3ZpZGVyLFxuICAgICAgeyB2YWx1ZTogdGhpcy5nZXRDb250ZXh0KHNoZWV0LCB0YXJnZXQpIH0sXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBjaGlsZHJlblxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXRNYW5hZ2VyO1xufShDb21wb25lbnQpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVTaGVldE1hbmFnZXIucHJvcFR5cGVzID0ge1xuICBzaGVldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmluc3RhbmNlT2YoU3R5bGVTaGVldCksIFByb3BUeXBlcy5pbnN0YW5jZU9mKFNlcnZlclN0eWxlU2hlZXQpXSksXG5cbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVuZENoaWxkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pXG59IDogdm9pZCAwO1xuXG4vLyBcblxudmFyIGlkZW50aWZpZXJzID0ge307XG5cbi8qIFdlIGRlcGVuZCBvbiBjb21wb25lbnRzIGhhdmluZyB1bmlxdWUgSURzICovXG5mdW5jdGlvbiBnZW5lcmF0ZUlkKF9Db21wb25lbnRTdHlsZSwgX2Rpc3BsYXlOYW1lLCBwYXJlbnRDb21wb25lbnRJZCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSB0eXBlb2YgX2Rpc3BsYXlOYW1lICE9PSAnc3RyaW5nJyA/ICdzYycgOiBlc2NhcGUoX2Rpc3BsYXlOYW1lKTtcblxuICAvKipcbiAgICogVGhpcyBlbnN1cmVzIHVuaXF1ZW5lc3MgaWYgdHdvIGNvbXBvbmVudHMgaGFwcGVuIHRvIHNoYXJlXG4gICAqIHRoZSBzYW1lIGRpc3BsYXlOYW1lLlxuICAgKi9cbiAgdmFyIG5yID0gKGlkZW50aWZpZXJzW2Rpc3BsYXlOYW1lXSB8fCAwKSArIDE7XG4gIGlkZW50aWZpZXJzW2Rpc3BsYXlOYW1lXSA9IG5yO1xuXG4gIHZhciBjb21wb25lbnRJZCA9IGRpc3BsYXlOYW1lICsgJy0nICsgX0NvbXBvbmVudFN0eWxlLmdlbmVyYXRlTmFtZShkaXNwbGF5TmFtZSArIG5yKTtcblxuICByZXR1cm4gcGFyZW50Q29tcG9uZW50SWQgPyBwYXJlbnRDb21wb25lbnRJZCArICctJyArIGNvbXBvbmVudElkIDogY29tcG9uZW50SWQ7XG59XG5cbi8vICRGbG93Rml4TWVcblxudmFyIFN0eWxlZENvbXBvbmVudCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKFN0eWxlZENvbXBvbmVudCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3R5bGVkQ29tcG9uZW50KCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlZENvbXBvbmVudCk7XG5cbiAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5hdHRycyA9IHt9O1xuXG4gICAgX3RoaXMucmVuZGVyT3V0ZXIgPSBfdGhpcy5yZW5kZXJPdXRlci5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5yZW5kZXJJbm5lciA9IF90aGlzLnJlbmRlcklubmVyLmJpbmQoX3RoaXMpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIF90aGlzLndhcm5Jbm5lclJlZiA9IG9uY2UoZnVuY3Rpb24gKGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBcImlubmVyUmVmXCIgQVBJIGhhcyBiZWVuIHJlbW92ZWQgaW4gc3R5bGVkLWNvbXBvbmVudHMgdjQgaW4gZmF2b3Igb2YgUmVhY3QgMTYgcmVmIGZvcndhcmRpbmcsIHVzZSBcInJlZlwiIGluc3RlYWQgbGlrZSBhIHR5cGljYWwgY29tcG9uZW50LiBcImlubmVyUmVmXCIgd2FzIGRldGVjdGVkIG9uIGNvbXBvbmVudCBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLndhcm5BdHRyc0ZuT2JqZWN0S2V5RGVwcmVjYXRlZCA9IG9uY2UoZnVuY3Rpb24gKGtleSwgZGlzcGxheU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignRnVuY3Rpb25zIGFzIG9iamVjdC1mb3JtIGF0dHJzKHt9KSBrZXlzIGFyZSBub3cgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24gb2Ygc3R5bGVkLWNvbXBvbmVudHMuIFN3aXRjaCB0byB0aGUgbmV3IGF0dHJzKHByb3BzID0+ICh7fSkpIHN5bnRheCBpbnN0ZWFkIGZvciBlYXNpZXIgYW5kIG1vcmUgcG93ZXJmdWwgY29tcG9zaXRpb24uIFRoZSBhdHRycyBrZXkgaW4gcXVlc3Rpb24gaXMgXCInICsga2V5ICsgJ1wiIG9uIGNvbXBvbmVudCBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nLCAnXFxuICcgKyBuZXcgRXJyb3IoKS5zdGFjaylcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy53YXJuTm9uU3R5bGVkQ29tcG9uZW50QXR0cnNPYmplY3RLZXkgPSBvbmNlKGZ1bmN0aW9uIChrZXksIGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0l0IGxvb2tzIGxpa2UgeW91XFwndmUgdXNlZCBhIG5vbiBzdHlsZWQtY29tcG9uZW50IGFzIHRoZSB2YWx1ZSBmb3IgdGhlIFwiJyArIGtleSArICdcIiBwcm9wIGluIGFuIG9iamVjdC1mb3JtIGF0dHJzIGNvbnN0cnVjdG9yIG9mIFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLlxcbicgKyAnWW91IHNob3VsZCB1c2UgdGhlIG5ldyBmdW5jdGlvbi1mb3JtIGF0dHJzIGNvbnN0cnVjdG9yIHdoaWNoIGF2b2lkcyB0aGlzIGlzc3VlOiBhdHRycyhwcm9wcyA9PiAoeyB5b3VyU3R1ZmYgfSkpXFxuJyArIFwiVG8gY29udGludWUgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgb2JqZWN0IHN5bnRheCwgeW91J2xsIG5lZWQgdG8gd3JhcCB5b3VyIGNvbXBvbmVudCBwcm9wIGluIGEgZnVuY3Rpb24gdG8gbWFrZSBpdCBhdmFpbGFibGUgaW5zaWRlIHRoZSBzdHlsZWQgY29tcG9uZW50ICh5b3UnbGwgc3RpbGwgZ2V0IHRoZSBkZXByZWNhdGlvbiB3YXJuaW5nIHRob3VnaC4pXFxuXCIgKyAoJ0ZvciBleGFtcGxlLCB7ICcgKyBrZXkgKyAnOiAoKSA9PiBJbm5lckNvbXBvbmVudCB9IGluc3RlYWQgb2YgeyAnICsga2V5ICsgJzogSW5uZXJDb21wb25lbnQgfScpKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3R5bGVTaGVldENvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVyT3V0ZXJcbiAgICApO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyT3V0ZXIgPSBmdW5jdGlvbiByZW5kZXJPdXRlcigpIHtcbiAgICB2YXIgc3R5bGVTaGVldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogU3R5bGVTaGVldC5tYXN0ZXI7XG5cbiAgICB0aGlzLnN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0O1xuXG4gICAgLy8gTm8gbmVlZCB0byBzdWJzY3JpYmUgYSBzdGF0aWMgY29tcG9uZW50IHRvIHRoZW1lIGNoYW5nZXMsIGl0IHdvbid0IGNoYW5nZSBhbnl0aGluZ1xuICAgIGlmICh0aGlzLnByb3BzLmZvcndhcmRlZENvbXBvbmVudC5jb21wb25lbnRTdHlsZS5pc1N0YXRpYykgcmV0dXJuIHRoaXMucmVuZGVySW5uZXIoKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICB0aGlzLnJlbmRlcklubmVyXG4gICAgKTtcbiAgfTtcblxuICBTdHlsZWRDb21wb25lbnQucHJvdG90eXBlLnJlbmRlcklubmVyID0gZnVuY3Rpb24gcmVuZGVySW5uZXIodGhlbWUpIHtcbiAgICB2YXIgX3Byb3BzJGZvcndhcmRlZENvbXBvID0gdGhpcy5wcm9wcy5mb3J3YXJkZWRDb21wb25lbnQsXG4gICAgICAgIGNvbXBvbmVudFN0eWxlID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLmNvbXBvbmVudFN0eWxlLFxuICAgICAgICBkZWZhdWx0UHJvcHMgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uZGVmYXVsdFByb3BzLFxuICAgICAgICBkaXNwbGF5TmFtZSA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby5kaXNwbGF5TmFtZSxcbiAgICAgICAgZm9sZGVkQ29tcG9uZW50SWRzID0gX3Byb3BzJGZvcndhcmRlZENvbXBvLmZvbGRlZENvbXBvbmVudElkcyxcbiAgICAgICAgc3R5bGVkQ29tcG9uZW50SWQgPSBfcHJvcHMkZm9yd2FyZGVkQ29tcG8uc3R5bGVkQ29tcG9uZW50SWQsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcyRmb3J3YXJkZWRDb21wby50YXJnZXQ7XG5cblxuICAgIHZhciBnZW5lcmF0ZWRDbGFzc05hbWUgPSB2b2lkIDA7XG4gICAgaWYgKGNvbXBvbmVudFN0eWxlLmlzU3RhdGljKSB7XG4gICAgICBnZW5lcmF0ZWRDbGFzc05hbWUgPSB0aGlzLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgdGhpcy5wcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoZGV0ZXJtaW5lVGhlbWUodGhpcy5wcm9wcywgdGhlbWUsIGRlZmF1bHRQcm9wcykgfHwgRU1QVFlfT0JKRUNULCB0aGlzLnByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudFRvQmVDcmVhdGVkID0gdGhpcy5wcm9wcy5hcyB8fCB0aGlzLmF0dHJzLmFzIHx8IHRhcmdldDtcbiAgICB2YXIgaXNUYXJnZXRUYWcgPSBpc1RhZyhlbGVtZW50VG9CZUNyZWF0ZWQpO1xuXG4gICAgdmFyIHByb3BzRm9yRWxlbWVudCA9IHt9O1xuICAgIHZhciBjb21wdXRlZFByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHRoaXMuYXR0cnMpO1xuXG4gICAgdmFyIGtleSA9IHZvaWQgMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChrZXkgaW4gY29tcHV0ZWRQcm9wcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ID09PSAnaW5uZXJSZWYnICYmIGlzVGFyZ2V0VGFnKSB7XG4gICAgICAgIHRoaXMud2FybklubmVyUmVmKGRpc3BsYXlOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZENvbXBvbmVudCcgfHwga2V5ID09PSAnYXMnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdmb3J3YXJkZWRSZWYnKSBwcm9wc0ZvckVsZW1lbnQucmVmID0gY29tcHV0ZWRQcm9wc1trZXldO2Vsc2UgaWYgKGtleSA9PT0gJ2ZvcndhcmRlZEFzJykgcHJvcHNGb3JFbGVtZW50LmFzID0gY29tcHV0ZWRQcm9wc1trZXldO2Vsc2UgaWYgKCFpc1RhcmdldFRhZyB8fCB2YWxpZEF0dHIoa2V5KSkge1xuICAgICAgICAvLyBEb24ndCBwYXNzIHRocm91Z2ggbm9uIEhUTUwgdGFncyB0aHJvdWdoIHRvIEhUTUwgZWxlbWVudHNcbiAgICAgICAgcHJvcHNGb3JFbGVtZW50W2tleV0gPSBjb21wdXRlZFByb3BzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5hdHRycy5zdHlsZSkge1xuICAgICAgcHJvcHNGb3JFbGVtZW50LnN0eWxlID0gX2V4dGVuZHMoe30sIHRoaXMuYXR0cnMuc3R5bGUsIHRoaXMucHJvcHMuc3R5bGUpO1xuICAgIH1cblxuICAgIHByb3BzRm9yRWxlbWVudC5jbGFzc05hbWUgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0KGZvbGRlZENvbXBvbmVudElkcywgc3R5bGVkQ29tcG9uZW50SWQsIGdlbmVyYXRlZENsYXNzTmFtZSAhPT0gc3R5bGVkQ29tcG9uZW50SWQgPyBnZW5lcmF0ZWRDbGFzc05hbWUgOiBudWxsLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwgdGhpcy5hdHRycy5jbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChlbGVtZW50VG9CZUNyZWF0ZWQsIHByb3BzRm9yRWxlbWVudCk7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5idWlsZEV4ZWN1dGlvbkNvbnRleHQgPSBmdW5jdGlvbiBidWlsZEV4ZWN1dGlvbkNvbnRleHQodGhlbWUsIHByb3BzLCBhdHRycykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGhlbWU6IHRoZW1lIH0pO1xuXG4gICAgaWYgKCFhdHRycy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuXG4gICAgdGhpcy5hdHRycyA9IHt9O1xuXG4gICAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0ckRlZikge1xuICAgICAgdmFyIHJlc29sdmVkQXR0ckRlZiA9IGF0dHJEZWY7XG4gICAgICB2YXIgYXR0ckRlZldhc0ZuID0gZmFsc2U7XG4gICAgICB2YXIgYXR0ciA9IHZvaWQgMDtcbiAgICAgIHZhciBrZXkgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHJlc29sdmVkQXR0ckRlZikpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICByZXNvbHZlZEF0dHJEZWYgPSByZXNvbHZlZEF0dHJEZWYoY29udGV4dCk7XG4gICAgICAgIGF0dHJEZWZXYXNGbiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZm9yIChrZXkgaW4gcmVzb2x2ZWRBdHRyRGVmKSB7XG4gICAgICAgIGF0dHIgPSByZXNvbHZlZEF0dHJEZWZba2V5XTtcblxuICAgICAgICBpZiAoIWF0dHJEZWZXYXNGbikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGF0dHIpICYmICFpc0Rlcml2ZWRSZWFjdENvbXBvbmVudChhdHRyKSAmJiAhaXNTdHlsZWRDb21wb25lbnQoYXR0cikpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIF90aGlzMi53YXJuQXR0cnNGbk9iamVjdEtleURlcHJlY2F0ZWQoa2V5LCBwcm9wcy5mb3J3YXJkZWRDb21wb25lbnQuZGlzcGxheU5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRyID0gYXR0cihjb250ZXh0KTtcblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoYXR0cikpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLndhcm5Ob25TdHlsZWRDb21wb25lbnRBdHRyc09iamVjdEtleShrZXksIHByb3BzLmZvcndhcmRlZENvbXBvbmVudC5kaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLmF0dHJzW2tleV0gPSBhdHRyO1xuICAgICAgICBjb250ZXh0W2tleV0gPSBhdHRyO1xuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoZW1lLCBwcm9wcykge1xuICAgIHZhciBfcHJvcHMkZm9yd2FyZGVkQ29tcG8yID0gcHJvcHMuZm9yd2FyZGVkQ29tcG9uZW50LFxuICAgICAgICBhdHRycyA9IF9wcm9wcyRmb3J3YXJkZWRDb21wbzIuYXR0cnMsXG4gICAgICAgIGNvbXBvbmVudFN0eWxlID0gX3Byb3BzJGZvcndhcmRlZENvbXBvMi5jb21wb25lbnRTdHlsZSxcbiAgICAgICAgd2FyblRvb01hbnlDbGFzc2VzID0gX3Byb3BzJGZvcndhcmRlZENvbXBvMi53YXJuVG9vTWFueUNsYXNzZXM7XG5cbiAgICAvLyBzdGF0aWNhbGx5IHN0eWxlZC1jb21wb25lbnRzIGRvbid0IG5lZWQgdG8gYnVpbGQgYW4gZXhlY3V0aW9uIGNvbnRleHQgb2JqZWN0LFxuICAgIC8vIGFuZCBzaG91bGRuJ3QgYmUgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGNsYXNzIG5hbWVzXG5cbiAgICBpZiAoY29tcG9uZW50U3R5bGUuaXNTdGF0aWMgJiYgIWF0dHJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgdGhpcy5zdHlsZVNoZWV0KTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gY29tcG9uZW50U3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXModGhpcy5idWlsZEV4ZWN1dGlvbkNvbnRleHQodGhlbWUsIHByb3BzLCBhdHRycyksIHRoaXMuc3R5bGVTaGVldCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuVG9vTWFueUNsYXNzZXMpIHdhcm5Ub29NYW55Q2xhc3NlcyhjbGFzc05hbWUpO1xuXG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVkQ29tcG9uZW50O1xufShDb21wb25lbnQpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFyZ2V0LCBvcHRpb25zLCBydWxlcykge1xuICB2YXIgaXNUYXJnZXRTdHlsZWRDb21wID0gaXNTdHlsZWRDb21wb25lbnQodGFyZ2V0KTtcbiAgdmFyIGlzQ2xhc3MgPSAhaXNUYWcodGFyZ2V0KTtcblxuICB2YXIgX29wdGlvbnMkZGlzcGxheU5hbWUgPSBvcHRpb25zLmRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWUgPSBfb3B0aW9ucyRkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpIDogX29wdGlvbnMkZGlzcGxheU5hbWUsXG4gICAgICBfb3B0aW9ucyRjb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICBjb21wb25lbnRJZCA9IF9vcHRpb25zJGNvbXBvbmVudElkID09PSB1bmRlZmluZWQgPyBnZW5lcmF0ZUlkKENvbXBvbmVudFN0eWxlLCBvcHRpb25zLmRpc3BsYXlOYW1lLCBvcHRpb25zLnBhcmVudENvbXBvbmVudElkKSA6IF9vcHRpb25zJGNvbXBvbmVudElkLFxuICAgICAgX29wdGlvbnMkUGFyZW50Q29tcG9uID0gb3B0aW9ucy5QYXJlbnRDb21wb25lbnQsXG4gICAgICBQYXJlbnRDb21wb25lbnQgPSBfb3B0aW9ucyRQYXJlbnRDb21wb24gPT09IHVuZGVmaW5lZCA/IFN0eWxlZENvbXBvbmVudCA6IF9vcHRpb25zJFBhcmVudENvbXBvbixcbiAgICAgIF9vcHRpb25zJGF0dHJzID0gb3B0aW9ucy5hdHRycyxcbiAgICAgIGF0dHJzID0gX29wdGlvbnMkYXR0cnMgPT09IHVuZGVmaW5lZCA/IEVNUFRZX0FSUkFZIDogX29wdGlvbnMkYXR0cnM7XG5cblxuICB2YXIgc3R5bGVkQ29tcG9uZW50SWQgPSBvcHRpb25zLmRpc3BsYXlOYW1lICYmIG9wdGlvbnMuY29tcG9uZW50SWQgPyBlc2NhcGUob3B0aW9ucy5kaXNwbGF5TmFtZSkgKyAnLScgKyBvcHRpb25zLmNvbXBvbmVudElkIDogb3B0aW9ucy5jb21wb25lbnRJZCB8fCBjb21wb25lbnRJZDtcblxuICAvLyBmb2xkIHRoZSB1bmRlcmx5aW5nIFN0eWxlZENvbXBvbmVudCBhdHRycyB1cCAoaW1wbGljaXQgZXh0ZW5kKVxuICB2YXIgZmluYWxBdHRycyA9XG4gIC8vICRGbG93Rml4TWVcbiAgaXNUYXJnZXRTdHlsZWRDb21wICYmIHRhcmdldC5hdHRycyA/IEFycmF5LnByb3RvdHlwZS5jb25jYXQodGFyZ2V0LmF0dHJzLCBhdHRycykuZmlsdGVyKEJvb2xlYW4pIDogYXR0cnM7XG5cbiAgdmFyIGNvbXBvbmVudFN0eWxlID0gbmV3IENvbXBvbmVudFN0eWxlKGlzVGFyZ2V0U3R5bGVkQ29tcCA/IC8vIGZvbGQgdGhlIHVuZGVybHlpbmcgU3R5bGVkQ29tcG9uZW50IHJ1bGVzIHVwIChpbXBsaWNpdCBleHRlbmQpXG4gIC8vICRGbG93Rml4TWVcbiAgdGFyZ2V0LmNvbXBvbmVudFN0eWxlLnJ1bGVzLmNvbmNhdChydWxlcykgOiBydWxlcywgZmluYWxBdHRycywgc3R5bGVkQ29tcG9uZW50SWQpO1xuXG4gIC8qKlxuICAgKiBmb3J3YXJkUmVmIGNyZWF0ZXMgYSBuZXcgaW50ZXJpbSBjb21wb25lbnQsIHdoaWNoIHdlJ2xsIHRha2UgYWR2YW50YWdlIG9mXG4gICAqIGluc3RlYWQgb2YgZXh0ZW5kaW5nIFBhcmVudENvbXBvbmVudCB0byBjcmVhdGUgX2Fub3RoZXJfIGludGVyaW0gY2xhc3NcbiAgICovXG4gIHZhciBXcmFwcGVkU3R5bGVkQ29tcG9uZW50ID0gdm9pZCAwO1xuICB2YXIgZm9yd2FyZFJlZiA9IGZ1bmN0aW9uIGZvcndhcmRSZWYocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBhcmVudENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGZvcndhcmRlZENvbXBvbmVudDogV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgZm9yd2FyZGVkUmVmOiByZWYgfSkpO1xuICB9O1xuICBmb3J3YXJkUmVmLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZvcndhcmRSZWYpO1xuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmF0dHJzID0gZmluYWxBdHRycztcbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlID0gY29tcG9uZW50U3R5bGU7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmZvbGRlZENvbXBvbmVudElkcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcCA/IC8vICRGbG93Rml4TWVcbiAgQXJyYXkucHJvdG90eXBlLmNvbmNhdCh0YXJnZXQuZm9sZGVkQ29tcG9uZW50SWRzLCB0YXJnZXQuc3R5bGVkQ29tcG9uZW50SWQpIDogRU1QVFlfQVJSQVk7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gc3R5bGVkQ29tcG9uZW50SWQ7XG5cbiAgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgdGFyZ2V0IHVwIHNpbmNlIHdlIGZvbGRlZCB0aGUgc3R5bGVzXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50YXJnZXQgPSBpc1RhcmdldFN0eWxlZENvbXAgPyB0YXJnZXQudGFyZ2V0IDogdGFyZ2V0O1xuXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWcpIHtcbiAgICB2YXIgcHJldmlvdXNDb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICAgIG9wdGlvbnNUb0NvcHkgPSBvYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbJ2NvbXBvbmVudElkJ10pO1xuXG5cbiAgICB2YXIgbmV3Q29tcG9uZW50SWQgPSBwcmV2aW91c0NvbXBvbmVudElkICYmIHByZXZpb3VzQ29tcG9uZW50SWQgKyAnLScgKyAoaXNUYWcodGFnKSA/IHRhZyA6IGVzY2FwZShnZXRDb21wb25lbnROYW1lKHRhZykpKTtcblxuICAgIHZhciBuZXdPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnNUb0NvcHksIHtcbiAgICAgIGF0dHJzOiBmaW5hbEF0dHJzLFxuICAgICAgY29tcG9uZW50SWQ6IG5ld0NvbXBvbmVudElkLFxuICAgICAgUGFyZW50Q29tcG9uZW50OiBQYXJlbnRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHJldHVybiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFnLCBuZXdPcHRpb25zLCBydWxlcyk7XG4gIH07XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgJ2RlZmF1bHRQcm9wcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQkMSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCQkMShvYmopIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHRoaXMuX2ZvbGRlZERlZmF1bHRQcm9wcyA9IGlzVGFyZ2V0U3R5bGVkQ29tcCA/IG1lcmdlKHRhcmdldC5kZWZhdWx0UHJvcHMsIG9iaikgOiBvYmo7XG4gICAgfVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50Lndhcm5Ub29NYW55Q2xhc3NlcyA9IGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyhkaXNwbGF5TmFtZSk7XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lXG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcuJyArIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQ7XG4gIH07XG5cbiAgaWYgKGlzQ2xhc3MpIHtcbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhXcmFwcGVkU3R5bGVkQ29tcG9uZW50LCB0YXJnZXQsIHtcbiAgICAgIC8vIGFsbCBTQy1zcGVjaWZpYyB0aGluZ3Mgc2hvdWxkIG5vdCBiZSBob2lzdGVkXG4gICAgICBhdHRyczogdHJ1ZSxcbiAgICAgIGNvbXBvbmVudFN0eWxlOiB0cnVlLFxuICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICBmb2xkZWRDb21wb25lbnRJZHM6IHRydWUsXG4gICAgICBzdHlsZWRDb21wb25lbnRJZDogdHJ1ZSxcbiAgICAgIHRhcmdldDogdHJ1ZSxcbiAgICAgIHdpdGhDb21wb25lbnQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBXcmFwcGVkU3R5bGVkQ29tcG9uZW50O1xufVxuXG4vLyBcbi8vIFRoYW5rcyB0byBSZWFjdERPTUZhY3RvcmllcyBmb3IgdGhpcyBoYW5keSBsaXN0IVxuXG52YXIgZG9tRWxlbWVudHMgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsXG5cbi8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFya2VyJywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbi8vIFxuXG52YXIgc3R5bGVkID0gZnVuY3Rpb24gc3R5bGVkKHRhZykge1xuICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY3JlYXRlU3R5bGVkQ29tcG9uZW50LCB0YWcpO1xufTtcblxuLy8gU2hvcnRoYW5kcyBmb3IgYWxsIHZhbGlkIEhUTUwgRWxlbWVudHNcbmRvbUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGRvbUVsZW1lbnQpIHtcbiAgc3R5bGVkW2RvbUVsZW1lbnRdID0gc3R5bGVkKGRvbUVsZW1lbnQpO1xufSk7XG5cbi8vIFxuXG52YXIgR2xvYmFsU3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFN0eWxlKHJ1bGVzLCBjb21wb25lbnRJZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFN0eWxlKTtcblxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmNvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG4gICAgdGhpcy5pc1N0YXRpYyA9IGlzU3RhdGljUnVsZXMocnVsZXMsIEVNUFRZX0FSUkFZKTtcblxuICAgIGlmICghU3R5bGVTaGVldC5tYXN0ZXIuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBTdHlsZVNoZWV0Lm1hc3Rlci5kZWZlcnJlZEluamVjdChjb21wb25lbnRJZCwgW10pO1xuICAgIH1cbiAgfVxuXG4gIEdsb2JhbFN0eWxlLnByb3RvdHlwZS5jcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkge1xuICAgIHZhciBmbGF0Q1NTID0gZmxhdHRlbih0aGlzLnJ1bGVzLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgICB2YXIgY3NzID0gc3RyaW5naWZ5UnVsZXMoZmxhdENTUywgJycpO1xuXG4gICAgc3R5bGVTaGVldC5pbmplY3QodGhpcy5jb21wb25lbnRJZCwgY3NzKTtcbiAgfTtcblxuICBHbG9iYWxTdHlsZS5wcm90b3R5cGUucmVtb3ZlU3R5bGVzID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVzKHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkO1xuXG4gICAgaWYgKHN0eWxlU2hlZXQuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBzdHlsZVNoZWV0LnJlbW92ZShjb21wb25lbnRJZCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRPRE86IG92ZXJ3cml0ZSBpbi1wbGFjZSBpbnN0ZWFkIG9mIHJlbW92ZStjcmVhdGU/XG5cblxuICBHbG9iYWxTdHlsZS5wcm90b3R5cGUucmVuZGVyU3R5bGVzID0gZnVuY3Rpb24gcmVuZGVyU3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgICB0aGlzLnJlbW92ZVN0eWxlcyhzdHlsZVNoZWV0KTtcbiAgICB0aGlzLmNyZWF0ZVN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsU3R5bGU7XG59KCk7XG5cbi8vIFxuXG4vLyBwbGFjZSBvdXIgY2FjaGUgaW50byBzaGFyZWQgY29udGV4dCBzbyBpdCdsbCBwZXJzaXN0IGJldHdlZW4gSE1Sc1xuaWYgKElTX0JST1dTRVIpIHtcbiAgd2luZG93LnNjQ0dTSE1SQ2FjaGUgPSB7fTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2xvYmFsU3R5bGUoc3RyaW5ncykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHJ1bGVzID0gY3NzLmFwcGx5KHVuZGVmaW5lZCwgW3N0cmluZ3NdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpO1xuICB2YXIgaWQgPSAnc2MtZ2xvYmFsLScgKyBtdXJtdXJoYXNoKEpTT04uc3RyaW5naWZ5KHJ1bGVzKSk7XG4gIHZhciBzdHlsZSA9IG5ldyBHbG9iYWxTdHlsZShydWxlcywgaWQpO1xuXG4gIHZhciBHbG9iYWxTdHlsZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoR2xvYmFsU3R5bGVDb21wb25lbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gR2xvYmFsU3R5bGVDb21wb25lbnQocHJvcHMpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFN0eWxlQ29tcG9uZW50KTtcblxuICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgICAgdmFyIF90aGlzJGNvbnN0cnVjdG9yID0gX3RoaXMuY29uc3RydWN0b3IsXG4gICAgICAgICAgZ2xvYmFsU3R5bGUgPSBfdGhpcyRjb25zdHJ1Y3Rvci5nbG9iYWxTdHlsZSxcbiAgICAgICAgICBzdHlsZWRDb21wb25lbnRJZCA9IF90aGlzJGNvbnN0cnVjdG9yLnN0eWxlZENvbXBvbmVudElkO1xuXG5cbiAgICAgIGlmIChJU19CUk9XU0VSKSB7XG4gICAgICAgIHdpbmRvdy5zY0NHU0hNUkNhY2hlW3N0eWxlZENvbXBvbmVudElkXSA9ICh3aW5kb3cuc2NDR1NITVJDYWNoZVtzdHlsZWRDb21wb25lbnRJZF0gfHwgMCkgKyAxO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgZml4ZXMgSE1SIGNvbXBhdGliaWxpdHkuIERvbid0IGFzayBtZSB3aHksIGJ1dCB0aGlzIGNvbWJpbmF0aW9uIG9mXG4gICAgICAgKiBjYWNoaW5nIHRoZSBjbG9zdXJlIHZhcmlhYmxlcyB2aWEgc3RhdGljcyBhbmQgdGhlbiBwZXJzaXN0aW5nIHRoZSBzdGF0aWNzIGluXG4gICAgICAgKiBzdGF0ZSB3b3JrcyBhY3Jvc3MgSE1SIHdoZXJlIG5vIG90aGVyIGNvbWJpbmF0aW9uIGRpZC4gwq9cXF8o44OEKV8vwq9cbiAgICAgICAqL1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGdsb2JhbFN0eWxlOiBnbG9iYWxTdHlsZSxcbiAgICAgICAgc3R5bGVkQ29tcG9uZW50SWQ6IHN0eWxlZENvbXBvbmVudElkXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIEdsb2JhbFN0eWxlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHdpbmRvdy5zY0NHU0hNUkNhY2hlW3RoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWRdKSB7XG4gICAgICAgIHdpbmRvdy5zY0NHU0hNUkNhY2hlW3RoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWRdIC09IDE7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIERlcGVuZGluZyBvbiB0aGUgb3JkZXIgXCJyZW5kZXJcIiBpcyBjYWxsZWQgdGhpcyBjYW4gY2F1c2UgdGhlIHN0eWxlcyB0byBiZSBsb3N0XG4gICAgICAgKiB1bnRpbCB0aGUgbmV4dCByZW5kZXIgcGFzcyBvZiB0aGUgcmVtYWluaW5nIGluc3RhbmNlLCB3aGljaCBtYXlcbiAgICAgICAqIG5vdCBiZSBpbW1lZGlhdGUuXG4gICAgICAgKi9cbiAgICAgIGlmICh3aW5kb3cuc2NDR1NITVJDYWNoZVt0aGlzLnN0YXRlLnN0eWxlZENvbXBvbmVudElkXSA9PT0gMCkge1xuICAgICAgICB0aGlzLnN0YXRlLmdsb2JhbFN0eWxlLnJlbW92ZVN0eWxlcyh0aGlzLnN0eWxlU2hlZXQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBHbG9iYWxTdHlsZUNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIFJlYWN0LkNoaWxkcmVuLmNvdW50KHRoaXMucHJvcHMuY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIGdsb2JhbCBzdHlsZSBjb21wb25lbnQgJyArIHRoaXMuc3RhdGUuc3R5bGVkQ29tcG9uZW50SWQgKyAnIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFN0eWxlU2hlZXRDb25zdW1lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZnVuY3Rpb24gKHN0eWxlU2hlZXQpIHtcbiAgICAgICAgICBfdGhpczIuc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQgfHwgU3R5bGVTaGVldC5tYXN0ZXI7XG5cbiAgICAgICAgICB2YXIgZ2xvYmFsU3R5bGUgPSBfdGhpczIuc3RhdGUuZ2xvYmFsU3R5bGU7XG5cblxuICAgICAgICAgIGlmIChnbG9iYWxTdHlsZS5pc1N0YXRpYykge1xuICAgICAgICAgICAgZ2xvYmFsU3R5bGUucmVuZGVyU3R5bGVzKFNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCwgX3RoaXMyLnN0eWxlU2hlZXQpO1xuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIFRoZW1lQ29uc3VtZXIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICAgICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gX3RoaXMyLmNvbnN0cnVjdG9yLmRlZmF1bHRQcm9wcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgX3RoaXMyLnByb3BzKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhlbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0LnRoZW1lID0gZGV0ZXJtaW5lVGhlbWUoX3RoaXMyLnByb3BzLCB0aGVtZSwgZGVmYXVsdFByb3BzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnbG9iYWxTdHlsZS5yZW5kZXJTdHlsZXMoY29udGV4dCwgX3RoaXMyLnN0eWxlU2hlZXQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gR2xvYmFsU3R5bGVDb21wb25lbnQ7XG4gIH0oUmVhY3QuQ29tcG9uZW50KTtcblxuICBHbG9iYWxTdHlsZUNvbXBvbmVudC5nbG9iYWxTdHlsZSA9IHN0eWxlO1xuICBHbG9iYWxTdHlsZUNvbXBvbmVudC5zdHlsZWRDb21wb25lbnRJZCA9IGlkO1xuXG5cbiAgcmV0dXJuIEdsb2JhbFN0eWxlQ29tcG9uZW50O1xufVxuXG4vLyBcblxudmFyIHJlcGxhY2VXaGl0ZXNwYWNlID0gZnVuY3Rpb24gcmVwbGFjZVdoaXRlc3BhY2Uoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzfFxcXFxuL2csICcnKTtcbn07XG5cbmZ1bmN0aW9uIGtleWZyYW1lcyhzdHJpbmdzKSB7XG4gIC8qIFdhcm5pbmcgaWYgeW91J3ZlIHVzZWQga2V5ZnJhbWVzIG9uIFJlYWN0IE5hdGl2ZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKCdga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC4nKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcnVsZXMgPSBjc3MuYXBwbHkodW5kZWZpbmVkLCBbc3RyaW5nc10uY29uY2F0KGludGVycG9sYXRpb25zKSk7XG5cbiAgdmFyIG5hbWUgPSBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKG11cm11cmhhc2gocmVwbGFjZVdoaXRlc3BhY2UoSlNPTi5zdHJpbmdpZnkocnVsZXMpKSkpO1xuXG4gIHJldHVybiBuZXcgS2V5ZnJhbWVzKG5hbWUsIHN0cmluZ2lmeVJ1bGVzKHJ1bGVzLCBuYW1lLCAnQGtleWZyYW1lcycpKTtcbn1cblxuLy8gXG5cbnZhciB3aXRoVGhlbWUgPSAoZnVuY3Rpb24gKENvbXBvbmVudCQkMSkge1xuICB2YXIgV2l0aFRoZW1lID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50JCQxLmRlZmF1bHRQcm9wcztcblxuICAgICAgICB2YXIgdGhlbWVQcm9wID0gZGV0ZXJtaW5lVGhlbWUocHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHRoZW1lUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJyArIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50JCQxKSArICdcIicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50JCQxLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGhlbWU6IHRoZW1lUHJvcCwgcmVmOiByZWYgfSkpO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG4gIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50JCQxKTtcblxuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSAnV2l0aFRoZW1lKCcgKyBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCQkMSkgKyAnKSc7XG5cbiAgcmV0dXJuIFdpdGhUaGVtZTtcbn0pO1xuXG4vLyBcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfSEFVTlRFRF9CWV9TUE9PS1lfR0hPU1RTID0ge1xuICBTdHlsZVNoZWV0OiBTdHlsZVNoZWV0XG59O1xuXG4vLyBcblxuLyogV2FybmluZyBpZiB5b3UndmUgaW1wb3J0ZWQgdGhpcyBmaWxlIG9uIFJlYWN0IE5hdGl2ZSAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuXCIgKyBcIlBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblwiICsgJ1JlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmUnKTtcbn1cblxuLyogV2FybmluZyBpZiB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTm9kZS5qcycpID09PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2pzZG9tJykgPT09IC0xKSB7XG4gIHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSA9IHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSB8fCAwO1xuXG4gIGlmICh3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gPT09IDEpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gXCIgKyAnVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgbm90IHJlbmRlcmluZyBwcm9wZXJseSwgZXJyb3JzIGhhcHBlbmluZyBkdXJpbmcgcmVoeWRyYXRpb24gcHJvY2VzcyAnICsgJ2FuZCBtYWtlcyB5b3VyIGFwcGxpY2F0aW9uIGJpZ2dlciB3aXRob3V0IGEgZ29vZCByZWFzb24uXFxuXFxuJyArICdTZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLicpO1xuICB9XG5cbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddICs9IDE7XG59XG5cbi8vXG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDtcbmV4cG9ydCB7IGNyZWF0ZUdsb2JhbFN0eWxlLCBjc3MsIGlzU3R5bGVkQ29tcG9uZW50LCBrZXlmcmFtZXMsIFNlcnZlclN0eWxlU2hlZXQsIFN0eWxlU2hlZXRDb25zdW1lciwgU3R5bGVTaGVldENvbnRleHQsIFN0eWxlU2hlZXRNYW5hZ2VyLCBUaGVtZUNvbnN1bWVyLCBUaGVtZUNvbnRleHQsIFRoZW1lUHJvdmlkZXIsIHdpdGhUaGVtZSwgX19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0hBVU5URURfQllfU1BPT0tZX0dIT1NUUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbFtcImZhc3QtY29weVwiXSA9IGZhY3RvcnkoKSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgdG9TdHJpbmdGdW5jdGlvbiA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSwgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcywgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scywgZ2V0UHJvdG90eXBlT2YkMSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICB2YXIgX2EgPSBPYmplY3QucHJvdG90eXBlLCBoYXNPd25Qcm9wZXJ0eSA9IF9hLmhhc093blByb3BlcnR5LCBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IF9hLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAgIHZhciBTWU1CT0xfUFJPUEVSVElFUyA9IHR5cGVvZiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbic7XG4gICAgdmFyIFdFQUtfTUFQID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbic7XG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uIGNyZWF0ZUNhY2hlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBnZXQgYSBuZXcgY2FjaGUgb2JqZWN0IHRvIHByZXZlbnQgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAqXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBjYWNoZSBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlQ2FjaGUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoV0VBS19NQVApIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgV2Vha01hcCgpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENhY2hlKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENhY2hlLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhfnRoaXMuX2tleXMuaW5kZXhPZihrZXkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIENhY2hlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlc1t0aGlzLl9rZXlzLmluZGV4T2Yoa2V5KV07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgQ2FjaGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBDYWNoZTtcbiAgICAgICAgfSgpKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBDYWNoZSgpOyB9O1xuICAgIH0pKCk7XG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uIGdldENsZWFuQ2xvbmVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGdldCBhbiBlbXB0eSB2ZXJzaW9uIG9mIHRoZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBwcm90b3R5cGUgaXQgaGFzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0IHRoZSBvYmplY3QgdG8gYnVpbGQgYSBjbGVhbiBjbG9uZSBmcm9tXG4gICAgICogQHBhcmFtIHJlYWxtIHRoZSByZWFsbSB0aGUgb2JqZWN0IHJlc2lkZXMgaW5cbiAgICAgKiBAcmV0dXJucyB0aGUgZW1wdHkgY2xvbmVkIG9iamVjdFxuICAgICAqL1xuICAgIHZhciBnZXRDbGVhbkNsb25lID0gZnVuY3Rpb24gKG9iamVjdCwgcmVhbG0pIHtcbiAgICAgICAgdmFyIHByb3RvdHlwZSA9IG9iamVjdC5fX3Byb3RvX18gfHwgZ2V0UHJvdG90eXBlT2YkMShvYmplY3QpO1xuICAgICAgICBpZiAoIXByb3RvdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBwcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gcmVhbG0uT2JqZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvdG90eXBlID09PSByZWFsbS5PYmplY3QucHJvdG90eXBlID8ge30gOiBjcmVhdGUocHJvdG90eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAofnRvU3RyaW5nRnVuY3Rpb24uY2FsbChDb25zdHJ1Y3RvcikuaW5kZXhPZignW25hdGl2ZSBjb2RlXScpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYSkgeyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZShwcm90b3R5cGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uIGdldE9iamVjdENsb25lTG9vc2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGdldCBhIGNvcHkgb2YgdGhlIG9iamVjdCBiYXNlZCBvbiBsb29zZSBydWxlcywgbWVhbmluZyBhbGwgZW51bWVyYWJsZSBrZXlzXG4gICAgICogYW5kIHN5bWJvbHMgYXJlIGNvcGllZCwgYnV0IHByb3BlcnR5IGRlc2NyaXB0b3JzIGFyZSBub3QgY29uc2lkZXJlZFxuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdCB0aGUgb2JqZWN0IHRvIGNsb25lXG4gICAgICogQHBhcmFtIHJlYWxtIHRoZSByZWFsbSB0aGUgb2JqZWN0IHJlc2lkZXMgaW5cbiAgICAgKiBAcGFyYW0gaGFuZGxlQ29weSB0aGUgZnVuY3Rpb24gdGhhdCBoYW5kbGVzIGNvcHlpbmcgdGhlIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHRoZSBjb3BpZWQgb2JqZWN0XG4gICAgICovXG4gICAgdmFyIGdldE9iamVjdENsb25lTG9vc2UgPSBmdW5jdGlvbiAob2JqZWN0LCByZWFsbSwgaGFuZGxlQ29weSwgY2FjaGUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gZ2V0Q2xlYW5DbG9uZShvYmplY3QsIHJlYWxtKTtcbiAgICAgICAgLy8gc2V0IGluIHRoZSBjYWNoZSBpbW1lZGlhdGVseSB0byBiZSBhYmxlIHRvIHJldXNlIHRoZSBvYmplY3QgcmVjdXJzaXZlbHlcbiAgICAgICAgY2FjaGUuc2V0KG9iamVjdCwgY2xvbmUpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBjbG9uZVtrZXldID0gaGFuZGxlQ29weShvYmplY3Rba2V5XSwgY2FjaGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChTWU1CT0xfUFJPUEVSVElFUykge1xuICAgICAgICAgICAgdmFyIHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoXzEgPSBzeW1ib2xzLmxlbmd0aCwgc3ltYm9sID0gdm9pZCAwOyBpbmRleCA8IGxlbmd0aF8xOyArK2luZGV4KSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gc3ltYm9sc1tpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lW3N5bWJvbF0gPSBoYW5kbGVDb3B5KG9iamVjdFtzeW1ib2xdLCBjYWNoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvbiBnZXRPYmplY3RDbG9uZVN0cmljdFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogZ2V0IGEgY29weSBvZiB0aGUgb2JqZWN0IGJhc2VkIG9uIHN0cmljdCBydWxlcywgbWVhbmluZyBhbGwga2V5cyBhbmQgc3ltYm9sc1xuICAgICAqIGFyZSBjb3BpZWQgYmFzZWQgb24gdGhlIG9yaWdpbmFsIHByb3BlcnR5IGRlc2NyaXB0b3JzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0IHRoZSBvYmplY3QgdG8gY2xvbmVcbiAgICAgKiBAcGFyYW0gcmVhbG0gdGhlIHJlYWxtIHRoZSBvYmplY3QgcmVzaWRlcyBpblxuICAgICAqIEBwYXJhbSBoYW5kbGVDb3B5IHRoZSBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgY29weWluZyB0aGUgb2JqZWN0XG4gICAgICogQHJldHVybnMgdGhlIGNvcGllZCBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgZ2V0T2JqZWN0Q2xvbmVTdHJpY3QgPSBmdW5jdGlvbiAob2JqZWN0LCByZWFsbSwgaGFuZGxlQ29weSwgY2FjaGUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gZ2V0Q2xlYW5DbG9uZShvYmplY3QsIHJlYWxtKTtcbiAgICAgICAgLy8gc2V0IGluIHRoZSBjYWNoZSBpbW1lZGlhdGVseSB0byBiZSBhYmxlIHRvIHJldXNlIHRoZSBvYmplY3QgcmVjdXJzaXZlbHlcbiAgICAgICAgY2FjaGUuc2V0KG9iamVjdCwgY2xvbmUpO1xuICAgICAgICB2YXIgcHJvcGVydGllcyA9IFNZTUJPTF9QUk9QRVJUSUVTXG4gICAgICAgICAgICA/IGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpXG4gICAgICAgICAgICA6IGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KTtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGhfMiA9IHByb3BlcnRpZXMubGVuZ3RoLCBwcm9wZXJ0eSA9IHZvaWQgMCwgZGVzY3JpcHRvciA9IHZvaWQgMDsgaW5kZXggPCBsZW5ndGhfMjsgKytpbmRleCkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gJ2NhbGxlZScgJiYgcHJvcGVydHkgIT09ICdjYWxsZXInKSB7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGNsb25lIHRoZSB2YWx1ZSBpZiBhY3R1YWxseSBhIHZhbHVlLCBub3QgYSBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGVzY3JpcHRvci5nZXQgJiYgIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gaGFuZGxlQ29weShvYmplY3RbcHJvcGVydHldLCBjYWNoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KGNsb25lLCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUZWUgYWJvdmUgY2FuIGZhaWwgb24gbm9kZSBpbiBlZGdlIGNhc2VzLCBzbyBmYWxsIGJhY2sgdG8gdGhlIGxvb3NlIGFzc2lnbm1lbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZVtwcm9wZXJ0eV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiBleHRyYSBlZGdlIGNhc2VzIHdoZXJlIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGNhbm5vdCBiZSByZXRyaXZlZCwgZmFsbCBiYWNrIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBsb29zZSBhc3NpZ25tZW50LlxuICAgICAgICAgICAgICAgICAgICBjbG9uZVtwcm9wZXJ0eV0gPSBoYW5kbGVDb3B5KG9iamVjdFtwcm9wZXJ0eV0sIGNhY2hlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uIGdldFJlZ0V4cEZsYWdzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBnZXQgdGhlIGZsYWdzIHRvIGFwcGx5IHRvIHRoZSBjb3BpZWQgcmVnZXhwXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVnRXhwIHRoZSByZWdleHAgdG8gZ2V0IHRoZSBmbGFncyBvZlxuICAgICAqIEByZXR1cm5zIHRoZSBmbGFncyBmb3IgdGhlIHJlZ2V4cFxuICAgICAqL1xuICAgIHZhciBnZXRSZWdFeHBGbGFncyA9IGZ1bmN0aW9uIChyZWdFeHApIHtcbiAgICAgICAgdmFyIGZsYWdzID0gJyc7XG4gICAgICAgIGlmIChyZWdFeHAuZ2xvYmFsKSB7XG4gICAgICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZ0V4cC5pZ25vcmVDYXNlKSB7XG4gICAgICAgICAgICBmbGFncyArPSAnaSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZ0V4cC5tdWx0aWxpbmUpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICdtJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnRXhwLnVuaWNvZGUpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICd1JztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnRXhwLnN0aWNreSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ3knO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGFncztcbiAgICB9O1xuXG4gICAgLy8gdXRpbHNcbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBHTE9CQUxfVEhJUyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0LCByZXR1cm5pbmcgXCJ0aGlzXCIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSkoKTtcbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb24gY29weVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogY29weSBhbiB2YWx1ZSBkZWVwbHkgYXMgbXVjaCBhcyBwb3NzaWJsZVxuICAgICAqXG4gICAgICogSWYgYHN0cmljdGAgaXMgYXBwbGllZCwgdGhlbiBhbGwgcHJvcGVydGllcyAoaW5jbHVkaW5nIG5vbi1lbnVtZXJhYmxlIG9uZXMpXG4gICAgICogYXJlIGNvcGllZCB3aXRoIHRoZWlyIG9yaWdpbmFsIHByb3BlcnR5IGRlc2NyaXB0b3JzIG9uIGJvdGggb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgICAqXG4gICAgICogVGhlIHZhbHVlIGlzIGNvbXBhcmVkIHRvIHRoZSBnbG9iYWwgY29uc3RydWN0b3JzIGluIHRoZSBgcmVhbG1gIHByb3ZpZGVkLFxuICAgICAqIGFuZCB0aGUgbmF0aXZlIGNvbnN0cnVjdG9yIGlzIGFsd2F5cyB1c2VkIHRvIGVuc3VyZSB0aGF0IGV4dGVuc2lvbnMgb2YgbmF0aXZlXG4gICAgICogb2JqZWN0cyAoYWxsb3dzIGluIEVTMjAxNSspIGFyZSBtYWludGFpbmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBjb3B5XG4gICAgICogQHBhcmFtIFtvcHRpb25zXSB0aGUgb3B0aW9ucyBmb3IgY29weWluZyB3aXRoXG4gICAgICogQHBhcmFtIFtvcHRpb25zLmlzU3RyaWN0XSBzaG91bGQgdGhlIGNvcHkgYmUgc3RyaWN0XG4gICAgICogQHBhcmFtIFtvcHRpb25zLnJlYWxtXSB0aGUgcmVhbG0gKHRoaXMpIHZhbHVlIHRoZSB2YWx1ZSBpcyBjb3BpZWQgZnJvbVxuICAgICAqIEByZXR1cm5zIHRoZSBjb3BpZWQgdmFsdWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5KHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIG1hbnVhbGx5IGNvYWxlc2NlZCBpbnN0ZWFkIG9mIGRlZmF1bHQgcGFyYW1ldGVycyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgdmFyIGlzU3RyaWN0ID0gISEob3B0aW9ucyAmJiBvcHRpb25zLmlzU3RyaWN0KTtcbiAgICAgICAgdmFyIHJlYWxtID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFsbSkgfHwgR0xPQkFMX1RISVM7XG4gICAgICAgIHZhciBnZXRPYmplY3RDbG9uZSA9IGlzU3RyaWN0ID8gZ2V0T2JqZWN0Q2xvbmVTdHJpY3QgOiBnZXRPYmplY3RDbG9uZUxvb3NlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGZ1bmN0aW9uIGhhbmRsZUNvcHlcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIGNvcHkgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5IGJhc2VkIG9uIGl0cyB0eXBlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gY29weVxuICAgICAgICAgKiBAcmV0dXJucyB0aGUgY29waWVkIHZhbHVlXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgaGFuZGxlQ29weSA9IGZ1bmN0aW9uICh2YWx1ZSwgY2FjaGUpIHtcbiAgICAgICAgICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWNoZS5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmdldCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJvdG90eXBlID0gdmFsdWUuX19wcm90b19fIHx8IGdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgICAgICAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHByb3RvdHlwZSAmJiBwcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAvLyBwbGFpbiBvYmplY3RzXG4gICAgICAgICAgICBpZiAoIUNvbnN0cnVjdG9yIHx8IENvbnN0cnVjdG9yID09PSByZWFsbS5PYmplY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0T2JqZWN0Q2xvbmUodmFsdWUsIHJlYWxtLCBoYW5kbGVDb3B5LCBjYWNoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2xvbmU7XG4gICAgICAgICAgICAvLyBhcnJheXNcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHN0cmljdCwgaW5jbHVkZSBub24tc3RhbmRhcmQgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0T2JqZWN0Q2xvbmVTdHJpY3QodmFsdWUsIHJlYWxtLCBoYW5kbGVDb3B5LCBjYWNoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KHZhbHVlLCBjbG9uZSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGhfMSA9IHZhbHVlLmxlbmd0aDsgaW5kZXggPCBsZW5ndGhfMTsgKytpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZVtpbmRleF0gPSBoYW5kbGVDb3B5KHZhbHVlW2luZGV4XSwgY2FjaGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkYXRlc1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodmFsdWUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlZ2V4cHNcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLlJlZ0V4cCkge1xuICAgICAgICAgICAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKHZhbHVlLnNvdXJjZSwgdmFsdWUuZmxhZ3MgfHwgZ2V0UmVnRXhwRmxhZ3ModmFsdWUpKTtcbiAgICAgICAgICAgICAgICBjbG9uZS5sYXN0SW5kZXggPSB2YWx1ZS5sYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWFwc1xuICAgICAgICAgICAgaWYgKHJlYWxtLk1hcCAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLk1hcCkge1xuICAgICAgICAgICAgICAgIGNsb25lID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KHZhbHVlLCBjbG9uZSk7XG4gICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5zZXQoa2V5LCBoYW5kbGVDb3B5KHZhbHVlLCBjYWNoZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNldHNcbiAgICAgICAgICAgIGlmIChyZWFsbS5TZXQgJiYgdmFsdWUgaW5zdGFuY2VvZiByZWFsbS5TZXQpIHtcbiAgICAgICAgICAgICAgICBjbG9uZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgICAgICAgICAgIGNhY2hlLnNldCh2YWx1ZSwgY2xvbmUpO1xuICAgICAgICAgICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLmFkZChoYW5kbGVDb3B5KHZhbHVlLCBjYWNoZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJsb2JzXG4gICAgICAgICAgICBpZiAocmVhbG0uQmxvYiAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLkJsb2IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoMCwgdmFsdWUuc2l6ZSwgdmFsdWUudHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBidWZmZXJzIChub2RlLW9ubHkpXG4gICAgICAgICAgICBpZiAocmVhbG0uQnVmZmVyICYmIHJlYWxtLkJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjbG9uZSA9IHJlYWxtLkJ1ZmZlci5hbGxvY1Vuc2FmZVxuICAgICAgICAgICAgICAgICAgICA/IHJlYWxtLkJ1ZmZlci5hbGxvY1Vuc2FmZSh2YWx1ZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIDogbmV3IENvbnN0cnVjdG9yKHZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KHZhbHVlLCBjbG9uZSk7XG4gICAgICAgICAgICAgICAgdmFsdWUuY29weShjbG9uZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYXJyYXlidWZmZXJzIC8gZGF0YXZpZXdzXG4gICAgICAgICAgICBpZiAocmVhbG0uQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBkYXRhdmlld3NcbiAgICAgICAgICAgICAgICBpZiAocmVhbG0uQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IG5ldyBDb25zdHJ1Y3Rvcih2YWx1ZS5idWZmZXIuc2xpY2UoMCkpO1xuICAgICAgICAgICAgICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBhcnJheWJ1ZmZlcnNcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiByZWFsbS5BcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHZhbHVlLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBjYW5ub3QgLyBzaG91bGQgbm90IGJlIGNsb25lZCwgZG9uJ3RcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIHByb21pc2UtbGlrZVxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAvLyBlcnJvcnNcbiAgICAgICAgICAgICAgICB2YWx1ZSBpbnN0YW5jZW9mIEVycm9yIHx8XG4gICAgICAgICAgICAgICAgLy8gd2Vha21hcHNcbiAgICAgICAgICAgICAgICAocmVhbG0uV2Vha01hcCAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLldlYWtNYXApIHx8XG4gICAgICAgICAgICAgICAgLy8gd2Vha3NldHNcbiAgICAgICAgICAgICAgICAocmVhbG0uV2Vha1NldCAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLldlYWtTZXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYXNzdW1lIGFueXRoaW5nIGxlZnQgaXMgYSBjdXN0b20gY29uc3RydWN0b3JcbiAgICAgICAgICAgIHJldHVybiBnZXRPYmplY3RDbG9uZSh2YWx1ZSwgcmVhbG0sIGhhbmRsZUNvcHksIGNhY2hlKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNvcHkodmFsdWUsIGNyZWF0ZUNhY2hlKCkpO1xuICAgIH1cbiAgICAvLyBBZGRpbmcgcmVmZXJlbmNlIHRvIGFsbG93IHVzYWdlIGluIENvbW1vbkpTIGxpYnJhcmllcyBjb21waWxlZCB1c2luZyBUU0MsIHdoaWNoXG4gICAgLy8gZXhwZWN0cyB0aGVyZSB0byBiZSBhIGRlZmF1bHQgcHJvcGVydHkgb24gdGhlIGV4cG9ydGVkIHZhbHVlLiBTZWVcbiAgICAvLyBbIzM3XShodHRwczovL2dpdGh1Yi5jb20vcGxhbnR0aGVpZGVhL2Zhc3QtY29weS9pc3N1ZXMvMzcpIGZvciBkZXRhaWxzLlxuICAgIGNvcHkuZGVmYXVsdCA9IGNvcHk7XG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uIHN0cmljdENvcHlcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIGNvcHkgdGhlIHZhbHVlIHdpdGggYHN0cmljdGAgb3B0aW9uIHByZS1hcHBsaWVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGNvcHlcbiAgICAgKiBAcGFyYW0gW29wdGlvbnNdIHRoZSBvcHRpb25zIGZvciBjb3B5aW5nIHdpdGhcbiAgICAgKiBAcGFyYW0gW29wdGlvbnMucmVhbG1dIHRoZSByZWFsbSAodGhpcykgdmFsdWUgdGhlIHZhbHVlIGlzIGNvcGllZCBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIGNvcGllZCB2YWx1ZVxuICAgICAqL1xuICAgIGNvcHkuc3RyaWN0ID0gZnVuY3Rpb24gc3RyaWN0Q29weSh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gY29weSh2YWx1ZSwge1xuICAgICAgICAgICAgaXNTdHJpY3Q6IHRydWUsXG4gICAgICAgICAgICByZWFsbTogb3B0aW9ucyA/IG9wdGlvbnMucmVhbG0gOiB2b2lkIDAsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29weTtcblxufSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFzdC1jb3B5LmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gd2hpdGVzcGFjZVxuXG52YXIgZnJvbUNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG52YXIgcmUgPSAvXFxzL1xuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB7XG4gIHJldHVybiByZS50ZXN0KFxuICAgIHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdudW1iZXInID8gZnJvbUNvZGUoY2hhcmFjdGVyKSA6IGNoYXJhY3Rlci5jaGFyQXQoMClcbiAgKVxufVxuIiwiLy8gVE9ETyhCYWJlbCA4KTogUmVtb3ZlIHRoaXMgZmlsZS5cblxudmFyIHJ1bnRpbWUgPSByZXF1aXJlKFwiLi4vaGVscGVycy9yZWdlbmVyYXRvclJ1bnRpbWVcIikoKTtcbm1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcblxuLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2Jsb2IvbWFpbi9wYWNrYWdlcy9ydW50aW1lL3J1bnRpbWUuanMjTDczNj1cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiIsInZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZShcIi4vdG9Qcm9wZXJ0eUtleS5qc1wiKTtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0KSB7XG4gIHJldHVybiAociA9IHRvUHJvcGVydHlLZXkocikpIGluIGUgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwge1xuICAgIHZhbHVlOiB0LFxuICAgIGVudW1lcmFibGU6ICEwLFxuICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgd3JpdGFibGU6ICEwXG4gIH0pIDogZVtyXSA9IHQsIGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChuLCB0LCBlLCByLCBvLCBhLCBjKSB7XG4gIHRyeSB7XG4gICAgdmFyIGkgPSBuW2FdKGMpLFxuICAgICAgdSA9IGkudmFsdWU7XG4gIH0gY2F0Y2ggKG4pIHtcbiAgICByZXR1cm4gdm9pZCBlKG4pO1xuICB9XG4gIGkuZG9uZSA/IHQodSkgOiBQcm9taXNlLnJlc29sdmUodSkudGhlbihyLCBvKTtcbn1cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdCA9IHRoaXMsXG4gICAgICBlID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAociwgbykge1xuICAgICAgdmFyIGEgPSBuLmFwcGx5KHQsIGUpO1xuICAgICAgZnVuY3Rpb24gX25leHQobikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoYSwgciwgbywgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIG4pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gX3Rocm93KG4pIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGEsIHIsIG8sIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgbik7XG4gICAgICB9XG4gICAgICBfbmV4dCh2b2lkIDApO1xuICAgIH0pO1xuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvciwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBUeXBlRXJyb3I7XG4iLCJcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHRyaW07XG5cbmZ1bmN0aW9uIHRyaW0oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJyk7XG59XG5cbmV4cG9ydHMubGVmdCA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJyk7XG59O1xuXG5leHBvcnRzLnJpZ2h0ID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSG9zdE9iamVjdCh2YWx1ZSkge1xuICAvLyBNYW55IGhvc3Qgb2JqZWN0cyBhcmUgYE9iamVjdGAgb2JqZWN0cyB0aGF0IGNhbiBjb2VyY2UgdG8gc3RyaW5nc1xuICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLlxuICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8XG4gICAgICBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSAhPSBvYmplY3RUYWcgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiZcbiAgICBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJiBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1BsYWluT2JqZWN0O1xuIiwiZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIF90eXBlb2Yobyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgaGFzTWFwID0gdHlwZW9mIE1hcCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXAucHJvdG90eXBlO1xudmFyIG1hcFNpemVEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBoYXNNYXAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1hcC5wcm90b3R5cGUsICdzaXplJykgOiBudWxsO1xudmFyIG1hcFNpemUgPSBoYXNNYXAgJiYgbWFwU2l6ZURlc2NyaXB0b3IgJiYgdHlwZW9mIG1hcFNpemVEZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG1hcFNpemVEZXNjcmlwdG9yLmdldCA6IG51bGw7XG52YXIgbWFwRm9yRWFjaCA9IGhhc01hcCAmJiBNYXAucHJvdG90eXBlLmZvckVhY2g7XG52YXIgaGFzU2V0ID0gdHlwZW9mIFNldCA9PT0gJ2Z1bmN0aW9uJyAmJiBTZXQucHJvdG90eXBlO1xudmFyIHNldFNpemVEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBoYXNTZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFNldC5wcm90b3R5cGUsICdzaXplJykgOiBudWxsO1xudmFyIHNldFNpemUgPSBoYXNTZXQgJiYgc2V0U2l6ZURlc2NyaXB0b3IgJiYgdHlwZW9mIHNldFNpemVEZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyA/IHNldFNpemVEZXNjcmlwdG9yLmdldCA6IG51bGw7XG52YXIgc2V0Rm9yRWFjaCA9IGhhc1NldCAmJiBTZXQucHJvdG90eXBlLmZvckVhY2g7XG52YXIgaGFzV2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIFdlYWtNYXAucHJvdG90eXBlO1xudmFyIHdlYWtNYXBIYXMgPSBoYXNXZWFrTWFwID8gV2Vha01hcC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciBoYXNXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbicgJiYgV2Vha1NldC5wcm90b3R5cGU7XG52YXIgd2Vha1NldEhhcyA9IGhhc1dlYWtTZXQgPyBXZWFrU2V0LnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGhhc1dlYWtSZWYgPSB0eXBlb2YgV2Vha1JlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrUmVmLnByb3RvdHlwZTtcbnZhciB3ZWFrUmVmRGVyZWYgPSBoYXNXZWFrUmVmID8gV2Vha1JlZi5wcm90b3R5cGUuZGVyZWYgOiBudWxsO1xudmFyIGJvb2xlYW5WYWx1ZU9mID0gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZjtcbnZhciBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciAkbWF0Y2ggPSBTdHJpbmcucHJvdG90eXBlLm1hdGNoO1xudmFyICRzbGljZSA9IFN0cmluZy5wcm90b3R5cGUuc2xpY2U7XG52YXIgJHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgJHRvVXBwZXJDYXNlID0gU3RyaW5nLnByb3RvdHlwZS50b1VwcGVyQ2FzZTtcbnZhciAkdG9Mb3dlckNhc2UgPSBTdHJpbmcucHJvdG90eXBlLnRvTG93ZXJDYXNlO1xudmFyICR0ZXN0ID0gUmVnRXhwLnByb3RvdHlwZS50ZXN0O1xudmFyICRjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyICRqb2luID0gQXJyYXkucHJvdG90eXBlLmpvaW47XG52YXIgJGFyclNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyICRmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgYmlnSW50VmFsdWVPZiA9IHR5cGVvZiBCaWdJbnQgPT09ICdmdW5jdGlvbicgPyBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YgOiBudWxsO1xudmFyIGdPUFMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIHN5bVRvU3RyaW5nID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJyA/IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgOiBudWxsO1xudmFyIGhhc1NoYW1tZWRTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnb2JqZWN0Jztcbi8vIGllLCBgaGFzLXRvc3RyaW5ndGFnL3NoYW1zXG52YXIgdG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC50b1N0cmluZ1RhZyAmJiAodHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gaGFzU2hhbW1lZFN5bWJvbHMgPyAnb2JqZWN0JyA6ICdzeW1ib2wnKVxuICAgID8gU3ltYm9sLnRvU3RyaW5nVGFnXG4gICAgOiBudWxsO1xudmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbnZhciBnUE8gPSAodHlwZW9mIFJlZmxlY3QgPT09ICdmdW5jdGlvbicgPyBSZWZsZWN0LmdldFByb3RvdHlwZU9mIDogT2JqZWN0LmdldFByb3RvdHlwZU9mKSB8fCAoXG4gICAgW10uX19wcm90b19fID09PSBBcnJheS5wcm90b3R5cGUgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuICAgICAgICA/IGZ1bmN0aW9uIChPKSB7XG4gICAgICAgICAgICByZXR1cm4gTy5fX3Byb3RvX187IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cbiAgICAgICAgfVxuICAgICAgICA6IG51bGxcbik7XG5cbmZ1bmN0aW9uIGFkZE51bWVyaWNTZXBhcmF0b3IobnVtLCBzdHIpIHtcbiAgICBpZiAoXG4gICAgICAgIG51bSA9PT0gSW5maW5pdHlcbiAgICAgICAgfHwgbnVtID09PSAtSW5maW5pdHlcbiAgICAgICAgfHwgbnVtICE9PSBudW1cbiAgICAgICAgfHwgKG51bSAmJiBudW0gPiAtMTAwMCAmJiBudW0gPCAxMDAwKVxuICAgICAgICB8fCAkdGVzdC5jYWxsKC9lLywgc3RyKVxuICAgICkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICB2YXIgc2VwUmVnZXggPSAvWzAtOV0oPz0oPzpbMC05XXszfSkrKD8hWzAtOV0pKS9nO1xuICAgIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJykge1xuICAgICAgICB2YXIgaW50ID0gbnVtIDwgMCA/IC0kZmxvb3IoLW51bSkgOiAkZmxvb3IobnVtKTsgLy8gdHJ1bmMobnVtKVxuICAgICAgICBpZiAoaW50ICE9PSBudW0pIHtcbiAgICAgICAgICAgIHZhciBpbnRTdHIgPSBTdHJpbmcoaW50KTtcbiAgICAgICAgICAgIHZhciBkZWMgPSAkc2xpY2UuY2FsbChzdHIsIGludFN0ci5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKGludFN0ciwgc2VwUmVnZXgsICckJl8nKSArICcuJyArICRyZXBsYWNlLmNhbGwoJHJlcGxhY2UuY2FsbChkZWMsIC8oWzAtOV17M30pL2csICckJl8nKSwgL18kLywgJycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHN0ciwgc2VwUmVnZXgsICckJl8nKTtcbn1cblxudmFyIHV0aWxJbnNwZWN0ID0gcmVxdWlyZSgnLi91dGlsLmluc3BlY3QnKTtcbnZhciBpbnNwZWN0Q3VzdG9tID0gdXRpbEluc3BlY3QuY3VzdG9tO1xudmFyIGluc3BlY3RTeW1ib2wgPSBpc1N5bWJvbChpbnNwZWN0Q3VzdG9tKSA/IGluc3BlY3RDdXN0b20gOiBudWxsO1xuXG52YXIgcXVvdGVzID0ge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAnZG91YmxlJzogJ1wiJyxcbiAgICBzaW5nbGU6IFwiJ1wiXG59O1xudmFyIHF1b3RlUkVzID0ge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAnZG91YmxlJzogLyhbXCJcXFxcXSkvZyxcbiAgICBzaW5nbGU6IC8oWydcXFxcXSkvZ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNwZWN0XyhvYmosIG9wdGlvbnMsIGRlcHRoLCBzZWVuKSB7XG4gICAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpICYmICFoYXMocXVvdGVzLCBvcHRzLnF1b3RlU3R5bGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcInF1b3RlU3R5bGVcIiBtdXN0IGJlIFwic2luZ2xlXCIgb3IgXCJkb3VibGVcIicpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnbWF4U3RyaW5nTGVuZ3RoJykgJiYgKHR5cGVvZiBvcHRzLm1heFN0cmluZ0xlbmd0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0cy5tYXhTdHJpbmdMZW5ndGggPCAwICYmIG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBJbmZpbml0eVxuICAgICAgICAgICAgOiBvcHRzLm1heFN0cmluZ0xlbmd0aCAhPT0gbnVsbFxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm1heFN0cmluZ0xlbmd0aFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIEluZmluaXR5LCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgdmFyIGN1c3RvbUluc3BlY3QgPSBoYXMob3B0cywgJ2N1c3RvbUluc3BlY3QnKSA/IG9wdHMuY3VzdG9tSW5zcGVjdCA6IHRydWU7XG4gICAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0ICE9PSAnYm9vbGVhbicgJiYgY3VzdG9tSW5zcGVjdCAhPT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiY3VzdG9tSW5zcGVjdFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBgdHJ1ZWAsIGBmYWxzZWAsIG9yIGBcXCdzeW1ib2xcXCdgJyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBoYXMob3B0cywgJ2luZGVudCcpXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSBudWxsXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSAnXFx0J1xuICAgICAgICAmJiAhKHBhcnNlSW50KG9wdHMuaW5kZW50LCAxMCkgPT09IG9wdHMuaW5kZW50ICYmIG9wdHMuaW5kZW50ID4gMClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiaW5kZW50XCIgbXVzdCBiZSBcIlxcXFx0XCIsIGFuIGludGVnZXIgPiAwLCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgaWYgKGhhcyhvcHRzLCAnbnVtZXJpY1NlcGFyYXRvcicpICYmIHR5cGVvZiBvcHRzLm51bWVyaWNTZXBhcmF0b3IgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJudW1lcmljU2VwYXJhdG9yXCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGB0cnVlYCBvciBgZmFsc2VgJyk7XG4gICAgfVxuICAgIHZhciBudW1lcmljU2VwYXJhdG9yID0gb3B0cy5udW1lcmljU2VwYXJhdG9yO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvYmogPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaW5zcGVjdFN0cmluZyhvYmosIG9wdHMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKG9iaiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5IC8gb2JqID4gMCA/ICcwJyA6ICctMCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ciA9IFN0cmluZyhvYmopO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBzdHIpIDogc3RyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgdmFyIGJpZ0ludFN0ciA9IFN0cmluZyhvYmopICsgJ24nO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBiaWdJbnRTdHIpIDogYmlnSW50U3RyO1xuICAgIH1cblxuICAgIHZhciBtYXhEZXB0aCA9IHR5cGVvZiBvcHRzLmRlcHRoID09PSAndW5kZWZpbmVkJyA/IDUgOiBvcHRzLmRlcHRoO1xuICAgIGlmICh0eXBlb2YgZGVwdGggPT09ICd1bmRlZmluZWQnKSB7IGRlcHRoID0gMDsgfVxuICAgIGlmIChkZXB0aCA+PSBtYXhEZXB0aCAmJiBtYXhEZXB0aCA+IDAgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkob2JqKSA/ICdbQXJyYXldJyA6ICdbT2JqZWN0XSc7XG4gICAgfVxuXG4gICAgdmFyIGluZGVudCA9IGdldEluZGVudChvcHRzLCBkZXB0aCk7XG5cbiAgICBpZiAodHlwZW9mIHNlZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZW4gPSBbXTtcbiAgICB9IGVsc2UgaWYgKGluZGV4T2Yoc2Vlbiwgb2JqKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSwgZnJvbSwgbm9JbmRlbnQpIHtcbiAgICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgICAgIHNlZW4gPSAkYXJyU2xpY2UuY2FsbChzZWVuKTtcbiAgICAgICAgICAgIHNlZW4ucHVzaChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9JbmRlbnQpIHtcbiAgICAgICAgICAgIHZhciBuZXdPcHRzID0ge1xuICAgICAgICAgICAgICAgIGRlcHRoOiBvcHRzLmRlcHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgbmV3T3B0cy5xdW90ZVN0eWxlID0gb3B0cy5xdW90ZVN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBuZXdPcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnNwZWN0Xyh2YWx1ZSwgb3B0cywgZGVwdGggKyAxLCBzZWVuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNSZWdFeHAob2JqKSkgeyAvLyBpbiBvbGRlciBlbmdpbmVzLCByZWdleGVzIGFyZSBjYWxsYWJsZVxuICAgICAgICB2YXIgbmFtZSA9IG5hbWVPZihvYmopO1xuICAgICAgICB2YXIga2V5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgcmV0dXJuICdbRnVuY3Rpb24nICsgKG5hbWUgPyAnOiAnICsgbmFtZSA6ICcgKGFub255bW91cyknKSArICddJyArIChrZXlzLmxlbmd0aCA+IDAgPyAnIHsgJyArICRqb2luLmNhbGwoa2V5cywgJywgJykgKyAnIH0nIDogJycpO1xuICAgIH1cbiAgICBpZiAoaXNTeW1ib2wob2JqKSkge1xuICAgICAgICB2YXIgc3ltU3RyaW5nID0gaGFzU2hhbW1lZFN5bWJvbHMgPyAkcmVwbGFjZS5jYWxsKFN0cmluZyhvYmopLCAvXihTeW1ib2xcXCguKlxcKSlfW14pXSokLywgJyQxJykgOiBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaGFzU2hhbW1lZFN5bWJvbHMgPyBtYXJrQm94ZWQoc3ltU3RyaW5nKSA6IHN5bVN0cmluZztcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgICAgIHZhciBzID0gJzwnICsgJHRvTG93ZXJDYXNlLmNhbGwoU3RyaW5nKG9iai5ub2RlTmFtZSkpO1xuICAgICAgICB2YXIgYXR0cnMgPSBvYmouYXR0cmlidXRlcyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcyArPSAnICcgKyBhdHRyc1tpXS5uYW1lICsgJz0nICsgd3JhcFF1b3RlcyhxdW90ZShhdHRyc1tpXS52YWx1ZSksICdkb3VibGUnLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBzICs9ICc+JztcbiAgICAgICAgaWYgKG9iai5jaGlsZE5vZGVzICYmIG9iai5jaGlsZE5vZGVzLmxlbmd0aCkgeyBzICs9ICcuLi4nOyB9XG4gICAgICAgIHMgKz0gJzwvJyArICR0b0xvd2VyQ2FzZS5jYWxsKFN0cmluZyhvYmoubm9kZU5hbWUpKSArICc+JztcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKG9iai5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbXSc7IH1cbiAgICAgICAgdmFyIHhzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoaW5kZW50ICYmICFzaW5nbGVMaW5lVmFsdWVzKHhzKSkge1xuICAgICAgICAgICAgcmV0dXJuICdbJyArIGluZGVudGVkSm9pbih4cywgaW5kZW50KSArICddJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1sgJyArICRqb2luLmNhbGwoeHMsICcsICcpICsgJyBdJztcbiAgICB9XG4gICAgaWYgKGlzRXJyb3Iob2JqKSkge1xuICAgICAgICB2YXIgcGFydHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmICghKCdjYXVzZScgaW4gRXJyb3IucHJvdG90eXBlKSAmJiAnY2F1c2UnIGluIG9iaiAmJiAhaXNFbnVtZXJhYmxlLmNhbGwob2JqLCAnY2F1c2UnKSkge1xuICAgICAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoJ1tjYXVzZV06ICcgKyBpbnNwZWN0KG9iai5jYXVzZSksIHBhcnRzKSwgJywgJykgKyAnIH0nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbJyArIFN0cmluZyhvYmopICsgJ10nOyB9XG4gICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArICRqb2luLmNhbGwocGFydHMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGN1c3RvbUluc3BlY3QpIHtcbiAgICAgICAgaWYgKGluc3BlY3RTeW1ib2wgJiYgdHlwZW9mIG9ialtpbnNwZWN0U3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJyAmJiB1dGlsSW5zcGVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxJbnNwZWN0KG9iaiwgeyBkZXB0aDogbWF4RGVwdGggLSBkZXB0aCB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXN0b21JbnNwZWN0ICE9PSAnc3ltYm9sJyAmJiB0eXBlb2Ygb2JqLmluc3BlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouaW5zcGVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc01hcChvYmopKSB7XG4gICAgICAgIHZhciBtYXBQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAobWFwRm9yRWFjaCkge1xuICAgICAgICAgICAgbWFwRm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBtYXBQYXJ0cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmosIHRydWUpICsgJyA9PiAnICsgaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdNYXAnLCBtYXBTaXplLmNhbGwob2JqKSwgbWFwUGFydHMsIGluZGVudCk7XG4gICAgfVxuICAgIGlmIChpc1NldChvYmopKSB7XG4gICAgICAgIHZhciBzZXRQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAoc2V0Rm9yRWFjaCkge1xuICAgICAgICAgICAgc2V0Rm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2V0UGFydHMucHVzaChpbnNwZWN0KHZhbHVlLCBvYmopKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uT2YoJ1NldCcsIHNldFNpemUuY2FsbChvYmopLCBzZXRQYXJ0cywgaW5kZW50KTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha01hcChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrTWFwJyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1NldCcpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrUmVmKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtSZWYnKTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KE51bWJlcihvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0JpZ0ludChvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChiaWdJbnRWYWx1ZU9mLmNhbGwob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoaXNCb29sZWFuKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChib29sZWFuVmFsdWVPZi5jYWxsKG9iaikpO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoU3RyaW5nKG9iaikpKTtcbiAgICB9XG4gICAgLy8gbm90ZTogaW4gSUUgOCwgc29tZXRpbWVzIGBnbG9iYWwgIT09IHdpbmRvd2AgYnV0IGJvdGggYXJlIHRoZSBwcm90b3R5cGVzIG9mIGVhY2ggb3RoZXJcbiAgICAvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuICd7IFtvYmplY3QgV2luZG93XSB9JztcbiAgICB9XG4gICAgaWYgKFxuICAgICAgICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIG9iaiA9PT0gZ2xvYmFsVGhpcylcbiAgICAgICAgfHwgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIG9iaiA9PT0gZ2xvYmFsKVxuICAgICkge1xuICAgICAgICByZXR1cm4gJ3sgW29iamVjdCBnbG9iYWxUaGlzXSB9JztcbiAgICB9XG4gICAgaWYgKCFpc0RhdGUob2JqKSAmJiAhaXNSZWdFeHAob2JqKSkge1xuICAgICAgICB2YXIgeXMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIHZhciBpc1BsYWluT2JqZWN0ID0gZ1BPID8gZ1BPKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGUgOiBvYmogaW5zdGFuY2VvZiBPYmplY3QgfHwgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gICAgICAgIHZhciBwcm90b1RhZyA9IG9iaiBpbnN0YW5jZW9mIE9iamVjdCA/ICcnIDogJ251bGwgcHJvdG90eXBlJztcbiAgICAgICAgdmFyIHN0cmluZ1RhZyA9ICFpc1BsYWluT2JqZWN0ICYmIHRvU3RyaW5nVGFnICYmIE9iamVjdChvYmopID09PSBvYmogJiYgdG9TdHJpbmdUYWcgaW4gb2JqID8gJHNsaWNlLmNhbGwodG9TdHIob2JqKSwgOCwgLTEpIDogcHJvdG9UYWcgPyAnT2JqZWN0JyA6ICcnO1xuICAgICAgICB2YXIgY29uc3RydWN0b3JUYWcgPSBpc1BsYWluT2JqZWN0IHx8IHR5cGVvZiBvYmouY29uc3RydWN0b3IgIT09ICdmdW5jdGlvbicgPyAnJyA6IG9iai5jb25zdHJ1Y3Rvci5uYW1lID8gb2JqLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgOiAnJztcbiAgICAgICAgdmFyIHRhZyA9IGNvbnN0cnVjdG9yVGFnICsgKHN0cmluZ1RhZyB8fCBwcm90b1RhZyA/ICdbJyArICRqb2luLmNhbGwoJGNvbmNhdC5jYWxsKFtdLCBzdHJpbmdUYWcgfHwgW10sIHByb3RvVGFnIHx8IFtdKSwgJzogJykgKyAnXSAnIDogJycpO1xuICAgICAgICBpZiAoeXMubGVuZ3RoID09PSAwKSB7IHJldHVybiB0YWcgKyAne30nOyB9XG4gICAgICAgIGlmIChpbmRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWcgKyAneycgKyBpbmRlbnRlZEpvaW4oeXMsIGluZGVudCkgKyAnfSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhZyArICd7ICcgKyAkam9pbi5jYWxsKHlzLCAnLCAnKSArICcgfSc7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcob2JqKTtcbn07XG5cbmZ1bmN0aW9uIHdyYXBRdW90ZXMocywgZGVmYXVsdFN0eWxlLCBvcHRzKSB7XG4gICAgdmFyIHN0eWxlID0gb3B0cy5xdW90ZVN0eWxlIHx8IGRlZmF1bHRTdHlsZTtcbiAgICB2YXIgcXVvdGVDaGFyID0gcXVvdGVzW3N0eWxlXTtcbiAgICByZXR1cm4gcXVvdGVDaGFyICsgcyArIHF1b3RlQ2hhcjtcbn1cblxuZnVuY3Rpb24gcXVvdGUocykge1xuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKFN0cmluZyhzKSwgL1wiL2csICcmcXVvdDsnKTtcbn1cblxuZnVuY3Rpb24gY2FuVHJ1c3RUb1N0cmluZyhvYmopIHtcbiAgICByZXR1cm4gIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgKHRvU3RyaW5nVGFnIGluIG9iaiB8fCB0eXBlb2Ygb2JqW3RvU3RyaW5nVGFnXSAhPT0gJ3VuZGVmaW5lZCcpKTtcbn1cbmZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nICYmIGNhblRydXN0VG9TdHJpbmcob2JqKTsgfVxuZnVuY3Rpb24gaXNEYXRlKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgRGF0ZV0nICYmIGNhblRydXN0VG9TdHJpbmcob2JqKTsgfVxuZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBSZWdFeHBdJyAmJiBjYW5UcnVzdFRvU3RyaW5nKG9iaik7IH1cbmZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBFcnJvcl0nICYmIGNhblRydXN0VG9TdHJpbmcob2JqKTsgfVxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBTdHJpbmddJyAmJiBjYW5UcnVzdFRvU3RyaW5nKG9iaik7IH1cbmZ1bmN0aW9uIGlzTnVtYmVyKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiYgY2FuVHJ1c3RUb1N0cmluZyhvYmopOyB9XG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBCb29sZWFuXScgJiYgY2FuVHJ1c3RUb1N0cmluZyhvYmopOyB9XG5cbi8vIFN5bWJvbCBhbmQgQmlnSW50IGRvIGhhdmUgU3ltYm9sLnRvU3RyaW5nVGFnIGJ5IHNwZWMsIHNvIHRoYXQgY2FuJ3QgYmUgdXNlZCB0byBlbGltaW5hdGUgZmFsc2UgcG9zaXRpdmVzXG5mdW5jdGlvbiBpc1N5bWJvbChvYmopIHtcbiAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMpIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogaW5zdGFuY2VvZiBTeW1ib2w7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3ltYm9sJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgIXN5bVRvU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc3ltVG9TdHJpbmcuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNCaWdJbnQob2JqKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgIWJpZ0ludFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBiaWdJbnRWYWx1ZU9mLmNhbGwob2JqKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5IHx8IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSBpbiB0aGlzOyB9O1xuZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn1cblxuZnVuY3Rpb24gdG9TdHIob2JqKSB7XG4gICAgcmV0dXJuIG9iamVjdFRvU3RyaW5nLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gbmFtZU9mKGYpIHtcbiAgICBpZiAoZi5uYW1lKSB7IHJldHVybiBmLm5hbWU7IH1cbiAgICB2YXIgbSA9ICRtYXRjaC5jYWxsKGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChmKSwgL15mdW5jdGlvblxccyooW1xcdyRdKykvKTtcbiAgICBpZiAobSkgeyByZXR1cm4gbVsxXTsgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gICAgaWYgKHhzLmluZGV4T2YpIHsgcmV0dXJuIHhzLmluZGV4T2YoeCk7IH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoeHNbaV0gPT09IHgpIHsgcmV0dXJuIGk7IH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBpc01hcCh4KSB7XG4gICAgaWYgKCFtYXBTaXplIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIG1hcFNpemUuY2FsbCh4KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNldFNpemUuY2FsbCh4KTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBNYXA7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dlYWtNYXAoeCkge1xuICAgIGlmICghd2Vha01hcEhhcyB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrTWFwSGFzLmNhbGwoeCwgd2Vha01hcEhhcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3ZWFrU2V0SGFzLmNhbGwoeCwgd2Vha1NldEhhcyk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgV2Vha01hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha1JlZih4KSB7XG4gICAgaWYgKCF3ZWFrUmVmRGVyZWYgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha1JlZkRlcmVmLmNhbGwoeCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1NldCh4KSB7XG4gICAgaWYgKCFzZXRTaXplIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHNldFNpemUuY2FsbCh4KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1hcFNpemUuY2FsbCh4KTtcbiAgICAgICAgfSBjYXRjaCAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dlYWtTZXQoeCkge1xuICAgIGlmICghd2Vha1NldEhhcyB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrU2V0SGFzLmNhbGwoeCwgd2Vha1NldEhhcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3ZWFrTWFwSGFzLmNhbGwoeCwgd2Vha01hcEhhcyk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgV2Vha1NldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudCh4KSB7XG4gICAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB4IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgeC5ub2RlTmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHguZ2V0QXR0cmlidXRlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0U3RyaW5nKHN0ciwgb3B0cykge1xuICAgIGlmIChzdHIubGVuZ3RoID4gb3B0cy5tYXhTdHJpbmdMZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHN0ci5sZW5ndGggLSBvcHRzLm1heFN0cmluZ0xlbmd0aDtcbiAgICAgICAgdmFyIHRyYWlsZXIgPSAnLi4uICcgKyByZW1haW5pbmcgKyAnIG1vcmUgY2hhcmFjdGVyJyArIChyZW1haW5pbmcgPiAxID8gJ3MnIDogJycpO1xuICAgICAgICByZXR1cm4gaW5zcGVjdFN0cmluZygkc2xpY2UuY2FsbChzdHIsIDAsIG9wdHMubWF4U3RyaW5nTGVuZ3RoKSwgb3B0cykgKyB0cmFpbGVyO1xuICAgIH1cbiAgICB2YXIgcXVvdGVSRSA9IHF1b3RlUkVzW29wdHMucXVvdGVTdHlsZSB8fCAnc2luZ2xlJ107XG4gICAgcXVvdGVSRS5sYXN0SW5kZXggPSAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgdmFyIHMgPSAkcmVwbGFjZS5jYWxsKCRyZXBsYWNlLmNhbGwoc3RyLCBxdW90ZVJFLCAnXFxcXCQxJyksIC9bXFx4MDAtXFx4MWZdL2csIGxvd2J5dGUpO1xuICAgIHJldHVybiB3cmFwUXVvdGVzKHMsICdzaW5nbGUnLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gbG93Ynl0ZShjKSB7XG4gICAgdmFyIG4gPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHggPSB7XG4gICAgICAgIDg6ICdiJyxcbiAgICAgICAgOTogJ3QnLFxuICAgICAgICAxMDogJ24nLFxuICAgICAgICAxMjogJ2YnLFxuICAgICAgICAxMzogJ3InXG4gICAgfVtuXTtcbiAgICBpZiAoeCkgeyByZXR1cm4gJ1xcXFwnICsgeDsgfVxuICAgIHJldHVybiAnXFxcXHgnICsgKG4gPCAweDEwID8gJzAnIDogJycpICsgJHRvVXBwZXJDYXNlLmNhbGwobi50b1N0cmluZygxNikpO1xufVxuXG5mdW5jdGlvbiBtYXJrQm94ZWQoc3RyKSB7XG4gICAgcmV0dXJuICdPYmplY3QoJyArIHN0ciArICcpJztcbn1cblxuZnVuY3Rpb24gd2Vha0NvbGxlY3Rpb25PZih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgKyAnIHsgPyB9Jztcbn1cblxuZnVuY3Rpb24gY29sbGVjdGlvbk9mKHR5cGUsIHNpemUsIGVudHJpZXMsIGluZGVudCkge1xuICAgIHZhciBqb2luZWRFbnRyaWVzID0gaW5kZW50ID8gaW5kZW50ZWRKb2luKGVudHJpZXMsIGluZGVudCkgOiAkam9pbi5jYWxsKGVudHJpZXMsICcsICcpO1xuICAgIHJldHVybiB0eXBlICsgJyAoJyArIHNpemUgKyAnKSB7JyArIGpvaW5lZEVudHJpZXMgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIHNpbmdsZUxpbmVWYWx1ZXMoeHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpbmRleE9mKHhzW2ldLCAnXFxuJykgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRlbnQob3B0cywgZGVwdGgpIHtcbiAgICB2YXIgYmFzZUluZGVudDtcbiAgICBpZiAob3B0cy5pbmRlbnQgPT09ICdcXHQnKSB7XG4gICAgICAgIGJhc2VJbmRlbnQgPSAnXFx0JztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRzLmluZGVudCA9PT0gJ251bWJlcicgJiYgb3B0cy5pbmRlbnQgPiAwKSB7XG4gICAgICAgIGJhc2VJbmRlbnQgPSAkam9pbi5jYWxsKEFycmF5KG9wdHMuaW5kZW50ICsgMSksICcgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2U6IGJhc2VJbmRlbnQsXG4gICAgICAgIHByZXY6ICRqb2luLmNhbGwoQXJyYXkoZGVwdGggKyAxKSwgYmFzZUluZGVudClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBpbmRlbnRlZEpvaW4oeHMsIGluZGVudCkge1xuICAgIGlmICh4cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICcnOyB9XG4gICAgdmFyIGxpbmVKb2luZXIgPSAnXFxuJyArIGluZGVudC5wcmV2ICsgaW5kZW50LmJhc2U7XG4gICAgcmV0dXJuIGxpbmVKb2luZXIgKyAkam9pbi5jYWxsKHhzLCAnLCcgKyBsaW5lSm9pbmVyKSArICdcXG4nICsgaW5kZW50LnByZXY7XG59XG5cbmZ1bmN0aW9uIGFyck9iaktleXMob2JqLCBpbnNwZWN0KSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmopO1xuICAgIHZhciB4cyA9IFtdO1xuICAgIGlmIChpc0Fycikge1xuICAgICAgICB4cy5sZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgeHNbaV0gPSBoYXMob2JqLCBpKSA/IGluc3BlY3Qob2JqW2ldLCBvYmopIDogJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHN5bXMgPSB0eXBlb2YgZ09QUyA9PT0gJ2Z1bmN0aW9uJyA/IGdPUFMob2JqKSA6IFtdO1xuICAgIHZhciBzeW1NYXA7XG4gICAgaWYgKGhhc1NoYW1tZWRTeW1ib2xzKSB7XG4gICAgICAgIHN5bU1hcCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHN5bXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHN5bU1hcFsnJCcgKyBzeW1zW2tdXSA9IHN5bXNba107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKCFoYXMob2JqLCBrZXkpKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChpc0FyciAmJiBTdHJpbmcoTnVtYmVyKGtleSkpID09PSBrZXkgJiYga2V5IDwgb2JqLmxlbmd0aCkgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMgJiYgc3ltTWFwWyckJyArIGtleV0gaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gcHJldmVudCBzaGFtbWVkIFN5bWJvbHMsIHdoaWNoIGFyZSBzdG9yZWQgYXMgc3RyaW5ncywgZnJvbSBiZWluZyBpbmNsdWRlZCBpbiB0aGUgc3RyaW5nIGtleSBzZWN0aW9uXG4gICAgICAgICAgICBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmICgkdGVzdC5jYWxsKC9bXlxcdyRdLywga2V5KSkge1xuICAgICAgICAgICAgeHMucHVzaChpbnNwZWN0KGtleSwgb2JqKSArICc6ICcgKyBpbnNwZWN0KG9ialtrZXldLCBvYmopKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhzLnB1c2goa2V5ICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ09QUyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN5bXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChpc0VudW1lcmFibGUuY2FsbChvYmosIHN5bXNbal0pKSB7XG4gICAgICAgICAgICAgICAgeHMucHVzaCgnWycgKyBpbnNwZWN0KHN5bXNbal0pICsgJ106ICcgKyBpbnNwZWN0KG9ialtzeW1zW2pdXSwgb2JqKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHhzO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBkZWNpbWFsXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBkZWNpbWFsLlxuZnVuY3Rpb24gZGVjaW1hbChjaGFyYWN0ZXIpIHtcbiAgdmFyIGNvZGUgPSB0eXBlb2YgY2hhcmFjdGVyID09PSAnc3RyaW5nJyA/IGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApIDogY2hhcmFjdGVyXG5cbiAgcmV0dXJuIGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NyAvKiAwLTkgKi9cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZpc2l0XG5cbnZhciB2aXNpdFBhcmVudHMgPSByZXF1aXJlKCd1bmlzdC11dGlsLXZpc2l0LXBhcmVudHMnKVxuXG52YXIgQ09OVElOVUUgPSB2aXNpdFBhcmVudHMuQ09OVElOVUVcbnZhciBTS0lQID0gdmlzaXRQYXJlbnRzLlNLSVBcbnZhciBFWElUID0gdmlzaXRQYXJlbnRzLkVYSVRcblxudmlzaXQuQ09OVElOVUUgPSBDT05USU5VRVxudmlzaXQuU0tJUCA9IFNLSVBcbnZpc2l0LkVYSVQgPSBFWElUXG5cbmZ1bmN0aW9uIHZpc2l0KHRyZWUsIHRlc3QsIHZpc2l0b3IsIHJldmVyc2UpIHtcbiAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2aXNpdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV2ZXJzZSA9IHZpc2l0b3JcbiAgICB2aXNpdG9yID0gdGVzdFxuICAgIHRlc3QgPSBudWxsXG4gIH1cblxuICB2aXNpdFBhcmVudHModHJlZSwgdGVzdCwgb3ZlcmxvYWQsIHJldmVyc2UpXG5cbiAgZnVuY3Rpb24gb3ZlcmxvYWQobm9kZSwgcGFyZW50cykge1xuICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV1cbiAgICB2YXIgaW5kZXggPSBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKSA6IG51bGxcbiAgICByZXR1cm4gdmlzaXRvcihub2RlLCBpbmRleCwgcGFyZW50KVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBhcnJheVdpdGhIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aEhvbGVzLmpzXCIpO1xudmFyIGl0ZXJhYmxlVG9BcnJheUxpbWl0ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5TGltaXQuanNcIik7XG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKTtcbnZhciBub25JdGVyYWJsZVJlc3QgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIik7XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShyLCBlKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBlKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3NsaWNlZFRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnZXMtb2JqZWN0LWF0b21zJyk7XG5cbnZhciAkRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMnKTtcbnZhciAkRXZhbEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL2V2YWwnKTtcbnZhciAkUmFuZ2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yYW5nZScpO1xudmFyICRSZWZlcmVuY2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yZWYnKTtcbnZhciAkU3ludGF4RXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvc3ludGF4Jyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJFVSSUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3VyaScpO1xuXG52YXIgYWJzID0gcmVxdWlyZSgnbWF0aC1pbnRyaW5zaWNzL2FicycpO1xudmFyIGZsb29yID0gcmVxdWlyZSgnbWF0aC1pbnRyaW5zaWNzL2Zsb29yJyk7XG52YXIgbWF4ID0gcmVxdWlyZSgnbWF0aC1pbnRyaW5zaWNzL21heCcpO1xudmFyIG1pbiA9IHJlcXVpcmUoJ21hdGgtaW50cmluc2ljcy9taW4nKTtcbnZhciBwb3cgPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3MvcG93Jyk7XG52YXIgcm91bmQgPSByZXF1aXJlKCdtYXRoLWludHJpbnNpY3Mvcm91bmQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnbWF0aC1pbnRyaW5zaWNzL3NpZ24nKTtcblxudmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgJykuY29uc3RydWN0b3I7JykoKTtcblx0fSBjYXRjaCAoZSkge31cbn07XG5cbnZhciAkZ09QRCA9IHJlcXVpcmUoJ2dvcGQnKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCdlcy1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xufTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCdnZXQtcHJvdG8nKTtcbnZhciAkT2JqZWN0R1BPID0gcmVxdWlyZSgnZ2V0LXByb3RvL09iamVjdC5nZXRQcm90b3R5cGVPZicpO1xudmFyICRSZWZsZWN0R1BPID0gcmVxdWlyZSgnZ2V0LXByb3RvL1JlZmxlY3QuZ2V0UHJvdG90eXBlT2YnKTtcblxudmFyICRhcHBseSA9IHJlcXVpcmUoJ2NhbGwtYmluZC1hcHBseS1oZWxwZXJzL2Z1bmN0aW9uQXBwbHknKTtcbnZhciAkY2FsbCA9IHJlcXVpcmUoJ2NhbGwtYmluZC1hcHBseS1oZWxwZXJzL2Z1bmN0aW9uQ2FsbCcpO1xuXG52YXIgbmVlZHNFdmFsID0ge307XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHQnJUFnZ3JlZ2F0ZUVycm9yJSc6IHR5cGVvZiBBZ2dyZWdhdGVFcnJvciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBZ2dyZWdhdGVFcnJvcixcblx0JyVBcnJheSUnOiBBcnJheSxcblx0JyVBcnJheUJ1ZmZlciUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzICYmIGdldFByb3RvID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IG5lZWRzRXZhbCxcblx0JyVBdG9taWNzJSc6IHR5cGVvZiBBdG9taWNzID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEF0b21pY3MsXG5cdCclQmlnSW50JSc6IHR5cGVvZiBCaWdJbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50LFxuXHQnJUJpZ0ludDY0QXJyYXklJzogdHlwZW9mIEJpZ0ludDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50NjRBcnJheSxcblx0JyVCaWdVaW50NjRBcnJheSUnOiB0eXBlb2YgQmlnVWludDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnVWludDY0QXJyYXksXG5cdCclQm9vbGVhbiUnOiBCb29sZWFuLFxuXHQnJURhdGFWaWV3JSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldyxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclZGVjb2RlVVJJJSc6IGRlY29kZVVSSSxcblx0JyVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCclZW5jb2RlVVJJQ29tcG9uZW50JSc6IGVuY29kZVVSSUNvbXBvbmVudCxcblx0JyVFcnJvciUnOiAkRXJyb3IsXG5cdCclZXZhbCUnOiBldmFsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0JyVFdmFsRXJyb3IlJzogJEV2YWxFcnJvcixcblx0JyVGbG9hdDE2QXJyYXklJzogdHlwZW9mIEZsb2F0MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDE2QXJyYXksXG5cdCclRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJUZsb2F0NjRBcnJheSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheSxcblx0JyVGaW5hbGl6YXRpb25SZWdpc3RyeSUnOiB0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmluYWxpemF0aW9uUmVnaXN0cnksXG5cdCclRnVuY3Rpb24lJzogJEZ1bmN0aW9uLFxuXHQnJUdlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVJbnQ4QXJyYXklJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXksXG5cdCclSW50MTZBcnJheSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQxNkFycmF5LFxuXHQnJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyVpc05hTiUnOiBpc05hTixcblx0JyVJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzICYmIGdldFByb3RvID8gZ2V0UHJvdG8oZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkgOiB1bmRlZmluZWQsXG5cdCclSlNPTiUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OIDogdW5kZWZpbmVkLFxuXHQnJU1hcCUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcCxcblx0JyVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyB8fCAhZ2V0UHJvdG8gPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgTWFwKClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVNYXRoJSc6IE1hdGgsXG5cdCclTnVtYmVyJSc6IE51bWJlcixcblx0JyVPYmplY3QlJzogJE9iamVjdCxcblx0JyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJSc6ICRnT1BELFxuXHQnJXBhcnNlRmxvYXQlJzogcGFyc2VGbG9hdCxcblx0JyVwYXJzZUludCUnOiBwYXJzZUludCxcblx0JyVQcm9taXNlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UsXG5cdCclUHJveHklJzogdHlwZW9mIFByb3h5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb3h5LFxuXHQnJVJhbmdlRXJyb3IlJzogJFJhbmdlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogJFJlZmVyZW5jZUVycm9yLFxuXHQnJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyB8fCAhZ2V0UHJvdG8gPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgU2V0KClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlciUnOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2hhcmVkQXJyYXlCdWZmZXIsXG5cdCclU3RyaW5nJSc6IFN0cmluZyxcblx0JyVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzICYmIGdldFByb3RvID8gZ2V0UHJvdG8oJydbU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVTeW1ib2wlJzogaGFzU3ltYm9scyA/IFN5bWJvbCA6IHVuZGVmaW5lZCxcblx0JyVTeW50YXhFcnJvciUnOiAkU3ludGF4RXJyb3IsXG5cdCclVGhyb3dUeXBlRXJyb3IlJzogVGhyb3dUeXBlRXJyb3IsXG5cdCclVHlwZWRBcnJheSUnOiBUeXBlZEFycmF5LFxuXHQnJVR5cGVFcnJvciUnOiAkVHlwZUVycm9yLFxuXHQnJVVpbnQ4QXJyYXklJzogdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhBcnJheSxcblx0JyVVaW50OENsYW1wZWRBcnJheSUnOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhDbGFtcGVkQXJyYXksXG5cdCclVWludDE2QXJyYXklJzogdHlwZW9mIFVpbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQxNkFycmF5LFxuXHQnJVVpbnQzMkFycmF5JSc6IHR5cGVvZiBVaW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MzJBcnJheSxcblx0JyVVUklFcnJvciUnOiAkVVJJRXJyb3IsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtSZWYlJzogdHlwZW9mIFdlYWtSZWYgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1JlZixcblx0JyVXZWFrU2V0JSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXQsXG5cblx0JyVGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCUnOiAkY2FsbCxcblx0JyVGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHklJzogJGFwcGx5LFxuXHQnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnOiAkZGVmaW5lUHJvcGVydHksXG5cdCclT2JqZWN0LmdldFByb3RvdHlwZU9mJSc6ICRPYmplY3RHUE8sXG5cdCclTWF0aC5hYnMlJzogYWJzLFxuXHQnJU1hdGguZmxvb3IlJzogZmxvb3IsXG5cdCclTWF0aC5tYXglJzogbWF4LFxuXHQnJU1hdGgubWluJSc6IG1pbixcblx0JyVNYXRoLnBvdyUnOiBwb3csXG5cdCclTWF0aC5yb3VuZCUnOiByb3VuZCxcblx0JyVNYXRoLnNpZ24lJzogc2lnbixcblx0JyVSZWZsZWN0LmdldFByb3RvdHlwZU9mJSc6ICRSZWZsZWN0R1BPXG59O1xuXG5pZiAoZ2V0UHJvdG8pIHtcblx0dHJ5IHtcblx0XHRudWxsLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2hhZG93cmVhbG0vcHVsbC8zODQjaXNzdWVjb21tZW50LTEzNjQyNjQyMjlcblx0XHR2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcblx0XHRJTlRSSU5TSUNTWyclRXJyb3IucHJvdG90eXBlJSddID0gZXJyb3JQcm90bztcblx0fVxufVxuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuICYmIGdldFByb3RvKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXNvd24nKTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKCRjYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbnZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoJGFwcGx5LCBBcnJheS5wcm90b3R5cGUuc3BsaWNlKTtcbnZhciAkcmVwbGFjZSA9IGJpbmQuY2FsbCgkY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoJGNhbGwsIFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xudmFyICRleGVjID0gYmluZC5jYWxsKCRjYWxsLCBSZWdFeHAucHJvdG90eXBlLmV4ZWMpO1xuXG4vKiBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi80LjE3LjE1L2Rpc3QvbG9kYXNoLmpzI0w2NzM1LUw2NzQ0ICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXiUuW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JSQpKS9nO1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nOyAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBmdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKSB7XG5cdHZhciBmaXJzdCA9ICRzdHJTbGljZShzdHJpbmcsIDAsIDEpO1xuXHR2YXIgbGFzdCA9ICRzdHJTbGljZShzdHJpbmcsIC0xKTtcblx0aWYgKGZpcnN0ID09PSAnJScgJiYgbGFzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBjbG9zaW5nIGAlYCcpO1xuXHR9IGVsc2UgaWYgKGxhc3QgPT09ICclJyAmJiBmaXJzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBvcGVuaW5nIGAlYCcpO1xuXHR9XG5cdHZhciByZXN1bHQgPSBbXTtcblx0JHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuXHRcdHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHF1b3RlID8gJHJlcGxhY2Uoc3ViU3RyaW5nLCByZUVzY2FwZUNoYXIsICckMScpIDogbnVtYmVyIHx8IG1hdGNoO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG4vKiBlbmQgYWRhcHRhdGlvbiAqL1xuXG52YXIgZ2V0QmFzZUludHJpbnNpYyA9IGZ1bmN0aW9uIGdldEJhc2VJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWNOYW1lID0gbmFtZTtcblx0dmFyIGFsaWFzO1xuXHRpZiAoaGFzT3duKExFR0FDWV9BTElBU0VTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdGFsaWFzID0gTEVHQUNZX0FMSUFTRVNbaW50cmluc2ljTmFtZV07XG5cdFx0aW50cmluc2ljTmFtZSA9ICclJyArIGFsaWFzWzBdICsgJyUnO1xuXHR9XG5cblx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdHZhciB2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljTmFtZV07XG5cdFx0aWYgKHZhbHVlID09PSBuZWVkc0V2YWwpIHtcblx0XHRcdHZhbHVlID0gZG9FdmFsKGludHJpbnNpY05hbWUpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YWxpYXM6IGFsaWFzLFxuXHRcdFx0bmFtZTogaW50cmluc2ljTmFtZSxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH07XG5cdH1cblxuXHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1wiYWxsb3dNaXNzaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdGlmICgkZXhlYygvXiU/W14lXSolPyQvLCBuYW1lKSA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2AlYCBtYXkgbm90IGJlIHByZXNlbnQgYW55d2hlcmUgYnV0IGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgaW50cmluc2ljIG5hbWUnKTtcblx0fVxuXHR2YXIgcGFydHMgPSBzdHJpbmdUb1BhdGgobmFtZSk7XG5cdHZhciBpbnRyaW5zaWNCYXNlTmFtZSA9IHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0c1swXSA6ICcnO1xuXG5cdHZhciBpbnRyaW5zaWMgPSBnZXRCYXNlSW50cmluc2ljKCclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnLCBhbGxvd01pc3NpbmcpO1xuXHR2YXIgaW50cmluc2ljUmVhbE5hbWUgPSBpbnRyaW5zaWMubmFtZTtcblx0dmFyIHZhbHVlID0gaW50cmluc2ljLnZhbHVlO1xuXHR2YXIgc2tpcEZ1cnRoZXJDYWNoaW5nID0gZmFsc2U7XG5cblx0dmFyIGFsaWFzID0gaW50cmluc2ljLmFsaWFzO1xuXHRpZiAoYWxpYXMpIHtcblx0XHRpbnRyaW5zaWNCYXNlTmFtZSA9IGFsaWFzWzBdO1xuXHRcdCRzcGxpY2VBcHBseShwYXJ0cywgJGNvbmNhdChbMCwgMV0sIGFsaWFzKSk7XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMSwgaXNPd24gPSB0cnVlOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHR2YXIgcGFydCA9IHBhcnRzW2ldO1xuXHRcdHZhciBmaXJzdCA9ICRzdHJTbGljZShwYXJ0LCAwLCAxKTtcblx0XHR2YXIgbGFzdCA9ICRzdHJTbGljZShwYXJ0LCAtMSk7XG5cdFx0aWYgKFxuXHRcdFx0KFxuXHRcdFx0XHQoZmlyc3QgPT09ICdcIicgfHwgZmlyc3QgPT09IFwiJ1wiIHx8IGZpcnN0ID09PSAnYCcpXG5cdFx0XHRcdHx8IChsYXN0ID09PSAnXCInIHx8IGxhc3QgPT09IFwiJ1wiIHx8IGxhc3QgPT09ICdgJylcblx0XHRcdClcblx0XHRcdCYmIGZpcnN0ICE9PSBsYXN0XG5cdFx0KSB7XG5cdFx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdwcm9wZXJ0eSBuYW1lcyB3aXRoIHF1b3RlcyBtdXN0IGhhdmUgbWF0Y2hpbmcgcXVvdGVzJyk7XG5cdFx0fVxuXHRcdGlmIChwYXJ0ID09PSAnY29uc3RydWN0b3InIHx8ICFpc093bikge1xuXHRcdFx0c2tpcEZ1cnRoZXJDYWNoaW5nID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpbnRyaW5zaWNCYXNlTmFtZSArPSAnLicgKyBwYXJ0O1xuXHRcdGludHJpbnNpY1JlYWxOYW1lID0gJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJSc7XG5cblx0XHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY1JlYWxOYW1lKSkge1xuXHRcdFx0dmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXTtcblx0XHR9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdGlmICghKHBhcnQgaW4gdmFsdWUpKSB7XG5cdFx0XHRcdGlmICghYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Jhc2UgaW50cmluc2ljIGZvciAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZvaWQgdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCRnT1BEICYmIChpICsgMSkgPj0gcGFydHMubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBkZXNjID0gJGdPUEQodmFsdWUsIHBhcnQpO1xuXHRcdFx0XHRpc093biA9ICEhZGVzYztcblxuXHRcdFx0XHQvLyBCeSBjb252ZW50aW9uLCB3aGVuIGEgZGF0YSBwcm9wZXJ0eSBpcyBjb252ZXJ0ZWQgdG8gYW4gYWNjZXNzb3Jcblx0XHRcdFx0Ly8gcHJvcGVydHkgdG8gZW11bGF0ZSBhIGRhdGEgcHJvcGVydHkgdGhhdCBkb2VzIG5vdCBzdWZmZXIgZnJvbVxuXHRcdFx0XHQvLyB0aGUgb3ZlcnJpZGUgbWlzdGFrZSwgdGhhdCBhY2Nlc3NvcidzIGdldHRlciBpcyBtYXJrZWQgd2l0aFxuXHRcdFx0XHQvLyBhbiBgb3JpZ2luYWxWYWx1ZWAgcHJvcGVydHkuIEhlcmUsIHdoZW4gd2UgZGV0ZWN0IHRoaXMsIHdlXG5cdFx0XHRcdC8vIHVwaG9sZCB0aGUgaWxsdXNpb24gYnkgcHJldGVuZGluZyB0byBzZWUgdGhhdCBvcmlnaW5hbCBkYXRhXG5cdFx0XHRcdC8vIHByb3BlcnR5LCBpLmUuLCByZXR1cm5pbmcgdGhlIHZhbHVlIHJhdGhlciB0aGFuIHRoZSBnZXR0ZXJcblx0XHRcdFx0Ly8gaXRzZWxmLlxuXHRcdFx0XHRpZiAoaXNPd24gJiYgJ2dldCcgaW4gZGVzYyAmJiAhKCdvcmlnaW5hbFZhbHVlJyBpbiBkZXNjLmdldCkpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGRlc2MuZ2V0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlzT3duID0gaGFzT3duKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzT3duICYmICFza2lwRnVydGhlckNhY2hpbmcpIHtcblx0XHRcdFx0SU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZnVuY3Rpb25DYWxsJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciBwZXJjZW50VHdlbnRpZXMgPSAvJTIwL2c7XG5cbnZhciBGb3JtYXQgPSB7XG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICB9LFxuICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBSRkMxNzM4OiBGb3JtYXQuUkZDMTczOCxcbiAgICBSRkMzOTg2OiBGb3JtYXQuUkZDMzk4NlxufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgbGVnYWN5ID0gcmVxdWlyZSgnY2hhcmFjdGVyLWVudGl0aWVzLWxlZ2FjeScpXG52YXIgaW52YWxpZCA9IHJlcXVpcmUoJ2NoYXJhY3Rlci1yZWZlcmVuY2UtaW52YWxpZCcpXG52YXIgZGVjaW1hbCA9IHJlcXVpcmUoJ2lzLWRlY2ltYWwnKVxudmFyIGhleGFkZWNpbWFsID0gcmVxdWlyZSgnaXMtaGV4YWRlY2ltYWwnKVxudmFyIGFscGhhbnVtZXJpY2FsID0gcmVxdWlyZSgnaXMtYWxwaGFudW1lcmljYWwnKVxudmFyIGRlY29kZUVudGl0eSA9IHJlcXVpcmUoJy4vZGVjb2RlLWVudGl0eScpXG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VFbnRpdGllc1xuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG52YXIgbm9vcCA9IEZ1bmN0aW9uLnByb3RvdHlwZVxuXG4vLyBEZWZhdWx0IHNldHRpbmdzLlxudmFyIGRlZmF1bHRzID0ge1xuICB3YXJuaW5nOiBudWxsLFxuICByZWZlcmVuY2U6IG51bGwsXG4gIHRleHQ6IG51bGwsXG4gIHdhcm5pbmdDb250ZXh0OiBudWxsLFxuICByZWZlcmVuY2VDb250ZXh0OiBudWxsLFxuICB0ZXh0Q29udGV4dDogbnVsbCxcbiAgcG9zaXRpb246IHt9LFxuICBhZGRpdGlvbmFsOiBudWxsLFxuICBhdHRyaWJ1dGU6IGZhbHNlLFxuICBub25UZXJtaW5hdGVkOiB0cnVlXG59XG5cbi8vIENoYXJhY3RlcnMuXG52YXIgdGFiID0gOSAvLyAnXFx0J1xudmFyIGxpbmVGZWVkID0gMTAgLy8gJ1xcbidcbnZhciBmb3JtRmVlZCA9IDEyIC8vICAnXFxmJ1xudmFyIHNwYWNlID0gMzIgLy8gJyAnXG52YXIgYW1wZXJzYW5kID0gMzggLy8gICcmJ1xudmFyIHNlbWljb2xvbiA9IDU5IC8vICAnOydcbnZhciBsZXNzVGhhbiA9IDYwIC8vICAnPCdcbnZhciBlcXVhbHNUbyA9IDYxIC8vICAnPSdcbnZhciBudW1iZXJTaWduID0gMzUgLy8gICcjJ1xudmFyIHVwcGVyY2FzZVggPSA4OCAvLyAgJ1gnXG52YXIgbG93ZXJjYXNlWCA9IDEyMCAvLyAgJ3gnXG52YXIgcmVwbGFjZW1lbnRDaGFyYWN0ZXIgPSA2NTUzMyAvLyAn77+9J1xuXG4vLyBSZWZlcmVuY2UgdHlwZXMuXG52YXIgbmFtZSA9ICduYW1lZCdcbnZhciBoZXhhID0gJ2hleGFkZWNpbWFsJ1xudmFyIGRlY2kgPSAnZGVjaW1hbCdcblxuLy8gTWFwIG9mIGJhc2VzLlxudmFyIGJhc2VzID0ge31cblxuYmFzZXNbaGV4YV0gPSAxNlxuYmFzZXNbZGVjaV0gPSAxMFxuXG4vLyBNYXAgb2YgdHlwZXMgdG8gdGVzdHMuXG4vLyBFYWNoIHR5cGUgb2YgY2hhcmFjdGVyIHJlZmVyZW5jZSBhY2NlcHRzIGRpZmZlcmVudCBjaGFyYWN0ZXJzLlxuLy8gVGhpcyB0ZXN0IGlzIHVzZWQgdG8gZGV0ZWN0IHdoZXRoZXIgYSByZWZlcmVuY2UgaGFzIGVuZGVkIChhcyB0aGUgc2VtaWNvbG9uXG4vLyBpcyBub3Qgc3RyaWN0bHkgbmVlZGVkKS5cbnZhciB0ZXN0cyA9IHt9XG5cbnRlc3RzW25hbWVdID0gYWxwaGFudW1lcmljYWxcbnRlc3RzW2RlY2ldID0gZGVjaW1hbFxudGVzdHNbaGV4YV0gPSBoZXhhZGVjaW1hbFxuXG4vLyBXYXJuaW5nIHR5cGVzLlxudmFyIG5hbWVkTm90VGVybWluYXRlZCA9IDFcbnZhciBudW1lcmljTm90VGVybWluYXRlZCA9IDJcbnZhciBuYW1lZEVtcHR5ID0gM1xudmFyIG51bWVyaWNFbXB0eSA9IDRcbnZhciBuYW1lZFVua25vd24gPSA1XG52YXIgbnVtZXJpY0Rpc2FsbG93ZWQgPSA2XG52YXIgbnVtZXJpY1Byb2hpYml0ZWQgPSA3XG5cbi8vIFdhcm5pbmcgbWVzc2FnZXMuXG52YXIgbWVzc2FnZXMgPSB7fVxuXG5tZXNzYWdlc1tuYW1lZE5vdFRlcm1pbmF0ZWRdID1cbiAgJ05hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIG11c3QgYmUgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbidcbm1lc3NhZ2VzW251bWVyaWNOb3RUZXJtaW5hdGVkXSA9XG4gICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIG11c3QgYmUgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbidcbm1lc3NhZ2VzW25hbWVkRW1wdHldID0gJ05hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBlbXB0eSdcbm1lc3NhZ2VzW251bWVyaWNFbXB0eV0gPSAnTnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlcyBjYW5ub3QgYmUgZW1wdHknXG5tZXNzYWdlc1tuYW1lZFVua25vd25dID0gJ05hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIG11c3QgYmUga25vd24nXG5tZXNzYWdlc1tudW1lcmljRGlzYWxsb3dlZF0gPVxuICAnTnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlcyBjYW5ub3QgYmUgZGlzYWxsb3dlZCdcbm1lc3NhZ2VzW251bWVyaWNQcm9oaWJpdGVkXSA9XG4gICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBvdXRzaWRlIHRoZSBwZXJtaXNzaWJsZSBVbmljb2RlIHJhbmdlJ1xuXG4vLyBXcmFwIHRvIGVuc3VyZSBjbGVhbiBwYXJhbWV0ZXJzIGFyZSBnaXZlbiB0byBgcGFyc2VgLlxuZnVuY3Rpb24gcGFyc2VFbnRpdGllcyh2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSB7fVxuICB2YXIgb3B0aW9uXG4gIHZhciBrZXlcblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIGZvciAoa2V5IGluIGRlZmF1bHRzKSB7XG4gICAgb3B0aW9uID0gb3B0aW9uc1trZXldXG4gICAgc2V0dGluZ3Nba2V5XSA9XG4gICAgICBvcHRpb24gPT09IG51bGwgfHwgb3B0aW9uID09PSB1bmRlZmluZWQgPyBkZWZhdWx0c1trZXldIDogb3B0aW9uXG4gIH1cblxuICBpZiAoc2V0dGluZ3MucG9zaXRpb24uaW5kZW50IHx8IHNldHRpbmdzLnBvc2l0aW9uLnN0YXJ0KSB7XG4gICAgc2V0dGluZ3MuaW5kZW50ID0gc2V0dGluZ3MucG9zaXRpb24uaW5kZW50IHx8IFtdXG4gICAgc2V0dGluZ3MucG9zaXRpb24gPSBzZXR0aW5ncy5wb3NpdGlvbi5zdGFydFxuICB9XG5cbiAgcmV0dXJuIHBhcnNlKHZhbHVlLCBzZXR0aW5ncylcbn1cblxuLy8gUGFyc2UgZW50aXRpZXMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gcGFyc2UodmFsdWUsIHNldHRpbmdzKSB7XG4gIHZhciBhZGRpdGlvbmFsID0gc2V0dGluZ3MuYWRkaXRpb25hbFxuICB2YXIgbm9uVGVybWluYXRlZCA9IHNldHRpbmdzLm5vblRlcm1pbmF0ZWRcbiAgdmFyIGhhbmRsZVRleHQgPSBzZXR0aW5ncy50ZXh0XG4gIHZhciBoYW5kbGVSZWZlcmVuY2UgPSBzZXR0aW5ncy5yZWZlcmVuY2VcbiAgdmFyIGhhbmRsZVdhcm5pbmcgPSBzZXR0aW5ncy53YXJuaW5nXG4gIHZhciB0ZXh0Q29udGV4dCA9IHNldHRpbmdzLnRleHRDb250ZXh0XG4gIHZhciByZWZlcmVuY2VDb250ZXh0ID0gc2V0dGluZ3MucmVmZXJlbmNlQ29udGV4dFxuICB2YXIgd2FybmluZ0NvbnRleHQgPSBzZXR0aW5ncy53YXJuaW5nQ29udGV4dFxuICB2YXIgcG9zID0gc2V0dGluZ3MucG9zaXRpb25cbiAgdmFyIGluZGVudCA9IHNldHRpbmdzLmluZGVudCB8fCBbXVxuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIGxpbmVzID0gLTFcbiAgdmFyIGNvbHVtbiA9IHBvcy5jb2x1bW4gfHwgMVxuICB2YXIgbGluZSA9IHBvcy5saW5lIHx8IDFcbiAgdmFyIHF1ZXVlID0gJydcbiAgdmFyIHJlc3VsdCA9IFtdXG4gIHZhciBlbnRpdHlDaGFyYWN0ZXJzXG4gIHZhciBuYW1lZEVudGl0eVxuICB2YXIgdGVybWluYXRlZFxuICB2YXIgY2hhcmFjdGVyc1xuICB2YXIgY2hhcmFjdGVyXG4gIHZhciByZWZlcmVuY2VcbiAgdmFyIGZvbGxvd2luZ1xuICB2YXIgd2FybmluZ1xuICB2YXIgcmVhc29uXG4gIHZhciBvdXRwdXRcbiAgdmFyIGVudGl0eVxuICB2YXIgYmVnaW5cbiAgdmFyIHN0YXJ0XG4gIHZhciB0eXBlXG4gIHZhciB0ZXN0XG4gIHZhciBwcmV2XG4gIHZhciBuZXh0XG4gIHZhciBkaWZmXG4gIHZhciBlbmRcblxuICBpZiAodHlwZW9mIGFkZGl0aW9uYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgYWRkaXRpb25hbCA9IGFkZGl0aW9uYWwuY2hhckNvZGVBdCgwKVxuICB9XG5cbiAgLy8gQ2FjaGUgdGhlIGN1cnJlbnQgcG9pbnQuXG4gIHByZXYgPSBub3coKVxuXG4gIC8vIFdyYXAgYGhhbmRsZVdhcm5pbmdgLlxuICB3YXJuaW5nID0gaGFuZGxlV2FybmluZyA/IHBhcnNlRXJyb3IgOiBub29wXG5cbiAgLy8gRW5zdXJlIHRoZSBhbGdvcml0aG0gd2Fsa3Mgb3ZlciB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCB0aGUgZW5kIChpbmNsdXNpdmUpLlxuICBpbmRleC0tXG4gIGxlbmd0aCsrXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAvLyBJZiB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIHdhcyBhIG5ld2xpbmUuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gbGluZUZlZWQpIHtcbiAgICAgIGNvbHVtbiA9IGluZGVudFtsaW5lc10gfHwgMVxuICAgIH1cblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpXG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBhbXBlcnNhbmQpIHtcbiAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAxKVxuXG4gICAgICAvLyBUaGUgYmVoYXZpb3VyIGRlcGVuZHMgb24gdGhlIGlkZW50aXR5IG9mIHRoZSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgIGlmIChcbiAgICAgICAgZm9sbG93aW5nID09PSB0YWIgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBsaW5lRmVlZCB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGZvcm1GZWVkIHx8XG4gICAgICAgIGZvbGxvd2luZyA9PT0gc3BhY2UgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBhbXBlcnNhbmQgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBsZXNzVGhhbiB8fFxuICAgICAgICBmb2xsb3dpbmcgIT09IGZvbGxvd2luZyB8fFxuICAgICAgICAoYWRkaXRpb25hbCAmJiBmb2xsb3dpbmcgPT09IGFkZGl0aW9uYWwpXG4gICAgICApIHtcbiAgICAgICAgLy8gTm90IGEgY2hhcmFjdGVyIHJlZmVyZW5jZS5cbiAgICAgICAgLy8gTm8gY2hhcmFjdGVycyBhcmUgY29uc3VtZWQsIGFuZCBub3RoaW5nIGlzIHJldHVybmVkLlxuICAgICAgICAvLyBUaGlzIGlzIG5vdCBhbiBlcnJvciwgZWl0aGVyLlxuICAgICAgICBxdWV1ZSArPSBmcm9tQ2hhckNvZGUoY2hhcmFjdGVyKVxuICAgICAgICBjb2x1bW4rK1xuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgICBiZWdpbiA9IHN0YXJ0XG4gICAgICBlbmQgPSBzdGFydFxuXG4gICAgICBpZiAoZm9sbG93aW5nID09PSBudW1iZXJTaWduKSB7XG4gICAgICAgIC8vIE51bWVyaWNhbCBlbnRpdHkuXG4gICAgICAgIGVuZCA9ICsrYmVnaW5cblxuICAgICAgICAvLyBUaGUgYmVoYXZpb3VyIGZ1cnRoZXIgZGVwZW5kcyBvbiB0aGUgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKVxuXG4gICAgICAgIGlmIChmb2xsb3dpbmcgPT09IHVwcGVyY2FzZVggfHwgZm9sbG93aW5nID09PSBsb3dlcmNhc2VYKSB7XG4gICAgICAgICAgLy8gQVNDSUkgaGV4IGRpZ2l0cy5cbiAgICAgICAgICB0eXBlID0gaGV4YVxuICAgICAgICAgIGVuZCA9ICsrYmVnaW5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBBU0NJSSBkaWdpdHMuXG4gICAgICAgICAgdHlwZSA9IGRlY2lcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTmFtZWQgZW50aXR5LlxuICAgICAgICB0eXBlID0gbmFtZVxuICAgICAgfVxuXG4gICAgICBlbnRpdHlDaGFyYWN0ZXJzID0gJydcbiAgICAgIGVudGl0eSA9ICcnXG4gICAgICBjaGFyYWN0ZXJzID0gJydcbiAgICAgIHRlc3QgPSB0ZXN0c1t0eXBlXVxuICAgICAgZW5kLS1cblxuICAgICAgd2hpbGUgKCsrZW5kIDwgbGVuZ3RoKSB7XG4gICAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKVxuXG4gICAgICAgIGlmICghdGVzdChmb2xsb3dpbmcpKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJhY3RlcnMgKz0gZnJvbUNoYXJDb2RlKGZvbGxvd2luZylcblxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBjYW4gbWF0Y2ggYSBsZWdhY3kgbmFtZWQgcmVmZXJlbmNlLlxuICAgICAgICAvLyBJZiBzbywgd2UgY2FjaGUgdGhhdCBhcyB0aGUgbGFzdCB2aWFibGUgbmFtZWQgcmVmZXJlbmNlLlxuICAgICAgICAvLyBUaGlzIGVuc3VyZXMgd2UgZG8gbm90IG5lZWQgdG8gd2FsayBiYWNrd2FyZHMgbGF0ZXIuXG4gICAgICAgIGlmICh0eXBlID09PSBuYW1lICYmIG93bi5jYWxsKGxlZ2FjeSwgY2hhcmFjdGVycykpIHtcbiAgICAgICAgICBlbnRpdHlDaGFyYWN0ZXJzID0gY2hhcmFjdGVyc1xuICAgICAgICAgIGVudGl0eSA9IGxlZ2FjeVtjaGFyYWN0ZXJzXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRlcm1pbmF0ZWQgPSB2YWx1ZS5jaGFyQ29kZUF0KGVuZCkgPT09IHNlbWljb2xvblxuXG4gICAgICBpZiAodGVybWluYXRlZCkge1xuICAgICAgICBlbmQrK1xuXG4gICAgICAgIG5hbWVkRW50aXR5ID0gdHlwZSA9PT0gbmFtZSA/IGRlY29kZUVudGl0eShjaGFyYWN0ZXJzKSA6IGZhbHNlXG5cbiAgICAgICAgaWYgKG5hbWVkRW50aXR5KSB7XG4gICAgICAgICAgZW50aXR5Q2hhcmFjdGVycyA9IGNoYXJhY3RlcnNcbiAgICAgICAgICBlbnRpdHkgPSBuYW1lZEVudGl0eVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRpZmYgPSAxICsgZW5kIC0gc3RhcnRcblxuICAgICAgaWYgKCF0ZXJtaW5hdGVkICYmICFub25UZXJtaW5hdGVkKSB7XG4gICAgICAgIC8vIEVtcHR5LlxuICAgICAgfSBlbHNlIGlmICghY2hhcmFjdGVycykge1xuICAgICAgICAvLyBBbiBlbXB0eSAocG9zc2libGUpIGVudGl0eSBpcyB2YWxpZCwgdW5sZXNzIGl04oCZcyBudW1lcmljICh0aHVzIGFuXG4gICAgICAgIC8vIGFtcGVyc2FuZCBmb2xsb3dlZCBieSBhbiBvY3RvdGhvcnApLlxuICAgICAgICBpZiAodHlwZSAhPT0gbmFtZSkge1xuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY0VtcHR5LCBkaWZmKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IG5hbWUpIHtcbiAgICAgICAgLy8gQW4gYW1wZXJzYW5kIGZvbGxvd2VkIGJ5IGFueXRoaW5nIHVua25vd24sIGFuZCBub3QgdGVybWluYXRlZCwgaXNcbiAgICAgICAgLy8gaW52YWxpZC5cbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQgJiYgIWVudGl0eSkge1xuICAgICAgICAgIHdhcm5pbmcobmFtZWRVbmtub3duLCAxKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoZXJlcyBzb21ldGhpbmcgYWZ0ZXIgYW4gZW50aXR5IG5hbWUgd2hpY2ggaXMgbm90IGtub3duLCBjYXBcbiAgICAgICAgICAvLyB0aGUgcmVmZXJlbmNlLlxuICAgICAgICAgIGlmIChlbnRpdHlDaGFyYWN0ZXJzICE9PSBjaGFyYWN0ZXJzKSB7XG4gICAgICAgICAgICBlbmQgPSBiZWdpbiArIGVudGl0eUNoYXJhY3RlcnMubGVuZ3RoXG4gICAgICAgICAgICBkaWZmID0gMSArIGVuZCAtIGJlZ2luXG4gICAgICAgICAgICB0ZXJtaW5hdGVkID0gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiB0aGUgcmVmZXJlbmNlIGlzIG5vdCB0ZXJtaW5hdGVkLCB3YXJuLlxuICAgICAgICAgIGlmICghdGVybWluYXRlZCkge1xuICAgICAgICAgICAgcmVhc29uID0gZW50aXR5Q2hhcmFjdGVycyA/IG5hbWVkTm90VGVybWluYXRlZCA6IG5hbWVkRW1wdHlcblxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLmF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICBmb2xsb3dpbmcgPSB2YWx1ZS5jaGFyQ29kZUF0KGVuZClcblxuICAgICAgICAgICAgICBpZiAoZm9sbG93aW5nID09PSBlcXVhbHNUbykge1xuICAgICAgICAgICAgICAgIHdhcm5pbmcocmVhc29uLCBkaWZmKVxuICAgICAgICAgICAgICAgIGVudGl0eSA9IG51bGxcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHBoYW51bWVyaWNhbChmb2xsb3dpbmcpKSB7XG4gICAgICAgICAgICAgICAgZW50aXR5ID0gbnVsbFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdhcm5pbmcocmVhc29uLCBkaWZmKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3YXJuaW5nKHJlYXNvbiwgZGlmZilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZWZlcmVuY2UgPSBlbnRpdHlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGVybWluYXRlZCkge1xuICAgICAgICAgIC8vIEFsbCBub24tdGVybWluYXRlZCBudW1lcmljIGVudGl0aWVzIGFyZSBub3QgcmVuZGVyZWQsIGFuZCB0cmlnZ2VyIGFcbiAgICAgICAgICAvLyB3YXJuaW5nLlxuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY05vdFRlcm1pbmF0ZWQsIGRpZmYpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRlcm1pbmF0ZWQgYW5kIG51bWJlciwgcGFyc2UgYXMgZWl0aGVyIGhleGFkZWNpbWFsIG9yIGRlY2ltYWwuXG4gICAgICAgIHJlZmVyZW5jZSA9IHBhcnNlSW50KGNoYXJhY3RlcnMsIGJhc2VzW3R5cGVdKVxuXG4gICAgICAgIC8vIFRyaWdnZXIgYSB3YXJuaW5nIHdoZW4gdGhlIHBhcnNlZCBudW1iZXIgaXMgcHJvaGliaXRlZCwgYW5kIHJlcGxhY2VcbiAgICAgICAgLy8gd2l0aCByZXBsYWNlbWVudCBjaGFyYWN0ZXIuXG4gICAgICAgIGlmIChwcm9oaWJpdGVkKHJlZmVyZW5jZSkpIHtcbiAgICAgICAgICB3YXJuaW5nKG51bWVyaWNQcm9oaWJpdGVkLCBkaWZmKVxuICAgICAgICAgIHJlZmVyZW5jZSA9IGZyb21DaGFyQ29kZShyZXBsYWNlbWVudENoYXJhY3RlcilcbiAgICAgICAgfSBlbHNlIGlmIChyZWZlcmVuY2UgaW4gaW52YWxpZCkge1xuICAgICAgICAgIC8vIFRyaWdnZXIgYSB3YXJuaW5nIHdoZW4gdGhlIHBhcnNlZCBudW1iZXIgaXMgZGlzYWxsb3dlZCwgYW5kIHJlcGxhY2VcbiAgICAgICAgICAvLyBieSBhbiBhbHRlcm5hdGl2ZS5cbiAgICAgICAgICB3YXJuaW5nKG51bWVyaWNEaXNhbGxvd2VkLCBkaWZmKVxuICAgICAgICAgIHJlZmVyZW5jZSA9IGludmFsaWRbcmVmZXJlbmNlXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFBhcnNlIHRoZSBudW1iZXIuXG4gICAgICAgICAgb3V0cHV0ID0gJydcblxuICAgICAgICAgIC8vIFRyaWdnZXIgYSB3YXJuaW5nIHdoZW4gdGhlIHBhcnNlZCBudW1iZXIgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgICAgICAgIGlmIChkaXNhbGxvd2VkKHJlZmVyZW5jZSkpIHtcbiAgICAgICAgICAgIHdhcm5pbmcobnVtZXJpY0Rpc2FsbG93ZWQsIGRpZmYpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU3RyaW5naWZ5IHRoZSBudW1iZXIuXG4gICAgICAgICAgaWYgKHJlZmVyZW5jZSA+IDB4ZmZmZikge1xuICAgICAgICAgICAgcmVmZXJlbmNlIC09IDB4MTAwMDBcbiAgICAgICAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoKHJlZmVyZW5jZSA+Pj4gKDEwICYgMHgzZmYpKSB8IDB4ZDgwMClcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IDB4ZGMwMCB8IChyZWZlcmVuY2UgJiAweDNmZilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZWZlcmVuY2UgPSBvdXRwdXQgKyBmcm9tQ2hhckNvZGUocmVmZXJlbmNlKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZvdW5kIGl0IVxuICAgICAgLy8gRmlyc3QgZWF0IHRoZSBxdWV1ZWQgY2hhcmFjdGVycyBhcyBub3JtYWwgdGV4dCwgdGhlbiBlYXQgYW4gZW50aXR5LlxuICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICBmbHVzaCgpXG5cbiAgICAgICAgcHJldiA9IG5vdygpXG4gICAgICAgIGluZGV4ID0gZW5kIC0gMVxuICAgICAgICBjb2x1bW4gKz0gZW5kIC0gc3RhcnQgKyAxXG4gICAgICAgIHJlc3VsdC5wdXNoKHJlZmVyZW5jZSlcbiAgICAgICAgbmV4dCA9IG5vdygpXG4gICAgICAgIG5leHQub2Zmc2V0KytcblxuICAgICAgICBpZiAoaGFuZGxlUmVmZXJlbmNlKSB7XG4gICAgICAgICAgaGFuZGxlUmVmZXJlbmNlLmNhbGwoXG4gICAgICAgICAgICByZWZlcmVuY2VDb250ZXh0LFxuICAgICAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICAgICAge3N0YXJ0OiBwcmV2LCBlbmQ6IG5leHR9LFxuICAgICAgICAgICAgdmFsdWUuc2xpY2Uoc3RhcnQgLSAxLCBlbmQpXG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgcHJldiA9IG5leHRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHdlIGNvdWxkIG5vdCBmaW5kIGEgcmVmZXJlbmNlLCBxdWV1ZSB0aGUgY2hlY2tlZCBjaGFyYWN0ZXJzIChhc1xuICAgICAgICAvLyBub3JtYWwgY2hhcmFjdGVycyksIGFuZCBtb3ZlIHRoZSBwb2ludGVyIHRvIHRoZWlyIGVuZC5cbiAgICAgICAgLy8gVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIHdlIGNhbiBiZSBjZXJ0YWluIG5laXRoZXIgbmV3bGluZXMgbm9yXG4gICAgICAgIC8vIGFtcGVyc2FuZHMgYXJlIGluY2x1ZGVkLlxuICAgICAgICBjaGFyYWN0ZXJzID0gdmFsdWUuc2xpY2Uoc3RhcnQgLSAxLCBlbmQpXG4gICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcnNcbiAgICAgICAgY29sdW1uICs9IGNoYXJhY3RlcnMubGVuZ3RoXG4gICAgICAgIGluZGV4ID0gZW5kIC0gMVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBIYW5kbGUgYW55dGhpbmcgb3RoZXIgdGhhbiBhbiBhbXBlcnNhbmQsIGluY2x1ZGluZyBuZXdsaW5lcyBhbmQgRU9GLlxuICAgICAgaWYgKFxuICAgICAgICBjaGFyYWN0ZXIgPT09IDEwIC8vIExpbmUgZmVlZFxuICAgICAgKSB7XG4gICAgICAgIGxpbmUrK1xuICAgICAgICBsaW5lcysrXG4gICAgICAgIGNvbHVtbiA9IDBcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gY2hhcmFjdGVyKSB7XG4gICAgICAgIHF1ZXVlICs9IGZyb21DaGFyQ29kZShjaGFyYWN0ZXIpXG4gICAgICAgIGNvbHVtbisrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbHVzaCgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSByZWR1Y2VkIG5vZGVzLCBhbmQgYW55IHBvc3NpYmxlIHdhcm5pbmdzLlxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpXG5cbiAgLy8gR2V0IGN1cnJlbnQgcG9zaXRpb24uXG4gIGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbGluZSxcbiAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgb2Zmc2V0OiBpbmRleCArIChwb3Mub2Zmc2V0IHx8IDApXG4gICAgfVxuICB9XG5cbiAgLy8g4oCcVGhyb3figJ0gYSBwYXJzZS1lcnJvcjogYSB3YXJuaW5nLlxuICBmdW5jdGlvbiBwYXJzZUVycm9yKGNvZGUsIG9mZnNldCkge1xuICAgIHZhciBwb3NpdGlvbiA9IG5vdygpXG5cbiAgICBwb3NpdGlvbi5jb2x1bW4gKz0gb2Zmc2V0XG4gICAgcG9zaXRpb24ub2Zmc2V0ICs9IG9mZnNldFxuXG4gICAgaGFuZGxlV2FybmluZy5jYWxsKHdhcm5pbmdDb250ZXh0LCBtZXNzYWdlc1tjb2RlXSwgcG9zaXRpb24sIGNvZGUpXG4gIH1cblxuICAvLyBGbHVzaCBgcXVldWVgIChub3JtYWwgdGV4dCkuXG4gIC8vIE1hY3JvIGludm9rZWQgYmVmb3JlIGVhY2ggZW50aXR5IGFuZCBhdCB0aGUgZW5kIG9mIGB2YWx1ZWAuXG4gIC8vIERvZXMgbm90aGluZyB3aGVuIGBxdWV1ZWAgaXMgZW1wdHkuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmIChxdWV1ZSkge1xuICAgICAgcmVzdWx0LnB1c2gocXVldWUpXG5cbiAgICAgIGlmIChoYW5kbGVUZXh0KSB7XG4gICAgICAgIGhhbmRsZVRleHQuY2FsbCh0ZXh0Q29udGV4dCwgcXVldWUsIHtzdGFydDogcHJldiwgZW5kOiBub3coKX0pXG4gICAgICB9XG5cbiAgICAgIHF1ZXVlID0gJydcbiAgICB9XG4gIH1cbn1cblxuLy8gQ2hlY2sgaWYgYGNoYXJhY3RlcmAgaXMgb3V0c2lkZSB0aGUgcGVybWlzc2libGUgdW5pY29kZSByYW5nZS5cbmZ1bmN0aW9uIHByb2hpYml0ZWQoY29kZSkge1xuICByZXR1cm4gKGNvZGUgPj0gMHhkODAwICYmIGNvZGUgPD0gMHhkZmZmKSB8fCBjb2RlID4gMHgxMGZmZmZcbn1cblxuLy8gQ2hlY2sgaWYgYGNoYXJhY3RlcmAgaXMgZGlzYWxsb3dlZC5cbmZ1bmN0aW9uIGRpc2FsbG93ZWQoY29kZSkge1xuICByZXR1cm4gKFxuICAgIChjb2RlID49IDB4MDAwMSAmJiBjb2RlIDw9IDB4MDAwOCkgfHxcbiAgICBjb2RlID09PSAweDAwMGIgfHxcbiAgICAoY29kZSA+PSAweDAwMGQgJiYgY29kZSA8PSAweDAwMWYpIHx8XG4gICAgKGNvZGUgPj0gMHgwMDdmICYmIGNvZGUgPD0gMHgwMDlmKSB8fFxuICAgIChjb2RlID49IDB4ZmRkMCAmJiBjb2RlIDw9IDB4ZmRlZikgfHxcbiAgICAoY29kZSAmIDB4ZmZmZikgPT09IDB4ZmZmZiB8fFxuICAgIChjb2RlICYgMHhmZmZmKSA9PT0gMHhmZmZlXG4gIClcbn1cbiIsIi8qIVxuICogcmVwZWF0LXN0cmluZyA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvcmVwZWF0LXN0cmluZz5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJlc3VsdHMgY2FjaGVcbiAqL1xuXG52YXIgcmVzID0gJyc7XG52YXIgY2FjaGU7XG5cbi8qKlxuICogRXhwb3NlIGByZXBlYXRgXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXBlYXQ7XG5cbi8qKlxuICogUmVwZWF0IHRoZSBnaXZlbiBgc3RyaW5nYCB0aGUgc3BlY2lmaWVkIGBudW1iZXJgXG4gKiBvZiB0aW1lcy5cbiAqXG4gKiAqKkV4YW1wbGU6KipcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKTtcbiAqIHJlcGVhdCgnQScsIDUpO1xuICogLy89PiBBQUFBQVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGBzdHJpbmdgIFRoZSBzdHJpbmcgdG8gcmVwZWF0XG4gKiBAcGFyYW0ge051bWJlcn0gYG51bWJlcmAgVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfSBSZXBlYXRlZCBzdHJpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcmVwZWF0KHN0ciwgbnVtKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4cGVjdGVkIGEgc3RyaW5nJyk7XG4gIH1cblxuICAvLyBjb3ZlciBjb21tb24sIHF1aWNrIHVzZSBjYXNlc1xuICBpZiAobnVtID09PSAxKSByZXR1cm4gc3RyO1xuICBpZiAobnVtID09PSAyKSByZXR1cm4gc3RyICsgc3RyO1xuXG4gIHZhciBtYXggPSBzdHIubGVuZ3RoICogbnVtO1xuICBpZiAoY2FjaGUgIT09IHN0ciB8fCB0eXBlb2YgY2FjaGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2FjaGUgPSBzdHI7XG4gICAgcmVzID0gJyc7XG4gIH0gZWxzZSBpZiAocmVzLmxlbmd0aCA+PSBtYXgpIHtcbiAgICByZXR1cm4gcmVzLnN1YnN0cigwLCBtYXgpO1xuICB9XG5cbiAgd2hpbGUgKG1heCA+IHJlcy5sZW5ndGggJiYgbnVtID4gMSkge1xuICAgIGlmIChudW0gJiAxKSB7XG4gICAgICByZXMgKz0gc3RyO1xuICAgIH1cblxuICAgIG51bSA+Pj0gMTtcbiAgICBzdHIgKz0gc3RyO1xuICB9XG5cbiAgcmVzICs9IHN0cjtcbiAgcmVzID0gcmVzLnN1YnN0cigwLCBtYXgpO1xuICByZXR1cm4gcmVzO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbVRyYWlsaW5nTGluZXNcblxuLy8gUmVtb3ZlIGZpbmFsIG5ld2xpbmUgY2hhcmFjdGVycyBmcm9tIGB2YWx1ZWAuXG5mdW5jdGlvbiB0cmltVHJhaWxpbmdMaW5lcyh2YWx1ZSkge1xuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cXG4rJC8sICcnKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVycnVwdDtcblxuZnVuY3Rpb24gaW50ZXJydXB0KGludGVycnVwdG9ycywgdG9rZW5pemVycywgY3R4LCBwYXJhbXMpIHtcbiAgdmFyIGJvb2xzID0gWydwZWRhbnRpYycsICdjb21tb25tYXJrJ107XG4gIHZhciBjb3VudCA9IGJvb2xzLmxlbmd0aDtcbiAgdmFyIGxlbmd0aCA9IGludGVycnVwdG9ycy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgaW50ZXJydXB0b3I7XG4gIHZhciBjb25maWc7XG4gIHZhciBmbjtcbiAgdmFyIG9mZnNldDtcbiAgdmFyIGJvb2w7XG4gIHZhciBpZ25vcmU7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpbnRlcnJ1cHRvciA9IGludGVycnVwdG9yc1tpbmRleF07XG4gICAgY29uZmlnID0gaW50ZXJydXB0b3JbMV0gfHwge307XG4gICAgZm4gPSBpbnRlcnJ1cHRvclswXTtcbiAgICBvZmZzZXQgPSAtMTtcbiAgICBpZ25vcmUgPSBmYWxzZTtcblxuICAgIHdoaWxlICgrK29mZnNldCA8IGNvdW50KSB7XG4gICAgICBib29sID0gYm9vbHNbb2Zmc2V0XTtcblxuICAgICAgaWYgKGNvbmZpZ1tib29sXSAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZ1tib29sXSAhPT0gY3R4Lm9wdGlvbnNbYm9vbF0pIHtcbiAgICAgICAgaWdub3JlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuaXplcnNbZm5dLmFwcGx5KGN0eCwgcGFyYW1zKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29sbGFwc2VXaGl0ZVNwYWNlID0gcmVxdWlyZSgnY29sbGFwc2Utd2hpdGUtc3BhY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemU7XG5cbi8qIE5vcm1hbGl6ZSBhbiBpZGVudGlmaWVyLiAgQ29sbGFwc2VzIG11bHRpcGxlIHdoaXRlIHNwYWNlXG4gKiBjaGFyYWN0ZXJzIGludG8gYSBzaW5nbGUgc3BhY2UsIGFuZCByZW1vdmVzIGNhc2luZy4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSkge1xuICByZXR1cm4gY29sbGFwc2VXaGl0ZVNwYWNlKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xufVxuIiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKHQpIHtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBfZ2V0UHJvdG90eXBlT2YodCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsIiFmdW5jdGlvbihlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKG51bGwpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZShudWxsKSk6d2luZG93LnN0eWxpcz1lKG51bGwpfShmdW5jdGlvbiBlKGEpe1widXNlIHN0cmljdFwiO3ZhciByPS9eXFwwKy9nLGM9L1tcXDBcXHJcXGZdL2cscz0vOiAqL2csdD0vem9vfGdyYS8saT0vKFssOiBdKSh0cmFuc2Zvcm0pL2csZj0vLCtcXHMqKD8hW14oXSpbKV0pL2csbj0vICtcXHMqKD8hW14oXSpbKV0pL2csbD0vICpbXFwwXSAqL2csbz0vLFxccis/L2csaD0vKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyx1PS86Z2xvYmFsXFwoKCg/OlteXFwoXFwpXFxbXFxdXSp8XFxbLipcXF18XFwoW15cXChcXCldKlxcKSkqKVxcKS9nLGQ9L1xcVysvZyxiPS9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxwPS86OihwbGFjZSkvZyxrPS86KHJlYWQtb25seSkvZyxnPS9cXHMrKD89W3tcXF07PTo+XSkvZyxBPS8oW1t9PTo+XSlcXHMrL2csQz0vKFxce1tee10rPyk7KD89XFx9KS9nLHc9L1xcc3syLH0vZyx2PS8oW15cXChdKSg6KykgKi9nLG09L1tzdmhdXFx3Ky1bdGJscl17Mn0vLHg9L1xcKFxccyooLiopXFxzKlxcKS9nLCQ9LyhbXFxzXFxTXSo/KTsvZyx5PS8tc2VsZnxmbGV4LS9nLE89L1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLGo9L3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyx6PS8oW14tXSkoaW1hZ2Utc2V0XFwoKS8sTj1cIi13ZWJraXQtXCIsUz1cIi1tb3otXCIsRj1cIi1tcy1cIixXPTU5LHE9MTI1LEI9MTIzLEQ9NDAsRT00MSxHPTkxLEg9OTMsST0xMCxKPTEzLEs9OSxMPTY0LE09MzIsUD0zOCxRPTQ1LFI9OTUsVD00MixVPTQ0LFY9NTgsWD0zOSxZPTM0LFo9NDcsXz02MixlZT00MyxhZT0xMjYscmU9MCxjZT0xMixzZT0xMSx0ZT0xMDcsaWU9MTA5LGZlPTExNSxuZT0xMTIsbGU9MTExLG9lPTEwNSxoZT05OSx1ZT0xMDAsZGU9MTEyLGJlPTEscGU9MSxrZT0wLGdlPTEsQWU9MSxDZT0xLHdlPTAsdmU9MCxtZT0wLHhlPVtdLCRlPVtdLHllPTAsT2U9bnVsbCxqZT0tMix6ZT0tMSxOZT0wLFNlPTEsRmU9MixXZT0zLHFlPTAsQmU9MSxEZT1cIlwiLEVlPVwiXCIsR2U9XCJcIjtmdW5jdGlvbiBIZShlLGEscyx0LGkpe2Zvcih2YXIgZixuLG89MCxoPTAsdT0wLGQ9MCxnPTAsQT0wLEM9MCx3PTAsbT0wLCQ9MCx5PTAsTz0wLGo9MCx6PTAsUj0wLHdlPTAsJGU9MCxPZT0wLGplPTAsemU9cy5sZW5ndGgsSmU9emUtMSxSZT1cIlwiLFRlPVwiXCIsVWU9XCJcIixWZT1cIlwiLFhlPVwiXCIsWWU9XCJcIjtSPHplOyl7aWYoQz1zLmNoYXJDb2RlQXQoUiksUj09PUplKWlmKGgrZCt1K28hPT0wKXtpZigwIT09aClDPWg9PT1aP0k6WjtkPXU9bz0wLHplKyssSmUrK31pZihoK2QrdStvPT09MCl7aWYoUj09PUplKXtpZih3ZT4wKVRlPVRlLnJlcGxhY2UoYyxcIlwiKTtpZihUZS50cmltKCkubGVuZ3RoPjApe3N3aXRjaChDKXtjYXNlIE06Y2FzZSBLOmNhc2UgVzpjYXNlIEo6Y2FzZSBJOmJyZWFrO2RlZmF1bHQ6VGUrPXMuY2hhckF0KFIpfUM9V319aWYoMT09PSRlKXN3aXRjaChDKXtjYXNlIEI6Y2FzZSBxOmNhc2UgVzpjYXNlIFk6Y2FzZSBYOmNhc2UgRDpjYXNlIEU6Y2FzZSBVOiRlPTA7Y2FzZSBLOmNhc2UgSjpjYXNlIEk6Y2FzZSBNOmJyZWFrO2RlZmF1bHQ6Zm9yKCRlPTAsamU9UixnPUMsUi0tLEM9VztqZTx6ZTspc3dpdGNoKHMuY2hhckNvZGVBdChqZSsrKSl7Y2FzZSBJOmNhc2UgSjpjYXNlIFc6KytSLEM9ZyxqZT16ZTticmVhaztjYXNlIFY6aWYod2U+MCkrK1IsQz1nO2Nhc2UgQjpqZT16ZX19c3dpdGNoKEMpe2Nhc2UgQjpmb3IoZz0oVGU9VGUudHJpbSgpKS5jaGFyQ29kZUF0KDApLHk9MSxqZT0rK1I7Ujx6ZTspe3N3aXRjaChDPXMuY2hhckNvZGVBdChSKSl7Y2FzZSBCOnkrKzticmVhaztjYXNlIHE6eS0tO2JyZWFrO2Nhc2UgWjpzd2l0Y2goQT1zLmNoYXJDb2RlQXQoUisxKSl7Y2FzZSBUOmNhc2UgWjpSPVFlKEEsUixKZSxzKX1icmVhaztjYXNlIEc6QysrO2Nhc2UgRDpDKys7Y2FzZSBZOmNhc2UgWDpmb3IoO1IrKzxKZSYmcy5jaGFyQ29kZUF0KFIpIT09QzspO31pZigwPT09eSlicmVhaztSKyt9aWYoVWU9cy5zdWJzdHJpbmcoamUsUiksZz09PXJlKWc9KFRlPVRlLnJlcGxhY2UocixcIlwiKS50cmltKCkpLmNoYXJDb2RlQXQoMCk7c3dpdGNoKGcpe2Nhc2UgTDppZih3ZT4wKVRlPVRlLnJlcGxhY2UoYyxcIlwiKTtzd2l0Y2goQT1UZS5jaGFyQ29kZUF0KDEpKXtjYXNlIHVlOmNhc2UgaWU6Y2FzZSBmZTpjYXNlIFE6Zj1hO2JyZWFrO2RlZmF1bHQ6Zj14ZX1pZihqZT0oVWU9SGUoYSxmLFVlLEEsaSsxKSkubGVuZ3RoLG1lPjAmJjA9PT1qZSlqZT1UZS5sZW5ndGg7aWYoeWU+MClpZihmPUllKHhlLFRlLE9lKSxuPVBlKFdlLFVlLGYsYSxwZSxiZSxqZSxBLGksdCksVGU9Zi5qb2luKFwiXCIpLHZvaWQgMCE9PW4paWYoMD09PShqZT0oVWU9bi50cmltKCkpLmxlbmd0aCkpQT0wLFVlPVwiXCI7aWYoamU+MClzd2l0Y2goQSl7Y2FzZSBmZTpUZT1UZS5yZXBsYWNlKHgsTWUpO2Nhc2UgdWU6Y2FzZSBpZTpjYXNlIFE6VWU9VGUrXCJ7XCIrVWUrXCJ9XCI7YnJlYWs7Y2FzZSB0ZTppZihVZT0oVGU9VGUucmVwbGFjZShiLFwiJDEgJDJcIisoQmU+MD9EZTpcIlwiKSkpK1wie1wiK1VlK1wifVwiLDE9PT1BZXx8Mj09PUFlJiZMZShcIkBcIitVZSwzKSlVZT1cIkBcIitOK1VlK1wiQFwiK1VlO2Vsc2UgVWU9XCJAXCIrVWU7YnJlYWs7ZGVmYXVsdDppZihVZT1UZStVZSx0PT09ZGUpVmUrPVVlLFVlPVwiXCJ9ZWxzZSBVZT1cIlwiO2JyZWFrO2RlZmF1bHQ6VWU9SGUoYSxJZShhLFRlLE9lKSxVZSx0LGkrMSl9WGUrPVVlLE89MCwkZT0wLHo9MCx3ZT0wLE9lPTAsaj0wLFRlPVwiXCIsVWU9XCJcIixDPXMuY2hhckNvZGVBdCgrK1IpO2JyZWFrO2Nhc2UgcTpjYXNlIFc6aWYoKGplPShUZT0od2U+MD9UZS5yZXBsYWNlKGMsXCJcIik6VGUpLnRyaW0oKSkubGVuZ3RoKT4xKXtpZigwPT09eilpZigoZz1UZS5jaGFyQ29kZUF0KDApKT09PVF8fGc+OTYmJmc8MTIzKWplPShUZT1UZS5yZXBsYWNlKFwiIFwiLFwiOlwiKSkubGVuZ3RoO2lmKHllPjApaWYodm9pZCAwIT09KG49UGUoU2UsVGUsYSxlLHBlLGJlLFZlLmxlbmd0aCx0LGksdCkpKWlmKDA9PT0oamU9KFRlPW4udHJpbSgpKS5sZW5ndGgpKVRlPVwiXFwwXFwwXCI7c3dpdGNoKGc9VGUuY2hhckNvZGVBdCgwKSxBPVRlLmNoYXJDb2RlQXQoMSksZyl7Y2FzZSByZTpicmVhaztjYXNlIEw6aWYoQT09PW9lfHxBPT09aGUpe1llKz1UZStzLmNoYXJBdChSKTticmVha31kZWZhdWx0OmlmKFRlLmNoYXJDb2RlQXQoamUtMSk9PT1WKWJyZWFrO1ZlKz1LZShUZSxnLEEsVGUuY2hhckNvZGVBdCgyKSl9fU89MCwkZT0wLHo9MCx3ZT0wLE9lPTAsVGU9XCJcIixDPXMuY2hhckNvZGVBdCgrK1IpfX1zd2l0Y2goQyl7Y2FzZSBKOmNhc2UgSTppZihoK2QrdStvK3ZlPT09MClzd2l0Y2goJCl7Y2FzZSBFOmNhc2UgWDpjYXNlIFk6Y2FzZSBMOmNhc2UgYWU6Y2FzZSBfOmNhc2UgVDpjYXNlIGVlOmNhc2UgWjpjYXNlIFE6Y2FzZSBWOmNhc2UgVTpjYXNlIFc6Y2FzZSBCOmNhc2UgcTpicmVhaztkZWZhdWx0OmlmKHo+MCkkZT0xfWlmKGg9PT1aKWg9MDtlbHNlIGlmKGdlK089PT0wJiZ0IT09dGUmJlRlLmxlbmd0aD4wKXdlPTEsVGUrPVwiXFwwXCI7aWYoeWUqcWU+MClQZShOZSxUZSxhLGUscGUsYmUsVmUubGVuZ3RoLHQsaSx0KTtiZT0xLHBlKys7YnJlYWs7Y2FzZSBXOmNhc2UgcTppZihoK2QrdStvPT09MCl7YmUrKzticmVha31kZWZhdWx0OnN3aXRjaChiZSsrLFJlPXMuY2hhckF0KFIpLEMpe2Nhc2UgSzpjYXNlIE06aWYoZCtvK2g9PT0wKXN3aXRjaCh3KXtjYXNlIFU6Y2FzZSBWOmNhc2UgSzpjYXNlIE06UmU9XCJcIjticmVhaztkZWZhdWx0OmlmKEMhPT1NKVJlPVwiIFwifWJyZWFrO2Nhc2UgcmU6UmU9XCJcXFxcMFwiO2JyZWFrO2Nhc2UgY2U6UmU9XCJcXFxcZlwiO2JyZWFrO2Nhc2Ugc2U6UmU9XCJcXFxcdlwiO2JyZWFrO2Nhc2UgUDppZihkK2grbz09PTAmJmdlPjApT2U9MSx3ZT0xLFJlPVwiXFxmXCIrUmU7YnJlYWs7Y2FzZSAxMDg6aWYoZCtoK28ra2U9PT0wJiZ6PjApc3dpdGNoKFIteil7Y2FzZSAyOmlmKHc9PT1uZSYmcy5jaGFyQ29kZUF0KFItMyk9PT1WKWtlPXc7Y2FzZSA4OmlmKG09PT1sZSlrZT1tfWJyZWFrO2Nhc2UgVjppZihkK2grbz09PTApej1SO2JyZWFrO2Nhc2UgVTppZihoK3UrZCtvPT09MCl3ZT0xLFJlKz1cIlxcclwiO2JyZWFrO2Nhc2UgWTpjYXNlIFg6aWYoMD09PWgpZD1kPT09Qz8wOjA9PT1kP0M6ZDticmVhaztjYXNlIEc6aWYoZCtoK3U9PT0wKW8rKzticmVhaztjYXNlIEg6aWYoZCtoK3U9PT0wKW8tLTticmVhaztjYXNlIEU6aWYoZCtoK289PT0wKXUtLTticmVhaztjYXNlIEQ6aWYoZCtoK289PT0wKXtpZigwPT09Tylzd2l0Y2goMip3KzMqbSl7Y2FzZSA1MzM6YnJlYWs7ZGVmYXVsdDp5PTAsTz0xfXUrK31icmVhaztjYXNlIEw6aWYoaCt1K2Qrbyt6K2o9PT0wKWo9MTticmVhaztjYXNlIFQ6Y2FzZSBaOmlmKGQrbyt1PjApYnJlYWs7c3dpdGNoKGgpe2Nhc2UgMDpzd2l0Y2goMipDKzMqcy5jaGFyQ29kZUF0KFIrMSkpe2Nhc2UgMjM1Omg9WjticmVhaztjYXNlIDIyMDpqZT1SLGg9VH1icmVhaztjYXNlIFQ6aWYoQz09PVomJnc9PT1UJiZqZSsyIT09Uil7aWYoMzM9PT1zLmNoYXJDb2RlQXQoamUrMikpVmUrPXMuc3Vic3RyaW5nKGplLFIrMSk7UmU9XCJcIixoPTB9fX1pZigwPT09aCl7aWYoZ2UrZCtvK2o9PT0wJiZ0IT09dGUmJkMhPT1XKXN3aXRjaChDKXtjYXNlIFU6Y2FzZSBhZTpjYXNlIF86Y2FzZSBlZTpjYXNlIEU6Y2FzZSBEOmlmKDA9PT1PKXtzd2l0Y2godyl7Y2FzZSBLOmNhc2UgTTpjYXNlIEk6Y2FzZSBKOlJlKz1cIlxcMFwiO2JyZWFrO2RlZmF1bHQ6UmU9XCJcXDBcIitSZSsoQz09PVU/XCJcIjpcIlxcMFwiKX13ZT0xfWVsc2Ugc3dpdGNoKEMpe2Nhc2UgRDppZih6Kzc9PT1SJiYxMDg9PT13KXo9MDtPPSsreTticmVhaztjYXNlIEU6aWYoMD09KE89LS15KSl3ZT0xLFJlKz1cIlxcMFwifWJyZWFrO2Nhc2UgSzpjYXNlIE06c3dpdGNoKHcpe2Nhc2UgcmU6Y2FzZSBCOmNhc2UgcTpjYXNlIFc6Y2FzZSBVOmNhc2UgY2U6Y2FzZSBLOmNhc2UgTTpjYXNlIEk6Y2FzZSBKOmJyZWFrO2RlZmF1bHQ6aWYoMD09PU8pd2U9MSxSZSs9XCJcXDBcIn19aWYoVGUrPVJlLEMhPT1NJiZDIT09SykkPUN9fW09dyx3PUMsUisrfWlmKGplPVZlLmxlbmd0aCxtZT4wKWlmKDA9PT1qZSYmMD09PVhlLmxlbmd0aCYmMD09PWFbMF0ubGVuZ3RoPT1mYWxzZSlpZih0IT09aWV8fDE9PT1hLmxlbmd0aCYmKGdlPjA/RWU6R2UpPT09YVswXSlqZT1hLmpvaW4oXCIsXCIpLmxlbmd0aCsyO2lmKGplPjApe2lmKGY9MD09PWdlJiZ0IT09dGU/ZnVuY3Rpb24oZSl7Zm9yKHZhciBhLHIscz0wLHQ9ZS5sZW5ndGgsaT1BcnJheSh0KTtzPHQ7KytzKXtmb3IodmFyIGY9ZVtzXS5zcGxpdChsKSxuPVwiXCIsbz0wLGg9MCx1PTAsZD0wLGI9Zi5sZW5ndGg7bzxiOysrbyl7aWYoMD09PShoPShyPWZbb10pLmxlbmd0aCkmJmI+MSljb250aW51ZTtpZih1PW4uY2hhckNvZGVBdChuLmxlbmd0aC0xKSxkPXIuY2hhckNvZGVBdCgwKSxhPVwiXCIsMCE9PW8pc3dpdGNoKHUpe2Nhc2UgVDpjYXNlIGFlOmNhc2UgXzpjYXNlIGVlOmNhc2UgTTpjYXNlIEQ6YnJlYWs7ZGVmYXVsdDphPVwiIFwifXN3aXRjaChkKXtjYXNlIFA6cj1hK0VlO2Nhc2UgYWU6Y2FzZSBfOmNhc2UgZWU6Y2FzZSBNOmNhc2UgRTpjYXNlIEQ6YnJlYWs7Y2FzZSBHOnI9YStyK0VlO2JyZWFrO2Nhc2UgVjpzd2l0Y2goMipyLmNoYXJDb2RlQXQoMSkrMypyLmNoYXJDb2RlQXQoMikpe2Nhc2UgNTMwOmlmKENlPjApe3I9YStyLnN1YnN0cmluZyg4LGgtMSk7YnJlYWt9ZGVmYXVsdDppZihvPDF8fGZbby0xXS5sZW5ndGg8MSlyPWErRWUrcn1icmVhaztjYXNlIFU6YT1cIlwiO2RlZmF1bHQ6aWYoaD4xJiZyLmluZGV4T2YoXCI6XCIpPjApcj1hK3IucmVwbGFjZSh2LFwiJDFcIitFZStcIiQyXCIpO2Vsc2Ugcj1hK3IrRWV9bis9cn1pW3NdPW4ucmVwbGFjZShjLFwiXCIpLnRyaW0oKX1yZXR1cm4gaX0oYSk6YSx5ZT4wKWlmKHZvaWQgMCE9PShuPVBlKEZlLFZlLGYsZSxwZSxiZSxqZSx0LGksdCkpJiYwPT09KFZlPW4pLmxlbmd0aClyZXR1cm4gWWUrVmUrWGU7aWYoVmU9Zi5qb2luKFwiLFwiKStcIntcIitWZStcIn1cIixBZSprZSE9MCl7aWYoMj09PUFlJiYhTGUoVmUsMikpa2U9MDtzd2l0Y2goa2Upe2Nhc2UgbGU6VmU9VmUucmVwbGFjZShrLFwiOlwiK1MrXCIkMVwiKStWZTticmVhaztjYXNlIG5lOlZlPVZlLnJlcGxhY2UocCxcIjo6XCIrTitcImlucHV0LSQxXCIpK1ZlLnJlcGxhY2UocCxcIjo6XCIrUytcIiQxXCIpK1ZlLnJlcGxhY2UocCxcIjpcIitGK1wiaW5wdXQtJDFcIikrVmV9a2U9MH19cmV0dXJuIFllK1ZlK1hlfWZ1bmN0aW9uIEllKGUsYSxyKXt2YXIgYz1hLnRyaW0oKS5zcGxpdChvKSxzPWMsdD1jLmxlbmd0aCxpPWUubGVuZ3RoO3N3aXRjaChpKXtjYXNlIDA6Y2FzZSAxOmZvcih2YXIgZj0wLG49MD09PWk/XCJcIjplWzBdK1wiIFwiO2Y8dDsrK2Ypc1tmXT1KZShuLHNbZl0scixpKS50cmltKCk7YnJlYWs7ZGVmYXVsdDpmPTA7dmFyIGw9MDtmb3Iocz1bXTtmPHQ7KytmKWZvcih2YXIgaD0wO2g8aTsrK2gpc1tsKytdPUplKGVbaF0rXCIgXCIsY1tmXSxyLGkpLnRyaW0oKX1yZXR1cm4gc31mdW5jdGlvbiBKZShlLGEscixjKXt2YXIgcz1hLHQ9cy5jaGFyQ29kZUF0KDApO2lmKHQ8MzMpdD0ocz1zLnRyaW0oKSkuY2hhckNvZGVBdCgwKTtzd2l0Y2godCl7Y2FzZSBQOnN3aXRjaChnZStjKXtjYXNlIDA6Y2FzZSAxOmlmKDA9PT1lLnRyaW0oKS5sZW5ndGgpYnJlYWs7ZGVmYXVsdDpyZXR1cm4gcy5yZXBsYWNlKGgsXCIkMVwiK2UudHJpbSgpKX1icmVhaztjYXNlIFY6c3dpdGNoKHMuY2hhckNvZGVBdCgxKSl7Y2FzZSAxMDM6aWYoQ2U+MCYmZ2U+MClyZXR1cm4gcy5yZXBsYWNlKHUsXCIkMVwiKS5yZXBsYWNlKGgsXCIkMVwiK0dlKTticmVhaztkZWZhdWx0OnJldHVybiBlLnRyaW0oKStzLnJlcGxhY2UoaCxcIiQxXCIrZS50cmltKCkpfWRlZmF1bHQ6aWYocipnZT4wJiZzLmluZGV4T2YoXCJcXGZcIik+MClyZXR1cm4gcy5yZXBsYWNlKGgsKGUuY2hhckNvZGVBdCgwKT09PVY/XCJcIjpcIiQxXCIpK2UudHJpbSgpKX1yZXR1cm4gZStzfWZ1bmN0aW9uIEtlKGUsYSxyLGMpe3ZhciBsLG89MCxoPWUrXCI7XCIsdT0yKmErMypyKzQqYztpZig5NDQ9PT11KXJldHVybiBmdW5jdGlvbihlKXt2YXIgYT1lLmxlbmd0aCxyPWUuaW5kZXhPZihcIjpcIiw5KSsxLGM9ZS5zdWJzdHJpbmcoMCxyKS50cmltKCkscz1lLnN1YnN0cmluZyhyLGEtMSkudHJpbSgpO3N3aXRjaChlLmNoYXJDb2RlQXQoOSkqQmUpe2Nhc2UgMDpicmVhaztjYXNlIFE6aWYoMTEwIT09ZS5jaGFyQ29kZUF0KDEwKSlicmVhaztkZWZhdWx0OmZvcih2YXIgdD1zLnNwbGl0KChzPVwiXCIsZikpLGk9MCxyPTAsYT10Lmxlbmd0aDtpPGE7cj0wLCsraSl7Zm9yKHZhciBsPXRbaV0sbz1sLnNwbGl0KG4pO2w9b1tyXTspe3ZhciBoPWwuY2hhckNvZGVBdCgwKTtpZigxPT09QmUmJihoPkwmJmg8OTB8fGg+OTYmJmg8MTIzfHxoPT09Unx8aD09PVEmJmwuY2hhckNvZGVBdCgxKSE9PVEpKXN3aXRjaChpc05hTihwYXJzZUZsb2F0KGwpKSsoLTEhPT1sLmluZGV4T2YoXCIoXCIpKSl7Y2FzZSAxOnN3aXRjaChsKXtjYXNlXCJpbmZpbml0ZVwiOmNhc2VcImFsdGVybmF0ZVwiOmNhc2VcImJhY2t3YXJkc1wiOmNhc2VcInJ1bm5pbmdcIjpjYXNlXCJub3JtYWxcIjpjYXNlXCJmb3J3YXJkc1wiOmNhc2VcImJvdGhcIjpjYXNlXCJub25lXCI6Y2FzZVwibGluZWFyXCI6Y2FzZVwiZWFzZVwiOmNhc2VcImVhc2UtaW5cIjpjYXNlXCJlYXNlLW91dFwiOmNhc2VcImVhc2UtaW4tb3V0XCI6Y2FzZVwicGF1c2VkXCI6Y2FzZVwicmV2ZXJzZVwiOmNhc2VcImFsdGVybmF0ZS1yZXZlcnNlXCI6Y2FzZVwiaW5oZXJpdFwiOmNhc2VcImluaXRpYWxcIjpjYXNlXCJ1bnNldFwiOmNhc2VcInN0ZXAtc3RhcnRcIjpjYXNlXCJzdGVwLWVuZFwiOmJyZWFrO2RlZmF1bHQ6bCs9RGV9fW9bcisrXT1sfXMrPSgwPT09aT9cIlwiOlwiLFwiKStvLmpvaW4oXCIgXCIpfX1pZihzPWMrcytcIjtcIiwxPT09QWV8fDI9PT1BZSYmTGUocywxKSlyZXR1cm4gTitzK3M7cmV0dXJuIHN9KGgpO2Vsc2UgaWYoMD09PUFlfHwyPT09QWUmJiFMZShoLDEpKXJldHVybiBoO3N3aXRjaCh1KXtjYXNlIDEwMTU6cmV0dXJuIDk3PT09aC5jaGFyQ29kZUF0KDEwKT9OK2graDpoO2Nhc2UgOTUxOnJldHVybiAxMTY9PT1oLmNoYXJDb2RlQXQoMyk/TitoK2g6aDtjYXNlIDk2MzpyZXR1cm4gMTEwPT09aC5jaGFyQ29kZUF0KDUpP04raCtoOmg7Y2FzZSAxMDA5OmlmKDEwMCE9PWguY2hhckNvZGVBdCg0KSlicmVhaztjYXNlIDk2OTpjYXNlIDk0MjpyZXR1cm4gTitoK2g7Y2FzZSA5Nzg6cmV0dXJuIE4raCtTK2graDtjYXNlIDEwMTk6Y2FzZSA5ODM6cmV0dXJuIE4raCtTK2grRitoK2g7Y2FzZSA4ODM6aWYoaC5jaGFyQ29kZUF0KDgpPT09USlyZXR1cm4gTitoK2g7aWYoaC5pbmRleE9mKFwiaW1hZ2Utc2V0KFwiLDExKT4wKXJldHVybiBoLnJlcGxhY2UoeixcIiQxXCIrTitcIiQyXCIpK2g7cmV0dXJuIGg7Y2FzZSA5MzI6aWYoaC5jaGFyQ29kZUF0KDQpPT09USlzd2l0Y2goaC5jaGFyQ29kZUF0KDUpKXtjYXNlIDEwMzpyZXR1cm4gTitcImJveC1cIitoLnJlcGxhY2UoXCItZ3Jvd1wiLFwiXCIpK04raCtGK2gucmVwbGFjZShcImdyb3dcIixcInBvc2l0aXZlXCIpK2g7Y2FzZSAxMTU6cmV0dXJuIE4raCtGK2gucmVwbGFjZShcInNocmlua1wiLFwibmVnYXRpdmVcIikraDtjYXNlIDk4OnJldHVybiBOK2grRitoLnJlcGxhY2UoXCJiYXNpc1wiLFwicHJlZmVycmVkLXNpemVcIikraH1yZXR1cm4gTitoK0YraCtoO2Nhc2UgOTY0OnJldHVybiBOK2grRitcImZsZXgtXCIraCtoO2Nhc2UgMTAyMzppZig5OSE9PWguY2hhckNvZGVBdCg4KSlicmVhaztyZXR1cm4gbD1oLnN1YnN0cmluZyhoLmluZGV4T2YoXCI6XCIsMTUpKS5yZXBsYWNlKFwiZmxleC1cIixcIlwiKS5yZXBsYWNlKFwic3BhY2UtYmV0d2VlblwiLFwianVzdGlmeVwiKSxOK1wiYm94LXBhY2tcIitsK04raCtGK1wiZmxleC1wYWNrXCIrbCtoO2Nhc2UgMTAwNTpyZXR1cm4gdC50ZXN0KGgpP2gucmVwbGFjZShzLFwiOlwiK04pK2gucmVwbGFjZShzLFwiOlwiK1MpK2g6aDtjYXNlIDFlMzpzd2l0Y2gobz0obD1oLnN1YnN0cmluZygxMykudHJpbSgpKS5pbmRleE9mKFwiLVwiKSsxLGwuY2hhckNvZGVBdCgwKStsLmNoYXJDb2RlQXQobykpe2Nhc2UgMjI2Omw9aC5yZXBsYWNlKG0sXCJ0YlwiKTticmVhaztjYXNlIDIzMjpsPWgucmVwbGFjZShtLFwidGItcmxcIik7YnJlYWs7Y2FzZSAyMjA6bD1oLnJlcGxhY2UobSxcImxyXCIpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIGh9cmV0dXJuIE4raCtGK2wraDtjYXNlIDEwMTc6aWYoLTE9PT1oLmluZGV4T2YoXCJzdGlja3lcIiw5KSlyZXR1cm4gaDtjYXNlIDk3NTpzd2l0Y2gobz0oaD1lKS5sZW5ndGgtMTAsdT0obD0oMzM9PT1oLmNoYXJDb2RlQXQobyk/aC5zdWJzdHJpbmcoMCxvKTpoKS5zdWJzdHJpbmcoZS5pbmRleE9mKFwiOlwiLDcpKzEpLnRyaW0oKSkuY2hhckNvZGVBdCgwKSsoMHxsLmNoYXJDb2RlQXQoNykpKXtjYXNlIDIwMzppZihsLmNoYXJDb2RlQXQoOCk8MTExKWJyZWFrO2Nhc2UgMTE1Omg9aC5yZXBsYWNlKGwsTitsKStcIjtcIitoO2JyZWFrO2Nhc2UgMjA3OmNhc2UgMTAyOmg9aC5yZXBsYWNlKGwsTisodT4xMDI/XCJpbmxpbmUtXCI6XCJcIikrXCJib3hcIikrXCI7XCIraC5yZXBsYWNlKGwsTitsKStcIjtcIitoLnJlcGxhY2UobCxGK2wrXCJib3hcIikrXCI7XCIraH1yZXR1cm4gaCtcIjtcIjtjYXNlIDkzODppZihoLmNoYXJDb2RlQXQoNSk9PT1RKXN3aXRjaChoLmNoYXJDb2RlQXQoNikpe2Nhc2UgMTA1OnJldHVybiBsPWgucmVwbGFjZShcIi1pdGVtc1wiLFwiXCIpLE4raCtOK1wiYm94LVwiK2wrRitcImZsZXgtXCIrbCtoO2Nhc2UgMTE1OnJldHVybiBOK2grRitcImZsZXgtaXRlbS1cIitoLnJlcGxhY2UoeSxcIlwiKStoO2RlZmF1bHQ6cmV0dXJuIE4raCtGK1wiZmxleC1saW5lLXBhY2tcIitoLnJlcGxhY2UoXCJhbGlnbi1jb250ZW50XCIsXCJcIikucmVwbGFjZSh5LFwiXCIpK2h9YnJlYWs7Y2FzZSA5NzM6Y2FzZSA5ODk6aWYoaC5jaGFyQ29kZUF0KDMpIT09UXx8MTIyPT09aC5jaGFyQ29kZUF0KDQpKWJyZWFrO2Nhc2UgOTMxOmNhc2UgOTUzOmlmKHRydWU9PT1qLnRlc3QoZSkpaWYoMTE1PT09KGw9ZS5zdWJzdHJpbmcoZS5pbmRleE9mKFwiOlwiKSsxKSkuY2hhckNvZGVBdCgwKSlyZXR1cm4gS2UoZS5yZXBsYWNlKFwic3RyZXRjaFwiLFwiZmlsbC1hdmFpbGFibGVcIiksYSxyLGMpLnJlcGxhY2UoXCI6ZmlsbC1hdmFpbGFibGVcIixcIjpzdHJldGNoXCIpO2Vsc2UgcmV0dXJuIGgucmVwbGFjZShsLE4rbCkraC5yZXBsYWNlKGwsUytsLnJlcGxhY2UoXCJmaWxsLVwiLFwiXCIpKStoO2JyZWFrO2Nhc2UgOTYyOmlmKGg9TitoKygxMDI9PT1oLmNoYXJDb2RlQXQoNSk/RitoOlwiXCIpK2gscitjPT09MjExJiYxMDU9PT1oLmNoYXJDb2RlQXQoMTMpJiZoLmluZGV4T2YoXCJ0cmFuc2Zvcm1cIiwxMCk+MClyZXR1cm4gaC5zdWJzdHJpbmcoMCxoLmluZGV4T2YoXCI7XCIsMjcpKzEpLnJlcGxhY2UoaSxcIiQxXCIrTitcIiQyXCIpK2h9cmV0dXJuIGh9ZnVuY3Rpb24gTGUoZSxhKXt2YXIgcj1lLmluZGV4T2YoMT09PWE/XCI6XCI6XCJ7XCIpLGM9ZS5zdWJzdHJpbmcoMCwzIT09YT9yOjEwKSxzPWUuc3Vic3RyaW5nKHIrMSxlLmxlbmd0aC0xKTtyZXR1cm4gT2UoMiE9PWE/YzpjLnJlcGxhY2UoTyxcIiQxXCIpLHMsYSl9ZnVuY3Rpb24gTWUoZSxhKXt2YXIgcj1LZShhLGEuY2hhckNvZGVBdCgwKSxhLmNoYXJDb2RlQXQoMSksYS5jaGFyQ29kZUF0KDIpKTtyZXR1cm4gciE9PWErXCI7XCI/ci5yZXBsYWNlKCQsXCIgb3IgKCQxKVwiKS5zdWJzdHJpbmcoNCk6XCIoXCIrYStcIilcIn1mdW5jdGlvbiBQZShlLGEscixjLHMsdCxpLGYsbixsKXtmb3IodmFyIG8saD0wLHU9YTtoPHllOysraClzd2l0Y2gobz0kZVtoXS5jYWxsKFRlLGUsdSxyLGMscyx0LGksZixuLGwpKXtjYXNlIHZvaWQgMDpjYXNlIGZhbHNlOmNhc2UgdHJ1ZTpjYXNlIG51bGw6YnJlYWs7ZGVmYXVsdDp1PW99aWYodSE9PWEpcmV0dXJuIHV9ZnVuY3Rpb24gUWUoZSxhLHIsYyl7Zm9yKHZhciBzPWErMTtzPHI7KytzKXN3aXRjaChjLmNoYXJDb2RlQXQocykpe2Nhc2UgWjppZihlPT09VClpZihjLmNoYXJDb2RlQXQocy0xKT09PVQmJmErMiE9PXMpcmV0dXJuIHMrMTticmVhaztjYXNlIEk6aWYoZT09PVopcmV0dXJuIHMrMX1yZXR1cm4gc31mdW5jdGlvbiBSZShlKXtmb3IodmFyIGEgaW4gZSl7dmFyIHI9ZVthXTtzd2l0Y2goYSl7Y2FzZVwia2V5ZnJhbWVcIjpCZT0wfHI7YnJlYWs7Y2FzZVwiZ2xvYmFsXCI6Q2U9MHxyO2JyZWFrO2Nhc2VcImNhc2NhZGVcIjpnZT0wfHI7YnJlYWs7Y2FzZVwiY29tcHJlc3NcIjp3ZT0wfHI7YnJlYWs7Y2FzZVwic2VtaWNvbG9uXCI6dmU9MHxyO2JyZWFrO2Nhc2VcInByZXNlcnZlXCI6bWU9MHxyO2JyZWFrO2Nhc2VcInByZWZpeFwiOmlmKE9lPW51bGwsIXIpQWU9MDtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIpQWU9MTtlbHNlIEFlPTIsT2U9cn19cmV0dXJuIFJlfWZ1bmN0aW9uIFRlKGEscil7aWYodm9pZCAwIT09dGhpcyYmdGhpcy5jb25zdHJ1Y3Rvcj09PVRlKXJldHVybiBlKGEpO3ZhciBzPWEsdD1zLmNoYXJDb2RlQXQoMCk7aWYodDwzMyl0PShzPXMudHJpbSgpKS5jaGFyQ29kZUF0KDApO2lmKEJlPjApRGU9cy5yZXBsYWNlKGQsdD09PUc/XCJcIjpcIi1cIik7aWYodD0xLDE9PT1nZSlHZT1zO2Vsc2UgRWU9czt2YXIgaSxmPVtHZV07aWYoeWU+MClpZih2b2lkIDAhPT0oaT1QZSh6ZSxyLGYsZixwZSxiZSwwLDAsMCwwKSkmJlwic3RyaW5nXCI9PXR5cGVvZiBpKXI9aTt2YXIgbj1IZSh4ZSxmLHIsMCwwKTtpZih5ZT4wKWlmKHZvaWQgMCE9PShpPVBlKGplLG4sZixmLHBlLGJlLG4ubGVuZ3RoLDAsMCwwKSkmJlwic3RyaW5nXCIhPXR5cGVvZihuPWkpKXQ9MDtyZXR1cm4gRGU9XCJcIixHZT1cIlwiLEVlPVwiXCIsa2U9MCxwZT0xLGJlPTEsd2UqdD09MD9uOm4ucmVwbGFjZShjLFwiXCIpLnJlcGxhY2UoZyxcIlwiKS5yZXBsYWNlKEEsXCIkMVwiKS5yZXBsYWNlKEMsXCIkMVwiKS5yZXBsYWNlKHcsXCIgXCIpfWlmKFRlLnVzZT1mdW5jdGlvbiBlKGEpe3N3aXRjaChhKXtjYXNlIHZvaWQgMDpjYXNlIG51bGw6eWU9JGUubGVuZ3RoPTA7YnJlYWs7ZGVmYXVsdDppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSRlW3llKytdPWE7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgYSlmb3IodmFyIHI9MCxjPWEubGVuZ3RoO3I8YzsrK3IpZShhW3JdKTtlbHNlIHFlPTB8ISFhfXJldHVybiBlfSxUZS5zZXQ9UmUsdm9pZCAwIT09YSlSZShhKTtyZXR1cm4gVGV9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxpcy5taW4uanMubWFwIiwidmFyIHNhZmVJc05hTiA9IE51bWJlci5pc05hTiB8fFxuICAgIGZ1bmN0aW9uIHBvbnlmaWxsKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSB2YWx1ZTtcbiAgICB9O1xuZnVuY3Rpb24gaXNFcXVhbChmaXJzdCwgc2Vjb25kKSB7XG4gICAgaWYgKGZpcnN0ID09PSBzZWNvbmQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzYWZlSXNOYU4oZmlyc3QpICYmIHNhZmVJc05hTihzZWNvbmQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBhcmVJbnB1dHNFcXVhbChuZXdJbnB1dHMsIGxhc3RJbnB1dHMpIHtcbiAgICBpZiAobmV3SW5wdXRzLmxlbmd0aCAhPT0gbGFzdElucHV0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0lucHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWlzRXF1YWwobmV3SW5wdXRzW2ldLCBsYXN0SW5wdXRzW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBtZW1vaXplT25lKHJlc3VsdEZuLCBpc0VxdWFsKSB7XG4gICAgaWYgKGlzRXF1YWwgPT09IHZvaWQgMCkgeyBpc0VxdWFsID0gYXJlSW5wdXRzRXF1YWw7IH1cbiAgICB2YXIgbGFzdFRoaXM7XG4gICAgdmFyIGxhc3RBcmdzID0gW107XG4gICAgdmFyIGxhc3RSZXN1bHQ7XG4gICAgdmFyIGNhbGxlZE9uY2UgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBtZW1vaXplZCgpIHtcbiAgICAgICAgdmFyIG5ld0FyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG5ld0FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsbGVkT25jZSAmJiBsYXN0VGhpcyA9PT0gdGhpcyAmJiBpc0VxdWFsKG5ld0FyZ3MsIGxhc3RBcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFJlc3VsdCA9IHJlc3VsdEZuLmFwcGx5KHRoaXMsIG5ld0FyZ3MpO1xuICAgICAgICBjYWxsZWRPbmNlID0gdHJ1ZTtcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0QXJncyA9IG5ld0FyZ3M7XG4gICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVPbmU7XG4iLCIvKipcbiAqIGxvZGFzaCA0LjAuMSAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IDIwMTItMjAxNiBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDE2IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAdHlwZSBGdW5jdGlvblxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgY29ycmVjdGx5IGNsYXNzaWZpZWQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBjb3JyZWN0bHkgY2xhc3NpZmllZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3RyaW5nKDEpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaW5nO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4vdHlwZW9mLmpzXCIpW1wiZGVmYXVsdFwiXTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoXCIuL3RvUHJpbWl0aXZlLmpzXCIpO1xuZnVuY3Rpb24gdG9Qcm9wZXJ0eUtleSh0KSB7XG4gIHZhciBpID0gdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7XG4gIHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogaSArIFwiXCI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHRvUHJvcGVydHlLZXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfT3ZlcmxvYWRZaWVsZChlLCBkKSB7XG4gIHRoaXMudiA9IGUsIHRoaXMuayA9IGQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9PdmVybG9hZFlpZWxkLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIHJlZ2VuZXJhdG9yRGVmaW5lID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JEZWZpbmUuanNcIik7XG5mdW5jdGlvbiBfcmVnZW5lcmF0b3IoKSB7XG4gIC8qISByZWdlbmVyYXRvci1ydW50aW1lIC0tIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLiAtLSBsaWNlbnNlIChNSVQpOiBodHRwczovL2dpdGh1Yi5jb20vYmFiZWwvYmFiZWwvYmxvYi9tYWluL3BhY2thZ2VzL2JhYmVsLWhlbHBlcnMvTElDRU5TRSAqL1xuICB2YXIgZSxcbiAgICB0LFxuICAgIHIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbCA6IHt9LFxuICAgIG4gPSByLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiLFxuICAgIG8gPSByLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuICBmdW5jdGlvbiBpKHIsIG4sIG8sIGkpIHtcbiAgICB2YXIgYyA9IG4gJiYgbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBuIDogR2VuZXJhdG9yLFxuICAgICAgdSA9IE9iamVjdC5jcmVhdGUoYy5wcm90b3R5cGUpO1xuICAgIHJldHVybiByZWdlbmVyYXRvckRlZmluZSh1LCBcIl9pbnZva2VcIiwgZnVuY3Rpb24gKHIsIG4sIG8pIHtcbiAgICAgIHZhciBpLFxuICAgICAgICBjLFxuICAgICAgICB1LFxuICAgICAgICBmID0gMCxcbiAgICAgICAgcCA9IG8gfHwgW10sXG4gICAgICAgIHkgPSAhMSxcbiAgICAgICAgRyA9IHtcbiAgICAgICAgICBwOiAwLFxuICAgICAgICAgIG46IDAsXG4gICAgICAgICAgdjogZSxcbiAgICAgICAgICBhOiBkLFxuICAgICAgICAgIGY6IGQuYmluZChlLCA0KSxcbiAgICAgICAgICBkOiBmdW5jdGlvbiBkKHQsIHIpIHtcbiAgICAgICAgICAgIHJldHVybiBpID0gdCwgYyA9IDAsIHUgPSBlLCBHLm4gPSByLCBhO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIGQociwgbikge1xuICAgICAgICBmb3IgKGMgPSByLCB1ID0gbiwgdCA9IDA7ICF5ICYmIGYgJiYgIW8gJiYgdCA8IHAubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICB2YXIgbyxcbiAgICAgICAgICAgIGkgPSBwW3RdLFxuICAgICAgICAgICAgZCA9IEcucCxcbiAgICAgICAgICAgIGwgPSBpWzJdO1xuICAgICAgICAgIHIgPiAzID8gKG8gPSBsID09PSBuKSAmJiAodSA9IGlbKGMgPSBpWzRdKSA/IDUgOiAoYyA9IDMsIDMpXSwgaVs0XSA9IGlbNV0gPSBlKSA6IGlbMF0gPD0gZCAmJiAoKG8gPSByIDwgMiAmJiBkIDwgaVsxXSkgPyAoYyA9IDAsIEcudiA9IG4sIEcubiA9IGlbMV0pIDogZCA8IGwgJiYgKG8gPSByIDwgMyB8fCBpWzBdID4gbiB8fCBuID4gbCkgJiYgKGlbNF0gPSByLCBpWzVdID0gbiwgRy5uID0gbCwgYyA9IDApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobyB8fCByID4gMSkgcmV0dXJuIGE7XG4gICAgICAgIHRocm93IHkgPSAhMCwgbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiAobywgcCwgbCkge1xuICAgICAgICBpZiAoZiA+IDEpIHRocm93IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICAgIGZvciAoeSAmJiAxID09PSBwICYmIGQocCwgbCksIGMgPSBwLCB1ID0gbDsgKHQgPSBjIDwgMiA/IGUgOiB1KSB8fCAheTspIHtcbiAgICAgICAgICBpIHx8IChjID8gYyA8IDMgPyAoYyA+IDEgJiYgKEcubiA9IC0xKSwgZChjLCB1KSkgOiBHLm4gPSB1IDogRy52ID0gdSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMiwgaSkge1xuICAgICAgICAgICAgICBpZiAoYyB8fCAobyA9IFwibmV4dFwiKSwgdCA9IGlbb10pIHtcbiAgICAgICAgICAgICAgICBpZiAoISh0ID0gdC5jYWxsKGksIHUpKSkgdGhyb3cgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICAgICAgICAgICAgaWYgKCF0LmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgICAgIHUgPSB0LnZhbHVlLCBjIDwgMiAmJiAoYyA9IDApO1xuICAgICAgICAgICAgICB9IGVsc2UgMSA9PT0gYyAmJiAodCA9IGlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbChpKSwgYyA8IDIgJiYgKHUgPSBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICdcIiArIG8gKyBcIicgbWV0aG9kXCIpLCBjID0gMSk7XG4gICAgICAgICAgICAgIGkgPSBlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgodCA9ICh5ID0gRy5uIDwgMCkgPyB1IDogci5jYWxsKG4sIEcpKSAhPT0gYSkgYnJlYWs7XG4gICAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgICAgaSA9IGUsIGMgPSAxLCB1ID0gdDtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZiA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHQsXG4gICAgICAgICAgZG9uZTogeVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KHIsIG8sIGkpLCAhMCksIHU7XG4gIH1cbiAgdmFyIGEgPSB7fTtcbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG4gIHQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBjID0gW11bbl0gPyB0KHQoW11bbl0oKSkpIDogKHJlZ2VuZXJhdG9yRGVmaW5lKHQgPSB7fSwgbiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSksIHQpLFxuICAgIHUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShjKTtcbiAgZnVuY3Rpb24gZihlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihlLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAoZS5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgcmVnZW5lcmF0b3JEZWZpbmUoZSwgbywgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSksIGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh1KSwgZTtcbiAgfVxuICByZXR1cm4gR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHJlZ2VuZXJhdG9yRGVmaW5lKHUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpLCByZWdlbmVyYXRvckRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbiksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiLCByZWdlbmVyYXRvckRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgbywgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSwgcmVnZW5lcmF0b3JEZWZpbmUodSksIHJlZ2VuZXJhdG9yRGVmaW5lKHUsIG8sIFwiR2VuZXJhdG9yXCIpLCByZWdlbmVyYXRvckRlZmluZSh1LCBuLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pLCByZWdlbmVyYXRvckRlZmluZSh1LCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSksIChtb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvciA9IGZ1bmN0aW9uIF9yZWdlbmVyYXRvcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdzogaSxcbiAgICAgIG06IGZcbiAgICB9O1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMpKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvciwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9yZWdlbmVyYXRvckRlZmluZShlLCByLCBuLCB0KSB7XG4gIHZhciBpID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICB0cnkge1xuICAgIGkoe30sIFwiXCIsIHt9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGkgPSAwO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yRGVmaW5lID0gZnVuY3Rpb24gcmVnZW5lcmF0b3JEZWZpbmUoZSwgciwgbiwgdCkge1xuICAgIGZ1bmN0aW9uIG8ociwgbikge1xuICAgICAgX3JlZ2VuZXJhdG9yRGVmaW5lKGUsIHIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UociwgbiwgZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgciA/IGkgPyBpKGUsIHIsIHtcbiAgICAgIHZhbHVlOiBuLFxuICAgICAgZW51bWVyYWJsZTogIXQsXG4gICAgICBjb25maWd1cmFibGU6ICF0LFxuICAgICAgd3JpdGFibGU6ICF0XG4gICAgfSkgOiBlW3JdID0gbiA6IChvKFwibmV4dFwiLCAwKSwgbyhcInRocm93XCIsIDEpLCBvKFwicmV0dXJuXCIsIDIpKTtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBfcmVnZW5lcmF0b3JEZWZpbmUoZSwgciwgbiwgdCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvckRlZmluZSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciByZWdlbmVyYXRvciA9IHJlcXVpcmUoXCIuL3JlZ2VuZXJhdG9yLmpzXCIpO1xudmFyIHJlZ2VuZXJhdG9yQXN5bmNJdGVyYXRvciA9IHJlcXVpcmUoXCIuL3JlZ2VuZXJhdG9yQXN5bmNJdGVyYXRvci5qc1wiKTtcbmZ1bmN0aW9uIF9yZWdlbmVyYXRvckFzeW5jR2VuKHIsIGUsIHQsIG8sIG4pIHtcbiAgcmV0dXJuIG5ldyByZWdlbmVyYXRvckFzeW5jSXRlcmF0b3IocmVnZW5lcmF0b3IoKS53KHIsIGUsIHQsIG8pLCBuIHx8IFByb21pc2UpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfcmVnZW5lcmF0b3JBc3luY0dlbiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBPdmVybG9hZFlpZWxkID0gcmVxdWlyZShcIi4vT3ZlcmxvYWRZaWVsZC5qc1wiKTtcbnZhciByZWdlbmVyYXRvckRlZmluZSA9IHJlcXVpcmUoXCIuL3JlZ2VuZXJhdG9yRGVmaW5lLmpzXCIpO1xuZnVuY3Rpb24gQXN5bmNJdGVyYXRvcih0LCBlKSB7XG4gIGZ1bmN0aW9uIG4ociwgbywgaSwgZikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgYyA9IHRbcl0obyksXG4gICAgICAgIHUgPSBjLnZhbHVlO1xuICAgICAgcmV0dXJuIHUgaW5zdGFuY2VvZiBPdmVybG9hZFlpZWxkID8gZS5yZXNvbHZlKHUudikudGhlbihmdW5jdGlvbiAodCkge1xuICAgICAgICBuKFwibmV4dFwiLCB0LCBpLCBmKTtcbiAgICAgIH0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIG4oXCJ0aHJvd1wiLCB0LCBpLCBmKTtcbiAgICAgIH0pIDogZS5yZXNvbHZlKHUpLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgYy52YWx1ZSA9IHQsIGkoYyk7XG4gICAgICB9LCBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gbihcInRocm93XCIsIHQsIGksIGYpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgZih0KTtcbiAgICB9XG4gIH1cbiAgdmFyIHI7XG4gIHRoaXMubmV4dCB8fCAocmVnZW5lcmF0b3JEZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCByZWdlbmVyYXRvckRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAYXN5bmNJdGVyYXRvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pKSwgcmVnZW5lcmF0b3JEZWZpbmUodGhpcywgXCJfaW52b2tlXCIsIGZ1bmN0aW9uICh0LCBvLCBpKSB7XG4gICAgZnVuY3Rpb24gZigpIHtcbiAgICAgIHJldHVybiBuZXcgZShmdW5jdGlvbiAoZSwgcikge1xuICAgICAgICBuKHQsIGksIGUsIHIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByID0gciA/IHIudGhlbihmLCBmKSA6IGYoKTtcbiAgfSwgITApO1xufVxubW9kdWxlLmV4cG9ydHMgPSBBc3luY0l0ZXJhdG9yLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIGlmIChcbiAgICAgICh1dGlscy5pc0Jsb2IocmVxdWVzdERhdGEpIHx8IHV0aWxzLmlzRmlsZShyZXF1ZXN0RGF0YSkpICYmXG4gICAgICByZXF1ZXN0RGF0YS50eXBlXG4gICAgKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknLCAncGFyYW1zJ107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3RpbWVvdXRNZXNzYWdlJywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJywgJ2RlY29tcHJlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ21heEJvZHlMZW5ndGgnLCAnbWF4UmVkaXJlY3RzJywgJ3RyYW5zcG9ydCcsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnLCAncmVzcG9uc2VFbmNvZGluZydcbiAgXTtcbiAgdmFyIGRpcmVjdE1lcmdlS2V5cyA9IFsndmFsaWRhdGVTdGF0dXMnXTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkaXJlY3RNZXJnZUtleXMsIGZ1bmN0aW9uIG1lcmdlKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cylcbiAgICAuY29uY2F0KGRpcmVjdE1lcmdlS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzEpXG4gICAgLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJvdW5kJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkTWFwID0gR2V0SW50cmluc2ljKCclTWFwJScsIHRydWUpO1xuXG4vKiogQHR5cGUgezxLLCBWPih0aGlzQXJnOiBNYXA8SywgVj4sIGtleTogSykgPT4gVn0gKi9cbnZhciAkbWFwR2V0ID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmdldCcsIHRydWUpO1xuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+LCBrZXk6IEssIHZhbHVlOiBWKSA9PiB2b2lkfSAqL1xudmFyICRtYXBTZXQgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuc2V0JywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLLCBWPih0aGlzQXJnOiBNYXA8SywgVj4sIGtleTogSykgPT4gYm9vbGVhbn0gKi9cbnZhciAkbWFwSGFzID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+LCBrZXk6IEspID0+IGJvb2xlYW59ICovXG52YXIgJG1hcERlbGV0ZSA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5kZWxldGUnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEssIFY+KHRoaXNBcmc6IE1hcDxLLCBWPikgPT4gbnVtYmVyfSAqL1xudmFyICRtYXBTaXplID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLnNpemUnLCB0cnVlKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gISEkTWFwICYmIC8qKiBAdHlwZSB7RXhjbHVkZTxpbXBvcnQoJy4nKSwgZmFsc2U+fSAqLyBmdW5jdGlvbiBnZXRTaWRlQ2hhbm5lbE1hcCgpIHtcblx0LyoqIEB0eXBlZGVmIHtSZXR1cm5UeXBlPHR5cGVvZiBnZXRTaWRlQ2hhbm5lbE1hcD59IENoYW5uZWwgKi9cblx0LyoqIEB0eXBlZGVmIHtQYXJhbWV0ZXJzPENoYW5uZWxbJ2dldCddPlswXX0gSyAqL1xuXHQvKiogQHR5cGVkZWYge1BhcmFtZXRlcnM8Q2hhbm5lbFsnc2V0J10+WzFdfSBWICovXG5cblx0LyoqIEB0eXBlIHtNYXA8SywgVj4gfCB1bmRlZmluZWR9ICovIHZhciAkbTtcblxuXHQvKiogQHR5cGUge0NoYW5uZWx9ICovXG5cdHZhciBjaGFubmVsID0ge1xuXHRcdGFzc2VydDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCFjaGFubmVsLmhhcyhrZXkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTaWRlIGNoYW5uZWwgZG9lcyBub3QgY29udGFpbiAnICsgaW5zcGVjdChrZXkpKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdCdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9ICRtYXBEZWxldGUoJG0sIGtleSk7XG5cdFx0XHRcdGlmICgkbWFwU2l6ZSgkbSkgPT09IDApIHtcblx0XHRcdFx0XHQkbSA9IHZvaWQgdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdHJldHVybiAkbWFwR2V0KCRtLCBrZXkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0cmV0dXJuICRtYXBIYXMoJG0sIGtleSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRpZiAoISRtKSB7XG5cdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgY2FuJ3QgaGFuZGxlIG5hcnJvd2luZyBhIHZhcmlhYmxlIGluc2lkZSBhIGNsb3N1cmVcblx0XHRcdFx0JG0gPSBuZXcgJE1hcCgpO1xuXHRcdFx0fVxuXHRcdFx0JG1hcFNldCgkbSwga2V5LCB2YWx1ZSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETzogZmlndXJlIG91dCB3aHkgVFMgaXMgZXJyb3JpbmcgaGVyZVxuXHRyZXR1cm4gY2hhbm5lbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbnZhciAkZ09QRCA9IHJlcXVpcmUoJy4vZ09QRCcpO1xuXG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9SZWZsZWN0LmdldFByb3RvdHlwZU9mJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9ICh0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgUmVmbGVjdC5nZXRQcm90b3R5cGVPZikgfHwgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRPYmplY3QgPSByZXF1aXJlKCdlcy1vYmplY3QtYXRvbXMnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vT2JqZWN0LmdldFByb3RvdHlwZU9mJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9ICRPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciAkY2FsbCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25DYWxsJyk7XG52YXIgJGFjdHVhbEFwcGx5ID0gcmVxdWlyZSgnLi9hY3R1YWxBcHBseScpO1xuXG4vKiogQHR5cGUgeyhhcmdzOiBbRnVuY3Rpb24sIHRoaXNBcmc/OiB1bmtub3duLCAuLi5hcmdzOiB1bmtub3duW11dKSA9PiBGdW5jdGlvbn0gVE9ETyBGSVhNRSwgZmluZCBhIHdheSB0byB1c2UgaW1wb3J0KCcuJykgKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJpbmRCYXNpYyhhcmdzKSB7XG5cdGlmIChhcmdzLmxlbmd0aCA8IDEgfHwgdHlwZW9mIGFyZ3NbMF0gIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYSBmdW5jdGlvbiBpcyByZXF1aXJlZCcpO1xuXHR9XG5cdHJldHVybiAkYWN0dWFsQXBwbHkoYmluZCwgJGNhbGwsIGFyZ3MpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZnVuY3Rpb25BcHBseScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZEJhc2ljID0gcmVxdWlyZSgnY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMnKTtcblxuLyoqIEB0eXBlIHsodGhpc0FyZzogc3RyaW5nLCBzZWFyY2hTdHJpbmc6IHN0cmluZywgcG9zaXRpb24/OiBudW1iZXIpID0+IG51bWJlcn0gKi9cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kQmFzaWMoW0dldEludHJpbnNpYygnJVN0cmluZy5wcm90b3R5cGUuaW5kZXhPZiUnKV0pO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdC8qIGVzbGludCBuby1leHRyYS1wYXJlbnM6IDAgKi9cblxuXHR2YXIgaW50cmluc2ljID0gLyoqIEB0eXBlIHsodGhpczogdW5rbm93biwgLi4uYXJnczogdW5rbm93bltdKSA9PiB1bmtub3dufSAqLyAoR2V0SW50cmluc2ljKG5hbWUsICEhYWxsb3dNaXNzaW5nKSk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmRCYXNpYygvKiogQHR5cGUge2NvbnN0fSAqLyAoW2ludHJpbnNpY10pKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbnZhciBoZXhUYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgICAgICBhcnJheS5wdXNoKCclJyArICgoaSA8IDE2ID8gJzAnIDogJycpICsgaS50b1N0cmluZygxNikpLnRvVXBwZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn0oKSk7XG5cbnZhciBjb21wYWN0UXVldWUgPSBmdW5jdGlvbiBjb21wYWN0UXVldWUocXVldWUpIHtcbiAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgaXRlbSA9IHF1ZXVlLnBvcCgpO1xuICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICB2YXIgY29tcGFjdGVkID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpbal0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhY3RlZC5wdXNoKG9ialtqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdGVtLm9ialtpdGVtLnByb3BdID0gY29tcGFjdGVkO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGFycmF5VG9PYmplY3QgPSBmdW5jdGlvbiBhcnJheVRvT2JqZWN0KHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSBvcHRpb25zICYmIG9wdGlvbnMucGxhaW5PYmplY3RzID8geyBfX3Byb3RvX186IG51bGwgfSA6IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgb2JqW2ldID0gc291cmNlW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiAwICovXG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHNvdXJjZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQucHVzaChzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChvcHRpb25zICYmIChvcHRpb25zLnBsYWluT2JqZWN0cyB8fCBvcHRpb25zLmFsbG93UHJvdG90eXBlcykpXG4gICAgICAgICAgICAgICAgfHwgIWhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNvdXJjZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtzb3VyY2VdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbdGFyZ2V0LCBzb3VyY2VdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldCB8fCB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gW3RhcmdldF0uY29uY2F0KHNvdXJjZSk7XG4gICAgfVxuXG4gICAgdmFyIG1lcmdlVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgIWlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBtZXJnZVRhcmdldCA9IGFycmF5VG9PYmplY3QodGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgaWYgKGhhcy5jYWxsKHRhcmdldCwgaSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0SXRlbSA9IHRhcmdldFtpXTtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0SXRlbSAmJiB0eXBlb2YgdGFyZ2V0SXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gbWVyZ2UodGFyZ2V0SXRlbSwgaXRlbSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldO1xuXG4gICAgICAgIGlmIChoYXMuY2FsbChhY2MsIGtleSkpIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gbWVyZ2UoYWNjW2tleV0sIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBtZXJnZVRhcmdldCk7XG59O1xuXG52YXIgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduU2luZ2xlU291cmNlKHRhcmdldCwgc291cmNlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICBhY2Nba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHRhcmdldCk7XG59O1xuXG52YXIgZGVjb2RlID0gZnVuY3Rpb24gKHN0ciwgZGVmYXVsdERlY29kZXIsIGNoYXJzZXQpIHtcbiAgICB2YXIgc3RyV2l0aG91dFBsdXMgPSBzdHIucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAvLyB1bmVzY2FwZSBuZXZlciB0aHJvd3MsIG5vIHRyeS4uLmNhdGNoIG5lZWRlZDpcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzLnJlcGxhY2UoLyVbMC05YS1mXXsyfS9naSwgdW5lc2NhcGUpO1xuICAgIH1cbiAgICAvLyB1dGYtOFxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyV2l0aG91dFBsdXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0cldpdGhvdXRQbHVzO1xuICAgIH1cbn07XG5cbnZhciBsaW1pdCA9IDEwMjQ7XG5cbi8qIGVzbGludCBvcGVyYXRvci1saW5lYnJlYWs6IFsyLCBcImJlZm9yZVwiXSAqL1xuXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKHN0ciwgZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQsIGtpbmQsIGZvcm1hdCkge1xuICAgIC8vIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSB3cml0dGVuIGJ5IEJyaWFuIFdoaXRlIChtc2NkZXgpIGZvciB0aGUgaW8uanMgY29yZSBxdWVyeXN0cmluZyBsaWJyYXJ5LlxuICAgIC8vIEl0IGhhcyBiZWVuIGFkYXB0ZWQgaGVyZSBmb3Igc3RyaWN0ZXIgYWRoZXJlbmNlIHRvIFJGQyAzOTg2XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gc3RyO1xuICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3ltYm9sJykge1xuICAgICAgICBzdHJpbmcgPSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3RyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0cmluZyA9IFN0cmluZyhzdHIpO1xuICAgIH1cblxuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZShzdHJpbmcpLnJlcGxhY2UoLyV1WzAtOWEtZl17NH0vZ2ksIGZ1bmN0aW9uICgkMCkge1xuICAgICAgICAgICAgcmV0dXJuICclMjYlMjMnICsgcGFyc2VJbnQoJDAuc2xpY2UoMiksIDE2KSArICclM0InO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdHJpbmcubGVuZ3RoOyBqICs9IGxpbWl0KSB7XG4gICAgICAgIHZhciBzZWdtZW50ID0gc3RyaW5nLmxlbmd0aCA+PSBsaW1pdCA/IHN0cmluZy5zbGljZShqLCBqICsgbGltaXQpIDogc3RyaW5nO1xuICAgICAgICB2YXIgYXJyID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYyA9IHNlZ21lbnQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC5cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDVGIC8vIF9cbiAgICAgICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05XG4gICAgICAgICAgICAgICAgfHwgKGMgPj0gMHg0MSAmJiBjIDw9IDB4NUEpIC8vIGEtelxuICAgICAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgICAgICAgICB8fCAoZm9ybWF0ID09PSBmb3JtYXRzLlJGQzE3MzggJiYgKGMgPT09IDB4MjggfHwgYyA9PT0gMHgyOSkpIC8vICggKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gc2VnbWVudC5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoXSA9IGhleFRhYmxlW2NdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4VGFibGVbMHhDMCB8IChjID4+IDYpXVxuICAgICAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aF0gPSBoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXVxuICAgICAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV1cbiAgICAgICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc2VnbWVudC5jaGFyQ29kZUF0KGkpICYgMHgzRkYpKTtcblxuICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV1cbiAgICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gMTIpICYgMHgzRildXG4gICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgICAgIH1cblxuICAgICAgICBvdXQgKz0gYXJyLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG52YXIgY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWUpIHtcbiAgICB2YXIgcXVldWUgPSBbeyBvYmo6IHsgbzogdmFsdWUgfSwgcHJvcDogJ28nIH1dO1xuICAgIHZhciByZWZzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWVbaV07XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgcmVmcy5pbmRleE9mKHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wYWN0UXVldWUocXVldWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIGlzUmVnRXhwID0gZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cbnZhciBpc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISEob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSk7XG59O1xuXG52YXIgY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoYSwgYikge1xuICAgIHJldHVybiBbXS5jb25jYXQoYSwgYik7XG59O1xuXG52YXIgbWF5YmVNYXAgPSBmdW5jdGlvbiBtYXliZU1hcCh2YWwsIGZuKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgICB2YXIgbWFwcGVkID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBtYXBwZWQucHVzaChmbih2YWxbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwcGVkO1xuICAgIH1cbiAgICByZXR1cm4gZm4odmFsKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFycmF5VG9PYmplY3Q6IGFycmF5VG9PYmplY3QsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgY29tYmluZTogY29tYmluZSxcbiAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgICBpc1JlZ0V4cDogaXNSZWdFeHAsXG4gICAgbWF5YmVNYXA6IG1heWJlTWFwLFxuICAgIG1lcmdlOiBtZXJnZVxufTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBZnJpa2FhbnMgW2FmXVxuLy8hIGF1dGhvciA6IFdlcm5lciBNb2xsZW50emUgOiBodHRwczovL2dpdGh1Yi5jb20vd2VybmVybVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGFmID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYWYnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcmllX0ZlYnJ1YXJpZV9NYWFydF9BcHJpbF9NZWlfSnVuaWVfSnVsaWVfQXVndXN0dXNfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGVzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NcnRfQXByX01laV9KdW5fSnVsX0F1Z19TZXBfT2t0X05vdl9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU29uZGFnX01hYW5kYWdfRGluc2RhZ19Xb2Vuc2RhZ19Eb25kZXJkYWdfVnJ5ZGFnX1NhdGVyZGFnJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU29uX01hYV9EaW5fV29lX0Rvbl9WcnlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX01hX0RpX1dvX0RvX1ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvdm18bm0vaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL15ubSQvaS50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICd2bScgOiAnVk0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdubScgOiAnTk0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1ZhbmRhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tNw7RyZSBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tHaXN0ZXIgb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhYXNdIGRkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29vciAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgZ2VsZWRlJyxcbiAgICAgICAgICAgIHM6IFwiJ24gcGFhciBzZWtvbmRlc1wiLFxuICAgICAgICAgICAgc3M6ICclZCBzZWtvbmRlcycsXG4gICAgICAgICAgICBtOiBcIiduIG1pbnV1dFwiLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGUnLFxuICAgICAgICAgICAgaDogXCInbiB1dXJcIixcbiAgICAgICAgICAgIGhoOiAnJWQgdXJlJyxcbiAgICAgICAgICAgIGQ6IFwiJ24gZGFnXCIsXG4gICAgICAgICAgICBkZDogJyVkIGRhZScsXG4gICAgICAgICAgICBNOiBcIiduIG1hYW5kXCIsXG4gICAgICAgICAgICBNTTogJyVkIG1hYW5kZScsXG4gICAgICAgICAgICB5OiBcIiduIGphYXJcIixcbiAgICAgICAgICAgIHl5OiAnJWQgamFhcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCA/ICdzdGUnIDogJ2RlJylcbiAgICAgICAgICAgICk7IC8vIFRoYW5rcyB0byBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pqdXBpdGVyXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTWFhbmRhZyBpcyBkaWUgZWVyc3RlIGRhZyB2YW4gZGllIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIERpZSB3ZWVrIHdhdCBkaWUgNGRlIEphbnVhcmllIGJldmF0IGlzIGRpZSBlZXJzdGUgd2VlayB2YW4gZGllIGphYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYWY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIFthcl1cbi8vISBhdXRob3IgOiBBYmRlbCBTYWlkOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG4vLyEgYXV0aG9yIDogQWhtZWQgRWxraGF0aWJcbi8vISBhdXRob3IgOiBmb3JhYmkgaHR0cHM6Ly9naXRodWIuY29tL2ZvcmFiaVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfZoScsXG4gICAgICAgICAgICAyOiAn2aInLFxuICAgICAgICAgICAgMzogJ9mjJyxcbiAgICAgICAgICAgIDQ6ICfZpCcsXG4gICAgICAgICAgICA1OiAn2aUnLFxuICAgICAgICAgICAgNjogJ9mmJyxcbiAgICAgICAgICAgIDc6ICfZpycsXG4gICAgICAgICAgICA4OiAn2agnLFxuICAgICAgICAgICAgOTogJ9mpJyxcbiAgICAgICAgICAgIDA6ICfZoCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgICAgICfZoic6ICcyJyxcbiAgICAgICAgICAgICfZoyc6ICczJyxcbiAgICAgICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgICAgICfZpSc6ICc1JyxcbiAgICAgICAgICAgICfZpic6ICc2JyxcbiAgICAgICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgICAgICfZqCc6ICc4JyxcbiAgICAgICAgICAgICfZqSc6ICc5JyxcbiAgICAgICAgICAgICfZoCc6ICcwJyxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFsRm9ybSA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICByZXR1cm4gbiA9PT0gMFxuICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgIDogbiA9PT0gMVxuICAgICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgICA6IG4gPT09IDJcbiAgICAgICAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgICAgICAgIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTBcbiAgICAgICAgICAgICAgICAgICAgICA/IDNcbiAgICAgICAgICAgICAgICAgICAgICA6IG4gJSAxMDAgPj0gMTFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gNFxuICAgICAgICAgICAgICAgICAgICAgICAgOiA1O1xuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxzID0ge1xuICAgICAgICAgICAgczogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYq9in2YbZitipJyxcbiAgICAgICAgICAgICAgICAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9ir2KfZhtmK2KrYp9mGJywgJ9ir2KfZhtmK2KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINir2YjYp9mGJyxcbiAgICAgICAgICAgICAgICAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgICAgICAnJWQg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGg6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LPYp9i52KknLFxuICAgICAgICAgICAgICAgICfYs9in2LnYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGQ6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2YrZiNmFJyxcbiAgICAgICAgICAgICAgICAn2YrZiNmFINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9mK2YjZhdin2YYnLCAn2YrZiNmF2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINmK2YjZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIE06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LTZh9ixJyxcbiAgICAgICAgICAgICAgICAn2LTZh9ixINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsdinJyxcbiAgICAgICAgICAgICAgICAnJWQg2LTZh9ixJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB5OiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi52KfZhScsXG4gICAgICAgICAgICAgICAgJ9i52KfZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYudmI2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINi52KfZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBwbHVyYWxGb3JtKG51bWJlciksXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHJbd2l0aG91dFN1ZmZpeCA/IDAgOiAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzID0gW1xuICAgICAgICAgICAgJ9mK2YbYp9mK2LEnLFxuICAgICAgICAgICAgJ9mB2KjYsdin2YrYsScsXG4gICAgICAgICAgICAn2YXYp9ix2LMnLFxuICAgICAgICAgICAgJ9ij2KjYsdmK2YQnLFxuICAgICAgICAgICAgJ9mF2KfZitmIJyxcbiAgICAgICAgICAgICfZitmI2YbZitmIJyxcbiAgICAgICAgICAgICfZitmI2YTZitmIJyxcbiAgICAgICAgICAgICfYo9i62LPYt9izJyxcbiAgICAgICAgICAgICfYs9io2KrZhdio2LEnLFxuICAgICAgICAgICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgICAgICAgICAn2YbZiNmB2YXYqNixJyxcbiAgICAgICAgICAgICfYr9mK2LPZhdio2LEnLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGFyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXInLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2YvYpyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfYqNi52K8gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIHNzOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIG06IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgbW06IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgaDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBoaDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBkOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIGRkOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIE06IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgTU06IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgeTogcGx1cmFsaXplKCd5JyksXG4gICAgICAgICAgICB5eTogcGx1cmFsaXplKCd5JyksXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1vZodmi2aPZpNml2abZp9mo2anZoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoQWxnZXJpYSkgW2FyLWR6XVxuLy8hIGF1dGhvciA6IEFtaW5lIFJvdWtoOiBodHRwczovL2dpdGh1Yi5jb20vQW1pbmUyN1xuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcbi8vISBhdXRob3IgOiBBaG1lZCBFbGtoYXRpYlxuLy8hIGF1dGhvciA6IGZvcmFiaSBodHRwczovL2dpdGh1Yi5jb20vZm9yYWJpXG4vLyEgYXV0aG9yIDogTm91cmVkZGluZSBMT1VBSEVESiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub3VyZWRkaW5lbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHBsdXJhbEZvcm0gPSBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgcmV0dXJuIG4gPT09IDBcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IG4gPT09IDFcbiAgICAgICAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgICAgICAgOiBuID09PSAyXG4gICAgICAgICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICAgICAgICA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwXG4gICAgICAgICAgICAgICAgICAgICAgPyAzXG4gICAgICAgICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDExXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogNTtcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFscyA9IHtcbiAgICAgICAgICAgIHM6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYq9mI2KfZhicsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgICAgICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLFxuICAgICAgICAgICAgICAgICfYr9mC2YrZgtipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2K/ZgtmK2YLYqtin2YYnLCAn2K/ZgtmK2YLYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBoOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAn2LPYp9i52Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYs9in2LnYqtin2YYnLCAn2LPYp9i52KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYqScsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINmK2YjZhScsXG4gICAgICAgICAgICAgICAgJ9mK2YjZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YXZi9inJyxcbiAgICAgICAgICAgICAgICAnJWQg2YrZiNmFJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBNOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi02YfYsScsXG4gICAgICAgICAgICAgICAgJ9i02YfYsSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYtNmH2LHYp9mGJywgJ9i02YfYsdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgICAgICclZCDYtNmH2LHYpycsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYudin2YUnLFxuICAgICAgICAgICAgICAgICfYudin2YUg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2LnYp9mF2KfZhicsICfYudin2YXZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2LnZiNin2YUnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YXZi9inJyxcbiAgICAgICAgICAgICAgICAnJWQg2LnYp9mFJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBwbHVyYWxzW3VdW3BsdXJhbEZvcm0obnVtYmVyKV07XG4gICAgICAgICAgICAgICAgaWYgKGYgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfYrNin2YbZgdmKJyxcbiAgICAgICAgICAgICfZgdmK2YHYsdmKJyxcbiAgICAgICAgICAgICfZhdin2LHYsycsXG4gICAgICAgICAgICAn2KPZgdix2YrZhCcsXG4gICAgICAgICAgICAn2YXYp9mKJyxcbiAgICAgICAgICAgICfYrNmI2KfZhicsXG4gICAgICAgICAgICAn2KzZiNmK2YTZitipJyxcbiAgICAgICAgICAgICfYo9mI2KonLFxuICAgICAgICAgICAgJ9iz2KjYqtmF2KjYsScsXG4gICAgICAgICAgICAn2KPZg9iq2YjYqNixJyxcbiAgICAgICAgICAgICfZhtmI2YHZhdio2LEnLFxuICAgICAgICAgICAgJ9iv2YrYs9mF2KjYsScsXG4gICAgICAgIF07XG5cbiAgICB2YXIgYXJEeiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWR6Jywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC9cXHUyMDBGTS9cXHUyMDBGWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9mL2Kcg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2KjYudivICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBzczogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBtOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIG1tOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIGg6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgaGg6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgZDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBkZDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBNOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIE1NOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIHk6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICAgICAgeXk6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhckR6O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoS3V3YWl0KSBbYXIta3ddXG4vLyEgYXV0aG9yIDogTnVzcmV0IFBhcmxhazogaHR0cHM6Ly9naXRodWIuY29tL251c3JldHBhcmxha1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGFyS3cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1rdycsIHtcbiAgICAgICAgbW9udGhzOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KrZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9in2K3Yr1/Yp9iq2YbZitmGX9ir2YTYp9ir2KfYoV/Yp9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3M6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG06ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQ6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeTogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eTogJyVkINiz2YbZiNin2KonLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhckt3O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoTGlieWEpIFthci1seV1cbi8vISBhdXRob3IgOiBBbGkgSG1lcjogaHR0cHM6Ly9naXRodWIuY29tL2tpa29hbmlzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJzEnLFxuICAgICAgICAgICAgMjogJzInLFxuICAgICAgICAgICAgMzogJzMnLFxuICAgICAgICAgICAgNDogJzQnLFxuICAgICAgICAgICAgNTogJzUnLFxuICAgICAgICAgICAgNjogJzYnLFxuICAgICAgICAgICAgNzogJzcnLFxuICAgICAgICAgICAgODogJzgnLFxuICAgICAgICAgICAgOTogJzknLFxuICAgICAgICAgICAgMDogJzAnLFxuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBuID09PSAwXG4gICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgOiBuID09PSAxXG4gICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgIDogbiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDMgJiYgbiAlIDEwMCA8PSAxMFxuICAgICAgICAgICAgICAgICAgICAgID8gM1xuICAgICAgICAgICAgICAgICAgICAgIDogbiAlIDEwMCA+PSAxMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyA0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IDU7XG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbHMgPSB7XG4gICAgICAgICAgICBzOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINir2KfZhtmK2KknLFxuICAgICAgICAgICAgICAgICfYq9in2YbZitipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KvZiNin2YYnLFxuICAgICAgICAgICAgICAgICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgICAgICAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgICAgICAn2K/ZgtmK2YLYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9iv2YLZitmC2KrYp9mGJywgJ9iv2YLZitmC2KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgICAgICAnJWQg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgaDogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYs9in2LnYqScsXG4gICAgICAgICAgICAgICAgJ9iz2KfYudipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2LPYp9i52KrYp9mGJywgJ9iz2KfYudiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KknLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYqScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZDogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDZitmI2YUnLFxuICAgICAgICAgICAgICAgICfZitmI2YUg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgICAgICAnJWQg2YrZiNmF2YvYpycsXG4gICAgICAgICAgICAgICAgJyVkINmK2YjZhScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgTTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYtNmH2LEnLFxuICAgICAgICAgICAgICAgICfYtNmH2LEg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2LTZh9ix2KfZhicsICfYtNmH2LHZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgICAgICAnJWQg2LTZh9ix2KcnLFxuICAgICAgICAgICAgICAgICclZCDYtNmH2LEnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHk6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LnYp9mFJyxcbiAgICAgICAgICAgICAgICAn2LnYp9mFINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9i52KfZhdin2YYnLCAn2LnYp9mF2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9i52YjYp9mFJyxcbiAgICAgICAgICAgICAgICAnJWQg2LnYp9mF2YvYpycsXG4gICAgICAgICAgICAgICAgJyVkINi52KfZhScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxpemUgPSBmdW5jdGlvbiAodSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gcGx1cmFsc1t1XVtwbHVyYWxGb3JtKG51bWJlcildO1xuICAgICAgICAgICAgICAgIGlmIChmID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBtb250aHMgPSBbXG4gICAgICAgICAgICAn2YrZhtin2YrYsScsXG4gICAgICAgICAgICAn2YHYqNix2KfZitixJyxcbiAgICAgICAgICAgICfZhdin2LHYsycsXG4gICAgICAgICAgICAn2KPYqNix2YrZhCcsXG4gICAgICAgICAgICAn2YXYp9mK2YgnLFxuICAgICAgICAgICAgJ9mK2YjZhtmK2YgnLFxuICAgICAgICAgICAgJ9mK2YjZhNmK2YgnLFxuICAgICAgICAgICAgJ9ij2LrYs9i32LMnLFxuICAgICAgICAgICAgJ9iz2KjYqtmF2KjYsScsXG4gICAgICAgICAgICAn2KPZg9iq2YjYqNixJyxcbiAgICAgICAgICAgICfZhtmI2YHZhdio2LEnLFxuICAgICAgICAgICAgJ9iv2YrYs9mF2KjYsScsXG4gICAgICAgIF07XG5cbiAgICB2YXIgYXJMeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWx5Jywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC9cXHUyMDBGTS9cXHUyMDBGWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9mL2Kcg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2KjYudivICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBzczogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBtOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIG1tOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIGg6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgaGg6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgZDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBkZDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBNOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIE1NOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIHk6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICAgICAgeXk6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhckx5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoTW9yb2NjbykgW2FyLW1hXVxuLy8hIGF1dGhvciA6IEVsRmFkaWxpIFlhc3NpbmUgOiBodHRwczovL2dpdGh1Yi5jb20vRWxGYWRpbGlZXG4vLyEgYXV0aG9yIDogQWJkZWwgU2FpZCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBhck1hID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItbWEnLCB7XG4gICAgICAgIG1vbnRoczogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYp9it2K9f2KfYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgICAgICBNTTogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHk6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyTWE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChQYWxlc3RpbmUpIFthci1wc11cbi8vISBhdXRob3IgOiBNYWpkIEFsLVNoaWhhYmkgOiBodHRwczovL2dpdGh1Yi5jb20vbWFqZGFsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ9mhJyxcbiAgICAgICAgICAgIDI6ICfZoicsXG4gICAgICAgICAgICAzOiAn2aMnLFxuICAgICAgICAgICAgNDogJ9mkJyxcbiAgICAgICAgICAgIDU6ICfZpScsXG4gICAgICAgICAgICA2OiAn2aYnLFxuICAgICAgICAgICAgNzogJ9mnJyxcbiAgICAgICAgICAgIDg6ICfZqCcsXG4gICAgICAgICAgICA5OiAn2aknLFxuICAgICAgICAgICAgMDogJ9mgJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ9mhJzogJzEnLFxuICAgICAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAgICAgJ9mkJzogJzQnLFxuICAgICAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAgICAgJ9mnJzogJzcnLFxuICAgICAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAgICAgJ9mgJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGFyUHMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1wcycsIHtcbiAgICAgICAgbW9udGhzOiAn2YPYp9mG2YjZhiDYp9mE2KvYp9mG2Ypf2LTYqNin2Ldf2KLYsNin2LFf2YbZitiz2KfZhl/Yo9mK2ZHYp9ixX9it2LLZitix2KfZhl/YqtmF2ZHZiNiyX9ii2Khf2KPZitmE2YjZhF/Yqti02LHZiiDYp9mE2KPZiNmR2YRf2KrYtNix2YrZhiDYp9mE2KvYp9mG2Ypf2YPYp9mG2YjZhiDYp9mE2KPZiNmR2YQnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9mD2aJf2LTYqNin2Ldf2KLYsNin2LFf2YbZitiz2KfZhl/Yo9mK2ZHYp9ixX9it2LLZitix2KfZhl/YqtmF2ZHZiNiyX9ii2Khf2KPZitmE2YjZhF/YqtmhX9iq2aJf2YPZoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3M6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG06ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQ6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeTogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eTogJyVkINiz2YbZiNin2KonLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9b2aPZpNml2abZp9mo2anZoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnNwbGl0KCcnKSAvLyByZXZlcnNlZCBzaW5jZSBuZWdhdGl2ZSBsb29rYmVoaW5kIG5vdCBzdXBwb3J0ZWQgZXZlcnl3aGVyZVxuICAgICAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgICAgICAuam9pbignJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW9mh2aJdKD8hW1xcdTA2MmFcXHUwNjQzXSkvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnNwbGl0KCcnKVxuICAgICAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgICAgICAuam9pbignJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhclBzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoU2F1ZGkgQXJhYmlhKSBbYXItc2FdXG4vLyEgYXV0aG9yIDogU3VoYWlsIEFsa293YWlsZWV0IDogaHR0cHM6Ly9naXRodWIuY29tL3hzb2hcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn2aEnLFxuICAgICAgICAgICAgMjogJ9miJyxcbiAgICAgICAgICAgIDM6ICfZoycsXG4gICAgICAgICAgICA0OiAn2aQnLFxuICAgICAgICAgICAgNTogJ9mlJyxcbiAgICAgICAgICAgIDY6ICfZpicsXG4gICAgICAgICAgICA3OiAn2acnLFxuICAgICAgICAgICAgODogJ9moJyxcbiAgICAgICAgICAgIDk6ICfZqScsXG4gICAgICAgICAgICAwOiAn2aAnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICAgICAn2aInOiAnMicsXG4gICAgICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICAgICAn2aUnOiAnNScsXG4gICAgICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICAgICAn2agnOiAnOCcsXG4gICAgICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICAgICAn2aAnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgYXJTYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXNhJywge1xuICAgICAgICBtb250aHM6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZitmIX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiF/Yo9i62LPYt9izX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3M6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG06ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQ6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeTogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eTogJyVkINiz2YbZiNin2KonLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyU2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlICA6ICBBcmFiaWMgKFR1bmlzaWEpIFthci10bl1cbi8vISBhdXRob3IgOiBOYWRlciBUb3VrYWJyaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9uYWRlcmlvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYXJUbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXRuJywge1xuICAgICAgICBtb250aHM6ICfYrNin2YbZgdmKX9mB2YrZgdix2Ypf2YXYp9ix2LNf2KPZgdix2YrZhF/Zhdin2Ypf2KzZiNin2YZf2KzZiNmK2YTZitipX9ij2YjYql/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3M6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG06ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQ6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeTogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eTogJyVkINiz2YbZiNin2KonLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJUbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBemVyYmFpamFuaSBbYXpdXG4vLyEgYXV0aG9yIDogdG9wY2hpeWV2IDogaHR0cHM6Ly9naXRodWIuY29tL3RvcGNoaXlldlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiAnLWluY2knLFxuICAgICAgICA1OiAnLWluY2knLFxuICAgICAgICA4OiAnLWluY2knLFxuICAgICAgICA3MDogJy1pbmNpJyxcbiAgICAgICAgODA6ICctaW5jaScsXG4gICAgICAgIDI6ICctbmNpJyxcbiAgICAgICAgNzogJy1uY2knLFxuICAgICAgICAyMDogJy1uY2knLFxuICAgICAgICA1MDogJy1uY2knLFxuICAgICAgICAzOiAnLcO8bmPDvCcsXG4gICAgICAgIDQ6ICctw7xuY8O8JyxcbiAgICAgICAgMTAwOiAnLcO8bmPDvCcsXG4gICAgICAgIDY6ICctbmPEsScsXG4gICAgICAgIDk6ICctdW5jdScsXG4gICAgICAgIDEwOiAnLXVuY3UnLFxuICAgICAgICAzMDogJy11bmN1JyxcbiAgICAgICAgNjA6ICctxLFuY8SxJyxcbiAgICAgICAgOTA6ICctxLFuY8SxJyxcbiAgICB9O1xuXG4gICAgdmFyIGF6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXonLCB7XG4gICAgICAgIG1vbnRoczogJ3lhbnZhcl9mZXZyYWxfbWFydF9hcHJlbF9tYXlfaXl1bl9peXVsX2F2cXVzdF9zZW50eWFicl9va3R5YWJyX25veWFicl9kZWthYnInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAneWFuX2Zldl9tYXJfYXByX21heV9peW5faXlsX2F2cV9zZW5fb2t0X25veV9kZWsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ0JhemFyX0JhemFyIGVydMmZc2lfw4fJmXLFn8mZbmLJmSBheMWfYW3EsV/Dh8mZcsWfyZluYsmZX0PDvG3JmSBheMWfYW3EsV9Dw7xtyZlfxZ7JmW5iyZknLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0Jhel9CekVfw4dBeF/Dh8mZcl9DQXhfQ8O8bV/FnsmZbicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdCel9CRV/Dh0Ffw4fJmV9DQV9Dw7xfxZ7JmScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2J1Z8O8biBzYWF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3NhYmFoIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW2fJmWzJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tkw7xuyZluXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1trZcOnyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgc29ucmEnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMmZdnbJmWwnLFxuICAgICAgICAgICAgczogJ2JpciBuZcOnyZkgc2FuaXnJmScsXG4gICAgICAgICAgICBzczogJyVkIHNhbml5yZknLFxuICAgICAgICAgICAgbTogJ2JpciBkyZlxaXHJmScsXG4gICAgICAgICAgICBtbTogJyVkIGTJmXFpccmZJyxcbiAgICAgICAgICAgIGg6ICdiaXIgc2FhdCcsXG4gICAgICAgICAgICBoaDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgZDogJ2JpciBnw7xuJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZ8O8bicsXG4gICAgICAgICAgICBNOiAnYmlyIGF5JyxcbiAgICAgICAgICAgIE1NOiAnJWQgYXknLFxuICAgICAgICAgICAgeTogJ2JpciBpbCcsXG4gICAgICAgICAgICB5eTogJyVkIGlsJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2dlY8mZfHPJmWjJmXJ8Z8O8bmTDvHp8YXjFn2FtLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14oZ8O8bmTDvHp8YXjFn2FtKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnZWPJmSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc8mZaMmZcic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZ8O8bmTDvHonO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2F4xZ9hbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0oxLFuY8SxfGluY2l8bmNpfMO8bmPDvHxuY8SxfHVuY3UpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLcSxbmPEsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSAobnVtYmVyICUgMTAwKSAtIGEsXG4gICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCZWxhcnVzaWFuIFtiZV1cbi8vISBhdXRob3IgOiBEbWl0cnkgRGVtaWRvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9kZW1pZG92OTFcbi8vISBhdXRob3I6IFByYWxlc2thOiBodHRwOi8vcHJhbGVza2EucHJvL1xuLy8hIEF1dGhvciA6IE1lbmVsaW9uIEVsZW5zw7psZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTFcbiAgICAgICAgICAgID8gZm9ybXNbMF1cbiAgICAgICAgICAgIDogbnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApXG4gICAgICAgICAgICAgID8gZm9ybXNbMV1cbiAgICAgICAgICAgICAgOiBmb3Jtc1syXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgc3M6IHdpdGhvdXRTdWZmaXggPyAn0YHQtdC60YPQvdC00LBf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyA6ICfRgdC10LrRg9C90LTRg1/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbW06IHdpdGhvdXRTdWZmaXggPyAn0YXQstGW0LvRltC90LBf0YXQstGW0LvRltC90Ytf0YXQstGW0LvRltC9JyA6ICfRhdCy0ZbQu9GW0L3Rg1/RhdCy0ZbQu9GW0L3Ri1/RhdCy0ZbQu9GW0L0nLFxuICAgICAgICAgICAgaGg6IHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LBf0LPQsNC00LfRltC90Ytf0LPQsNC00LfRltC9JyA6ICfQs9Cw0LTQt9GW0L3Rg1/Qs9Cw0LTQt9GW0L3Ri1/Qs9Cw0LTQt9GW0L0nLFxuICAgICAgICAgICAgZGQ6ICfQtNC30LXQvdGMX9C00L3Rll/QtNC30ZHQvScsXG4gICAgICAgICAgICBNTTogJ9C80LXRgdGP0YZf0LzQtdGB0Y/RhtGLX9C80LXRgdGP0YbQsNGeJyxcbiAgICAgICAgICAgIHl5OiAn0LPQvtC0X9Cz0LDQtNGLX9Cz0LDQtNC+0Z4nLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9GF0LLRltC70ZbQvdCwJyA6ICfRhdCy0ZbQu9GW0L3Rgyc7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaCcpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9Cz0LDQtNC30ZbQvdCwJyA6ICfQs9Cw0LTQt9GW0L3Rgyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBiZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JlJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GB0YLRg9C00LfQtdC90Y9f0LvRjtGC0LDQs9CwX9GB0LDQutCw0LLRltC60LBf0LrRgNCw0YHQsNCy0ZbQutCwX9GC0YDQsNGe0L3Rj1/Rh9GN0YDQstC10L3Rj1/Qu9GW0L/QtdC90Y9f0LbQvdGW0Z7QvdGPX9Cy0LXRgNCw0YHQvdGPX9C60LDRgdGC0YDRi9GH0L3RltC60LBf0LvRltGB0YLQsNC/0LDQtNCwX9GB0L3QtdC20L3Rjycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0YHRgtGD0LTQt9C10L3RjF/Qu9GO0YLRi1/RgdCw0LrQsNCy0ZbQul/QutGA0LDRgdCw0LLRltC6X9GC0YDQsNCy0LXQvdGMX9GH0Y3RgNCy0LXQvdGMX9C70ZbQv9C10L3RjF/QttC90ZbQstC10L3RjF/QstC10YDQsNGB0LXQvdGMX9C60LDRgdGC0YDRi9GH0L3RltC6X9C70ZbRgdGC0LDQv9Cw0LRf0YHQvdC10LbQsNC90YwnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfRgdGC0YPQtF/Qu9GO0YJf0YHQsNC6X9C60YDQsNGBX9GC0YDQsNCyX9GH0Y3RgNCyX9C70ZbQv1/QttC90ZbQsl/QstC10YBf0LrQsNGB0YJf0LvRltGB0YJf0YHQvdC10LYnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfQvdGP0LTQt9C10LvRjl/Qv9Cw0L3Rj9C00LfQtdC70LDQul/QsNGe0YLQvtGA0LDQul/RgdC10YDQsNC00YNf0YfQsNGG0LLQtdGAX9C/0Y/RgtC90ZbRhtGDX9GB0YPQsdC+0YLRgycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0L3Rj9C00LfQtdC70Y9f0L/QsNC90Y/QtNC30LXQu9Cw0Lpf0LDRntGC0L7RgNCw0Lpf0YHQtdGA0LDQtNCwX9GH0LDRhtCy0LXRgF/Qv9GP0YLQvdGW0YbQsF/RgdGD0LHQvtGC0LAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9cXFsgP1vQo9GD0Z5dID8oPzrQvNGW0L3Rg9C70YPRjnzQvdCw0YHRgtGD0L/QvdGD0Y4pPyA/XFxdID9kZGRkLyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0L3QtF/Qv9C9X9Cw0YJf0YHRgF/Rh9GGX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWSDQsy4nLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkg0LMuLCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkg0LMuLCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Ch0ZHQvdC90Y8g0Z5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0JfQsNGe0YLRgNCwINGeXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Cj0YfQvtGA0LAg0Z5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdb0KNdIGRkZGQgW9GeXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0KMg0LzRltC90YPQu9GD0Y5dIGRkZGQgW9GeXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQoyDQvNGW0L3Rg9C70YtdIGRkZGQgW9GeXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0L/RgNCw0LcgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzINGC0LDQvNGDJyxcbiAgICAgICAgICAgIHM6ICfQvdC10LrQsNC70YzQutGWINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkOiAn0LTQt9C10L3RjCcsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06ICfQvNC10YHRj9GGJyxcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogJ9Cz0L7QtCcsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9GLfNGA0LDQvdGW0YbRi3zQtNC90Y980LLQtdGH0LDRgNCwLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9Cw0YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0YsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdGW0YbRiyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LTQvdGPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQstC10YfQsNGA0LAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGWfNGLfNCz0LApLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobnVtYmVyICUgMTAgPT09IDIgfHwgbnVtYmVyICUgMTAgPT09IDMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIgJSAxMDAgIT09IDEyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIgJSAxMDAgIT09IDEzXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG51bWJlciArICct0ZYnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bWJlciArICct0YsnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9CwJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQnVsZ2FyaWFuIFtiZ11cbi8vISBhdXRob3IgOiBLcmFzZW4gQm9yaXNvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rcmF6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYmcgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdiZycsIHtcbiAgICAgICAgbW9udGhzOiAn0Y/QvdGD0LDRgNC4X9GE0LXQstGA0YPQsNGA0Lhf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Llf0Y7QvdC4X9GO0LvQuF/QsNCy0LPRg9GB0YJf0YHQtdC/0YLQtdC80LLRgNC4X9C+0LrRgtC+0LzQstGA0Lhf0L3QvtC10LzQstGA0Lhf0LTQtdC60LXQvNCy0YDQuCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRj9C90YNf0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNC5X9GO0L3QuF/RjtC70Lhf0LDQstCzX9GB0LXQv1/QvtC60YJf0L3QvtC1X9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfQvdC10LTQtdC70Y9f0L/QvtC90LXQtNC10LvQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNGP0LTQsF/Rh9C10YLQstGK0YDRgtGK0Lpf0L/QtdGC0YrQul/RgdGK0LHQvtGC0LAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQvdC10LRf0L/QvtC9X9Cy0YLQvl/RgdGA0Y9f0YfQtdGCX9C/0LXRgl/RgdGK0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0JTQvdC10YEg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0KPRgtGA0LUg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JLRh9C10YDQsCDQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9Cc0LjQvdCw0LvQsNGC0LBdIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9Cc0LjQvdCw0LvQuNGPXSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9GB0LvQtdC0ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfQv9GA0LXQtNC4ICVzJyxcbiAgICAgICAgICAgIHM6ICfQvdGP0LrQvtC70LrQviDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBzczogJyVkINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIG06ICfQvNC40L3Rg9GC0LAnLFxuICAgICAgICAgICAgbW06ICclZCDQvNC40L3Rg9GC0LgnLFxuICAgICAgICAgICAgaDogJ9GH0LDRgScsXG4gICAgICAgICAgICBoaDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgICAgIGQ6ICfQtNC10L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQtNC10L3QsCcsXG4gICAgICAgICAgICB3OiAn0YHQtdC00LzQuNGG0LAnLFxuICAgICAgICAgICAgd3c6ICclZCDRgdC10LTQvNC40YbQuCcsXG4gICAgICAgICAgICBNOiAn0LzQtdGB0LXRhicsXG4gICAgICAgICAgICBNTTogJyVkINC80LXRgdC10YbQsCcsXG4gICAgICAgICAgICB5OiAn0LPQvtC00LjQvdCwJyxcbiAgICAgICAgICAgIHl5OiAnJWQg0LPQvtC00LjQvdC4JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgbGFzdDJEaWdpdHMgPSBudW1iZXIgJSAxMDA7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQsic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQvSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID4gMTAgJiYgbGFzdDJEaWdpdHMgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QstC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YDQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gNyB8fCBsYXN0RGlnaXQgPT09IDgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QvNC4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBiZztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCYW1iYXJhIFtibV1cbi8vISBhdXRob3IgOiBFc3RlbGxlIENvbW1lbnQgOiBodHRwczovL2dpdGh1Yi5jb20vZXN0ZWxsZWNvbW1lbnRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBibSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JtJywge1xuICAgICAgICBtb250aHM6ICdaYW53dXlla2Fsb19GZXd1cnV5ZWthbG9fTWFyaXNpa2Fsb19Bd2lyaWxpa2Fsb19NyZtrYWxvX1p1d8mbbmthbG9fWnVsdXlla2Fsb19VdGlrYWxvX1PJm3RhbmJ1cnVrYWxvX8mUa3V0yZRidXJ1a2Fsb19Ob3dhbmJ1cnVrYWxvX0Rlc2FuYnVydWthbG8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnWmFuX0Zld19NYXJfQXdpX03Jm19adXdfWnVsX1V0aV9TyZt0X8mUa3VfTm93X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdLYXJpX050yZtuyZtuX1RhcmF0YV9BcmFiYV9BbGFtaXNhX0p1bWFfU2liaXJpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnS2FyX050yZtfVGFyX0FyYV9BbGFfSnVtX1NpYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdLYV9OdF9UYV9Bcl9BbF9KdV9TaScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZIFtsyZtyyZtdIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIE1NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWSBbbMmbcsmbXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0JpIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tTaW5pIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtkb24gbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0t1bnUgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3TJm23Jm25lbiBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMga8mUbsmUJyxcbiAgICAgICAgICAgIHBhc3Q6ICdhIGLJmyAlcyBiyZQnLFxuICAgICAgICAgICAgczogJ3NhbmdhIGRhbWEgZGFtYScsXG4gICAgICAgICAgICBzczogJ3Nla29uZGkgJWQnLFxuICAgICAgICAgICAgbTogJ21pbml0aSBrZWxlbicsXG4gICAgICAgICAgICBtbTogJ21pbml0aSAlZCcsXG4gICAgICAgICAgICBoOiAnbMmbcsmbIGtlbGVuJyxcbiAgICAgICAgICAgIGhoOiAnbMmbcsmbICVkJyxcbiAgICAgICAgICAgIGQ6ICd0aWxlIGtlbGVuJyxcbiAgICAgICAgICAgIGRkOiAndGlsZSAlZCcsXG4gICAgICAgICAgICBNOiAna2FsbyBrZWxlbicsXG4gICAgICAgICAgICBNTTogJ2thbG8gJWQnLFxuICAgICAgICAgICAgeTogJ3NhbiBrZWxlbicsXG4gICAgICAgICAgICB5eTogJ3NhbiAlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBibTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCZW5nYWxpIFtibl1cbi8vISBhdXRob3IgOiBLYXVzaGlrIEdhbmRoaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYXVzaGlrZ2FuZGhpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+CnpycsXG4gICAgICAgICAgICAyOiAn4KeoJyxcbiAgICAgICAgICAgIDM6ICfgp6knLFxuICAgICAgICAgICAgNDogJ+CnqicsXG4gICAgICAgICAgICA1OiAn4KerJyxcbiAgICAgICAgICAgIDY6ICfgp6wnLFxuICAgICAgICAgICAgNzogJ+CnrScsXG4gICAgICAgICAgICA4OiAn4KeuJyxcbiAgICAgICAgICAgIDk6ICfgp68nLFxuICAgICAgICAgICAgMDogJ+CnpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgp6cnOiAnMScsXG4gICAgICAgICAgICAn4KeoJzogJzInLFxuICAgICAgICAgICAgJ+CnqSc6ICczJyxcbiAgICAgICAgICAgICfgp6onOiAnNCcsXG4gICAgICAgICAgICAn4KerJzogJzUnLFxuICAgICAgICAgICAgJ+CnrCc6ICc2JyxcbiAgICAgICAgICAgICfgp60nOiAnNycsXG4gICAgICAgICAgICAn4KeuJzogJzgnLFxuICAgICAgICAgICAgJ+Cnryc6ICc5JyxcbiAgICAgICAgICAgICfgp6YnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgYm4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibicsIHtcbiAgICAgICAgbW9udGhzOiAn4Kac4Ka+4Kao4KeB4Kef4Ka+4Kaw4Ka/X+Cmq+Cnh+CmrOCnjeCmsOCngeCnn+CmvuCmsOCmv1/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4Kaw4Ka/4KayX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4Kay4Ka+4KaHX+CmhuCml+CmuOCnjeCmn1/gprjgp4fgpqrgp43gpp/gp4fgpq7gp43gpqzgprBf4KaF4KaV4KeN4Kaf4KeL4Kas4KawX+CmqOCmreCnh+CmruCnjeCmrOCmsF/gpqHgpr/gprjgp4fgpq7gp43gpqzgprAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CmnOCmvuCmqOCngV/gpqvgp4fgpqzgp43gprDgp4Ff4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4KafX+CmheCmleCnjeCmn+Cni1/gpqjgpq3gp4df4Kah4Ka/4Ka44KeHJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn4Kaw4Kas4Ka/4Kas4Ka+4KawX+CmuOCni+CmruCmrOCmvuCmsF/gpq7gppngp43gppfgprLgpqzgpr7gprBf4Kas4KeB4Kan4Kas4Ka+4KawX+CmrOCng+CmueCmuOCnjeCmquCmpOCmv+CmrOCmvuCmsF/gprbgp4HgppXgp43gprDgpqzgpr7gprBf4Ka24Kao4Ka/4Kas4Ka+4KawJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4Kaw4Kas4Ka/X+CmuOCni+Cmrl/gpq7gppngp43gppfgprJf4Kas4KeB4KanX+CmrOCng+CmueCmuOCnjeCmquCmpOCmv1/gprbgp4HgppXgp43gprBf4Ka24Kao4Ka/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaX4KayX+CmrOCngeCmp1/gpqzgp4Pgprlf4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4Ka44Kau4KefJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KaG4KacXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CmhuCml+CmvuCmruCngOCmleCmvuCmsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+Cml+CmpOCmleCmvuCmsl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KaX4KakXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCmquCmsOCnhycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4KaG4KaX4KeHJyxcbiAgICAgICAgICAgIHM6ICfgppXgp5/gp4fgppUg4Ka44KeH4KaV4KeH4Kao4KeN4KahJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Ka44KeH4KaV4KeH4Kao4KeN4KahJyxcbiAgICAgICAgICAgIG06ICfgpo/gppUg4Kau4Ka/4Kao4Ka/4KafJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Kau4Ka/4Kao4Ka/4KafJyxcbiAgICAgICAgICAgIGg6ICfgpo/gppUg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgICAgIGQ6ICfgpo/gppUg4Kam4Ka/4KaoJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Kam4Ka/4KaoJyxcbiAgICAgICAgICAgIE06ICfgpo/gppUg4Kau4Ka+4Ka4JyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Kau4Ka+4Ka4JyxcbiAgICAgICAgICAgIHk6ICfgpo/gppUg4Kas4Kab4KawJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Kas4Kab4KawJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cnp+CnqOCnqeCnquCnq+CnrOCnreCnruCnr+Cnpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CmsOCmvuCmpHzgprjgppXgpr7gprJ84Kam4KeB4Kaq4KeB4KawfOCmrOCmv+CmleCmvuCmsnzgprDgpr7gpqQvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4Kaw4Ka+4KakJyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4Kam4KeB4Kaq4KeB4KawJyAmJiBob3VyIDwgNSkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+CmrOCmv+CmleCmvuCmsidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmuOCmleCmvuCmsic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kam4KeB4Kaq4KeB4KawJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpqzgpr/gppXgpr7gprInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmsOCmvuCmpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBibjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCZW5nYWxpIChCYW5nbGFkZXNoKSBbYm4tYmRdXG4vLyEgYXV0aG9yIDogQXNyYWYgSG9zc2FpbiBQYXRvYXJ5IDogaHR0cHM6Ly9naXRodWIuY29tL2FzaHdvb2xmb3JkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+CnpycsXG4gICAgICAgICAgICAyOiAn4KeoJyxcbiAgICAgICAgICAgIDM6ICfgp6knLFxuICAgICAgICAgICAgNDogJ+CnqicsXG4gICAgICAgICAgICA1OiAn4KerJyxcbiAgICAgICAgICAgIDY6ICfgp6wnLFxuICAgICAgICAgICAgNzogJ+CnrScsXG4gICAgICAgICAgICA4OiAn4KeuJyxcbiAgICAgICAgICAgIDk6ICfgp68nLFxuICAgICAgICAgICAgMDogJ+CnpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgp6cnOiAnMScsXG4gICAgICAgICAgICAn4KeoJzogJzInLFxuICAgICAgICAgICAgJ+CnqSc6ICczJyxcbiAgICAgICAgICAgICfgp6onOiAnNCcsXG4gICAgICAgICAgICAn4KerJzogJzUnLFxuICAgICAgICAgICAgJ+CnrCc6ICc2JyxcbiAgICAgICAgICAgICfgp60nOiAnNycsXG4gICAgICAgICAgICAn4KeuJzogJzgnLFxuICAgICAgICAgICAgJ+Cnryc6ICc5JyxcbiAgICAgICAgICAgICfgp6YnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgYm5CZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JuLWJkJywge1xuICAgICAgICBtb250aHM6ICfgppzgpr7gpqjgp4Hgp5/gpr7gprDgpr9f4Kar4KeH4Kas4KeN4Kaw4KeB4Kef4Ka+4Kaw4Ka/X+CmruCmvuCmsOCnjeCmml/gpo/gpqrgp43gprDgpr/gprJf4Kau4KeHX+CmnOCngeCmqF/gppzgp4HgprLgpr7gpodf4KaG4KaX4Ka44KeN4KafX+CmuOCnh+CmquCnjeCmn+Cnh+CmruCnjeCmrOCmsF/gpoXgppXgp43gpp/gp4vgpqzgprBf4Kao4Kat4KeH4Kau4KeN4Kas4KawX+CmoeCmv+CmuOCnh+CmruCnjeCmrOCmsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4Kac4Ka+4Kao4KeBX+Cmq+Cnh+CmrOCnjeCmsOCngV/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4Kaw4Ka/4KayX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4Kay4Ka+4KaHX+CmhuCml+CmuOCnjeCmn1/gprjgp4fgpqrgp43gpp9f4KaF4KaV4KeN4Kaf4KeLX+CmqOCmreCnh1/gpqHgpr/gprjgp4cnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfgprDgpqzgpr/gpqzgpr7gprBf4Ka44KeL4Kau4Kas4Ka+4KawX+CmruCmmeCnjeCml+CmsuCmrOCmvuCmsF/gpqzgp4Hgpqfgpqzgpr7gprBf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4Ka/4Kas4Ka+4KawX+CmtuCngeCmleCnjeCmsOCmrOCmvuCmsF/gprbgpqjgpr/gpqzgpr7gprAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml+Cmsl/gpqzgp4Hgpqdf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4Ka/X+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4Kaw4Kas4Ka/X+CmuOCni+Cmrl/gpq7gppngp43gppfgprJf4Kas4KeB4KanX+CmrOCng+CmuV/gprbgp4HgppXgp43gprBf4Ka24Kao4Ka/Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgprjgpq7gp58nLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgpobgppxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KaG4KaX4Ka+4Kau4KeA4KaV4Ka+4KayXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KaX4Kak4KaV4Ka+4KayXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgppfgpqRdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4Kaq4Kaw4KeHJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgpobgppfgp4cnLFxuICAgICAgICAgICAgczogJ+CmleCnn+Cnh+CmlSDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICAgICAgc3M6ICclZCDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICAgICAgbTogJ+Cmj+CmlSDgpq7gpr/gpqjgpr/gpp8nLFxuICAgICAgICAgICAgbW06ICclZCDgpq7gpr/gpqjgpr/gpp8nLFxuICAgICAgICAgICAgaDogJ+Cmj+CmlSDgppjgpqjgp43gpp/gpr4nLFxuICAgICAgICAgICAgaGg6ICclZCDgppjgpqjgp43gpp/gpr4nLFxuICAgICAgICAgICAgZDogJ+Cmj+CmlSDgpqbgpr/gpqgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgpqbgpr/gpqgnLFxuICAgICAgICAgICAgTTogJ+Cmj+CmlSDgpq7gpr7gprgnLFxuICAgICAgICAgICAgTU06ICclZCDgpq7gpr7gprgnLFxuICAgICAgICAgICAgeTogJ+Cmj+CmlSDgpqzgppvgprAnLFxuICAgICAgICAgICAgeXk6ICclZCDgpqzgppvgprAnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Ken4Keo4Kep4Keq4Ker4Kes4Ket4Keu4Kev4KemXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gprDgpr7gpqR84Kat4KeL4KawfOCmuOCmleCmvuCmsnzgpqbgp4Hgpqrgp4HgprB84Kas4Ka/4KaV4Ka+4KayfOCmuOCmqOCnjeCmp+CnjeCmr+CmvnzgprDgpr7gpqQvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgprDgpr7gpqQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpq3gp4vgprAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ka44KaV4Ka+4KayJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CmpuCngeCmquCngeCmsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAzID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpqzgpr/gppXgpr7gprInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgprjgpqjgp43gpqfgp43gpq/gpr4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kat4KeL4KawJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprjgppXgpr7gprInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmpuCngeCmquCngeCmsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kas4Ka/4KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprjgpqjgp43gpqfgp43gpq/gpr4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmsOCmvuCmpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBibkJkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRpYmV0YW4gW2JvXVxuLy8hIGF1dGhvciA6IFRodXB0ZW4gTi4gQ2hha3Jpc2hhciA6IGh0dHBzOi8vZ2l0aHViLmNvbS92YWpyYWRvZ1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgvKEnLFxuICAgICAgICAgICAgMjogJ+C8oicsXG4gICAgICAgICAgICAzOiAn4LyjJyxcbiAgICAgICAgICAgIDQ6ICfgvKQnLFxuICAgICAgICAgICAgNTogJ+C8pScsXG4gICAgICAgICAgICA2OiAn4LymJyxcbiAgICAgICAgICAgIDc6ICfgvKcnLFxuICAgICAgICAgICAgODogJ+C8qCcsXG4gICAgICAgICAgICA5OiAn4LypJyxcbiAgICAgICAgICAgIDA6ICfgvKAnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4LyhJzogJzEnLFxuICAgICAgICAgICAgJ+C8oic6ICcyJyxcbiAgICAgICAgICAgICfgvKMnOiAnMycsXG4gICAgICAgICAgICAn4LykJzogJzQnLFxuICAgICAgICAgICAgJ+C8pSc6ICc1JyxcbiAgICAgICAgICAgICfgvKYnOiAnNicsXG4gICAgICAgICAgICAn4LynJzogJzcnLFxuICAgICAgICAgICAgJ+C8qCc6ICc4JyxcbiAgICAgICAgICAgICfgvKknOiAnOScsXG4gICAgICAgICAgICAn4LygJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGJvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm8nLCB7XG4gICAgICAgIG1vbnRoczogJ+C9n+C+s+C8i+C9luC8i+C9keC9hOC8i+C9lOC9vF/gvZ/gvrPgvIvgvZbgvIvgvYLgvYngvbLgvabgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2C4L2m4L204L2Y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9nuC9suC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvaPgvpTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L6y4L204L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9keC9tOC9k+C8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvaLgvpLgvrHgvZHgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L2C4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYXgvbLgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2J4L2y4L2m4LyL4L2UJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgvZ/gvrPgvIsxX+C9n+C+s+C8izJf4L2f4L6z4LyLM1/gvZ/gvrPgvIs0X+C9n+C+s+C8izVf4L2f4L6z4LyLNl/gvZ/gvrPgvIs3X+C9n+C+s+C8izhf4L2f4L6z4LyLOV/gvZ/gvrPgvIsxMF/gvZ/gvrPgvIsxMV/gvZ/gvrPgvIsxMicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiAvXijgvZ/gvrPgvItcXGR7MSwyfSkvLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfgvYLgvZ/gvaDgvIvgvYngvbLgvIvgvZjgvItf4L2C4L2f4L2g4LyL4L2f4L6z4LyL4L2W4LyLX+C9guC9n+C9oOC8i+C9mOC9suC9guC8i+C9keC9mOC9ouC8i1/gvYLgvZ/gvaDgvIvgvaPgvrfgvYLgvIvgvZTgvItf4L2C4L2f4L2g4LyL4L2V4L204L2i4LyL4L2W4L20X+C9guC9n+C9oOC8i+C9lOC8i+C9puC9hOC9puC8i1/gvYLgvZ/gvaDgvIvgvabgvqTgvbrgvZPgvIvgvZTgvIsnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+C9ieC9suC8i+C9mOC8i1/gvZ/gvrPgvIvgvZbgvItf4L2Y4L2y4L2C4LyL4L2R4L2Y4L2i4LyLX+C9o+C+t+C9guC8i+C9lOC8i1/gvZXgvbTgvaLgvIvgvZbgvbRf4L2U4LyL4L2m4L2E4L2m4LyLX+C9puC+pOC9uuC9k+C8i+C9lOC8iycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgvYngvbJf4L2f4L6zX+C9mOC9suC9gl/gvaPgvrfgvYJf4L2V4L204L2iX+C9puC9hOC9pl/gvabgvqTgvbrgvZMnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4L2R4L2y4LyL4L2i4L2y4L2EXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+C9puC9hOC8i+C9ieC9suC9k10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb4L2W4L2R4L204L2T4LyL4L2V4L6y4L2C4LyL4L2i4L6X4L264L2m4LyL4L2YXSwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgvYHgvIvgvabgvYRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9mOC9kOC9oOC8i+C9mF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgvaPgvIsnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOC9puC+lOC9k+C8i+C9oycsXG4gICAgICAgICAgICBzOiAn4L2j4L2Y4LyL4L2m4L2EJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4L2m4L6Q4L2i4LyL4L2G4LyNJyxcbiAgICAgICAgICAgIG06ICfgvabgvpDgvaLgvIvgvZjgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgbW06ICclZCDgvabgvpDgvaLgvIvgvZgnLFxuICAgICAgICAgICAgaDogJ+C9huC9tOC8i+C9muC9vOC9keC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBoaDogJyVkIOC9huC9tOC8i+C9muC9vOC9kScsXG4gICAgICAgICAgICBkOiAn4L2J4L2y4L2T4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4L2J4L2y4L2T4LyLJyxcbiAgICAgICAgICAgIE06ICfgvZ/gvrPgvIvgvZbgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgTU06ICclZCDgvZ/gvrPgvIvgvZYnLFxuICAgICAgICAgICAgeTogJ+C9o+C9vOC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICB5eTogJyVkIOC9o+C9vCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgvKHgvKLgvKPgvKTgvKXgvKbgvKfgvKjgvKngvKBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gvZjgvZrgvZPgvIvgvZjgvbx84L2e4L284L2C4L2m4LyL4L2A4L2mfOC9ieC9suC9k+C8i+C9guC9tOC9hHzgvZHgvYLgvbzgvYTgvIvgvZHgvYJ84L2Y4L2a4L2T4LyL4L2Y4L28LyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+C9mOC9muC9k+C8i+C9mOC9vCcgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+C9ieC9suC9k+C8i+C9guC9tOC9hCcgJiYgaG91ciA8IDUpIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2Y4L2a4L2T4LyL4L2Y4L28JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZ7gvbzgvYLgvabgvIvgvYDgvaYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9ieC9suC9k+C8i+C9guC9tOC9hCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2R4L2C4L284L2E4LyL4L2R4L2CJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQnJldG9uIFticl1cbi8vISBhdXRob3IgOiBKZWFuLUJhcHRpc3RlIExlIER1aWdvdSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYmxlZHVpZ291XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24obnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIG1tOiAnbXVudXRlbm4nLFxuICAgICAgICAgICAgTU06ICdtaXonLFxuICAgICAgICAgICAgZGQ6ICdkZXZlemgnLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgbXV0YXRpb24oZm9ybWF0W2tleV0sIG51bWJlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwZWNpYWxNdXRhdGlvbkZvclllYXJzKG51bWJlcikge1xuICAgICAgICBzd2l0Y2ggKGxhc3ROdW1iZXIobnVtYmVyKSkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIGJsb2F6JztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgdmxvYXonO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxhc3ROdW1iZXIobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPiA5KSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdE51bWJlcihudW1iZXIgJSAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gbXV0YXRpb24odGV4dCwgbnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb2Z0TXV0YXRpb24odGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNvZnRNdXRhdGlvbih0ZXh0KSB7XG4gICAgICAgIHZhciBtdXRhdGlvblRhYmxlID0ge1xuICAgICAgICAgICAgbTogJ3YnLFxuICAgICAgICAgICAgYjogJ3YnLFxuICAgICAgICAgICAgZDogJ3onLFxuICAgICAgICB9O1xuICAgICAgICBpZiAobXV0YXRpb25UYWJsZVt0ZXh0LmNoYXJBdCgwKV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG11dGF0aW9uVGFibGVbdGV4dC5jaGFyQXQoMCldICsgdGV4dC5zdWJzdHJpbmcoMSk7XG4gICAgfVxuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15nZW4vaSxcbiAgICAgICAgICAgIC9eY1vKvFxcJ11od2UvaSxcbiAgICAgICAgICAgIC9ebWV1L2ksXG4gICAgICAgICAgICAvXmVici9pLFxuICAgICAgICAgICAgL15tYWUvaSxcbiAgICAgICAgICAgIC9eKG1lenxldmUpL2ksXG4gICAgICAgICAgICAvXmdvdS9pLFxuICAgICAgICAgICAgL15lb3MvaSxcbiAgICAgICAgICAgIC9eZ3dlL2ksXG4gICAgICAgICAgICAvXmhlci9pLFxuICAgICAgICAgICAgL15kdS9pLFxuICAgICAgICAgICAgL15rZXIvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgL14oZ2VudmVyfGNbyrxcXCddaHdldnJlcnxtZXVyemh8ZWJyZWx8bWFlfG1lemhldmVufGdvdWVyZXxlb3N0fGd3ZW5nb2xvfGhlcmV8ZHV8a2VyenV8Z2VufGNbyrxcXCddaHdlfG1ldXxlYnJ8bWFlfGV2ZXxnb3V8ZW9zfGd3ZXxoZXJ8ZHV8a2VyKS9pLFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleCA9XG4gICAgICAgICAgICAvXihnZW52ZXJ8Y1vKvFxcJ11od2V2cmVyfG1ldXJ6aHxlYnJlbHxtYWV8bWV6aGV2ZW58Z291ZXJlfGVvc3R8Z3dlbmdvbG98aGVyZXxkdXxrZXJ6dSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9XG4gICAgICAgICAgICAvXihnZW58Y1vKvFxcJ11od2V8bWV1fGVicnxtYWV8ZXZlfGdvdXxlb3N8Z3dlfGhlcnxkdXxrZXIpL2ksXG4gICAgICAgIGZ1bGxXZWVrZGF5c1BhcnNlID0gW1xuICAgICAgICAgICAgL15zdWwvaSxcbiAgICAgICAgICAgIC9ebHVuL2ksXG4gICAgICAgICAgICAvXm1ldXJ6aC9pLFxuICAgICAgICAgICAgL15tZXJjW8q8XFwnXWhlci9pLFxuICAgICAgICAgICAgL155YW91L2ksXG4gICAgICAgICAgICAvXmd3ZW5lci9pLFxuICAgICAgICAgICAgL15zYWRvcm4vaSxcbiAgICAgICAgXSxcbiAgICAgICAgc2hvcnRXZWVrZGF5c1BhcnNlID0gW1xuICAgICAgICAgICAgL15TdWwvaSxcbiAgICAgICAgICAgIC9eTHVuL2ksXG4gICAgICAgICAgICAvXk1ldS9pLFxuICAgICAgICAgICAgL15NZXIvaSxcbiAgICAgICAgICAgIC9eWWFvL2ksXG4gICAgICAgICAgICAvXkd3ZS9pLFxuICAgICAgICAgICAgL15TYWQvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbWluV2Vla2RheXNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eU3UvaSxcbiAgICAgICAgICAgIC9eTHUvaSxcbiAgICAgICAgICAgIC9eTWUoW15yXXwkKS9pLFxuICAgICAgICAgICAgL15NZXIvaSxcbiAgICAgICAgICAgIC9eWWEvaSxcbiAgICAgICAgICAgIC9eR3cvaSxcbiAgICAgICAgICAgIC9eU2EvaSxcbiAgICAgICAgXTtcblxuICAgIHZhciBiciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JyJywge1xuICAgICAgICBtb250aHM6ICdHZW52ZXJfQ8q8aHdldnJlcl9NZXVyemhfRWJyZWxfTWFlX01lemhldmVuX0dvdWVyZV9Fb3N0X0d3ZW5nb2xvX0hlcmVfRHVfS2VyenUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnR2VuX0PKvGh3ZV9NZXVfRWJyX01hZV9FdmVfR291X0Vvc19Hd2VfSGVyX0R1X0tlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdWxfTHVuX01ldXJ6aF9NZXJjyrxoZXJfWWFvdV9Hd2VuZXJfU2Fkb3JuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VsX0x1bl9NZXVfTWVyX1lhb19Hd2VfU2FkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X0x1X01lX01lcl9ZYV9Hd19TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZTogbWluV2Vla2RheXNQYXJzZSxcbiAgICAgICAgZnVsbFdlZWtkYXlzUGFyc2U6IGZ1bGxXZWVrZGF5c1BhcnNlLFxuICAgICAgICBzaG9ydFdlZWtkYXlzUGFyc2U6IHNob3J0V2Vla2RheXNQYXJzZSxcbiAgICAgICAgbWluV2Vla2RheXNQYXJzZTogbWluV2Vla2RheXNQYXJzZSxcblxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogbW9udGhzU3RyaWN0UmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IG1vbnRoc1Nob3J0U3RyaWN0UmVnZXgsXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFthIHZpel0gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2Egdml6XSBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2Egdml6XSBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIaXppdiBkYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tXYXJjyrxob2F6aCBkYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtkYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tEZWPKvGggZGFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbcGFzZXQgZGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnYS1iZW5uICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDKvHpvJyxcbiAgICAgICAgICAgIHM6ICd1biBuZWJldWQgc2Vnb25kZW5ub8O5JyxcbiAgICAgICAgICAgIHNzOiAnJWQgZWlsZW5uJyxcbiAgICAgICAgICAgIG06ICd1ciB2dW51dGVubicsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICAgICAgaDogJ3VuIGV1cicsXG4gICAgICAgICAgICBoaDogJyVkIGV1cicsXG4gICAgICAgICAgICBkOiAndW4gZGV2ZXpoJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICBNOiAndXIgbWl6JyxcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICB5OiAndXIgYmxvYXonLFxuICAgICAgICAgICAgeXk6IHNwZWNpYWxNdXRhdGlvbkZvclllYXJzLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oYcOxfHZldCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gbnVtYmVyID09PSAxID8gJ2HDsScgOiAndmV0JztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2EubS58Zy5tLi8sIC8vIGdvdWRlIG1lcmVubiB8IGEtcmFvayBtZXJlbm5cbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW4gPT09ICdnLm0uJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgMTIgPyAnYS5tLicgOiAnZy5tLic7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQm9zbmlhbiBbYnNdXG4vLyEgYXV0aG9yIDogTmVkaW0gQ2hvbGljaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mcm9udHlhcmRcbi8vISBhdXRob3IgOiBSYXNpZCBSZWR6aWMgOiBodHRwczovL2dpdGh1Yi5jb20vcmFzaWRyZVxuLy8hIGJhc2VkIG9uIChocikgdHJhbnNsYXRpb24gYnkgQm9qYW4gTWFya292acSHXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXhcbiAgICAgICAgICAgICAgICAgICAgPyAnamVkbmEgbWludXRhJ1xuICAgICAgICAgICAgICAgICAgICA6IGlzRnV0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgPyAnamVkbnUgbWludXR1J1xuICAgICAgICAgICAgICAgICAgICAgIDogJ2plZG5lIG1pbnV0ZSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRhbiBzYXQnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlYyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlY2EnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnMnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqLl9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3V0X3NyX8SNZV9wZV9zdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzdXRyYSB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanXEjWVyIHVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ByaWplICVzJyxcbiAgICAgICAgICAgIHM6ICdwYXIgc2VrdW5kaScsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogJ2RhbicsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogJ21qZXNlYycsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogJ2dvZGludScsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENhdGFsYW4gW2NhXVxuLy8hIGF1dGhvciA6IEp1YW4gRy4gSHVydGFkbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWFuZ2h1cnRhZG9cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBjYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NhJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ2dlbmVyX2ZlYnJlcl9tYXLDp19hYnJpbF9tYWlnX2p1bnlfanVsaW9sX2Fnb3N0X3NldGVtYnJlX29jdHVicmVfbm92ZW1icmVfZGVzZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiBcImRlIGdlbmVyX2RlIGZlYnJlcl9kZSBtYXLDp19kJ2FicmlsX2RlIG1haWdfZGUganVueV9kZSBqdWxpb2xfZCdhZ29zdF9kZSBzZXRlbWJyZV9kJ29jdHVicmVfZGUgbm92ZW1icmVfZGUgZGVzZW1icmVcIi5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0Rbb0RdPyhcXHMpK01NTU0vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdnZW4uX2ZlYnIuX21hcsOnX2Fici5fbWFpZ19qdW55X2p1bC5fYWcuX3NldC5fb2N0Ll9ub3YuX2Rlcy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnZGl1bWVuZ2VfZGlsbHVuc19kaW1hcnRzX2RpbWVjcmVzX2Rpam91c19kaXZlbmRyZXNfZGlzc2FidGUnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RnLl9kbC5fZHQuX2RjLl9kai5fZHYuX2RzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkZ19kbF9kdF9kY19kal9kdl9kcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gW2RlXSBZWVlZIFthIGxlc10gSDptbScsXG4gICAgICAgICAgICBsbGw6ICdEIE1NTSBZWVlZLCBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQgRCBNTU0gWVlZWSwgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXZ1aSBhICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbZGVtw6AgYSAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1thaGlyIGEgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tlbF0gZGRkZCBbcGFzc2F0IGEgJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnbGVzJyA6ICdsYScpICtcbiAgICAgICAgICAgICAgICAgICAgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogXCJkJ2FxdcOtICVzXCIsXG4gICAgICAgICAgICBwYXN0OiAnZmEgJXMnLFxuICAgICAgICAgICAgczogJ3VucyBzZWdvbnMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWdvbnMnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRzJyxcbiAgICAgICAgICAgIGg6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmVzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkaWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkaWVzJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNvcycsXG4gICAgICAgICAgICB5OiAndW4gYW55JyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW55cycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShyfG58dHzDqHxhKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgbnVtYmVyID09PSAxXG4gICAgICAgICAgICAgICAgICAgID8gJ3InXG4gICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgPyAnbidcbiAgICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncidcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogJ8OoJztcbiAgICAgICAgICAgIGlmIChwZXJpb2QgPT09ICd3JyB8fCBwZXJpb2QgPT09ICdXJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBjYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDemVjaCBbY3NdXG4vLyEgYXV0aG9yIDogcGV0cmJlbGEgOiBodHRwczovL2dpdGh1Yi5jb20vcGV0cmJlbGFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICdsZWRlbl/Dum5vcl9ixZllemVuX2R1YmVuX2t2xJt0ZW5fxI1lcnZlbl/EjWVydmVuZWNfc3JwZW5fesOhxZnDrV/FmcOtamVuX2xpc3RvcGFkX3Byb3NpbmVjJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ2xlZG5hX8O6bm9yYV9ixZllem5hX2R1Ym5hX2t2xJt0bmFfxI1lcnZuYV/EjWVydmVuY2Vfc3JwbmFfesOhxZnDrV/FmcOtam5hX2xpc3RvcGFkdV9wcm9zaW5jZScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9ERD9bby5dPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTS8sXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2xlZF/Dum5vX2LFmWVfZHViX2t2xJtfxI12bl/EjXZjX3NycF96w6HFmV/FmcOtal9saXNfcHJvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9ebGVkL2ksXG4gICAgICAgICAgICAvXsO6bm8vaSxcbiAgICAgICAgICAgIC9eYsWZZS9pLFxuICAgICAgICAgICAgL15kdWIvaSxcbiAgICAgICAgICAgIC9ea3bEmy9pLFxuICAgICAgICAgICAgL14oxI12bnzEjWVydmVuJHzEjWVydm5hKS9pLFxuICAgICAgICAgICAgL14oxI12Y3zEjWVydmVuZWN8xI1lcnZlbmNlKS9pLFxuICAgICAgICAgICAgL15zcnAvaSxcbiAgICAgICAgICAgIC9eesOhxZkvaSxcbiAgICAgICAgICAgIC9exZnDrWovaSxcbiAgICAgICAgICAgIC9ebGlzL2ksXG4gICAgICAgICAgICAvXnByby9pLFxuICAgICAgICBdLFxuICAgICAgICAvLyBOT1RFOiAnxI1lcnZlbicgaXMgc3Vic3RyaW5nIG9mICfEjWVydmVuZWMnOyB0aGVyZWZvcmUgJ8SNZXJ2ZW5lYycgbXVzdCBwcmVjZWRlICfEjWVydmVuJyBpbiB0aGUgcmVnZXggdG8gYmUgZnVsbHkgbWF0Y2hlZC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHBhcnNlciBtYXRjaGVzICcxLiDEjWVydmVuZWMnIGFzICcxLiDEjWVydmVuJyArICdlYycuXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKGxlZGVufMO6bm9yfGLFmWV6ZW58ZHViZW58a3bEm3RlbnzEjWVydmVuZWN8xI1lcnZlbmNlfMSNZXJ2ZW58xI1lcnZuYXxzcnBlbnx6w6HFmcOtfMWZw61qZW58bGlzdG9wYWR8cHJvc2luZWN8bGVkfMO6bm98YsWZZXxkdWJ8a3bEm3zEjXZufMSNdmN8c3JwfHrDocWZfMWZw61qfGxpc3xwcm8pL2k7XG5cbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICByZXR1cm4gbiA+IDEgJiYgbiA8IDUgJiYgfn4obiAvIDEwKSAhPT0gMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6IC8vIGEgZmV3IHNlY29uZHMgLyBpbiBhIGZldyBzZWNvbmRzIC8gYSBmZXcgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdww6FyIHNla3VuZCcgOiAncMOhciBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOiAvLyA5IHNlY29uZHMgLyBpbiA5IHNlY29uZHMgLyA5IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdzZWt1bmR5JyA6ICdzZWt1bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla3VuZGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnbSc6IC8vIGEgbWludXRlIC8gaW4gYSBtaW51dGUgLyBhIG1pbnV0ZSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogaXNGdXR1cmUgPyAnbWludXR1JyA6ICdtaW51dG91JztcbiAgICAgICAgICAgIGNhc2UgJ21tJzogLy8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2gnOiAvLyBhbiBob3VyIC8gaW4gYW4gaG91ciAvIGFuIGhvdXIgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnaG9kaW5hJyA6IGlzRnV0dXJlID8gJ2hvZGludScgOiAnaG9kaW5vdSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6IC8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2hvZGlueScgOiAnaG9kaW4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2hvZGluYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdkJzogLy8gYSBkYXkgLyBpbiBhIGRheSAvIGEgZGF5IGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RlbicgOiAnZG5lbSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6IC8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2RueScgOiAnZG7DrScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZG55JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdNJzogLy8gYSBtb250aCAvIGluIGEgbW9udGggLyBhIG1vbnRoIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ23Em3PDrWMnIDogJ23Em3PDrWNlbSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6IC8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ23Em3PDrWNlJyA6ICdtxJtzw61jxa8nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23Em3PDrWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICd5JzogLy8gYSB5ZWFyIC8gaW4gYSB5ZWFyIC8gYSB5ZWFyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3JvaycgOiAncm9rZW0nO1xuICAgICAgICAgICAgY2FzZSAneXknOiAvLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdyb2t5JyA6ICdsZXQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2xldHknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NzJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRoc1Nob3J0LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICAvLyBOT1RFOiAnxI1lcnZlbicgaXMgc3Vic3RyaW5nIG9mICfEjWVydmVuZWMnOyB0aGVyZWZvcmUgJ8SNZXJ2ZW5lYycgbXVzdCBwcmVjZWRlICfEjWVydmVuJyBpbiB0aGUgcmVnZXggdG8gYmUgZnVsbHkgbWF0Y2hlZC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHBhcnNlciBtYXRjaGVzICcxLiDEjWVydmVuZWMnIGFzICcxLiDEjWVydmVuJyArICdlYycuXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14obGVkZW58bGVkbmF8w7pub3JhfMO6bm9yfGLFmWV6ZW58YsWZZXpuYXxkdWJlbnxkdWJuYXxrdsSbdGVufGt2xJt0bmF8xI1lcnZlbmVjfMSNZXJ2ZW5jZXzEjWVydmVufMSNZXJ2bmF8c3JwZW58c3JwbmF8esOhxZnDrXzFmcOtamVufMWZw61qbmF8bGlzdG9wYWR1fGxpc3RvcGFkfHByb3NpbmVjfHByb3NpbmNlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14obGVkfMO6bm98YsWZZXxkdWJ8a3bEm3zEjXZufMSNdmN8c3JwfHrDocWZfMWZw61qfGxpc3xwcm8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkxJtsZV9wb25kxJtsw61fw7p0ZXLDvV9zdMWZZWRhX8SNdHZydGVrX3DDoXRla19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZV9wb1/DunRfc3RfxI10X3DDoV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb1/DunRfc3RfxI10X3DDoV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIGw6ICdELiBNLiBZWVlZJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZG5lcyB2XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3rDrXRyYSB2XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IG5lZMSbbGkgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIGRkZGQgW3ZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdmUgc3TFmWVkdSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZlIMSNdHZydGVrIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBww6F0ZWsgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHNvYm90dSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbdsSNZXJhIHZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3UgbmVkxJtsaSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDqV0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IHN0xZllZHUgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw71dIGRkZGQgW3ZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBzb2JvdHUgdl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwxZllZCAlcycsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3M7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2h1dmFzaCBbY3ZdXG4vLyEgYXV0aG9yIDogQW5hdG9seSBNaXJvbm92IDogaHR0cHM6Ly9naXRodWIuY29tL21pcm9udG9saVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGN2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3YnLCB7XG4gICAgICAgIG1vbnRoczogJ9C605HRgNC70LDRh1/QvdCw0YDTkdGBX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgNGC0LzQtV/Rg9GC05Ff0qvRg9GA0LvQsF/QsNCy05HQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiNGC0LDQsicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfQutOR0YBf0L3QsNGAX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgF/Rg9GC05Ff0qvRg9GAX9Cw0LLQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn0LLRi9GA0YHQsNGA0L3QuNC60YPQvV/RgtGD0L3RgtC40LrRg9C9X9GL0YLQu9Cw0YDQuNC60YPQvV/RjtC90LrRg9C9X9C605fSq9C90LXRgNC90LjQutGD0L1f0Y3RgNC90LXQutGD0L1f0YjTkdC80LDRgtC60YPQvScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0LLRi9GAX9GC0YPQvV/Ri9GC0Ltf0Y7QvV/QutOX0qtf0Y3RgNC9X9GI05HQvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQstGAX9GC0L1f0YvRgl/RjtC9X9C60qtf0Y3RgF/RiNC8Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTDogJ1lZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddLCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10sIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0J/QsNGP0L1dIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQq9GA0LDQvV0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9OW0L3QtdGAXSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW9Kq0LjRgtC10YFdIGRkZGQgTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vQmNGA0YLQvdOXXSBkZGRkIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWZmaXggPSAv0YHQtdGF0LXRgiQvaS5leGVjKG91dHB1dClcbiAgICAgICAgICAgICAgICAgICAgPyAn0YDQtdC9J1xuICAgICAgICAgICAgICAgICAgICA6IC/Sq9GD0LskL2kuZXhlYyhvdXRwdXQpXG4gICAgICAgICAgICAgICAgICAgICAgPyAn0YLQsNC9J1xuICAgICAgICAgICAgICAgICAgICAgIDogJ9GA0LDQvSc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dCArIGFmZml4O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDQutCw0Y/Qu9C70LAnLFxuICAgICAgICAgICAgczogJ9C/05fRgC3QuNC6INKr0LXQutC60YPQvdGCJyxcbiAgICAgICAgICAgIHNzOiAnJWQg0qvQtdC60LrRg9C90YInLFxuICAgICAgICAgICAgbTogJ9C/05fRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIG1tOiAnJWQg0LzQuNC90YPRgicsXG4gICAgICAgICAgICBoOiAn0L/Tl9GAINGB0LXRhdC10YInLFxuICAgICAgICAgICAgaGg6ICclZCDRgdC10YXQtdGCJyxcbiAgICAgICAgICAgIGQ6ICfQv9OX0YAg0LrRg9C9JyxcbiAgICAgICAgICAgIGRkOiAnJWQg0LrRg9C9JyxcbiAgICAgICAgICAgIE06ICfQv9OX0YAg0YPQudOR0YUnLFxuICAgICAgICAgICAgTU06ICclZCDRg9C505HRhScsXG4gICAgICAgICAgICB5OiAn0L/Tl9GAINKr0YPQuycsXG4gICAgICAgICAgICB5eTogJyVkINKr0YPQuycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS3QvNOX0YgvLFxuICAgICAgICBvcmRpbmFsOiAnJWQt0LzTl9GIJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGN2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFdlbHNoIFtjeV1cbi8vISBhdXRob3IgOiBSb2JlcnQgQWxsZW4gOiBodHRwczovL2dpdGh1Yi5jb20vcm9iZ2FsbGVuXG4vLyEgYXV0aG9yIDogaHR0cHM6Ly9naXRodWIuY29tL3J5YW5ncmVhdmVzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgY3kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjeScsIHtcbiAgICAgICAgbW9udGhzOiAnSW9uYXdyX0Nod2Vmcm9yX01hd3J0aF9FYnJpbGxfTWFpX01laGVmaW5fR29yZmZlbm5hZl9Bd3N0X01lZGlfSHlkcmVmX1RhY2h3ZWRkX1JoYWdmeXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSW9uX0Nod2VfTWF3X0Vicl9NYWlfTWVoX0dvcl9Bd3NfTWVkX0h5ZF9UYWNoX1JoYWcnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ0R5ZGQgU3VsX0R5ZGQgTGx1bl9EeWRkIE1hd3J0aF9EeWRkIE1lcmNoZXJfRHlkZCBJYXVfRHlkZCBHd2VuZXJfRHlkZCBTYWR3cm4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bF9MbHVuX01hd19NZXJfSWF1X0d3ZV9TYWQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTGxfTWFfTWVfSWFfR3dfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgLy8gdGltZSBmb3JtYXRzIGFyZSB0aGUgc2FtZSBhcyBlbi1nYlxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hlZGRpdyBhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tZZm9yeSBhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tEZG9lIGFtXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Rpd2V0aGFmIGFtXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ21ld24gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHluIMO0bCcsXG4gICAgICAgICAgICBzOiAneWNoeWRpZyBlaWxpYWRhdScsXG4gICAgICAgICAgICBzczogJyVkIGVpbGlhZCcsXG4gICAgICAgICAgICBtOiAnbXVudWQnLFxuICAgICAgICAgICAgbW06ICclZCBtdW51ZCcsXG4gICAgICAgICAgICBoOiAnYXdyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgYXdyJyxcbiAgICAgICAgICAgIGQ6ICdkaXdybm9kJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGl3cm5vZCcsXG4gICAgICAgICAgICBNOiAnbWlzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWlzJyxcbiAgICAgICAgICAgIHk6ICdibHd5ZGR5bicsXG4gICAgICAgICAgICB5eTogJyVkIGZseW5lZGQnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZmVkfGFpbnxhZnxpbHx5ZGR8ZWR8ZWcpLyxcbiAgICAgICAgLy8gdHJhZGl0aW9uYWwgb3JkaW5hbCBudW1iZXJzIGFib3ZlIDMxIGFyZSBub3QgY29tbW9ubHkgdXNlZCBpbiBjb2xsb3F1aWFsIFdlbHNoXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICcnLFxuICAgICAgICAgICAgICAgIGxvb2t1cCA9IFtcbiAgICAgICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgICAgICdhZicsXG4gICAgICAgICAgICAgICAgICAgICdpbCcsXG4gICAgICAgICAgICAgICAgICAgICd5ZGQnLFxuICAgICAgICAgICAgICAgICAgICAneWRkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJywgLy8gMWFmIHRvIDEwZmVkXG4gICAgICAgICAgICAgICAgICAgICdlZycsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZWcnLFxuICAgICAgICAgICAgICAgICAgICAnZWcnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZycsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLCAvLyAxMWVnIHRvIDIwZmVkXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChiID4gMjApIHtcbiAgICAgICAgICAgICAgICBpZiAoYiA9PT0gNDAgfHwgYiA9PT0gNTAgfHwgYiA9PT0gNjAgfHwgYiA9PT0gODAgfHwgYiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICdmZWQnOyAvLyBub3QgMzBhaW4sIDcwYWluIG9yIDkwYWluXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ2Fpbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChiID4gMCkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IGxvb2t1cFtiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBjeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBEYW5pc2ggW2RhXVxuLy8hIGF1dGhvciA6IFVscmlrIE5pZWxzZW4gOiBodHRwczovL2dpdGh1Yi5jb20vbXJiYXNlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZGEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkYScsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydHNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnc8O4bmRhZ19tYW5kYWdfdGlyc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO4cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3PDuG5fbWFuX3Rpcl9vbnNfdG9yX2ZyZV9sw7hyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3PDuF9tYV90aV9vbl90b19mcl9sw7gnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBbZC5dIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2kgZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tpIG1vcmdlbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAncMOlIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpIGfDpXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tpXSBkZGRkW3Mga2wuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBzaWRlbicsXG4gICAgICAgICAgICBzOiAnZsOlIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbTogJ2V0IG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXR0ZXInLFxuICAgICAgICAgICAgaDogJ2VuIHRpbWUnLFxuICAgICAgICAgICAgaGg6ICclZCB0aW1lcicsXG4gICAgICAgICAgICBkOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnZScsXG4gICAgICAgICAgICBNOiAnZW4gbcOlbmVkJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICAgICAgeTogJ2V0IMOlcicsXG4gICAgICAgICAgICB5eTogJyVkIMOlcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VybWFuIFtkZV1cbi8vISBhdXRob3IgOiBsbHVjaHMgOiBodHRwczovL2dpdGh1Yi5jb20vbGx1Y2hzXG4vLyEgYXV0aG9yOiBNZW5lbGlvbiBFbGVuc8O6bGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG4vLyEgYXV0aG9yIDogTWlrb2xhaiBEYWRlbGEgOiBodHRwczovL2dpdGh1Yi5jb20vbWlrMDFhalxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIG06IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICAgICBoOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAgICAgZDogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAgICAgZGQ6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICAgICB3OiBbJ2VpbmUgV29jaGUnLCAnZWluZXIgV29jaGUnXSxcbiAgICAgICAgICAgIE06IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICAgICB5OiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZGUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZScsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyX0ZlYnJ1YXJfTcOkcnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ0phbi5fRmViLl9Nw6Ryel9BcHIuX01haV9KdW5pX0p1bGlfQXVnLl9TZXAuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU28uX01vLl9EaS5fTWkuX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGV1dGUgdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICd2b3IgJXMnLFxuICAgICAgICAgICAgczogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgU2VrdW5kZW4nLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiAnJWQgTWludXRlbicsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHc6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3dzogJyVkIFdvY2hlbicsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VybWFuIChBdXN0cmlhKSBbZGUtYXRdXG4vLyEgYXV0aG9yIDogbGx1Y2hzIDogaHR0cHM6Ly9naXRodWIuY29tL2xsdWNoc1xuLy8hIGF1dGhvcjogTWVuZWxpb24gRWxlbnPDumxlOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuLy8hIGF1dGhvciA6IE1hcnRpbiBHcm9sbGVyIDogaHR0cHM6Ly9naXRodWIuY29tL01hZE1HXG4vLyEgYXV0aG9yIDogTWlrb2xhaiBEYWRlbGEgOiBodHRwczovL2dpdGh1Yi5jb20vbWlrMDFhalxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIG06IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICAgICBoOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAgICAgZDogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAgICAgZGQ6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICAgICB3OiBbJ2VpbmUgV29jaGUnLCAnZWluZXIgV29jaGUnXSxcbiAgICAgICAgICAgIE06IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICAgICB5OiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZGVBdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlLWF0Jywge1xuICAgICAgICBtb250aHM6ICdKw6RubmVyX0ZlYnJ1YXJfTcOkcnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ0rDpG4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWcnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1NvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAndm9yICVzJyxcbiAgICAgICAgICAgIHM6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzczogJyVkIFNla3VuZGVuJyxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgd3c6ICclZCBXb2NoZW4nLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlQXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VybWFuIChTd2l0emVybGFuZCkgW2RlLWNoXVxuLy8hIGF1dGhvciA6IHNzY2h1ZWxsZXIgOiBodHRwczovL2dpdGh1Yi5jb20vc3NjaHVlbGxlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIG06IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICAgICBoOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAgICAgZDogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAgICAgZGQ6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICAgICB3OiBbJ2VpbmUgV29jaGUnLCAnZWluZXIgV29jaGUnXSxcbiAgICAgICAgICAgIE06IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICAgICB5OiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZGVDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlLWNoJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnSmFuLl9GZWIuX03DpHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ1Nvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAndm9yICVzJyxcbiAgICAgICAgICAgIHM6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzczogJyVkIFNla3VuZGVuJyxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgd3c6ICclZCBXb2NoZW4nLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlQ2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFsZGl2aWFuIFtkdl1cbi8vISBhdXRob3IgOiBKYXdpc2ggSGFtZWVkIDogaHR0cHM6Ly9naXRodWIuY29tL2phd2lzaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfelt6s3oLeqt6H3qbeg96pJyxcbiAgICAgICAgICAgICfeit6s3oTesN6D3qreh96m3oPeqScsXG4gICAgICAgICAgICAn3onep96D3qjel96qJyxcbiAgICAgICAgICAgICfeh96t3pXesN6D3qnejd6qJyxcbiAgICAgICAgICAgICfeid6tJyxcbiAgICAgICAgICAgICfelt6r3oLesCcsXG4gICAgICAgICAgICAn3pbeqt6N3qbeh96oJyxcbiAgICAgICAgICAgICfeh96v3o7ept6Q3rDek96qJyxcbiAgICAgICAgICAgICfekN6s3pXesN6T3qzeid6w3oTept6D3qonLFxuICAgICAgICAgICAgJ96H3q7eht6w3pPer96E3qbeg96qJyxcbiAgICAgICAgICAgICfegt6u3ojerN6J3rDehN6m3oPeqicsXG4gICAgICAgICAgICAn3pHeqN6Q3qzeid6w3oTept6D3qonLFxuICAgICAgICBdLFxuICAgICAgICB3ZWVrZGF5cyA9IFtcbiAgICAgICAgICAgICfeh96n3oveqN6H3rDejN6mJyxcbiAgICAgICAgICAgICfegN6v3onepicsXG4gICAgICAgICAgICAn3ofept6C3rDejt6n3oPepicsXG4gICAgICAgICAgICAn3oTeqt6L3qYnLFxuICAgICAgICAgICAgJ96E3qreg96n3pDesN6K3qbejN6oJyxcbiAgICAgICAgICAgICfegN6q3obeqt6D3qonLFxuICAgICAgICAgICAgJ96A3q7egt6o3oDeqN6D3qonLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGR2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZHYnLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5czogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ96H3qfei96oX96A3q/eid6mX96H3qbegt6wX96E3qrei96mX96E3qreg96nX96A3qreht6qX96A3q7egt6oJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC9NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/eid6GfN6J3oovLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn3oneiicgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn3onehic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn3oneiic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW96J3qjeh96m3oveql0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1veid6n3ovept6J3qddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW96H3qjeh96w3pTerF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb3orep96H3qjejN6q3ojeqF0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ96M3qzeg96t3o7ept6H3qggJXMnLFxuICAgICAgICAgICAgcGFzdDogJ96G3qreg96o3oLesCAlcycsXG4gICAgICAgICAgICBzOiAn3pDeqN6G3qregt6w3ozeqt6G3q7ehd6s3ofesCcsXG4gICAgICAgICAgICBzczogJ2QlIN6Q3qjeht6q3oLesN6M3qonLFxuICAgICAgICAgICAgbTogJ96J3qjegt6o3pPerN6H3rAnLFxuICAgICAgICAgICAgbW06ICfeid6o3oLeqN6T3qogJWQnLFxuICAgICAgICAgICAgaDogJ96O3qbekd6o3ofeqN6D3qzeh96wJyxcbiAgICAgICAgICAgIGhoOiAn3o7ept6R3qjeh96o3oPeqiAlZCcsXG4gICAgICAgICAgICBkOiAn3oveqt6I3qbegN6s3ofesCcsXG4gICAgICAgICAgICBkZDogJ96L3qreiN6m3pDesCAlZCcsXG4gICAgICAgICAgICBNOiAn3onept6A3qzeh96wJyxcbiAgICAgICAgICAgIE1NOiAn3onept6Q3rAgJWQnLFxuICAgICAgICAgICAgeTogJ96H3qbegN6m3oPerN6H3rAnLFxuICAgICAgICAgICAgeXk6ICfeh96m3oDept6D3qogJWQnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNywgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGR2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdyZWVrIFtlbF1cbi8vISBhdXRob3IgOiBBZ2dlbG9zIEthcmFsaWFzIDogaHR0cHM6Ly9naXRodWIuY29tL21laGllbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHR5cGVvZiBGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbikgfHxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgZWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbCcsIHtcbiAgICAgICAgbW9udGhzTm9taW5hdGl2ZUVsOlxuICAgICAgICAgICAgJ86ZzrHOvc6/z4XOrM+BzrnOv8+CX86mzrXOss+Bzr/Phc6sz4HOuc6/z4JfzpzOrM+Bz4TOuc6/z4JfzpHPgM+Bzq/Ou865zr/Pgl/OnM6szrnOv8+CX86Zzr/Pjc69zrnOv8+CX86Zzr/Pjc67zrnOv8+CX86Rz43Os86/z4XPg8+Ezr/Pgl/Oo861z4DPhM6tzrzOss+BzrnOv8+CX86fzrrPhM+OzrLPgc65zr/Pgl/Onc6/zq3OvM6yz4HOuc6/z4JfzpTOtc66zq3OvM6yz4HOuc6/z4InLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzR2VuaXRpdmVFbDpcbiAgICAgICAgICAgICfOmc6xzr3Ov8+FzrHPgc6vzr/PhV/Ops61zrLPgc6/z4XOsc+Bzq/Ov8+FX86czrHPgc+Ezq/Ov8+FX86Rz4DPgc65zrvOr86/z4VfzpzOsc6Qzr/PhV/Omc6/z4XOvc6vzr/PhV/Omc6/z4XOu86vzr/PhV/Okc+FzrPOv8+Nz4PPhM6/z4VfzqPOtc+Az4TOtc68zrLPgc6vzr/PhV/On866z4TPic6yz4HOr86/z4Vfzp3Ov861zrzOss+Bzq/Ov8+FX86UzrXOus61zrzOss+Bzq/Ov8+FJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoczogZnVuY3Rpb24gKG1vbWVudFRvRm9ybWF0LCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50VG9Gb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgIC9ELy50ZXN0KGZvcm1hdC5zdWJzdHJpbmcoMCwgZm9ybWF0LmluZGV4T2YoJ01NTU0nKSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIGRheSBudW1iZXIgYmVmb3JlICdNTU1NJ1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNHZW5pdGl2ZUVsW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ86ZzrHOvV/Ops61zrJfzpzOsc+BX86Rz4DPgV/OnM6xz4pfzpnOv8+Fzr1fzpnOv8+FzrtfzpHPhc6zX86jzrXPgF/On866z4Rfzp3Ov861X86UzrXOuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfOms+Fz4HOuc6xzrrOrl/OlM61z4XPhM6tz4HOsV/OpM+Bzq/PhM63X86kzrXPhM6sz4HPhM63X86gzq3OvM+Az4TOt1/OoM6xz4HOsc+DzrrOtc+Fzq5fzqPOrM6yzrLOsc+Ezr8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfOms+Fz4FfzpTOtc+FX86kz4HOuV/OpM61z4RfzqDOtc68X86gzrHPgV/Oo86xzrInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnzprPhV/OlM61X86kz4FfzqTOtV/OoM61X86gzrFfzqPOsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfOvM68JyA6ICfOnM6cJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnz4DOvCcgOiAnzqDOnCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpWzBdID09PSAnzrwnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvW86gzpxdXFwuP86cP1xcLj8vaSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXJFbDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vOo86uzrzOtc+BzrEge31dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbzpHPjc+BzrnOvyB7fV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt7fV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vOp864zrXPgiB7fV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbz4TOvyDPgM+Bzr/Ot86zzr/Pjc68zrXOvc6/XSBkZGRkIFt7fV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbz4TOt869IM+Az4HOv863zrPOv8+NzrzOtc69zrddIGRkZGQgW3t9XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiBmdW5jdGlvbiAoa2V5LCBtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhckVsW2tleV0sXG4gICAgICAgICAgICAgICAgaG91cnMgPSBtb20gJiYgbW9tLmhvdXJzKCk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvdXRwdXQpKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LmFwcGx5KG1vbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoJ3t9JywgaG91cnMgJSAxMiA9PT0gMSA/ICfPg8+EzrcnIDogJ8+Dz4TOuc+CJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnz4POtSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgz4DPgc65zr0nLFxuICAgICAgICAgICAgczogJ867zq/Os86xIM60zrXPhc+EzrXPgc+MzrvOtc+Az4TOsScsXG4gICAgICAgICAgICBzczogJyVkIM60zrXPhc+EzrXPgc+MzrvOtc+Az4TOsScsXG4gICAgICAgICAgICBtOiAnzq3Ovc6xIM67zrXPgM+Ez4wnLFxuICAgICAgICAgICAgbW06ICclZCDOu861z4DPhM6sJyxcbiAgICAgICAgICAgIGg6ICfOvM6vzrEgz47Pgc6xJyxcbiAgICAgICAgICAgIGhoOiAnJWQgz47Pgc61z4InLFxuICAgICAgICAgICAgZDogJ868zq/OsSDOvM6tz4HOsScsXG4gICAgICAgICAgICBkZDogJyVkIM68zq3Pgc61z4InLFxuICAgICAgICAgICAgTTogJ86tzr3Osc+CIM68zq7Ovc6xz4InLFxuICAgICAgICAgICAgTU06ICclZCDOvM6uzr3Otc+CJyxcbiAgICAgICAgICAgIHk6ICfOrc69zrHPgiDPh8+Bz4zOvc6/z4InLFxuICAgICAgICAgICAgeXk6ICclZCDPh8+Bz4zOvc65zrEnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Oty8sXG4gICAgICAgIG9yZGluYWw6ICclZM63JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKEF1c3RyYWxpYSkgW2VuLWF1XVxuLy8hIGF1dGhvciA6IEphcmVkIE1vcnNlIDogaHR0cHM6Ly9naXRodWIuY29tL2phcmNvYWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbkF1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tYXUnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuQXU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoQ2FuYWRhKSBbZW4tY2FdXG4vLyEgYXV0aG9yIDogSm9uYXRoYW4gQWJvdXJiaWggOiBodHRwczovL2dpdGh1Yi5jb20vam9uYmNhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5DYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWNhJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5DYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChVbml0ZWQgS2luZ2RvbSkgW2VuLWdiXVxuLy8hIGF1dGhvciA6IENocmlzIEdlZHJpbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc2dlZHJpbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuR2IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1nYicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbkdiO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKElyZWxhbmQpIFtlbi1pZV1cbi8vISBhdXRob3IgOiBDaHJpcyBDYXJ0bGlkZ2UgOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNjYXJ0bGlkZ2VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbkllID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4taWUnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbkllO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKElzcmFlbCkgW2VuLWlsXVxuLy8hIGF1dGhvciA6IENocmlzIEdlZHJpbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc2dlZHJpbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuSWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1pbCcsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5JbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChJbmRpYSkgW2VuLWluXVxuLy8hIGF1dGhvciA6IEphdGluIEFncmF3YWwgOiBodHRwczovL2dpdGh1Yi5jb20vamF0aW5hZzIyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5JbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWluJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbkluO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKE5ldyBaZWFsYW5kKSBbZW4tbnpdXG4vLyEgYXV0aG9yIDogTHVrZSBNY0dyZWdvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sdWtlbWNncmVnb3JcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbk56ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tbnonLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuTno7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoU2luZ2Fwb3JlKSBbZW4tc2ddXG4vLyEgYXV0aG9yIDogTWF0dGhldyBDYXN0cmlsbG9uLU1hZHJpZ2FsIDogaHR0cHM6Ly9naXRodWIuY29tL3RlY2hkaW1lbnNpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlblNnID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tc2cnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5TZztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFc3BlcmFudG8gW2VvXVxuLy8hIGF1dGhvciA6IENvbGluIERlYW4gOiBodHRwczovL2dpdGh1Yi5jb20vY29saW5kZWFuXG4vLyEgYXV0aG9yIDogTWlhIE5vcmRlbnRvZnQgSW1wZXJhdG9yaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWVzdGFzbWlhXG4vLyEgY29tbWVudCA6IG1pZXN0YXNtaWEgY29ycmVjdGVkIHRoZSB0cmFuc2xhdGlvbiBieSBjb2xpbmRlYW5cbi8vISBjb21tZW50IDogVml2YWt2byBjb3JyZWN0ZWQgdGhlIHRyYW5zbGF0aW9uIGJ5IGNvbGluZGVhbiBhbmQgbWllc3Rhc21pYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW8nLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcm9fZmVicnVhcm9fbWFydG9fYXByaWxvX21ham9fanVuaW9fanVsaW9fYcWtZ3VzdG9fc2VwdGVtYnJvX29rdG9icm9fbm92ZW1icm9fZGVjZW1icm8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2ZlYl9tYXJ0X2Fwcl9tYWpfanVuX2p1bF9hxa1nX3NlcHRfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnZGltYW7EiW9fbHVuZG9fbWFyZG9fbWVya3JlZG9fxLVhxa1kb192ZW5kcmVkb19zYWJhdG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkaW1fbHVuX21hcmRfbWVya1/EtWHFrV92ZW5fc2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RpX2x1X21hX21lX8S1YV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdbbGFdIERbLWFuIGRlXSBNTU1NLCBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ1tsYV0gRFstYW4gZGVdIE1NTU0sIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGRbbl0sIFtsYV0gRFstYW4gZGVdIE1NTU0sIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgW2xhXSBEWy1hbiBkZV0gTU1NLCBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL1thcF1cXC50XFwubS9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSA9PT0gJ3AnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3AudC5tLicgOiAnUC5ULk0uJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYS50Lm0uJyA6ICdBLlQuTS4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIb2RpYcWtIGplXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW01vcmdhxa0gamVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZFtuIGplXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0hpZXJhxa0gamVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW3Bhc2ludGFuXSBkZGRkW24gamVdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAncG9zdCAlcycsXG4gICAgICAgICAgICBwYXN0OiAnYW50YcWtICVzJyxcbiAgICAgICAgICAgIHM6ICdrZWxrYWogc2VrdW5kb2onLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRvaicsXG4gICAgICAgICAgICBtOiAndW51IG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b2onLFxuICAgICAgICAgICAgaDogJ3VudSBob3JvJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yb2onLFxuICAgICAgICAgICAgZDogJ3VudSB0YWdvJywgLy9uZSAnZGl1cm5vJywgxIlhciBlc3RhcyB1eml0YSBwb3IgcHJva3NpbXVtb1xuICAgICAgICAgICAgZGQ6ICclZCB0YWdvaicsXG4gICAgICAgICAgICBNOiAndW51IG1vbmF0bycsXG4gICAgICAgICAgICBNTTogJyVkIG1vbmF0b2onLFxuICAgICAgICAgICAgeTogJ3VudSBqYXJvJyxcbiAgICAgICAgICAgIHl5OiAnJWQgamFyb2onLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1hLyxcbiAgICAgICAgb3JkaW5hbDogJyVkYScsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTcGFuaXNoIFtlc11cbi8vISBhdXRob3IgOiBKdWxpbyBOYXB1csOtIDogaHR0cHM6Ly9naXRodWIuY29tL2p1bGlvbmNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydERvdCA9XG4gICAgICAgICAgICAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnZW5lX2ZlYl9tYXJfYWJyX21heV9qdW5fanVsX2Fnb19zZXBfb2N0X25vdl9kaWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15lbmUvaSxcbiAgICAgICAgICAgIC9eZmViL2ksXG4gICAgICAgICAgICAvXm1hci9pLFxuICAgICAgICAgICAgL15hYnIvaSxcbiAgICAgICAgICAgIC9ebWF5L2ksXG4gICAgICAgICAgICAvXmp1bi9pLFxuICAgICAgICAgICAgL15qdWwvaSxcbiAgICAgICAgICAgIC9eYWdvL2ksXG4gICAgICAgICAgICAvXnNlcC9pLFxuICAgICAgICAgICAgL15vY3QvaSxcbiAgICAgICAgICAgIC9ebm92L2ksXG4gICAgICAgICAgICAvXmRpYy9pLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMnLCB7XG4gICAgICAgIG1vbnRoczogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICddIExUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdlbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGg6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgdzogJ3VuYSBzZW1hbmEnLFxuICAgICAgICAgICAgd3c6ICclZCBzZW1hbmFzJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eTogJyVkIGHDsW9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZERhdGU6ICdGZWNoYSBpbnbDoWxpZGEnLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNwYW5pc2ggKERvbWluaWNhbiBSZXB1YmxpYykgW2VzLWRvXVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID1cbiAgICAgICAgICAgICdlbmUuX2ZlYi5fbWFyLl9hYnIuX21heS5fanVuLl9qdWwuX2Fnby5fc2VwLl9vY3QuX25vdi5fZGljLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmVuZS9pLFxuICAgICAgICAgICAgL15mZWIvaSxcbiAgICAgICAgICAgIC9ebWFyL2ksXG4gICAgICAgICAgICAvXmFici9pLFxuICAgICAgICAgICAgL15tYXkvaSxcbiAgICAgICAgICAgIC9eanVuL2ksXG4gICAgICAgICAgICAvXmp1bC9pLFxuICAgICAgICAgICAgL15hZ28vaSxcbiAgICAgICAgICAgIC9ec2VwL2ksXG4gICAgICAgICAgICAvXm9jdC9pLFxuICAgICAgICAgICAgL15ub3YvaSxcbiAgICAgICAgICAgIC9eZGljL2ksXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7XG5cbiAgICB2YXIgZXNEbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzLWRvJywge1xuICAgICAgICBtb250aHM6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90O1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICddIExUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdlbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGg6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgdzogJ3VuYSBzZW1hbmEnLFxuICAgICAgICAgICAgd3c6ICclZCBzZW1hbmFzJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eTogJyVkIGHDsW9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlc0RvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNwYW5pc2ggKE1leGljbykgW2VzLW14XVxuLy8hIGF1dGhvciA6IEpDIEZyYW5jbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qY2ZyYW5jb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID1cbiAgICAgICAgICAgICdlbmUuX2ZlYi5fbWFyLl9hYnIuX21heS5fanVuLl9qdWwuX2Fnby5fc2VwLl9vY3QuX25vdi5fZGljLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmVuZS9pLFxuICAgICAgICAgICAgL15mZWIvaSxcbiAgICAgICAgICAgIC9ebWFyL2ksXG4gICAgICAgICAgICAvXmFici9pLFxuICAgICAgICAgICAgL15tYXkvaSxcbiAgICAgICAgICAgIC9eanVuL2ksXG4gICAgICAgICAgICAvXmp1bC9pLFxuICAgICAgICAgICAgL15hZ28vaSxcbiAgICAgICAgICAgIC9ec2VwL2ksXG4gICAgICAgICAgICAvXm9jdC9pLFxuICAgICAgICAgICAgL15ub3YvaSxcbiAgICAgICAgICAgIC9eZGljL2ksXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7XG5cbiAgICB2YXIgZXNNeCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzLW14Jywge1xuICAgICAgICBtb250aHM6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90O1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnXSBMVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2hhY2UgJXMnLFxuICAgICAgICAgICAgczogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIHc6ICd1bmEgc2VtYW5hJyxcbiAgICAgICAgICAgIHd3OiAnJWQgc2VtYW5hcycsXG4gICAgICAgICAgICBNOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXk6ICclZCBhw7FvcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWREYXRlOiAnRmVjaGEgaW52w6FsaWRhJyxcbiAgICB9KTtcblxuICAgIHJldHVybiBlc014O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNwYW5pc2ggKFVuaXRlZCBTdGF0ZXMpIFtlcy11c11cbi8vISBhdXRob3IgOiBidXN0dGEgOiBodHRwczovL2dpdGh1Yi5jb20vYnVzdHRhXG4vLyEgYXV0aG9yIDogY2hyaXNyb2R6IDogaHR0cHM6Ly9naXRodWIuY29tL2Nocmlzcm9kelxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID1cbiAgICAgICAgICAgICdlbmUuX2ZlYi5fbWFyLl9hYnIuX21heS5fanVuLl9qdWwuX2Fnby5fc2VwLl9vY3QuX25vdi5fZGljLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmVuZS9pLFxuICAgICAgICAgICAgL15mZWIvaSxcbiAgICAgICAgICAgIC9ebWFyL2ksXG4gICAgICAgICAgICAvXmFici9pLFxuICAgICAgICAgICAgL15tYXkvaSxcbiAgICAgICAgICAgIC9eanVuL2ksXG4gICAgICAgICAgICAvXmp1bC9pLFxuICAgICAgICAgICAgL15hZ28vaSxcbiAgICAgICAgICAgIC9ec2VwL2ksXG4gICAgICAgICAgICAvXm9jdC9pLFxuICAgICAgICAgICAgL15ub3YvaSxcbiAgICAgICAgICAgIC9eZGljL2ksXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1JlZ2V4ID1cbiAgICAgICAgICAgIC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7XG5cbiAgICB2YXIgZXNVcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzLXVzJywge1xuICAgICAgICBtb250aHM6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90O1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICddIExUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdlbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGg6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgdzogJ3VuYSBzZW1hbmEnLFxuICAgICAgICAgICAgd3c6ICclZCBzZW1hbmFzJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eTogJyVkIGHDsW9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlc1VzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVzdG9uaWFuIFtldF1cbi8vISBhdXRob3IgOiBIZW5yeSBLZWhsbWFubiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYWRoZW5yeVxuLy8hIGltcHJvdmVtZW50cyA6IElsbGltYXIgVGFtYmVrIDogaHR0cHM6Ly9naXRodWIuY29tL3JhZ3Vsa2FcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzOiBbJ23DtW5lIHNla3VuZGknLCAnbcO1bmkgc2VrdW5kJywgJ3BhYXIgc2VrdW5kaXQnXSxcbiAgICAgICAgICAgIHNzOiBbbnVtYmVyICsgJ3Nla3VuZGknLCBudW1iZXIgKyAnc2VrdW5kaXQnXSxcbiAgICAgICAgICAgIG06IFsnw7xoZSBtaW51dGknLCAnw7xrcyBtaW51dCddLFxuICAgICAgICAgICAgbW06IFtudW1iZXIgKyAnIG1pbnV0aScsIG51bWJlciArICcgbWludXRpdCddLFxuICAgICAgICAgICAgaDogWyfDvGhlIHR1bm5pJywgJ3R1bmQgYWVnYScsICfDvGtzIHR1bmQnXSxcbiAgICAgICAgICAgIGhoOiBbbnVtYmVyICsgJyB0dW5uaScsIG51bWJlciArICcgdHVuZGknXSxcbiAgICAgICAgICAgIGQ6IFsnw7xoZSBww6RldmEnLCAnw7xrcyBww6RldiddLFxuICAgICAgICAgICAgTTogWydrdXUgYWphJywgJ2t1dSBhZWdhJywgJ8O8a3Mga3V1J10sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcga3V1JywgbnVtYmVyICsgJyBrdXVkJ10sXG4gICAgICAgICAgICB5OiBbJ8O8aGUgYWFzdGEnLCAnYWFzdGEnLCAnw7xrcyBhYXN0YSddLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIGFhc3RhJywgbnVtYmVyICsgJyBhYXN0YXQnXSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRba2V5XVsyXSA/IGZvcm1hdFtrZXldWzJdIDogZm9ybWF0W2tleV1bMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdldCcsIHtcbiAgICAgICAgbW9udGhzOiAnamFhbnVhcl92ZWVicnVhcl9tw6RydHNfYXByaWxsX21haV9qdXVuaV9qdXVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9vYmVyX25vdmVtYmVyX2RldHNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFhbl92ZWVicl9tw6RydHNfYXByX21haV9qdXVuaV9qdXVsaV9hdWdfc2VwdF9va3Rfbm92X2RldHMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ3DDvGhhcMOkZXZfZXNtYXNww6Rldl90ZWlzaXDDpGV2X2tvbG1hcMOkZXZfbmVsamFww6Rldl9yZWVkZV9sYXVww6Rldicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnUF9FX1RfS19OX1JfTCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdQX0VfVF9LX05fUl9MJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVMOkbmEsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0hvbW1lLF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbSsOkcmdtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbRWlsZSxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0VlbG1pbmVdIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBww6RyYXN0JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB0YWdhc2knLFxuICAgICAgICAgICAgczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiAnJWQgcMOkZXZhJyxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBldDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCYXNxdWUgW2V1XVxuLy8hIGF1dGhvciA6IEVuZWtvIElsbGFycmFtZW5kaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9laWxsYXJyYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGV1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXUnLCB7XG4gICAgICAgIG1vbnRoczogJ3VydGFycmlsYV9vdHNhaWxhX21hcnR4b2FfYXBpcmlsYV9tYWlhdHphX2VrYWluYV91enRhaWxhX2FidXp0dWFfaXJhaWxhX3VycmlhX2F6YXJvYV9hYmVuZHVhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICd1cnQuX290cy5fbWFyLl9hcGkuX21haS5fZWthLl91enQuX2FidS5faXJhLl91cnIuX2F6YS5fYWJlLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdpZ2FuZGVhX2FzdGVsZWhlbmFfYXN0ZWFydGVhX2FzdGVhemtlbmFfb3N0ZWd1bmFfb3N0aXJhbGFfbGFydW5iYXRhJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdpZy5fYWwuX2FyLl9hei5fb2cuX29sLl9sci4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnaWdfYWxfYXJfYXpfb2dfb2xfbHInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVktTS1EJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWVtrb10gTU1NIERbYV0nLFxuICAgICAgICAgICAgbGxsOiAnWVlZWVtrb10gTU1NIERbYV0gSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgWVlZWVtrb10gTU1NIERbYV0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tnYXVyXSBMVFtldGFuXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2JpaGFyXSBMVFtldGFuXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFRbZXRhbl0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1thdHpvXSBMVFtldGFuXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1thdXJyZWtvXSBkZGRkIExUW2V0YW5dJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgYmFycnUnLFxuICAgICAgICAgICAgcGFzdDogJ2R1ZWxhICVzJyxcbiAgICAgICAgICAgIHM6ICdzZWd1bmRvIGJhdHp1aycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG8nLFxuICAgICAgICAgICAgbTogJ21pbnV0dSBiYXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHUnLFxuICAgICAgICAgICAgaDogJ29yZHUgYmF0JyxcbiAgICAgICAgICAgIGhoOiAnJWQgb3JkdScsXG4gICAgICAgICAgICBkOiAnZWd1biBiYXQnLFxuICAgICAgICAgICAgZGQ6ICclZCBlZ3VuJyxcbiAgICAgICAgICAgIE06ICdoaWxhYmV0ZSBiYXQnLFxuICAgICAgICAgICAgTU06ICclZCBoaWxhYmV0ZScsXG4gICAgICAgICAgICB5OiAndXJ0ZSBiYXQnLFxuICAgICAgICAgICAgeXk6ICclZCB1cnRlJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBldTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQZXJzaWFuIFtmYV1cbi8vISBhdXRob3IgOiBFYnJhaGltIEJ5YWdvd2kgOiBodHRwczovL2dpdGh1Yi5jb20vZWJyYW1pbmlvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ9uxJyxcbiAgICAgICAgICAgIDI6ICfbsicsXG4gICAgICAgICAgICAzOiAn27MnLFxuICAgICAgICAgICAgNDogJ9u0JyxcbiAgICAgICAgICAgIDU6ICfbtScsXG4gICAgICAgICAgICA2OiAn27YnLFxuICAgICAgICAgICAgNzogJ9u3JyxcbiAgICAgICAgICAgIDg6ICfbuCcsXG4gICAgICAgICAgICA5OiAn27knLFxuICAgICAgICAgICAgMDogJ9uwJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ9uxJzogJzEnLFxuICAgICAgICAgICAgJ9uyJzogJzInLFxuICAgICAgICAgICAgJ9uzJzogJzMnLFxuICAgICAgICAgICAgJ9u0JzogJzQnLFxuICAgICAgICAgICAgJ9u1JzogJzUnLFxuICAgICAgICAgICAgJ9u2JzogJzYnLFxuICAgICAgICAgICAgJ9u3JzogJzcnLFxuICAgICAgICAgICAgJ9u4JzogJzgnLFxuICAgICAgICAgICAgJ9u5JzogJzknLFxuICAgICAgICAgICAgJ9uwJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGZhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmEnLCB7XG4gICAgICAgIG1vbnRoczogJ9qY2KfZhtmI24zZh1/ZgdmI2LHbjNmHX9mF2KfYsdizX9ii2YjYsduM2YRf2YXZh1/amNmI2KbZhl/amNmI2KbbjNmHX9in2YjYql/Ys9m+2KrYp9mF2KjYsV/Yp9qp2KrYqNixX9mG2YjYp9mF2KjYsV/Yr9iz2KfZhdio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9qY2KfZhtmI24zZh1/ZgdmI2LHbjNmHX9mF2KfYsdizX9ii2YjYsduM2YRf2YXZh1/amNmI2KbZhl/amNmI2KbbjNmHX9in2YjYql/Ys9m+2KrYp9mF2KjYsV/Yp9qp2KrYqNixX9mG2YjYp9mF2KjYsV/Yr9iz2KfZhdio2LEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OlxuICAgICAgICAgICAgJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YcnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfbjF/Yr1/Ys1/ahl/Zvl/YrF/YtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Zgtio2YQg2KfYsiDYuNmH2LF82KjYudivINin2LIg2LjZh9ixLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL9io2LnYryDYp9iyINi42YfYsS8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZgtio2YQg2KfYsiDYuNmH2LEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9io2LnYryDYp9iyINi42YfYsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YXYsdmI2LIg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2YHYsdiv2Kcg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2K/bjNix2YjYsiDYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvZvtuM2LRdIFvYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfYr9ixICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDZvtuM2LQnLFxuICAgICAgICAgICAgczogJ9qG2YbYryDYq9in2YbbjNmHJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2KvYp9mG24zZhycsXG4gICAgICAgICAgICBtOiAn24zaqSDYr9mC24zZgtmHJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/ZgtuM2YLZhycsXG4gICAgICAgICAgICBoOiAn24zaqSDYs9in2LnYqicsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudiqJyxcbiAgICAgICAgICAgIGQ6ICfbjNqpINix2YjYsicsXG4gICAgICAgICAgICBkZDogJyVkINix2YjYsicsXG4gICAgICAgICAgICBNOiAn24zaqSDZhdin2YcnLFxuICAgICAgICAgICAgTU06ICclZCDZhdin2YcnLFxuICAgICAgICAgICAgeTogJ9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPYp9mEJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW9uwLdu5XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfdmFLyxcbiAgICAgICAgb3JkaW5hbDogJyVk2YUnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZpbm5pc2ggW2ZpXVxuLy8hIGF1dGhvciA6IFRhcm1vIEFpZGFudGF1c3RhIDogaHR0cHM6Ly9naXRodWIuY29tL2JsZWFkb2ZcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBudW1iZXJzUGFzdCA9XG4gICAgICAgICAgICAnbm9sbGEgeWtzaSBrYWtzaSBrb2xtZSBuZWxqw6Qgdmlpc2kga3V1c2kgc2VpdHNlbcOkbiBrYWhkZWtzYW4geWhkZWtzw6RuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgICksXG4gICAgICAgIG51bWJlcnNGdXR1cmUgPSBbXG4gICAgICAgICAgICAnbm9sbGEnLFxuICAgICAgICAgICAgJ3loZGVuJyxcbiAgICAgICAgICAgICdrYWhkZW4nLFxuICAgICAgICAgICAgJ2tvbG1lbicsXG4gICAgICAgICAgICAnbmVsasOkbicsXG4gICAgICAgICAgICAndmlpZGVuJyxcbiAgICAgICAgICAgICdrdXVkZW4nLFxuICAgICAgICAgICAgbnVtYmVyc1Bhc3RbN10sXG4gICAgICAgICAgICBudW1iZXJzUGFzdFs4XSxcbiAgICAgICAgICAgIG51bWJlcnNQYXN0WzldLFxuICAgICAgICBdO1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ211dXRhbWFuIHNla3VubmluJyA6ICdtdXV0YW1hIHNla3VudGknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3Nla3VubmluJyA6ICdzZWt1bnRpYSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbWludXV0aW4nIDogJ21pbnV1dHRpJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGlhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpYSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6QnO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3DDpGl2w6RuJyA6ICdww6RpdsOkw6QnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1c2knO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1dHRhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3NpJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3R0YSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdmVyYmFsTnVtYmVyKG51bWJlciwgaXNGdXR1cmUpICsgJyAnICsgcmVzdWx0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiB2ZXJiYWxOdW1iZXIobnVtYmVyLCBpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyIDwgMTBcbiAgICAgICAgICAgID8gaXNGdXR1cmVcbiAgICAgICAgICAgICAgICA/IG51bWJlcnNGdXR1cmVbbnVtYmVyXVxuICAgICAgICAgICAgICAgIDogbnVtYmVyc1Bhc3RbbnVtYmVyXVxuICAgICAgICAgICAgOiBudW1iZXI7XG4gICAgfVxuXG4gICAgdmFyIGZpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmknLCB7XG4gICAgICAgIG1vbnRoczogJ3RhbW1pa3V1X2hlbG1pa3V1X21hYWxpc2t1dV9odWh0aWt1dV90b3Vrb2t1dV9rZXPDpGt1dV9oZWluw6RrdXVfZWxva3V1X3N5eXNrdXVfbG9rYWt1dV9tYXJyYXNrdXVfam91bHVrdXUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ3RhbW1pX2hlbG1pX21hYWxpc19odWh0aV90b3Vrb19rZXPDpF9oZWluw6RfZWxvX3N5eXNfbG9rYV9tYXJyYXNfam91bHUnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnc3VubnVudGFpX21hYW5hbnRhaV90aWlzdGFpX2tlc2tpdmlpa2tvX3RvcnN0YWlfcGVyamFudGFpX2xhdWFudGFpJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEbyBNTU1NW3RhXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0RvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBsOiAnRC5NLllZWVknLFxuICAgICAgICAgICAgbGw6ICdEbyBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGw6ICdEbyBNTU0gWVlZWSwgW2tsb10gSEgubW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdMOkbsOkw6RuXSBba2xvXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2h1b21lbm5hXSBba2xvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsb10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tlaWxlbl0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbdmlpbWVdIGRkZGRbbmFdIFtrbG9dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgcMOkw6RzdMOkJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBzaXR0ZW4nLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZpbGlwaW5vIFtmaWxdXG4vLyEgYXV0aG9yIDogRGFuIEhhZ21hbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oYWdtYW5kYW5cbi8vISBhdXRob3IgOiBNYXR0aGV3IENvIDogaHR0cHM6Ly9naXRodWIuY29tL21hdHRoZXdkZWVjb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGZpbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZpbCcsIHtcbiAgICAgICAgbW9udGhzOiAnRW5lcm9fUGVicmVyb19NYXJzb19BYnJpbF9NYXlvX0h1bnlvX0h1bHlvX0Fnb3N0b19TZXR5ZW1icmVfT2t0dWJyZV9Ob2J5ZW1icmVfRGlzeWVtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0VuZV9QZWJfTWFyX0Ficl9NYXlfSHVuX0h1bF9BZ29fU2V0X09rdF9Ob2JfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0xpbmdnb19MdW5lc19NYXJ0ZXNfTWl5ZXJrdWxlc19IdXdlYmVzX0JpeWVybmVzX1NhYmFkbycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0xpbl9MdW5fTWFyX01peV9IdXdfQml5X1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdMaV9MdV9NYV9NaV9IdV9CaV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdNTS9EL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnTU1NTSBELCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIERELCBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdMVCBbbmdheW9uZyBhcmF3XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0J1a2FzIG5nXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ0xUIFtzYSBzdXN1bm9kIG5hXSBkZGRkJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdMVCBba2FoYXBvbl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdMVCBbbm9vbmcgbmFrYXJhYW5nXSBkZGRkJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnc2EgbG9vYiBuZyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYW5nIG5ha2FsaXBhcycsXG4gICAgICAgICAgICBzOiAnaWxhbmcgc2VndW5kbycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG8nLFxuICAgICAgICAgICAgbTogJ2lzYW5nIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0bycsXG4gICAgICAgICAgICBoOiAnaXNhbmcgb3JhcycsXG4gICAgICAgICAgICBoaDogJyVkIG9yYXMnLFxuICAgICAgICAgICAgZDogJ2lzYW5nIGFyYXcnLFxuICAgICAgICAgICAgZGQ6ICclZCBhcmF3JyxcbiAgICAgICAgICAgIE06ICdpc2FuZyBidXdhbicsXG4gICAgICAgICAgICBNTTogJyVkIGJ1d2FuJyxcbiAgICAgICAgICAgIHk6ICdpc2FuZyB0YW9uJyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGFvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmaWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRmFyb2VzZSBbZm9dXG4vLyEgYXV0aG9yIDogUmFnbmFyIEpvaGFubmVzZW4gOiBodHRwczovL2dpdGh1Yi5jb20vcmFnbmFyMTIzXG4vLyEgYXV0aG9yIDogS3Jpc3RpYW4gU2FrYXJpc3NvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zYWthcmlzc29uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmbycsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHLDrWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ3N1bm51ZGFndXJfbcOhbmFkYWd1cl90w71zZGFndXJfbWlrdWRhZ3VyX2jDs3NkYWd1cl9mcsOtZ2dqYWRhZ3VyX2xleWdhcmRhZ3VyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzdW5fbcOhbl90w71zX21pa19ow7NzX2Zyw61fbGV5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3N1X23DoV90w71fbWlfaMOzX2ZyX2xlJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQuIE1NTU0sIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vDjSBkYWcga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW8ONIG1vcmdpbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW8ONIGdqw6FyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbc8Otw7BzdHVdIGRkZGQgW2tsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3VtICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBzw63DsGFuaScsXG4gICAgICAgICAgICBzOiAnZsOhIHNla3VuZCcsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGlyJyxcbiAgICAgICAgICAgIG06ICdlaW4gbWludXR0dXInLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHRpcicsXG4gICAgICAgICAgICBoOiAnZWluIHTDrW1pJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdMOtbWFyJyxcbiAgICAgICAgICAgIGQ6ICdlaW4gZGFndXInLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdhcicsXG4gICAgICAgICAgICBNOiAnZWluIG3DoW5hw7B1cicsXG4gICAgICAgICAgICBNTTogJyVkIG3DoW5hw7BpcicsXG4gICAgICAgICAgICB5OiAnZWl0dCDDoXInLFxuICAgICAgICAgICAgeXk6ICclZCDDoXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyZW5jaCBbZnJdXG4vLyEgYXV0aG9yIDogSm9obiBGaXNjaGVyIDogaHR0cHM6Ly9naXRodWIuY29tL2pmcm9mZmljZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1N0cmljdFJlZ2V4ID1cbiAgICAgICAgICAgIC9eKGphbnZpZXJ8ZsOpdnJpZXJ8bWFyc3xhdnJpbHxtYWl8anVpbnxqdWlsbGV0fGFvw7t0fHNlcHRlbWJyZXxvY3RvYnJlfG5vdmVtYnJlfGTDqWNlbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9XG4gICAgICAgICAgICAvKGphbnZcXC4/fGbDqXZyXFwuP3xtYXJzfGF2clxcLj98bWFpfGp1aW58anVpbFxcLj98YW/Du3R8c2VwdFxcLj98b2N0XFwuP3xub3ZcXC4/fGTDqWNcXC4/KS9pLFxuICAgICAgICBtb250aHNSZWdleCA9XG4gICAgICAgICAgICAvKGphbnZcXC4/fGbDqXZyXFwuP3xtYXJzfGF2clxcLj98bWFpfGp1aW58anVpbFxcLj98YW/Du3R8c2VwdFxcLj98b2N0XFwuP3xub3ZcXC4/fGTDqWNcXC4/fGphbnZpZXJ8ZsOpdnJpZXJ8bWFyc3xhdnJpbHxtYWl8anVpbnxqdWlsbGV0fGFvw7t0fHNlcHRlbWJyZXxvY3RvYnJlfG5vdmVtYnJlfGTDqWNlbWJyZSkvaSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmphbnYvaSxcbiAgICAgICAgICAgIC9eZsOpdnIvaSxcbiAgICAgICAgICAgIC9ebWFycy9pLFxuICAgICAgICAgICAgL15hdnIvaSxcbiAgICAgICAgICAgIC9ebWFpL2ksXG4gICAgICAgICAgICAvXmp1aW4vaSxcbiAgICAgICAgICAgIC9eanVpbC9pLFxuICAgICAgICAgICAgL15hb8O7dC9pLFxuICAgICAgICAgICAgL15zZXB0L2ksXG4gICAgICAgICAgICAvXm9jdC9pLFxuICAgICAgICAgICAgL15ub3YvaSxcbiAgICAgICAgICAgIC9eZMOpYy9pLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGZyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnInLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IG1vbnRoc1N0cmljdFJlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiBtb250aHNTaG9ydFN0cmljdFJlZ2V4LFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5czogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZGlfbHVfbWFfbWVfamVfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0F1am91cmTigJlodWkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRGVtYWluIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0hpZXIgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZGVybmllciDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYW5zICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdpbCB5IGEgJXMnLFxuICAgICAgICAgICAgczogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kZXMnLFxuICAgICAgICAgICAgbTogJ3VuZSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICd1bmUgaGV1cmUnLFxuICAgICAgICAgICAgaGg6ICclZCBoZXVyZXMnLFxuICAgICAgICAgICAgZDogJ3VuIGpvdXInLFxuICAgICAgICAgICAgZGQ6ICclZCBqb3VycycsXG4gICAgICAgICAgICB3OiAndW5lIHNlbWFpbmUnLFxuICAgICAgICAgICAgd3c6ICclZCBzZW1haW5lcycsXG4gICAgICAgICAgICBNOiAndW4gbW9pcycsXG4gICAgICAgICAgICBNTTogJyVkIG1vaXMnLFxuICAgICAgICAgICAgeTogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogUmV0dXJuICdlJyB3aGVuIGRheSBvZiBtb250aCA+IDEuIE1vdmUgdGhpcyBjYXNlIGluc2lkZVxuICAgICAgICAgICAgICAgIC8vIGJsb2NrIGZvciBtYXNjdWxpbmUgd29yZHMgYmVsb3cuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8zMzc1XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICcnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyZW5jaCAoQ2FuYWRhKSBbZnItY2FdXG4vLyEgYXV0aG9yIDogSm9uYXRoYW4gQWJvdXJiaWggOiBodHRwczovL2dpdGh1Yi5jb20vam9uYmNhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZnJDYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZyLWNhJywge1xuICAgICAgICBtb250aHM6ICdqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZGltLl9sdW4uX21hci5fbWVyLl9qZXUuX3Zlbi5fc2FtLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkaV9sdV9tYV9tZV9qZV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RhbnMgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2lsIHkgYSAlcycsXG4gICAgICAgICAgICBzOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRlcycsXG4gICAgICAgICAgICBtOiAndW5lIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ3VuZSBoZXVyZScsXG4gICAgICAgICAgICBoaDogJyVkIGhldXJlcycsXG4gICAgICAgICAgICBkOiAndW4gam91cicsXG4gICAgICAgICAgICBkZDogJyVkIGpvdXJzJyxcbiAgICAgICAgICAgIE06ICd1biBtb2lzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9pcycsXG4gICAgICAgICAgICB5OiAndW4gYW4nLFxuICAgICAgICAgICAgeXk6ICclZCBhbnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXJ8ZSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyQ2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRnJlbmNoIChTd2l0emVybGFuZCkgW2ZyLWNoXVxuLy8hIGF1dGhvciA6IEdhc3BhcmQgQnVjaGVyIDogaHR0cHM6Ly9naXRodWIuY29tL2dhc3BhcmRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBmckNoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2gnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RpX2x1X21hX21lX2plX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFucyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaWwgeSBhICVzJyxcbiAgICAgICAgICAgIHM6ICdxdWVscXVlcyBzZWNvbmRlcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZGVzJyxcbiAgICAgICAgICAgIG06ICd1bmUgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAndW5lIGhldXJlJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgICAgIGQ6ICd1biBqb3VyJyxcbiAgICAgICAgICAgIGRkOiAnJWQgam91cnMnLFxuICAgICAgICAgICAgTTogJ3VuIG1vaXMnLFxuICAgICAgICAgICAgTU06ICclZCBtb2lzJyxcbiAgICAgICAgICAgIHk6ICd1biBhbicsXG4gICAgICAgICAgICB5eTogJyVkIGFucycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmckNoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyaXNpYW4gW2Z5XVxuLy8hIGF1dGhvciA6IFJvYmluIHZhbiBkZXIgVmxpZXQgOiBodHRwczovL2dpdGh1Yi5jb20vcm9iaW4wdmFuMGRlcjB2XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9XG4gICAgICAgICAgICAnamFuLl9mZWIuX21ydC5fYXByLl9tYWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9XG4gICAgICAgICAgICAnamFuX2ZlYl9tcnRfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyk7XG5cbiAgICB2YXIgZnkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmeScsIHtcbiAgICAgICAgbW9udGhzOiAnamFubmV3YXJpc19mZWJyZXdhcmlzX21hYXJ0X2FwcmlsX21hYWllX2p1bnlfanVseV9hdWd1c3R1c19zZXB0aW1iZXJfb2t0b2Jlcl9ub3ZpbWJlcl9kZXNpbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhvdXREb3RzW20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzW20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnc25laW5fbW9hbmRlaV90aWlzZGVpX3dvYW5zZGVpX3RvbmdlcnNkZWlfZnJlZWRfc25lb24nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzaS5fbW8uX3RpLl93by5fdG8uX2ZyLl9zby4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU2lfTW9fVGlfV29fVG9fRnJfU28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hqb2VkIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vYXJuIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2p1c3RlciBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbw7RmcsO7bmVdIGRkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29lciAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgbHluJyxcbiAgICAgICAgICAgIHM6ICdpbiBwZWFyIHNla29uZGVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vrb25kZW4nLFxuICAgICAgICAgICAgbTogJ2llbiBtaW7DunQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVuJyxcbiAgICAgICAgICAgIGg6ICdpZW4gb2VyZScsXG4gICAgICAgICAgICBoaDogJyVkIG9lcmVuJyxcbiAgICAgICAgICAgIGQ6ICdpZW4gZGVpJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgTTogJ2llbiBtb2FubmUnLFxuICAgICAgICAgICAgTU06ICclZCBtb2FubmVuJyxcbiAgICAgICAgICAgIHk6ICdpZW4gamllcicsXG4gICAgICAgICAgICB5eTogJyVkIGppZXJyZW4nLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgbnVtYmVyICtcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjAgPyAnc3RlJyA6ICdkZScpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSXJpc2ggb3IgSXJpc2ggR2FlbGljIFtnYV1cbi8vISBhdXRob3IgOiBBbmRyw6kgU2lsdmEgOiBodHRwczovL2dpdGh1Yi5jb20vYXNrcHRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICAgICAnRWFuw6FpcicsXG4gICAgICAgICAgICAnRmVhYmhyYScsXG4gICAgICAgICAgICAnTcOhcnRhJyxcbiAgICAgICAgICAgICdBaWJyZcOhbicsXG4gICAgICAgICAgICAnQmVhbHRhaW5lJyxcbiAgICAgICAgICAgICdNZWl0aGVhbWgnLFxuICAgICAgICAgICAgJ0nDumlsJyxcbiAgICAgICAgICAgICdMw7puYXNhJyxcbiAgICAgICAgICAgICdNZcOhbiBGw7NtaGFpcicsXG4gICAgICAgICAgICAnRGVpcmVhZGggRsOzbWhhaXInLFxuICAgICAgICAgICAgJ1NhbWhhaW4nLFxuICAgICAgICAgICAgJ05vbGxhaWcnLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNTaG9ydCA9IFtcbiAgICAgICAgICAgICdFYW4nLFxuICAgICAgICAgICAgJ0ZlYWJoJyxcbiAgICAgICAgICAgICdNw6FydCcsXG4gICAgICAgICAgICAnQWliJyxcbiAgICAgICAgICAgICdCZWFsJyxcbiAgICAgICAgICAgICdNZWl0aCcsXG4gICAgICAgICAgICAnScO6aWwnLFxuICAgICAgICAgICAgJ0zDum4nLFxuICAgICAgICAgICAgJ00uRi4nLFxuICAgICAgICAgICAgJ0QuRi4nLFxuICAgICAgICAgICAgJ1NhbWgnLFxuICAgICAgICAgICAgJ05vbGwnLFxuICAgICAgICBdLFxuICAgICAgICB3ZWVrZGF5cyA9IFtcbiAgICAgICAgICAgICdEw6kgRG9taG5haWdoJyxcbiAgICAgICAgICAgICdEw6kgTHVhaW4nLFxuICAgICAgICAgICAgJ0TDqSBNw6FpcnQnLFxuICAgICAgICAgICAgJ0TDqSBDw6lhZGFvaW4nLFxuICAgICAgICAgICAgJ0TDqWFyZGFvaW4nLFxuICAgICAgICAgICAgJ0TDqSBoQW9pbmUnLFxuICAgICAgICAgICAgJ0TDqSBTYXRoYWlybicsXG4gICAgICAgIF0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgPSBbJ0RvbWgnLCAnTHVhbicsICdNw6FpcnQnLCAnQ8OpYWQnLCAnRMOpYXInLCAnQW9pbmUnLCAnU2F0aCddLFxuICAgICAgICB3ZWVrZGF5c01pbiA9IFsnRG8nLCAnTHUnLCAnTcOhJywgJ0PDqScsICdEw6knLCAnQScsICdTYSddO1xuXG4gICAgdmFyIGdhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ2EnLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzU2hvcnQsXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogd2Vla2RheXNTaG9ydCxcbiAgICAgICAgd2Vla2RheXNNaW46IHdlZWtkYXlzTWluLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0lubml1IGFnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0Ftw6FyYWNoIGFnXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FnXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0lubsOpIGFnXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3NlbyBjYWl0ZV0gW2FnXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2kgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMOzIHNoaW4nLFxuICAgICAgICAgICAgczogJ2PDunBsYSBzb2ljaW5kJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc29pY2luZCcsXG4gICAgICAgICAgICBtOiAnbsOzaW3DqWFkJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbsOzaW3DqWFkJyxcbiAgICAgICAgICAgIGg6ICd1YWlyIGFuIGNobG9pZycsXG4gICAgICAgICAgICBoaDogJyVkIHVhaXIgYW4gY2hsb2lnJyxcbiAgICAgICAgICAgIGQ6ICdsw6EnLFxuICAgICAgICAgICAgZGQ6ICclZCBsw6EnLFxuICAgICAgICAgICAgTTogJ23DrScsXG4gICAgICAgICAgICBNTTogJyVkIG3DrW9ubmEnLFxuICAgICAgICAgICAgeTogJ2JsaWFpbicsXG4gICAgICAgICAgICB5eTogJyVkIGJsaWFpbicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShkfG5hfG1oKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgPT09IDEgPyAnZCcgOiBudW1iZXIgJSAxMCA9PT0gMiA/ICduYScgOiAnbWgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNjb3R0aXNoIEdhZWxpYyBbZ2RdXG4vLyEgYXV0aG9yIDogSm9uIEFzaGRvd24gOiBodHRwczovL2dpdGh1Yi5jb20vam9uYXNoZG93blxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgICAgICdBbSBGYW9pbGxlYWNoJyxcbiAgICAgICAgICAgICdBbiBHZWFycmFuJyxcbiAgICAgICAgICAgICdBbSBNw6BydCcsXG4gICAgICAgICAgICAnQW4gR2libGVhbicsXG4gICAgICAgICAgICAnQW4gQ8OoaXRlYW4nLFxuICAgICAgICAgICAgJ0FuIHQtw5JnbWhpb3MnLFxuICAgICAgICAgICAgJ0FuIHQtSXVjaGFyJyxcbiAgICAgICAgICAgICdBbiBMw7luYXN0YWwnLFxuICAgICAgICAgICAgJ0FuIHQtU3VsdGFpbicsXG4gICAgICAgICAgICAnQW4gRMOgbWhhaXInLFxuICAgICAgICAgICAgJ0FuIHQtU2FtaGFpbicsXG4gICAgICAgICAgICAnQW4gRMO5YmhsYWNoZCcsXG4gICAgICAgIF0sXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gW1xuICAgICAgICAgICAgJ0Zhb2knLFxuICAgICAgICAgICAgJ0dlYXInLFxuICAgICAgICAgICAgJ03DoHJ0JyxcbiAgICAgICAgICAgICdHaWJsJyxcbiAgICAgICAgICAgICdDw6hpdCcsXG4gICAgICAgICAgICAnw5JnbWgnLFxuICAgICAgICAgICAgJ0l1Y2gnLFxuICAgICAgICAgICAgJ0zDuW4nLFxuICAgICAgICAgICAgJ1N1bHQnLFxuICAgICAgICAgICAgJ0TDoG1oJyxcbiAgICAgICAgICAgICdTYW1oJyxcbiAgICAgICAgICAgICdEw7liaCcsXG4gICAgICAgIF0sXG4gICAgICAgIHdlZWtkYXlzID0gW1xuICAgICAgICAgICAgJ0RpZMOybWhuYWljaCcsXG4gICAgICAgICAgICAnRGlsdWFpbicsXG4gICAgICAgICAgICAnRGltw6BpcnQnLFxuICAgICAgICAgICAgJ0RpY2lhZGFpbicsXG4gICAgICAgICAgICAnRGlhcmRhb2luJyxcbiAgICAgICAgICAgICdEaWhhb2luZScsXG4gICAgICAgICAgICAnRGlzYXRoYWlybmUnLFxuICAgICAgICBdLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0ID0gWydEaWQnLCAnRGlsJywgJ0RpbScsICdEaWMnLCAnRGlhJywgJ0RpaCcsICdEaXMnXSxcbiAgICAgICAgd2Vla2RheXNNaW4gPSBbJ0TDsicsICdMdScsICdNw6AnLCAnQ2knLCAnQXInLCAnSGEnLCAnU2EnXTtcblxuICAgIHZhciBnZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dkJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRoc1Nob3J0LFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IHdlZWtkYXlzU2hvcnQsXG4gICAgICAgIHdlZWtkYXlzTWluOiB3ZWVrZGF5c01pbixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tBbi1kaXVnaCBhaWddIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQS1tw6BpcmVhY2ggYWlnXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tBbi1kw6ggYWlnXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3NlbyBjaGFpZGhdIFthaWddIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnYW5uIGFuICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdiaG8gY2hpb25uICVzJyxcbiAgICAgICAgICAgIHM6ICdiZWFnYW4gZGlvZ2FuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgZGlvZ2FuJyxcbiAgICAgICAgICAgIG06ICdtaW9uYWlkJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWlvbmFpZGVhbicsXG4gICAgICAgICAgICBoOiAndWFpcicsXG4gICAgICAgICAgICBoaDogJyVkIHVhaXJlYW4nLFxuICAgICAgICAgICAgZDogJ2xhdGhhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgbGF0aGEnLFxuICAgICAgICAgICAgTTogJ23DrG9zJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOsb3NhbicsXG4gICAgICAgICAgICB5OiAnYmxpYWRobmEnLFxuICAgICAgICAgICAgeXk6ICclZCBibGlhZGhuYScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShkfG5hfG1oKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgPT09IDEgPyAnZCcgOiBudW1iZXIgJSAxMCA9PT0gMiA/ICduYScgOiAnbWgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdhbGljaWFuIFtnbF1cbi8vISBhdXRob3IgOiBKdWFuIEcuIEh1cnRhZG8gOiBodHRwczovL2dpdGh1Yi5jb20vanVhbmdodXJ0YWRvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZ2wgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnbCcsIHtcbiAgICAgICAgbW9udGhzOiAneGFuZWlyb19mZWJyZWlyb19tYXJ6b19hYnJpbF9tYWlvX3h1w7FvX3h1bGxvX2Fnb3N0b19zZXRlbWJyb19vdXR1YnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICd4YW4uX2ZlYi5fbWFyLl9hYnIuX21haS5feHXDsS5feHVsLl9hZ28uX3NldC5fb3V0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21pbmdvX2x1bnNfbWFydGVzX23DqXJjb3Jlc194b3Zlc192ZW5yZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbS5fbHVuLl9tYXIuX23DqXIuX3hvdi5fdmVuLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb19sdV9tYV9tw6lfeG9fdmVfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveGUgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxw6EgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFsnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICfDoXMnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbb250ZSAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICfDoScgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tvXSBkZGRkIFtwYXNhZG8gJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnw6FzJyA6ICdhJykgKyAnXSBMVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0ci5pbmRleE9mKCd1bicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbicgKyBzdHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAnZW4gJyArIHN0cjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0OiAnaGFpICVzJyxcbiAgICAgICAgICAgIHM6ICd1bnMgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW5oYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkw61hcycsXG4gICAgICAgICAgICBNOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VuIGFubycsXG4gICAgICAgICAgICB5eTogJyVkIGFub3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEtvbmthbmkgRGV2YW5hZ2FyaSBzY3JpcHQgW2dvbS1kZXZhXVxuLy8hIGF1dGhvciA6IFRoZSBEaXNjb3ZlcmVyIDogaHR0cHM6Ly9naXRodWIuY29tL1dpa2lEaXNjb3ZlcmVyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgczogWyfgpKXgpYvgpKHgpK/gpL4g4KS44KWF4KSV4KSC4KSh4KS+4KSC4KSo4KWAJywgJ+CkpeCli+CkoeClhyDgpLjgpYXgpJXgpILgpKEnXSxcbiAgICAgICAgICAgIHNzOiBbbnVtYmVyICsgJyDgpLjgpYXgpJXgpILgpKHgpL7gpILgpKjgpYAnLCBudW1iZXIgKyAnIOCkuOClheCkleCkguCkoSddLFxuICAgICAgICAgICAgbTogWyfgpI/gpJXgpL4g4KSu4KS/4KSj4KSf4KS+4KSoJywgJ+Ckj+CklSDgpK7gpL/gpKjgpYLgpJ8nXSxcbiAgICAgICAgICAgIG1tOiBbbnVtYmVyICsgJyDgpK7gpL/gpKPgpJ/gpL7gpILgpKjgpYAnLCBudW1iZXIgKyAnIOCkruCkv+Cko+Ckn+CkvuCkgiddLFxuICAgICAgICAgICAgaDogWyfgpI/gpJXgpL4g4KS14KSw4KS+4KSoJywgJ+Ckj+CklSDgpLXgpLAnXSxcbiAgICAgICAgICAgIGhoOiBbbnVtYmVyICsgJyDgpLXgpLDgpL7gpILgpKjgpYAnLCBudW1iZXIgKyAnIOCkteCksOCkvuCkgiddLFxuICAgICAgICAgICAgZDogWyfgpI/gpJXgpL4g4KSm4KS/4KS44KS+4KSoJywgJ+Ckj+CklSDgpKbgpYDgpLgnXSxcbiAgICAgICAgICAgIGRkOiBbbnVtYmVyICsgJyDgpKbgpL/gpLjgpL7gpILgpKjgpYAnLCBudW1iZXIgKyAnIOCkpuClgOCkuCddLFxuICAgICAgICAgICAgTTogWyfgpI/gpJXgpL4g4KSu4KWN4KS54KSv4KSo4KWN4KSv4KS+4KSoJywgJ+Ckj+CklSDgpK7gpY3gpLngpK/gpKjgpYsnXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyDgpK7gpY3gpLngpK/gpKjgpY3gpK/gpL7gpKjgpYAnLCBudW1iZXIgKyAnIOCkruCljeCkueCkr+CkqOClhyddLFxuICAgICAgICAgICAgeTogWyfgpI/gpJXgpL4g4KS14KSw4KWN4KS44KS+4KSoJywgJ+Ckj+CklSDgpLXgpLDgpY3gpLgnXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyDgpLXgpLDgpY3gpLjgpL7gpILgpKjgpYAnLCBudW1iZXIgKyAnIOCkteCksOCljeCkuOCkvuCkgiddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBnb21EZXZhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ29tLWRldmEnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn4KSc4KS+4KSo4KWH4KS14KS+4KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCkvuCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSP4KSq4KWN4KSw4KWA4KSyX+CkruClh1/gpJzgpYLgpKhf4KSc4KWB4KSy4KSvX+CkkeCkl+CkuOCljeCkn1/gpLjgpKrgpY3gpJ/gpYfgpILgpKzgpLBf4KSR4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkteCljeCkueClh+CkguCkrOCksF/gpKHgpL/gpLjgpYfgpILgpKzgpLAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiAn4KSc4KS+4KSo4KWH4KS14KS+4KSw4KWA4KSa4KWN4KSv4KS+X+Ckq+Clh+CkrOCljeCksOClgeCkteCkvuCksOClgOCkmuCljeCkr+Ckvl/gpK7gpL7gpLDgpY3gpJrgpL7gpJrgpY3gpK/gpL5f4KSP4KSq4KWN4KSw4KWA4KSy4KS+4KSa4KWN4KSv4KS+X+CkruClh+Ckr+CkvuCkmuCljeCkr+Ckvl/gpJzgpYLgpKjgpL7gpJrgpY3gpK/gpL5f4KSc4KWB4KSy4KSv4KS+4KSa4KWN4KSv4KS+X+CkkeCkl+CkuOCljeCkn+CkvuCkmuCljeCkr+Ckvl/gpLjgpKrgpY3gpJ/gpYfgpILgpKzgpLDgpL7gpJrgpY3gpK/gpL5f4KSR4KSV4KWN4KSf4KWL4KSs4KSw4KS+4KSa4KWN4KSv4KS+X+CkqOCli+CkteCljeCkueClh+CkguCkrOCksOCkvuCkmuCljeCkr+Ckvl/gpKHgpL/gpLjgpYfgpILgpKzgpLDgpL7gpJrgpY3gpK/gpL4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvTU1NTShcXHMpK0Rbb0RdPy8sXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CknOCkvuCkqOClhy5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJpf4KSP4KSq4KWN4KSw4KWALl/gpK7gpYdf4KSc4KWC4KSoX+CknOClgeCksi5f4KSR4KSXLl/gpLjgpKrgpY3gpJ/gpYfgpIIuX+CkkeCkleCljeCkn+Cliy5f4KSo4KWL4KS14KWN4KS54KWH4KSCLl/gpKHgpL/gpLjgpYfgpIIuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4KSG4KSv4KSk4KS+4KSwX+CkuOCli+CkruCkvuCksF/gpK7gpILgpJfgpLPgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+CkrOCkv+CksOClh+CkuOCljeCkpOCkvuCksF/gpLjgpYHgpJXgpY3gpLDgpL7gpLBf4KS24KWH4KSo4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KSG4KSv4KSkLl/gpLjgpYvgpK4uX+CkruCkguCkl+Cksy5f4KSs4KWB4KSnLl/gpKzgpY3gpLDgpYfgpLjgpY3gpKQuX+CkuOClgeCkleCljeCksC5f4KS24KWH4KSoLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgpIZf4KS44KWLX+CkruCkgl/gpKzgpYFf4KSs4KWN4KSw4KWHX+CkuOClgV/gpLbgpYcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIFvgpLXgpL7gpJzgpKTgpL7gpIJdJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyBb4KS14KS+4KSc4KSk4KS+4KSCXScsXG4gICAgICAgICAgICBMOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEEgaDptbSBb4KS14KS+4KSc4KSk4KS+4KSCXScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBEbywgWVlZWSwgQSBoOm1tIFvgpLXgpL7gpJzgpKTgpL7gpIJdJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVksIEEgaDptbSBb4KS14KS+4KSc4KSk4KS+4KSCXScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CkhuCkr+CknF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpKvgpL7gpLLgpY3gpK/gpL7gpIJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+Ckq+ClgeCkoeCksuCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CkleCkvuCksl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KSr4KS+4KSf4KSy4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCkhuCkpuClgOCkgicsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjgpLXgpYfgpLApLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBvcmRpbmFsICfgpLXgpYfgpLAnIG9ubHkgYXBwbGllcyB0byBkYXkgb2YgdGhlIG1vbnRoXG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4KS14KWH4KSwJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWtcbiAgICAgICAgICAgIGRveTogMywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyICg3ICsgMCAtIDQpXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpYB84KS44KSV4KS+4KSz4KWA4KSCfOCkpuCkqOCkquCkvuCksOCkvuCkgnzgpLjgpL7gpILgpJzgpYcvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpJXgpL7gpLPgpYDgpIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KSo4KSq4KS+4KSw4KS+4KSCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID4gMTIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkvuCkguCknOClhycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkleCkvuCks+ClgOCkgic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KSo4KSq4KS+4KSw4KS+4KSCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpL7gpILgpJzgpYcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOClgCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ29tRGV2YTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLb25rYW5pIExhdGluIHNjcmlwdCBbZ29tLWxhdG5dXG4vLyEgYXV0aG9yIDogVGhlIERpc2NvdmVyZXIgOiBodHRwczovL2dpdGh1Yi5jb20vV2lraURpc2NvdmVyZXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzOiBbJ3Rob2RkZWEgc2Vrb25kYW1uaScsICd0aG9kZGUgc2Vrb25kJ10sXG4gICAgICAgICAgICBzczogW251bWJlciArICcgc2Vrb25kYW1uaScsIG51bWJlciArICcgc2Vrb25kJ10sXG4gICAgICAgICAgICBtOiBbJ2VrYSBtaW50YW4nLCAnZWsgbWludXQnXSxcbiAgICAgICAgICAgIG1tOiBbbnVtYmVyICsgJyBtaW50YW1uaScsIG51bWJlciArICcgbWludGFtJ10sXG4gICAgICAgICAgICBoOiBbJ2VrYSB2b3JhbicsICdlayB2b3InXSxcbiAgICAgICAgICAgIGhoOiBbbnVtYmVyICsgJyB2b3JhbW5pJywgbnVtYmVyICsgJyB2b3JhbSddLFxuICAgICAgICAgICAgZDogWydla2EgZGlzYW4nLCAnZWsgZGlzJ10sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcgZGlzYW1uaScsIG51bWJlciArICcgZGlzJ10sXG4gICAgICAgICAgICBNOiBbJ2VrYSBtaG9pbmVhbicsICdlayBtaG9pbm8nXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyBtaG9pbmVhbW5pJywgbnVtYmVyICsgJyBtaG9pbmUnXSxcbiAgICAgICAgICAgIHk6IFsnZWthIHZvcnNhbicsICdlayB2b3JvcyddLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIHZvcnNhbW5pJywgbnVtYmVyICsgJyB2b3JzYW0nXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZ29tTGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dvbS1sYXRuJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ0phbmVyX0ZlYnJlcl9NYXJzX0FicmlsX01haV9KdW5fSnVsYWlfQWdvc3RfU2V0ZW1icl9PdHVicl9Ob3ZlbWJyX0RlemVtYnInLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiAnSmFuZXJhY2hlYV9GZWJyZXJhY2hlYV9NYXJzYWNoZWFfQWJyaWxhY2hlYV9NYWlhY2hlYV9KdW5hY2hlYV9KdWxhaWFjaGVhX0Fnb3N0YWNoZWFfU2V0ZW1icmFjaGVhX090dWJyYWNoZWFfTm92ZW1icmFjaGVhX0RlemVtYnJhY2hlYScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9NTU1NKFxccykrRFtvRF0/LyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnSmFuLl9GZWIuX01hcnNfQWJyLl9NYWlfSnVuX0p1bC5fQWdvLl9TZXQuX090dS5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogXCJBaXRhcl9Tb21hcl9Nb25nbGxhcl9CdWRodmFyX0JpcmVzdGFyX1N1a3Jhcl9Tb24ndmFyXCIuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0FpdC5fU29tLl9Nb24uX0J1ZC5fQnJlLl9TdWsuX1Nvbi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnQWlfU21fTW9fQnVfQnJfU3VfU24nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIFt2YXp0YV0nLFxuICAgICAgICAgICAgTDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBBIGg6bW0gW3ZhenRhXScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBEbywgWVlZWSwgQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRCBNTU0gWVlZWSwgQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tBaXpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRmFsZWFtXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tGdWRkbG9dIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tLYWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0ZhdHRsb10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZGltJyxcbiAgICAgICAgICAgIHM6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgb3JkaW5hbCAnZXInIG9ubHkgYXBwbGllcyB0byBkYXkgb2YgdGhlIG1vbnRoXG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnZXInO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vla1xuICAgICAgICAgICAgZG95OiAzLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIgKDcgKyAwIC0gNClcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3JhdGl8c29rYWxsaW18ZG9ucGFyYW18c2FuamUvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdyYXRpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29rYWxsaW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZG9ucGFyYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPiAxMiA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2FuamUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncmF0aSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29rYWxsaW0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RvbnBhcmFtJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzYW5qZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAncmF0aSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ29tTGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHdWphcmF0aSBbZ3VdXG4vLyEgYXV0aG9yIDogS2F1c2hpayBUaGFua2kgOiBodHRwczovL2dpdGh1Yi5jb20vS2F1c2hpazE5ODdcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4KunJyxcbiAgICAgICAgICAgIDI6ICfgq6gnLFxuICAgICAgICAgICAgMzogJ+CrqScsXG4gICAgICAgICAgICA0OiAn4KuqJyxcbiAgICAgICAgICAgIDU6ICfgq6snLFxuICAgICAgICAgICAgNjogJ+CrrCcsXG4gICAgICAgICAgICA3OiAn4KutJyxcbiAgICAgICAgICAgIDg6ICfgq64nLFxuICAgICAgICAgICAgOTogJ+CrrycsXG4gICAgICAgICAgICAwOiAn4KumJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Crpyc6ICcxJyxcbiAgICAgICAgICAgICfgq6gnOiAnMicsXG4gICAgICAgICAgICAn4KupJzogJzMnLFxuICAgICAgICAgICAgJ+Crqic6ICc0JyxcbiAgICAgICAgICAgICfgq6snOiAnNScsXG4gICAgICAgICAgICAn4KusJzogJzYnLFxuICAgICAgICAgICAgJ+CrrSc6ICc3JyxcbiAgICAgICAgICAgICfgq64nOiAnOCcsXG4gICAgICAgICAgICAn4KuvJzogJzknLFxuICAgICAgICAgICAgJ+Crpic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBndSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2d1Jywge1xuICAgICAgICBtb250aHM6ICfgqpzgqr7gqqjgq43gqq/gq4HgqobgqrDgq4Bf4Kqr4KuH4Kqs4KuN4Kqw4KuB4KqG4Kqw4KuAX+CqruCqvuCqsOCrjeCqml/gqo/gqqrgq43gqrDgqr/gqrJf4Kqu4KuHX+CqnOCrguCqqF/gqpzgq4HgqrLgqr7gqohf4KqR4KqX4Kq44KuN4KqfX+CquOCqquCrjeCqn+Crh+CqruCrjeCqrOCqsF/gqpHgqpXgq43gqp/gq43gqqzgqrBf4Kqo4Kq14KuH4Kqu4KuN4Kqs4KqwX+CqoeCqv+CquOCrh+CqruCrjeCqrOCqsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4Kqc4Kq+4Kqo4KuN4Kqv4KuBLl/gqqvgq4fgqqzgq43gqrDgq4EuX+CqruCqvuCqsOCrjeCqml/gqo/gqqrgq43gqrDgqr8uX+CqruCrh1/gqpzgq4Lgqqhf4Kqc4KuB4Kqy4Kq+Ll/gqpHgqpcuX+CquOCqquCrjeCqn+Crhy5f4KqR4KqV4KuN4Kqf4KuNLl/gqqjgqrXgq4cuX+CqoeCqv+CquOCrhy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfgqrDgqrXgqr/gqrXgqr7gqrBf4Kq44KuL4Kqu4Kq14Kq+4KqwX+CqruCqguCql+Cqs+CqteCqvuCqsF/gqqzgq4Hgqqfgq43gqrXgqr7gqrBf4KqX4KuB4Kqw4KuB4Kq14Kq+4KqwX+CqtuCrgeCqleCrjeCqsOCqteCqvuCqsF/gqrbgqqjgqr/gqrXgqr7gqrAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgqrDgqrXgqr9f4Kq44KuL4KquX+CqruCqguCql+Cqs1/gqqzgq4Hgqqfgq41f4KqX4KuB4Kqw4KuBX+CqtuCrgeCqleCrjeCqsF/gqrbgqqjgqr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KqwX+CquOCri1/gqq7gqoJf4Kqs4KuBX+Cql+CrgV/gqrbgq4Ff4Kq2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgqobgqpxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KqV4Kq+4Kqy4KuHXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KqX4KqH4KqV4Kq+4Kqy4KuHXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgqqrgqr7gqpvgqrLgqr5dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4Kqu4Kq+JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgqqrgqrngq4fgqrLgqr4nLFxuICAgICAgICAgICAgczogJ+CqheCqruCrgeCqlSDgqqrgqrPgq4snLFxuICAgICAgICAgICAgc3M6ICclZCDgqrjgq4fgqpXgqoLgqqEnLFxuICAgICAgICAgICAgbTogJ+Cqj+CqlSDgqq7gqr/gqqjgqr/gqp8nLFxuICAgICAgICAgICAgbW06ICclZCDgqq7gqr/gqqjgqr/gqp8nLFxuICAgICAgICAgICAgaDogJ+Cqj+CqlSDgqpXgqrLgqr7gqpUnLFxuICAgICAgICAgICAgaGg6ICclZCDgqpXgqrLgqr7gqpUnLFxuICAgICAgICAgICAgZDogJ+Cqj+CqlSDgqqbgqr/gqrXgqrgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgqqbgqr/gqrXgqrgnLFxuICAgICAgICAgICAgTTogJ+Cqj+CqlSDgqq7gqrngqr/gqqjgq4snLFxuICAgICAgICAgICAgTU06ICclZCDgqq7gqrngqr/gqqjgq4snLFxuICAgICAgICAgICAgeTogJ+Cqj+CqlSDgqrXgqrDgq43gqrcnLFxuICAgICAgICAgICAgeXk6ICclZCDgqrXgqrDgq43gqrcnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kun4Kuo4Kup4Kuq4Kur4Kus4Kut4Kuu4Kuv4KumXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBHdWphcmF0aSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBHdWphcmF0aS5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CqsOCqvuCqpHzgqqzgqqrgq4vgqrB84Kq44Kq14Kq+4KqwfOCquOCqvuCqguCqnC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CqsOCqvuCqpCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqteCqvuCqsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqqzgqqrgq4vgqrAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqvuCqguCqnCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrDgqr7gqqQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CquOCqteCqvuCqsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kqs4Kqq4KuL4KqwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrjgqr7gqoLgqpwnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CqsOCqvuCqpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBndTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBIZWJyZXcgW2hlXVxuLy8hIGF1dGhvciA6IFRvbWVyIENvaGVuIDogaHR0cHM6Ly9naXRodWIuY29tL3RvbWVyXG4vLyEgYXV0aG9yIDogTW9zaGUgU2ltYW50b3YgOiBodHRwczovL2dpdGh1Yi5jb20vRGV2ZWxvcG1lbnRJTFxuLy8hIGF1dGhvciA6IFRhbCBBdGVyIDogaHR0cHM6Ly9naXRodWIuY29tL1RhbEF0ZXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBoZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hlJywge1xuICAgICAgICBtb250aHM6ICfXmdeg15XXkNeoX9ek15HXqNeV15DXqF/Xnteo16Vf15DXpNeo15nXnF/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS15XXodeYX9eh16TXmNee15HXqF/XkNeV16fXmNeV15HXqF/XoNeV15HXnteR16hf15PXptee15HXqCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn15nXoNeV17Nf16TXkdeo17Nf157XqNelX9eQ16TXqNezX9ee15DXmV/XmdeV16DXmV/XmdeV15zXmV/XkNeV15LXs1/Xodek15jXs1/XkNeV16fXs1/XoNeV15HXs1/Xk9em157Xsycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfXqNeQ16nXldefX9ep16DXmV/Xqdec15nXqdeZX9eo15HXmdei15lf15fXnteZ16nXmV/XqdeZ16nXmV/XqdeR16onLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfXkNezX9eR17Nf15LXs1/Xk9ezX9eU17Nf15XXs1/XqdezJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9eQX9eRX9eSX9eTX9eUX9eVX9epJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW9eRXU1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFvXkV1NTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW9eRXU1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsOiAnRC9NL1lZWVknLFxuICAgICAgICAgICAgbGw6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9eU15nXldedINeR1r5dTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vXnteX16gg15HWvl1MVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9eR16nXoteUXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9eQ16rXnteV15wg15HWvl1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vXkdeZ15XXnV0gZGRkZCBb15TXkNeX16jXldefINeR16nXoteUXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9eR16LXldeTICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfXnNek16DXmSAlcycsXG4gICAgICAgICAgICBzOiAn157Xodek16gg16nXoNeZ15XXqicsXG4gICAgICAgICAgICBzczogJyVkINep16DXmdeV16onLFxuICAgICAgICAgICAgbTogJ9eT16fXlCcsXG4gICAgICAgICAgICBtbTogJyVkINeT16fXldeqJyxcbiAgICAgICAgICAgIGg6ICfXqdei15QnLFxuICAgICAgICAgICAgaGg6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAn16nXoteq15nXmdedJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg16nXoteV16onO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGQ6ICfXmdeV150nLFxuICAgICAgICAgICAgZGQ6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAn15nXldee15nXmdedJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg15nXnteZ150nO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE06ICfXl9eV15PXqScsXG4gICAgICAgICAgICBNTTogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXl9eV15PXqdeZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeX15XXk9ep15nXnSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeTogJ9ep16DXlCcsXG4gICAgICAgICAgICB5eTogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXqdeg16rXmdeZ150nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyICUgMTAgPT09IDAgJiYgbnVtYmVyICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdeg15QnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdeg15nXnSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOlxuICAgICAgICAgICAgL9eQ15fXlFwi16Z815zXpNeg15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNec16TXoNeZINeU16bXlNeo15nXmdedfNec16TXoNeV16og15HXlden16h815HXkdeV16fXqHzXkdei16jXkS9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijXkNeX15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNeR16LXqNeRKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfXnNek16DXldeqINeR15XXp9eoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfXkdeR15XXp9eoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn15zXpNeg15RcItemJyA6ICfXnNek16DXmSDXlNem15TXqNeZ15nXnSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ9eQ15fXlFwi16YnIDogJ9eQ15fXqNeZINeU16bXlNeo15nXmdedJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfXkdei16jXkSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSGluZGkgW2hpXVxuLy8hIGF1dGhvciA6IE1heWFuayBTaW5naGFsIDogaHR0cHM6Ly9naXRodWIuY29tL21heWFua3NpbmdoYWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4KWnJyxcbiAgICAgICAgICAgIDI6ICfgpagnLFxuICAgICAgICAgICAgMzogJ+ClqScsXG4gICAgICAgICAgICA0OiAn4KWqJyxcbiAgICAgICAgICAgIDU6ICfgpasnLFxuICAgICAgICAgICAgNjogJ+ClrCcsXG4gICAgICAgICAgICA3OiAn4KWtJyxcbiAgICAgICAgICAgIDg6ICfgpa4nLFxuICAgICAgICAgICAgOTogJ+ClrycsXG4gICAgICAgICAgICAwOiAn4KWmJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Clpyc6ICcxJyxcbiAgICAgICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICAgICAn4KWpJzogJzMnLFxuICAgICAgICAgICAgJ+Clqic6ICc0JyxcbiAgICAgICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICAgICAn4KWsJzogJzYnLFxuICAgICAgICAgICAgJ+ClrSc6ICc3JyxcbiAgICAgICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICAgICAn4KWvJzogJzknLFxuICAgICAgICAgICAgJ+Clpic6ICcwJyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXuCknOCkqC9pLFxuICAgICAgICAgICAgL17gpKvgpLzgpLB84KSr4KSwL2ksXG4gICAgICAgICAgICAvXuCkruCkvuCksOCljeCkmi9pLFxuICAgICAgICAgICAgL17gpIXgpKrgpY3gpLDgpYgvaSxcbiAgICAgICAgICAgIC9e4KSu4KSIL2ksXG4gICAgICAgICAgICAvXuCknOClguCkqC9pLFxuICAgICAgICAgICAgL17gpJzgpYHgpLIvaSxcbiAgICAgICAgICAgIC9e4KSF4KSXL2ksXG4gICAgICAgICAgICAvXuCkuOCkv+CkpOCkgnzgpLjgpL/gpKQvaSxcbiAgICAgICAgICAgIC9e4KSF4KSV4KWN4KSf4KWCL2ksXG4gICAgICAgICAgICAvXuCkqOCktXzgpKjgpLXgpIIvaSxcbiAgICAgICAgICAgIC9e4KSm4KS/4KS44KSCfOCkpuCkv+CkuC9pLFxuICAgICAgICBdLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL17gpJzgpKgvaSxcbiAgICAgICAgICAgIC9e4KSr4KS84KSwL2ksXG4gICAgICAgICAgICAvXuCkruCkvuCksOCljeCkmi9pLFxuICAgICAgICAgICAgL17gpIXgpKrgpY3gpLDgpYgvaSxcbiAgICAgICAgICAgIC9e4KSu4KSIL2ksXG4gICAgICAgICAgICAvXuCknOClguCkqC9pLFxuICAgICAgICAgICAgL17gpJzgpYHgpLIvaSxcbiAgICAgICAgICAgIC9e4KSF4KSXL2ksXG4gICAgICAgICAgICAvXuCkuOCkv+CkpC9pLFxuICAgICAgICAgICAgL17gpIXgpJXgpY3gpJ/gpYIvaSxcbiAgICAgICAgICAgIC9e4KSo4KS1L2ksXG4gICAgICAgICAgICAvXuCkpuCkv+CkuC9pLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGhpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaGknLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn4KSc4KSo4KS14KSw4KWAX+Ckq+CkvOCksOCkteCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KWI4KSyX+CkruCkiF/gpJzgpYLgpKhf4KSc4KWB4KSy4KS+4KSIX+CkheCkl+CkuOCljeCkpF/gpLjgpL/gpKTgpK7gpY3gpKzgpLBf4KSF4KSV4KWN4KSf4KWC4KSs4KSwX+CkqOCkteCkruCljeCkrOCksF/gpKbgpL/gpLjgpK7gpY3gpKzgpLAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ+CknOCkqOCkteCksOClgF/gpKvgpLDgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliOCksl/gpK7gpIhf4KSc4KWC4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLjgpY3gpKRf4KS44KS/4KSk4KSC4KSs4KSwX+CkheCkleCljeCkn+ClguCkrOCksF/gpKjgpLXgpILgpKzgpLBf4KSm4KS/4KS44KSC4KSs4KSwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4KSc4KSoLl/gpKvgpLzgpLAuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYguX+CkruCkiF/gpJzgpYLgpKhf4KSc4KWB4KSyLl/gpIXgpJcuX+CkuOCkv+CkpC5f4KSF4KSV4KWN4KSf4KWCLl/gpKjgpLUuX+CkpuCkv+CkuC4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn4KSw4KS14KS/4KS14KS+4KSwX+CkuOCli+CkruCkteCkvuCksF/gpK7gpILgpJfgpLLgpLXgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+Ckl+ClgeCksOClguCkteCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLBf4KS24KSo4KS/4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KSw4KS14KS/X+CkuOCli+Ckrl/gpK7gpILgpJfgpLJf4KSs4KWB4KSnX+Ckl+ClgeCksOClgl/gpLbgpYHgpJXgpY3gpLBf4KS24KSo4KS/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCkrOCknOClhycsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgfSxcblxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IHNob3J0TW9udGhzUGFyc2UsXG5cbiAgICAgICAgbW9udGhzUmVnZXg6XG4gICAgICAgICAgICAvXijgpJzgpKjgpLXgpLDgpYB84KSc4KSoXFwuP3zgpKvgpLzgpLDgpLXgpLDgpYB84KSr4KSw4KS14KSw4KWAfOCkq+CkvOCksFxcLj984KSu4KS+4KSw4KWN4KSaP3zgpIXgpKrgpY3gpLDgpYjgpLJ84KSF4KSq4KWN4KSw4KWIXFwuP3zgpK7gpIg/fOCknOClguCkqD984KSc4KWB4KSy4KS+4KSIfOCknOClgeCkslxcLj984KSF4KSX4KS44KWN4KSkfOCkheCkl1xcLj984KS44KS/4KSk4KSu4KWN4KSs4KSwfOCkuOCkv+CkpOCkguCkrOCksHzgpLjgpL/gpKRcXC4/fOCkheCkleCljeCkn+ClguCkrOCksHzgpIXgpJXgpY3gpJ/gpYJcXC4/fOCkqOCkteCkruCljeCkrOCksHzgpKjgpLXgpILgpKzgpLB84KSo4KS1XFwuP3zgpKbgpL/gpLjgpK7gpY3gpKzgpLB84KSm4KS/4KS44KSC4KSs4KSwfOCkpuCkv+CkuFxcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDpcbiAgICAgICAgICAgIC9eKOCknOCkqOCkteCksOClgHzgpJzgpKhcXC4/fOCkq+CkvOCksOCkteCksOClgHzgpKvgpLDgpLXgpLDgpYB84KSr4KS84KSwXFwuP3zgpK7gpL7gpLDgpY3gpJo/fOCkheCkquCljeCksOCliOCksnzgpIXgpKrgpY3gpLDgpYhcXC4/fOCkruCkiD984KSc4KWC4KSoP3zgpJzgpYHgpLLgpL7gpIh84KSc4KWB4KSyXFwuP3zgpIXgpJfgpLjgpY3gpKR84KSF4KSXXFwuP3zgpLjgpL/gpKTgpK7gpY3gpKzgpLB84KS44KS/4KSk4KSC4KSs4KSwfOCkuOCkv+CkpFxcLj984KSF4KSV4KWN4KSf4KWC4KSs4KSwfOCkheCkleCljeCkn+ClglxcLj984KSo4KS14KSu4KWN4KSs4KSwfOCkqOCkteCkguCkrOCksHzgpKjgpLVcXC4/fOCkpuCkv+CkuOCkruCljeCkrOCksHzgpKbgpL/gpLjgpILgpKzgpLB84KSm4KS/4KS4XFwuPykvaSxcblxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKOCknOCkqOCkteCksOClgD984KSr4KS84KSw4KS14KSw4KWAfOCkq+CksOCkteCksOClgD984KSu4KS+4KSw4KWN4KSaP3zgpIXgpKrgpY3gpLDgpYjgpLI/fOCkruCkiD984KSc4KWC4KSoP3zgpJzgpYHgpLLgpL7gpIg/fOCkheCkl+CkuOCljeCkpD984KS44KS/4KSk4KSu4KWN4KSs4KSwfOCkuOCkv+CkpOCkguCkrOCksHzgpLjgpL/gpKQ/XFwuP3zgpIXgpJXgpY3gpJ/gpYLgpKzgpLB84KSF4KSV4KWN4KSf4KWCXFwuP3zgpKjgpLXgpK7gpY3gpKzgpLB84KSo4KS14KSC4KSs4KSwP3zgpKbgpL/gpLjgpK7gpY3gpKzgpLB84KSm4KS/4KS44KSC4KSs4KSwPykvaSxcblxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14o4KSc4KSoXFwuP3zgpKvgpLzgpLBcXC4/fOCkruCkvuCksOCljeCkmj984KSF4KSq4KWN4KSw4KWIXFwuP3zgpK7gpIg/fOCknOClguCkqD984KSc4KWB4KSyXFwuP3zgpIXgpJdcXC4/fOCkuOCkv+CkpFxcLj984KSF4KSV4KWN4KSf4KWCXFwuP3zgpKjgpLVcXC4/fOCkpuCkv+CkuFxcLj8pL2ksXG5cbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KSG4KScXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CkleCksl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CkleCksl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KSq4KS/4KSb4KSy4KWHXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCkruClh+CkgicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4KSq4KS54KSy4KWHJyxcbiAgICAgICAgICAgIHM6ICfgpJXgpYHgpJsg4KS54KWAIOCkleCljeCkt+CkoycsXG4gICAgICAgICAgICBzczogJyVkIOCkuOClh+CkleCkguCkoScsXG4gICAgICAgICAgICBtOiAn4KSP4KSVIOCkruCkv+CkqOCknycsXG4gICAgICAgICAgICBtbTogJyVkIOCkruCkv+CkqOCknycsXG4gICAgICAgICAgICBoOiAn4KSP4KSVIOCkmOCkguCkn+CkvicsXG4gICAgICAgICAgICBoaDogJyVkIOCkmOCkguCkn+ClhycsXG4gICAgICAgICAgICBkOiAn4KSP4KSVIOCkpuCkv+CkqCcsXG4gICAgICAgICAgICBkZDogJyVkIOCkpuCkv+CkqCcsXG4gICAgICAgICAgICBNOiAn4KSP4KSVIOCkruCkueClgOCkqOClhycsXG4gICAgICAgICAgICBNTTogJyVkIOCkruCkueClgOCkqOClhycsXG4gICAgICAgICAgICB5OiAn4KSP4KSVIOCkteCksOCljeCktycsXG4gICAgICAgICAgICB5eTogJyVkIOCkteCksOCljeCktycsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEhpbmRpIG5vdGF0aW9uIGZvciBtZXJpZGllbXMgYXJlIHF1aXRlIGZ1enp5IGluIHByYWN0aWNlLiBXaGlsZSB0aGVyZSBleGlzdHNcbiAgICAgICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIEhpbmRpLlxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4KSw4KS+4KSkfOCkuOClgeCkrOCkuXzgpKbgpYvgpKrgpLngpLB84KS24KS+4KSuLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSw4KS+4KSkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KWB4KSs4KS5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCli+CkquCkueCksCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS24KS+4KSuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KWB4KSs4KS5JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKbgpYvgpKrgpLngpLAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CktuCkvuCkric7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENyb2F0aWFuIFtocl1cbi8vISBhdXRob3IgOiBCb2phbiBNYXJrb3ZpxIcgOiBodHRwczovL2dpdGh1Yi5jb20vYm1hcmtvdmljXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRuYSBtaW51dGEnIDogJ2plZG5lIG1pbnV0ZSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaHIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdocicsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICdzaWplxI1uamFfdmVsamHEjWVfb8W+dWprYV90cmF2bmphX3N2aWJuamFfbGlwbmphX3NycG5qYV9rb2xvdm96YV9ydWpuYV9saXN0b3BhZGFfc3R1ZGVub2dhX3Byb3NpbmNhJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICdzaWplxI1hbmpfdmVsamHEjWFfb8W+dWpha190cmF2YW5qX3N2aWJhbmpfbGlwYW5qX3NycGFual9rb2xvdm96X3J1amFuX2xpc3RvcGFkX3N0dWRlbmlfcHJvc2luYWMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdzaWouX3ZlbGouX2/FvnUuX3RyYS5fc3ZpLl9saXAuX3NycC5fa29sLl9ydWouX2xpcy5fc3R1Ll9wcm8uJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3V0X3NyX8SNZV9wZV9zdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEbyBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRG8gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIERvIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzdXRyYSB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanXEjWVyIHVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbHVdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGldIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJpamUgJXMnLFxuICAgICAgICAgICAgczogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6ICdkYW4nLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06ICdtamVzZWMnLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBocjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBIdW5nYXJpYW4gW2h1XVxuLy8hIGF1dGhvciA6IEFkYW0gQnJ1bm5lciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZGFtYnJ1bm5lclxuLy8hIGF1dGhvciA6IFBldGVyIFZpc3p0ICA6IGh0dHBzOi8vZ2l0aHViLmNvbS9wYXNzYXRndFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHdlZWtFbmRpbmdzID1cbiAgICAgICAgJ3Zhc8Ohcm5hcCBow6l0ZsWRbiBrZWRkZW4gc3plcmTDoW4gY3PDvHTDtnJ0w7Zrw7ZuIHDDqW50ZWtlbiBzem9tYmF0b24nLnNwbGl0KCcgJyk7XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgbnVtID0gbnVtYmVyO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXhcbiAgICAgICAgICAgICAgICAgICAgPyAnbsOpaMOhbnkgbcOhc29kcGVyYydcbiAgICAgICAgICAgICAgICAgICAgOiAnbsOpaMOhbnkgbcOhc29kcGVyY2UnO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeClcbiAgICAgICAgICAgICAgICAgICAgPyAnIG3DoXNvZHBlcmMnXG4gICAgICAgICAgICAgICAgICAgIDogJyBtw6Fzb2RwZXJjZSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgcGVyYycgOiAnIHBlcmNlJyk7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBwZXJjJyA6ICcgcGVyY2UnKTtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDs3JhJyA6ICcgw7Nyw6FqYScpO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw7NyYScgOiAnIMOzcsOhamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBuYXAnIDogJyBuYXBqYScpO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgbmFwJyA6ICcgbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBow7NuYXAnIDogJyBow7NuYXBqYScpO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgaMOzbmFwJyA6ICcgaMOzbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDqXYnIDogJyDDqXZlJyk7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDqXYnIDogJyDDqXZlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3ZWVrKGlzRnV0dXJlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoaXNGdXR1cmUgPyAnJyA6ICdbbcO6bHRdICcpICtcbiAgICAgICAgICAgICdbJyArXG4gICAgICAgICAgICB3ZWVrRW5kaW5nc1t0aGlzLmRheSgpXSArXG4gICAgICAgICAgICAnXSBMVFsta29yXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgaHUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdodScsIHtcbiAgICAgICAgbW9udGhzOiAnamFudcOhcl9mZWJydcOhcl9tw6FyY2l1c1/DoXByaWxpc19tw6FqdXNfasO6bml1c19qw7psaXVzX2F1Z3VzenR1c19zemVwdGVtYmVyX29rdMOzYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbcOhcmMuX8OhcHIuX23DoWouX2rDum4uX2rDumwuX2F1Zy5fc3plcHQuX29rdC5fbm92Ll9kZWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAndmFzw6FybmFwX2jDqXRmxZFfa2VkZF9zemVyZGFfY3PDvHTDtnJ0w7ZrX3DDqW50ZWtfc3pvbWJhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3Zhc19ow6l0X2tlZGRfc3plX2Nzw7x0X3DDqW5fc3pvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3ZfaF9rX3N6ZV9jc19wX3N6bycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBMTDogJ1lZWVkuIE1NTU0gRC4nLFxuICAgICAgICAgICAgTExMOiAnWVlZWS4gTU1NTSBELiBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZLiBNTU1NIEQuLCBkZGRkIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZGV8ZHUvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDEpLnRvTG93ZXJDYXNlKCkgPT09ICd1JztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA9PT0gdHJ1ZSA/ICdkZScgOiAnREUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA9PT0gdHJ1ZSA/ICdkdScgOiAnRFUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1ttYV0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1tob2xuYXBdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlZWsuY2FsbCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3RlZ25hcF0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2Vlay5jYWxsKHRoaXMsIGZhbHNlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIG3Dumx2YScsXG4gICAgICAgICAgICBwYXN0OiAnJXMnLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGh1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFybWVuaWFuIFtoeS1hbV1cbi8vISBhdXRob3IgOiBBcm1lbmRhcmFieWFuIDogaHR0cHM6Ly9naXRodWIuY29tL2FybWVuZGFyYWJ5YW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBoeUFtID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaHktYW0nLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn1bDVuNaC1bbVvtWh1oDVq1/Wg9Wl1b/WgNW+1aHWgNWrX9W01aHWgNW/1atf1aHVutaA1avVrNWrX9W01aHVtdWr1b3Vq1/VsNW41oLVttWr1b3Vq1/VsNW41oLVrNWr1b3Vq1/WhdWj1bjVvdW/1bjVvdWrX9W91aXVutW/1aXVtNWi1aXWgNWrX9Ww1bjVr9W/1aXVtNWi1aXWgNWrX9W21bjVtdWl1bTVotWl1oDVq1/VpNWl1a/Vv9Wl1bTVotWl1oDVqycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn1bDVuNaC1bbVvtWh1oBf1oPVpdW/1oDVvtWh1oBf1bTVodaA1b9f1aHVutaA1avVrF/VtNWh1bXVq9W9X9Ww1bjWgtW21avVvV/VsNW41oLVrNWr1b1f1oXVo9W41b3Vv9W41b1f1b3VpdW61b/VpdW01aLVpdaAX9Ww1bjVr9W/1aXVtNWi1aXWgF/VttW41bXVpdW01aLVpdaAX9Wk1aXVr9W/1aXVtNWi1aXWgCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn1bDVttW+X9aD1b/WgF/VtNaA1b9f1aHVutaAX9W01bXVvV/VsNW21b1f1bDVrNW9X9aF1aPVvV/VvdW61b9f1bDVr9W/X9W21bTVol/VpNWv1b8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ9Wv1avWgNWh1a/Vq1/VpdaA1a/VuNaC1bfVodWi1anVq1/VpdaA1aXWhNW31aHVotWp1atf1bnVuNaA1aXWhNW31aHVotWp1atf1bDVq9W21aPVt9Wh1aLVqdWrX9W41oLWgNWi1aHVqV/Vt9Wh1aLVodWpJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWSDVqS4nLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkg1akuLCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkg1akuLCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Wh1bXVvdaF1oBdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb1b7VodWy1ahdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb1aXWgNWl1a9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFvWhdaA1agg1arVodW01ahdIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW9Wh1bbWgdWh1a5dIGRkZGQgW9aF1oDVqCDVqtWh1bTVqF0gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg1bDVpdW/1bgnLFxuICAgICAgICAgICAgcGFzdDogJyVzINWh1bzVodW7JyxcbiAgICAgICAgICAgIHM6ICfVtNWrINaE1aHVttWrINW+1aHVtdaA1a/VtdWh1bYnLFxuICAgICAgICAgICAgc3M6ICclZCDVvtWh1bXWgNWv1bXVodW2JyxcbiAgICAgICAgICAgIG06ICfWgNW41brVpScsXG4gICAgICAgICAgICBtbTogJyVkINaA1bjVutWlJyxcbiAgICAgICAgICAgIGg6ICfVqtWh1bQnLFxuICAgICAgICAgICAgaGg6ICclZCDVqtWh1bQnLFxuICAgICAgICAgICAgZDogJ9aF1oAnLFxuICAgICAgICAgICAgZGQ6ICclZCDWhdaAJyxcbiAgICAgICAgICAgIE06ICfVodW01avVvScsXG4gICAgICAgICAgICBNTTogJyVkINWh1bTVq9W9JyxcbiAgICAgICAgICAgIHk6ICfVv9Wh1oDVqycsXG4gICAgICAgICAgICB5eTogJyVkINW/1aHWgNWrJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9Wj1avVt9Wl1oDVvtWhfNWh1bzVodW+1bjVv9W+1aF81oHVpdaA1aXVr9W+1aF81aXWgNWl1a/VuNW11aHVti8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNaB1aXWgNWl1a/VvtWhfNWl1oDVpdWv1bjVtdWh1bYpJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfVo9Wr1bfVpdaA1b7VoSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1aHVvNWh1b7VuNW/1b7VoSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1oHVpdaA1aXVr9W+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Wl1oDVpdWv1bjVtdWh1bYnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn18XFxkezEsMn0tKNWr1bZ81oDVpCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICBjYXNlICdERERvJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct1avVtic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct1oDVpCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGh5QW07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSW5kb25lc2lhbiBbaWRdXG4vLyEgYXV0aG9yIDogTW9oYW1tYWQgU2F0cmlvIFV0b21vIDogaHR0cHM6Ly9naXRodWIuY29tL3R5b2tcbi8vISByZWZlcmVuY2U6IGh0dHA6Ly9pZC53aWtpc291cmNlLm9yZy93aWtpL1BlZG9tYW5fVW11bV9FamFhbl9CYWhhc2FfSW5kb25lc2lhX3lhbmdfRGlzZW1wdXJuYWthblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGlkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaWQnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcmlfRmVicnVhcmlfTWFyZXRfQXByaWxfTWVpX0p1bmlfSnVsaV9BZ3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3RfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ01pbmdndV9TZW5pbl9TZWxhc2FfUmFidV9LYW1pc19KdW1hdF9TYWJ0dScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ01pbl9TZW5fU2VsX1JhYl9LYW1fSnVtX1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdNZ19Tbl9TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8c2lhbmd8c29yZXxtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2lhbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NvcmUnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzaWFuZyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NvcmUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQmVzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2VtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtsYWx1IHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RhbGFtICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB5YW5nIGxhbHUnLFxuICAgICAgICAgICAgczogJ2JlYmVyYXBhIGRldGlrJyxcbiAgICAgICAgICAgIHNzOiAnJWQgZGV0aWsnLFxuICAgICAgICAgICAgbTogJ3NlbWVuaXQnLFxuICAgICAgICAgICAgbW06ICclZCBtZW5pdCcsXG4gICAgICAgICAgICBoOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGg6ICclZCBqYW0nLFxuICAgICAgICAgICAgZDogJ3NlaGFyaScsXG4gICAgICAgICAgICBkZDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTTogJ3NlYnVsYW4nLFxuICAgICAgICAgICAgTU06ICclZCBidWxhbicsXG4gICAgICAgICAgICB5OiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eTogJyVkIHRhaHVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEljZWxhbmRpYyBbaXNdXG4vLyEgYXV0aG9yIDogSGlucmlrIMOWcm4gU2lndXLDsHNzb24gOiBodHRwczovL2dpdGh1Yi5jb20vaGlucmlrXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICBpZiAobiAlIDEwMCA9PT0gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG4gJSAxMCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZVxuICAgICAgICAgICAgICAgICAgICA/ICdub2trcmFyIHNla8O6bmR1cidcbiAgICAgICAgICAgICAgICAgICAgOiAnbm9ra3J1bSBzZWvDum5kdW0nO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3Nla8O6bmR1cicgOiAnc2Vrw7puZHVtJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdzZWvDum5kYSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtw61uw7p0YScgOiAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbcOtbsO6dHVyJyA6ICdtw61uw7p0dW0nKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DrW7DunRhJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0dSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdrbHVra3VzdHVuZGlyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ2tsdWtrdXN0dW5kdW0nKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2tsdWtrdXN0dW5kJztcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGFndXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZGFnYXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnYScgOiAnZMO2Z3VtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZGFndXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ2RhZycgOiAnZGVnaScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtw6FudcOwdXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw6FudcOwaXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsGknIDogJ23DoW51w7B1bScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DoW51w7B1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknKTtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FyaSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcnVtJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcmknKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lzJywge1xuICAgICAgICBtb250aHM6ICdqYW7DumFyX2ZlYnLDumFyX21hcnNfYXByw61sX21hw61fasO6bsOtX2rDumzDrV/DoWfDunN0X3NlcHRlbWJlcl9va3TDs2Jlcl9uw7N2ZW1iZXJfZGVzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2ZlYl9tYXJfYXByX21hw61fasO6bl9qw7psX8OhZ8O6X3NlcF9va3RfbsOzdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ3N1bm51ZGFndXJfbcOhbnVkYWd1cl/DvnJpw7BqdWRhZ3VyX21pw7B2aWt1ZGFndXJfZmltbXR1ZGFndXJfZsO2c3R1ZGFndXJfbGF1Z2FyZGFndXInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3N1bl9tw6FuX8O+cmlfbWnDsF9maW1fZsO2c19sYXUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTcOhX8Oecl9NaV9GaV9Gw7ZfTGEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgW2tsLl0gSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vDrSBkYWcga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW8OhIG1vcmd1biBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW8OtIGfDpnIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tzw63DsGFzdGFdIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdlZnRpciAlcycsXG4gICAgICAgICAgICBwYXN0OiAnZnlyaXIgJXMgc8Otw7BhbicsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6ICdrbHVra3VzdHVuZCcsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEl0YWxpYW4gW2l0XVxuLy8hIGF1dGhvciA6IExvcmVuem8gOiBodHRwczovL2dpdGh1Yi5jb20vYWxpZW1cbi8vISBhdXRob3I6IE1hdHRpYSBMYXJlbnRpczogaHR0cHM6Ly9naXRodWIuY29tL25vc3RhbGdpYXpcbi8vISBhdXRob3I6IE1hcmNvIDogaHR0cHM6Ly9naXRodWIuY29tL01hbmZyZTk4XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgaXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpdCcsIHtcbiAgICAgICAgbW9udGhzOiAnZ2VubmFpb19mZWJicmFpb19tYXJ6b19hcHJpbGVfbWFnZ2lvX2dpdWdub19sdWdsaW9fYWdvc3RvX3NldHRlbWJyZV9vdHRvYnJlX25vdmVtYnJlX2RpY2VtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2dlbl9mZWJfbWFyX2Fwcl9tYWdfZ2l1X2x1Z19hZ29fc2V0X290dF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ2RvbWVuaWNhX2x1bmVkw6xfbWFydGVkw6xfbWVyY29sZWTDrF9naW92ZWTDrF92ZW5lcmTDrF9zYWJhdG8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb21fbHVuX21hcl9tZXJfZ2lvX3Zlbl9zYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWVfZ2lfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbT2dnaSBhJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgPiAxID8gJ2xsZSAnIDogdGhpcy5ob3VycygpID09PSAwID8gJyAnIDogXCJsbCdcIikgK1xuICAgICAgICAgICAgICAgICAgICAnXUxUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbRG9tYW5pIGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDEgPyAnbGxlICcgOiB0aGlzLmhvdXJzKCkgPT09IDAgPyAnICcgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdkZGRkIFthJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgPiAxID8gJ2xsZSAnIDogdGhpcy5ob3VycygpID09PSAwID8gJyAnIDogXCJsbCdcIikgK1xuICAgICAgICAgICAgICAgICAgICAnXUxUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbSWVyaSBhJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgPiAxID8gJ2xsZSAnIDogdGhpcy5ob3VycygpID09PSAwID8gJyAnIDogXCJsbCdcIikgK1xuICAgICAgICAgICAgICAgICAgICAnXUxUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnW0xhIHNjb3JzYV0gZGRkZCBbYScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgPiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2xsZSAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy5ob3VycygpID09PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwibGwnXCIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXUxUJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tMbyBzY29yc29dIGRkZGQgW2EnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpID4gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdsbGUgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuaG91cnMoKSA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJyAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAndHJhICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBmYScsXG4gICAgICAgICAgICBzOiAnYWxjdW5pIHNlY29uZGknLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRpJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaDogXCJ1bidvcmFcIixcbiAgICAgICAgICAgIGhoOiAnJWQgb3JlJyxcbiAgICAgICAgICAgIGQ6ICd1biBnaW9ybm8nLFxuICAgICAgICAgICAgZGQ6ICclZCBnaW9ybmknLFxuICAgICAgICAgICAgdzogJ3VuYSBzZXR0aW1hbmEnLFxuICAgICAgICAgICAgd3c6ICclZCBzZXR0aW1hbmUnLFxuICAgICAgICAgICAgTTogJ3VuIG1lc2UnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNpJyxcbiAgICAgICAgICAgIHk6ICd1biBhbm5vJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5uaScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSXRhbGlhbiAoU3dpdHplcmxhbmQpIFtpdC1jaF1cbi8vISBhdXRob3IgOiB4ZmggOiBodHRwczovL2dpdGh1Yi5jb20veGZoXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgaXRDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2l0LWNoJywge1xuICAgICAgICBtb250aHM6ICdnZW5uYWlvX2ZlYmJyYWlvX21hcnpvX2FwcmlsZV9tYWdnaW9fZ2l1Z25vX2x1Z2xpb19hZ29zdG9fc2V0dGVtYnJlX290dG9icmVfbm92ZW1icmVfZGljZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnZ2VuX2ZlYl9tYXJfYXByX21hZ19naXVfbHVnX2Fnb19zZXRfb3R0X25vdl9kaWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnZG9tZW5pY2FfbHVuZWTDrF9tYXJ0ZWTDrF9tZXJjb2xlZMOsX2dpb3ZlZMOsX3ZlbmVyZMOsX3NhYmF0bycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbV9sdW5fbWFyX21lcl9naW9fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb19sdV9tYV9tZV9naV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW09nZ2kgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tEb21hbmkgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0llcmkgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbGEgc2NvcnNhXSBkZGRkIFthbGxlXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsbyBzY29yc29dIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgvXlswLTldLiskLy50ZXN0KHMpID8gJ3RyYScgOiAnaW4nKSArICcgJyArIHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdDogJyVzIGZhJyxcbiAgICAgICAgICAgIHM6ICdhbGN1bmkgc2Vjb25kaScsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZGknLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0aScsXG4gICAgICAgICAgICBoOiBcInVuJ29yYVwiLFxuICAgICAgICAgICAgaGg6ICclZCBvcmUnLFxuICAgICAgICAgICAgZDogJ3VuIGdpb3JubycsXG4gICAgICAgICAgICBkZDogJyVkIGdpb3JuaScsXG4gICAgICAgICAgICBNOiAndW4gbWVzZScsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2knLFxuICAgICAgICAgICAgeTogJ3VuIGFubm8nLFxuICAgICAgICAgICAgeXk6ICclZCBhbm5pJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBpdENoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEphcGFuZXNlIFtqYV1cbi8vISBhdXRob3IgOiBMSSBMb25nIDogaHR0cHM6Ly9naXRodWIuY29tL2JhcnlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGphID0gbW9tZW50LmRlZmluZUxvY2FsZSgnamEnLCB7XG4gICAgICAgIGVyYXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzIwMTktMDUtMDEnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAn5Luk5ZKMJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICfji78nLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdSJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcxOTg5LTAxLTA4JyxcbiAgICAgICAgICAgICAgICB1bnRpbDogJzIwMTktMDQtMzAnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAn5bmz5oiQJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICfjjbsnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdIJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcxOTI2LTEyLTI1JyxcbiAgICAgICAgICAgICAgICB1bnRpbDogJzE5ODktMDEtMDcnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAn5pit5ZKMJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICfjjbwnLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdTJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcxOTEyLTA3LTMwJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogJzE5MjYtMTItMjQnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAn5aSn5q2jJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICfjjb0nLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdUJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcxODczLTAxLTAxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogJzE5MTItMDctMjknLFxuICAgICAgICAgICAgICAgIG9mZnNldDogNixcbiAgICAgICAgICAgICAgICBuYW1lOiAn5piO5rK7JyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICfjjb4nLFxuICAgICAgICAgICAgICAgIGFiYnI6ICdNJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAxLTAxLTAxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogJzE4NzMtMTItMzEnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAn6KW/5pqmJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdBRCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ0FEJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAwLTEyLTMxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAn57SA5YWD5YmNJyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdCQycsXG4gICAgICAgICAgICAgICAgYWJicjogJ0JDJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGVyYVllYXJPcmRpbmFsUmVnZXg6IC8o5YWDfFxcZCsp5bm0LyxcbiAgICAgICAgZXJhWWVhck9yZGluYWxQYXJzZTogZnVuY3Rpb24gKGlucHV0LCBtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdID09PSAn5YWDJyA/IDEgOiBwYXJzZUludChtYXRjaFsxXSB8fCBpbnB1dCwgMTApO1xuICAgICAgICB9LFxuICAgICAgICBtb250aHM6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfml6Xmm5zml6Vf5pyI5puc5pelX+eBq+abnOaXpV/msLTmm5zml6Vf5pyo5puc5pelX+mHkeabnOaXpV/lnJ/mm5zml6UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfml6Vf5pyIX+eBq1/msLRf5pyoX+mHkV/lnJ8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnlubRN5pyIROaXpSBkZGRkIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelKGRkZCkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5Y2I5YmNfOWNiOW+jC9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+WNiOW+jCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfljYjliY0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WNiOW+jCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+S7iuaXpV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vmmI7ml6VdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW+adpemAsV1kZGRkIExUJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+aYqOaXpV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53ZWVrKCkgIT09IG5vdy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5YWI6YCxXWRkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfeaXpS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciA9PT0gMSA/ICflhYPlubQnIDogbnVtYmVyICsgJ+W5tCc7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPlvownLFxuICAgICAgICAgICAgcGFzdDogJyVz5YmNJyxcbiAgICAgICAgICAgIHM6ICfmlbDnp5InLFxuICAgICAgICAgICAgc3M6ICclZOenkicsXG4gICAgICAgICAgICBtOiAnMeWIhicsXG4gICAgICAgICAgICBtbTogJyVk5YiGJyxcbiAgICAgICAgICAgIGg6ICcx5pmC6ZaTJyxcbiAgICAgICAgICAgIGhoOiAnJWTmmYLplpMnLFxuICAgICAgICAgICAgZDogJzHml6UnLFxuICAgICAgICAgICAgZGQ6ICclZOaXpScsXG4gICAgICAgICAgICBNOiAnMeODtuaciCcsXG4gICAgICAgICAgICBNTTogJyVk44O25pyIJyxcbiAgICAgICAgICAgIHk6ICcx5bm0JyxcbiAgICAgICAgICAgIHl5OiAnJWTlubQnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGphO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEphdmFuZXNlIFtqdl1cbi8vISBhdXRob3IgOiBSb255IExhbnRpcCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sYW50aXBcbi8vISByZWZlcmVuY2U6IGh0dHA6Ly9qdi53aWtpcGVkaWEub3JnL3dpa2kvQmFzYV9KYXdhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIganYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdqdicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyaV9GZWJydWFyaV9NYXJldF9BcHJpbF9NZWlfSnVuaV9KdWxpX0FndXN0dXNfU2VwdGVtYmVyX09rdG9iZXJfTm9wZW1iZXJfRGVzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01laV9KdW5fSnVsX0Fnc19TZXBfT2t0X05vcF9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnTWluZ2d1X1NlbmVuX1NlbG9zb19SZWJ1X0tlbWlzX0plbXV3YWhfU2VwdHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdNaW5fU2VuX1NlbF9SZWJfS2VtX0plbV9TZXAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnTWdfU25fU2xfUmJfS21fSm1fU3AnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9lbmppbmd8c2l5YW5nfHNvbnRlbnxuZGFsdS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ2VuamluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzaXlhbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NvbnRlbicgfHwgbWVyaWRpZW0gPT09ICduZGFsdScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZW5qaW5nJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc2l5YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29udGVuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICduZGFsdSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0RpbnRlbiBwdW5pa28gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTWJlbmphbmcgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2FsYSB3aW5naSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtrZXBlbmdrZXIgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnd29udGVuIGluZyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgaW5na2FuZyBrZXBlbmdrZXInLFxuICAgICAgICAgICAgczogJ3Nhd2V0YXdpcyBkZXRpaycsXG4gICAgICAgICAgICBzczogJyVkIGRldGlrJyxcbiAgICAgICAgICAgIG06ICdzZXR1bmdnYWwgbWVuaXQnLFxuICAgICAgICAgICAgbW06ICclZCBtZW5pdCcsXG4gICAgICAgICAgICBoOiAnc2V0dW5nZ2FsIGphbScsXG4gICAgICAgICAgICBoaDogJyVkIGphbScsXG4gICAgICAgICAgICBkOiAnc2VkaW50ZW4nLFxuICAgICAgICAgICAgZGQ6ICclZCBkaW50ZW4nLFxuICAgICAgICAgICAgTTogJ3Nld3VsYW4nLFxuICAgICAgICAgICAgTU06ICclZCB3dWxhbicsXG4gICAgICAgICAgICB5OiAnc2V0YXVuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGF1bicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBqdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHZW9yZ2lhbiBba2FdXG4vLyEgYXV0aG9yIDogSXJha2xpIEphbmlhc2h2aWxpIDogaHR0cHM6Ly9naXRodWIuY29tL0lyYWtsaUphbmlcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBrYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2thJywge1xuICAgICAgICBtb250aHM6ICfhg5jhg5Dhg5zhg5Xhg5Dhg6Dhg5hf4YOX4YOU4YOR4YOU4YOg4YOV4YOQ4YOa4YOYX+GDm+GDkOGDoOGDouGDmF/hg5Dhg57hg6Dhg5jhg5rhg5hf4YOb4YOQ4YOY4YOh4YOYX+GDmOGDleGDnOGDmOGDoeGDmF/hg5jhg5Xhg5rhg5jhg6Hhg5hf4YOQ4YOS4YOV4YOY4YOh4YOi4YOdX+GDoeGDlOGDpeGDouGDlOGDm+GDkeGDlOGDoOGDmF/hg53hg6Xhg6Lhg53hg5vhg5Hhg5Thg6Dhg5hf4YOc4YOd4YOU4YOb4YOR4YOU4YOg4YOYX+GDk+GDlOGDmeGDlOGDm+GDkeGDlOGDoOGDmCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfhg5jhg5Dhg5xf4YOX4YOU4YORX+GDm+GDkOGDoF/hg5Dhg57hg6Bf4YOb4YOQ4YOYX+GDmOGDleGDnF/hg5jhg5Xhg5pf4YOQ4YOS4YOVX+GDoeGDlOGDpV/hg53hg6Xhg6Jf4YOc4YOd4YOUX+GDk+GDlOGDmScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ+GDmeGDleGDmOGDoOGDkF/hg53hg6Dhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOh4YOQ4YOb4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDneGDl+GDruGDqOGDkOGDkeGDkOGDl+GDmF/hg67hg6Phg5fhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOe4YOQ4YOg4YOQ4YOh4YOZ4YOU4YOV4YOYX+GDqOGDkOGDkeGDkOGDl+GDmCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6ICfhg5nhg5Xhg5jhg6Dhg5Dhg6Ff4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDoV/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDoV/hg6jhg5Dhg5Hhg5Dhg5fhg6EnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvKOGDrOGDmOGDnOGDkHzhg6jhg5Thg5vhg5Phg5Thg5IpLyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+GDmeGDleGDmF/hg53hg6Dhg6hf4YOh4YOQ4YObX+GDneGDl+GDrl/hg67hg6Phg5df4YOe4YOQ4YOgX+GDqOGDkOGDkScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfhg5nhg5Vf4YOd4YOgX+GDoeGDkF/hg53hg5df4YOu4YOjX+GDnuGDkF/hg6jhg5AnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4YOT4YOm4YOU4YOhXSBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+GDruGDleGDkOGDml0gTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1vhg5Lhg6Phg6jhg5jhg5xdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+GDqOGDlOGDm+GDk+GDlOGDkl0gZGRkZCBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vhg6zhg5jhg5zhg5BdIGRkZGQgTFQt4YOW4YOUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgIC8o4YOs4YOQ4YObfOGDrOGDo+GDl3zhg6Hhg5Dhg5Dhg5d84YOs4YOU4YOafOGDk+GDpnzhg5fhg5UpKOGDmHzhg5QpLyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkMiA9PT0gJ+GDmCcgPyAkMSArICfhg6jhg5gnIDogJDEgKyAkMiArICfhg6jhg5gnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0OiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIGlmICgvKOGDrOGDkOGDm+GDmHzhg6zhg6Phg5fhg5h84YOh4YOQ4YOQ4YOX4YOYfOGDk+GDpuGDlHzhg5fhg5Xhg5QpLy50ZXN0KHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoLyjhg5h84YOUKSQvLCAn4YOY4YOhIOGDrOGDmOGDnCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoL+GDrOGDlOGDmuGDmC8udGVzdChzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC/hg6zhg5Thg5rhg5gkLywgJ+GDrOGDmuGDmOGDoSDhg6zhg5jhg5wnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgczogJ+GDoOGDkOGDm+GDk+GDlOGDnOGDmOGDm+GDlCDhg6zhg5Dhg5vhg5gnLFxuICAgICAgICAgICAgc3M6ICclZCDhg6zhg5Dhg5vhg5gnLFxuICAgICAgICAgICAgbTogJ+GDrOGDo+GDl+GDmCcsXG4gICAgICAgICAgICBtbTogJyVkIOGDrOGDo+GDl+GDmCcsXG4gICAgICAgICAgICBoOiAn4YOh4YOQ4YOQ4YOX4YOYJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4YOh4YOQ4YOQ4YOX4YOYJyxcbiAgICAgICAgICAgIGQ6ICfhg5Phg6bhg5QnLFxuICAgICAgICAgICAgZGQ6ICclZCDhg5Phg6bhg5QnLFxuICAgICAgICAgICAgTTogJ+GDl+GDleGDlCcsXG4gICAgICAgICAgICBNTTogJyVkIOGDl+GDleGDlCcsXG4gICAgICAgICAgICB5OiAn4YOs4YOU4YOa4YOYJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4YOs4YOU4YOa4YOYJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogLzB8MS3hg5rhg5h84YOb4YOULVxcZHsxLDJ9fFxcZHsxLDJ9LeGDlC8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLeGDmuGDmCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbnVtYmVyIDwgMjAgfHxcbiAgICAgICAgICAgICAgICAobnVtYmVyIDw9IDEwMCAmJiBudW1iZXIgJSAyMCA9PT0gMCkgfHxcbiAgICAgICAgICAgICAgICBudW1iZXIgJSAxMDAgPT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4YOb4YOULScgKyBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3hg5QnO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsXG4gICAgICAgICAgICBkb3k6IDcsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS2F6YWtoIFtra11cbi8vISBhdXRob3JzIDogTnVybGFuIFJha2hpbXpoYW5vdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9udXJsYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMDogJy3RiNGWJyxcbiAgICAgICAgMTogJy3RiNGWJyxcbiAgICAgICAgMjogJy3RiNGWJyxcbiAgICAgICAgMzogJy3RiNGWJyxcbiAgICAgICAgNDogJy3RiNGWJyxcbiAgICAgICAgNTogJy3RiNGWJyxcbiAgICAgICAgNjogJy3RiNGLJyxcbiAgICAgICAgNzogJy3RiNGWJyxcbiAgICAgICAgODogJy3RiNGWJyxcbiAgICAgICAgOTogJy3RiNGLJyxcbiAgICAgICAgMTA6ICct0YjRiycsXG4gICAgICAgIDIwOiAnLdGI0YsnLFxuICAgICAgICAzMDogJy3RiNGLJyxcbiAgICAgICAgNDA6ICct0YjRiycsXG4gICAgICAgIDUwOiAnLdGI0ZYnLFxuICAgICAgICA2MDogJy3RiNGLJyxcbiAgICAgICAgNzA6ICct0YjRlicsXG4gICAgICAgIDgwOiAnLdGI0ZYnLFxuICAgICAgICA5MDogJy3RiNGLJyxcbiAgICAgICAgMTAwOiAnLdGI0ZYnLFxuICAgIH07XG5cbiAgICB2YXIga2sgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdraycsIHtcbiAgICAgICAgbW9udGhzOiAn0pvQsNKj0YLQsNGAX9Cw0pvQv9Cw0L1f0L3QsNGD0YDRi9C3X9GB05nRg9GW0YBf0LzQsNC80YvRgF/QvNCw0YPRgdGL0Lxf0YjRltC70LTQtV/RgtCw0LzRi9C3X9Kb0YvRgNC60q/QudC10Lpf0pvQsNC30LDQvV/Sm9Cw0YDQsNGI0LBf0LbQtdC70YLQvtKb0YHQsNC9Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9Kb0LDSo1/QsNKb0L9f0L3QsNGDX9GB05nRg1/QvNCw0Lxf0LzQsNGDX9GI0ZbQu1/RgtCw0Lxf0pvRi9GAX9Kb0LDQt1/Sm9Cw0YBf0LbQtdC7Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9C20LXQutGB0LXQvdCx0ZZf0LTSr9C50YHQtdC90LHRll/RgdC10LnRgdC10L3QsdGWX9GB05nRgNGB0LXQvdCx0ZZf0LHQtdC50YHQtdC90LHRll/QttKx0LzQsF/RgdC10L3QsdGWJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0LbQtdC6X9C00q/QuV/RgdC10Llf0YHTmdGAX9Cx0LXQuV/QttKx0Lxf0YHQtdC9Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9C20Lpf0LTQuV/RgdC5X9GB0YBf0LHQuV/QttC8X9GB0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0JHSr9Cz0ZbQvSDRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9CV0YDRgtC10qMg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Ca0LXRiNC1INGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9Oo0YLQutC10L0g0LDQv9GC0LDQvdGL0qNdIGRkZGQgW9GB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg0ZbRiNGW0L3QtNC1JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDQsdKx0YDRi9C9JyxcbiAgICAgICAgICAgIHM6ICfQsdGW0YDQvdC10YjQtSDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3M6ICclZCDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbTogJ9Cx0ZbRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIG1tOiAnJWQg0LzQuNC90YPRgicsXG4gICAgICAgICAgICBoOiAn0LHRltGAINGB0LDSk9Cw0YInLFxuICAgICAgICAgICAgaGg6ICclZCDRgdCw0pPQsNGCJyxcbiAgICAgICAgICAgIGQ6ICfQsdGW0YAg0LrSr9C9JyxcbiAgICAgICAgICAgIGRkOiAnJWQg0LrSr9C9JyxcbiAgICAgICAgICAgIE06ICfQsdGW0YAg0LDQuScsXG4gICAgICAgICAgICBNTTogJyVkINCw0LknLFxuICAgICAgICAgICAgeTogJ9Cx0ZbRgCDQttGL0LsnLFxuICAgICAgICAgICAgeXk6ICclZCDQttGL0LsnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGI0ZZ80YjRiykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBraztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDYW1ib2RpYW4gW2ttXVxuLy8hIGF1dGhvciA6IEtydXkgVmFubmEgOiBodHRwczovL2dpdGh1Yi5jb20va3J1eXZhbm5hXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+GfoScsXG4gICAgICAgICAgICAyOiAn4Z+iJyxcbiAgICAgICAgICAgIDM6ICfhn6MnLFxuICAgICAgICAgICAgNDogJ+GfpCcsXG4gICAgICAgICAgICA1OiAn4Z+lJyxcbiAgICAgICAgICAgIDY6ICfhn6YnLFxuICAgICAgICAgICAgNzogJ+GfpycsXG4gICAgICAgICAgICA4OiAn4Z+oJyxcbiAgICAgICAgICAgIDk6ICfhn6knLFxuICAgICAgICAgICAgMDogJ+GfoCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfhn6EnOiAnMScsXG4gICAgICAgICAgICAn4Z+iJzogJzInLFxuICAgICAgICAgICAgJ+Gfoyc6ICczJyxcbiAgICAgICAgICAgICfhn6QnOiAnNCcsXG4gICAgICAgICAgICAn4Z+lJzogJzUnLFxuICAgICAgICAgICAgJ+Gfpic6ICc2JyxcbiAgICAgICAgICAgICfhn6cnOiAnNycsXG4gICAgICAgICAgICAn4Z+oJzogJzgnLFxuICAgICAgICAgICAgJ+GfqSc6ICc5JyxcbiAgICAgICAgICAgICfhn6AnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIga20gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrbScsIHtcbiAgICAgICAgbW9udGhzOiAn4Z6Y4Z6A4Z6a4Z62X+GegOGeu+GemOGfkuGel+GfiF/hnpjhnrjhnpPhnrZf4Z6Y4Z+B4Z6f4Z62X+Gep+Gen+Gel+Getl/hnpjhnrfhnpDhnrvhnpPhnrZf4Z6A4Z6A4Z+S4Z6A4Z6K4Z62X+Gen+GeuOGeoOGetl/hnoDhnonhn5LhnonhnrZf4Z6P4Z674Z6b4Z62X+GenOGet+GeheGfkuGehuGet+GegOGetl/hnpLhn5LhnpPhnrwnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+GemOGegOGemuGetl/hnoDhnrvhnpjhn5Lhnpfhn4hf4Z6Y4Z644Z6T4Z62X+GemOGfgeGen+Getl/hnqfhnp/hnpfhnrZf4Z6Y4Z634Z6Q4Z674Z6T4Z62X+GegOGegOGfkuGegOGeiuGetl/hnp/hnrjhnqDhnrZf4Z6A4Z6J4Z+S4Z6J4Z62X+Gej+Geu+Gem+Getl/hnpzhnrfhnoXhn5LhnobhnrfhnoDhnrZf4Z6S4Z+S4Z6T4Z68Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn4Z6i4Z624Z6R4Z634Z6P4Z+S4Z6ZX+GeheGfkOGek+GfkuGekV/hnqLhnoThn5LhnoLhnrbhnppf4Z6W4Z674Z6SX+GeluGfkuGemuGeoOGen+GfkuGelOGej+Get+GfjV/hnp/hnrvhnoDhn5Lhnppf4Z6f4Z+F4Z6a4Z+NJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4Z6i4Z62X+GehV/hnqJf4Z6WX+GeluGfkuGeml/hnp/hnrtf4Z6fJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+GeouGetl/hnoVf4Z6iX+Gell/hnpbhn5Lhnppf4Z6f4Z67X+Genycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/hnpbhn5LhnprhnrnhnoB84Z6b4Z+S4Z6E4Z624Z6FLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfhnpvhn5LhnoThnrbhnoUnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Z6W4Z+S4Z6a4Z654Z6AJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfhnpvhn5LhnoThnrbhnoUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vhnpDhn5LhnoThn4PhnpPhn4Hhn4cg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+Gen+GfkuGeouGfguGegCDhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+GemOGfkuGen+Get+Gem+GemOGet+GeiSDhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4Z6f4Z6U4Z+S4Z6P4Z624Z6g4Z+N4Z6Y4Z674Z6TXSBb4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4Z6R4Z+A4Z6PJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+GemOGeu+GekycsXG4gICAgICAgICAgICBzOiAn4Z6U4Z+J4Z674Z6T4Z+S4Z6Y4Z624Z6T4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIG06ICfhnpjhnr3hnpnhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgbW06ICclZCDhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgaDogJ+GemOGeveGemeGemOGfieGfhOGehCcsXG4gICAgICAgICAgICBoaDogJyVkIOGemOGfieGfhOGehCcsXG4gICAgICAgICAgICBkOiAn4Z6Y4Z694Z6Z4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgICAgIE06ICfhnpjhnr3hnpnhnoHhn4InLFxuICAgICAgICAgICAgTU06ICclZCDhnoHhn4InLFxuICAgICAgICAgICAgeTogJ+GemOGeveGemeGehuGfkuGek+GetuGfhicsXG4gICAgICAgICAgICB5eTogJyVkIOGehuGfkuGek+GetuGfhicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC/hnpHhnrhcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6ICfhnpHhnrglZCcsXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vhn6Hhn6Lhn6Phn6Thn6Xhn6bhn6fhn6jhn6nhn6BdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBrbTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLYW5uYWRhIFtrbl1cbi8vISBhdXRob3IgOiBSYWplZXYgTmFpayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWplZXZuYWlrdGVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4LOnJyxcbiAgICAgICAgICAgIDI6ICfgs6gnLFxuICAgICAgICAgICAgMzogJ+CzqScsXG4gICAgICAgICAgICA0OiAn4LOqJyxcbiAgICAgICAgICAgIDU6ICfgs6snLFxuICAgICAgICAgICAgNjogJ+CzrCcsXG4gICAgICAgICAgICA3OiAn4LOtJyxcbiAgICAgICAgICAgIDg6ICfgs64nLFxuICAgICAgICAgICAgOTogJ+CzrycsXG4gICAgICAgICAgICAwOiAn4LOmJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Czpyc6ICcxJyxcbiAgICAgICAgICAgICfgs6gnOiAnMicsXG4gICAgICAgICAgICAn4LOpJzogJzMnLFxuICAgICAgICAgICAgJ+Czqic6ICc0JyxcbiAgICAgICAgICAgICfgs6snOiAnNScsXG4gICAgICAgICAgICAn4LOsJzogJzYnLFxuICAgICAgICAgICAgJ+CzrSc6ICc3JyxcbiAgICAgICAgICAgICfgs64nOiAnOCcsXG4gICAgICAgICAgICAn4LOvJzogJzknLFxuICAgICAgICAgICAgJ+Czpic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBrbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2tuJywge1xuICAgICAgICBtb250aHM6ICfgspzgsqjgsrXgsrDgsr9f4LKr4LOG4LKs4LON4LKw4LK14LKw4LK/X+CyruCyvuCysOCzjeCymuCzjV/gso/gsqrgs43gsrDgsr/gsrLgs41f4LKu4LOG4LOVX+CynOCzguCyqOCzjV/gspzgs4HgsrLgs4bgs5Zf4LKG4LKX4LK44LON4LKf4LONX+CyuOCzhuCyquCzjeCyn+CzhuCyguCyrOCysOCzjV/gsoXgspXgs43gsp/gs4bgs4Lgs5XgsqzgsrDgs41f4LKo4LK14LOG4LKC4LKs4LKw4LONX+CyoeCyv+CyuOCzhuCyguCyrOCysOCzjScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4LKc4LKoX+Cyq+CzhuCyrOCzjeCysF/gsq7gsr7gsrDgs43gsprgs41f4LKP4LKq4LON4LKw4LK/4LKy4LONX+CyruCzhuCzlV/gspzgs4Lgsqjgs41f4LKc4LOB4LKy4LOG4LOWX+CyhuCyl+CyuOCzjeCyn+CzjV/gsrjgs4bgsqrgs43gsp/gs4bgsoJf4LKF4LKV4LON4LKf4LOG4LOC4LOVX+CyqOCyteCzhuCygl/gsqHgsr/gsrjgs4bgsoInLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfgsq3gsr7gsqjgs4HgsrXgsr7gsrBf4LK44LOG4LOC4LOV4LKu4LK14LK+4LKwX+CyruCyguCyl+Cys+CyteCyvuCysF/gsqzgs4HgsqfgsrXgsr7gsrBf4LKX4LOB4LKw4LOB4LK14LK+4LKwX+CytuCzgeCyleCzjeCysOCyteCyvuCysF/gsrbgsqjgsr/gsrXgsr7gsrAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgsq3gsr7gsqjgs4Ff4LK44LOG4LOC4LOV4LKuX+CyruCyguCyl+Cys1/gsqzgs4Hgsqdf4LKX4LOB4LKw4LOBX+CytuCzgeCyleCzjeCysF/gsrbgsqjgsr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4LKt4LK+X+CyuOCzhuCzguCzlV/gsq7gsoJf4LKs4LOBX+Cyl+CzgV/gsrbgs4Ff4LK2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+Cyh+CyguCypuCzgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgsqjgsr7gsrPgs4ZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgsqjgsr/gsqjgs43gsqjgs4ZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CyleCzhuCzguCyqOCzhuCyr10gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgsqjgsoLgsqTgsrAnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCyueCyv+CyguCypuCzhicsXG4gICAgICAgICAgICBzOiAn4LKV4LOG4LKy4LK14LOBIOCyleCzjeCyt+Cyo+Cyl+Cys+CzgScsXG4gICAgICAgICAgICBzczogJyVkIOCyuOCzhuCyleCzhuCyguCyoeCzgeCyl+Cys+CzgScsXG4gICAgICAgICAgICBtOiAn4LKS4LKC4LKm4LOBIOCyqOCyv+CyruCyv+CytycsXG4gICAgICAgICAgICBtbTogJyVkIOCyqOCyv+CyruCyv+CytycsXG4gICAgICAgICAgICBoOiAn4LKS4LKC4LKm4LOBIOCyl+CyguCyn+CzhicsXG4gICAgICAgICAgICBoaDogJyVkIOCyl+CyguCyn+CzhicsXG4gICAgICAgICAgICBkOiAn4LKS4LKC4LKm4LOBIOCypuCyv+CyqCcsXG4gICAgICAgICAgICBkZDogJyVkIOCypuCyv+CyqCcsXG4gICAgICAgICAgICBNOiAn4LKS4LKC4LKm4LOBIOCypOCyv+CyguCyl+Cys+CzgScsXG4gICAgICAgICAgICBNTTogJyVkIOCypOCyv+CyguCyl+Cys+CzgScsXG4gICAgICAgICAgICB5OiAn4LKS4LKC4LKm4LOBIOCyteCysOCzjeCytycsXG4gICAgICAgICAgICB5eTogJyVkIOCyteCysOCzjeCytycsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgs6fgs6jgs6ngs6rgs6vgs6zgs63gs67gs6/gs6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gsrDgsr7gsqTgs43gsrDgsr984LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGfOCyruCyp+CzjeCyr+CyvuCyueCzjeCyqHzgsrjgsoLgspzgs4YvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgsrDgsr7gsqTgs43gsrDgsr8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsqzgs4bgsrPgsr/gspfgs43gspfgs4YnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LKu4LKn4LON4LKv4LK+4LK54LON4LKoJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsrjgsoLgspzgs4YnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKw4LK+4LKk4LON4LKw4LK/JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsqzgs4bgsrPgsr/gspfgs43gspfgs4YnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CyruCyp+CzjeCyr+CyvuCyueCzjeCyqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LK44LKC4LKc4LOGJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrDgsr7gsqTgs43gsrDgsr8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o4LKo4LOG4LOVKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4LKo4LOG4LOVJztcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEtvcmVhbiBba29dXG4vLyEgYXV0aG9yIDogS3l1bmd3b29rLCBQYXJrIDogaHR0cHM6Ly9naXRodWIuY29tL2t5dW5ndzAwa1xuLy8hIGF1dGhvciA6IEplZWV5dWwgTGVlIDxqZWVleXVsQGdtYWlsLmNvbT5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBrbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2tvJywge1xuICAgICAgICBtb250aHM6ICcx7JuUXzLsm5RfM+yblF807JuUXzXsm5RfNuyblF837JuUXzjsm5RfOeyblF8xMOyblF8xMeyblF8xMuyblCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx7JuUXzLsm5RfM+yblF807JuUXzXsm5RfNuyblF837JuUXzjsm5RfOeyblF8xMOyblF8xMeyblF8xMuyblCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfsnbzsmpTsnbxf7JuU7JqU7J28X+2ZlOyalOydvF/siJjsmpTsnbxf66qp7JqU7J28X+q4iOyalOydvF/thqDsmpTsnbwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfsnbxf7JuUX+2ZlF/siJhf66qpX+q4iF/thqAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn7J28X+yblF/tmZRf7IiYX+uqqV/quIhf7YagJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBMTDogJ1lZWVnrhYQgTU1NTSBE7J28JyxcbiAgICAgICAgICAgIExMTDogJ1lZWVnrhYQgTU1NTSBE7J28IEEgaDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeuFhCBNTU1NIETsnbwnLFxuICAgICAgICAgICAgbGxsOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdZWVlZ64WEIE1NTU0gROydvCBkZGRkIEEgaDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAn7Jik64qYIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICfrgrTsnbwgTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICfslrTsoJwgTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICfsp4Drgpzso7wgZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIO2bhCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMg7KCEJyxcbiAgICAgICAgICAgIHM6ICfrqocg7LSIJyxcbiAgICAgICAgICAgIHNzOiAnJWTstIgnLFxuICAgICAgICAgICAgbTogJzHrtoQnLFxuICAgICAgICAgICAgbW06ICclZOu2hCcsXG4gICAgICAgICAgICBoOiAn7ZWcIOyLnOqwhCcsXG4gICAgICAgICAgICBoaDogJyVk7Iuc6rCEJyxcbiAgICAgICAgICAgIGQ6ICftlZjro6gnLFxuICAgICAgICAgICAgZGQ6ICclZOydvCcsXG4gICAgICAgICAgICBNOiAn7ZWcIOuLrCcsXG4gICAgICAgICAgICBNTTogJyVk64usJyxcbiAgICAgICAgICAgIHk6ICfsnbwg64WEJyxcbiAgICAgICAgICAgIHl5OiAnJWTrhYQnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o7J28fOyblHzso7wpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7J28JztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfsm5QnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+yjvCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+yYpOyghHzsmKTtm4QvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbiA9PT0gJ+yYpO2bhCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc1VwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDEyID8gJ+yYpOyghCcgOiAn7Jik7ZuEJztcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBrbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLdXJkaXNoIFtrdV1cbi8vISBhdXRob3IgOiBTaGFocmFtIE1lYmFzaGFyIDogaHR0cHM6Ly9naXRodWIuY29tL1NoYWhyYW1NZWJhc2hhclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfZoScsXG4gICAgICAgICAgICAyOiAn2aInLFxuICAgICAgICAgICAgMzogJ9mjJyxcbiAgICAgICAgICAgIDQ6ICfZpCcsXG4gICAgICAgICAgICA1OiAn2aUnLFxuICAgICAgICAgICAgNjogJ9mmJyxcbiAgICAgICAgICAgIDc6ICfZpycsXG4gICAgICAgICAgICA4OiAn2agnLFxuICAgICAgICAgICAgOTogJ9mpJyxcbiAgICAgICAgICAgIDA6ICfZoCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgICAgICfZoic6ICcyJyxcbiAgICAgICAgICAgICfZoyc6ICczJyxcbiAgICAgICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgICAgICfZpSc6ICc1JyxcbiAgICAgICAgICAgICfZpic6ICc2JyxcbiAgICAgICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgICAgICfZqCc6ICc4JyxcbiAgICAgICAgICAgICfZqSc6ICc5JyxcbiAgICAgICAgICAgICfZoCc6ICcwJyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzID0gW1xuICAgICAgICAgICAgJ9qp2KfZhtmI2YbbjCDYr9mI2YjbldmFJyxcbiAgICAgICAgICAgICfYtNmI2KjYp9iqJyxcbiAgICAgICAgICAgICfYptin2LLYp9ixJyxcbiAgICAgICAgICAgICfZhtuM2LPYp9mGJyxcbiAgICAgICAgICAgICfYptin24zYp9ixJyxcbiAgICAgICAgICAgICfYrdmI2LLblduM2LHYp9mGJyxcbiAgICAgICAgICAgICfYqtuV2YXZhdmI2LInLFxuICAgICAgICAgICAgJ9im2KfYqCcsXG4gICAgICAgICAgICAn2KbblduM2YTZiNmI2YQnLFxuICAgICAgICAgICAgJ9iq2LTYsduM2YbbjCDbjNuV2YPbldmFJyxcbiAgICAgICAgICAgICfYqti02LHbjNmG24wg2K/ZiNmI25XZhScsXG4gICAgICAgICAgICAn2YPYp9mG2YjZhtuMINuM25XaqduV2YUnLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGt1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgna3UnLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICfbjNmH4oCM2YPYtNmH4oCM2YXZhdmH4oCMX9iv2YjZiNi02YfigIzZhdmF2YfigIxf2LPbjti02YfigIzZhdmF2YfigIxf2obZiNin2LHYtNmH4oCM2YXZhdmH4oCMX9m+247Zhtis2LTZh+KAjNmF2YXZh+KAjF/Zh9mH4oCM24zZhtuMX9i02YfigIzZhdmF2YfigIwnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDpcbiAgICAgICAgICAgICfbjNmH4oCM2YPYtNmH4oCM2YVf2K/ZiNmI2LTZh+KAjNmFX9iz247YtNmH4oCM2YVf2obZiNin2LHYtNmH4oCM2YVf2b7bjtmG2KzYtNmH4oCM2YVf2YfZh+KAjNuM2YbbjF/YtNmH4oCM2YXZhdmH4oCMJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9uMX9ivX9izX9qGX9m+X9mHX9i0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9im247ZiNin2LHZh+KAjHzYqNmH4oCM24zYp9mG24wvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAv2KbbjtmI2KfYsdmH4oCMLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9io2YfigIzbjNin2YbbjCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2KbbjtmI2KfYsdmH4oCMJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KbZh+KAjNmF2LHbhiDZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYqNmH4oCM24zYp9mG24wg2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2K/ZiNuO2YbbjiDZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfZhNmH4oCMICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcycsXG4gICAgICAgICAgICBzOiAn2obZh+KAjNmG2K8g2obYsdmD2YfigIzbjNmH4oCM2YMnLFxuICAgICAgICAgICAgc3M6ICfahtix2YPZh+KAjCAlZCcsXG4gICAgICAgICAgICBtOiAn24zZh+KAjNmDINiu2YjZhNmH4oCM2YMnLFxuICAgICAgICAgICAgbW06ICclZCDYrtmI2YTZh+KAjNmDJyxcbiAgICAgICAgICAgIGg6ICfbjNmH4oCM2YMg2YPYp9iq2pjZhduO2LEnLFxuICAgICAgICAgICAgaGg6ICclZCDZg9in2KramNmF247YsScsXG4gICAgICAgICAgICBkOiAn24zZh+KAjNmDINqV24bamCcsXG4gICAgICAgICAgICBkZDogJyVkINqV24bamCcsXG4gICAgICAgICAgICBNOiAn24zZh+KAjNmDINmF2KfZhtqvJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2YXYp9mG2q8nLFxuICAgICAgICAgICAgeTogJ9uM2YfigIzZgyDYs9in2rUnLFxuICAgICAgICAgICAgeXk6ICclZCDYs9in2rUnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBrdTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOb3J0aGVybiBLdXJkaXNoIFtrdS1rbXJdXG4vLyEgYXV0aG9ycyA6IE1hemx1bSDDlnpkb2dhbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tZXJnZWhlelxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW0sIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHM6IFsnw6dlbmQgc2Fuw655ZScsICfDp2VuZCBzYW7DrnlleWFuJ10sXG4gICAgICAgICAgICBzczogW251bSArICcgc2Fuw655ZScsIG51bSArICcgc2Fuw655ZXlhbiddLFxuICAgICAgICAgICAgbTogWydkZXHDrnFleWVrJywgJ2RlccOucWV5ZWvDqiddLFxuICAgICAgICAgICAgbW06IFtudW0gKyAnIGRlccOucWUnLCBudW0gKyAnIGRlccOucWV5YW4nXSxcbiAgICAgICAgICAgIGg6IFsnc2FldGVrJywgJ3NhZXRla8OqJ10sXG4gICAgICAgICAgICBoaDogW251bSArICcgc2FldCcsIG51bSArICcgc2FldGFuJ10sXG4gICAgICAgICAgICBkOiBbJ3JvamVrJywgJ3JvamVrw6onXSxcbiAgICAgICAgICAgIGRkOiBbbnVtICsgJyByb2onLCBudW0gKyAnIHJvamFuJ10sXG4gICAgICAgICAgICB3OiBbJ2hlZnRleWVrJywgJ2hlZnRleWVrw6onXSxcbiAgICAgICAgICAgIHd3OiBbbnVtICsgJyBoZWZ0ZScsIG51bSArICcgaGVmdGV5YW4nXSxcbiAgICAgICAgICAgIE06IFsnbWVoZWsnLCAnbWVoZWvDqiddLFxuICAgICAgICAgICAgTU06IFtudW0gKyAnIG1laCcsIG51bSArICcgbWVoYW4nXSxcbiAgICAgICAgICAgIHk6IFsnc2FsZWsnLCAnc2FsZWvDqiddLFxuICAgICAgICAgICAgeXk6IFtudW0gKyAnIHNhbCcsIG51bSArICcgc2FsYW4nXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cbiAgICAvLyBmdW5jdGlvbiBvYmxpcXVlTnVtU3VmZml4KG51bSkge1xuICAgIC8vICAgICBpZihudW0uaW5jbHVkZXMoJzonKSlcbiAgICAvLyAgICAgICAgIG51bSA9IHBhcnNlSW50KG51bS5zcGxpdCgnOicpWzBdKTtcbiAgICAvLyAgICAgZWxzZVxuICAgIC8vICAgICAgICAgbnVtID0gcGFyc2VJbnQobnVtKTtcbiAgICAvLyAgICAgcmV0dXJuIG51bSA9PSAwIHx8IG51bSAlIDEwID09IDEgPyAnw6onXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgOiAobnVtID4gMTAgJiYgbnVtICUgMTAgPT0gMCA/ICfDricgOiAnYW4nKTtcbiAgICAvLyB9XG4gICAgZnVuY3Rpb24gZXphZmVOdW1TdWZmaXgobnVtKSB7XG4gICAgICAgIG51bSA9ICcnICsgbnVtO1xuICAgICAgICB2YXIgbCA9IG51bS5zdWJzdHJpbmcobnVtLmxlbmd0aCAtIDEpLFxuICAgICAgICAgICAgbGwgPSBudW0ubGVuZ3RoID4gMSA/IG51bS5zdWJzdHJpbmcobnVtLmxlbmd0aCAtIDIpIDogJyc7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICEobGwgPT0gMTIgfHwgbGwgPT0gMTMpICYmXG4gICAgICAgICAgICAobCA9PSAnMicgfHwgbCA9PSAnMycgfHwgbGwgPT0gJzUwJyB8fCBsID09ICc3MCcgfHwgbCA9PSAnODAnKVxuICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gJ3nDqic7XG4gICAgICAgIHJldHVybiAnw6onO1xuICAgIH1cblxuICAgIHZhciBrdUttciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2t1LWttcicsIHtcbiAgICAgICAgLy8gQWNjb3JkaW5nIHRvIHRoZSBzcGVsbGluZyBydWxlcyBkZWZpbmVkIGJ5IHRoZSB3b3JrIGdyb3VwIG9mIFdlcWZhIE1lem9wb3RhbXlhecOqIChNZXNvcG90YW1pYSBGb3VuZGF0aW9uKVxuICAgICAgICAvLyB0aGlzIHNob3VsZCBiZTogJ0thbsO7bmEgUGHFn8Oubl9TaWJhdF9BZGFyX07DrnNhbl9HdWxhbl9IZXrDrnJhbl9Uw65ybWVoX1RlYmF4X8OObG9uX8OHaXLDrnlhIFDDqsWfw65uX8OHaXLDrnlhIFBhxZ/Drm5fS2Fuw7tuYSBQw6rFn8OubidcbiAgICAgICAgLy8gQnV0IHRoZSBuYW1lcyBiZWxvdyBhcmUgbW9yZSB3ZWxsIGtub3duIGFuZCBoYW5keVxuICAgICAgICBtb250aHM6ICdSw6piZW5kYW5fU2liYXRfQWRhcl9Ow65zYW5fR3VsYW5fSGV6w65yYW5fVMOucm1laF9UZWJheF/Djmxvbl9Db3RtZWhfTWlqZGFyX0JlcmZhbmJhcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdSw6piX1NpYl9BZGFfTsOuc19HdWxfSGV6X1TDrnJfVGViX8OObG9fQ290X01pal9CZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnWWVrxZ9lbV9EdcWfZW1fU8OqxZ9lbV/Dh2FyxZ9lbV9Qw6puY8WfZW1fw45uX8WeZW3Dricuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1lla19EdV9Tw6pfw4dhcl9Qw6puX8OObl/FnmVtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1llX0R1X1PDql/Dh2FfUMOqX8OObl/FnmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYm4nIDogJ0JOJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG4nIDogJ1BOJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2JufEJOfHBufFBOLyxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEbyBNTU1NW2FdIFlZWVlbYW5dJyxcbiAgICAgICAgICAgIExMTDogJ0RvIE1NTU1bYV0gWVlZWVthbl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIERvIE1NTU1bYV0gWVlZWVthbl0gSEg6bW0nLFxuICAgICAgICAgICAgbGw6ICdEbyBNTU1bLl0gWVlZWVthbl0nLFxuICAgICAgICAgICAgbGxsOiAnRG8gTU1NWy5dIFlZWVlbYW5dIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGRbLl0sIERvIE1NTVsuXSBZWVlZW2FuXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW8OOcm8gZGkgc2FldF0gTFQgW2RlXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1NpYsOqIGRpIHNhZXRdIExUIFtkZV0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtkaSBzYWV0XSBMVCBbZGVdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbRHVoIGRpIHNhZXRdIExUIFtkZV0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkW2EgYm9yw64gZGkgc2FldF0gTFQgW2RlXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RpICVzIGRlJyxcbiAgICAgICAgICAgIHBhc3Q6ICdiZXLDriAlcycsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgd3c6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSg/OnnDqnzDqnxcXC4pLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bSwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHBlcmlvZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKHAuaW5jbHVkZXMoJ3cnKSB8fCBwLmluY2x1ZGVzKCdtJykpIHJldHVybiBudW0gKyAnLic7XG5cbiAgICAgICAgICAgIHJldHVybiBudW0gKyBlemFmZU51bVN1ZmZpeChudW0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga3VLbXI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS3lyZ3l6IFtreV1cbi8vISBhdXRob3IgOiBDaHluZ3l6IEFyeXN0YW4gdXVsdSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaHluZ3l6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDA6ICct0YfSrycsXG4gICAgICAgIDE6ICct0YfQuCcsXG4gICAgICAgIDI6ICct0YfQuCcsXG4gICAgICAgIDM6ICct0YfSrycsXG4gICAgICAgIDQ6ICct0YfSrycsXG4gICAgICAgIDU6ICct0YfQuCcsXG4gICAgICAgIDY6ICct0YfRiycsXG4gICAgICAgIDc6ICct0YfQuCcsXG4gICAgICAgIDg6ICct0YfQuCcsXG4gICAgICAgIDk6ICct0YfRgycsXG4gICAgICAgIDEwOiAnLdGH0YMnLFxuICAgICAgICAyMDogJy3Rh9GLJyxcbiAgICAgICAgMzA6ICct0YfRgycsXG4gICAgICAgIDQwOiAnLdGH0YsnLFxuICAgICAgICA1MDogJy3Rh9KvJyxcbiAgICAgICAgNjA6ICct0YfRiycsXG4gICAgICAgIDcwOiAnLdGH0LgnLFxuICAgICAgICA4MDogJy3Rh9C4JyxcbiAgICAgICAgOTA6ICct0YfRgycsXG4gICAgICAgIDEwMDogJy3Rh9KvJyxcbiAgICB9O1xuXG4gICAgdmFyIGt5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgna3knLCB7XG4gICAgICAgIG1vbnRoczogJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRj9C90LJf0YTQtdCyX9C80LDRgNGCX9Cw0L/RgF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCzX9GB0LXQvV/QvtC60YJf0L3QvtGPX9C00LXQuicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfQltC10LrRiNC10LzQsdC4X9CU0q/QudGI06nQvNCx0q9f0KjQtdC50YjQtdC80LHQuF/QqNCw0YDRiNC10LzQsdC4X9CR0LXQudGI0LXQvNCx0Lhf0JbRg9C80LBf0JjRiNC10LzQsdC4Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0JbQtdC6X9CU0q/QuV/QqNC10Llf0KjQsNGAX9CR0LXQuV/QltGD0Lxf0JjRiNC1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9CW0Lpf0JTQuV/QqNC5X9Co0YBf0JHQuV/QltC8X9CY0YgnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0JHSr9Cz0q/QvSDRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQrdGA0YLQtdKjINGB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Ca0LXRh9GN0Y0g0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9Oo0YLQutOp0L0g0LDQv9GC0LDQvdGL0L1dIGRkZGQgW9C60q/QvdKvXSBb0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg0LjRh9C40L3QtNC1JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDQvNGD0YDRg9C9JyxcbiAgICAgICAgICAgIHM6ICfQsdC40YDQvdC10YfQtSDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3M6ICclZCDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbTogJ9Cx0LjRgCDQvNKv0L3TqdGCJyxcbiAgICAgICAgICAgIG1tOiAnJWQg0LzSr9C906nRgicsXG4gICAgICAgICAgICBoOiAn0LHQuNGAINGB0LDQsNGCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YHQsNCw0YInLFxuICAgICAgICAgICAgZDogJ9Cx0LjRgCDQutKv0L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQutKv0L0nLFxuICAgICAgICAgICAgTTogJ9Cx0LjRgCDQsNC5JyxcbiAgICAgICAgICAgIE1NOiAnJWQg0LDQuScsXG4gICAgICAgICAgICB5OiAn0LHQuNGAINC20YvQuycsXG4gICAgICAgICAgICB5eTogJyVkINC20YvQuycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YfQuHzRh9GLfNGH0q980YfRgykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBreTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMdXhlbWJvdXJnaXNoIFtsYl1cbi8vISBhdXRob3IgOiBtd2VpbWVyc2tpcmNoIDogaHR0cHM6Ly9naXRodWIuY29tL213ZWltZXJza2lyY2hcbi8vISBhdXRob3IgOiBEYXZpZCBSYWlzb24gOiBodHRwczovL2dpdGh1Yi5jb20va3dpc2F0elxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIG06IFsnZW5nIE1pbnV0dCcsICdlbmdlciBNaW51dHQnXSxcbiAgICAgICAgICAgIGg6IFsnZW5nIFN0b25uJywgJ2VuZ2VyIFN0b25uJ10sXG4gICAgICAgICAgICBkOiBbJ2VlbiBEYWcnLCAnZW5nZW0gRGFnJ10sXG4gICAgICAgICAgICBNOiBbJ2VlIE1vdW50JywgJ2VuZ2VtIE1vdW50J10sXG4gICAgICAgICAgICB5OiBbJ2VlIEpvZXInLCAnZW5nZW0gSm9lciddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NGdXR1cmVUaW1lKHN0cmluZykge1xuICAgICAgICB2YXIgbnVtYmVyID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZignICcpKTtcbiAgICAgICAgaWYgKGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2EgJyArIHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2FuICcgKyBzdHJpbmc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXN0VGltZShzdHJpbmcpIHtcbiAgICAgICAgdmFyIG51bWJlciA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YoJyAnKSk7XG4gICAgICAgIGlmIChlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuICd2aXJ1ICcgKyBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICd2aXJ1biAnICsgc3RyaW5nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHdvcmQgYmVmb3JlIHRoZSBnaXZlbiBudW1iZXIgbG9zZXMgdGhlICctbicgZW5kaW5nLlxuICAgICAqIGUuZy4gJ2FuIDEwIERlZWcnIGJ1dCAnYSA1IERlZWcnXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbnVtYmVyIHtpbnRlZ2VyfVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpIHtcbiAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyLCAxMCk7XG4gICAgICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIE51bWJlciAtLT4gYWx3YXlzIHRydWVcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwKSB7XG4gICAgICAgICAgICAvLyBPbmx5IDEgZGlnaXRcbiAgICAgICAgICAgIGlmICg0IDw9IG51bWJlciAmJiBudW1iZXIgPD0gNykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMCkge1xuICAgICAgICAgICAgLy8gMiBkaWdpdHNcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBmaXJzdERpZ2l0ID0gbnVtYmVyIC8gMTA7XG4gICAgICAgICAgICBpZiAobGFzdERpZ2l0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihmaXJzdERpZ2l0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobGFzdERpZ2l0KTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDAwMCkge1xuICAgICAgICAgICAgLy8gMyBvciA0IGRpZ2l0cyAtLT4gcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3QgZGlnaXRcbiAgICAgICAgICAgIHdoaWxlIChudW1iZXIgPj0gMTApIHtcbiAgICAgICAgICAgICAgICBudW1iZXIgPSBudW1iZXIgLyAxMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFueXRoaW5nIGxhcmdlciB0aGFuIDQgZGlnaXRzOiByZWN1cnNpdmVseSBjaGVjayBmaXJzdCBuLTMgZGlnaXRzXG4gICAgICAgICAgICBudW1iZXIgPSBudW1iZXIgLyAxMDAwO1xuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxiID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbGInLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcl9GZWJydWFyX03DpGVyel9BYnLDq2xsX01lZV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdKYW4uX0ZlYnIuX01yei5fQWJyLl9NZWVfSnVuLl9KdWwuX0F1Zy5fU2VwdC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnU29ubmRlZ19Nw6lpbmRlZ19Ew6tuc2NoZGVnX03Dq3R0d29jaF9Eb25uZXNjaGRlZ19GcmVpZGVnX1NhbXNjaGRlZycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU28uX03DqS5fRMOrLl9Nw6suX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX03DqV9Ew6tfTcOrX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0gW0F1ZXJdJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MgW0F1ZXJdJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0gW0F1ZXJdJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGF1dCB1bV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTXVlciB1bV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tHw6tzY2h0ZXIgdW1dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IGRhdGUgc3RyaW5nIGZvciAnRMOrbnNjaGRlZycgKFR1ZXNkYXkpIGFuZCAnRG9ubmVzY2hkZWcnIChUaHVyc2RheSkgZHVlIHRvIHBob25vbG9naWNhbCBydWxlXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbTGVzY2h0ZW5dIGRkZGQgW3VtXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tMZXNjaHRlXSBkZGRkIFt1bV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiBwcm9jZXNzRnV0dXJlVGltZSxcbiAgICAgICAgICAgIHBhc3Q6IHByb2Nlc3NQYXN0VGltZSxcbiAgICAgICAgICAgIHM6ICdlIHB1ZXIgU2Vrb25uZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBTZWtvbm5lbicsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06ICclZCBNaW51dHRlbicsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6ICclZCBTdG9ubmVuJyxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogJyVkIERlZWcnLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiAnJWQgTcOpaW50JyxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogJyVkIEpvZXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxiO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IExhbyBbbG9dXG4vLyEgYXV0aG9yIDogUnlhbiBIYXJ0IDogaHR0cHM6Ly9naXRodWIuY29tL3J5YW5oYXJ0MlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGxvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbG8nLCB7XG4gICAgICAgIG1vbnRoczogJ+C6oeC6seC6h+C6geC6reC6mV/guoHgurjguqHgup7gurJf4Lqh4Lq14LqZ4LqyX+C7gOC6oeC6quC6sl/gup7gurbgupTguqrgurDgup7gurJf4Lqh4Lq04LqW4Lq44LqZ4LqyX+C6geC7jeC6peC6sOC6geC6u+C6lF/guqrgurTguofguqvgurJf4LqB4Lqx4LqZ4LqN4LqyX+C6leC6uOC6peC6sl/gup7gurDguojgurTguoFf4LqX4Lqx4LqZ4Lqn4LqyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfguqHgurHguofguoHguq3guplf4LqB4Lq44Lqh4Lqe4LqyX+C6oeC6teC6meC6sl/gu4DguqHguqrgurJf4Lqe4Lq24LqU4Lqq4Lqw4Lqe4LqyX+C6oeC6tOC6luC6uOC6meC6sl/guoHgu43guqXgurDguoHgurvgupRf4Lqq4Lq04LqH4Lqr4LqyX+C6geC6seC6meC6jeC6sl/gupXgurjguqXgurJf4Lqe4Lqw4LqI4Lq04LqBX+C6l+C6seC6meC6p+C6sicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+C6reC6suC6l+C6tOC6lF/guojgurHguplf4Lqt4Lqx4LqH4LqE4Lqy4LqZX+C6nuC6uOC6lF/gup7gurDguqvgurHgupRf4Lqq4Lq44LqBX+C7gOC6quC6u+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+C6l+C6tOC6lF/guojgurHguplf4Lqt4Lqx4LqH4LqE4Lqy4LqZX+C6nuC6uOC6lF/gup7gurDguqvgurHgupRf4Lqq4Lq44LqBX+C7gOC6quC6u+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgupdf4LqIX+C6reC6hF/gup5f4Lqe4LqrX+C6quC6gV/guqonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAn4Lqn4Lqx4LqZZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gupXguq3gupngu4Dguorgurvgu4ngurJ84LqV4Lqt4LqZ4LuB4Lql4LqHLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfgupXguq3gupngu4HguqXguocnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuA4LqK4Lq74LuJ4LqyJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgupXguq3gupngu4HguqXguocnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vguqHgurfgu4ngupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4Lqh4Lq34LuJ4Lqt4Lq34LuI4LqZ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vguqfgurHgupldZGRkZFvgu5zgu4ngurLgu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4Lqh4Lq34LuJ4Lqn4Lqy4LqZ4LqZ4Lq14LuJ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vguqfgurHgupldZGRkZFvgu4HguqXgu4nguqfgupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn4Lqt4Lq14LqBICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+C6nOC7iOC6suC6meC6oeC6sicsXG4gICAgICAgICAgICBzOiAn4Lqa4LuN4LuI4LuA4LqX4Lq74LuI4Lqy4LuD4LqU4Lqn4Lq04LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Lqn4Lq04LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIG06ICcxIOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBtbTogJyVkIOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBoOiAnMSDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICAgICAgaGg6ICclZCDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICAgICAgZDogJzEg4Lqh4Lq34LuJJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Lqh4Lq34LuJJyxcbiAgICAgICAgICAgIE06ICcxIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgICAgICBNTTogJyVkIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgICAgICB5OiAnMSDgupvgurUnLFxuICAgICAgICAgICAgeXk6ICclZCDgupvgurUnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvKOC6l+C6teC7iClcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LqX4Lq14LuIJyArIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBsbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMaXRodWFuaWFuIFtsdF1cbi8vISBhdXRob3IgOiBNaW5kYXVnYXMgTW96xatyYXMgOiBodHRwczovL2dpdGh1Yi5jb20vbW1venVyYXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB1bml0cyA9IHtcbiAgICAgICAgc3M6ICdzZWt1bmTEl19zZWt1bmTFvmnFs19zZWt1bmRlcycsXG4gICAgICAgIG06ICdtaW51dMSXX21pbnV0xJdzX21pbnV0xJknLFxuICAgICAgICBtbTogJ21pbnV0xJdzX21pbnXEjWnFs19taW51dGVzJyxcbiAgICAgICAgaDogJ3ZhbGFuZGFfdmFsYW5kb3NfdmFsYW5kxIUnLFxuICAgICAgICBoaDogJ3ZhbGFuZG9zX3ZhbGFuZMWzX3ZhbGFuZGFzJyxcbiAgICAgICAgZDogJ2RpZW5hX2RpZW5vc19kaWVuxIUnLFxuICAgICAgICBkZDogJ2RpZW5vc19kaWVuxbNfZGllbmFzJyxcbiAgICAgICAgTTogJ23El251b19txJduZXNpb19txJduZXPErycsXG4gICAgICAgIE1NOiAnbcSXbmVzaWFpX23El25lc2nFs19txJduZXNpdXMnLFxuICAgICAgICB5OiAnbWV0YWlfbWV0xbNfbWV0dXMnLFxuICAgICAgICB5eTogJ21ldGFpX21ldMWzX21ldHVzJyxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVNlY29uZHMobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gJ2tlbGlvcyBzZWt1bmTEl3MnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2tlbGnFsyBzZWt1bmTFvmnFsycgOiAna2VsaWFzIHNla3VuZGVzJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXhcbiAgICAgICAgICAgID8gZm9ybXMoa2V5KVswXVxuICAgICAgICAgICAgOiBpc0Z1dHVyZVxuICAgICAgICAgICAgICA/IGZvcm1zKGtleSlbMV1cbiAgICAgICAgICAgICAgOiBmb3JtcyhrZXkpWzJdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzcGVjaWFsKG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDAgfHwgKG51bWJlciA+IDEwICYmIG51bWJlciA8IDIwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybXMoa2V5KSB7XG4gICAgICAgIHJldHVybiB1bml0c1trZXldLnNwbGl0KCdfJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICByZXN1bHQgKyB0cmFuc2xhdGVTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleVswXSwgaXNGdXR1cmUpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoc3BlY2lhbChudW1iZXIpID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIGZvcm1zKGtleSlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoc3BlY2lhbChudW1iZXIpID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBsdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2x0Jywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3NhdXNpb192YXNhcmlvX2tvdm9fYmFsYW5kxb5pb19nZWd1xb7El3NfYmlyxb5lbGlvX2xpZXBvc19ydWdwasWrxI1pb19ydWdzxJdqb19zcGFsaW9fbGFwa3JpxI1pb19ncnVvZMW+aW8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ3NhdXNpc192YXNhcmlzX2tvdmFzX2JhbGFuZGlzX2dlZ3XFvsSXX2JpcsW+ZWxpc19saWVwYV9ydWdwasWrdGlzX3J1Z3PEl2ppc19zcGFsaXNfbGFwa3JpdGlzX2dydW9kaXMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/fE1NTU0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStEW29EXT8vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ3NhdV92YXNfa292X2JhbF9nZWdfYmlyX2xpZV9yZ3BfcmdzX3NwYV9sYXBfZ3JkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2VrbWFkaWVuxK9fcGlybWFkaWVuxK9fYW50cmFkaWVuxK9fdHJlxI1pYWRpZW7Er19rZXR2aXJ0YWRpZW7Er19wZW5rdGFkaWVuxK9fxaFlxaF0YWRpZW7Erycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAnc2VrbWFkaWVuaXNfcGlybWFkaWVuaXNfYW50cmFkaWVuaXNfdHJlxI1pYWRpZW5pc19rZXR2aXJ0YWRpZW5pc19wZW5rdGFkaWVuaXNfxaFlxaF0YWRpZW5pcycuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL2RkZGQgSEg6bW0vLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU2VrX1Bpcl9BbnRfVHJlX0tldF9QZW5fxaBlxaEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU19QX0FfVF9LX1BuX8WgJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIGRkZGQsIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBsOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBsbDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXScsXG4gICAgICAgICAgICBsbGw6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBkZGQsIEhIOm1tIFt2YWwuXScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW8WgaWFuZGllbl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tSeXRval0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbVmFrYXJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW1ByYcSXanVzxK9dIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdwbyAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJpZcWhICVzJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZVNlY29uZHMsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tb2ppLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICctb2ppJztcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGx0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IExhdHZpYW4gW2x2XVxuLy8hIGF1dGhvciA6IEtyaXN0YXBzIEthcmxzb25zIDogaHR0cHM6Ly9naXRodWIuY29tL3NrYWtyaVxuLy8hIGF1dGhvciA6IErEgW5pcyBFbG1lcmlzIDogaHR0cHM6Ly9naXRodWIuY29tL0phbmlzRVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHVuaXRzID0ge1xuICAgICAgICBzczogJ3Nla3VuZGVzX3Nla3VuZMSTbV9zZWt1bmRlX3Nla3VuZGVzJy5zcGxpdCgnXycpLFxuICAgICAgICBtOiAnbWluxat0ZXNfbWluxat0xJNtX21pbsWrdGVfbWluxat0ZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1tOiAnbWluxat0ZXNfbWluxat0xJNtX21pbsWrdGVfbWluxat0ZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGg6ICdzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzJy5zcGxpdCgnXycpLFxuICAgICAgICBoaDogJ3N0dW5kYXNfc3R1bmTEgW1fc3R1bmRhX3N0dW5kYXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGQ6ICdkaWVuYXNfZGllbsSBbV9kaWVuYV9kaWVuYXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGRkOiAnZGllbmFzX2RpZW7EgW1fZGllbmFfZGllbmFzJy5zcGxpdCgnXycpLFxuICAgICAgICBNOiAnbcSTbmXFoWFfbcSTbmXFoWllbV9txJNuZXNpc19txJNuZcWhaScuc3BsaXQoJ18nKSxcbiAgICAgICAgTU06ICdtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpJy5zcGxpdCgnXycpLFxuICAgICAgICB5OiAnZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB5eTogJ2dhZGFfZ2FkaWVtX2dhZHNfZ2FkaScuc3BsaXQoJ18nKSxcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB3aXRob3V0U3VmZml4IGJvb2xlYW4gdHJ1ZSA9IGEgbGVuZ3RoIG9mIHRpbWU7IGZhbHNlID0gYmVmb3JlL2FmdGVyIGEgcGVyaW9kIG9mIHRpbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ybWF0KGZvcm1zLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIC8vIEUuZy4gXCIyMSBtaW7Fq3RlXCIsIFwiMyBtaW7Fq3Rlc1wiLlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAxICYmIG51bWJlciAlIDEwMCAhPT0gMTEgPyBmb3Jtc1syXSA6IGZvcm1zWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRS5nLiBcIjIxIG1pbsWrdGVzXCIgYXMgaW4gXCJwxJNjIDIxIG1pbsWrdGVzXCIuXG4gICAgICAgICAgICAvLyBFLmcuIFwiMyBtaW7Fq3TEk21cIiBhcyBpbiBcInDEk2MgMyBtaW7Fq3TEk21cIi5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSAmJiBudW1iZXIgJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiBmb3Jtc1sxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVTZWNvbmRzKG51bWJlciwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdkYcW+YXMgc2VrdW5kZXMnIDogJ2Rhxb7EgW0gc2VrdW5kxJNtJztcbiAgICB9XG5cbiAgICB2YXIgbHYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsdicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudsSBcmlzX2ZlYnJ1xIFyaXNfbWFydHNfYXByxKtsaXNfbWFpanNfasWrbmlqc19qxatsaWpzX2F1Z3VzdHNfc2VwdGVtYnJpc19va3RvYnJpc19ub3ZlbWJyaXNfZGVjZW1icmlzJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYWlfasWrbl9qxatsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ3N2xJN0ZGllbmFfcGlybWRpZW5hX290cmRpZW5hX3RyZcWhZGllbmFfY2V0dXJ0ZGllbmFfcGlla3RkaWVuYV9zZXN0ZGllbmEnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N2X1BfT19UX0NfUGtfUycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdl9QX09fVF9DX1BrX1MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVkuJyxcbiAgICAgICAgICAgIExMOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0nLFxuICAgICAgICAgICAgTExMOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTSwgZGRkZCwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vFoG9kaWVuIHB1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1LEq3QgcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbVmFrYXIgcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW1BhZ8SBanXFocSBXSBkZGRkIFtwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdwxJNjICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwaXJtcyAlcycsXG4gICAgICAgICAgICBzOiByZWxhdGl2ZVNlY29uZHMsXG4gICAgICAgICAgICBzczogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbHY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTW9udGVuZWdyaW4gW21lXVxuLy8hIGF1dGhvciA6IE1pb2RyYWcgTmlrYcSNIDxtaW9kcmFnQHJlc3RhcnRpdC5tZT4gOiBodHRwczovL2dpdGh1Yi5jb20vbWlvZHJhZ25pa2FjXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdHJhbnNsYXRvciA9IHtcbiAgICAgICAgd29yZHM6IHtcbiAgICAgICAgICAgIC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWydzZWt1bmQnLCAnc2VrdW5kYScsICdzZWt1bmRpJ10sXG4gICAgICAgICAgICBtOiBbJ2plZGFuIG1pbnV0JywgJ2plZG5vZyBtaW51dGEnXSxcbiAgICAgICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0YScsICdtaW51dGEnXSxcbiAgICAgICAgICAgIGg6IFsnamVkYW4gc2F0JywgJ2plZG5vZyBzYXRhJ10sXG4gICAgICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgICAgICBNTTogWydtamVzZWMnLCAnbWplc2VjYScsICdtamVzZWNpJ10sXG4gICAgICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddLFxuICAgICAgICB9LFxuICAgICAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxXG4gICAgICAgICAgICAgICAgPyB3b3JkS2V5WzBdXG4gICAgICAgICAgICAgICAgOiBudW1iZXIgPj0gMiAmJiBudW1iZXIgPD0gNFxuICAgICAgICAgICAgICAgICAgPyB3b3JkS2V5WzFdXG4gICAgICAgICAgICAgICAgICA6IHdvcmRLZXlbMl07XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgICAgICB2YXIgd29yZEtleSA9IHRyYW5zbGF0b3Iud29yZHNba2V5XTtcbiAgICAgICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyICtcbiAgICAgICAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRvci5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKG51bWJlciwgd29yZEtleSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgbWUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtZScsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqX2p1bl9qdWxfYXZnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbc2p1dHJhIHVdIExUJyxcblxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGplbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JpamVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2p1xI1lIHVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RXZWVrRGF5cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbbmVkamVsamVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwb25lZGplbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3V0b3JrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3JpamVkZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW8SNZXR2cnRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3BldGthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ByaWplICVzJyxcbiAgICAgICAgICAgIHM6ICduZWtvbGlrbyBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiAnZGFuJyxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06ICdtamVzZWMnLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogJ2dvZGludScsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFvcmkgW21pXVxuLy8hIGF1dGhvciA6IEpvaG4gQ29ycmlnYW4gPHJvYmJpZWNsb3NldEBnbWFpbC5jb20+IDogaHR0cHM6Ly9naXRodWIuY29tL2pvaG5pZGVhbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1pID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWknLCB7XG4gICAgICAgIG1vbnRoczogJ0tvaGktdMSBdGVfSHVpLXRhbmd1cnVfUG91dMWrLXRlLXJhbmdpX1BhZW5nYS13aMSBd2jEgV9IYXJhdHVhX1BpcGlyaV9IxY1uZ29pbmdvaV9IZXJlLXR1cmkta8WNa8SBX01haHVydV9XaGlyaW5nYS3EgS1udWt1X1doaXJpbmdhLcSBLXJhbmdpX0hha2loZWEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ0tvaGlfSHVpX1BvdV9QYWVfSGFyYV9QaXBpX0jFjW5nb2lfSGVyZV9NYWh1X1doaS1udV9XaGktcmFfSGFraScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwyfS9pLFxuICAgICAgICB3ZWVrZGF5czogJ1LEgXRhcHVfTWFuZV9UxatyZWlfV2VuZXJlaV9UxIFpdGVfUGFyYWlyZV9IxIF0YXJlaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1RhX01hX1TFq19XZV9UxIFpX1BhX0jEgScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdUYV9NYV9UxatfV2VfVMSBaV9QYV9IxIEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW2ldIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBbaV0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tpIHRlaWUgbWFoYW5hLCBpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2Fwb3BvIGldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbaV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpbmFuYWhpIGldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbd2hha2FtdXR1bmdhIGldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaSByb3RvIGkgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGkgbXVhJyxcbiAgICAgICAgICAgIHM6ICd0ZSBoxJNrb25hIHJ1YXJ1YScsXG4gICAgICAgICAgICBzczogJyVkIGjEk2tvbmEnLFxuICAgICAgICAgICAgbTogJ2hlIG1lbmV0aScsXG4gICAgICAgICAgICBtbTogJyVkIG1lbmV0aScsXG4gICAgICAgICAgICBoOiAndGUgaGFvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBoYW9yYScsXG4gICAgICAgICAgICBkOiAnaGUgcmEnLFxuICAgICAgICAgICAgZGQ6ICclZCByYScsXG4gICAgICAgICAgICBNOiAnaGUgbWFyYW1hJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWFyYW1hJyxcbiAgICAgICAgICAgIHk6ICdoZSB0YXUnLFxuICAgICAgICAgICAgeXk6ICclZCB0YXUnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1pO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hY2Vkb25pYW4gW21rXVxuLy8hIGF1dGhvciA6IEJvcmlzbGF2IE1pY2tvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9CMGswXG4vLyEgYXV0aG9yIDogU2FzaGtvIFRvZG9yb3YgOiBodHRwczovL2dpdGh1Yi5jb20vYmt5Y2VoXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbWsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtaycsIHtcbiAgICAgICAgbW9udGhzOiAn0ZjQsNC90YPQsNGA0Lhf0YTQtdCy0YDRg9Cw0YDQuF/QvNCw0YDRgl/QsNC/0YDQuNC7X9C80LDRmF/RmNGD0L3QuF/RmNGD0LvQuF/QsNCy0LPRg9GB0YJf0YHQtdC/0YLQtdC80LLRgNC4X9C+0LrRgtC+0LzQstGA0Lhf0L3QvtC10LzQstGA0Lhf0LTQtdC60LXQvNCy0YDQuCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRmNCw0L1f0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCzX9GB0LXQv1/QvtC60YJf0L3QvtC1X9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfQvdC10LTQtdC70LBf0L/QvtC90LXQtNC10LvQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTQsF/Rh9C10YLQstGA0YLQvtC6X9C/0LXRgtC+0Lpf0YHQsNCx0L7RgtCwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0L3QtdC0X9C/0L7QvV/QstGC0L5f0YHRgNC1X9GH0LXRgl/Qv9C10YJf0YHQsNCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9C9ZV/Qv29f0LLRgl/RgdGAX9GH0LVf0L/QtV/RgWEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9CU0LXQvdC10YEg0LLQvl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQo9GC0YDQtSDQstC+XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vQktC+XSBkZGRkIFvQstC+XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9CS0YfQtdGA0LAg0LLQvl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CY0LfQvNC40L3QsNGC0LDRgtCwXSBkZGRkIFvQstC+XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CY0LfQvNC40L3QsNGC0LjQvtGCXSBkZGRkIFvQstC+XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0LfQsCAlcycsXG4gICAgICAgICAgICBwYXN0OiAn0L/RgNC10LQgJXMnLFxuICAgICAgICAgICAgczogJ9C90LXQutC+0LvQutGDINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIHNzOiAnJWQg0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgbTogJ9C10LTQvdCwINC80LjQvdGD0YLQsCcsXG4gICAgICAgICAgICBtbTogJyVkINC80LjQvdGD0YLQuCcsXG4gICAgICAgICAgICBoOiAn0LXQtNC10L0g0YfQsNGBJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YfQsNGB0LAnLFxuICAgICAgICAgICAgZDogJ9C10LTQtdC9INC00LXQvScsXG4gICAgICAgICAgICBkZDogJyVkINC00LXQvdCwJyxcbiAgICAgICAgICAgIE06ICfQtdC00LXQvSDQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NOiAnJWQg0LzQtdGB0LXRhtC4JyxcbiAgICAgICAgICAgIHk6ICfQtdC00L3QsCDQs9C+0LTQuNC90LAnLFxuICAgICAgICAgICAgeXk6ICclZCDQs9C+0LTQuNC90LgnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC10LJ80LXQvXzRgtC4fNCy0Lh80YDQuHzQvNC4KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdCyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdC9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPiAxMCAmJiBsYXN0MkRpZ2l0cyA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCy0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgNC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSA3IHx8IGxhc3REaWdpdCA9PT0gOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1rO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGF5YWxhbSBbbWxdXG4vLyEgYXV0aG9yIDogRmxveWQgUGluayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mbG95ZHBpbmtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21sJywge1xuICAgICAgICBtb250aHM6ICfgtJzgtKjgtYHgtLXgtLDgtL9f4LSr4LWG4LSs4LWN4LSw4LWB4LS14LSw4LS/X+C0ruC0vuC1vOC0muC1jeC0muC1jV/gtI/gtKrgtY3gtLDgtL/gtb1f4LSu4LWH4LSv4LWNX+C0nOC1guC1ul/gtJzgtYLgtLLgtYhf4LST4LSX4LS44LWN4LSx4LWN4LSx4LWNX+C0uOC1huC0quC1jeC0seC1jeC0seC0guC0rOC1vF/gtJLgtJXgtY3gtJ/gtYvgtKzgtbxf4LSo4LS14LSC4LSs4LW8X+C0oeC0v+C0uOC0guC0rOC1vCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4LSc4LSo4LWBLl/gtKvgtYbgtKzgtY3gtLDgtYEuX+C0ruC0vuC1vC5f4LSP4LSq4LWN4LSw4LS/Ll/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iC5f4LST4LSXLl/gtLjgtYbgtKrgtY3gtLHgtY3gtLEuX+C0kuC0leC1jeC0n+C1iy5f4LSo4LS14LSCLl/gtKHgtL/gtLjgtIIuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ+C0nuC0vuC0r+C0seC0vuC0tOC1jeC0ml/gtKTgtL/gtJngtY3gtJXgtLPgtL7gtLTgtY3gtJpf4LSa4LWK4LS14LWN4LS14LS+4LS04LWN4LSaX+C0rOC1geC0p+C0qOC0vuC0tOC1jeC0ml/gtLXgtY3gtK/gtL7gtLTgtL7gtLTgtY3gtJpf4LS14LWG4LSz4LWN4LSz4LS/4LSv4LS+4LS04LWN4LSaX+C0tuC0qOC0v+C0r+C0vuC0tOC1jeC0micuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4LSe4LS+4LSv4LW8X+C0pOC0v+C0meC1jeC0leC1vl/gtJrgtYrgtLXgtY3gtLVf4LSs4LWB4LSn4LW7X+C0teC1jeC0r+C0vuC0tOC0gl/gtLXgtYbgtLPgtY3gtLPgtL9f4LS24LSo4LS/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+C0nuC0vl/gtKTgtL9f4LSa4LWKX+C0rOC1gV/gtLXgtY3gtK/gtL5f4LS14LWGX+C0ticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIC3gtKjgtYEnLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIC3gtKjgtYEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0gLeC0qOC1gScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+C0h+C0qOC1jeC0qOC1jV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgtKjgtL7gtLPgtYZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgtIfgtKjgtY3gtKjgtLLgtYZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+C0leC0tOC0v+C0nuC1jeC0nl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0nLFxuICAgICAgICAgICAgcGFzdDogJyVzIOC0ruC1geC1u+C0quC1jScsXG4gICAgICAgICAgICBzOiAn4LSF4LW94LSqIOC0qOC0v+C0ruC0v+C0t+C0meC1jeC0meC1vicsXG4gICAgICAgICAgICBzczogJyVkIOC0uOC1huC0leC1jeC0leC1u+C0oeC1jScsXG4gICAgICAgICAgICBtOiAn4LSS4LSw4LWBIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgICAgICBtbTogJyVkIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgICAgICBoOiAn4LSS4LSw4LWBIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgICAgICBoaDogJyVkIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgICAgICBkOiAn4LSS4LSw4LWBIOC0puC0v+C0teC0uOC0gicsXG4gICAgICAgICAgICBkZDogJyVkIOC0puC0v+C0teC0uOC0gicsXG4gICAgICAgICAgICBNOiAn4LSS4LSw4LWBIOC0ruC0vuC0uOC0gicsXG4gICAgICAgICAgICBNTTogJyVkIOC0ruC0vuC0uOC0gicsXG4gICAgICAgICAgICB5OiAn4LSS4LSw4LWBIOC0teC1vOC0t+C0gicsXG4gICAgICAgICAgICB5eTogJyVkIOC0teC1vOC0t+C0gicsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gtLDgtL7gtKTgtY3gtLDgtL984LSw4LS+4LS14LS/4LSy4LWGfOC0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY184LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCfOC0sOC0vuC0pOC1jeC0sOC0vy9pLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4LSw4LS+4LSk4LWN4LSw4LS/JyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgtIngtJrgtY3gtJog4LSV4LS04LS/4LSe4LWN4LSe4LWNJyB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0pOC1jeC0sOC0vyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LS14LS/4LSy4LWGJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtIngtJrgtY3gtJog4LSV4LS04LS/4LSe4LWN4LSe4LWNJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0pOC1jeC0sOC0vyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTW9uZ29saWFuIFttbl1cbi8vISBhdXRob3IgOiBKYXZraGxhbnR1Z3MgTnlhbWRvcmogOiBodHRwczovL2dpdGh1Yi5jb20vamF2a2hhYW5qN1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXRjdC00YXRjdC9INGB0LXQutGD0L3QtCcgOiAn0YXRjdC00YXRjdC9INGB0LXQutGD0L3QtNGL0L0nO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0YHQtdC60YPQvdC0JyA6ICcg0YHQtdC60YPQvdC00YvQvScpO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDQvNC40L3Rg9GCJyA6ICcg0LzQuNC90YPRgtGL0L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0YbQsNCzJyA6ICcg0YbQsNCz0LjQudC9Jyk7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINOp0LTTqdGAJyA6ICcg06nQtNGA0LjQudC9Jyk7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGB0LDRgCcgOiAnINGB0LDRgNGL0L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0LbQuNC7JyA6ICcg0LbQuNC70LjQudC9Jyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbW4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtbicsIHtcbiAgICAgICAgbW9udGhzOiAn0J3RjdCz0LTSr9Cz0Y3RjdGAINGB0LDRgF/QpdC+0ZHRgNC00YPQs9Cw0LDRgCDRgdCw0YBf0JPRg9GA0LDQstC00YPQs9Cw0LDRgCDRgdCw0YBf0JTTqdGA06nQstC00q/Qs9GN0Y3RgCDRgdCw0YBf0KLQsNCy0LTRg9Cz0LDQsNGAINGB0LDRgF/Ql9GD0YDQs9Cw0LTRg9Cz0LDQsNGAINGB0LDRgF/QlNC+0LvQtNGD0LPQsNCw0YAg0YHQsNGAX9Cd0LDQudC80LTRg9Cz0LDQsNGAINGB0LDRgF/QldGB0LTSr9Cz0Y3RjdGAINGB0LDRgF/QkNGA0LDQstC00YPQs9Cw0LDRgCDRgdCw0YBf0JDRgNCy0LDQvSDQvdGN0LPQtNKv0LPRjdGN0YAg0YHQsNGAX9CQ0YDQstCw0L0g0YXQvtGR0YDQtNGD0LPQsNCw0YAg0YHQsNGAJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICcxINGB0LDRgF8yINGB0LDRgF8zINGB0LDRgF80INGB0LDRgF81INGB0LDRgF82INGB0LDRgF83INGB0LDRgF84INGB0LDRgF85INGB0LDRgF8xMCDRgdCw0YBfMTEg0YHQsNGAXzEyINGB0LDRgCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ9Cd0Y/QvF/QlNCw0LLQsNCwX9Cc0Y/Qs9C80LDRgF/Qm9GF0LDQs9Cy0LBf0J/Sr9GA0Y3Qsl/QkdCw0LDRgdCw0L1f0JHRj9C80LHQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9Cd0Y/QvF/QlNCw0LJf0JzRj9CzX9Cb0YXQsF/Qn9Kv0YBf0JHQsNCwX9CR0Y/QvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQndGPX9CU0LBf0JzRj1/Qm9GFX9Cf0q9f0JHQsF/QkdGPJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnWVlZWSDQvtC90YsgTU1NTdGL0L0gRCcsXG4gICAgICAgICAgICBMTEw6ICdZWVlZINC+0L3RiyBNTU1N0YvQvSBEIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBZWVlZINC+0L3RiyBNTU1N0YvQvSBEIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9Ku06h80q7QpS9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ9Ku0KUnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0q7TqCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0q7QpSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Oo0L3TqdOp0LTTqdGAXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Cc0LDRgNCz0LDQsNGIXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vQmNGA0Y3RhV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Oo0YfQuNCz0LTTqdGAXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vTqNC90LPTqdGA0YHTqdC9XSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg0LTQsNGA0LDQsCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMg06nQvNC906knLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0g06nQtNOp0YAvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg06nQtNOp0YAnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbW47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTWFyYXRoaSBbbXJdXG4vLyEgYXV0aG9yIDogSGFyc2hhZCBLYWxlIDogaHR0cHM6Ly9naXRodWIuY29tL2thbGVodlxuLy8hIGF1dGhvciA6IFZpdmVrIEF0aGFseWUgOiBodHRwczovL2dpdGh1Yi5jb20vdm5hdGhhbHllXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+ClpycsXG4gICAgICAgICAgICAyOiAn4KWoJyxcbiAgICAgICAgICAgIDM6ICfgpaknLFxuICAgICAgICAgICAgNDogJ+ClqicsXG4gICAgICAgICAgICA1OiAn4KWrJyxcbiAgICAgICAgICAgIDY6ICfgpawnLFxuICAgICAgICAgICAgNzogJ+ClrScsXG4gICAgICAgICAgICA4OiAn4KWuJyxcbiAgICAgICAgICAgIDk6ICfgpa8nLFxuICAgICAgICAgICAgMDogJ+ClpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICAgICAn4KWoJzogJzInLFxuICAgICAgICAgICAgJ+ClqSc6ICczJyxcbiAgICAgICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICAgICAn4KWrJzogJzUnLFxuICAgICAgICAgICAgJ+ClrCc6ICc2JyxcbiAgICAgICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICAgICAn4KWuJzogJzgnLFxuICAgICAgICAgICAgJ+Clryc6ICc5JyxcbiAgICAgICAgICAgICfgpaYnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVNcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9ICcnO1xuICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+CkleCkvuCkueClgCDgpLjgpYfgpJXgpILgpKYnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpLjgpYfgpJXgpILgpKYnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CklSDgpK7gpL/gpKjgpL/gpJ8nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpK7gpL/gpKjgpL/gpJ/gpYcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CklSDgpKTgpL7gpLgnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpKTgpL7gpLgnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CklSDgpKbgpL/gpLXgpLgnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpKbgpL/gpLXgpLgnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CklSDgpK7gpLngpL/gpKjgpL4nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpK7gpLngpL/gpKjgpYcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ+Ckj+CklSDgpLXgpLDgpY3gpLcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICclZCDgpLXgpLDgpY3gpLfgpYcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpJXgpL7gpLngpYAg4KS44KWH4KSV4KSC4KSm4KS+4KSCJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KS44KWH4KSV4KSC4KSm4KS+4KSCJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJXgpL4g4KSu4KS/4KSo4KS/4KSf4KS+JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSu4KS/4KSo4KS/4KSf4KS+4KSCJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJXgpL4g4KSk4KS+4KS44KS+JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSk4KS+4KS44KS+4KSCJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJXgpL4g4KSm4KS/4KS14KS44KS+JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSm4KS/4KS14KS44KS+4KSCJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJXgpL4g4KSu4KS54KS/4KSo4KWN4KSv4KS+JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSu4KS54KS/4KSo4KWN4KSv4KS+4KSCJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJXgpL4g4KS14KSw4KWN4KS34KS+JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KS14KSw4KWN4KS34KS+4KSCJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBtciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21yJywge1xuICAgICAgICBtb250aHM6ICfgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWAX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpL/gpLJf4KSu4KWHX+CknOClguCkqF/gpJzgpYHgpLLgpYhf4KSR4KSX4KS44KWN4KSfX+CkuOCkquCljeCkn+Clh+CkguCkrOCksF/gpJHgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSwX+CkoeCkv+CkuOClh+CkguCkrOCksCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAn4KSc4KS+4KSo4KWHLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkmi5f4KSP4KSq4KWN4KSw4KS/Ll/gpK7gpYcuX+CknOClguCkqC5f4KSc4KWB4KSy4KWILl/gpJHgpJcuX+CkuOCkquCljeCkn+Clh+Ckgi5f4KSR4KSV4KWN4KSf4KWLLl/gpKjgpYvgpLXgpY3gpLngpYfgpIIuX+CkoeCkv+CkuOClh+Ckgi4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfgpLDgpLXgpL/gpLXgpL7gpLBf4KS44KWL4KSu4KS14KS+4KSwX+CkruCkguCkl+Cks+CkteCkvuCksF/gpKzgpYHgpKfgpLXgpL7gpLBf4KSX4KWB4KSw4KWC4KS14KS+4KSwX+CktuClgeCkleCljeCksOCkteCkvuCksF/gpLbgpKjgpL/gpLXgpL7gpLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgpLDgpLXgpL9f4KS44KWL4KSuX+CkruCkguCkl+Cks1/gpKzgpYHgpKdf4KSX4KWB4KSw4KWCX+CktuClgeCkleCljeCksF/gpLbgpKjgpL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KSwX+CkuOCli1/gpK7gpIJf4KSs4KWBX+Ckl+ClgV/gpLbgpYFf4KS2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KSJ4KSm4KWN4KSv4KS+XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KSV4KS+4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgpK7gpL7gpJfgpYDgpLJdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPgpK7gpKfgpY3gpK/gpYcnLFxuICAgICAgICAgICAgcGFzdDogJyVz4KSq4KWC4KSw4KWN4KS14KWAJyxcbiAgICAgICAgICAgIHM6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgbTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBoOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGQ6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgTTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICB5OiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CkquCkueCkvuCkn+Clh3zgpLjgpJXgpL7gpLPgpYB84KSm4KWB4KSq4KS+4KSw4KWAfOCkuOCkvuCkr+CkguCkleCkvuCks+ClgHzgpLDgpL7gpKTgpY3gpLDgpYAvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpKrgpLngpL7gpJ/gpYcnIHx8IG1lcmlkaWVtID09PSAn4KS44KSV4KS+4KSz4KWAJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+CkpuClgeCkquCkvuCksOClgCcgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+CkuOCkvuCkr+CkguCkleCkvuCks+ClgCcgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+CksOCkvuCkpOCljeCksOClgCdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyID49IDAgJiYgaG91ciA8IDYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkquCkueCkvuCkn+Clhyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KSV4KS+4KSz4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKbgpYHgpKrgpL7gpLDgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkvuCkr+CkguCkleCkvuCks+ClgCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KWN4KSw4KWAJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1yO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGF5IFttc11cbi8vISBhdXRob3IgOiBXZWxkYW4gSmFtaWxpIDogaHR0cHM6Ly9naXRodWIuY29tL3dlbGRhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1zID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcmlfRmVicnVhcmlfTWFjX0FwcmlsX01laV9KdW5fSnVsYWlfT2dvc19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EaXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfT2dzX1NlcF9Pa3RfTm92X0Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdBaGRfSXNuX1NlbF9SYWJfS2hhX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnQWhfSXNfU2xfUmJfS21fSm1fU2InLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9wYWdpfHRlbmdhaGFyaXxwZXRhbmd8bWFsYW0vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3RlbmdhaGFyaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAncGV0YW5nJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2VsbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFsYW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgczogJ2JlYmVyYXBhIHNhYXQnLFxuICAgICAgICAgICAgc3M6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIG06ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWluaXQnLFxuICAgICAgICAgICAgaDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQ6ICdzZWhhcmknLFxuICAgICAgICAgICAgZGQ6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE06ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnVsYW4nLFxuICAgICAgICAgICAgeTogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXk6ICclZCB0YWh1bicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxheSBbbXMtbXldXG4vLyEgbm90ZSA6IERFUFJFQ0FURUQsIHRoZSBjb3JyZWN0IG9uZSBpcyBbbXNdXG4vLyEgYXV0aG9yIDogV2VsZGFuIEphbWlsaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWxkYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtc015ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMtbXknLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcmlfRmVicnVhcmlfTWFjX0FwcmlsX01laV9KdW5fSnVsYWlfT2dvc19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EaXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfT2dzX1NlcF9Pa3RfTm92X0Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdBaGRfSXNuX1NlbF9SYWJfS2hhX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnQWhfSXNfU2xfUmJfS21fSm1fU2InLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9wYWdpfHRlbmdhaGFyaXxwZXRhbmd8bWFsYW0vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3RlbmdhaGFyaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAncGV0YW5nJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2VsbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFsYW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgczogJ2JlYmVyYXBhIHNhYXQnLFxuICAgICAgICAgICAgc3M6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIG06ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWluaXQnLFxuICAgICAgICAgICAgaDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQ6ICdzZWhhcmknLFxuICAgICAgICAgICAgZGQ6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE06ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnVsYW4nLFxuICAgICAgICAgICAgeTogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXk6ICclZCB0YWh1bicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtc015O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbHRlc2UgKE1hbHRhKSBbbXRdXG4vLyEgYXV0aG9yIDogQWxlc3NhbmRybyBNYXJ1Y2NpYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbGVzbWFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ210Jywge1xuICAgICAgICBtb250aHM6ICdKYW5uYXJfRnJhcl9NYXJ6dV9BcHJpbF9NZWpqdV/EoHVuanVfTHVsanVfQXd3aXNzdV9TZXR0ZW1icnVfT3R0dWJydV9Ob3ZlbWJydV9EacSLZW1icnUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZyYV9NYXJfQXByX01lal/EoHVuX0x1bF9Bd3dfU2V0X090dF9Ob3ZfRGnEiycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnSWwtxKZhZGRfSXQtVG5lam5fSXQtVGxpZXRhX0wtRXJiZ8SnYV9JbC3EpmFtaXNfSWwtxKBpbWfEp2FfSXMtU2lidCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnxKZhZF9UbmVfVGxpX0VyYl/EpmFtX8SgaW1fU2liJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ8SmYV9Ubl9UbF9Fcl/EpmFfxKBpX1NpJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0lsbHVtIGZpbC1dTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tHxKdhZGEgZmlsLV1MVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ZpbC1dTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJbC1iaWVyYcSnIGZpbC1dTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtsaSBnxKdhZGRhXSBbZmlsLV1MVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2bigJkgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGlsdScsXG4gICAgICAgICAgICBzOiAnZnRpdCBzZWtvbmRpJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vrb25kaScsXG4gICAgICAgICAgICBtOiAnbWludXRhJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRpJyxcbiAgICAgICAgICAgIGg6ICdzaWVnxKdhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgc2llZ8SnYXQnLFxuICAgICAgICAgICAgZDogJ8ShdXJuYXRhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgxKFyYW5ldCcsXG4gICAgICAgICAgICBNOiAneGFoYXInLFxuICAgICAgICAgICAgTU06ICclZCB4aHVyJyxcbiAgICAgICAgICAgIHk6ICdzZW5hJyxcbiAgICAgICAgICAgIHl5OiAnJWQgc25pJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCdXJtZXNlIFtteV1cbi8vISBhdXRob3IgOiBTcXVhciB0ZWFtLCBteXNxdWFyLmNvbVxuLy8hIGF1dGhvciA6IERhdmlkIFJvc3NlbGxhdCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9naG9sYWRyXG4vLyEgYXV0aG9yIDogVGluIEF1bmcgTGluIDogaHR0cHM6Ly9naXRodWIuY29tL3RoYW55YXd6aW5taW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4YGBJyxcbiAgICAgICAgICAgIDI6ICfhgYInLFxuICAgICAgICAgICAgMzogJ+GBgycsXG4gICAgICAgICAgICA0OiAn4YGEJyxcbiAgICAgICAgICAgIDU6ICfhgYUnLFxuICAgICAgICAgICAgNjogJ+GBhicsXG4gICAgICAgICAgICA3OiAn4YGHJyxcbiAgICAgICAgICAgIDg6ICfhgYgnLFxuICAgICAgICAgICAgOTogJ+GBiScsXG4gICAgICAgICAgICAwOiAn4YGAJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+GBgSc6ICcxJyxcbiAgICAgICAgICAgICfhgYInOiAnMicsXG4gICAgICAgICAgICAn4YGDJzogJzMnLFxuICAgICAgICAgICAgJ+GBhCc6ICc0JyxcbiAgICAgICAgICAgICfhgYUnOiAnNScsXG4gICAgICAgICAgICAn4YGGJzogJzYnLFxuICAgICAgICAgICAgJ+GBhyc6ICc3JyxcbiAgICAgICAgICAgICfhgYgnOiAnOCcsXG4gICAgICAgICAgICAn4YGJJzogJzknLFxuICAgICAgICAgICAgJ+GBgCc6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBteSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ215Jywge1xuICAgICAgICBtb250aHM6ICfhgIfhgJThgLrhgJThgJ3hgKvhgJvhgK5f4YCW4YCx4YCW4YCx4YCs4YC64YCd4YCr4YCb4YCuX+GAmeGAkOGAul/hgKfhgJXhgLzhgK5f4YCZ4YCxX+GAh+GAveGAlOGAul/hgIfhgLDhgJzhgK3hgK/hgIThgLpf4YCe4YC84YCC4YCv4YCQ4YC6X+GAheGAgOGAuuGAkOGAhOGAuuGAmOGArF/hgKHhgLHhgKzhgIDhgLrhgJDhgK3hgK/hgJjhgKxf4YCU4YCt4YCv4YCd4YCE4YC64YCY4YCsX+GAkuGAruGAh+GAhOGAuuGAmOGArCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfhgIfhgJThgLpf4YCW4YCxX+GAmeGAkOGAul/hgJXhgLzhgK5f4YCZ4YCxX+GAh+GAveGAlOGAul/hgJzhgK3hgK/hgIThgLpf4YCe4YC8X+GAheGAgOGAul/hgKHhgLHhgKzhgIDhgLpf4YCU4YCt4YCvX+GAkuGAricuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfhgJDhgJThgIThgLrhgLnhgILhgJThgL3hgLFf4YCQ4YCU4YCE4YC64YC54YCc4YCsX+GAoeGAhOGAuuGAueGAguGAq1/hgJfhgK/hgJLhgLnhgJPhgJ/hgLDhgLhf4YCA4YC84YCs4YCe4YCV4YCQ4YCx4YC4X+GAnuGAseGArOGAgOGAvOGArF/hgIXhgJThgLEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhgJThgL3hgLFf4YCc4YCsX+GAguGAq1/hgJ/hgLDhgLhf4YCA4YC84YCsX+GAnuGAseGArF/hgJThgLEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxJy5zcGxpdCgnXycpLFxuXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vhgJrhgJThgLEuXSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+GAmeGAlOGAgOGAuuGAluGAvOGAlOGAul0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4YCZ4YCU4YCxLuGAgF0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4YCV4YC84YCu4YC44YCB4YCy4YC34YCe4YCx4YCsXSBkZGRkIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn4YCc4YCs4YCZ4YCK4YC64YC3ICVzIOGAmeGAvuGArCcsXG4gICAgICAgICAgICBwYXN0OiAn4YCc4YC94YCU4YC64YCB4YCy4YC34YCe4YCx4YCsICVzIOGAgCcsXG4gICAgICAgICAgICBzOiAn4YCF4YCA4YC54YCA4YCU4YC6LuGAoeGAlOGAiuGAuuGAuOGAhOGAmuGAuicsXG4gICAgICAgICAgICBzczogJyVkIOGAheGAgOGAueGAgOGAlOGAt+GAuicsXG4gICAgICAgICAgICBtOiAn4YCQ4YCF4YC64YCZ4YCt4YCU4YCF4YC6JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4YCZ4YCt4YCU4YCF4YC6JyxcbiAgICAgICAgICAgIGg6ICfhgJDhgIXhgLrhgJThgKzhgJvhgK4nLFxuICAgICAgICAgICAgaGg6ICclZCDhgJThgKzhgJvhgK4nLFxuICAgICAgICAgICAgZDogJ+GAkOGAheGAuuGAm+GAgOGAuicsXG4gICAgICAgICAgICBkZDogJyVkIOGAm+GAgOGAuicsXG4gICAgICAgICAgICBNOiAn4YCQ4YCF4YC64YCcJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4YCcJyxcbiAgICAgICAgICAgIHk6ICfhgJDhgIXhgLrhgJThgL7hgIXhgLonLFxuICAgICAgICAgICAgeXk6ICclZCDhgJThgL7hgIXhgLonLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4YGB4YGC4YGD4YGE4YGF4YGG4YGH4YGI4YGJ4YGAXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTm9yd2VnaWFuIEJva23DpWwgW25iXVxuLy8hIGF1dGhvcnMgOiBFc3BlbiBIb3ZsYW5kc2RhbCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZXh4YXJzXG4vLyEgICAgICAgICAgIFNpZ3VyZCBHYXJ0bWFubiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaWd1cmRnYVxuLy8hICAgICAgICAgICBTdGVwaGVuIFJhbXRodW4gOiBodHRwczovL2dpdGh1Yi5jb20vc3RlcGhlbnJhbXRodW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBuYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25iJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbWFyc19hcHIuX21haV9qdW5pX2p1bGlfYXVnLl9zZXAuX29rdC5fbm92Ll9kZXMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ3PDuG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDuHJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzw7guX21hLl90aS5fb24uX3RvLl9mci5fbMO4Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaSBtb3JnZW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpIGfDpXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tmb3JyaWdlXSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHNpZGVuJyxcbiAgICAgICAgICAgIHM6ICdub2VuIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbTogJ2V0dCBtaW51dHQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHRlcicsXG4gICAgICAgICAgICBoOiAnw6luIHRpbWUnLFxuICAgICAgICAgICAgaGg6ICclZCB0aW1lcicsXG4gICAgICAgICAgICBkOiAnw6luIGRhZycsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2VyJyxcbiAgICAgICAgICAgIHc6ICfDqW4gdWtlJyxcbiAgICAgICAgICAgIHd3OiAnJWQgdWtlcicsXG4gICAgICAgICAgICBNOiAnw6luIG3DpW5lZCcsXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5lZGVyJyxcbiAgICAgICAgICAgIHk6ICdldHQgw6VyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw6VyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBuYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOZXBhbGVzZSBbbmVdXG4vLyEgYXV0aG9yIDogc3V2YXNoIDogaHR0cHM6Ly9naXRodWIuY29tL3N1dmFzaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgpacnLFxuICAgICAgICAgICAgMjogJ+ClqCcsXG4gICAgICAgICAgICAzOiAn4KWpJyxcbiAgICAgICAgICAgIDQ6ICfgpaonLFxuICAgICAgICAgICAgNTogJ+ClqycsXG4gICAgICAgICAgICA2OiAn4KWsJyxcbiAgICAgICAgICAgIDc6ICfgpa0nLFxuICAgICAgICAgICAgODogJ+ClricsXG4gICAgICAgICAgICA5OiAn4KWvJyxcbiAgICAgICAgICAgIDA6ICfgpaYnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KWnJzogJzEnLFxuICAgICAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICAgICAn4KWqJzogJzQnLFxuICAgICAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICAgICAn4KWtJzogJzcnLFxuICAgICAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICAgICAn4KWmJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIG5lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmUnLCB7XG4gICAgICAgIG1vbnRoczogJ+CknOCkqOCkteCksOClgF/gpKvgpYfgpKzgpY3gpLDgpYHgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCkv+Cksl/gpK7gpIhf4KSc4KWB4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLfgpY3gpJ9f4KS44KWH4KSq4KWN4KSf4KWH4KSu4KWN4KSs4KSwX+CkheCkleCljeCkn+Cli+CkrOCksF/gpKjgpYvgpK3gpYfgpK7gpY3gpKzgpLBf4KSh4KS/4KS44KWH4KSu4KWN4KSs4KSwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgpJzgpKguX+Ckq+Clh+CkrOCljeCksOClgS5f4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCkvy5f4KSu4KSIX+CknOClgeCkqF/gpJzgpYHgpLLgpL7gpIguX+CkheCkly5f4KS44KWH4KSq4KWN4KSfLl/gpIXgpJXgpY3gpJ/gpYsuX+CkqOCli+CkreClhy5f4KSh4KS/4KS44KWHLicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+CkhuCkh+CkpOCkrOCkvuCksF/gpLjgpYvgpK7gpKzgpL7gpLBf4KSu4KSZ4KWN4KSX4KSy4KSs4KS+4KSwX+CkrOClgeCkp+CkrOCkvuCksF/gpKzgpL/gpLngpL/gpKzgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KSs4KS+4KSwX+CktuCkqOCkv+CkrOCkvuCksCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CkhuCkh+CkpC5f4KS44KWL4KSuLl/gpK7gpJngpY3gpJfgpLIuX+CkrOClgeCkpy5f4KSs4KS/4KS54KS/Ll/gpLbgpYHgpJXgpY3gpLAuX+CktuCkqOCkvy4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KSGLl/gpLjgpYsuX+CkruCkgi5f4KSs4KWBLl/gpKzgpL8uX+CktuClgS5f4KS2Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExUUzogJ0HgpJXgpYsgaDptbTpzcyDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEHgpJXgpYsgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4KSw4KS+4KSk4KS/fOCkrOCkv+CkueCkvuCkqHzgpKbgpL/gpIngpIHgpLjgpYt84KS44KS+4KSB4KSdLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSw4KS+4KSk4KS/Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSs4KS/4KS54KS+4KSoJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCkv+CkieCkgeCkuOCliycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KS+4KSB4KSdJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCkvyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSs4KS/4KS54KS+4KSoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKbgpL/gpIngpIHgpLjgpYsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkvuCkgeCknSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KSG4KScXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CkreCli+CksuCkv10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb4KSG4KSJ4KSB4KSm4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KS54KS/4KSc4KWLXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgpJfgpI/gpJXgpYtdIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+CkruCkvicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4KSF4KSX4KS+4KSh4KS/JyxcbiAgICAgICAgICAgIHM6ICfgpJXgpYfgpLngpYAg4KSV4KWN4KS34KSjJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4KS44KWH4KSV4KWH4KSj4KWN4KShJyxcbiAgICAgICAgICAgIG06ICfgpI/gpJUg4KSu4KS/4KSo4KWH4KSfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4KSu4KS/4KSo4KWH4KSfJyxcbiAgICAgICAgICAgIGg6ICfgpI/gpJUg4KSY4KSj4KWN4KSf4KS+JyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KSY4KSj4KWN4KSf4KS+JyxcbiAgICAgICAgICAgIGQ6ICfgpI/gpJUg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIE06ICfgpI/gpJUg4KSu4KS54KS/4KSo4KS+JyxcbiAgICAgICAgICAgIE1NOiAnJWQg4KSu4KS54KS/4KSo4KS+JyxcbiAgICAgICAgICAgIHk6ICfgpI/gpJUg4KSs4KSw4KWN4KS3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4KSs4KSw4KWN4KS3JyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5lO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IER1dGNoIFtubF1cbi8vISBhdXRob3IgOiBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pvcmlzcm9saW5nXG4vLyEgYXV0aG9yIDogSmFjb2IgTWlkZGFnIDogaHR0cHM6Ly9naXRodWIuY29tL21pZGRhZ2pcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID1cbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21laV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydFdpdGhvdXREb3RzID1cbiAgICAgICAgICAgICdqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmphbi9pLFxuICAgICAgICAgICAgL15mZWIvaSxcbiAgICAgICAgICAgIC9eKG1hYXJ0fG1ydFxcLj8pJC9pLFxuICAgICAgICAgICAgL15hcHIvaSxcbiAgICAgICAgICAgIC9ebWVpJC9pLFxuICAgICAgICAgICAgL15qdW5baS5dPyQvaSxcbiAgICAgICAgICAgIC9eanVsW2kuXT8kL2ksXG4gICAgICAgICAgICAvXmF1Zy9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2t0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kZWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO1xuXG4gICAgdmFyIG5sID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmwnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhvdXREb3RzW20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzW20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14oamFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xtZWl8anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcblxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICd6b25kYWdfbWFhbmRhZ19kaW5zZGFnX3dvZW5zZGFnX2RvbmRlcmRhZ192cmlqZGFnX3phdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnem8uX21hLl9kaS5fd28uX2RvLl92ci5femEuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3pvX21hX2RpX3dvX2RvX3ZyX3phJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t2YW5kYWFnIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnaXN0ZXJlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbYWZnZWxvcGVuXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvdmVyICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBnZWxlZGVuJyxcbiAgICAgICAgICAgIHM6ICdlZW4gcGFhciBzZWNvbmRlbicsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZGVuJyxcbiAgICAgICAgICAgIG06ICfDqcOpbiBtaW51dXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVuJyxcbiAgICAgICAgICAgIGg6ICfDqcOpbiB1dXInLFxuICAgICAgICAgICAgaGg6ICclZCB1dXInLFxuICAgICAgICAgICAgZDogJ8Opw6luIGRhZycsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2VuJyxcbiAgICAgICAgICAgIHc6ICfDqcOpbiB3ZWVrJyxcbiAgICAgICAgICAgIHd3OiAnJWQgd2VrZW4nLFxuICAgICAgICAgICAgTTogJ8Opw6luIG1hYW5kJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWFhbmRlbicsXG4gICAgICAgICAgICB5OiAnw6nDqW4gamFhcicsXG4gICAgICAgICAgICB5eTogJyVkIGphYXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgbnVtYmVyICtcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjAgPyAnc3RlJyA6ICdkZScpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRHV0Y2ggKEJlbGdpdW0pIFtubC1iZV1cbi8vISBhdXRob3IgOiBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pvcmlzcm9saW5nXG4vLyEgYXV0aG9yIDogSmFjb2IgTWlkZGFnIDogaHR0cHM6Ly9naXRodWIuY29tL21pZGRhZ2pcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID1cbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21laV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydFdpdGhvdXREb3RzID1cbiAgICAgICAgICAgICdqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmphbi9pLFxuICAgICAgICAgICAgL15mZWIvaSxcbiAgICAgICAgICAgIC9eKG1hYXJ0fG1ydFxcLj8pJC9pLFxuICAgICAgICAgICAgL15hcHIvaSxcbiAgICAgICAgICAgIC9ebWVpJC9pLFxuICAgICAgICAgICAgL15qdW5baS5dPyQvaSxcbiAgICAgICAgICAgIC9eanVsW2kuXT8kL2ksXG4gICAgICAgICAgICAvXmF1Zy9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2t0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kZWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPVxuICAgICAgICAgICAgL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO1xuXG4gICAgdmFyIG5sQmUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubC1iZScsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyaV9mZWJydWFyaV9tYWFydF9hcHJpbF9tZWlfanVuaV9qdWxpX2F1Z3VzdHVzX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDpcbiAgICAgICAgICAgIC9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8YXByaWx8bWVpfGp1W25sXWl8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6XG4gICAgICAgICAgICAvXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxcblxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ3pvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICd6by5fbWEuX2RpLl93by5fZG8uX3ZyLl96YS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnem9fbWFfZGlfd29fZG9fdnJfemEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW3ZhbmRhYWcgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dpc3RlcmVuIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1thZmdlbG9wZW5dIGRkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ292ZXIgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGdlbGVkZW4nLFxuICAgICAgICAgICAgczogJ2VlbiBwYWFyIHNlY29uZGVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kZW4nLFxuICAgICAgICAgICAgbTogJ8Opw6luIG1pbnV1dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogJ8Opw6luIHV1cicsXG4gICAgICAgICAgICBoaDogJyVkIHV1cicsXG4gICAgICAgICAgICBkOiAnw6nDqW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgTTogJ8Opw6luIG1hYW5kJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWFhbmRlbicsXG4gICAgICAgICAgICB5OiAnw6nDqW4gamFhcicsXG4gICAgICAgICAgICB5eTogJyVkIGphYXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgbnVtYmVyICtcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjAgPyAnc3RlJyA6ICdkZScpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmxCZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOeW5vcnNrIFtubl1cbi8vISBhdXRob3JzIDogaHR0cHM6Ly9naXRodWIuY29tL21lY2h1d2luZFxuLy8hICAgICAgICAgICBTdGVwaGVuIFJhbXRodW4gOiBodHRwczovL2dpdGh1Yi5jb20vc3RlcGhlbnJhbXRodW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBubiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25uJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYW4uX2ZlYi5fbWFyc19hcHIuX21haV9qdW5pX2p1bGlfYXVnLl9zZXAuX29rdC5fbm92Ll9kZXMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ3N1bmRhZ19tw6VuZGFnX3R5c2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbGF1cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3N1Ll9tw6UuX3R5Ll9vbi5fdG8uX2ZyLl9sYXUuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3N1X23DpV90eV9vbl90b19mcl9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgW2tsLl0gSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJIGRhZyBrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbSSBtb3Jnb24ga2xva2thXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsb2trYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJIGfDpXIga2xva2thXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tGw7hyZWfDpWFuZGVdIGRkZGQgW2tsb2trYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgc2lkYW4nLFxuICAgICAgICAgICAgczogJ25va3JlIHNla3VuZCcsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZCcsXG4gICAgICAgICAgICBtOiAnZWl0IG1pbnV0dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0dCcsXG4gICAgICAgICAgICBoOiAnZWluIHRpbWUnLFxuICAgICAgICAgICAgaGg6ICclZCB0aW1hcicsXG4gICAgICAgICAgICBkOiAnZWluIGRhZycsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIHc6ICdlaSB2ZWtlJyxcbiAgICAgICAgICAgIHd3OiAnJWQgdmVrZXInLFxuICAgICAgICAgICAgTTogJ2VpbiBtw6VuYWQnLFxuICAgICAgICAgICAgTU06ICclZCBtw6VuYWRlcicsXG4gICAgICAgICAgICB5OiAnZWl0IMOlcicsXG4gICAgICAgICAgICB5eTogJyVkIMOlcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogT2NjaXRhbiwgbGVuZ2Fkb2NpYW4gZGlhbGVjdGUgW29jLWxuY11cbi8vISBhdXRob3IgOiBRdWVudGluIFBBR8OIUyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9RdWVudHkzMVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG9jTG5jID0gbW9tZW50LmRlZmluZUxvY2FsZSgnb2MtbG5jJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6XG4gICAgICAgICAgICAgICAgJ2dlbmnDqHJfZmVicmnDqHJfbWFyw6dfYWJyaWxfbWFpX2p1bmhfanVsaGV0X2Fnb3N0X3NldGVtYnJlX29jdMOyYnJlX25vdmVtYnJlX2RlY2VtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZvcm1hdDogXCJkZSBnZW5pw6hyX2RlIGZlYnJpw6hyX2RlIG1hcsOnX2QnYWJyaWxfZGUgbWFpX2RlIGp1bmhfZGUganVsaGV0X2QnYWdvc3RfZGUgc2V0ZW1icmVfZCdvY3TDsmJyZV9kZSBub3ZlbWJyZV9kZSBkZWNlbWJyZVwiLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvRFtvRF0/KFxccykrTU1NTS8sXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2dlbi5fZmVici5fbWFyw6dfYWJyLl9tYWlfanVuaF9qdWxoLl9hZ28uX3NldC5fb2N0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdkaW1lbmdlX2RpbHVuc19kaW1hcnNfZGltw6hjcmVzX2RpasOydXNfZGl2ZW5kcmVzX2Rpc3NhYnRlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZGcuX2RsLl9kbS5fZGMuX2RqLl9kdi5fZHMuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RnX2RsX2RtX2RjX2RqX2R2X2RzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgbGw6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBbZGVdIFlZWVkgW2FdIEg6bW0nLFxuICAgICAgICAgICAgbGxsOiAnRCBNTU0gWVlZWSwgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gW2RlXSBZWVlZIFthXSBIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQgRCBNTU0gWVlZWSwgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW3XDqGkgYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tkZW1hbiBhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbacOociBhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3Bhc3NhdCBhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogXCJkJ2FxdcOtICVzXCIsXG4gICAgICAgICAgICBwYXN0OiAnZmEgJXMnLFxuICAgICAgICAgICAgczogJ3VuYXMgc2Vnb25kYXMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWdvbmRhcycsXG4gICAgICAgICAgICBtOiAndW5hIG1pbnV0YScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0YXMnLFxuICAgICAgICAgICAgaDogJ3VuYSBvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1biBqb3JuJyxcbiAgICAgICAgICAgIGRkOiAnJWQgam9ybnMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhbicsXG4gICAgICAgICAgICB5eTogJyVkIGFucycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShyfG58dHzDqHxhKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgbnVtYmVyID09PSAxXG4gICAgICAgICAgICAgICAgICAgID8gJ3InXG4gICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgPyAnbidcbiAgICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncidcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSA0XG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogJ8OoJztcbiAgICAgICAgICAgIGlmIChwZXJpb2QgPT09ICd3JyB8fCBwZXJpb2QgPT09ICdXJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2NMbmM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUHVuamFiaSAoSW5kaWEpIFtwYS1pbl1cbi8vISBhdXRob3IgOiBIYXJwcmVldCBTaW5naCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oYXJwcmVldGtoYWxzYWd0Yml0XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+CppycsXG4gICAgICAgICAgICAyOiAn4KmoJyxcbiAgICAgICAgICAgIDM6ICfgqaknLFxuICAgICAgICAgICAgNDogJ+CpqicsXG4gICAgICAgICAgICA1OiAn4KmrJyxcbiAgICAgICAgICAgIDY6ICfgqawnLFxuICAgICAgICAgICAgNzogJ+CprScsXG4gICAgICAgICAgICA4OiAn4KmuJyxcbiAgICAgICAgICAgIDk6ICfgqa8nLFxuICAgICAgICAgICAgMDogJ+CppicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgqacnOiAnMScsXG4gICAgICAgICAgICAn4KmoJzogJzInLFxuICAgICAgICAgICAgJ+CpqSc6ICczJyxcbiAgICAgICAgICAgICfgqaonOiAnNCcsXG4gICAgICAgICAgICAn4KmrJzogJzUnLFxuICAgICAgICAgICAgJ+CprCc6ICc2JyxcbiAgICAgICAgICAgICfgqa0nOiAnNycsXG4gICAgICAgICAgICAn4KmuJzogJzgnLFxuICAgICAgICAgICAgJ+Cpryc6ICc5JyxcbiAgICAgICAgICAgICfgqaYnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgcGFJbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3BhLWluJywge1xuICAgICAgICAvLyBUaGVyZSBhcmUgbW9udGhzIG5hbWUgYXMgcGVyIE5hbmFrc2hhaGkgQ2FsZW5kYXIgYnV0IHRoZXkgYXJlIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgICAgIG1vbnRoczogJ+ConOCoqOCoteCosOCpgF/gqKvgqLzgqLDgqLXgqLDgqYBf4Kiu4Ki+4Kiw4KiaX+CoheCoquCpjeCosOCpiOCosl/gqK7gqIhf4Kic4KmC4KioX+ConOCpgeCosuCovuCoiF/gqIXgqJfgqLjgqKRf4Ki44Kik4Kmw4Kis4KiwX+CoheColeCopOCpguCorOCosF/gqKjgqLXgqbDgqKzgqLBf4Kim4Ki44Kmw4Kis4KiwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+CokOCopOCoteCovuCosF/gqLjgqYvgqK7gqLXgqL7gqLBf4Kiu4Kmw4KiX4Kiy4Ki14Ki+4KiwX+CorOCpgeCop+CoteCovuCosF/gqLXgqYDgqLDgqLXgqL7gqLBf4Ki44Ki84KmB4Kmx4KiV4Kiw4Ki14Ki+4KiwX+CouOCovOCoqOCpgOComuCosOCoteCovuCosCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CokOCopF/gqLjgqYvgqK5f4Kiu4Kmw4KiX4KiyX+CorOCpgeCop1/gqLXgqYDgqLBf4Ki44Ki84KmB4KiV4KiwX+CouOCovOCoqOCpgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgqLXgqJzgqYcnLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCoteConOCphycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCphycsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CoheConF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgqJXgqLJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+CoheCol+CosuCovl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgqJXgqLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CoquCov+Com+CosuCph10gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgqLXgqL/gqbHgqJonLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCoquCov+Com+CosuCphycsXG4gICAgICAgICAgICBzOiAn4KiV4KmB4KidIOCouOColeCov+CpsOConycsXG4gICAgICAgICAgICBzczogJyVkIOCouOColeCov+CpsOConycsXG4gICAgICAgICAgICBtOiAn4KiH4KiVIOCoruCov+CpsOConycsXG4gICAgICAgICAgICBtbTogJyVkIOCoruCov+CpsOConycsXG4gICAgICAgICAgICBoOiAn4KiH4Kmx4KiVIOComOCpsOCon+CovicsXG4gICAgICAgICAgICBoaDogJyVkIOComOCpsOCon+CphycsXG4gICAgICAgICAgICBkOiAn4KiH4Kmx4KiVIOCopuCov+CoqCcsXG4gICAgICAgICAgICBkZDogJyVkIOCopuCov+CoqCcsXG4gICAgICAgICAgICBNOiAn4KiH4Kmx4KiVIOCoruCoueCpgOCoqOCovicsXG4gICAgICAgICAgICBNTTogJyVkIOCoruCoueCpgOCoqOCphycsXG4gICAgICAgICAgICB5OiAn4KiH4Kmx4KiVIOCouOCovuCosicsXG4gICAgICAgICAgICB5eTogJyVkIOCouOCovuCosicsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgqafgqajgqangqargqavgqazgqa3gqa7gqa/gqaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFB1bmphYmkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gUHVuamFiaS5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CosOCovuCopHzgqLjgqLXgqYfgqLB84Kim4KmB4Kiq4Ki54Ki/4KiwfOCouOCovOCovuCori8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CosOCovuCopCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CouOCoteCph+CosCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqKbgqYHgqKrgqLngqL/gqLAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CouOCovOCovuCoricpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLDgqL7gqKQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CouOCoteCph+CosCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kim4KmB4Kiq4Ki54Ki/4KiwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLjgqLzgqL7gqK4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CosOCovuCopCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBwYUluO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBvbGlzaCBbcGxdXG4vLyEgYXV0aG9yIDogUmFmYWwgSGlyc3ogOiBodHRwczovL2dpdGh1Yi5jb20vZXZvTFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc05vbWluYXRpdmUgPVxuICAgICAgICAgICAgJ3N0eWN6ZcWEX2x1dHlfbWFyemVjX2t3aWVjaWXFhF9tYWpfY3plcndpZWNfbGlwaWVjX3NpZXJwaWXFhF93cnplc2llxYRfcGHFumR6aWVybmlrX2xpc3RvcGFkX2dydWR6aWXFhCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNTdWJqZWN0aXZlID1cbiAgICAgICAgICAgICdzdHljem5pYV9sdXRlZ29fbWFyY2Ffa3dpZXRuaWFfbWFqYV9jemVyd2NhX2xpcGNhX3NpZXJwbmlhX3dyemXFm25pYV9wYcW6ZHppZXJuaWthX2xpc3RvcGFkYV9ncnVkbmlhJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15zdHkvaSxcbiAgICAgICAgICAgIC9ebHV0L2ksXG4gICAgICAgICAgICAvXm1hci9pLFxuICAgICAgICAgICAgL15rd2kvaSxcbiAgICAgICAgICAgIC9ebWFqL2ksXG4gICAgICAgICAgICAvXmN6ZS9pLFxuICAgICAgICAgICAgL15saXAvaSxcbiAgICAgICAgICAgIC9ec2llL2ksXG4gICAgICAgICAgICAvXndyei9pLFxuICAgICAgICAgICAgL15wYcW6L2ksXG4gICAgICAgICAgICAvXmxpcy9pLFxuICAgICAgICAgICAgL15ncnUvaSxcbiAgICAgICAgXTtcbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICByZXR1cm4gbiAlIDEwIDwgNSAmJiBuICUgMTAgPiAxICYmIH5+KG4gLyAxMCkgJSAxMCAhPT0gMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdzZWt1bmR5JyA6ICdzZWt1bmQnKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbnV0YScgOiAnbWludXTEmSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW51dHknIDogJ21pbnV0Jyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdnb2R6aW5hJyA6ICdnb2R6aW7EmSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdnb2R6aW55JyA6ICdnb2R6aW4nKTtcbiAgICAgICAgICAgIGNhc2UgJ3d3JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3R5Z29kbmllJyA6ICd0eWdvZG5pJyk7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaWVzacSFY2UnIDogJ21pZXNpxJljeScpO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbGF0YScgOiAnbGF0Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwbCcsIHtcbiAgICAgICAgbW9udGhzOiBmdW5jdGlvbiAobW9tZW50VG9Gb3JtYXQsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRUb0Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNOb21pbmF0aXZlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvRCBNTU1NLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU3ViamVjdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc05vbWluYXRpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnc3R5X2x1dF9tYXJfa3dpX21hal9jemVfbGlwX3NpZV93cnpfcGHFul9saXNfZ3J1Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICduaWVkemllbGFfcG9uaWVkemlhxYJla193dG9yZWtfxZtyb2RhX2N6d2FydGVrX3BpxIV0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmR6X3Bvbl93dF/Fm3JfY3p3X3B0X3NvYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdOZF9Qbl9XdF/FmnJfQ3pfUHRfU28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbRHppxZsgb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tKdXRybyBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIG5pZWR6aWVsxJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1dlIHd0b3JlayBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyDFm3JvZMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHNvYm90xJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXXSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbV2N6b3JhaiBvXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIG5pZWR6aWVsxJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIMWbcm9kxJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIHNvYm90xJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYJ5XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHRlbXUnLFxuICAgICAgICAgICAgczogJ2tpbGthIHNla3VuZCcsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiAnMSBkemllxYQnLFxuICAgICAgICAgICAgZGQ6ICclZCBkbmknLFxuICAgICAgICAgICAgdzogJ3R5ZHppZcWEJyxcbiAgICAgICAgICAgIHd3OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiAnbWllc2nEhWMnLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICdyb2snLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBwbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQb3J0dWd1ZXNlIFtwdF1cbi8vISBhdXRob3IgOiBKZWZmZXJzb24gOiBodHRwczovL2dpdGh1Yi5jb20vamFsZXg3OVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHB0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgncHQnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbmVpcm9fZmV2ZXJlaXJvX21hcsOnb19hYnJpbF9tYWlvX2p1bmhvX2p1bGhvX2Fnb3N0b19zZXRlbWJyb19vdXR1YnJvX25vdmVtYnJvX2RlemVtYnJvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZXZfbWFyX2Ficl9tYWlfanVuX2p1bF9hZ29fc2V0X291dF9ub3ZfZGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnRG9tX1NlZ19UZXJfUXVhX1F1aV9TZXhfU8OhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdEb18ywqpfM8KqXzTCql81wqpfNsKqX1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hvamUgw6BzXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0FtYW5ow6Mgw6BzXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8Ogc10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tPbnRlbSDDoHNdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNlxuICAgICAgICAgICAgICAgICAgICA/ICdbw5psdGltb10gZGRkZCBbw6BzXSBMVCcgLy8gU2F0dXJkYXkgKyBTdW5kYXlcbiAgICAgICAgICAgICAgICAgICAgOiAnW8OabHRpbWFdIGRkZGQgW8Ogc10gTFQnOyAvLyBNb25kYXkgLSBGcmlkYXlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VtICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdow6EgJXMnLFxuICAgICAgICAgICAgczogJ3NlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VtIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VtYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VtIGRpYScsXG4gICAgICAgICAgICBkZDogJyVkIGRpYXMnLFxuICAgICAgICAgICAgdzogJ3VtYSBzZW1hbmEnLFxuICAgICAgICAgICAgd3c6ICclZCBzZW1hbmFzJyxcbiAgICAgICAgICAgIE06ICd1bSBtw6pzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VtIGFubycsXG4gICAgICAgICAgICB5eTogJyVkIGFub3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHB0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBvcnR1Z3Vlc2UgKEJyYXppbCkgW3B0LWJyXVxuLy8hIGF1dGhvciA6IENhaW8gUmliZWlybyBQZXJlaXJhIDogaHR0cHM6Ly9naXRodWIuY29tL2NhaW8tcmliZWlyby1wZXJlaXJhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgcHRCciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0LWJyJywge1xuICAgICAgICBtb250aHM6ICdqYW5laXJvX2ZldmVyZWlyb19tYXLDp29fYWJyaWxfbWFpb19qdW5ob19qdWxob19hZ29zdG9fc2V0ZW1icm9fb3V0dWJyb19ub3ZlbWJyb19kZXplbWJybycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmV2X21hcl9hYnJfbWFpX2p1bl9qdWxfYWdvX3NldF9vdXRfbm92X2Rleicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6XG4gICAgICAgICAgICAnZG9taW5nb19zZWd1bmRhLWZlaXJhX3RlcsOnYS1mZWlyYV9xdWFydGEtZmVpcmFfcXVpbnRhLWZlaXJhX3NleHRhLWZlaXJhX3PDoWJhZG8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbV9zZWdfdGVyX3F1YV9xdWlfc2V4X3PDoWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fMsKqXzPCql80wqpfNcKqXzbCql9zw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgW8Ogc10gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIb2plIMOgc10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBbWFuaMOjIMOgc10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoHNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbT250ZW0gw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpID09PSAwIHx8IHRoaXMuZGF5KCkgPT09IDZcbiAgICAgICAgICAgICAgICAgICAgPyAnW8OabHRpbW9dIGRkZGQgW8Ogc10gTFQnIC8vIFNhdHVyZGF5ICsgU3VuZGF5XG4gICAgICAgICAgICAgICAgICAgIDogJ1vDmmx0aW1hXSBkZGRkIFvDoHNdIExUJzsgLy8gTW9uZGF5IC0gRnJpZGF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdlbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaMOhICVzJyxcbiAgICAgICAgICAgIHM6ICdwb3Vjb3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW0gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW1hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW0gZGlhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGlhcycsXG4gICAgICAgICAgICBNOiAndW0gbcOqcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1bSBhbm8nLFxuICAgICAgICAgICAgeXk6ICclZCBhbm9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIGludmFsaWREYXRlOiAnRGF0YSBpbnbDoWxpZGEnLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHB0QnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUm9tYW5pYW4gW3JvXVxuLy8hIGF1dGhvciA6IFZsYWQgR3VyZGlnYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ndXJkaWdhXG4vLyEgYXV0aG9yIDogVmFsZW50aW4gQWdhY2hpIDogaHR0cHM6Ly9naXRodWIuY29tL2F2YWx5XG4vLyEgYXV0aG9yIDogRW1hbnVlbCBDZXBvaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jZXBlbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgICAgIHNzOiAnc2VjdW5kZScsXG4gICAgICAgICAgICAgICAgbW06ICdtaW51dGUnLFxuICAgICAgICAgICAgICAgIGhoOiAnb3JlJyxcbiAgICAgICAgICAgICAgICBkZDogJ3ppbGUnLFxuICAgICAgICAgICAgICAgIHd3OiAnc8SDcHTEg23Dom5pJyxcbiAgICAgICAgICAgICAgICBNTTogJ2x1bmknLFxuICAgICAgICAgICAgICAgIHl5OiAnYW5pJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXBhcmF0b3IgPSAnICc7XG4gICAgICAgIGlmIChudW1iZXIgJSAxMDAgPj0gMjAgfHwgKG51bWJlciA+PSAxMDAgJiYgbnVtYmVyICUgMTAwID09PSAwKSkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gJyBkZSAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBzZXBhcmF0b3IgKyBmb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgcm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdybycsIHtcbiAgICAgICAgbW9udGhzOiAnaWFudWFyaWVfZmVicnVhcmllX21hcnRpZV9hcHJpbGllX21haV9pdW5pZV9pdWxpZV9hdWd1c3Rfc2VwdGVtYnJpZV9vY3RvbWJyaWVfbm9pZW1icmllX2RlY2VtYnJpZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnaWFuLl9mZWIuX21hcnQuX2Fwci5fbWFpX2l1bi5faXVsLl9hdWcuX3NlcHQuX29jdC5fbm92Ll9kZWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZHVtaW5pY8SDX2x1bmlfbWFyyJtpX21pZXJjdXJpX2pvaV92aW5lcmlfc8OibWLEg3TEgycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0R1bV9MdW5fTWFyX01pZV9Kb2lfVmluX1PDom0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnRHVfTHVfTWFfTWlfSm9fVmlfU8OiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYXppIGxhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW23DomluZSBsYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtsYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpZXJpIGxhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tmb3N0YV0gZGRkZCBbbGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAncGVzdGUgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMOubiB1cm3EgycsXG4gICAgICAgICAgICBzOiAnY8OidGV2YSBzZWN1bmRlJyxcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaDogJ28gb3LEgycsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQ6ICdvIHppJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgdzogJ28gc8SDcHTEg23Dom7EgycsXG4gICAgICAgICAgICB3dzogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06ICdvIGx1bsSDJyxcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUnVzc2lhbiBbcnVdXG4vLyEgYXV0aG9yIDogVmlrdG9ybWluYXRvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9WaWt0b3JtaW5hdG9yXG4vLyEgYXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiDQmtC+0YDQtdC90LHQtdGA0LMg0JzQsNGA0LogOiBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0cGFpclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgICAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExXG4gICAgICAgICAgICA/IGZvcm1zWzBdXG4gICAgICAgICAgICA6IG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKVxuICAgICAgICAgICAgICA/IGZvcm1zWzFdXG4gICAgICAgICAgICAgIDogZm9ybXNbMl07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHNzOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG1tOiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsF/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicgOiAn0LzQuNC90YPRgtGDX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIGhoOiAn0YfQsNGBX9GH0LDRgdCwX9GH0LDRgdC+0LInLFxuICAgICAgICAgICAgZGQ6ICfQtNC10L3RjF/QtNC90Y9f0LTQvdC10LknLFxuICAgICAgICAgICAgd3c6ICfQvdC10LTQtdC70Y9f0L3QtdC00LXQu9C4X9C90LXQtNC10LvRjCcsXG4gICAgICAgICAgICBNTTogJ9C80LXRgdGP0YZf0LzQtdGB0Y/RhtCwX9C80LXRgdGP0YbQtdCyJyxcbiAgICAgICAgICAgIHl5OiAn0LPQvtC0X9Cz0L7QtNCwX9C70LXRgicsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LzQuNC90YPRgtCwJyA6ICfQvNC40L3Rg9GC0YMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAvXtGP0L3Qsi9pLFxuICAgICAgICAvXtGE0LXQsi9pLFxuICAgICAgICAvXtC80LDRgC9pLFxuICAgICAgICAvXtCw0L/RgC9pLFxuICAgICAgICAvXtC80LBb0LnRj10vaSxcbiAgICAgICAgL17QuNGO0L0vaSxcbiAgICAgICAgL17QuNGO0LsvaSxcbiAgICAgICAgL17QsNCy0LMvaSxcbiAgICAgICAgL17RgdC10L0vaSxcbiAgICAgICAgL17QvtC60YIvaSxcbiAgICAgICAgL17QvdC+0Y8vaSxcbiAgICAgICAgL17QtNC10LovaSxcbiAgICBdO1xuXG4gICAgLy8gaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvcnVsZXMvMTM5LXByb3AgOiDCpyAxMDNcbiAgICAvLyDQodC+0LrRgNCw0YnQtdC90LjRjyDQvNC10YHRj9GG0LXQsjogaHR0cDovL25ldy5ncmFtb3RhLnJ1L3NwcmF2a2EvYnVyby9zZWFyY2gtYW5zd2VyP3M9MjQyNjM3XG4gICAgLy8gQ0xEUiBkYXRhOiAgICAgICAgICBodHRwOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzI4L3N1bW1hcnkvcnUuaHRtbCMxNzUzXG4gICAgdmFyIHJ1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgncnUnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCy0LDRgNGPX9GE0LXQstGA0LDQu9GPX9C80LDRgNGC0LBf0LDQv9GA0LXQu9GPX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LPRg9GB0YLQsF/RgdC10L3RgtGP0LHRgNGPX9C+0LrRgtGP0LHRgNGPX9C90L7Rj9Cx0YDRj1/QtNC10LrQsNCx0YDRjycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0Y/QvdCy0LDRgNGMX9GE0LXQstGA0LDQu9GMX9C80LDRgNGCX9Cw0L/RgNC10LvRjF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGA0Yxf0L7QutGC0Y/QsdGA0Yxf0L3QvtGP0LHRgNGMX9C00LXQutCw0LHRgNGMJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IHtcbiAgICAgICAgICAgIC8vINC/0L4gQ0xEUiDQuNC80LXQvdC90L4gXCLQuNGO0LsuXCIg0LggXCLQuNGO0L0uXCIsINC90L4g0LrQsNC60L7QuSDRgdC80YvRgdC7INC80LXQvdGP0YLRjCDQsdGD0LrQstGDINC90LAg0YLQvtGH0LrRgz9cbiAgICAgICAgICAgIGZvcm1hdDogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgC5f0LDQv9GALl/QvNCw0Y9f0LjRjtC90Y9f0LjRjtC70Y9f0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0Y/QvdCyLl/RhNC10LLRgC5f0LzQsNGA0YJf0LDQv9GALl/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTQsF/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbQsF/RgdGD0LHQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6ICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTRg1/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbRg1/RgdGD0LHQsdC+0YLRgycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9cXFsgP1vQktCyXSA/KD860L/RgNC+0YjQu9GD0Y580YHQu9C10LTRg9GO0YnRg9GOfNGN0YLRgyk/ID9dID9kZGRkLyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcblxuICAgICAgICAvLyDQv9C+0LvQvdGL0LUg0L3QsNC30LLQsNC90LjRjyDRgSDQv9Cw0LTQtdC20LDQvNC4LCDQv9C+INGC0YDQuCDQsdGD0LrQstGLLCDQtNC70Y8g0L3QtdC60L7RgtC+0YDRi9GFLCDQv9C+IDQg0LHRg9C60LLRiywg0YHQvtC60YDQsNGJ0LXQvdC40Y8g0YEg0YLQvtGH0LrQvtC5INC4INCx0LXQtyDRgtC+0YfQutC4XG4gICAgICAgIG1vbnRoc1JlZ2V4OlxuICAgICAgICAgICAgL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAgICAgLy8g0LrQvtC/0LjRjyDQv9GA0LXQtNGL0LTRg9GJ0LXQs9C+XG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6XG4gICAgICAgICAgICAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgICAgICAvLyDQv9C+0LvQvdGL0LUg0L3QsNC30LLQsNC90LjRjyDRgSDQv9Cw0LTQtdC20LDQvNC4XG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14o0Y/QvdCy0LDRgFvRj9GMXXzRhNC10LLRgNCw0Ltb0Y/RjF180LzQsNGA0YLQsD980LDQv9GA0LXQu1vRj9GMXXzQvNCwW9GP0LldfNC40Y7QvVvRj9GMXXzQuNGO0Ltb0Y/RjF180LDQstCz0YPRgdGC0LA/fNGB0LXQvdGC0Y/QsdGAW9GP0YxdfNC+0LrRgtGP0LHRgFvRj9GMXXzQvdC+0Y/QsdGAW9GP0YxdfNC00LXQutCw0LHRgFvRj9GMXSkvaSxcblxuICAgICAgICAvLyDQktGL0YDQsNC20LXQvdC40LUsINC60L7RgtC+0YDQvtC1INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPQtdGCINGC0L7Qu9GM0LrQviDRgdC+0LrRgNCw0YnRkdC90L3Ri9C8INGE0L7RgNC80LDQvFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OlxuICAgICAgICAgICAgL14o0Y/QvdCyXFwufNGE0LXQstGAP1xcLnzQvNCw0YBb0YIuXXzQsNC/0YBcXC580LzQsFvRj9C5XXzQuNGO0L1b0YzRjy5dfNC40Y7Qu1vRjNGPLl180LDQstCzXFwufNGB0LXQvdGCP1xcLnzQvtC60YJcXC580L3QvtGP0LE/XFwufNC00LXQulxcLikvaSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVkg0LMuJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZINCzLiwgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkg0LMuLCBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0KHQtdCz0L7QtNC90Y8sINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9CX0LDQstGC0YDQsCwg0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JLRh9C10YDQsCwg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LXQtV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnQuNC5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidGD0Y5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF5KCkgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgIT09IHRoaXMud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvQvtC1XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YvQuV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GD0Y5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF5KCkgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CS0L5dIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JJdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0YfQtdGA0LXQtyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg0L3QsNC30LDQtCcsXG4gICAgICAgICAgICBzOiAn0L3QtdGB0LrQvtC70YzQutC+INGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzczogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGg6ICfRh9Cw0YEnLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkOiAn0LTQtdC90YwnLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB3OiAn0L3QtdC00LXQu9GPJyxcbiAgICAgICAgICAgIHd3OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTTogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5OiAn0LPQvtC0JyxcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0Lh80YPRgtGA0LB80LTQvdGPfNCy0LXRh9C10YDQsC9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LXRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YPRgtGA0LAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0LXRgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQuXzQs9C+fNGPKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QuSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0L4nO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Rjyc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJ1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNpbmRoaSBbc2RdXG4vLyEgYXV0aG9yIDogTmFyYWluIFNhZ2FyIDogaHR0cHM6Ly9naXRodWIuY29tL25hcmFpbnNhZ2FyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAgICAgJ9is2YbZiNix2YonLFxuICAgICAgICAgICAgJ9mB2YrYqNix2YjYsdmKJyxcbiAgICAgICAgICAgICfZhdin2LHahicsXG4gICAgICAgICAgICAn2KfZvtix2YrZhCcsXG4gICAgICAgICAgICAn2YXYptmKJyxcbiAgICAgICAgICAgICfYrNmI2YYnLFxuICAgICAgICAgICAgJ9is2YjZhNin2KHZkCcsXG4gICAgICAgICAgICAn2KLar9iz2b0nLFxuICAgICAgICAgICAgJ9iz2YrZvtm92YXYqNixJyxcbiAgICAgICAgICAgICfYotqq2b3ZiNio2LEnLFxuICAgICAgICAgICAgJ9mG2YjZhdio2LEnLFxuICAgICAgICAgICAgJ9qK2LPZhdio2LEnLFxuICAgICAgICBdLFxuICAgICAgICBkYXlzID0gWyfYotqG2LEnLCAn2LPZiNmF2LEnLCAn2Kfasdin2LHZiCcsICfYp9ix2KjYuScsICfYrtmF2YrYsycsICfYrNmF2LknLCAn2ofZhtqH2LEnXTtcblxuICAgIHZhciBzZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NkJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6IGRheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkYXlzLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRk2IwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LXYqNitfNi02KfZhS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i12KjYrSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ9i02KfZhSc7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2oRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LPagNin2rvZil0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYp9qz2YrZhiDZh9mB2KrZiiDYqtmKXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9qq2KfZhNmH2YddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9qv2LLYsdmK2YQg2YfZgdiq2YpdIGRkZGQgW9iq2YpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg2b7ZiNihJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDYp9qzJyxcbiAgICAgICAgICAgIHM6ICfahtmG2K8g2LPZitqq2YbaiicsXG4gICAgICAgICAgICBzczogJyVkINiz2YraqtmG2oonLFxuICAgICAgICAgICAgbTogJ9mH2qog2YXZhtm9JyxcbiAgICAgICAgICAgIG1tOiAnJWQg2YXZhtm9JyxcbiAgICAgICAgICAgIGg6ICfZh9qqINqq2YTYp9qqJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2qrZhNin2qonLFxuICAgICAgICAgICAgZDogJ9mH2qog2o/ZitmG2YfZhicsXG4gICAgICAgICAgICBkZDogJyVkINqP2YrZhtmH2YYnLFxuICAgICAgICAgICAgTTogJ9mH2qog2YXZh9mK2YbZiCcsXG4gICAgICAgICAgICBNTTogJyVkINmF2YfZitmG2KcnLFxuICAgICAgICAgICAgeTogJ9mH2qog2LPYp9mEJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPYp9mEJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2Q7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTm9ydGhlcm4gU2FtaSBbc2VdXG4vLyEgYXV0aG9ycyA6IELDpXJkIFJvbHN0YWQgSGVucmlrc2VuIDogaHR0cHM6Ly9naXRodWIuY29tL2thcmFtZWxsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc2UgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzZScsIHtcbiAgICAgICAgbW9udGhzOiAnb8SRxJFhamFnZW3DoW5udV9ndW92dmFtw6FubnVfbmp1a8SNYW3DoW5udV9jdW/Fi29tw6FubnVfbWllc3NlbcOhbm51X2dlYXNzZW3DoW5udV9zdW9pZG5lbcOhbm51X2JvcmdlbcOhbm51X8SNYWvEjWFtw6FubnVfZ29sZ2dvdG3DoW5udV9za8OhYm1hbcOhbm51X2p1b3ZsYW3DoW5udScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnb8SRxJFqX2d1b3Zfbmp1a19jdW9fbWllc19nZWFzX3N1b2lfYm9yZ1/EjWFrxI1fZ29sZ19za8OhYl9qdW92Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdzb3RuYWJlYWl2aV92dW9zc8OhcmdhX21hxYvFi2Viw6FyZ2FfZ2Fza2F2YWhra3VfZHVvcmFzdGF0X2JlYXJqYWRhdF9sw6F2dmFyZGF0Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzb3RuX3Z1b3NfbWHFi19nYXNrX2R1b3JfYmVhcl9sw6F2Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3Nfdl9tX2dfZF9iX0wnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnTU1NTSBELiBbYi5dIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbb3RuZSB0aV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tpaHR0aW4gdGldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdGldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaWt0ZSB0aV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbb3ZkZGl0XSBkZGRkIFt0aV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBnZWHFvmVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdtYcWLaXQgJXMnLFxuICAgICAgICAgICAgczogJ21vYWRkZSBzZWt1bmRkYXQnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRkYXQnLFxuICAgICAgICAgICAgbTogJ29rdGEgbWludWh0YScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnVodGF0JyxcbiAgICAgICAgICAgIGg6ICdva3RhIGRpaW1tdScsXG4gICAgICAgICAgICBoaDogJyVkIGRpaW1tdXQnLFxuICAgICAgICAgICAgZDogJ29rdGEgYmVhaXZpJyxcbiAgICAgICAgICAgIGRkOiAnJWQgYmVhaXZ2aXQnLFxuICAgICAgICAgICAgTTogJ29rdGEgbcOhbm51JyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOhbnV0JyxcbiAgICAgICAgICAgIHk6ICdva3RhIGphaGtpJyxcbiAgICAgICAgICAgIHl5OiAnJWQgamFnaXQnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNpbmhhbGVzZSBbc2ldXG4vLyEgYXV0aG9yIDogU2FtcGF0aCBTaXRpbmFtYWx1d2EgOiBodHRwczovL2dpdGh1Yi5jb20vc2FtcGF0aHNyaXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIC8qanNoaW50IC1XMTAwKi9cbiAgICB2YXIgc2kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaScsIHtcbiAgICAgICAgbW9udGhzOiAn4Lai4Lax4LeA4LeP4La74LeSX+C2tOC3meC2tuC2u+C3gOC3j+C2u+C3kl/gtrjgt4/gtrvgt4rgtq3gt5Rf4LaF4La04LeK4oCN4La74Lea4La94LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3neC3g+C3iuC2reC3lF/gt4Pgt5DgtrTgt4rgtq3gt5Dgtrjgt4rgtrbgtrvgt4pf4LaU4Laa4LeK4Lat4Led4La24La74LeKX+C2seC3nOC3gOC3kOC2uOC3iuC2tuC2u+C3il/gtq/gt5ngt4Pgt5Dgtrjgt4rgtrbgtrvgt4onLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4Lai4LaxX+C2tOC3meC2tl/gtrjgt4/gtrvgt4pf4LaF4La04LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3nV/gt4Pgt5DgtrTgt4pf4LaU4Laa4LeKX+C2seC3nOC3gOC3kF/gtq/gt5ngt4Pgt5AnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ+C2ieC2u+C3kuC2r+C3j1/gt4PgtrPgt5Tgtq/gt49f4LaF4Laf4LeE4La74LeU4LeA4LeP4Lav4LePX+C2tuC2r+C3j+C2r+C3j1/gtrbgt4rigI3gtrvgt4Tgt4Pgt4rgtrTgtq3gt5LgtrHgt4rgtq/gt49f4LeD4LeS4Laa4LeU4La74LeP4Lav4LePX+C3g+C3meC2seC3g+C3lOC2u+C3j+C2r+C3jycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4LaJ4La74LeSX+C3g+C2s+C3lF/gtoXgtp9f4La24Lav4LePX+C2tuC3iuKAjeC2u+C3hF/gt4Pgt5Lgtprgt5Rf4LeD4LeZ4LaxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+C2iV/gt4Nf4LaFX+C2tl/gtrbgt4rigI3gtrtf4LeD4LeSX+C3g+C3mScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdhIGg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnYSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMOiAnWVlZWSBNTU1NIEQnLFxuICAgICAgICAgICAgTExMOiAnWVlZWSBNTU1NIEQsIGEgaDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWSBNTU1NIEQgW+C3gOC3kOC2seC3kl0gZGRkZCwgYSBoOm1tOnNzJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4LaF4LavXSBMVFvgtqddJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4LeE4LeZ4LanXSBMVFvgtqddJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVFvgtqddJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4LaK4La64LeaXSBMVFvgtqddJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+C2tOC3g+C3lOC2nOC3kuC2ul0gZGRkZCBMVFvgtqddJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPgtprgt5LgtrHgt4onLFxuICAgICAgICAgICAgcGFzdDogJyVz4Laa4LanIOC2tOC3meC2uycsXG4gICAgICAgICAgICBzOiAn4Lat4Lat4LeK4La04La7IOC2muC3kuC3hOC3kuC2tOC2uicsXG4gICAgICAgICAgICBzczogJ+C2reC2reC3iuC2tOC2uyAlZCcsXG4gICAgICAgICAgICBtOiAn4La44LeS4Lax4LeS4Lat4LeK4Lat4LeU4LeAJyxcbiAgICAgICAgICAgIG1tOiAn4La44LeS4Lax4LeS4Lat4LeK4Lat4LeUICVkJyxcbiAgICAgICAgICAgIGg6ICfgtrTgt5DgtronLFxuICAgICAgICAgICAgaGg6ICfgtrTgt5DgtrogJWQnLFxuICAgICAgICAgICAgZDogJ+C2r+C3kuC2seC2uicsXG4gICAgICAgICAgICBkZDogJ+C2r+C3kuC2sSAlZCcsXG4gICAgICAgICAgICBNOiAn4La44LeP4LeD4La6JyxcbiAgICAgICAgICAgIE1NOiAn4La44LeP4LeDICVkJyxcbiAgICAgICAgICAgIHk6ICfgt4Dgt4PgtrsnLFxuICAgICAgICAgICAgeXk6ICfgt4Dgt4PgtrsgJWQnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0g4LeA4LeQ4Lax4LeSLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg4LeA4LeQ4Lax4LeSJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C2tOC3meC2uyDgt4Dgtrvgt5R84La04LeD4LeKIOC3gOC2u+C3lHzgtrTgt5ku4LeAfOC2tC7gt4AuLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfgtrQu4LeALicgfHwgaW5wdXQgPT09ICfgtrTgt4Pgt4og4LeA4La74LeUJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfgtrQu4LeALicgOiAn4La04LeD4LeKIOC3gOC2u+C3lCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tOC3mS7gt4AuJyA6ICfgtrTgt5ngtrsg4LeA4La74LeUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTbG92YWsgW3NrXVxuLy8hIGF1dGhvciA6IE1hcnRpbiBNaW5rYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rMnNcbi8vISBiYXNlZCBvbiB3b3JrIG9mIHBldHJiZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL3BldHJiZWxhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID1cbiAgICAgICAgICAgICdqYW51w6FyX2ZlYnJ1w6FyX21hcmVjX2FwcsOtbF9tw6FqX2rDum5fasO6bF9hdWd1c3Rfc2VwdGVtYmVyX29rdMOzYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2phbl9mZWJfbWFyX2Fwcl9tw6FqX2rDum5fasO6bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiBuID4gMSAmJiBuIDwgNTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6IC8vIGEgZmV3IHNlY29uZHMgLyBpbiBhIGZldyBzZWNvbmRzIC8gYSBmZXcgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdww6FyIHNla8O6bmQnIDogJ3DDoXIgc2VrdW5kYW1pJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzogLy8gOSBzZWNvbmRzIC8gaW4gOSBzZWNvbmRzIC8gOSBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2Vrw7puZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnc2VrdW5kYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdtJzogLy8gYSBtaW51dGUgLyBpbiBhIG1pbnV0ZSAvIGEgbWludXRlIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbsO6dGEnIDogaXNGdXR1cmUgPyAnbWluw7p0dScgOiAnbWluw7p0b3UnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOiAvLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW7DunR5JyA6ICdtaW7DunQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21pbsO6dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnaCc6IC8vIGFuIGhvdXIgLyBpbiBhbiBob3VyIC8gYW4gaG91ciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdob2RpbmEnIDogaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91JztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzogLy8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnaG9kaW55JyA6ICdob2TDrW4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2hvZGluYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdkJzogLy8gYSBkYXkgLyBpbiBhIGRheSAvIGEgZGF5IGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RlxYgnIDogJ2TFiG9tJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzogLy8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZG5pJyA6ICdkbsOtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkxYhhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ00nOiAvLyBhIG1vbnRoIC8gaW4gYSBtb250aCAvIGEgbW9udGggYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzaWFjJyA6ICdtZXNpYWNvbSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6IC8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21lc2lhY2UnIDogJ21lc2lhY292Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtZXNpYWNtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAneSc6IC8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdyb2snIDogJ3Jva29tJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzogLy8gOSB5ZWFycyAvIGluIDkgeWVhcnMgLyA5IHllYXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAncm9reScgOiAncm9rb3YnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Jva21pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2sgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaycsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgd2Vla2RheXM6ICduZWRlxL5hX3BvbmRlbG9rX3V0b3Jva19zdHJlZGFfxaF0dnJ0b2tfcGlhdG9rX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lX3BvX3V0X3N0X8WhdF9waV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zdF/FoXRfcGlfc28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RuZXMgb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t6YWp0cmEgb10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBuZWRlxL51IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdm8gxaF0dnJ0b2sgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHBpYXRvayBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBuZWRlxL51IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJlZCAlcycsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2s7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2xvdmVuaWFuIFtzbF1cbi8vISBhdXRob3IgOiBSb2JlcnQgU2Vkb3bFoWVrIDogaHR0cHM6Ly9naXRodWIuY29tL3NlZG92c2VrXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmVcbiAgICAgICAgICAgICAgICAgICAgPyAnbmVrYWogc2VrdW5kJ1xuICAgICAgICAgICAgICAgICAgICA6ICduZWthaiBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAnc2VrdW5kbycgOiAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2VrdW5kaScgOiAnc2VrdW5kYWgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWt1bmRlJyA6ICdzZWt1bmRhaCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZW5hIG1pbnV0YScgOiAnZW5vIG1pbnV0byc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0byc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXRpJyA6ICdtaW51dGFtYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0ZScgOiAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0JyA6ICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdlbmEgdXJhJyA6ICdlbm8gdXJvJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ3VyYScgOiAndXJvJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cmknIDogJ3VyYW1hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXJlJyA6ICd1cmFtaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXInIDogJ3VyYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIGRhbicgOiAnZW5pbSBkbmVtJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RhbicgOiAnZG5lbSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZG5pJyA6ICdkbmV2b21hJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkbmknIDogJ2RuZXZpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIG1lc2VjJyA6ICdlbmltIG1lc2VjZW0nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWMnIDogJ21lc2VjZW0nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjYScgOiAnbWVzZWNlbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2UnIDogJ21lc2VjaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNldicgOiAnbWVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VubyBsZXRvJyA6ICdlbmltIGxldG9tJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldG8nIDogJ2xldG9tJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRpJyA6ICdsZXRvbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRhJyA6ICdsZXRpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXQnIDogJ2xldGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2wnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcmVjX2FwcmlsX21hal9qdW5pal9qdWxpal9hdmd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqLl9qdW4uX2p1bC5fYXZnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkZWxqYV9wb25lZGVsamVrX3RvcmVrX3NyZWRhX8SNZXRydGVrX3BldGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl90b3IuX3NyZS5fxI1ldC5fcGV0Ll9zb2IuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3RvX3NyX8SNZV9wZV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELiBNTS4gWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5lcyBvYl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tqdXRyaSBvYl0gTFQnLFxuXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbbmVkZWxqb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtzcmVkb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtzb2JvdG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3bEjWVyYWogb2JdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW25lZGVsam9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtzcmVkb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW3NvYm90b10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qaV0gZGRkZCBbb2JdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfEjWV6ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmVkICVzJyxcbiAgICAgICAgICAgIHM6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBbGJhbmlhbiBbc3FdXG4vLyEgYXV0aG9yIDogRmxha8OrcmltIElzbWFuaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mbGFrZXJpbWlcbi8vISBhdXRob3IgOiBNZW5lbGlvbiBFbGVuc8O6bGUgOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuLy8hIGF1dGhvciA6IE9lcmQgQ3VrYWxsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9vZXJkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcScsIHtcbiAgICAgICAgbW9udGhzOiAnSmFuYXJfU2hrdXJ0X01hcnNfUHJpbGxfTWFqX1FlcnNob3JfS29ycmlrX0d1c2h0X1NodGF0b3JfVGV0b3JfTsOrbnRvcl9EaGpldG9yJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9TaGtfTWFyX1ByaV9NYWpfUWVyX0tvcl9HdXNfU2h0X1RldF9Ow6tuX0Roaicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdFIERpZWxfRSBIw6tuw6tfRSBNYXJ0w6tfRSBNw6tya3Vyw6tfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuw6snLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdEaWVfSMOrbl9NYXJfTcOrcl9FbmpfUHJlX1NodCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdEX0hfTWFfTcOrX0VfUF9TaCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvUER8TUQvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkgPT09ICdNJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXJzIDwgMTIgPyAnUEQnIDogJ01EJztcbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tTb3QgbsOrXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW05lc8OrciBuw6tdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbbsOrXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0RqZSBuw6tdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZSBrYWx1YXIgbsOrXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ27DqyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgbcOrIHBhcsOrJyxcbiAgICAgICAgICAgIHM6ICdkaXNhIHNla29uZGEnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWtvbmRhJyxcbiAgICAgICAgICAgIG06ICduasOrIG1pbnV0w6snLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGEnLFxuICAgICAgICAgICAgaDogJ25qw6sgb3LDqycsXG4gICAgICAgICAgICBoaDogJyVkIG9yw6snLFxuICAgICAgICAgICAgZDogJ25qw6sgZGl0w6snLFxuICAgICAgICAgICAgZGQ6ICclZCBkaXTDqycsXG4gICAgICAgICAgICBNOiAnbmrDqyBtdWFqJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbXVhaicsXG4gICAgICAgICAgICB5OiAnbmrDqyB2aXQnLFxuICAgICAgICAgICAgeXk6ICclZCB2aXRlJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzcTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTZXJiaWFuIFtzcl1cbi8vISBhdXRob3IgOiBNaWxhbiBKYW5hxI1rb3ZpxIc8bWlsYW5qYW5hY2tvdmljQGdtYWlsLmNvbT4gOiBodHRwczovL2dpdGh1Yi5jb20vbWlsYW4talxuLy8hIGF1dGhvciA6IFN0ZWZhbiBDcm5qYWtvdmnEhyA8c3RlZmFuQGhvdG1haWwucnM+IDogaHR0cHM6Ly9naXRodWIuY29tL2Nybmpha292aWNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0cmFuc2xhdG9yID0ge1xuICAgICAgICB3b3Jkczoge1xuICAgICAgICAgICAgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgICAgIHNzOiBbJ3Nla3VuZGEnLCAnc2VrdW5kZScsICdzZWt1bmRpJ10sXG4gICAgICAgICAgICBtOiBbJ2plZGFuIG1pbnV0JywgJ2plZG5vZyBtaW51dGEnXSxcbiAgICAgICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0YScsICdtaW51dGEnXSxcbiAgICAgICAgICAgIGg6IFsnamVkYW4gc2F0JywgJ2plZG5vZyBzYXRhJ10sXG4gICAgICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgICAgICBkOiBbJ2plZGFuIGRhbicsICdqZWRub2cgZGFuYSddLFxuICAgICAgICAgICAgZGQ6IFsnZGFuJywgJ2RhbmEnLCAnZGFuYSddLFxuICAgICAgICAgICAgTTogWydqZWRhbiBtZXNlYycsICdqZWRub2cgbWVzZWNhJ10sXG4gICAgICAgICAgICBNTTogWydtZXNlYycsICdtZXNlY2EnLCAnbWVzZWNpJ10sXG4gICAgICAgICAgICB5OiBbJ2plZG51IGdvZGludScsICdqZWRuZSBnb2RpbmUnXSxcbiAgICAgICAgICAgIHl5OiBbJ2dvZGludScsICdnb2RpbmUnLCAnZ29kaW5hJ10sXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBudW1iZXIgJSAxMCA+PSAxICYmXG4gICAgICAgICAgICAgICAgbnVtYmVyICUgMTAgPD0gNCAmJlxuICAgICAgICAgICAgICAgIChudW1iZXIgJSAxMDAgPCAxMCB8fCBudW1iZXIgJSAxMDAgPj0gMjApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDEgPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3b3JkS2V5WzJdO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldLFxuICAgICAgICAgICAgICAgIHdvcmQ7XG5cbiAgICAgICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gTm9taW5hdGl2XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3knICYmIHdpdGhvdXRTdWZmaXgpIHJldHVybiAnamVkbmEgZ29kaW5hJztcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3b3JkID0gdHJhbnNsYXRvci5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKG51bWJlciwgd29yZEtleSk7XG4gICAgICAgICAgICAvLyBOb21pbmF0aXZcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICd5eScgJiYgd2l0aG91dFN1ZmZpeCAmJiB3b3JkID09PSAnZ29kaW51Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIGdvZGluYSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB3b3JkO1xuICAgICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgc3IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqX2p1bl9qdWxfYXZnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZGVsamFfcG9uZWRlbGpha191dG9yYWtfc3JlZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl91dG8uX3NyZS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3V0X3NyX8SNZV9wZV9zdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QuIE0uIFlZWVkuJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZLicsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkuIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWS4gSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2p1xI1lIHVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RXZWVrRGF5cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbbmVkZWxqZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3BvbmVkZWxqa2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFt1dG9ya2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3NyZWRlXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbxI1ldHZydGthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcGV0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3N1Ym90ZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJlICVzJyxcbiAgICAgICAgICAgIHM6ICduZWtvbGlrbyBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3I7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2VyYmlhbiBDeXJpbGxpYyBbc3ItY3lybF1cbi8vISBhdXRob3IgOiBNaWxhbiBKYW5hxI1rb3ZpxIc8bWlsYW5qYW5hY2tvdmljQGdtYWlsLmNvbT4gOiBodHRwczovL2dpdGh1Yi5jb20vbWlsYW4talxuLy8hIGF1dGhvciA6IFN0ZWZhbiBDcm5qYWtvdmnEhyA8c3RlZmFuQGhvdG1haWwucnM+IDogaHR0cHM6Ly9naXRodWIuY29tL2Nybmpha292aWNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0cmFuc2xhdG9yID0ge1xuICAgICAgICB3b3Jkczoge1xuICAgICAgICAgICAgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgICAgIHNzOiBbJ9GB0LXQutGD0L3QtNCwJywgJ9GB0LXQutGD0L3QtNC1JywgJ9GB0LXQutGD0L3QtNC4J10sXG4gICAgICAgICAgICBtOiBbJ9GY0LXQtNCw0L0g0LzQuNC90YPRgicsICfRmNC10LTQvdC+0LMg0LzQuNC90YPRgtCwJ10sXG4gICAgICAgICAgICBtbTogWyfQvNC40L3Rg9GCJywgJ9C80LjQvdGD0YLQsCcsICfQvNC40L3Rg9GC0LAnXSxcbiAgICAgICAgICAgIGg6IFsn0ZjQtdC00LDQvSDRgdCw0YInLCAn0ZjQtdC00L3QvtCzINGB0LDRgtCwJ10sXG4gICAgICAgICAgICBoaDogWyfRgdCw0YInLCAn0YHQsNGC0LAnLCAn0YHQsNGC0LgnXSxcbiAgICAgICAgICAgIGQ6IFsn0ZjQtdC00LDQvSDQtNCw0L0nLCAn0ZjQtdC00L3QvtCzINC00LDQvdCwJ10sXG4gICAgICAgICAgICBkZDogWyfQtNCw0L0nLCAn0LTQsNC90LAnLCAn0LTQsNC90LAnXSxcbiAgICAgICAgICAgIE06IFsn0ZjQtdC00LDQvSDQvNC10YHQtdGGJywgJ9GY0LXQtNC90L7QsyDQvNC10YHQtdGG0LAnXSxcbiAgICAgICAgICAgIE1NOiBbJ9C80LXRgdC10YYnLCAn0LzQtdGB0LXRhtCwJywgJ9C80LXRgdC10YbQuCddLFxuICAgICAgICAgICAgeTogWyfRmNC10LTQvdGDINCz0L7QtNC40L3RgycsICfRmNC10LTQvdC1INCz0L7QtNC40L3QtSddLFxuICAgICAgICAgICAgeXk6IFsn0LPQvtC00LjQvdGDJywgJ9Cz0L7QtNC40L3QtScsICfQs9C+0LTQuNC90LAnXSxcbiAgICAgICAgfSxcbiAgICAgICAgY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTogZnVuY3Rpb24gKG51bWJlciwgd29yZEtleSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG51bWJlciAlIDEwID49IDEgJiZcbiAgICAgICAgICAgICAgICBudW1iZXIgJSAxMCA8PSA0ICYmXG4gICAgICAgICAgICAgICAgKG51bWJlciAlIDEwMCA8IDEwIHx8IG51bWJlciAlIDEwMCA+PSAyMClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdvcmRLZXlbMl07XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV0sXG4gICAgICAgICAgICAgICAgd29yZDtcblxuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBOb21pbmF0aXZcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAneScgJiYgd2l0aG91dFN1ZmZpeCkgcmV0dXJuICfRmNC10LTQvdCwINCz0L7QtNC40L3QsCc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd29yZCA9IHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpO1xuICAgICAgICAgICAgLy8gTm9taW5hdGl2XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAneXknICYmIHdpdGhvdXRTdWZmaXggJiYgd29yZCA9PT0gJ9Cz0L7QtNC40L3RgycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDQs9C+0LTQuNC90LAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgd29yZDtcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgdmFyIHNyQ3lybCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NyLWN5cmwnLCB7XG4gICAgICAgIG1vbnRoczogJ9GY0LDQvdGD0LDRgF/RhNC10LHRgNGD0LDRgF/QvNCw0YDRgl/QsNC/0YDQuNC7X9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQsdCw0YBf0L7QutGC0L7QsdCw0YBf0L3QvtCy0LXQvNCx0LDRgF/QtNC10YbQtdC80LHQsNGAJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfRmNCw0L0uX9GE0LXQsS5f0LzQsNGALl/QsNC/0YAuX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQsy5f0YHQtdC/Ll/QvtC60YIuX9C90L7Qsi5f0LTQtdGGLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfQvdC10LTQtdGZ0LBf0L/QvtC90LXQtNC10ZnQsNC6X9GD0YLQvtGA0LDQul/RgdGA0LXQtNCwX9GH0LXRgtCy0YDRgtCw0Lpf0L/QtdGC0LDQul/RgdGD0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQvdC10LQuX9C/0L7QvS5f0YPRgtC+Ll/RgdGA0LUuX9GH0LXRgi5f0L/QtdGCLl/RgdGD0LEuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9C90LVf0L/Qvl/Rg9GCX9GB0YBf0YfQtV/Qv9C1X9GB0YMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdELiBNLiBZWVlZLicsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWS4nLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZLiBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkuIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQtNCw0L3QsNGBINGDXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9GB0YPRgtGA0LAg0YNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0L3QtdC00LXRmdGDXSBb0YNdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIFvRgdGA0LXQtNGDXSBb0YNdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIFvRgdGD0LHQvtGC0YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gZGRkZCBb0YNdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1vRmNGD0YfQtSDRg10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9C90LXQtNC10ZnQtV0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvQv9C+0L3QtdC00LXRmdC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0YPRgtC+0YDQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvRgdGA0LXQtNC1XSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9GH0LXRgtCy0YDRgtC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0L/QtdGC0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0YHRg9Cx0L7RgtC1XSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfQv9GA0LUgJXMnLFxuICAgICAgICAgICAgczogJ9C90LXQutC+0LvQuNC60L4g0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzckN5cmw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogc2lTd2F0aSBbc3NdXG4vLyEgYXV0aG9yIDogTmljb2xhaSBEYXZpZXM8bWFpbEBuaWNvbGFpLmlvPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9uaWNvbGFpZGF2aWVzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3MgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcycsIHtcbiAgICAgICAgbW9udGhzOiBcIkJoaW1iaWR2d2FuZV9JbmRsb3ZhbmFfSW5kbG92J2xlbmtodWx1X01hYmFzYV9Jbmtod2VraHdldGlfSW5obGFiYV9LaG9sd2FuZV9JbmdjaV9JbnlvbmlfSW1waGFsYV9Md2V0aV9JbmdvbmdvbmlcIi5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0JoaV9JbmFfSW51X01hYl9JbmtfSW5oX0tob19JZ2NfSW55X0ltcF9Md2VfSWdvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdMaXNvbnRmb19VbXNvbWJ1bHVrb19MZXNpYmlsaV9MZXNpdHNhdGZ1X0xlc2luZV9MZXNpaGxhbnVfVW1nY2liZWxvJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdMaXNfVW1iX0xzYl9MZXNfTHNpX0xzaF9VbWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnTGlfVXNfTGJfTHRfTHNfTGhfVWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbTmFtdWhsYSBuZ2FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbS3VzYXNhIG5nYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtuZ2FdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSXRvbG8gbmdhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2xlbGlwaGVsaWxlXSBbbmdhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ25nYSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnd2VudGVrYSBuZ2EgJXMnLFxuICAgICAgICAgICAgczogJ2VtaXp1endhbmEgbG9tY2FuZScsXG4gICAgICAgICAgICBzczogJyVkIG16dXp3YW5hJyxcbiAgICAgICAgICAgIG06ICd1bXp1enUnLFxuICAgICAgICAgICAgbW06ICclZCBlbWl6dXp1JyxcbiAgICAgICAgICAgIGg6ICdsaWhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBlbWFob3JhJyxcbiAgICAgICAgICAgIGQ6ICdsaWxhbmdhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZW1hbGFuZ2EnLFxuICAgICAgICAgICAgTTogJ2lueWFuZ2EnLFxuICAgICAgICAgICAgTU06ICclZCB0aW55YW5nYScsXG4gICAgICAgICAgICB5OiAndW1ueWFrYScsXG4gICAgICAgICAgICB5eTogJyVkIGltaW55YWthJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2VrdXNlbml8ZW1pbml8ZW50c2FtYmFtYXxlYnVzdWt1LyxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VrdXNlbmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbWluaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VudHNhbWJhbWEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VidXN1a3UnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdla3VzZW5pJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2VtaW5pJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdlbnRzYW1iYW1hJyB8fCBtZXJpZGllbSA9PT0gJ2VidXN1a3UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhvdXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6ICclZCcsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTd2VkaXNoIFtzdl1cbi8vISBhdXRob3IgOiBKZW5zIEFsbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS91bG11c1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3YnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcmlfZmVicnVhcmlfbWFyc19hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdGlfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnc8O2bmRhZ19tw6VuZGFnX3Rpc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO2cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3PDtm5fbcOlbl90aXNfb25zX3Rvcl9mcmVfbMO2cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzw7ZfbcOlX3RpX29uX3RvX2ZyX2zDticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgICAgICBsbGw6ICdEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQgRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0lkYWddIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbSW1vcmdvbl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJZ8Olcl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbUMOlXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0ldIGRkZGRbc10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnZsO2ciAlcyBzZWRhbicsXG4gICAgICAgICAgICBzOiAnbsOlZ3JhIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbTogJ2VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcicsXG4gICAgICAgICAgICBoOiAnZW4gdGltbWUnLFxuICAgICAgICAgICAgaGg6ICclZCB0aW1tYXInLFxuICAgICAgICAgICAgZDogJ2VuIGRhZycsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIE06ICdlbiBtw6VuYWQnLFxuICAgICAgICAgICAgTU06ICclZCBtw6VuYWRlcicsXG4gICAgICAgICAgICB5OiAnZXR0IMOlcicsXG4gICAgICAgICAgICB5eTogJyVkIMOlcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShcXDplfFxcOmEpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnOmUnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnOmEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJzphJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnOmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICc6ZSc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3Y7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3dhaGlsaSBbc3ddXG4vLyEgYXV0aG9yIDogRmFoYWQgS2Fzc2ltIDogaHR0cHM6Ly9naXRodWIuY29tL2ZhZHNlbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN3ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3cnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcmlfRmVicnVhcmlfTWFjaGlfQXByaWxpX01laV9KdW5pX0p1bGFpX0Fnb3N0aV9TZXB0ZW1iYV9Pa3RvYmFfTm92ZW1iYV9EZXNlbWJhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9BZ29fU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czpcbiAgICAgICAgICAgICdKdW1hcGlsaV9KdW1hdGF0dV9KdW1hbm5lX0p1bWF0YW5vX0FsaGFtaXNpX0lqdW1hYV9KdW1hbW9zaScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnSnBsX0p0YXRfSm5uZV9KdGFuX0FsaF9Jam1fSm1vcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdKMl9KM19KNF9KNV9BbF9Jal9KMScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbbGVvIHNhYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1trZXNobyBzYWFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW3dpa2kgaWpheW9dIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbamFuYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbd2lraSBpbGl5b3BpdGFdIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgYmFhZGF5ZScsXG4gICAgICAgICAgICBwYXN0OiAndG9rZWEgJXMnLFxuICAgICAgICAgICAgczogJ2hpdmkgcHVuZGUnLFxuICAgICAgICAgICAgc3M6ICdzZWt1bmRlICVkJyxcbiAgICAgICAgICAgIG06ICdkYWtpa2EgbW9qYScsXG4gICAgICAgICAgICBtbTogJ2Rha2lrYSAlZCcsXG4gICAgICAgICAgICBoOiAnc2FhIGxpbW9qYScsXG4gICAgICAgICAgICBoaDogJ21hc2FhICVkJyxcbiAgICAgICAgICAgIGQ6ICdzaWt1IG1vamEnLFxuICAgICAgICAgICAgZGQ6ICdzaWt1ICVkJyxcbiAgICAgICAgICAgIE06ICdtd2V6aSBtbW9qYScsXG4gICAgICAgICAgICBNTTogJ21pZXppICVkJyxcbiAgICAgICAgICAgIHk6ICdtd2FrYSBtbW9qYScsXG4gICAgICAgICAgICB5eTogJ21pYWthICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN3O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRhbWlsIFt0YV1cbi8vISBhdXRob3IgOiBBcmp1bmt1bWFyIEtyaXNobmFtb29ydGh5IDogaHR0cHM6Ly9naXRodWIuY29tL3RrMTIwNDA0XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+CvpycsXG4gICAgICAgICAgICAyOiAn4K+oJyxcbiAgICAgICAgICAgIDM6ICfgr6knLFxuICAgICAgICAgICAgNDogJ+CvqicsXG4gICAgICAgICAgICA1OiAn4K+rJyxcbiAgICAgICAgICAgIDY6ICfgr6wnLFxuICAgICAgICAgICAgNzogJ+CvrScsXG4gICAgICAgICAgICA4OiAn4K+uJyxcbiAgICAgICAgICAgIDk6ICfgr68nLFxuICAgICAgICAgICAgMDogJ+CvpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgr6cnOiAnMScsXG4gICAgICAgICAgICAn4K+oJzogJzInLFxuICAgICAgICAgICAgJ+CvqSc6ICczJyxcbiAgICAgICAgICAgICfgr6onOiAnNCcsXG4gICAgICAgICAgICAn4K+rJzogJzUnLFxuICAgICAgICAgICAgJ+CvrCc6ICc2JyxcbiAgICAgICAgICAgICfgr60nOiAnNycsXG4gICAgICAgICAgICAn4K+uJzogJzgnLFxuICAgICAgICAgICAgJ+Cvryc6ICc5JyxcbiAgICAgICAgICAgICfgr6YnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgdGEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0YScsIHtcbiAgICAgICAgbW9udGhzOiAn4K6c4K6p4K614K6w4K6/X+CuquCuv+CuquCvjeCusOCuteCusOCuv1/grq7grr7grrDgr43grprgr41f4K6P4K6q4K+N4K6w4K6y4K+NX+CuruCvh1/grpzgr4Lgrqngr41f4K6c4K+C4K6y4K+IX+CuhuCuleCuuOCvjeCun+CvjV/grprgr4bgrqrgr43grp/gr4bgrq7gr43grqrgrrDgr41f4K6F4K6V4K+N4K6f4K+H4K6+4K6q4K6w4K+NX+CuqOCuteCuruCvjeCuquCusOCvjV/grp/grr/grprgrq7gr43grqrgrrDgr40nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ+CunuCuvuCur+Cuv+CuseCvjeCuseCvgeCuleCvjeCuleCuv+CutOCuruCviF/grqTgrr/grpngr43grpXgrp/gr43grpXgrr/grrTgrq7gr4hf4K6a4K+G4K614K+N4K614K6+4K6v4K+N4K6V4K6/4K604K6u4K+IX+CuquCvgeCupOCuqeCvjeCuleCuv+CutOCuruCviF/grrXgrr/grq/grr7grrTgrpXgr43grpXgrr/grrTgrq7gr4hf4K614K+G4K6z4K+N4K6z4K6/4K6V4K+N4K6V4K6/4K604K6u4K+IX+CumuCuqeCuv+CuleCvjeCuleCuv+CutOCuruCviCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4K6e4K6+4K6v4K6/4K6x4K+BX+CupOCuv+CumeCvjeCuleCus+CvjV/grprgr4bgrrXgr43grrXgrr7grq/gr41f4K6q4K+B4K6k4K6p4K+NX+CuteCuv+Cur+CuvuCutOCuqeCvjV/grrXgr4bgrrPgr43grrPgrr9f4K6a4K6p4K6/Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CunuCuvl/grqTgrr9f4K6a4K+GX+CuquCvgV/grrXgrr9f4K614K+GX+Cumicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+Cuh+CuqeCvjeCuseCvgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgrqjgrr7grrPgr4hdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgrqjgr4fgrrHgr43grrHgr4FdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CuleCun+CuqOCvjeCupCDgrrXgrr7grrDgrq7gr41dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4K6H4K6y4K+NJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgrq7gr4Hgrqngr40nLFxuICAgICAgICAgICAgczogJ+CukuCusOCvgSDgrprgrr/grrIg4K614K6/4K6o4K6+4K6f4K6/4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4K614K6/4K6o4K6+4K6f4K6/4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIG06ICfgrpLgrrDgr4Eg4K6o4K6/4K6u4K6/4K6f4K6u4K+NJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4K6o4K6/4K6u4K6/4K6f4K6Z4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIGg6ICfgrpLgrrDgr4Eg4K6u4K6j4K6/IOCuqOCvh+CusOCuruCvjScsXG4gICAgICAgICAgICBoaDogJyVkIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40nLFxuICAgICAgICAgICAgZDogJ+CukuCusOCvgSDgrqjgrr7grrPgr40nLFxuICAgICAgICAgICAgZGQ6ICclZCDgrqjgrr7grp/gr43grpXgrrPgr40nLFxuICAgICAgICAgICAgTTogJ+CukuCusOCvgSDgrq7grr7grqTgrq7gr40nLFxuICAgICAgICAgICAgTU06ICclZCDgrq7grr7grqTgrpngr43grpXgrrPgr40nLFxuICAgICAgICAgICAgeTogJ+CukuCusOCvgSDgrrXgrrDgr4Hgrp/grq7gr40nLFxuICAgICAgICAgICAgeXk6ICclZCDgrobgrqPgr43grp/gr4HgrpXgrrPgr40nLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3grrXgrqTgr4EvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+CuteCupOCvgSc7XG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgr6fgr6jgr6ngr6rgr6vgr6zgr63gr67gr6/gr6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHJlZmVyIGh0dHA6Ly90YS53aWtpcGVkaWEub3JnL3MvMWVyMVxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4K6v4K6+4K6u4K6u4K+NfOCuteCviOCuleCuseCviHzgrpXgrr7grrLgr4h84K6o4K6j4K+N4K6q4K6V4K6y4K+NfOCujuCuseCvjeCuquCuvuCun+CvgXzgrq7grr7grrLgr4gvLFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6v4K6+4K6u4K6u4K+NJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrrXgr4jgrpXgrrHgr4gnOyAvLyDgrrXgr4jgrpXgrrHgr4hcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6V4K6+4K6y4K+IJzsgLy8g4K6V4K6+4K6y4K+IXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuqOCuo+CvjeCuquCuleCusuCvjSc7IC8vIOCuqOCuo+CvjeCuquCuleCusuCvjVxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgro7grrHgr43grqrgrr7grp/gr4EnOyAvLyDgro7grrHgr43grqrgrr7grp/gr4FcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6u4K6+4K6y4K+IJzsgLy8g4K6u4K6+4K6y4K+IXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCur+CuvuCuruCuruCvjSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+Cur+CuvuCuruCuruCvjScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CuteCviOCuleCuseCviCcgfHwgbWVyaWRpZW0gPT09ICfgrpXgrr7grrLgr4gnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4K6o4K6j4K+N4K6q4K6V4K6y4K+NJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRlbHVndSBbdGVdXG4vLyEgYXV0aG9yIDogS3Jpc2huYSBDaGFpdGFueWEgVGhvdGEgOiBodHRwczovL2dpdGh1Yi5jb20va2N0aG90YVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRlID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGUnLCB7XG4gICAgICAgIG1vbnRoczogJ+CwnOCwqOCwteCwsOCwv1/gsKvgsL/gsKzgsY3gsLDgsLXgsLDgsL9f4LCu4LC+4LCw4LGN4LCa4LC/X+Cwj+CwquCxjeCwsOCwv+CwsuCxjV/gsK7gsYdf4LCc4LGC4LCo4LGNX+CwnOCxgeCwsuCxiF/gsIbgsJfgsLjgsY3gsJ/gsYFf4LC44LGG4LCq4LGN4LCf4LGG4LCC4LCs4LCw4LGNX+CwheCwleCxjeCwn+Cxi+CwrOCwsOCxjV/gsKjgsLXgsILgsKzgsLDgsY1f4LCh4LC/4LC44LGG4LCC4LCs4LCw4LGNJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfgsJzgsKguX+Cwq+Cwv+CwrOCxjeCwsC5f4LCu4LC+4LCw4LGN4LCa4LC/X+Cwj+CwquCxjeCwsOCwvy5f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYHgsLLgsYhf4LCG4LCXLl/gsLjgsYbgsKrgsY0uX+CwheCwleCxjeCwn+Cxiy5f4LCo4LC1Ll/gsKHgsL/gsLjgsYYuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ+CwhuCwpuCwv+CwteCwvuCwsOCwgl/gsLjgsYvgsK7gsLXgsL7gsLDgsIJf4LCu4LCC4LCX4LCz4LC14LC+4LCw4LCCX+CwrOCxgeCwp+CwteCwvuCwsOCwgl/gsJfgsYHgsLDgsYHgsLXgsL7gsLDgsIJf4LC24LGB4LCV4LGN4LCw4LC14LC+4LCw4LCCX+CwtuCwqOCwv+CwteCwvuCwsOCwgicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4LCG4LCm4LC/X+CwuOCxi+Cwrl/gsK7gsILgsJfgsLNf4LCs4LGB4LCnX+Cwl+CxgeCwsOCxgV/gsLbgsYHgsJXgsY3gsLBf4LC24LCo4LC/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+Cwhl/gsLjgsYtf4LCu4LCCX+CwrOCxgV/gsJfgsYFf4LC24LGBX+Cwticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgsKjgsYfgsKHgsYFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4LCw4LGH4LCq4LGBXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4LCo4LC/4LCo4LGN4LCoXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgsJfgsKRdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4LCy4LGLJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgsJXgsY3gsLDgsL/gsKTgsIInLFxuICAgICAgICAgICAgczogJ+CwleCxiuCwqOCxjeCwqOCwvyDgsJXgsY3gsLfgsKPgsL7gsLLgsYEnLFxuICAgICAgICAgICAgc3M6ICclZCDgsLjgsYbgsJXgsKjgsY3gsLLgsYEnLFxuICAgICAgICAgICAgbTogJ+CwkuCwlSDgsKjgsL/gsK7gsL/gsLfgsIInLFxuICAgICAgICAgICAgbW06ICclZCDgsKjgsL/gsK7gsL/gsLfgsL7gsLLgsYEnLFxuICAgICAgICAgICAgaDogJ+CwkuCwlSDgsJfgsILgsJ8nLFxuICAgICAgICAgICAgaGg6ICclZCDgsJfgsILgsJ/gsLLgsYEnLFxuICAgICAgICAgICAgZDogJ+CwkuCwlSDgsLDgsYvgsJzgsYEnLFxuICAgICAgICAgICAgZGQ6ICclZCDgsLDgsYvgsJzgsYHgsLLgsYEnLFxuICAgICAgICAgICAgTTogJ+CwkuCwlSDgsKjgsYbgsLInLFxuICAgICAgICAgICAgTU06ICclZCDgsKjgsYbgsLLgsLLgsYEnLFxuICAgICAgICAgICAgeTogJ+CwkuCwlSDgsLjgsILgsLXgsKTgsY3gsLjgsLDgsIInLFxuICAgICAgICAgICAgeXk6ICclZCDgsLjgsILgsLXgsKTgsY3gsLjgsLDgsL7gsLLgsYEnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3gsLUvLFxuICAgICAgICBvcmRpbmFsOiAnJWTgsLUnLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LCw4LC+4LCk4LGN4LCw4LC/fOCwieCwpuCwr+CwgnzgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIJ84LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4LCw4LC+4LCk4LGN4LCw4LC/Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LCJ4LCm4LCv4LCCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwruCwp+CxjeCwr+CwvuCwueCxjeCwqOCwgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwsOCwvuCwpOCxjeCwsOCwvyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCJ4LCm4LCv4LCCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwuOCwvuCwr+CwguCwpOCxjeCwsOCwgic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCw4LC+4LCk4LGN4LCw4LC/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRldHVuIERpbGkgKEVhc3QgVGltb3IpIFt0ZXRdXG4vLyEgYXV0aG9yIDogSm9zaHVhIEJyb29rcyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3NoYnJvb2tzXG4vLyEgYXV0aG9yIDogT25vcmlvIERlIEouIEFmb25zbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJvYm9cbi8vISBhdXRob3IgOiBTb25pYSBTaW1vZXMgOiBodHRwczovL2dpdGh1Yi5jb20vc29uaWFzaW1vZXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0ZXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZXQnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbmVpcnVfRmV2ZXJlaXJ1X01hcnN1X0FicmlsX01haXVfSnXDsXVfSnVsbHVfQWd1c3R1X1NldGVtYnJ1X091dHVicnVfTm92ZW1icnVfRGV6ZW1icnUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0Zldl9NYXJfQWJyX01haV9KdW5fSnVsX0Fnb19TZXRfT3V0X05vdl9EZXonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnRG9taW5ndV9TZWd1bmRhX1RlcnNhX0t1YXJ0YV9LaW50YV9TZXN0YV9TYWJhZHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdEb21fU2VnX1RlcnNfS3VhX0tpbnRfU2VzdF9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnRG9fU2VnX1RlX0t1X0tpX1Nlc19TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tPaGluIGloYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBYmFuIGloYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtpaGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSG9yaXNlaWsgaWhhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3NlbWFuYSBrb3R1a10gW2loYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpaGEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGxpdWJhJyxcbiAgICAgICAgICAgIHM6ICdzZWd1bmR1IGJhbHVuJyxcbiAgICAgICAgICAgIHNzOiAnc2VndW5kdSAlZCcsXG4gICAgICAgICAgICBtOiAnbWludXR1IGlkYScsXG4gICAgICAgICAgICBtbTogJ21pbnV0dSAlZCcsXG4gICAgICAgICAgICBoOiAnb3JhcyBpZGEnLFxuICAgICAgICAgICAgaGg6ICdvcmFzICVkJyxcbiAgICAgICAgICAgIGQ6ICdsb3JvbiBpZGEnLFxuICAgICAgICAgICAgZGQ6ICdsb3JvbiAlZCcsXG4gICAgICAgICAgICBNOiAnZnVsYW4gaWRhJyxcbiAgICAgICAgICAgIE1NOiAnZnVsYW4gJWQnLFxuICAgICAgICAgICAgeTogJ3RpbmFuIGlkYScsXG4gICAgICAgICAgICB5eTogJ3RpbmFuICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRldDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUYWppayBbdGddXG4vLyEgYXV0aG9yIDogT3JpZiBOLiBKci4gOiBodHRwczovL2dpdGh1Yi5jb20vb3JpZi1qclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGD0LwnLFxuICAgICAgICAxOiAnLdGD0LwnLFxuICAgICAgICAyOiAnLdGO0LwnLFxuICAgICAgICAzOiAnLdGO0LwnLFxuICAgICAgICA0OiAnLdGD0LwnLFxuICAgICAgICA1OiAnLdGD0LwnLFxuICAgICAgICA2OiAnLdGD0LwnLFxuICAgICAgICA3OiAnLdGD0LwnLFxuICAgICAgICA4OiAnLdGD0LwnLFxuICAgICAgICA5OiAnLdGD0LwnLFxuICAgICAgICAxMDogJy3Rg9C8JyxcbiAgICAgICAgMTI6ICct0YPQvCcsXG4gICAgICAgIDEzOiAnLdGD0LwnLFxuICAgICAgICAyMDogJy3Rg9C8JyxcbiAgICAgICAgMzA6ICct0Y7QvCcsXG4gICAgICAgIDQwOiAnLdGD0LwnLFxuICAgICAgICA1MDogJy3Rg9C8JyxcbiAgICAgICAgNjA6ICct0YPQvCcsXG4gICAgICAgIDcwOiAnLdGD0LwnLFxuICAgICAgICA4MDogJy3Rg9C8JyxcbiAgICAgICAgOTA6ICct0YPQvCcsXG4gICAgICAgIDEwMDogJy3Rg9C8JyxcbiAgICB9O1xuXG4gICAgdmFyIHRnID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGcnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCy0LDRgNC4X9GE0LXQstGA0LDQu9C4X9C80LDRgNGC0Lhf0LDQv9GA0LXQu9C4X9C80LDQudC4X9C40Y7QvdC4X9C40Y7Qu9C4X9Cw0LLQs9GD0YHRgtC4X9GB0LXQvdGC0Y/QsdGA0Lhf0L7QutGC0Y/QsdGA0Lhf0L3QvtGP0LHRgNC4X9C00LXQutCw0LHRgNC4Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOlxuICAgICAgICAgICAgICAgICfRj9C90LLQsNGAX9GE0LXQstGA0LDQu1/QvNCw0YDRgl/QsNC/0YDQtdC7X9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgF/QvtC60YLRj9Cx0YBf0L3QvtGP0LHRgF/QtNC10LrQsNCx0YAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9GP0LrRiNCw0L3QsdC1X9C00YPRiNCw0L3QsdC1X9GB0LXRiNCw0L3QsdC1X9GH0L7RgNGI0LDQvdCx0LVf0L/QsNC90rfRiNCw0L3QsdC1X9K30YPQvNGK0LBf0YjQsNC90LHQtScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9GP0YjQsV/QtNGI0LFf0YHRiNCxX9GH0YjQsV/Qv9GI0LFf0rfRg9C8X9GI0L3QsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfRj9GIX9C00Yhf0YHRiF/Rh9GIX9C/0Yhf0rfQvF/RiNCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9CY0LzRgNOv0Lcg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQpNCw0YDQtNC+INGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JTQuNGA06/QtyDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGRb0LhdIFvSs9Cw0YTRgtCw0Lgg0L7Rj9C90LTQsCDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGRb0LhdIFvSs9Cw0YTRgtCw0Lgg0LPRg9C30LDRiNGC0LAg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQsdCw0YrQtNC4ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDQv9C10YgnLFxuICAgICAgICAgICAgczogJ9GP0LrRh9Cw0L3QtCDRgdC+0L3QuNGPJyxcbiAgICAgICAgICAgIG06ICfRj9C6INC00LDSm9C40pvQsCcsXG4gICAgICAgICAgICBtbTogJyVkINC00LDSm9C40pvQsCcsXG4gICAgICAgICAgICBoOiAn0Y/QuiDRgdC+0LDRgicsXG4gICAgICAgICAgICBoaDogJyVkINGB0L7QsNGCJyxcbiAgICAgICAgICAgIGQ6ICfRj9C6INGA06/QtycsXG4gICAgICAgICAgICBkZDogJyVkINGA06/QtycsXG4gICAgICAgICAgICBNOiAn0Y/QuiDQvNC+0rMnLFxuICAgICAgICAgICAgTU06ICclZCDQvNC+0rMnLFxuICAgICAgICAgICAgeTogJ9GP0Log0YHQvtC7JyxcbiAgICAgICAgICAgIHl5OiAnJWQg0YHQvtC7JyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9GI0LDQsXzRgdGD0LHSs3zRgNOv0Ld80LHQtdCz0L7Ssy8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ9GI0LDQsScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9GB0YPQsdKzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9GA06/QtycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn0LHQtdCz0L7SsycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRiNCw0LEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GB0YPQsdKzJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgNOv0LcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cx0LXQs9C+0rMnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GI0LDQsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YPQvHzRjtC8KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRnO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRoYWkgW3RoXVxuLy8hIGF1dGhvciA6IEtyaWRzYWRhIFRoYW5hYnVscG9uZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaXJuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdGggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0aCcsIHtcbiAgICAgICAgbW9udGhzOiAn4Lih4LiB4Lij4Liy4LiE4LihX+C4geC4uOC4oeC4oOC4suC4nuC4seC4meC4mOC5jF/guKHguLXguJnguLLguITguKFf4LmA4Lih4Lip4Liy4Lii4LiZX+C4nuC4pOC4qeC4oOC4suC4hOC4oV/guKHguLTguJbguLjguJnguLLguKLguJlf4LiB4Lij4LiB4LiO4Liy4LiE4LihX+C4quC4tOC4h+C4q+C4suC4hOC4oV/guIHguLHguJnguKLguLLguKLguJlf4LiV4Li44Lil4Liy4LiE4LihX+C4nuC4pOC4qOC4iOC4tOC4geC4suC4ouC4mV/guJjguLHguJnguKfguLLguITguKEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ+C4oS7guIQuX+C4gS7guJ4uX+C4oeC4tS7guIQuX+C5gOC4oS7guKIuX+C4ni7guIQuX+C4oeC4tC7guKIuX+C4gS7guIQuX+C4qi7guIQuX+C4gS7guKIuX+C4lS7guIQuX+C4ni7guKIuX+C4mC7guIQuJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4quC4muC4lOC4tV/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4ql/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLCAvLyB5ZXMsIHRocmVlIGNoYXJhY3RlcnMgZGlmZmVyZW5jZVxuICAgICAgICB3ZWVrZGF5c01pbjogJ+C4reC4si5f4LiILl/guK0uX+C4ni5f4Lie4LikLl/guKguX+C4qi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ+C4p+C4seC4mWRkZGTguJfguLXguYggRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHfOC4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hy8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4Lin4Lix4LiZ4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vguJ7guKPguLjguYjguIfguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGRb4Lir4LiZ4LmJ4LiyIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vguYDguKHguLfguYjguK3guKfguLLguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vguKfguLHguJldZGRkZFvguJfguLXguYjguYHguKXguYnguKcg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ+C4reC4teC4gSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXPguJfguLXguYjguYHguKXguYnguKcnLFxuICAgICAgICAgICAgczogJ+C5hOC4oeC5iOC4geC4teC5iOC4p+C4tOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBzczogJyVkIOC4p+C4tOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBtOiAnMSDguJnguLLguJfguLUnLFxuICAgICAgICAgICAgbW06ICclZCDguJnguLLguJfguLUnLFxuICAgICAgICAgICAgaDogJzEg4LiK4Lix4LmI4Lin4LmC4Lih4LiHJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4LiK4Lix4LmI4Lin4LmC4Lih4LiHJyxcbiAgICAgICAgICAgIGQ6ICcxIOC4p+C4seC4mScsXG4gICAgICAgICAgICBkZDogJyVkIOC4p+C4seC4mScsXG4gICAgICAgICAgICB3OiAnMSDguKrguLHguJvguJTguLLguKvguYwnLFxuICAgICAgICAgICAgd3c6ICclZCDguKrguLHguJvguJTguLLguKvguYwnLFxuICAgICAgICAgICAgTTogJzEg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgICAgIHk6ICcxIOC4m+C4tScsXG4gICAgICAgICAgICB5eTogJyVkIOC4m+C4tScsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVHVya21lbiBbdGtdXG4vLyEgYXV0aG9yIDogQXRhbXlyYXQgQWJkeXJhaG1hbm92IDogaHR0cHM6Ly9naXRodWIuY29tL2F0YW15cmF0YWJkeVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiBcIidpbmppXCIsXG4gICAgICAgIDU6IFwiJ2luamlcIixcbiAgICAgICAgODogXCInaW5qaVwiLFxuICAgICAgICA3MDogXCInaW5qaVwiLFxuICAgICAgICA4MDogXCInaW5qaVwiLFxuICAgICAgICAyOiBcIiduamlcIixcbiAgICAgICAgNzogXCInbmppXCIsXG4gICAgICAgIDIwOiBcIiduamlcIixcbiAgICAgICAgNTA6IFwiJ25qaVwiLFxuICAgICAgICAzOiBcIifDvG5qaVwiLFxuICAgICAgICA0OiBcIifDvG5qaVwiLFxuICAgICAgICAxMDA6IFwiJ8O8bmppXCIsXG4gICAgICAgIDY6IFwiJ25qeVwiLFxuICAgICAgICA5OiBcIid1bmp5XCIsXG4gICAgICAgIDEwOiBcIid1bmp5XCIsXG4gICAgICAgIDMwOiBcIid1bmp5XCIsXG4gICAgICAgIDYwOiBcIid5bmp5XCIsXG4gICAgICAgIDkwOiBcIid5bmp5XCIsXG4gICAgfTtcblxuICAgIHZhciB0ayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RrJywge1xuICAgICAgICBtb250aHM6ICfDnWFud2FyX0Zld3JhbF9NYXJ0X0FwcmVsX01hw71fScO9dW5fScO9dWxfQXdndXN0X1NlbnTDvWFicl9Pa3TDvWFicl9Ob8O9YWJyX0Rla2Ficicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfDnWFuX0Zld19NYXJfQXByX01hw71fScO9bl9Jw71sX0F3Z19TZW5fT2t0X05vw71fRGVrJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ8OdZWvFn2VuYmVfRHXFn2VuYmVfU2nFn2VuYmVfw4dhcsWfZW5iZV9QZW7Fn2VuYmVfQW5uYV/FnmVuYmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfDnWVrX0R1xZ9fU2nFn1/Dh2FyX1Blbl9Bbm5fxZ5lbicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfDnWtfRMWfX1PFn1/Dh3JfUG5fQW5fxZ5uJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2J1Z8O8biBzYWdhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tlcnRpciBzYWdhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbaW5kaWtpXSBkZGRkIFtzYWdhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tkw7zDvW5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2dlw6dlbl0gZGRkZCBbc2FnYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgc2/FiCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMgw7bFiCcsXG4gICAgICAgICAgICBzOiAnYmlybsOkw6dlIHNla3VudCcsXG4gICAgICAgICAgICBtOiAnYmlyIG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXQnLFxuICAgICAgICAgICAgaDogJ2JpciBzYWdhdCcsXG4gICAgICAgICAgICBoaDogJyVkIHNhZ2F0JyxcbiAgICAgICAgICAgIGQ6ICdiaXIgZ8O8bicsXG4gICAgICAgICAgICBkZDogJyVkIGfDvG4nLFxuICAgICAgICAgICAgTTogJ2JpciBhw70nLFxuICAgICAgICAgICAgTU06ICclZCBhw70nLFxuICAgICAgICAgICAgeTogJ2JpciDDvXlsJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw715bCcsXG4gICAgICAgIH0sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEbyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIFwiJ3VuanlcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IChudW1iZXIgJSAxMDApIC0gYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUYWdhbG9nIChQaGlsaXBwaW5lcykgW3RsLXBoXVxuLy8hIGF1dGhvciA6IERhbiBIYWdtYW4gOiBodHRwczovL2dpdGh1Yi5jb20vaGFnbWFuZGFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdGxQaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RsLXBoJywge1xuICAgICAgICBtb250aHM6ICdFbmVyb19QZWJyZXJvX01hcnNvX0FicmlsX01heW9fSHVueW9fSHVseW9fQWdvc3RvX1NldHllbWJyZV9Pa3R1YnJlX05vYnllbWJyZV9EaXN5ZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnRW5lX1BlYl9NYXJfQWJyX01heV9IdW5fSHVsX0Fnb19TZXRfT2t0X05vYl9EaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnTGluZ2dvX0x1bmVzX01hcnRlc19NaXllcmt1bGVzX0h1d2ViZXNfQml5ZXJuZXNfU2FiYWRvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnTGluX0x1bl9NYXJfTWl5X0h1d19CaXlfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0xpX0x1X01hX01pX0h1X0JpX1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ01NL0QvWVlZWScsXG4gICAgICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gREQsIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ0xUIFtuZ2F5b25nIGFyYXddJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQnVrYXMgbmddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnTFQgW3NhIHN1c3Vub2QgbmFdIGRkZGQnLFxuICAgICAgICAgICAgbGFzdERheTogJ0xUIFtrYWhhcG9uXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ0xUIFtub29uZyBuYWthcmFhbmddIGRkZGQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdzYSBsb29iIG5nICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhbmcgbmFrYWxpcGFzJyxcbiAgICAgICAgICAgIHM6ICdpbGFuZyBzZWd1bmRvJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kbycsXG4gICAgICAgICAgICBtOiAnaXNhbmcgbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvJyxcbiAgICAgICAgICAgIGg6ICdpc2FuZyBvcmFzJyxcbiAgICAgICAgICAgIGhoOiAnJWQgb3JhcycsXG4gICAgICAgICAgICBkOiAnaXNhbmcgYXJhdycsXG4gICAgICAgICAgICBkZDogJyVkIGFyYXcnLFxuICAgICAgICAgICAgTTogJ2lzYW5nIGJ1d2FuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnV3YW4nLFxuICAgICAgICAgICAgeTogJ2lzYW5nIHRhb24nLFxuICAgICAgICAgICAgeXk6ICclZCB0YW9uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRsUGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS2xpbmdvbiBbdGxoXVxuLy8hIGF1dGhvciA6IERvbWluaWthIEtydWsgOiBodHRwczovL2dpdGh1Yi5jb20vYW1hcmFudGhyb3NlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbnVtYmVyc05vdW5zID0gJ3BhZ2hfd2HigJlfY2hh4oCZX3dlal9sb1NfdmFnaF9qYXZfU29jaF9jaG9yZ2hfSHV0Jy5zcGxpdCgnXycpO1xuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlRnV0dXJlKG91dHB1dCkge1xuICAgICAgICB2YXIgdGltZSA9IG91dHB1dDtcbiAgICAgICAgdGltZSA9XG4gICAgICAgICAgICBvdXRwdXQuaW5kZXhPZignamFqJykgIT09IC0xXG4gICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICdsZVMnXG4gICAgICAgICAgICAgICAgOiBvdXRwdXQuaW5kZXhPZignamFyJykgIT09IC0xXG4gICAgICAgICAgICAgICAgICA/IHRpbWUuc2xpY2UoMCwgLTMpICsgJ3dhUSdcbiAgICAgICAgICAgICAgICAgIDogb3V0cHV0LmluZGV4T2YoJ0RJUycpICE9PSAtMVxuICAgICAgICAgICAgICAgICAgICA/IHRpbWUuc2xpY2UoMCwgLTMpICsgJ25lbSdcbiAgICAgICAgICAgICAgICAgICAgOiB0aW1lICsgJyBwSXEnO1xuICAgICAgICByZXR1cm4gdGltZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVQYXN0KG91dHB1dCkge1xuICAgICAgICB2YXIgdGltZSA9IG91dHB1dDtcbiAgICAgICAgdGltZSA9XG4gICAgICAgICAgICBvdXRwdXQuaW5kZXhPZignamFqJykgIT09IC0xXG4gICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICdIdeKAmSdcbiAgICAgICAgICAgICAgICA6IG91dHB1dC5pbmRleE9mKCdqYXInKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAgID8gdGltZS5zbGljZSgwLCAtMykgKyAnd2VuJ1xuICAgICAgICAgICAgICAgICAgOiBvdXRwdXQuaW5kZXhPZignRElTJykgIT09IC0xXG4gICAgICAgICAgICAgICAgICAgID8gdGltZS5zbGljZSgwLCAtMykgKyAnYmVuJ1xuICAgICAgICAgICAgICAgICAgICA6IHRpbWUgKyAnIHJldCc7XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG51bWJlck5vdW4gPSBudW1iZXJBc05vdW4obnVtYmVyKTtcbiAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgbHVwJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgdHVwJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgcmVwJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFqJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFyJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgRElTJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG51bWJlckFzTm91bihudW1iZXIpIHtcbiAgICAgICAgdmFyIGh1bmRyZWQgPSBNYXRoLmZsb29yKChudW1iZXIgJSAxMDAwKSAvIDEwMCksXG4gICAgICAgICAgICB0ZW4gPSBNYXRoLmZsb29yKChudW1iZXIgJSAxMDApIC8gMTApLFxuICAgICAgICAgICAgb25lID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICB3b3JkID0gJyc7XG4gICAgICAgIGlmIChodW5kcmVkID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSBudW1iZXJzTm91bnNbaHVuZHJlZF0gKyAndmF0bGgnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW4gPiAwKSB7XG4gICAgICAgICAgICB3b3JkICs9ICh3b3JkICE9PSAnJyA/ICcgJyA6ICcnKSArIG51bWJlcnNOb3Vuc1t0ZW5dICsgJ21hSCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uZSA+IDApIHtcbiAgICAgICAgICAgIHdvcmQgKz0gKHdvcmQgIT09ICcnID8gJyAnIDogJycpICsgbnVtYmVyc05vdW5zW29uZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdvcmQgPT09ICcnID8gJ3BhZ2gnIDogd29yZDtcbiAgICB9XG5cbiAgICB2YXIgdGxoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGxoJywge1xuICAgICAgICBtb250aHM6ICd0ZXJh4oCZIGphciB3YeKAmV90ZXJh4oCZIGphciBjaGHigJlfdGVyYeKAmSBqYXIgd2VqX3RlcmHigJkgamFyIGxvU190ZXJh4oCZIGphciB2YWdoX3RlcmHigJkgamFyIGphdl90ZXJh4oCZIGphciBTb2NoX3RlcmHigJkgamFyIGNob3JnaF90ZXJh4oCZIGphciBIdXRfdGVyYeKAmSBqYXIgd2HigJltYUhfdGVyYeKAmSBqYXIgd2HigJltYUggd2HigJlfdGVyYeKAmSBqYXIgd2HigJltYUggY2hh4oCZJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdqYXIgd2HigJlfamFyIGNoYeKAmV9qYXIgd2VqX2phciBsb1NfamFyIHZhZ2hfamFyIGphdl9qYXIgU29jaF9qYXIgY2hvcmdoX2phciBIdXRfamFyIHdh4oCZbWFIX2phciB3YeKAmW1hSCB3YeKAmV9qYXIgd2HigJltYUggY2hh4oCZJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6XG4gICAgICAgICAgICAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOlxuICAgICAgICAgICAgJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0RhSGphal0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t3YeKAmWxlU10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdMTEwnLFxuICAgICAgICAgICAgbGFzdERheTogJ1t3YeKAmUh14oCZXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ0xMTCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogdHJhbnNsYXRlRnV0dXJlLFxuICAgICAgICAgICAgcGFzdDogdHJhbnNsYXRlUGFzdCxcbiAgICAgICAgICAgIHM6ICdwdVMgbHVwJyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiAnd2HigJkgdHVwJyxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiAnd2HigJkgcmVwJyxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiAnd2HigJkgamFqJyxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiAnd2HigJkgamFyJyxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiAnd2HigJkgRElTJyxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGxoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFR1cmtpc2ggW3RyXVxuLy8hIGF1dGhvcnMgOiBFcmhhbiBHdW5kb2dhbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9lcmhhbmd1bmRvZ2FuLFxuLy8hICAgICAgICAgICBCdXJhayBZacSfaXQgS2F5YTogaHR0cHM6Ly9naXRodWIuY29tL0JZS1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiBcIidpbmNpXCIsXG4gICAgICAgIDU6IFwiJ2luY2lcIixcbiAgICAgICAgODogXCInaW5jaVwiLFxuICAgICAgICA3MDogXCInaW5jaVwiLFxuICAgICAgICA4MDogXCInaW5jaVwiLFxuICAgICAgICAyOiBcIiduY2lcIixcbiAgICAgICAgNzogXCInbmNpXCIsXG4gICAgICAgIDIwOiBcIiduY2lcIixcbiAgICAgICAgNTA6IFwiJ25jaVwiLFxuICAgICAgICAzOiBcIifDvG5jw7xcIixcbiAgICAgICAgNDogXCInw7xuY8O8XCIsXG4gICAgICAgIDEwMDogXCInw7xuY8O8XCIsXG4gICAgICAgIDY6IFwiJ25jxLFcIixcbiAgICAgICAgOTogXCIndW5jdVwiLFxuICAgICAgICAxMDogXCIndW5jdVwiLFxuICAgICAgICAzMDogXCIndW5jdVwiLFxuICAgICAgICA2MDogXCInxLFuY8SxXCIsXG4gICAgICAgIDkwOiBcIifEsW5jxLFcIixcbiAgICB9O1xuXG4gICAgdmFyIHRyID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHInLCB7XG4gICAgICAgIG1vbnRoczogJ09jYWtfxZ51YmF0X01hcnRfTmlzYW5fTWF5xLFzX0hhemlyYW5fVGVtbXV6X0HEn3VzdG9zX0V5bMO8bF9Fa2ltX0thc8SxbV9BcmFsxLFrJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ09jYV/FnnViX01hcl9OaXNfTWF5X0hhel9UZW1fQcSfdV9FeWxfRWtpX0thc19BcmEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnUGF6YXJfUGF6YXJ0ZXNpX1NhbMSxX8OHYXLFn2FtYmFfUGVyxZ9lbWJlX0N1bWFfQ3VtYXJ0ZXNpJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnUGF6X1B6dF9TYWxfw4dhcl9QZXJfQ3VtX0NtdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdQel9QdF9TYV/Dh2FfUGVfQ3VfQ3QnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnw7bDticgOiAnw5bDlic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ8O2cycgOiAnw5ZTJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL8O2w7Z8w5bDlnzDtnN8w5ZTLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfDtnMnIHx8IGlucHV0ID09PSAnw5ZTJztcbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tidWfDvG4gc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t5YXLEsW4gc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbZ2VsZWNla10gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tkw7xuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tnZcOnZW5dIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgc29ucmEnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMO2bmNlJyxcbiAgICAgICAgICAgIHM6ICdiaXJrYcOnIHNhbml5ZScsXG4gICAgICAgICAgICBzczogJyVkIHNhbml5ZScsXG4gICAgICAgICAgICBtOiAnYmlyIGRha2lrYScsXG4gICAgICAgICAgICBtbTogJyVkIGRha2lrYScsXG4gICAgICAgICAgICBoOiAnYmlyIHNhYXQnLFxuICAgICAgICAgICAgaGg6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIGQ6ICdiaXIgZ8O8bicsXG4gICAgICAgICAgICBkZDogJyVkIGfDvG4nLFxuICAgICAgICAgICAgdzogJ2JpciBoYWZ0YScsXG4gICAgICAgICAgICB3dzogJyVkIGhhZnRhJyxcbiAgICAgICAgICAgIE06ICdiaXIgYXknLFxuICAgICAgICAgICAgTU06ICclZCBheScsXG4gICAgICAgICAgICB5OiAnYmlyIHnEsWwnLFxuICAgICAgICAgICAgeXk6ICclZCB5xLFsJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RvJzpcbiAgICAgICAgICAgICAgICBjYXNlICdERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgXCInxLFuY8SxXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSAobnVtYmVyICUgMTAwKSAtIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0gfHwgc3VmZml4ZXNbY10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGFsb3NzYW4gW3R6bF1cbi8vISBhdXRob3IgOiBSb2JpbiB2YW4gZGVyIFZsaWV0IDogaHR0cHM6Ly9naXRodWIuY29tL3JvYmluMHZhbjBkZXIwdlxuLy8hIGF1dGhvciA6IEl1c3TDrCBDYW51blxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgLy8gQWZ0ZXIgdGhlIHllYXIgdGhlcmUgc2hvdWxkIGJlIGEgc2xhc2ggYW5kIHRoZSBhbW91bnQgb2YgeWVhcnMgc2luY2UgRGVjZW1iZXIgMjYsIDE5NzkgaW4gUm9tYW4gbnVtZXJhbHMuXG4gICAgLy8gVGhpcyBpcyBjdXJyZW50bHkgdG9vIGRpZmZpY3VsdCAobWF5YmUgZXZlbiBpbXBvc3NpYmxlKSB0byBhZGQuXG4gICAgdmFyIHR6bCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bCcsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyX0ZldnJhZ2xoX01hcsOnX0F2csOvdV9NYWlfR8O8bl9KdWxpYV9HdXNjaHRfU2V0ZW12YXJfTGlzdG9ww6R0c19Ob2VtdmFyX1plY2VtdmFyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZXZfTWFyX0F2cl9NYWlfR8O8bl9KdWxfR3VzX1NldF9MaXNfTm9lX1plYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTw7psYWRpX0zDum5lw6dpX01haXR6aV9Nw6FyY3VyaV9YaMO6YWRpX1Zpw6luZXLDp2lfU8OhdHVyaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1PDumxfTMO6bl9NYWlfTcOhcl9YaMO6X1Zpw6lfU8OhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTw7pfTMO6X01hX03DoV9YaF9WaV9Tw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBbZGFsbGFzXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gW2RhbGxhc10gWVlZWSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgW2xpXSBELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZFxcJ298ZFxcJ2EvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJkJ29cIiA9PT0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/IFwiZCdvXCIgOiBcIkQnT1wiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/IFwiZCdhXCIgOiBcIkQnQVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tveGhpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2RlbcOgIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2llaXJpIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tzw7xyIGVsXSBkZGRkIFtsYXN0ZXUgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb3NwcmVpICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdqYSVzJyxcbiAgICAgICAgICAgIHM6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzOiBbJ3ZpZW5zYXMgc2VjdW5kcycsIFwiJ2llbnNhcyBzZWN1bmRzXCJdLFxuICAgICAgICAgICAgc3M6IFtudW1iZXIgKyAnIHNlY3VuZHMnLCAnJyArIG51bWJlciArICcgc2VjdW5kcyddLFxuICAgICAgICAgICAgbTogW1wiJ24gbcOtdXRcIiwgXCInaWVucyBtw611dFwiXSxcbiAgICAgICAgICAgIG1tOiBbbnVtYmVyICsgJyBtw611dHMnLCAnJyArIG51bWJlciArICcgbcOtdXRzJ10sXG4gICAgICAgICAgICBoOiBbXCInbiDDvm9yYVwiLCBcIidpZW5zYSDDvm9yYVwiXSxcbiAgICAgICAgICAgIGhoOiBbbnVtYmVyICsgJyDDvm9yYXMnLCAnJyArIG51bWJlciArICcgw75vcmFzJ10sXG4gICAgICAgICAgICBkOiBbXCInbiB6aXVhXCIsIFwiJ2llbnNhIHppdWFcIl0sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcgeml1YXMnLCAnJyArIG51bWJlciArICcgeml1YXMnXSxcbiAgICAgICAgICAgIE06IFtcIiduIG1lc1wiLCBcIidpZW5zIG1lc1wiXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyBtZXNlbicsICcnICsgbnVtYmVyICsgJyBtZXNlbiddLFxuICAgICAgICAgICAgeTogW1wiJ24gYXJcIiwgXCInaWVucyBhclwiXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyBhcnMnLCAnJyArIG51bWJlciArICcgYXJzJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0Z1dHVyZVxuICAgICAgICAgICAgPyBmb3JtYXRba2V5XVswXVxuICAgICAgICAgICAgOiB3aXRob3V0U3VmZml4XG4gICAgICAgICAgICAgID8gZm9ybWF0W2tleV1bMF1cbiAgICAgICAgICAgICAgOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHpsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENlbnRyYWwgQXRsYXMgVGFtYXppZ2h0IFt0em1dXG4vLyEgYXV0aG9yIDogQWJkZWwgU2FpZCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0em0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0em0nLCB7XG4gICAgICAgIG1vbnRoczogJ+K1ieK1j+K1j+K0sOK1ouK1lF/itLHitZXitLDitaLitZVf4rWO4rSw4rWV4rWaX+K1ieK0seK1lOK1ieK1lF/itY7itLDitaLitaLitZNf4rWi4rWT4rWP4rWi4rWTX+K1ouK1k+K1jeK1ouK1k+K1o1/itZbitZPitZvitZxf4rWb4rWT4rWc4rSw4rWP4rSx4rWJ4rWUX+K0veK1n+K1k+K0seK1lV/itY/itZPitaHitLDitY/itLHitYnitZRf4rS34rWT4rWK4rWP4rSx4rWJ4rWUJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICfitYnitY/itY/itLDitaLitZRf4rSx4rWV4rSw4rWi4rWVX+K1juK0sOK1leK1ml/itYnitLHitZTitYnitZRf4rWO4rSw4rWi4rWi4rWTX+K1ouK1k+K1j+K1ouK1k1/itaLitZPitY3itaLitZPitaNf4rWW4rWT4rWb4rWcX+K1m+K1k+K1nOK0sOK1j+K0seK1ieK1lF/itL3itZ/itZPitLHitZVf4rWP4rWT4rWh4rSw4rWP4rSx4rWJ4rWUX+K0t+K1k+K1iuK1j+K0seK1ieK1lCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+K0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+K0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vitLDitZnitLfitYUg4rS0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+K0sOK1meK0veK0sCDitLRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+K0sOK1muK0sOK1j+K1nCDitLRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ+K0t+K0sOK0t+K1hSDitZkg4rWi4rSw4rWPICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfitaLitLDitY8gJXMnLFxuICAgICAgICAgICAgczogJ+K1ieK1juK1ieK0vScsXG4gICAgICAgICAgICBzczogJyVkIOK1ieK1juK1ieK0vScsXG4gICAgICAgICAgICBtOiAn4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgICAgIGg6ICfitZnitLDitYTitLAnLFxuICAgICAgICAgICAgaGg6ICclZCDitZzitLDitZnitZnitLDitYTitYnitY8nLFxuICAgICAgICAgICAgZDogJ+K0sOK1meK1mScsXG4gICAgICAgICAgICBkZDogJyVkIG/itZnitZnitLDitY8nLFxuICAgICAgICAgICAgTTogJ+K0sOK1om/itZPitZQnLFxuICAgICAgICAgICAgTU06ICclZCDitYnitaLitaLitYnitZTitY8nLFxuICAgICAgICAgICAgeTogJ+K0sOK1meK0s+K0sOK1mScsXG4gICAgICAgICAgICB5eTogJyVkIOK1ieK1meK0s+K0sOK1meK1jycsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHptO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENlbnRyYWwgQXRsYXMgVGFtYXppZ2h0IExhdGluIFt0em0tbGF0bl1cbi8vISBhdXRob3IgOiBBYmRlbCBTYWlkIDogaHR0cHM6Ly9naXRodWIuY29tL2FiZGVsc2FpZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHR6bUxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0em0tbGF0bicsIHtcbiAgICAgICAgbW9udGhzOiAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6XG4gICAgICAgICAgICAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1thc2RraCBnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2Fza2EgZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtnXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2Fzc2FudCBnXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2ddIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFka2ggcyB5YW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3lhbiAlcycsXG4gICAgICAgICAgICBzOiAnaW1paycsXG4gICAgICAgICAgICBzczogJyVkIGltaWsnLFxuICAgICAgICAgICAgbTogJ21pbnXhuI0nLFxuICAgICAgICAgICAgbW06ICclZCBtaW514biNJyxcbiAgICAgICAgICAgIGg6ICdzYcmbYScsXG4gICAgICAgICAgICBoaDogJyVkIHRhc3NhyZtpbicsXG4gICAgICAgICAgICBkOiAnYXNzJyxcbiAgICAgICAgICAgIGRkOiAnJWQgb3NzYW4nLFxuICAgICAgICAgICAgTTogJ2F5b3dyJyxcbiAgICAgICAgICAgIE1NOiAnJWQgaXl5aXJuJyxcbiAgICAgICAgICAgIHk6ICdhc2dhcycsXG4gICAgICAgICAgICB5eTogJyVkIGlzZ2FzbicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHptTGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVeWdodXIgKENoaW5hKSBbdWctY25dXG4vLyEgYXV0aG9yOiBib3lhcSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ib3lhcVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHVnQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1Zy1jbicsIHtcbiAgICAgICAgbW9udGhzOiAn2YrYp9mG24vYp9ixX9mB25Dbi9ix2KfZhF/Zhdin2LHYql/Yptin2b7YsduQ2YRf2YXYp9mKX9im2YnZituH2YZf2KbZidmK24fZhF/Yptin24vYutuH2LPYql/Ys9uQ2YbYqtuV2KjZidixX9im24bZg9iq25XYqNmJ2LFf2YbZiNmK2KfYqNmJ2LFf2K/bkNmD2KfYqNmJ2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OlxuICAgICAgICAgICAgJ9mK2KfZhtuL2KfYsV/ZgduQ24vYsdin2YRf2YXYp9ix2Kpf2KbYp9m+2LHbkNmEX9mF2KfZil/YptmJ2Yrbh9mGX9im2YnZituH2YRf2KbYp9uL2Lrbh9iz2Kpf2LPbkNmG2Krbldio2YnYsV/YptuG2YPYqtuV2KjZidixX9mG2YjZitin2KjZidixX9iv25DZg9in2KjZidixJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2YrbldmD2LTbldmG2KjblV/Yr9uI2LTbldmG2KjblV/Ys9uV2YrYtNuV2YbYqNuVX9qG2KfYsdi025XZhtio25Vf2b7bldmK2LTbldmG2KjblV/YrNuI2YXblV/YtNuV2YbYqNuVJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2YrblV/Yr9uIX9iz25Vf2obYp1/ZvtuVX9is24hf2LTblScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfZituVX9iv24hf2LPblV/ahtinX9m+25Vf2KzbiF/YtNuVJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YknLFxuICAgICAgICAgICAgTExMOiAnWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZidiMIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRk2IwgWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZidiMIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9mK25DYsdmJ2YUg2YPbkNqG25V82LPbldq+25XYsXzahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhnzahtuI2LR82obbiNi02KrZidmGINmD25DZitmJ2YZ82YPbldqGLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn2YrbkNix2YnZhSDZg9uQ2obblScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ9iz25XavtuV2LEnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9qG24jYtNiq2YnZhiDZg9uQ2YrZidmGJyB8fCBtZXJpZGllbSA9PT0gJ9mD25XahicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZituQ2LHZidmFINmD25DahtuVJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9iz25XavtuV2LEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtNiq2YnZhiDYqNuH2LHbh9mGJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfahtuI2LQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtNiq2YnZhiDZg9uQ2YrZidmGJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZg9uV2oYnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYqNuI2q/biNmGINiz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2Kbbldiq25Ug2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb2YPbkNmE25XYsdmD2YldIGRkZGQgW9iz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KrbhtmG24jar9uI2YZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9im2KfZhNiv2YnZhtmC2YldIGRkZGQgW9iz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg2YPbkNmK2YnZhicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg2Kjbh9ix24fZhicsXG4gICAgICAgICAgICBzOiAn2YbbldqG2obblSDYs9uQ2YPZiNmG2KonLFxuICAgICAgICAgICAgc3M6ICclZCDYs9uQ2YPZiNmG2KonLFxuICAgICAgICAgICAgbTogJ9io2YnYsSDZhdmJ2Ybbh9iqJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2YXZidmG24fYqicsXG4gICAgICAgICAgICBoOiAn2KjZidixINiz2KfYptuV2KonLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2KbbldiqJyxcbiAgICAgICAgICAgIGQ6ICfYqNmJ2LEg2YPbiNmGJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2YPbiNmGJyxcbiAgICAgICAgICAgIE06ICfYqNmJ2LEg2KbYp9mKJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KbYp9mKJyxcbiAgICAgICAgICAgIHk6ICfYqNmJ2LEg2YrZidmEJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2YrZidmEJyxcbiAgICAgICAgfSxcblxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oLdmD24jZhtmJfC3Yptin2Yp8Ldq+25XZvtiq25UpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdmD24jZhtmJJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct2r7bldm+2KrblSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICAvLyBHQi9UIDc0MDgtMTk5NOOAiuaVsOaNruWFg+WSjOS6pOaNouagvOW8j8K35L+h5oGv5Lqk5o2iwrfml6XmnJ/lkozml7bpl7TooajnpLrms5XjgIvkuI5JU08gODYwMToxOTg4562J5pWIXG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdWdDbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVa3JhaW5pYW4gW3VrXVxuLy8hIGF1dGhvciA6IHplbWxhbmluIDogaHR0cHM6Ly9naXRodWIuY29tL3plbWxhbmluXG4vLyEgQXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMVxuICAgICAgICAgICAgPyBmb3Jtc1swXVxuICAgICAgICAgICAgOiBudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMClcbiAgICAgICAgICAgICAgPyBmb3Jtc1sxXVxuICAgICAgICAgICAgICA6IGZvcm1zWzJdO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzczogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTQuF/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNC4X9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtbTogd2l0aG91dFN1ZmZpeCA/ICfRhdCy0LjQu9C40L3QsF/RhdCy0LjQu9C40L3QuF/RhdCy0LjQu9C40L0nIDogJ9GF0LLQuNC70LjQvdGDX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvScsXG4gICAgICAgICAgICBoaDogd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LBf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L0nIDogJ9Cz0L7QtNC40L3Rg1/Qs9C+0LTQuNC90Lhf0LPQvtC00LjQvScsXG4gICAgICAgICAgICBkZDogJ9C00LXQvdGMX9C00L3Rll/QtNC90ZbQsicsXG4gICAgICAgICAgICBNTTogJ9C80ZbRgdGP0YbRjF/QvNGW0YHRj9GG0ZZf0LzRltGB0Y/RhtGW0LInLFxuICAgICAgICAgICAgeXk6ICfRgNGW0Lpf0YDQvtC60Lhf0YDQvtC60ZbQsicsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstC40LvQuNC90LAnIDogJ9GF0LLQuNC70LjQvdGDJztcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQvtC00LjQvdCwJyA6ICfQs9C+0LTQuNC90YMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd2Vla2RheXNDYXNlUmVwbGFjZShtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0ge1xuICAgICAgICAgICAgICAgIG5vbWluYXRpdmU6XG4gICAgICAgICAgICAgICAgICAgICfQvdC10LTRltC70Y9f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNCwX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRj1/RgdGD0LHQvtGC0LAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgYWNjdXNhdGl2ZTpcbiAgICAgICAgICAgICAgICAgICAgJ9C90LXQtNGW0LvRjl/Qv9C+0L3QtdC00ZbQu9C+0Lpf0LLRltCy0YLQvtGA0L7Qul/RgdC10YDQtdC00YNf0YfQtdGC0LLQtdGAX9C/4oCZ0Y/RgtC90LjRhtGOX9GB0YPQsdC+0YLRgycuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBnZW5pdGl2ZTpcbiAgICAgICAgICAgICAgICAgICAgJ9C90LXQtNGW0LvRll/Qv9C+0L3QtdC00ZbQu9C60LBf0LLRltCy0YLQvtGA0LrQsF/RgdC10YDQtdC00Lhf0YfQtdGC0LLQtdGA0LPQsF/Qv+KAmdGP0YLQvdC40YbRll/RgdGD0LHQvtGC0LgnLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm91bkNhc2U7XG5cbiAgICAgICAgaWYgKG0gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5c1snbm9taW5hdGl2ZSddXG4gICAgICAgICAgICAgICAgLnNsaWNlKDEsIDcpXG4gICAgICAgICAgICAgICAgLmNvbmNhdCh3ZWVrZGF5c1snbm9taW5hdGl2ZSddLnNsaWNlKDAsIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrZGF5c1snbm9taW5hdGl2ZSddO1xuICAgICAgICB9XG5cbiAgICAgICAgbm91bkNhc2UgPSAvKFxcW1vQktCy0KPRg11cXF0pID9kZGRkLy50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgID8gJ2FjY3VzYXRpdmUnXG4gICAgICAgICAgICA6IC9cXFs/KD860LzQuNC90YPQu9C+0Zd80L3QsNGB0YLRg9C/0L3QvtGXKT8gP1xcXSA/ZGRkZC8udGVzdChmb3JtYXQpXG4gICAgICAgICAgICAgID8gJ2dlbml0aXZlJ1xuICAgICAgICAgICAgICA6ICdub21pbmF0aXZlJztcbiAgICAgICAgcmV0dXJuIHdlZWtkYXlzW25vdW5DYXNlXVttLmRheSgpXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyICsgJ9C+JyArICh0aGlzLmhvdXJzKCkgPT09IDExID8gJ9CxJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgdWsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1aycsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfRgdGW0YfQvdGPX9C70Y7RgtC+0LPQvl/QsdC10YDQtdC30L3Rj1/QutCy0ZbRgtC90Y9f0YLRgNCw0LLQvdGPX9GH0LXRgNCy0L3Rj1/Qu9C40L/QvdGPX9GB0LXRgNC/0L3Rj1/QstC10YDQtdGB0L3Rj1/QttC+0LLRgtC90Y9f0LvQuNGB0YLQvtC/0LDQtNCwX9Cz0YDRg9C00L3Rjycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTpcbiAgICAgICAgICAgICAgICAn0YHRltGH0LXQvdGMX9C70Y7RgtC40Llf0LHQtdGA0LXQt9C10L3RjF/QutCy0ZbRgtC10L3RjF/RgtGA0LDQstC10L3RjF/Rh9C10YDQstC10L3RjF/Qu9C40L/QtdC90Yxf0YHQtdGA0L/QtdC90Yxf0LLQtdGA0LXRgdC10L3RjF/QttC+0LLRgtC10L3RjF/Qu9C40YHRgtC+0L/QsNC0X9Cz0YDRg9C00LXQvdGMJy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRgdGW0Ydf0LvRjtGCX9Cx0LXRgF/QutCy0ZbRgl/RgtGA0LDQsl/Rh9C10YDQsl/Qu9C40L9f0YHQtdGA0L9f0LLQtdGAX9C20L7QstGCX9C70LjRgdGCX9Cz0YDRg9C0Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogd2Vla2RheXNDYXNlUmVwbGFjZSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWSDRgC4nLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkg0YAuLCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkg0YAuLCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9Ch0YzQvtCz0L7QtNC90ZYgJyksXG4gICAgICAgICAgICBuZXh0RGF5OiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9CX0LDQstGC0YDQsCAnKSxcbiAgICAgICAgICAgIGxhc3REYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JLRh9C+0YDQsCAnKSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9CjXSBkZGRkIFsnKSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9Cc0LjQvdGD0LvQvtGXXSBkZGRkIFsnKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JzQuNC90YPQu9C+0LPQvl0gZGRkZCBbJykuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDRgtC+0LzRgycsXG4gICAgICAgICAgICBzOiAn0LTQtdC60ZbQu9GM0LrQsCDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoOiAn0LPQvtC00LjQvdGDJyxcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZDogJ9C00LXQvdGMJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTTogJ9C80ZbRgdGP0YbRjCcsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHk6ICfRgNGW0LonLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIE0uIEUuOiB0aG9zZSB0d28gYXJlIHZpcnR1YWxseSB1bnVzZWQgYnV0IGEgdXNlciBtaWdodCB3YW50IHRvIGltcGxlbWVudCB0aGVtIGZvciBoaXMvaGVyIHdlYnNpdGUgZm9yIHNvbWUgcmVhc29uXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRlnzRgNCw0L3QutGDfNC00L3Rj3zQstC10YfQvtGA0LAvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0L7RgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfRlic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YDQsNC90LrRgyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LTQvdGPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQstC10YfQvtGA0LAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC5fNCz0L4pLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC5JztcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQvic7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFVyZHUgW3VyXVxuLy8hIGF1dGhvciA6IFNhd29vZCBBbGFtIDogaHR0cHM6Ly9naXRodWIuY29tL2libmVzYXllZWRcbi8vISBhdXRob3IgOiBaYWNrIDogaHR0cHM6Ly9naXRodWIuY29tL1phY2tWaXNpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICAgICAn2KzZhtmI2LHbjCcsXG4gICAgICAgICAgICAn2YHYsdmI2LHbjCcsXG4gICAgICAgICAgICAn2YXYp9ix2oYnLFxuICAgICAgICAgICAgJ9in2b7YsduM2YQnLFxuICAgICAgICAgICAgJ9mF2KbbjCcsXG4gICAgICAgICAgICAn2KzZiNmGJyxcbiAgICAgICAgICAgICfYrNmI2YTYp9im24wnLFxuICAgICAgICAgICAgJ9in2q/Ys9iqJyxcbiAgICAgICAgICAgICfYs9iq2YXYqNixJyxcbiAgICAgICAgICAgICfYp9qp2KrZiNio2LEnLFxuICAgICAgICAgICAgJ9mG2YjZhdio2LEnLFxuICAgICAgICAgICAgJ9iv2LPZhdio2LEnLFxuICAgICAgICBdLFxuICAgICAgICBkYXlzID0gWyfYp9iq2YjYp9ixJywgJ9m+24zYsScsICfZhdmG2q/ZhCcsICfYqNiv2r4nLCAn2KzZhdi52LHYp9iqJywgJ9is2YXYuduBJywgJ9uB2YHYqtuBJ107XG5cbiAgICB2YXIgdXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1cicsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGF5cyxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i12KjYrXzYtNin2YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtdio2K0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnO1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYotisINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9qp2YQg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2q/YsNi02KrbgSDYsdmI2LIg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9qv2LDYtNiq24FdIGRkZGQgW9io2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINio2LnYrycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg2YLYqNmEJyxcbiAgICAgICAgICAgIHM6ICfahtmG2K8g2LPbjNqp2YbaiCcsXG4gICAgICAgICAgICBzczogJyVkINiz24zaqdmG2ognLFxuICAgICAgICAgICAgbTogJ9in24zaqSDZhdmG2bknLFxuICAgICAgICAgICAgbW06ICclZCDZhdmG2bknLFxuICAgICAgICAgICAgaDogJ9in24zaqSDar9q+2YbZuduBJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2q/avtmG2bnbkicsXG4gICAgICAgICAgICBkOiAn2KfbjNqpINiv2YYnLFxuICAgICAgICAgICAgZGQ6ICclZCDYr9mGJyxcbiAgICAgICAgICAgIE06ICfYp9uM2qkg2YXYp9uBJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2YXYp9uBJyxcbiAgICAgICAgICAgIHk6ICfYp9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPYp9mEJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVXpiZWsgW3V6XVxuLy8hIGF1dGhvciA6IFNhcmRvciBNdW1pbm92IDogaHR0cHM6Ly9naXRodWIuY29tL211bWlub2ZmXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdXogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1eicsIHtcbiAgICAgICAgbW9udGhzOiAn0Y/QvdCy0LDRgF/RhNC10LLRgNCw0Ltf0LzQsNGA0YJf0LDQv9GA0LXQu1/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YBf0L7QutGC0Y/QsdGAX9C90L7Rj9Cx0YBf0LTQtdC60LDQsdGAJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9Cv0LrRiNCw0L3QsdCwX9CU0YPRiNCw0L3QsdCwX9Ch0LXRiNCw0L3QsdCwX9Cn0L7RgNGI0LDQvdCx0LBf0J/QsNC50YjQsNC90LHQsF/QltGD0LzQsF/QqNCw0L3QsdCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0K/QutGIX9CU0YPRiF/QodC10Yhf0KfQvtGAX9Cf0LDQuV/QltGD0Lxf0KjQsNC9Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9Cv0Lpf0JTRg1/QodC1X9Cn0L5f0J/QsF/QltGDX9Co0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ0QgTU1NTSBZWVlZLCBkZGRkIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0JHRg9Cz0YPQvSDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0K3RgNGC0LDQs9CwXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JrQtdGH0LAg0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vQo9GC0LPQsNC9XSBkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0K/QutC40L0gJXMg0LjRh9C40LTQsCcsXG4gICAgICAgICAgICBwYXN0OiAn0JHQuNGAINC90LXRh9CwICVzINC+0LvQtNC40L0nLFxuICAgICAgICAgICAgczogJ9GE0YPRgNGB0LDRgicsXG4gICAgICAgICAgICBzczogJyVkINGE0YPRgNGB0LDRgicsXG4gICAgICAgICAgICBtOiAn0LHQuNGAINC00LDQutC40LrQsCcsXG4gICAgICAgICAgICBtbTogJyVkINC00LDQutC40LrQsCcsXG4gICAgICAgICAgICBoOiAn0LHQuNGAINGB0L7QsNGCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICAgICAgZDogJ9Cx0LjRgCDQutGD0L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQutGD0L0nLFxuICAgICAgICAgICAgTTogJ9Cx0LjRgCDQvtC5JyxcbiAgICAgICAgICAgIE1NOiAnJWQg0L7QuScsXG4gICAgICAgICAgICB5OiAn0LHQuNGAINC50LjQuycsXG4gICAgICAgICAgICB5eTogJyVkINC50LjQuycsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB1ejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVemJlayBMYXRpbiBbdXotbGF0bl1cbi8vISBhdXRob3IgOiBSYXN1bGJlayBNaXJ6YXlldiA6IGdpdGh1Yi5jb20vUmFzdWxiZWVla1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHV6TGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3V6LWxhdG4nLCB7XG4gICAgICAgIG1vbnRoczogJ1lhbnZhcl9GZXZyYWxfTWFydF9BcHJlbF9NYXlfSXl1bl9JeXVsX0F2Z3VzdF9TZW50YWJyX09rdGFicl9Ob3lhYnJfRGVrYWJyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ1lhbl9GZXZfTWFyX0Fwcl9NYXlfSXl1bl9JeXVsX0F2Z19TZW5fT2t0X05veV9EZWsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ1lha3NoYW5iYV9EdXNoYW5iYV9TZXNoYW5iYV9DaG9yc2hhbmJhX1BheXNoYW5iYV9KdW1hX1NoYW5iYScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnWWFrX0R1c2hfU2VzaF9DaG9yX1BheV9KdW1fU2hhbicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdZYV9EdV9TZV9DaG9fUGFfSnVfU2hhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0J1Z3VuIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1tFcnRhZ2FdIExUIFtkYV0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrdW5pIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1tLZWNoYSBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBcIltPJ3RnYW5dIGRkZGQgW2t1bmkgc29hdF0gTFQgW2RhXVwiLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdZYXFpbiAlcyBpY2hpZGEnLFxuICAgICAgICAgICAgcGFzdDogJ0JpciBuZWNoYSAlcyBvbGRpbicsXG4gICAgICAgICAgICBzOiAnc29uaXlhJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc29uaXlhJyxcbiAgICAgICAgICAgIG06ICdiaXIgZGFxaXFhJyxcbiAgICAgICAgICAgIG1tOiAnJWQgZGFxaXFhJyxcbiAgICAgICAgICAgIGg6ICdiaXIgc29hdCcsXG4gICAgICAgICAgICBoaDogJyVkIHNvYXQnLFxuICAgICAgICAgICAgZDogJ2JpciBrdW4nLFxuICAgICAgICAgICAgZGQ6ICclZCBrdW4nLFxuICAgICAgICAgICAgTTogJ2JpciBveScsXG4gICAgICAgICAgICBNTTogJyVkIG95JyxcbiAgICAgICAgICAgIHk6ICdiaXIgeWlsJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWlsJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHV6TGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBWaWV0bmFtZXNlIFt2aV1cbi8vISBhdXRob3IgOiBCYW5nIE5ndXllbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iYW5nbmtcbi8vISBhdXRob3IgOiBDaGllbiBLaXJhIDogaHR0cHM6Ly9naXRodWIuY29tL2NoaWVua2lyYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHZpID0gbW9tZW50LmRlZmluZUxvY2FsZSgndmknLCB7XG4gICAgICAgIG1vbnRoczogJ3Row6FuZyAxX3Row6FuZyAyX3Row6FuZyAzX3Row6FuZyA0X3Row6FuZyA1X3Row6FuZyA2X3Row6FuZyA3X3Row6FuZyA4X3Row6FuZyA5X3Row6FuZyAxMF90aMOhbmcgMTFfdGjDoW5nIDEyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdUaGcgMDFfVGhnIDAyX1RoZyAwM19UaGcgMDRfVGhnIDA1X1RoZyAwNl9UaGcgMDdfVGhnIDA4X1RoZyAwOV9UaGcgMTBfVGhnIDExX1RoZyAxMicuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2No4bunIG5o4bqtdF90aOG7qSBoYWlfdGjhu6kgYmFfdGjhu6kgdMawX3Ro4bupIG7Eg21fdGjhu6kgc8OhdV90aOG7qSBi4bqjeScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9zYXxjaC9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXmNoJC9pLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3NhJyA6ICdTQSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2NoJyA6ICdDSCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFtuxINtXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBbbsSDbV0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFtuxINtXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdERC9NL1lZWVknLFxuICAgICAgICAgICAgbGw6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0jDtG0gbmF5IGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTmfDoHkgbWFpIGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSMO0bSBxdWEgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt0deG6p24gdHLGsOG7m2MgbMO6Y10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyB04bubaScsXG4gICAgICAgICAgICBwYXN0OiAnJXMgdHLGsOG7m2MnLFxuICAgICAgICAgICAgczogJ3bDoGkgZ2nDonknLFxuICAgICAgICAgICAgc3M6ICclZCBnacOieScsXG4gICAgICAgICAgICBtOiAnbeG7mXQgcGjDunQnLFxuICAgICAgICAgICAgbW06ICclZCBwaMO6dCcsXG4gICAgICAgICAgICBoOiAnbeG7mXQgZ2nhu50nLFxuICAgICAgICAgICAgaGg6ICclZCBnaeG7nScsXG4gICAgICAgICAgICBkOiAnbeG7mXQgbmfDoHknLFxuICAgICAgICAgICAgZGQ6ICclZCBuZ8OgeScsXG4gICAgICAgICAgICB3OiAnbeG7mXQgdHXhuqduJyxcbiAgICAgICAgICAgIHd3OiAnJWQgdHXhuqduJyxcbiAgICAgICAgICAgIE06ICdt4buZdCB0aMOhbmcnLFxuICAgICAgICAgICAgTU06ICclZCB0aMOhbmcnLFxuICAgICAgICAgICAgeTogJ23hu5l0IG7Eg20nLFxuICAgICAgICAgICAgeXk6ICclZCBuxINtJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBzZXVkbyBbeC1wc2V1ZG9dXG4vLyEgYXV0aG9yIDogQW5kcmV3IEhvb2QgOiBodHRwczovL2dpdGh1Yi5jb20vYW5kcmV3aG9vZDEyNVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHhQc2V1ZG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd4LXBzZXVkbycsIHtcbiAgICAgICAgbW9udGhzOiAnSn7DocOxw7rDoX5yw71fRn7DqWJyw7p+w6Fyw71ffk3DoXJjfmhfw4FwfnLDrWxffk3DocO9X35Kw7rDscOpfl9Kw7psfsO9X8OBw7p+Z8O6c3R+X1PDqXB+dMOpbWJ+w6lyX8OTfmN0w7NifsOpcl/DkX7Ds3bDqW1+YsOpcl9+RMOpY8Opfm1iw6lyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDpcbiAgICAgICAgICAgICdKfsOhw7FffkbDqWJffk3DoXJffsOBcHJffk3DocO9X35Kw7rDsV9+SsO6bF9+w4HDumdfflPDqXBffsOTY3RffsORw7N2X35Ew6ljJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOlxuICAgICAgICAgICAgJ1N+w7rDsWTDoX7DvV9Nw7N+w7Fkw6HDvX5fVMO6w6l+c2TDocO9fl9Xw6lkfsOxw6lzZH7DocO9X1R+aMO6cnN+ZMOhw71ffkZyw61kfsOhw71fU37DoXTDunJ+ZMOhw70nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N+w7rDsV9+TcOzw7FfflTDusOpX35Xw6lkX35UaMO6X35GcsOtX35Tw6F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N+w7pfTcOzfl9Uw7pfflfDqV9UfmhfRnJ+X1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1R+w7Nkw6F+w70gw6F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1R+w7Ntw7N+cnLDs353IMOhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbw51+w6lzdH7DqXJkw6F+w70gw6F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMfsOhc3RdIGRkZGQgW8OhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfDrX7DsSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgw6F+Z8OzJyxcbiAgICAgICAgICAgIHM6ICfDoSB+ZsOpdyB+c8OpY8OzfsOxZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzfsOpY8Ozw7F+ZHMnLFxuICAgICAgICAgICAgbTogJ8OhIH5tw63DsX7DunTDqScsXG4gICAgICAgICAgICBtbTogJyVkIG1+w63DscO6fnTDqXMnLFxuICAgICAgICAgICAgaDogJ8OhfsOxIGjDs37DunInLFxuICAgICAgICAgICAgaGg6ICclZCBofsOzw7pycycsXG4gICAgICAgICAgICBkOiAnw6EgfmTDocO9JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZH7DocO9cycsXG4gICAgICAgICAgICBNOiAnw6Egfm3Ds8OxfnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbX7Ds8OxdH5ocycsXG4gICAgICAgICAgICB5OiAnw6EgfsO9w6nDoXInLFxuICAgICAgICAgICAgeXk6ICclZCDDvX7DqcOhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4geFBzZXVkbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBZb3J1YmEgTmlnZXJpYSBbeW9dXG4vLyEgYXV0aG9yIDogQXRvbGFnYmUgQWJpc295ZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRlbGEtYmF0b2xhZ2JlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgeW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd5bycsIHtcbiAgICAgICAgbW9udGhzOiAnU+G6ucyBcuG6ucyBX0XMgHJlzIBsZcyAX+G6uHLhurnMgG5hzIBfScyAZ2JlzIFfRcyAYmliaV9PzIBrdcyAZHVfQWfhurltb19PzIBndcyBbl9Pd2V3ZV/hu4zMgHdhzIByYcyAX0JlzIFsdcyBX+G7jMyAcOG6ucyAzIAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnU+G6ucyBcl9FzIBybF/hurhybl9JzIBnYl9FzIBiaV9PzIBrdcyAX0Fn4bq5X0/MgGd1zIFfT3dlX+G7jMyAd2HMgF9CZcyBbF/hu4zMgHDhurnMgMyAJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0HMgGnMgGt1zIFfQWplzIFfScyAc+G6ucyBZ3VuX+G7jGrhu43MgXJ1zIFf4buMauG7jcyBYuG7jV/hurh0acyAX0HMgGJhzIFt4bq5zIF0YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0HMgGnMgGtfQWplzIFfScyAc+G6ucyBX+G7jGpyX+G7jGpiX+G6uHRpzIBfQcyAYmHMgScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdBzIBpzIBfQWpfScyAc1/hu4xyX+G7jGJf4bq4dF9BzIBiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tPzIBuacyAIG5pXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+G7jMyAbGEgbmldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBcImRkZGQgW+G7jHPhurnMgCB0b8yBbidi4buNXSBbbmldIExUXCIsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0HMgG5hIG5pXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+G7jHPhurnMgCB0b8yBbOG7jcyBXSBbbmldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnbmnMgSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMga+G7jWphzIEnLFxuICAgICAgICAgICAgczogJ2nMgHPhurlqdcyBIGFheWHMgSBkaWUnLFxuICAgICAgICAgICAgc3M6ICdhYXlhzIEgJWQnLFxuICAgICAgICAgICAgbTogJ2nMgHPhurlqdcyBIGthbicsXG4gICAgICAgICAgICBtbTogJ2nMgHPhurlqdcyBICVkJyxcbiAgICAgICAgICAgIGg6ICd3YcyBa2F0aSBrYW4nLFxuICAgICAgICAgICAgaGg6ICd3YcyBa2F0aSAlZCcsXG4gICAgICAgICAgICBkOiAn4buNauG7jcyBIGthbicsXG4gICAgICAgICAgICBkZDogJ+G7jWrhu43MgSAlZCcsXG4gICAgICAgICAgICBNOiAnb3N1zIAga2FuJyxcbiAgICAgICAgICAgIE1NOiAnb3N1zIAgJWQnLFxuICAgICAgICAgICAgeTogJ+G7jWR1zIFuIGthbicsXG4gICAgICAgICAgICB5eTogJ+G7jWR1zIFuICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL+G7jWrhu43MgVxcc1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogJ+G7jWrhu43MgSAlZCcsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB5bztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaGluZXNlIChDaGluYSkgW3poLWNuXVxuLy8hIGF1dGhvciA6IHN1dXBpYyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdXVwaWNcbi8vISBhdXRob3IgOiBaZW5vIFplbmcgOiBodHRwczovL2dpdGh1Yi5jb20vemVub3plbmdcbi8vISBhdXRob3IgOiB1dTEwOSA6IGh0dHBzOi8vZ2l0aHViLmNvbS91dTEwOVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHpoQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1jbicsIHtcbiAgICAgICAgbW9udGhzOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn5ZGo5pelX+WRqOS4gF/lkajkuoxf5ZGo5LiJX+WRqOWbm1/lkajkupRf5ZGo5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMOiAnWVlZWeW5tE3mnIhE5pelQWjngrltbeWIhicsXG4gICAgICAgICAgICBMTExMOiAnWVlZWeW5tE3mnIhE5pelZGRkZEFo54K5bW3liIYnLFxuICAgICAgICAgICAgbDogJ1lZWVkvTS9EJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gJ+S4reWNiCdcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vmmI7lpKldTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5LiLXWRkZExUJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vmnKxdZGRkTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndlZWsoKSAhPT0gbm93LndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vkuIpdZGRkTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW+acrF1kZGRMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOWRqCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5ZGoJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5ZCOJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5Yeg56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG06ICcxIOWIhumSnycsXG4gICAgICAgICAgICBtbTogJyVkIOWIhumSnycsXG4gICAgICAgICAgICBoOiAnMSDlsI/ml7YnLFxuICAgICAgICAgICAgaGg6ICclZCDlsI/ml7YnLFxuICAgICAgICAgICAgZDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIHc6ICcxIOWRqCcsXG4gICAgICAgICAgICB3dzogJyVkIOWRqCcsXG4gICAgICAgICAgICBNOiAnMSDkuKrmnIgnLFxuICAgICAgICAgICAgTU06ICclZCDkuKrmnIgnLFxuICAgICAgICAgICAgeTogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5OiAnJWQg5bm0JyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgLy8gR0IvVCA3NDA4LTE5OTTjgIrmlbDmja7lhYPlkozkuqTmjaLmoLzlvI/Ct+S/oeaBr+S6pOaNosK35pel5pyf5ZKM5pe26Ze06KGo56S65rOV44CL5LiOSVNPIDg2MDE6MTk4OOetieaViFxuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoQ247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoSG9uZyBLb25nKSBbemgtaGtdXG4vLyEgYXV0aG9yIDogQmVuIDogaHR0cHM6Ly9naXRodWIuY29tL2Jlbi1saW5cbi8vISBhdXRob3IgOiBDaHJpcyBMYW0gOiBodHRwczovL2dpdGh1Yi5jb20vaGVoYWNocmlzXG4vLyEgYXV0aG9yIDogS29uc3RhbnRpbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9za2ZkXG4vLyEgYXV0aG9yIDogQW50aG9ueSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbnRob255bGF1XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgemhIayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLWhrJywge1xuICAgICAgICBtb250aHM6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVkvTS9EJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4reWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPT09IDEyMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vmmI7lpKldTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb5LiLXWRkZGRMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vkuIpdZGRkZExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOmAsSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5b6MJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5bm+56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG06ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbTogJyVkIOWIhumQmCcsXG4gICAgICAgICAgICBoOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGg6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE06ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTTogJyVkIOWAi+aciCcsXG4gICAgICAgICAgICB5OiAnMSDlubQnLFxuICAgICAgICAgICAgeXk6ICclZCDlubQnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoSGs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoTWFjYXUpIFt6aC1tb11cbi8vISBhdXRob3IgOiBCZW4gOiBodHRwczovL2dpdGh1Yi5jb20vYmVuLWxpblxuLy8hIGF1dGhvciA6IENocmlzIExhbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oZWhhY2hyaXNcbi8vISBhdXRob3IgOiBUYW4gWXVhbmhvbmcgOiBodHRwczovL2dpdGh1Yi5jb20vbGUwdGFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgemhNbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLW1vJywge1xuICAgICAgICBtb250aHM6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ0QvTS9ZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4reWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb5LuK5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+aYjuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb5LiLXWRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vmmKjlpKldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+S4il1kZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOmAsSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5YWnJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5bm+56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG06ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbTogJyVkIOWIhumQmCcsXG4gICAgICAgICAgICBoOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGg6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE06ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTTogJyVkIOWAi+aciCcsXG4gICAgICAgICAgICB5OiAnMSDlubQnLFxuICAgICAgICAgICAgeXk6ICclZCDlubQnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoTW87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoVGFpd2FuKSBbemgtdHddXG4vLyEgYXV0aG9yIDogQmVuIDogaHR0cHM6Ly9naXRodWIuY29tL2Jlbi1saW5cbi8vISBhdXRob3IgOiBDaHJpcyBMYW0gOiBodHRwczovL2dpdGh1Yi5jb20vaGVoYWNocmlzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgemhUdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLXR3Jywge1xuICAgICAgICBtb250aHM6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVkvTS9EJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4reWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb5LuK5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+aYjuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb5LiLXWRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vmmKjlpKldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+S4il1kZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOmAsSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5b6MJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5bm+56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG06ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbTogJyVkIOWIhumQmCcsXG4gICAgICAgICAgICBoOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGg6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE06ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTTogJyVkIOWAi+aciCcsXG4gICAgICAgICAgICB5OiAnMSDlubQnLFxuICAgICAgICAgICAgeXk6ICclZCDlubQnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoVHc7XG5cbn0pKSk7XG4iLCIvLyAuZGlybmFtZSwgLmJhc2VuYW1lLCBhbmQgLmV4dG5hbWUgbWV0aG9kcyBhcmUgZXh0cmFjdGVkIGZyb20gTm9kZS5qcyB2OC4xMS4xLFxuLy8gYmFja3BvcnRlZCBhbmQgdHJhbnNwbGl0ZWQgd2l0aCBCYWJlbCwgd2l0aCBiYWNrd2FyZHMtY29tcGF0IGZpeGVzXG5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyByZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggYXJyYXkgd2l0aCBkaXJlY3RvcnkgbmFtZXMgdGhlcmVcbi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcXCkgaW4gdGhlIGFycmF5XG4vLyAoc28gYWxzbyBubyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIC0gaXQgZG9lcyBub3QgZGlzdGluZ3Vpc2hcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHBhdGggPSBwYXRoICsgJyc7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcuJztcbiAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gIHZhciBoYXNSb290ID0gY29kZSA9PT0gNDcgLyovKi87XG4gIHZhciBlbmQgPSAtMTtcbiAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMTsgLS1pKSB7XG4gICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbmQgPT09IC0xKSByZXR1cm4gaGFzUm9vdCA/ICcvJyA6ICcuJztcbiAgaWYgKGhhc1Jvb3QgJiYgZW5kID09PSAxKSB7XG4gICAgLy8gcmV0dXJuICcvLyc7XG4gICAgLy8gQmFja3dhcmRzLWNvbXBhdCBmaXg6XG4gICAgcmV0dXJuICcvJztcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZSgwLCBlbmQpO1xufTtcblxuZnVuY3Rpb24gYmFzZW5hbWUocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuXG4gIHZhciBzdGFydCA9IDA7XG4gIHZhciBlbmQgPSAtMTtcbiAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gIHZhciBpO1xuXG4gIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGkpID09PSA0NyAvKi8qLykge1xuICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgIC8vIHBhdGggY29tcG9uZW50XG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICAgIGVuZCA9IGkgKyAxO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbmQgPT09IC0xKSByZXR1cm4gJyc7XG4gIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0LCBlbmQpO1xufVxuXG4vLyBVc2VzIGEgbWl4ZWQgYXBwcm9hY2ggZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LCBhcyBleHQgYmVoYXZpb3IgY2hhbmdlZFxuLy8gaW4gbmV3IE5vZGUuanMgdmVyc2lvbnMsIHNvIG9ubHkgYmFzZW5hbWUoKSBhYm92ZSBpcyBiYWNrcG9ydGVkIGhlcmVcbmV4cG9ydHMuYmFzZW5hbWUgPSBmdW5jdGlvbiAocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gYmFzZW5hbWUocGF0aCk7XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59O1xuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbiAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuICB2YXIgc3RhcnREb3QgPSAtMTtcbiAgdmFyIHN0YXJ0UGFydCA9IDA7XG4gIHZhciBlbmQgPSAtMTtcbiAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gIC8vIFRyYWNrIHRoZSBzdGF0ZSBvZiBjaGFyYWN0ZXJzIChpZiBhbnkpIHdlIHNlZSBiZWZvcmUgb3VyIGZpcnN0IGRvdCBhbmRcbiAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgdmFyIHByZURvdFN0YXRlID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICB2YXIgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgc3RhcnRQYXJ0ID0gaSArIDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgIC8vIGV4dGVuc2lvblxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICBlbmQgPSBpICsgMTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDQ2IC8qLiovKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgb3VyIGZpcnN0IGRvdCwgbWFyayBpdCBhcyB0aGUgc3RhcnQgb2Ygb3VyIGV4dGVuc2lvblxuICAgICAgICBpZiAoc3RhcnREb3QgPT09IC0xKVxuICAgICAgICAgIHN0YXJ0RG90ID0gaTtcbiAgICAgICAgZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpXG4gICAgICAgICAgcHJlRG90U3RhdGUgPSAxO1xuICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxuICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb25cbiAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8XG4gICAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdFxuICAgICAgcHJlRG90U3RhdGUgPT09IDAgfHxcbiAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICAgIHByZURvdFN0YXRlID09PSAxICYmIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpO1xufTtcblxuZnVuY3Rpb24gZmlsdGVyICh4cywgZikge1xuICAgIGlmICh4cy5maWx0ZXIpIHJldHVybiB4cy5maWx0ZXIoZik7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGYoeHNbaV0sIGksIHhzKSkgcmVzLnB1c2goeHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBTdHJpbmcucHJvdG90eXBlLnN1YnN0ciAtIG5lZ2F0aXZlIGluZGV4IGRvbid0IHdvcmsgaW4gSUU4XG52YXIgc3Vic3RyID0gJ2FiJy5zdWJzdHIoLTEpID09PSAnYidcbiAgICA/IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHsgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbikgfVxuICAgIDogZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikge1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IHN0ci5sZW5ndGggKyBzdGFydDtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbik7XG4gICAgfVxuO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYWxwaGFiZXRpY2FsXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhbHBoYWJldGljYWwuXG5mdW5jdGlvbiBhbHBoYWJldGljYWwoY2hhcmFjdGVyKSB7XG4gIHZhciBjb2RlID0gdHlwZW9mIGNoYXJhY3RlciA9PT0gJ3N0cmluZycgPyBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSA6IGNoYXJhY3RlclxuXG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gOTcgJiYgY29kZSA8PSAxMjIpIC8qIGEteiAqLyB8fFxuICAgIChjb2RlID49IDY1ICYmIGNvZGUgPD0gOTApIC8qIEEtWiAqL1xuICApXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwb3NpdGlvbjogdHJ1ZSxcbiAgZ2ZtOiB0cnVlLFxuICBjb21tb25tYXJrOiBmYWxzZSxcbiAgZm9vdG5vdGVzOiBmYWxzZSxcbiAgcGVkYW50aWM6IGZhbHNlLFxuICBibG9ja3M6IHJlcXVpcmUoJy4vYmxvY2stZWxlbWVudHMuanNvbicpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGVudGF0aW9uO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycywgYW5kIHRoZWlyIGNvbHVtbiBsZW5ndGgsXG4gKiB3aGljaCBjYW4gYmUgdXNlZCBhcyBpbmRlbnRhdGlvbi4gKi9cbnZhciBjaGFyYWN0ZXJzID0geycgJzogMSwgJ1xcdCc6IDR9O1xuXG4vKiBHZXRzIGluZGVudGF0aW9uIGluZm9ybWF0aW9uIGZvciBhIGxpbmUuICovXG5mdW5jdGlvbiBpbmRlbnRhdGlvbih2YWx1ZSkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgaW5kZW50ID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHZhciBzdG9wcyA9IHt9O1xuICB2YXIgc2l6ZTtcblxuICB3aGlsZSAoY2hhcmFjdGVyIGluIGNoYXJhY3RlcnMpIHtcbiAgICBzaXplID0gY2hhcmFjdGVyc1tjaGFyYWN0ZXJdO1xuXG4gICAgaW5kZW50ICs9IHNpemU7XG5cbiAgICBpZiAoc2l6ZSA+IDEpIHtcbiAgICAgIGluZGVudCA9IE1hdGguZmxvb3IoaW5kZW50IC8gc2l6ZSkgKiBzaXplO1xuICAgIH1cblxuICAgIHN0b3BzW2luZGVudF0gPSBpbmRleDtcblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7aW5kZW50OiBpbmRlbnQsIHN0b3BzOiBzdG9wc307XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhdHRyaWJ1dGVOYW1lID0gJ1thLXpBLVpfOl1bYS16QS1aMC05Oi5fLV0qJztcbnZhciB1bnF1b3RlZCA9ICdbXlwiXFwnPTw+YFxcXFx1MDAwMC1cXFxcdTAwMjBdKyc7XG52YXIgc2luZ2xlUXVvdGVkID0gJ1xcJ1teXFwnXSpcXCcnO1xudmFyIGRvdWJsZVF1b3RlZCA9ICdcIlteXCJdKlwiJztcbnZhciBhdHRyaWJ1dGVWYWx1ZSA9ICcoPzonICsgdW5xdW90ZWQgKyAnfCcgKyBzaW5nbGVRdW90ZWQgKyAnfCcgKyBkb3VibGVRdW90ZWQgKyAnKSc7XG52YXIgYXR0cmlidXRlID0gJyg/OlxcXFxzKycgKyBhdHRyaWJ1dGVOYW1lICsgJyg/OlxcXFxzKj1cXFxccyonICsgYXR0cmlidXRlVmFsdWUgKyAnKT8pJztcbnZhciBvcGVuVGFnID0gJzxbQS1aYS16XVtBLVphLXowLTlcXFxcLV0qJyArIGF0dHJpYnV0ZSArICcqXFxcXHMqXFxcXC8/Pic7XG52YXIgY2xvc2VUYWcgPSAnPFxcXFwvW0EtWmEtel1bQS1aYS16MC05XFxcXC1dKlxcXFxzKj4nO1xudmFyIGNvbW1lbnQgPSAnPCEtLS0tPnw8IS0tKD86LT9bXj4tXSkoPzotP1teLV0pKi0tPic7XG52YXIgcHJvY2Vzc2luZyA9ICc8Wz9dLio/Wz9dPic7XG52YXIgZGVjbGFyYXRpb24gPSAnPCFbQS1aYS16XStcXFxccytbXj5dKj4nO1xudmFyIGNkYXRhID0gJzwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj9cXFxcXVxcXFxdPic7XG5cbmV4cG9ydHMub3BlbkNsb3NlVGFnID0gbmV3IFJlZ0V4cCgnXig/OicgKyBvcGVuVGFnICsgJ3wnICsgY2xvc2VUYWcgKyAnKScpO1xuXG5leHBvcnRzLnRhZyA9IG5ldyBSZWdFeHAoJ14oPzonICtcbiAgb3BlblRhZyArICd8JyArXG4gIGNsb3NlVGFnICsgJ3wnICtcbiAgY29tbWVudCArICd8JyArXG4gIHByb2Nlc3NpbmcgKyAnfCcgK1xuICBkZWNsYXJhdGlvbiArICd8JyArXG4gIGNkYXRhICtcbicpJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignPCcsIGZyb21JbmRleCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgbGluayA9IHZhbHVlLmluZGV4T2YoJ1snLCBmcm9tSW5kZXgpO1xuICB2YXIgaW1hZ2UgPSB2YWx1ZS5pbmRleE9mKCchWycsIGZyb21JbmRleCk7XG5cbiAgaWYgKGltYWdlID09PSAtMSkge1xuICAgIHJldHVybiBsaW5rO1xuICB9XG5cbiAgLyogTGluayBjYW4gbmV2ZXIgYmUgYC0xYCBpZiBhbiBpbWFnZSBpcyBmb3VuZCwgc28gd2UgZG9u4oCZdCBuZWVkXG4gICAqIHRvIGNoZWNrIGZvciB0aGF0IDopICovXG4gIHJldHVybiBsaW5rIDwgaW1hZ2UgPyBsaW5rIDogaW1hZ2U7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soYSwgbikge1xuICBpZiAoIShhIGluc3RhbmNlb2YgbikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjaywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZShcIi4vdG9Qcm9wZXJ0eUtleS5qc1wiKTtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKGUsIHIpIHtcbiAgZm9yICh2YXIgdCA9IDA7IHQgPCByLmxlbmd0aDsgdCsrKSB7XG4gICAgdmFyIG8gPSByW3RdO1xuICAgIG8uZW51bWVyYWJsZSA9IG8uZW51bWVyYWJsZSB8fCAhMSwgby5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIG8gJiYgKG8ud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCB0b1Byb3BlcnR5S2V5KG8ua2V5KSwgbyk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhlLCByLCB0KSB7XG4gIHJldHVybiByICYmIF9kZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLCByKSwgdCAmJiBfZGVmaW5lUHJvcGVydGllcyhlLCB0KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogITFcbiAgfSksIGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4vdHlwZW9mLmpzXCIpW1wiZGVmYXVsdFwiXTtcbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanNcIik7XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBlKSB7XG4gIGlmIChlICYmIChcIm9iamVjdFwiID09IF90eXBlb2YoZSkgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7XG4gIGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZCh0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKTtcbmZ1bmN0aW9uIF9pbmhlcml0cyh0LCBlKSB7XG4gIGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogdCxcbiAgICAgIHdyaXRhYmxlOiAhMCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9XG4gIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiAhMVxuICB9KSwgZSAmJiBzZXRQcm90b3R5cGVPZih0LCBlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IChtb2R1bGVbJ2V4cG9ydHMnXSA9IGZhY3RvcnkoKSkgOlxuXHRcdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSA/IGRlZmluZShmYWN0b3J5KCkpIDpcblx0XHRcdCh3aW5kb3dbJ3N0eWxpc1J1bGVTaGVldCddID0gZmFjdG9yeSgpKVxufShmdW5jdGlvbiAoKSB7XG5cblx0J3VzZSBzdHJpY3QnXG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbnNlcnRSdWxlKSB7XG5cdFx0dmFyIGRlbGltaXRlciA9ICcvKnwqLydcblx0XHR2YXIgbmVlZGxlID0gZGVsaW1pdGVyKyd9J1xuXG5cdFx0ZnVuY3Rpb24gdG9TaGVldCAoYmxvY2spIHtcblx0XHRcdGlmIChibG9jaylcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpbnNlcnRSdWxlKGJsb2NrICsgJ30nKVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBydWxlU2hlZXQgKGNvbnRleHQsIGNvbnRlbnQsIHNlbGVjdG9ycywgcGFyZW50cywgbGluZSwgY29sdW1uLCBsZW5ndGgsIG5zLCBkZXB0aCwgYXQpIHtcblx0XHRcdHN3aXRjaCAoY29udGV4dCkge1xuXHRcdFx0XHQvLyBwcm9wZXJ0eVxuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Ly8gQGltcG9ydFxuXHRcdFx0XHRcdGlmIChkZXB0aCA9PT0gMCAmJiBjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDY0KVxuXHRcdFx0XHRcdFx0cmV0dXJuIGluc2VydFJ1bGUoY29udGVudCsnOycpLCAnJ1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIHNlbGVjdG9yXG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAobnMgPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIGF0LXJ1bGVcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdHN3aXRjaCAobnMpIHtcblx0XHRcdFx0XHRcdC8vIEBmb250LWZhY2UsIEBwYWdlXG5cdFx0XHRcdFx0XHRjYXNlIDEwMjpcblx0XHRcdFx0XHRcdGNhc2UgMTEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShzZWxlY3RvcnNbMF0rY29udGVudCksICcnXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIChhdCA9PT0gMCA/IGRlbGltaXRlciA6ICcnKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAtMjpcblx0XHRcdFx0XHRjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkpXG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoJ1Rocm90dGxlZCBmdW5jdGlvbiBhYm9ydGVkJyk7XG5cdFx0dGhpcy5uYW1lID0gJ0Fib3J0RXJyb3InO1xuXHR9XG59XG5cbmNvbnN0IHBUaHJvdHRsZSA9ICh7bGltaXQsIGludGVydmFsLCBzdHJpY3R9KSA9PiB7XG5cdGlmICghTnVtYmVyLmlzRmluaXRlKGxpbWl0KSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGBsaW1pdGAgdG8gYmUgYSBmaW5pdGUgbnVtYmVyJyk7XG5cdH1cblxuXHRpZiAoIU51bWJlci5pc0Zpbml0ZShpbnRlcnZhbCkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgaW50ZXJ2YWxgIHRvIGJlIGEgZmluaXRlIG51bWJlcicpO1xuXHR9XG5cblx0Y29uc3QgcXVldWUgPSBuZXcgTWFwKCk7XG5cblx0bGV0IGN1cnJlbnRUaWNrID0gMDtcblx0bGV0IGFjdGl2ZUNvdW50ID0gMDtcblxuXHRmdW5jdGlvbiB3aW5kb3dlZERlbGF5KCkge1xuXHRcdGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cblx0XHRpZiAoKG5vdyAtIGN1cnJlbnRUaWNrKSA+IGludGVydmFsKSB7XG5cdFx0XHRhY3RpdmVDb3VudCA9IDE7XG5cdFx0XHRjdXJyZW50VGljayA9IG5vdztcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdGlmIChhY3RpdmVDb3VudCA8IGxpbWl0KSB7XG5cdFx0XHRhY3RpdmVDb3VudCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJyZW50VGljayArPSBpbnRlcnZhbDtcblx0XHRcdGFjdGl2ZUNvdW50ID0gMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY3VycmVudFRpY2sgLSBub3c7XG5cdH1cblxuXHRjb25zdCBzdHJpY3RUaWNrcyA9IFtdO1xuXG5cdGZ1bmN0aW9uIHN0cmljdERlbGF5KCkge1xuXHRcdGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cblx0XHRpZiAoc3RyaWN0VGlja3MubGVuZ3RoIDwgbGltaXQpIHtcblx0XHRcdHN0cmljdFRpY2tzLnB1c2gobm93KTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdGNvbnN0IGVhcmxpZXN0VGltZSA9IHN0cmljdFRpY2tzLnNoaWZ0KCkgKyBpbnRlcnZhbDtcblxuXHRcdGlmIChub3cgPj0gZWFybGllc3RUaW1lKSB7XG5cdFx0XHRzdHJpY3RUaWNrcy5wdXNoKG5vdyk7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRzdHJpY3RUaWNrcy5wdXNoKGVhcmxpZXN0VGltZSk7XG5cdFx0cmV0dXJuIGVhcmxpZXN0VGltZSAtIG5vdztcblx0fVxuXG5cdGNvbnN0IGdldERlbGF5ID0gc3RyaWN0ID8gc3RyaWN0RGVsYXkgOiB3aW5kb3dlZERlbGF5O1xuXG5cdHJldHVybiBmdW5jdGlvbl8gPT4ge1xuXHRcdGNvbnN0IHRocm90dGxlZCA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG5cdFx0XHRpZiAoIXRocm90dGxlZC5pc0VuYWJsZWQpIHtcblx0XHRcdFx0cmV0dXJuIChhc3luYyAoKSA9PiBmdW5jdGlvbl8uYXBwbHkodGhpcywgYXJncykpKCk7XG5cdFx0XHR9XG5cblx0XHRcdGxldCB0aW1lb3V0O1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFx0Y29uc3QgZXhlY3V0ZSA9ICgpID0+IHtcblx0XHRcdFx0XHRyZXNvbHZlKGZ1bmN0aW9uXy5hcHBseSh0aGlzLCBhcmdzKSk7XG5cdFx0XHRcdFx0cXVldWUuZGVsZXRlKHRpbWVvdXQpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRpbWVvdXQgPSBzZXRUaW1lb3V0KGV4ZWN1dGUsIGdldERlbGF5KCkpO1xuXG5cdFx0XHRcdHF1ZXVlLnNldCh0aW1lb3V0LCByZWplY3QpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdHRocm90dGxlZC5hYm9ydCA9ICgpID0+IHtcblx0XHRcdGZvciAoY29uc3QgdGltZW91dCBvZiBxdWV1ZS5rZXlzKCkpIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdFx0XHRxdWV1ZS5nZXQodGltZW91dCkobmV3IEFib3J0RXJyb3IoKSk7XG5cdFx0XHR9XG5cblx0XHRcdHF1ZXVlLmNsZWFyKCk7XG5cdFx0XHRzdHJpY3RUaWNrcy5zcGxpY2UoMCwgc3RyaWN0VGlja3MubGVuZ3RoKTtcblx0XHR9O1xuXG5cdFx0dGhyb3R0bGVkLmlzRW5hYmxlZCA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhyb3R0bGVkO1xuXHR9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwVGhyb3R0bGU7XG5tb2R1bGUuZXhwb3J0cy5BYm9ydEVycm9yID0gQWJvcnRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuZXhwb3J0cy5nZXRTZXJpYWxpemUgPSBzZXJpYWxpemVyXG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmosIHJlcGxhY2VyLCBzcGFjZXMsIGN5Y2xlUmVwbGFjZXIpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplcihyZXBsYWNlciwgY3ljbGVSZXBsYWNlciksIHNwYWNlcylcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplcihyZXBsYWNlciwgY3ljbGVSZXBsYWNlcikge1xuICB2YXIgc3RhY2sgPSBbXSwga2V5cyA9IFtdXG5cbiAgaWYgKGN5Y2xlUmVwbGFjZXIgPT0gbnVsbCkgY3ljbGVSZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoc3RhY2tbMF0gPT09IHZhbHVlKSByZXR1cm4gXCJbQ2lyY3VsYXIgfl1cIlxuICAgIHJldHVybiBcIltDaXJjdWxhciB+LlwiICsga2V5cy5zbGljZSgwLCBzdGFjay5pbmRleE9mKHZhbHVlKSkuam9pbihcIi5cIikgKyBcIl1cIlxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHRoaXNQb3MgPSBzdGFjay5pbmRleE9mKHRoaXMpXG4gICAgICB+dGhpc1BvcyA/IHN0YWNrLnNwbGljZSh0aGlzUG9zICsgMSkgOiBzdGFjay5wdXNoKHRoaXMpXG4gICAgICB+dGhpc1BvcyA/IGtleXMuc3BsaWNlKHRoaXNQb3MsIEluZmluaXR5LCBrZXkpIDoga2V5cy5wdXNoKGtleSlcbiAgICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpIHZhbHVlID0gY3ljbGVSZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpXG4gICAgfVxuICAgIGVsc2Ugc3RhY2sucHVzaCh2YWx1ZSlcblxuICAgIHJldHVybiByZXBsYWNlciA9PSBudWxsID8gdmFsdWUgOiByZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpXG4gIH1cbn1cbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeShnbG9iYWxbXCJmYXN0LWNvcHlcIl0gPSB7fSkpO1xufSkodGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciB0b1N0cmluZ0Z1bmN0aW9uID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuICAgIHZhciB0b1N0cmluZ09iamVjdCA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGNsYXNzZGVzYyBGYWxsYmFjayBjYWNoZSBmb3Igd2hlbiBXZWFrTWFwIGlzIG5vdCBuYXRpdmVseSBzdXBwb3J0ZWRcbiAgICAgKi9cbiAgICB2YXIgTGVnYWN5Q2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIExlZ2FjeUNhY2hlKCkge1xuICAgICAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgTGVnYWN5Q2FjaGUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAhIX50aGlzLl9rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgICAgfTtcbiAgICAgICAgTGVnYWN5Q2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZXNbdGhpcy5fa2V5cy5pbmRleE9mKGtleSldO1xuICAgICAgICB9O1xuICAgICAgICBMZWdhY3lDYWNoZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gTGVnYWN5Q2FjaGU7XG4gICAgfSgpKTtcbiAgICBmdW5jdGlvbiBjcmVhdGVDYWNoZUxlZ2FjeSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMZWdhY3lDYWNoZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVDYWNoZU1vZGVybigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBXZWFrTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIG5ldyBjYWNoZSBvYmplY3QgdG8gcHJldmVudCBjaXJjdWxhciByZWZlcmVuY2VzLlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVDYWNoZSA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IGNyZWF0ZUNhY2hlTW9kZXJuIDogY3JlYXRlQ2FjaGVMZWdhY3k7XG4gICAgLyoqXG4gICAgICogR2V0IGFuIGVtcHR5IHZlcnNpb24gb2YgdGhlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHByb3RvdHlwZSBpdCBoYXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q2xlYW5DbG9uZShwcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKCFwcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gcHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSA/IHt9IDogY3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENvbnN0cnVjdG9yICYmXG4gICAgICAgICAgICB+dG9TdHJpbmdGdW5jdGlvbi5jYWxsKENvbnN0cnVjdG9yKS5pbmRleE9mKCdbbmF0aXZlIGNvZGVdJykpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlKHByb3RvdHlwZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFJlZ0V4cEZsYWdzTGVnYWN5KHJlZ0V4cCkge1xuICAgICAgICB2YXIgZmxhZ3MgPSAnJztcbiAgICAgICAgaWYgKHJlZ0V4cC5nbG9iYWwpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnRXhwLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgICAgIGZsYWdzICs9ICdpJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnRXhwLm11bHRpbGluZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ20nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdFeHAudW5pY29kZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gJ3UnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWdFeHAuc3RpY2t5KSB7XG4gICAgICAgICAgICBmbGFncyArPSAneSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZsYWdzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRSZWdFeHBGbGFnc01vZGVybihyZWdFeHApIHtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cC5mbGFncztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBmbGFncyB0byBhcHBseSB0byB0aGUgY29waWVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0UmVnRXhwRmxhZ3MgPSAvdGVzdC9nLmZsYWdzID09PSAnZycgPyBnZXRSZWdFeHBGbGFnc01vZGVybiA6IGdldFJlZ0V4cEZsYWdzTGVnYWN5O1xuICAgIGZ1bmN0aW9uIGdldFRhZ0xlZ2FjeSh2YWx1ZSkge1xuICAgICAgICB2YXIgdHlwZSA9IHRvU3RyaW5nT2JqZWN0LmNhbGwodmFsdWUpO1xuICAgICAgICByZXR1cm4gdHlwZS5zdWJzdHJpbmcoOCwgdHlwZS5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VGFnTW9kZXJuKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddIHx8IGdldFRhZ0xlZ2FjeSh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdGFnIG9mIHRoZSB2YWx1ZSBwYXNzZWQsIHNvIHRoYXQgdGhlIGNvcnJlY3QgY29waWVyIGNhbiBiZSB1c2VkLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IGdldFRhZ01vZGVybiA6IGdldFRhZ0xlZ2FjeTtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuICAgIHZhciBfYSA9IE9iamVjdC5wcm90b3R5cGUsIGhhc093blByb3BlcnR5ID0gX2EuaGFzT3duUHJvcGVydHksIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gX2EucHJvcGVydHlJc0VudW1lcmFibGU7XG4gICAgdmFyIFNVUFBPUlRTX1NZTUJPTCA9IHR5cGVvZiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbic7XG4gICAgZnVuY3Rpb24gZ2V0U3RyaWN0UHJvcGVydGllc01vZGVybihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHByb3Blcml0ZXMgdXNlZCB3aGVuIGNvcHlpbmcgb2JqZWN0cyBzdHJpY3RseS4gVGhpcyBpbmNsdWRlcyBib3RoIGtleXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN0cmljdFByb3BlcnRpZXMgPSBTVVBQT1JUU19TWU1CT0xcbiAgICAgICAgPyBnZXRTdHJpY3RQcm9wZXJ0aWVzTW9kZXJuXG4gICAgICAgIDogZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICAvKipcbiAgICAgKiBTdHJpY2x0eSBjb3B5IGFsbCBwcm9wZXJ0aWVzIGNvbnRhaW5lZCBvbiB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPd25Qcm9wZXJ0aWVzU3RyaWN0KHZhbHVlLCBjbG9uZSwgc3RhdGUpIHtcbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBnZXRTdHJpY3RQcm9wZXJ0aWVzKHZhbHVlKTtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGhfMSA9IHByb3BlcnRpZXMubGVuZ3RoLCBwcm9wZXJ0eSA9IHZvaWQgMCwgZGVzY3JpcHRvciA9IHZvaWQgMDsgaW5kZXggPCBsZW5ndGhfMTsgKytpbmRleCkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2NhbGxlZScgfHwgcHJvcGVydHkgPT09ICdjYWxsZXInKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICBpZiAoIWRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBleHRyYSBlZGdlIGNhc2VzIHdoZXJlIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIGNhbm5vdCBiZSByZXRyaXZlZCwgZmFsbCBiYWNrIHRvXG4gICAgICAgICAgICAgICAgLy8gdGhlIGxvb3NlIGFzc2lnbm1lbnQuXG4gICAgICAgICAgICAgICAgY2xvbmVbcHJvcGVydHldID0gc3RhdGUuY29waWVyKHZhbHVlW3Byb3BlcnR5XSwgc3RhdGUpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT25seSBjbG9uZSB0aGUgdmFsdWUgaWYgYWN0dWFsbHkgYSB2YWx1ZSwgbm90IGEgZ2V0dGVyIC8gc2V0dGVyLlxuICAgICAgICAgICAgaWYgKCFkZXNjcmlwdG9yLmdldCAmJiAhZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gc3RhdGUuY29waWVyKGRlc2NyaXB0b3IudmFsdWUsIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkoY2xvbmUsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIFRlZSBhYm92ZSBjYW4gZmFpbCBvbiBub2RlIGluIGVkZ2UgY2FzZXMsIHNvIGZhbGwgYmFjayB0byB0aGUgbG9vc2UgYXNzaWdubWVudC5cbiAgICAgICAgICAgICAgICBjbG9uZVtwcm9wZXJ0eV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVlcGx5IGNvcHkgdGhlIGluZGV4ZWQgdmFsdWVzIGluIHRoZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXlMb29zZShhcnJheSwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gbmV3IHN0YXRlLkNvbnN0cnVjdG9yKCk7XG4gICAgICAgIC8vIHNldCBpbiB0aGUgY2FjaGUgaW1tZWRpYXRlbHkgdG8gYmUgYWJsZSB0byByZXVzZSB0aGUgb2JqZWN0IHJlY3Vyc2l2ZWx5XG4gICAgICAgIHN0YXRlLmNhY2hlLnNldChhcnJheSwgY2xvbmUpO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aF8yID0gYXJyYXkubGVuZ3RoOyBpbmRleCA8IGxlbmd0aF8yOyArK2luZGV4KSB7XG4gICAgICAgICAgICBjbG9uZVtpbmRleF0gPSBzdGF0ZS5jb3BpZXIoYXJyYXlbaW5kZXhdLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWVwbHkgY29weSB0aGUgaW5kZXhlZCB2YWx1ZXMgaW4gdGhlIGFycmF5LCBhcyB3ZWxsIGFzIGFueSBjdXN0b20gcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXlTdHJpY3QoYXJyYXksIHN0YXRlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBzdGF0ZS5Db25zdHJ1Y3RvcigpO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBzdGF0ZS5jYWNoZS5zZXQoYXJyYXksIGNsb25lKTtcbiAgICAgICAgcmV0dXJuIGNvcHlPd25Qcm9wZXJ0aWVzU3RyaWN0KGFycmF5LCBjbG9uZSwgc3RhdGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBjb250ZW50cyBvZiB0aGUgQXJyYXlCdWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5QnVmZmVyKGFycmF5QnVmZmVyLCBfc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5QnVmZmVyLnNsaWNlKDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQmxvYiB3aXRoIHRoZSBjb250ZW50cyBvZiB0aGUgb3JpZ2luYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUJsb2IoYmxvYiwgX3N0YXRlKSB7XG4gICAgICAgIHJldHVybiBibG9iLnNsaWNlKDAsIGJsb2Iuc2l6ZSwgYmxvYi50eXBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IERhdGFWaWV3IHdpdGggdGhlIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5RGF0YVZpZXcoZGF0YVZpZXcsIHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgc3RhdGUuQ29uc3RydWN0b3IoY29weUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgRGF0ZSBiYXNlZCBvbiB0aGUgdGltZSBvZiB0aGUgb3JpZ2luYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weURhdGUoZGF0ZSwgc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzdGF0ZS5Db25zdHJ1Y3RvcihkYXRlLmdldFRpbWUoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZXBseSBjb3B5IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgdGhlIG9yaWdpbmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlNYXBMb29zZShtYXAsIHN0YXRlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBzdGF0ZS5Db25zdHJ1Y3RvcigpO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBzdGF0ZS5jYWNoZS5zZXQobWFwLCBjbG9uZSk7XG4gICAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBjbG9uZS5zZXQoa2V5LCBzdGF0ZS5jb3BpZXIodmFsdWUsIHN0YXRlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZXBseSBjb3B5IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgdGhlIG9yaWdpbmFsLCBhcyB3ZWxsIGFzIGFueSBjdXN0b20gcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5TWFwU3RyaWN0KG1hcCwgc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGNvcHlPd25Qcm9wZXJ0aWVzU3RyaWN0KG1hcCwgY29weU1hcExvb3NlKG1hcCwgc3RhdGUpLCBzdGF0ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3RMb29zZUxlZ2FjeShvYmplY3QsIHN0YXRlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IGdldENsZWFuQ2xvbmUoc3RhdGUucHJvdG90eXBlKTtcbiAgICAgICAgLy8gc2V0IGluIHRoZSBjYWNoZSBpbW1lZGlhdGVseSB0byBiZSBhYmxlIHRvIHJldXNlIHRoZSBvYmplY3QgcmVjdXJzaXZlbHlcbiAgICAgICAgc3RhdGUuY2FjaGUuc2V0KG9iamVjdCwgY2xvbmUpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBjbG9uZVtrZXldID0gc3RhdGUuY29waWVyKG9iamVjdFtrZXldLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0TG9vc2VNb2Rlcm4ob2JqZWN0LCBzdGF0ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSBnZXRDbGVhbkNsb25lKHN0YXRlLnByb3RvdHlwZSk7XG4gICAgICAgIC8vIHNldCBpbiB0aGUgY2FjaGUgaW1tZWRpYXRlbHkgdG8gYmUgYWJsZSB0byByZXVzZSB0aGUgb2JqZWN0IHJlY3Vyc2l2ZWx5XG4gICAgICAgIHN0YXRlLmNhY2hlLnNldChvYmplY3QsIGNsb25lKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVba2V5XSA9IHN0YXRlLmNvcGllcihvYmplY3Rba2V5XSwgc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoXzMgPSBzeW1ib2xzLmxlbmd0aCwgc3ltYm9sID0gdm9pZCAwOyBpbmRleCA8IGxlbmd0aF8zOyArK2luZGV4KSB7XG4gICAgICAgICAgICBzeW1ib2wgPSBzeW1ib2xzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKSkge1xuICAgICAgICAgICAgICAgIGNsb25lW3N5bWJvbF0gPSBzdGF0ZS5jb3BpZXIob2JqZWN0W3N5bWJvbF0sIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZXBseSBjb3B5IHRoZSBwcm9wZXJ0aWVzIChrZXlzIGFuZCBzeW1ib2xzKSBhbmQgdmFsdWVzIG9mIHRoZSBvcmlnaW5hbC5cbiAgICAgKi9cbiAgICB2YXIgY29weU9iamVjdExvb3NlID0gU1VQUE9SVFNfU1lNQk9MXG4gICAgICAgID8gY29weU9iamVjdExvb3NlTW9kZXJuXG4gICAgICAgIDogY29weU9iamVjdExvb3NlTGVnYWN5O1xuICAgIC8qKlxuICAgICAqIERlZXBseSBjb3B5IHRoZSBwcm9wZXJ0aWVzIChrZXlzIGFuZCBzeW1ib2xzKSBhbmQgdmFsdWVzIG9mIHRoZSBvcmlnaW5hbCwgYXMgd2VsbFxuICAgICAqIGFzIGFueSBoaWRkZW4gb3Igbm9uLWVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0U3RyaWN0KG9iamVjdCwgc3RhdGUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gZ2V0Q2xlYW5DbG9uZShzdGF0ZS5wcm90b3R5cGUpO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBzdGF0ZS5jYWNoZS5zZXQob2JqZWN0LCBjbG9uZSk7XG4gICAgICAgIHJldHVybiBjb3B5T3duUHJvcGVydGllc1N0cmljdChvYmplY3QsIGNsb25lLCBzdGF0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBwcmltaXRpdmUgd3JhcHBlciBmcm9tIHRoZSB2YWx1ZSBvZiB0aGUgb3JpZ2luYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVByaW1pdGl2ZVdyYXBwZXIocHJpbWl0aXZlT2JqZWN0LCBzdGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IHN0YXRlLkNvbnN0cnVjdG9yKHByaW1pdGl2ZU9iamVjdC52YWx1ZU9mKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgUmVnRXhwIGJhc2VkIG9uIHRoZSB2YWx1ZSBhbmQgZmxhZ3Mgb2YgdGhlIG9yaWdpbmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlSZWdFeHAocmVnRXhwLCBzdGF0ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSBuZXcgc3RhdGUuQ29uc3RydWN0b3IocmVnRXhwLnNvdXJjZSwgZ2V0UmVnRXhwRmxhZ3MocmVnRXhwKSk7XG4gICAgICAgIGNsb25lLmxhc3RJbmRleCA9IHJlZ0V4cC5sYXN0SW5kZXg7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBvcmlnaW5hbCB2YWx1ZSAoYW4gaWRlbnRpdHkgZnVuY3Rpb24pLlxuICAgICAqXG4gICAgICogQG5vdGVcbiAgICAgKiBUSGlzIGlzIHVzZWQgZm9yIG9iamVjdHMgdGhhdCBjYW5ub3QgYmUgY29waWVkLCBzdWNoIGFzIFdlYWtNYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVNlbGYodmFsdWUsIF9zdGF0ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZXBseSBjb3B5IHRoZSB2YWx1ZXMgb2YgdGhlIG9yaWdpbmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTZXRMb29zZShzZXQsIHN0YXRlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBzdGF0ZS5Db25zdHJ1Y3RvcigpO1xuICAgICAgICAvLyBzZXQgaW4gdGhlIGNhY2hlIGltbWVkaWF0ZWx5IHRvIGJlIGFibGUgdG8gcmV1c2UgdGhlIG9iamVjdCByZWN1cnNpdmVseVxuICAgICAgICBzdGF0ZS5jYWNoZS5zZXQoc2V0LCBjbG9uZSk7XG4gICAgICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgY2xvbmUuYWRkKHN0YXRlLmNvcGllcih2YWx1ZSwgc3RhdGUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVlcGx5IGNvcHkgdGhlIHZhbHVlcyBvZiB0aGUgb3JpZ2luYWwsIGFzIHdlbGwgYXMgYW55IGN1c3RvbSBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTZXRTdHJpY3Qoc2V0LCBzdGF0ZSkge1xuICAgICAgICByZXR1cm4gY29weU93blByb3BlcnRpZXNTdHJpY3Qoc2V0LCBjb3B5U2V0TG9vc2Uoc2V0LCBzdGF0ZSksIHN0YXRlKTtcbiAgICB9XG5cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4gICAgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IChmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmouX19wcm90b19fOyB9KTtcbiAgICB2YXIgREVGQVVMVF9MT09TRV9PUFRJT05TID0ge1xuICAgICAgICBhcnJheTogY29weUFycmF5TG9vc2UsXG4gICAgICAgIGFycmF5QnVmZmVyOiBjb3B5QXJyYXlCdWZmZXIsXG4gICAgICAgIGJsb2I6IGNvcHlCbG9iLFxuICAgICAgICBkYXRhVmlldzogY29weURhdGFWaWV3LFxuICAgICAgICBkYXRlOiBjb3B5RGF0ZSxcbiAgICAgICAgZXJyb3I6IGNvcHlTZWxmLFxuICAgICAgICBtYXA6IGNvcHlNYXBMb29zZSxcbiAgICAgICAgb2JqZWN0OiBjb3B5T2JqZWN0TG9vc2UsXG4gICAgICAgIHJlZ0V4cDogY29weVJlZ0V4cCxcbiAgICAgICAgc2V0OiBjb3B5U2V0TG9vc2UsXG4gICAgfTtcbiAgICB2YXIgREVGQVVMVF9TVFJJQ1RfT1BUSU9OUyA9IGFzc2lnbih7fSwgREVGQVVMVF9MT09TRV9PUFRJT05TLCB7XG4gICAgICAgIGFycmF5OiBjb3B5QXJyYXlTdHJpY3QsXG4gICAgICAgIG1hcDogY29weU1hcFN0cmljdCxcbiAgICAgICAgb2JqZWN0OiBjb3B5T2JqZWN0U3RyaWN0LFxuICAgICAgICBzZXQ6IGNvcHlTZXRTdHJpY3QsXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjb3BpZXJzIHVzZWQgZm9yIGVhY2ggc3BlY2lmaWMgb2JqZWN0IHRhZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRUYWdTcGVjaWZpY0NvcGllcnMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgQXJndW1lbnRzOiBvcHRpb25zLm9iamVjdCxcbiAgICAgICAgICAgIEFycmF5OiBvcHRpb25zLmFycmF5LFxuICAgICAgICAgICAgQXJyYXlCdWZmZXI6IG9wdGlvbnMuYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBCbG9iOiBvcHRpb25zLmJsb2IsXG4gICAgICAgICAgICBCb29sZWFuOiBjb3B5UHJpbWl0aXZlV3JhcHBlcixcbiAgICAgICAgICAgIERhdGFWaWV3OiBvcHRpb25zLmRhdGFWaWV3LFxuICAgICAgICAgICAgRGF0ZTogb3B0aW9ucy5kYXRlLFxuICAgICAgICAgICAgRXJyb3I6IG9wdGlvbnMuZXJyb3IsXG4gICAgICAgICAgICBGbG9hdDMyQXJyYXk6IG9wdGlvbnMuYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBGbG9hdDY0QXJyYXk6IG9wdGlvbnMuYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBJbnQ4QXJyYXk6IG9wdGlvbnMuYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBJbnQxNkFycmF5OiBvcHRpb25zLmFycmF5QnVmZmVyLFxuICAgICAgICAgICAgSW50MzJBcnJheTogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIE1hcDogb3B0aW9ucy5tYXAsXG4gICAgICAgICAgICBOdW1iZXI6IGNvcHlQcmltaXRpdmVXcmFwcGVyLFxuICAgICAgICAgICAgT2JqZWN0OiBvcHRpb25zLm9iamVjdCxcbiAgICAgICAgICAgIFByb21pc2U6IGNvcHlTZWxmLFxuICAgICAgICAgICAgUmVnRXhwOiBvcHRpb25zLnJlZ0V4cCxcbiAgICAgICAgICAgIFNldDogb3B0aW9ucy5zZXQsXG4gICAgICAgICAgICBTdHJpbmc6IGNvcHlQcmltaXRpdmVXcmFwcGVyLFxuICAgICAgICAgICAgV2Vha01hcDogY29weVNlbGYsXG4gICAgICAgICAgICBXZWFrU2V0OiBjb3B5U2VsZixcbiAgICAgICAgICAgIFVpbnQ4QXJyYXk6IG9wdGlvbnMuYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBVaW50OENsYW1wZWRBcnJheTogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIFVpbnQxNkFycmF5OiBvcHRpb25zLmFycmF5QnVmZmVyLFxuICAgICAgICAgICAgVWludDMyQXJyYXk6IG9wdGlvbnMuYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBVaW50NjRBcnJheTogb3B0aW9ucy5hcnJheUJ1ZmZlcixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY3VzdG9tIGNvcGllciBiYXNlZCBvbiB0aGUgb2JqZWN0LXNwZWNpZmljIGNvcHkgbWV0aG9kcyBwYXNzZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29waWVyKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRPcHRpb25zID0gYXNzaWduKHt9LCBERUZBVUxUX0xPT1NFX09QVElPTlMsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgdGFnU3BlY2lmaWNDb3BpZXJzID0gZ2V0VGFnU3BlY2lmaWNDb3BpZXJzKG5vcm1hbGl6ZWRPcHRpb25zKTtcbiAgICAgICAgdmFyIGFycmF5ID0gdGFnU3BlY2lmaWNDb3BpZXJzLkFycmF5LCBvYmplY3QgPSB0YWdTcGVjaWZpY0NvcGllcnMuT2JqZWN0O1xuICAgICAgICBmdW5jdGlvbiBjb3BpZXIodmFsdWUsIHN0YXRlKSB7XG4gICAgICAgICAgICBzdGF0ZS5wcm90b3R5cGUgPSBzdGF0ZS5Db25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5jYWNoZS5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmNhY2hlLmdldCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS5wcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gICAgICAgICAgICBzdGF0ZS5Db25zdHJ1Y3RvciA9IHN0YXRlLnByb3RvdHlwZSAmJiBzdGF0ZS5wcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgICAgICAgICAvLyBwbGFpbiBvYmplY3RzXG4gICAgICAgICAgICBpZiAoIXN0YXRlLkNvbnN0cnVjdG9yIHx8IHN0YXRlLkNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0KHZhbHVlLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhcnJheXNcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheSh2YWx1ZSwgc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRhZ1NwZWNpZmljQ29waWVyID0gdGFnU3BlY2lmaWNDb3BpZXJzW2dldFRhZyh2YWx1ZSldO1xuICAgICAgICAgICAgaWYgKHRhZ1NwZWNpZmljQ29waWVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhZ1NwZWNpZmljQ29waWVyKHZhbHVlLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IG9iamVjdCh2YWx1ZSwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBjb3B5KHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gY29waWVyKHZhbHVlLCB7XG4gICAgICAgICAgICAgICAgQ29uc3RydWN0b3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBjYWNoZTogY3JlYXRlQ2FjaGUoKSxcbiAgICAgICAgICAgICAgICBjb3BpZXI6IGNvcGllcixcbiAgICAgICAgICAgICAgICBwcm90b3R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjdXN0b20gY29waWVyIGJhc2VkIG9uIHRoZSBvYmplY3Qtc3BlY2lmaWMgY29weSBtZXRob2RzIHBhc3NlZCwgZGVmYXVsdGluZyB0byB0aGVcbiAgICAgKiBzYW1lIGludGVybmFscyBhcyBgY29weVN0cmljdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0Q29waWVyKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNvcGllcihhc3NpZ24oe30sIERFRkFVTFRfU1RSSUNUX09QVElPTlMsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29weSBhbiB2YWx1ZSBkZWVwbHkgYXMgbXVjaCBhcyBwb3NzaWJsZSwgd2hlcmUgc3RyaWN0IHJlY3JlYXRpb24gb2Ygb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWFpbnRhaW5lZC4gQWxsIHByb3BlcnRpZXMgKGluY2x1ZGluZyBub24tZW51bWVyYWJsZSBvbmVzKSBhcmUgY29waWVkIHdpdGggdGhlaXJcbiAgICAgKiBvcmlnaW5hbCBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBvbiBib3RoIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICAgKi9cbiAgICB2YXIgY29weVN0cmljdCA9IGNyZWF0ZVN0cmljdENvcGllcih7fSk7XG4gICAgLyoqXG4gICAgICogQ29weSBhbiB2YWx1ZSBkZWVwbHkgYXMgbXVjaCBhcyBwb3NzaWJsZS5cbiAgICAgKi9cbiAgICB2YXIgaW5kZXggPSBjcmVhdGVDb3BpZXIoe30pO1xuXG4gICAgZXhwb3J0cy5jb3B5U3RyaWN0ID0gY29weVN0cmljdDtcbiAgICBleHBvcnRzLmNyZWF0ZUNvcGllciA9IGNyZWF0ZUNvcGllcjtcbiAgICBleHBvcnRzLmNyZWF0ZVN0cmljdENvcGllciA9IGNyZWF0ZVN0cmljdENvcGllcjtcbiAgICBleHBvcnRzLmRlZmF1bHQgPSBpbmRleDtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xuXG52YXIgdW5pZmllZCA9IHJlcXVpcmUoJ3VuaWZpZWQnKTtcblxudmFyIHBhcnNlID0gcmVxdWlyZSgncmVtYXJrLXBhcnNlJyk7XG5cbnZhciBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBhZGRMaXN0TWV0YWRhdGEgPSByZXF1aXJlKCdtZGFzdC1hZGQtbGlzdC1tZXRhZGF0YScpO1xuXG52YXIgbmFpdmVIdG1sID0gcmVxdWlyZSgnLi9wbHVnaW5zL25haXZlLWh0bWwnKTtcblxudmFyIGRpc2FsbG93Tm9kZSA9IHJlcXVpcmUoJy4vcGx1Z2lucy9kaXNhbGxvdy1ub2RlJyk7XG5cbnZhciBhc3RUb1JlYWN0ID0gcmVxdWlyZSgnLi9hc3QtdG8tcmVhY3QnKTtcblxudmFyIHdyYXBUYWJsZVJvd3MgPSByZXF1aXJlKCcuL3dyYXAtdGFibGUtcm93cycpO1xuXG52YXIgZ2V0RGVmaW5pdGlvbnMgPSByZXF1aXJlKCcuL2dldC1kZWZpbml0aW9ucycpO1xuXG52YXIgdXJpVHJhbnNmb3JtZXIgPSByZXF1aXJlKCcuL3VyaS10cmFuc2Zvcm1lcicpO1xuXG52YXIgZGVmYXVsdFJlbmRlcmVycyA9IHJlcXVpcmUoJy4vcmVuZGVyZXJzJyk7XG5cbnZhciBzeW1ib2xzID0gcmVxdWlyZSgnLi9zeW1ib2xzJyk7XG5cbnZhciBhbGxUeXBlcyA9IE9iamVjdC5rZXlzKGRlZmF1bHRSZW5kZXJlcnMpO1xuXG52YXIgUmVhY3RNYXJrZG93biA9IGZ1bmN0aW9uIFJlYWN0TWFya2Rvd24ocHJvcHMpIHtcbiAgdmFyIHNyYyA9IHByb3BzLnNvdXJjZSB8fCBwcm9wcy5jaGlsZHJlbiB8fCAnJztcbiAgdmFyIHBhcnNlck9wdGlvbnMgPSBwcm9wcy5wYXJzZXJPcHRpb25zO1xuXG4gIGlmIChwcm9wcy5hbGxvd2VkVHlwZXMgJiYgcHJvcHMuZGlzYWxsb3dlZFR5cGVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IG9uZSBvZiBgYWxsb3dlZFR5cGVzYCBhbmQgYGRpc2FsbG93ZWRUeXBlc2Agc2hvdWxkIGJlIGRlZmluZWQnKTtcbiAgfVxuXG4gIHZhciByZW5kZXJlcnMgPSB4dGVuZChkZWZhdWx0UmVuZGVyZXJzLCBwcm9wcy5yZW5kZXJlcnMpO1xuICB2YXIgcGx1Z2lucyA9IFtbcGFyc2UsIHBhcnNlck9wdGlvbnNdXS5jb25jYXQocHJvcHMucGx1Z2lucyB8fCBbXSk7XG4gIHZhciBwYXJzZXIgPSBwbHVnaW5zLnJlZHVjZShhcHBseVBhcnNlclBsdWdpbiwgdW5pZmllZCgpKTtcbiAgdmFyIHJhd0FzdCA9IHBhcnNlci5wYXJzZShzcmMpO1xuICB2YXIgcmVuZGVyUHJvcHMgPSB4dGVuZChwcm9wcywge1xuICAgIHJlbmRlcmVyczogcmVuZGVyZXJzLFxuICAgIGRlZmluaXRpb25zOiBnZXREZWZpbml0aW9ucyhyYXdBc3QpXG4gIH0pO1xuICB2YXIgYXN0UGx1Z2lucyA9IGRldGVybWluZUFzdFBsdWdpbnMocHJvcHMpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc3luY1xuXG4gIHZhciB0cmFuc2Zvcm1lZEFzdCA9IHBhcnNlci5ydW5TeW5jKHJhd0FzdCk7XG4gIHZhciBhc3QgPSBhc3RQbHVnaW5zLnJlZHVjZShmdW5jdGlvbiAobm9kZSwgcGx1Z2luKSB7XG4gICAgcmV0dXJuIHBsdWdpbihub2RlLCByZW5kZXJQcm9wcyk7XG4gIH0sIHRyYW5zZm9ybWVkQXN0KTtcbiAgcmV0dXJuIGFzdFRvUmVhY3QoYXN0LCByZW5kZXJQcm9wcyk7XG59O1xuXG5mdW5jdGlvbiBhcHBseVBhcnNlclBsdWdpbihwYXJzZXIsIHBsdWdpbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShwbHVnaW4pID8gcGFyc2VyLnVzZS5hcHBseShwYXJzZXIsIF90b0NvbnN1bWFibGVBcnJheShwbHVnaW4pKSA6IHBhcnNlci51c2UocGx1Z2luKTtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lQXN0UGx1Z2lucyhwcm9wcykge1xuICB2YXIgcGx1Z2lucyA9IFt3cmFwVGFibGVSb3dzLCBhZGRMaXN0TWV0YWRhdGEoKV07XG4gIHZhciBkaXNhbGxvd2VkVHlwZXMgPSBwcm9wcy5kaXNhbGxvd2VkVHlwZXM7XG5cbiAgaWYgKHByb3BzLmFsbG93ZWRUeXBlcykge1xuICAgIGRpc2FsbG93ZWRUeXBlcyA9IGFsbFR5cGVzLmZpbHRlcihmdW5jdGlvbiAodHlwZSkge1xuICAgICAgcmV0dXJuIHR5cGUgIT09ICdyb290JyAmJiBwcm9wcy5hbGxvd2VkVHlwZXMuaW5kZXhPZih0eXBlKSA9PT0gLTE7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgcmVtb3ZhbE1ldGhvZCA9IHByb3BzLnVud3JhcERpc2FsbG93ZWQgPyAndW53cmFwJyA6ICdyZW1vdmUnO1xuXG4gIGlmIChkaXNhbGxvd2VkVHlwZXMgJiYgZGlzYWxsb3dlZFR5cGVzLmxlbmd0aCA+IDApIHtcbiAgICBwbHVnaW5zLnB1c2goZGlzYWxsb3dOb2RlLm9mVHlwZShkaXNhbGxvd2VkVHlwZXMsIHJlbW92YWxNZXRob2QpKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5hbGxvd05vZGUpIHtcbiAgICBwbHVnaW5zLnB1c2goZGlzYWxsb3dOb2RlLmlmTm90TWF0Y2gocHJvcHMuYWxsb3dOb2RlLCByZW1vdmFsTWV0aG9kKSk7XG4gIH1cblxuICB2YXIgcmVuZGVySHRtbCA9ICFwcm9wcy5lc2NhcGVIdG1sICYmICFwcm9wcy5za2lwSHRtbDtcbiAgdmFyIGhhc0h0bWxQYXJzZXIgPSAocHJvcHMuYXN0UGx1Z2lucyB8fCBbXSkuc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBwbHVnaW4gPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbVswXSA6IGl0ZW07XG4gICAgcmV0dXJuIHBsdWdpbi5pZGVudGl0eSA9PT0gc3ltYm9scy5IdG1sUGFyc2VyO1xuICB9KTtcblxuICBpZiAocmVuZGVySHRtbCAmJiAhaGFzSHRtbFBhcnNlcikge1xuICAgIHBsdWdpbnMucHVzaChuYWl2ZUh0bWwpO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzLmFzdFBsdWdpbnMgPyBwbHVnaW5zLmNvbmNhdChwcm9wcy5hc3RQbHVnaW5zKSA6IHBsdWdpbnM7XG59XG5cblJlYWN0TWFya2Rvd24uZGVmYXVsdFByb3BzID0ge1xuICByZW5kZXJlcnM6IHt9LFxuICBlc2NhcGVIdG1sOiB0cnVlLFxuICBza2lwSHRtbDogZmFsc2UsXG4gIHNvdXJjZVBvczogZmFsc2UsXG4gIHJhd1NvdXJjZVBvczogZmFsc2UsXG4gIHRyYW5zZm9ybUxpbmtVcmk6IHVyaVRyYW5zZm9ybWVyLFxuICBhc3RQbHVnaW5zOiBbXSxcbiAgcGx1Z2luczogW10sXG4gIHBhcnNlck9wdGlvbnM6IHt9XG59O1xuUmVhY3RNYXJrZG93bi5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc291cmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgc291cmNlUG9zOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmF3U291cmNlUG9zOiBQcm9wVHlwZXMuYm9vbCxcbiAgZXNjYXBlSHRtbDogUHJvcFR5cGVzLmJvb2wsXG4gIHNraXBIdG1sOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWxsb3dOb2RlOiBQcm9wVHlwZXMuZnVuYyxcbiAgYWxsb3dlZFR5cGVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoYWxsVHlwZXMpKSxcbiAgZGlzYWxsb3dlZFR5cGVzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoYWxsVHlwZXMpKSxcbiAgdHJhbnNmb3JtTGlua1VyaTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ib29sXSksXG4gIGxpbmtUYXJnZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIHRyYW5zZm9ybUltYWdlVXJpOiBQcm9wVHlwZXMuZnVuYyxcbiAgYXN0UGx1Z2luczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmZ1bmMpLFxuICB1bndyYXBEaXNhbGxvd2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmVuZGVyZXJzOiBQcm9wVHlwZXMub2JqZWN0LFxuICBwbHVnaW5zOiBQcm9wVHlwZXMuYXJyYXksXG4gIHBhcnNlck9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5SZWFjdE1hcmtkb3duLnR5cGVzID0gYWxsVHlwZXM7XG5SZWFjdE1hcmtkb3duLnJlbmRlcmVycyA9IGRlZmF1bHRSZW5kZXJlcnM7XG5SZWFjdE1hcmtkb3duLnVyaVRyYW5zZm9ybWVyID0gdXJpVHJhbnNmb3JtZXI7XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TWFya2Rvd247IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpbmRleCA9IG1lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCIvKipcclxuICogUmV0dXJucyB0aGUgb2JqZWN0IHR5cGUgb2YgdGhlIGdpdmVuIHBheWxvYWRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRUeXBlKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocGF5bG9hZCkuc2xpY2UoOCwgLTEpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgdW5kZWZpbmVkXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyB1bmRlZmluZWR9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ1VuZGVmaW5lZCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBudWxsXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBudWxsfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNOdWxsKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnTnVsbCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0IChleGNsdWRpbmcgc3BlY2lhbCBjbGFzc2VzIG9yIG9iamVjdHMgd2l0aCBvdGhlciBwcm90b3R5cGVzKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgUGxhaW5PYmplY3R9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHBheWxvYWQpIHtcclxuICAgIGlmIChnZXRUeXBlKHBheWxvYWQpICE9PSAnT2JqZWN0JylcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gcGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0ICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihwYXlsb2FkKSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgKGV4Y2x1ZGluZyBzcGVjaWFsIGNsYXNzZXMgb3Igb2JqZWN0cyB3aXRoIG90aGVyIHByb3RvdHlwZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBQbGFpbk9iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHBheWxvYWQpIHtcclxuICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHBheWxvYWQpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBhbiBlbXB0eSBvYmplY3QgKGV4Y2x1ZGluZyBzcGVjaWFsIGNsYXNzZXMgb3Igb2JqZWN0cyB3aXRoIG90aGVyIHByb3RvdHlwZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyB7IFtLIGluIGFueV06IG5ldmVyIH19XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VtcHR5T2JqZWN0KHBheWxvYWQpIHtcclxuICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHBheWxvYWQpICYmIE9iamVjdC5rZXlzKHBheWxvYWQpLmxlbmd0aCA9PT0gMDtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgYW4gZW1wdHkgb2JqZWN0IChleGNsdWRpbmcgc3BlY2lhbCBjbGFzc2VzIG9yIG9iamVjdHMgd2l0aCBvdGhlciBwcm90b3R5cGVzKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgUGxhaW5PYmplY3R9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Z1bGxPYmplY3QocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QocGF5bG9hZCkgJiYgT2JqZWN0LmtleXMocGF5bG9hZCkubGVuZ3RoID4gMDtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGFueSBraW5kIG9mIG9iamVjdCAoaW5jbHVkaW5nIHNwZWNpYWwgY2xhc3NlcyBvciBvYmplY3RzIHdpdGggZGlmZmVyZW50IHByb3RvdHlwZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBQbGFpbk9iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGlzQW55T2JqZWN0KHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnT2JqZWN0JztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIG9iamVjdCBsaWtlIGEgdHlwZSBwYXNzZWQgaW4gPCA+XHJcbiAqXHJcbiAqIFVzYWdlOiBpc09iamVjdExpa2U8e2lkOiBhbnl9PihwYXlsb2FkKSAvLyB3aWxsIG1ha2Ugc3VyZSBpdCdzIGFuIG9iamVjdCBhbmQgaGFzIGFuIGBpZGAgcHJvcC5cclxuICpcclxuICogQHRlbXBsYXRlIFQgdGhpcyBtdXN0IGJlIHBhc3NlZCBpbiA8ID5cclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFR9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc09iamVjdExpa2UocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGlzQW55T2JqZWN0KHBheWxvYWQpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBmdW5jdGlvbiAocmVndWxhciBvciBhc3luYylcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIEFueUZ1bmN0aW9ufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNGdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHBheWxvYWQgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBhcnJheVxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBhbnlbXX1cclxuICovXHJcbmZ1bmN0aW9uIGlzQXJyYXkocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdBcnJheSc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIGFuIGFycmF5IHdpdGggYXQgbGVhc3QgMSBpdGVtXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBhbnlbXX1cclxuICovXHJcbmZ1bmN0aW9uIGlzRnVsbEFycmF5KHBheWxvYWQpIHtcclxuICAgIHJldHVybiBpc0FycmF5KHBheWxvYWQpICYmIHBheWxvYWQubGVuZ3RoID4gMDtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgYW4gZW1wdHkgYXJyYXlcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFtdfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNFbXB0eUFycmF5KHBheWxvYWQpIHtcclxuICAgIHJldHVybiBpc0FycmF5KHBheWxvYWQpICYmIHBheWxvYWQubGVuZ3RoID09PSAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBzdHJpbmdcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHN0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGlzU3RyaW5nKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnU3RyaW5nJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgc3RyaW5nLCBCVVQgcmV0dXJucyBmYWxzZSBmb3IgJydcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIHN0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGlzRnVsbFN0cmluZyhwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gaXNTdHJpbmcocGF5bG9hZCkgJiYgcGF5bG9hZCAhPT0gJyc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyAnJ1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgc3RyaW5nfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNFbXB0eVN0cmluZyhwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gcGF5bG9hZCA9PT0gJyc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIG51bWJlciAoYnV0IG5vdCBOYU4pXHJcbiAqXHJcbiAqIFRoaXMgd2lsbCByZXR1cm4gYGZhbHNlYCBmb3IgYE5hTmAhIVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgbnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNOdW1iZXIocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdOdW1iZXInICYmICFpc05hTihwYXlsb2FkKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgYm9vbGVhblxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgYm9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbihwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ0Jvb2xlYW4nO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gKFJlZ0V4cClcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFJlZ0V4cH1cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVnRXhwKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnUmVnRXhwJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgTWFwXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBNYXA8YW55LCBhbnk+fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNNYXAocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdNYXAnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBXZWFrTWFwXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBXZWFrTWFwPGFueSwgYW55Pn1cclxuICovXHJcbmZ1bmN0aW9uIGlzV2Vha01hcChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ1dlYWtNYXAnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBTZXRcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIFNldDxhbnk+fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTZXQocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdTZXQnO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBXZWFrU2V0XHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBXZWFrU2V0PGFueT59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1dlYWtTZXQocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdXZWFrU2V0JztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgU3ltYm9sXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBzeW1ib2x9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc1N5bWJvbChwYXlsb2FkKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gJ1N5bWJvbCc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIERhdGUsIGFuZCB0aGF0IHRoZSBkYXRlIGlzIHZhbGlkXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBEYXRlfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNEYXRlKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnRGF0ZScgJiYgIWlzTmFOKHBheWxvYWQpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBCbG9iXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcmV0dXJucyB7cGF5bG9hZCBpcyBCbG9ifVxyXG4gKi9cclxuZnVuY3Rpb24gaXNCbG9iKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnQmxvYic7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhIEZpbGVcclxuICpcclxuICogQHBhcmFtIHsqfSBwYXlsb2FkXHJcbiAqIEByZXR1cm5zIHtwYXlsb2FkIGlzIEZpbGV9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0ZpbGUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdGaWxlJztcclxufVxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGEgUHJvbWlzZVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgUHJvbWlzZTxhbnk+fVxyXG4gKi9cclxuZnVuY3Rpb24gaXNQcm9taXNlKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnUHJvbWlzZSc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBFcnJvclxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgRXJyb3J9XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Vycm9yKHBheWxvYWQpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKHBheWxvYWQpID09PSAnRXJyb3InO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgbGl0ZXJhbGx5IHRoZSB2YWx1ZSBgTmFOYCAoaXQncyBgTmFOYCBhbmQgYWxzbyBhIGBudW1iZXJgKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgdHlwZW9mIE5hTn1cclxuICovXHJcbmZ1bmN0aW9uIGlzTmFOVmFsdWUocGF5bG9hZCkge1xyXG4gICAgcmV0dXJuIGdldFR5cGUocGF5bG9hZCkgPT09ICdOdW1iZXInICYmIGlzTmFOKHBheWxvYWQpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYSBwcmltaXRpdmUgdHlwZSAoZWcuIEJvb2xlYW4gfCBOdWxsIHwgVW5kZWZpbmVkIHwgTnVtYmVyIHwgU3RyaW5nIHwgU3ltYm9sKVxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMgeyhwYXlsb2FkIGlzIGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkIHwgbnVtYmVyIHwgc3RyaW5nIHwgc3ltYm9sKX1cclxuICovXHJcbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHBheWxvYWQpIHtcclxuICAgIHJldHVybiAoaXNCb29sZWFuKHBheWxvYWQpIHx8XHJcbiAgICAgICAgaXNOdWxsKHBheWxvYWQpIHx8XHJcbiAgICAgICAgaXNVbmRlZmluZWQocGF5bG9hZCkgfHxcclxuICAgICAgICBpc051bWJlcihwYXlsb2FkKSB8fFxyXG4gICAgICAgIGlzU3RyaW5nKHBheWxvYWQpIHx8XHJcbiAgICAgICAgaXNTeW1ib2wocGF5bG9hZCkpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBudWxsIG9yIHVuZGVmaW5lZFxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWRcclxuICogQHJldHVybnMgeyhwYXlsb2FkIGlzIG51bGwgfCB1bmRlZmluZWQpfVxyXG4gKi9cclxudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gaXNPbmVPZihpc051bGwsIGlzVW5kZWZpbmVkKTtcclxuZnVuY3Rpb24gaXNPbmVPZihhLCBiLCBjLCBkLCBlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGEodmFsdWUpIHx8IGIodmFsdWUpIHx8ICghIWMgJiYgYyh2YWx1ZSkpIHx8ICghIWQgJiYgZCh2YWx1ZSkpIHx8ICghIWUgJiYgZSh2YWx1ZSkpO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogRG9lcyBhIGdlbmVyaWMgY2hlY2sgdG8gY2hlY2sgdGhhdCB0aGUgZ2l2ZW4gcGF5bG9hZCBpcyBvZiBhIGdpdmVuIHR5cGUuXHJcbiAqIEluIGNhc2VzIGxpa2UgTnVtYmVyLCBpdCB3aWxsIHJldHVybiB0cnVlIGZvciBOYU4gYXMgTmFOIGlzIGEgTnVtYmVyICh0aGFua3MgamF2YXNjcmlwdCEpO1xyXG4gKiBJdCB3aWxsLCBob3dldmVyLCBkaWZmZXJlbnRpYXRlIGJldHdlZW4gb2JqZWN0IGFuZCBudWxsXHJcbiAqXHJcbiAqIEB0ZW1wbGF0ZSBUXHJcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZFxyXG4gKiBAcGFyYW0ge1R9IHR5cGVcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBXaWxsIHRocm93IHR5cGUgZXJyb3IgaWYgdHlwZSBpcyBhbiBpbnZhbGlkIHR5cGVcclxuICogQHJldHVybnMge3BheWxvYWQgaXMgVH1cclxuICovXHJcbmZ1bmN0aW9uIGlzVHlwZShwYXlsb2FkLCB0eXBlKSB7XHJcbiAgICBpZiAoISh0eXBlIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVHlwZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgIH1cclxuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHR5cGUsICdwcm90b3R5cGUnKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1R5cGUgaXMgbm90IGEgY2xhc3MnKTtcclxuICAgIH1cclxuICAgIC8vIENsYXNzZXMgdXN1YWxseSBoYXZlIG5hbWVzIChhcyBmdW5jdGlvbnMgdXN1YWxseSBoYXZlIG5hbWVzKVxyXG4gICAgdmFyIG5hbWUgPSB0eXBlLm5hbWU7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShwYXlsb2FkKSA9PT0gbmFtZSB8fCBCb29sZWFuKHBheWxvYWQgJiYgcGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gdHlwZSk7XHJcbn1cblxuZXhwb3J0IHsgZ2V0VHlwZSwgaXNBbnlPYmplY3QsIGlzQXJyYXksIGlzQmxvYiwgaXNCb29sZWFuLCBpc0RhdGUsIGlzRW1wdHlBcnJheSwgaXNFbXB0eU9iamVjdCwgaXNFbXB0eVN0cmluZywgaXNFcnJvciwgaXNGaWxlLCBpc0Z1bGxBcnJheSwgaXNGdWxsT2JqZWN0LCBpc0Z1bGxTdHJpbmcsIGlzRnVuY3Rpb24sIGlzTWFwLCBpc05hTlZhbHVlLCBpc051bGwsIGlzTnVsbE9yVW5kZWZpbmVkLCBpc051bWJlciwgaXNPYmplY3QsIGlzT2JqZWN0TGlrZSwgaXNPbmVPZiwgaXNQbGFpbk9iamVjdCwgaXNQcmltaXRpdmUsIGlzUHJvbWlzZSwgaXNSZWdFeHAsIGlzU2V0LCBpc1N0cmluZywgaXNTeW1ib2wsIGlzVHlwZSwgaXNVbmRlZmluZWQsIGlzV2Vha01hcCwgaXNXZWFrU2V0IH07XG4iLCJpbXBvcnQgeyBpc1BsYWluT2JqZWN0LCBpc0FycmF5LCBpc1N5bWJvbCB9IGZyb20gJ2lzLXdoYXQnO1xuXG4vKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxuXG5mdW5jdGlvbiBhc3NpZ25Qcm9wKGNhcnJ5LCBrZXksIG5ld1ZhbCwgb3JpZ2luYWxPYmplY3QpIHtcclxuICAgIHZhciBwcm9wVHlwZSA9IG9yaWdpbmFsT2JqZWN0LnByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSlcclxuICAgICAgICA/ICdlbnVtZXJhYmxlJ1xyXG4gICAgICAgIDogJ25vbmVudW1lcmFibGUnO1xyXG4gICAgaWYgKHByb3BUeXBlID09PSAnZW51bWVyYWJsZScpXHJcbiAgICAgICAgY2Fycnlba2V5XSA9IG5ld1ZhbDtcclxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ25vbmVudW1lcmFibGUnKSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNhcnJ5LCBrZXksIHtcclxuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbCxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBtZXJnZVJlY3Vyc2l2ZWx5KG9yaWdpbiwgbmV3Q29tZXIsIGV4dGVuc2lvbnMpIHtcclxuICAgIC8vIHdvcmsgZGlyZWN0bHkgb24gbmV3Q29tZXIgaWYgaXRzIG5vdCBhbiBvYmplY3RcclxuICAgIGlmICghaXNQbGFpbk9iamVjdChuZXdDb21lcikpIHtcclxuICAgICAgICAvLyBleHRlbmQgbWVyZ2UgcnVsZXNcclxuICAgICAgICBpZiAoZXh0ZW5zaW9ucyAmJiBpc0FycmF5KGV4dGVuc2lvbnMpKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAoZXh0ZW5kKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDb21lciA9IGV4dGVuZChvcmlnaW4sIG5ld0NvbWVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdDb21lcjtcclxuICAgIH1cclxuICAgIC8vIGRlZmluZSBuZXdPYmplY3QgdG8gbWVyZ2UgYWxsIHZhbHVlcyB1cG9uXHJcbiAgICB2YXIgbmV3T2JqZWN0ID0ge307XHJcbiAgICBpZiAoaXNQbGFpbk9iamVjdChvcmlnaW4pKSB7XHJcbiAgICAgICAgdmFyIHByb3BzXzEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvcmlnaW4pO1xyXG4gICAgICAgIHZhciBzeW1ib2xzXzEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9yaWdpbik7XHJcbiAgICAgICAgbmV3T2JqZWN0ID0gX19zcHJlYWRBcnJheXMocHJvcHNfMSwgc3ltYm9sc18xKS5yZWR1Y2UoZnVuY3Rpb24gKGNhcnJ5LCBrZXkpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0VmFsID0gb3JpZ2luW2tleV07XHJcbiAgICAgICAgICAgIGlmICgoIWlzU3ltYm9sKGtleSkgJiYgIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG5ld0NvbWVyKS5pbmNsdWRlcyhrZXkpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGlzU3ltYm9sKGtleSkgJiYgIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobmV3Q29tZXIpLmluY2x1ZGVzKGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NpZ25Qcm9wKGNhcnJ5LCBrZXksIHRhcmdldFZhbCwgb3JpZ2luKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2Fycnk7XHJcbiAgICAgICAgfSwge30pO1xyXG4gICAgfVxyXG4gICAgdmFyIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobmV3Q29tZXIpO1xyXG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG5ld0NvbWVyKTtcclxuICAgIHZhciByZXN1bHQgPSBfX3NwcmVhZEFycmF5cyhwcm9wcywgc3ltYm9scykucmVkdWNlKGZ1bmN0aW9uIChjYXJyeSwga2V5KSB7XHJcbiAgICAgICAgLy8gcmUtZGVmaW5lIHRoZSBvcmlnaW4gYW5kIG5ld0NvbWVyIGFzIHRhcmdldFZhbCBhbmQgbmV3VmFsXHJcbiAgICAgICAgdmFyIG5ld1ZhbCA9IG5ld0NvbWVyW2tleV07XHJcbiAgICAgICAgdmFyIHRhcmdldFZhbCA9IChpc1BsYWluT2JqZWN0KG9yaWdpbikpXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgPyBvcmlnaW5ba2V5XVxyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgICAvLyBleHRlbmQgbWVyZ2UgcnVsZXNcclxuICAgICAgICBpZiAoZXh0ZW5zaW9ucyAmJiBpc0FycmF5KGV4dGVuc2lvbnMpKSB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAoZXh0ZW5kKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdWYWwgPSBleHRlbmQodGFyZ2V0VmFsLCBuZXdWYWwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gV2hlbiBuZXdWYWwgaXMgYW4gb2JqZWN0IGRvIHRoZSBtZXJnZSByZWN1cnNpdmVseVxyXG4gICAgICAgIGlmICh0YXJnZXRWYWwgIT09IHVuZGVmaW5lZCAmJiBpc1BsYWluT2JqZWN0KG5ld1ZhbCkpIHtcclxuICAgICAgICAgICAgbmV3VmFsID0gbWVyZ2VSZWN1cnNpdmVseSh0YXJnZXRWYWwsIG5ld1ZhbCwgZXh0ZW5zaW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFzc2lnblByb3AoY2FycnksIGtleSwgbmV3VmFsLCBuZXdDb21lcik7XHJcbiAgICAgICAgcmV0dXJuIGNhcnJ5O1xyXG4gICAgfSwgbmV3T2JqZWN0KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLyoqXHJcbiAqIE1lcmdlIGFueXRoaW5nIHJlY3Vyc2l2ZWx5LlxyXG4gKiBPYmplY3RzIGdldCBtZXJnZWQsIHNwZWNpYWwgb2JqZWN0cyAoY2xhc3NlcyBldGMuKSBhcmUgcmUtYXNzaWduZWQgXCJhcyBpc1wiLlxyXG4gKiBCYXNpYyB0eXBlcyBvdmVyd3JpdGUgb2JqZWN0cyBvciBvdGhlciBiYXNpYyB0eXBlcy5cclxuICpcclxuICogQHBhcmFtIHsoSUNvbmZpZyB8IGFueSl9IG9yaWdpblxyXG4gKiBAcGFyYW0gey4uLmFueVtdfSBuZXdDb21lcnNcclxuICogQHJldHVybnMgdGhlIHJlc3VsdFxyXG4gKi9cclxuZnVuY3Rpb24gbWVyZ2Uob3JpZ2luKSB7XHJcbiAgICB2YXIgbmV3Q29tZXJzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIG5ld0NvbWVyc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBleHRlbnNpb25zID0gbnVsbDtcclxuICAgIHZhciBiYXNlID0gb3JpZ2luO1xyXG4gICAgaWYgKGlzUGxhaW5PYmplY3Qob3JpZ2luKSAmJiBvcmlnaW4uZXh0ZW5zaW9ucyAmJiBPYmplY3Qua2V5cyhvcmlnaW4pLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIGJhc2UgPSB7fTtcclxuICAgICAgICBleHRlbnNpb25zID0gb3JpZ2luLmV4dGVuc2lvbnM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3Q29tZXJzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBuZXdDb21lcikge1xyXG4gICAgICAgIHJldHVybiBtZXJnZVJlY3Vyc2l2ZWx5KHJlc3VsdCwgbmV3Q29tZXIsIGV4dGVuc2lvbnMpO1xyXG4gICAgfSwgYmFzZSk7XHJcbn1cblxuZnVuY3Rpb24gY29uY2F0QXJyYXlzKG9yaWdpblZhbCwgbmV3VmFsKSB7XHJcbiAgICBpZiAoaXNBcnJheShvcmlnaW5WYWwpICYmIGlzQXJyYXkobmV3VmFsKSkge1xyXG4gICAgICAgIC8vIGNvbmNhdCBsb2dpY1xyXG4gICAgICAgIHJldHVybiBvcmlnaW5WYWwuY29uY2F0KG5ld1ZhbCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3VmFsOyAvLyBhbHdheXMgcmV0dXJuIG5ld1ZhbCBhcyBmYWxsYmFjayEhXHJcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7XG5leHBvcnQgeyBjb25jYXRBcnJheXMsIG1lcmdlIH07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjE0LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTQuMFwiO1xuIiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xuZnVuY3Rpb24gdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gdG9QcmltaXRpdmUsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKGUpIHtcbiAgaWYgKHZvaWQgMCA9PT0gZSkgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICByZXR1cm4gZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiAodCwgZSkge1xuICAgIHJldHVybiB0Ll9fcHJvdG9fXyA9IGUsIHQ7XG4gIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgX3NldFByb3RvdHlwZU9mKHQsIGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwidmFyIE92ZXJsb2FkWWllbGQgPSByZXF1aXJlKFwiLi9PdmVybG9hZFlpZWxkLmpzXCIpO1xudmFyIHJlZ2VuZXJhdG9yID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3IuanNcIik7XG52YXIgcmVnZW5lcmF0b3JBc3luYyA9IHJlcXVpcmUoXCIuL3JlZ2VuZXJhdG9yQXN5bmMuanNcIik7XG52YXIgcmVnZW5lcmF0b3JBc3luY0dlbiA9IHJlcXVpcmUoXCIuL3JlZ2VuZXJhdG9yQXN5bmNHZW4uanNcIik7XG52YXIgcmVnZW5lcmF0b3JBc3luY0l0ZXJhdG9yID0gcmVxdWlyZShcIi4vcmVnZW5lcmF0b3JBc3luY0l0ZXJhdG9yLmpzXCIpO1xudmFyIHJlZ2VuZXJhdG9yS2V5cyA9IHJlcXVpcmUoXCIuL3JlZ2VuZXJhdG9yS2V5cy5qc1wiKTtcbnZhciByZWdlbmVyYXRvclZhbHVlcyA9IHJlcXVpcmUoXCIuL3JlZ2VuZXJhdG9yVmFsdWVzLmpzXCIpO1xuZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIHIgPSByZWdlbmVyYXRvcigpLFxuICAgIGUgPSByLm0oX3JlZ2VuZXJhdG9yUnVudGltZSksXG4gICAgdCA9IChPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkgOiBlLl9fcHJvdG9fXykuY29uc3RydWN0b3I7XG4gIGZ1bmN0aW9uIG4ocikge1xuICAgIHZhciBlID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiByICYmIHIuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuICEhZSAmJiAoZSA9PT0gdCB8fCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIgPT09IChlLmRpc3BsYXlOYW1lIHx8IGUubmFtZSkpO1xuICB9XG4gIHZhciBvID0ge1xuICAgIFwidGhyb3dcIjogMSxcbiAgICBcInJldHVyblwiOiAyLFxuICAgIFwiYnJlYWtcIjogMyxcbiAgICBcImNvbnRpbnVlXCI6IDNcbiAgfTtcbiAgZnVuY3Rpb24gYShyKSB7XG4gICAgdmFyIGUsIHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuKSB7XG4gICAgICBlIHx8IChlID0ge1xuICAgICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICAgIHJldHVybiB0KG4uYSwgMik7XG4gICAgICAgIH0sXG4gICAgICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24gX2NhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBuLnY7XG4gICAgICAgIH0sXG4gICAgICAgIGFicnVwdDogZnVuY3Rpb24gYWJydXB0KHIsIGUpIHtcbiAgICAgICAgICByZXR1cm4gdChuLmEsIG9bcl0sIGUpO1xuICAgICAgICB9LFxuICAgICAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiBkZWxlZ2F0ZVlpZWxkKHIsIG8sIGEpIHtcbiAgICAgICAgICByZXR1cm4gZS5yZXN1bHROYW1lID0gbywgdChuLmQsIHJlZ2VuZXJhdG9yVmFsdWVzKHIpLCBhKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2gocikge1xuICAgICAgICAgIHJldHVybiB0KG4uZiwgcik7XG4gICAgICAgIH1cbiAgICAgIH0sIHQgPSBmdW5jdGlvbiB0KHIsIF90LCBvKSB7XG4gICAgICAgIG4ucCA9IGUucHJldiwgbi5uID0gZS5uZXh0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiByKF90LCBvKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBlLm5leHQgPSBuLm47XG4gICAgICAgIH1cbiAgICAgIH0pLCBlLnJlc3VsdE5hbWUgJiYgKGVbZS5yZXN1bHROYW1lXSA9IG4udiwgZS5yZXN1bHROYW1lID0gdm9pZCAwKSwgZS5zZW50ID0gbi52LCBlLm5leHQgPSBuLm47XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gci5jYWxsKHRoaXMsIGUpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgbi5wID0gZS5wcmV2LCBuLm4gPSBlLm5leHQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gKG1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yUnVudGltZSA9IGZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyYXA6IGZ1bmN0aW9uIHdyYXAoZSwgdCwgbiwgbykge1xuICAgICAgICByZXR1cm4gci53KGEoZSksIHQsIG4sIG8gJiYgby5yZXZlcnNlKCkpO1xuICAgICAgfSxcbiAgICAgIGlzR2VuZXJhdG9yRnVuY3Rpb246IG4sXG4gICAgICBtYXJrOiByLm0sXG4gICAgICBhd3JhcDogZnVuY3Rpb24gYXdyYXAociwgZSkge1xuICAgICAgICByZXR1cm4gbmV3IE92ZXJsb2FkWWllbGQociwgZSk7XG4gICAgICB9LFxuICAgICAgQXN5bmNJdGVyYXRvcjogcmVnZW5lcmF0b3JBc3luY0l0ZXJhdG9yLFxuICAgICAgYXN5bmM6IGZ1bmN0aW9uIGFzeW5jKHIsIGUsIHQsIG8sIHUpIHtcbiAgICAgICAgcmV0dXJuIChuKGUpID8gcmVnZW5lcmF0b3JBc3luY0dlbiA6IHJlZ2VuZXJhdG9yQXN5bmMpKGEociksIGUsIHQsIG8sIHUpO1xuICAgICAgfSxcbiAgICAgIGtleXM6IHJlZ2VuZXJhdG9yS2V5cyxcbiAgICAgIHZhbHVlczogcmVnZW5lcmF0b3JWYWx1ZXNcbiAgICB9O1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMpKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvclJ1bnRpbWUsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgcmVnZW5lcmF0b3JBc3luY0dlbiA9IHJlcXVpcmUoXCIuL3JlZ2VuZXJhdG9yQXN5bmNHZW4uanNcIik7XG5mdW5jdGlvbiBfcmVnZW5lcmF0b3JBc3luYyhuLCBlLCByLCB0LCBvKSB7XG4gIHZhciBhID0gcmVnZW5lcmF0b3JBc3luY0dlbihuLCBlLCByLCB0LCBvKTtcbiAgcmV0dXJuIGEubmV4dCgpLnRoZW4oZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gbi5kb25lID8gbi52YWx1ZSA6IGEubmV4dCgpO1xuICB9KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yQXN5bmMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfcmVnZW5lcmF0b3JLZXlzKGUpIHtcbiAgdmFyIG4gPSBPYmplY3QoZSksXG4gICAgciA9IFtdO1xuICBmb3IgKHZhciB0IGluIG4pIHIudW5zaGlmdCh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGUoKSB7XG4gICAgZm9yICg7IHIubGVuZ3RoOykgaWYgKCh0ID0gci5wb3AoKSkgaW4gbikgcmV0dXJuIGUudmFsdWUgPSB0LCBlLmRvbmUgPSAhMSwgZTtcbiAgICByZXR1cm4gZS5kb25lID0gITAsIGU7XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvcktleXMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5mdW5jdGlvbiBfcmVnZW5lcmF0b3JWYWx1ZXMoZSkge1xuICBpZiAobnVsbCAhPSBlKSB7XG4gICAgdmFyIHQgPSBlW1wiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIl0sXG4gICAgICByID0gMDtcbiAgICBpZiAodCkgcmV0dXJuIHQuY2FsbChlKTtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLm5leHQpIHJldHVybiBlO1xuICAgIGlmICghaXNOYU4oZS5sZW5ndGgpKSByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIGUgJiYgciA+PSBlLmxlbmd0aCAmJiAoZSA9IHZvaWQgMCksIHtcbiAgICAgICAgICB2YWx1ZTogZSAmJiBlW3IrK10sXG4gICAgICAgICAgZG9uZTogIWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoX3R5cGVvZihlKSArIFwiIGlzIG5vdCBpdGVyYWJsZVwiKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3JlZ2VuZXJhdG9yVmFsdWVzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRTaWRlQ2hhbm5lbCA9IHJlcXVpcmUoJ3NpZGUtY2hhbm5lbCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYXJyYXlQcmVmaXhHZW5lcmF0b3JzID0ge1xuICAgIGJyYWNrZXRzOiBmdW5jdGlvbiBicmFja2V0cyhwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbXSc7XG4gICAgfSxcbiAgICBjb21tYTogJ2NvbW1hJyxcbiAgICBpbmRpY2VzOiBmdW5jdGlvbiBpbmRpY2VzKHByZWZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnWycgKyBrZXkgKyAnXSc7XG4gICAgfSxcbiAgICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdChwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgcHVzaCA9IEFycmF5LnByb3RvdHlwZS5wdXNoO1xudmFyIHB1c2hUb0FycmF5ID0gZnVuY3Rpb24gKGFyciwgdmFsdWVPckFycmF5KSB7XG4gICAgcHVzaC5hcHBseShhcnIsIGlzQXJyYXkodmFsdWVPckFycmF5KSA/IHZhbHVlT3JBcnJheSA6IFt2YWx1ZU9yQXJyYXldKTtcbn07XG5cbnZhciB0b0lTTyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgZGVmYXVsdEZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhZGRRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBhbGxvd0VtcHR5QXJyYXlzOiBmYWxzZSxcbiAgICBhcnJheUZvcm1hdDogJ2luZGljZXMnLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBjb21tYVJvdW5kVHJpcDogZmFsc2UsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZW5jb2RlOiB0cnVlLFxuICAgIGVuY29kZURvdEluS2V5czogZmFsc2UsXG4gICAgZW5jb2RlcjogdXRpbHMuZW5jb2RlLFxuICAgIGVuY29kZVZhbHVlc09ubHk6IGZhbHNlLFxuICAgIGZpbHRlcjogdm9pZCB1bmRlZmluZWQsXG4gICAgZm9ybWF0OiBkZWZhdWx0Rm9ybWF0LFxuICAgIGZvcm1hdHRlcjogZm9ybWF0cy5mb3JtYXR0ZXJzW2RlZmF1bHRGb3JtYXRdLFxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBpbmRpY2VzOiBmYWxzZSxcbiAgICBzZXJpYWxpemVEYXRlOiBmdW5jdGlvbiBzZXJpYWxpemVEYXRlKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRvSVNPLmNhbGwoZGF0ZSk7XG4gICAgfSxcbiAgICBza2lwTnVsbHM6IGZhbHNlLFxuICAgIHN0cmljdE51bGxIYW5kbGluZzogZmFsc2Vcbn07XG5cbnZhciBpc05vbk51bGxpc2hQcmltaXRpdmUgPSBmdW5jdGlvbiBpc05vbk51bGxpc2hQcmltaXRpdmUodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZydcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdudW1iZXInXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnYm9vbGVhbidcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdzeW1ib2wnXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnYmlnaW50Jztcbn07XG5cbnZhciBzZW50aW5lbCA9IHt9O1xuXG52YXIgc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5KFxuICAgIG9iamVjdCxcbiAgICBwcmVmaXgsXG4gICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICBjb21tYVJvdW5kVHJpcCxcbiAgICBhbGxvd0VtcHR5QXJyYXlzLFxuICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICBza2lwTnVsbHMsXG4gICAgZW5jb2RlRG90SW5LZXlzLFxuICAgIGVuY29kZXIsXG4gICAgZmlsdGVyLFxuICAgIHNvcnQsXG4gICAgYWxsb3dEb3RzLFxuICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgZm9ybWF0LFxuICAgIGZvcm1hdHRlcixcbiAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgIGNoYXJzZXQsXG4gICAgc2lkZUNoYW5uZWxcbikge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG5cbiAgICB2YXIgdG1wU2MgPSBzaWRlQ2hhbm5lbDtcbiAgICB2YXIgc3RlcCA9IDA7XG4gICAgdmFyIGZpbmRGbGFnID0gZmFsc2U7XG4gICAgd2hpbGUgKCh0bXBTYyA9IHRtcFNjLmdldChzZW50aW5lbCkpICE9PSB2b2lkIHVuZGVmaW5lZCAmJiAhZmluZEZsYWcpIHtcbiAgICAgICAgLy8gV2hlcmUgb2JqZWN0IGxhc3QgYXBwZWFyZWQgaW4gdGhlIHJlZiB0cmVlXG4gICAgICAgIHZhciBwb3MgPSB0bXBTYy5nZXQob2JqZWN0KTtcbiAgICAgICAgc3RlcCArPSAxO1xuICAgICAgICBpZiAodHlwZW9mIHBvcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChwb3MgPT09IHN0ZXApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQ3ljbGljIG9iamVjdCB2YWx1ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaW5kRmxhZyA9IHRydWU7IC8vIEJyZWFrIHdoaWxlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0bXBTYy5nZXQoc2VudGluZWwpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgc3RlcCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYmogPSBmaWx0ZXIocHJlZml4LCBvYmopO1xuICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBvYmogPSBzZXJpYWxpemVEYXRlKG9iaik7XG4gICAgfSBlbHNlIGlmIChnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGlzQXJyYXkob2JqKSkge1xuICAgICAgICBvYmogPSB1dGlscy5tYXliZU1hcChvYmosIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEYXRlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoc3RyaWN0TnVsbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlciAmJiAhZW5jb2RlVmFsdWVzT25seSA/IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAna2V5JywgZm9ybWF0KSA6IHByZWZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmIChpc05vbk51bGxpc2hQcmltaXRpdmUob2JqKSB8fCB1dGlscy5pc0J1ZmZlcihvYmopKSB7XG4gICAgICAgIGlmIChlbmNvZGVyKSB7XG4gICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBlbmNvZGVWYWx1ZXNPbmx5ID8gcHJlZml4IDogZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknLCBmb3JtYXQpO1xuICAgICAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIoa2V5VmFsdWUpICsgJz0nICsgZm9ybWF0dGVyKGVuY29kZXIob2JqLCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAndmFsdWUnLCBmb3JtYXQpKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIocHJlZml4KSArICc9JyArIGZvcm1hdHRlcihTdHJpbmcob2JqKSldO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIHZhciBvYmpLZXlzO1xuICAgIGlmIChnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGlzQXJyYXkob2JqKSkge1xuICAgICAgICAvLyB3ZSBuZWVkIHRvIGpvaW4gZWxlbWVudHMgaW5cbiAgICAgICAgaWYgKGVuY29kZVZhbHVlc09ubHkgJiYgZW5jb2Rlcikge1xuICAgICAgICAgICAgb2JqID0gdXRpbHMubWF5YmVNYXAob2JqLCBlbmNvZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBvYmpLZXlzID0gW3sgdmFsdWU6IG9iai5sZW5ndGggPiAwID8gb2JqLmpvaW4oJywnKSB8fCBudWxsIDogdm9pZCB1bmRlZmluZWQgfV07XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGZpbHRlcikpIHtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIG9iaktleXMgPSBzb3J0ID8ga2V5cy5zb3J0KHNvcnQpIDoga2V5cztcbiAgICB9XG5cbiAgICB2YXIgZW5jb2RlZFByZWZpeCA9IGVuY29kZURvdEluS2V5cyA/IFN0cmluZyhwcmVmaXgpLnJlcGxhY2UoL1xcLi9nLCAnJTJFJykgOiBTdHJpbmcocHJlZml4KTtcblxuICAgIHZhciBhZGp1c3RlZFByZWZpeCA9IGNvbW1hUm91bmRUcmlwICYmIGlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAxID8gZW5jb2RlZFByZWZpeCArICdbXScgOiBlbmNvZGVkUHJlZml4O1xuXG4gICAgaWYgKGFsbG93RW1wdHlBcnJheXMgJiYgaXNBcnJheShvYmopICYmIG9iai5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGFkanVzdGVkUHJlZml4ICsgJ1tdJztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iaktleXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbal07XG4gICAgICAgIHZhciB2YWx1ZSA9IHR5cGVvZiBrZXkgPT09ICdvYmplY3QnICYmIGtleSAmJiB0eXBlb2Yga2V5LnZhbHVlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyBrZXkudmFsdWVcbiAgICAgICAgICAgIDogb2JqW2tleV07XG5cbiAgICAgICAgaWYgKHNraXBOdWxscyAmJiB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZW5jb2RlZEtleSA9IGFsbG93RG90cyAmJiBlbmNvZGVEb3RJbktleXMgPyBTdHJpbmcoa2V5KS5yZXBsYWNlKC9cXC4vZywgJyUyRScpIDogU3RyaW5nKGtleSk7XG4gICAgICAgIHZhciBrZXlQcmVmaXggPSBpc0FycmF5KG9iailcbiAgICAgICAgICAgID8gdHlwZW9mIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdmdW5jdGlvbicgPyBnZW5lcmF0ZUFycmF5UHJlZml4KGFkanVzdGVkUHJlZml4LCBlbmNvZGVkS2V5KSA6IGFkanVzdGVkUHJlZml4XG4gICAgICAgICAgICA6IGFkanVzdGVkUHJlZml4ICsgKGFsbG93RG90cyA/ICcuJyArIGVuY29kZWRLZXkgOiAnWycgKyBlbmNvZGVkS2V5ICsgJ10nKTtcblxuICAgICAgICBzaWRlQ2hhbm5lbC5zZXQob2JqZWN0LCBzdGVwKTtcbiAgICAgICAgdmFyIHZhbHVlU2lkZUNoYW5uZWwgPSBnZXRTaWRlQ2hhbm5lbCgpO1xuICAgICAgICB2YWx1ZVNpZGVDaGFubmVsLnNldChzZW50aW5lbCwgc2lkZUNoYW5uZWwpO1xuICAgICAgICBwdXNoVG9BcnJheSh2YWx1ZXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAga2V5UHJlZml4LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIGNvbW1hUm91bmRUcmlwLFxuICAgICAgICAgICAgYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgIGVuY29kZURvdEluS2V5cyxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgZW5jb2RlVmFsdWVzT25seSAmJiBpc0FycmF5KG9iaikgPyBudWxsIDogZW5jb2RlcixcbiAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIGNoYXJzZXQsXG4gICAgICAgICAgICB2YWx1ZVNpZGVDaGFubmVsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgYWxsb3dFbXB0eUFycmF5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmVuY29kZURvdEluS2V5cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuZW5jb2RlRG90SW5LZXlzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGVuY29kZURvdEluS2V5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZW5jb2RlciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgZGVmYXVsdHMuY2hhcnNldDtcbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICBpZiAodHlwZW9mIG9wdHMuZm9ybWF0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWhhcy5jYWxsKGZvcm1hdHMuZm9ybWF0dGVycywgb3B0cy5mb3JtYXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gb3B0cy5mb3JtYXQ7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0cy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBpc0FycmF5KG9wdHMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlGb3JtYXQ7XG4gICAgaWYgKG9wdHMuYXJyYXlGb3JtYXQgaW4gYXJyYXlQcmVmaXhHZW5lcmF0b3JzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5hcnJheUZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKCdpbmRpY2VzJyBpbiBvcHRzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBkZWZhdWx0cy5hcnJheUZvcm1hdDtcbiAgICB9XG5cbiAgICBpZiAoJ2NvbW1hUm91bmRUcmlwJyBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLmNvbW1hUm91bmRUcmlwICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGNvbW1hUm91bmRUcmlwYCBtdXN0IGJlIGEgYm9vbGVhbiwgb3IgYWJzZW50Jyk7XG4gICAgfVxuXG4gICAgdmFyIGFsbG93RG90cyA9IHR5cGVvZiBvcHRzLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBvcHRzLmVuY29kZURvdEluS2V5cyA9PT0gdHJ1ZSA/IHRydWUgOiBkZWZhdWx0cy5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkUXVlcnlQcmVmaXg6IHR5cGVvZiBvcHRzLmFkZFF1ZXJ5UHJlZml4ID09PSAnYm9vbGVhbicgPyBvcHRzLmFkZFF1ZXJ5UHJlZml4IDogZGVmYXVsdHMuYWRkUXVlcnlQcmVmaXgsXG4gICAgICAgIGFsbG93RG90czogYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd0VtcHR5QXJyYXlzOiB0eXBlb2Ygb3B0cy5hbGxvd0VtcHR5QXJyYXlzID09PSAnYm9vbGVhbicgPyAhIW9wdHMuYWxsb3dFbXB0eUFycmF5cyA6IGRlZmF1bHRzLmFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgIGFycmF5Rm9ybWF0OiBhcnJheUZvcm1hdCxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBjb21tYVJvdW5kVHJpcDogISFvcHRzLmNvbW1hUm91bmRUcmlwLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5kZWxpbWl0ZXIgOiBvcHRzLmRlbGltaXRlcixcbiAgICAgICAgZW5jb2RlOiB0eXBlb2Ygb3B0cy5lbmNvZGUgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlIDogZGVmYXVsdHMuZW5jb2RlLFxuICAgICAgICBlbmNvZGVEb3RJbktleXM6IHR5cGVvZiBvcHRzLmVuY29kZURvdEluS2V5cyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVEb3RJbktleXMgOiBkZWZhdWx0cy5lbmNvZGVEb3RJbktleXMsXG4gICAgICAgIGVuY29kZXI6IHR5cGVvZiBvcHRzLmVuY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRzLmVuY29kZXIgOiBkZWZhdWx0cy5lbmNvZGVyLFxuICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5OiB0eXBlb2Ygb3B0cy5lbmNvZGVWYWx1ZXNPbmx5ID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZVZhbHVlc09ubHkgOiBkZWZhdWx0cy5lbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICAgICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgICAgIGZvcm1hdHRlcjogZm9ybWF0dGVyLFxuICAgICAgICBzZXJpYWxpemVEYXRlOiB0eXBlb2Ygb3B0cy5zZXJpYWxpemVEYXRlID09PSAnZnVuY3Rpb24nID8gb3B0cy5zZXJpYWxpemVEYXRlIDogZGVmYXVsdHMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgc2tpcE51bGxzOiB0eXBlb2Ygb3B0cy5za2lwTnVsbHMgPT09ICdib29sZWFuJyA/IG9wdHMuc2tpcE51bGxzIDogZGVmYXVsdHMuc2tpcE51bGxzLFxuICAgICAgICBzb3J0OiB0eXBlb2Ygb3B0cy5zb3J0ID09PSAnZnVuY3Rpb24nID8gb3B0cy5zb3J0IDogbnVsbCxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgb3B0cykge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG4gICAgdmFyIG9wdGlvbnMgPSBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpO1xuXG4gICAgdmFyIG9iaktleXM7XG4gICAgdmFyIGZpbHRlcjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaiA9IGZpbHRlcignJywgb2JqKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob3B0aW9ucy5maWx0ZXIpKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGFycmF5UHJlZml4R2VuZXJhdG9yc1tvcHRpb25zLmFycmF5Rm9ybWF0XTtcbiAgICB2YXIgY29tbWFSb3VuZFRyaXAgPSBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIG9wdGlvbnMuY29tbWFSb3VuZFRyaXA7XG5cbiAgICBpZiAoIW9iaktleXMpIHtcbiAgICAgICAgb2JqS2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc29ydCkge1xuICAgICAgICBvYmpLZXlzLnNvcnQob3B0aW9ucy5zb3J0KTtcbiAgICB9XG5cbiAgICB2YXIgc2lkZUNoYW5uZWwgPSBnZXRTaWRlQ2hhbm5lbCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcE51bGxzICYmIHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBjb21tYVJvdW5kVHJpcCxcbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgb3B0aW9ucy5za2lwTnVsbHMsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZURvdEluS2V5cyxcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlID8gb3B0aW9ucy5lbmNvZGVyIDogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnMuZmlsdGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5zb3J0LFxuICAgICAgICAgICAgb3B0aW9ucy5hbGxvd0RvdHMsXG4gICAgICAgICAgICBvcHRpb25zLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdCxcbiAgICAgICAgICAgIG9wdGlvbnMuZm9ybWF0dGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgb3B0aW9ucy5jaGFyc2V0LFxuICAgICAgICAgICAgc2lkZUNoYW5uZWxcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgdmFyIGpvaW5lZCA9IGtleXMuam9pbihvcHRpb25zLmRlbGltaXRlcik7XG4gICAgdmFyIHByZWZpeCA9IG9wdGlvbnMuYWRkUXVlcnlQcmVmaXggPT09IHRydWUgPyAnPycgOiAnJztcblxuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBpZiAob3B0aW9ucy5jaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKSwgdGhlIFwibnVtZXJpYyBlbnRpdHlcIiByZXByZXNlbnRhdGlvbiBvZiBhIGNoZWNrbWFya1xuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG4gICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JUUyJTlDJTkzJic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gam9pbmVkLmxlbmd0aCA+IDAgPyBwcmVmaXggKyBqb2luZWQgOiAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnb2JqZWN0LWluc3BlY3QnKTtcbnZhciBnZXRTaWRlQ2hhbm5lbExpc3QgPSByZXF1aXJlKCdzaWRlLWNoYW5uZWwtbGlzdCcpO1xudmFyIGdldFNpZGVDaGFubmVsTWFwID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsLW1hcCcpO1xudmFyIGdldFNpZGVDaGFubmVsV2Vha01hcCA9IHJlcXVpcmUoJ3NpZGUtY2hhbm5lbC13ZWFrbWFwJyk7XG5cbnZhciBtYWtlQ2hhbm5lbCA9IGdldFNpZGVDaGFubmVsV2Vha01hcCB8fCBnZXRTaWRlQ2hhbm5lbE1hcCB8fCBnZXRTaWRlQ2hhbm5lbExpc3Q7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFNpZGVDaGFubmVsKCkge1xuXHQvKiogQHR5cGVkZWYge1JldHVyblR5cGU8dHlwZW9mIGdldFNpZGVDaGFubmVsPn0gQ2hhbm5lbCAqL1xuXG5cdC8qKiBAdHlwZSB7Q2hhbm5lbCB8IHVuZGVmaW5lZH0gKi8gdmFyICRjaGFubmVsRGF0YTtcblxuXHQvKiogQHR5cGUge0NoYW5uZWx9ICovXG5cdHZhciBjaGFubmVsID0ge1xuXHRcdGFzc2VydDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCFjaGFubmVsLmhhcyhrZXkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTaWRlIGNoYW5uZWwgZG9lcyBub3QgY29udGFpbiAnICsgaW5zcGVjdChrZXkpKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdCdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gISEkY2hhbm5lbERhdGEgJiYgJGNoYW5uZWxEYXRhWydkZWxldGUnXShrZXkpO1xuXHRcdH0sXG5cdFx0Z2V0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gJGNoYW5uZWxEYXRhICYmICRjaGFubmVsRGF0YS5nZXQoa2V5KTtcblx0XHR9LFxuXHRcdGhhczogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuICEhJGNoYW5uZWxEYXRhICYmICRjaGFubmVsRGF0YS5oYXMoa2V5KTtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmICghJGNoYW5uZWxEYXRhKSB7XG5cdFx0XHRcdCRjaGFubmVsRGF0YSA9IG1ha2VDaGFubmVsKCk7XG5cdFx0XHR9XG5cblx0XHRcdCRjaGFubmVsRGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0fVxuXHR9O1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGZpZ3VyZSBvdXQgd2h5IHRoaXMgaXMgZXJyb3Jpbmdcblx0cmV0dXJuIGNoYW5uZWw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxuLypcbiogVGhpcyBmdW5jdGlvbiB0cmF2ZXJzZXMgdGhlIGxpc3QgcmV0dXJuaW5nIHRoZSBub2RlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGtleS5cbipcbiogVGhhdCBub2RlIGlzIGFsc28gbW92ZWQgdG8gdGhlIGhlYWQgb2YgdGhlIGxpc3QsIHNvIHRoYXQgaWYgaXQncyBhY2Nlc3NlZCBhZ2FpbiB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIHRoZSB3aG9sZSBsaXN0LlxuKiBCeSBkb2luZyBzbywgYWxsIHRoZSByZWNlbnRseSB1c2VkIG5vZGVzIGNhbiBiZSBhY2Nlc3NlZCByZWxhdGl2ZWx5IHF1aWNrbHkuXG4qL1xuLyoqIEB0eXBlIHtpbXBvcnQoJy4vbGlzdC5kLnRzJykubGlzdEdldE5vZGV9ICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBsaXN0R2V0Tm9kZSA9IGZ1bmN0aW9uIChsaXN0LCBrZXksIGlzRGVsZXRlKSB7XG5cdC8qKiBAdHlwZSB7dHlwZW9mIGxpc3QgfCBOb25OdWxsYWJsZTwodHlwZW9mIGxpc3QpWyduZXh0J10+fSAqL1xuXHR2YXIgcHJldiA9IGxpc3Q7XG5cdC8qKiBAdHlwZSB7KHR5cGVvZiBsaXN0KVsnbmV4dCddfSAqL1xuXHR2YXIgY3Vycjtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRmb3IgKDsgKGN1cnIgPSBwcmV2Lm5leHQpICE9IG51bGw7IHByZXYgPSBjdXJyKSB7XG5cdFx0aWYgKGN1cnIua2V5ID09PSBrZXkpIHtcblx0XHRcdHByZXYubmV4dCA9IGN1cnIubmV4dDtcblx0XHRcdGlmICghaXNEZWxldGUpIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xuXHRcdFx0XHRjdXJyLm5leHQgPSAvKiogQHR5cGUge05vbk51bGxhYmxlPHR5cGVvZiBsaXN0Lm5leHQ+fSAqLyAobGlzdC5uZXh0KTtcblx0XHRcdFx0bGlzdC5uZXh0ID0gY3VycjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGN1cnI7XG5cdFx0fVxuXHR9XG59O1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9saXN0LmQudHMnKS5saXN0R2V0fSAqL1xudmFyIGxpc3RHZXQgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5KSB7XG5cdGlmICghb2JqZWN0cykge1xuXHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0fVxuXHR2YXIgbm9kZSA9IGxpc3RHZXROb2RlKG9iamVjdHMsIGtleSk7XG5cdHJldHVybiBub2RlICYmIG5vZGUudmFsdWU7XG59O1xuLyoqIEB0eXBlIHtpbXBvcnQoJy4vbGlzdC5kLnRzJykubGlzdFNldH0gKi9cbnZhciBsaXN0U2V0ID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSwgdmFsdWUpIHtcblx0dmFyIG5vZGUgPSBsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xuXHRpZiAobm9kZSkge1xuXHRcdG5vZGUudmFsdWUgPSB2YWx1ZTtcblx0fSBlbHNlIHtcblx0XHQvLyBQcmVwZW5kIHRoZSBuZXcgbm9kZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0XG5cdFx0b2JqZWN0cy5uZXh0ID0gLyoqIEB0eXBlIHtpbXBvcnQoJy4vbGlzdC5kLnRzJykuTGlzdE5vZGU8dHlwZW9mIHZhbHVlLCB0eXBlb2Yga2V5Pn0gKi8gKHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgbm8tZXh0cmEtcGFyZW5zXG5cdFx0XHRrZXk6IGtleSxcblx0XHRcdG5leHQ6IG9iamVjdHMubmV4dCxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH0pO1xuXHR9XG59O1xuLyoqIEB0eXBlIHtpbXBvcnQoJy4vbGlzdC5kLnRzJykubGlzdEhhc30gKi9cbnZhciBsaXN0SGFzID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHRpZiAoIW9iamVjdHMpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuICEhbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcbn07XG4vKiogQHR5cGUge2ltcG9ydCgnLi9saXN0LmQudHMnKS5saXN0RGVsZXRlfSAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG52YXIgbGlzdERlbGV0ZSA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHtcblx0aWYgKG9iamVjdHMpIHtcblx0XHRyZXR1cm4gbGlzdEdldE5vZGUob2JqZWN0cywga2V5LCB0cnVlKTtcblx0fVxufTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWxMaXN0KCkge1xuXHQvKiogQHR5cGVkZWYge1JldHVyblR5cGU8dHlwZW9mIGdldFNpZGVDaGFubmVsTGlzdD59IENoYW5uZWwgKi9cblx0LyoqIEB0eXBlZGVmIHtQYXJhbWV0ZXJzPENoYW5uZWxbJ2dldCddPlswXX0gSyAqL1xuXHQvKiogQHR5cGVkZWYge1BhcmFtZXRlcnM8Q2hhbm5lbFsnc2V0J10+WzFdfSBWICovXG5cblx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vbGlzdC5kLnRzJykuUm9vdE5vZGU8ViwgSz4gfCB1bmRlZmluZWR9ICovIHZhciAkbztcblxuXHQvKiogQHR5cGUge0NoYW5uZWx9ICovXG5cdHZhciBjaGFubmVsID0ge1xuXHRcdGFzc2VydDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCFjaGFubmVsLmhhcyhrZXkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTaWRlIGNoYW5uZWwgZG9lcyBub3QgY29udGFpbiAnICsgaW5zcGVjdChrZXkpKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdCdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHR2YXIgcm9vdCA9ICRvICYmICRvLm5leHQ7XG5cdFx0XHR2YXIgZGVsZXRlZE5vZGUgPSBsaXN0RGVsZXRlKCRvLCBrZXkpO1xuXHRcdFx0aWYgKGRlbGV0ZWROb2RlICYmIHJvb3QgJiYgcm9vdCA9PT0gZGVsZXRlZE5vZGUpIHtcblx0XHRcdFx0JG8gPSB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdHJldHVybiAhIWRlbGV0ZWROb2RlO1xuXHRcdH0sXG5cdFx0Z2V0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gbGlzdEdldCgkbywga2V5KTtcblx0XHR9LFxuXHRcdGhhczogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGxpc3RIYXMoJG8sIGtleSk7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRpZiAoISRvKSB7XG5cdFx0XHRcdC8vIEluaXRpYWxpemUgdGhlIGxpbmtlZCBsaXN0IGFzIGFuIGVtcHR5IG5vZGUsIHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byBzcGVjaWFsLWNhc2UgaGFuZGxpbmcgb2YgdGhlIGZpcnN0IG5vZGU6IHdlIGNhbiBhbHdheXMgcmVmZXIgdG8gaXQgYXMgKHByZXZpb3VzIG5vZGUpLm5leHQsIGluc3RlYWQgb2Ygc29tZXRoaW5nIGxpa2UgKGxpc3QpLmhlYWRcblx0XHRcdFx0JG8gPSB7XG5cdFx0XHRcdFx0bmV4dDogdm9pZCB1bmRlZmluZWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnNcblx0XHRcdGxpc3RTZXQoLyoqIEB0eXBlIHtOb25OdWxsYWJsZTx0eXBlb2YgJG8+fSAqLyAoJG8pLCBrZXksIHZhbHVlKTtcblx0XHR9XG5cdH07XG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETzogZmlndXJlIG91dCB3aHkgdGhpcyBpcyBlcnJvcmluZ1xuXHRyZXR1cm4gY2hhbm5lbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9ldmFsJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IEV2YWxFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmFuZ2UnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gUmFuZ2VFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmVmJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmVyZW5jZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9zeW50YXgnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gU3ludGF4RXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3VyaScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBVUklFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vYWJzJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguYWJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9mbG9vcicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZsb29yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9tYXgnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5tYXg7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL21pbicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLm1pbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcG93Jyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgucG93O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yb3VuZCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnJvdW5kO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi9pc05hTicpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9zaWduJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNpZ24obnVtYmVyKSB7XG5cdGlmICgkaXNOYU4obnVtYmVyKSB8fCBudW1iZXIgPT09IDApIHtcblx0XHRyZXR1cm4gbnVtYmVyO1xuXHR9XG5cdHJldHVybiBudW1iZXIgPCAwID8gLTEgOiArMTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2lzTmFOJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBpc05hTihhKSB7XG5cdHJldHVybiBhICE9PSBhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZ09QRCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBmYWxzZTtcbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkZGVmaW5lUHJvcGVydHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9zaGFtcycpfSAqL1xuLyogZXNsaW50IGNvbXBsZXhpdHk6IFsyLCAxOF0sIG1heC1zdGF0ZW1lbnRzOiBbMiwgMzNdICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1N5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuIHRydWU7IH1cblxuXHQvKiogQHR5cGUge3sgW2sgaW4gc3ltYm9sXT86IHVua25vd24gfX0gKi9cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yICh2YXIgXyBpbiBvYmopIHsgcmV0dXJuIGZhbHNlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLXVucmVhY2hhYmxlLWxvb3Bcblx0aWYgKHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopO1xuXHRpZiAoc3ltcy5sZW5ndGggIT09IDEgfHwgc3ltc1swXSAhPT0gc3ltKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPT09ICdmdW5jdGlvbicpIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG5cdFx0dmFyIGRlc2NyaXB0b3IgPSAvKiogQHR5cGUge1Byb3BlcnR5RGVzY3JpcHRvcn0gKi8gKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBzeW0pKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZmxlY3RHZXRQcm90byA9IHJlcXVpcmUoJy4vUmVmbGVjdC5nZXRQcm90b3R5cGVPZicpO1xudmFyIG9yaWdpbmFsR2V0UHJvdG8gPSByZXF1aXJlKCcuL09iamVjdC5nZXRQcm90b3R5cGVPZicpO1xuXG52YXIgZ2V0RHVuZGVyUHJvdG8gPSByZXF1aXJlKCdkdW5kZXItcHJvdG8vZ2V0Jyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IHJlZmxlY3RHZXRQcm90b1xuXHQ/IGZ1bmN0aW9uIGdldFByb3RvKE8pIHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGNhbid0IG5hcnJvdyBpbnNpZGUgYSBjbG9zdXJlLCBmb3Igc29tZSByZWFzb25cblx0XHRyZXR1cm4gcmVmbGVjdEdldFByb3RvKE8pO1xuXHR9XG5cdDogb3JpZ2luYWxHZXRQcm90b1xuXHRcdD8gZnVuY3Rpb24gZ2V0UHJvdG8oTykge1xuXHRcdFx0aWYgKCFPIHx8ICh0eXBlb2YgTyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIE8gIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldFByb3RvOiBub3QgYW4gb2JqZWN0Jyk7XG5cdFx0XHR9XG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGNhbid0IG5hcnJvdyBpbnNpZGUgYSBjbG9zdXJlLCBmb3Igc29tZSByZWFzb25cblx0XHRcdHJldHVybiBvcmlnaW5hbEdldFByb3RvKE8pO1xuXHRcdH1cblx0XHQ6IGdldER1bmRlclByb3RvXG5cdFx0XHQ/IGZ1bmN0aW9uIGdldFByb3RvKE8pIHtcblx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUUyBjYW4ndCBuYXJyb3cgaW5zaWRlIGEgY2xvc3VyZSwgZm9yIHNvbWUgcmVhc29uXG5cdFx0XHRcdHJldHVybiBnZXREdW5kZXJQcm90byhPKTtcblx0XHRcdH1cblx0XHRcdDogbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnMnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xuXG52YXIgaGFzUHJvdG9BY2Nlc3NvcjtcbnRyeSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnMsIG5vLXByb3RvXG5cdGhhc1Byb3RvQWNjZXNzb3IgPSAvKiogQHR5cGUge3sgX19wcm90b19fPzogdHlwZW9mIEFycmF5LnByb3RvdHlwZSB9fSAqLyAoW10pLl9fcHJvdG9fXyA9PT0gQXJyYXkucHJvdG90eXBlO1xufSBjYXRjaCAoZSkge1xuXHRpZiAoIWUgfHwgdHlwZW9mIGUgIT09ICdvYmplY3QnIHx8ICEoJ2NvZGUnIGluIGUpIHx8IGUuY29kZSAhPT0gJ0VSUl9QUk9UT19BQ0NFU1MnKSB7XG5cdFx0dGhyb3cgZTtcblx0fVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG52YXIgZGVzYyA9ICEhaGFzUHJvdG9BY2Nlc3NvciAmJiBnT1BEICYmIGdPUEQoT2JqZWN0LnByb3RvdHlwZSwgLyoqIEB0eXBlIHtrZXlvZiB0eXBlb2YgT2JqZWN0LnByb3RvdHlwZX0gKi8gKCdfX3Byb3RvX18nKSk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xudmFyICRnZXRQcm90b3R5cGVPZiA9ICRPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2dldCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBkZXNjICYmIHR5cGVvZiBkZXNjLmdldCA9PT0gJ2Z1bmN0aW9uJ1xuXHQ/IGNhbGxCaW5kKFtkZXNjLmdldF0pXG5cdDogdHlwZW9mICRnZXRQcm90b3R5cGVPZiA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdD8gLyoqIEB0eXBlIHtpbXBvcnQoJy4vZ2V0Jyl9ICovIGZ1bmN0aW9uIGdldER1bmRlcih2YWx1ZSkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0cmV0dXJuICRnZXRQcm90b3R5cGVPZih2YWx1ZSA9PSBudWxsID8gdmFsdWUgOiAkT2JqZWN0KHZhbHVlKSk7XG5cdFx0fVxuXHRcdDogZmFsc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbnZhciBjb25jYXR0eSA9IGZ1bmN0aW9uIGNvbmNhdHR5KGEsIGIpIHtcbiAgICB2YXIgYXJyID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyW2ldID0gYVtpXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBiLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGFycltqICsgYS5sZW5ndGhdID0gYltqXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyO1xufTtcblxudmFyIHNsaWN5ID0gZnVuY3Rpb24gc2xpY3koYXJyTGlrZSwgb2Zmc2V0KSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBvZmZzZXQgfHwgMCwgaiA9IDA7IGkgPCBhcnJMaWtlLmxlbmd0aDsgaSArPSAxLCBqICs9IDEpIHtcbiAgICAgICAgYXJyW2pdID0gYXJyTGlrZVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn07XG5cbnZhciBqb2lueSA9IGZ1bmN0aW9uIChhcnIsIGpvaW5lcikge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gYXJyW2ldO1xuICAgICAgICBpZiAoaSArIDEgPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICBzdHIgKz0gam9pbmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmFwcGx5KHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY3koYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgY29uY2F0dHkoYXJncywgYXJndW1lbnRzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgY29uY2F0dHkoYXJncywgYXJndW1lbnRzKVxuICAgICAgICApO1xuXG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IG1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzW2ldID0gJyQnICsgaTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgam9pbnkoYm91bmRBcmdzLCAnLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG52YXIgJGFwcGx5ID0gcmVxdWlyZSgnLi9mdW5jdGlvbkFwcGx5Jyk7XG52YXIgJGNhbGwgPSByZXF1aXJlKCcuL2Z1bmN0aW9uQ2FsbCcpO1xudmFyICRyZWZsZWN0QXBwbHkgPSByZXF1aXJlKCcuL3JlZmxlY3RBcHBseScpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9hY3R1YWxBcHBseScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSAkcmVmbGVjdEFwcGx5IHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmVmbGVjdEFwcGx5Jyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBSZWZsZWN0ICYmIFJlZmxlY3QuYXBwbHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG52YXIgJGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKGNhbGwsICRoYXNPd24pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYm91bmQnKTtcbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnb2JqZWN0LWluc3BlY3QnKTtcbnZhciBnZXRTaWRlQ2hhbm5lbE1hcCA9IHJlcXVpcmUoJ3NpZGUtY2hhbm5lbC1tYXAnKTtcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyICRXZWFrTWFwID0gR2V0SW50cmluc2ljKCclV2Vha01hcCUnLCB0cnVlKTtcblxuLyoqIEB0eXBlIHs8SyBleHRlbmRzIG9iamVjdCwgVj4odGhpc0FyZzogV2Vha01hcDxLLCBWPiwga2V5OiBLKSA9PiBWfSAqL1xudmFyICR3ZWFrTWFwR2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEsgZXh0ZW5kcyBvYmplY3QsIFY+KHRoaXNBcmc6IFdlYWtNYXA8SywgVj4sIGtleTogSywgdmFsdWU6IFYpID0+IHZvaWR9ICovXG52YXIgJHdlYWtNYXBTZXQgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLnNldCcsIHRydWUpO1xuLyoqIEB0eXBlIHs8SyBleHRlbmRzIG9iamVjdCwgVj4odGhpc0FyZzogV2Vha01hcDxLLCBWPiwga2V5OiBLKSA9PiBib29sZWFufSAqL1xudmFyICR3ZWFrTWFwSGFzID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5oYXMnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEsgZXh0ZW5kcyBvYmplY3QsIFY+KHRoaXNBcmc6IFdlYWtNYXA8SywgVj4sIGtleTogSykgPT4gYm9vbGVhbn0gKi9cbnZhciAkd2Vha01hcERlbGV0ZSA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlJywgdHJ1ZSk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9ICRXZWFrTWFwXG5cdD8gLyoqIEB0eXBlIHtFeGNsdWRlPGltcG9ydCgnLicpLCBmYWxzZT59ICovIGZ1bmN0aW9uIGdldFNpZGVDaGFubmVsV2Vha01hcCgpIHtcblx0XHQvKiogQHR5cGVkZWYge1JldHVyblR5cGU8dHlwZW9mIGdldFNpZGVDaGFubmVsV2Vha01hcD59IENoYW5uZWwgKi9cblx0XHQvKiogQHR5cGVkZWYge1BhcmFtZXRlcnM8Q2hhbm5lbFsnZ2V0J10+WzBdfSBLICovXG5cdFx0LyoqIEB0eXBlZGVmIHtQYXJhbWV0ZXJzPENoYW5uZWxbJ3NldCddPlsxXX0gViAqL1xuXG5cdFx0LyoqIEB0eXBlIHtXZWFrTWFwPEsgJiBvYmplY3QsIFY+IHwgdW5kZWZpbmVkfSAqLyB2YXIgJHdtO1xuXHRcdC8qKiBAdHlwZSB7Q2hhbm5lbCB8IHVuZGVmaW5lZH0gKi8gdmFyICRtO1xuXG5cdFx0LyoqIEB0eXBlIHtDaGFubmVsfSAqL1xuXHRcdHZhciBjaGFubmVsID0ge1xuXHRcdFx0YXNzZXJ0OiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTaWRlIGNoYW5uZWwgZG9lcyBub3QgY29udGFpbiAnICsgaW5zcGVjdChrZXkpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwRGVsZXRlKCR3bSwga2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoZ2V0U2lkZUNoYW5uZWxNYXApIHtcblx0XHRcdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0XHRcdHJldHVybiAkbVsnZGVsZXRlJ10oa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdGdldDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRcdGlmICgkd20pIHtcblx0XHRcdFx0XHRcdHJldHVybiAkd2Vha01hcEdldCgkd20sIGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAkbSAmJiAkbS5nZXQoa2V5KTtcblx0XHRcdH0sXG5cdFx0XHRoYXM6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJHdlYWtNYXBIYXMoJHdtLCBrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gISEkbSAmJiAkbS5oYXMoa2V5KTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdFx0aWYgKCEkd20pIHtcblx0XHRcdFx0XHRcdCR3bSA9IG5ldyAkV2Vha01hcCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkd2Vha01hcFNldCgkd20sIGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGdldFNpZGVDaGFubmVsTWFwKSB7XG5cdFx0XHRcdFx0aWYgKCEkbSkge1xuXHRcdFx0XHRcdFx0JG0gPSBnZXRTaWRlQ2hhbm5lbE1hcCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG5cdFx0XHRcdFx0LyoqIEB0eXBlIHtOb25OdWxsYWJsZTx0eXBlb2YgJG0+fSAqLyAoJG0pLnNldChrZXksIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGZpZ3VyZSBvdXQgd2h5IHRoaXMgaXMgZXJyb3Jpbmdcblx0XHRyZXR1cm4gY2hhbm5lbDtcblx0fVxuXHQ6IGdldFNpZGVDaGFubmVsTWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBhbGxvd0VtcHR5QXJyYXlzOiBmYWxzZSxcbiAgICBhbGxvd1Byb3RvdHlwZXM6IGZhbHNlLFxuICAgIGFsbG93U3BhcnNlOiBmYWxzZSxcbiAgICBhcnJheUxpbWl0OiAyMCxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgY29tbWE6IGZhbHNlLFxuICAgIGRlY29kZURvdEluS2V5czogZmFsc2UsXG4gICAgZGVjb2RlcjogdXRpbHMuZGVjb2RlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGRlcHRoOiA1LFxuICAgIGR1cGxpY2F0ZXM6ICdjb21iaW5lJyxcbiAgICBpZ25vcmVRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiBmYWxzZSxcbiAgICBwYXJhbWV0ZXJMaW1pdDogMTAwMCxcbiAgICBwYXJzZUFycmF5czogdHJ1ZSxcbiAgICBwbGFpbk9iamVjdHM6IGZhbHNlLFxuICAgIHN0cmljdERlcHRoOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlLFxuICAgIHRocm93T25MaW1pdEV4Y2VlZGVkOiBmYWxzZVxufTtcblxudmFyIGludGVycHJldE51bWVyaWNFbnRpdGllcyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYjKFxcZCspOy9nLCBmdW5jdGlvbiAoJDAsIG51bWJlclN0cikge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChudW1iZXJTdHIsIDEwKSk7XG4gICAgfSk7XG59O1xuXG52YXIgcGFyc2VBcnJheVZhbHVlID0gZnVuY3Rpb24gKHZhbCwgb3B0aW9ucywgY3VycmVudEFycmF5TGVuZ3RoKSB7XG4gICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNvbW1hICYmIHZhbC5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdmFsLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudGhyb3dPbkxpbWl0RXhjZWVkZWQgJiYgY3VycmVudEFycmF5TGVuZ3RoID49IG9wdGlvbnMuYXJyYXlMaW1pdCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXJyYXkgbGltaXQgZXhjZWVkZWQuIE9ubHkgJyArIG9wdGlvbnMuYXJyYXlMaW1pdCArICcgZWxlbWVudCcgKyAob3B0aW9ucy5hcnJheUxpbWl0ID09PSAxID8gJycgOiAncycpICsgJyBhbGxvd2VkIGluIGFuIGFycmF5LicpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG59O1xuXG4vLyBUaGlzIGlzIHdoYXQgYnJvd3NlcnMgd2lsbCBzdWJtaXQgd2hlbiB0aGUg4pyTIGNoYXJhY3RlciBvY2N1cnMgaW4gYW5cbi8vIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCBib2R5IGFuZCB0aGUgZW5jb2Rpbmcgb2YgdGhlIHBhZ2UgY29udGFpbmluZ1xuLy8gdGhlIGZvcm0gaXMgaXNvLTg4NTktMSwgb3Igd2hlbiB0aGUgc3VibWl0dGVkIGZvcm0gaGFzIGFuIGFjY2VwdC1jaGFyc2V0XG4vLyBhdHRyaWJ1dGUgb2YgaXNvLTg4NTktMS4gUHJlc3VtYWJseSBhbHNvIHdpdGggb3RoZXIgY2hhcnNldHMgdGhhdCBkbyBub3QgY29udGFpblxuLy8gdGhlIOKckyBjaGFyYWN0ZXIsIHN1Y2ggYXMgdXMtYXNjaWkuXG52YXIgaXNvU2VudGluZWwgPSAndXRmOD0lMjYlMjMxMDAwMyUzQic7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgnJiMxMDAwMzsnKVxuXG4vLyBUaGVzZSBhcmUgdGhlIHBlcmNlbnQtZW5jb2RlZCB1dGYtOCBvY3RldHMgcmVwcmVzZW50aW5nIGEgY2hlY2ttYXJrLCBpbmRpY2F0aW5nIHRoYXQgdGhlIHJlcXVlc3QgYWN0dWFsbHkgaXMgdXRmLTggZW5jb2RlZC5cbnZhciBjaGFyc2V0U2VudGluZWwgPSAndXRmOD0lRTIlOUMlOTMnOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJ+KckycpXG5cbnZhciBwYXJzZVZhbHVlcyA9IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdWYWx1ZXMoc3RyLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IHsgX19wcm90b19fOiBudWxsIH07XG5cbiAgICB2YXIgY2xlYW5TdHIgPSBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID8gc3RyLnJlcGxhY2UoL15cXD8vLCAnJykgOiBzdHI7XG4gICAgY2xlYW5TdHIgPSBjbGVhblN0ci5yZXBsYWNlKC8lNUIvZ2ksICdbJykucmVwbGFjZSgvJTVEL2dpLCAnXScpO1xuXG4gICAgdmFyIGxpbWl0ID0gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0O1xuICAgIHZhciBwYXJ0cyA9IGNsZWFuU3RyLnNwbGl0KFxuICAgICAgICBvcHRpb25zLmRlbGltaXRlcixcbiAgICAgICAgb3B0aW9ucy50aHJvd09uTGltaXRFeGNlZWRlZCA/IGxpbWl0ICsgMSA6IGxpbWl0XG4gICAgKTtcblxuICAgIGlmIChvcHRpb25zLnRocm93T25MaW1pdEV4Y2VlZGVkICYmIHBhcnRzLmxlbmd0aCA+IGxpbWl0KSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdQYXJhbWV0ZXIgbGltaXQgZXhjZWVkZWQuIE9ubHkgJyArIGxpbWl0ICsgJyBwYXJhbWV0ZXInICsgKGxpbWl0ID09PSAxID8gJycgOiAncycpICsgJyBhbGxvd2VkLicpO1xuICAgIH1cblxuICAgIHZhciBza2lwSW5kZXggPSAtMTsgLy8gS2VlcCB0cmFjayBvZiB3aGVyZSB0aGUgdXRmOCBzZW50aW5lbCB3YXMgZm91bmRcbiAgICB2YXIgaTtcblxuICAgIHZhciBjaGFyc2V0ID0gb3B0aW9ucy5jaGFyc2V0O1xuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0c1tpXS5pbmRleE9mKCd1dGY4PScpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzW2ldID09PSBjaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICd1dGYtOCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXSA9PT0gaXNvU2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICdpc28tODg1OS0xJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2tpcEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpID0gcGFydHMubGVuZ3RoOyAvLyBUaGUgZXNsaW50IHNldHRpbmdzIGRvIG5vdCBhbGxvdyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSA9PT0gc2tpcEluZGV4KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgICAgIHZhciBicmFja2V0RXF1YWxzUG9zID0gcGFydC5pbmRleE9mKCddPScpO1xuICAgICAgICB2YXIgcG9zID0gYnJhY2tldEVxdWFsc1BvcyA9PT0gLTEgPyBwYXJ0LmluZGV4T2YoJz0nKSA6IGJyYWNrZXRFcXVhbHNQb3MgKyAxO1xuXG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIHZhciB2YWw7XG4gICAgICAgIGlmIChwb3MgPT09IC0xKSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPyBudWxsIDogJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZSgwLCBwb3MpLCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAna2V5Jyk7XG5cbiAgICAgICAgICAgIHZhbCA9IHV0aWxzLm1heWJlTWFwKFxuICAgICAgICAgICAgICAgIHBhcnNlQXJyYXlWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgcGFydC5zbGljZShwb3MgKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheShvYmpba2V5XSkgPyBvYmpba2V5XS5sZW5ndGggOiAwXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZW5jb2RlZFZhbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kZWNvZGVyKGVuY29kZWRWYWwsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICd2YWx1ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzICYmIGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgdmFsID0gaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzKFN0cmluZyh2YWwpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJ0LmluZGV4T2YoJ1tdPScpID4gLTEpIHtcbiAgICAgICAgICAgIHZhbCA9IGlzQXJyYXkodmFsKSA/IFt2YWxdIDogdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV4aXN0aW5nID0gaGFzLmNhbGwob2JqLCBrZXkpO1xuICAgICAgICBpZiAoZXhpc3RpbmcgJiYgb3B0aW9ucy5kdXBsaWNhdGVzID09PSAnY29tYmluZScpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIGlmICghZXhpc3RpbmcgfHwgb3B0aW9ucy5kdXBsaWNhdGVzID09PSAnbGFzdCcpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICB2YXIgY3VycmVudEFycmF5TGVuZ3RoID0gMDtcbiAgICBpZiAoY2hhaW4ubGVuZ3RoID4gMCAmJiBjaGFpbltjaGFpbi5sZW5ndGggLSAxXSA9PT0gJ1tdJykge1xuICAgICAgICB2YXIgcGFyZW50S2V5ID0gY2hhaW4uc2xpY2UoMCwgLTEpLmpvaW4oJycpO1xuICAgICAgICBjdXJyZW50QXJyYXlMZW5ndGggPSBBcnJheS5pc0FycmF5KHZhbCkgJiYgdmFsW3BhcmVudEtleV0gPyB2YWxbcGFyZW50S2V5XS5sZW5ndGggOiAwO1xuICAgIH1cblxuICAgIHZhciBsZWFmID0gdmFsdWVzUGFyc2VkID8gdmFsIDogcGFyc2VBcnJheVZhbHVlKHZhbCwgb3B0aW9ucywgY3VycmVudEFycmF5TGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGkgPSBjaGFpbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgb2JqO1xuICAgICAgICB2YXIgcm9vdCA9IGNoYWluW2ldO1xuXG4gICAgICAgIGlmIChyb290ID09PSAnW10nICYmIG9wdGlvbnMucGFyc2VBcnJheXMpIHtcbiAgICAgICAgICAgIG9iaiA9IG9wdGlvbnMuYWxsb3dFbXB0eUFycmF5cyAmJiAobGVhZiA9PT0gJycgfHwgKG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nICYmIGxlYWYgPT09IG51bGwpKVxuICAgICAgICAgICAgICAgID8gW11cbiAgICAgICAgICAgICAgICA6IHV0aWxzLmNvbWJpbmUoW10sIGxlYWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyB7IF9fcHJvdG9fXzogbnVsbCB9IDoge307XG4gICAgICAgICAgICB2YXIgY2xlYW5Sb290ID0gcm9vdC5jaGFyQXQoMCkgPT09ICdbJyAmJiByb290LmNoYXJBdChyb290Lmxlbmd0aCAtIDEpID09PSAnXScgPyByb290LnNsaWNlKDEsIC0xKSA6IHJvb3Q7XG4gICAgICAgICAgICB2YXIgZGVjb2RlZFJvb3QgPSBvcHRpb25zLmRlY29kZURvdEluS2V5cyA/IGNsZWFuUm9vdC5yZXBsYWNlKC8lMkUvZywgJy4nKSA6IGNsZWFuUm9vdDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGRlY29kZWRSb290LCAxMCk7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMucGFyc2VBcnJheXMgJiYgZGVjb2RlZFJvb3QgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb2JqID0geyAwOiBsZWFmIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICFpc05hTihpbmRleClcbiAgICAgICAgICAgICAgICAmJiByb290ICE9PSBkZWNvZGVkUm9vdFxuICAgICAgICAgICAgICAgICYmIFN0cmluZyhpbmRleCkgPT09IGRlY29kZWRSb290XG4gICAgICAgICAgICAgICAgJiYgaW5kZXggPj0gMFxuICAgICAgICAgICAgICAgICYmIChvcHRpb25zLnBhcnNlQXJyYXlzICYmIGluZGV4IDw9IG9wdGlvbnMuYXJyYXlMaW1pdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIG9iaiA9IFtdO1xuICAgICAgICAgICAgICAgIG9ialtpbmRleF0gPSBsZWFmO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkZWNvZGVkUm9vdCAhPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgICAgICAgICBvYmpbZGVjb2RlZFJvb3RdID0gbGVhZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxlYWYgPSBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlYWY7XG59O1xuXG52YXIgcGFyc2VLZXlzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ0tleXMoZ2l2ZW5LZXksIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IG9wdGlvbnMuZGVwdGggPiAwICYmIGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXMgdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChvcHRpb25zLmRlcHRoID4gMCAmJiAoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwgY2hlY2sgc3RyaWN0RGVwdGggb3B0aW9uIGZvciB0aHJvdywgZWxzZSBqdXN0IGFkZCB3aGF0ZXZlciBpcyBsZWZ0XG5cbiAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICBpZiAob3B0aW9ucy5zdHJpY3REZXB0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0lucHV0IGRlcHRoIGV4Y2VlZGVkIGRlcHRoIG9wdGlvbiBvZiAnICsgb3B0aW9ucy5kZXB0aCArICcgYW5kIHN0cmljdERlcHRoIGlzIHRydWUnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goJ1snICsga2V5LnNsaWNlKHNlZ21lbnQuaW5kZXgpICsgJ10nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VPYmplY3Qoa2V5cywgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpO1xufTtcblxudmFyIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BhbGxvd0VtcHR5QXJyYXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuZGVjb2RlRG90SW5LZXlzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5kZWNvZGVEb3RJbktleXMgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgZGVjb2RlRG90SW5LZXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5kZWNvZGVyICE9PSBudWxsICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLnRocm93T25MaW1pdEV4Y2VlZGVkICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy50aHJvd09uTGltaXRFeGNlZWRlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2B0aHJvd09uTGltaXRFeGNlZWRlZGAgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSB0eXBlb2Ygb3B0cy5jaGFyc2V0ID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmNoYXJzZXQgOiBvcHRzLmNoYXJzZXQ7XG5cbiAgICB2YXIgZHVwbGljYXRlcyA9IHR5cGVvZiBvcHRzLmR1cGxpY2F0ZXMgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZHVwbGljYXRlcyA6IG9wdHMuZHVwbGljYXRlcztcblxuICAgIGlmIChkdXBsaWNhdGVzICE9PSAnY29tYmluZScgJiYgZHVwbGljYXRlcyAhPT0gJ2ZpcnN0JyAmJiBkdXBsaWNhdGVzICE9PSAnbGFzdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGR1cGxpY2F0ZXMgb3B0aW9uIG11c3QgYmUgZWl0aGVyIGNvbWJpbmUsIGZpcnN0LCBvciBsYXN0Jyk7XG4gICAgfVxuXG4gICAgdmFyIGFsbG93RG90cyA9IHR5cGVvZiBvcHRzLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBvcHRzLmRlY29kZURvdEluS2V5cyA9PT0gdHJ1ZSA/IHRydWUgOiBkZWZhdWx0cy5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWxsb3dEb3RzOiBhbGxvd0RvdHMsXG4gICAgICAgIGFsbG93RW1wdHlBcnJheXM6IHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgPT09ICdib29sZWFuJyA/ICEhb3B0cy5hbGxvd0VtcHR5QXJyYXlzIDogZGVmYXVsdHMuYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgYWxsb3dQcm90b3R5cGVzOiB0eXBlb2Ygb3B0cy5hbGxvd1Byb3RvdHlwZXMgPT09ICdib29sZWFuJyA/IG9wdHMuYWxsb3dQcm90b3R5cGVzIDogZGVmYXVsdHMuYWxsb3dQcm90b3R5cGVzLFxuICAgICAgICBhbGxvd1NwYXJzZTogdHlwZW9mIG9wdHMuYWxsb3dTcGFyc2UgPT09ICdib29sZWFuJyA/IG9wdHMuYWxsb3dTcGFyc2UgOiBkZWZhdWx0cy5hbGxvd1NwYXJzZSxcbiAgICAgICAgYXJyYXlMaW1pdDogdHlwZW9mIG9wdHMuYXJyYXlMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLmFycmF5TGltaXQgOiBkZWZhdWx0cy5hcnJheUxpbWl0LFxuICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgICAgICBjaGFyc2V0U2VudGluZWw6IHR5cGVvZiBvcHRzLmNoYXJzZXRTZW50aW5lbCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jaGFyc2V0U2VudGluZWwgOiBkZWZhdWx0cy5jaGFyc2V0U2VudGluZWwsXG4gICAgICAgIGNvbW1hOiB0eXBlb2Ygb3B0cy5jb21tYSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jb21tYSA6IGRlZmF1bHRzLmNvbW1hLFxuICAgICAgICBkZWNvZGVEb3RJbktleXM6IHR5cGVvZiBvcHRzLmRlY29kZURvdEluS2V5cyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5kZWNvZGVEb3RJbktleXMgOiBkZWZhdWx0cy5kZWNvZGVEb3RJbktleXMsXG4gICAgICAgIGRlY29kZXI6IHR5cGVvZiBvcHRzLmRlY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRzLmRlY29kZXIgOiBkZWZhdWx0cy5kZWNvZGVyLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgdXRpbHMuaXNSZWdFeHAob3B0cy5kZWxpbWl0ZXIpID8gb3B0cy5kZWxpbWl0ZXIgOiBkZWZhdWx0cy5kZWxpbWl0ZXIsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbXBsaWNpdC1jb2VyY2lvbiwgbm8tZXh0cmEtcGFyZW5zXG4gICAgICAgIGRlcHRoOiAodHlwZW9mIG9wdHMuZGVwdGggPT09ICdudW1iZXInIHx8IG9wdHMuZGVwdGggPT09IGZhbHNlKSA/ICtvcHRzLmRlcHRoIDogZGVmYXVsdHMuZGVwdGgsXG4gICAgICAgIGR1cGxpY2F0ZXM6IGR1cGxpY2F0ZXMsXG4gICAgICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBvcHRzLmlnbm9yZVF1ZXJ5UHJlZml4ID09PSB0cnVlLFxuICAgICAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IHR5cGVvZiBvcHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgOiBkZWZhdWx0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMsXG4gICAgICAgIHBhcmFtZXRlckxpbWl0OiB0eXBlb2Ygb3B0cy5wYXJhbWV0ZXJMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLnBhcmFtZXRlckxpbWl0IDogZGVmYXVsdHMucGFyYW1ldGVyTGltaXQsXG4gICAgICAgIHBhcnNlQXJyYXlzOiBvcHRzLnBhcnNlQXJyYXlzICE9PSBmYWxzZSxcbiAgICAgICAgcGxhaW5PYmplY3RzOiB0eXBlb2Ygb3B0cy5wbGFpbk9iamVjdHMgPT09ICdib29sZWFuJyA/IG9wdHMucGxhaW5PYmplY3RzIDogZGVmYXVsdHMucGxhaW5PYmplY3RzLFxuICAgICAgICBzdHJpY3REZXB0aDogdHlwZW9mIG9wdHMuc3RyaWN0RGVwdGggPT09ICdib29sZWFuJyA/ICEhb3B0cy5zdHJpY3REZXB0aCA6IGRlZmF1bHRzLnN0cmljdERlcHRoLFxuICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgIHRocm93T25MaW1pdEV4Y2VlZGVkOiB0eXBlb2Ygb3B0cy50aHJvd09uTGltaXRFeGNlZWRlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy50aHJvd09uTGltaXRFeGNlZWRlZCA6IGZhbHNlXG4gICAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IHsgX19wcm90b19fOiBudWxsIH0gOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyB7IF9fcHJvdG9fXzogbnVsbCB9IDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucywgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpO1xuICAgICAgICBvYmogPSB1dGlscy5tZXJnZShvYmosIG5ld09iaiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dTcGFyc2UgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9hZlwiOiA1OSxcblx0XCIuL2FmLmpzXCI6IDU5LFxuXHRcIi4vYXJcIjogNjAsXG5cdFwiLi9hci1kelwiOiA2MSxcblx0XCIuL2FyLWR6LmpzXCI6IDYxLFxuXHRcIi4vYXIta3dcIjogNjIsXG5cdFwiLi9hci1rdy5qc1wiOiA2Mixcblx0XCIuL2FyLWx5XCI6IDYzLFxuXHRcIi4vYXItbHkuanNcIjogNjMsXG5cdFwiLi9hci1tYVwiOiA2NCxcblx0XCIuL2FyLW1hLmpzXCI6IDY0LFxuXHRcIi4vYXItcHNcIjogNjUsXG5cdFwiLi9hci1wcy5qc1wiOiA2NSxcblx0XCIuL2FyLXNhXCI6IDY2LFxuXHRcIi4vYXItc2EuanNcIjogNjYsXG5cdFwiLi9hci10blwiOiA2Nyxcblx0XCIuL2FyLXRuLmpzXCI6IDY3LFxuXHRcIi4vYXIuanNcIjogNjAsXG5cdFwiLi9helwiOiA2OCxcblx0XCIuL2F6LmpzXCI6IDY4LFxuXHRcIi4vYmVcIjogNjksXG5cdFwiLi9iZS5qc1wiOiA2OSxcblx0XCIuL2JnXCI6IDcwLFxuXHRcIi4vYmcuanNcIjogNzAsXG5cdFwiLi9ibVwiOiA3MSxcblx0XCIuL2JtLmpzXCI6IDcxLFxuXHRcIi4vYm5cIjogNzIsXG5cdFwiLi9ibi1iZFwiOiA3Myxcblx0XCIuL2JuLWJkLmpzXCI6IDczLFxuXHRcIi4vYm4uanNcIjogNzIsXG5cdFwiLi9ib1wiOiA3NCxcblx0XCIuL2JvLmpzXCI6IDc0LFxuXHRcIi4vYnJcIjogNzUsXG5cdFwiLi9ici5qc1wiOiA3NSxcblx0XCIuL2JzXCI6IDc2LFxuXHRcIi4vYnMuanNcIjogNzYsXG5cdFwiLi9jYVwiOiA3Nyxcblx0XCIuL2NhLmpzXCI6IDc3LFxuXHRcIi4vY3NcIjogNzgsXG5cdFwiLi9jcy5qc1wiOiA3OCxcblx0XCIuL2N2XCI6IDc5LFxuXHRcIi4vY3YuanNcIjogNzksXG5cdFwiLi9jeVwiOiA4MCxcblx0XCIuL2N5LmpzXCI6IDgwLFxuXHRcIi4vZGFcIjogODEsXG5cdFwiLi9kYS5qc1wiOiA4MSxcblx0XCIuL2RlXCI6IDgyLFxuXHRcIi4vZGUtYXRcIjogODMsXG5cdFwiLi9kZS1hdC5qc1wiOiA4Myxcblx0XCIuL2RlLWNoXCI6IDg0LFxuXHRcIi4vZGUtY2guanNcIjogODQsXG5cdFwiLi9kZS5qc1wiOiA4Mixcblx0XCIuL2R2XCI6IDg1LFxuXHRcIi4vZHYuanNcIjogODUsXG5cdFwiLi9lbFwiOiA4Nixcblx0XCIuL2VsLmpzXCI6IDg2LFxuXHRcIi4vZW4tYXVcIjogODcsXG5cdFwiLi9lbi1hdS5qc1wiOiA4Nyxcblx0XCIuL2VuLWNhXCI6IDg4LFxuXHRcIi4vZW4tY2EuanNcIjogODgsXG5cdFwiLi9lbi1nYlwiOiA4OSxcblx0XCIuL2VuLWdiLmpzXCI6IDg5LFxuXHRcIi4vZW4taWVcIjogOTAsXG5cdFwiLi9lbi1pZS5qc1wiOiA5MCxcblx0XCIuL2VuLWlsXCI6IDkxLFxuXHRcIi4vZW4taWwuanNcIjogOTEsXG5cdFwiLi9lbi1pblwiOiA5Mixcblx0XCIuL2VuLWluLmpzXCI6IDkyLFxuXHRcIi4vZW4tbnpcIjogOTMsXG5cdFwiLi9lbi1uei5qc1wiOiA5Myxcblx0XCIuL2VuLXNnXCI6IDk0LFxuXHRcIi4vZW4tc2cuanNcIjogOTQsXG5cdFwiLi9lb1wiOiA5NSxcblx0XCIuL2VvLmpzXCI6IDk1LFxuXHRcIi4vZXNcIjogOTYsXG5cdFwiLi9lcy1kb1wiOiA5Nyxcblx0XCIuL2VzLWRvLmpzXCI6IDk3LFxuXHRcIi4vZXMtbXhcIjogOTgsXG5cdFwiLi9lcy1teC5qc1wiOiA5OCxcblx0XCIuL2VzLXVzXCI6IDk5LFxuXHRcIi4vZXMtdXMuanNcIjogOTksXG5cdFwiLi9lcy5qc1wiOiA5Nixcblx0XCIuL2V0XCI6IDEwMCxcblx0XCIuL2V0LmpzXCI6IDEwMCxcblx0XCIuL2V1XCI6IDEwMSxcblx0XCIuL2V1LmpzXCI6IDEwMSxcblx0XCIuL2ZhXCI6IDEwMixcblx0XCIuL2ZhLmpzXCI6IDEwMixcblx0XCIuL2ZpXCI6IDEwMyxcblx0XCIuL2ZpLmpzXCI6IDEwMyxcblx0XCIuL2ZpbFwiOiAxMDQsXG5cdFwiLi9maWwuanNcIjogMTA0LFxuXHRcIi4vZm9cIjogMTA1LFxuXHRcIi4vZm8uanNcIjogMTA1LFxuXHRcIi4vZnJcIjogMTA2LFxuXHRcIi4vZnItY2FcIjogMTA3LFxuXHRcIi4vZnItY2EuanNcIjogMTA3LFxuXHRcIi4vZnItY2hcIjogMTA4LFxuXHRcIi4vZnItY2guanNcIjogMTA4LFxuXHRcIi4vZnIuanNcIjogMTA2LFxuXHRcIi4vZnlcIjogMTA5LFxuXHRcIi4vZnkuanNcIjogMTA5LFxuXHRcIi4vZ2FcIjogMTEwLFxuXHRcIi4vZ2EuanNcIjogMTEwLFxuXHRcIi4vZ2RcIjogMTExLFxuXHRcIi4vZ2QuanNcIjogMTExLFxuXHRcIi4vZ2xcIjogMTEyLFxuXHRcIi4vZ2wuanNcIjogMTEyLFxuXHRcIi4vZ29tLWRldmFcIjogMTEzLFxuXHRcIi4vZ29tLWRldmEuanNcIjogMTEzLFxuXHRcIi4vZ29tLWxhdG5cIjogMTE0LFxuXHRcIi4vZ29tLWxhdG4uanNcIjogMTE0LFxuXHRcIi4vZ3VcIjogMTE1LFxuXHRcIi4vZ3UuanNcIjogMTE1LFxuXHRcIi4vaGVcIjogMTE2LFxuXHRcIi4vaGUuanNcIjogMTE2LFxuXHRcIi4vaGlcIjogMTE3LFxuXHRcIi4vaGkuanNcIjogMTE3LFxuXHRcIi4vaHJcIjogMTE4LFxuXHRcIi4vaHIuanNcIjogMTE4LFxuXHRcIi4vaHVcIjogMTE5LFxuXHRcIi4vaHUuanNcIjogMTE5LFxuXHRcIi4vaHktYW1cIjogMTIwLFxuXHRcIi4vaHktYW0uanNcIjogMTIwLFxuXHRcIi4vaWRcIjogMTIxLFxuXHRcIi4vaWQuanNcIjogMTIxLFxuXHRcIi4vaXNcIjogMTIyLFxuXHRcIi4vaXMuanNcIjogMTIyLFxuXHRcIi4vaXRcIjogMTIzLFxuXHRcIi4vaXQtY2hcIjogMTI0LFxuXHRcIi4vaXQtY2guanNcIjogMTI0LFxuXHRcIi4vaXQuanNcIjogMTIzLFxuXHRcIi4vamFcIjogMTI1LFxuXHRcIi4vamEuanNcIjogMTI1LFxuXHRcIi4vanZcIjogMTI2LFxuXHRcIi4vanYuanNcIjogMTI2LFxuXHRcIi4va2FcIjogMTI3LFxuXHRcIi4va2EuanNcIjogMTI3LFxuXHRcIi4va2tcIjogMTI4LFxuXHRcIi4va2suanNcIjogMTI4LFxuXHRcIi4va21cIjogMTI5LFxuXHRcIi4va20uanNcIjogMTI5LFxuXHRcIi4va25cIjogMTMwLFxuXHRcIi4va24uanNcIjogMTMwLFxuXHRcIi4va29cIjogMTMxLFxuXHRcIi4va28uanNcIjogMTMxLFxuXHRcIi4va3VcIjogMTMyLFxuXHRcIi4va3Uta21yXCI6IDEzMyxcblx0XCIuL2t1LWttci5qc1wiOiAxMzMsXG5cdFwiLi9rdS5qc1wiOiAxMzIsXG5cdFwiLi9reVwiOiAxMzQsXG5cdFwiLi9reS5qc1wiOiAxMzQsXG5cdFwiLi9sYlwiOiAxMzUsXG5cdFwiLi9sYi5qc1wiOiAxMzUsXG5cdFwiLi9sb1wiOiAxMzYsXG5cdFwiLi9sby5qc1wiOiAxMzYsXG5cdFwiLi9sdFwiOiAxMzcsXG5cdFwiLi9sdC5qc1wiOiAxMzcsXG5cdFwiLi9sdlwiOiAxMzgsXG5cdFwiLi9sdi5qc1wiOiAxMzgsXG5cdFwiLi9tZVwiOiAxMzksXG5cdFwiLi9tZS5qc1wiOiAxMzksXG5cdFwiLi9taVwiOiAxNDAsXG5cdFwiLi9taS5qc1wiOiAxNDAsXG5cdFwiLi9ta1wiOiAxNDEsXG5cdFwiLi9tay5qc1wiOiAxNDEsXG5cdFwiLi9tbFwiOiAxNDIsXG5cdFwiLi9tbC5qc1wiOiAxNDIsXG5cdFwiLi9tblwiOiAxNDMsXG5cdFwiLi9tbi5qc1wiOiAxNDMsXG5cdFwiLi9tclwiOiAxNDQsXG5cdFwiLi9tci5qc1wiOiAxNDQsXG5cdFwiLi9tc1wiOiAxNDUsXG5cdFwiLi9tcy1teVwiOiAxNDYsXG5cdFwiLi9tcy1teS5qc1wiOiAxNDYsXG5cdFwiLi9tcy5qc1wiOiAxNDUsXG5cdFwiLi9tdFwiOiAxNDcsXG5cdFwiLi9tdC5qc1wiOiAxNDcsXG5cdFwiLi9teVwiOiAxNDgsXG5cdFwiLi9teS5qc1wiOiAxNDgsXG5cdFwiLi9uYlwiOiAxNDksXG5cdFwiLi9uYi5qc1wiOiAxNDksXG5cdFwiLi9uZVwiOiAxNTAsXG5cdFwiLi9uZS5qc1wiOiAxNTAsXG5cdFwiLi9ubFwiOiAxNTEsXG5cdFwiLi9ubC1iZVwiOiAxNTIsXG5cdFwiLi9ubC1iZS5qc1wiOiAxNTIsXG5cdFwiLi9ubC5qc1wiOiAxNTEsXG5cdFwiLi9ublwiOiAxNTMsXG5cdFwiLi9ubi5qc1wiOiAxNTMsXG5cdFwiLi9vYy1sbmNcIjogMTU0LFxuXHRcIi4vb2MtbG5jLmpzXCI6IDE1NCxcblx0XCIuL3BhLWluXCI6IDE1NSxcblx0XCIuL3BhLWluLmpzXCI6IDE1NSxcblx0XCIuL3BsXCI6IDE1Nixcblx0XCIuL3BsLmpzXCI6IDE1Nixcblx0XCIuL3B0XCI6IDE1Nyxcblx0XCIuL3B0LWJyXCI6IDE1OCxcblx0XCIuL3B0LWJyLmpzXCI6IDE1OCxcblx0XCIuL3B0LmpzXCI6IDE1Nyxcblx0XCIuL3JvXCI6IDE1OSxcblx0XCIuL3JvLmpzXCI6IDE1OSxcblx0XCIuL3J1XCI6IDE2MCxcblx0XCIuL3J1LmpzXCI6IDE2MCxcblx0XCIuL3NkXCI6IDE2MSxcblx0XCIuL3NkLmpzXCI6IDE2MSxcblx0XCIuL3NlXCI6IDE2Mixcblx0XCIuL3NlLmpzXCI6IDE2Mixcblx0XCIuL3NpXCI6IDE2Myxcblx0XCIuL3NpLmpzXCI6IDE2Myxcblx0XCIuL3NrXCI6IDE2NCxcblx0XCIuL3NrLmpzXCI6IDE2NCxcblx0XCIuL3NsXCI6IDE2NSxcblx0XCIuL3NsLmpzXCI6IDE2NSxcblx0XCIuL3NxXCI6IDE2Nixcblx0XCIuL3NxLmpzXCI6IDE2Nixcblx0XCIuL3NyXCI6IDE2Nyxcblx0XCIuL3NyLWN5cmxcIjogMTY4LFxuXHRcIi4vc3ItY3lybC5qc1wiOiAxNjgsXG5cdFwiLi9zci5qc1wiOiAxNjcsXG5cdFwiLi9zc1wiOiAxNjksXG5cdFwiLi9zcy5qc1wiOiAxNjksXG5cdFwiLi9zdlwiOiAxNzAsXG5cdFwiLi9zdi5qc1wiOiAxNzAsXG5cdFwiLi9zd1wiOiAxNzEsXG5cdFwiLi9zdy5qc1wiOiAxNzEsXG5cdFwiLi90YVwiOiAxNzIsXG5cdFwiLi90YS5qc1wiOiAxNzIsXG5cdFwiLi90ZVwiOiAxNzMsXG5cdFwiLi90ZS5qc1wiOiAxNzMsXG5cdFwiLi90ZXRcIjogMTc0LFxuXHRcIi4vdGV0LmpzXCI6IDE3NCxcblx0XCIuL3RnXCI6IDE3NSxcblx0XCIuL3RnLmpzXCI6IDE3NSxcblx0XCIuL3RoXCI6IDE3Nixcblx0XCIuL3RoLmpzXCI6IDE3Nixcblx0XCIuL3RrXCI6IDE3Nyxcblx0XCIuL3RrLmpzXCI6IDE3Nyxcblx0XCIuL3RsLXBoXCI6IDE3OCxcblx0XCIuL3RsLXBoLmpzXCI6IDE3OCxcblx0XCIuL3RsaFwiOiAxNzksXG5cdFwiLi90bGguanNcIjogMTc5LFxuXHRcIi4vdHJcIjogMTgwLFxuXHRcIi4vdHIuanNcIjogMTgwLFxuXHRcIi4vdHpsXCI6IDE4MSxcblx0XCIuL3R6bC5qc1wiOiAxODEsXG5cdFwiLi90em1cIjogMTgyLFxuXHRcIi4vdHptLWxhdG5cIjogMTgzLFxuXHRcIi4vdHptLWxhdG4uanNcIjogMTgzLFxuXHRcIi4vdHptLmpzXCI6IDE4Mixcblx0XCIuL3VnLWNuXCI6IDE4NCxcblx0XCIuL3VnLWNuLmpzXCI6IDE4NCxcblx0XCIuL3VrXCI6IDE4NSxcblx0XCIuL3VrLmpzXCI6IDE4NSxcblx0XCIuL3VyXCI6IDE4Nixcblx0XCIuL3VyLmpzXCI6IDE4Nixcblx0XCIuL3V6XCI6IDE4Nyxcblx0XCIuL3V6LWxhdG5cIjogMTg4LFxuXHRcIi4vdXotbGF0bi5qc1wiOiAxODgsXG5cdFwiLi91ei5qc1wiOiAxODcsXG5cdFwiLi92aVwiOiAxODksXG5cdFwiLi92aS5qc1wiOiAxODksXG5cdFwiLi94LXBzZXVkb1wiOiAxOTAsXG5cdFwiLi94LXBzZXVkby5qc1wiOiAxOTAsXG5cdFwiLi95b1wiOiAxOTEsXG5cdFwiLi95by5qc1wiOiAxOTEsXG5cdFwiLi96aC1jblwiOiAxOTIsXG5cdFwiLi96aC1jbi5qc1wiOiAxOTIsXG5cdFwiLi96aC1oa1wiOiAxOTMsXG5cdFwiLi96aC1oay5qc1wiOiAxOTMsXG5cdFwiLi96aC1tb1wiOiAxOTQsXG5cdFwiLi96aC1tby5qc1wiOiAxOTQsXG5cdFwiLi96aC10d1wiOiAxOTUsXG5cdFwiLi96aC10dy5qc1wiOiAxOTVcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyNzU7IiwiZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiByO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlXaXRoSG9sZXMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSB0KSB7XG4gICAgdmFyIGUsXG4gICAgICBuLFxuICAgICAgaSxcbiAgICAgIHUsXG4gICAgICBhID0gW10sXG4gICAgICBmID0gITAsXG4gICAgICBvID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuO1xuICAgICAgICBmID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdFtcInJldHVyblwiXSAmJiAodSA9IHRbXCJyZXR1cm5cIl0oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBhcnJheUxpa2VUb0FycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtcbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7XG4gIGlmIChyKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KHIsIGEpO1xuICAgIHZhciB0ID0ge30udG9TdHJpbmcuY2FsbChyKS5zbGljZSg4LCAtMSk7XG4gICAgcmV0dXJuIFwiT2JqZWN0XCIgPT09IHQgJiYgci5jb25zdHJ1Y3RvciAmJiAodCA9IHIuY29uc3RydWN0b3IubmFtZSksIFwiTWFwXCIgPT09IHQgfHwgXCJTZXRcIiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiBcIkFyZ3VtZW50c1wiID09PSB0IHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KHQpID8gYXJyYXlMaWtlVG9BcnJheShyLCBhKSA6IHZvaWQgMDtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7XG4gIChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTtcbiAgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07XG4gIHJldHVybiBuO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVJlc3QsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCIndXNlIHN0cmljdCdcblxuLyogRGVwZW5kZW5jaWVzLiAqL1xudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpXG52YXIgYmFpbCA9IHJlcXVpcmUoJ2JhaWwnKVxudmFyIHZmaWxlID0gcmVxdWlyZSgndmZpbGUnKVxudmFyIHRyb3VnaCA9IHJlcXVpcmUoJ3Ryb3VnaCcpXG52YXIgc3RyaW5nID0gcmVxdWlyZSgneC1pcy1zdHJpbmcnKVxudmFyIHBsYWluID0gcmVxdWlyZSgnaXMtcGxhaW4tb2JqJylcblxuLyogRXhwb3NlIGEgZnJvemVuIHByb2Nlc3Nvci4gKi9cbm1vZHVsZS5leHBvcnRzID0gdW5pZmllZCgpLmZyZWV6ZSgpXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyogUHJvY2VzcyBwaXBlbGluZS4gKi9cbnZhciBwaXBlbGluZSA9IHRyb3VnaCgpXG4gIC51c2UocGlwZWxpbmVQYXJzZSlcbiAgLnVzZShwaXBlbGluZVJ1bilcbiAgLnVzZShwaXBlbGluZVN0cmluZ2lmeSlcblxuZnVuY3Rpb24gcGlwZWxpbmVQYXJzZShwLCBjdHgpIHtcbiAgY3R4LnRyZWUgPSBwLnBhcnNlKGN0eC5maWxlKVxufVxuXG5mdW5jdGlvbiBwaXBlbGluZVJ1bihwLCBjdHgsIG5leHQpIHtcbiAgcC5ydW4oY3R4LnRyZWUsIGN0eC5maWxlLCBkb25lKVxuXG4gIGZ1bmN0aW9uIGRvbmUoZXJyLCB0cmVlLCBmaWxlKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgbmV4dChlcnIpXG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC50cmVlID0gdHJlZVxuICAgICAgY3R4LmZpbGUgPSBmaWxlXG4gICAgICBuZXh0KClcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGlwZWxpbmVTdHJpbmdpZnkocCwgY3R4KSB7XG4gIGN0eC5maWxlLmNvbnRlbnRzID0gcC5zdHJpbmdpZnkoY3R4LnRyZWUsIGN0eC5maWxlKVxufVxuXG4vKiBGdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpcnN0IHByb2Nlc3Nvci4gKi9cbmZ1bmN0aW9uIHVuaWZpZWQoKSB7XG4gIHZhciBhdHRhY2hlcnMgPSBbXVxuICB2YXIgdHJhbnNmb3JtZXJzID0gdHJvdWdoKClcbiAgdmFyIG5hbWVzcGFjZSA9IHt9XG4gIHZhciBmcm96ZW4gPSBmYWxzZVxuICB2YXIgZnJlZXplSW5kZXggPSAtMVxuXG4gIC8qIERhdGEgbWFuYWdlbWVudC4gKi9cbiAgcHJvY2Vzc29yLmRhdGEgPSBkYXRhXG5cbiAgLyogTG9jay4gKi9cbiAgcHJvY2Vzc29yLmZyZWV6ZSA9IGZyZWV6ZVxuXG4gIC8qIFBsdWctaW5zLiAqL1xuICBwcm9jZXNzb3IuYXR0YWNoZXJzID0gYXR0YWNoZXJzXG4gIHByb2Nlc3Nvci51c2UgPSB1c2VcblxuICAvKiBBUEkuICovXG4gIHByb2Nlc3Nvci5wYXJzZSA9IHBhcnNlXG4gIHByb2Nlc3Nvci5zdHJpbmdpZnkgPSBzdHJpbmdpZnlcbiAgcHJvY2Vzc29yLnJ1biA9IHJ1blxuICBwcm9jZXNzb3IucnVuU3luYyA9IHJ1blN5bmNcbiAgcHJvY2Vzc29yLnByb2Nlc3MgPSBwcm9jZXNzXG4gIHByb2Nlc3Nvci5wcm9jZXNzU3luYyA9IHByb2Nlc3NTeW5jXG5cbiAgLyogRXhwb3NlLiAqL1xuICByZXR1cm4gcHJvY2Vzc29yXG5cbiAgLyogQ3JlYXRlIGEgbmV3IHByb2Nlc3NvciBiYXNlZCBvbiB0aGUgcHJvY2Vzc29yXG4gICAqIGluIHRoZSBjdXJyZW50IHNjb3BlLiAqL1xuICBmdW5jdGlvbiBwcm9jZXNzb3IoKSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gdW5pZmllZCgpXG4gICAgdmFyIGxlbmd0aCA9IGF0dGFjaGVycy5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGRlc3RpbmF0aW9uLnVzZS5hcHBseShudWxsLCBhdHRhY2hlcnNbaW5kZXhdKVxuICAgIH1cblxuICAgIGRlc3RpbmF0aW9uLmRhdGEoZXh0ZW5kKHRydWUsIHt9LCBuYW1lc3BhY2UpKVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG4gIH1cblxuICAvKiBGcmVlemU6IHVzZWQgdG8gc2lnbmFsIGEgcHJvY2Vzc29yIHRoYXQgaGFzIGZpbmlzaGVkXG4gICAqIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCB0YWtlIHVuaWZpZWQgaXRzZWxmLiAgSXTigJlzIGZyb3plbi5cbiAgICogUGx1Zy1pbnMgc2hvdWxkIG5vdCBiZSBhZGRlZCB0byBpdC4gIFJhdGhlciwgaXQgc2hvdWxkXG4gICAqIGJlIGV4dGVuZGVkLCBieSBpbnZva2luZyBpdCwgYmVmb3JlIG1vZGlmeWluZyBpdC5cbiAgICpcbiAgICogSW4gZXNzZW5jZSwgYWx3YXlzIGludm9rZSB0aGlzIHdoZW4gZXhwb3J0aW5nIGFcbiAgICogcHJvY2Vzc29yLiAqL1xuICBmdW5jdGlvbiBmcmVlemUoKSB7XG4gICAgdmFyIHZhbHVlc1xuICAgIHZhciBwbHVnaW5cbiAgICB2YXIgb3B0aW9uc1xuICAgIHZhciB0cmFuc2Zvcm1lclxuXG4gICAgaWYgKGZyb3plbikge1xuICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgIH1cblxuICAgIHdoaWxlICgrK2ZyZWV6ZUluZGV4IDwgYXR0YWNoZXJzLmxlbmd0aCkge1xuICAgICAgdmFsdWVzID0gYXR0YWNoZXJzW2ZyZWV6ZUluZGV4XVxuICAgICAgcGx1Z2luID0gdmFsdWVzWzBdXG4gICAgICBvcHRpb25zID0gdmFsdWVzWzFdXG4gICAgICB0cmFuc2Zvcm1lciA9IG51bGxcblxuICAgICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlc1sxXSA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICB0cmFuc2Zvcm1lciA9IHBsdWdpbi5hcHBseShwcm9jZXNzb3IsIHZhbHVlcy5zbGljZSgxKSlcblxuICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0cmFuc2Zvcm1lcnMudXNlKHRyYW5zZm9ybWVyKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZyb3plbiA9IHRydWVcbiAgICBmcmVlemVJbmRleCA9IEluZmluaXR5XG5cbiAgICByZXR1cm4gcHJvY2Vzc29yXG4gIH1cblxuICAvKiBEYXRhIG1hbmFnZW1lbnQuXG4gICAqIEdldHRlciAvIHNldHRlciBmb3IgcHJvY2Vzc29yLXNwZWNpZmljIGluZm9ybXRpb24uICovXG4gIGZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChzdHJpbmcoa2V5KSkge1xuICAgICAgLyogU2V0IGBrZXlgLiAqL1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgYXNzZXJ0VW5mcm96ZW4oJ2RhdGEnLCBmcm96ZW4pXG5cbiAgICAgICAgbmFtZXNwYWNlW2tleV0gPSB2YWx1ZVxuXG4gICAgICAgIHJldHVybiBwcm9jZXNzb3JcbiAgICAgIH1cblxuICAgICAgLyogR2V0IGBrZXlgLiAqL1xuICAgICAgcmV0dXJuIChvd24uY2FsbChuYW1lc3BhY2UsIGtleSkgJiYgbmFtZXNwYWNlW2tleV0pIHx8IG51bGxcbiAgICB9XG5cbiAgICAvKiBTZXQgc3BhY2UuICovXG4gICAgaWYgKGtleSkge1xuICAgICAgYXNzZXJ0VW5mcm96ZW4oJ2RhdGEnLCBmcm96ZW4pXG4gICAgICBuYW1lc3BhY2UgPSBrZXlcbiAgICAgIHJldHVybiBwcm9jZXNzb3JcbiAgICB9XG5cbiAgICAvKiBHZXQgc3BhY2UuICovXG4gICAgcmV0dXJuIG5hbWVzcGFjZVxuICB9XG5cbiAgLyogUGx1Zy1pbiBtYW5hZ2VtZW50LlxuICAgKlxuICAgKiBQYXNzIGl0OlxuICAgKiAqICAgYW4gYXR0YWNoZXIgYW5kIG9wdGlvbnMsXG4gICAqICogICBhIHByZXNldCxcbiAgICogKiAgIGEgbGlzdCBvZiBwcmVzZXRzLCBhdHRhY2hlcnMsIGFuZCBhcmd1bWVudHMgKGxpc3RcbiAgICogICAgIG9mIGF0dGFjaGVycyBhbmQgb3B0aW9ucykuICovXG4gIGZ1bmN0aW9uIHVzZSh2YWx1ZSkge1xuICAgIHZhciBzZXR0aW5nc1xuXG4gICAgYXNzZXJ0VW5mcm96ZW4oJ3VzZScsIGZyb3plbilcblxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvKiBFbXB0eSAqL1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhZGRQbHVnaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKCdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgICAgIGFkZExpc3QodmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdXNhYmxlIHZhbHVlLCBub3QgYCcgKyB2YWx1ZSArICdgJylcbiAgICB9XG5cbiAgICBpZiAoc2V0dGluZ3MpIHtcbiAgICAgIG5hbWVzcGFjZS5zZXR0aW5ncyA9IGV4dGVuZChuYW1lc3BhY2Uuc2V0dGluZ3MgfHwge30sIHNldHRpbmdzKVxuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzb3JcblxuICAgIGZ1bmN0aW9uIGFkZFByZXNldChyZXN1bHQpIHtcbiAgICAgIGFkZExpc3QocmVzdWx0LnBsdWdpbnMpXG5cbiAgICAgIGlmIChyZXN1bHQuc2V0dGluZ3MpIHtcbiAgICAgICAgc2V0dGluZ3MgPSBleHRlbmQoc2V0dGluZ3MgfHwge30sIHJlc3VsdC5zZXR0aW5ncylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYWRkUGx1Z2luKHZhbHVlKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmICgnbGVuZ3RoJyBpbiB2YWx1ZSkge1xuICAgICAgICAgIGFkZFBsdWdpbi5hcHBseShudWxsLCB2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdXNhYmxlIHZhbHVlLCBub3QgYCcgKyB2YWx1ZSArICdgJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRMaXN0KHBsdWdpbnMpIHtcbiAgICAgIHZhciBsZW5ndGhcbiAgICAgIHZhciBpbmRleFxuXG4gICAgICBpZiAocGx1Z2lucyA9PT0gbnVsbCB8fCBwbHVnaW5zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLyogRW1wdHkgKi9cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHBsdWdpbnMpIHtcbiAgICAgICAgbGVuZ3RoID0gcGx1Z2lucy5sZW5ndGhcbiAgICAgICAgaW5kZXggPSAtMVxuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYWRkKHBsdWdpbnNbaW5kZXhdKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgbGlzdCBvZiBwbHVnaW5zLCBub3QgYCcgKyBwbHVnaW5zICsgJ2AnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFBsdWdpbihwbHVnaW4sIHZhbHVlKSB7XG4gICAgICB2YXIgZW50cnkgPSBmaW5kKHBsdWdpbilcblxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGlmIChwbGFpbihlbnRyeVsxXSkgJiYgcGxhaW4odmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBleHRlbmQoZW50cnlbMV0sIHZhbHVlKVxuICAgICAgICB9XG5cbiAgICAgICAgZW50cnlbMV0gPSB2YWx1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXR0YWNoZXJzLnB1c2goc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmQocGx1Z2luKSB7XG4gICAgdmFyIGxlbmd0aCA9IGF0dGFjaGVycy5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBlbnRyeVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gYXR0YWNoZXJzW2luZGV4XVxuXG4gICAgICBpZiAoZW50cnlbMF0gPT09IHBsdWdpbikge1xuICAgICAgICByZXR1cm4gZW50cnlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBQYXJzZSBhIGZpbGUgKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbilcbiAgICogaW50byBhIFVuaXN0IG5vZGUgdXNpbmcgdGhlIGBQYXJzZXJgIG9uIHRoZVxuICAgKiBwcm9jZXNzb3IuICovXG4gIGZ1bmN0aW9uIHBhcnNlKGRvYykge1xuICAgIHZhciBmaWxlID0gdmZpbGUoZG9jKVxuICAgIHZhciBQYXJzZXJcblxuICAgIGZyZWV6ZSgpXG4gICAgUGFyc2VyID0gcHJvY2Vzc29yLlBhcnNlclxuICAgIGFzc2VydFBhcnNlcigncGFyc2UnLCBQYXJzZXIpXG5cbiAgICBpZiAobmV3YWJsZShQYXJzZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IFBhcnNlcihTdHJpbmcoZmlsZSksIGZpbGUpLnBhcnNlKClcbiAgICB9XG5cbiAgICByZXR1cm4gUGFyc2VyKFN0cmluZyhmaWxlKSwgZmlsZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIH1cblxuICAvKiBSdW4gdHJhbnNmb3JtcyBvbiBhIFVuaXN0IG5vZGUgcmVwcmVzZW50YXRpb24gb2YgYSBmaWxlXG4gICAqIChpbiBzdHJpbmcgb3IgVkZpbGUgcmVwcmVzZW50YXRpb24pLCBhc3luYy4gKi9cbiAgZnVuY3Rpb24gcnVuKG5vZGUsIGZpbGUsIGNiKSB7XG4gICAgYXNzZXJ0Tm9kZShub2RlKVxuICAgIGZyZWV6ZSgpXG5cbiAgICBpZiAoIWNiICYmIHR5cGVvZiBmaWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYiA9IGZpbGVcbiAgICAgIGZpbGUgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKCFjYikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGV4ZWN1dG9yKVxuICAgIH1cblxuICAgIGV4ZWN1dG9yKG51bGwsIGNiKVxuXG4gICAgZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0cmFuc2Zvcm1lcnMucnVuKG5vZGUsIHZmaWxlKGZpbGUpLCBkb25lKVxuXG4gICAgICBmdW5jdGlvbiBkb25lKGVyciwgdHJlZSwgZmlsZSkge1xuICAgICAgICB0cmVlID0gdHJlZSB8fCBub2RlXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKHRyZWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IobnVsbCwgdHJlZSwgZmlsZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qIFJ1biB0cmFuc2Zvcm1zIG9uIGEgVW5pc3Qgbm9kZSByZXByZXNlbnRhdGlvbiBvZiBhIGZpbGVcbiAgICogKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbiksIHN5bmMuICovXG4gIGZ1bmN0aW9uIHJ1blN5bmMobm9kZSwgZmlsZSkge1xuICAgIHZhciBjb21wbGV0ZSA9IGZhbHNlXG4gICAgdmFyIHJlc3VsdFxuXG4gICAgcnVuKG5vZGUsIGZpbGUsIGRvbmUpXG5cbiAgICBhc3NlcnREb25lKCdydW5TeW5jJywgJ3J1bicsIGNvbXBsZXRlKVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgZnVuY3Rpb24gZG9uZShlcnIsIHRyZWUpIHtcbiAgICAgIGNvbXBsZXRlID0gdHJ1ZVxuICAgICAgYmFpbChlcnIpXG4gICAgICByZXN1bHQgPSB0cmVlXG4gICAgfVxuICB9XG5cbiAgLyogU3RyaW5naWZ5IGEgVW5pc3Qgbm9kZSByZXByZXNlbnRhdGlvbiBvZiBhIGZpbGVcbiAgICogKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbikgaW50byBhIHN0cmluZ1xuICAgKiB1c2luZyB0aGUgYENvbXBpbGVyYCBvbiB0aGUgcHJvY2Vzc29yLiAqL1xuICBmdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgZG9jKSB7XG4gICAgdmFyIGZpbGUgPSB2ZmlsZShkb2MpXG4gICAgdmFyIENvbXBpbGVyXG5cbiAgICBmcmVlemUoKVxuICAgIENvbXBpbGVyID0gcHJvY2Vzc29yLkNvbXBpbGVyXG4gICAgYXNzZXJ0Q29tcGlsZXIoJ3N0cmluZ2lmeScsIENvbXBpbGVyKVxuICAgIGFzc2VydE5vZGUobm9kZSlcblxuICAgIGlmIChuZXdhYmxlKENvbXBpbGVyKSkge1xuICAgICAgcmV0dXJuIG5ldyBDb21waWxlcihub2RlLCBmaWxlKS5jb21waWxlKClcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcGlsZXIobm9kZSwgZmlsZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIH1cblxuICAvKiBQYXJzZSBhIGZpbGUgKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbilcbiAgICogaW50byBhIFVuaXN0IG5vZGUgdXNpbmcgdGhlIGBQYXJzZXJgIG9uIHRoZSBwcm9jZXNzb3IsXG4gICAqIHRoZW4gcnVuIHRyYW5zZm9ybXMgb24gdGhhdCBub2RlLCBhbmQgY29tcGlsZSB0aGVcbiAgICogcmVzdWx0aW5nIG5vZGUgdXNpbmcgdGhlIGBDb21waWxlcmAgb24gdGhlIHByb2Nlc3NvcixcbiAgICogYW5kIHN0b3JlIHRoYXQgcmVzdWx0IG9uIHRoZSBWRmlsZS4gKi9cbiAgZnVuY3Rpb24gcHJvY2Vzcyhkb2MsIGNiKSB7XG4gICAgZnJlZXplKClcbiAgICBhc3NlcnRQYXJzZXIoJ3Byb2Nlc3MnLCBwcm9jZXNzb3IuUGFyc2VyKVxuICAgIGFzc2VydENvbXBpbGVyKCdwcm9jZXNzJywgcHJvY2Vzc29yLkNvbXBpbGVyKVxuXG4gICAgaWYgKCFjYikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGV4ZWN1dG9yKVxuICAgIH1cblxuICAgIGV4ZWN1dG9yKG51bGwsIGNiKVxuXG4gICAgZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZmlsZSA9IHZmaWxlKGRvYylcblxuICAgICAgcGlwZWxpbmUucnVuKHByb2Nlc3Nvciwge2ZpbGU6IGZpbGV9LCBkb25lKVxuXG4gICAgICBmdW5jdGlvbiBkb25lKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZShmaWxlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKG51bGwsIGZpbGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBQcm9jZXNzIHRoZSBnaXZlbiBkb2N1bWVudCAoaW4gc3RyaW5nIG9yIFZGaWxlXG4gICAqIHJlcHJlc2VudGF0aW9uKSwgc3luYy4gKi9cbiAgZnVuY3Rpb24gcHJvY2Vzc1N5bmMoZG9jKSB7XG4gICAgdmFyIGNvbXBsZXRlID0gZmFsc2VcbiAgICB2YXIgZmlsZVxuXG4gICAgZnJlZXplKClcbiAgICBhc3NlcnRQYXJzZXIoJ3Byb2Nlc3NTeW5jJywgcHJvY2Vzc29yLlBhcnNlcilcbiAgICBhc3NlcnRDb21waWxlcigncHJvY2Vzc1N5bmMnLCBwcm9jZXNzb3IuQ29tcGlsZXIpXG4gICAgZmlsZSA9IHZmaWxlKGRvYylcblxuICAgIHByb2Nlc3MoZmlsZSwgZG9uZSlcblxuICAgIGFzc2VydERvbmUoJ3Byb2Nlc3NTeW5jJywgJ3Byb2Nlc3MnLCBjb21wbGV0ZSlcblxuICAgIHJldHVybiBmaWxlXG5cbiAgICBmdW5jdGlvbiBkb25lKGVycikge1xuICAgICAgY29tcGxldGUgPSB0cnVlXG4gICAgICBiYWlsKGVycilcbiAgICB9XG4gIH1cbn1cblxuLyogQ2hlY2sgaWYgYGZ1bmNgIGlzIGEgY29uc3RydWN0b3IuICovXG5mdW5jdGlvbiBuZXdhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYga2V5cyh2YWx1ZS5wcm90b3R5cGUpXG59XG5cbi8qIENoZWNrIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0IHdpdGgga2V5cy4gKi9cbmZ1bmN0aW9uIGtleXModmFsdWUpIHtcbiAgdmFyIGtleVxuICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qIEFzc2VydCBhIHBhcnNlciBpcyBhdmFpbGFibGUuICovXG5mdW5jdGlvbiBhc3NlcnRQYXJzZXIobmFtZSwgUGFyc2VyKSB7XG4gIGlmICh0eXBlb2YgUGFyc2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYCcgKyBuYW1lICsgJ2Agd2l0aG91dCBgUGFyc2VyYCcpXG4gIH1cbn1cblxuLyogQXNzZXJ0IGEgY29tcGlsZXIgaXMgYXZhaWxhYmxlLiAqL1xuZnVuY3Rpb24gYXNzZXJ0Q29tcGlsZXIobmFtZSwgQ29tcGlsZXIpIHtcbiAgaWYgKHR5cGVvZiBDb21waWxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGAnICsgbmFtZSArICdgIHdpdGhvdXQgYENvbXBpbGVyYCcpXG4gIH1cbn1cblxuLyogQXNzZXJ0IHRoZSBwcm9jZXNzb3IgaXMgbm90IGZyb3plbi4gKi9cbmZ1bmN0aW9uIGFzc2VydFVuZnJvemVuKG5hbWUsIGZyb3plbikge1xuICBpZiAoZnJvemVuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgW1xuICAgICAgICAnQ2Fubm90IGludm9rZSBgJyArIG5hbWUgKyAnYCBvbiBhIGZyb3plbiBwcm9jZXNzb3IuXFxuQ3JlYXRlIGEgbmV3ICcsXG4gICAgICAgICdwcm9jZXNzb3IgZmlyc3QsIGJ5IGludm9raW5nIGl0OiB1c2UgYHByb2Nlc3NvcigpYCBpbnN0ZWFkIG9mICcsXG4gICAgICAgICdgcHJvY2Vzc29yYC4nXG4gICAgICBdLmpvaW4oJycpXG4gICAgKVxuICB9XG59XG5cbi8qIEFzc2VydCBgbm9kZWAgaXMgYSBVbmlzdCBub2RlLiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm9kZShub2RlKSB7XG4gIGlmICghbm9kZSB8fCAhc3RyaW5nKG5vZGUudHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG5vZGUsIGdvdCBgJyArIG5vZGUgKyAnYCcpXG4gIH1cbn1cblxuLyogQXNzZXJ0IHRoYXQgYGNvbXBsZXRlYCBpcyBgdHJ1ZWAuICovXG5mdW5jdGlvbiBhc3NlcnREb25lKG5hbWUsIGFzeW5jTmFtZSwgY29tcGxldGUpIHtcbiAgaWYgKCFjb21wbGV0ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdgJyArIG5hbWUgKyAnYCBmaW5pc2hlZCBhc3luYy4gVXNlIGAnICsgYXN5bmNOYW1lICsgJ2AgaW5zdGVhZCdcbiAgICApXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgaXNBcnJheSA9IGZ1bmN0aW9uIGlzQXJyYXkoYXJyKSB7XG5cdGlmICh0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KGFycik7XG5cdH1cblxuXHRyZXR1cm4gdG9TdHIuY2FsbChhcnIpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxudmFyIGlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuXHRpZiAoIW9iaiB8fCB0b1N0ci5jYWxsKG9iaikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGhhc093bkNvbnN0cnVjdG9yID0gaGFzT3duLmNhbGwob2JqLCAnY29uc3RydWN0b3InKTtcblx0dmFyIGhhc0lzUHJvdG90eXBlT2YgPSBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAnaXNQcm90b3R5cGVPZicpO1xuXHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdGlmIChvYmouY29uc3RydWN0b3IgJiYgIWhhc093bkNvbnN0cnVjdG9yICYmICFoYXNJc1Byb3RvdHlwZU9mKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsXG5cdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXHR2YXIga2V5O1xuXHRmb3IgKGtleSBpbiBvYmopIHsgLyoqLyB9XG5cblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn07XG5cbi8vIElmIG5hbWUgaXMgJ19fcHJvdG9fXycsIGFuZCBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgYXZhaWxhYmxlLCBkZWZpbmUgX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eSBvbiB0YXJnZXRcbnZhciBzZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIHNldFByb3BlcnR5KHRhcmdldCwgb3B0aW9ucykge1xuXHRpZiAoZGVmaW5lUHJvcGVydHkgJiYgb3B0aW9ucy5uYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGRlZmluZVByb3BlcnR5KHRhcmdldCwgb3B0aW9ucy5uYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IG9wdGlvbnMubmV3VmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHRhcmdldFtvcHRpb25zLm5hbWVdID0gb3B0aW9ucy5uZXdWYWx1ZTtcblx0fVxufTtcblxuLy8gUmV0dXJuIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIF9fcHJvdG9fXyBpZiAnX19wcm90b19fJyBpcyBub3QgYW4gb3duIHByb3BlcnR5XG52YXIgZ2V0UHJvcGVydHkgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0eShvYmosIG5hbWUpIHtcblx0aWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0aWYgKCFoYXNPd24uY2FsbChvYmosIG5hbWUpKSB7XG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xuXHRcdH0gZWxzZSBpZiAoZ09QRCkge1xuXHRcdFx0Ly8gSW4gZWFybHkgdmVyc2lvbnMgb2Ygbm9kZSwgb2JqWydfX3Byb3RvX18nXSBpcyBidWdneSB3aGVuIG9iaiBoYXNcblx0XHRcdC8vIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoKSB3b3Jrcy5cblx0XHRcdHJldHVybiBnT1BEKG9iaiwgbmFtZSkudmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9ialtuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXh0ZW5kKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmU7XG5cdHZhciB0YXJnZXQgPSBhcmd1bWVudHNbMF07XG5cdHZhciBpID0gMTtcblx0dmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdHZhciBkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMV0gfHwge307XG5cdFx0Ly8gc2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdGkgPSAyO1xuXHR9XG5cdGlmICh0YXJnZXQgPT0gbnVsbCB8fCAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRvcHRpb25zID0gYXJndW1lbnRzW2ldO1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAob3B0aW9ucyAhPSBudWxsKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHRcdFx0XHRzcmMgPSBnZXRQcm9wZXJ0eSh0YXJnZXQsIG5hbWUpO1xuXHRcdFx0XHRjb3B5ID0gZ2V0UHJvcGVydHkob3B0aW9ucywgbmFtZSk7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAodGFyZ2V0ICE9PSBjb3B5KSB7XG5cdFx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdFx0aWYgKGRlZXAgJiYgY29weSAmJiAoaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBpc0FycmF5KGNvcHkpKSkpIHtcblx0XHRcdFx0XHRcdGlmIChjb3B5SXNBcnJheSkge1xuXHRcdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzUGxhaW5PYmplY3Qoc3JjKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogZXh0ZW5kKGRlZXAsIGNsb25lLCBjb3B5KSB9KTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBjb3B5ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBjb3B5IH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYmFpbFxuXG5mdW5jdGlvbiBiYWlsKGVycikge1xuICBpZiAoZXJyKSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFZNZXNzYWdlID0gcmVxdWlyZSgndmZpbGUtbWVzc2FnZScpO1xudmFyIFZGaWxlID0gcmVxdWlyZSgnLi9jb3JlLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gVkZpbGU7XG5cbnZhciBwcm90byA9IFZGaWxlLnByb3RvdHlwZTtcblxucHJvdG8ubWVzc2FnZSA9IG1lc3NhZ2U7XG5wcm90by5pbmZvID0gaW5mbztcbnByb3RvLmZhaWwgPSBmYWlsO1xuXG4vKiBTbGlnaHQgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuICBSZW1vdmUgaW4gdGhlIGZ1dHVyZS4gKi9cbnByb3RvLndhcm4gPSBtZXNzYWdlO1xuXG4vKiBDcmVhdGUgYSBtZXNzYWdlIHdpdGggYHJlYXNvbmAgYXQgYHBvc2l0aW9uYC5cbiAqIFdoZW4gYW4gZXJyb3IgaXMgcGFzc2VkIGluIGFzIGByZWFzb25gLCBjb3BpZXMgdGhlIHN0YWNrLiAqL1xuZnVuY3Rpb24gbWVzc2FnZShyZWFzb24sIHBvc2l0aW9uLCBvcmlnaW4pIHtcbiAgdmFyIGZpbGVQYXRoID0gdGhpcy5wYXRoO1xuICB2YXIgbWVzc2FnZSA9IG5ldyBWTWVzc2FnZShyZWFzb24sIHBvc2l0aW9uLCBvcmlnaW4pO1xuXG4gIGlmIChmaWxlUGF0aCkge1xuICAgIG1lc3NhZ2UubmFtZSA9IGZpbGVQYXRoICsgJzonICsgbWVzc2FnZS5uYW1lO1xuICAgIG1lc3NhZ2UuZmlsZSA9IGZpbGVQYXRoO1xuICB9XG5cbiAgbWVzc2FnZS5mYXRhbCA9IGZhbHNlO1xuXG4gIHRoaXMubWVzc2FnZXMucHVzaChtZXNzYWdlKTtcblxuICByZXR1cm4gbWVzc2FnZTtcbn1cblxuLyogRmFpbC4gQ3JlYXRlcyBhIHZtZXNzYWdlLCBhc3NvY2lhdGVzIGl0IHdpdGggdGhlIGZpbGUsXG4gKiBhbmQgdGhyb3dzIGl0LiAqL1xuZnVuY3Rpb24gZmFpbCgpIHtcbiAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBtZXNzYWdlLmZhdGFsID0gdHJ1ZTtcblxuICB0aHJvdyBtZXNzYWdlO1xufVxuXG4vKiBJbmZvLiBDcmVhdGVzIGEgdm1lc3NhZ2UsIGFzc29jaWF0ZXMgaXQgd2l0aCB0aGUgZmlsZSxcbiAqIGFuZCBtYXJrcyB0aGUgZmF0YWxpdHkgYXMgbnVsbC4gKi9cbmZ1bmN0aW9uIGluZm8oKSB7XG4gIHZhciBtZXNzYWdlID0gdGhpcy5tZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgbWVzc2FnZS5mYXRhbCA9IG51bGw7XG5cbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSBWTWVzc2FnZVxuXG4vLyBJbmhlcml0IGZyb20gYEVycm9yI2AuXG5mdW5jdGlvbiBWTWVzc2FnZVByb3RvdHlwZSgpIHt9XG5WTWVzc2FnZVByb3RvdHlwZS5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGVcblZNZXNzYWdlLnByb3RvdHlwZSA9IG5ldyBWTWVzc2FnZVByb3RvdHlwZSgpXG5cbi8vIE1lc3NhZ2UgcHJvcGVydGllcy5cbnZhciBwcm90byA9IFZNZXNzYWdlLnByb3RvdHlwZVxuXG5wcm90by5maWxlID0gJydcbnByb3RvLm5hbWUgPSAnJ1xucHJvdG8ucmVhc29uID0gJydcbnByb3RvLm1lc3NhZ2UgPSAnJ1xucHJvdG8uc3RhY2sgPSAnJ1xucHJvdG8uZmF0YWwgPSBudWxsXG5wcm90by5jb2x1bW4gPSBudWxsXG5wcm90by5saW5lID0gbnVsbFxuXG4vLyBDb25zdHJ1Y3QgYSBuZXcgVk1lc3NhZ2UuXG4vL1xuLy8gTm90ZTogV2UgY2Fubm90IGludm9rZSBgRXJyb3JgIG9uIHRoZSBjcmVhdGVkIGNvbnRleHQsIGFzIHRoYXQgYWRkcyByZWFkb25seVxuLy8gYGxpbmVgIGFuZCBgY29sdW1uYCBhdHRyaWJ1dGVzIG9uIFNhZmFyaSA5LCB0aHVzIHRocm93aW5nIGFuZCBmYWlsaW5nIHRoZVxuLy8gZGF0YS5cbmZ1bmN0aW9uIFZNZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24sIG9yaWdpbikge1xuICB2YXIgcGFydHNcbiAgdmFyIHJhbmdlXG4gIHZhciBsb2NhdGlvblxuXG4gIGlmICh0eXBlb2YgcG9zaXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgb3JpZ2luID0gcG9zaXRpb25cbiAgICBwb3NpdGlvbiA9IG51bGxcbiAgfVxuXG4gIHBhcnRzID0gcGFyc2VPcmlnaW4ob3JpZ2luKVxuICByYW5nZSA9IHN0cmluZ2lmeShwb3NpdGlvbikgfHwgJzE6MSdcblxuICBsb2NhdGlvbiA9IHtcbiAgICBzdGFydDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbH0sXG4gICAgZW5kOiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsfVxuICB9XG5cbiAgLy8gTm9kZS5cbiAgaWYgKHBvc2l0aW9uICYmIHBvc2l0aW9uLnBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBwb3NpdGlvbi5wb3NpdGlvblxuICB9XG5cbiAgaWYgKHBvc2l0aW9uKSB7XG4gICAgLy8gUG9zaXRpb24uXG4gICAgaWYgKHBvc2l0aW9uLnN0YXJ0KSB7XG4gICAgICBsb2NhdGlvbiA9IHBvc2l0aW9uXG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLnN0YXJ0XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBvaW50LlxuICAgICAgbG9jYXRpb24uc3RhcnQgPSBwb3NpdGlvblxuICAgIH1cbiAgfVxuXG4gIGlmIChyZWFzb24uc3RhY2spIHtcbiAgICB0aGlzLnN0YWNrID0gcmVhc29uLnN0YWNrXG4gICAgcmVhc29uID0gcmVhc29uLm1lc3NhZ2VcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IHJlYXNvblxuICB0aGlzLm5hbWUgPSByYW5nZVxuICB0aGlzLnJlYXNvbiA9IHJlYXNvblxuICB0aGlzLmxpbmUgPSBwb3NpdGlvbiA/IHBvc2l0aW9uLmxpbmUgOiBudWxsXG4gIHRoaXMuY29sdW1uID0gcG9zaXRpb24gPyBwb3NpdGlvbi5jb2x1bW4gOiBudWxsXG4gIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvblxuICB0aGlzLnNvdXJjZSA9IHBhcnRzWzBdXG4gIHRoaXMucnVsZUlkID0gcGFydHNbMV1cbn1cblxuZnVuY3Rpb24gcGFyc2VPcmlnaW4ob3JpZ2luKSB7XG4gIHZhciByZXN1bHQgPSBbbnVsbCwgbnVsbF1cbiAgdmFyIGluZGV4XG5cbiAgaWYgKHR5cGVvZiBvcmlnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBvcmlnaW4uaW5kZXhPZignOicpXG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXN1bHRbMV0gPSBvcmlnaW5cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0WzBdID0gb3JpZ2luLnNsaWNlKDAsIGluZGV4KVxuICAgICAgcmVzdWx0WzFdID0gb3JpZ2luLnNsaWNlKGluZGV4ICsgMSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5naWZ5XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICAvKiBOb3RoaW5nLiAqL1xuICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyogTm9kZS4gKi9cbiAgaWYgKG93bi5jYWxsKHZhbHVlLCAncG9zaXRpb24nKSB8fCBvd24uY2FsbCh2YWx1ZSwgJ3R5cGUnKSkge1xuICAgIHJldHVybiBwb3NpdGlvbih2YWx1ZS5wb3NpdGlvbilcbiAgfVxuXG4gIC8qIFBvc2l0aW9uLiAqL1xuICBpZiAob3duLmNhbGwodmFsdWUsICdzdGFydCcpIHx8IG93bi5jYWxsKHZhbHVlLCAnZW5kJykpIHtcbiAgICByZXR1cm4gcG9zaXRpb24odmFsdWUpXG4gIH1cblxuICAvKiBQb2ludC4gKi9cbiAgaWYgKG93bi5jYWxsKHZhbHVlLCAnbGluZScpIHx8IG93bi5jYWxsKHZhbHVlLCAnY29sdW1uJykpIHtcbiAgICByZXR1cm4gcG9pbnQodmFsdWUpXG4gIH1cblxuICAvKiA/ICovXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHBvaW50KHBvaW50KSB7XG4gIGlmICghcG9pbnQgfHwgdHlwZW9mIHBvaW50ICE9PSAnb2JqZWN0Jykge1xuICAgIHBvaW50ID0ge31cbiAgfVxuXG4gIHJldHVybiBpbmRleChwb2ludC5saW5lKSArICc6JyArIGluZGV4KHBvaW50LmNvbHVtbilcbn1cblxuZnVuY3Rpb24gcG9zaXRpb24ocG9zKSB7XG4gIGlmICghcG9zIHx8IHR5cGVvZiBwb3MgIT09ICdvYmplY3QnKSB7XG4gICAgcG9zID0ge31cbiAgfVxuXG4gIHJldHVybiBwb2ludChwb3Muc3RhcnQpICsgJy0nICsgcG9pbnQocG9zLmVuZClcbn1cblxuZnVuY3Rpb24gaW5kZXgodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyB2YWx1ZSA6IDFcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgcmVwbGFjZSA9IHJlcXVpcmUoJ3JlcGxhY2UtZXh0Jyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gVkZpbGU7XG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm90byA9IFZGaWxlLnByb3RvdHlwZTtcblxucHJvdG8udG9TdHJpbmcgPSB0b1N0cmluZztcblxuLyogT3JkZXIgb2Ygc2V0dGluZyAobGVhc3Qgc3BlY2lmaWMgdG8gbW9zdCksIHdlIG5lZWQgdGhpcyBiZWNhdXNlXG4gKiBvdGhlcndpc2UgYHtzdGVtOiAnYScsIHBhdGg6ICd+L2IuanMnfWAgd291bGQgdGhyb3csIGFzIGEgcGF0aFxuICogaXMgbmVlZGVkIGJlZm9yZSBhIHN0ZW0gY2FuIGJlIHNldC4gKi9cbnZhciBvcmRlciA9IFtcbiAgJ2hpc3RvcnknLFxuICAncGF0aCcsXG4gICdiYXNlbmFtZScsXG4gICdzdGVtJyxcbiAgJ2V4dG5hbWUnLFxuICAnZGlybmFtZSdcbl07XG5cbi8qIENvbnN0cnVjdCBhIG5ldyBmaWxlLiAqL1xuZnVuY3Rpb24gVkZpbGUob3B0aW9ucykge1xuICB2YXIgcHJvcDtcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuXG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgYnVmZmVyKG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtjb250ZW50czogb3B0aW9uc307XG4gIH0gZWxzZSBpZiAoJ21lc3NhZ2UnIGluIG9wdGlvbnMgJiYgJ21lc3NhZ2VzJyBpbiBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVkZpbGUpKSB7XG4gICAgcmV0dXJuIG5ldyBWRmlsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuZGF0YSA9IHt9O1xuICB0aGlzLm1lc3NhZ2VzID0gW107XG4gIHRoaXMuaGlzdG9yeSA9IFtdO1xuICB0aGlzLmN3ZCA9IHByb2Nlc3MuY3dkKCk7XG5cbiAgLyogU2V0IHBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzIGluIHRoZSBjb3JyZWN0IG9yZGVyLiAqL1xuICBpbmRleCA9IC0xO1xuICBsZW5ndGggPSBvcmRlci5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBwcm9wID0gb3JkZXJbaW5kZXhdO1xuXG4gICAgaWYgKG93bi5jYWxsKG9wdGlvbnMsIHByb3ApKSB7XG4gICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG4gIH1cblxuICAvKiBTZXQgbm9uLXBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzLiAqL1xuICBmb3IgKHByb3AgaW4gb3B0aW9ucykge1xuICAgIGlmIChvcmRlci5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuICB9XG59XG5cbi8qIEFjY2VzcyBmdWxsIHBhdGggKGB+L2luZGV4Lm1pbi5qc2ApLiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAncGF0aCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBhc3NlcnROb25FbXB0eShwYXRoLCAncGF0aCcpO1xuXG4gICAgaWYgKHBhdGggIT09IHRoaXMucGF0aCkge1xuICAgICAgdGhpcy5oaXN0b3J5LnB1c2gocGF0aCk7XG4gICAgfVxuICB9XG59KTtcblxuLyogQWNjZXNzIHBhcmVudCBwYXRoIChgfmApLiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnZGlybmFtZScsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnID8gcGF0aC5kaXJuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGRpcm5hbWUpIHtcbiAgICBhc3NlcnRQYXRoKHRoaXMucGF0aCwgJ2Rpcm5hbWUnKTtcbiAgICB0aGlzLnBhdGggPSBwYXRoLmpvaW4oZGlybmFtZSB8fCAnJywgdGhpcy5iYXNlbmFtZSk7XG4gIH1cbn0pO1xuXG4vKiBBY2Nlc3MgYmFzZW5hbWUgKGBpbmRleC5taW4uanNgKS4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ2Jhc2VuYW1lJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmJhc2VuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGJhc2VuYW1lKSB7XG4gICAgYXNzZXJ0Tm9uRW1wdHkoYmFzZW5hbWUsICdiYXNlbmFtZScpO1xuICAgIGFzc2VydFBhcnQoYmFzZW5hbWUsICdiYXNlbmFtZScpO1xuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIGJhc2VuYW1lKTtcbiAgfVxufSk7XG5cbi8qIEFjY2VzcyBleHRuYW1lIChgLmpzYCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdleHRuYW1lJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmV4dG5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoZXh0bmFtZSkge1xuICAgIHZhciBleHQgPSBleHRuYW1lIHx8ICcnO1xuXG4gICAgYXNzZXJ0UGFydChleHQsICdleHRuYW1lJyk7XG4gICAgYXNzZXJ0UGF0aCh0aGlzLnBhdGgsICdleHRuYW1lJyk7XG5cbiAgICBpZiAoZXh0KSB7XG4gICAgICBpZiAoZXh0LmNoYXJBdCgwKSAhPT0gJy4nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGV4dG5hbWVgIG11c3Qgc3RhcnQgd2l0aCBgLmAnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4dC5pbmRleE9mKCcuJywgMSkgIT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYGV4dG5hbWVgIGNhbm5vdCBjb250YWluIG11bHRpcGxlIGRvdHMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBhdGggPSByZXBsYWNlKHRoaXMucGF0aCwgZXh0KTtcbiAgfVxufSk7XG5cbi8qIEFjY2VzcyBzdGVtIChgaW5kZXgubWluYCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdzdGVtJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmJhc2VuYW1lKHRoaXMucGF0aCwgdGhpcy5leHRuYW1lKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoc3RlbSkge1xuICAgIGFzc2VydE5vbkVtcHR5KHN0ZW0sICdzdGVtJyk7XG4gICAgYXNzZXJ0UGFydChzdGVtLCAnc3RlbScpO1xuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIHN0ZW0gKyAodGhpcy5leHRuYW1lIHx8ICcnKSk7XG4gIH1cbn0pO1xuXG4vKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBmaWxlLiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2RpbmcpIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5jb250ZW50cyB8fCAnJztcbiAgcmV0dXJuIGJ1ZmZlcih2YWx1ZSkgPyB2YWx1ZS50b1N0cmluZyhlbmNvZGluZykgOiBTdHJpbmcodmFsdWUpO1xufVxuXG4vKiBBc3NlcnQgdGhhdCBgcGFydGAgaXMgbm90IGEgcGF0aCAoaS5lLiwgZG9lc1xuICogbm90IGNvbnRhaW4gYHBhdGguc2VwYCkuICovXG5mdW5jdGlvbiBhc3NlcnRQYXJ0KHBhcnQsIG5hbWUpIHtcbiAgaWYgKHBhcnQuaW5kZXhPZihwYXRoLnNlcCkgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgJyArIG5hbWUgKyAnYCBjYW5ub3QgYmUgYSBwYXRoOiBkaWQgbm90IGV4cGVjdCBgJyArIHBhdGguc2VwICsgJ2AnKTtcbiAgfVxufVxuXG4vKiBBc3NlcnQgdGhhdCBgcGFydGAgaXMgbm90IGVtcHR5LiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm9uRW1wdHkocGFydCwgbmFtZSkge1xuICBpZiAoIXBhcnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2AnICsgbmFtZSArICdgIGNhbm5vdCBiZSBlbXB0eScpO1xuICB9XG59XG5cbi8qIEFzc2VydCBgcGF0aGAgZXhpc3RzLiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGF0aChwYXRoLCBuYW1lKSB7XG4gIGlmICghcGF0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZyBgJyArIG5hbWUgKyAnYCByZXF1aXJlcyBgcGF0aGAgdG8gYmUgc2V0IHRvbycpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5mdW5jdGlvbiByZXBsYWNlRXh0KG5wYXRoLCBleHQpIHtcbiAgaWYgKHR5cGVvZiBucGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnBhdGg7XG4gIH1cblxuICBpZiAobnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG5wYXRoO1xuICB9XG5cbiAgdmFyIG5GaWxlTmFtZSA9IHBhdGguYmFzZW5hbWUobnBhdGgsIHBhdGguZXh0bmFtZShucGF0aCkpICsgZXh0O1xuICByZXR1cm4gcGF0aC5qb2luKHBhdGguZGlybmFtZShucGF0aCksIG5GaWxlTmFtZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVwbGFjZUV4dDtcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB3cmFwID0gcmVxdWlyZSgnLi93cmFwLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSB0cm91Z2hcblxudHJvdWdoLndyYXAgPSB3cmFwXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlXG5cbi8vIENyZWF0ZSBuZXcgbWlkZGxld2FyZS5cbmZ1bmN0aW9uIHRyb3VnaCgpIHtcbiAgdmFyIGZucyA9IFtdXG4gIHZhciBtaWRkbGV3YXJlID0ge31cblxuICBtaWRkbGV3YXJlLnJ1biA9IHJ1blxuICBtaWRkbGV3YXJlLnVzZSA9IHVzZVxuXG4gIHJldHVybiBtaWRkbGV3YXJlXG5cbiAgLy8gUnVuIGBmbnNgLiAgTGFzdCBhcmd1bWVudCBtdXN0IGJlIGEgY29tcGxldGlvbiBoYW5kbGVyLlxuICBmdW5jdGlvbiBydW4oKSB7XG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgaW5wdXQgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgLTEpXG4gICAgdmFyIGRvbmUgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdXG5cbiAgICBpZiAodHlwZW9mIGRvbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZnVuY3Rpb24gYXMgbGFzdCBhcmd1bWVudCwgbm90ICcgKyBkb25lKVxuICAgIH1cblxuICAgIG5leHQuYXBwbHkobnVsbCwgW251bGxdLmNvbmNhdChpbnB1dCkpXG5cbiAgICAvLyBSdW4gdGhlIG5leHQgYGZuYCwgaWYgYW55LlxuICAgIGZ1bmN0aW9uIG5leHQoZXJyKSB7XG4gICAgICB2YXIgZm4gPSBmbnNbKytpbmRleF1cbiAgICAgIHZhciBwYXJhbXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMClcbiAgICAgIHZhciB2YWx1ZXMgPSBwYXJhbXMuc2xpY2UoMSlcbiAgICAgIHZhciBsZW5ndGggPSBpbnB1dC5sZW5ndGhcbiAgICAgIHZhciBwb3MgPSAtMVxuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGRvbmUoZXJyKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gQ29weSBub24tbnVsbHkgaW5wdXQgaW50byB2YWx1ZXMuXG4gICAgICB3aGlsZSAoKytwb3MgPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKHZhbHVlc1twb3NdID09PSBudWxsIHx8IHZhbHVlc1twb3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YWx1ZXNbcG9zXSA9IGlucHV0W3Bvc11cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnB1dCA9IHZhbHVlc1xuXG4gICAgICAvLyBOZXh0IG9yIGRvbmUuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgd3JhcChmbiwgbmV4dCkuYXBwbHkobnVsbCwgaW5wdXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lLmFwcGx5KG51bGwsIFtudWxsXS5jb25jYXQoaW5wdXQpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBgZm5gIHRvIHRoZSBsaXN0LlxuICBmdW5jdGlvbiB1c2UoZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGBmbmAgdG8gYmUgYSBmdW5jdGlvbiwgbm90ICcgKyBmbilcbiAgICB9XG5cbiAgICBmbnMucHVzaChmbilcblxuICAgIHJldHVybiBtaWRkbGV3YXJlXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBcblxuLy8gV3JhcCBgZm5gLlxuLy8gQ2FuIGJlIHN5bmMgb3IgYXN5bmM7IHJldHVybiBhIHByb21pc2UsIHJlY2VpdmUgYSBjb21wbGV0aW9uIGhhbmRsZXIsIHJldHVyblxuLy8gbmV3IHZhbHVlcyBhbmQgZXJyb3JzLlxuZnVuY3Rpb24gd3JhcChmbiwgY2FsbGJhY2spIHtcbiAgdmFyIGludm9rZWRcblxuICByZXR1cm4gd3JhcHBlZFxuXG4gIGZ1bmN0aW9uIHdyYXBwZWQoKSB7XG4gICAgdmFyIHBhcmFtcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgIHZhciBjYWxsYmFjayA9IGZuLmxlbmd0aCA+IHBhcmFtcy5sZW5ndGhcbiAgICB2YXIgcmVzdWx0XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHBhcmFtcy5wdXNoKGRvbmUpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KG51bGwsIHBhcmFtcylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gV2VsbCwgdGhpcyBpcyBxdWl0ZSB0aGUgcGlja2xlLlxuICAgICAgLy8gYGZuYCByZWNlaXZlZCBhIGNhbGxiYWNrIGFuZCBpbnZva2VkIGl0ICh0aHVzIGNvbnRpbnVpbmcgdGhlIHBpcGVsaW5lKSxcbiAgICAgIC8vIGJ1dCBsYXRlciBhbHNvIHRocmV3IGFuIGVycm9yLlxuICAgICAgLy8gV2XigJlyZSBub3QgYWJvdXQgdG8gcmVzdGFydCB0aGUgcGlwZWxpbmUgYWdhaW4sIHNvIHRoZSBvbmx5IHRoaW5nIGxlZnRcbiAgICAgIC8vIHRvIGRvIGlzIHRvIHRocm93IHRoZSB0aGluZyBpbnN0ZWFkLlxuICAgICAgaWYgKGNhbGxiYWNrICYmIGludm9rZWQpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRvbmUoZXJyb3IpXG4gICAgfVxuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzdWx0LnRoZW4odGhlbiwgZG9uZSlcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgZG9uZShyZXN1bHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGVuKHJlc3VsdClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBJbnZva2UgYG5leHRgLCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgaWYgKCFpbnZva2VkKSB7XG4gICAgICBpbnZva2VkID0gdHJ1ZVxuXG4gICAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG5cbiAgLy8gSW52b2tlIGBkb25lYCB3aXRoIG9uZSB2YWx1ZS5cbiAgLy8gVHJhY2tzIGlmIGFuIGVycm9yIGlzIHBhc3NlZCwgdG9vLlxuICBmdW5jdGlvbiB0aGVuKHZhbHVlKSB7XG4gICAgZG9uZShudWxsLCB2YWx1ZSlcbiAgfVxufVxuIiwidmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaW5nXG5cbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09IFwiW29iamVjdCBTdHJpbmddXCJcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHgpIHtcblx0dmFyIHByb3RvdHlwZTtcblx0cmV0dXJuIHRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IE9iamVjdF0nICYmIChwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoeCksIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih7fSkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVuaGVyaXQgPSByZXF1aXJlKCd1bmhlcml0Jyk7XG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIFBhcnNlciA9IHJlcXVpcmUoJy4vbGliL3BhcnNlci5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xucGFyc2UuUGFyc2VyID0gUGFyc2VyO1xuXG5mdW5jdGlvbiBwYXJzZShvcHRpb25zKSB7XG4gIHZhciBMb2NhbCA9IHVuaGVyaXQoUGFyc2VyKTtcbiAgTG9jYWwucHJvdG90eXBlLm9wdGlvbnMgPSB4dGVuZChMb2NhbC5wcm90b3R5cGUub3B0aW9ucywgdGhpcy5kYXRhKCdzZXR0aW5ncycpLCBvcHRpb25zKTtcbiAgdGhpcy5QYXJzZXIgPSBMb2NhbDtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbm1vZHVsZS5leHBvcnRzID0gdW5oZXJpdFxuXG4vLyBDcmVhdGUgYSBjdXN0b20gY29uc3RydWN0b3Igd2hpY2ggY2FuIGJlIG1vZGlmaWVkIHdpdGhvdXQgYWZmZWN0aW5nIHRoZVxuLy8gb3JpZ2luYWwgY2xhc3MuXG5mdW5jdGlvbiB1bmhlcml0KFN1cGVyKSB7XG4gIHZhciByZXN1bHRcbiAgdmFyIGtleVxuICB2YXIgdmFsdWVcblxuICBpbmhlcml0cyhPZiwgU3VwZXIpXG4gIGluaGVyaXRzKEZyb20sIE9mKVxuXG4gIC8vIENsb25lIHZhbHVlcy5cbiAgcmVzdWx0ID0gT2YucHJvdG90eXBlXG5cbiAgZm9yIChrZXkgaW4gcmVzdWx0KSB7XG4gICAgdmFsdWUgPSByZXN1bHRba2V5XVxuXG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gJ2NvbmNhdCcgaW4gdmFsdWUgPyB2YWx1ZS5jb25jYXQoKSA6IHh0ZW5kKHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPZlxuXG4gIC8vIENvbnN0cnVjdG9yIGFjY2VwdGluZyBhIHNpbmdsZSBhcmd1bWVudCwgd2hpY2ggaXRzZWxmIGlzIGFuIGBhcmd1bWVudHNgXG4gIC8vIG9iamVjdC5cbiAgZnVuY3Rpb24gRnJvbShwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIFN1cGVyLmFwcGx5KHRoaXMsIHBhcmFtZXRlcnMpXG4gIH1cblxuICAvLyBDb25zdHJ1Y3RvciBhY2NlcHRpbmcgdmFyaWFkaWMgYXJndW1lbnRzLlxuICBmdW5jdGlvbiBPZigpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT2YpKSB7XG4gICAgICByZXR1cm4gbmV3IEZyb20oYXJndW1lbnRzKVxuICAgIH1cblxuICAgIHJldHVybiBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gIH1cbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcbnZhciB0b2dnbGUgPSByZXF1aXJlKCdzdGF0ZS10b2dnbGUnKTtcbnZhciB2ZmlsZUxvY2F0aW9uID0gcmVxdWlyZSgndmZpbGUtbG9jYXRpb24nKTtcbnZhciB1bmVzY2FwZSA9IHJlcXVpcmUoJy4vdW5lc2NhcGUnKTtcbnZhciBkZWNvZGUgPSByZXF1aXJlKCcuL2RlY29kZScpO1xudmFyIHRva2VuaXplciA9IHJlcXVpcmUoJy4vdG9rZW5pemVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuXG5mdW5jdGlvbiBQYXJzZXIoZG9jLCBmaWxlKSB7XG4gIHRoaXMuZmlsZSA9IGZpbGU7XG4gIHRoaXMub2Zmc2V0ID0ge307XG4gIHRoaXMub3B0aW9ucyA9IHh0ZW5kKHRoaXMub3B0aW9ucyk7XG4gIHRoaXMuc2V0T3B0aW9ucyh7fSk7XG5cbiAgdGhpcy5pbkxpc3QgPSBmYWxzZTtcbiAgdGhpcy5pbkJsb2NrID0gZmFsc2U7XG4gIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gIHRoaXMuYXRTdGFydCA9IHRydWU7XG5cbiAgdGhpcy50b09mZnNldCA9IHZmaWxlTG9jYXRpb24oZmlsZSkudG9PZmZzZXQ7XG4gIHRoaXMudW5lc2NhcGUgPSB1bmVzY2FwZSh0aGlzLCAnZXNjYXBlJyk7XG4gIHRoaXMuZGVjb2RlID0gZGVjb2RlKHRoaXMpO1xufVxuXG52YXIgcHJvdG8gPSBQYXJzZXIucHJvdG90eXBlO1xuXG4vKiBFeHBvc2UgY29yZS4gKi9cbnByb3RvLnNldE9wdGlvbnMgPSByZXF1aXJlKCcuL3NldC1vcHRpb25zJyk7XG5wcm90by5wYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcblxuLyogRXhwb3NlIGBkZWZhdWx0c2AuICovXG5wcm90by5vcHRpb25zID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKiBFbnRlciBhbmQgZXhpdCBoZWxwZXJzLiAqL1xucHJvdG8uZXhpdFN0YXJ0ID0gdG9nZ2xlKCdhdFN0YXJ0JywgdHJ1ZSk7XG5wcm90by5lbnRlckxpc3QgPSB0b2dnbGUoJ2luTGlzdCcsIGZhbHNlKTtcbnByb3RvLmVudGVyTGluayA9IHRvZ2dsZSgnaW5MaW5rJywgZmFsc2UpO1xucHJvdG8uZW50ZXJCbG9jayA9IHRvZ2dsZSgnaW5CbG9jaycsIGZhbHNlKTtcblxuLyogTm9kZXMgdGhhdCBjYW4gaW50ZXJ1cHQgYSBwYXJhZ3JhcGg6XG4gKlxuICogYGBgbWFya2Rvd25cbiAqIEEgcGFyYWdyYXBoLCBmb2xsb3dlZCBieSBhIHRoZW1hdGljIGJyZWFrLlxuICogX19fXG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgYWJvdmUgZXhhbXBsZSwgdGhlIHRoZW1hdGljIGJyZWFrIOKAnGludGVydXB0c+KAnVxuICogdGhlIHBhcmFncmFwaC4gKi9cbnByb3RvLmludGVycnVwdFBhcmFncmFwaCA9IFtcbiAgWyd0aGVtYXRpY0JyZWFrJ10sXG4gIFsnYXR4SGVhZGluZyddLFxuICBbJ2ZlbmNlZENvZGUnXSxcbiAgWydibG9ja3F1b3RlJ10sXG4gIFsnaHRtbCddLFxuICBbJ3NldGV4dEhlYWRpbmcnLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydkZWZpbml0aW9uJywge2NvbW1vbm1hcms6IGZhbHNlfV0sXG4gIFsnZm9vdG5vdGUnLCB7Y29tbW9ubWFyazogZmFsc2V9XVxuXTtcblxuLyogTm9kZXMgdGhhdCBjYW4gaW50ZXJ1cHQgYSBsaXN0OlxuICpcbiAqIGBgYG1hcmtkb3duXG4gKiAtIE9uZVxuICogX19fXG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgYWJvdmUgZXhhbXBsZSwgdGhlIHRoZW1hdGljIGJyZWFrIOKAnGludGVydXB0c+KAnVxuICogdGhlIGxpc3QuICovXG5wcm90by5pbnRlcnJ1cHRMaXN0ID0gW1xuICBbJ2F0eEhlYWRpbmcnLCB7cGVkYW50aWM6IGZhbHNlfV0sXG4gIFsnZmVuY2VkQ29kZScsIHtwZWRhbnRpYzogZmFsc2V9XSxcbiAgWyd0aGVtYXRpY0JyZWFrJywge3BlZGFudGljOiBmYWxzZX1dLFxuICBbJ2RlZmluaXRpb24nLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydmb290bm90ZScsIHtjb21tb25tYXJrOiBmYWxzZX1dXG5dO1xuXG4vKiBOb2RlcyB0aGF0IGNhbiBpbnRlcnVwdCBhIGJsb2NrcXVvdGU6XG4gKlxuICogYGBgbWFya2Rvd25cbiAqID4gQSBwYXJhZ3JhcGguXG4gKiBfX19cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgdGhlbWF0aWMgYnJlYWsg4oCcaW50ZXJ1cHRz4oCdXG4gKiB0aGUgYmxvY2txdW90ZS4gKi9cbnByb3RvLmludGVycnVwdEJsb2NrcXVvdGUgPSBbXG4gIFsnaW5kZW50ZWRDb2RlJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydmZW5jZWRDb2RlJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydhdHhIZWFkaW5nJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydzZXRleHRIZWFkaW5nJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWyd0aGVtYXRpY0JyZWFrJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydodG1sJywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydsaXN0Jywge2NvbW1vbm1hcms6IHRydWV9XSxcbiAgWydkZWZpbml0aW9uJywge2NvbW1vbm1hcms6IGZhbHNlfV0sXG4gIFsnZm9vdG5vdGUnLCB7Y29tbW9ubWFyazogZmFsc2V9XVxuXTtcblxuLyogSGFuZGxlcnMuICovXG5wcm90by5ibG9ja1Rva2VuaXplcnMgPSB7XG4gIG5ld2xpbmU6IHJlcXVpcmUoJy4vdG9rZW5pemUvbmV3bGluZScpLFxuICBpbmRlbnRlZENvZGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvY29kZS1pbmRlbnRlZCcpLFxuICBmZW5jZWRDb2RlOiByZXF1aXJlKCcuL3Rva2VuaXplL2NvZGUtZmVuY2VkJyksXG4gIGJsb2NrcXVvdGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvYmxvY2txdW90ZScpLFxuICBhdHhIZWFkaW5nOiByZXF1aXJlKCcuL3Rva2VuaXplL2hlYWRpbmctYXR4JyksXG4gIHRoZW1hdGljQnJlYWs6IHJlcXVpcmUoJy4vdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsnKSxcbiAgbGlzdDogcmVxdWlyZSgnLi90b2tlbml6ZS9saXN0JyksXG4gIHNldGV4dEhlYWRpbmc6IHJlcXVpcmUoJy4vdG9rZW5pemUvaGVhZGluZy1zZXRleHQnKSxcbiAgaHRtbDogcmVxdWlyZSgnLi90b2tlbml6ZS9odG1sLWJsb2NrJyksXG4gIGZvb3Rub3RlOiByZXF1aXJlKCcuL3Rva2VuaXplL2Zvb3Rub3RlLWRlZmluaXRpb24nKSxcbiAgZGVmaW5pdGlvbjogcmVxdWlyZSgnLi90b2tlbml6ZS9kZWZpbml0aW9uJyksXG4gIHRhYmxlOiByZXF1aXJlKCcuL3Rva2VuaXplL3RhYmxlJyksXG4gIHBhcmFncmFwaDogcmVxdWlyZSgnLi90b2tlbml6ZS9wYXJhZ3JhcGgnKVxufTtcblxucHJvdG8uaW5saW5lVG9rZW5pemVycyA9IHtcbiAgZXNjYXBlOiByZXF1aXJlKCcuL3Rva2VuaXplL2VzY2FwZScpLFxuICBhdXRvTGluazogcmVxdWlyZSgnLi90b2tlbml6ZS9hdXRvLWxpbmsnKSxcbiAgdXJsOiByZXF1aXJlKCcuL3Rva2VuaXplL3VybCcpLFxuICBodG1sOiByZXF1aXJlKCcuL3Rva2VuaXplL2h0bWwtaW5saW5lJyksXG4gIGxpbms6IHJlcXVpcmUoJy4vdG9rZW5pemUvbGluaycpLFxuICByZWZlcmVuY2U6IHJlcXVpcmUoJy4vdG9rZW5pemUvcmVmZXJlbmNlJyksXG4gIHN0cm9uZzogcmVxdWlyZSgnLi90b2tlbml6ZS9zdHJvbmcnKSxcbiAgZW1waGFzaXM6IHJlcXVpcmUoJy4vdG9rZW5pemUvZW1waGFzaXMnKSxcbiAgZGVsZXRpb246IHJlcXVpcmUoJy4vdG9rZW5pemUvZGVsZXRlJyksXG4gIGNvZGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvY29kZS1pbmxpbmUnKSxcbiAgYnJlYWs6IHJlcXVpcmUoJy4vdG9rZW5pemUvYnJlYWsnKSxcbiAgdGV4dDogcmVxdWlyZSgnLi90b2tlbml6ZS90ZXh0Jylcbn07XG5cbi8qIEV4cG9zZSBwcmVjZWRlbmNlLiAqL1xucHJvdG8uYmxvY2tNZXRob2RzID0ga2V5cyhwcm90by5ibG9ja1Rva2VuaXplcnMpO1xucHJvdG8uaW5saW5lTWV0aG9kcyA9IGtleXMocHJvdG8uaW5saW5lVG9rZW5pemVycyk7XG5cbi8qIFRva2VuaXplcnMuICovXG5wcm90by50b2tlbml6ZUJsb2NrID0gdG9rZW5pemVyKCdibG9jaycpO1xucHJvdG8udG9rZW5pemVJbmxpbmUgPSB0b2tlbml6ZXIoJ2lubGluZScpO1xucHJvdG8udG9rZW5pemVGYWN0b3J5ID0gdG9rZW5pemVyO1xuXG4vKiBHZXQgYWxsIGtleXMgaW4gYHZhbHVlYC4gKi9cbmZ1bmN0aW9uIGtleXModmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuXG4gIGZvciAoa2V5IGluIHZhbHVlKSB7XG4gICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG5cbi8vIENvbnN0cnVjdCBhIHN0YXRlIGB0b2dnbGVyYDogYSBmdW5jdGlvbiB3aGljaCBpbnZlcnNlcyBgcHJvcGVydHlgIGluIGNvbnRleHRcbi8vIGJhc2VkIG9uIGl0cyBjdXJyZW50IHZhbHVlLlxuLy8gVGhlIGJ5IGB0b2dnbGVyYCByZXR1cm5lZCBmdW5jdGlvbiByZXN0b3JlcyB0aGF0IHZhbHVlLlxuZnVuY3Rpb24gZmFjdG9yeShrZXksIHN0YXRlLCBjdHgpIHtcbiAgcmV0dXJuIGVudGVyXG5cbiAgZnVuY3Rpb24gZW50ZXIoKSB7XG4gICAgdmFyIGNvbnRleHQgPSBjdHggfHwgdGhpc1xuICAgIHZhciBjdXJyZW50ID0gY29udGV4dFtrZXldXG5cbiAgICBjb250ZXh0W2tleV0gPSAhc3RhdGVcblxuICAgIHJldHVybiBleGl0XG5cbiAgICBmdW5jdGlvbiBleGl0KCkge1xuICAgICAgY29udGV4dFtrZXldID0gY3VycmVudFxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeVxuXG5mdW5jdGlvbiBmYWN0b3J5KGZpbGUpIHtcbiAgdmFyIGNvbnRlbnRzID0gaW5kaWNlcyhTdHJpbmcoZmlsZSkpXG5cbiAgcmV0dXJuIHtcbiAgICB0b1Bvc2l0aW9uOiBvZmZzZXRUb1Bvc2l0aW9uRmFjdG9yeShjb250ZW50cyksXG4gICAgdG9PZmZzZXQ6IHBvc2l0aW9uVG9PZmZzZXRGYWN0b3J5KGNvbnRlbnRzKVxuICB9XG59XG5cbi8vIEZhY3RvcnkgdG8gZ2V0IHRoZSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBmb3IgYG9mZnNldGAgaW4gdGhlIGJvdW5kXG4vLyBpbmRpY2VzLlxuZnVuY3Rpb24gb2Zmc2V0VG9Qb3NpdGlvbkZhY3RvcnkoaW5kaWNlcykge1xuICByZXR1cm4gb2Zmc2V0VG9Qb3NpdGlvblxuXG4gIC8vIEdldCB0aGUgbGluZSBhbmQgY29sdW1uLWJhc2VkIGBwb3NpdGlvbmAgZm9yIGBvZmZzZXRgIGluIHRoZSBib3VuZCBpbmRpY2VzLlxuICBmdW5jdGlvbiBvZmZzZXRUb1Bvc2l0aW9uKG9mZnNldCkge1xuICAgIHZhciBpbmRleCA9IC0xXG4gICAgdmFyIGxlbmd0aCA9IGluZGljZXMubGVuZ3RoXG5cbiAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgcmV0dXJuIHt9XG4gICAgfVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpbmRpY2VzW2luZGV4XSA+IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxpbmU6IGluZGV4ICsgMSxcbiAgICAgICAgICBjb2x1bW46IG9mZnNldCAtIChpbmRpY2VzW2luZGV4IC0gMV0gfHwgMCkgKyAxLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge31cbiAgfVxufVxuXG4vLyBGYWN0b3J5IHRvIGdldCB0aGUgYG9mZnNldGAgZm9yIGEgbGluZSBhbmQgY29sdW1uLWJhc2VkIGBwb3NpdGlvbmAgaW4gdGhlXG4vLyBib3VuZCBpbmRpY2VzLlxuZnVuY3Rpb24gcG9zaXRpb25Ub09mZnNldEZhY3RvcnkoaW5kaWNlcykge1xuICByZXR1cm4gcG9zaXRpb25Ub09mZnNldFxuXG4gIC8vIEdldCB0aGUgYG9mZnNldGAgZm9yIGEgbGluZSBhbmQgY29sdW1uLWJhc2VkIGBwb3NpdGlvbmAgaW4gdGhlIGJvdW5kXG4gIC8vIGluZGljZXMuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uVG9PZmZzZXQocG9zaXRpb24pIHtcbiAgICB2YXIgbGluZSA9IHBvc2l0aW9uICYmIHBvc2l0aW9uLmxpbmVcbiAgICB2YXIgY29sdW1uID0gcG9zaXRpb24gJiYgcG9zaXRpb24uY29sdW1uXG5cbiAgICBpZiAoIWlzTmFOKGxpbmUpICYmICFpc05hTihjb2x1bW4pICYmIGxpbmUgLSAxIGluIGluZGljZXMpIHtcbiAgICAgIHJldHVybiAoaW5kaWNlc1tsaW5lIC0gMl0gfHwgMCkgKyBjb2x1bW4gLSAxIHx8IDBcbiAgICB9XG5cbiAgICByZXR1cm4gLTFcbiAgfVxufVxuXG4vLyBHZXQgaW5kaWNlcyBvZiBsaW5lLWJyZWFrcyBpbiBgdmFsdWVgLlxuZnVuY3Rpb24gaW5kaWNlcyh2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gW11cbiAgdmFyIGluZGV4ID0gdmFsdWUuaW5kZXhPZignXFxuJylcblxuICB3aGlsZSAoaW5kZXggIT09IC0xKSB7XG4gICAgcmVzdWx0LnB1c2goaW5kZXggKyAxKVxuICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZignXFxuJywgaW5kZXggKyAxKVxuICB9XG5cbiAgcmVzdWx0LnB1c2godmFsdWUubGVuZ3RoICsgMSlcblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcblxuLyogRmFjdG9yeSB0byBkZS1lc2NhcGUgYSB2YWx1ZSwgYmFzZWQgb24gYSBsaXN0IGF0IGBrZXlgXG4gKiBpbiBgY3R4YC4gKi9cbmZ1bmN0aW9uIGZhY3RvcnkoY3R4LCBrZXkpIHtcbiAgcmV0dXJuIHVuZXNjYXBlO1xuXG4gIC8qIERlLWVzY2FwZSBhIHN0cmluZyB1c2luZyB0aGUgZXhwcmVzc2lvbiBhdCBga2V5YFxuICAgKiBpbiBgY3R4YC4gKi9cbiAgZnVuY3Rpb24gdW5lc2NhcGUodmFsdWUpIHtcbiAgICB2YXIgcHJldiA9IDA7XG4gICAgdmFyIGluZGV4ID0gdmFsdWUuaW5kZXhPZignXFxcXCcpO1xuICAgIHZhciBlc2NhcGUgPSBjdHhba2V5XTtcbiAgICB2YXIgcXVldWUgPSBbXTtcbiAgICB2YXIgY2hhcmFjdGVyO1xuXG4gICAgd2hpbGUgKGluZGV4ICE9PSAtMSkge1xuICAgICAgcXVldWUucHVzaCh2YWx1ZS5zbGljZShwcmV2LCBpbmRleCkpO1xuICAgICAgcHJldiA9IGluZGV4ICsgMTtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChwcmV2KTtcblxuICAgICAgLyogSWYgdGhlIGZvbGxvd2luZyBjaGFyYWN0ZXIgaXMgbm90IGEgdmFsaWQgZXNjYXBlLFxuICAgICAgICogYWRkIHRoZSBzbGFzaC4gKi9cbiAgICAgIGlmICghY2hhcmFjdGVyIHx8IGVzY2FwZS5pbmRleE9mKGNoYXJhY3RlcikgPT09IC0xKSB7XG4gICAgICAgIHF1ZXVlLnB1c2goJ1xcXFwnKTtcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXFxcJywgcHJldik7XG4gICAgfVxuXG4gICAgcXVldWUucHVzaCh2YWx1ZS5zbGljZShwcmV2KSk7XG5cbiAgICByZXR1cm4gcXVldWUuam9pbignJyk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcbnZhciBlbnRpdGllcyA9IHJlcXVpcmUoJ3BhcnNlLWVudGl0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcblxuLyogRmFjdG9yeSB0byBjcmVhdGUgYW4gZW50aXR5IGRlY29kZXIuICovXG5mdW5jdGlvbiBmYWN0b3J5KGN0eCkge1xuICBkZWNvZGVyLnJhdyA9IGRlY29kZVJhdztcblxuICByZXR1cm4gZGVjb2RlcjtcblxuICAvKiBOb3JtYWxpemUgYHBvc2l0aW9uYCB0byBhZGQgYW4gYGluZGVudGAuICovXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShwb3NpdGlvbikge1xuICAgIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgICB2YXIgbGluZSA9IHBvc2l0aW9uLmxpbmU7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsrbGluZSkge1xuICAgICAgaWYgKCEobGluZSBpbiBvZmZzZXRzKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVzdWx0LnB1c2goKG9mZnNldHNbbGluZV0gfHwgMCkgKyAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHBvc2l0aW9uLFxuICAgICAgaW5kZW50OiByZXN1bHRcbiAgICB9O1xuICB9XG5cbiAgLyogSGFuZGxlIGEgd2FybmluZy5cbiAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93b29vcm0vcGFyc2UtZW50aXRpZXNcbiAgICogZm9yIHRoZSB3YXJuaW5ncy4gKi9cbiAgZnVuY3Rpb24gaGFuZGxlV2FybmluZyhyZWFzb24sIHBvc2l0aW9uLCBjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdHguZmlsZS5tZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24pO1xuICB9XG5cbiAgLyogRGVjb2RlIGB2YWx1ZWAgKGF0IGBwb3NpdGlvbmApIGludG8gdGV4dC1ub2Rlcy4gKi9cbiAgZnVuY3Rpb24gZGVjb2Rlcih2YWx1ZSwgcG9zaXRpb24sIGhhbmRsZXIpIHtcbiAgICBlbnRpdGllcyh2YWx1ZSwge1xuICAgICAgcG9zaXRpb246IG5vcm1hbGl6ZShwb3NpdGlvbiksXG4gICAgICB3YXJuaW5nOiBoYW5kbGVXYXJuaW5nLFxuICAgICAgdGV4dDogaGFuZGxlcixcbiAgICAgIHJlZmVyZW5jZTogaGFuZGxlcixcbiAgICAgIHRleHRDb250ZXh0OiBjdHgsXG4gICAgICByZWZlcmVuY2VDb250ZXh0OiBjdHhcbiAgICB9KTtcbiAgfVxuXG4gIC8qIERlY29kZSBgdmFsdWVgIChhdCBgcG9zaXRpb25gKSBpbnRvIGEgc3RyaW5nLiAqL1xuICBmdW5jdGlvbiBkZWNvZGVSYXcodmFsdWUsIHBvc2l0aW9uLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGVudGl0aWVzKHZhbHVlLCB4dGVuZChvcHRpb25zLCB7XG4gICAgICBwb3NpdGlvbjogbm9ybWFsaXplKHBvc2l0aW9uKSxcbiAgICAgIHdhcm5pbmc6IGhhbmRsZVdhcm5pbmdcbiAgICB9KSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhleGFkZWNpbWFsXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBoZXhhZGVjaW1hbC5cbmZ1bmN0aW9uIGhleGFkZWNpbWFsKGNoYXJhY3Rlcikge1xuICB2YXIgY29kZSA9IHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdzdHJpbmcnID8gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgOiBjaGFyYWN0ZXJcblxuICByZXR1cm4gKFxuICAgIChjb2RlID49IDk3IC8qIGEgKi8gJiYgY29kZSA8PSAxMDIpIC8qIHogKi8gfHxcbiAgICAoY29kZSA+PSA2NSAvKiBBICovICYmIGNvZGUgPD0gNzApIC8qIFogKi8gfHxcbiAgICAoY29kZSA+PSA0OCAvKiBBICovICYmIGNvZGUgPD0gNTcpIC8qIFogKi9cbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBhbHBoYWJldGljYWwgPSByZXF1aXJlKCdpcy1hbHBoYWJldGljYWwnKVxudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJylcblxubW9kdWxlLmV4cG9ydHMgPSBhbHBoYW51bWVyaWNhbFxuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYWxwaGFudW1lcmljYWwuXG5mdW5jdGlvbiBhbHBoYW51bWVyaWNhbChjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIGFscGhhYmV0aWNhbChjaGFyYWN0ZXIpIHx8IGRlY2ltYWwoY2hhcmFjdGVyKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG52YXIgZWxcblxudmFyIHNlbWljb2xvbiA9IDU5IC8vICAnOydcblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVFbnRpdHlcblxuZnVuY3Rpb24gZGVjb2RlRW50aXR5KGNoYXJhY3RlcnMpIHtcbiAgdmFyIGVudGl0eSA9ICcmJyArIGNoYXJhY3RlcnMgKyAnOydcbiAgdmFyIGNoYXJcblxuICBlbCA9IGVsIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKVxuICBlbC5pbm5lckhUTUwgPSBlbnRpdHlcbiAgY2hhciA9IGVsLnRleHRDb250ZW50XG5cbiAgLy8gU29tZSBlbnRpdGllcyBkbyBub3QgcmVxdWlyZSB0aGUgY2xvc2luZyBzZW1pY29sb24gKGAmbm90YCAtIGZvciBpbnN0YW5jZSksXG4gIC8vIHdoaWNoIGxlYWRzIHRvIHNpdHVhdGlvbnMgd2hlcmUgcGFyc2luZyB0aGUgYXNzdW1lZCBlbnRpdHkgb2YgJm5vdGl0OyB3aWxsXG4gIC8vIHJlc3VsdCBpbiB0aGUgc3RyaW5nIGDCrGl0O2AuICBXaGVuIHdlIGVuY291bnRlciBhIHRyYWlsaW5nIHNlbWljb2xvbiBhZnRlclxuICAvLyBwYXJzaW5nIGFuZCB0aGUgZW50aXR5IHRvIGRlY29kZSB3YXMgbm90IGEgc2VtaWNvbG9uIChgJnNlbWk7YCksIHdlIGNhblxuICAvLyBhc3N1bWUgdGhhdCB0aGUgbWF0Y2hpbmcgd2FzIGluY29tcGxldGVcbiAgaWYgKGNoYXIuY2hhckNvZGVBdChjaGFyLmxlbmd0aCAtIDEpID09PSBzZW1pY29sb24gJiYgY2hhcmFjdGVycyAhPT0gJ3NlbWknKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBJZiB0aGUgZGVjb2RlZCBzdHJpbmcgaXMgZXF1YWwgdG8gdGhlIGlucHV0LCB0aGUgZW50aXR5IHdhcyBub3QgdmFsaWRcbiAgcmV0dXJuIGNoYXIgPT09IGVudGl0eSA/IGZhbHNlIDogY2hhclxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG5cbnZhciBNRVJHRUFCTEVfTk9ERVMgPSB7XG4gIHRleHQ6IG1lcmdlVGV4dCxcbiAgYmxvY2txdW90ZTogbWVyZ2VCbG9ja3F1b3RlXG59O1xuXG4vKiBDaGVjayB3aGV0aGVyIGEgbm9kZSBpcyBtZXJnZWFibGUgd2l0aCBhZGphY2VudCBub2Rlcy4gKi9cbmZ1bmN0aW9uIG1lcmdlYWJsZShub2RlKSB7XG4gIHZhciBzdGFydDtcbiAgdmFyIGVuZDtcblxuICBpZiAobm9kZS50eXBlICE9PSAndGV4dCcgfHwgIW5vZGUucG9zaXRpb24pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXJ0ID0gbm9kZS5wb3NpdGlvbi5zdGFydDtcbiAgZW5kID0gbm9kZS5wb3NpdGlvbi5lbmQ7XG5cbiAgLyogT25seSBtZXJnZSBub2RlcyB3aGljaCBvY2N1cHkgdGhlIHNhbWUgc2l6ZSBhcyB0aGVpclxuICAgKiBgdmFsdWVgLiAqL1xuICByZXR1cm4gc3RhcnQubGluZSAhPT0gZW5kLmxpbmUgfHxcbiAgICAgIGVuZC5jb2x1bW4gLSBzdGFydC5jb2x1bW4gPT09IG5vZGUudmFsdWUubGVuZ3RoO1xufVxuXG4vKiBNZXJnZSB0d28gdGV4dCBub2RlczogYG5vZGVgIGludG8gYHByZXZgLiAqL1xuZnVuY3Rpb24gbWVyZ2VUZXh0KHByZXYsIG5vZGUpIHtcbiAgcHJldi52YWx1ZSArPSBub2RlLnZhbHVlO1xuXG4gIHJldHVybiBwcmV2O1xufVxuXG4vKiBNZXJnZSB0d28gYmxvY2txdW90ZXM6IGBub2RlYCBpbnRvIGBwcmV2YCwgdW5sZXNzIGluXG4gKiBDb21tb25NYXJrIG1vZGUuICovXG5mdW5jdGlvbiBtZXJnZUJsb2NrcXVvdGUocHJldiwgbm9kZSkge1xuICBpZiAodGhpcy5vcHRpb25zLmNvbW1vbm1hcmspIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHByZXYuY2hpbGRyZW4gPSBwcmV2LmNoaWxkcmVuLmNvbmNhdChub2RlLmNoaWxkcmVuKTtcblxuICByZXR1cm4gcHJldjtcbn1cblxuLyogQ29uc3RydWN0IGEgdG9rZW5pemVyLiAgVGhpcyBjcmVhdGVzIGJvdGhcbiAqIGB0b2tlbml6ZUlubGluZWAgYW5kIGB0b2tlbml6ZUJsb2NrYC4gKi9cbmZ1bmN0aW9uIGZhY3RvcnkodHlwZSkge1xuICByZXR1cm4gdG9rZW5pemU7XG5cbiAgLyogVG9rZW5pemVyIGZvciBhIGJvdW5kIGB0eXBlYC4gKi9cbiAgZnVuY3Rpb24gdG9rZW5pemUodmFsdWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBvZmZzZXQgPSBzZWxmLm9mZnNldDtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgdmFyIG1ldGhvZHMgPSBzZWxmW3R5cGUgKyAnTWV0aG9kcyddO1xuICAgIHZhciB0b2tlbml6ZXJzID0gc2VsZlt0eXBlICsgJ1Rva2VuaXplcnMnXTtcbiAgICB2YXIgbGluZSA9IGxvY2F0aW9uLmxpbmU7XG4gICAgdmFyIGNvbHVtbiA9IGxvY2F0aW9uLmNvbHVtbjtcbiAgICB2YXIgaW5kZXg7XG4gICAgdmFyIGxlbmd0aDtcbiAgICB2YXIgbWV0aG9kO1xuICAgIHZhciBuYW1lO1xuICAgIHZhciBtYXRjaGVkO1xuICAgIHZhciB2YWx1ZUxlbmd0aDtcblxuICAgIC8qIFRyaW0gd2hpdGUgc3BhY2Ugb25seSBsaW5lcy4gKi9cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cblxuICAgIC8qIEV4cG9zZSBvbiBgZWF0YC4gKi9cbiAgICBlYXQubm93ID0gbm93O1xuICAgIGVhdC5maWxlID0gc2VsZi5maWxlO1xuXG4gICAgLyogU3luYyBpbml0aWFsIG9mZnNldC4gKi9cbiAgICB1cGRhdGVQb3NpdGlvbignJyk7XG5cbiAgICAvKiBJdGVyYXRlIG92ZXIgYHZhbHVlYCwgYW5kIGl0ZXJhdGUgb3ZlciBhbGxcbiAgICAgKiB0b2tlbml6ZXJzLiAgV2hlbiBvbmUgZWF0cyBzb21ldGhpbmcsIHJlLWl0ZXJhdGVcbiAgICAgKiB3aXRoIHRoZSByZW1haW5pbmcgdmFsdWUuICBJZiBubyB0b2tlbml6ZXIgZWF0cyxcbiAgICAgKiBzb21ldGhpbmcgZmFpbGVkIChzaG91bGQgbm90IGhhcHBlbikgYW5kIGFuXG4gICAgICogZXhjZXB0aW9uIGlzIHRocm93bi4gKi9cbiAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgIGluZGV4ID0gLTE7XG4gICAgICBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDtcbiAgICAgIG1hdGNoZWQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgbmFtZSA9IG1ldGhvZHNbaW5kZXhdO1xuICAgICAgICBtZXRob2QgPSB0b2tlbml6ZXJzW25hbWVdO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBtZXRob2QgJiZcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoIW1ldGhvZC5vbmx5QXRTdGFydCB8fCBzZWxmLmF0U3RhcnQpICYmXG4gICAgICAgICAgKCFtZXRob2Qubm90SW5MaXN0IHx8ICFzZWxmLmluTGlzdCkgJiZcbiAgICAgICAgICAoIW1ldGhvZC5ub3RJbkJsb2NrIHx8ICFzZWxmLmluQmxvY2spICYmXG4gICAgICAgICAgKCFtZXRob2Qubm90SW5MaW5rIHx8ICFzZWxmLmluTGluaylcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICBtZXRob2QuYXBwbHkoc2VsZiwgW2VhdCwgdmFsdWVdKTtcblxuICAgICAgICAgIG1hdGNoZWQgPSB2YWx1ZUxlbmd0aCAhPT0gdmFsdWUubGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgICBzZWxmLmZpbGUuZmFpbChuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3AnKSwgZWF0Lm5vdygpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmLmVvZiA9IG5vdygpO1xuXG4gICAgcmV0dXJuIHRva2VucztcblxuICAgIC8qIFVwZGF0ZSBsaW5lLCBjb2x1bW4sIGFuZCBvZmZzZXQgYmFzZWQgb25cbiAgICAgKiBgdmFsdWVgLiAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKHN1YnZhbHVlKSB7XG4gICAgICB2YXIgbGFzdEluZGV4ID0gLTE7XG4gICAgICB2YXIgaW5kZXggPSBzdWJ2YWx1ZS5pbmRleE9mKCdcXG4nKTtcblxuICAgICAgd2hpbGUgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBsaW5lKys7XG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICBpbmRleCA9IHN1YnZhbHVlLmluZGV4T2YoJ1xcbicsIGluZGV4ICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXN0SW5kZXggPT09IC0xKSB7XG4gICAgICAgIGNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2x1bW4gPSBzdWJ2YWx1ZS5sZW5ndGggLSBsYXN0SW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaW5lIGluIG9mZnNldCkge1xuICAgICAgICBpZiAobGFzdEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIGNvbHVtbiArPSBvZmZzZXRbbGluZV07XG4gICAgICAgIH0gZWxzZSBpZiAoY29sdW1uIDw9IG9mZnNldFtsaW5lXSkge1xuICAgICAgICAgIGNvbHVtbiA9IG9mZnNldFtsaW5lXSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBHZXQgb2Zmc2V0LiAgQ2FsbGVkIGJlZm9yZSB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzXG4gICAgICogZWF0ZW4gdG8gcmV0cmlldmUgdGhlIHJhbmdlJ3Mgb2Zmc2V0cy4gKi9cbiAgICBmdW5jdGlvbiBnZXRPZmZzZXQoKSB7XG4gICAgICB2YXIgaW5kZW50YXRpb24gPSBbXTtcbiAgICAgIHZhciBwb3MgPSBsaW5lICsgMTtcblxuICAgICAgLyogRG9uZS4gIENhbGxlZCB3aGVuIHRoZSBsYXN0IGNoYXJhY3RlciBpc1xuICAgICAgICogZWF0ZW4gdG8gcmV0cmlldmUgdGhlIHJhbmdl4oCZcyBvZmZzZXRzLiAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxhc3QgPSBsaW5lICsgMTtcblxuICAgICAgICB3aGlsZSAocG9zIDwgbGFzdCkge1xuICAgICAgICAgIGluZGVudGF0aW9uLnB1c2goKG9mZnNldFtwb3NdIHx8IDApICsgMSk7XG5cbiAgICAgICAgICBwb3MrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRlbnRhdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyogR2V0IHRoZSBjdXJyZW50IHBvc2l0aW9uLiAqL1xuICAgIGZ1bmN0aW9uIG5vdygpIHtcbiAgICAgIHZhciBwb3MgPSB7bGluZTogbGluZSwgY29sdW1uOiBjb2x1bW59O1xuXG4gICAgICBwb3Mub2Zmc2V0ID0gc2VsZi50b09mZnNldChwb3MpO1xuXG4gICAgICByZXR1cm4gcG9zO1xuICAgIH1cblxuICAgIC8qIFN0b3JlIHBvc2l0aW9uIGluZm9ybWF0aW9uIGZvciBhIG5vZGUuICovXG4gICAgZnVuY3Rpb24gUG9zaXRpb24oc3RhcnQpIHtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gbm93KCk7XG4gICAgfVxuXG4gICAgLyogVGhyb3cgd2hlbiBhIHZhbHVlIGlzIGluY29ycmVjdGx5IGVhdGVuLlxuICAgICAqIFRoaXMgc2hvdWxkbuKAmXQgaGFwcGVuIGJ1dCB3aWxsIHRocm93IG9uIG5ldyxcbiAgICAgKiBpbmNvcnJlY3QgcnVsZXMuICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVFYXQoc3VidmFsdWUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHZhbHVlLnN1YnN0cmluZygwLCBzdWJ2YWx1ZS5sZW5ndGgpICE9PSBzdWJ2YWx1ZSkge1xuICAgICAgICAvKiBDYXB0dXJlIHN0YWNrLXRyYWNlLiAqL1xuICAgICAgICBzZWxmLmZpbGUuZmFpbChcbiAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnSW5jb3JyZWN0bHkgZWF0ZW4gdmFsdWU6IHBsZWFzZSByZXBvcnQgdGhpcyAnICtcbiAgICAgICAgICAgICd3YXJuaW5nIG9uIGh0dHA6Ly9naXQuaW8vdmc1RnQnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBub3coKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIE1hcmsgcG9zaXRpb24gYW5kIHBhdGNoIGBub2RlLnBvc2l0aW9uYC4gKi9cbiAgICBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICAgIHZhciBiZWZvcmUgPSBub3coKTtcblxuICAgICAgcmV0dXJuIHVwZGF0ZTtcblxuICAgICAgLyogQWRkIHRoZSBwb3NpdGlvbiB0byBhIG5vZGUuICovXG4gICAgICBmdW5jdGlvbiB1cGRhdGUobm9kZSwgaW5kZW50KSB7XG4gICAgICAgIHZhciBwcmV2ID0gbm9kZS5wb3NpdGlvbjtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcHJldiA/IHByZXYuc3RhcnQgOiBiZWZvcmU7XG4gICAgICAgIHZhciBjb21iaW5lZCA9IFtdO1xuICAgICAgICB2YXIgbiA9IHByZXYgJiYgcHJldi5lbmQubGluZTtcbiAgICAgICAgdmFyIGwgPSBiZWZvcmUubGluZTtcblxuICAgICAgICBub2RlLnBvc2l0aW9uID0gbmV3IFBvc2l0aW9uKHN0YXJ0KTtcblxuICAgICAgICAvKiBJZiB0aGVyZSB3YXMgYWxyZWFkeSBhIGBwb3NpdGlvbmAsIHRoaXNcbiAgICAgICAgICogbm9kZSB3YXMgbWVyZ2VkLiAgRml4aW5nIGBzdGFydGAgd2FzbuKAmXRcbiAgICAgICAgICogaGFyZCwgYnV0IHRoZSBpbmRlbnQgaXMgZGlmZmVyZW50LlxuICAgICAgICAgKiBFc3BlY2lhbGx5IGJlY2F1c2Ugc29tZSBpbmZvcm1hdGlvbiwgdGhlXG4gICAgICAgICAqIGluZGVudCBiZXR3ZWVuIGBuYCBhbmQgYGxgIHdhc27igJl0XG4gICAgICAgICAqIHRyYWNrZWQuICBMdWNraWx5LCB0aGF0IHNwYWNlIGlzXG4gICAgICAgICAqIChzaG91bGQgYmU/KSBlbXB0eSwgc28gd2UgY2FuIHNhZmVseVxuICAgICAgICAgKiBjaGVjayBmb3IgaXQgbm93LiAqL1xuICAgICAgICBpZiAocHJldiAmJiBpbmRlbnQgJiYgcHJldi5pbmRlbnQpIHtcbiAgICAgICAgICBjb21iaW5lZCA9IHByZXYuaW5kZW50O1xuXG4gICAgICAgICAgaWYgKG4gPCBsKSB7XG4gICAgICAgICAgICB3aGlsZSAoKytuIDwgbCkge1xuICAgICAgICAgICAgICBjb21iaW5lZC5wdXNoKChvZmZzZXRbbl0gfHwgMCkgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tYmluZWQucHVzaChiZWZvcmUuY29sdW1uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmRlbnQgPSBjb21iaW5lZC5jb25jYXQoaW5kZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUucG9zaXRpb24uaW5kZW50ID0gaW5kZW50IHx8IFtdO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEFkZCBgbm9kZWAgdG8gYHBhcmVudGBzIGNoaWxkcmVuIG9yIHRvIGB0b2tlbnNgLlxuICAgICAqIFBlcmZvcm1zIG1lcmdlcyB3aGVyZSBwb3NzaWJsZS4gKi9cbiAgICBmdW5jdGlvbiBhZGQobm9kZSwgcGFyZW50KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4gOiB0b2tlbnM7XG4gICAgICB2YXIgcHJldiA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHByZXYgJiZcbiAgICAgICAgbm9kZS50eXBlID09PSBwcmV2LnR5cGUgJiZcbiAgICAgICAgbm9kZS50eXBlIGluIE1FUkdFQUJMRV9OT0RFUyAmJlxuICAgICAgICBtZXJnZWFibGUocHJldikgJiZcbiAgICAgICAgbWVyZ2VhYmxlKG5vZGUpXG4gICAgICApIHtcbiAgICAgICAgbm9kZSA9IE1FUkdFQUJMRV9OT0RFU1tub2RlLnR5cGVdLmNhbGwoc2VsZiwgcHJldiwgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlICE9PSBwcmV2KSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmF0U3RhcnQgJiYgdG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBzZWxmLmV4aXRTdGFydCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvKiBSZW1vdmUgYHN1YnZhbHVlYCBmcm9tIGB2YWx1ZWAuXG4gICAgICogYHN1YnZhbHVlYCBtdXN0IGJlIGF0IHRoZSBzdGFydCBvZiBgdmFsdWVgLiAqL1xuICAgIGZ1bmN0aW9uIGVhdChzdWJ2YWx1ZSkge1xuICAgICAgdmFyIGluZGVudCA9IGdldE9mZnNldCgpO1xuICAgICAgdmFyIHBvcyA9IHBvc2l0aW9uKCk7XG4gICAgICB2YXIgY3VycmVudCA9IG5vdygpO1xuXG4gICAgICB2YWxpZGF0ZUVhdChzdWJ2YWx1ZSk7XG5cbiAgICAgIGFwcGx5LnJlc2V0ID0gcmVzZXQ7XG4gICAgICByZXNldC50ZXN0ID0gdGVzdDtcbiAgICAgIGFwcGx5LnRlc3QgPSB0ZXN0O1xuXG4gICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyhzdWJ2YWx1ZS5sZW5ndGgpO1xuXG4gICAgICB1cGRhdGVQb3NpdGlvbihzdWJ2YWx1ZSk7XG5cbiAgICAgIGluZGVudCA9IGluZGVudCgpO1xuXG4gICAgICByZXR1cm4gYXBwbHk7XG5cbiAgICAgIC8qIEFkZCB0aGUgZ2l2ZW4gYXJndW1lbnRzLCBhZGQgYHBvc2l0aW9uYCB0b1xuICAgICAgICogdGhlIHJldHVybmVkIG5vZGUsIGFuZCByZXR1cm4gdGhlIG5vZGUuICovXG4gICAgICBmdW5jdGlvbiBhcHBseShub2RlLCBwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHBvcyhhZGQocG9zKG5vZGUpLCBwYXJlbnQpLCBpbmRlbnQpO1xuICAgICAgfVxuXG4gICAgICAvKiBGdW5jdGlvbnMganVzdCBsaWtlIGFwcGx5LCBidXQgcmVzZXRzIHRoZVxuICAgICAgICogY29udGVudDogIHRoZSBsaW5lIGFuZCBjb2x1bW4gYXJlIHJldmVyc2VkLFxuICAgICAgICogYW5kIHRoZSBlYXRlbiB2YWx1ZSBpcyByZS1hZGRlZC5cbiAgICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciBub2RlcyB3aXRoIGEgc2luZ2xlXG4gICAgICAgKiB0eXBlIG9mIGNvbnRlbnQsIHN1Y2ggYXMgbGlzdHMgYW5kIHRhYmxlcy5cbiAgICAgICAqIFNlZSBgYXBwbHlgIGFib3ZlIGZvciB3aGF0IHBhcmFtZXRlcnMgYXJlXG4gICAgICAgKiBleHBlY3RlZC4gKi9cbiAgICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICB2YXIgbm9kZSA9IGFwcGx5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgbGluZSA9IGN1cnJlbnQubGluZTtcbiAgICAgICAgY29sdW1uID0gY3VycmVudC5jb2x1bW47XG4gICAgICAgIHZhbHVlID0gc3VidmFsdWUgKyB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cblxuICAgICAgLyogVGVzdCB0aGUgcG9zaXRpb24sIGFmdGVyIGVhdGluZywgYW5kIHJldmVyc2VcbiAgICAgICAqIHRvIGEgbm90LWVhdGVuIHN0YXRlLiAqL1xuICAgICAgZnVuY3Rpb24gdGVzdCgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBvcyh7fSk7XG5cbiAgICAgICAgbGluZSA9IGN1cnJlbnQubGluZTtcbiAgICAgICAgY29sdW1uID0gY3VycmVudC5jb2x1bW47XG4gICAgICAgIHZhbHVlID0gc3VidmFsdWUgKyB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0LnBvc2l0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIGVzY2FwZXMgPSByZXF1aXJlKCdtYXJrZG93bi1lc2NhcGVzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0T3B0aW9ucztcblxuZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGN1cnJlbnQgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBrZXk7XG4gIHZhciB2YWx1ZTtcblxuICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSB4dGVuZChvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnSW52YWxpZCB2YWx1ZSBgJyArIG9wdGlvbnMgKyAnYCAnICtcbiAgICAgICdmb3Igc2V0dGluZyBgb3B0aW9uc2AnXG4gICAgKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGRlZmF1bHRzKSB7XG4gICAgdmFsdWUgPSBvcHRpb25zW2tleV07XG5cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSBjdXJyZW50W2tleV07XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgKGtleSAhPT0gJ2Jsb2NrcycgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpIHx8XG4gICAgICAoa2V5ID09PSAnYmxvY2tzJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGAnICsgdmFsdWUgKyAnYCBmb3Igc2V0dGluZyBgb3B0aW9ucy4nICsga2V5ICsgJ2AnKTtcbiAgICB9XG5cbiAgICBvcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHNlbGYub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHNlbGYuZXNjYXBlID0gZXNjYXBlcyhvcHRpb25zKTtcblxuICByZXR1cm4gc2VsZjtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZXNcblxudmFyIGRlZmF1bHRzID0gW1xuICAnXFxcXCcsXG4gICdgJyxcbiAgJyonLFxuICAneycsXG4gICd9JyxcbiAgJ1snLFxuICAnXScsXG4gICcoJyxcbiAgJyknLFxuICAnIycsXG4gICcrJyxcbiAgJy0nLFxuICAnLicsXG4gICchJyxcbiAgJ18nLFxuICAnPidcbl1cblxudmFyIGdmbSA9IGRlZmF1bHRzLmNvbmNhdChbJ34nLCAnfCddKVxuXG52YXIgY29tbW9ubWFyayA9IGdmbS5jb25jYXQoW1xuICAnXFxuJyxcbiAgJ1wiJyxcbiAgJyQnLFxuICAnJScsXG4gICcmJyxcbiAgXCInXCIsXG4gICcsJyxcbiAgJy8nLFxuICAnOicsXG4gICc7JyxcbiAgJzwnLFxuICAnPScsXG4gICc/JyxcbiAgJ0AnLFxuICAnXidcbl0pXG5cbmVzY2FwZXMuZGVmYXVsdCA9IGRlZmF1bHRzXG5lc2NhcGVzLmdmbSA9IGdmbVxuZXNjYXBlcy5jb21tb25tYXJrID0gY29tbW9ubWFya1xuXG4vLyBHZXQgbWFya2Rvd24gZXNjYXBlcy5cbmZ1bmN0aW9uIGVzY2FwZXMob3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHNldHRpbmdzLmNvbW1vbm1hcmspIHtcbiAgICByZXR1cm4gY29tbW9ubWFya1xuICB9XG5cbiAgcmV0dXJuIHNldHRpbmdzLmdmbSA/IGdmbSA6IGRlZmF1bHRzXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG52YXIgcmVtb3ZlUG9zaXRpb24gPSByZXF1aXJlKCd1bmlzdC11dGlsLXJlbW92ZS1wb3NpdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgRVhQUkVTU0lPTl9MSU5FX0JSRUFLUyA9IC9cXHJcXG58XFxyL2c7XG5cbi8qIFBhcnNlIHRoZSBib3VuZCBmaWxlLiAqL1xuZnVuY3Rpb24gcGFyc2UoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHZhbHVlID0gU3RyaW5nKHNlbGYuZmlsZSk7XG4gIHZhciBzdGFydCA9IHtsaW5lOiAxLCBjb2x1bW46IDEsIG9mZnNldDogMH07XG4gIHZhciBjb250ZW50ID0geHRlbmQoc3RhcnQpO1xuICB2YXIgbm9kZTtcblxuICAvKiBDbGVhbiBub24tdW5peCBuZXdsaW5lczogYFxcclxcbmAgYW5kIGBcXHJgIGFyZSBhbGxcbiAgICogY2hhbmdlZCB0byBgXFxuYC4gIFRoaXMgc2hvdWxkIG5vdCBhZmZlY3QgcG9zaXRpb25hbFxuICAgKiBpbmZvcm1hdGlvbi4gKi9cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fTElORV9CUkVBS1MsIENfTkVXTElORSk7XG5cbiAgaWYgKHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG5cbiAgICBjb250ZW50LmNvbHVtbisrO1xuICAgIGNvbnRlbnQub2Zmc2V0Kys7XG4gIH1cblxuICBub2RlID0ge1xuICAgIHR5cGU6ICdyb290JyxcbiAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUJsb2NrKHZhbHVlLCBjb250ZW50KSxcbiAgICBwb3NpdGlvbjoge1xuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgZW5kOiBzZWxmLmVvZiB8fCB4dGVuZChzdGFydClcbiAgICB9XG4gIH07XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMucG9zaXRpb24pIHtcbiAgICByZW1vdmVQb3NpdGlvbihub2RlLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB2aXNpdCA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZVBvc2l0aW9uXG5cbmZ1bmN0aW9uIHJlbW92ZVBvc2l0aW9uKG5vZGUsIGZvcmNlKSB7XG4gIHZpc2l0KG5vZGUsIGZvcmNlID8gaGFyZCA6IHNvZnQpXG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIGhhcmQobm9kZSkge1xuICBkZWxldGUgbm9kZS5wb3NpdGlvblxufVxuXG5mdW5jdGlvbiBzb2Z0KG5vZGUpIHtcbiAgbm9kZS5wb3NpdGlvbiA9IHVuZGVmaW5lZFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRQYXJlbnRzXG5cbnZhciBjb252ZXJ0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC1pcy9jb252ZXJ0JylcblxudmFyIENPTlRJTlVFID0gdHJ1ZVxudmFyIFNLSVAgPSAnc2tpcCdcbnZhciBFWElUID0gZmFsc2VcblxudmlzaXRQYXJlbnRzLkNPTlRJTlVFID0gQ09OVElOVUVcbnZpc2l0UGFyZW50cy5TS0lQID0gU0tJUFxudmlzaXRQYXJlbnRzLkVYSVQgPSBFWElUXG5cbmZ1bmN0aW9uIHZpc2l0UGFyZW50cyh0cmVlLCB0ZXN0LCB2aXNpdG9yLCByZXZlcnNlKSB7XG4gIHZhciBpc1xuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmlzaXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldmVyc2UgPSB2aXNpdG9yXG4gICAgdmlzaXRvciA9IHRlc3RcbiAgICB0ZXN0ID0gbnVsbFxuICB9XG5cbiAgaXMgPSBjb252ZXJ0KHRlc3QpXG5cbiAgb25lKHRyZWUsIG51bGwsIFtdKVxuXG4gIC8vIFZpc2l0IGEgc2luZ2xlIG5vZGUuXG4gIGZ1bmN0aW9uIG9uZShub2RlLCBpbmRleCwgcGFyZW50cykge1xuICAgIHZhciByZXN1bHQgPSBbXVxuICAgIHZhciBzdWJyZXN1bHRcblxuICAgIGlmICghdGVzdCB8fCBpcyhub2RlLCBpbmRleCwgcGFyZW50c1twYXJlbnRzLmxlbmd0aCAtIDFdIHx8IG51bGwpKSB7XG4gICAgICByZXN1bHQgPSB0b1Jlc3VsdCh2aXNpdG9yKG5vZGUsIHBhcmVudHMpKVxuXG4gICAgICBpZiAocmVzdWx0WzBdID09PSBFWElUKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiByZXN1bHRbMF0gIT09IFNLSVApIHtcbiAgICAgIHN1YnJlc3VsdCA9IHRvUmVzdWx0KGFsbChub2RlLmNoaWxkcmVuLCBwYXJlbnRzLmNvbmNhdChub2RlKSkpXG4gICAgICByZXR1cm4gc3VicmVzdWx0WzBdID09PSBFWElUID8gc3VicmVzdWx0IDogcmVzdWx0XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gVmlzaXQgY2hpbGRyZW4gaW4gYHBhcmVudGAuXG4gIGZ1bmN0aW9uIGFsbChjaGlsZHJlbiwgcGFyZW50cykge1xuICAgIHZhciBtaW4gPSAtMVxuICAgIHZhciBzdGVwID0gcmV2ZXJzZSA/IC0xIDogMVxuICAgIHZhciBpbmRleCA9IChyZXZlcnNlID8gY2hpbGRyZW4ubGVuZ3RoIDogbWluKSArIHN0ZXBcbiAgICB2YXIgcmVzdWx0XG5cbiAgICB3aGlsZSAoaW5kZXggPiBtaW4gJiYgaW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IG9uZShjaGlsZHJlbltpbmRleF0sIGluZGV4LCBwYXJlbnRzKVxuXG4gICAgICBpZiAocmVzdWx0WzBdID09PSBFWElUKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSB0eXBlb2YgcmVzdWx0WzFdID09PSAnbnVtYmVyJyA/IHJlc3VsdFsxXSA6IGluZGV4ICsgc3RlcFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0b1Jlc3VsdCh2YWx1ZSkge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gW0NPTlRJTlVFLCB2YWx1ZV1cbiAgfVxuXG4gIHJldHVybiBbdmFsdWVdXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0XG5cbmZ1bmN0aW9uIGNvbnZlcnQodGVzdCkge1xuICBpZiAodHlwZW9mIHRlc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHR5cGVGYWN0b3J5KHRlc3QpXG4gIH1cblxuICBpZiAodGVzdCA9PT0gbnVsbCB8fCB0ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gb2tcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gKCdsZW5ndGgnIGluIHRlc3QgPyBhbnlGYWN0b3J5IDogbWF0Y2hlc0ZhY3RvcnkpKHRlc3QpXG4gIH1cblxuICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGVzdFxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbiwgc3RyaW5nLCBvciBvYmplY3QgYXMgdGVzdCcpXG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRBbGwodGVzdHMpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXVxuICB2YXIgbGVuZ3RoID0gdGVzdHMubGVuZ3RoXG4gIHZhciBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRzW2luZGV4XSA9IGNvbnZlcnQodGVzdHNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHNcbn1cblxuLy8gVXRpbGl0eSBhc3NlcnQgZWFjaCBwcm9wZXJ0eSBpbiBgdGVzdGAgaXMgcmVwcmVzZW50ZWQgaW4gYG5vZGVgLCBhbmQgZWFjaFxuLy8gdmFsdWVzIGFyZSBzdHJpY3RseSBlcXVhbC5cbmZ1bmN0aW9uIG1hdGNoZXNGYWN0b3J5KHRlc3QpIHtcbiAgcmV0dXJuIG1hdGNoZXNcblxuICBmdW5jdGlvbiBtYXRjaGVzKG5vZGUpIHtcbiAgICB2YXIga2V5XG5cbiAgICBmb3IgKGtleSBpbiB0ZXN0KSB7XG4gICAgICBpZiAobm9kZVtrZXldICE9PSB0ZXN0W2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBhbnlGYWN0b3J5KHRlc3RzKSB7XG4gIHZhciBjaGVja3MgPSBjb252ZXJ0QWxsKHRlc3RzKVxuICB2YXIgbGVuZ3RoID0gY2hlY2tzLmxlbmd0aFxuXG4gIHJldHVybiBtYXRjaGVzXG5cbiAgZnVuY3Rpb24gbWF0Y2hlcygpIHtcbiAgICB2YXIgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjaGVja3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vLyBVdGlsaXR5IHRvIGNvbnZlcnQgYSBzdHJpbmcgaW50byBhIGZ1bmN0aW9uIHdoaWNoIGNoZWNrcyBhIGdpdmVuIG5vZGXigJlzIHR5cGVcbi8vIGZvciBzYWlkIHN0cmluZy5cbmZ1bmN0aW9uIHR5cGVGYWN0b3J5KHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVcblxuICBmdW5jdGlvbiB0eXBlKG5vZGUpIHtcbiAgICByZXR1cm4gQm9vbGVhbihub2RlICYmIG5vZGUudHlwZSA9PT0gdGVzdClcbiAgfVxufVxuXG4vLyBVdGlsaXR5IHRvIHJldHVybiB0cnVlLlxuZnVuY3Rpb24gb2soKSB7XG4gIHJldHVybiB0cnVlXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXdsaW5lO1xuXG4vKiBUb2tlbmlzZSBuZXdsaW5lLiAqL1xuZnVuY3Rpb24gbmV3bGluZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgwKTtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgcXVldWU7XG4gIHZhciBpbmRleDtcblxuICBpZiAoY2hhcmFjdGVyICE9PSAnXFxuJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5kZXggPSAxO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgZWF0KHN1YnZhbHVlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgndHJpbS10cmFpbGluZy1saW5lcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGVudGVkQ29kZTtcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcblxudmFyIENPREVfSU5ERU5UX0NPVU5UID0gNDtcbnZhciBDT0RFX0lOREVOVCA9IHJlcGVhdChDX1NQQUNFLCBDT0RFX0lOREVOVF9DT1VOVCk7XG5cbi8qIFRva2VuaXNlIGluZGVudGVkIGNvZGUuICovXG5mdW5jdGlvbiBpbmRlbnRlZENvZGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGNvbnRlbnQgPSAnJztcbiAgdmFyIHN1YnZhbHVlUXVldWUgPSAnJztcbiAgdmFyIGNvbnRlbnRRdWV1ZSA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgYmxhbmtRdWV1ZTtcbiAgdmFyIGluZGVudDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoaW5kZW50KSB7XG4gICAgICBpbmRlbnQgPSBmYWxzZTtcblxuICAgICAgc3VidmFsdWUgKz0gc3VidmFsdWVRdWV1ZTtcbiAgICAgIGNvbnRlbnQgKz0gY29udGVudFF1ZXVlO1xuICAgICAgc3VidmFsdWVRdWV1ZSA9ICcnO1xuICAgICAgY29udGVudFF1ZXVlID0gJyc7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgICBzdWJ2YWx1ZVF1ZXVlID0gY2hhcmFjdGVyO1xuICAgICAgICBjb250ZW50UXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICAgIGlmICghY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICAgICAgICBjb250ZW50UXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgICBzdWJ2YWx1ZVF1ZXVlID0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19TUEFDRSAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IGNoYXJhY3RlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMikgPT09IGNoYXJhY3RlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMykgPT09IGNoYXJhY3RlclxuICAgICkge1xuICAgICAgc3VidmFsdWVRdWV1ZSArPSBDT0RFX0lOREVOVDtcbiAgICAgIGluZGV4ICs9IDM7XG4gICAgICBpbmRlbnQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgc3VidmFsdWVRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRlbnQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBibGFua1F1ZXVlID0gJyc7XG5cbiAgICAgIHdoaWxlIChjaGFyYWN0ZXIgPT09IENfVEFCIHx8IGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICBibGFua1F1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN1YnZhbHVlUXVldWUgKz0gYmxhbmtRdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIGNvbnRlbnRRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbnRlbnQpIHtcbiAgICBpZiAoc2lsZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgICB0eXBlOiAnY29kZScsXG4gICAgICBsYW5nOiBudWxsLFxuICAgICAgdmFsdWU6IHRyaW0oY29udGVudClcbiAgICB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0tdHJhaWxpbmctbGluZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmZW5jZWRDb2RlO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfVElMREUgPSAnfic7XG52YXIgQ19USUNLID0gJ2AnO1xuXG52YXIgTUlOX0ZFTkNFX0NPVU5UID0gMztcbnZhciBDT0RFX0lOREVOVF9DT1VOVCA9IDQ7XG5cbmZ1bmN0aW9uIGZlbmNlZENvZGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBmZW5jZUNvdW50O1xuICB2YXIgbWFya2VyO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgZmxhZztcbiAgdmFyIHF1ZXVlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIGV4ZGVudGVkQ29udGVudDtcbiAgdmFyIGNsb3Npbmc7XG4gIHZhciBleGRlbnRlZENsb3Npbmc7XG4gIHZhciBpbmRlbnQ7XG4gIHZhciBub3c7XG5cbiAgaWYgKCFzZXR0aW5ncy5nZm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBFYXQgaW5pdGlhbCBzcGFjaW5nLiAqL1xuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGluZGVudCA9IGluZGV4O1xuXG4gIC8qIEVhdCB0aGUgZmVuY2UuICovXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19USUxERSAmJiBjaGFyYWN0ZXIgIT09IENfVElDSykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgZmVuY2VDb3VudCA9IDE7XG4gIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgZmVuY2VDb3VudCsrO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoZmVuY2VDb3VudCA8IE1JTl9GRU5DRV9DT1VOVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEVhdCBzcGFjaW5nIGJlZm9yZSBmbGFnLiAqL1xuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIC8qIEVhdCBmbGFnLiAqL1xuICBmbGFnID0gJyc7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IENfVElMREUgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19USUNLXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFIHx8IGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZmxhZyArPSBxdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAmJiBjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoO1xuXG4gIHN1YnZhbHVlICs9IGZsYWc7XG4gIGZsYWcgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZShmbGFnKSwgbm93KTtcblxuICBpZiAocXVldWUpIHtcbiAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgfVxuXG4gIHF1ZXVlID0gJyc7XG4gIGNsb3NpbmcgPSAnJztcbiAgZXhkZW50ZWRDbG9zaW5nID0gJyc7XG4gIGNvbnRlbnQgPSAnJztcbiAgZXhkZW50ZWRDb250ZW50ID0gJyc7XG5cbiAgLyogRWF0IGNvbnRlbnQuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgY29udGVudCArPSBjbG9zaW5nO1xuICAgIGV4ZGVudGVkQ29udGVudCArPSBleGRlbnRlZENsb3Npbmc7XG4gICAgY2xvc2luZyA9ICcnO1xuICAgIGV4ZGVudGVkQ2xvc2luZyA9ICcnO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FKSB7XG4gICAgICBjb250ZW50ICs9IGNoYXJhY3RlcjtcbiAgICAgIGV4ZGVudGVkQ2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyogQWRkIHRoZSBuZXdsaW5lIHRvIGBzdWJ2YWx1ZWAgaWYgaXRzIHRoZSBmaXJzdFxuICAgICAqIGNoYXJhY3Rlci4gIE90aGVyd2lzZSwgYWRkIGl0IHRvIHRoZSBgY2xvc2luZ2BcbiAgICAgKiBxdWV1ZS4gKi9cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgY2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBleGRlbnRlZENsb3NpbmcgKz0gY2hhcmFjdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfVxuXG4gICAgcXVldWUgPSAnJztcbiAgICBpbmRleCsrO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNsb3NpbmcgKz0gcXVldWU7XG4gICAgZXhkZW50ZWRDbG9zaW5nICs9IHF1ZXVlLnNsaWNlKGluZGVudCk7XG5cbiAgICBpZiAocXVldWUubGVuZ3RoID49IENPREVfSU5ERU5UX0NPVU5UKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgY2xvc2luZyArPSBxdWV1ZTtcbiAgICBleGRlbnRlZENsb3NpbmcgKz0gcXVldWU7XG5cbiAgICBpZiAocXVldWUubGVuZ3RoIDwgZmVuY2VDb3VudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcXVldWUgPSAnJztcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGV4ZGVudGVkQ2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGlmICghY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBjb250ZW50ICsgY2xvc2luZztcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2NvZGUnLFxuICAgIGxhbmc6IGZsYWcgfHwgbnVsbCxcbiAgICB2YWx1ZTogdHJpbShleGRlbnRlZENvbnRlbnQpXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciBpbnRlcnJ1cHQgPSByZXF1aXJlKCcuLi91dGlsL2ludGVycnVwdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJsb2NrcXVvdGU7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19HVCA9ICc+JztcblxuLyogVG9rZW5pc2UgYSBibG9ja3F1b3RlLiAqL1xuZnVuY3Rpb24gYmxvY2txdW90ZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgb2Zmc2V0cyA9IHNlbGYub2Zmc2V0O1xuICB2YXIgdG9rZW5pemVycyA9IHNlbGYuYmxvY2tUb2tlbml6ZXJzO1xuICB2YXIgaW50ZXJydXB0b3JzID0gc2VsZi5pbnRlcnJ1cHRCbG9ja3F1b3RlO1xuICB2YXIgbm93ID0gZWF0Lm5vdygpO1xuICB2YXIgY3VycmVudExpbmUgPSBub3cubGluZTtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHZhbHVlcyA9IFtdO1xuICB2YXIgY29udGVudHMgPSBbXTtcbiAgdmFyIGluZGVudHMgPSBbXTtcbiAgdmFyIGFkZDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHJlc3Q7XG4gIHZhciBuZXh0SW5kZXg7XG4gIHZhciBjb250ZW50O1xuICB2YXIgbGluZTtcbiAgdmFyIHN0YXJ0SW5kZXg7XG4gIHZhciBwcmVmaXhlZDtcbiAgdmFyIGV4aXQ7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX0dUKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5kZXggPSAwO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIG5leHRJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCk7XG4gICAgc3RhcnRJbmRleCA9IGluZGV4O1xuICAgIHByZWZpeGVkID0gZmFsc2U7XG5cbiAgICBpZiAobmV4dEluZGV4ID09PSAtMSkge1xuICAgICAgbmV4dEluZGV4ID0gbGVuZ3RoO1xuICAgIH1cblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpID09PSBDX0dUKSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgcHJlZml4ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSA9PT0gQ19TUEFDRSkge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgfVxuXG4gICAgY29udGVudCA9IHZhbHVlLnNsaWNlKGluZGV4LCBuZXh0SW5kZXgpO1xuXG4gICAgaWYgKCFwcmVmaXhlZCAmJiAhdHJpbShjb250ZW50KSkge1xuICAgICAgaW5kZXggPSBzdGFydEluZGV4O1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCFwcmVmaXhlZCkge1xuICAgICAgcmVzdCA9IHZhbHVlLnNsaWNlKGluZGV4KTtcblxuICAgICAgLyogQ2hlY2sgaWYgdGhlIGZvbGxvd2luZyBjb2RlIGNvbnRhaW5zIGEgcG9zc2libGVcbiAgICAgICAqIGJsb2NrLiAqL1xuICAgICAgaWYgKGludGVycnVwdChpbnRlcnJ1cHRvcnMsIHRva2VuaXplcnMsIHNlbGYsIFtlYXQsIHJlc3QsIHRydWVdKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaW5lID0gc3RhcnRJbmRleCA9PT0gaW5kZXggPyBjb250ZW50IDogdmFsdWUuc2xpY2Uoc3RhcnRJbmRleCwgbmV4dEluZGV4KTtcblxuICAgIGluZGVudHMucHVzaChpbmRleCAtIHN0YXJ0SW5kZXgpO1xuICAgIHZhbHVlcy5wdXNoKGxpbmUpO1xuICAgIGNvbnRlbnRzLnB1c2goY29udGVudCk7XG5cbiAgICBpbmRleCA9IG5leHRJbmRleCArIDE7XG4gIH1cblxuICBpbmRleCA9IC0xO1xuICBsZW5ndGggPSBpbmRlbnRzLmxlbmd0aDtcbiAgYWRkID0gZWF0KHZhbHVlcy5qb2luKENfTkVXTElORSkpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2Zmc2V0c1tjdXJyZW50TGluZV0gPSAob2Zmc2V0c1tjdXJyZW50TGluZV0gfHwgMCkgKyBpbmRlbnRzW2luZGV4XTtcbiAgICBjdXJyZW50TGluZSsrO1xuICB9XG5cbiAgZXhpdCA9IHNlbGYuZW50ZXJCbG9jaygpO1xuICBjb250ZW50cyA9IHNlbGYudG9rZW5pemVCbG9jayhjb250ZW50cy5qb2luKENfTkVXTElORSksIG5vdyk7XG4gIGV4aXQoKTtcblxuICByZXR1cm4gYWRkKHtcbiAgICB0eXBlOiAnYmxvY2txdW90ZScsXG4gICAgY2hpbGRyZW46IGNvbnRlbnRzXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF0eEhlYWRpbmc7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19IQVNIID0gJyMnO1xuXG52YXIgTUFYX0FUWF9DT1VOVCA9IDY7XG5cbmZ1bmN0aW9uIGF0eEhlYWRpbmcoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBub3cgPSBlYXQubm93KCk7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgY29udGVudCA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgcXVldWU7XG4gIHZhciBkZXB0aDtcblxuICAvKiBFYXQgaW5pdGlhbCBzcGFjaW5nLiAqL1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFYXQgaGFzaGVzLiAqL1xuICBkZXB0aCA9IDA7XG5cbiAgd2hpbGUgKCsraW5kZXggPD0gbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfSEFTSCkge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBkZXB0aCsrO1xuICB9XG5cbiAgaWYgKGRlcHRoID4gTUFYX0FUWF9DT1VOVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChcbiAgICAhZGVwdGggfHxcbiAgICAoIXNldHRpbmdzLnBlZGFudGljICYmIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBDX0hBU0gpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aCArIDE7XG5cbiAgLyogRWF0IGludGVybWVkaWF0ZSB3aGl0ZS1zcGFjZS4gKi9cbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gbm90IGluIHBlZGFudGljIG1vZGUgd2l0aG91dCBzcGFjaW5nLiAqL1xuICBpZiAoXG4gICAgIXNldHRpbmdzLnBlZGFudGljICYmXG4gICAgcXVldWUubGVuZ3RoID09PSAwICYmXG4gICAgY2hhcmFjdGVyICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX05FV0xJTkVcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyogRWF0IGNvbnRlbnQuICovXG4gIHN1YnZhbHVlICs9IHF1ZXVlO1xuICBxdWV1ZSA9ICcnO1xuICBjb250ZW50ID0gJyc7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX1RBQiAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX0hBU0hcbiAgICApIHtcbiAgICAgIGNvbnRlbnQgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSB8fCBjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19IQVNIKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSB8fCBjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgaW5kZXgtLTtcbiAgfVxuXG4gIG5vdy5jb2x1bW4gKz0gc3VidmFsdWUubGVuZ3RoO1xuICBub3cub2Zmc2V0ICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgKz0gY29udGVudCArIHF1ZXVlO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgZGVwdGg6IGRlcHRoLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gdGhlbWF0aWNCcmVhaztcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0FTVEVSSVNLID0gJyonO1xudmFyIENfVU5ERVJTQ09SRSA9ICdfJztcbnZhciBDX0RBU0ggPSAnLSc7XG5cbnZhciBUSEVNQVRJQ19CUkVBS19NQVJLRVJfQ09VTlQgPSAzO1xuXG5mdW5jdGlvbiB0aGVtYXRpY0JyZWFrKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aCArIDE7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbWFya2VyO1xuICB2YXIgbWFya2VyQ291bnQ7XG4gIHZhciBxdWV1ZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIGlmIChcbiAgICBjaGFyYWN0ZXIgIT09IENfQVNURVJJU0sgJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfREFTSCAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICBtYXJrZXJDb3VudCA9IDE7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICBtYXJrZXJDb3VudCsrO1xuICAgICAgc3VidmFsdWUgKz0gcXVldWUgKyBtYXJrZXI7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG1hcmtlckNvdW50ID49IFRIRU1BVElDX0JSRUFLX01BUktFUl9DT1VOVCAmJlxuICAgICAgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpXG4gICAgKSB7XG4gICAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcblxuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe3R5cGU6ICd0aGVtYXRpY0JyZWFrJ30pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1wYXJhbXMgKi9cblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJyk7XG52YXIgZ2V0SW5kZW50ID0gcmVxdWlyZSgnLi4vdXRpbC9nZXQtaW5kZW50YXRpb24nKTtcbnZhciByZW1vdmVJbmRlbnQgPSByZXF1aXJlKCcuLi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbicpO1xudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdDtcblxudmFyIENfQVNURVJJU0sgPSAnKic7XG52YXIgQ19VTkRFUlNDT1JFID0gJ18nO1xudmFyIENfUExVUyA9ICcrJztcbnZhciBDX0RBU0ggPSAnLSc7XG52YXIgQ19ET1QgPSAnLic7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfUEFSRU5fQ0xPU0UgPSAnKSc7XG52YXIgQ19YX0xPV0VSID0gJ3gnO1xuXG52YXIgVEFCX1NJWkUgPSA0O1xudmFyIEVYUFJFU1NJT05fTE9PU0VfTElTVF9JVEVNID0gL1xcblxcbig/IVxccyokKS87XG52YXIgRVhQUkVTU0lPTl9UQVNLX0lURU0gPSAvXlxcWyhbIFxcdF18eHxYKV1bIFxcdF0vO1xudmFyIEVYUFJFU1NJT05fQlVMTEVUID0gL14oWyBcXHRdKikoWyorLV18XFxkK1suKV0pKCB7MSw0fSg/ISApfCB8XFx0fCR8KD89XFxuKSkoW15cXG5dKikvO1xudmFyIEVYUFJFU1NJT05fUEVEQU5USUNfQlVMTEVUID0gL14oWyBcXHRdKikoWyorLV18XFxkK1suKV0pKFsgXFx0XSspLztcbnZhciBFWFBSRVNTSU9OX0lOSVRJQUxfSU5ERU5UID0gL14oIHsxLDR9fFxcdCk/L2dtO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrXG4gKiBsaXN0LWl0ZW1zLiAqL1xudmFyIExJU1RfVU5PUkRFUkVEX01BUktFUlMgPSB7fTtcblxuTElTVF9VTk9SREVSRURfTUFSS0VSU1tDX0FTVEVSSVNLXSA9IHRydWU7XG5MSVNUX1VOT1JERVJFRF9NQVJLRVJTW0NfUExVU10gPSB0cnVlO1xuTElTVF9VTk9SREVSRURfTUFSS0VSU1tDX0RBU0hdID0gdHJ1ZTtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFya1xuICogbGlzdC1pdGVtcyBhZnRlciBhIGRpZ2l0LiAqL1xudmFyIExJU1RfT1JERVJFRF9NQVJLRVJTID0ge307XG5cbkxJU1RfT1JERVJFRF9NQVJLRVJTW0NfRE9UXSA9IHRydWU7XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmtcbiAqIGxpc3QtaXRlbXMgYWZ0ZXIgYSBkaWdpdC4gKi9cbnZhciBMSVNUX09SREVSRURfQ09NTU9OTUFSS19NQVJLRVJTID0ge307XG5cbkxJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlNbQ19ET1RdID0gdHJ1ZTtcbkxJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlNbQ19QQVJFTl9DTE9TRV0gPSB0cnVlO1xuXG5mdW5jdGlvbiBsaXN0KGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpYztcbiAgdmFyIHRva2VuaXplcnMgPSBzZWxmLmJsb2NrVG9rZW5pemVycztcbiAgdmFyIGludGVydXB0b3JzID0gc2VsZi5pbnRlcnJ1cHRMaXN0O1xuICB2YXIgbWFya2VycztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gbnVsbDtcbiAgdmFyIHNpemUgPSAwO1xuICB2YXIgcXVldWU7XG4gIHZhciBvcmRlcmVkO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbWFya2VyO1xuICB2YXIgbmV4dEluZGV4O1xuICB2YXIgc3RhcnRJbmRleDtcbiAgdmFyIHByZWZpeGVkO1xuICB2YXIgY3VycmVudE1hcmtlcjtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBsaW5lO1xuICB2YXIgcHJldkVtcHR5O1xuICB2YXIgZW1wdHk7XG4gIHZhciBpdGVtcztcbiAgdmFyIGFsbExpbmVzO1xuICB2YXIgZW1wdHlMaW5lcztcbiAgdmFyIGl0ZW07XG4gIHZhciBlbnRlclRvcDtcbiAgdmFyIGV4aXRCbG9ja3F1b3RlO1xuICB2YXIgaXNMb29zZTtcbiAgdmFyIG5vZGU7XG4gIHZhciBub3c7XG4gIHZhciBlbmQ7XG4gIHZhciBpbmRlbnRlZDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHNpemUgKz0gVEFCX1NJWkUgLSAoc2l6ZSAlIFRBQl9TSVpFKTtcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgc2l6ZSsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKHNpemUgPj0gVEFCX1NJWkUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIG1hcmtlcnMgPSBjb21tb25tYXJrID9cbiAgICBMSVNUX09SREVSRURfQ09NTU9OTUFSS19NQVJLRVJTIDpcbiAgICBMSVNUX09SREVSRURfTUFSS0VSUztcblxuICBpZiAoTElTVF9VTk9SREVSRURfTUFSS0VSU1tjaGFyYWN0ZXJdID09PSB0cnVlKSB7XG4gICAgbWFya2VyID0gY2hhcmFjdGVyO1xuICAgIG9yZGVyZWQgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBvcmRlcmVkID0gdHJ1ZTtcbiAgICBxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoIWRlY2ltYWwoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCFxdWV1ZSB8fCBtYXJrZXJzW2NoYXJhY3Rlcl0gIT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGFydCA9IHBhcnNlSW50KHF1ZXVlLCAxMCk7XG4gICAgbWFya2VyID0gY2hhcmFjdGVyO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGluZGV4ID0gMDtcbiAgaXRlbXMgPSBbXTtcbiAgYWxsTGluZXMgPSBbXTtcbiAgZW1wdHlMaW5lcyA9IFtdO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIG5leHRJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCk7XG4gICAgc3RhcnRJbmRleCA9IGluZGV4O1xuICAgIHByZWZpeGVkID0gZmFsc2U7XG4gICAgaW5kZW50ZWQgPSBmYWxzZTtcblxuICAgIGlmIChuZXh0SW5kZXggPT09IC0xKSB7XG4gICAgICBuZXh0SW5kZXggPSBsZW5ndGg7XG4gICAgfVxuXG4gICAgZW5kID0gaW5kZXggKyBUQUJfU0laRTtcbiAgICBzaXplID0gMDtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgICAgc2l6ZSArPSBUQUJfU0laRSAtIChzaXplICUgVEFCX1NJWkUpO1xuICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgc2l6ZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHNpemUgPj0gVEFCX1NJWkUpIHtcbiAgICAgIGluZGVudGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbSAmJiBzaXplID49IGl0ZW0uaW5kZW50KSB7XG4gICAgICBpbmRlbnRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICBjdXJyZW50TWFya2VyID0gbnVsbDtcblxuICAgIGlmICghaW5kZW50ZWQpIHtcbiAgICAgIGlmIChMSVNUX1VOT1JERVJFRF9NQVJLRVJTW2NoYXJhY3Rlcl0gPT09IHRydWUpIHtcbiAgICAgICAgY3VycmVudE1hcmtlciA9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgc2l6ZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWUgPSAnJztcblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgICAgaWYgKCFkZWNpbWFsKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICAgICAgaW5kZXgrKztcblxuICAgICAgICBpZiAocXVldWUgJiYgbWFya2Vyc1tjaGFyYWN0ZXJdID09PSB0cnVlKSB7XG4gICAgICAgICAgY3VycmVudE1hcmtlciA9IGNoYXJhY3RlcjtcbiAgICAgICAgICBzaXplICs9IHF1ZXVlLmxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgICAgIHNpemUgKz0gVEFCX1NJWkUgLSAoc2l6ZSAlIFRBQl9TSVpFKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICAgIGVuZCA9IGluZGV4ICsgVEFCX1NJWkU7XG5cbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX1NQQUNFKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kICYmIHZhbHVlLmNoYXJBdChpbmRleCkgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgICAgIGluZGV4IC09IFRBQl9TSVpFIC0gMTtcbiAgICAgICAgICAgIHNpemUgLT0gVEFCX1NJWkUgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSAmJiBjaGFyYWN0ZXIgIT09ICcnKSB7XG4gICAgICAgICAgY3VycmVudE1hcmtlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudE1hcmtlcikge1xuICAgICAgaWYgKCFwZWRhbnRpYyAmJiBtYXJrZXIgIT09IGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHByZWZpeGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjb21tb25tYXJrICYmICFpbmRlbnRlZCAmJiB2YWx1ZS5jaGFyQXQoc3RhcnRJbmRleCkgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgaW5kZW50ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjb21tb25tYXJrICYmIGl0ZW0pIHtcbiAgICAgICAgaW5kZW50ZWQgPSBzaXplID49IGl0ZW0uaW5kZW50IHx8IHNpemUgPiBUQUJfU0laRTtcbiAgICAgIH1cblxuICAgICAgcHJlZml4ZWQgPSBmYWxzZTtcbiAgICAgIGluZGV4ID0gc3RhcnRJbmRleDtcbiAgICB9XG5cbiAgICBsaW5lID0gdmFsdWUuc2xpY2Uoc3RhcnRJbmRleCwgbmV4dEluZGV4KTtcbiAgICBjb250ZW50ID0gc3RhcnRJbmRleCA9PT0gaW5kZXggPyBsaW5lIDogdmFsdWUuc2xpY2UoaW5kZXgsIG5leHRJbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjdXJyZW50TWFya2VyID09PSBDX0FTVEVSSVNLIHx8XG4gICAgICBjdXJyZW50TWFya2VyID09PSBDX1VOREVSU0NPUkUgfHxcbiAgICAgIGN1cnJlbnRNYXJrZXIgPT09IENfREFTSFxuICAgICkge1xuICAgICAgaWYgKHRva2VuaXplcnMudGhlbWF0aWNCcmVhay5jYWxsKHNlbGYsIGVhdCwgbGluZSwgdHJ1ZSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJldkVtcHR5ID0gZW1wdHk7XG4gICAgZW1wdHkgPSAhdHJpbShjb250ZW50KS5sZW5ndGg7XG5cbiAgICBpZiAoaW5kZW50ZWQgJiYgaXRlbSkge1xuICAgICAgaXRlbS52YWx1ZSA9IGl0ZW0udmFsdWUuY29uY2F0KGVtcHR5TGluZXMsIGxpbmUpO1xuICAgICAgYWxsTGluZXMgPSBhbGxMaW5lcy5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBlbXB0eUxpbmVzID0gW107XG4gICAgfSBlbHNlIGlmIChwcmVmaXhlZCkge1xuICAgICAgaWYgKGVtcHR5TGluZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGl0ZW0udmFsdWUucHVzaCgnJyk7XG4gICAgICAgIGl0ZW0udHJhaWwgPSBlbXB0eUxpbmVzLmNvbmNhdCgpO1xuICAgICAgfVxuXG4gICAgICBpdGVtID0ge1xuICAgICAgICB2YWx1ZTogW2xpbmVdLFxuICAgICAgICBpbmRlbnQ6IHNpemUsXG4gICAgICAgIHRyYWlsOiBbXVxuICAgICAgfTtcblxuICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIGFsbExpbmVzID0gYWxsTGluZXMuY29uY2F0KGVtcHR5TGluZXMsIGxpbmUpO1xuICAgICAgZW1wdHlMaW5lcyA9IFtdO1xuICAgIH0gZWxzZSBpZiAoZW1wdHkpIHtcbiAgICAgIGlmIChwcmV2RW1wdHkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGVtcHR5TGluZXMucHVzaChsaW5lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZXZFbXB0eSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGludGVycnVwdChpbnRlcnVwdG9ycywgdG9rZW5pemVycywgc2VsZiwgW2VhdCwgbGluZSwgdHJ1ZV0pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpdGVtLnZhbHVlID0gaXRlbS52YWx1ZS5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBhbGxMaW5lcyA9IGFsbExpbmVzLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKTtcbiAgICAgIGVtcHR5TGluZXMgPSBbXTtcbiAgICB9XG5cbiAgICBpbmRleCA9IG5leHRJbmRleCArIDE7XG4gIH1cblxuICBub2RlID0gZWF0KGFsbExpbmVzLmpvaW4oQ19ORVdMSU5FKSkucmVzZXQoe1xuICAgIHR5cGU6ICdsaXN0JyxcbiAgICBvcmRlcmVkOiBvcmRlcmVkLFxuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBsb29zZTogbnVsbCxcbiAgICBjaGlsZHJlbjogW11cbiAgfSk7XG5cbiAgZW50ZXJUb3AgPSBzZWxmLmVudGVyTGlzdCgpO1xuICBleGl0QmxvY2txdW90ZSA9IHNlbGYuZW50ZXJCbG9jaygpO1xuICBpc0xvb3NlID0gZmFsc2U7XG4gIGluZGV4ID0gLTE7XG4gIGxlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGl0ZW0gPSBpdGVtc1tpbmRleF0udmFsdWUuam9pbihDX05FV0xJTkUpO1xuICAgIG5vdyA9IGVhdC5ub3coKTtcblxuICAgIGl0ZW0gPSBlYXQoaXRlbSkobGlzdEl0ZW0oc2VsZiwgaXRlbSwgbm93KSwgbm9kZSk7XG5cbiAgICBpZiAoaXRlbS5sb29zZSkge1xuICAgICAgaXNMb29zZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaXRlbSA9IGl0ZW1zW2luZGV4XS50cmFpbC5qb2luKENfTkVXTElORSk7XG5cbiAgICBpZiAoaW5kZXggIT09IGxlbmd0aCAtIDEpIHtcbiAgICAgIGl0ZW0gKz0gQ19ORVdMSU5FO1xuICAgIH1cblxuICAgIGVhdChpdGVtKTtcbiAgfVxuXG4gIGVudGVyVG9wKCk7XG4gIGV4aXRCbG9ja3F1b3RlKCk7XG5cbiAgbm9kZS5sb29zZSA9IGlzTG9vc2U7XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgdmFyIGZuID0gY3R4Lm9wdGlvbnMucGVkYW50aWMgPyBwZWRhbnRpY0xpc3RJdGVtIDogbm9ybWFsTGlzdEl0ZW07XG4gIHZhciBjaGVja2VkID0gbnVsbDtcbiAgdmFyIHRhc2s7XG4gIHZhciBpbmRlbnQ7XG5cbiAgdmFsdWUgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXG4gIGlmIChjdHgub3B0aW9ucy5nZm0pIHtcbiAgICB0YXNrID0gdmFsdWUubWF0Y2goRVhQUkVTU0lPTl9UQVNLX0lURU0pO1xuXG4gICAgaWYgKHRhc2spIHtcbiAgICAgIGluZGVudCA9IHRhc2tbMF0ubGVuZ3RoO1xuICAgICAgY2hlY2tlZCA9IHRhc2tbMV0udG9Mb3dlckNhc2UoKSA9PT0gQ19YX0xPV0VSO1xuICAgICAgb2Zmc2V0c1twb3NpdGlvbi5saW5lXSArPSBpbmRlbnQ7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKGluZGVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnbGlzdEl0ZW0nLFxuICAgIGxvb3NlOiBFWFBSRVNTSU9OX0xPT1NFX0xJU1RfSVRFTS50ZXN0KHZhbHVlKSB8fFxuICAgICAgdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpID09PSBDX05FV0xJTkUsXG4gICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICBjaGlsZHJlbjogY3R4LnRva2VuaXplQmxvY2sodmFsdWUsIHBvc2l0aW9uKVxuICB9O1xufVxuXG4vKiBDcmVhdGUgYSBsaXN0LWl0ZW0gdXNpbmcgb3Zlcmx5IHNpbXBsZSBtZWNoYW5pY3MuICovXG5mdW5jdGlvbiBwZWRhbnRpY0xpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgdmFyIGxpbmUgPSBwb3NpdGlvbi5saW5lO1xuXG4gIC8qIFJlbW92ZSB0aGUgbGlzdC1pdGVt4oCZcyBidWxsZXQuICovXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShFWFBSRVNTSU9OX1BFREFOVElDX0JVTExFVCwgcmVwbGFjZXIpO1xuXG4gIC8qIFRoZSBpbml0aWFsIGxpbmUgd2FzIGFsc28gbWF0Y2hlZCBieSB0aGUgYmVsb3csIHNvXG4gICAqIHdlIHJlc2V0IHRoZSBgbGluZWAuICovXG4gIGxpbmUgPSBwb3NpdGlvbi5saW5lO1xuXG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fSU5JVElBTF9JTkRFTlQsIHJlcGxhY2VyKTtcblxuICAvKiBBIHNpbXBsZSByZXBsYWNlciB3aGljaCByZW1vdmVkIGFsbCBtYXRjaGVzLFxuICAgKiBhbmQgYWRkcyB0aGVpciBsZW5ndGggdG8gYG9mZnNldGAuICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VyKCQwKSB7XG4gICAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICsgJDAubGVuZ3RoO1xuICAgIGxpbmUrKztcblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG4vKiBDcmVhdGUgYSBsaXN0LWl0ZW0gdXNpbmcgc2FuZSBtZWNoYW5pY3MuICovXG5mdW5jdGlvbiBub3JtYWxMaXN0SXRlbShjdHgsIHZhbHVlLCBwb3NpdGlvbikge1xuICB2YXIgb2Zmc2V0cyA9IGN0eC5vZmZzZXQ7XG4gIHZhciBsaW5lID0gcG9zaXRpb24ubGluZTtcbiAgdmFyIG1heDtcbiAgdmFyIGJ1bGxldDtcbiAgdmFyIHJlc3Q7XG4gIHZhciBsaW5lcztcbiAgdmFyIHRyaW1tZWRMaW5lcztcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuXG4gIC8qIFJlbW92ZSB0aGUgbGlzdC1pdGVt4oCZcyBidWxsZXQuICovXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShFWFBSRVNTSU9OX0JVTExFVCwgcmVwbGFjZXIpO1xuXG4gIGxpbmVzID0gdmFsdWUuc3BsaXQoQ19ORVdMSU5FKTtcblxuICB0cmltbWVkTGluZXMgPSByZW1vdmVJbmRlbnQodmFsdWUsIGdldEluZGVudChtYXgpLmluZGVudCkuc3BsaXQoQ19ORVdMSU5FKTtcblxuICAvKiBXZSByZXBsYWNlZCB0aGUgaW5pdGlhbCBidWxsZXQgd2l0aCBzb21ldGhpbmdcbiAgICogZWxzZSBhYm92ZSwgd2hpY2ggd2FzIHVzZWQgdG8gdHJpY2tcbiAgICogYHJlbW92ZUluZGVudGF0aW9uYCBpbnRvIHJlbW92aW5nIHNvbWUgbW9yZVxuICAgKiBjaGFyYWN0ZXJzIHdoZW4gcG9zc2libGUuICBIb3dldmVyLCB0aGF0IGNvdWxkXG4gICAqIHJlc3VsdCBpbiB0aGUgaW5pdGlhbCBsaW5lIHRvIGJlIHN0cmlwcGVkIG1vcmVcbiAgICogdGhhbiBpdCBzaG91bGQgYmUuICovXG4gIHRyaW1tZWRMaW5lc1swXSA9IHJlc3Q7XG5cbiAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICsgYnVsbGV0Lmxlbmd0aDtcbiAgbGluZSsrO1xuXG4gIGluZGV4ID0gMDtcbiAgbGVuZ3RoID0gbGluZXMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICtcbiAgICAgIGxpbmVzW2luZGV4XS5sZW5ndGggLSB0cmltbWVkTGluZXNbaW5kZXhdLmxlbmd0aDtcbiAgICBsaW5lKys7XG4gIH1cblxuICByZXR1cm4gdHJpbW1lZExpbmVzLmpvaW4oQ19ORVdMSU5FKTtcblxuICBmdW5jdGlvbiByZXBsYWNlcigkMCwgJDEsICQyLCAkMywgJDQpIHtcbiAgICBidWxsZXQgPSAkMSArICQyICsgJDM7XG4gICAgcmVzdCA9ICQ0O1xuXG4gICAgLyogTWFrZSBzdXJlIHRoYXQgdGhlIGZpcnN0IG5pbmUgbnVtYmVyZWQgbGlzdCBpdGVtc1xuICAgICAqIGNhbiBpbmRlbnQgd2l0aCBhbiBleHRyYSBzcGFjZS4gIFRoYXQgaXMsIHdoZW5cbiAgICAgKiB0aGUgYnVsbGV0IGRpZCBub3QgcmVjZWl2ZSBhbiBleHRyYSBmaW5hbCBzcGFjZS4gKi9cbiAgICBpZiAoTnVtYmVyKCQyKSA8IDEwICYmIGJ1bGxldC5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAkMiA9IENfU1BBQ0UgKyAkMjtcbiAgICB9XG5cbiAgICBtYXggPSAkMSArIHJlcGVhdChDX1NQQUNFLCAkMi5sZW5ndGgpICsgJDM7XG5cbiAgICByZXR1cm4gbWF4ICsgcmVzdDtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG52YXIgZ2V0SW5kZW50ID0gcmVxdWlyZSgnLi9nZXQtaW5kZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbmRlbnRhdGlvbjtcblxudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcblxuLyogUmVtb3ZlIHRoZSBtaW5pbXVtIGluZGVudCBmcm9tIGV2ZXJ5IGxpbmUgaW4gYHZhbHVlYC5cbiAqIFN1cHBvcnRzIGJvdGggdGFiLCBzcGFjZWQsIGFuZCBtaXhlZCBpbmRlbnRhdGlvbiAoYXNcbiAqIHdlbGwgYXMgcG9zc2libGUpLiAqL1xuZnVuY3Rpb24gaW5kZW50YXRpb24odmFsdWUsIG1heGltdW0pIHtcbiAgdmFyIHZhbHVlcyA9IHZhbHVlLnNwbGl0KENfTkVXTElORSk7XG4gIHZhciBwb3NpdGlvbiA9IHZhbHVlcy5sZW5ndGggKyAxO1xuICB2YXIgbWluSW5kZW50ID0gSW5maW5pdHk7XG4gIHZhciBtYXRyaXggPSBbXTtcbiAgdmFyIGluZGV4O1xuICB2YXIgaW5kZW50YXRpb247XG4gIHZhciBzdG9wcztcbiAgdmFyIHBhZGRpbmc7XG5cbiAgdmFsdWVzLnVuc2hpZnQocmVwZWF0KENfU1BBQ0UsIG1heGltdW0pICsgJyEnKTtcblxuICB3aGlsZSAocG9zaXRpb24tLSkge1xuICAgIGluZGVudGF0aW9uID0gZ2V0SW5kZW50KHZhbHVlc1twb3NpdGlvbl0pO1xuXG4gICAgbWF0cml4W3Bvc2l0aW9uXSA9IGluZGVudGF0aW9uLnN0b3BzO1xuXG4gICAgaWYgKHRyaW0odmFsdWVzW3Bvc2l0aW9uXSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZW50YXRpb24uaW5kZW50KSB7XG4gICAgICBpZiAoaW5kZW50YXRpb24uaW5kZW50ID4gMCAmJiBpbmRlbnRhdGlvbi5pbmRlbnQgPCBtaW5JbmRlbnQpIHtcbiAgICAgICAgbWluSW5kZW50ID0gaW5kZW50YXRpb24uaW5kZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtaW5JbmRlbnQgPSBJbmZpbml0eTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1pbkluZGVudCAhPT0gSW5maW5pdHkpIHtcbiAgICBwb3NpdGlvbiA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAocG9zaXRpb24tLSkge1xuICAgICAgc3RvcHMgPSBtYXRyaXhbcG9zaXRpb25dO1xuICAgICAgaW5kZXggPSBtaW5JbmRlbnQ7XG5cbiAgICAgIHdoaWxlIChpbmRleCAmJiAhKGluZGV4IGluIHN0b3BzKSkge1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRyaW0odmFsdWVzW3Bvc2l0aW9uXSkubGVuZ3RoICE9PSAwICYmXG4gICAgICAgIG1pbkluZGVudCAmJlxuICAgICAgICBpbmRleCAhPT0gbWluSW5kZW50XG4gICAgICApIHtcbiAgICAgICAgcGFkZGluZyA9IENfVEFCO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFkZGluZyA9ICcnO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZXNbcG9zaXRpb25dID0gcGFkZGluZyArIHZhbHVlc1twb3NpdGlvbl0uc2xpY2UoXG4gICAgICAgIGluZGV4IGluIHN0b3BzID8gc3RvcHNbaW5kZXhdICsgMSA6IDBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFsdWVzLnNoaWZ0KCk7XG5cbiAgcmV0dXJuIHZhbHVlcy5qb2luKENfTkVXTElORSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0ZXh0SGVhZGluZztcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0VRVUFMUyA9ICc9JztcbnZhciBDX0RBU0ggPSAnLSc7XG5cbnZhciBNQVhfSEVBRElOR19JTkRFTlQgPSAzO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrIHNldGV4dFxuICogaGVhZGVycywgbWFwcGluZyB0byB0aGVpciBjb3JyZXNwb25kaW5nIGRlcHRoLiAqL1xudmFyIFNFVEVYVF9NQVJLRVJTID0ge307XG5cblNFVEVYVF9NQVJLRVJTW0NfRVFVQUxTXSA9IDE7XG5TRVRFWFRfTUFSS0VSU1tDX0RBU0hdID0gMjtcblxuZnVuY3Rpb24gc2V0ZXh0SGVhZGluZyhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbm93ID0gZWF0Lm5vdygpO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBjb250ZW50O1xuICB2YXIgcXVldWU7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBkZXB0aDtcblxuICAvKiBFYXQgaW5pdGlhbCBpbmRlbnRhdGlvbi4gKi9cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSB8fCBpbmRleCA+PSBNQVhfSEVBRElOR19JTkRFTlQpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFYXQgY29udGVudC4gKi9cbiAgY29udGVudCA9ICcnO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UgfHwgY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG4gIH1cblxuICBub3cuY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlICs9IGNvbnRlbnQgKyBxdWV1ZTtcblxuICAvKiBFbnN1cmUgdGhlIGNvbnRlbnQgaXMgZm9sbG93ZWQgYnkgYSBuZXdsaW5lIGFuZCBhXG4gICAqIHZhbGlkIG1hcmtlci4gKi9cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICBtYXJrZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FIHx8ICFTRVRFWFRfTUFSS0VSU1ttYXJrZXJdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuXG4gIC8qIEVhdCBTZXRleHQtbGluZS4gKi9cbiAgcXVldWUgPSBtYXJrZXI7XG4gIGRlcHRoID0gU0VURVhUX01BUktFUlNbbWFya2VyXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlICsgcXVldWUpKHtcbiAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgZGVwdGg6IGRlcHRoLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcGVuQ2xvc2VUYWcgPSByZXF1aXJlKCcuLi91dGlsL2h0bWwnKS5vcGVuQ2xvc2VUYWc7XG5cbm1vZHVsZS5leHBvcnRzID0gYmxvY2tIVE1MO1xuXG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfTFQgPSAnPCc7XG5cbmZ1bmN0aW9uIGJsb2NrSFRNTChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgYmxvY2tzID0gc2VsZi5vcHRpb25zLmJsb2NrcztcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIG5leHQ7XG4gIHZhciBsaW5lO1xuICB2YXIgb2Zmc2V0O1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgY291bnQ7XG4gIHZhciBzZXF1ZW5jZTtcbiAgdmFyIHN1YnZhbHVlO1xuXG4gIHZhciBzZXF1ZW5jZXMgPSBbXG4gICAgWy9ePChzY3JpcHR8cHJlfHN0eWxlKSg/PShcXHN8PnwkKSkvaSwgLzxcXC8oc2NyaXB0fHByZXxzdHlsZSk+L2ksIHRydWVdLFxuICAgIFsvXjwhLS0vLCAvLS0+LywgdHJ1ZV0sXG4gICAgWy9ePFxcPy8sIC9cXD8+LywgdHJ1ZV0sXG4gICAgWy9ePCFbQS1aYS16XS8sIC8+LywgdHJ1ZV0sXG4gICAgWy9ePCFcXFtDREFUQVxcWy8sIC9cXF1cXF0+LywgdHJ1ZV0sXG4gICAgW25ldyBSZWdFeHAoJ148Lz8oJyArIGJsb2Nrcy5qb2luKCd8JykgKyAnKSg/PShcXFxcc3wvPz58JCkpJywgJ2knKSwgL14kLywgdHJ1ZV0sXG4gICAgW25ldyBSZWdFeHAob3BlbkNsb3NlVGFnLnNvdXJjZSArICdcXFxccyokJyksIC9eJC8sIGZhbHNlXVxuICBdO1xuXG4gIC8qIEVhdCBpbml0aWFsIHNwYWNpbmcuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19MVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG5leHQgPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXggKyAxKTtcbiAgbmV4dCA9IG5leHQgPT09IC0xID8gbGVuZ3RoIDogbmV4dDtcbiAgbGluZSA9IHZhbHVlLnNsaWNlKGluZGV4LCBuZXh0KTtcbiAgb2Zmc2V0ID0gLTE7XG4gIGNvdW50ID0gc2VxdWVuY2VzLmxlbmd0aDtcblxuICB3aGlsZSAoKytvZmZzZXQgPCBjb3VudCkge1xuICAgIGlmIChzZXF1ZW5jZXNbb2Zmc2V0XVswXS50ZXN0KGxpbmUpKSB7XG4gICAgICBzZXF1ZW5jZSA9IHNlcXVlbmNlc1tvZmZzZXRdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzZXF1ZW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gc2VxdWVuY2VbMl07XG4gIH1cblxuICBpbmRleCA9IG5leHQ7XG5cbiAgaWYgKCFzZXF1ZW5jZVsxXS50ZXN0KGxpbmUpKSB7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBuZXh0ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4ICsgMSk7XG4gICAgICBuZXh0ID0gbmV4dCA9PT0gLTEgPyBsZW5ndGggOiBuZXh0O1xuICAgICAgbGluZSA9IHZhbHVlLnNsaWNlKGluZGV4ICsgMSwgbmV4dCk7XG5cbiAgICAgIGlmIChzZXF1ZW5jZVsxXS50ZXN0KGxpbmUpKSB7XG4gICAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgICAgaW5kZXggPSBuZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGluZGV4ID0gbmV4dDtcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGluZGV4KTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7dHlwZTogJ2h0bWwnLCB2YWx1ZTogc3VidmFsdWV9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIG5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvbm9ybWFsaXplJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZm9vdG5vdGVEZWZpbml0aW9uO1xuZm9vdG5vdGVEZWZpbml0aW9uLm5vdEluTGlzdCA9IHRydWU7XG5mb290bm90ZURlZmluaXRpb24ubm90SW5CbG9jayA9IHRydWU7XG5cbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfQ0FSRVQgPSAnXic7XG52YXIgQ19DT0xPTiA9ICc6JztcblxudmFyIEVYUFJFU1NJT05fSU5JVElBTF9UQUIgPSAvXiggezR9fFxcdCk/L2dtO1xuXG5mdW5jdGlvbiBmb290bm90ZURlZmluaXRpb24oZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG9mZnNldHMgPSBzZWxmLm9mZnNldDtcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBub3c7XG4gIHZhciBjdXJyZW50TGluZTtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHN1YnF1ZXVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgaWRlbnRpZmllcjtcbiAgdmFyIGFkZDtcbiAgdmFyIGV4aXQ7XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMuZm9vdG5vdGVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSAwO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlID0gJyc7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgY3VycmVudExpbmUgPSBub3cubGluZTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfQlJBQ0tFVF9PUEVOIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfQ0FSRVRcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgKz0gQ19CUkFDS0VUX09QRU4gKyBDX0NBUkVUO1xuICBpbmRleCA9IHN1YnZhbHVlLmxlbmd0aDtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKFxuICAgICFxdWV1ZSB8fFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfQlJBQ0tFVF9DTE9TRSB8fFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBDX0NPTE9OXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlkZW50aWZpZXIgPSBub3JtYWxpemUocXVldWUpO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIENfQlJBQ0tFVF9DTE9TRSArIENfQ09MT047XG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuICBjb250ZW50ID0gJyc7XG4gIHN1YnF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgc3VicXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdWJxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IHN1YnF1ZXVlO1xuICAgIH1cblxuICAgIGlmIChxdWV1ZSkge1xuICAgICAgY29udGVudCArPSBxdWV1ZTtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgY29udGVudCArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIHN1YnZhbHVlICs9IGNvbnRlbnQ7XG5cbiAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShFWFBSRVNTSU9OX0lOSVRJQUxfVEFCLCBmdW5jdGlvbiAobGluZSkge1xuICAgIG9mZnNldHNbY3VycmVudExpbmVdID0gKG9mZnNldHNbY3VycmVudExpbmVdIHx8IDApICsgbGluZS5sZW5ndGg7XG4gICAgY3VycmVudExpbmUrKztcblxuICAgIHJldHVybiAnJztcbiAgfSk7XG5cbiAgYWRkID0gZWF0KHN1YnZhbHVlKTtcblxuICBleGl0ID0gc2VsZi5lbnRlckJsb2NrKCk7XG4gIGNvbnRlbnQgPSBzZWxmLnRva2VuaXplQmxvY2soY29udGVudCwgbm93KTtcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBhZGQoe1xuICAgIHR5cGU6ICdmb290bm90ZURlZmluaXRpb24nLFxuICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjb2xsYXBzZVxuXG4vLyBgY29sbGFwc2UoJyBcXHRcXG5iYXIgXFxuYmF6XFx0JykgLy8gJyBiYXIgYmF6ICdgXG5mdW5jdGlvbiBjb2xsYXBzZSh2YWx1ZSkge1xuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cXHMrL2csICcgJylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIG5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvbm9ybWFsaXplJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbjtcbmRlZmluaXRpb24ubm90SW5MaXN0ID0gdHJ1ZTtcbmRlZmluaXRpb24ubm90SW5CbG9jayA9IHRydWU7XG5cbnZhciBDX0RPVUJMRV9RVU9URSA9ICdcIic7XG52YXIgQ19TSU5HTEVfUVVPVEUgPSAnXFwnJztcbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfUEFSRU5fT1BFTiA9ICcoJztcbnZhciBDX1BBUkVOX0NMT1NFID0gJyknO1xudmFyIENfQ09MT04gPSAnOic7XG52YXIgQ19MVCA9ICc8JztcbnZhciBDX0dUID0gJz4nO1xuXG5mdW5jdGlvbiBkZWZpbml0aW9uKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgYmVmb3JlVVJMO1xuICB2YXIgYmVmb3JlVGl0bGU7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHRlc3Q7XG4gIHZhciBpZGVudGlmaWVyO1xuICB2YXIgdXJsO1xuICB2YXIgdGl0bGU7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoXG4gICAgIXF1ZXVlIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19CUkFDS0VUX0NMT1NFIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfQ09MT05cbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWRlbnRpZmllciA9IHF1ZXVlO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIENfQlJBQ0tFVF9DTE9TRSArIENfQ09MT047XG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgIT09IENfVEFCICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiZcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHF1ZXVlID0gJyc7XG4gIGJlZm9yZVVSTCA9IHN1YnZhbHVlO1xuXG4gIGlmIChjaGFyYWN0ZXIgPT09IENfTFQpIHtcbiAgICBpbmRleCsrO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoIWlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gaXNFbmNsb3NlZFVSTENoYXJhY3Rlci5kZWxpbWl0ZXIpIHtcbiAgICAgIHN1YnZhbHVlICs9IENfTFQgKyBxdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjb21tb25tYXJrKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW5kZXggLT0gcXVldWUubGVuZ3RoICsgMTtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKCFpc1VuY2xvc2VkVVJMQ2hhcmFjdGVyKGNoYXJhY3RlcikpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gcXVldWU7XG4gIH1cblxuICBpZiAoIXF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdXJsID0gcXVldWU7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19UQUIgJiZcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX05FV0xJTkVcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgdGVzdCA9IG51bGw7XG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gQ19ET1VCTEVfUVVPVEUpIHtcbiAgICB0ZXN0ID0gQ19ET1VCTEVfUVVPVEU7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NJTkdMRV9RVU9URSkge1xuICAgIHRlc3QgPSBDX1NJTkdMRV9RVU9URTtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fT1BFTikge1xuICAgIHRlc3QgPSBDX1BBUkVOX0NMT1NFO1xuICB9XG5cbiAgaWYgKCF0ZXN0KSB7XG4gICAgcXVldWUgPSAnJztcbiAgICBpbmRleCA9IHN1YnZhbHVlLmxlbmd0aDtcbiAgfSBlbHNlIGlmIChxdWV1ZSkge1xuICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICAgIHF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IHRlc3QpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSB8fCBjaGFyYWN0ZXIgPT09IHRlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBxdWV1ZSArPSBDX05FV0xJTkU7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IHRlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBiZWZvcmVUaXRsZSA9IHN1YnZhbHVlO1xuICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gICAgdGl0bGUgPSBxdWV1ZTtcbiAgICBxdWV1ZSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoIWNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgIGlmIChzaWxlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGJlZm9yZVVSTCA9IGVhdChiZWZvcmVVUkwpLnRlc3QoKS5lbmQ7XG4gICAgdXJsID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodXJsKSwgYmVmb3JlVVJMLCB7bm9uVGVybWluYXRlZDogZmFsc2V9KTtcblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgYmVmb3JlVGl0bGUgPSBlYXQoYmVmb3JlVGl0bGUpLnRlc3QoKS5lbmQ7XG4gICAgICB0aXRsZSA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKHRpdGxlKSwgYmVmb3JlVGl0bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICAgIHR5cGU6ICdkZWZpbml0aW9uJyxcbiAgICAgIGlkZW50aWZpZXI6IG5vcm1hbGl6ZShpZGVudGlmaWVyKSxcbiAgICAgIHRpdGxlOiB0aXRsZSB8fCBudWxsLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KTtcbiAgfVxufVxuXG4vKiBDaGVjayBpZiBgY2hhcmFjdGVyYCBjYW4gYmUgaW5zaWRlIGFuIGVuY2xvc2VkIFVSSS4gKi9cbmZ1bmN0aW9uIGlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiBjaGFyYWN0ZXIgIT09IENfR1QgJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfQ0xPU0U7XG59XG5cbmlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIuZGVsaW1pdGVyID0gQ19HVDtcblxuLyogQ2hlY2sgaWYgYGNoYXJhY3RlcmAgY2FuIGJlIGluc2lkZSBhbiB1bmNsb3NlZCBVUkkuICovXG5mdW5jdGlvbiBpc1VuY2xvc2VkVVJMQ2hhcmFjdGVyKGNoYXJhY3Rlcikge1xuICByZXR1cm4gY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfT1BFTiAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX0NMT1NFICYmXG4gICAgIXdoaXRlc3BhY2UoY2hhcmFjdGVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRhYmxlO1xuXG52YXIgQ19CQUNLU0xBU0ggPSAnXFxcXCc7XG52YXIgQ19USUNLID0gJ2AnO1xudmFyIENfREFTSCA9ICctJztcbnZhciBDX1BJUEUgPSAnfCc7XG52YXIgQ19DT0xPTiA9ICc6JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG5cbnZhciBNSU5fVEFCTEVfQ09MVU1OUyA9IDE7XG52YXIgTUlOX1RBQkxFX1JPV1MgPSAyO1xuXG52YXIgVEFCTEVfQUxJR05fTEVGVCA9ICdsZWZ0JztcbnZhciBUQUJMRV9BTElHTl9DRU5URVIgPSAnY2VudGVyJztcbnZhciBUQUJMRV9BTElHTl9SSUdIVCA9ICdyaWdodCc7XG52YXIgVEFCTEVfQUxJR05fTk9ORSA9IG51bGw7XG5cbmZ1bmN0aW9uIHRhYmxlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpbmRleDtcbiAgdmFyIGFsaWdubWVudHM7XG4gIHZhciBhbGlnbm1lbnQ7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIHJvdztcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIGxpbmVzO1xuICB2YXIgcXVldWU7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBoYXNEYXNoO1xuICB2YXIgYWxpZ247XG4gIHZhciBjZWxsO1xuICB2YXIgcHJlYW1ibGU7XG4gIHZhciBjb3VudDtcbiAgdmFyIG9wZW5pbmc7XG4gIHZhciBub3c7XG4gIHZhciBwb3NpdGlvbjtcbiAgdmFyIGxpbmVDb3VudDtcbiAgdmFyIGxpbmU7XG4gIHZhciByb3dzO1xuICB2YXIgdGFibGU7XG4gIHZhciBsaW5lSW5kZXg7XG4gIHZhciBwaXBlSW5kZXg7XG4gIHZhciBmaXJzdDtcblxuICAvKiBFeGl0IHdoZW4gbm90IGluIGdmbS1tb2RlLiAqL1xuICBpZiAoIXNlbGYub3B0aW9ucy5nZm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBHZXQgdGhlIHJvd3MuXG4gICAqIERldGVjdGluZyB0YWJsZXMgc29vbiBpcyBoYXJkLCBzbyB0aGVyZSBhcmUgc29tZVxuICAgKiBjaGVja3MgZm9yIHBlcmZvcm1hbmNlIGhlcmUsIHN1Y2ggYXMgdGhlIG1pbmltdW1cbiAgICogbnVtYmVyIG9mIHJvd3MsIGFuZCBhbGxvd2VkIGNoYXJhY3RlcnMgaW4gdGhlXG4gICAqIGFsaWdubWVudCByb3cuICovXG4gIGluZGV4ID0gMDtcbiAgbGluZUNvdW50ID0gMDtcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgbGluZXMgPSBbXTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBsaW5lSW5kZXggPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXgpO1xuICAgIHBpcGVJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19QSVBFLCBpbmRleCArIDEpO1xuXG4gICAgaWYgKGxpbmVJbmRleCA9PT0gLTEpIHtcbiAgICAgIGxpbmVJbmRleCA9IHZhbHVlLmxlbmd0aDtcbiAgICB9XG5cbiAgICBpZiAocGlwZUluZGV4ID09PSAtMSB8fCBwaXBlSW5kZXggPiBsaW5lSW5kZXgpIHtcbiAgICAgIGlmIChsaW5lQ291bnQgPCBNSU5fVEFCTEVfUk9XUykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxpbmVzLnB1c2godmFsdWUuc2xpY2UoaW5kZXgsIGxpbmVJbmRleCkpO1xuICAgIGxpbmVDb3VudCsrO1xuICAgIGluZGV4ID0gbGluZUluZGV4ICsgMTtcbiAgfVxuXG4gIC8qIFBhcnNlIHRoZSBhbGlnbm1lbnQgcm93LiAqL1xuICBzdWJ2YWx1ZSA9IGxpbmVzLmpvaW4oQ19ORVdMSU5FKTtcbiAgYWxpZ25tZW50cyA9IGxpbmVzLnNwbGljZSgxLCAxKVswXSB8fCBbXTtcbiAgaW5kZXggPSAwO1xuICBsZW5ndGggPSBhbGlnbm1lbnRzLmxlbmd0aDtcbiAgbGluZUNvdW50LS07XG4gIGFsaWdubWVudCA9IGZhbHNlO1xuICBhbGlnbiA9IFtdO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IGFsaWdubWVudHMuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfUElQRSkge1xuICAgICAgaGFzRGFzaCA9IG51bGw7XG5cbiAgICAgIGlmIChhbGlnbm1lbnQgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChmaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsaWduLnB1c2goYWxpZ25tZW50KTtcbiAgICAgICAgYWxpZ25tZW50ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfREFTSCkge1xuICAgICAgaGFzRGFzaCA9IHRydWU7XG4gICAgICBhbGlnbm1lbnQgPSBhbGlnbm1lbnQgfHwgVEFCTEVfQUxJR05fTk9ORTtcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19DT0xPTikge1xuICAgICAgaWYgKGFsaWdubWVudCA9PT0gVEFCTEVfQUxJR05fTEVGVCkge1xuICAgICAgICBhbGlnbm1lbnQgPSBUQUJMRV9BTElHTl9DRU5URVI7XG4gICAgICB9IGVsc2UgaWYgKGhhc0Rhc2ggJiYgYWxpZ25tZW50ID09PSBUQUJMRV9BTElHTl9OT05FKSB7XG4gICAgICAgIGFsaWdubWVudCA9IFRBQkxFX0FMSUdOX1JJR0hUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ25tZW50ID0gVEFCTEVfQUxJR05fTEVGVDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKGFsaWdubWVudCAhPT0gZmFsc2UpIHtcbiAgICBhbGlnbi5wdXNoKGFsaWdubWVudCk7XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gd2l0aG91dCBlbm91Z2ggY29sdW1ucy4gKi9cbiAgaWYgKGFsaWduLmxlbmd0aCA8IE1JTl9UQUJMRV9DT0xVTU5TKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiBQYXJzZSB0aGUgcm93cy4gKi9cbiAgcG9zaXRpb24gPSAtMTtcbiAgcm93cyA9IFtdO1xuXG4gIHRhYmxlID0gZWF0KHN1YnZhbHVlKS5yZXNldCh7XG4gICAgdHlwZTogJ3RhYmxlJyxcbiAgICBhbGlnbjogYWxpZ24sXG4gICAgY2hpbGRyZW46IHJvd3NcbiAgfSk7XG5cbiAgd2hpbGUgKCsrcG9zaXRpb24gPCBsaW5lQ291bnQpIHtcbiAgICBsaW5lID0gbGluZXNbcG9zaXRpb25dO1xuICAgIHJvdyA9IHt0eXBlOiAndGFibGVSb3cnLCBjaGlsZHJlbjogW119O1xuXG4gICAgLyogRWF0IGEgbmV3bGluZSBjaGFyYWN0ZXIgd2hlbiB0aGlzIGlzIG5vdCB0aGVcbiAgICAgKiBmaXJzdCByb3cuICovXG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICBlYXQoQ19ORVdMSU5FKTtcbiAgICB9XG5cbiAgICAvKiBFYXQgdGhlIHJvdy4gKi9cbiAgICBlYXQobGluZSkucmVzZXQocm93LCB0YWJsZSk7XG5cbiAgICBsZW5ndGggPSBsaW5lLmxlbmd0aCArIDE7XG4gICAgaW5kZXggPSAwO1xuICAgIHF1ZXVlID0gJyc7XG4gICAgY2VsbCA9ICcnO1xuICAgIHByZWFtYmxlID0gdHJ1ZTtcbiAgICBjb3VudCA9IG51bGw7XG4gICAgb3BlbmluZyA9IG51bGw7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IGxpbmUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIgfHwgY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICAgIGlmIChjZWxsKSB7XG4gICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVhdChjaGFyYWN0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09ICcnIHx8IGNoYXJhY3RlciA9PT0gQ19QSVBFKSB7XG4gICAgICAgIGlmIChwcmVhbWJsZSkge1xuICAgICAgICAgIGVhdChjaGFyYWN0ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFyYWN0ZXIgJiYgb3BlbmluZykge1xuICAgICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgoY2VsbCB8fCBjaGFyYWN0ZXIpICYmICFwcmVhbWJsZSkge1xuICAgICAgICAgICAgc3VidmFsdWUgPSBjZWxsO1xuXG4gICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgc3VidmFsdWUgKz0gcXVldWUuc2xpY2UoMCwgcXVldWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgcXVldWUgPSBxdWV1ZS5jaGFyQXQocXVldWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgICAgICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub3cgPSBlYXQubm93KCk7XG5cbiAgICAgICAgICAgIGVhdChzdWJ2YWx1ZSkoe1xuICAgICAgICAgICAgICB0eXBlOiAndGFibGVDZWxsJyxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoY2VsbCwgbm93KVxuICAgICAgICAgICAgfSwgcm93KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlYXQocXVldWUgKyBjaGFyYWN0ZXIpO1xuXG4gICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChxdWV1ZSkge1xuICAgICAgICAgIGNlbGwgKz0gcXVldWU7XG4gICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNlbGwgKz0gY2hhcmFjdGVyO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIICYmIGluZGV4ICE9PSBsZW5ndGggLSAyKSB7XG4gICAgICAgICAgY2VsbCArPSBsaW5lLmNoYXJBdChpbmRleCArIDEpO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RJQ0spIHtcbiAgICAgICAgICBjb3VudCA9IDE7XG5cbiAgICAgICAgICB3aGlsZSAobGluZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICBjZWxsICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghb3BlbmluZykge1xuICAgICAgICAgICAgb3BlbmluZyA9IGNvdW50O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY291bnQgPj0gb3BlbmluZykge1xuICAgICAgICAgICAgb3BlbmluZyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByZWFtYmxlID0gZmFsc2U7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIC8qIEVhdCB0aGUgYWxpZ25tZW50IHJvdy4gKi9cbiAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICBlYXQoQ19ORVdMSU5FICsgYWxpZ25tZW50cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciBkZWNpbWFsID0gcmVxdWlyZSgnaXMtZGVjaW1hbCcpO1xudmFyIHRyaW1UcmFpbGluZ0xpbmVzID0gcmVxdWlyZSgndHJpbS10cmFpbGluZy1saW5lcycpO1xudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyYWdyYXBoO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xuXG52YXIgVEFCX1NJWkUgPSA0O1xuXG4vKiBUb2tlbmlzZSBwYXJhZ3JhcGguICovXG5mdW5jdGlvbiBwYXJhZ3JhcGgoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgY29tbW9ubWFyayA9IHNldHRpbmdzLmNvbW1vbm1hcms7XG4gIHZhciBnZm0gPSBzZXR0aW5ncy5nZm07XG4gIHZhciB0b2tlbml6ZXJzID0gc2VsZi5ibG9ja1Rva2VuaXplcnM7XG4gIHZhciBpbnRlcnJ1cHRvcnMgPSBzZWxmLmludGVycnVwdFBhcmFncmFwaDtcbiAgdmFyIGluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUpO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgcG9zaXRpb247XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHNpemU7XG4gIHZhciBub3c7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgLyogRWF0IGV2ZXJ5dGhpbmcgaWYgdGhlcmXigJlzIG5vIGZvbGxvd2luZyBuZXdsaW5lLiAqL1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogU3RvcCBpZiB0aGUgbmV4dCBjaGFyYWN0ZXIgaXMgTkVXTElORS4gKi9cbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IENfTkVXTElORSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogSW4gY29tbW9ubWFyay1tb2RlLCBmb2xsb3dpbmcgaW5kZW50ZWQgbGluZXNcbiAgICAgKiBhcmUgcGFydCBvZiB0aGUgcGFyYWdyYXBoLiAqL1xuICAgIGlmIChjb21tb25tYXJrKSB7XG4gICAgICBzaXplID0gMDtcbiAgICAgIHBvc2l0aW9uID0gaW5kZXggKyAxO1xuXG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KHBvc2l0aW9uKTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgICAgIHNpemUgPSBUQUJfU0laRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgICBzaXplKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2l6ZSA+PSBUQUJfU0laRSkge1xuICAgICAgICBpbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCArIDEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKGluZGV4ICsgMSk7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZm9sbG93aW5nIGNvZGUgY29udGFpbnMgYSBwb3NzaWJsZVxuICAgICAqIGJsb2NrLiAqL1xuICAgIGlmIChpbnRlcnJ1cHQoaW50ZXJydXB0b3JzLCB0b2tlbml6ZXJzLCBzZWxmLCBbZWF0LCBzdWJ2YWx1ZSwgdHJ1ZV0pKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBCcmVhayBpZiB0aGUgZm9sbG93aW5nIGxpbmUgc3RhcnRzIGEgbGlzdCwgd2hlblxuICAgICAqIGFscmVhZHkgaW4gYSBsaXN0LCBvciB3aGVuIGluIGNvbW1vbm1hcmssIG9yIHdoZW5cbiAgICAgKiBpbiBnZm0gbW9kZSBhbmQgdGhlIGJ1bGxldCBpcyAqbm90KiBudW1lcmljLiAqL1xuICAgIGlmIChcbiAgICAgIHRva2VuaXplcnMubGlzdC5jYWxsKHNlbGYsIGVhdCwgc3VidmFsdWUsIHRydWUpICYmXG4gICAgICAoXG4gICAgICAgIHNlbGYuaW5MaXN0IHx8XG4gICAgICAgIGNvbW1vbm1hcmsgfHxcbiAgICAgICAgKGdmbSAmJiAhZGVjaW1hbCh0cmltLmxlZnQoc3VidmFsdWUpLmNoYXJBdCgwKSkpXG4gICAgICApXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBwb3NpdGlvbiA9IGluZGV4O1xuICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4ICsgMSk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xICYmIHRyaW0odmFsdWUuc2xpY2UocG9zaXRpb24sIGluZGV4KSkgPT09ICcnKSB7XG4gICAgICBpbmRleCA9IHBvc2l0aW9uO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpbmRleCk7XG5cbiAgaWYgKHRyaW0oc3VidmFsdWUpID09PSAnJykge1xuICAgIGVhdChzdWJ2YWx1ZSk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbm93ID0gZWF0Lm5vdygpO1xuICBzdWJ2YWx1ZSA9IHRyaW1UcmFpbGluZ0xpbmVzKHN1YnZhbHVlKTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoc3VidmFsdWUsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvZXNjYXBlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlO1xuZXNjYXBlLmxvY2F0b3IgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGVzY2FwZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbm9kZTtcblxuICBpZiAodmFsdWUuY2hhckF0KDApID09PSAnXFxcXCcpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMSk7XG5cbiAgICBpZiAoc2VsZi5lc2NhcGUuaW5kZXhPZihjaGFyYWN0ZXIpICE9PSAtMSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgICAgbm9kZSA9IHt0eXBlOiAnYnJlYWsnfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUgPSB7XG4gICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgIHZhbHVlOiBjaGFyYWN0ZXJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdCgnXFxcXCcgKyBjaGFyYWN0ZXIpKG5vZGUpO1xuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ1xcXFwnLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgZGVjb2RlID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvdGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXV0b0xpbms7XG5hdXRvTGluay5sb2NhdG9yID0gbG9jYXRlO1xuYXV0b0xpbmsubm90SW5MaW5rID0gdHJ1ZTtcblxudmFyIENfTFQgPSAnPCc7XG52YXIgQ19HVCA9ICc+JztcbnZhciBDX0FUX1NJR04gPSAnQCc7XG52YXIgQ19TTEFTSCA9ICcvJztcbnZhciBNQUlMVE8gPSAnbWFpbHRvOic7XG52YXIgTUFJTFRPX0xFTkdUSCA9IE1BSUxUTy5sZW5ndGg7XG5cbi8qIFRva2VuaXNlIGEgbGluay4gKi9cbmZ1bmN0aW9uIGF1dG9MaW5rKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZjtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgaW5kZXg7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGhhc0F0Q2hhcmFjdGVyO1xuICB2YXIgbGluaztcbiAgdmFyIG5vdztcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciB0b2tlbml6ZXJzO1xuICB2YXIgZXhpdDtcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSBDX0xUKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc2VsZiA9IHRoaXM7XG4gIHN1YnZhbHVlID0gJyc7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgaW5kZXggPSAwO1xuICBxdWV1ZSA9ICcnO1xuICBoYXNBdENoYXJhY3RlciA9IGZhbHNlO1xuICBsaW5rID0gJyc7XG5cbiAgaW5kZXgrKztcbiAgc3VidmFsdWUgPSBDX0xUO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICB3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19HVCB8fFxuICAgICAgY2hhcmFjdGVyID09PSBDX0FUX1NJR04gfHxcbiAgICAgIChjaGFyYWN0ZXIgPT09ICc6JyAmJiB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gQ19TTEFTSClcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxpbmsgKz0gcXVldWU7XG4gIHF1ZXVlID0gJyc7XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgbGluayArPSBjaGFyYWN0ZXI7XG4gIGluZGV4Kys7XG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gQ19BVF9TSUdOKSB7XG4gICAgaGFzQXRDaGFyYWN0ZXIgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gJzonIHx8XG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSAhPT0gQ19TTEFTSFxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxpbmsgKz0gQ19TTEFTSDtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHwgY2hhcmFjdGVyID09PSBDX0dUKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKCFxdWV1ZSB8fCBjaGFyYWN0ZXIgIT09IENfR1QpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGxpbmsgKz0gcXVldWU7XG4gIGNvbnRlbnQgPSBsaW5rO1xuICBzdWJ2YWx1ZSArPSBsaW5rICsgY2hhcmFjdGVyO1xuICBub3cgPSBlYXQubm93KCk7XG4gIG5vdy5jb2x1bW4rKztcbiAgbm93Lm9mZnNldCsrO1xuXG4gIGlmIChoYXNBdENoYXJhY3Rlcikge1xuICAgIGlmIChsaW5rLnNsaWNlKDAsIE1BSUxUT19MRU5HVEgpLnRvTG93ZXJDYXNlKCkgPT09IE1BSUxUTykge1xuICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyKE1BSUxUT19MRU5HVEgpO1xuICAgICAgbm93LmNvbHVtbiArPSBNQUlMVE9fTEVOR1RIO1xuICAgICAgbm93Lm9mZnNldCArPSBNQUlMVE9fTEVOR1RIO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rID0gTUFJTFRPICsgbGluaztcbiAgICB9XG4gIH1cblxuICAvKiBUZW1wb3JhcmlseSByZW1vdmUgYWxsIHRva2VuaXplcnMgZXhjZXB0IHRleHQgaW4gYXV0b2xpbmtzLiAqL1xuICB0b2tlbml6ZXJzID0gc2VsZi5pbmxpbmVUb2tlbml6ZXJzO1xuICBzZWxmLmlubGluZVRva2VuaXplcnMgPSB7dGV4dDogdG9rZW5pemVycy50ZXh0fTtcblxuICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcblxuICBjb250ZW50ID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBub3cpO1xuXG4gIHNlbGYuaW5saW5lVG9rZW5pemVycyA9IHRva2VuaXplcnM7XG4gIGV4aXQoKTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2xpbmsnLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHVybDogZGVjb2RlKGxpbmssIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pLFxuICAgIGNoaWxkcmVuOiBjb250ZW50XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVjb2RlID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvdXJsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdXJsO1xudXJsLmxvY2F0b3IgPSBsb2NhdGU7XG51cmwubm90SW5MaW5rID0gdHJ1ZTtcblxudmFyIENfQlJBQ0tFVF9PUEVOID0gJ1snO1xudmFyIENfQlJBQ0tFVF9DTE9TRSA9ICddJztcbnZhciBDX1BBUkVOX09QRU4gPSAnKCc7XG52YXIgQ19QQVJFTl9DTE9TRSA9ICcpJztcbnZhciBDX0xUID0gJzwnO1xudmFyIENfQVRfU0lHTiA9ICdAJztcblxudmFyIEhUVFBfUFJPVE9DT0wgPSAnaHR0cDovLyc7XG52YXIgSFRUUFNfUFJPVE9DT0wgPSAnaHR0cHM6Ly8nO1xudmFyIE1BSUxUT19QUk9UT0NPTCA9ICdtYWlsdG86JztcblxudmFyIFBST1RPQ09MUyA9IFtcbiAgSFRUUF9QUk9UT0NPTCxcbiAgSFRUUFNfUFJPVE9DT0wsXG4gIE1BSUxUT19QUk9UT0NPTFxuXTtcblxudmFyIFBST1RPQ09MU19MRU5HVEggPSBQUk9UT0NPTFMubGVuZ3RoO1xuXG5mdW5jdGlvbiB1cmwoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGluZGV4O1xuICB2YXIgcG9zaXRpb247XG4gIHZhciBwcm90b2NvbDtcbiAgdmFyIG1hdGNoO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgcXVldWU7XG4gIHZhciBwYXJlbkNvdW50O1xuICB2YXIgbmV4dENoYXJhY3RlcjtcbiAgdmFyIGV4aXQ7XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMuZ2ZtKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgPSAnJztcbiAgaW5kZXggPSAtMTtcbiAgbGVuZ3RoID0gUFJPVE9DT0xTX0xFTkdUSDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHByb3RvY29sID0gUFJPVE9DT0xTW2luZGV4XTtcbiAgICBtYXRjaCA9IHZhbHVlLnNsaWNlKDAsIHByb3RvY29sLmxlbmd0aCk7XG5cbiAgICBpZiAobWF0Y2gudG9Mb3dlckNhc2UoKSA9PT0gcHJvdG9jb2wpIHtcbiAgICAgIHN1YnZhbHVlID0gbWF0Y2g7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXN1YnZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgcXVldWUgPSAnJztcbiAgcGFyZW5Db3VudCA9IDA7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHwgY2hhcmFjdGVyID09PSBDX0xUKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgPT09ICcuJyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnLCcgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJzonIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICc7JyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnXCInIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICdcXCcnIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICcpJyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnXSdcbiAgICApIHtcbiAgICAgIG5leHRDaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgICAgaWYgKCFuZXh0Q2hhcmFjdGVyIHx8IHdoaXRlc3BhY2UobmV4dENoYXJhY3RlcikpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9PUEVOIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICAgIHBhcmVuQ291bnQrKztcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX0NMT1NFIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBwYXJlbkNvdW50LS07XG5cbiAgICAgIGlmIChwYXJlbkNvdW50IDwgMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghcXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgY29udGVudCA9IHN1YnZhbHVlO1xuXG4gIGlmIChwcm90b2NvbCA9PT0gTUFJTFRPX1BST1RPQ09MKSB7XG4gICAgcG9zaXRpb24gPSBxdWV1ZS5pbmRleE9mKENfQVRfU0lHTik7XG5cbiAgICBpZiAocG9zaXRpb24gPT09IC0xIHx8IHBvc2l0aW9uID09PSBsZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyKE1BSUxUT19QUk9UT0NPTC5sZW5ndGgpO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcbiAgY29udGVudCA9IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgZWF0Lm5vdygpKTtcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdXJsOiBkZWNvZGUoc3VidmFsdWUsIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pLFxuICAgIGNoaWxkcmVuOiBjb250ZW50XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxudmFyIFBST1RPQ09MUyA9IFsnaHR0cHM6Ly8nLCAnaHR0cDovLycsICdtYWlsdG86J107XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBsZW5ndGggPSBQUk9UT0NPTFMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIG1pbiA9IC0xO1xuICB2YXIgcG9zaXRpb247XG5cbiAgaWYgKCF0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHZhbHVlLmluZGV4T2YoUFJPVE9DT0xTW2luZGV4XSwgZnJvbUluZGV4KTtcblxuICAgIGlmIChwb3NpdGlvbiAhPT0gLTEgJiYgKHBvc2l0aW9uIDwgbWluIHx8IG1pbiA9PT0gLTEpKSB7XG4gICAgICBtaW4gPSBwb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWluO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXRpY2FsID0gcmVxdWlyZSgnaXMtYWxwaGFiZXRpY2FsJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL3RhZycpO1xudmFyIHRhZyA9IHJlcXVpcmUoJy4uL3V0aWwvaHRtbCcpLnRhZztcblxubW9kdWxlLmV4cG9ydHMgPSBpbmxpbmVIVE1MO1xuaW5saW5lSFRNTC5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgRVhQUkVTU0lPTl9IVE1MX0xJTktfT1BFTiA9IC9ePGEgL2k7XG52YXIgRVhQUkVTU0lPTl9IVE1MX0xJTktfQ0xPU0UgPSAvXjxcXC9hPi9pO1xuXG5mdW5jdGlvbiBpbmxpbmVIVE1MKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBzdWJ2YWx1ZTtcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSAnPCcgfHwgbGVuZ3RoIDwgMykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgxKTtcblxuICBpZiAoXG4gICAgIWFscGhhYmV0aWNhbChjaGFyYWN0ZXIpICYmXG4gICAgY2hhcmFjdGVyICE9PSAnPycgJiZcbiAgICBjaGFyYWN0ZXIgIT09ICchJyAmJlxuICAgIGNoYXJhY3RlciAhPT0gJy8nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlID0gdmFsdWUubWF0Y2godGFnKTtcblxuICBpZiAoIXN1YnZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbm90IHVzZWQgeWV0LiAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHN1YnZhbHVlWzBdO1xuXG4gIGlmICghc2VsZi5pbkxpbmsgJiYgRVhQUkVTU0lPTl9IVE1MX0xJTktfT1BFTi50ZXN0KHN1YnZhbHVlKSkge1xuICAgIHNlbGYuaW5MaW5rID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChzZWxmLmluTGluayAmJiBFWFBSRVNTSU9OX0hUTUxfTElOS19DTE9TRS50ZXN0KHN1YnZhbHVlKSkge1xuICAgIHNlbGYuaW5MaW5rID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7dHlwZTogJ2h0bWwnLCB2YWx1ZTogc3VidmFsdWV9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9saW5rJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbGluaztcbmxpbmsubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgQ19CQUNLU0xBU0ggPSAnXFxcXCc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfUEFSRU5fT1BFTiA9ICcoJztcbnZhciBDX1BBUkVOX0NMT1NFID0gJyknO1xudmFyIENfTFQgPSAnPCc7XG52YXIgQ19HVCA9ICc+JztcbnZhciBDX1RJQ0sgPSAnYCc7XG52YXIgQ19ET1VCTEVfUVVPVEUgPSAnXCInO1xudmFyIENfU0lOR0xFX1FVT1RFID0gJ1xcJyc7XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzLCB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrIGxpbmtcbiAqIGFuZCBpbWFnZSB0aXRsZXMuICovXG52YXIgTElOS19NQVJLRVJTID0ge307XG5cbkxJTktfTUFSS0VSU1tDX0RPVUJMRV9RVU9URV0gPSBDX0RPVUJMRV9RVU9URTtcbkxJTktfTUFSS0VSU1tDX1NJTkdMRV9RVU9URV0gPSBDX1NJTkdMRV9RVU9URTtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmsgbGlua1xuICogYW5kIGltYWdlIHRpdGxlcyBpbiBjb21tb25tYXJrLW1vZGUuICovXG52YXIgQ09NTU9OTUFSS19MSU5LX01BUktFUlMgPSB7fTtcblxuQ09NTU9OTUFSS19MSU5LX01BUktFUlNbQ19ET1VCTEVfUVVPVEVdID0gQ19ET1VCTEVfUVVPVEU7XG5DT01NT05NQVJLX0xJTktfTUFSS0VSU1tDX1NJTkdMRV9RVU9URV0gPSBDX1NJTkdMRV9RVU9URTtcbkNPTU1PTk1BUktfTElOS19NQVJLRVJTW0NfUEFSRU5fT1BFTl0gPSBDX1BBUkVOX0NMT1NFO1xuXG5mdW5jdGlvbiBsaW5rKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KDApO1xuICB2YXIgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBnZm0gPSBzZWxmLm9wdGlvbnMuZ2ZtO1xuICB2YXIgY2xvc2VkO1xuICB2YXIgY291bnQ7XG4gIHZhciBvcGVuaW5nO1xuICB2YXIgYmVmb3JlVVJMO1xuICB2YXIgYmVmb3JlVGl0bGU7XG4gIHZhciBzdWJxdWV1ZTtcbiAgdmFyIGhhc01hcmtlcjtcbiAgdmFyIG1hcmtlcnM7XG4gIHZhciBpc0ltYWdlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHRpdGxlO1xuICB2YXIgZGVwdGg7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHVybDtcbiAgdmFyIG5vdztcbiAgdmFyIGV4aXQ7XG4gIHZhciBub2RlO1xuXG4gIC8qIERldGVjdCB3aGV0aGVyIHRoaXMgaXMgYW4gaW1hZ2UuICovXG4gIGlmIChjaGFyYWN0ZXIgPT09ICchJykge1xuICAgIGlzSW1hZ2UgPSB0cnVlO1xuICAgIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgfVxuXG4gIC8qIEVhdCB0aGUgb3BlbmluZy4gKi9cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gdGhpcyBpcyBhIGxpbmsgYW5kIHdl4oCZcmUgYWxyZWFkeSBpbnNpZGVcbiAgICogYSBsaW5rLiAqL1xuICBpZiAoIWlzSW1hZ2UgJiYgc2VsZi5pbkxpbmspIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIHF1ZXVlID0gJyc7XG4gIGluZGV4Kys7XG5cbiAgLyogRWF0IHRoZSBjb250ZW50LiAqL1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgZGVwdGggPSAwO1xuXG4gIG5vdy5jb2x1bW4gKz0gaW5kZXg7XG4gIG5vdy5vZmZzZXQgKz0gaW5kZXg7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICBzdWJxdWV1ZSA9IGNoYXJhY3RlcjtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVElDSykge1xuICAgICAgLyogSW5saW5lLWNvZGUgaW4gbGluayBjb250ZW50LiAqL1xuICAgICAgY291bnQgPSAxO1xuXG4gICAgICB3aGlsZSAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IENfVElDSykge1xuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3BlbmluZykge1xuICAgICAgICBvcGVuaW5nID0gY291bnQ7XG4gICAgICB9IGVsc2UgaWYgKGNvdW50ID49IG9wZW5pbmcpIHtcbiAgICAgICAgb3BlbmluZyA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAvKiBBbGxvdyBicmFja2V0cyB0byBiZSBlc2NhcGVkLiAqL1xuICAgICAgaW5kZXgrKztcbiAgICAgIHN1YnF1ZXVlICs9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgLyogSW4gR0ZNIG1vZGUsIGJyYWNrZXRzIGluIGNvZGUgc3RpbGwgY291bnQuXG4gICAgICogSW4gYWxsIG90aGVyIG1vZGVzLCB0aGV5IGRvbuKAmXQuICBUaGlzIGVtcHR5XG4gICAgICogYmxvY2sgcHJldmVudHMgdGhlIG5leHQgc3RhdGVtZW50cyBhcmVcbiAgICAgKiBlbnRlcmVkLiAqL1xuICAgIH0gZWxzZSBpZiAoKCFvcGVuaW5nIHx8IGdmbSkgJiYgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgICAgZGVwdGgrKztcbiAgICB9IGVsc2UgaWYgKCghb3BlbmluZyB8fCBnZm0pICYmIGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBpZiAoZGVwdGgpIHtcbiAgICAgICAgZGVwdGgtLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEFsbG93IHdoaXRlLXNwYWNlIGJldHdlZW4gY29udGVudCBhbmRcbiAgICAgICAgICogdXJsIGluIEdGTSBtb2RlLiAqL1xuICAgICAgICBpZiAoIXBlZGFudGljKSB7XG4gICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgICAgICAgICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBDX1BBUkVOX09QRU4pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBDX1BBUkVOX09QRU47XG4gICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgc3VicXVldWUgPSAnJztcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgLyogRWF0IHRoZSBjb250ZW50IGNsb3NpbmcuICovXG4gIGlmICghY2xvc2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29udGVudCA9IHF1ZXVlO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIHN1YnF1ZXVlO1xuICBpbmRleCsrO1xuXG4gIC8qIEVhdCB3aGl0ZS1zcGFjZS4gKi9cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICghd2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIC8qIEVhdCB0aGUgVVJMLiAqL1xuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICBtYXJrZXJzID0gY29tbW9ubWFyayA/IENPTU1PTk1BUktfTElOS19NQVJLRVJTIDogTElOS19NQVJLRVJTO1xuICBxdWV1ZSA9ICcnO1xuICBiZWZvcmVVUkwgPSBzdWJ2YWx1ZTtcblxuICBpZiAoY2hhcmFjdGVyID09PSBDX0xUKSB7XG4gICAgaW5kZXgrKztcbiAgICBiZWZvcmVVUkwgKz0gQ19MVDtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19HVCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbW1vbm1hcmsgJiYgY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfR1QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBDX0xUICsgcXVldWUgKyBDX0dUO1xuICAgIHVybCA9IHF1ZXVlO1xuICAgIGluZGV4Kys7XG4gIH0gZWxzZSB7XG4gICAgY2hhcmFjdGVyID0gbnVsbDtcbiAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoc3VicXVldWUgJiYgb3duLmNhbGwobWFya2VycywgY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgICBpZiAoIXBlZGFudGljKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX09QRU4pIHtcbiAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9DTE9TRSkge1xuICAgICAgICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlICs9IHN1YnF1ZXVlO1xuICAgICAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAgICAgcXVldWUgKz0gQ19CQUNLU0xBU0g7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgfVxuXG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgIHVybCA9IHF1ZXVlO1xuICAgIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICB9XG5cbiAgLyogRWF0IHdoaXRlLXNwYWNlLiAqL1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZTtcblxuICAvKiBFYXQgdGhlIHRpdGxlLiAqL1xuICBpZiAocXVldWUgJiYgb3duLmNhbGwobWFya2VycywgY2hhcmFjdGVyKSkge1xuICAgIGluZGV4Kys7XG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIHF1ZXVlID0gJyc7XG4gICAgbWFya2VyID0gbWFya2Vyc1tjaGFyYWN0ZXJdO1xuICAgIGJlZm9yZVRpdGxlID0gc3VidmFsdWU7XG5cbiAgICAvKiBJbiBjb21tb25tYXJrLW1vZGUsIHRoaW5ncyBhcmUgcHJldHR5IGVhc3k6IHRoZVxuICAgICAqIG1hcmtlciBjYW5ub3Qgb2NjdXIgaW5zaWRlIHRoZSB0aXRsZS5cbiAgICAgKlxuICAgICAqIE5vbi1jb21tb25tYXJrIGRvZXMsIGhvd2V2ZXIsIHN1cHBvcnQgbmVzdGVkXG4gICAgICogZGVsaW1pdGVycy4gKi9cbiAgICBpZiAoY29tbW9ubWFyaykge1xuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgICAgIHF1ZXVlICs9IENfQkFDS1NMQVNIO1xuICAgICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIH1cblxuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGl0bGUgPSBxdWV1ZTtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VicXVldWUgPSAnJztcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgaWYgKGhhc01hcmtlcikge1xuICAgICAgICAgICAgcXVldWUgKz0gbWFya2VyICsgc3VicXVldWU7XG4gICAgICAgICAgICBzdWJxdWV1ZSA9ICcnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGhhc01hcmtlciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIWhhc01hcmtlcikge1xuICAgICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fQ0xPU0UpIHtcbiAgICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZSArIG1hcmtlciArIHN1YnF1ZXVlO1xuICAgICAgICAgIHRpdGxlID0gcXVldWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHF1ZXVlICs9IG1hcmtlciArIHN1YnF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgICAgIHN1YnF1ZXVlID0gJyc7XG4gICAgICAgICAgaGFzTWFya2VyID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX1BBUkVOX0NMT1NFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBDX1BBUkVOX0NMT1NFO1xuXG4gIHVybCA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKHVybCksIGVhdChiZWZvcmVVUkwpLnRlc3QoKS5lbmQsIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pO1xuXG4gIGlmICh0aXRsZSkge1xuICAgIGJlZm9yZVRpdGxlID0gZWF0KGJlZm9yZVRpdGxlKS50ZXN0KCkuZW5kO1xuICAgIHRpdGxlID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodGl0bGUpLCBiZWZvcmVUaXRsZSk7XG4gIH1cblxuICBub2RlID0ge1xuICAgIHR5cGU6IGlzSW1hZ2UgPyAnaW1hZ2UnIDogJ2xpbmsnLFxuICAgIHRpdGxlOiB0aXRsZSB8fCBudWxsLFxuICAgIHVybDogdXJsXG4gIH07XG5cbiAgaWYgKGlzSW1hZ2UpIHtcbiAgICBub2RlLmFsdCA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKGNvbnRlbnQpLCBub3cpIHx8IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgZXhpdCA9IHNlbGYuZW50ZXJMaW5rKCk7XG4gICAgbm9kZS5jaGlsZHJlbiA9IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgbm93KTtcbiAgICBleGl0KCk7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKShub2RlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9saW5rJyk7XG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vdXRpbC9ub3JtYWxpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWZlcmVuY2U7XG5yZWZlcmVuY2UubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIFRfTElOSyA9ICdsaW5rJztcbnZhciBUX0lNQUdFID0gJ2ltYWdlJztcbnZhciBUX0ZPT1ROT1RFID0gJ2Zvb3Rub3RlJztcbnZhciBSRUZFUkVOQ0VfVFlQRV9TSE9SVENVVCA9ICdzaG9ydGN1dCc7XG52YXIgUkVGRVJFTkNFX1RZUEVfQ09MTEFQU0VEID0gJ2NvbGxhcHNlZCc7XG52YXIgUkVGRVJFTkNFX1RZUEVfRlVMTCA9ICdmdWxsJztcbnZhciBDX0NBUkVUID0gJ14nO1xudmFyIENfQkFDS1NMQVNIID0gJ1xcXFwnO1xudmFyIENfQlJBQ0tFVF9PUEVOID0gJ1snO1xudmFyIENfQlJBQ0tFVF9DTE9TRSA9ICddJztcblxuZnVuY3Rpb24gcmVmZXJlbmNlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMCk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgaW50cm8gPSAnJztcbiAgdmFyIHR5cGUgPSBUX0xJTks7XG4gIHZhciByZWZlcmVuY2VUeXBlID0gUkVGRVJFTkNFX1RZUEVfU0hPUlRDVVQ7XG4gIHZhciBjb250ZW50O1xuICB2YXIgaWRlbnRpZmllcjtcbiAgdmFyIG5vdztcbiAgdmFyIG5vZGU7XG4gIHZhciBleGl0O1xuICB2YXIgcXVldWU7XG4gIHZhciBicmFja2V0ZWQ7XG4gIHZhciBkZXB0aDtcblxuICAvKiBDaGVjayB3aGV0aGVyIHdl4oCZcmUgZWF0aW5nIGFuIGltYWdlLiAqL1xuICBpZiAoY2hhcmFjdGVyID09PSAnIScpIHtcbiAgICB0eXBlID0gVF9JTUFHRTtcbiAgICBpbnRybyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gIH1cblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfT1BFTikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIGludHJvICs9IGNoYXJhY3RlcjtcbiAgcXVldWUgPSAnJztcblxuICAvKiBDaGVjayB3aGV0aGVyIHdl4oCZcmUgZWF0aW5nIGEgZm9vdG5vdGUuICovXG4gIGlmIChzZWxmLm9wdGlvbnMuZm9vdG5vdGVzICYmIHZhbHVlLmNoYXJBdChpbmRleCkgPT09IENfQ0FSRVQpIHtcbiAgICAvKiBFeGl0IGlmIGAhW15gIGlzIGZvdW5kLCBzbyB0aGUgYCFgIHdpbGwgYmUgc2VlbiBhcyB0ZXh0IGFmdGVyIHRoaXMsXG4gICAgICogYW5kIHdl4oCZbGwgZW50ZXIgdGhpcyBmdW5jdGlvbiBhZ2FpbiB3aGVuIGBbXmAgaXMgZm91bmQuICovXG4gICAgaWYgKHR5cGUgPT09IFRfSU1BR0UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRybyArPSBDX0NBUkVUO1xuICAgIGluZGV4Kys7XG4gICAgdHlwZSA9IFRfRk9PVE5PVEU7XG4gIH1cblxuICAvKiBFYXQgdGhlIHRleHQuICovXG4gIGRlcHRoID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICAgIGJyYWNrZXRlZCA9IHRydWU7XG4gICAgICBkZXB0aCsrO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGlmICghZGVwdGgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRlcHRoLS07XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgIHF1ZXVlICs9IENfQkFDS1NMQVNIO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgc3VidmFsdWUgPSBxdWV1ZTtcbiAgY29udGVudCA9IHF1ZXVlO1xuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9DTE9TRSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAvKiBJbmxpbmUgZm9vdG5vdGVzIGNhbm5vdCBoYXZlIGFuIGlkZW50aWZpZXIuICovXG4gIGlmICh0eXBlICE9PSBUX0ZPT1ROT1RFICYmIGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICBpZGVudGlmaWVyID0gJyc7XG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9PUEVOIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgICBpZGVudGlmaWVyICs9IENfQkFDS1NMQVNIO1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGlkZW50aWZpZXIgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICByZWZlcmVuY2VUeXBlID0gaWRlbnRpZmllciA/IFJFRkVSRU5DRV9UWVBFX0ZVTEwgOiBSRUZFUkVOQ0VfVFlQRV9DT0xMQVBTRUQ7XG4gICAgICBxdWV1ZSArPSBpZGVudGlmaWVyICsgY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9IGVsc2Uge1xuICAgICAgaWRlbnRpZmllciA9ICcnO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgIHF1ZXVlID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWRlbnRpZmllciA9IGNvbnRlbnQ7XG4gIH1cblxuICAvKiBCcmFja2V0cyBjYW5ub3QgYmUgaW5zaWRlIHRoZSBpZGVudGlmaWVyLiAqL1xuICBpZiAocmVmZXJlbmNlVHlwZSAhPT0gUkVGRVJFTkNFX1RZUEVfRlVMTCAmJiBicmFja2V0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSA9IGludHJvICsgc3VidmFsdWU7XG5cbiAgaWYgKHR5cGUgPT09IFRfTElOSyAmJiBzZWxmLmluTGluaykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gVF9GT09UTk9URSAmJiBjb250ZW50LmluZGV4T2YoJyAnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgICB0eXBlOiAnZm9vdG5vdGUnLFxuICAgICAgY2hpbGRyZW46IHRoaXMudG9rZW5pemVJbmxpbmUoY29udGVudCwgZWF0Lm5vdygpKVxuICAgIH0pO1xuICB9XG5cbiAgbm93ID0gZWF0Lm5vdygpO1xuICBub3cuY29sdW1uICs9IGludHJvLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBpbnRyby5sZW5ndGg7XG4gIGlkZW50aWZpZXIgPSByZWZlcmVuY2VUeXBlID09PSBSRUZFUkVOQ0VfVFlQRV9GVUxMID8gaWRlbnRpZmllciA6IGNvbnRlbnQ7XG5cbiAgbm9kZSA9IHtcbiAgICB0eXBlOiB0eXBlICsgJ1JlZmVyZW5jZScsXG4gICAgaWRlbnRpZmllcjogbm9ybWFsaXplKGlkZW50aWZpZXIpXG4gIH07XG5cbiAgaWYgKHR5cGUgPT09IFRfTElOSyB8fCB0eXBlID09PSBUX0lNQUdFKSB7XG4gICAgbm9kZS5yZWZlcmVuY2VUeXBlID0gcmVmZXJlbmNlVHlwZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSBUX0xJTkspIHtcbiAgICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcbiAgICBub2RlLmNoaWxkcmVuID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBub3cpO1xuICAgIGV4aXQoKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBUX0lNQUdFKSB7XG4gICAgbm9kZS5hbHQgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZShjb250ZW50KSwgbm93KSB8fCBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkobm9kZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9zdHJvbmcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJvbmc7XG5zdHJvbmcubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIENfQVNURVJJU0sgPSAnKic7XG52YXIgQ19VTkRFUlNDT1JFID0gJ18nO1xuXG5mdW5jdGlvbiBzdHJvbmcoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHZhciBub3c7XG4gIHZhciBwZWRhbnRpYztcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBwcmV2O1xuXG4gIGlmIChcbiAgICAoY2hhcmFjdGVyICE9PSBDX0FTVEVSSVNLICYmIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFKSB8fFxuICAgIHZhbHVlLmNoYXJBdCgrK2luZGV4KSAhPT0gY2hhcmFjdGVyXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBlZGFudGljID0gc2VsZi5vcHRpb25zLnBlZGFudGljO1xuICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gIHN1YnZhbHVlID0gbWFya2VyICsgbWFya2VyO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIGluZGV4Kys7XG4gIHF1ZXVlID0gJyc7XG4gIGNoYXJhY3RlciA9ICcnO1xuXG4gIGlmIChwZWRhbnRpYyAmJiB3aGl0ZXNwYWNlKHZhbHVlLmNoYXJBdChpbmRleCkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgcHJldiA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBtYXJrZXIgJiZcbiAgICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBtYXJrZXIgJiZcbiAgICAgICghcGVkYW50aWMgfHwgIXdoaXRlc3BhY2UocHJldikpXG4gICAgKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAyKTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIGlmICghdHJpbShxdWV1ZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdyA9IGVhdC5ub3coKTtcbiAgICAgICAgbm93LmNvbHVtbiArPSAyO1xuICAgICAgICBub3cub2Zmc2V0ICs9IDI7XG5cbiAgICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSArIHF1ZXVlICsgc3VidmFsdWUpKHtcbiAgICAgICAgICB0eXBlOiAnc3Ryb25nJyxcbiAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShxdWV1ZSwgbm93KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBlZGFudGljICYmIGNoYXJhY3RlciA9PT0gJ1xcXFwnKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBhc3RlcmlzayA9IHZhbHVlLmluZGV4T2YoJyoqJywgZnJvbUluZGV4KTtcbiAgdmFyIHVuZGVyc2NvcmUgPSB2YWx1ZS5pbmRleE9mKCdfXycsIGZyb21JbmRleCk7XG5cbiAgaWYgKHVuZGVyc2NvcmUgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFzdGVyaXNrO1xuICB9XG5cbiAgaWYgKGFzdGVyaXNrID09PSAtMSkge1xuICAgIHJldHVybiB1bmRlcnNjb3JlO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVyc2NvcmUgPCBhc3RlcmlzayA/IHVuZGVyc2NvcmUgOiBhc3Rlcmlzaztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG52YXIgd29yZCA9IHJlcXVpcmUoJ2lzLXdvcmQtY2hhcmFjdGVyJyk7XG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2VtcGhhc2lzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW1waGFzaXM7XG5lbXBoYXNpcy5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgQ19BU1RFUklTSyA9ICcqJztcbnZhciBDX1VOREVSU0NPUkUgPSAnXyc7XG5cbmZ1bmN0aW9uIGVtcGhhc2lzKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICB2YXIgbm93O1xuICB2YXIgcGVkYW50aWM7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgcHJldjtcblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX0FTVEVSSVNLICYmIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWM7XG4gIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgaW5kZXgrKztcbiAgcXVldWUgPSAnJztcbiAgY2hhcmFjdGVyID0gJyc7XG5cbiAgaWYgKHBlZGFudGljICYmIHdoaXRlc3BhY2UodmFsdWUuY2hhckF0KGluZGV4KSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBwcmV2ID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIgJiYgKCFwZWRhbnRpYyB8fCAhd2hpdGVzcGFjZShwcmV2KSkpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIGlmICghdHJpbShxdWV1ZSkgfHwgcHJldiA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwZWRhbnRpYyAmJiBtYXJrZXIgPT09IENfVU5ERVJTQ09SRSAmJiB3b3JkKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICBxdWV1ZSArPSBtYXJrZXI7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdyA9IGVhdC5ub3coKTtcbiAgICAgICAgbm93LmNvbHVtbisrO1xuICAgICAgICBub3cub2Zmc2V0Kys7XG5cbiAgICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSArIHF1ZXVlICsgbWFya2VyKSh7XG4gICAgICAgICAgdHlwZTogJ2VtcGhhc2lzJyxcbiAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShxdWV1ZSwgbm93KVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gbWFya2VyO1xuICAgIH1cblxuICAgIGlmICghcGVkYW50aWMgJiYgY2hhcmFjdGVyID09PSAnXFxcXCcpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gd29yZENoYXJhY3RlclxuXG52YXIgZnJvbUNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG52YXIgcmUgPSAvXFx3L1xuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYSB3b3JkIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHdvcmRDaGFyYWN0ZXIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiByZS50ZXN0KFxuICAgIHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdudW1iZXInID8gZnJvbUNvZGUoY2hhcmFjdGVyKSA6IGNoYXJhY3Rlci5jaGFyQXQoMClcbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGFzdGVyaXNrID0gdmFsdWUuaW5kZXhPZignKicsIGZyb21JbmRleCk7XG4gIHZhciB1bmRlcnNjb3JlID0gdmFsdWUuaW5kZXhPZignXycsIGZyb21JbmRleCk7XG5cbiAgaWYgKHVuZGVyc2NvcmUgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFzdGVyaXNrO1xuICB9XG5cbiAgaWYgKGFzdGVyaXNrID09PSAtMSkge1xuICAgIHJldHVybiB1bmRlcnNjb3JlO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVyc2NvcmUgPCBhc3RlcmlzayA/IHVuZGVyc2NvcmUgOiBhc3Rlcmlzaztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9kZWxldGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpa2V0aHJvdWdoO1xuc3RyaWtldGhyb3VnaC5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgQ19USUxERSA9ICd+JztcbnZhciBET1VCTEUgPSAnfn4nO1xuXG5mdW5jdGlvbiBzdHJpa2V0aHJvdWdoKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjaGFyYWN0ZXIgPSAnJztcbiAgdmFyIHByZXZpb3VzID0gJyc7XG4gIHZhciBwcmVjZWRpbmcgPSAnJztcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBpbmRleDtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIG5vdztcblxuICBpZiAoXG4gICAgIXNlbGYub3B0aW9ucy5nZm0gfHxcbiAgICB2YWx1ZS5jaGFyQXQoMCkgIT09IENfVElMREUgfHxcbiAgICB2YWx1ZS5jaGFyQXQoMSkgIT09IENfVElMREUgfHxcbiAgICB3aGl0ZXNwYWNlKHZhbHVlLmNoYXJBdCgyKSlcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSAxO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgbm93LmNvbHVtbiArPSAyO1xuICBub3cub2Zmc2V0ICs9IDI7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBDX1RJTERFICYmXG4gICAgICBwcmV2aW91cyA9PT0gQ19USUxERSAmJlxuICAgICAgKCFwcmVjZWRpbmcgfHwgIXdoaXRlc3BhY2UocHJlY2VkaW5nKSlcbiAgICApIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlYXQoRE9VQkxFICsgc3VidmFsdWUgKyBET1VCTEUpKHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKHN1YnZhbHVlLCBub3cpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBwcmV2aW91cztcbiAgICBwcmVjZWRpbmcgPSBwcmV2aW91cztcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ35+JywgZnJvbUluZGV4KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9jb2RlLWlubGluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlubGluZUNvZGU7XG5pbmxpbmVDb2RlLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBDX1RJQ0sgPSAnYCc7XG5cbi8qIFRva2VuaXNlIGlubGluZSBjb2RlLiAqL1xuZnVuY3Rpb24gaW5saW5lQ29kZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHF1ZXVlID0gJyc7XG4gIHZhciB0aWNrUXVldWUgPSAnJztcbiAgdmFyIGNvbnRlbnRRdWV1ZTtcbiAgdmFyIHN1YnF1ZXVlO1xuICB2YXIgY291bnQ7XG4gIHZhciBvcGVuaW5nQ291bnQ7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGZvdW5kO1xuICB2YXIgbmV4dDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19USUNLKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBDX1RJQ0s7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghcXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHF1ZXVlO1xuICBvcGVuaW5nQ291bnQgPSBpbmRleDtcbiAgcXVldWUgPSAnJztcbiAgbmV4dCA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIGNvdW50ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSBuZXh0O1xuICAgIG5leHQgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVElDSykge1xuICAgICAgY291bnQrKztcbiAgICAgIHRpY2tRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBpZiAoY291bnQgJiYgbmV4dCAhPT0gQ19USUNLKSB7XG4gICAgICBpZiAoY291bnQgPT09IG9wZW5pbmdDb3VudCkge1xuICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZSArIHRpY2tRdWV1ZTtcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gdGlja1F1ZXVlO1xuICAgICAgdGlja1F1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghZm91bmQpIHtcbiAgICBpZiAob3BlbmluZ0NvdW50ICUgMiAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHF1ZXVlID0gJyc7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnRlbnRRdWV1ZSA9ICcnO1xuICBzdWJxdWV1ZSA9ICcnO1xuICBsZW5ndGggPSBxdWV1ZS5sZW5ndGg7XG4gIGluZGV4ID0gLTE7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSBxdWV1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN1YnF1ZXVlKSB7XG4gICAgICBpZiAoY29udGVudFF1ZXVlKSB7XG4gICAgICAgIGNvbnRlbnRRdWV1ZSArPSBzdWJxdWV1ZTtcbiAgICAgIH1cblxuICAgICAgc3VicXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBjb250ZW50UXVldWUgKz0gY2hhcmFjdGVyO1xuICB9XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgIHR5cGU6ICdpbmxpbmVDb2RlJyxcbiAgICB2YWx1ZTogY29udGVudFF1ZXVlXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ2AnLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2JyZWFrJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaGFyZEJyZWFrO1xuaGFyZEJyZWFrLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBNSU5fQlJFQUtfTEVOR1RIID0gMjtcblxuZnVuY3Rpb24gaGFyZEJyZWFrKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIHF1ZXVlID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgIGlmIChpbmRleCA8IE1JTl9CUkVBS19MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICBpZiAoc2lsZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG5cbiAgICAgIHJldHVybiBlYXQocXVldWUpKHt0eXBlOiAnYnJlYWsnfSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gJyAnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nLCBmcm9tSW5kZXgpO1xuXG4gIHdoaWxlIChpbmRleCA+IGZyb21JbmRleCkge1xuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXggLSAxKSAhPT0gJyAnKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbmRleC0tO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRleHQ7XG5cbmZ1bmN0aW9uIHRleHQoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG1ldGhvZHM7XG4gIHZhciB0b2tlbml6ZXJzO1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIHBvc2l0aW9uO1xuICB2YXIgdG9rZW5pemVyO1xuICB2YXIgbmFtZTtcbiAgdmFyIG1pbjtcbiAgdmFyIG5vdztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG1ldGhvZHMgPSBzZWxmLmlubGluZU1ldGhvZHM7XG4gIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICB0b2tlbml6ZXJzID0gc2VsZi5pbmxpbmVUb2tlbml6ZXJzO1xuICBpbmRleCA9IC0xO1xuICBtaW4gPSB2YWx1ZS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBuYW1lID0gbWV0aG9kc1tpbmRleF07XG5cbiAgICBpZiAobmFtZSA9PT0gJ3RleHQnIHx8ICF0b2tlbml6ZXJzW25hbWVdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB0b2tlbml6ZXIgPSB0b2tlbml6ZXJzW25hbWVdLmxvY2F0b3I7XG5cbiAgICBpZiAoIXRva2VuaXplcikge1xuICAgICAgZWF0LmZpbGUuZmFpbCgnTWlzc2luZyBsb2NhdG9yOiBgJyArIG5hbWUgKyAnYCcpO1xuICAgIH1cblxuICAgIHBvc2l0aW9uID0gdG9rZW5pemVyLmNhbGwoc2VsZiwgdmFsdWUsIDEpO1xuXG4gICAgaWYgKHBvc2l0aW9uICE9PSAtMSAmJiBwb3NpdGlvbiA8IG1pbikge1xuICAgICAgbWluID0gcG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBtaW4pO1xuICBub3cgPSBlYXQubm93KCk7XG5cbiAgc2VsZi5kZWNvZGUoc3VidmFsdWUsIG5vdywgZnVuY3Rpb24gKGNvbnRlbnQsIHBvc2l0aW9uLCBzb3VyY2UpIHtcbiAgICBlYXQoc291cmNlIHx8IGNvbnRlbnQpKHtcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiBjb250ZW50XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJ2YXIgdmlzaXRXaXRoUGFyZW50cyA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cycpO1xuXG5mdW5jdGlvbiBhZGRMaXN0TWV0YWRhdGEoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYXN0KSB7XG4gICAgdmlzaXRXaXRoUGFyZW50cyhhc3QsICdsaXN0JywgZnVuY3Rpb24gKGxpc3ROb2RlLCBwYXJlbnRzKSB7XG4gICAgICB2YXIgZGVwdGggPSAwLCBpLCBuO1xuICAgICAgZm9yIChpID0gMCwgbiA9IHBhcmVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJlbnRzW2ldLnR5cGUgPT09ICdsaXN0JykgZGVwdGggKz0gMTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDAsIG4gPSBsaXN0Tm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbGlzdE5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgIGNoaWxkLmluZGV4ID0gaTtcbiAgICAgICAgY2hpbGQub3JkZXJlZCA9IGxpc3ROb2RlLm9yZGVyZWQ7XG4gICAgICB9XG4gICAgICBsaXN0Tm9kZS5kZXB0aCA9IGRlcHRoO1xuICAgIH0pO1xuICAgIHJldHVybiBhc3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRkTGlzdE1ldGFkYXRhO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbi8qIEV4cG9zZS4gKi9cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRQYXJlbnRzXG5cbi8qIFZpc2l0LiAqL1xuZnVuY3Rpb24gdmlzaXRQYXJlbnRzKHRyZWUsIHR5cGUsIHZpc2l0b3IpIHtcbiAgdmFyIHN0YWNrID0gW11cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2aXNpdG9yID0gdHlwZVxuICAgIHR5cGUgPSBudWxsXG4gIH1cblxuICBvbmUodHJlZSlcblxuICAvKiBWaXNpdCBhIHNpbmdsZSBub2RlLiAqL1xuICBmdW5jdGlvbiBvbmUobm9kZSkge1xuICAgIHZhciByZXN1bHRcblxuICAgIGlmICghdHlwZSB8fCBub2RlLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgIHJlc3VsdCA9IHZpc2l0b3Iobm9kZSwgc3RhY2suY29uY2F0KCkpXG4gICAgfVxuXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgcmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGFsbChub2RlLmNoaWxkcmVuLCBub2RlKVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qIFZpc2l0IGNoaWxkcmVuIGluIGBwYXJlbnRgLiAqL1xuICBmdW5jdGlvbiBhbGwoY2hpbGRyZW4sIHBhcmVudCkge1xuICAgIHZhciBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBjaGlsZFxuXG4gICAgc3RhY2sucHVzaChwYXJlbnQpXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpbmRleF1cblxuICAgICAgaWYgKGNoaWxkICYmIG9uZShjaGlsZCkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIHN0YWNrLnBvcCgpXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBOYWl2ZSwgc2ltcGxlIHBsdWdpbiB0byBtYXRjaCBpbmxpbmUgbm9kZXMgd2l0aG91dCBhdHRyaWJ1dGVzXG4gKiBUaGlzIGFsbG93cyBzYXkgPHN0cm9uZz5mb288L3N0cm9uZz4sIGJ1dCBub3QgPHN0cm9uZyBjbGFzcz1cInZlcnlcIj5mb288L3N0cm9uZz5cbiAqIEZvciBwcm9wZXIgSFRNTCBzdXBwb3J0LCB5b3UnbGwgd2FudCBhIGRpZmZlcmVudCBwbHVnaW5cbiAqKi9cbnZhciB2aXNpdCA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQnKTtcblxudmFyIHR5cGUgPSAndmlydHVhbEh0bWwnO1xudmFyIHNlbGZDbG9zaW5nUmUgPSAvXjwoYXJlYXxiYXNlfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8a2V5Z2VufGxpbmt8bWV0YXxwYXJhbXxzb3VyY2V8dHJhY2t8d2JyKVxccypcXC8/PiQvaTtcbnZhciBzaW1wbGVUYWdSZSA9IC9ePChcXC8/KShbYS16XSspXFxzKj4kLztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodHJlZSkge1xuICB2YXIgb3BlbjtcbiAgdmFyIGN1cnJlbnRQYXJlbnQ7XG4gIHZpc2l0KHRyZWUsICdodG1sJywgZnVuY3Rpb24gKG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAoY3VycmVudFBhcmVudCAhPT0gcGFyZW50KSB7XG4gICAgICBvcGVuID0gW107XG4gICAgICBjdXJyZW50UGFyZW50ID0gcGFyZW50O1xuICAgIH1cblxuICAgIHZhciBzZWxmQ2xvc2luZyA9IGdldFNlbGZDbG9zaW5nKG5vZGUpO1xuXG4gICAgaWYgKHNlbGZDbG9zaW5nKSB7XG4gICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHRhZzogc2VsZkNsb3NpbmcsXG4gICAgICAgIHBvc2l0aW9uOiBub2RlLnBvc2l0aW9uXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50ID0gZ2V0U2ltcGxlVGFnKG5vZGUsIHBhcmVudCk7XG5cbiAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGluZyA9IGZpbmRBbmRQdWxsKG9wZW4sIGN1cnJlbnQudGFnKTtcblxuICAgIGlmIChtYXRjaGluZykge1xuICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgdmlydHVhbChjdXJyZW50LCBtYXRjaGluZywgcGFyZW50KSk7XG4gICAgfSBlbHNlIGlmICghY3VycmVudC5vcGVuaW5nKSB7XG4gICAgICBvcGVuLnB1c2goY3VycmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIHRydWUgLy8gSXRlcmF0ZSBpbiByZXZlcnNlXG4gICk7XG4gIHJldHVybiB0cmVlO1xufTtcblxuZnVuY3Rpb24gZmluZEFuZFB1bGwob3BlbiwgbWF0Y2hpbmdUYWcpIHtcbiAgdmFyIGkgPSBvcGVuLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKG9wZW5baV0udGFnID09PSBtYXRjaGluZ1RhZykge1xuICAgICAgcmV0dXJuIG9wZW4uc3BsaWNlKGksIDEpWzBdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0U2ltcGxlVGFnKG5vZGUsIHBhcmVudCkge1xuICB2YXIgbWF0Y2ggPSBub2RlLnZhbHVlLm1hdGNoKHNpbXBsZVRhZ1JlKTtcbiAgcmV0dXJuIG1hdGNoID8ge1xuICAgIHRhZzogbWF0Y2hbMl0sXG4gICAgb3BlbmluZzogIW1hdGNoWzFdLFxuICAgIG5vZGU6IG5vZGVcbiAgfSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxmQ2xvc2luZyhub2RlKSB7XG4gIHZhciBtYXRjaCA9IG5vZGUudmFsdWUubWF0Y2goc2VsZkNsb3NpbmdSZSk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHZpcnR1YWwoZnJvbU5vZGUsIHRvTm9kZSwgcGFyZW50KSB7XG4gIHZhciBmcm9tSW5kZXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihmcm9tTm9kZS5ub2RlKTtcbiAgdmFyIHRvSW5kZXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0b05vZGUubm9kZSk7XG4gIHZhciBleHRyYWN0ZWQgPSBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGZyb21JbmRleCwgdG9JbmRleCAtIGZyb21JbmRleCArIDEpO1xuICB2YXIgY2hpbGRyZW4gPSBleHRyYWN0ZWQuc2xpY2UoMSwgLTEpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHRhZzogZnJvbU5vZGUudGFnLFxuICAgIHBvc2l0aW9uOiB7XG4gICAgICBzdGFydDogZnJvbU5vZGUubm9kZS5wb3NpdGlvbi5zdGFydCxcbiAgICAgIGVuZDogdG9Ob2RlLm5vZGUucG9zaXRpb24uZW5kLFxuICAgICAgaW5kZW50OiBbXVxuICAgIH1cbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpO1xuXG5leHBvcnRzLm9mVHlwZSA9IGZ1bmN0aW9uICh0eXBlcywgbW9kZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICByZXR1cm4gdmlzaXQobm9kZSwgdHlwZSwgZGlzYWxsb3csIHRydWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRpc2FsbG93KG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB1bnRhbmdsZShub2RlLCBpbmRleCwgcGFyZW50LCBtb2RlKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMuaWZOb3RNYXRjaCA9IGZ1bmN0aW9uIChhbGxvd05vZGUsIG1vZGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmlzaXQobm9kZSwgZGlzYWxsb3csIHRydWUpO1xuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGRpc2FsbG93KG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50ICYmICFhbGxvd05vZGUobm9kZSwgaW5kZXgsIHBhcmVudCkpIHtcbiAgICAgIHVudGFuZ2xlKG5vZGUsIGluZGV4LCBwYXJlbnQsIG1vZGUpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gdW50YW5nbGUobm9kZSwgaW5kZXgsIHBhcmVudCwgbW9kZSkge1xuICBpZiAobW9kZSA9PT0gJ3JlbW92ZScpIHtcbiAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgfSBlbHNlIGlmIChtb2RlID09PSAndW53cmFwJykge1xuICAgIHZhciBhcmdzID0gW2luZGV4LCAxXTtcblxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQobm9kZS5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShwYXJlbnQuY2hpbGRyZW4sIGFyZ3MpO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xuXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbnZhciBkZWZhdWx0Tm9kZVBvc2l0aW9uID0ge1xuICBzdGFydDoge1xuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAxLFxuICAgIG9mZnNldDogMFxuICB9LFxuICBlbmQ6IHtcbiAgICBsaW5lOiAxLFxuICAgIGNvbHVtbjogMSxcbiAgICBvZmZzZXQ6IDBcbiAgfVxufTtcblxuZnVuY3Rpb24gYXN0VG9SZWFjdChub2RlLCBvcHRpb25zKSB7XG4gIHZhciBwYXJlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICB2YXIgaW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gIHZhciByZW5kZXJlciA9IG9wdGlvbnMucmVuZGVyZXJzW25vZGUudHlwZV07IC8vIG5vZGVzIGdlbmVyYXRlZCBieSBwbHVnaW5zIG1heSBub3QgaGF2ZSBwb3NpdGlvbiBkYXRhXG4gIC8vIG11Y2ggb2YgdGhlIGNvZGUgYWZ0ZXIgdGhpcyBwb2ludCB3aWxsIGF0dGVtcHQgdG8gYWNjZXNzIHByb3BlcnRpZXMgb2YgdGhlIG5vZGUucG9zaXRpb25cbiAgLy8gdGhpcyB3aWxsIHNldCB0aGUgbm9kZSBwb3NpdGlvbiB0byB0aGUgcGFyZW50IG5vZGUncyBwb3NpdGlvbiB0byBwcmV2ZW50IGVycm9yc1xuXG4gIGlmIChub2RlLnBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBub2RlLnBvc2l0aW9uID0gcGFyZW50Lm5vZGUgJiYgcGFyZW50Lm5vZGUucG9zaXRpb24gfHwgZGVmYXVsdE5vZGVQb3NpdGlvbjtcbiAgfVxuXG4gIHZhciBwb3MgPSBub2RlLnBvc2l0aW9uLnN0YXJ0O1xuICB2YXIga2V5ID0gW25vZGUudHlwZSwgcG9zLmxpbmUsIHBvcy5jb2x1bW4sIGluZGV4XS5qb2luKCctJyk7XG5cbiAgaWYgKCFSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShyZW5kZXJlcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZW5kZXJlciBmb3IgdHlwZSBgXCIuY29uY2F0KG5vZGUudHlwZSwgXCJgIG5vdCBkZWZpbmVkIG9yIGlzIG5vdCByZW5kZXJhYmxlXCIpKTtcbiAgfVxuXG4gIHZhciBub2RlUHJvcHMgPSBnZXROb2RlUHJvcHMobm9kZSwga2V5LCBvcHRpb25zLCByZW5kZXJlciwgcGFyZW50LCBpbmRleCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHJlbmRlcmVyLCBub2RlUHJvcHMsIG5vZGVQcm9wcy5jaGlsZHJlbiB8fCByZXNvbHZlQ2hpbGRyZW4oKSB8fCB1bmRlZmluZWQpO1xuXG4gIGZ1bmN0aW9uIHJlc29sdmVDaGlsZHJlbigpIHtcbiAgICByZXR1cm4gbm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGROb2RlLCBpKSB7XG4gICAgICByZXR1cm4gYXN0VG9SZWFjdChjaGlsZE5vZGUsIG9wdGlvbnMsIHtcbiAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgcHJvcHM6IG5vZGVQcm9wc1xuICAgICAgfSwgaSk7XG4gICAgfSk7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXMsIGNvbXBsZXhpdHlcblxuXG5mdW5jdGlvbiBnZXROb2RlUHJvcHMobm9kZSwga2V5LCBvcHRzLCByZW5kZXJlciwgcGFyZW50LCBpbmRleCkge1xuICB2YXIgcHJvcHMgPSB7XG4gICAga2V5OiBrZXlcbiAgfTtcbiAgdmFyIGlzVGFnUmVuZGVyZXIgPSB0eXBlb2YgcmVuZGVyZXIgPT09ICdzdHJpbmcnOyAvLyBgc291cmNlUG9zYCBpcyB0cnVlIGlmIHRoZSB1c2VyIHdhbnRzIHNvdXJjZSBpbmZvcm1hdGlvbiAobGluZS9jb2x1bW4gaW5mbyBmcm9tIG1hcmtkb3duIHNvdXJjZSlcblxuICBpZiAob3B0cy5zb3VyY2VQb3MgJiYgbm9kZS5wb3NpdGlvbikge1xuICAgIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID0gZmxhdHRlblBvc2l0aW9uKG5vZGUucG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKG9wdHMucmF3U291cmNlUG9zICYmICFpc1RhZ1JlbmRlcmVyKSB7XG4gICAgcHJvcHMuc291cmNlUG9zaXRpb24gPSBub2RlLnBvc2l0aW9uO1xuICB9IC8vIElmIGBpbmNsdWRlTm9kZUluZGV4YCBpcyB0cnVlLCBwYXNzIG5vZGUgaW5kZXggaW5mbyB0byBhbGwgbm9uLXRhZyByZW5kZXJlcnNcblxuXG4gIGlmIChvcHRzLmluY2x1ZGVOb2RlSW5kZXggJiYgcGFyZW50Lm5vZGUgJiYgcGFyZW50Lm5vZGUuY2hpbGRyZW4gJiYgIWlzVGFnUmVuZGVyZXIpIHtcbiAgICBwcm9wcy5pbmRleCA9IHBhcmVudC5ub2RlLmNoaWxkcmVuLmluZGV4T2Yobm9kZSk7XG4gICAgcHJvcHMucGFyZW50Q2hpbGRDb3VudCA9IHBhcmVudC5ub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgfVxuXG4gIHZhciByZWYgPSBub2RlLmlkZW50aWZpZXIgIT09IG51bGwgJiYgbm9kZS5pZGVudGlmaWVyICE9PSB1bmRlZmluZWQgPyBvcHRzLmRlZmluaXRpb25zW25vZGUuaWRlbnRpZmllcl0gfHwge30gOiBudWxsO1xuXG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSAncm9vdCc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogb3B0cy5jbGFzc05hbWVcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0ZXh0JzpcbiAgICAgIHByb3BzLm5vZGVLZXkgPSBrZXk7XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IG5vZGUudmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hlYWRpbmcnOlxuICAgICAgcHJvcHMubGV2ZWwgPSBub2RlLmRlcHRoO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaXN0JzpcbiAgICAgIHByb3BzLnN0YXJ0ID0gbm9kZS5zdGFydDtcbiAgICAgIHByb3BzLm9yZGVyZWQgPSBub2RlLm9yZGVyZWQ7XG4gICAgICBwcm9wcy50aWdodCA9ICFub2RlLmxvb3NlO1xuICAgICAgcHJvcHMuZGVwdGggPSBub2RlLmRlcHRoO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaXN0SXRlbSc6XG4gICAgICBwcm9wcy5jaGVja2VkID0gbm9kZS5jaGVja2VkO1xuICAgICAgcHJvcHMudGlnaHQgPSAhbm9kZS5sb29zZTtcbiAgICAgIHByb3BzLm9yZGVyZWQgPSBub2RlLm9yZGVyZWQ7XG4gICAgICBwcm9wcy5pbmRleCA9IG5vZGUuaW5kZXg7XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IGdldExpc3RJdGVtQ2hpbGRyZW4obm9kZSwgcGFyZW50KS5tYXAoZnVuY3Rpb24gKGNoaWxkTm9kZSwgaSkge1xuICAgICAgICByZXR1cm4gYXN0VG9SZWFjdChjaGlsZE5vZGUsIG9wdHMsIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIHByb3BzOiBwcm9wc1xuICAgICAgICB9LCBpKTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkZWZpbml0aW9uJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgaWRlbnRpZmllcjogbm9kZS5pZGVudGlmaWVyLFxuICAgICAgICB0aXRsZTogbm9kZS50aXRsZSxcbiAgICAgICAgdXJsOiBub2RlLnVybFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2NvZGUnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBsYW5ndWFnZTogbm9kZS5sYW5nICYmIG5vZGUubGFuZy5zcGxpdCgvXFxzLywgMSlbMF1cbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbmxpbmVDb2RlJzpcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gbm9kZS52YWx1ZTtcbiAgICAgIHByb3BzLmlubGluZSA9IHRydWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICB0aXRsZTogbm9kZS50aXRsZSB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRhcmdldDogdHlwZW9mIG9wdHMubGlua1RhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMubGlua1RhcmdldChub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSkgOiBvcHRzLmxpbmtUYXJnZXQsXG4gICAgICAgIGhyZWY6IG9wdHMudHJhbnNmb3JtTGlua1VyaSA/IG9wdHMudHJhbnNmb3JtTGlua1VyaShub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSkgOiBub2RlLnVybFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgYWx0OiBub2RlLmFsdCB8fCB1bmRlZmluZWQsXG4gICAgICAgIHRpdGxlOiBub2RlLnRpdGxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgc3JjOiBvcHRzLnRyYW5zZm9ybUltYWdlVXJpID8gb3B0cy50cmFuc2Zvcm1JbWFnZVVyaShub2RlLnVybCwgbm9kZS5jaGlsZHJlbiwgbm9kZS50aXRsZSwgbm9kZS5hbHQpIDogbm9kZS51cmxcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdsaW5rUmVmZXJlbmNlJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHh0ZW5kKHJlZiwge1xuICAgICAgICBocmVmOiBvcHRzLnRyYW5zZm9ybUxpbmtVcmkgPyBvcHRzLnRyYW5zZm9ybUxpbmtVcmkocmVmLmhyZWYpIDogcmVmLmhyZWZcbiAgICAgIH0pKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW1hZ2VSZWZlcmVuY2UnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBzcmM6IG9wdHMudHJhbnNmb3JtSW1hZ2VVcmkgJiYgcmVmLmhyZWYgPyBvcHRzLnRyYW5zZm9ybUltYWdlVXJpKHJlZi5ocmVmLCBub2RlLmNoaWxkcmVuLCByZWYudGl0bGUsIG5vZGUuYWx0KSA6IHJlZi5ocmVmLFxuICAgICAgICB0aXRsZTogcmVmLnRpdGxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgYWx0OiBub2RlLmFsdCB8fCB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0YWJsZSc6XG4gICAgY2FzZSAndGFibGVIZWFkJzpcbiAgICBjYXNlICd0YWJsZUJvZHknOlxuICAgICAgcHJvcHMuY29sdW1uQWxpZ25tZW50ID0gbm9kZS5hbGlnbjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGFibGVSb3cnOlxuICAgICAgcHJvcHMuaXNIZWFkZXIgPSBwYXJlbnQubm9kZS50eXBlID09PSAndGFibGVIZWFkJztcbiAgICAgIHByb3BzLmNvbHVtbkFsaWdubWVudCA9IHBhcmVudC5wcm9wcy5jb2x1bW5BbGlnbm1lbnQ7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RhYmxlQ2VsbCc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIGlzSGVhZGVyOiBwYXJlbnQucHJvcHMuaXNIZWFkZXIsXG4gICAgICAgIGFsaWduOiBwYXJlbnQucHJvcHMuY29sdW1uQWxpZ25tZW50W2luZGV4XVxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3ZpcnR1YWxIdG1sJzpcbiAgICAgIHByb3BzLnRhZyA9IG5vZGUudGFnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdodG1sJzpcbiAgICAgIC8vIEB0b2RvIGZpbmQgYSBiZXR0ZXIgd2F5IHRoYW4gdGhpc1xuICAgICAgcHJvcHMuaXNCbG9jayA9IG5vZGUucG9zaXRpb24uc3RhcnQubGluZSAhPT0gbm9kZS5wb3NpdGlvbi5lbmQubGluZTtcbiAgICAgIHByb3BzLmVzY2FwZUh0bWwgPSBvcHRzLmVzY2FwZUh0bWw7XG4gICAgICBwcm9wcy5za2lwSHRtbCA9IG9wdHMuc2tpcEh0bWw7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BhcnNlZEh0bWwnOlxuICAgICAge1xuICAgICAgICB2YXIgcGFyc2VkQ2hpbGRyZW47XG5cbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICBwYXJzZWRDaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzdFRvUmVhY3QoY2hpbGQsIG9wdHMsIHtcbiAgICAgICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgICAgICB9LCBpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3BzLmVzY2FwZUh0bWwgPSBvcHRzLmVzY2FwZUh0bWw7XG4gICAgICAgIHByb3BzLnNraXBIdG1sID0gb3B0cy5za2lwSHRtbDtcbiAgICAgICAgcHJvcHMuZWxlbWVudCA9IG1lcmdlTm9kZUNoaWxkcmVuKG5vZGUsIHBhcnNlZENoaWxkcmVuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywgeHRlbmQobm9kZSwge1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIHBvc2l0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWRcbiAgICAgIH0pKTtcbiAgfVxuXG4gIGlmICghaXNUYWdSZW5kZXJlciAmJiBub2RlLnZhbHVlKSB7XG4gICAgcHJvcHMudmFsdWUgPSBub2RlLnZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25EZWZpbmVkKHRhcmdldCwgYXR0cnMpIHtcbiAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKHR5cGVvZiBhdHRyc1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGFyZ2V0W2tleV0gPSBhdHRyc1trZXldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZU5vZGVDaGlsZHJlbihub2RlLCBwYXJzZWRDaGlsZHJlbikge1xuICB2YXIgZWwgPSBub2RlLmVsZW1lbnQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgdmFyIEZyYWdtZW50ID0gUmVhY3QuRnJhZ21lbnQgfHwgJ2Rpdic7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIGVsKTtcbiAgfVxuXG4gIGlmIChlbC5wcm9wcy5jaGlsZHJlbiB8fCBwYXJzZWRDaGlsZHJlbikge1xuICAgIHZhciBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoZWwucHJvcHMuY2hpbGRyZW4pLmNvbmNhdChwYXJzZWRDaGlsZHJlbik7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChlbCwgbnVsbCwgY2hpbGRyZW4pO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChlbCwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Qb3NpdGlvbihwb3MpIHtcbiAgcmV0dXJuIFtwb3Muc3RhcnQubGluZSwgJzonLCBwb3Muc3RhcnQuY29sdW1uLCAnLScsIHBvcy5lbmQubGluZSwgJzonLCBwb3MuZW5kLmNvbHVtbl0ubWFwKFN0cmluZykuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGdldExpc3RJdGVtQ2hpbGRyZW4obm9kZSwgcGFyZW50KSB7XG4gIGlmIChub2RlLmxvb3NlKSB7XG4gICAgcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gIH1cblxuICBpZiAocGFyZW50Lm5vZGUgJiYgbm9kZS5pbmRleCA+IDAgJiYgcGFyZW50Lm5vZGUuY2hpbGRyZW5bbm9kZS5pbmRleCAtIDFdLmxvb3NlKSB7XG4gICAgcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gIH1cblxuICByZXR1cm4gdW53cmFwUGFyYWdyYXBocyhub2RlKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwUGFyYWdyYXBocyhub2RlKSB7XG4gIHJldHVybiBub2RlLmNoaWxkcmVuLnJlZHVjZShmdW5jdGlvbiAoYXJyYXksIGNoaWxkKSB7XG4gICAgcmV0dXJuIGFycmF5LmNvbmNhdChjaGlsZC50eXBlID09PSAncGFyYWdyYXBoJyA/IGNoaWxkLmNoaWxkcmVuIHx8IFtdIDogW2NoaWxkXSk7XG4gIH0sIFtdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3RUb1JlYWN0OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZpc2l0KG5vZGUsICd0YWJsZScsIHdyYXApO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbmZ1bmN0aW9uIHdyYXAodGFibGUpIHtcbiAgdmFyIGNoaWxkcmVuID0gdGFibGUuY2hpbGRyZW47XG4gIHRhYmxlLmNoaWxkcmVuID0gW3tcbiAgICB0eXBlOiAndGFibGVIZWFkJyxcbiAgICBhbGlnbjogdGFibGUuYWxpZ24sXG4gICAgY2hpbGRyZW46IFtjaGlsZHJlblswXV0sXG4gICAgcG9zaXRpb246IGNoaWxkcmVuWzBdLnBvc2l0aW9uXG4gIH1dO1xuXG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgdGFibGUuY2hpbGRyZW4ucHVzaCh7XG4gICAgICB0eXBlOiAndGFibGVCb2R5JyxcbiAgICAgIGFsaWduOiB0YWJsZS5hbGlnbixcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbi5zbGljZSgxKSxcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHN0YXJ0OiBjaGlsZHJlblsxXS5wb3NpdGlvbi5zdGFydCxcbiAgICAgICAgZW5kOiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS5wb3NpdGlvbi5lbmRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXREZWZpbml0aW9ucyhub2RlKSB7XG4gIHZhciBkZWZzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIChub2RlLmNoaWxkcmVuIHx8IFtdKS5yZWR1Y2UoZnVuY3Rpb24gKGRlZmluaXRpb25zLCBjaGlsZCkge1xuICAgIGlmIChjaGlsZC50eXBlID09PSAnZGVmaW5pdGlvbicpIHtcbiAgICAgIGRlZmluaXRpb25zW2NoaWxkLmlkZW50aWZpZXJdID0ge1xuICAgICAgICBocmVmOiBjaGlsZC51cmwsXG4gICAgICAgIHRpdGxlOiBjaGlsZC50aXRsZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0RGVmaW5pdGlvbnMoY2hpbGQsIGRlZmluaXRpb25zKTtcbiAgfSwgZGVmcyk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcHJvdG9jb2xzID0gWydodHRwJywgJ2h0dHBzJywgJ21haWx0bycsICd0ZWwnXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1cmlUcmFuc2Zvcm1lcih1cmkpIHtcbiAgdmFyIHVybCA9ICh1cmkgfHwgJycpLnRyaW0oKTtcbiAgdmFyIGZpcnN0ID0gdXJsLmNoYXJBdCgwKTtcblxuICBpZiAoZmlyc3QgPT09ICcjJyB8fCBmaXJzdCA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBjb2xvbiA9IHVybC5pbmRleE9mKCc6Jyk7XG5cbiAgaWYgKGNvbG9uID09PSAtMSkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcHJvdG9jb2xzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gLTE7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgcHJvdG9jb2wgPSBwcm90b2NvbHNbaW5kZXhdO1xuXG4gICAgaWYgKGNvbG9uID09PSBwcm90b2NvbC5sZW5ndGggJiYgdXJsLnNsaWNlKDAsIHByb3RvY29sLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gcHJvdG9jb2wpIHtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSB1cmwuaW5kZXhPZignPycpO1xuXG4gIGlmIChpbmRleCAhPT0gLTEgJiYgY29sb24gPiBpbmRleCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBjb2xvbiA+IGluZGV4KSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2NyaXB0LXVybFxuXG5cbiAgcmV0dXJuICdqYXZhc2NyaXB0OnZvaWQoMCknO1xufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzLCByZWFjdC9uby1tdWx0aS1jb21wICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBzdXBwb3J0c1N0cmluZ1JlbmRlciA9IHBhcnNlSW50KChSZWFjdC52ZXJzaW9uIHx8ICcxNicpLnNsaWNlKDAsIDIpLCAxMCkgPj0gMTY7XG52YXIgY3JlYXRlRWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYnJlYWs6ICdicicsXG4gIHBhcmFncmFwaDogJ3AnLFxuICBlbXBoYXNpczogJ2VtJyxcbiAgc3Ryb25nOiAnc3Ryb25nJyxcbiAgdGhlbWF0aWNCcmVhazogJ2hyJyxcbiAgYmxvY2txdW90ZTogJ2Jsb2NrcXVvdGUnLFxuICBkZWxldGU6ICdkZWwnLFxuICBsaW5rOiAnYScsXG4gIGltYWdlOiAnaW1nJyxcbiAgbGlua1JlZmVyZW5jZTogJ2EnLFxuICBpbWFnZVJlZmVyZW5jZTogJ2ltZycsXG4gIHRhYmxlOiBTaW1wbGVSZW5kZXJlci5iaW5kKG51bGwsICd0YWJsZScpLFxuICB0YWJsZUhlYWQ6IFNpbXBsZVJlbmRlcmVyLmJpbmQobnVsbCwgJ3RoZWFkJyksXG4gIHRhYmxlQm9keTogU2ltcGxlUmVuZGVyZXIuYmluZChudWxsLCAndGJvZHknKSxcbiAgdGFibGVSb3c6IFNpbXBsZVJlbmRlcmVyLmJpbmQobnVsbCwgJ3RyJyksXG4gIHRhYmxlQ2VsbDogVGFibGVDZWxsLFxuICByb290OiBSb290LFxuICB0ZXh0OiBUZXh0UmVuZGVyZXIsXG4gIGxpc3Q6IExpc3QsXG4gIGxpc3RJdGVtOiBMaXN0SXRlbSxcbiAgZGVmaW5pdGlvbjogTnVsbFJlbmRlcmVyLFxuICBoZWFkaW5nOiBIZWFkaW5nLFxuICBpbmxpbmVDb2RlOiBJbmxpbmVDb2RlLFxuICBjb2RlOiBDb2RlQmxvY2ssXG4gIGh0bWw6IEh0bWwsXG4gIHZpcnR1YWxIdG1sOiBWaXJ0dWFsSHRtbCxcbiAgcGFyc2VkSHRtbDogUGFyc2VkSHRtbFxufTtcblxuZnVuY3Rpb24gVGV4dFJlbmRlcmVyKHByb3BzKSB7XG4gIHJldHVybiBzdXBwb3J0c1N0cmluZ1JlbmRlciA/IHByb3BzLmNoaWxkcmVuIDogY3JlYXRlRWxlbWVudCgnc3BhbicsIG51bGwsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gUm9vdChwcm9wcykge1xuICB2YXIgdXNlRnJhZ21lbnQgPSAhcHJvcHMuY2xhc3NOYW1lO1xuICB2YXIgcm9vdCA9IHVzZUZyYWdtZW50ID8gUmVhY3QuRnJhZ21lbnQgfHwgJ2RpdicgOiAnZGl2JztcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocm9vdCwgdXNlRnJhZ21lbnQgPyBudWxsIDogcHJvcHMsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gU2ltcGxlUmVuZGVyZXIodGFnLCBwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWcsIGdldENvcmVQcm9wcyhwcm9wcyksIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzKSB7XG4gIHZhciBzdHlsZSA9IHByb3BzLmFsaWduID8ge1xuICAgIHRleHRBbGlnbjogcHJvcHMuYWxpZ25cbiAgfSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvcmVQcm9wcyA9IGdldENvcmVQcm9wcyhwcm9wcyk7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzLmlzSGVhZGVyID8gJ3RoJyA6ICd0ZCcsIHN0eWxlID8geHRlbmQoe1xuICAgIHN0eWxlOiBzdHlsZVxuICB9LCBjb3JlUHJvcHMpIDogY29yZVByb3BzLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIEhlYWRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXCJoXCIuY29uY2F0KHByb3BzLmxldmVsKSwgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBMaXN0KHByb3BzKSB7XG4gIHZhciBhdHRycyA9IGdldENvcmVQcm9wcyhwcm9wcyk7XG5cbiAgaWYgKHByb3BzLnN0YXJ0ICE9PSBudWxsICYmIHByb3BzLnN0YXJ0ICE9PSAxICYmIHByb3BzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBhdHRycy5zdGFydCA9IHByb3BzLnN0YXJ0LnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudChwcm9wcy5vcmRlcmVkID8gJ29sJyA6ICd1bCcsIGF0dHJzLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIExpc3RJdGVtKHByb3BzKSB7XG4gIHZhciBjaGVja2JveCA9IG51bGw7XG5cbiAgaWYgKHByb3BzLmNoZWNrZWQgIT09IG51bGwgJiYgcHJvcHMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkO1xuICAgIGNoZWNrYm94ID0gY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudCgnbGknLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBjaGVja2JveCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBDb2RlQmxvY2socHJvcHMpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmxhbmd1YWdlICYmIFwibGFuZ3VhZ2UtXCIuY29uY2F0KHByb3BzLmxhbmd1YWdlKTtcbiAgdmFyIGNvZGUgPSBjcmVhdGVFbGVtZW50KCdjb2RlJywgY2xhc3NOYW1lID8ge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0gOiBudWxsLCBwcm9wcy52YWx1ZSk7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KCdwcmUnLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBjb2RlKTtcbn1cblxuZnVuY3Rpb24gSW5saW5lQ29kZShwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCgnY29kZScsIGdldENvcmVQcm9wcyhwcm9wcyksIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gSHRtbChwcm9wcykge1xuICBpZiAocHJvcHMuc2tpcEh0bWwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB0YWcgPSBwcm9wcy5pc0Jsb2NrID8gJ2RpdicgOiAnc3Bhbic7XG5cbiAgaWYgKHByb3BzLmVzY2FwZUh0bWwpIHtcbiAgICB2YXIgY29tcCA9IFJlYWN0LkZyYWdtZW50IHx8IHRhZztcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChjb21wLCBudWxsLCBwcm9wcy52YWx1ZSk7XG4gIH1cblxuICB2YXIgbm9kZVByb3BzID0ge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6IHByb3BzLnZhbHVlXG4gICAgfVxuICB9O1xuICByZXR1cm4gY3JlYXRlRWxlbWVudCh0YWcsIG5vZGVQcm9wcyk7XG59XG5cbmZ1bmN0aW9uIFBhcnNlZEh0bWwocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID8gUmVhY3QuY2xvbmVFbGVtZW50KHByb3BzLmVsZW1lbnQsIHtcbiAgICAnZGF0YS1zb3VyY2Vwb3MnOiBwcm9wc1snZGF0YS1zb3VyY2Vwb3MnXVxuICB9KSA6IHByb3BzLmVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIFZpcnR1YWxIdG1sKHByb3BzKSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzLnRhZywgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBOdWxsUmVuZGVyZXIoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRDb3JlUHJvcHMocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzWydkYXRhLXNvdXJjZXBvcyddID8ge1xuICAgICdkYXRhLXNvdXJjZXBvcyc6IHByb3BzWydkYXRhLXNvdXJjZXBvcyddXG4gIH0gOiB7fTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIEh0bWxQYXJzZXIgPSAnX19STURfSFRNTF9QQVJTRVJfXyc7XG5leHBvcnRzLkh0bWxQYXJzZXIgPSB0eXBlb2YgU3ltYm9sID09PSAndW5kZWZpbmVkJyA/IEh0bWxQYXJzZXIgOiBTeW1ib2woSHRtbFBhcnNlcik7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xNC4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjE0LjBcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjE0LjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIlxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5BeXl5ISBJJ20gd29ya2luIGhlYSE8L2Rpdj5cbiAgKVxufSIsIi8qIENvb2xvcnMgRXhwb3J0ZWQgUGFsZXR0ZSAtIGNvb2xvcnMuY28vNDRhZjY5LWY4MzMzYy1mY2FiMTAtMmI5ZWIzLWRiZDViNSAqL1xuXG4vLyBjb21tb24gY29sb3JzIGFuZCB3aGF0IG5vdFxuLypcbndoaXRlICAgICAgICNmZmZmZmZcbmRhcmsgYmx1ZSAgICMwMjJiM2FcbmJsdWUgICAgICAgICMxZjdhOGNcbmxpZ2h0IGJsdWUgICNiZmRiZjdcbmdyYXkgICAgICAgICNlMWU1ZjJcblxuKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYmFja2dyb3VuZDogJyMwMjJiM2EnLFxuICBoZWFkaW5nOiAnI2ZmZmZmZicsXG4gIHRleHQ6ICcjZTFlNWYyJyxcbiAgbmF2OiAnI2JmZGJmNycsXG4gIHN1YkhlYWRpbmc6ICcjYmZkYmY3JyxcbiAgaW1hZ2VCb3JkZXI6ICcjZGRkZGRkJ1xufVxuXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSdcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmNvbnN0IE5hdiA9IHN0eWxlZC5kaXZgXG4gIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9VGVrbyZkaXNwbGF5PXN3YXAnKTtcbiAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BemVyZXQrTW9ubyZkaXNwbGF5PXN3YXAnKTtcbiAgZm9udC1mYW1pbHk6ICdUZWtvJywgc2Fucy1zZXJpZjtcblxuICBmb250LXNpemU6IDM1cHg7XG4gIGNvbG9yOiAke3BhbGV0dGUubmF2fTtcblxuICAjbmF2LWNvbnRhaW5lciB7XG4gICAgYSwgc3Ryb25nIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgICB9XG5cbiAgICBhIHtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG5cbiAgICAuc2VsZWN0ZWQge1xuICAgICAgY29sb3I6ICR7cGFsZXR0ZS5uYXZ9O1xuICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICR7cGFsZXR0ZS5uYXZ9XG4gICAgfVxuXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcbiAgICAjbWFpbi1uYXYge1xuICAgICAgd2lkdGg6IDcyMHB4O1xuICAgICAgbWFyZ2luOiBhdXRvO1xuICAgIH1cblxuICAgICNsZWZ0LW5hdiB7XG4gICAgICAjcGhpbC1hdmVyeSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICB9XG5cbiAgICAgICNiZWxvdy1waGlsIHtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgIH1cblxuICAgICAgZm9udC1mYW1pbHk6ICdBemVyZXQgTW9ubyc7XG4gICAgICBmb250LXNpemU6IDE3cHg7XG4gICAgICBsaW5lLWhlaWdodDogMjVweDtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcbiAgICAgIG1hcmdpbjogMTdweCAxNXB4IDAgMTBweDtcbiAgICB9XG4gIH1cbmBcblxuZXhwb3J0IGRlZmF1bHQgKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPE5hdj5cbiAgICAgIDxkaXYgaWQ9XCJuYXYtY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJsZWZ0LW5hdlwiPlxuICAgICAgICAgIDxkaXYgaWQ9J3BoaWwtYXZlcnknPlBoaWwgQXZlcnk8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGlkPVwiYmVsb3ctcGhpbFwiPlxuICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9waGlsbGlwYXZlcnkvXCI+TGlua2VkSW48L2E+XG4gICAgICAgICAgICA8YnIvPjxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vcGlsbFwiPkdpdGh1YjwvYT5cbiAgICAgICAgICAgIDxici8+PGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vY2xhc3NpcXVlX3BoaWwvXCI+QGNsYXNzaXF1ZV9waGlsPC9hPlxuICAgICAgICAgICAgPGJyLz48YSBocmVmPVwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9waWxsX21vdG8vXCI+QHBpbGxfbW90bzwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBpZD1cIm1haW4tbmF2XCI+XG4gICAgICAgICAgICAgIDxhIGNsYXNzPXsgWycnXS5pbmNsdWRlcyhwcm9wcy5zZWN0aW9uKSA/ICdzZWxlY3RlZCcgOiAnJ31cbiAgICAgICAgICAgICAgICAgaHJlZj1cIi9cIj5ob21lPC9hPlxuICAgICAgICAgICAgICA8YSBjbGFzcz17WydibG9nJywgJ3RhZ3MnLCAncG9zdCddLmluY2x1ZGVzKHByb3BzLnNlY3Rpb24pID8gJ3NlbGVjdGVkJyA6ICcnfVxuICAgICAgICAgICAgICAgICBocmVmPScvYmxvZyc+YmxvZzwvYT5cbiAgICAgICAgICAgICAgPGEgY2xhc3M9e1snZGV2J10uaW5jbHVkZXMocHJvcHMuc2VjdGlvbikgPyAnc2VsZWN0ZWQnIDogJyd9XG4gICAgICAgICAgICAgICAgIGhyZWY9Jy9kZXYnPmRldjwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L05hdj5cblxuICApXG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmFuZ2UgfSBmcm9tICcuLi8uLi91dGlscydcblxuZXhwb3J0IGRlZmF1bHQgKHsgdG90YWxQYWdlcywgcCwgcnBwLCBiYXNlUGF0aCA9ICcvYmxvZycgfSkgPT4ge1xuICBjb25zdCBwYWRkaW5nID0gNVxuICBjb25zdCBzdGFydCA9IChwIC0gcGFkZGluZykgPiAwID8gKHAgLSBwYWRkaW5nKSA6IDFcbiAgY29uc3QgZW5kID0gKHAgKyBwYWRkaW5nKSA8PSB0b3RhbFBhZ2VzID8gKHAgKyBwYWRkaW5nKSA6IHRvdGFsUGFnZXNcblxuICBjb25zb2xlLmxvZyh0b3RhbFBhZ2VzLCBzdGFydCwgZW5kKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBpZD1cInBhZ2luYXRvclwiPlxuICAgIHtcbiAgICAgIHJhbmdlKHN0YXJ0LCBlbmQrMSwgMSkubWFwKGkgPT4ge1xuICAgICAgICByZXR1cm4gPGEgaHJlZj17YCR7YmFzZVBhdGh9P3A9JHtpfSZycHA9JHtycHB9YH0ga2V5PXtpfT57aX08L2E+XG4gICAgICB9KVxuICAgIH1cbiAgICA8L2Rpdj5cbiAgKVxufSIsIi8qKlxuICogUmV0dXJuIHBhcnRzIG9mIHRoZSBwYXRoIGFuZCBzZWFyY2ggcGFyYW1zXG4gKi9cbmNvbnN0IHBhcnNlVXJsID0gKCkgPT4ge1xuICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICBjb25zb2xlLmxvZygndXJsJywgcGFyc2VkVXJsKVxuICBjb25zdCBwYXJ0cyA9IHBhcnNlZFVybC5wYXRobmFtZS5zcGxpdCgnLycpLmZpbHRlcihwID0+IHAubGVuZ3RoID4gMClcbiAgcmV0dXJuIHtcbiAgICBwYXJ0cyxcbiAgICBzZWFyY2hQYXJhbXM6IHBhcnNlZFVybC5zZWFyY2hQYXJhbXNcbiAgfVxufVxuXG4vKipcbiAqIE1pbWljIFB5dGhvbiByYW5nZSBmdW5jdGlvblxuICovXG5jb25zdCByYW5nZSA9IChzdGFydCwgc3RvcCwgc3RlcCkgPT4ge1xuICBpZiAodHlwZW9mIHN0b3AgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIG9uZSBwYXJhbSBkZWZpbmVkXG4gICAgICBzdG9wID0gc3RhcnQ7XG4gICAgICBzdGFydCA9IDBcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RlcCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgc3RlcCA9IDFcbiAgfVxuXG4gIGlmICgoc3RlcCA+IDAgJiYgc3RhcnQgPj0gc3RvcCkgfHwgKHN0ZXAgPCAwICYmIHN0YXJ0IDw9IHN0b3ApKSB7XG4gICAgICByZXR1cm4gW11cbiAgfVxuXG4gIHZhciByZXN1bHQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IHN0ZXAgPiAwID8gaSA8IHN0b3AgOiBpID4gc3RvcDsgaSArPSBzdGVwKSB7XG4gICAgICByZXN1bHQucHVzaChpKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQge1xuICBwYXJzZVVybCxcbiAgcmFuZ2Vcbn1cblxuIiwiaW1wb3J0IHsgdG9QbGFpbk9iamVjdCwgZnJlZXplU3lzIH0gZnJvbSAnY29udGVudGZ1bC1zZGstY29yZSc7XG4vKipcbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgU3BhY2VcbiAqIEBwcm9wIHtPYmplY3R9IHN5cyAtIFN5c3RlbSBtZXRhZGF0YVxuICogQHByb3Age3N0cmluZ30gc3lzLmlkIC0gU3BhY2UgaWRcbiAqIEBwcm9wIHtzdHJpbmd9IHN5cy50eXBlIC0gRW50aXR5IHR5cGVcbiAqIEBwcm9wIHtzdHJpbmd9IG5hbWUgLSBTcGFjZSBuYW1lXG4gKiBAcHJvcCB7QXJyYXk8c3RyaW5nPn0gbG9jYWxlcyAtIEFycmF5IHdpdGggbG9jYWxlIGNvZGVzXG4gKiBAcHJvcCB7ZnVuY3Rpb24oKTogT2JqZWN0fSB0b1BsYWluT2JqZWN0KCkgLSBSZXR1cm5zIHRoaXMgU3BhY2UgYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgLSBBUEkgcmVzcG9uc2UgZm9yIGEgU3BhY2VcbiAqIEByZXR1cm4ge1NwYWNlfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwU3BhY2UoZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoZGF0YSkpO1xufSIsImltcG9ydCBqc29uU3RyaW5naWZ5U2FmZSBmcm9tICdqc29uLXN0cmluZ2lmeS1zYWZlJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1peGluU3RyaW5naWZ5U2FmZShkYXRhKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwgJ3N0cmluZ2lmeVNhZmUnLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgdmFyIHNlcmlhbGl6ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG4gICAgICB2YXIgaW5kZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgICAgIHJldHVybiBqc29uU3RyaW5naWZ5U2FmZSh0aGlzLCBzZXJpYWxpemVyLCBpbmRlbnQsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3lzOiB7XG4gICAgICAgICAgICB0eXBlOiAnTGluaycsXG4gICAgICAgICAgICBsaW5rVHlwZTogJ0VudHJ5JyxcbiAgICAgICAgICAgIGlkOiB2YWx1ZS5zeXMuaWQsXG4gICAgICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG5pbXBvcnQgY29weSBmcm9tICdmYXN0LWNvcHknO1xuXG52YXIgVU5SRVNPTFZFRF9MSU5LID0ge307IC8vIHVuaXF1ZSBvYmplY3QgdG8gYXZvaWQgcG9seWZpbGwgYmxvYXQgdXNpbmcgU3ltYm9sKClcblxuLyoqXG4gKiBpc0xpbmsgRnVuY3Rpb25cbiAqIENoZWNrcyBpZiB0aGUgb2JqZWN0IGhhcyBzeXMudHlwZSBcIkxpbmtcIlxuICogQHBhcmFtIG9iamVjdFxuICovXG52YXIgaXNMaW5rID0gZnVuY3Rpb24gaXNMaW5rKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5zeXMgJiYgb2JqZWN0LnN5cy50eXBlID09PSAnTGluayc7XG59O1xuXG4vKipcbiAqIGlzUmVzb3VyY2VMaW5rIEZ1bmN0aW9uXG4gKiBDaGVja3MgaWYgdGhlIG9iamVjdCBoYXMgc3lzLnR5cGUgXCJSZXNvdXJjZUxpbmtcIlxuICogQHBhcmFtIG9iamVjdFxuICovXG52YXIgaXNSZXNvdXJjZUxpbmsgPSBmdW5jdGlvbiBpc1Jlc291cmNlTGluayhvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3Quc3lzICYmIG9iamVjdC5zeXMudHlwZSA9PT0gJ1Jlc291cmNlTGluayc7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBrZXkgd2l0aCBzcGFjZUlkIGFuZCBhIGtleSB3aXRob3V0IGZvciBlbnRpdHlNYXBcbiAqXG4gKiBAcGFyYW0geyp9IHN5c1xuICogQHBhcmFtIHtTdHJpbmd9IHN5cy50eXBlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3lzLmlkXG4gKiBAcGFyYW0geyp9IHN5cy5zcGFjZVxuICogQHBhcmFtIHsqfSBzeXMuc3BhY2Uuc3lzXG4gKiBAcGFyYW0ge1N0cmluZ30gc3lzLnNwYWNlLmlkXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xudmFyIG1ha2VFbnRpdHlNYXBLZXlzID0gZnVuY3Rpb24gbWFrZUVudGl0eU1hcEtleXMoc3lzKSB7XG4gIGlmIChzeXMuc3BhY2UgJiYgc3lzLmVudmlyb25tZW50KSB7XG4gICAgcmV0dXJuIFtzeXMudHlwZSArICchJyArIHN5cy5pZCwgc3lzLnNwYWNlLnN5cy5pZCArICchJyArIHN5cy5lbnZpcm9ubWVudC5zeXMuaWQgKyAnIScgKyBzeXMudHlwZSArICchJyArIHN5cy5pZF07XG4gIH1cblxuICByZXR1cm4gW3N5cy50eXBlICsgJyEnICsgc3lzLmlkXTtcbn07XG5cbi8qKlxuICogTG9va3MgdXAgaW4gZW50aXR5TWFwXG4gKlxuICogQHBhcmFtIGVudGl0eU1hcFxuICogQHBhcmFtIHsqfSBsaW5rRGF0YVxuICogQHBhcmFtIHtTdHJpbmd9IGxpbmtEYXRhLnR5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBsaW5rRGF0YS5saW5rVHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IGxpbmtEYXRhLmlkXG4gKiBAcGFyYW0ge1N0cmluZ30gbGlua0RhdGEudXJuXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbnZhciBsb29rdXBJbkVudGl0eU1hcCA9IGZ1bmN0aW9uIGxvb2t1cEluRW50aXR5TWFwKGVudGl0eU1hcCwgbGlua0RhdGEpIHtcbiAgdmFyIGVudHJ5SWQgPSBsaW5rRGF0YS5lbnRyeUlkLFxuICAgICAgbGlua1R5cGUgPSBsaW5rRGF0YS5saW5rVHlwZSxcbiAgICAgIHNwYWNlSWQgPSBsaW5rRGF0YS5zcGFjZUlkLFxuICAgICAgZW52aXJvbm1lbnRJZCA9IGxpbmtEYXRhLmVudmlyb25tZW50SWQ7XG5cblxuICBpZiAoc3BhY2VJZCAmJiBlbnZpcm9ubWVudElkKSB7XG4gICAgcmV0dXJuIGVudGl0eU1hcC5nZXQoc3BhY2VJZCArICchJyArIGVudmlyb25tZW50SWQgKyAnIScgKyBsaW5rVHlwZSArICchJyArIGVudHJ5SWQpO1xuICB9XG5cbiAgcmV0dXJuIGVudGl0eU1hcC5nZXQobGlua1R5cGUgKyAnIScgKyBlbnRyeUlkKTtcbn07XG5cbnZhciBnZXRJZHNGcm9tVXJuID0gZnVuY3Rpb24gZ2V0SWRzRnJvbVVybih1cm4pIHtcbiAgdmFyIHJlZ0V4cCA9IC8uKjpzcGFjZXNcXC8oW14vXSspKD86XFwvZW52aXJvbm1lbnRzXFwvKFteL10rKSk/XFwvZW50cmllc1xcLyhbXi9dKykkLztcblxuICBpZiAoIXJlZ0V4cC50ZXN0KHVybikpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgdmFyIF91cm4kbWF0Y2ggPSB1cm4ubWF0Y2gocmVnRXhwKSxcbiAgICAgIF91cm4kbWF0Y2gyID0gX3NsaWNlZFRvQXJyYXkoX3VybiRtYXRjaCwgNCksXG4gICAgICBfID0gX3VybiRtYXRjaDJbMF0sXG4gICAgICBzcGFjZUlkID0gX3VybiRtYXRjaDJbMV0sXG4gICAgICBfdXJuJG1hdGNoMiQgPSBfdXJuJG1hdGNoMlsyXSxcbiAgICAgIGVudmlyb25tZW50SWQgPSBfdXJuJG1hdGNoMiQgPT09IHVuZGVmaW5lZCA/ICdtYXN0ZXInIDogX3VybiRtYXRjaDIkLFxuICAgICAgZW50cnlJZCA9IF91cm4kbWF0Y2gyWzNdO1xuXG4gIHJldHVybiB7IHNwYWNlSWQ6IHNwYWNlSWQsIGVudmlyb25tZW50SWQ6IGVudmlyb25tZW50SWQsIGVudHJ5SWQ6IGVudHJ5SWQgfTtcbn07XG5cbi8qKlxuICogZ2V0UmVzb2x2ZWRMaW5rIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIGVudGl0eU1hcFxuICogQHBhcmFtIGxpbmtcbiAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAqL1xudmFyIGdldFJlc29sdmVkTGluayA9IGZ1bmN0aW9uIGdldFJlc29sdmVkTGluayhlbnRpdHlNYXAsIGxpbmspIHtcbiAgdmFyIF9saW5rJHN5cyA9IGxpbmsuc3lzLFxuICAgICAgdHlwZSA9IF9saW5rJHN5cy50eXBlLFxuICAgICAgbGlua1R5cGUgPSBfbGluayRzeXMubGlua1R5cGU7XG5cbiAgaWYgKHR5cGUgPT09ICdSZXNvdXJjZUxpbmsnKSB7XG4gICAgaWYgKCFsaW5rVHlwZS5zdGFydHNXaXRoKCdDb250ZW50ZnVsOicpKSB7XG4gICAgICByZXR1cm4gbGluaztcbiAgICB9XG5cbiAgICB2YXIgdXJuID0gbGluay5zeXMudXJuO1xuXG4gICAgdmFyIF9nZXRJZHNGcm9tVXJuID0gZ2V0SWRzRnJvbVVybih1cm4pLFxuICAgICAgICBzcGFjZUlkID0gX2dldElkc0Zyb21Vcm4uc3BhY2VJZCxcbiAgICAgICAgZW52aXJvbm1lbnRJZCA9IF9nZXRJZHNGcm9tVXJuLmVudmlyb25tZW50SWQsXG4gICAgICAgIF9lbnRyeUlkID0gX2dldElkc0Zyb21Vcm4uZW50cnlJZDtcblxuICAgIHZhciBleHRyYWN0ZWRMaW5rVHlwZSA9IGxpbmtUeXBlLnNwbGl0KCc6JylbMV07XG5cbiAgICByZXR1cm4gbG9va3VwSW5FbnRpdHlNYXAoZW50aXR5TWFwLCB7XG4gICAgICBsaW5rVHlwZTogZXh0cmFjdGVkTGlua1R5cGUsXG4gICAgICBlbnRyeUlkOiBfZW50cnlJZCxcbiAgICAgIHNwYWNlSWQ6IHNwYWNlSWQsXG4gICAgICBlbnZpcm9ubWVudElkOiBlbnZpcm9ubWVudElkXG4gICAgfSkgfHwgVU5SRVNPTFZFRF9MSU5LO1xuICB9XG5cbiAgdmFyIGVudHJ5SWQgPSBsaW5rLnN5cy5pZDtcblxuICByZXR1cm4gbG9va3VwSW5FbnRpdHlNYXAoZW50aXR5TWFwLCB7IGxpbmtUeXBlOiBsaW5rVHlwZSwgZW50cnlJZDogZW50cnlJZCB9KSB8fCBVTlJFU09MVkVEX0xJTks7XG59O1xuXG4vKipcbiAqIGNsZWFuVXBMaW5rcyBGdW5jdGlvblxuICogLSBSZW1vdmVzIHVucmVzb2x2YWJsZSBsaW5rcyBmcm9tIEFycmF5cyBhbmQgT2JqZWN0c1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0W118T2JqZWN0fSBpbnB1dFxuICovXG52YXIgY2xlYW5VcExpbmtzID0gZnVuY3Rpb24gY2xlYW5VcExpbmtzKGlucHV0KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIHJldHVybiBpbnB1dC5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbCAhPT0gVU5SRVNPTFZFRF9MSU5LO1xuICAgIH0pO1xuICB9XG4gIGZvciAodmFyIGtleSBpbiBpbnB1dCkge1xuICAgIGlmIChpbnB1dFtrZXldID09PSBVTlJFU09MVkVEX0xJTkspIHtcbiAgICAgIGRlbGV0ZSBpbnB1dFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5wdXQ7XG59O1xuXG4vKipcbiAqIHdhbGtNdXRhdGUgRnVuY3Rpb25cbiAqIEBwYXJhbSBpbnB1dFxuICogQHBhcmFtIHByZWRpY2F0ZVxuICogQHBhcmFtIG11dGF0b3JcbiAqIEBwYXJhbSByZW1vdmVVbnJlc29sdmVkXG4gKiBAcmV0dXJuIHsqfVxuICovXG52YXIgd2Fsa011dGF0ZSA9IGZ1bmN0aW9uIHdhbGtNdXRhdGUoaW5wdXQsIHByZWRpY2F0ZSwgbXV0YXRvciwgcmVtb3ZlVW5yZXNvbHZlZCkge1xuICBpZiAocHJlZGljYXRlKGlucHV0KSkge1xuICAgIHJldHVybiBtdXRhdG9yKGlucHV0KTtcbiAgfVxuXG4gIGlmIChpbnB1dCAmJiAodHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihpbnB1dCkpID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBpbnB1dCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgaWYgKGlucHV0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgaW5wdXRba2V5XSA9IHdhbGtNdXRhdGUoaW5wdXRba2V5XSwgcHJlZGljYXRlLCBtdXRhdG9yLCByZW1vdmVVbnJlc29sdmVkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlbW92ZVVucmVzb2x2ZWQpIHtcbiAgICAgIGlucHV0ID0gY2xlYW5VcExpbmtzKGlucHV0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlucHV0O1xufTtcblxudmFyIG5vcm1hbGl6ZUxpbmsgPSBmdW5jdGlvbiBub3JtYWxpemVMaW5rKGVudGl0eU1hcCwgbGluaywgcmVtb3ZlVW5yZXNvbHZlZCkge1xuICB2YXIgcmVzb2x2ZWRMaW5rID0gZ2V0UmVzb2x2ZWRMaW5rKGVudGl0eU1hcCwgbGluayk7XG4gIGlmIChyZXNvbHZlZExpbmsgPT09IFVOUkVTT0xWRURfTElOSykge1xuICAgIHJldHVybiByZW1vdmVVbnJlc29sdmVkID8gcmVzb2x2ZWRMaW5rIDogbGluaztcbiAgfVxuICByZXR1cm4gcmVzb2x2ZWRMaW5rO1xufTtcblxudmFyIG1ha2VFbnRyeU9iamVjdCA9IGZ1bmN0aW9uIG1ha2VFbnRyeU9iamVjdChpdGVtLCBpdGVtRW50cnlQb2ludHMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGl0ZW1FbnRyeVBvaW50cykpIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIHZhciBlbnRyeVBvaW50cyA9IE9iamVjdC5rZXlzKGl0ZW0pLmZpbHRlcihmdW5jdGlvbiAob3duS2V5KSB7XG4gICAgcmV0dXJuIGl0ZW1FbnRyeVBvaW50cy5pbmRleE9mKG93bktleSkgIT09IC0xO1xuICB9KTtcblxuICByZXR1cm4gZW50cnlQb2ludHMucmVkdWNlKGZ1bmN0aW9uIChlbnRyeU9iaiwgZW50cnlQb2ludCkge1xuICAgIGVudHJ5T2JqW2VudHJ5UG9pbnRdID0gaXRlbVtlbnRyeVBvaW50XTtcbiAgICByZXR1cm4gZW50cnlPYmo7XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogcmVzb2x2ZVJlc3BvbnNlIEZ1bmN0aW9uXG4gKiBSZXNvbHZlcyBjb250ZW50ZnVsIHJlc3BvbnNlIHRvIG5vcm1hbGl6ZWQgZm9ybS5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSBDb250ZW50ZnVsIHJlc3BvbnNlXG4gKiBAcGFyYW0ge3tyZW1vdmVVbnJlc29sdmVkOiBCb29sZWFuLCBpdGVtRW50cnlQb2ludHM6IEFycmF5PFN0cmluZz59fHt9fSBvcHRpb25zXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMucmVtb3ZlVW5yZXNvbHZlZCAtIFJlbW92ZSB1bnJlc29sdmVkIGxpbmtzIGRlZmF1bHQ6ZmFsc2VcbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gb3B0aW9ucy5pdGVtRW50cnlQb2ludHMgLSBSZXNvbHZlIGxpbmtzIG9ubHkgaW4gdGhvc2UgaXRlbSBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbnZhciByZXNvbHZlUmVzcG9uc2UgPSBmdW5jdGlvbiByZXNvbHZlUmVzcG9uc2UocmVzcG9uc2UsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICghcmVzcG9uc2UuaXRlbXMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHJlc3BvbnNlQ2xvbmUgPSBjb3B5KHJlc3BvbnNlKTtcbiAgdmFyIGFsbEluY2x1ZGVzID0gT2JqZWN0LmtleXMocmVzcG9uc2VDbG9uZS5pbmNsdWRlcyB8fCB7fSkucmVkdWNlKGZ1bmN0aW9uIChhbGwsIHR5cGUpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhbGwpLCBfdG9Db25zdW1hYmxlQXJyYXkocmVzcG9uc2UuaW5jbHVkZXNbdHlwZV0pKTtcbiAgfSwgW10pO1xuXG4gIHZhciBhbGxFbnRyaWVzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShyZXNwb25zZUNsb25lLml0ZW1zKSwgX3RvQ29uc3VtYWJsZUFycmF5KGFsbEluY2x1ZGVzKSkuZmlsdGVyKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICByZXR1cm4gQm9vbGVhbihlbnRpdHkuc3lzKTtcbiAgfSk7XG5cbiAgdmFyIGVudGl0eU1hcCA9IG5ldyBNYXAoYWxsRW50cmllcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZW50aXR5KSB7XG4gICAgdmFyIGVudHJpZXMgPSBtYWtlRW50aXR5TWFwS2V5cyhlbnRpdHkuc3lzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIFtrZXksIGVudGl0eV07XG4gICAgfSk7XG4gICAgYWNjLnB1c2guYXBwbHkoYWNjLCBfdG9Db25zdW1hYmxlQXJyYXkoZW50cmllcykpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKSk7XG5cbiAgYWxsRW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGVudHJ5T2JqZWN0ID0gbWFrZUVudHJ5T2JqZWN0KGl0ZW0sIG9wdGlvbnMuaXRlbUVudHJ5UG9pbnRzKTtcblxuICAgIE9iamVjdC5hc3NpZ24oaXRlbSwgd2Fsa011dGF0ZShlbnRyeU9iamVjdCwgZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBpc0xpbmsoeCkgfHwgaXNSZXNvdXJjZUxpbmsoeCk7XG4gICAgfSwgZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVMaW5rKGVudGl0eU1hcCwgbGluaywgb3B0aW9ucy5yZW1vdmVVbnJlc29sdmVkKTtcbiAgICB9LCBvcHRpb25zLnJlbW92ZVVucmVzb2x2ZWQpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3BvbnNlQ2xvbmUuaXRlbXM7XG59O1xuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUmVzcG9uc2U7IiwiaW1wb3J0IGNvcHkgZnJvbSAnZmFzdC1jb3B5JztcbmltcG9ydCB7IHRvUGxhaW5PYmplY3QsIGZyZWV6ZVN5cyB9IGZyb20gJ2NvbnRlbnRmdWwtc2RrLWNvcmUnO1xuaW1wb3J0IG1peGluU3RyaW5naWZ5U2FmZSBmcm9tICcuLi9taXhpbnMvc3RyaW5naWZ5LXNhZmUnO1xuaW1wb3J0IHJlc29sdmVSZXNwb25zZSBmcm9tICdjb250ZW50ZnVsLXJlc29sdmUtcmVzcG9uc2UnO1xuLyoqXG4gKiBUeXBlcyBvZiBmaWVsZHMgZm91bmQgaW4gYW4gRW50cnlcbiAqIEBuYW1lc3BhY2UgRW50cnlGaWVsZHNcbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgU3ltYm9sXG4gKiBAdHlwZSBzdHJpbmdcbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgVGV4dFxuICogQHR5cGUgc3RyaW5nXG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgRW50cnlGaWVsZHNcbiAqIEB0eXBlZGVmIEludGVnZXJcbiAqIEB0eXBlIG51bWJlclxuICovXG5cbi8qKlxuICogQG1lbWJlcm9mIEVudHJ5RmllbGRzXG4gKiBAdHlwZWRlZiBOdW1iZXJcbiAqIEB0eXBlIG51bWJlclxuICovXG5cbi8qKlxuICogQG1lbWJlcm9mIEVudHJ5RmllbGRzXG4gKiBAdHlwZWRlZiBEYXRlXG4gKiBAdHlwZSBzdHJpbmdcbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRyeUZpZWxkc1xuICogQHR5cGVkZWYgQm9vbGVhblxuICogQHR5cGUgYm9vbGVhblxuICovXG5cbi8qKlxuICogQG1lbWJlcm9mIEVudHJ5RmllbGRzXG4gKiBAdHlwZWRlZiBMb2NhdGlvblxuICogQHByb3Age3N0cmluZ30gbGF0IC0gbGF0aXR1ZGVcbiAqIEBwcm9wIHtzdHJpbmd9IGxvbiAtIGxvbmdpdHVkZVxuICovXG5cbi8qKlxuICogQSBGaWVsZCBpbiBhbiBFbnRyeSBjYW4gaGF2ZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB0eXBlcyB0aGF0IGNhbiBiZSBkZWZpbmVkIGluIENvbnRlbnRmdWwuIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvZmllbGQtdHlwZS9cIj5GaWVsZCBUeXBlczwvYT4gZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgRmllbGRcbiAqIEB0eXBlIEVudHJ5RmllbGRzLlN5bWJvbCB8IEVudHJ5RmllbGRzLlRleHQgfCBFbnRyeUZpZWxkcy5JbnRlZ2VyIHwgRW50cnlGaWVsZHMuTnVtYmVyIHwgRW50cnlGaWVsZHMuRGF0ZSB8IEVudHJ5RmllbGRzLkJvb2xlYW4gfCBFbnRyeUZpZWxkcy5Mb2NhdGlvbiB8IEVudGl0aWVzLkxpbmsgfCBBcnJheTxFbnRyeUZpZWxkcy5TeW1ib2x8RW50aXRpZXMuTGluaz4gfCBPYmplY3RcbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgRW50cnlcbiAqIEBwcm9wIHtFbnRpdGllcy5TeXN9IHN5cyAtIFN0YW5kYXJkIHN5c3RlbSBtZXRhZGF0YSB3aXRoIGFkZGl0aW9uYWwgZW50cnkgc3BlY2lmaWMgcHJvcGVydGllc1xuICogQHByb3Age0VudGl0aWVzLkxpbmt9IHN5cy5jb250ZW50VHlwZSAtIENvbnRlbnQgVHlwZSB1c2VkIGJ5IHRoaXMgRW50cnlcbiAqIEBwcm9wIHtzdHJpbmc9fSBzeXMubG9jYWxlIC0gSWYgcHJlc2VudCwgaW5kaWNhdGVzIHRoZSBsb2NhbGUgd2hpY2ggdGhpcyBlbnRyeSB1c2VzXG4gKiBAcHJvcCB7T2JqZWN0PEVudHJ5RmllbGRzLkZpZWxkPn0gZmllbGRzIC0gT2JqZWN0IHdpdGggY29udGVudCBmb3IgZWFjaCBmaWVsZFxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIEVudHJ5IGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSYXcgZW50cnkgZGF0YVxuICogQHJldHVybiB7RW50cnl9IFdyYXBwZWQgZW50cnkgZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwRW50cnkoZGF0YSkge1xuICByZXR1cm4gZnJlZXplU3lzKHRvUGxhaW5PYmplY3QoY29weShkYXRhKSkpO1xufVxuLyoqXG4gKiBAbWVtYmVyb2YgRW50aXRpZXNcbiAqIEB0eXBlZGVmIEVudHJ5Q29sbGVjdGlvblxuICogQHByb3Age251bWJlcn0gdG90YWxcbiAqIEBwcm9wIHtudW1iZXJ9IHNraXBcbiAqIEBwcm9wIHtudW1iZXJ9IGxpbWl0XG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuRW50cnk+fSBpdGVtc1xuICogQHByb3Age0FycmF5PE9iamVjdD49fSBlcnJvcnMgLSBBcnJheSBvZiBlcnJvcnMgdGhhdCBtaWdodCBvY2N1ciB3aGVuIHJldHJpZXZpbmcgZW50cmllcy5cbiAqIEBwcm9wIHtPYmplY3Q8QXJyYXk+PX0gaW5jbHVkZXMgLSBPYmplY3Qgd2l0aCBhcnJheXMgb2YgaW5jbHVkZXMgZm9yIEVudHJpZXMgYW5kIEFzc2V0cy4gVGhpcyB3aWxsIGJlIHByZXNlbnQgaWYgcmVzb2x2ZUxpbmtzIGlzIG9uLCBhbmQgYW55IGxpbmtlZCBlbnRyaWVzIG9yIGFzc2V0cyBleGlzdC4gVGhvc2UgbGlua3Mgd2lsbCBiZSByZXNvbHZlZCBpbiB0aGUgRW50cmllcyBwcmVzZW50IGluIHRoZSBpdGVtcyBhcnJheSwgYnV0IHRoZXkgYXJlIGFsc28gcHJlc2VudCBoZXJlIGluIHJhdyBmb3JtLlxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIEVudHJ5IGNvbGxlY3Rpb24gYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqIEBwcm9wIHtmdW5jdGlvbig/ZnVuY3Rpb249LCBzcGFjZT0pOiBPYmplY3R9IHN0cmluZ2lmeVNhZmUocmVwbGFjZXIsc3BhY2UpIC0gU3RyaW5naWZpZXMgdGhlIGVudHJ5IGNvbGxlY3Rpb24sIGFjY291bnRpbmcgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMuIENpcmN1bGFyIHJlZmVyZW5jZXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGp1c3QgYSBMaW5rIG9iamVjdCwgd2l0aCBhIDxjb2RlPmNpcmN1bGFyPC9jb2RlPiBwcm9wZXJ0eSBzZXQgdG8gPGNvZGU+dHJ1ZTwvY29kZT4uIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9zdHJpbmdpZnlcIj5NRE48L2E+IGFuZCA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNvbi1zdHJpbmdpZnktc2FmZVwiPmpzb24tc3RyaW5naWZ5LXNhZmU8L2E+IGZvciBtb3JlIGRldGFpbHMgb24gdGhlIGFyZ3VtZW50cyB0aGlzIG1ldGhvZCBjYW4gdGFrZS5cbiAqL1xuXG4vKipcbiAqIERhdGEgaXMgYWxzbyBtaXhlZCBpbiB3aXRoIGxpbmsgZ2V0dGVycyBpZiBsaW5rcyBleGlzdCBhbmQgaW5jbHVkZXMgd2VyZSByZXF1ZXN0ZWRcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBlbnRyeSBjb2xsZWN0aW9uIGRhdGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gd3JhcHBlciBvcHRpb25zXG4gKiBAcmV0dXJuIHtFbnRyeUNvbGxlY3Rpb259IFdyYXBwZWQgZW50cnkgY29sbGVjdGlvbiBkYXRhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBFbnRyeUNvbGxlY3Rpb24oZGF0YSwgX3JlZikge1xuICB2YXIgcmVzb2x2ZUxpbmtzID0gX3JlZi5yZXNvbHZlTGlua3MsXG4gICAgICByZW1vdmVVbnJlc29sdmVkID0gX3JlZi5yZW1vdmVVbnJlc29sdmVkO1xuICB2YXIgd3JhcHBlZERhdGEgPSBtaXhpblN0cmluZ2lmeVNhZmUodG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG5cbiAgaWYgKHJlc29sdmVMaW5rcykge1xuICAgIHdyYXBwZWREYXRhLml0ZW1zID0gcmVzb2x2ZVJlc3BvbnNlKHdyYXBwZWREYXRhLCB7XG4gICAgICByZW1vdmVVbnJlc29sdmVkOiByZW1vdmVVbnJlc29sdmVkLFxuICAgICAgaXRlbUVudHJ5UG9pbnRzOiBbJ2ZpZWxkcyddXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZnJlZXplU3lzKHdyYXBwZWREYXRhKTtcbn0iLCJpbXBvcnQgY29weSBmcm9tICdmYXN0LWNvcHknO1xuaW1wb3J0IHsgdG9QbGFpbk9iamVjdCwgZnJlZXplU3lzIH0gZnJvbSAnY29udGVudGZ1bC1zZGstY29yZSc7XG4vKipcbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgQXNzZXRcbiAqIEBwcm9wIHtFbnRpdGllcy5TeXN9IHN5cyAtIFN0YW5kYXJkIHN5c3RlbSBtZXRhZGF0YSB3aXRoIGFkZGl0aW9uYWwgZW50cnkgc3BlY2lmaWMgcHJvcGVydGllc1xuICogQHByb3Age3N0cmluZz19IHN5cy5sb2NhbGUgLSBJZiBwcmVzZW50LCBpbmRpY2F0ZXMgdGhlIGxvY2FsZSB3aGljaCB0aGlzIGFzc2V0IHVzZXNcbiAqIEBwcm9wIHtPYmplY3R9IGZpZWxkcyAtIE9iamVjdCB3aXRoIGNvbnRlbnQgZm9yIGVhY2ggZmllbGRcbiAqIEBwcm9wIHtzdHJpbmd9IGZpZWxkcy50aXRsZSAtIFRpdGxlIGZvciB0aGlzIGFzc2V0XG4gKiBAcHJvcCB7c3RyaW5nfSBmaWVsZHMuZGVzY3JpcHRpb24gLSBEZXNjcmlwdGlvbiBmb3IgdGhpcyBhc3NldFxuICogQHByb3Age09iamVjdH0gZmllbGRzLmZpbGUgLSBGaWxlIG9iamVjdCBmb3IgdGhpcyBhc3NldFxuICogQHByb3Age3N0cmluZ30gZmllbGRzLmZpbGUuZmlsZU5hbWUgLSBOYW1lIGZvciB0aGUgZmlsZVxuICogQHByb3Age3N0cmluZ30gZmllbGRzLmZpbGUuY29udGVudFR5cGUgLSBNaW1lIHR5cGUgZm9yIHRoZSBmaWxlXG4gKiBAcHJvcCB7c3RyaW5nfSBmaWVsZHMuZmlsZS51cmwgLSBVcmwgd2hlcmUgdGhlIGZpbGUgaXMgYXZhaWxhYmxlIGF0LlxuICogQHByb3Age09iamVjdH0gZmllbGRzLmZpbGUuZGV0YWlscyAtIERldGFpbHMgZm9yIHRoZSBmaWxlLCBkZXBlbmRpbmcgb24gZmlsZSB0eXBlIChleGFtcGxlOiBpbWFnZSBzaXplIGluIGJ5dGVzLCBldGMpXG4gKiBAcHJvcCB7ZnVuY3Rpb24oKTogT2JqZWN0fSB0b1BsYWluT2JqZWN0KCkgLSBSZXR1cm5zIHRoaXMgQXNzZXQgYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBhc3NldCBkYXRhXG4gKiBAcmV0dXJuIHtBc3NldH0gV3JhcHBlZCBhc3NldCBkYXRhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBBc3NldChkYXRhKSB7XG4gIHJldHVybiBmcmVlemVTeXModG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG59XG4vKipcbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgQXNzZXRDb2xsZWN0aW9uXG4gKiBAcHJvcCB7bnVtYmVyfSB0b3RhbFxuICogQHByb3Age251bWJlcn0gc2tpcFxuICogQHByb3Age251bWJlcn0gbGltaXRcbiAqIEBwcm9wIHtBcnJheTxFbnRpdGllcy5Bc3NldD59IGl0ZW1zXG4gKiBAcHJvcCB7ZnVuY3Rpb24oKTogT2JqZWN0fSB0b1BsYWluT2JqZWN0KCkgLSBSZXR1cm5zIHRoaXMgQXNzZXQgY29sbGVjdGlvbiBhcyBhIHBsYWluIEpTIG9iamVjdFxuICovXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gUmF3IGFzc2V0IGNvbGxlY3Rpb24gZGF0YVxuICogQHJldHVybiB7QXNzZXRDb2xsZWN0aW9ufSBXcmFwcGVkIGFzc2V0IGNvbGxlY3Rpb24gZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQXNzZXRDb2xsZWN0aW9uKGRhdGEpIHtcbiAgcmV0dXJuIGZyZWV6ZVN5cyh0b1BsYWluT2JqZWN0KGNvcHkoZGF0YSkpKTtcbn0iLCJpbXBvcnQgY29weSBmcm9tICdmYXN0LWNvcHknO1xuaW1wb3J0IHsgdG9QbGFpbk9iamVjdCwgZnJlZXplU3lzIH0gZnJvbSAnY29udGVudGZ1bC1zZGstY29yZSc7XG4vKipcbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgQ29udGVudFR5cGVcbiAqIEBwcm9wIHtFbnRpdGllcy5TeXN9IHN5cyAtIFN5c3RlbSBtZXRhZGF0YVxuICogQHByb3Age3N0cmluZ30gbmFtZVxuICogQHByb3Age3N0cmluZ30gZGVzY3JpcHRpb25cbiAqIEBwcm9wIHtzdHJpbmd9IGRpc3BsYXlGaWVsZCAtIEZpZWxkIHVzZWQgYXMgdGhlIG1haW4gZGlzcGxheSBmaWVsZCBmb3IgRW50cmllc1xuICogQHByb3Age3N0cmluZ30gQXJyYXk8RmllbGQ+IC0gQWxsIHRoZSBmaWVsZHMgY29udGFpbmVkIGluIHRoaXMgQ29udGVudCBUeXBlXG4gKiBAcHJvcCB7ZnVuY3Rpb24oKTogT2JqZWN0fSB0b1BsYWluT2JqZWN0KCkgLSBSZXR1cm5zIHRoaXMgQ29udGVudCBUeXBlIGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKi9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBSYXcgY29udGVudCB0eXBlIGRhdGFcbiAqIEByZXR1cm4ge0NvbnRlbnRUeXBlfSBXcmFwcGVkIGNvbnRlbnQgdHlwZSBkYXRhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBDb250ZW50VHlwZShkYXRhKSB7XG4gIHJldHVybiBmcmVlemVTeXModG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG59XG4vKipcbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgQ29udGVudFR5cGVDb2xsZWN0aW9uXG4gKiBAcHJvcCB7bnVtYmVyfSB0b3RhbFxuICogQHByb3Age251bWJlcn0gc2tpcFxuICogQHByb3Age251bWJlcn0gbGltaXRcbiAqIEBwcm9wIHtBcnJheTxFbnRpdGllcy5Db250ZW50VHlwZT59IGl0ZW1zXG4gKiBAcHJvcCB7ZnVuY3Rpb24oKTogT2JqZWN0fSB0b1BsYWluT2JqZWN0KCkgLSBSZXR1cm5zIHRoaXMgQ29udGVudCBUeXBlIGNvbGxlY3Rpb24gYXMgYSBwbGFpbiBKUyBvYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFJhdyBjb250ZW50IHR5cGUgY29sbGVjdGlvbiBkYXRhXG4gKiBAcmV0dXJuIHtDb250ZW50VHlwZUNvbGxlY3Rpb259IFdyYXBwZWQgY29udGVudCB0eXBlIGNvbGxlY3Rpb24gZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQ29udGVudFR5cGVDb2xsZWN0aW9uKGRhdGEpIHtcbiAgcmV0dXJuIGZyZWV6ZVN5cyh0b1BsYWluT2JqZWN0KGNvcHkoZGF0YSkpKTtcbn0iLCJpbXBvcnQgY29weSBmcm9tICdmYXN0LWNvcHknO1xuaW1wb3J0IHsgdG9QbGFpbk9iamVjdCwgZnJlZXplU3lzIH0gZnJvbSAnY29udGVudGZ1bC1zZGstY29yZSc7XG4vKipcbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgTG9jYWxlXG4gKiBAcHJvcCB7RW50aXRpZXMuU3lzfSBzeXMgLSBTdGFuZGFyZCBzeXN0ZW0gbWV0YWRhdGEgd2l0aCBhZGRpdGlvbmFsIGVudHJ5IHNwZWNpZmljIHByb3BlcnRpZXNcbiAqIEBwcm9wIHtzdHJpbmd9IG5hbWUgLSBsb2NhbGUgbmFtZSAoZXhhbXBsZTogRW5nbGlzaClcbiAqIEBwcm9wIHtzdHJpbmd9IGNvZGUgLSBsb2NhbGUgY29kZSAoZXhhbXBsZTogZW4tVVMpXG4gKiBAcHJvcCB7c3RyaW5nfSBmYWxsYmFja0NvZGUgLSB0aGUgbG9jYWxlIGNvZGUgdG8gZmFsbGJhY2sgdG8gd2hlbiB0aGVyZSBpcyBub3QgY29udGVudCBmb3IgdGhlIGN1cnJlbnQgbG9jYWxlXG4gKiBAcHJvcCB7Ym9vbGVhbn0gZGVmYXVsdCAtIElmIHRoaXMgaXMgdGhlIGRlZmF1bHQgbG9jYWxlXG4gKiBAcHJvcCB7Ym9vbGVhbn0gb3B0aW9uYWwgLSBJZiB0aGUgbG9jYWxlIG5lZWRzIHRvIGJlIGZpbGxlZCBpbiBvbiBlbnRyaWVzIG9yIG5vdFxuICogQHByb3Age2Z1bmN0aW9uKCk6IE9iamVjdH0gdG9QbGFpbk9iamVjdCgpIC0gUmV0dXJucyB0aGlzIExvY2FsZSBhcyBhIHBsYWluIEpTIG9iamVjdFxuICovXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gUmF3IGxvY2FsZSBkYXRhXG4gKiBAcmV0dXJuIHtMb2NhbGV9IFdyYXBwZWQgbG9jYWxlIGRhdGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcExvY2FsZShkYXRhKSB7XG4gIHJldHVybiBmcmVlemVTeXModG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG59XG4vKipcbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgTG9jYWxlQ29sbGVjdGlvblxuICogQHByb3Age251bWJlcn0gdG90YWxcbiAqIEBwcm9wIHtudW1iZXJ9IHNraXBcbiAqIEBwcm9wIHtudW1iZXJ9IGxpbWl0XG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuTG9jYWxlPn0gaXRlbXNcbiAqIEBwcm9wIHtmdW5jdGlvbigpOiBPYmplY3R9IHRvUGxhaW5PYmplY3QoKSAtIFJldHVybnMgdGhpcyBMb2NhbGUgY29sbGVjdGlvbiBhcyBhIHBsYWluIEpTIG9iamVjdFxuICovXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gUmF3IGxvY2FsZSBjb2xsZWN0aW9uIGRhdGFcbiAqIEByZXR1cm4ge0xvY2FsZUNvbGxlY3Rpb259IFdyYXBwZWQgbG9jYWxlIGNvbGxlY3Rpb24gZGF0YVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTG9jYWxlQ29sbGVjdGlvbihkYXRhKSB7XG4gIHJldHVybiBmcmVlemVTeXModG9QbGFpbk9iamVjdChjb3B5KGRhdGEpKSk7XG59IiwiaW1wb3J0ICogYXMgc3BhY2UgZnJvbSAnLi9zcGFjZSc7XG5pbXBvcnQgKiBhcyBlbnRyeSBmcm9tICcuL2VudHJ5JztcbmltcG9ydCAqIGFzIGFzc2V0IGZyb20gJy4vYXNzZXQnO1xuaW1wb3J0ICogYXMgY29udGVudFR5cGUgZnJvbSAnLi9jb250ZW50LXR5cGUnO1xuaW1wb3J0ICogYXMgbG9jYWxlIGZyb20gJy4vbG9jYWxlJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3BhY2U6IHNwYWNlLFxuICBlbnRyeTogZW50cnksXG4gIGFzc2V0OiBhc3NldCxcbiAgY29udGVudFR5cGU6IGNvbnRlbnRUeXBlLFxuICBsb2NhbGU6IGxvY2FsZVxufTsiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9jb25jZXB0cy9zeW5jL1wiPlN5bmNocm9uaXphdGlvbjwvYT4gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBAbmFtZXNwYWNlIFN5bmNcbiAqL1xuaW1wb3J0IHsgY3JlYXRlUmVxdWVzdENvbmZpZywgZnJlZXplU3lzLCB0b1BsYWluT2JqZWN0IH0gZnJvbSAnY29udGVudGZ1bC1zZGstY29yZSc7XG5pbXBvcnQgcmVzb2x2ZVJlc3BvbnNlIGZyb20gJ2NvbnRlbnRmdWwtcmVzb2x2ZS1yZXNwb25zZSc7XG5pbXBvcnQgbWl4aW5TdHJpbmdpZnlTYWZlIGZyb20gJy4vbWl4aW5zL3N0cmluZ2lmeS1zYWZlJztcbi8qKlxuICogQG1lbWJlcm9mIFN5bmNcbiAqIEB0eXBlZGVmIFN5bmNDb2xsZWN0aW9uXG4gKiBAcHJvcCB7QXJyYXk8RW50aXRpZXMuRW50cnk+fSBlbnRyaWVzIC0gQWxsIGV4aXN0aW5nIGVudHJpZXMgb24gZmlyc3Qgc3luYy4gTmV3IGFuZCB1cGRhdGVkIGVudHJpZXMgb24gc3Vic2VxdWVudCBzeW5jcy5cbiAqIEBwcm9wIHtBcnJheTxFbnRpdGllcy5Bc3NldD59IGFzc2V0cyAtIEFsbCBleGlzdGluZyBhc3NldHMgb24gZmlyc3Qgc3luYy4gTmV3IGFuZCB1cGRhdGVkIGFzc2V0cyBvbiBzdWJzZXF1ZW50IHN5bmNzLlxuICogQHByb3Age0FycmF5PFN5bmMuRGVsZXRlZEVudHJ5Pn0gZGVsZXRlZEVudHJpZXMgLSBMaXN0IG9mIGRlbGV0ZWQgRW50cmllcyBzaW5jZSBsYXN0IHN5bmNcbiAqIEBwcm9wIHtBcnJheTxTeW5jLkRlbGV0ZWRBc3NldD59IGRlbGV0ZWRBc3NldHMgLSBMaXN0IG9mIGRlbGV0ZWQgQXNzZXRzIHNpbmNlIGxhc3Qgc3luY1xuICogQHByb3Age3N0cmluZ30gbmV4dFN5bmNUb2tlbiAtIFRva2VuIHRvIGJlIHNlbnQgdG8gdGhlIG5leHQgc3luYyBjYWxsXG4gKiBAcHJvcCB7ZnVuY3Rpb24oKTogT2JqZWN0fSB0b1BsYWluT2JqZWN0KCkgLSBSZXR1cm5zIHRoaXMgU3luYyBjb2xsZWN0aW9uIGFzIGEgcGxhaW4gSlMgb2JqZWN0XG4gKiBAcHJvcCB7ZnVuY3Rpb24oP2Z1bmN0aW9uPSwgc3BhY2U9KTogT2JqZWN0fSBzdHJpbmdpZnlTYWZlKHJlcGxhY2VyLHNwYWNlKSAtIFN0cmluZ2lmaWVzIHRoZSBTeW5jIGNvbGxlY3Rpb24sIGFjY291bnRpbmcgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMuIENpcmN1bGFyIHJlZmVyZW5jZXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGp1c3QgYSBMaW5rIG9iamVjdCwgd2l0aCBhIDxjb2RlPmNpcmN1bGFyPC9jb2RlPiBwcm9wZXJ0eSBzZXQgdG8gPGNvZGU+dHJ1ZTwvY29kZT4uIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9zdHJpbmdpZnlcIj5NRE48L2E+IGFuZCA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvanNvbi1zdHJpbmdpZnktc2FmZVwiPmpzb24tc3RyaW5naWZ5LXNhZmU8L2E+IGZvciBtb3JlIGRldGFpbHMgb24gdGhlIGFyZ3VtZW50cyB0aGlzIG1ldGhvZCBjYW4gdGFrZS5cbiAqL1xuXG4vKipcbiAqIERlbGV0ZWQgRW50cmllcyBhcmUgdGhlIHNhbWUgYXMgRW50cmllcywgYnV0IG9ubHkgYXBwZWFyIG9uIHRoZSBzeW5jIEFQSS5cbiAqIEBtZW1iZXJvZiBTeW5jXG4gKiBAdHlwZWRlZiBEZWxldGVkRW50cnlcbiAqIEB0eXBlIEVudGl0aWVzLkVudHJ5XG4gKi9cblxuLyoqXG4gKiBEZWxldGVkIEFzc2V0cyBhcmUgdGhlIHNhbWUgYXMgQXNzZXRzLCBidXQgb25seSBhcHBlYXIgb24gdGhlIHN5bmMgQVBJLlxuICogQG1lbWJlcm9mIFN5bmNcbiAqIEB0eXBlZGVmIERlbGV0ZWRBc3NldFxuICogQHR5cGUgRW50aXRpZXMuQXNzZXRcbiAqL1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIHJldHJpZXZlcyBhbGwgdGhlIGF2YWlsYWJsZSBwYWdlcyBmb3IgYSBzeW5jIG9wZXJhdGlvblxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBodHRwIC0gSFRUUCBjbGllbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSAtIFF1ZXJ5IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBTeW5jIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJlc29sdmVMaW5rcyA9IHRydWVdIC0gSWYgbGlua3Mgc2hvdWxkIGJlIHJlc29sdmVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJlbW92ZVVucmVzb2x2ZWQgPSBmYWxzZV0gLSBJZiB1bnJlc29sdmFibGUgbGlua3Mgc2hvdWxkIGdldCByZW1vdmVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnBhZ2luYXRlID0gdHJ1ZV0gLSBJZiBmdXJ0aGVyIHN5bmMgcGFnZXMgc2hvdWxkIGF1dG9tYXRpY2FsbHkgYmUgY3Jhd2xlZFxuICogQHJldHVybiB7UHJvbWlzZTxTeW5jQ29sbGVjdGlvbj59XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFnZWRTeW5jKGh0dHAsIHF1ZXJ5KSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICBpZiAoIXF1ZXJ5IHx8ICFxdWVyeS5pbml0aWFsICYmICFxdWVyeS5uZXh0U3luY1Rva2VuICYmICFxdWVyeS5uZXh0UGFnZVRva2VuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgcHJvdmlkZSBvbmUgb2YgYGluaXRpYWxgLCBgbmV4dFN5bmNUb2tlbmAgb3IgYG5leHRQYWdlVG9rZW5gIHBhcmFtZXRlcnMgZm9yIHN5bmNpbmcnKTtcbiAgfVxuXG4gIGlmIChxdWVyeSAmJiBxdWVyeS5jb250ZW50X3R5cGUgJiYgIXF1ZXJ5LnR5cGUpIHtcbiAgICBxdWVyeS50eXBlID0gJ0VudHJ5JztcbiAgfSBlbHNlIGlmIChxdWVyeSAmJiBxdWVyeS5jb250ZW50X3R5cGUgJiYgcXVlcnkudHlwZSAmJiBxdWVyeS50eXBlICE9PSAnRW50cnknKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdXaGVuIHVzaW5nIHRoZSBgY29udGVudF90eXBlYCBmaWx0ZXIgeW91ciBgdHlwZWAgcGFyYW1ldGVyIGNhbm5vdCBiZSBkaWZmZXJlbnQgZnJvbSBgRW50cnlgLicpO1xuICB9XG5cbiAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHJlc29sdmVMaW5rczogdHJ1ZSxcbiAgICByZW1vdmVVbnJlc29sdmVkOiBmYWxzZSxcbiAgICBwYWdpbmF0ZTogdHJ1ZVxuICB9O1xuXG4gIHZhciBfZGVmYXVsdE9wdGlvbnMkb3B0aW8gPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyksXG4gICAgICByZXNvbHZlTGlua3MgPSBfZGVmYXVsdE9wdGlvbnMkb3B0aW8ucmVzb2x2ZUxpbmtzLFxuICAgICAgcmVtb3ZlVW5yZXNvbHZlZCA9IF9kZWZhdWx0T3B0aW9ucyRvcHRpby5yZW1vdmVVbnJlc29sdmVkLFxuICAgICAgcGFnaW5hdGUgPSBfZGVmYXVsdE9wdGlvbnMkb3B0aW8ucGFnaW5hdGU7XG5cbiAgdmFyIHN5bmNPcHRpb25zID0ge1xuICAgIHBhZ2luYXRlOiBwYWdpbmF0ZVxuICB9O1xuICByZXR1cm4gZ2V0U3luY1BhZ2UoaHR0cCwgW10sIHF1ZXJ5LCBzeW5jT3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAvLyBjbG9uZXMgcmVzcG9uc2UuaXRlbXMgdXNlZCBpbiBpbmNsdWRlcyBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdGhlc2UgdG8gYmUgbXV0YXRlZFxuICAgIGlmIChyZXNvbHZlTGlua3MpIHtcbiAgICAgIHJlc3BvbnNlLml0ZW1zID0gcmVzb2x2ZVJlc3BvbnNlKHJlc3BvbnNlLCB7XG4gICAgICAgIHJlbW92ZVVucmVzb2x2ZWQ6IHJlbW92ZVVucmVzb2x2ZWQsXG4gICAgICAgIGl0ZW1FbnRyeVBvaW50czogWydmaWVsZHMnXVxuICAgICAgfSk7XG4gICAgfSAvLyBtYXBzIHJlc3BvbnNlIGl0ZW1zIGFnYWluIGFmdGVyIGdldHRlcnMgYXJlIGF0dGFjaGVkXG5cblxuICAgIHZhciBtYXBwZWRSZXNwb25zZUl0ZW1zID0gbWFwUmVzcG9uc2VJdGVtcyhyZXNwb25zZS5pdGVtcyk7XG5cbiAgICBpZiAocmVzcG9uc2UubmV4dFN5bmNUb2tlbikge1xuICAgICAgbWFwcGVkUmVzcG9uc2VJdGVtcy5uZXh0U3luY1Rva2VuID0gcmVzcG9uc2UubmV4dFN5bmNUb2tlbjtcbiAgICB9XG5cbiAgICBpZiAocmVzcG9uc2UubmV4dFBhZ2VUb2tlbikge1xuICAgICAgbWFwcGVkUmVzcG9uc2VJdGVtcy5uZXh0UGFnZVRva2VuID0gcmVzcG9uc2UubmV4dFBhZ2VUb2tlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJlZXplU3lzKG1peGluU3RyaW5naWZ5U2FmZSh0b1BsYWluT2JqZWN0KG1hcHBlZFJlc3BvbnNlSXRlbXMpKSk7XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8RW50aXRpZXMuRW50cnl8RW50aXRpZXMuQXJyYXl8U3luYy5EZWxldGVkRW50cnl8U3luYy5EZWxldGVkQXNzZXQ+fSBpdGVtc1xuICogQHJldHVybiB7T2JqZWN0fSBFbnRpdGllcyBtYXBwZWQgdG8gYW4gb2JqZWN0IGZvciBlYWNoIGVudGl0eSB0eXBlXG4gKi9cblxuZnVuY3Rpb24gbWFwUmVzcG9uc2VJdGVtcyhpdGVtcykge1xuICB2YXIgcmVkdWNlciA9IGZ1bmN0aW9uIHJlZHVjZXIodHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWNjdW11bGF0ZWQsIGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtLnN5cy50eXBlID09PSB0eXBlKSB7XG4gICAgICAgIGFjY3VtdWxhdGVkLnB1c2godG9QbGFpbk9iamVjdChpdGVtKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZDtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZW50cmllczogaXRlbXMucmVkdWNlKHJlZHVjZXIoJ0VudHJ5JyksIFtdKSxcbiAgICBhc3NldHM6IGl0ZW1zLnJlZHVjZShyZWR1Y2VyKCdBc3NldCcpLCBbXSksXG4gICAgZGVsZXRlZEVudHJpZXM6IGl0ZW1zLnJlZHVjZShyZWR1Y2VyKCdEZWxldGVkRW50cnknKSwgW10pLFxuICAgIGRlbGV0ZWRBc3NldHM6IGl0ZW1zLnJlZHVjZShyZWR1Y2VyKCdEZWxldGVkQXNzZXQnKSwgW10pXG4gIH07XG59XG4vKipcbiAqIElmIHRoZSByZXNwb25zZSBjb250YWlucyBhIG5leHRQYWdlVXJsLCBleHRyYWN0cyB0aGUgc3luYyB0b2tlbiB0byBnZXQgdGhlXG4gKiBuZXh0IHBhZ2UgYW5kIGNhbGxzIGl0c2VsZiBhZ2FpbiB3aXRoIHRoYXQgdG9rZW4uXG4gKiBPdGhlcndpc2UsIGlmIHRoZSByZXNwb25zZSBjb250YWlucyBhIG5leHRTeW5jVXJsLCBleHRyYWN0cyB0aGUgc3luYyB0b2tlblxuICogYW5kIHJldHVybnMgaXQuXG4gKiBPbiBlYWNoIGNhbGwgb2YgdGhpcyBmdW5jdGlvbiwgYW55IHJldHJpZXZlZCBpdGVtcyBhcmUgY29sbGVjdGVkIGluIHRoZVxuICogc3VwcGxpZWQgaXRlbXMgYXJyYXksIHdoaWNoIGdldHMgcmV0dXJuZWQgaW4gdGhlIGVuZFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBodHRwXG4gKiBAcGFyYW0ge0FycmF5PEVudGl0aWVzLkVudHJ5fEVudGl0aWVzLkFycmF5fFN5bmMuRGVsZXRlZEVudHJ5fFN5bmMuRGVsZXRlZEFzc2V0Pn0gaXRlbXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBTeW5jIHBhZ2Ugb3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucGFnaW5hdGUgPSB0cnVlXSAtIElmIGZ1cnRoZXIgc3luYyBwYWdlcyBzaG91bGQgYXV0b21hdGljYWxseSBiZSBjcmF3bGVkXG4gKiBAcmV0dXJuIHtQcm9taXNlPHtpdGVtczogQXJyYXksIG5leHRTeW5jVG9rZW46IHN0cmluZ30+fVxuICovXG5cblxuZnVuY3Rpb24gZ2V0U3luY1BhZ2UoaHR0cCwgaXRlbXMsIHF1ZXJ5LCBfcmVmKSB7XG4gIHZhciBwYWdpbmF0ZSA9IF9yZWYucGFnaW5hdGU7XG5cbiAgaWYgKHF1ZXJ5Lm5leHRTeW5jVG9rZW4pIHtcbiAgICBxdWVyeS5zeW5jX3Rva2VuID0gcXVlcnkubmV4dFN5bmNUb2tlbjtcbiAgICBkZWxldGUgcXVlcnkubmV4dFN5bmNUb2tlbjtcbiAgfVxuXG4gIGlmIChxdWVyeS5uZXh0UGFnZVRva2VuKSB7XG4gICAgcXVlcnkuc3luY190b2tlbiA9IHF1ZXJ5Lm5leHRQYWdlVG9rZW47XG4gICAgZGVsZXRlIHF1ZXJ5Lm5leHRQYWdlVG9rZW47XG4gIH1cblxuICBpZiAocXVlcnkuc3luY190b2tlbikge1xuICAgIGRlbGV0ZSBxdWVyeS5pbml0aWFsO1xuICAgIGRlbGV0ZSBxdWVyeS50eXBlO1xuICAgIGRlbGV0ZSBxdWVyeS5jb250ZW50X3R5cGU7XG4gICAgZGVsZXRlIHF1ZXJ5LmxpbWl0O1xuICB9XG5cbiAgcmV0dXJuIGh0dHAuZ2V0KCdzeW5jJywgY3JlYXRlUmVxdWVzdENvbmZpZyh7XG4gICAgcXVlcnk6IHF1ZXJ5XG4gIH0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHZhciBkYXRhID0gcmVzcG9uc2UuZGF0YSB8fCB7fTtcbiAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChkYXRhLml0ZW1zIHx8IFtdKTtcblxuICAgIGlmIChkYXRhLm5leHRQYWdlVXJsKSB7XG4gICAgICBpZiAocGFnaW5hdGUpIHtcbiAgICAgICAgZGVsZXRlIHF1ZXJ5LmluaXRpYWw7XG4gICAgICAgIHF1ZXJ5LnN5bmNfdG9rZW4gPSBnZXRUb2tlbihkYXRhLm5leHRQYWdlVXJsKTtcbiAgICAgICAgcmV0dXJuIGdldFN5bmNQYWdlKGh0dHAsIGl0ZW1zLCBxdWVyeSwge1xuICAgICAgICAgIHBhZ2luYXRlOiBwYWdpbmF0ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IGl0ZW1zLFxuICAgICAgICBuZXh0UGFnZVRva2VuOiBnZXRUb2tlbihkYXRhLm5leHRQYWdlVXJsKVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRhdGEubmV4dFN5bmNVcmwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgbmV4dFN5bmNUb2tlbjogZ2V0VG9rZW4oZGF0YS5uZXh0U3luY1VybClcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGl0ZW1zOiBbXVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBFeHRyYWN0cyB0b2tlbiBvdXQgb2YgYW4gdXJsXG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gZ2V0VG9rZW4odXJsKSB7XG4gIHZhciB1cmxQYXJ0cyA9IHVybC5zcGxpdCgnPycpO1xuICByZXR1cm4gdXJsUGFydHMubGVuZ3RoID4gMCA/IHVybFBhcnRzWzFdLnJlcGxhY2UoJ3N5bmNfdG9rZW49JywgJycpIDogJyc7XG59IiwiZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG4vKlxuKiBzZGsgcmVsaWVzIGhlYXZpbHkgb24gc3lzIG1ldGFkYXRhXG4qIHNvIHdlIGNhbm5vdCBvbWl0IHRoZSBzeXMgcHJvcGVydHkgb24gc2RrIGxldmVsIGVudGlyZWx5XG4qIGFuZCB3ZSBoYXZlIHRvIGVuc3VyZSB0aGF0IGF0IGxlYXN0IGBpZGAgYW5kIGB0eXBlYCBhcmUgcHJlc2VudFxuKiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplU2VsZWN0KHF1ZXJ5KSB7XG4gIGlmICghcXVlcnkuc2VsZWN0KSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFRoZSBzZWxlY3Rpb24gb2YgZmllbGRzIGZvciB0aGUgcXVlcnkgaXMgbGltaXRlZFxuICAvLyBHZXQgdGhlIGRpZmZlcmVudCBwYXJ0cyB0aGF0IGFyZSBsaXN0ZWQgZm9yIHNlbGVjdGlvblxuXG5cbiAgdmFyIGFsbFNlbGVjdHMgPSBxdWVyeS5zZWxlY3Quc3BsaXQoJywnKTsgLy8gTW92ZSB0aGUgcGFydHMgaW50byBhIHNldCBmb3IgZWFzeSBhY2Nlc3MgYW5kIGRlZHVwbGljYXRpb25cblxuICB2YXIgc2VsZWN0ZWRTZXQgPSBuZXcgU2V0KGFsbFNlbGVjdHMpOyAvLyBJZiB3ZSBhbHJlYWR5IHNlbGVjdCBhbGwgb2YgYHN5c2Agd2UgY2FuIGp1c3QgcmV0dXJuXG4gIC8vIHNpbmNlIHdlJ3JlIGFueXdheSBmZXRjaGluZyBldmVyeXRoaW5nIHRoYXQgaXMgbmVlZGVkXG5cbiAgaWYgKHNlbGVjdGVkU2V0Lmhhcygnc3lzJykpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gV2UgZG9uJ3Qgc2VsZWN0IGBzeXNgIHNvIHdlIG5lZWQgdG8gZW5zdXJlIHRoZSBtaW5pbXVtIHNldFxuXG5cbiAgc2VsZWN0ZWRTZXQuYWRkKCdzeXMuaWQnKTtcbiAgc2VsZWN0ZWRTZXQuYWRkKCdzeXMudHlwZScpOyAvLyBSZWFzc2lnbiB0aGUgbm9ybWFsaXplZCBzeXMgcHJvcGVydGllc1xuXG4gIHF1ZXJ5LnNlbGVjdCA9IF90b0NvbnN1bWFibGVBcnJheShzZWxlY3RlZFNldCkuam9pbignLCcpO1xufSIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vKipcbiAqIENvbnRlbnRmdWwgRGVsaXZlcnkgQVBJIENsaWVudC4gQ29udGFpbnMgbWV0aG9kcyB3aGljaCBhbGxvdyBhY2Nlc3MgdG8gdGhlXG4gKiBkaWZmZXJlbnQga2luZHMgb2YgZW50aXRpZXMgcHJlc2VudCBpbiBDb250ZW50ZnVsIChFbnRyaWVzLCBBc3NldHMsIGV0YykuXG4gKiBAbmFtZXNwYWNlIENvbnRlbnRmdWxDbGllbnRBUElcbiAqIEBzZWUgRW50aXRpZXNcbiAqL1xuXG4vKipcbiAqIFRoZSBkaWZmZXJlbnQga2luZHMgb2YgdG9wIGxldmVsIGVudGl0aWVzIHlvdSBjYW4gZmluZCBpbiBDb250ZW50ZnVsXG4gKiBAbmFtZXNwYWNlIEVudGl0aWVzXG4gKi9cblxuLyoqXG4gKiBTeXN0ZW0gbWV0YWRhdGEuIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvY29udGVudC1kZWxpdmVyeS1hcGkvIy9pbnRyb2R1Y3Rpb24vY29tbW9uLXJlc291cmNlLWF0dHJpYnV0ZXNcIj5Db21tb24gUmVzb3VyY2UgQXR0cmlidXRlczwvYT4gZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBtZW1iZXJvZiBFbnRpdGllc1xuICogQHR5cGVkZWYgU3lzXG4gKiBAcHJvcCB7c3RyaW5nfSB0eXBlXG4gKiBAcHJvcCB7c3RyaW5nfSBpZFxuICogQHByb3Age0VudGl0aWVzLkxpbmt9IHNwYWNlXG4gKiBAcHJvcCB7c3RyaW5nfSBjcmVhdGVkQXRcbiAqIEBwcm9wIHtzdHJpbmd9IHVwZGF0ZWRBdFxuICogQHByb3Age251bWJlcn0gcmV2aXNpb25cbiAqL1xuXG4vKipcbiAqIExpbmsgdG8gYW5vdGhlciBlbnRpdHkuIFNlZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL2NvbmNlcHRzL2xpbmtzL1wiPkxpbmtzPC9hPiBmb3IgbW9yZSBkZXRhaWxzLlxuICogQG1lbWJlcm9mIEVudGl0aWVzXG4gKiBAdHlwZWRlZiBMaW5rXG4gKiBAcHJvcCB7c3RyaW5nfSB0eXBlIC0gdHlwZSBvZiB0aGlzIGVudGl0eS4gQWx3YXlzIGxpbmsuXG4gKiBAcHJvcCB7c3RyaW5nfSBpZFxuICogQHByb3Age3N0cmluZ30gbGlua1R5cGUgLSB0eXBlIG9mIHRoaXMgbGluay4gSWYgZGVmaW5lZCwgZWl0aGVyIEVudHJ5IG9yIEFzc2V0XG4gKi9cblxuLyoqXG4gKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICogQHR5cGVkZWYge09iamVjdH0gQ2xpZW50QVBJXG4gKiBAcHJvcCB7ZnVuY3Rpb259IGdldFNwYWNlXG4gKiBAcHJvcCB7ZnVuY3Rpb259IGdldENvbnRlbnRUeXBlXG4gKiBAcHJvcCB7ZnVuY3Rpb259IGdldENvbnRlbnRUeXBlc1xuICogQHByb3Age2Z1bmN0aW9ufSBnZXRFbnRyeVxuICogQHByb3Age2Z1bmN0aW9ufSBnZXRFbnRyaWVzXG4gKiBAcHJvcCB7ZnVuY3Rpb259IGdldEFzc2V0XG4gKiBAcHJvcCB7ZnVuY3Rpb259IGdldEFzc2V0c1xuICogQHByb3Age2Z1bmN0aW9ufSBwYXJzZUVudHJpZXNcbiAqIEBwcm9wIHtmdW5jdGlvbn0gc3luY1xuICovXG5pbXBvcnQgeyBjcmVhdGVSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnY29udGVudGZ1bC1zZGstY29yZSc7XG5pbXBvcnQgZW50aXRpZXMgZnJvbSAnLi9lbnRpdGllcyc7XG5pbXBvcnQgcGFnZWRTeW5jIGZyb20gJy4vcGFnZWQtc3luYyc7XG5pbXBvcnQgbm9ybWFsaXplU2VsZWN0IGZyb20gJy4vdXRpbHMvbm9ybWFsaXplLXNlbGVjdCc7XG4vKipcbiAqIENyZWF0ZXMgQVBJIG9iamVjdCB3aXRoIG1ldGhvZHMgdG8gYWNjZXNzIGZ1bmN0aW9uYWxpdHkgZnJvbSBDb250ZW50ZnVsJ3NcbiAqIERlbGl2ZXJ5IEFQSVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBBUEkgaW5pdGlhbGl6YXRpb24gcGFyYW1zXG4gKiBAcHJvcCB7T2JqZWN0fSBodHRwIC0gSFRUUCBjbGllbnQgaW5zdGFuY2VcbiAqIEBwcm9wIHtPYmplY3R9IGVudGl0aWVzIC0gT2JqZWN0IHdpdGggd3JhcHBlciBtZXRob2RzIGZvciBlYWNoIGtpbmQgb2YgZW50aXR5XG4gKiBAcHJvcCB7RnVuY3Rpb259IGdldEdsb2JhbE9wdGlvbnMgLSBMaW5rIHJlc29sdmVyIHByZWNvbmZpZ3VyZWQgd2l0aCBnbG9iYWwgc2V0dGluZ1xuICogQHJldHVybiB7Q2xpZW50QVBJfVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRlbnRmdWxBcGkoX3JlZikge1xuICB2YXIgaHR0cCA9IF9yZWYuaHR0cCxcbiAgICAgIGdldEdsb2JhbE9wdGlvbnMgPSBfcmVmLmdldEdsb2JhbE9wdGlvbnM7XG4gIHZhciB3cmFwU3BhY2UgPSBlbnRpdGllcy5zcGFjZS53cmFwU3BhY2U7XG4gIHZhciBfZW50aXRpZXMkY29udGVudFR5cGUgPSBlbnRpdGllcy5jb250ZW50VHlwZSxcbiAgICAgIHdyYXBDb250ZW50VHlwZSA9IF9lbnRpdGllcyRjb250ZW50VHlwZS53cmFwQ29udGVudFR5cGUsXG4gICAgICB3cmFwQ29udGVudFR5cGVDb2xsZWN0aW9uID0gX2VudGl0aWVzJGNvbnRlbnRUeXBlLndyYXBDb250ZW50VHlwZUNvbGxlY3Rpb247XG4gIHZhciBfZW50aXRpZXMkZW50cnkgPSBlbnRpdGllcy5lbnRyeSxcbiAgICAgIHdyYXBFbnRyeSA9IF9lbnRpdGllcyRlbnRyeS53cmFwRW50cnksXG4gICAgICB3cmFwRW50cnlDb2xsZWN0aW9uID0gX2VudGl0aWVzJGVudHJ5LndyYXBFbnRyeUNvbGxlY3Rpb247XG4gIHZhciBfZW50aXRpZXMkYXNzZXQgPSBlbnRpdGllcy5hc3NldCxcbiAgICAgIHdyYXBBc3NldCA9IF9lbnRpdGllcyRhc3NldC53cmFwQXNzZXQsXG4gICAgICB3cmFwQXNzZXRDb2xsZWN0aW9uID0gX2VudGl0aWVzJGFzc2V0LndyYXBBc3NldENvbGxlY3Rpb247XG4gIHZhciB3cmFwTG9jYWxlQ29sbGVjdGlvbiA9IGVudGl0aWVzLmxvY2FsZS53cmFwTG9jYWxlQ29sbGVjdGlvbjtcblxuICB2YXIgbm90Rm91bmRFcnJvciA9IGZ1bmN0aW9uIG5vdEZvdW5kRXJyb3IoaWQpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ1RoZSByZXNvdXJjZSBjb3VsZCBub3QgYmUgZm91bmQuJyk7XG4gICAgZXJyb3Iuc3lzID0ge1xuICAgICAgdHlwZTogJ0Vycm9yJyxcbiAgICAgIGlkOiAnTm90Rm91bmQnXG4gICAgfTtcbiAgICBlcnJvci5kZXRhaWxzID0ge1xuICAgICAgdHlwZTogJ0VudHJ5JyxcbiAgICAgIGlkOiBpZCxcbiAgICAgIGVudmlyb25tZW50OiBnZXRHbG9iYWxPcHRpb25zKCkuZW52aXJvbm1lbnQsXG4gICAgICBzcGFjZTogZ2V0R2xvYmFsT3B0aW9ucygpLnNwYWNlXG4gICAgfTtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH07XG5cbiAgZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLmRhdGEpIHtcbiAgICAgIHRocm93IGVycm9yLmRhdGE7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmRhdGEpIHtcbiAgICAgIHRocm93IGVycm9yLnJlc3BvbnNlLmRhdGE7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIFNwYWNlIHdoaWNoIHRoZSBjbGllbnQgaXMgY3VycmVudGx5IGNvbmZpZ3VyZWQgdG8gdXNlXG4gICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuU3BhY2U+fSBQcm9taXNlIGZvciBhIFNwYWNlXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAgICpcbiAgICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICAgKiAgIHNwYWNlOiAnPHNwYWNlX2lkPicsXG4gICAqICAgYWNjZXNzVG9rZW46ICc8Y29udGVudF9kZWxpdmVyeV9hcGlfa2V5PidcbiAgICogfSlcbiAgICogLy8gcmV0dXJucyB0aGUgc3BhY2Ugb2JqZWN0IHdpdGggdGhlIGFib3ZlIDxzcGFjZS1pZD5cbiAgICogY2xpZW50LmdldFNwYWNlKClcbiAgICogLnRoZW4oKHNwYWNlKSA9PiBjb25zb2xlLmxvZyhzcGFjZSkpXG4gICAqIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFNwYWNlKCkge1xuICAgIHN3aXRjaFRvU3BhY2UoaHR0cCk7XG4gICAgcmV0dXJuIGh0dHAuZ2V0KCcnKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHdyYXBTcGFjZShyZXNwb25zZS5kYXRhKTtcbiAgICB9LCBlcnJvckhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgQ29udGVudCBUeXBlXG4gICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICAqIEBwYXJhbSAge3N0cmluZ30gaWRcbiAgICogQHJldHVybiB7UHJvbWlzZTxFbnRpdGllcy5Db250ZW50VHlwZT59IFByb21pc2UgZm9yIGEgQ29udGVudCBUeXBlXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAgICpcbiAgICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICAgKiAgIHNwYWNlOiAnPHNwYWNlX2lkPicsXG4gICAqICAgYWNjZXNzVG9rZW46ICc8Y29udGVudF9kZWxpdmVyeV9hcGlfa2V5PidcbiAgICogfSlcbiAgICpcbiAgICogY2xpZW50LmdldENvbnRlbnRUeXBlKCc8Y29udGVudF90eXBlX2lkPicpXG4gICAqIC50aGVuKChjb250ZW50VHlwZSkgPT4gY29uc29sZS5sb2coY29udGVudFR5cGUpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRDb250ZW50VHlwZShpZCkge1xuICAgIHN3aXRjaFRvRW52aXJvbm1lbnQoaHR0cCk7XG4gICAgcmV0dXJuIGh0dHAuZ2V0KCdjb250ZW50X3R5cGVzLycgKyBpZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiB3cmFwQ29udGVudFR5cGUocmVzcG9uc2UuZGF0YSk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIGNvbGxlY3Rpb24gb2YgQ29udGVudCBUeXBlc1xuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtPYmplY3Q9fSBxdWVyeSAtIE9iamVjdCB3aXRoIHNlYXJjaCBwYXJhbWV0ZXJzLiBDaGVjayB0aGUgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNvbnRlbnRmdWwuY29tL2RldmVsb3BlcnMvZG9jcy9qYXZhc2NyaXB0L3R1dG9yaWFscy91c2luZy1qcy1jZGEtc2RrLyNyZXRyaWV2aW5nLWVudHJpZXMtd2l0aC1zZWFyY2gtcGFyYW1ldGVyc1wiPkpTIFNESyB0dXRvcmlhbDwvYT4gYW5kIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL3JlZmVyZW5jZXMvY29udGVudC1kZWxpdmVyeS1hcGkvIy9yZWZlcmVuY2Uvc2VhcmNoLXBhcmFtZXRlcnNcIj5SRVNUIEFQSSByZWZlcmVuY2U8L2E+IGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuQ29udGVudFR5cGVDb2xsZWN0aW9uPn0gUHJvbWlzZSBmb3IgYSBjb2xsZWN0aW9uIG9mIENvbnRlbnQgVHlwZXNcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICAgKlxuICAgKiBjb25zdCBjbGllbnQgPSBjb250ZW50ZnVsLmNyZWF0ZUNsaWVudCh7XG4gICAqICAgc3BhY2U6ICc8c3BhY2VfaWQ+JyxcbiAgICogICBhY2Nlc3NUb2tlbjogJzxjb250ZW50X2RlbGl2ZXJ5X2FwaV9rZXk+J1xuICAgKiB9KVxuICAgKlxuICAgKiBjbGllbnQuZ2V0Q29udGVudFR5cGVzKClcbiAgICogLnRoZW4oKHJlc3BvbnNlKSA9PiBjb25zb2xlLmxvZyhyZXNwb25zZS5pdGVtcykpXG4gICAqIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldENvbnRlbnRUeXBlcygpIHtcbiAgICB2YXIgcXVlcnkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHN3aXRjaFRvRW52aXJvbm1lbnQoaHR0cCk7XG4gICAgcmV0dXJuIGh0dHAuZ2V0KCdjb250ZW50X3R5cGVzJywgY3JlYXRlUmVxdWVzdENvbmZpZyh7XG4gICAgICBxdWVyeTogcXVlcnlcbiAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiB3cmFwQ29udGVudFR5cGVDb2xsZWN0aW9uKHJlc3BvbnNlLmRhdGEpO1xuICAgIH0sIGVycm9ySGFuZGxlcik7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYW4gRW50cnlcbiAgICogQG1lbWJlcm9mIENvbnRlbnRmdWxDbGllbnRBUElcbiAgICogQHBhcmFtICB7c3RyaW5nfSBpZFxuICAgKiBAcGFyYW0gIHtPYmplY3Q9fSBxdWVyeSAtIE9iamVjdCB3aXRoIHNlYXJjaCBwYXJhbWV0ZXJzLiBJbiB0aGlzIG1ldGhvZCBpdCdzIG9ubHkgdXNlZnVsIGZvciBgbG9jYWxlYC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxFbnRpdGllcy5FbnRyeT59IFByb21pc2UgZm9yIGFuIEVudHJ5XG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAgICpcbiAgICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICAgKiAgIHNwYWNlOiAnPHNwYWNlX2lkPicsXG4gICAqICAgYWNjZXNzVG9rZW46ICc8Y29udGVudF9kZWxpdmVyeV9hcGlfa2V5PidcbiAgICogfSlcbiAgICpcbiAgICogY2xpZW50LmdldEVudHJ5KCc8ZW50cnlfaWQ+JylcbiAgICogLnRoZW4oKGVudHJ5KSA9PiBjb25zb2xlLmxvZyhlbnRyeSkpXG4gICAqIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldEVudHJ5KGlkKSB7XG4gICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIGlmICghaWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChub3RGb3VuZEVycm9yKGlkKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RW50cmllcyhfb2JqZWN0U3ByZWFkKHtcbiAgICAgICdzeXMuaWQnOiBpZFxuICAgIH0sIHF1ZXJ5KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGlmIChyZXNwb25zZS5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB3cmFwRW50cnkocmVzcG9uc2UuaXRlbXNbMF0pO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBub3RGb3VuZEVycm9yKGlkKTtcbiAgICB9LCBlcnJvckhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgY29sbGVjdGlvbiBvZiBFbnRyaWVzXG4gICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICAqIEBwYXJhbSAge09iamVjdD19IHF1ZXJ5IC0gT2JqZWN0IHdpdGggc2VhcmNoIHBhcmFtZXRlcnMuIENoZWNrIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL2phdmFzY3JpcHQvdHV0b3JpYWxzL3VzaW5nLWpzLWNkYS1zZGsvI3JldHJpZXZpbmctZW50cmllcy13aXRoLXNlYXJjaC1wYXJhbWV0ZXJzXCI+SlMgU0RLIHR1dG9yaWFsPC9hPiBhbmQgdGhlIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVmZXJlbmNlcy9jb250ZW50LWRlbGl2ZXJ5LWFwaS8jL3JlZmVyZW5jZS9zZWFyY2gtcGFyYW1ldGVyc1wiPlJFU1QgQVBJIHJlZmVyZW5jZTwvYT4gZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxFbnRpdGllcy5FbnRyeUNvbGxlY3Rpb24+fSBQcm9taXNlIGZvciBhIGNvbGxlY3Rpb24gb2YgRW50cmllc1xuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRFbnRyaWVzKClcbiAgICogLnRoZW4oKHJlc3BvbnNlKSA9PiBjb25zb2xlLmxvZyhyZXNwb25zZS5pdGVtcykpXG4gICAqIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldEVudHJpZXMoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBzd2l0Y2hUb0Vudmlyb25tZW50KGh0dHApO1xuXG4gICAgdmFyIF9nZXRHbG9iYWxPcHRpb25zID0gZ2V0R2xvYmFsT3B0aW9ucyhxdWVyeSksXG4gICAgICAgIHJlc29sdmVMaW5rcyA9IF9nZXRHbG9iYWxPcHRpb25zLnJlc29sdmVMaW5rcyxcbiAgICAgICAgcmVtb3ZlVW5yZXNvbHZlZCA9IF9nZXRHbG9iYWxPcHRpb25zLnJlbW92ZVVucmVzb2x2ZWQ7XG5cbiAgICBub3JtYWxpemVTZWxlY3QocXVlcnkpO1xuICAgIHJldHVybiBodHRwLmdldCgnZW50cmllcycsIGNyZWF0ZVJlcXVlc3RDb25maWcoe1xuICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gd3JhcEVudHJ5Q29sbGVjdGlvbihyZXNwb25zZS5kYXRhLCB7XG4gICAgICAgIHJlc29sdmVMaW5rczogcmVzb2x2ZUxpbmtzLFxuICAgICAgICByZW1vdmVVbnJlc29sdmVkOiByZW1vdmVVbnJlc29sdmVkXG4gICAgICB9KTtcbiAgICB9LCBlcnJvckhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGFuIEFzc2V0XG4gICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICAqIEBwYXJhbSAge3N0cmluZ30gaWRcbiAgICogQHBhcmFtICB7T2JqZWN0PX0gcXVlcnkgLSBPYmplY3Qgd2l0aCBzZWFyY2ggcGFyYW1ldGVycy4gSW4gdGhpcyBtZXRob2QgaXQncyBvbmx5IHVzZWZ1bCBmb3IgYGxvY2FsZWAuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RW50aXRpZXMuQXNzZXQ+fSBQcm9taXNlIGZvciBhbiBBc3NldFxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRBc3NldCgnPGFzc2V0X2lkPicpXG4gICAqIC50aGVuKChhc3NldCkgPT4gY29uc29sZS5sb2coYXNzZXQpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRBc3NldChpZCkge1xuICAgIHZhciBxdWVyeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKTtcbiAgICBub3JtYWxpemVTZWxlY3QocXVlcnkpO1xuICAgIHJldHVybiBodHRwLmdldCgnYXNzZXRzLycgKyBpZCwgY3JlYXRlUmVxdWVzdENvbmZpZyh7XG4gICAgICBxdWVyeTogcXVlcnlcbiAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiB3cmFwQXNzZXQocmVzcG9uc2UuZGF0YSk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIGNvbGxlY3Rpb24gb2YgQXNzZXRzXG4gICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICAqIEBwYXJhbSAge09iamVjdD19IHF1ZXJ5IC0gT2JqZWN0IHdpdGggc2VhcmNoIHBhcmFtZXRlcnMuIENoZWNrIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL2phdmFzY3JpcHQvdHV0b3JpYWxzL3VzaW5nLWpzLWNkYS1zZGsvI3JldHJpZXZpbmctZW50cmllcy13aXRoLXNlYXJjaC1wYXJhbWV0ZXJzXCI+SlMgU0RLIHR1dG9yaWFsPC9hPiBhbmQgdGhlIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVmZXJlbmNlcy9jb250ZW50LWRlbGl2ZXJ5LWFwaS8jL3JlZmVyZW5jZS9zZWFyY2gtcGFyYW1ldGVyc1wiPlJFU1QgQVBJIHJlZmVyZW5jZTwvYT4gZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxFbnRpdGllcy5Bc3NldENvbGxlY3Rpb24+fSBQcm9taXNlIGZvciBhIGNvbGxlY3Rpb24gb2YgQXNzZXRzXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGNvbnRlbnRmdWwgPSByZXF1aXJlKCdjb250ZW50ZnVsJylcbiAgICpcbiAgICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICAgKiAgIHNwYWNlOiAnPHNwYWNlX2lkPicsXG4gICAqICAgYWNjZXNzVG9rZW46ICc8Y29udGVudF9kZWxpdmVyeV9hcGlfa2V5PidcbiAgICogfSlcbiAgICpcbiAgICogY2xpZW50LmdldEFzc2V0cygpXG4gICAqIC50aGVuKChyZXNwb25zZSkgPT4gY29uc29sZS5sb2cocmVzcG9uc2UuaXRlbXMpKVxuICAgKiAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRBc3NldHMoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBzd2l0Y2hUb0Vudmlyb25tZW50KGh0dHApO1xuICAgIG5vcm1hbGl6ZVNlbGVjdChxdWVyeSk7XG4gICAgcmV0dXJuIGh0dHAuZ2V0KCdhc3NldHMnLCBjcmVhdGVSZXF1ZXN0Q29uZmlnKHtcbiAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHdyYXBBc3NldENvbGxlY3Rpb24ocmVzcG9uc2UuZGF0YSk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIGNvbGxlY3Rpb24gb2YgTG9jYWxlXG4gICAqIEBtZW1iZXJvZiBDb250ZW50ZnVsQ2xpZW50QVBJXG4gICAqIEBwYXJhbSAge09iamVjdD19IHF1ZXJ5IC0gT2JqZWN0IHdpdGggc2VhcmNoIHBhcmFtZXRlcnMuIENoZWNrIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29udGVudGZ1bC5jb20vZGV2ZWxvcGVycy9kb2NzL2phdmFzY3JpcHQvdHV0b3JpYWxzL3VzaW5nLWpzLWNkYS1zZGsvI3JldHJpZXZpbmctZW50cmllcy13aXRoLXNlYXJjaC1wYXJhbWV0ZXJzXCI+SlMgU0RLIHR1dG9yaWFsPC9hPiBhbmQgdGhlIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVmZXJlbmNlcy9jb250ZW50LWRlbGl2ZXJ5LWFwaS8jL3JlZmVyZW5jZS9zZWFyY2gtcGFyYW1ldGVyc1wiPlJFU1QgQVBJIHJlZmVyZW5jZTwvYT4gZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxFbnRpdGllcy5Mb2NhbGVDb2xsZWN0aW9uPn0gUHJvbWlzZSBmb3IgYSBjb2xsZWN0aW9uIG9mIExvY2FsZVxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBjb250ZW50ZnVsID0gcmVxdWlyZSgnY29udGVudGZ1bCcpXG4gICAqXG4gICAqIGNvbnN0IGNsaWVudCA9IGNvbnRlbnRmdWwuY3JlYXRlQ2xpZW50KHtcbiAgICogICBzcGFjZTogJzxzcGFjZV9pZD4nLFxuICAgKiAgIGFjY2Vzc1Rva2VuOiAnPGNvbnRlbnRfZGVsaXZlcnlfYXBpX2tleT4nXG4gICAqIH0pXG4gICAqXG4gICAqIGNsaWVudC5nZXRMb2NhbGVzKClcbiAgICogLnRoZW4oKHJlc3BvbnNlKSA9PiBjb25zb2xlLmxvZyhyZXNwb25zZS5pdGVtcykpXG4gICAqIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldExvY2FsZXMoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBzd2l0Y2hUb0Vudmlyb25tZW50KGh0dHApO1xuICAgIHJldHVybiBodHRwLmdldCgnbG9jYWxlcycsIGNyZWF0ZVJlcXVlc3RDb25maWcoe1xuICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gd3JhcExvY2FsZUNvbGxlY3Rpb24ocmVzcG9uc2UuZGF0YSk7XG4gICAgfSwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuICAvKipcbiAgICogU3luY2hyb25pemVzIGVpdGhlciBhbGwgdGhlIGNvbnRlbnQgb3Igb25seSBuZXcgY29udGVudCBzaW5jZSBsYXN0IHN5bmNcbiAgICogU2VlIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb250ZW50ZnVsLmNvbS9kZXZlbG9wZXJzL2RvY3MvY29uY2VwdHMvc3luYy9cIj5TeW5jaHJvbml6YXRpb248L2E+IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKiA8c3Ryb25nPiBJbXBvcnRhbnQgbm90ZTogPC9zdHJvbmc+IFRoZSB0aGUgc3luYyBhcGkgZW5kcG9pbnQgZG9lcyBub3Qgc3VwcG9ydCBpbmNsdWRlIG9yIGxpbmsgcmVzb2x1dGlvbi5cbiAgICogSG93ZXZlciBjb250ZW50ZnVsLmpzIGlzIGRvaW5nIGxpbmsgcmVzb2x1dGlvbiBjbGllbnQgc2lkZSBpZiB5b3Ugb25seSBtYWtlIGFuIGluaXRpYWwgc3luYy5cbiAgICogRm9yIHRoZSBkZWx0YSBzeW5jICh1c2luZyBuZXh0U3luY1Rva2VuKSBpdCBpcyBub3QgcG9zc2libGUgc2luY2UgdGhlIHNkayB3b250IGhhdmUgYWNjZXNzIHRvIGFsbCB0aGUgZGF0YSB0byBtYWtlIHN1Y2ggYW4gb3BlcmF0aW9uLlxuICAgKiBAbWVtYmVyb2YgQ29udGVudGZ1bENsaWVudEFQSVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IHF1ZXJ5IC0gUXVlcnkgb2JqZWN0IGZvciB0aGUgc3luYyBjYWxsLiBPbmUgb2YgaW5pdGlhbCBvciBuZXh0U3luY1Rva2VuIGFsd2F5cyBuZWVkcyB0byBiZSBzcGVjaWZpZWQsIGJ1dCBub3QgYm90aC5cbiAgICogQHBhcmFtICB7Ym9vbGVhbj99IHF1ZXJ5LmluaXRpYWwgLSBJbmRpY2F0ZXMgaWYgdGhpcyBpcyB0aGUgZmlyc3Qgc3luYy4gVXNlIGl0IGlmIHlvdSBkb24ndCBoYXZlIGEgc3luYyB0b2tlbi5cbiAgICogQHBhcmFtICB7c3RyaW5nP30gcXVlcnkubmV4dFN5bmNUb2tlbiAtIFRoZSB0b2tlbiB5b3UgZ290IHRoZSBsYXN0IHRpbWUgeW91IHVzZWQgdGhpcyBtZXRob2QuIEVuc3VyZXMgeW91IG9ubHkgZ2V0IGNoYW5nZWQgY29udGVudC5cbiAgICogQHBhcmFtICB7c3RyaW5nPX0gcXVlcnkudHlwZSAtIEZpbHRlciBieSB0aGlzIHR5cGUgKGFsbCAoZGVmYXVsdCksIEVudHJ5LCBBc3NldCwgRGVsZXRpb24sIERlbGV0ZWRBc3NldCBvciBEZWxldGVkRW50cnkpXG4gICAqIEBwYXJhbSAge3N0cmluZz19IHF1ZXJ5LmNvbnRlbnRfdHlwZSAtIEZpbHRlciBieSB0aGlzIGNvbnRlbnQgdHlwZSBpZFxuICAgKiBAcGFyYW0gIHtib29sZWFuPX0gcXVlcnkucmVzb2x2ZUxpbmtzIC0gV2hlbiB0cnVlLCBsaW5rcyB0byBvdGhlciBFbnRyaWVzIG9yIEFzc2V0cyBhcmUgcmVzb2x2ZWQuIERlZmF1bHQ6IHRydWUuXG4gICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0gIHtib29sZWFuPX0gW29wdGlvbnMucGFnaW5hdGUgPSB0cnVlXSAtIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHBhZ2luYXRpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxTeW5jLlN5bmNDb2xsZWN0aW9uPn0gUHJvbWlzZSBmb3IgdGhlIGNvbGxlY3Rpb24gcmVzdWx0aW5nIG9mIGEgc3luYyBvcGVyYXRpb25cbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICAgKlxuICAgKiBjb25zdCBjbGllbnQgPSBjb250ZW50ZnVsLmNyZWF0ZUNsaWVudCh7XG4gICAqICAgc3BhY2U6ICc8c3BhY2VfaWQ+JyxcbiAgICogICBhY2Nlc3NUb2tlbjogJzxjb250ZW50X2RlbGl2ZXJ5X2FwaV9rZXk+J1xuICAgKiB9KVxuICAgKlxuICAgKiBjbGllbnQuc3luYyh7XG4gICAqICAgaW5pdGlhbDogdHJ1ZVxuICAgKiB9KVxuICAgKiAudGhlbigocmVzcG9uc2UpID0+IGNvbnNvbGUubG9nKHtcbiAgICogICBlbnRyaWVzOiByZXNwb25zZS5lbnRyaWVzLFxuICAgKiAgIGFzc2V0czogcmVzcG9uc2UuYXNzZXRzLFxuICAgKiAgIG5leHRTeW5jVG9rZW46IHJlc3BvbnNlLm5leHRTeW5jVG9rZW5cbiAgICogfSkpXG4gICAqIC5jYXRjaChjb25zb2xlLmVycm9yKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN5bmMoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgcGFnaW5hdGU6IHRydWVcbiAgICB9O1xuXG4gICAgdmFyIF9nZXRHbG9iYWxPcHRpb25zMiA9IGdldEdsb2JhbE9wdGlvbnMocXVlcnkpLFxuICAgICAgICByZXNvbHZlTGlua3MgPSBfZ2V0R2xvYmFsT3B0aW9uczIucmVzb2x2ZUxpbmtzLFxuICAgICAgICByZW1vdmVVbnJlc29sdmVkID0gX2dldEdsb2JhbE9wdGlvbnMyLnJlbW92ZVVucmVzb2x2ZWQ7XG5cbiAgICBzd2l0Y2hUb0Vudmlyb25tZW50KGh0dHApO1xuICAgIHJldHVybiBwYWdlZFN5bmMoaHR0cCwgcXVlcnksIF9vYmplY3RTcHJlYWQoe1xuICAgICAgcmVzb2x2ZUxpbmtzOiByZXNvbHZlTGlua3MsXG4gICAgICByZW1vdmVVbnJlc29sdmVkOiByZW1vdmVVbnJlc29sdmVkXG4gICAgfSwgb3B0aW9ucykpO1xuICB9XG4gIC8qKlxuICAqIFBhcnNlIHJhdyBqc29uIGRhdGEgaW50byBjb2xsZWN0aW9uIG9mIGVudHJ5IG9iamVjdHMuTGlua3Mgd2lsbCBiZSByZXNvbHZlZCBhbHNvXG4gICogQG1lbWJlcm9mIENvbnRlbnRmdWxDbGllbnRBUElcbiAgKiBAcGFyYW0ge09iamVjdH0gcmF3IGpzb24gZGF0YVxuICAqIEBleGFtcGxlXG4gICogbGV0IGRhdGEgPSB7aXRlbXM6IFtcbiAgKiAgICB7XG4gICogICAgc3lzOiB7dHlwZTogJ0VudHJ5JywgbG9jYWxlOiAnZW4tVVMnfSxcbiAgKiAgICBmaWVsZHM6IHtcbiAgKiAgICAgIGFuaW1hbDoge3N5czoge3R5cGU6ICdMaW5rJywgbGlua1R5cGU6ICdBbmltYWwnLCBpZDogJ29pbmsnfX0sXG4gICogICAgICBhbm90aGVyYW5pbWFsOiB7c3lzOiB7dHlwZTogJ0xpbmsnLCBsaW5rVHlwZTogJ0FuaW1hbCcsIGlkOiAnbWlkZGxlLXBhcnJvdCd9fVxuICAqICAgIH1cbiAgKiAgfVxuICAqIF0sXG4gICogaW5jbHVkZXM6IHtcbiAgKiAgQW5pbWFsOiBbXG4gICogICAge1xuICAqICAgICAgc3lzOiB7dHlwZTogJ0FuaW1hbCcsIGlkOiAnb2luaycsIGxvY2FsZTogJ2VuLVVTJ30sXG4gICogICAgICBmaWVsZHM6IHtcbiAgKiAgICAgICAgbmFtZTogJ1BpZycsXG4gICogICAgICAgIGZyaWVuZDoge3N5czoge3R5cGU6ICdMaW5rJywgbGlua1R5cGU6ICdBbmltYWwnLCBpZDogJ2dyb3VuZGhvZyd9fVxuICAqICAgICAgfVxuICAqICAgIH1cbiAgKiAgIF1cbiAgKiAgfVxuICAqIH1cbiAgKiBjb25zb2xlLmxvZyggZGF0YS5pdGVtc1swXS5maWVsZHMuZm9vICk7IC8vIHVuZGVmaW5lZFxuICAqIGxldCBwYXJzZWREYXRhID0gY2xpZW50LnBhcnNlRW50cmllcyhkYXRhKTtcbiAgKiBjb25zb2xlLmxvZyggcGFyc2VkRGF0YS5pdGVtc1swXS5maWVsZHMuZm9vICk7IC8vIGZvb1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gcGFyc2VFbnRyaWVzKGRhdGEpIHtcbiAgICB2YXIgX2dldEdsb2JhbE9wdGlvbnMzID0gZ2V0R2xvYmFsT3B0aW9ucyh7fSksXG4gICAgICAgIHJlc29sdmVMaW5rcyA9IF9nZXRHbG9iYWxPcHRpb25zMy5yZXNvbHZlTGlua3MsXG4gICAgICAgIHJlbW92ZVVucmVzb2x2ZWQgPSBfZ2V0R2xvYmFsT3B0aW9uczMucmVtb3ZlVW5yZXNvbHZlZDtcblxuICAgIHJldHVybiB3cmFwRW50cnlDb2xsZWN0aW9uKGRhdGEsIHtcbiAgICAgIHJlc29sdmVMaW5rczogcmVzb2x2ZUxpbmtzLFxuICAgICAgcmVtb3ZlVW5yZXNvbHZlZDogcmVtb3ZlVW5yZXNvbHZlZFxuICAgIH0pO1xuICB9XG4gIC8qXG4gICAqIFN3aXRjaGVzIEJhc2VVUkwgdG8gdXNlIC9lbnZpcm9ubWVudHMgcGF0aFxuICAgKiAqL1xuXG5cbiAgZnVuY3Rpb24gc3dpdGNoVG9FbnZpcm9ubWVudChodHRwKSB7XG4gICAgaHR0cC5kZWZhdWx0cy5iYXNlVVJMID0gZ2V0R2xvYmFsT3B0aW9ucygpLmVudmlyb25tZW50QmFzZVVybDtcbiAgfVxuICAvKlxuICAgKiBTd2l0Y2hlcyBCYXNlVVJMIHRvIHVzZSAvc3BhY2VzIHBhdGhcbiAgICogKi9cblxuXG4gIGZ1bmN0aW9uIHN3aXRjaFRvU3BhY2UoaHR0cCkge1xuICAgIGh0dHAuZGVmYXVsdHMuYmFzZVVSTCA9IGdldEdsb2JhbE9wdGlvbnMoKS5zcGFjZUJhc2VVcmw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldFNwYWNlOiBnZXRTcGFjZSxcbiAgICBnZXRDb250ZW50VHlwZTogZ2V0Q29udGVudFR5cGUsXG4gICAgZ2V0Q29udGVudFR5cGVzOiBnZXRDb250ZW50VHlwZXMsXG4gICAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICAgIGdldEVudHJpZXM6IGdldEVudHJpZXMsXG4gICAgZ2V0QXNzZXQ6IGdldEFzc2V0LFxuICAgIGdldEFzc2V0czogZ2V0QXNzZXRzLFxuICAgIGdldExvY2FsZXM6IGdldExvY2FsZXMsXG4gICAgcGFyc2VFbnRyaWVzOiBwYXJzZUVudHJpZXMsXG4gICAgc3luYzogc3luY1xuICB9O1xufSIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vKipcbiAqIENvbnRlbnRmdWwgRGVsaXZlcnkgQVBJIFNESy4gQWxsb3dzIHlvdSB0byBjcmVhdGUgaW5zdGFuY2VzIG9mIGEgY2xpZW50XG4gKiB3aXRoIGFjY2VzcyB0byB0aGUgQ29udGVudGZ1bCBDb250ZW50IERlbGl2ZXJ5IEFQSS5cbiAqIEBuYW1lc3BhY2UgY29udGVudGZ1bFxuICogQHNlZSBDb250ZW50ZnVsQ2xpZW50QVBJXG4gKi9cbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBjcmVhdGVIdHRwQ2xpZW50LCBnZXRVc2VyQWdlbnRIZWFkZXIgfSBmcm9tICdjb250ZW50ZnVsLXNkay1jb3JlJztcbmltcG9ydCBjcmVhdGVDb250ZW50ZnVsQXBpIGZyb20gJy4vY3JlYXRlLWNvbnRlbnRmdWwtYXBpJztcbmltcG9ydCBjcmVhdGVHbG9iYWxPcHRpb25zIGZyb20gJy4vY3JlYXRlLWdsb2JhbC1vcHRpb25zJztcbi8qKlxuICogQ3JlYXRlIGEgY2xpZW50IGluc3RhbmNlXG4gKiBAZnVuY1xuICogQG5hbWUgY3JlYXRlQ2xpZW50XG4gKiBAbWVtYmVyb2YgY29udGVudGZ1bFxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIENsaWVudCBpbml0aWFsaXphdGlvbiBwYXJhbWV0ZXJzXG4gKiBAcHJvcCB7c3RyaW5nfSBwYXJhbXMuc3BhY2UgLSBTcGFjZSBJRFxuICogQHByb3Age3N0cmluZ30gcGFyYW1zLmFjY2Vzc1Rva2VuIC0gQ29udGVudGZ1bCBDREEgQWNjZXNzIFRva2VuXG4gKiBAcHJvcCB7c3RyaW5nfSBbcGFyYW1zLmVudmlyb25tZW50PVwibWFzdGVyXCJdIC0gQ29udGVudGZ1bCBFbnZpcm9ubWVudCBJRFxuICogQHByb3Age2Jvb2xlYW49fSBwYXJhbXMuaW5zZWN1cmUgLSBSZXF1ZXN0cyB3aWxsIGJlIG1hZGUgb3ZlciBodHRwIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgaHR0cHMgKGRlZmF1bHQ6IHRydWUpXG4gKiBAcHJvcCB7c3RyaW5nPX0gcGFyYW1zLmhvc3QgLSBBUEkgaG9zdCAoZGVmYXVsdDogY2RuLmNvbnRlbnRmdWwuY29tKS4gQWxzbyB1c2FibGUgd2l0aCBwcmV2aWV3LmNvbnRlbnRmdWwuY29tLlxuICogQHByb3Age3N0cmluZz19IHBhcmFtcy5iYXNlUGF0aCAtIFBhdGggYXBwZW5kZWQgdG8gdGhlIGhvc3QgdG8gc3VwcG9ydCBnYXRld2F5cy9wcm94aWVzIHdpdGggY3VzdG9tIHVybHMuXG4gKiBAcHJvcCB7T2JqZWN0PX0gcGFyYW1zLmh0dHBBZ2VudCAtIE9wdGlvbmFsIE5vZGUuanMgSFRUUCBhZ2VudCBmb3IgcHJveHlpbmcgKHNlZSA8YSBocmVmPVwiaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9jbGFzc19odHRwX2FnZW50XCI+Tm9kZS5qcyBkb2NzPC9hPiBhbmQgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2h0dHBzLXByb3h5LWFnZW50XCI+aHR0cHMtcHJveHktYWdlbnQ8L2E+KVxuICogQHByb3Age09iamVjdD19IHBhcmFtcy5odHRwc0FnZW50IC0gT3B0aW9uYWwgTm9kZS5qcyBIVFRQIGFnZW50IGZvciBwcm94eWluZyAoc2VlIDxhIGhyZWY9XCJodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX2NsYXNzX2h0dHBfYWdlbnRcIj5Ob2RlLmpzIGRvY3M8L2E+IGFuZCA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaHR0cHMtcHJveHktYWdlbnRcIj5odHRwcy1wcm94eS1hZ2VudDwvYT4pXG4gKiBAcHJvcCB7T2JqZWN0PX0gcGFyYW1zLnByb3h5IC0gT3B0aW9uYWwgQXhpb3MgcHJveHkgKHNlZSA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL216YWJyaXNraWUvYXhpb3MjcmVxdWVzdC1jb25maWdcIj4gYXhpb3MgZG9jcyA8L2E+KVxuICogQHByb3Age09iamVjdD19IHBhcmFtcy5oZWFkZXJzIC0gT3B0aW9uYWwgYWRkaXRpb25hbCBoZWFkZXJzXG4gKiBAcHJvcCB7ZnVuY3Rpb249fSBwYXJhbXMuYWRhcHRlciAtIE9wdGlvbmFsIGF4aW9zIHJlcXVlc3QgYWRhcHRlciAoc2VlIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbXphYnJpc2tpZS9heGlvcyNyZXF1ZXN0LWNvbmZpZ1wiPiBheGlvcyBkb2NzIDwvYT4pXG4gKiBAcHJvcCB7Ym9vbGVhbj0/fSBwYXJhbXMucmVzb2x2ZUxpbmtzIC0gSWYgd2Ugc2hvdWxkIHJlc29sdmUgbGlua3MgYmV0d2VlbiBlbnRyaWVzIChkZWZhdWx0OiB0cnVlKVxuICogQHByb3Age2Jvb2xlYW49P30gcGFyYW1zLnJlbW92ZVVucmVzb2x2ZWQgLSBJZiB3ZSBzaG91bGQgcmVtb3ZlIGxpbmtzIHRvIGVudHJpZXMgd2hpY2ggY291bGQgbm90IGJlIHJlc29sdmVkIChkZWZhdWx0OiBmYWxzZSlcbiAqIEBwcm9wIHtib29sZWFuPT99IHBhcmFtcy5yZXRyeU9uRXJyb3IgLSBJZiB3ZSBzaG91bGQgcmV0cnkgb24gZXJyb3JzIGFuZCA0MjkgcmF0ZSBsaW1pdCBleGNlcHRpb25zIChkZWZhdWx0OiB0cnVlKVxuICogQHByb3Age2Z1bmN0aW9uPX0gcGFyYW1zLmxvZ0hhbmRsZXIgLSBBIGxvZyBoYW5kbGVyIGZ1bmN0aW9uIHRvIHByb2Nlc3MgZ2l2ZW4gbG9nIG1lc3NhZ2VzICYgZXJyb3JzLiBSZWNlaXZlcyB0aGUgbG9nIGxldmVsIChlcnJvciwgd2FybmluZyAmIGluZm8pIGFuZCB0aGUgYWN0dWFsIGxvZyBkYXRhIChFcnJvciBvYmplY3Qgb3Igc3RyaW5nKS4gKFRoZSBkZWZhdWx0IGNhbiBiZSBmb3VuZCBhdDogaHR0cHM6Ly9naXRodWIuY29tL2NvbnRlbnRmdWwvY29udGVudGZ1bC1zZGstY29yZS9ibG9iL21hc3Rlci9saWIvY3JlYXRlLWh0dHAtY2xpZW50LmpzKVxuICogQHByb3Age3N0cmluZz0/fSBwYXJhbXMuYXBwbGljYXRpb24gLSBBcHBsaWNhdGlvbiBuYW1lIGFuZCB2ZXJzaW9uIGUuZyBteUFwcC92ZXJzaW9uXG4gKiBAcHJvcCB7c3RyaW5nPT99IHBhcmFtcy5pbnRlZ3JhdGlvbiAtIEludGVncmF0aW9uIG5hbWUgYW5kIHZlcnNpb24gZS5nIHJlYWN0L3ZlcnNpb25cbiAqIEBwcm9wIHtudW1iZXI9fSBwYXJhbXMudGltZW91dCBpbiBtaWxsaXNlY29uZHMgLSBjb25uZWN0aW9uIHRpbWVvdXQgKGRlZmF1bHQ6MzAwMDApXG4gKiBAcHJvcCB7bnVtYmVyPX0gcGFyYW1zLnJldHJ5TGltaXQgLSBPcHRpb25hbCBudW1iZXIgb2YgcmV0cmllcyBiZWZvcmUgZmFpbHVyZS4gRGVmYXVsdCBpcyA1XG4gKiBAcmV0dXJucyB7Q29udGVudGZ1bENsaWVudEFQSS5DbGllbnRBUEl9XG4gKiBAZXhhbXBsZVxuICogY29uc3QgY29udGVudGZ1bCA9IHJlcXVpcmUoJ2NvbnRlbnRmdWwnKVxuICogY29uc3QgY2xpZW50ID0gY29udGVudGZ1bC5jcmVhdGVDbGllbnQoe1xuICogIGFjY2Vzc1Rva2VuOiAnbXlBY2Nlc3NUb2tlbicsXG4gKiAgc3BhY2U6ICdteVNwYWNlSWQnXG4gKiB9KVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDbGllbnQocGFyYW1zKSB7XG4gIGlmICghcGFyYW1zLmFjY2Vzc1Rva2VuKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgcGFyYW1ldGVyIGFjY2Vzc1Rva2VuJyk7XG4gIH1cblxuICBpZiAoIXBhcmFtcy5zcGFjZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHBhcmFtZXRlciBzcGFjZScpO1xuICB9XG5cbiAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgcmVzb2x2ZUxpbmtzOiB0cnVlLFxuICAgIHJlbW92ZVVucmVzb2x2ZWQ6IGZhbHNlLFxuICAgIGRlZmF1bHRIb3N0bmFtZTogJ2Nkbi5jb250ZW50ZnVsLmNvbScsXG4gICAgZW52aXJvbm1lbnQ6ICdtYXN0ZXInXG4gIH07XG5cbiAgdmFyIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdENvbmZpZyksIHBhcmFtcyk7XG5cbiAgdmFyIHVzZXJBZ2VudEhlYWRlciA9IGdldFVzZXJBZ2VudEhlYWRlcihcImNvbnRlbnRmdWwuanMvXCIuY29uY2F0KFwiMC4wLjAtZGV0ZXJtaW5lZC1ieS1zZW1hbnRpYy1yZWxlYXNlXCIpLCBjb25maWcuYXBwbGljYXRpb24sIGNvbmZpZy5pbnRlZ3JhdGlvbik7XG4gIGNvbmZpZy5oZWFkZXJzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcuaGVhZGVycyksIHt9LCB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi92bmQuY29udGVudGZ1bC5kZWxpdmVyeS52MStqc29uJyxcbiAgICAnWC1Db250ZW50ZnVsLVVzZXItQWdlbnQnOiB1c2VyQWdlbnRIZWFkZXJcbiAgfSk7XG4gIHZhciBodHRwID0gY3JlYXRlSHR0cENsaWVudChheGlvcywgY29uZmlnKTtcbiAgdmFyIGdldEdsb2JhbE9wdGlvbnMgPSBjcmVhdGVHbG9iYWxPcHRpb25zKHtcbiAgICByZXNvbHZlTGlua3M6IGNvbmZpZy5yZXNvbHZlTGlua3MsXG4gICAgZW52aXJvbm1lbnQ6IGNvbmZpZy5lbnZpcm9ubWVudCxcbiAgICByZW1vdmVVbnJlc29sdmVkOiBjb25maWcucmVtb3ZlVW5yZXNvbHZlZCxcbiAgICBzcGFjZUJhc2VVcmw6IGh0dHAuZGVmYXVsdHMuYmFzZVVSTCxcbiAgICBlbnZpcm9ubWVudEJhc2VVcmw6IFwiXCIuY29uY2F0KGh0dHAuZGVmYXVsdHMuYmFzZVVSTCwgXCJlbnZpcm9ubWVudHMvXCIpLmNvbmNhdChjb25maWcuZW52aXJvbm1lbnQpXG4gIH0pOyAvLyBBcHBlbmQgZW52aXJvbm1lbnQgdG8gYmFzZVVSTFxuXG4gIGh0dHAuZGVmYXVsdHMuYmFzZVVSTCA9IGdldEdsb2JhbE9wdGlvbnMoKS5lbnZpcm9ubWVudEJhc2VVcmw7IC8vIEludGVyY2VwdHMgcmVzcG9uc2UgYW5kIG9ic2N1cmUgdGhlIHRva2VuXG5cbiAgb2JzY3VyZUF1dGhUb2tlbkluUmVzcG9uc2UoaHR0cCk7XG4gIHJldHVybiBjcmVhdGVDb250ZW50ZnVsQXBpKHtcbiAgICBodHRwOiBodHRwLFxuICAgIGdldEdsb2JhbE9wdGlvbnM6IGdldEdsb2JhbE9wdGlvbnNcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9ic2N1cmVBdXRoVG9rZW5JblJlc3BvbnNlKGh0dHApIHtcbiAgaHR0cC5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLnJlc3BvbnNlICYmIGVycm9yLnJlc3BvbnNlLmNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24pIHtcbiAgICAgIHZhciB0b2tlbiA9IGVycm9yLnJlc3BvbnNlLmNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb247XG4gICAgICBlcnJvci5yZXNwb25zZS5jb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gZXJyb3IucmVzcG9uc2UuY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbi5yZXBsYWNlKHRva2VuLCBcIkJlYXJlci4uLlwiLmNvbmNhdCh0b2tlbi5zdWJzdHIoLTUpKSk7XG5cbiAgICAgIGlmIChlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXJzICYmIGVycm9yLnJlc3BvbnNlLnJlcXVlc3QuX2hlYWRlcnMuYXV0aG9yaXphdGlvbikge1xuICAgICAgICBlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXJzLmF1dGhvcml6YXRpb24gPSBlcnJvci5yZXNwb25zZS5yZXF1ZXN0Ll9oZWFkZXJzLmF1dGhvcml6YXRpb24ucmVwbGFjZSh0b2tlbiwgXCJCZWFyZXIuLi5cIi5jb25jYXQodG9rZW4uc3Vic3RyKC01KSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXJyb3IucmVzcG9uc2UucmVxdWVzdC5faGVhZGVyKSB7XG4gICAgICAgIGVycm9yLnJlc3BvbnNlLnJlcXVlc3QuX2hlYWRlciA9IGVycm9yLnJlc3BvbnNlLnJlcXVlc3QuX2hlYWRlci5yZXBsYWNlKHRva2VuLCBcIkJlYXJlci4uLlwiLmNvbmNhdCh0b2tlbi5zdWJzdHIoLTUpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfSk7XG59IiwiaW1wb3J0IHtjcmVhdGVDbGllbnR9IGZyb20gJ2NvbnRlbnRmdWwnXG5jb25zdCBjbGllbnQgPSBjcmVhdGVDbGllbnQoe1xuICAvLyBUaGlzIGlzIHRoZSBzcGFjZSBJRC4gQSBzcGFjZSBpcyBsaWtlIGEgcHJvamVjdCBmb2xkZXIgaW4gQ29udGVudGZ1bCB0ZXJtc1xuICBzcGFjZTogcHJvY2Vzcy5lbnYuU1BBQ0VfSUQsXG4gIC8vIFRoaXMgaXMgdGhlIGFjY2VzcyB0b2tlbiBmb3IgdGhpcyBzcGFjZS4gTm9ybWFsbHkgeW91IGdldCBib3RoIElEIGFuZCB0aGUgdG9rZW4gaW4gdGhlIENvbnRlbnRmdWwgd2ViIGFwcFxuICBhY2Nlc3NUb2tlbjogcHJvY2Vzcy5lbnYuQVBJX0RFTElWRVJZX0tFWVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsaWVudCIsIi8qKlxuICogTGluayByZXNvbHV0aW9uIGNhbiBiZSBzZXQgZ2xvYmFsbHksIG9yIGl0IGNhbiBiZSB0dXJuZWQgb2ZmIGZvciB0aGUgbWV0aG9kc1xuICogd2hpY2ggbWFrZSB1c2Ugb2YgaXQuIFRoZSBsb2NhbCBzZXR0aW5nIGFsd2F5cyBvdmVycmlkZXMgdGhlIGdsb2JhbCBzZXR0aW5nLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2xvYmFsU2V0dGluZyAtIEdsb2JhbCBsaWJyYXJ5IHNldHRpbmcgZm9yIGxpbmsgcmVzb2x1dGlvblxuICogQHJldHVybnMge2Z1bmN0aW9ufSBMaW5rIHJlc29sdmVyIG1ldGhvZCBwcmVjb25maWd1cmVkIHdpdGggZ2xvYmFsIHNldHRpbmdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR2xvYmFsT3B0aW9ucyhnbG9iYWxTZXR0aW5ncykge1xuICAvKipcbiAgICogTGluayByZXNvbHZlciBtZXRob2RcbiAgICogQHBhcmFtIHtPYmplY3R9IHF1ZXJ5IC0gcmVndWxhciBxdWVyeSBvYmplY3QgdXNlZCBmb3IgY29sbGVjdGlvbiBlbmRwb2ludHNcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiBnZXRHbG9iYWxPcHRpb25zKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdsb2JhbFNldHRpbmdzLCBxdWVyeSk7XG4gIH07XG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IEJsb2dDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChbe30sICgpID0+IHt9XSlcblxuY29uc3QgQmxvZ1Byb3ZpZGVyID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGVudHJ5OiBudWxsLFxuICAgIGVudHJ5TGlzdDogW10sXG4gICAgcGFnZTogMSxcbiAgICB0b3RhbFBhZ2VzOiAxXG4gIH0pO1xuICByZXR1cm4gKFxuICAgIDxCbG9nQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17W3N0YXRlLCBzZXRTdGF0ZV19PlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvQmxvZ0NvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCB7IEJsb2dDb250ZXh0LCBCbG9nUHJvdmlkZXIgfSIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEJsb2dDb250ZXh0IH0gZnJvbSAnLi9ibG9nQ29udGV4dCdcblxuLyoqXG4gKiBIZWxwZXIgd2l0aCBzdGF0ZSB2YWx1ZXMgYW5kIHRvIHNldCBzdGF0ZVxuICovXG5jb25zdCB1c2VCbG9nID0gKCkgPT4ge1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZUNvbnRleHQoQmxvZ0NvbnRleHQpXG5cbiAgZnVuY3Rpb24gc2V0UGFnZShwYWdlKSB7XG4gICAgaWYgKHBhZ2UgPCAxKVxuICAgICAgdGhyb3cgJ0ludmFsaWQgcGFnZSBudW1iZXInXG5cbiAgICBzZXRTdGF0ZShzdGF0ZSA9PiAoey4uLnN0YXRlLCBwYWdlIH0gKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEVudHJ5KGVudHJ5KSB7XG4gICAgc2V0U3RhdGUoc3RhdGUgPT4gKHsgLi4uc3RhdGUsIGVudHJ5IH0pKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQYWdlLFxuICAgIHRvdGFsUGFnZXM6IHN0YXRlLnRvdGFsUGFnZXMsXG4gICAgZW50cnk6IHN0YXRlLmVudHJ5LFxuICAgIHNldEVudHJ5LFxuICAgIGVudHJ5TGlzdDogc3RhdGUuZW50cnlMaXN0LFxuICAgIHN0YXRlLFxuICAgIHNldFN0YXRlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlQmxvZyIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSAgZnJvbSBcInJlYWN0XCJcblxuaW1wb3J0IFBhZ2luYXRvciBmcm9tICcuL3BhZ2luYXRvcidcbmltcG9ydCBjbGllbnQgZnJvbSBcIi4uLy4uL2FwaVwiXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCdcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL3BhbGV0dGUnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHVzZUJsb2cgZnJvbSAnLi91c2VCbG9nJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCbG9nKHsgc2VhcmNoUGFyYW1zIH0pIHtcblxuICBjb25zdCBFbnRyeUxpc3QgPSBzdHlsZWQuZGl2YFxuICAgICNlbnRyeS1jb250YWluZXIge1xuICAgICAgbGkge1xuICAgICAgICBkaXYge1xuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcblxuICAgICAgICAgIGgxIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbWcge1xuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke3BhbGV0dGUuaW1hZ2VCb3JkZXJ9O1xuICAgICAgICAgICAgbWFyZ2luOiA1cHggMCAxNXB4IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmRhdGUge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IGFyaWFsXG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke3BhbGV0dGUuc3ViSGVhZGluZ307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICBjb25zdCB7IHNldFN0YXRlLCBlbnRyeUxpc3QsIHRvdGFsUGFnZXMgfSA9IHVzZUJsb2coKVxuXG4gIC8vIHBhZ2luZyBwYXJhbXNcbiAgY29uc3QgcCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3AnKSB8fCAxXG4gIGNvbnN0IHJwcCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3JwcCcpIHx8IDEwXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBxID0ge1xuICAgICAgICBjb250ZW50X3R5cGU6ICdwb3N0JyxcbiAgICAgICAgc2tpcDogKHAgLSAxKSAqIHJwcCxcbiAgICAgICAgbGltaXQ6IHJwcFxuICAgICAgfVxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgY2xpZW50LmdldEVudHJpZXMocSlcbiAgICAgIGNvbnNvbGUubG9nKCdlbnRyaWVzIHJlcycsIHJlcylcbiAgICAgIC8vIGRvIHdpdGggb25lIGNhbGwsIGF2b2lkIHJlLXJlbmRlcnNcbiAgICAgIHNldFN0YXRlKHN0YXRlID0+ICh7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBlbnRyeUxpc3Q6IHJlcy5pdGVtcyxcbiAgICAgICAgdG90YWxQYWdlczogTWF0aC5jZWlsKHJlcy50b3RhbC9ycHApXG4gICAgICB9KSlcbiAgICB9XG4gICAgZmV0Y2hEYXRhKClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIChcbiAgICA8RW50cnlMaXN0PlxuICAgICAge1xuICAgICAgICAhZW50cnlMaXN0Lmxlbmd0aFxuICAgICAgICAgID8gPGVtPkxvYWRpbmcuLi48L2VtPlxuICAgICAgICAgIDogPGRpdiBpZD1cImVudHJ5LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAge2VudHJ5TGlzdC5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgICAgICAgICA8bGkga2V5PXtpdGVtLmZpZWxkcy5zbHVnfT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXsnL3Bvc3QvJytpdGVtLnN5cy5pZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+e2l0ZW0uZmllbGRzLnRpdGxlfTwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGF0ZVwiPnttb21lbnQoaXRlbS5zeXMuY3JlYXRlZEF0KS5mb3JtYXQoJ01NTU0gRG8gWVlZWSwgaDptbSBhJyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZmllbGRzLnRodW1iXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17aXRlbS5maWVsZHMudGh1bWIuZmllbGRzLmZpbGUudXJsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cIjU2MHB4XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIDxQYWdpbmF0b3IgdG90YWxQYWdlcz17dG90YWxQYWdlc30gcD17cH0gcnBwPXtycHB9Lz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgIDwvRW50cnlMaXN0PlxuICApXG59IiwiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSAgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gJ3JlYWN0LW1hcmtkb3duJ1xuaW1wb3J0IGNsaWVudCBmcm9tICcuLi8uLi9hcGknXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCdcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL3BhbGV0dGUnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHVzZUJsb2cgZnJvbSAnLi91c2VCbG9nJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb3N0KHByb3BzKSB7XG5cbiAgY29uc3QgQmxvZ1Bvc3QgPSBzdHlsZWQuZGl2YFxuICAgICNwb3N0LWNvbnRhaW5lciB7XG4gICAgICBtYXJnaW46IDIwcHggMCAyMHB4IDA7XG5cbiAgICAgIGgxIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICAgICAgfVxuXG4gICAgICAjZGF0ZSB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBhcmlhbFxuICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICBjb2xvcjogJHtwYWxldHRlLnN1YkhlYWRpbmd9O1xuICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgIH1cblxuICAgICAgI3Bvc3QtYm9keSB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBnZW9yZ2lhO1xuICAgICAgICBsaW5lLWhlaWdodDogMjVweDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcblxuICAgICAgICB1bCB7XG4gICAgICAgICAgbGlzdC1zdHlsZS10eXBlOiBjaXJjbGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgI3RhZy1sYWJlbCB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgICBjb2xvcjogJHtwYWxldHRlLnN1YkhlYWRpbmd9O1xuICAgICAgfVxuXG4gICAgICAudGFnIHtcbiAgICAgICAgZm9udC1zaXplOiAxM3B4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke3BhbGV0dGUuYmFja2dyb3VuZH07XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czo1cHg7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjpub25lO1xuICAgICAgICBwYWRkaW5nOjhweDtcbiAgICAgICAgbWFyZ2luOjNweDtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO1xuICAgICAgfVxuXG4gICAgICAudGFnOmhvdmVyIHtcbiAgICAgICAgY29sb3I6ICR7cGFsZXR0ZS5iYWNrZ3JvdW5kfTtcbiAgICAgICAgYmFja2dyb3VuZDogJHtwYWxldHRlLnN1YkhlYWRpbmd9O1xuICAgICAgfVxuICAgIH1cbiAgYFxuXG4gIGNvbnN0IHsgZW50cnksIHNldEVudHJ5IH0gPSB1c2VCbG9nKClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZldGNoRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5nZXRFbnRyeShwcm9wcy5pZClcbiAgICAgIGNvbnNvbGUubG9nKCdyZXMnLCByZXMpXG4gICAgICBzZXRFbnRyeShyZXMpXG4gICAgfVxuICAgIGZldGNoRGF0YSgpXG4gIH0sIFtdKVxuXG4gIHJldHVybiAoXG4gICAgPEJsb2dQb3N0PlxuICAgIDxkaXYgaWQ9XCJwb3N0LWNvbnRhaW5lclwiPlxuICAgICAge1xuICAgICAgICAhZW50cnlcbiAgICAgICAgICA/IDxkaXYgY2xhc3M9XCJsb2FkaW5nXCI+PGVtPkxvYWRpbmcuLi48L2VtPjwvZGl2PlxuICAgICAgICAgIDogPGRpdj5cbiAgICAgICAgICAgICAgPGgxPntlbnRyeS5maWVsZHMudGl0bGV9PC9oMT5cbiAgICAgICAgICAgICAgPGRpdiBpZD1cImRhdGVcIj57bW9tZW50KGVudHJ5LnN5cy5jcmVhdGVkQXQpLmZvcm1hdCgnTU1NTSBEbyBZWVlZLCBoOm1tIGEnKX08L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBpZD1cInBvc3QtYm9keVwiPjxSZWFjdE1hcmtkb3duXG4gICAgICAgICAgICAgICAgZXNjYXBlSHRtbD17ZmFsc2V9XG4gICAgICAgICAgICAgICAgY2hpbGRyZW49e2VudHJ5LmZpZWxkcy5ib2R5fVxuICAgICAgICAgICAgICAvPjwvZGl2PlxuXG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cInRhZy1sYWJlbFwiPnsgZW50cnkubWV0YWRhdGEudGFncyA/ICdUYWdzOicgOiAnJyB9PC9kaXY+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZW50cnkubWV0YWRhdGEudGFncyAmJiBlbnRyeS5tZXRhZGF0YS50YWdzLm1hcCh0YWcgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGEgaHJlZj17YC90YWdzLyR7dGFnLnN5cy5pZH1gfSBjbGFzcz1cInRhZ1wiIGtleT17dGFnLnN5cy5pZH0+e3RhZy5zeXMuaWR9PC9hPlxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9kaXY+XG4gICAgPC9CbG9nUG9zdD5cbiAgKVxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSAgZnJvbSBcInJlYWN0XCJcbmltcG9ydCBjbGllbnQgZnJvbSBcIi4uLy4uL2FwaVwiXG5pbXBvcnQgdXNlQmxvZyBmcm9tICcuL3VzZUJsb2cnXG5pbXBvcnQgUGFnaW5hdG9yIGZyb20gJy4vcGFnaW5hdG9yJ1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHBhbGV0dGUgZnJvbSAnLi4vcGFsZXR0ZSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGFnKHsgaWQsIHNlYXJjaFBhcmFtcyB9KSB7XG5cbiAgY29uc3QgRW50cnlMaXN0ID0gc3R5bGVkLmRpdmBcbiAgICAjZW50cnktY29udGFpbmVyIHtcbiAgICAgIGxpIHtcbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcbiAgICAgICAgICAgIG1hcmdpbjogNXB4IDAgMTBweCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgYFxuXG4gIGNvbnN0IFNlbGVjdGVkVGFnID0gc3R5bGVkLmRpdmBcbiAgICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUJlYmFzK05ldWUmZGlzcGxheT1zd2FwJyk7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuXG4gICAgI3NlbGVjdGVkLXRhZy1jb250YWluZXIge1xuICAgICAgY29sb3I6ICR7cGFsZXR0ZS50ZXh0fTtcbiAgICAgIHdpZHRoOiA1NjBweDtcbiAgICAgIG1hcmdpbi10b3A6IDUwcHg7XG4gICAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgJHtwYWxldHRlLmltYWdlQm9yZGVyfTtcblxuICAgICAgLnRhZyB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBcIkJlYmFzIE5ldWVcIjtcblxuICAgICAgICBmb250LXNpemU6IDY0cHg7XG4gICAgICAgIGNvbG9yOiAke3BhbGV0dGUuc3ViSGVhZGluZ307XG4gICAgICAgIGJhY2tncm91bmQ6ICR7cGFsZXR0ZS5iYWNrZ3JvdW5kfTtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgfVxuICAgIH1cbiAgYFxuXG4gIGNvbnN0IHsgc2V0U3RhdGUsIGVudHJ5TGlzdCwgdG90YWxQYWdlcyB9ID0gdXNlQmxvZygpXG5cbiAgLy8gcGFnaW5nIHBhcmFtc1xuICBjb25zdCBwID0gc2VhcmNoUGFyYW1zLmdldCgncCcpIHx8IDFcbiAgY29uc3QgcnBwID0gc2VhcmNoUGFyYW1zLmdldCgncnBwJykgfHwgMTBcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZldGNoRGF0YSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHEgPSB7XG4gICAgICAgICdtZXRhZGF0YS50YWdzLnN5cy5pZFtpbl0nOiBpZCxcbiAgICAgICAgY29udGVudF90eXBlOiAncG9zdCcsXG4gICAgICAgIHNraXA6IChwIC0gMSkgKiBycHAsXG4gICAgICAgIGxpbWl0OiBycHBcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5nZXRFbnRyaWVzKHEpXG4gICAgICBjb25zb2xlLmxvZygnZW50cmllcyByZXMnLCByZXMpXG4gICAgICAvLyBkbyB3aXRoIG9uZSBjYWxsLCBhdm9pZCByZS1yZW5kZXJzXG4gICAgICBzZXRTdGF0ZShzdGF0ZSA9PiAoe1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZW50cnlMaXN0OiByZXMuaXRlbXMsXG4gICAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbChyZXMudG90YWwvcnBwKVxuICAgICAgfSkpXG4gICAgfVxuICAgIGZldGNoRGF0YSgpXG4gIH0sIFtdKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICA8U2VsZWN0ZWRUYWc+XG4gICAgICA8ZGl2IGlkPVwic2VsZWN0ZWQtdGFnLWNvbnRhaW5lclwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJ0YWdcIj57aWR9PC9zcGFuPiBwb3N0c1xuICAgICAgPC9kaXY+XG4gICAgPC9TZWxlY3RlZFRhZz5cbiAgICA8RW50cnlMaXN0PlxuICAgICAgPGRpdj5cbiAgICAgIHtcbiAgICAgICAgIWVudHJ5TGlzdC5sZW5ndGhcbiAgICAgICAgICA/IDxlbT5Mb2FkaW5nLi4uPC9lbT5cbiAgICAgICAgICA6IDxkaXYgaWQ9XCJlbnRyeS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIHtlbnRyeUxpc3QubWFwKGl0ZW0gPT4gKFxuICAgICAgICAgICAgICAgICAgPGxpIGtleT17aXRlbS5maWVsZHMuc2x1Z30+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9eycvcG9zdC8nK2l0ZW0uc3lzLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICA8aDE+e2l0ZW0uZmllbGRzLnRpdGxlfTwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5maWVsZHMudGh1bWJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e2l0ZW0uZmllbGRzLnRodW1iLmZpZWxkcy5maWxlLnVybH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNTYwcHhcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgPFBhZ2luYXRvciB0b3RhbFBhZ2VzPXt0b3RhbFBhZ2VzfSBwPXtwfSBycHA9e3JwcH0gYmFzZVBhdGg9e2AvdGFncy8ke2lkfWB9Lz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgPC9FbnRyeUxpc3Q+XG4gICAgPC9kaXY+XG4gIClcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gIGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgY2xpZW50IGZyb20gXCIuLi8uLi9hcGlcIlxuaW1wb3J0IHVzZUJsb2cgZnJvbSAnLi91c2VCbG9nJ1xuaW1wb3J0IFBhZ2luYXRvciBmcm9tICcuL3BhZ2luYXRvcidcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50J1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJ1xuaW1wb3J0IHBhbGV0dGUgZnJvbSAnLi4vcGFsZXR0ZSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGV2KHsgc2VhcmNoUGFyYW1zIH0pIHtcblxuICBjb25zdCBFbnRyeUxpc3QgPSBzdHlsZWQuZGl2YFxuICAgICNlbnRyeS1jb250YWluZXIge1xuICAgICAgbGkge1xuICAgICAgICBkaXYge1xuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcblxuICAgICAgICAgIGgxIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbWcge1xuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke3BhbGV0dGUuaW1hZ2VCb3JkZXJ9O1xuICAgICAgICAgICAgbWFyZ2luOiA1cHggMCAxNXB4IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmRhdGUge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IGFyaWFsXG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke3BhbGV0dGUuc3ViSGVhZGluZ307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMzBweDtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGBcblxuICBjb25zdCB7IHNldFN0YXRlLCBlbnRyeUxpc3QsIHRvdGFsUGFnZXMgfSA9IHVzZUJsb2coKVxuXG4gIC8vIHBhZ2luZyBwYXJhbXNcbiAgY29uc3QgcCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3AnKSB8fCAxXG4gIGNvbnN0IHJwcCA9IHNlYXJjaFBhcmFtcy5nZXQoJ3JwcCcpIHx8IDEwXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBxID0ge1xuICAgICAgICAnbWV0YWRhdGEudGFncy5zeXMuaWRbaW5dJzogJ2RldicsXG4gICAgICAgIGNvbnRlbnRfdHlwZTogJ3Bvc3QnLFxuICAgICAgICBza2lwOiAocCAtIDEpICogcnBwLFxuICAgICAgICBsaW1pdDogcnBwXG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZ2V0RW50cmllcyhxKVxuICAgICAgY29uc29sZS5sb2coJ2VudHJpZXMgcmVzJywgcmVzKVxuICAgICAgLy8gZG8gd2l0aCBvbmUgY2FsbCwgYXZvaWQgcmUtcmVuZGVyc1xuICAgICAgc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGVudHJ5TGlzdDogcmVzLml0ZW1zLFxuICAgICAgICB0b3RhbFBhZ2VzOiBNYXRoLmNlaWwocmVzLnRvdGFsL3JwcClcbiAgICAgIH0pKVxuICAgIH1cbiAgICBmZXRjaERhdGEoKVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDxFbnRyeUxpc3Q+XG4gICAgICB7XG4gICAgICAgICFlbnRyeUxpc3QubGVuZ3RoXG4gICAgICAgICAgPyA8ZW0+TG9hZGluZy4uLjwvZW0+XG4gICAgICAgICAgOiA8ZGl2IGlkPVwiZW50cnktY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICB7ZW50cnlMaXN0Lm1hcChpdGVtID0+IChcbiAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2l0ZW0uZmllbGRzLnNsdWd9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9eycvcG9zdC8nK2l0ZW0uc3lzLmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT57aXRlbS5maWVsZHMudGl0bGV9PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkYXRlXCI+e21vbWVudChpdGVtLnN5cy5jcmVhdGVkQXQpLmZvcm1hdCgnTU1NTSBEbyBZWVlZLCBoOm1tIGEnKX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5maWVsZHMudGh1bWJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDxpbWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtpdGVtLmZpZWxkcy50aHVtYi5maWVsZHMuZmlsZS51cmx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNTYwcHhcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgPFBhZ2luYXRvciB0b3RhbFBhZ2VzPXt0b3RhbFBhZ2VzfSBwPXtwfSBycHA9e3JwcH0gYmFzZVBhdGg9XCIvZGV2XCIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9FbnRyeUxpc3Q+XG4gIClcbn1cblxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9ICBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG9tZSgpIHtcblxuICBjb25zdCBIb21lUGFnZSA9IHN0eWxlZC5kaXZgXG4gICAgI2hvbWUtY29udGFpbmVyIHtcbiAgICAgIG1hcmdpbi10b3A6IDUwcHg7XG4gICAgICB3aWR0aDogNTYwcHg7XG4gICAgICBjb2xvcjogJHtwYWxldHRlLnRleHR9O1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgICBpbWcge1xuICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke3BhbGV0dGUuaW1hZ2VCb3JkZXJ9O1xuICAgICAgICB3aWR0aDogNTYwcHg7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgICB9XG4gICAgfVxuICBgXG5cbiAgcmV0dXJuIChcbiAgICA8SG9tZVBhZ2U+XG4gICAgICA8ZGl2IGlkPVwiaG9tZS1jb250YWluZXJcIj5cbiAgICAgICAgPGltZyBzcmM9XCJodHRwczovL2ltYWdlcy5jdGZhc3NldHMubmV0LzlpdGtvcTAxczc3ai8yTUVUV3hOVWdnbW42YmZxaUhocEt1LzIyMTVhMGJkNzVhZDEzY2Q0ZWJhOTk0MDA4ZWI4ZDY4L1BoaWxfQXZlcnlfb25fSW5zdGFncmFtX19fX19ZZXRfYW5vdGhlcl9yYW1lbl9wbGFjZV9pbl9ueWNfX25vdF9jb21wbGFpbmluZ190aG91Z2hfX19yYW1lbl9fbnljX19fLnBuZ1wiIC8+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgSnVzdCBhIHBpY3R1cmUgb2Ygc29tZSB5dW1teSByYW1lbiBJIGF0ZSBvbmNlLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvSG9tZVBhZ2U+XG4gIClcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCBXb3JrIGZyb20gXCIuL3dvcmtcIlxuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSBcIi4vbmF2XCJcbmltcG9ydCBCbG9nIGZyb20gXCIuL2Jsb2dcIlxuaW1wb3J0IFBvc3QgZnJvbSBcIi4vYmxvZy9wb3N0XCJcbmltcG9ydCBUYWcgZnJvbSBcIi4vYmxvZy90YWdcIlxuaW1wb3J0IERldiBmcm9tIFwiLi9ibG9nL2RldlwiXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi9ob21lXCJcbmltcG9ydCB7IEJsb2dQcm92aWRlciB9IGZyb20gXCIuL2Jsb2cvYmxvZ0NvbnRleHRcIlxuaW1wb3J0IHsgcGFyc2VVcmwgfSBmcm9tICcuLi91dGlscydcblxuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cydcbmltcG9ydCB7IGNyZWF0ZUdsb2JhbFN0eWxlIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnXG5cbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSdcblxuY29uc3QgR2xvYmFsU3R5bGUgPSBjcmVhdGVHbG9iYWxTdHlsZWBcbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtwYWxldHRlLmJhY2tncm91bmR9O1xuICB9XG4gIC5tYWluLXNpdGUge1xuICAgIHdpZHRoOiA1NjBweDtcbiAgICBtYXJnaW46IGF1dG87XG4gIH1cbmA7XG5cbmNvbnN0IE1haW4gPSBzdHlsZWQuZGl2YFxuICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90byZkaXNwbGF5PXN3YXAnKTtcblxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgY29sb3I6ICR7cGFsZXR0ZS50ZXh0fTtcblxuICBoMSB7XG4gICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xuICAgIGNvbG9yOiAke3BhbGV0dGUuaGVhZGluZ307XG4gIH1cblxuICB1bCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG5cbiAgYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICY6bGluaywgJjp2aXNpdGVkIHtcbiAgICAgIGNvbG9yOiAke3BhbGV0dGUudGV4dH07XG4gICAgfVxuICAgICY6aG92ZXIge1xuICAgICAgY29sb3I6ICR7cGFsZXR0ZS50ZXh0fTtcbiAgICB9XG4gIH1cblxuICAubG9hZGluZyB7XG4gICAgbWFyZ2luLXRvcDogNTBweDtcbiAgfVxuYFxuXG5jbGFzcyBNYWluQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHJlcyA9IFtdXG4gICAgY29uc3Qge3BhcnRzLCBzZWFyY2hQYXJhbXN9ID0gcGFyc2VVcmwoKVxuICAgIGNvbnN0IHNlY3Rpb24gPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJ1xuICAgIGNvbnN0IHRhZ09yUG9zdElkID0gcGFydHNbMV1cblxuICAgIGxldCBtaWRkbGUgPSBudWxsXG4gICAgc3dpdGNoKHNlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3dvcmsnOlxuICAgICAgICBtaWRkbGUgPSA8V29yayBrZXk9XCJ3b3JrXCIvPlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncG9zdCc6XG4gICAgICAgIG1pZGRsZSA9IDxQb3N0IGtleT1cInBvc3RcIiBpZD17dGFnT3JQb3N0SWR9IC8+XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdibG9nJzpcbiAgICAgICAgbWlkZGxlID0gPEJsb2cga2V5PVwiYmxvZ1wiIHNlYXJjaFBhcmFtcz17c2VhcmNoUGFyYW1zfSAvPlxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZGV2JzpcbiAgICAgICAgbWlkZGxlID0gPERldiBrZXk9XCJkZXZcIiBzZWFyY2hQYXJhbXM9e3NlYXJjaFBhcmFtc30gLz5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3RhZ3MnOlxuICAgICAgICBtaWRkbGUgPSA8VGFnIGtleT1cInRhZ1wiIGlkPXt0YWdPclBvc3RJZH0gc2VhcmNoUGFyYW1zPXtzZWFyY2hQYXJhbXN9IC8+XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBtaWRkbGUgPSA8SG9tZSBrZXk9XCJob21lXCIgLz5cbiAgICB9XG4gICAgcmVzLnB1c2gobWlkZGxlKVxuXG4gICAgcmV0dXJuIChcblxuICAgICAgPEJsb2dQcm92aWRlcj5cbiAgICAgICAgPEdsb2JhbFN0eWxlIC8+XG4gICAgICAgIDxNYWluPlxuICAgICAgICAgIDxOYXZpZ2F0aW9uIGtleT1cIm5hdlwiIHNlY3Rpb249e3NlY3Rpb259IC8+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1haW4tc2l0ZVwiPntyZXN9PC9kaXY+XG4gICAgICAgIDwvTWFpbj5cbiAgICAgIDwvQmxvZ1Byb3ZpZGVyPlxuICAgIClcbiAgfVxuXG59XG5leHBvcnQgZGVmYXVsdCBNYWluQ29udGFpbmVyIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgTWFpbkNvbnRhaW5lciBmcm9tICcuL2NvbXBvbmVudHMvbWFpbidcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCJcblxuY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFpbi1zaXRlXCIpXG53cmFwcGVyID8gUmVhY3RET00ucmVuZGVyKDxNYWluQ29udGFpbmVyIC8+LCB3cmFwcGVyKSA6IGZhbHNlIl0sInNvdXJjZVJvb3QiOiIifQ==